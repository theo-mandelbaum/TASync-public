"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-grids_src_grid_base_util_js-6e64c0ba"],{

/***/ "./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Global: () => (/* binding */ Global),\n/* harmony export */   addBiggerDialog: () => (/* binding */ addBiggerDialog),\n/* harmony export */   addFixedColumnBorder: () => (/* binding */ addFixedColumnBorder),\n/* harmony export */   addRemoveActiveClasses: () => (/* binding */ addRemoveActiveClasses),\n/* harmony export */   addRemoveEventListener: () => (/* binding */ addRemoveEventListener),\n/* harmony export */   addStickyColumnPosition: () => (/* binding */ addStickyColumnPosition),\n/* harmony export */   appendChildren: () => (/* binding */ appendChildren),\n/* harmony export */   applyBiggerTheme: () => (/* binding */ applyBiggerTheme),\n/* harmony export */   applyStickyLeftRightPosition: () => (/* binding */ applyStickyLeftRightPosition),\n/* harmony export */   calculateAggregate: () => (/* binding */ calculateAggregate),\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   checkDepth: () => (/* binding */ checkDepth),\n/* harmony export */   checkIsVirtual: () => (/* binding */ checkIsVirtual),\n/* harmony export */   clearReactVueTemplates: () => (/* binding */ clearReactVueTemplates),\n/* harmony export */   compareChanges: () => (/* binding */ compareChanges),\n/* harmony export */   createCboxWithWrap: () => (/* binding */ createCboxWithWrap),\n/* harmony export */   createEditElement: () => (/* binding */ createEditElement),\n/* harmony export */   distinctStringValues: () => (/* binding */ distinctStringValues),\n/* harmony export */   doesImplementInterface: () => (/* binding */ doesImplementInterface),\n/* harmony export */   ensureFirstRow: () => (/* binding */ ensureFirstRow),\n/* harmony export */   ensureLastRow: () => (/* binding */ ensureLastRow),\n/* harmony export */   eventPromise: () => (/* binding */ eventPromise),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   extendObjWithFn: () => (/* binding */ extendObjWithFn),\n/* harmony export */   findCellIndex: () => (/* binding */ findCellIndex),\n/* harmony export */   frozenDirection: () => (/* binding */ frozenDirection),\n/* harmony export */   generateExpandPredicates: () => (/* binding */ generateExpandPredicates),\n/* harmony export */   getActualPropFromColl: () => (/* binding */ getActualPropFromColl),\n/* harmony export */   getActualProperties: () => (/* binding */ getActualProperties),\n/* harmony export */   getActualRowHeight: () => (/* binding */ getActualRowHeight),\n/* harmony export */   getCellByColAndRowIndex: () => (/* binding */ getCellByColAndRowIndex),\n/* harmony export */   getCellFromRow: () => (/* binding */ getCellFromRow),\n/* harmony export */   getCellsByTableName: () => (/* binding */ getCellsByTableName),\n/* harmony export */   getCollapsedRowsCount: () => (/* binding */ getCollapsedRowsCount),\n/* harmony export */   getColumnByForeignKeyValue: () => (/* binding */ getColumnByForeignKeyValue),\n/* harmony export */   getColumnModelByFieldName: () => (/* binding */ getColumnModelByFieldName),\n/* harmony export */   getColumnModelByUid: () => (/* binding */ getColumnModelByUid),\n/* harmony export */   getComplexFieldID: () => (/* binding */ getComplexFieldID),\n/* harmony export */   getCustomDateFormat: () => (/* binding */ getCustomDateFormat),\n/* harmony export */   getDatePredicate: () => (/* binding */ getDatePredicate),\n/* harmony export */   getEditedDataIndex: () => (/* binding */ getEditedDataIndex),\n/* harmony export */   getElementIndex: () => (/* binding */ getElementIndex),\n/* harmony export */   getExpandedState: () => (/* binding */ getExpandedState),\n/* harmony export */   getFilterMenuPostion: () => (/* binding */ getFilterMenuPostion),\n/* harmony export */   getForeignData: () => (/* binding */ getForeignData),\n/* harmony export */   getGroupKeysAndFields: () => (/* binding */ getGroupKeysAndFields),\n/* harmony export */   getListHeight: () => (/* binding */ getListHeight),\n/* harmony export */   getNumberFormat: () => (/* binding */ getNumberFormat),\n/* harmony export */   getObject: () => (/* binding */ getObject),\n/* harmony export */   getParentIns: () => (/* binding */ getParentIns),\n/* harmony export */   getParsedFieldID: () => (/* binding */ getParsedFieldID),\n/* harmony export */   getPosition: () => (/* binding */ getPosition),\n/* harmony export */   getPredicates: () => (/* binding */ getPredicates),\n/* harmony export */   getPrintGridModel: () => (/* binding */ getPrintGridModel),\n/* harmony export */   getPrototypesOfObj: () => (/* binding */ getPrototypesOfObj),\n/* harmony export */   getRowHeight: () => (/* binding */ getRowHeight),\n/* harmony export */   getRowIndexFromElement: () => (/* binding */ getRowIndexFromElement),\n/* harmony export */   getScrollBarWidth: () => (/* binding */ getScrollBarWidth),\n/* harmony export */   getScrollWidth: () => (/* binding */ getScrollWidth),\n/* harmony export */   getStateEventArgument: () => (/* binding */ getStateEventArgument),\n/* harmony export */   getTransformValues: () => (/* binding */ getTransformValues),\n/* harmony export */   getUid: () => (/* binding */ getUid),\n/* harmony export */   getUpdateUsingRaf: () => (/* binding */ getUpdateUsingRaf),\n/* harmony export */   getVisiblePage: () => (/* binding */ getVisiblePage),\n/* harmony export */   getZIndexCalcualtion: () => (/* binding */ getZIndexCalcualtion),\n/* harmony export */   groupCaptionRowLeftRightPos: () => (/* binding */ groupCaptionRowLeftRightPos),\n/* harmony export */   groupReorderRowObject: () => (/* binding */ groupReorderRowObject),\n/* harmony export */   headerValueAccessor: () => (/* binding */ headerValueAccessor),\n/* harmony export */   inArray: () => (/* binding */ inArray),\n/* harmony export */   infiniteAppendElements: () => (/* binding */ infiniteAppendElements),\n/* harmony export */   infiniteRemoveElements: () => (/* binding */ infiniteRemoveElements),\n/* harmony export */   isActionPrevent: () => (/* binding */ isActionPrevent),\n/* harmony export */   isCellHaveWidth: () => (/* binding */ isCellHaveWidth),\n/* harmony export */   isChildColumn: () => (/* binding */ isChildColumn),\n/* harmony export */   isComplexField: () => (/* binding */ isComplexField),\n/* harmony export */   isEditable: () => (/* binding */ isEditable),\n/* harmony export */   isExportColumns: () => (/* binding */ isExportColumns),\n/* harmony export */   isGroupAdaptive: () => (/* binding */ isGroupAdaptive),\n/* harmony export */   isRowEnteredInGrid: () => (/* binding */ isRowEnteredInGrid),\n/* harmony export */   ispercentageWidth: () => (/* binding */ ispercentageWidth),\n/* harmony export */   iterateArrayOrObject: () => (/* binding */ iterateArrayOrObject),\n/* harmony export */   iterateExtend: () => (/* binding */ iterateExtend),\n/* harmony export */   measureColumnDepth: () => (/* binding */ measureColumnDepth),\n/* harmony export */   padZero: () => (/* binding */ padZero),\n/* harmony export */   parents: () => (/* binding */ parents),\n/* harmony export */   parentsUntil: () => (/* binding */ parentsUntil),\n/* harmony export */   performComplexDataOperation: () => (/* binding */ performComplexDataOperation),\n/* harmony export */   prepareColumns: () => (/* binding */ prepareColumns),\n/* harmony export */   pushuid: () => (/* binding */ pushuid),\n/* harmony export */   recursive: () => (/* binding */ recursive),\n/* harmony export */   refreshFilteredColsUid: () => (/* binding */ refreshFilteredColsUid),\n/* harmony export */   refreshForeignData: () => (/* binding */ refreshForeignData),\n/* harmony export */   registerEventHandlers: () => (/* binding */ registerEventHandlers),\n/* harmony export */   removeAddCboxClasses: () => (/* binding */ removeAddCboxClasses),\n/* harmony export */   removeElement: () => (/* binding */ removeElement),\n/* harmony export */   removeEventHandlers: () => (/* binding */ removeEventHandlers),\n/* harmony export */   resetCachedRowIndex: () => (/* binding */ resetCachedRowIndex),\n/* harmony export */   resetColandRowSpanStickyPosition: () => (/* binding */ resetColandRowSpanStickyPosition),\n/* harmony export */   resetColspanGroupCaption: () => (/* binding */ resetColspanGroupCaption),\n/* harmony export */   resetDialogAppend: () => (/* binding */ resetDialogAppend),\n/* harmony export */   resetRowIndex: () => (/* binding */ resetRowIndex),\n/* harmony export */   setChecked: () => (/* binding */ setChecked),\n/* harmony export */   setColumnIndex: () => (/* binding */ setColumnIndex),\n/* harmony export */   setComplexFieldID: () => (/* binding */ setComplexFieldID),\n/* harmony export */   setCssInGridPopUp: () => (/* binding */ setCssInGridPopUp),\n/* harmony export */   setDisplayValue: () => (/* binding */ setDisplayValue),\n/* harmony export */   setFormatter: () => (/* binding */ setFormatter),\n/* harmony export */   setRowElements: () => (/* binding */ setRowElements),\n/* harmony export */   setStyleAndAttributes: () => (/* binding */ setStyleAndAttributes),\n/* harmony export */   setValidationRuels: () => (/* binding */ setValidationRuels),\n/* harmony export */   sliceElements: () => (/* binding */ sliceElements),\n/* harmony export */   templateCompiler: () => (/* binding */ templateCompiler),\n/* harmony export */   toggleFilterUI: () => (/* binding */ toggleFilterUI),\n/* harmony export */   toogleCheckbox: () => (/* binding */ toogleCheckbox),\n/* harmony export */   updateColumnTypeForExportColumns: () => (/* binding */ updateColumnTypeForExportColumns),\n/* harmony export */   updatecloneRow: () => (/* binding */ updatecloneRow),\n/* harmony export */   valueAccessor: () => (/* binding */ valueAccessor),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _models_column__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/column */ \"./node_modules/@syncfusion/ej2-grids/src/grid/models/column.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _actions_print__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../actions/print */ \"./node_modules/@syncfusion/ej2-grids/src/grid/actions/print.js\");\n/* harmony import */ var _common_checkbox_filter_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/checkbox-filter-base */ \"./node_modules/@syncfusion/ej2-grids/src/grid/common/checkbox-filter-base.js\");\n/* harmony import */ var _base_string_literals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base/string-literals */ \"./node_modules/@syncfusion/ej2-grids/src/grid/base/string-literals.js\");\n\n\n\n\n\n\n\n\n\n\n//https://typescript.codeplex.com/discussions/401501\n/**\n * Function to check whether target object implement specific interface\n *\n * @param  {Object} target - specifies the target\n * @param  {string} checkFor - specifies the checkfors\n * @returns {boolean} returns the boolean\n * @hidden\n */\nfunction doesImplementInterface(target, checkFor) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return target.prototype && checkFor in target.prototype;\n}\n/**\n * Function to get value from provided data\n *\n * @param  {string} field - specifies the field\n * @param  {Object} data - specifies the data\n * @param  {ColumnModel} column - specifies the column\n * @returns {Object} returns the object\n * @hidden\n */\n// eslint-disable-next-line\nfunction valueAccessor(field, data, column) {\n    return ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) || field === '') ? '' : _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.getObject(field, data);\n}\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each header cell rendered.\n *\n * @param  {string} field - specifies the field\n * @param  {ColumnModel} column - specifies the column\n * @returns {object} headerValueAccessor\n * @hidden\n */\nfunction headerValueAccessor(field, column) {\n    return ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) || field === '') ? '' : _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.getObject(field, column);\n}\n/**\n * The function used to update Dom using requestAnimationFrame.\n *\n * @param {Function} updateFunction - Function that contains the actual action\n * @param {object} callBack - defines the callback\n * @returns {void}\n * @hidden\n */\n// eslint-disable-next-line\nfunction getUpdateUsingRaf(updateFunction, callBack) {\n    requestAnimationFrame(function () {\n        try {\n            callBack(null, updateFunction());\n        }\n        catch (e) {\n            callBack(e);\n        }\n    });\n}\n/**\n * @hidden\n * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties\n * @returns {boolean} Returns isExportColumns\n */\nfunction isExportColumns(exportProperties) {\n    return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(exportProperties) &&\n        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(exportProperties.columns) && exportProperties.columns.length > 0;\n}\n/**\n * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties\n * @param {IGrid} gObj - Defines the grid object\n * @returns {void}\n * @hidden\n */\nfunction updateColumnTypeForExportColumns(exportProperties, gObj) {\n    var exportColumns = exportProperties.columns;\n    var gridColumns = gObj.columns;\n    for (var i = 0; i < exportColumns.length; i++) {\n        if (gridColumns.length - 1 >= i) {\n            if (gridColumns[parseInt(i.toString(), 10)].columns) {\n                for (var j = 0; j < gridColumns[parseInt(i.toString(), 10)].columns.length; j++) {\n                    exportColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)]\n                        .type = gridColumns[parseInt(i.toString(), 10)].columns[parseInt(j.toString(), 10)].type;\n                }\n            }\n            else {\n                exportColumns[parseInt(i.toString(), 10)].type = gridColumns[parseInt(i.toString(), 10)].type;\n            }\n        }\n    }\n}\n/**\n * @hidden\n * @param {IGrid} grid - Defines the grid\n * @returns {void}\n */\nfunction updatecloneRow(grid) {\n    var nRows = [];\n    var actualRows = grid.vRows;\n    for (var i = 0; i < actualRows.length; i++) {\n        if (actualRows[parseInt(i.toString(), 10)].isDataRow) {\n            nRows.push(actualRows[parseInt(i.toString(), 10)]);\n        }\n        else if (!actualRows[parseInt(i.toString(), 10)].isDataRow) {\n            nRows.push(actualRows[parseInt(i.toString(), 10)]);\n            if (!actualRows[parseInt(i.toString(), 10)].isExpand && actualRows[parseInt(i.toString(), 10)].isCaptionRow) {\n                i += getCollapsedRowsCount(actualRows[parseInt(i.toString(), 10)], grid);\n            }\n        }\n    }\n    grid.vcRows = nRows;\n}\nvar count = 0;\n/**\n * @hidden\n * @param {Row<Column>} val - Defines the value\n * @param {IGrid} grid - Defines the grid\n * @returns {number} Returns the collapsed row count\n */\nfunction getCollapsedRowsCount(val, grid) {\n    count = 0;\n    var gSummary = 'gSummary';\n    var total = 'count';\n    var gLen = grid.groupSettings.columns.length;\n    var records = 'records';\n    var items = 'items';\n    var value = val[\"\" + gSummary];\n    var dataRowCnt = 0;\n    var agrCnt = 'aggregatesCount';\n    if (value === val.data[\"\" + total]) {\n        if (grid.groupSettings.columns.length && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(val[\"\" + agrCnt]) && val[\"\" + agrCnt]) {\n            if (grid.groupSettings.columns.length !== 1) {\n                count += (val.indent !== 0 && (value) < 2) ? (val[\"\" + gSummary] * ((gLen - val.indent) + (gLen - val.indent) * val[\"\" + agrCnt])) :\n                    (val[\"\" + gSummary] * ((gLen - val.indent) + (gLen - val.indent - 1) * val[\"\" + agrCnt])) + val[\"\" + agrCnt];\n            }\n            else if (grid.groupSettings.columns.length === 1) {\n                count += (val[\"\" + gSummary] * (gLen - val.indent)) + val[\"\" + agrCnt];\n            }\n        }\n        else if (grid.groupSettings.columns.length) {\n            if (grid.groupSettings.columns.length !== 1) {\n                count += val[\"\" + gSummary] * (grid.groupSettings.columns.length - val.indent);\n            }\n            else {\n                count += val[\"\" + gSummary];\n            }\n        }\n        return count;\n    }\n    else {\n        for (var i = 0, len = val.data[\"\" + items].length; i < len; i++) {\n            var gLevel = val.data[\"\" + items][parseInt(i.toString(), 10)];\n            count += gLevel[\"\" + items].length + ((gLen !== grid.columns.length) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gLevel[\"\" + items][\"\" + records]) ? gLevel[\"\" + items][\"\" + records].length : 0);\n            dataRowCnt += (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gLevel[\"\" + items][\"\" + records]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(val[\"\" + agrCnt])) ? gLevel[\"\" + items][\"\" + records].length :\n                gLevel[\"\" + items].length;\n            if (gLevel[\"\" + items].GroupGuid && gLevel[\"\" + items].childLevels !== 0) {\n                recursive(gLevel);\n            }\n        }\n        count += val.data[\"\" + items].length;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(val[\"\" + agrCnt])) {\n            if (val[\"\" + agrCnt] && count && dataRowCnt !== 0) {\n                count += ((count - dataRowCnt) * val[\"\" + agrCnt]) + val[\"\" + agrCnt];\n            }\n        }\n    }\n    return count;\n}\n/**\n * @param {Object[]} row - Defines the row\n * @returns {void}\n * @hidden\n */\nfunction recursive(row) {\n    var items = 'items';\n    var rCount = 'count';\n    for (var j = 0, length_1 = row[\"\" + items].length; j < length_1; j++) {\n        var nLevel = row[\"\" + items][parseInt(j.toString(), 10)];\n        count += nLevel[\"\" + rCount];\n        if (nLevel[\"\" + items].childLevels !== 0) {\n            recursive(nLevel);\n        }\n    }\n}\n/**\n * @param {Object[]} collection - Defines the array\n * @param {Object} predicate - Defines the predicate\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction iterateArrayOrObject(collection, predicate) {\n    var result = [];\n    for (var i = 0, len = collection.length; i < len; i++) {\n        var pred = predicate(collection[parseInt(i.toString(), 10)], i);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pred)) {\n            result.push(pred);\n        }\n    }\n    return result;\n}\n/**\n * @param {Object[]} array - Defines the array\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction iterateExtend(array) {\n    var obj = [];\n    for (var i = 0; i < array.length; i++) {\n        obj.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, getActualProperties(array[parseInt(i.toString(), 10)]), {}, true));\n    }\n    return obj;\n}\n/**\n * @param {string | Function} template - Defines the template\n * @returns {Function} Returns the function\n * @hidden\n */\nfunction templateCompiler(template) {\n    if (template) {\n        try {\n            var validSelector = template[0] !== '<';\n            if (typeof template === 'function') {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n            else if (validSelector && document.querySelectorAll(template).length) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n            }\n            else {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        catch (e) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n        }\n    }\n    return undefined;\n}\n/**\n * @param {Element} node - Defines the column\n * @param {Object} customAttributes - Defines the index\n * @returns {void}\n * @hidden\n */\nfunction setStyleAndAttributes(node, customAttributes) {\n    var copyAttr = {};\n    var literals = ['style', 'class'];\n    //Dont touch the original object - make a copy\n    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(copyAttr, customAttributes, {});\n    if ('style' in copyAttr) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(node, copyAttr[literals[0]]);\n        delete copyAttr[literals[0]];\n    }\n    if ('class' in copyAttr) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([node], copyAttr[literals[1]]);\n        delete copyAttr[literals[1]];\n    }\n    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(node, copyAttr);\n}\n/**\n * @param {Object} copied - Defines the column\n * @param {Object} first - Defines the inndex\n * @param {Object} second - Defines the second object\n * @param {string[]} exclude - Defines the exclude\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction extend(copied, first, second, exclude) {\n    var moved = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(copied, first, second);\n    var values = Object.keys(moved);\n    for (var i = 0; i < values.length; i++) {\n        if (exclude && exclude.indexOf(values[parseInt(i.toString(), 10)]) !== -1) {\n            delete moved[values[parseInt(i.toString(), 10)]];\n        }\n    }\n    return moved;\n}\n/**\n * @param {Column[]} columnModel - Defines the column\n * @param {number} ind - Defines the inndex\n * @returns {number} - Returns the columnindex\n * @hidden\n */\nfunction setColumnIndex(columnModel, ind) {\n    if (ind === void 0) { ind = 0; }\n    for (var i = 0, len = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columnModel) ? columnModel.length : 0); i < len; i++) {\n        if (columnModel[parseInt(i.toString(), 10)].columns) {\n            columnModel[parseInt(i.toString(), 10)].index = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columnModel[parseInt(i.toString(), 10)].index) ? ind\n                : columnModel[parseInt(i.toString(), 10)].index;\n            ind++;\n            ind = setColumnIndex(columnModel[parseInt(i.toString(), 10)].columns, ind);\n        }\n        else {\n            columnModel[parseInt(i.toString(), 10)].index = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columnModel[parseInt(i.toString(), 10)].index) ? ind\n                : columnModel[parseInt(i.toString(), 10)].index;\n            ind++;\n        }\n    }\n    return ind;\n}\n/**\n * @param {Column[] | string[] | ColumnModel[]} columns - Defines the column\n * @param {boolean} autoWidth - Defines the autowidth\n * @param {IGrid} gObj - Defines the class name\n * @returns {Column} - Returns the columns\n * @hidden\n */\nfunction prepareColumns(columns, autoWidth, gObj) {\n    for (var c = 0, len = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns) ? columns.length : 0); c < len; c++) {\n        var column = void 0;\n        if (typeof columns[parseInt(c.toString(), 10)] === 'string') {\n            column = new _models_column__WEBPACK_IMPORTED_MODULE_2__.Column({ field: columns[parseInt(c.toString(), 10)] }, gObj);\n        }\n        else if (!(columns[parseInt(c.toString(), 10)] instanceof _models_column__WEBPACK_IMPORTED_MODULE_2__.Column) || columns[parseInt(c.toString(), 10)].columns) {\n            if (!columns[parseInt(c.toString(), 10)].columns) {\n                column = new _models_column__WEBPACK_IMPORTED_MODULE_2__.Column(columns[parseInt(c.toString(), 10)], gObj);\n            }\n            else {\n                columns[parseInt(c.toString(), 10)].columns = prepareColumns(columns[parseInt(c.toString(), 10)].columns, null, gObj);\n                column = new _models_column__WEBPACK_IMPORTED_MODULE_2__.Column(columns[parseInt(c.toString(), 10)], gObj);\n            }\n        }\n        else {\n            column = columns[parseInt(c.toString(), 10)];\n        }\n        if (column.type && column.type.toLowerCase() === 'checkbox') {\n            column.allowReordering = false;\n        }\n        column.headerText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.headerText) ? column.foreignKeyValue || column.field || '' : column.headerText;\n        column.foreignKeyField = column.foreignKeyField || column.field;\n        column.valueAccessor = (typeof column.valueAccessor === 'string' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(column.valueAccessor, window)\n            : column.valueAccessor) || valueAccessor;\n        column.headerValueAccessor = typeof column.headerValueAccessor === 'string' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(column.headerValueAccessor, window)\n            : column.headerValueAccessor;\n        column.width = autoWidth && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.width) ? 200 : column.width;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.visible)) {\n            column.visible = true;\n        }\n        columns[parseInt(c.toString(), 10)] = column;\n    }\n    return columns;\n}\n/**\n * @param {HTMLElement} popUp - Defines the popup element\n * @param {MouseEvent | TouchEvent} e - Defines the moouse event\n * @param {string} className - Defines the class name\n * @returns {void}\n * @hidden\n */\nfunction setCssInGridPopUp(popUp, e, className) {\n    var popUpSpan = popUp.querySelector('span');\n    var position = popUp.parentElement.getBoundingClientRect();\n    var targetPosition = e.target.getBoundingClientRect();\n    popUpSpan.className = className;\n    popUp.style.display = '';\n    var isBottomTail = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.clientY) ? e.changedTouches[0].clientY :\n        e.clientY) > popUp.offsetHeight + 10;\n    popUp.style.top = targetPosition.top - position.top +\n        (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + 'px'; //10px for tail element\n    popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + 'px';\n    if (isBottomTail) {\n        popUp.querySelector('.e-downtail').style.display = '';\n        popUp.querySelector('.e-uptail').style.display = 'none';\n    }\n    else {\n        popUp.querySelector('.e-downtail').style.display = 'none';\n        popUp.querySelector('.e-uptail').style.display = '';\n    }\n}\n/**\n * @param {HTMLElement} popup - Defines the popup element\n * @param {MouseEvent | TouchEvent} e  - Defines the mouse event\n * @param {Object} targetPosition - Defines the target position\n * @param {number} targetPosition.top - Defines the top position\n * @param {number} targetPosition.left  - Defines the left position\n * @param {number} targetPosition.right  - Defines the right position\n * @param {number} left - Defines the left position\n * @returns {number} Returns the popup left position\n * @hidden\n */\nfunction getPopupLeftPosition(popup, e, targetPosition, left) {\n    var width = popup.offsetWidth / 2;\n    var x = getPosition(e).x;\n    if (x - targetPosition.left < width) {\n        return targetPosition.left - left;\n    }\n    else if (targetPosition.right - x < width) {\n        return targetPosition.right - left - width * 2;\n    }\n    else {\n        return x - left - width;\n    }\n}\n/**\n * @param {Object} obj - Defines the object\n * @returns {Object} Returns the Properties\n * @hidden\n */\nfunction getActualProperties(obj) {\n    if (obj instanceof _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty) {\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('properties', obj);\n    }\n    else {\n        return obj;\n    }\n}\n/**\n * @param {Element} elem - Defines the element\n * @param {string} selector - Defines the string selector\n * @param {boolean} isID - Defines the isID\n * @returns {Element} Returns the element\n * @hidden\n */\nfunction parentsUntil(elem, selector, isID) {\n    var parent = elem;\n    while (parent) {\n        if (isID ? parent.id === selector : parent.classList.contains(selector)) {\n            break;\n        }\n        parent = parent.parentElement;\n    }\n    return parent;\n}\n/**\n * @param {Element} element - Defines the element\n * @param {Element} elements - Defines the element\n * @returns {number} Returns the element index\n * @hidden\n */\nfunction getElementIndex(element, elements) {\n    var index = -1;\n    for (var i = 0, len = elements.length; i < len; i++) {\n        if (elements[parseInt(i.toString(), 10)].isEqualNode(element)) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n/**\n * @param {Object} value - Defines the value\n * @param {Object} collection - defines the collection\n * @returns {number} Returns the array\n * @hidden\n */\nfunction inArray(value, collection) {\n    for (var i = 0, len = collection.length; i < len; i++) {\n        if (collection[parseInt(i.toString(), 10)] === value) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {Object} collection - Defines the collection\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction getActualPropFromColl(collection) {\n    var coll = [];\n    for (var i = 0, len = collection.length; i < len; i++) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (collection[parseInt(i.toString(), 10)].hasOwnProperty('properties')) {\n            coll.push(collection[parseInt(i.toString(), 10)].properties);\n        }\n        else {\n            coll.push(collection[parseInt(i.toString(), 10)]);\n        }\n    }\n    return coll;\n}\n/**\n * @param {Element} target - Defines the target element\n * @param {string} selector - Defines the selector\n * @returns {void}\n * @hidden\n */\nfunction removeElement(target, selector) {\n    var elements = [].slice.call(target.querySelectorAll(selector));\n    for (var i = 0; i < elements.length; i++) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(elements[parseInt(i.toString(), 10)]);\n    }\n}\n/**\n * @param {MouseEvent | TouchEvent} e Defines the mouse event\n * @returns {IPosition} Returns the position\n * @hidden\n */\nfunction getPosition(e) {\n    var position = {};\n    position.x = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.clientX) ? e.changedTouches[0].clientX :\n        e.clientX);\n    position.y = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.clientY) ? e.changedTouches[0].clientY :\n        e.clientY);\n    return position;\n}\nvar uid = 0;\n/**\n * @param {string} prefix - Defines the prefix string\n * @returns {string} Returns the uid\n * @hidden\n */\nfunction getUid(prefix) {\n    return prefix + uid++;\n}\n/**\n * @param {Element | DocumentFragment} elem - Defines the element\n * @param {Element[] | NodeList} children - Defines the Element\n * @returns {Element} Returns the element\n * @hidden\n */\nfunction appendChildren(elem, children) {\n    for (var i = 0, len = children.length; i < len; i++) {\n        if (len === children.length) {\n            elem.appendChild(children[parseInt(i.toString(), 10)]);\n        }\n        else {\n            elem.appendChild(children[0]);\n        }\n    }\n    return elem;\n}\n/**\n * @param {Element} elem - Defines the element\n * @param {string} selector - Defines the selector\n * @param {boolean} isID - Defines isID\n * @returns {Element} Return the element\n * @hidden\n */\nfunction parents(elem, selector, isID) {\n    var parent = elem;\n    var parents = [];\n    while (parent) {\n        if (isID ? parent.id === selector : parent.classList.contains(selector)) {\n            parents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    return parents;\n}\n/**\n * @param {AggregateType | string} type - Defines the type\n * @param {Object} data - Defines the data\n * @param {AggregateColumnModel} column - Defines the column\n * @param {Object} context - Defines the context\n * @returns {Object} Returns the calculated aggragate\n * @hidden\n */\nfunction calculateAggregate(type, data, column, context) {\n    if (type === 'Custom') {\n        var temp = column.customAggregate;\n        if (typeof temp === 'string') {\n            temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(temp, window);\n        }\n        return temp ? temp.call(context, data, column) : '';\n    }\n    return (column.field in data || data instanceof Array) ? _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;\n}\n/** @hidden */\nvar scrollWidth = null;\n/** @hidden\n * @returns {number} - Returns the scrollbarwidth\n */\nfunction getScrollBarWidth() {\n    if (scrollWidth !== null) {\n        return scrollWidth;\n    }\n    var divNode = document.createElement('div');\n    var value = 0;\n    divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';\n    document.body.appendChild(divNode);\n    value = (divNode.offsetWidth - divNode.clientWidth) | 0;\n    document.body.removeChild(divNode);\n    return scrollWidth = value;\n}\n/** @hidden */\nvar rowHeight;\n/**\n * @param {HTMLElement} element - Defines the element\n * @returns {number} Returns the roww height\n * @hidden\n */\nfunction getRowHeight(element) {\n    if (rowHeight !== undefined) {\n        return rowHeight;\n    }\n    var table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('table', { className: _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.table, attrs: { role: 'grid' } });\n    table.style.visibility = 'hidden';\n    table.innerHTML = '<tr><td class=\"e-rowcell\">A<td></tr>';\n    element.appendChild(table);\n    var rect = table.querySelector('td').getBoundingClientRect();\n    element.removeChild(table);\n    rowHeight = Math.ceil(rect.height);\n    return rowHeight;\n}\n/**\n * @param {HTMLElement} element - Defines the HTMl element\n * @returns {number} Returns the row height\n * @hidden\n */\nfunction getActualRowHeight(element) {\n    var table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('table', { className: _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.table, attrs: { role: 'grid' } });\n    table.style.visibility = 'hidden';\n    table.innerHTML = '<tr><td class=\"e-rowcell\">A<td></tr>';\n    element.appendChild(table);\n    var rect = table.querySelector('tr').getBoundingClientRect();\n    element.removeChild(table);\n    return rect.height;\n}\n/**\n * @param {string} field - Defines the field\n * @returns {boolean} - Returns is complex field\n * @hidden\n */\nfunction isComplexField(field) {\n    return field.split('.').length > 1;\n}\n/**\n * @param {string} field - Defines the field\n * @returns {string} - Returns the get complex field ID\n * @hidden\n */\nfunction getComplexFieldID(field) {\n    if (field === void 0) { field = ''; }\n    return field.replace(/\\./g, '___');\n}\n/**\n * @param {string} field - Defines the field\n * @returns {string} - Returns the parsed column field id\n * @hidden\n */\nfunction getParsedFieldID(field) {\n    if (field === void 0) { field = ''; }\n    return field.replace(/[^a-zA-Z0-9_.]/g, '\\\\$&');\n}\n/**\n * @param {string} field - Defines the field\n * @returns {string} - Returns the set complex field ID\n * @hidden\n */\nfunction setComplexFieldID(field) {\n    if (field === void 0) { field = ''; }\n    return field.replace(/___/g, '.');\n}\n/**\n * @param {Column} col - Defines the column\n * @param {string} type - Defines the type\n * @param {Element} elem - Defines th element\n * @returns {boolean} Returns is Editable\n * @hidden\n */\nfunction isEditable(col, type, elem) {\n    var row = parentsUntil(elem, _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.row);\n    var isOldRow = !row ? true : row && !row.classList.contains('e-insertedrow');\n    if (type === 'beginEdit' && isOldRow) {\n        if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {\n            return false;\n        }\n        return true;\n    }\n    else if (type === 'add' && col.isIdentity) {\n        return false;\n    }\n    else {\n        if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {\n            return false;\n        }\n        return true;\n    }\n}\n/**\n * @param {Element} elem - Defines th element\n * @returns {boolean} Returns is Editable\n * @hidden\n */\nfunction isCellHaveWidth(elem) {\n    return elem.getBoundingClientRect().width === 0 ? false : true;\n}\n/**\n * @param {IGrid} inst - Defines the IGrid\n * @returns {boolean} Returns is action prevent in boolean\n * @hidden\n */\nfunction isActionPrevent(inst) {\n    var dlg = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + inst.element.id + 'EditConfirm', inst.element);\n    return inst.editSettings.mode === 'Batch' &&\n        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-updatedtd', inst.element).length || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-gridform.e-formvalidator', inst.element).length)\n        && inst.editSettings.showConfirmDialog && (dlg ? dlg.classList.contains('e-popup-close') : true);\n}\n/**\n * @param {any} elem - Defines the element\n * @param {boolean} action - Defines the boolean for action\n * @returns {void}\n * @hidden\n */\n// eslint-disable-next-line\nfunction wrap(elem, action) {\n    var clName = 'e-wrap';\n    elem = elem instanceof Array ? elem : [elem];\n    for (var i = 0; i < elem.length; i++) {\n        if (action) {\n            elem[parseInt(i.toString(), 10)].classList.add(clName);\n        }\n        else {\n            elem[parseInt(i.toString(), 10)].classList.remove(clName);\n        }\n    }\n}\n/**\n * @param {ServiceLocator} serviceLocator - Defines the service locator\n * @param {Column} column  - Defines the column\n * @returns {void}\n * @hidden\n */\nfunction setFormatter(serviceLocator, column) {\n    var fmtr = serviceLocator.getService('valueFormatter');\n    var format = 'format';\n    var args;\n    if (column.type === 'date' || column.type === 'datetime' || column.type === 'dateonly') {\n        args = { type: column.type === 'dateonly' ? 'date' : column.type, skeleton: column.format };\n        if ((typeof (column.format) === 'string') && column.format !== 'yMd') {\n            args[\"\" + format] = column.format;\n        }\n    }\n    switch (column.type) {\n        case 'date':\n            column.setFormatter(fmtr.getFormatFunction(args));\n            column.setParser(fmtr.getParserFunction(args));\n            break;\n        case 'dateonly':\n            column.setFormatter(fmtr.getFormatFunction(args));\n            column.setParser(fmtr.getParserFunction(args));\n            break;\n        case 'datetime':\n            column.setFormatter(fmtr.getFormatFunction(args));\n            column.setParser(fmtr.getParserFunction(args));\n            break;\n        case 'number':\n            column.setFormatter(fmtr.getFormatFunction({ format: column.format }));\n            column.setParser(fmtr.getParserFunction({ format: column.format }));\n            break;\n    }\n}\n/**\n * @param {Element} cells - Defines the cell element\n * @param {boolean} add - Defines the add\n * @param {string} args - Defines the args\n * @returns {void}\n * @hidden\n */\nfunction addRemoveActiveClasses(cells, add) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    for (var i = 0, len = cells.length; i < len; i++) {\n        if (add) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(cells[parseInt(i.toString(), 10)], args.slice(), []);\n            cells[parseInt(i.toString(), 10)].setAttribute('aria-selected', 'true');\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(cells[parseInt(i.toString(), 10)], [], args.slice());\n            cells[parseInt(i.toString(), 10)].removeAttribute('aria-selected');\n        }\n    }\n}\n/**\n * @param {string} result - Defines th string\n * @returns {string} Returns the distinct staing values\n * @hidden\n */\nfunction distinctStringValues(result) {\n    var temp = {};\n    var res = [];\n    for (var i = 0; i < result.length; i++) {\n        if (!(result[parseInt(i.toString(), 10)] in temp)) {\n            res.push(result[parseInt(i.toString(), 10)].toString());\n            temp[result[parseInt(i.toString(), 10)]] = 1;\n        }\n    }\n    return res;\n}\n/**\n * @param {Element} target - Defines the target\n * @param {Dialog} dialogObj - Defines the dialog\n * @returns {void}\n * @hidden\n */\nfunction getFilterMenuPostion(target, dialogObj) {\n    var elementVisible = dialogObj.element.style.display;\n    dialogObj.element.style.display = 'block';\n    var dlgWidth = dialogObj.width;\n    var newpos = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.calculateRelativeBasedPosition)(target, dialogObj.element);\n    dialogObj.element.style.display = elementVisible;\n    dialogObj.element.style.top = (newpos.top + target.getBoundingClientRect().height) - 5 + 'px';\n    var leftPos = ((newpos.left - dlgWidth) + target.clientWidth);\n    if (leftPos < 1) {\n        dialogObj.element.style.left = (dlgWidth + leftPos) - 16 + 'px'; // right calculation\n    }\n    else {\n        dialogObj.element.style.left = leftPos + -4 + 'px';\n    }\n}\n/**\n * @param {Object} args - Defines the args\n * @param {Popup} args.popup - Defines the args for popup\n * @param {Dialog} dialogObj - Defines the dialog obj\n * @returns {void}\n * @hidden\n */\nfunction getZIndexCalcualtion(args, dialogObj) {\n    args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();\n}\n/**\n * @param {string} operator - Defines the operator\n * @param {string} columnUid - Defines the column uid\n * @param {Column} column - Defines the column\n * @param {string} columnType - Defines the column type\n * @param {Dialog} dlgObj - Defines the dialog\n * @param {string} previousValue - Defines the previous operator\n * @returns {void}\n * @hidden\n */\nfunction toggleFilterUI(operator, columnUid, column, columnType, dlgObj, previousValue) {\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column.filterTemplate)) {\n        var columnID = '';\n        if (columnType === 'string') {\n            columnID = 'strui-' + columnUid;\n        }\n        else if (columnType === 'number') {\n            columnID = 'numberui-' + columnUid;\n        }\n        else if (columnType === 'boolean') {\n            columnID = 'bool-ui-' + columnUid;\n        }\n        else if (columnType === 'date') {\n            columnID = 'dateui-' + columnUid;\n        }\n        var isPreviousValue = previousValue === 'in' || previousValue === 'notin';\n        var isMultiSelect = operator === 'in' || operator === 'notin';\n        var multiselectParent = parentsUntil(dlgObj.element.querySelector(\"#multiselect\" + columnID), 'e-control-wrapper');\n        var singleInputParent = parentsUntil(dlgObj.element.querySelector(\"#\" + columnID), 'e-popup-flmenu');\n        if (multiselectParent) {\n            multiselectParent.style.display = isMultiSelect ? 'inline-flex' : 'none';\n        }\n        if (singleInputParent) {\n            singleInputParent.style.display = isMultiSelect ? 'none' : 'inline-flex';\n        }\n    }\n}\n/**\n * @param {Element} elem - Defines the element\n * @returns {void}\n * @hidden\n */\nfunction toogleCheckbox(elem) {\n    var span = elem.querySelector('.e-frame');\n    var input = span.previousSibling;\n    if (span.classList.contains('e-check')) {\n        input.checked = false;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(span, ['e-uncheck'], ['e-check']);\n    }\n    else {\n        input.checked = true;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(span, ['e-check'], ['e-uncheck']);\n    }\n}\n/**\n * @param {HTMLInputElement} elem - Defines the element\n * @param {boolean} checked - Defines is checked\n * @returns {void}\n * @hidden\n */\nfunction setChecked(elem, checked) {\n    elem.checked = checked;\n}\n/**\n * @param {string} uid - Defines the string\n * @param {Element} elem - Defines the Element\n * @param {string} className - Defines the classname\n * @returns {Element} Returns the box wrap\n * @hidden\n */\nfunction createCboxWithWrap(uid, elem, className) {\n    var div = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: className });\n    div.appendChild(elem);\n    div.setAttribute('uid', uid);\n    return div;\n}\n/**\n * @param {Element} elem - Defines the element\n * @param {boolean} checked - Defines is checked\n * @returns {void}\n * @hidden\n */\nfunction removeAddCboxClasses(elem, checked) {\n    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([elem], ['e-check', 'e-stop', 'e-uncheck']);\n    if (checked) {\n        elem.classList.add('e-check');\n    }\n    else {\n        elem.classList.add('e-uncheck');\n    }\n}\n/**\n * Refresh the Row model's foreign data.\n *\n * @param {IRow<Column>} row - Grid Row model object.\n * @param {Column[]} columns - Foreign columns array.\n * @param {Object} data - Updated Row data.\n * @returns {void}\n * @hidden\n */\nfunction refreshForeignData(row, columns, data) {\n    for (var i = 0; i < (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(columns) ? columns.length : 0); i++) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(columns[parseInt(i.toString(), 10)].field, getForeignData(columns[parseInt(i.toString(), 10)], data), row.foreignKeyData);\n    }\n    var cells = row.cells;\n    for (var i = 0; i < cells.length; i++) {\n        if (cells[parseInt(i.toString(), 10)].isForeignKey) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('foreignKeyData', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(cells[parseInt(i.toString(), 10)].column.field, row.foreignKeyData), cells[parseInt(i.toString(), 10)]);\n        }\n    }\n}\n/**\n * Get the foreign data for the corresponding cell value.\n *\n * @param {Column} column - Foreign Key column\n * @param {Object} data - Row data.\n * @param {string | number} lValue - cell value.\n * @param {Object} foreignKeyData - foreign data source.\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction getForeignData(column, data, lValue, foreignKeyData) {\n    var fField = column.foreignKeyField;\n    var key = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lValue) ? lValue : valueAccessor(column.field, data, column));\n    key = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(key) ? '' : key;\n    var query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query();\n    var fdata = foreignKeyData || ((column.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) && column.dataSource.dataSource.json.length ?\n        column.dataSource.dataSource.json : column.columnData);\n    if (key.getDay) {\n        query.where(getDatePredicate({ field: fField, operator: 'equal', value: key, matchCase: false }));\n    }\n    else {\n        query.where(fField, '==', key, false);\n    }\n    return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(fdata).executeLocal(query);\n}\n/**\n * To use to get the column's object by the foreign key value.\n *\n * @param {string} foreignKeyValue - Defines ForeignKeyValue.\n * @param {Column[]} columns - Array of column object.\n * @returns {Column} Returns the element\n * @hidden\n */\nfunction getColumnByForeignKeyValue(foreignKeyValue, columns) {\n    var column;\n    return columns.some(function (col) {\n        column = col;\n        return col.foreignKeyValue === foreignKeyValue;\n    }) && column;\n}\n/**\n * @param {number} value - Defines the date or month value\n * @returns {string} Returns string\n * @hidden\n */\nfunction padZero(value) {\n    if (value < 10) {\n        return '0' + value;\n    }\n    return String(value);\n}\n/**\n * @param {PredicateModel} filterObject - Defines the filterObject\n * @param {string} type - Defines the type\n * @param {boolean} isExecuteLocal - Defines whether the data actions performed in client and used for dateonly type field\n * @returns {Predicate} Returns the Predicate\n * @hidden\n */\nfunction getDatePredicate(filterObject, type, isExecuteLocal) {\n    var datePredicate;\n    var prevDate;\n    var nextDate;\n    var prevObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, getActualProperties(filterObject));\n    var nextObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, getActualProperties(filterObject));\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(filterObject.value) || filterObject.value === '') {\n        datePredicate = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n        return datePredicate;\n    }\n    var value = new Date(filterObject.value);\n    if (type === 'dateonly' && !isExecuteLocal) {\n        if (typeof (prevObj.value) === 'string') {\n            prevObj.value = new Date(prevObj.value);\n        }\n        var dateOnlyString = prevObj.value.getFullYear() + '-' + padZero(prevObj.value.getMonth() + 1) + '-' + padZero(prevObj.value.getDate());\n        var predicates = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Predicate(prevObj.field, prevObj.operator, dateOnlyString, false);\n        datePredicate = predicates;\n    }\n    else {\n        filterObject.operator = filterObject.operator.toLowerCase();\n        if (filterObject.operator === 'equal' || filterObject.operator === 'notequal') {\n            if (type === 'datetime') {\n                prevDate = new Date(value.setSeconds(value.getSeconds() - 1));\n                nextDate = new Date(value.setSeconds(value.getSeconds() + 2));\n                filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1));\n            }\n            else {\n                prevDate = new Date(value.setHours(0) - 1);\n                nextDate = new Date(value.setHours(24));\n            }\n            prevObj.value = prevDate;\n            nextObj.value = nextDate;\n            if (filterObject.operator === 'equal') {\n                prevObj.operator = 'greaterthan';\n                nextObj.operator = 'lessthan';\n            }\n            else if (filterObject.operator === 'notequal') {\n                prevObj.operator = 'lessthanorequal';\n                nextObj.operator = 'greaterthanorequal';\n            }\n            var predicateSt = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n            var predicateEnd = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Predicate(nextObj.field, nextObj.operator, nextObj.value, false);\n            datePredicate = filterObject.operator === 'equal' ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);\n        }\n        else {\n            if (type === 'date' && (filterObject.operator === 'lessthanorequal' || filterObject.operator === 'greaterthan')) {\n                prevObj.value = new Date(value.setHours(24) - 1);\n            }\n            if (typeof (prevObj.value) === 'string') {\n                prevObj.value = new Date(prevObj.value);\n            }\n            var predicates = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Predicate(prevObj.field, prevObj.operator, prevObj.value, false);\n            datePredicate = predicates;\n        }\n    }\n    if (filterObject.setProperties) {\n        filterObject.setProperties({ ejpredicate: datePredicate }, true);\n    }\n    else {\n        filterObject.ejpredicate = datePredicate;\n    }\n    return datePredicate;\n}\n/**\n * @param {IGrid} grid - Defines the IGrid\n * @returns {boolean} Returns true if group adaptive is true\n * @hidden\n */\nfunction isGroupAdaptive(grid) {\n    return grid.enableVirtualization && grid.groupSettings.columns.length > 0 && grid.isVirtualAdaptive &&\n        !grid.groupSettings.enableLazyLoading;\n}\n/**\n * @param {string} field - Defines the Field\n * @param {Object} object - Defines the objec\n * @returns {any} Returns the object\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getObject(field, object) {\n    if (field === void 0) { field = ''; }\n    if (field) {\n        var value = object;\n        var splits = field.split('.');\n        for (var i = 0; i < splits.length && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value); i++) {\n            value = value[splits[parseInt(i.toString(), 10)]];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(value)) {\n                var newCase = splits[parseInt(i.toString(), 10)].charAt(0).toUpperCase()\n                    + splits[parseInt(i.toString(), 10)].slice(1);\n                value = object[\"\" + newCase] || object[(\"\" + newCase).charAt(0).toLowerCase() + (\"\" + newCase).slice(1)];\n            }\n        }\n        return value;\n    }\n}\n/**\n * @param {string | Object} format - defines the format\n * @param {string} colType - Defines the coltype\n * @returns {string} Returns the custom Data format\n * @hidden\n */\nfunction getCustomDateFormat(format, colType) {\n    var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    var formatvalue;\n    var formatter = 'format';\n    var type = 'type';\n    if (colType === 'date') {\n        formatvalue = typeof (format) === 'object' ?\n            intl.getDatePattern({ type: format[\"\" + type] ? format[\"\" + type] : 'date', format: format[\"\" + formatter] }, false) :\n            intl.getDatePattern({ type: 'dateTime', skeleton: format }, false);\n    }\n    else {\n        formatvalue = typeof (format) === 'object' ?\n            intl.getDatePattern({ type: format[\"\" + type] ? format[\"\" + type] : 'dateTime', format: format[\"\" + formatter] }, false) :\n            intl.getDatePattern({ type: 'dateTime', skeleton: format }, false);\n    }\n    return formatvalue;\n}\n/**\n * @param {IGrid} gObj - Defines the IGrid\n * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode\n * @returns {Object} Returns the object\n * @hidden\n */\nfunction getExpandedState(gObj, hierarchyPrintMode) {\n    var rows = gObj.getRowsObject();\n    var obj = {};\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n        var row = rows_1[_i];\n        if (row.isExpand && !row.isDetailRow) {\n            var index = gObj.allowPaging && gObj.printMode === 'AllPages' ? row.index +\n                (gObj.pageSettings.currentPage * gObj.pageSettings.pageSize) - gObj.pageSettings.pageSize : row.index;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n                obj[parseInt(index.toString(), 10)] = {};\n                obj[parseInt(index.toString(), 10)].isExpand = true;\n                if (gObj.childGrid) {\n                    obj[parseInt(index.toString(), 10)].gridModel = getPrintGridModel(row.childGrid, hierarchyPrintMode);\n                    obj[parseInt(index.toString(), 10)].gridModel.query = gObj.childGrid.query;\n                }\n            }\n        }\n    }\n    return obj;\n}\n/**\n * @param {IGrid} gObj - Defines the grid objct\n * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode\n * @returns {IGrid} Returns the IGrid\n * @hidden\n */\nfunction getPrintGridModel(gObj, hierarchyPrintMode) {\n    if (hierarchyPrintMode === void 0) { hierarchyPrintMode = 'Expanded'; }\n    var printGridModel = {};\n    if (!gObj) {\n        return printGridModel;\n    }\n    for (var _i = 0, _a = _actions_print__WEBPACK_IMPORTED_MODULE_4__.Print.printGridProp; _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (key === 'columns') {\n            printGridModel[\"\" + key] = getActualPropFromColl(gObj[\"\" + key]);\n        }\n        else if (key === 'allowPaging') {\n            printGridModel[\"\" + key] = gObj.printMode === 'CurrentPage';\n        }\n        else {\n            printGridModel[\"\" + key] = getActualProperties(gObj[\"\" + key]);\n        }\n    }\n    printGridModel['enableHover'] = false;\n    if ((gObj.childGrid || gObj.detailTemplate) && hierarchyPrintMode !== 'None') {\n        printGridModel.expandedRows = getExpandedState(gObj, hierarchyPrintMode);\n    }\n    return printGridModel;\n}\n/**\n * @param {Object} copied - Defines the copied object\n * @param {Object} first - Defines the first object\n * @param {Object} second - Defines the second object\n * @param {boolean} deep - Defines the deep\n * @returns {Object} Returns the extended object\n * @hidden\n */\nfunction extendObjWithFn(copied, first, second, deep) {\n    var res = copied || {};\n    var len = arguments.length;\n    if (deep) {\n        len = len - 1;\n    }\n    for (var i = 1; i < len; i++) {\n        // eslint-disable-next-line prefer-rest-params\n        if (!arguments[parseInt(i.toString(), 10)]) {\n            continue;\n        }\n        // eslint-disable-next-line prefer-rest-params\n        var obj1 = arguments[parseInt(i.toString(), 10)];\n        var keys = Object.keys(Object.getPrototypeOf(obj1)).length ?\n            Object.keys(obj1).concat(getPrototypesOfObj(obj1)) : Object.keys(obj1);\n        for (var i_1 = 0; i_1 < keys.length; i_1++) {\n            var source = res[keys[parseInt(i_1.toString(), 10)]];\n            var cpy = obj1[keys[parseInt(i_1.toString(), 10)]];\n            var cln = void 0;\n            if (deep && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isObject)(cpy) || Array.isArray(cpy))) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isObject)(cpy)) {\n                    cln = source ? source : {};\n                    res[keys[parseInt(i_1.toString(), 10)]] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, cln, cpy, deep);\n                }\n                else {\n                    cln = source ? source : [];\n                    res[keys[parseInt(i_1.toString(), 10)]] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], cln, cpy, deep);\n                }\n            }\n            else {\n                res[keys[parseInt(i_1.toString(), 10)]] = cpy;\n            }\n        }\n    }\n    return res;\n}\n/**\n * @param {Object} obj - Defines the obj\n * @returns {string[]} Returns the string\n * @hidden\n */\nfunction getPrototypesOfObj(obj) {\n    var keys = [];\n    while (Object.getPrototypeOf(obj) && Object.keys(Object.getPrototypeOf(obj)).length) {\n        keys = keys.concat(Object.keys(Object.getPrototypeOf(obj)));\n        obj = Object.getPrototypeOf(obj);\n    }\n    return keys;\n}\n/**\n * @param {Column[]} column - Defines the Column\n * @returns {number} Returns the column Depth\n * @hidden\n */\nfunction measureColumnDepth(column) {\n    var max = 0;\n    for (var i = 0; i < (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(column) ? column.length : 0); i++) {\n        var depth = checkDepth(column[parseInt(i.toString(), 10)], 0);\n        if (max < depth) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n/**\n * @param {Column} col - Defines the Column\n * @param {number} index - Defines the index\n * @returns {number} Returns the depth\n * @hidden\n */\nfunction checkDepth(col, index) {\n    var max = index;\n    var indices = [];\n    if (col.columns) {\n        index++;\n        for (var i = 0; i < col.columns.length; i++) {\n            indices[parseInt(i.toString(), 10)] = checkDepth(col.columns[parseInt(i.toString(), 10)], index);\n        }\n        for (var j = 0; j < indices.length; j++) {\n            if (max < indices[parseInt(j.toString(), 10)]) {\n                max = indices[parseInt(j.toString(), 10)];\n            }\n        }\n        index = max;\n    }\n    return index;\n}\n/**\n * @param {IGrid} gObj - Defines the IGrid\n * @param {PredicateModel[]} filteredCols - Defines the PredicateModel\n * @returns {void}\n * @hidden\n */\nfunction refreshFilteredColsUid(gObj, filteredCols) {\n    for (var i = 0; i < filteredCols.length; i++) {\n        filteredCols[parseInt(i.toString(), 10)].uid = filteredCols[parseInt(i.toString(), 10)].isForeignKey ?\n            getColumnByForeignKeyValue(filteredCols[parseInt(i.toString(), 10)].field, gObj.getForeignKeyColumns()).uid\n            : gObj.enableColumnVirtualization ? getColumnModelByFieldName(gObj, filteredCols[parseInt(i.toString(), 10)].field).uid\n                : gObj.getColumnByField(filteredCols[parseInt(i.toString(), 10)].field).uid;\n    }\n}\n/** @hidden */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar Global;\n(function (Global) {\n    // eslint-disable-next-line prefer-const\n    Global.timer = null;\n})(Global || (Global = {}));\n/**\n * @param {Element} element - Defines the element\n * @returns {Object} Returns the transform values\n * @hidden\n */\nfunction getTransformValues(element) {\n    var style = document.defaultView.getComputedStyle(element, null);\n    var transformV = style.getPropertyValue('transform');\n    var replacedTv = transformV.replace(/,/g, '');\n    var translateX = parseFloat((replacedTv).split(' ')[4]);\n    var translateY = parseFloat((replacedTv).split(' ')[5]);\n    return { width: translateX, height: translateY };\n}\n/**\n * @param {Element} rootElement - Defines the root Element\n * @param {Element} element - Defines the element\n * @returns {void}\n * @hidden\n */\nfunction applyBiggerTheme(rootElement, element) {\n    if (rootElement.classList.contains('e-bigger')) {\n        element.classList.add('e-bigger');\n    }\n}\n/**\n * @param {IGrid} gObj - Defines grid object\n * @returns {number}  - Returns scroll width\n * @hidden\n */\nfunction getScrollWidth(gObj) {\n    var scrollElem = gObj.getContent().firstElementChild;\n    return scrollElem.scrollWidth > scrollElem.offsetWidth ? getScrollBarWidth() : 0;\n}\n/**\n * @param {IGrid} gObj - Defines grid object\n * @param {number} idx - Defines the index\n * @returns {number} Returns colSpan index\n * @hidden\n */\nfunction resetColspanGroupCaption(gObj, idx) {\n    var colspan = 0;\n    var cols = gObj.getColumns();\n    var width = idx * 30;\n    if (gObj.isRowDragable()) {\n        colspan++;\n        width += 30;\n    }\n    colspan += (gObj.groupSettings.columns.length - idx);\n    width += (30 * (gObj.groupSettings.columns.length - idx));\n    var gridWidth = (gObj.width === 'auto' ? gObj.element.offsetWidth : gObj.width.toString().indexOf('%') !== -1 ?\n        gObj.element.getBoundingClientRect().width : parseInt(gObj.width.toString(), 10)) - getScrollWidth(gObj);\n    for (var i = 0; i < cols.length; i++) {\n        if (cols[parseInt(i.toString(), 10)].visible) {\n            width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);\n            colspan++;\n        }\n        if (width > gridWidth) {\n            colspan--;\n            break;\n        }\n    }\n    return colspan;\n}\n/**\n * @param {HTMLElement} tr - Defines the tr Element\n * @param {IGrid} gObj - Defines grid object\n * @returns {void}\n * @hidden\n */\nfunction groupCaptionRowLeftRightPos(tr, gObj) {\n    var width = 0;\n    var idx = 0;\n    var frozenCount = gObj.getVisibleFrozenLeftCount();\n    for (var j = 0; j < tr.childNodes.length; j++) {\n        var td = tr.childNodes[parseInt(j.toString(), 10)];\n        if (frozenCount === idx) {\n            break;\n        }\n        if (td.classList.contains('e-groupcaption') || td.classList.contains('e-summarycell')) {\n            idx += parseInt(td.getAttribute('colspan'), 10);\n        }\n        td.classList.add('e-leftfreeze');\n        if (td.classList.contains('e-groupcaption') && parseInt(td.getAttribute('colspan'), 10) === 1) {\n            td.classList.add('e-freezeleftborder');\n        }\n        applyStickyLeftRightPosition(td, width, gObj.enableRtl, 'Left');\n        if (td.classList.contains('e-indentcell') || td.classList.contains('e-recordplusexpand') ||\n            td.classList.contains('e-recordpluscollapse')) {\n            width += 30;\n        }\n        if (td.classList.contains('e-groupcaption')) {\n            var colspan = parseInt(td.getAttribute('colspan'), 10);\n            if (gObj.isRowDragable()) {\n                colspan--;\n                width += 30;\n            }\n            colspan = colspan - (gObj.groupSettings.columns.length - j);\n            width = width + (30 * (gObj.groupSettings.columns.length - j));\n            var cols = gObj.getColumns();\n            for (var i = 0; i < cols.length; i++) {\n                if ((parseInt(td.getAttribute('colspan'), 10) > 1) &&\n                    (parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10)\n                        + width) > (parseInt(gObj.width.toString(), 10) - getScrollWidth(gObj))) {\n                    var newColspan = resetColspanGroupCaption(gObj, j);\n                    td.setAttribute('colspan', newColspan.toString());\n                    break;\n                }\n                if (cols[parseInt(i.toString(), 10)].visible) {\n                    width += parseInt(cols[parseInt(i.toString(), 10)].width.toString(), 10);\n                    colspan--;\n                }\n                if (colspan === 0) {\n                    break;\n                }\n            }\n        }\n        if (td.classList.contains('e-summarycell')) {\n            var uid_1 = td.getAttribute('e-mappinguid');\n            var column = gObj.getColumnByUid(uid_1);\n            width += parseInt(column.width.toString(), 10);\n        }\n    }\n}\n/**\n * @param {Element} row - Defines row element\n * @param {IGrid} gridObj - Defines grid object\n * @returns {boolean} Returns isRowEnteredInGrid\n * @hidden\n */\nfunction ensureLastRow(row, gridObj) {\n    var content = gridObj.getContent().firstElementChild;\n    return row && (row.getBoundingClientRect().top - content.getBoundingClientRect().top +\n        gridObj.getRowHeight()) > content.offsetHeight;\n}\n/**\n * @param {Element} row - Defines row element\n * @param {number} rowTop - Defines row top number\n * @returns {boolean} Returns first row is true\n * @hidden\n */\nfunction ensureFirstRow(row, rowTop) {\n    return row && row.getBoundingClientRect().top < rowTop;\n}\n/**\n * @param {number} index - Defines index\n * @param {IGrid} gObj - Defines grid object\n * @returns {boolean} Returns isRowEnteredInGrid\n * @hidden\n */\nfunction isRowEnteredInGrid(index, gObj) {\n    var rowHeight = gObj.getRowHeight();\n    var startIndex = gObj.getContent().firstElementChild.scrollTop / rowHeight;\n    var endIndex = startIndex + (gObj.getContent().firstElementChild.offsetHeight / rowHeight);\n    return index < endIndex && index > startIndex;\n}\n/**\n * @param {IGrid} gObj - Defines the grid object\n * @param {Object} data - Defines the query\n * @returns {number} Returns the edited data index\n * @hidden\n */\nfunction getEditedDataIndex(gObj, data) {\n    var keyField = gObj.getPrimaryKeyFieldNames()[0];\n    var dataIndex;\n    gObj.getCurrentViewRecords().filter(function (e, index) {\n        if (keyField.includes('.')) {\n            var currentValue = getObject(keyField, e);\n            var originalValue = getObject(keyField, data);\n            if (currentValue === originalValue) {\n                dataIndex = index;\n            }\n        }\n        else {\n            if (e[\"\" + keyField] === data[\"\" + keyField]) {\n                dataIndex = index;\n            }\n        }\n    });\n    return dataIndex;\n}\n/**\n * @param {Object} args - Defines the argument\n * @param {Query} query - Defines the query\n * @returns {FilterStateObj} Returns the filter state object\n * @hidden\n */\nfunction eventPromise(args, query) {\n    var state = getStateEventArgument(query);\n    var def = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Deferred();\n    state.dataSource = def.resolve;\n    state.action = args;\n    return { state: state, deffered: def };\n}\n/**\n * @param {Query} query - Defines the query\n * @returns {Object} Returns the state event argument\n * @hidden\n */\nfunction getStateEventArgument(query) {\n    var adaptr = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.UrlAdaptor();\n    var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager({ url: '', adaptor: new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.UrlAdaptor });\n    var state = adaptr.processQuery(dm, query);\n    var data = JSON.parse(state.data);\n    return data;\n}\n/**\n * @param {IGrid} gObj - Defines the Igrid\n * @returns {boolean} Returns the ispercentageWidth\n * @hidden\n */\nfunction ispercentageWidth(gObj) {\n    var columns = gObj.getVisibleColumns();\n    var percentageCol = 0;\n    var undefinedWidthCol = 0;\n    for (var i = 0; i < columns.length; i++) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(columns[parseInt(i.toString(), 10)].width)) {\n            undefinedWidthCol++;\n        }\n        else if (columns[parseInt(i.toString(), 10)].width.toString().indexOf('%') !== -1) {\n            percentageCol++;\n        }\n    }\n    return (gObj.width === 'auto' || typeof (gObj.width) === 'string' && gObj.width.indexOf('%') !== -1) &&\n        !gObj.groupSettings.showGroupedColumn && gObj.groupSettings.columns.length\n        && percentageCol && !undefinedWidthCol;\n}\n/**\n * @param {IGrid} gObj - Defines the IGrid\n * @param {Row<Column>[]} rows - Defines the row\n * @param {HTMLTableRowElement[]} rowElms - Row elements\n * @param {number} index - Row index\n * @param {number} startRowIndex - Start Row Index\n * @returns {void}\n * @hidden\n */\nfunction resetRowIndex(gObj, rows, rowElms, index, startRowIndex) {\n    var startIndex = index ? index : 0;\n    for (var i = startRowIndex ? startRowIndex : 0; i < rows.length; i++) {\n        if (rows[parseInt(i.toString(), 10)] && rows[parseInt(i.toString(), 10)].isDataRow) {\n            rows[parseInt(i.toString(), 10)].index = startIndex;\n            rows[parseInt(i.toString(), 10)].isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;\n            rowElms[parseInt(i.toString(), 10)].setAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_6__.ariaRowIndex, (startIndex + 1).toString());\n            if (rows[parseInt(i.toString(), 10)].isAltRow) {\n                rowElms[parseInt(i.toString(), 10)].classList.add('e-altrow');\n            }\n            else {\n                rowElms[parseInt(i.toString(), 10)].classList.remove('e-altrow');\n            }\n            for (var j = 0; j < rowElms[parseInt(i.toString(), 10)].cells.length; j++) {\n                rowElms[parseInt(i.toString(), 10)].cells[parseInt(j.toString(), 10)].setAttribute('index', startIndex.toString());\n            }\n            startIndex++;\n        }\n    }\n    if (!rows.length) {\n        gObj.renderModule.emptyRow(true);\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the IGrid\n * @returns {void}\n * @hidden\n */\nfunction resetCachedRowIndex(gObj) {\n    var rowObjects = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache ?\n        gObj.getRowsObject() : gObj.vRows;\n    var rowElements = gObj.getRows();\n    for (var i = 0, startIndex = 0, k = 0; i < rowObjects.length; i++) {\n        var rowObject = rowObjects[parseInt(i.toString(), 10)];\n        if (rowObject.isDataRow) {\n            rowObject.index = startIndex;\n            rowObject.isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;\n            var rowElement = gObj.getRowElementByUID(rowObject.uid);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowElement)) {\n                rowElements[parseInt(k.toString(), 10)] = rowElement;\n                rowElement.setAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_6__.ariaRowIndex, (startIndex + 1).toString());\n                if (rowObject.isAltRow) {\n                    rowElement.classList.add('e-altrow');\n                }\n                else {\n                    rowElement.classList.remove('e-altrow');\n                }\n                for (var j = 0; j < rowElement.cells.length; j++) {\n                    rowElement.cells[parseInt(j.toString(), 10)].setAttribute('index', startIndex.toString());\n                }\n                k++;\n            }\n            startIndex++;\n        }\n    }\n    if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {\n        gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the IGrid\n * @param {RowDropEventArgs} args - Defines the row drop event argument\n * @param {HTMLTableRowElement[]} tr - Row elements\n * @param {Row<Column>} dropRObj - dropped row object\n * @returns {void}\n * @hidden\n */\nfunction groupReorderRowObject(gObj, args, tr, dropRObj) {\n    var rowObjects = gObj.enableVirtualization ? gObj.vRows : gObj.getRowsObject();\n    var orderChangeRowObjects = [];\n    var dropRowObject = dropRObj ? dropRObj :\n        gObj.getRowObjectFromUID(args.target.closest('tr').getAttribute('data-uid'));\n    var rowObjectDropIndex;\n    for (var i = 0; i < args.rows.length; i++) {\n        var orderChangeRowObject = gObj.getRowObjectFromUID(args.rows[parseInt(i.toString(), 10)].getAttribute('data-uid'));\n        if (dropRowObject === orderChangeRowObject) {\n            rowObjectDropIndex = rowObjects.indexOf(dropRowObject);\n        }\n        orderChangeRowObjects.push(rowObjects.splice(rowObjects.indexOf(orderChangeRowObject), 1)[0]);\n    }\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowObjectDropIndex)) {\n        rowObjectDropIndex = rowObjects.indexOf(dropRowObject);\n        if (args.fromIndex > args.dropIndex) {\n            rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));\n        }\n        else {\n            rowObjects.splice.apply(rowObjects, [rowObjectDropIndex + 1, 0].concat(orderChangeRowObjects));\n        }\n    }\n    else {\n        rowObjects.splice.apply(rowObjects, [rowObjectDropIndex, 0].concat(orderChangeRowObjects));\n    }\n    if (!gObj.enableVirtualization && !gObj.infiniteScrollSettings.enableCache) {\n        var record = {};\n        var currentViewData = gObj.getCurrentViewRecords();\n        for (var i = 0, len = tr.length; i < len; i++) {\n            var index = parseInt(tr[parseInt(i.toString(), 10)].getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_6__.ariaRowIndex), 10) - 1;\n            record[parseInt(i.toString(), 10)] = currentViewData[parseInt(index.toString(), 10)];\n        }\n        var rows = gObj.getRows();\n        for (var i = 0, len = tr.length; i < len; i++) {\n            rows[parseInt(i.toString(), 10)] = tr[parseInt(i.toString(), 10)];\n            currentViewData[parseInt(i.toString(), 10)] = record[parseInt(i.toString(), 10)];\n        }\n    }\n    if (gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings.enableCache) {\n        gObj.infiniteScrollModule.resetInfiniteCache(rowObjects);\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the grid object\n * @param {Object} changes - Defines the changes\n * @param {string} type - Defines the type\n * @param {string} keyField - Defines the keyfield\n * @returns {void}\n * @hidden\n */\nfunction compareChanges(gObj, changes, type, keyField) {\n    var newArray = gObj.dataToBeUpdated[\"\" + type].concat(changes[\"\" + type]).reduce(function (r, o) {\n        r[o[\"\" + keyField]] = r[o[\"\" + keyField]] === undefined ? o : Object.assign(r[o[\"\" + keyField]], o);\n        return r;\n    }, {});\n    gObj.dataToBeUpdated[\"\" + type] = Object.keys(newArray).map(function (k) { return newArray[\"\" + k]; });\n}\n/**\n * @param {IGrid} gObj - Defines the grid object\n * @returns {void}\n * @hidden\n */\nfunction setRowElements(gObj) {\n    if (gObj.enableInfiniteScrolling && (gObj.childGrid || gObj.detailTemplate)) {\n        (gObj).contentModule.rowElements = [].slice.call(gObj.getContentTable().rows)\n            .filter(function (row) { return (row.classList.contains('e-row') || row.classList.contains('e-detailrow'))\n            && !row.classList.contains('e-addedrow'); });\n        return;\n    }\n    (gObj).contentModule.rowElements =\n        [].slice.call(gObj.element.querySelectorAll('.e-row:not(.e-addedrow):not(.e-cloneproperties .e-row)'));\n}\n/**\n * @param {Element} row - Defines the row\n * @param {number} start - Defines the start index\n * @param {number} end - Defines the end index\n * @returns {void}\n * @hidden\n */\nfunction sliceElements(row, start, end) {\n    var cells = row.children;\n    var len = cells.length;\n    var k = 0;\n    for (var i = 0; i < len; i++, k++) {\n        if (i >= start && i < end) {\n            continue;\n        }\n        row.removeChild(row.children[parseInt(k.toString(), 10)]);\n        k--;\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the grid\n * @param {Dialog} dlgObj - Defines the dialog\n * @returns {void}\n * @hidden\n */\nfunction resetDialogAppend(gObj, dlgObj) {\n    var element = gObj.createElement('div', { className: 'e-grid-popup', id: gObj.element.id + '_e-popup' });\n    var pos = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.calculatePosition)(gObj.element, 'left', 'Top');\n    if (document.getElementById(gObj.element.id + '_e-popup')) {\n        element = document.getElementById(gObj.element.id + '_e-popup');\n    }\n    element.style.top = pos.top + 'px';\n    element.style.left = pos.left + 'px';\n    element.style.zIndex = (dlgObj.zIndex).toString();\n    element.style.width = dlgObj.element.offsetWidth + 'px';\n    element.appendChild(dlgObj.element);\n    var sbPanel = document.querySelector('.sb-demo-section,.e-grid-dialog-fixed');\n    if (sbPanel) {\n        var sbPos = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_3__.calculateRelativeBasedPosition)(gObj.element, sbPanel);\n        element.style.top = sbPos.top + 'px';\n        element.style.left = sbPos.left + 'px';\n        sbPanel.insertBefore(element, sbPanel.firstChild);\n    }\n    else {\n        document.body.insertBefore(element, document.body.firstChild);\n    }\n}\n/**\n * @param {Column} column - Defines the column\n * @param {string} uid - Defines the uid\n * @returns {boolean} Returns is child column\n * @hidden\n */\nfunction isChildColumn(column, uid) {\n    var uids = [];\n    uids.push(column.uid);\n    pushuid(column, uids);\n    if (uids.indexOf(uid) > -1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n/**\n * @param {Column} column - Defines the column\n * @param {string[]} uids - Defines the uid\n * @returns {void}\n * @hidden\n */\nfunction pushuid(column, uids) {\n    for (var i = 0; i < column.columns.length; i++) {\n        if (column.columns[parseInt(i.toString(), 10)].uid) {\n            uids.push(column.columns[parseInt(i.toString(), 10)].uid);\n        }\n        if (column.columns[parseInt(i.toString(), 10)].columns &&\n            column.columns[parseInt(i.toString(), 10)].columns.length) {\n            pushuid(column.columns[parseInt(i.toString(), 10)], uids);\n        }\n    }\n}\n/**\n * @param {Column} column - Defines the column\n * @returns {string} Returns the direction\n * @hidden\n */\nfunction frozenDirection(column) {\n    if (column.columns[0].freeze || column.columns[0].isFrozen) {\n        if (column.columns[0].freeze === 'Left' || column.columns[0].isFrozen) {\n            return 'Left';\n        }\n        else if (column.columns[0].freeze === 'Right') {\n            return 'Right';\n        }\n        else if (column.columns[0].freeze === 'Fixed') {\n            return 'Fixed';\n        }\n        else {\n            return 'None';\n        }\n    }\n    else {\n        if (column.columns[0].columns && column.columns[0].columns.length) {\n            return frozenDirection(column.columns[0]);\n        }\n        else {\n            return 'None';\n        }\n    }\n}\n/**\n * @param {Element} row - Defines the row\n * @returns {void}\n * @hidden\n */\nfunction addFixedColumnBorder(row) {\n    if (row.querySelector('.e-fixedfreeze')) {\n        var cells = [].slice.call(row.querySelectorAll('.e-filterbarcell:not(.e-hide),.e-summarycell:not(.e-hide),.e-headercell:not(.e-hide),.e-rowcell:not(.e-hide)'));\n        for (var j = 0; j < cells.length; j++) {\n            if (cells[parseInt(j.toString(), 10)].classList.contains('e-fixedfreeze') && (!(cells[j - 1]) ||\n                (cells[j - 1] && !cells[j - 1].classList.contains('e-fixedfreeze')))) {\n                cells[parseInt(j.toString(), 10)].classList.add('e-freezeleftborder');\n            }\n            if (cells[parseInt(j.toString(), 10)].classList.contains('e-fixedfreeze') && (!(cells[j + 1]) ||\n                (cells[j + 1] && !cells[j + 1].classList.contains('e-fixedfreeze')))) {\n                cells[parseInt(j.toString(), 10)].classList.add('e-freezerightborder');\n            }\n        }\n    }\n}\n/**\n * @param {HTMLElement} node - Defines the row\n * @param {number} width - Defines the width\n * @param {boolean} isRtl - Boolean property\n * @param {string} position - Defines the position\n * @returns {void}\n * @hidden\n */\nfunction applyStickyLeftRightPosition(node, width, isRtl, position) {\n    if (position === 'Left') {\n        if (isRtl) {\n            node.style.right = width + 'px';\n        }\n        else {\n            node.style.left = width + 'px';\n        }\n    }\n    if (position === 'Right') {\n        if (isRtl) {\n            node.style.left = width + 'px';\n        }\n        else {\n            node.style.right = width + 'px';\n        }\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the grid\n * @param {Column} column - Defines the column\n * @param {Element} node - Defines the Element\n * @param {number} colSpan - Defines the colSpan value\n * @returns {void}\n * @hidden\n */\nfunction resetColandRowSpanStickyPosition(gObj, column, node, colSpan) {\n    var columns = gObj.getColumns();\n    var index = column.index;\n    if (column.freeze === 'Left' && column.border !== 'Left') {\n        var idx = index + (colSpan - 1);\n        while (columns[parseInt(idx.toString(), 10)].visible === false) {\n            idx++;\n        }\n        if (columns[parseInt(idx.toString(), 10)].border === 'Left') {\n            node.classList.add('e-freezeleftborder');\n        }\n    }\n    else if (column.freeze === 'Right' || column.freeze === 'Fixed') {\n        var width = 0;\n        for (var j = index + 1; j < index + colSpan; j++) {\n            if (j === columns.length) {\n                break;\n            }\n            if (columns[parseInt(j.toString(), 10)].visible) {\n                width += parseInt(columns[parseInt(j.toString(), 10)].width.toString(), 10);\n            }\n            else {\n                colSpan++;\n            }\n        }\n        if (gObj.enableRtl) {\n            node.style.left = parseInt(node.style.left, 10) - width + 'px';\n        }\n        else {\n            node.style.right = parseInt(node.style.right, 10) - width + 'px';\n        }\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the grid\n * @param {number} rowIndex - Defines the row index\n * @param {number} colIndex - Defines the colum index\n * @returns {void}\n * @hidden\n */\nfunction getCellFromRow(gObj, rowIndex, colIndex) {\n    var row = (gObj.getRowByIndex(rowIndex));\n    for (var i = 0; i < row.cells.length; i++) {\n        if (parseInt(row.cells[parseInt(i.toString(), 10)].getAttribute('aria-colindex').toString(), 10) - 1 === colIndex) {\n            return row.cells[parseInt(i.toString(), 10)];\n        }\n    }\n    return null;\n}\n/**\n * @param {IGrid} gObj - Defines the grid\n * @param {Column} column - Defines the column\n * @param {Element} node - Defines the Element\n * @returns {void}\n * @hidden\n */\nfunction addStickyColumnPosition(gObj, column, node) {\n    if (column.freeze === 'Left' || column.isFrozen) {\n        node.classList.add('e-leftfreeze');\n        if (column.border === 'Left') {\n            node.classList.add('e-freezeleftborder');\n        }\n        if (column.index === 0) {\n            applyStickyLeftRightPosition(node, (gObj.getIndentCount() * 30), gObj.enableRtl, 'Left');\n            if (gObj.enableColumnVirtualization) {\n                column.valueX = (gObj.getIndentCount() * 30);\n            }\n        }\n        else {\n            var cols = gObj.getColumns();\n            var width = gObj.getIndentCount() * 30;\n            for (var i = 0; i < cols.length; i++) {\n                if (column.uid === cols[parseInt(i.toString(), 10)].uid) {\n                    break;\n                }\n                if (cols[parseInt(i.toString(), 10)].visible) {\n                    width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());\n                }\n            }\n            applyStickyLeftRightPosition(node, width, gObj.enableRtl, 'Left');\n            if (gObj.enableColumnVirtualization) {\n                column.valueX = width;\n            }\n        }\n    }\n    else if (column.freeze === 'Right') {\n        node.classList.add('e-rightfreeze');\n        var cols = gObj.getColumns();\n        if (column.border === 'Right') {\n            node.classList.add('e-freezerightborder');\n        }\n        if (column.index === cols[cols.length - 1].index) {\n            var width = gObj.getFrozenMode() === 'Right' && gObj.isRowDragable() ? 30 : 0;\n            applyStickyLeftRightPosition(node, width, gObj.enableRtl, 'Right');\n            if (gObj.enableColumnVirtualization) {\n                column.valueX = width;\n            }\n        }\n        else {\n            var width = gObj.getFrozenMode() === 'Right' && gObj.isRowDragable() ? 30 : 0;\n            for (var i = cols.length - 1; i >= 0; i--) {\n                if (column.uid === cols[parseInt(i.toString(), 10)].uid) {\n                    break;\n                }\n                if (cols[parseInt(i.toString(), 10)].visible) {\n                    width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());\n                }\n            }\n            applyStickyLeftRightPosition(node, width, gObj.enableRtl, 'Right');\n            if (gObj.enableColumnVirtualization) {\n                column.valueX = width;\n            }\n        }\n    }\n    else if (column.freeze === 'Fixed') {\n        node.classList.add('e-fixedfreeze');\n        var cols = gObj.getColumns();\n        var width = 0;\n        if (gObj.getVisibleFrozenLeftCount()) {\n            width = gObj.getIndentCount() * 30;\n        }\n        else if (gObj.getFrozenMode() === 'Right') {\n            width = gObj.groupSettings.columns.length * 30;\n        }\n        for (var i = 0; i < cols.length; i++) {\n            if (column.uid === cols[parseInt(i.toString(), 10)].uid) {\n                break;\n            }\n            if ((cols[parseInt(i.toString(), 10)].freeze === 'Left' || cols[parseInt(i.toString(), 10)].isFrozen) ||\n                cols[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                if (cols[parseInt(i.toString(), 10)].visible) {\n                    width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());\n                }\n            }\n        }\n        applyStickyLeftRightPosition(node, (width - 1), gObj.enableRtl, 'Left');\n        width = gObj.getFrozenMode() === 'Right' && gObj.isRowDragable() ? 30 : 0;\n        for (var i = cols.length - 1; i >= 0; i--) {\n            if (column.uid === cols[parseInt(i.toString(), 10)].uid) {\n                break;\n            }\n            if (cols[parseInt(i.toString(), 10)].freeze === 'Right' || cols[parseInt(i.toString(), 10)].freeze === 'Fixed') {\n                if (cols[parseInt(i.toString(), 10)].visible) {\n                    width += parseFloat(cols[parseInt(i.toString(), 10)].width.toString());\n                }\n            }\n        }\n        applyStickyLeftRightPosition(node, (width - 1), gObj.enableRtl, 'Right');\n    }\n    else {\n        node.classList.add('e-unfreeze');\n    }\n}\n/**\n * @param {IGrid} gObj - Defines the grid Object\n * @param {Column} col - Defines the column\n * @param {number} rowIndex - Defines the rowindex\n * @returns {Element} Returns the element\n * @hidden\n */\nfunction getCellsByTableName(gObj, col, rowIndex) {\n    return [].slice.call(gObj.getDataRows()[parseInt(rowIndex.toString(), 10)].getElementsByClassName(_base_string_literals__WEBPACK_IMPORTED_MODULE_6__.rowCell));\n}\n/**\n * @param {IGrid} gObj - Defines the column\n * @param {Column} col - Defines the index\n * @param {number} rowIndex - Defines the rules\n * @param {number} index - Defines the movable column rules\n * @returns {Element} Returns the Element\n * @hidden\n */\nfunction getCellByColAndRowIndex(gObj, col, rowIndex, index) {\n    return getCellsByTableName(gObj, col, rowIndex)[parseInt(index.toString(), 10)];\n}\n/**\n * @param {Column} col - Defines the column\n * @param {number} index - Defines the index\n * @param {Object} rules - Defines the rules\n * @param {Object} mRules - Defines the movable column rules\n * @param {Object} frRules - Defines the Frozen rules\n * @param {number} len - Defines the length\n * @param {boolean} isCustom - Defines custom form validation\n * @returns {void}\n * @hidden\n */\nfunction setValidationRuels(col, index, rules, mRules, frRules, len, isCustom) {\n    if (isCustom) {\n        rules[getComplexFieldID(col.field)] = col.validationRules;\n    }\n    else {\n        if (col.getFreezeTableName() === _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.frozenLeft\n            || (!index && col.getFreezeTableName() === _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.frozenRight) || len === 1) {\n            rules[getComplexFieldID(col.field)] = col.validationRules;\n        }\n        else if (col.getFreezeTableName() === 'movable' || !col.getFreezeTableName()) {\n            mRules[getComplexFieldID(col.field)] = col.validationRules;\n        }\n        else if (col.getFreezeTableName() === _base_string_literals__WEBPACK_IMPORTED_MODULE_6__.frozenRight) {\n            frRules[getComplexFieldID(col.field)] = col.validationRules;\n        }\n    }\n}\n/**\n * @param {string} numberFormat - Format\n * @param {string} type - Value type\n * @param {boolean} isExcel - Boolean property\n * @param {string} currencyCode - Specifies the currency code to be used for formatting.\n * @returns {string} returns formated value\n * @hidden\n */\nfunction getNumberFormat(numberFormat, type, isExcel, currencyCode) {\n    var format;\n    var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    if (type === 'number') {\n        try {\n            format = intl.getNumberPattern({ format: numberFormat, currency: currencyCode, useGrouping: true }, true);\n        }\n        catch (error) {\n            format = numberFormat;\n        }\n    }\n    else if (type === 'date' || type === 'time' || type === 'datetime') {\n        try {\n            format = intl.getDatePattern({ skeleton: numberFormat, type: type }, isExcel);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format)) {\n                // eslint-disable-next-line\n                throw 'error';\n            }\n        }\n        catch (error) {\n            try {\n                format = intl.getDatePattern({ format: numberFormat, type: type }, isExcel);\n            }\n            catch (error) {\n                format = numberFormat;\n            }\n        }\n    }\n    else {\n        format = numberFormat;\n    }\n    if (type !== 'number') {\n        var patternRegex = /G|H|c|'| a|yy|y|EEEE|E/g;\n        var mtch_1 = { 'G': '', 'H': 'h', 'c': 'd', '\\'': '\"', ' a': ' AM/PM', 'yy': 'yy', 'y': 'yyyy', 'EEEE': 'dddd', 'E': 'ddd' };\n        format = format.replace(patternRegex, function (pattern) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return mtch_1[\"\" + pattern];\n        });\n    }\n    return format;\n}\n/**\n * @param {IGrid} gObj - Grid instance\n * @returns {void}\n * @hidden\n */\nfunction addBiggerDialog(gObj) {\n    if (gObj.enableAdaptiveUI) {\n        var dialogs = document.getElementsByClassName('e-responsive-dialog');\n        for (var i = 0; i < dialogs.length; i++) {\n            dialogs[parseInt(i.toString(), 10)].classList.add('e-bigger');\n        }\n    }\n}\n/**\n * @param {string} value - specifies the trr\n * @param {Object} mapObject - specifies the idx\n * @returns {Object | string} returns object or string\n * @hidden\n */\nfunction performComplexDataOperation(value, mapObject) {\n    var returnObj;\n    var length = value.split('.').length;\n    var splits = value.split('.');\n    var duplicateMap = mapObject;\n    for (var i = 0; i < length; i++) {\n        returnObj = duplicateMap[splits[parseInt(i.toString(), 10)]];\n        duplicateMap = returnObj;\n    }\n    return returnObj;\n}\n/**\n * @param {Object} tr - specifies the trr\n * @param {number} idx - specifies the idx\n * @param {string} displayVal - specifies the displayval\n * @param {Row<Column>} rows - specifies the rows\n * @param {IGrid} parent - Grid instance\n * @param {boolean} isContent - check for content renderer\n * @returns {void}\n * @hidden\n */\nfunction setDisplayValue(tr, idx, displayVal, rows, parent, isContent) {\n    var trs = Object.keys(tr);\n    var actualIndex = idx;\n    for (var i = 0; i < trs.length; i++) {\n        var td = tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell')[parseInt(idx.toString(), 10)];\n        if (parent && !parent.isFrozenGrid() && !parent.isRowDragable()) {\n            td = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(td) && (parseInt(td.getAttribute('aria-colindex'), 10) - 1 === idx ||\n                (parentsUntil(td, 'e-addedrow') && td.parentElement.childNodes[parseInt(idx.toString(), 10)] === td)))\n                ? td : tr[parseInt(i.toString(), 10)].querySelector(\"td[aria-colindex=\\\"\" + (idx + 1) + \"\\\"]\");\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(td)) {\n                continue;\n            }\n            else {\n                idx = (parent.getContentTable().querySelector('.e-detailrowcollapse, .e-detailrowexpand')) ?\n                    (td.cellIndex - 1) : td.cellIndex;\n            }\n        }\n        if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell').length && td) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell')[parseInt(idx.toString(), 10)], { 'display': displayVal });\n            if (tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell')[parseInt(idx.toString(), 10)].classList.contains('e-hide')) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell')[parseInt(idx.toString(), 10)]], ['e-hide']);\n            }\n            if ((isContent && parent.isRowDragable()) || (parent && parent.isDetail())) {\n                var index = idx + 1;\n                rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(index.toString(), 10)].visible = displayVal === '' ? true : false;\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rows[trs[parseInt(i.toString(), 10)]])) {\n                    rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible = displayVal === '' ? true : false;\n                    if (rows[trs[parseInt(i.toString(), 10)]].cells[parseInt(idx.toString(), 10)].visible === false) {\n                        tr[trs[parseInt(i.toString(), 10)]].querySelectorAll('td.e-rowcell')[parseInt(idx.toString(), 10)].classList.add('e-hide');\n                    }\n                }\n            }\n            idx = actualIndex;\n        }\n    }\n}\n// eslint-disable-next-line\n/** @hidden */\nfunction addRemoveEventListener(parent, evt, isOn, module) {\n    for (var _i = 0, evt_1 = evt; _i < evt_1.length; _i++) {\n        var inst = evt_1[_i];\n        if (isOn) {\n            parent.on(inst.event, inst.handler, module);\n        }\n        else {\n            parent.off(inst.event, inst.handler);\n        }\n    }\n}\n// eslint-disable-next-line\n/** @hidden */\nfunction createEditElement(parent, column, classNames, attr) {\n    var complexFieldName = getComplexFieldID(column.field);\n    attr = Object.assign(attr, {\n        id: parent.element.id + complexFieldName,\n        name: complexFieldName, 'e-mappinguid': column.uid\n    });\n    return parent.createElement('input', {\n        className: classNames, attrs: attr\n    });\n}\n/**\n * @param {IGrid} gObj - Grid instance\n * @param {string} uid - Defines column's uid\n * @returns {Column} returns column model\n * @hidden\n */\nfunction getColumnModelByUid(gObj, uid) {\n    var column;\n    for (var _i = 0, _a = (gObj.columnModel); _i < _a.length; _i++) {\n        var col = _a[_i];\n        if (col.uid === uid) {\n            column = col;\n            break;\n        }\n    }\n    return column;\n}\n/**\n * @param {IGrid} gObj - Grid instance\n * @param {string} field - Defines column's uid\n * @returns {Column} returns column model\n * @hidden\n */\nfunction getColumnModelByFieldName(gObj, field) {\n    var column;\n    if (!gObj.columnModel) {\n        gObj.getColumns();\n    }\n    for (var _i = 0, _a = (gObj.columnModel); _i < _a.length; _i++) {\n        var col = _a[_i];\n        if (col.field === field) {\n            column = col;\n            break;\n        }\n    }\n    return column;\n}\n/**\n * @param {string} id - Defines component id\n * @param {string[]} evts - Defines events\n * @param {object} handlers - Defines event handlers\n * @param {any} instance - Defines class instance\n * @returns {void}\n * @hidden\n */\n// eslint-disable-next-line\nfunction registerEventHandlers(id, evts, handlers, instance) {\n    instance.eventHandlers[\"\" + id] = {};\n    for (var i = 0; i < evts.length; i++) {\n        instance.eventHandlers[\"\" + id][evts[parseInt(i.toString(), 10)]] = handlers[evts[parseInt(i.toString(), 10)]];\n    }\n}\n/**\n * @param {any} component - Defines component instance\n * @param {string[]} evts - Defines events\n * @param {any} instance - Defines class instance\n * @returns {void}\n * @hidden\n */\n// eslint-disable-next-line\nfunction removeEventHandlers(component, evts, instance) {\n    for (var i = 0; i < evts.length; i++) {\n        if (component.isDestroyed) {\n            break;\n        }\n        component.removeEventListener(evts[parseInt(i.toString(), 10)], instance.eventHandlers[component.element.id][evts[parseInt(i.toString(), 10)]]);\n    }\n}\n/**\n * @param {IGrid | IXLFilter} parent - Defines parent instance\n * @param {string[]} templates - Defines the templates name which are needs to clear\n * @returns {void}\n * @hidden\n */\nfunction clearReactVueTemplates(parent, templates) {\n    parent.destroyTemplate(templates);\n    if (parent.isReact) {\n        parent.renderTemplates();\n    }\n}\n/**\n *\n * @param { HTMLElement[] } removeElem - Defines checkbox wrapper element\n * @returns {void}\n * @hidden\n */\nfunction infiniteRemoveElements(removeElem) {\n    for (var i = 0; i < removeElem.length; i++) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(removeElem[i]);\n    }\n}\n/**\n *\n * @param { HTMLElement[] } appendElem - Defines checkbox wrapper element\n * @param { HTMLElement } ulElement - Defines ul element\n * @returns {void}\n * @hidden\n */\nfunction infiniteAppendElements(appendElem, ulElement) {\n    for (var i = 0; i < appendElem.length; i++) {\n        ulElement.insertBefore(appendElem[i], ulElement.children[i]);\n    }\n}\n/**\n *\n * @param { HTMLElement } element - Defines checkbox wrapper element\n * @param { boolean } isChooser - Defines checkbox filter column chooser\n * @returns { number } list height value\n * @hidden\n */\nfunction getListHeight(element, isChooser) {\n    var listDiv = isChooser ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { className: 'e-cclist' })\n        : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-ftrchk' });\n    listDiv.style.visibility = 'hidden';\n    if (isChooser) {\n        listDiv.style.listStyle = 'none';\n    }\n    listDiv.innerHTML = isChooser ? '<div class=\"e-ccheck\"><div class=\"e-checkbox-wrapper\"><span class=\"e-frame e-icons e-check\"></span><span class=\"e-label\">A</span></div></div>' :\n        '<div class=\"e-checkbox-wrapper\"><span class=\"e-frame e-icons e-check\"></span><span class=\"e-label e-checkboxfiltertext\">A</div></span>';\n    element.appendChild(listDiv);\n    var rect = listDiv.getBoundingClientRect();\n    element.removeChild(listDiv);\n    var listHeight = Math.round(rect.height);\n    return listHeight;\n}\n/**\n *\n * @param { Element } row - Defines row element\n * @returns { number } row index\n */\nfunction getRowIndexFromElement(row) {\n    return parseInt(row.getAttribute(_base_string_literals__WEBPACK_IMPORTED_MODULE_6__.ariaRowIndex), 10) - 1;\n}\n/**\n *\n * @param { IGrid } grid - Defines grid instance\n * @returns { IGrid } returns parent grid instance\n */\nfunction getParentIns(grid) {\n    return grid.parentDetails && grid.parentDetails.parentInstObj ?\n        getParentIns(grid.parentDetails.parentInstObj) : grid;\n}\n/**\n *\n * @param { string[] } fields - Defines grouped fields\n * @param { values } values - Defines caption keys\n * @param { any } instance - Defines dynamic class instance\n * @returns { Predicate } returns filter predicate\n */\n// eslint-disable-next-line\nfunction generateExpandPredicates(fields, values, instance) {\n    var filterCols = [];\n    for (var i = 0; i < fields.length; i++) {\n        var column = instance.parent.getColumnByField(fields[parseInt(i.toString(), 10)]);\n        var value = values[parseInt(i.toString(), 10)] === 'null' ? null : values[parseInt(i.toString(), 10)];\n        var pred = {\n            field: fields[parseInt(i.toString(), 10)], predicate: 'or', uid: column.uid, operator: 'equal', type: column.type,\n            matchCase: instance.allowCaseSensitive, ignoreAccent: instance.parent.filterSettings.ignoreAccent\n        };\n        if (value === '' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n            filterCols = filterCols.concat(_common_checkbox_filter_base__WEBPACK_IMPORTED_MODULE_5__.CheckBoxFilterBase.generateNullValuePredicates(pred));\n        }\n        else {\n            filterCols.push(extend({}, { value: value }, pred));\n        }\n    }\n    return _common_checkbox_filter_base__WEBPACK_IMPORTED_MODULE_5__.CheckBoxFilterBase.getPredicate(filterCols);\n}\n/**\n *\n * @param { Predicate } pred - Defines filter predicate\n * @returns { Predicate[] } Returns formed predicate\n */\nfunction getPredicates(pred) {\n    var predicateList = [];\n    for (var _i = 0, _a = Object.keys(pred); _i < _a.length; _i++) {\n        var prop = _a[_i];\n        predicateList.push(pred[\"\" + prop]);\n    }\n    return predicateList;\n}\n/**\n *\n * @param { number } index - Defines group caption indent\n * @param { Row<Column>[] } rowsObject - Defines rows object\n * @returns { { fields: string[], keys: string[] } } Returns grouped keys and values\n */\nfunction getGroupKeysAndFields(index, rowsObject) {\n    var fields = [];\n    var keys = [];\n    for (var i = index; i >= 0; i--) {\n        if (rowsObject[parseInt(i.toString(), 10)].isCaptionRow\n            && fields.indexOf(rowsObject[parseInt(i.toString(), 10)].data.field) === -1\n            && (rowsObject[parseInt(i.toString(), 10)].indent < rowsObject[parseInt(index.toString(), 10)].indent || i === index)) {\n            fields.push(rowsObject[parseInt(i.toString(), 10)].data.field);\n            keys.push(rowsObject[parseInt(i.toString(), 10)].data.key);\n            if (rowsObject[parseInt(i.toString(), 10)].indent === 0) {\n                break;\n            }\n        }\n    }\n    return { fields: fields, keys: keys };\n}\n// eslint-disable-next-line\n/**\n *\n * @param { number[][] } checkActiveMatrix - Defines matrix to check\n * @param { number[] } checkCellIndex - Defines index to check\n * @param { boolean } next - Defines select next or previous index\n * @returns { number[] } - Returns next active current index\n */\nfunction findCellIndex(checkActiveMatrix, checkCellIndex, next) {\n    var activeMatrix = checkActiveMatrix;\n    var cellIndex = checkCellIndex;\n    var currentCellIndexPass = false;\n    if (next) {\n        for (var i = cellIndex[0]; i < activeMatrix.length; i++) {\n            var rowCell = activeMatrix[parseInt(i.toString(), 10)];\n            for (var j = 0; j < rowCell.length; j++) {\n                if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {\n                    cellIndex = [i, j];\n                    return cellIndex;\n                }\n                if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {\n                    currentCellIndexPass = true;\n                }\n            }\n        }\n    }\n    else {\n        for (var i = cellIndex[0]; i >= 0; i--) {\n            var rowCell = activeMatrix[parseInt(i.toString(), 10)];\n            for (var j = rowCell.length - 1; j >= 0; j--) {\n                if (currentCellIndexPass && activeMatrix[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)] === 1) {\n                    cellIndex = [i, j];\n                    return cellIndex;\n                }\n                if (!currentCellIndexPass && cellIndex.toString() === [i, j].toString()) {\n                    currentCellIndexPass = true;\n                }\n            }\n        }\n    }\n    return cellIndex;\n}\n/**\n *\n * @param { string } string - Defines string need to capitalized first letter\n * @returns { string } - Returns capitalized first letter string\n */\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/**\n *\n * @param { IGrid } grid - Defines parent instance\n * @returns { boolean } - Returns is virtual\n */\nfunction checkIsVirtual(grid) {\n    return !(isGroupAdaptive(grid) || grid.groupSettings.enableLazyLoading\n        || (!grid.enableVirtualization && grid.enableColumnVirtualization));\n}\n/**\n *\n * @param { number[] } blockes - Defines block indexes\n * @returns { number[] } - Returns is visible page\n */\nfunction getVisiblePage(blockes) {\n    var visiblePage = [];\n    for (var i = 0; i < blockes.length; i++) {\n        var page = Math.ceil(blockes[parseInt(i.toString(), 10)] / 2);\n        if (visiblePage.indexOf(page) === -1) {\n            visiblePage.push(page);\n        }\n    }\n    return visiblePage;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-grids/src/grid/base/util.js?");

/***/ })

}]);