"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor-h-b06c983c"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-info.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-info.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HistoryInfo: () => (/* binding */ HistoryInfo)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_history_info__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-history-info */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/base-history-info.js\");\n/* harmony import */ var _viewer_page__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../viewer/page */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/page.js\");\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../base/types */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/types.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n/**\n * EditorHistory preservation class\n */\n/**\n * @private\n */\nvar HistoryInfo = /** @class */ (function (_super) {\n    __extends(HistoryInfo, _super);\n    function HistoryInfo(node, isChild) {\n        var _this = _super.call(this, node) || this;\n        _this.isChildHistoryInfo = false;\n        _this.editRangeStart = undefined;\n        _this.documentHelper = node.documentHelper;\n        _this.isChildHistoryInfo = isChild;\n        return _this;\n    }\n    Object.defineProperty(HistoryInfo.prototype, \"hasAction\", {\n        get: function () {\n            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.modifiedActions);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HistoryInfo.prototype.addModifiedAction = function (baseHistoryInfo) {\n        // For complex actions such as Replace text, Insert/Remove Hyperlink etc.\n        if (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.modifiedActions)) {\n                this.modifiedActions = [];\n            }\n            this.modifiedActions.push(baseHistoryInfo);\n        }\n    };\n    /**\n     * @returns {Operation[]} returns an array of type Operations\n     * @param {boolean} isInvertOperation accepts a boolean value\n     * @private\n     */\n    HistoryInfo.prototype.getActionInfo = function (isInvertOperation) {\n        var action = this.action;\n        var operations = [];\n        switch (action) {\n            case 'Insert':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    operations.push(currentHistory.getInsertOperation(currentHistory.action));\n                }\n                break;\n            case 'InsertContentControl':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    operations.push(currentHistory.getInsertOperation(currentHistory.action));\n                }\n                break;\n            case 'InsertBookmark':\n            case 'RestrictEditing':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        if (action === 'RestrictEditing') {\n                            this.modifiedActions[parseInt(i.toString(), 10)].markerData.push(this.owner.editorModule.getMarkerData(this.modifiedActions[parseInt(i.toString(), 10)].removedNodes[0]));\n                        }\n                        operations.push(this.modifiedActions[parseInt(i.toString(), 10)].getDeleteOperation('DeleteBookmark', i === 0 ? true : undefined));\n                        this.modifiedActions[parseInt(i.toString(), 10)].markerData.shift();\n                    }\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'DeleteBookmark') {\n                            operations.push(currentHistory.getDeleteOperation('DeleteBookmark'));\n                            operations.push(currentHistory.getDeleteOperation('DeleteBookmark', true));\n                            continue;\n                        }\n                        operations.push(currentHistory.getInsertOperation(action));\n                    }\n                }\n                break;\n            case 'BackSpace':\n            case 'Delete':\n            case 'RemoveEditRange':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'InsertInline') {\n                            var operation = currentHistory.getDeleteOperation('DeleteBookmark', true);\n                            operations.push(operation);\n                        }\n                        else {\n                            var operationCollection = currentHistory.getActionInfo();\n                            operations = operations.concat(operationCollection);\n                            if (currentHistory.action === 'RemoveEditRange') {\n                                operations.push(currentHistory.getDeleteOperation(action, true));\n                            }\n                        }\n                    }\n                    operations.reverse();\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'InsertInline') {\n                            var operation = currentHistory.getInsertOperation('InsertBookmark');\n                            operations.push(operation);\n                        }\n                        else {\n                            operations.push(currentHistory.getDeleteOperation(action));\n                            if (currentHistory.action === 'RemoveEditRange') {\n                                operations.push(currentHistory.getDeleteOperation(action, true));\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'PageBreak':\n            case 'ColumnBreak':\n                if (this.owner.enableTrackChanges) {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.removedNodes.length > 0) {\n                            operations = operations.concat(currentHistory.getDeleteOperationsForTrackChanges());\n                        }\n                        var markerData = currentHistory.markerData[currentHistory.markerData.length - 1];\n                        var operation = currentHistory.getInsertOperation('Enter');\n                        var breakOperation = this.getInsertOperation(action);\n                        operation.markerData = markerData;\n                        breakOperation.markerData =\n                            this.owner.editorModule.getMarkerData(undefined, undefined, this.owner.editorModule.getRevision(markerData.revisionId));\n                        operations.push(operation);\n                        operations.push(breakOperation);\n                        operations.push(operation);\n                        operation.markerData.skipOperation = true;\n                    }\n                }\n                else {\n                    if (this.editorHistory.isUndoing) {\n                        for (var i = 0; i < this.modifiedActions.length; i++) {\n                            var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                            currentHistory.endIndex = currentHistory.startIndex;\n                            //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three backspace operation.\n                            operations.push(currentHistory.getDeleteOperation('Delete'));\n                            operations.push(currentHistory.getDeleteOperation('Delete'));\n                            operations.push(currentHistory.getDeleteOperation('Delete'));\n                            if (currentHistory.isRemovedNodes) {\n                                var operationCollection = currentHistory.getDeleteContent('BackSpace');\n                                operations = operations.concat(operationCollection);\n                            }\n                        }\n                    }\n                    else {\n                        for (var i = 0; i < this.modifiedActions.length; i++) {\n                            var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                            if (currentHistory.removedNodes.length > 0) {\n                                operations.push(currentHistory.getDeleteOperation(action));\n                            }\n                        }\n                        var operation = this.getInsertOperation('Enter');\n                        operation.markerData = { skipOperation: true };\n                        //Basically for pagebreak and column break there will three paragraph difference. So for transformation we sended three insert operation.\n                        operations.push(operation);\n                        operations.push(operation);\n                        operations.push(this.getInsertOperation(action));\n                        operations.push(operation);\n                    }\n                }\n                break;\n            case 'InsertHyperlink':\n            case 'AutoFormatHyperlink':\n            case 'RemoveHyperlink':\n                if (this.editorHistory.isUndoing && action === 'RemoveHyperlink') {\n                    var length_1 = 0;\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'FontColor' || currentHistory.action === 'Underline') {\n                            length_1 = currentHistory.endIndex - currentHistory.startIndex;\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].fieldBegin)) {\n                        this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].endIndex =\n                            this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].startIndex + length_1;\n                        var operation = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getDeleteOperation('Delete');\n                        operation.markerData = undefined;\n                        operations.push(operation);\n                        var operationCollection = this.modifiedActions[parseInt((this.modifiedActions.length - 1).toString(), 10)].getFieldOperation();\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (currentHistory.action === 'InsertHyperlink') {\n                            operations.push.apply(operations, currentHistory.getActionInfo());\n                        }\n                        else if (currentHistory.action === 'InsertInline') {\n                            if (currentHistory.insertedText === _base_types__WEBPACK_IMPORTED_MODULE_3__.CONTROL_CHARACTERS.Marker_Start ||\n                                currentHistory.insertedText === _base_types__WEBPACK_IMPORTED_MODULE_3__.CONTROL_CHARACTERS.Marker_End) {\n                                if (this.editorHistory.isUndoing) {\n                                    operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                                }\n                                else {\n                                    operations.push(currentHistory.getInsertOperation('InsertHyperlink'));\n                                }\n                            }\n                            else {\n                                if (this.editorHistory.isUndoing) {\n                                    operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                                }\n                                else {\n                                    operations.push(currentHistory.getInsertOperation('Insert'));\n                                }\n                            }\n                        }\n                        else if (currentHistory.action === 'Delete') {\n                            operations.push(currentHistory.getDeleteOperation(currentHistory.action));\n                        }\n                        else if (currentHistory.action === 'Underline') {\n                            operations = operations.concat(currentHistory.getActionInfo());\n                        }\n                        else if (currentHistory.action === 'FontColor') {\n                            operations = operations.concat(currentHistory.getActionInfo());\n                        }\n                    }\n                    if (this.editorHistory.isUndoing) {\n                        operations.reverse();\n                    }\n                }\n                break;\n            case 'InsertComment':\n                if (this.editorHistory.isUndoing) {\n                    this.getDeleteCommentOperation(this.modifiedActions, operations);\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        var operation = currentHistory.getInsertOperation(currentHistory.action);\n                        if ((currentHistory.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.CommentCharacterElementBox && currentHistory.action === 'InsertInline')) {\n                            operations.push(currentHistory.getCommentOperation(operation, currentHistory.action));\n                        }\n                        else if (currentHistory.action === 'InsertCommentWidget') {\n                            operation = this.getUpdateOperation();\n                            operations.push(currentHistory.getCommentOperation(operation, currentHistory.action));\n                        }\n                    }\n                }\n                break;\n            case 'RemoveComment':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = this.modifiedActions.length - 1; i >= 0; i--) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        var operation = undefined;\n                        var operationCollection = [];\n                        if (currentHistory.action === 'InsertInline' && currentHistory.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.CommentCharacterElementBox) {\n                            operation = currentHistory.getDeleteOperation(currentHistory.action);\n                            operationCollection.push(currentHistory.getCommentOperation(operation, 'InsertInline'));\n                        }\n                        else if (currentHistory.action === 'RemoveInline') {\n                            operation = currentHistory.getDeleteOperation(currentHistory.action);\n                            operationCollection.push(currentHistory.getCommentOperation(operation, 'InsertInline'));\n                            operation = currentHistory.getInsertOperation(currentHistory.action);\n                            operationCollection.push(currentHistory.getCommentOperation(operation, 'InsertInline'));\n                        }\n                        else if (currentHistory.action === 'DeleteComment') {\n                            operationCollection = currentHistory.getActionInfo();\n                        }\n                        else {\n                            this.owner.sfdtExportModule.iscontentInsert = false;\n                            operationCollection = currentHistory.getActionInfo();\n                            this.owner.sfdtExportModule.iscontentInsert = true;\n                        }\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        var operation = undefined;\n                        var operationCollection = [];\n                        if (currentHistory.action === 'RemoveInline' && currentHistory.removedNodes[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.CommentCharacterElementBox) {\n                            operation = currentHistory.getDeleteOperation(currentHistory.action);\n                            operationCollection.push(currentHistory.getCommentOperation(operation, currentHistory.action));\n                        }\n                        else if (currentHistory.action === 'InsertInline' && currentHistory.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.CommentCharacterElementBox) {\n                            operation = currentHistory.getInsertOperation(currentHistory.action);\n                            operationCollection.push(currentHistory.getCommentOperation(operation, currentHistory.action));\n                        }\n                        else {\n                            operationCollection = currentHistory.getActionInfo();\n                        }\n                        operations = operations.concat(operationCollection);\n                    }\n                }\n                break;\n            case 'DeleteComment':\n                if (this.editorHistory.isUndoing) {\n                    for (var j = this.modifiedActions.length - 1; j >= 0; j--) {\n                        var history_1 = this.modifiedActions[parseInt(j.toString(), 10)];\n                        var operation = history_1.getInsertOperation(history_1.action);\n                        if ((history_1.insertedElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.CommentCharacterElementBox && history_1.action === 'RemoveInline')) {\n                            operations.push(history_1.getCommentOperation(operation, 'InsertInline'));\n                        }\n                        else if (history_1.action === 'DeleteCommentWidget') {\n                            operation = this.getUpdateOperation();\n                            operations.push(history_1.getCommentOperation(operation, 'InsertCommentWidget'));\n                        }\n                        else if (history_1.action === 'DeleteComment') {\n                            history_1.getActionInfo();\n                        }\n                    }\n                }\n                else {\n                    this.getDeleteCommentOperation(this.modifiedActions, operations);\n                }\n                break;\n            case 'FormField': {\n                var currentHistory = this.modifiedActions.pop();\n                operations = currentHistory.getFieldOperation();\n                break;\n            }\n            case 'IMEInput':\n                if (isInvertOperation && (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                    if (this.modifiedActions[0].removedNodes.length > 0) {\n                        var removeOperation = this.modifiedActions[0].getDeleteOperation('Delete');\n                        removeOperation.length = removeOperation.text.length;\n                        operations.push(removeOperation);\n                    }\n                    var insertOperation = this.modifiedActions[this.modifiedActions.length - 1].getInsertOperation('Insert');\n                    insertOperation.length = insertOperation.text.length;\n                    operations.push(insertOperation);\n                    operations.reverse();\n                    for (var i = 0; i < operations.length; i++) {\n                        var operation = operations[parseInt(i.toString(), 10)];\n                        if (operation.action === 'Insert') {\n                            operation.action = 'Delete';\n                        }\n                        else if (operation.action === 'Delete') {\n                            operation.action = 'Insert';\n                        }\n                    }\n                }\n                else {\n                    var currentHistory = this.modifiedActions[this.modifiedActions.length - 1];\n                    if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n                        for (var i = 0; i < this.modifiedActions.length; i++) {\n                            currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                            if (currentHistory.removedNodes.length > 0) {\n                                operations.push(currentHistory.getDeleteOperation(action));\n                            }\n                            if (currentHistory.isRemovedNodes) {\n                                var operationCollection = currentHistory.getDeleteContent('BackSpace');\n                                operations = operations.concat(operationCollection);\n                            }\n                            currentHistory.isRemovedNodes = false;\n                        }\n                    }\n                    else {\n                        if (currentHistory.removedNodes.length > 0) {\n                            operations.push(currentHistory.getDeleteOperation(action));\n                        }\n                        operations.push(currentHistory.getInsertOperation(this.action));\n                    }\n                    currentHistory.isRemovedNodes = false;\n                }\n                break;\n            case 'Accept All':\n            case 'ReplaceAll':\n            case 'Reject All': {\n                var isSkip = false;\n                if (this.editorHistory.isUndoing) {\n                    for (var i = this.modifiedActions.length - 1; i >= 0; i--) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentHistory.cellOperation) && currentHistory.cellOperation.length > 0) {\n                            operations.push(currentHistory.cellOperation[0]);\n                            isSkip = true;\n                            currentHistory.cellOperation = [];\n                        }\n                        else {\n                            var operationsCollection = currentHistory.getActionInfo();\n                            operations.push.apply(operations, operationsCollection);\n                        }\n                    }\n                }\n                else {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentHistory.cellOperation) && currentHistory.cellOperation.length > 0) {\n                            operations.push(currentHistory.cellOperation[0]);\n                            isSkip = true;\n                            currentHistory.cellOperation = [];\n                        }\n                        else {\n                            var operationsCollection = currentHistory.getActionInfo();\n                            operations.push.apply(operations, operationsCollection);\n                        }\n                    }\n                }\n                // if (!isSkip && (action === 'Accept All' || action === 'Reject All')) {\n                //     operations.reverse();\n                // }\n                break;\n            }\n            case 'Paste':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    currentHistory.type = this.type === 'PasteToc' ? this.type : 'Paste';\n                    var pasteOperations = currentHistory.getActionInfo();\n                    operations.push.apply(operations, pasteOperations);\n                }\n                break;\n            case 'TOC':\n                if (this.modifiedActions) {\n                    if (this.editorHistory.isUndoing) {\n                        for (var i = this.modifiedActions.length - 1; i >= 0; i--) {\n                            var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                            currentHistory.type = currentHistory.action === 'Paste' ? 'PasteToc' : undefined;\n                            var tocOperations = currentHistory.getActionInfo();\n                            operations.push.apply(operations, tocOperations);\n                        }\n                    }\n                    else {\n                        for (var i = 0; i < this.modifiedActions.length; i++) {\n                            var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                            currentHistory.type = currentHistory.action === 'Paste' ? 'PasteToc' : undefined;\n                            var tocOperations = currentHistory.getActionInfo();\n                            operations.push.apply(operations, tocOperations);\n                        }\n                    }\n                }\n                break;\n            case 'DragAndDropContent':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    currentHistory.type = currentHistory.action === 'Paste' ? 'Paste' : undefined;\n                    var ddcOperations = currentHistory.getActionInfo();\n                    operations.push.apply(operations, ddcOperations);\n                }\n                break;\n            case 'ClearFormat':\n                if (this.editorHistory.isUndoing) {\n                    for (var i = 0; i < this.modifiedActions.length; i++) {\n                        operations.push.apply(operations, this.modifiedActions[parseInt(i.toString(), 10)].modifiedFormatOperation);\n                        this.modifiedActions[parseInt(i.toString(), 10)].modifiedFormatOperation = [];\n                    }\n                }\n                else {\n                    var clearHistory = this.modifiedActions[this.modifiedActions.length - 1];\n                    var formatOperation = clearHistory.buildFormatOperation('ClearFormat', true);\n                    operations = formatOperation.slice();\n                }\n                break;\n            case 'ApplyStyle': {\n                var styleHistory = void 0;\n                var formatstyleOperation = [];\n                if (this.modifiedActions[0] instanceof HistoryInfo) {\n                    var historyInfo = this.modifiedActions[0];\n                    styleHistory = historyInfo.modifiedActions[0];\n                    formatstyleOperation = styleHistory.buildFormatOperation('ClearFormat', true);\n                    operations = formatstyleOperation.slice();\n                }\n                if (!(this.modifiedActions[this.modifiedActions.length - 1] instanceof HistoryInfo)) {\n                    formatstyleOperation = this.modifiedActions[this.modifiedActions.length - 1].buildFormatOperation(action, true);\n                    for (var i = 0; i < formatstyleOperation.length; i++) {\n                        operations.push(formatstyleOperation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                break;\n            }\n            case 'TableMarginsSelection':\n                this.modifiedActions[this.modifiedActions.length - 1].createTableFormat(this.modifiedActions[this.modifiedActions.length - 1].action);\n                this.modifiedActions[this.modifiedActions.length - 1].type = 'TableFormat';\n                operations.push(this.modifiedActions[this.modifiedActions.length - 1].getFormatOperation());\n                break;\n            case 'BordersAndShading':\n                if (this.modifiedActions[0].action === 'TableFormat') {\n                    this.modifiedActions[0].type = 'TableFormat';\n                    this.modifiedActions[0].createTableFormat('BordersAndShading');\n                    operations.push(this.modifiedActions[0].getFormatOperation());\n                }\n                else {\n                    this.modifiedActions[0].createCellFormat('BordersAndShading');\n                    this.modifiedActions[0].type = 'CellFormat';\n                    operations = this.modifiedActions[0].getSelectedCellOperation('BordersAndShading', undefined, true, true, true);\n                }\n                break;\n            case 'AutoList':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var currentHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    var autoListOperations = currentHistory.getActionInfo();\n                    operations.push.apply(operations, autoListOperations);\n                }\n                break;\n            case 'TableProperties':\n                for (var i = 0; i < this.modifiedActions.length; i++) {\n                    var tablePropHistory = this.modifiedActions[parseInt(i.toString(), 10)];\n                    if (tablePropHistory.action === 'TableFormat') {\n                        tablePropHistory.createTableFormat(tablePropHistory.action);\n                        tablePropHistory.type = 'TableFormat';\n                        operations.push(tablePropHistory.getFormatOperation());\n                    }\n                    else if (tablePropHistory.action === 'RowFormat') {\n                        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing &&\n                            tablePropHistory.modifiedProperties.length > 1) {\n                            operations = tablePropHistory.modifiedFormatOperation;\n                            tablePropHistory.modifiedFormatOperation = [];\n                        }\n                        else {\n                            tablePropHistory.createRowFormat(tablePropHistory.action);\n                            tablePropHistory.type = 'RowFormat';\n                            operations.push(tablePropHistory.getFormatOperation());\n                        }\n                    }\n                    else if (tablePropHistory.action === 'CellFormat') {\n                        tablePropHistory.createCellFormat(tablePropHistory.action);\n                        tablePropHistory.type = 'CellFormat';\n                        var cellProp = tablePropHistory.getSelectedCellOperation(tablePropHistory.action, false, false, false, true);\n                        for (var i_1 = 0; i_1 < cellProp.length; i_1++) {\n                            operations.push(cellProp[parseInt(i_1.toString(), 10)]);\n                        }\n                    }\n                }\n                break;\n            case 'CellMarginsSelection':\n                this.modifiedActions[this.modifiedActions.length - 1].createCellFormat('CellOptions');\n                this.modifiedActions[this.modifiedActions.length - 1].type = 'CellFormat';\n                operations = this.modifiedActions[this.modifiedActions.length - 1].getSelectedCellOperation('CellOptions', false, false, false, true).slice();\n                break;\n        }\n        return operations;\n    };\n    HistoryInfo.prototype.revert = function () {\n        this.editorHistory.currentHistoryInfo = this;\n        if (this.action === 'BordersAndShading') {\n            this.owner.editorModule.isBordersAndShadingDialog = true;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.modifiedActions)) {\n            if (this.editorHistory.isUndoing) {\n                var i = this.modifiedActions.length;\n                while (i > 0) {\n                    var baseHistoryInfo = this.modifiedActions[i - 1];\n                    baseHistoryInfo.revert();\n                    i = i - 1;\n                }\n            }\n            else {\n                var i = 0;\n                while (i < this.modifiedActions.length) {\n                    var baseHistoryInfo = this.modifiedActions[parseInt(i.toString(), 10)];\n                    baseHistoryInfo.revert();\n                    i = i + 1;\n                }\n            }\n        }\n        if (this.action === 'RestrictEditing') {\n            var user = this.editRangeStart.user !== '' ? this.editRangeStart.user : this.editRangeStart.group;\n            if (this.editorHistory.isUndoing) {\n                var index = this.owner.documentHelper.editRanges.get(user).indexOf(this.editRangeStart);\n                if (index !== -1) {\n                    this.owner.documentHelper.editRanges.get(user).splice(index, 1);\n                }\n            }\n            else {\n                this.owner.editorModule.updateRangeCollection(this.editRangeStart, user);\n            }\n            this.owner.selectionModule.updateEditRangeCollection();\n        }\n        if (!this.isChildHistoryInfo) {\n            this.editorHistory.updateComplexHistory();\n        }\n        else {\n            this.editorHistory.updateComplexHistoryInternal();\n        }\n    };\n    HistoryInfo.prototype.destroy = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.modifiedActions)) {\n            while (this.modifiedActions.length > 0) {\n                var baseHistoryInfo = this.modifiedActions[this.modifiedActions.length - 1];\n                baseHistoryInfo.destroy();\n                this.modifiedActions.splice(this.modifiedActions.indexOf(baseHistoryInfo), 1);\n            }\n            this.modifiedActions = undefined;\n        }\n        _super.prototype.destroy.call(this);\n    };\n    return HistoryInfo;\n}(_base_history_info__WEBPACK_IMPORTED_MODULE_1__.BaseHistoryInfo));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/history-info.js?");

/***/ })

}]);