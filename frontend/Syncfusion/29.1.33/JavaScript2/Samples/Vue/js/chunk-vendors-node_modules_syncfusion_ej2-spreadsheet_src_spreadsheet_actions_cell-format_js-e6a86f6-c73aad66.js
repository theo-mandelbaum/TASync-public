"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_actions_cell-format_js-e6a86f6-c73aad66"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/cell-format.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/cell-format.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellFormat: () => (/* binding */ CellFormat)\n/* harmony export */ });\n/* harmony import */ var _spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../spreadsheet/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * CellFormat module allows to format the cell styles.\n */\nvar CellFormat = /** @class */ (function () {\n    function CellFormat(parent) {\n        this.checkHeight = false;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    CellFormat.prototype.applyCellFormat = function (args) {\n        if (args.checkHeight) {\n            if (!this.checkHeight) {\n                this.checkHeight = true;\n            }\n            this.updateRowHeight(args.rowIdx, args.colIdx, args.lastCell, args.onActionUpdate, args.outsideViewport, args.rowHeight);\n            return;\n        }\n        var keys = Object.keys(args.style);\n        var sheet = this.parent.getActiveSheet();\n        if (args.lastCell && !keys.length && ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getMaxHgt)(sheet, args.rowIdx) <= (sheet.standardHeight || 20))) {\n            return;\n        }\n        var cell = args.td || this.parent.getCell(args.rowIdx, args.colIdx);\n        if (cell) {\n            this.updateMergeBorder(args, sheet);\n            var cellStyleColor = void 0;\n            if (args.formatColor && cell.style.color === args.formatColor) {\n                cellStyleColor = args.style.color;\n                delete args.style.color;\n            }\n            if (args.style.border !== undefined || args.style.borderTop !== undefined || args.style.borderLeft !== undefined) {\n                var curStyle_1 = {};\n                Object.keys(args.style).forEach(function (key) { curStyle_1[\"\" + key] = args.style[\"\" + key]; });\n                if (curStyle_1.border !== undefined) {\n                    Object.assign(cell.style, { borderRight: args.style.border, borderBottom: args.style.border });\n                    this.setLeftBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.colIdx === this.parent.frozenColCount(sheet) ? args.hRow : args.row, args.onActionUpdate, args.first, sheet);\n                    this.setTopBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet, args);\n                    delete curStyle_1.border;\n                }\n                if (curStyle_1.borderTop !== undefined) {\n                    this.setTopBorder(args.style.borderTop, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet, args);\n                    delete curStyle_1.borderTop;\n                }\n                if (curStyle_1.borderLeft !== undefined) {\n                    this.setLeftBorder(args.style.borderLeft, cell, args.rowIdx, args.colIdx, args.colIdx === this.parent.frozenColCount(sheet) ? args.hRow : args.row, args.onActionUpdate, args.first, sheet);\n                    delete curStyle_1.borderLeft;\n                }\n                if (Object.keys(curStyle_1).length) {\n                    if (curStyle_1.borderBottom !== undefined) {\n                        this.setThickBorderHeight(curStyle_1.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);\n                    }\n                    Object.assign(cell.style, curStyle_1);\n                }\n            }\n            else {\n                if (args.style.borderBottom !== undefined) {\n                    this.setThickBorderHeight(args.style.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);\n                }\n                Object.assign(cell.style, args.style);\n                if (cell) {\n                    var dataBar = cell.querySelector('.e-cf-databar');\n                    if (dataBar) {\n                        var dataBarValue = dataBar.querySelector('.e-databar-value');\n                        if (dataBarValue) {\n                            dataBarValue.style.textDecoration = args.style.textDecoration;\n                            if (args.style.verticalAlign) {\n                                dataBarValue.style.alignItems = args.style.verticalAlign === 'top' ? 'start' :\n                                    args.style.verticalAlign === 'middle' ? 'center' : 'end';\n                            }\n                        }\n                    }\n                }\n                var CellElem = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(args.rowIdx, args.colIdx, sheet); // Need to remove after adding span support to merge\n                if (CellElem && (CellElem.rowSpan || CellElem.colSpan) && cell.offsetHeight > 0) {\n                    var height = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getTextHeight)(this.parent, CellElem.style || this.parent.cellStyle);\n                    if (height > cell.offsetHeight) {\n                        (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setRowEleHeight)(this.parent, sheet, cell.offsetHeight, args.rowIdx);\n                    }\n                }\n                if (args.style.fontSize && cell) {\n                    var ddlCont = cell.querySelector('.e-validation-list');\n                    if (ddlCont) {\n                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.addListValidationDropdown, {\n                            ddlCont: ddlCont,\n                            rowIdx: args.rowIdx, colIdx: args.colIdx, updatePosition: true\n                        });\n                    }\n                }\n            }\n            var cellModel = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(args.rowIdx, args.colIdx, sheet, null, true);\n            if (!sheet.rows[args.rowIdx] || !sheet.rows[args.rowIdx].customHeight) {\n                if (args.isHeightCheckNeeded) {\n                    if (!args.manualUpdate) {\n                        if (!cellModel.wrap && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHeightCheckNeeded)(args.style)) {\n                            (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setMaxHgt)(sheet, args.rowIdx, args.colIdx, (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getTextHeightWithBorder)(this.parent, args.rowIdx, args.colIdx, sheet, args.style));\n                        }\n                        if (args.lastCell) {\n                            var height = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getMaxHgt)(sheet, args.rowIdx);\n                            var defaultHeight = sheet.standardHeight || 20;\n                            if (height > defaultHeight && height > (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRowHeight)(sheet, args.rowIdx)) {\n                                (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setRowEleHeight)(this.parent, sheet, height, args.rowIdx, args.row, args.hRow);\n                            }\n                        }\n                    }\n                    else {\n                        if (!this.checkHeight) {\n                            this.checkHeight = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHeightCheckNeeded)(args.style, args.onActionUpdate);\n                        }\n                        if (cell && cell.children[0] && cell.children[0].className === 'e-cf-databar' && args.style.fontSize) {\n                            cell.children[0].querySelector('.e-databar-value').style.fontSize = args.style.fontSize;\n                        }\n                        if (!args.isFromAutoFillOption) {\n                            this.updateRowHeight(args.rowIdx, args.colIdx, args.lastCell, args.onActionUpdate, null, args.rowHeight);\n                        }\n                        if (cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {\n                            cell.style.lineHeight = (parseFloat((cellModel.style && cellModel.style.fontSize) || this.parent.cellStyle.fontSize) * (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getLineHeight)(cellModel.style && cellModel.style.fontFamily ? cellModel.style : this.parent.cellStyle)) + 'pt';\n                        }\n                    }\n                }\n            }\n            else if (!cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {\n                var hgt = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRowHeight)(sheet, args.rowIdx, true) - (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getBorderHeight)(args.rowIdx, args.colIdx, sheet);\n                if (hgt < (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getTextHeight)(this.parent, cellModel.style)) {\n                    cell.style.lineHeight = hgt + \"px\";\n                }\n                else if (cell.style.lineHeight) {\n                    cell.style.lineHeight = '';\n                }\n            }\n            if (cellStyleColor !== undefined) {\n                args.style.color = cellStyleColor;\n            }\n        }\n        else {\n            this.updateRowHeight(args.rowIdx, args.colIdx, true, args.onActionUpdate, null, args.rowHeight);\n        }\n    };\n    CellFormat.prototype.updateRowHeight = function (rowIdx, colIdx, isLastCell, onActionUpdate, outsideViewport, rHeight) {\n        if (this.checkHeight) {\n            var sheet = this.parent.getActiveSheet();\n            var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(rowIdx, colIdx, sheet, null, true);\n            if (!cell.rowSpan) {\n                var hgt = 0;\n                hgt = (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getTextHeightWithBorder)(this.parent, rowIdx, colIdx, sheet, cell.style || this.parent.cellStyle, cell.wrap && !cell.colSpan ? (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getLines)(this.parent.getDisplayText(cell), (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getExcludedColumnWidth)(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle)\n                    : 1);\n                var val = cell.value && cell.value.toString();\n                if (val && val.indexOf('\\n') > -1) {\n                    var i = void 0;\n                    var splitVal = val.split('\\n');\n                    var n = 0;\n                    var valLength = splitVal.length;\n                    for (i = 0; i < valLength; i++) {\n                        var lines = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getLines)(splitVal[i], (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getExcludedColumnWidth)(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle);\n                        if (lines === 0) {\n                            lines = 1; // for empty new line\n                        }\n                        n = n + lines;\n                    }\n                    hgt = (0,_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.getTextHeightWithBorder)(this.parent, rowIdx, colIdx, sheet, cell.style || this.parent.cellStyle, n);\n                }\n                var defaultHeight = sheet && sheet.standardHeight ? sheet.standardHeight : 20;\n                if (hgt < defaultHeight) {\n                    hgt = defaultHeight; // default height\n                }\n                (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setMaxHgt)(sheet, rowIdx, colIdx, hgt);\n                if (!outsideViewport) {\n                    var td = this.parent.getCell(rowIdx, colIdx);\n                    if (td && td.children[0] && td.children[0].className === 'e-cf-databar') {\n                        td.children[0].style.height = '100%';\n                        td.children[0].firstElementChild.nextElementSibling.style.height = '100%';\n                    }\n                }\n                if (isLastCell) {\n                    this.checkHeight = false;\n                    var maxHgt = rHeight ? rHeight : (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getMaxHgt)(sheet, rowIdx);\n                    var prevHgt = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRowHeight)(sheet, rowIdx);\n                    if (onActionUpdate ? maxHgt !== prevHgt : maxHgt > prevHgt) {\n                        (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setRowEleHeight)(this.parent, sheet, maxHgt, rowIdx, null, null, true, outsideViewport);\n                    }\n                }\n            }\n        }\n    };\n    CellFormat.prototype.updateMergeBorder = function (args, sheet) {\n        var cellModel = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(args.rowIdx, args.colIdx, sheet, null, true);\n        var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };\n        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.activeCellMergedRange, mergeArgs);\n        if (cellModel.rowSpan > 1 && !args.style.borderBottom) {\n            var bottomCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);\n            if (bottomCell.style && bottomCell.style.borderBottom) {\n                args.style.borderBottom = bottomCell.style.borderBottom;\n            }\n        }\n        if (cellModel.colSpan > 1 && !args.style.borderRight) {\n            var rightCell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);\n            if (rightCell.style && rightCell.style.borderRight) {\n                args.style.borderRight = rightCell.style.borderRight;\n            }\n        }\n    };\n    CellFormat.prototype.setLeftBorder = function (border, cell, rowIdx, colIdx, row, actionUpdate, first, sheet) {\n        if (first && first.includes('Column')) {\n            return;\n        }\n        var isRtl = this.parent.enableRtl;\n        var prevCell = isRtl ? this.parent.getCell(rowIdx, colIdx + 1, row) :\n            this.parent.getCell(rowIdx, colIdx - 1, row);\n        if (prevCell) {\n            var model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(rowIdx, colIdx - 1, sheet, false, true);\n            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {\n                var mergeArgs = { range: [rowIdx, colIdx - 1, rowIdx, colIdx - 1] };\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.activeCellMergedRange, mergeArgs);\n                model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);\n                if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {\n                    return;\n                }\n                else {\n                    model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);\n                    if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {\n                        return;\n                    }\n                    cell.style.borderLeft = border;\n                }\n            }\n            else {\n                if (actionUpdate && border !== '' && colIdx === this.parent.viewport.leftIndex) {\n                    this.parent.getMainContent().scrollLeft -= this.getBorderSize(border);\n                }\n                prevCell.style.borderRight = (border === 'none') ? prevCell.style.borderRight : border;\n            }\n        }\n        else {\n            cell.style.borderLeft = border;\n        }\n    };\n    CellFormat.prototype.setTopBorder = function (border, cell, rowIdx, colIdx, pRow, pHRow, actionUpdate, first, lastCell, manualUpdate, sheet, args) {\n        if (first && first.includes('Row')) {\n            return;\n        }\n        var col = colIdx;\n        var model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(rowIdx, colIdx, sheet, false, true);\n        if (model.colSpan > 1 && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenCol)(sheet, colIdx)) {\n            col = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.skipHiddenIdx)(sheet, colIdx, true, 'columns');\n            if (col > colIdx + model.colSpan - 1) {\n                col = colIdx;\n            }\n        }\n        var prevCell = this.parent.getCell(rowIdx - 1, col, pRow);\n        if (prevCell) {\n            model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(rowIdx - 1, colIdx, sheet, false, true);\n            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {\n                var mergeArgs = { range: [rowIdx - 1, colIdx, rowIdx - 1, colIdx] };\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.activeCellMergedRange, mergeArgs);\n                model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);\n                if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {\n                    return;\n                }\n                else {\n                    model = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);\n                    if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {\n                        return;\n                    }\n                    cell.style.borderTop = border;\n                    if (args.mergeBorderRows !== undefined && args.mergeBorderRows.indexOf(rowIdx) === -1) {\n                        args.mergeBorderRows.push(rowIdx);\n                    }\n                }\n            }\n            else {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenRow)(sheet, rowIdx - 1)) {\n                    var index = [Number(prevCell.parentElement.getAttribute('aria-rowindex')) - 1, colIdx];\n                    if (this.parent.getCellStyleValue(['bottomPriority'], index).bottomPriority) {\n                        return;\n                    }\n                }\n                if (actionUpdate && border !== '' && sheet.topLeftCell.includes(\"\" + (rowIdx + 1))) {\n                    this.parent.getMainContent().parentElement.scrollTop -= this.getBorderSize(border);\n                }\n                this.setThickBorderHeight(border, rowIdx - 1, colIdx, prevCell, pRow, pHRow, actionUpdate, lastCell, manualUpdate);\n                prevCell.style.borderBottom = (border === 'none') ? prevCell.style.borderBottom : border;\n            }\n        }\n        else {\n            cell.style.borderTop = border;\n        }\n    };\n    CellFormat.prototype.setThickBorderHeight = function (border, rowIdx, colIdx, cell, row, hRow, actionUpdate, lastCell, manualUpdate) {\n        var size = border ? this.getBorderSize(border) : 1;\n        var sheet = this.parent.getActiveSheet();\n        if (size > 2 && (!sheet.rows[rowIdx] || !sheet.rows[rowIdx].customHeight)) {\n            if (manualUpdate) {\n                if (!this.checkHeight) {\n                    this.checkHeight = true;\n                }\n                this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);\n            }\n            else {\n                var prevHeight = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRowHeight)(sheet, rowIdx);\n                var height = Math.ceil(this.parent.calculateHeight(this.parent.getCellStyleValue(['fontFamily', 'fontSize'], [rowIdx, colIdx]), 1, 3));\n                if (height > prevHeight) {\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.setRowEleHeight)(this.parent, sheet, height, rowIdx, row, hRow);\n                }\n            }\n        }\n        if (actionUpdate && (lastCell || !this.checkHeight) && size < 3 && (!sheet.rows[rowIdx] ||\n            !sheet.rows[rowIdx].customHeight)) {\n            if (!this.checkHeight) {\n                this.checkHeight = true;\n            }\n            this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);\n        }\n    };\n    CellFormat.prototype.getBorderSize = function (border) {\n        var size = border.split(' ')[0];\n        return size === 'thin' ? 1 : (size === 'medium' ? 2 : (size === 'thick' ? 3 : (parseInt(size, 10) || 1)));\n    };\n    CellFormat.prototype.clearObj = function (args) {\n        var _this = this;\n        var options = args.options;\n        var range = options.range ? (options.range.indexOf('!') > 0) ?\n            options.range.substring(options.range.lastIndexOf('!') + 1) : options.range : this.parent.getActiveSheet().selectedRange;\n        var sheetIndex = (options.range && options.range.indexOf('!') > 0) ?\n            (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSheetIndex)(this.parent, options.range.substring(0, options.range.lastIndexOf('!'))) :\n            this.parent.activeSheetIndex;\n        var rangeIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(range));\n        var isRangeReadOnly = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isReadOnlyCells)(this.parent, rangeIdx);\n        if (isRangeReadOnly) {\n            if (args.isAction) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.readonlyAlert, null);\n            }\n            return;\n        }\n        var sheet = this.parent.sheets[sheetIndex];\n        var sRIdx = rangeIdx[0];\n        var eRIdx = rangeIdx[2];\n        var sCIdx;\n        var eCIdx;\n        var overlayElements = this.parent.element.getElementsByClassName('e-ss-overlay-active');\n        var isOverlay = overlayElements.length > 0;\n        var clearCFArgs;\n        var isSelectAll = this.parent.element.getElementsByClassName('e-prev-highlight-bottom').length > 0;\n        var eventArgs = { range: range, type: options.type, requestType: 'clear',\n            sheetIndex: sheetIndex };\n        var actionBegin = function () {\n            if (args.isAction) {\n                _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.beginAction, { action: 'beforeClear', eventArgs: eventArgs });\n            }\n        };\n        var actionComplete = function () {\n            if (args.isAction) {\n                eventArgs = { range: sheet.name + '!' + range, type: options.type, sheetIndex: sheetIndex };\n                if (clearCFArgs) {\n                    eventArgs.cfClearActionArgs = clearCFArgs.cfClearActionArgs;\n                }\n                _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.completeAction, { eventArgs: eventArgs, action: 'clear', isSelectAll: isSelectAll });\n            }\n        };\n        var isClearAll = options.type === 'Clear All';\n        if (isOverlay) {\n            if (options.type === 'Clear Contents' || isClearAll) {\n                actionBegin();\n                if (overlayElements[0].classList.contains('e-datavisualization-chart')) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.deleteChart, {\n                        id: overlayElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1, clearAction: true\n                    });\n                }\n                else {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.deleteImage, {\n                        id: overlayElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1, clearAction: true\n                    });\n                }\n                actionComplete();\n            }\n        }\n        else {\n            actionBegin();\n            if (options.type === 'Clear Formats' || isClearAll) {\n                clearCFArgs = { range: range, sheetIdx: sheetIndex, isClear: true };\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.clearCFRule, clearCFArgs);\n                args.cfClearActionArgs = clearCFArgs.cfClearActionArgs;\n                if (isClearAll) {\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.cellValidation, { range: range, isRemoveValidation: true });\n                    if (sRIdx === 0 && rangeIdx[1] === 0 && eRIdx >= sheet.usedRange.rowIndex && rangeIdx[3] >= sheet.usedRange.colIndex) {\n                        this.parent.setUsedRange(sRIdx, rangeIdx[1], sheet, false, true);\n                    }\n                }\n                for (sRIdx; sRIdx <= eRIdx; sRIdx++) {\n                    sCIdx = rangeIdx[1];\n                    eCIdx = rangeIdx[3];\n                    for (sCIdx; sCIdx <= eCIdx; sCIdx++) {\n                        var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(sRIdx, sCIdx, sheet);\n                        var cellElem = this.parent.getCell(sRIdx, sCIdx);\n                        if (cell) {\n                            if (isClearAll && cell.formula) {\n                                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.clearFormulaDependentCells, { cellRef: (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)([sRIdx, sCIdx, sRIdx, sCIdx]) });\n                            }\n                            if (cell.wrap) {\n                                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.wrapEvent, { range: [sRIdx, sCIdx, sRIdx, sCIdx], wrap: false, sheet: sheet });\n                            }\n                            if (cell.hyperlink) {\n                                if (cellElem) {\n                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.removeClass)(cellElem.querySelectorAll('.e-hyperlink'), 'e-hyperlink-style');\n                                }\n                                if (isClearAll) {\n                                    this.parent.removeHyperlink(sheet.name + '!' + (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeAddress)([sRIdx, sCIdx, sRIdx, sCIdx]));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (options.type === 'Clear Hyperlinks') {\n                this.parent.removeHyperlink(sheet.name + '!' + range);\n            }\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.clear, { range: sheet.name + '!' + range, type: options.type });\n            this.parent.serviceLocator.getService('cell').refreshRange((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(range)), false, false, false, options.type === 'Clear Hyperlinks' ? true : false, (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isImported)(this.parent), !isClearAll, null, null, null, isSelectAll);\n            if (!args.isFromUpdateAction) {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.selectRange, { address: range });\n            }\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.activeCellChanged, null);\n            actionComplete();\n        }\n    };\n    CellFormat.prototype.addEventListener = function () {\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.applyCellFormat, this.applyCellFormat, this);\n        this.parent.on(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.clearViewer, this.clearObj, this);\n    };\n    CellFormat.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.applyCellFormat, this.applyCellFormat);\n            this.parent.off(_spreadsheet_index__WEBPACK_IMPORTED_MODULE_0__.clearViewer, this.clearObj);\n        }\n    };\n    /**\n     * Destroy cell format module.\n     *\n     * @returns {void} - Destroy cell format module.\n     */\n    CellFormat.prototype.destroy = function () {\n        this.removeEventListener();\n        this.parent = null;\n        this.checkHeight = null;\n    };\n    /**\n     * Get the cell format module name.\n     *\n     * @returns {string} - Get the cell format module name.\n     */\n    CellFormat.prototype.getModuleName = function () {\n        return 'cellformat';\n    };\n    return CellFormat;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/cell-format.js?");

/***/ })

}]);