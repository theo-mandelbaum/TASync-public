"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor_e-73e985e4"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Editor: () => (/* binding */ Editor)\n/* harmony export */ });\n/* harmony import */ var _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../selection/selection-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/selection/selection-helper.js\");\n/* harmony import */ var _viewer_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../viewer/page */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/page.js\");\n/* harmony import */ var _format_character_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../format/character-format */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/character-format.js\");\n/* harmony import */ var _editor_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/index.js\");\n/* harmony import */ var _list_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../list/list */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list.js\");\n/* harmony import */ var _list_abstract_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../list/abstract-list */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/abstract-list.js\");\n/* harmony import */ var _list_list_level__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../list/list-level */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/list-level.js\");\n/* harmony import */ var _list_level_override__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../list/level-override */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/list/level-override.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../base/index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/index.js\");\n/* harmony import */ var _format_style__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../format/style */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/format/style.js\");\n/* harmony import */ var _editor_history_index__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../editor-history/index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor-history/index.js\");\n/* harmony import */ var _table_resizer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./table-resizer */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/table-resizer.js\");\n/* harmony import */ var _base_dictionary__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../base/dictionary */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/dictionary.js\");\n/* harmony import */ var _base_types__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../base/types */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/types.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _track_changes_track_changes__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../track-changes/track-changes */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/track-changes/track-changes.js\");\n/* harmony import */ var _base_ajax_helper__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../base/ajax-helper */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/ajax-helper.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/index.js\");\n/* harmony import */ var _track_changes_track_changes_pane__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../track-changes/track-changes-pane */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/track-changes/track-changes-pane.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Check box character is rendered smaller when compared to MS Word\n// So, mutiplied the font side by below factor to render check box character large.\nvar CHECK_BOX_FACTOR = 1.35;\n/**\n * Editor module\n */\nvar Editor = /** @class */ (function () {\n    /**\n     * Initialize the editor module\n     *\n     * @param {DocumentHelper} documentHelper - Document helper\n     * @private\n     */\n    function Editor(documentHelper) {\n        var _this = this;\n        this.nodes = [];\n        this.editHyperlinkInternal = false;\n        /**\n         * @private\n         */\n        this.startParagraph = undefined;\n        /**\n         * @private\n         */\n        this.endParagraph = undefined;\n        this.formFieldCounter = 1;\n        this.skipFieldDeleteTracking = false;\n        this.skipFootNoteDeleteTracking = false;\n        this.isForHyperlinkFormat = false;\n        this.isTrackingFormField = false;\n        this.isInsertText = false;\n        this.casingIndex = -1;\n        this.checkLastLetterSpace = '';\n        this.checkLastLetterSpaceDot = '';\n        this.pasteFootNoteType = '';\n        this.isInsertingText = false;\n        /**\n         * @private\n         */\n        this.keywordIndex = 0;\n        /**\n         * @private\n         */\n        this.dictionaryObjcetIDIncreament = 1;\n        /**\n         * @private\n         */\n        this.dictionaryObjectIndexIncrement = 0;\n        /**\n         * @private\n         */\n        this.XMLFilesCount = 1;\n        /**\n         * @private\n         */\n        this.XMLFilesNameSpaceCount = 1;\n        /**\n         * @private\n         */\n        this.xmlData = [];\n        /**\n         * @private\n         */\n        this.dictionaryObject = [];\n        /**\n        * @private\n        */\n        this.isFootnoteElementRemoved = false;\n        /**\n        * @private\n        */\n        this.isEndnoteElementRemoved = false;\n        /**\n        * @private\n        */\n        this.handledEnter = false;\n        /**\n         * @private\n         */\n        this.handledTextInput = false;\n        /**\n         * @private\n         */\n        this.removeEditRange = false;\n        /**\n         * @private\n         */\n        this.isRemoveRevision = false;\n        /**\n         * @private\n         */\n        this.isFootNoteInsert = false;\n        /**\n         * @private\n         */\n        this.isTableInsert = false;\n        /**\n         * @private\n         */\n        this.isFootNote = false;\n        /**\n         * @private\n         */\n        this.isHandledComplex = false;\n        /**\n         * @private\n         */\n        this.isUserInsert = false;\n        /**\n         * @private\n         */\n        this.tableResize = undefined;\n        /**\n         * @private\n         */\n        this.tocStyles = {};\n        /**\n         * @private\n         */\n        this.triggerPageSpellCheck = true;\n        /**\n         * @private\n         */\n        this.chartType = false;\n        /**\n         * @private\n         */\n        this.removedBookmarkElements = [];\n        /**\n         * @private\n         */\n        this.removedEditRangeStartElements = [];\n        /**\n         * @private\n         */\n        this.removedEditRangeEndElements = [];\n        /**\n         * @private\n         */\n        this.removedContentControlElements = [];\n        /**\n         * @private\n         */\n        this.tocBookmarkId = 0;\n        /**\n         * @private\n         */\n        this.copiedData = undefined;\n        /**\n        * @private\n        */\n        this.isPasteContentCheck = false;\n        this.pageRefFields = {};\n        this.delBlockContinue = false;\n        this.delBlock = undefined;\n        this.delSection = undefined;\n        /**\n         * @private\n         */\n        this.isInsertingTOC = false;\n        /**\n         * @private\n         */\n        this.isMeasureParaWidth = false;\n        this.editStartRangeCollection = [];\n        this.skipReplace = false;\n        this.skipTableElements = false;\n        this.editRangeID = [];\n        /**\n         * @private\n         */\n        this.isImageInsert = false;\n        /**\n         * @private\n         */\n        this.isSkipOperationsBuild = false;\n        /**\n         * @private\n         */\n        this.isCellFormatApplied = false;\n        /**\n         * @private\n         */\n        this.revisionData = undefined;\n        /**\n         * @private\n         */\n        this.splittedRevisions = [];\n        /**\n         * @private\n         */\n        this.isSkipComments = false;\n        /**\n         * @private\n         */\n        this.isRemoteAction = false;\n        /**\n         * @private\n         */\n        this.isIncrementalSave = false;\n        /**\n         * @private\n         */\n        this.listNumberFormat = '';\n        /**\n         * @private\n         */\n        this.listLevelNumber = 0;\n        /**\n         * @private\n         */\n        this.isXmlMapped = false;\n        /**\n         * @private\n         */\n        this.restrictLayout = false;\n        this.isAutoList = false;\n        this.isLastParaMarkCopied = false;\n        this.combineLastBlock = false;\n        /**\n         * @private\n         */\n        this.remotePasteRevision = [];\n        /**\n         * @private\n         */\n        this.isFieldOperation = false;\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        /**\n         * @private\n         */\n        this.copiedContent = '';\n        /**\n         * @private\n         */\n        this.copiedTextContent = '';\n        /**\n         * @private\n         */\n        this.previousParaFormat = undefined;\n        this.previousCharFormat = undefined;\n        this.previousSectionFormat = undefined;\n        this.pasteTextPosition = undefined;\n        //public isSkipHistory: boolean = false;\n        /**\n         * @private\n         */\n        this.isPaste = false;\n        /**\n         * @private\n         */\n        this.isPasteListUpdated = false;\n        /**\n         * @private\n         */\n        this.isHtmlPaste = false;\n        /**\n         * @private\n         */\n        this.isInsertField = false;\n        /**\n         * @private\n         */\n        this.isBordersAndShadingDialog = false;\n        /**\n         * @private\n        */\n        this.pasteImageIndex = undefined;\n        /**\n         * @private\n         * @returns {void}\n         */\n        this.onTextInputInternal = function () {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.Browser.isDevice) {\n                var documentHelper = _this.documentHelper;\n                var nbsp = new RegExp(String.fromCharCode(160), 'g');\n                var lineFeed = new RegExp(String.fromCharCode(10), 'g');\n                documentHelper.prefix = documentHelper.prefix.replace(nbsp, ' ').replace(lineFeed, ' ');\n                var text = documentHelper.editableDiv.textContent.replace(nbsp, ' ').replace(lineFeed, ' ');\n                var textBoxText = text.substring(2);\n                if (documentHelper.isCompositionStart && documentHelper.isCompositionUpdated) {\n                    documentHelper.isCompositionUpdated = false;\n                    if (!documentHelper.owner.isReadOnlyMode && documentHelper.owner.isDocumentLoaded && _this.canEditContentControl) {\n                        if (documentHelper.prefix.substring(2) !== textBoxText) {\n                            if (_this.selection.isEmpty) {\n                                /* eslint-disable-next-line max-len */\n                                _this.selection.start.setPositionForLineWidget(documentHelper.selection.start.currentWidget, _this.selection.start.offset - (documentHelper.prefix.length - 2));\n                                _this.handleTextInput(textBoxText);\n                                documentHelper.prefix = '@' + String.fromCharCode(160) + textBoxText;\n                            }\n                            else {\n                                _this.handleTextInput(textBoxText);\n                                documentHelper.prefix = '@' + String.fromCharCode(160) + textBoxText;\n                            }\n                        }\n                    }\n                    return;\n                }\n                else if (documentHelper.isCompositionStart && documentHelper.isCompositionEnd && documentHelper.suffix === '') {\n                    if (documentHelper.prefix.substring(2) !== textBoxText) {\n                        if (_this.selection.isEmpty && documentHelper.isCompositionStart) {\n                            documentHelper.isCompositionStart = false;\n                            /* eslint-disable-next-line max-len */\n                            _this.selection.start.setPositionForLineWidget(documentHelper.selection.start.currentWidget, _this.selection.start.offset - documentHelper.prefix.substring(2).length);\n                            _this.selection.retrieveCurrentFormatProperties();\n                            if (documentHelper.suffix === '' || textBoxText === '') {\n                                _this.handleTextInput(textBoxText);\n                            }\n                        }\n                        else if (!_this.selection.isEmpty) {\n                            documentHelper.isCompositionStart = false;\n                            _this.handleTextInput(textBoxText);\n                        }\n                    }\n                    else if (textBoxText === '') {\n                        documentHelper.isCompositionStart = false;\n                        _this.handleBackKey();\n                    }\n                    else if (documentHelper.prefix.substring(2) === textBoxText && documentHelper.suffix === '') {\n                        documentHelper.isCompositionStart = false;\n                        _this.handleTextInput(' ');\n                    }\n                    documentHelper.isCompositionEnd = false;\n                    return;\n                }\n                else if (documentHelper.isCompositionEnd || documentHelper.isCompositionStart && !documentHelper.isCompositionUpdated) {\n                    if (textBoxText.length < documentHelper.prefix.length &&\n                        /* eslint-disable-next-line max-len */\n                        textBoxText === documentHelper.prefix.substring(2, documentHelper.prefix.length - 1) || documentHelper.editableDiv.innerText.length < 2) {\n                        _this.handleBackKey();\n                        return;\n                    }\n                    else if (documentHelper.suffix !== '' &&\n                        documentHelper.editableDiv.innerText[documentHelper.editableDiv.innerText.length - 1] !== String.fromCharCode(160)) {\n                        documentHelper.isCompositionStart = false;\n                        //When cursor is placed in between a word and chosen a word from predicted words.\n                        /* eslint-disable-next-line max-len */\n                        _this.selection.start.setPositionForLineWidget(documentHelper.selection.start.currentWidget, _this.selection.start.offset - (documentHelper.prefix.length - 2));\n                        /* eslint-disable-next-line max-len */\n                        _this.selection.end.setPositionForLineWidget(documentHelper.selection.end.currentWidget, _this.selection.end.offset + documentHelper.suffix.length);\n                        //Retrieve the character format properties. Since the selection was changed manually.\n                        _this.selection.retrieveCurrentFormatProperties();\n                        _this.handleTextInput(textBoxText);\n                        return;\n                    }\n                }\n                if (text !== '\\r' && text !== '\\b' && text !== String.fromCharCode(27) && !documentHelper.owner.isReadOnlyMode && documentHelper.isControlPressed === false && _this.canEditContentControl) {\n                    if (text === '@' || text[0] !== '@' || text === '' || text.length < documentHelper.prefix.length &&\n                        textBoxText === documentHelper.prefix.substring(2, documentHelper.prefix.length - 1)) {\n                        _this.handleBackKey();\n                        if (documentHelper.editableDiv.innerText.length < 2) {\n                            _this.predictText();\n                        }\n                    }\n                    else if (text.indexOf(documentHelper.prefix) === 0 && text.length > documentHelper.prefix.length) {\n                        _this.handleTextInput(text.substring(documentHelper.prefix.length));\n                    }\n                    else if (text.indexOf(documentHelper.prefix) === -1 && text[text.length - 1] !== String.fromCharCode(160)\n                        && text[text.length - 1] !== ' ') {\n                        if ((textBoxText.charAt(0).toLowerCase() + textBoxText.slice(1)) === documentHelper.prefix.substring(2)) {\n                            /* eslint-disable-next-line max-len */\n                            _this.selection.start.setPositionParagraph(documentHelper.selection.start.currentWidget, _this.selection.start.offset - (documentHelper.prefix.length - 2));\n                        }\n                        _this.handleTextInput(textBoxText);\n                    }\n                    else if (text.length !== 2) {\n                        _this.handleTextInput(' ');\n                    }\n                }\n            }\n            else {\n                var text = _this.documentHelper.editableDiv.innerText;\n                if (text !== String.fromCharCode(160)) {\n                    if (text !== '\\r' && text !== '\\b' && text !== String.fromCharCode(27) && !_this.owner.isReadOnlyMode && _this.documentHelper.isControlPressed === false && _this.canEditContentControl) {\n                        _this.handleTextInput(text);\n                    }\n                }\n                else {\n                    _this.handleTextInput(' ');\n                }\n                _this.documentHelper.editableDiv.innerText = '';\n            }\n        };\n        /**\n         * Fired on paste.\n         *\n         * @param {ClipboardEvent} event - Specfies clipboard event\n         * @private\n         * @returns {void}\n         */\n        this.onPaste = function (event) {\n            if (!_this.owner.isReadOnlyMode && _this.canEditContentControl) {\n                _this.pasteInternal(event);\n            }\n            event.preventDefault();\n        };\n        this.documentHelper = documentHelper;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper)) {\n            this.tableResize = new _table_resizer__WEBPACK_IMPORTED_MODULE_13__.TableResizer(this.documentHelper.owner);\n        }\n        this.base64 = new _editor_helper__WEBPACK_IMPORTED_MODULE_3__.Base64();\n    }\n    Object.defineProperty(Editor.prototype, \"restrictFormatting\", {\n        /**\n         * @private\n         * @returns {boolean} - Returns the restrict formatting\n         */\n        get: function () {\n            return this.documentHelper.isDocumentProtected && (this.documentHelper.restrictFormatting\n                || (!this.documentHelper.restrictFormatting && !this.selection.isSelectionInEditRegion()))\n                && this.documentHelper.protectionType !== 'RevisionsOnly';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"restrictEditing\", {\n        /**\n         * @private\n         * @returns {boolean} - Returns the restrict editing\n         */\n        get: function () {\n            return this.documentHelper.isDocumentProtected && ((this.documentHelper.protectionType === 'ReadOnly' || this.documentHelper.isCommentOnlyMode)\n                && !this.selection.isSelectionInEditRegion() || this.documentHelper.protectionType === 'FormFieldsOnly');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"canEditContentControl\", {\n        /**\n         * @private\n         * @returns {boolean} - Returns the can edit content control.\n         */\n        get: function () {\n            var currentContentControl = this.selection.currentContentControl;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentContentControl)) {\n                if (currentContentControl.contentControlProperties.lockContents || currentContentControl.contentControlProperties.type === 'DropDownList') {\n                    return false;\n                }\n            }\n            else if (this.selection.checkContentControlLocked()) {\n                return false;\n            }\n            if (this.owner.isReadOnly) {\n                return false;\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"viewer\", {\n        get: function () {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner)) {\n                return this.owner.viewer;\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"editorHistory\", {\n        get: function () {\n            return this.documentHelper.owner.editorHistoryModule;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"selection\", {\n        get: function () {\n            if (this.documentHelper) {\n                return this.documentHelper.selection;\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Editor.prototype, \"owner\", {\n        get: function () {\n            if (this.documentHelper) {\n                return this.documentHelper.owner;\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Editor.prototype.getModuleName = function () {\n        return 'Editor';\n    };\n    /**\n     * Initiates a batch update mode where multiple editing operations can be grouped together. This prevents intermediate re-layout during the execution of grouped operations, improving performance for bulk updates.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.beginBatchEdit = function () {\n        this.restrictLayout = true;\n    };\n    /**\n     * Ends the batch update mode and triggers a single re-relayout or change notification to reflect all the modifications made during the batch update.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.endBatchEdit = function () {\n        this.restrictLayout = false;\n        this.layoutWholeDocument();\n    };\n    /**\n     * Sets the field information for the selected field.\n     *\n     * @param { FieldInfo } fieldInfo – Specifies the field information.\n     * @returns {void}\n     * > Nested field gets replaced completely with the specified field information.\n     */\n    Editor.prototype.setFieldInfo = function (fieldInfo) {\n        var field = this.selection.getHyperlinkField(true);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(field)) {\n            this.selection.selectField();\n            this.insertField(fieldInfo.code, fieldInfo.result);\n        }\n    };\n    /**\n     * Inserts the specified field at cursor position.\n     *\n     * @param {string} code Specify the field code.\n     * @param {string} result Specify the field result.\n     * @returns {void}\n     */\n    Editor.prototype.insertField = function (code, result) {\n        this.isInsertField = true;\n        var fieldCode = code;\n        fieldCode = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimStart(fieldCode);\n        if (fieldCode.substring(0, 8) === 'NUMPAGES') {\n            this.insertPageCount(result);\n        }\n        else if (fieldCode.substring(0, 4) === 'PAGE') {\n            this.insertPageNumber(result);\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(result)) {\n                if (fieldCode.substring(0, 10) === 'MERGEFIELD') {\n                    fieldCode = fieldCode.substring(10).trim();\n                    var index = fieldCode.indexOf('\\\\*');\n                    result = '«' + fieldCode.substring(0, index).trim() + '»';\n                }\n            }\n            var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n            var insertFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n            var startParagraph = this.selection.start.paragraph;\n            if (!this.selection.isForward) {\n                startParagraph = this.selection.end.paragraph;\n            }\n            var currentInline = this.selection.start.currentWidget.getInline(this.selection.start.offset, 0);\n            if (startParagraph.isEmpty()) {\n                insertFormat = startParagraph.characterFormat;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentInline.element)) {\n                insertFormat = currentInline.element.characterFormat;\n            }\n            else {\n                insertFormat = this.copyInsertFormat(insertFormat, false);\n            }\n            var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n            var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n            fieldBegin.characterFormat.assignFormat(insertFormat);\n            line.children.push(fieldBegin);\n            var fieldCodeSpan = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            fieldCodeSpan.characterFormat.assignFormat(insertFormat);\n            fieldCodeSpan.text = code;\n            line.children.push(fieldCodeSpan);\n            var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n            fieldSeparator.characterFormat.assignFormat(insertFormat);\n            fieldSeparator.fieldBegin = fieldBegin;\n            fieldBegin.fieldSeparator = fieldSeparator;\n            line.children.push(fieldSeparator);\n            var fieldResultSpan = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            fieldResultSpan.text = result;\n            fieldResultSpan.characterFormat.assignFormat(insertFormat);\n            if (!this.documentHelper.textHelper.isRTLText(result) && fieldResultSpan.characterFormat.bidi) {\n                fieldResultSpan.characterFormat.bidi = false;\n            }\n            line.children.push(fieldResultSpan);\n            var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n            fieldEnd.characterFormat.assignFormat(insertFormat);\n            fieldEnd.fieldSeparator = fieldSeparator;\n            fieldEnd.fieldBegin = fieldBegin;\n            fieldBegin.fieldEnd = fieldEnd;\n            fieldSeparator.fieldEnd = fieldEnd;\n            line.children.push(fieldEnd);\n            fieldBegin.line = line;\n            paragraph.childWidgets.push(line);\n            this.documentHelper.fields.push(fieldBegin);\n            var section = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n            section.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(section);\n            section.childWidgets.push(paragraph);\n            this.pasteContentsInternal([section], false);\n        }\n        this.isInsertField = false;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.isLinkedStyle = function (styleName) {\n        var styleObj = this.documentHelper.styles.findByName(styleName);\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleObj.link);\n    };\n    /**\n     * Applies the specified style for paragraph.\n     *\n     * @param {string} style Specify the style name to apply.\n     * @param {boolean} clearDirectFormatting - Removes manual formatting (formatting not applied using a style)\n     * from the selected text, to match the formatting of the applied style. Default value is false.\n     * @returns {void}\n     */\n    Editor.prototype.applyStyle = function (style, clearDirectFormatting) {\n        clearDirectFormatting = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(clearDirectFormatting) ? false : clearDirectFormatting;\n        var startPosition = undefined;\n        var endPosition = undefined;\n        var styleObj = this.documentHelper.styles.findByName(style);\n        if (clearDirectFormatting) {\n            this.initComplexHistory('ApplyStyle');\n            this.setOffsetValue(this.selection);\n            startPosition = this.startOffset;\n            endPosition = this.endOffset;\n            var isSelectionEmpty = this.selection.isEmpty;\n            this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleObj) && (styleObj instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WCharacterStyle && styleObj.type === 'Character')) {\n                this.clearFormattingInternal(false, true);\n            }\n            else {\n                this.clearFormattingInternal(true, true);\n            }\n            this.isSkipOperationsBuild = false;\n            if (isSelectionEmpty && !this.selection.isEmpty) {\n                this.selection.end.setPositionInternal(this.selection.start);\n            }\n        }\n        if (styleObj !== undefined) {\n            if (styleObj instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WCharacterStyle && styleObj.type === 'Character') {\n                if (this.selection.isEmpty) {\n                    var offset = this.selection.start.offset;\n                    var preservedStartPosition = this.selection.start.clone();\n                    var preservedEndPosition = this.selection.end.clone();\n                    this.selection.selectCurrentWord();\n                    if (offset === this.selection.start.offset || offset === this.selection.end.offset - 1) {\n                        this.selection.start = preservedStartPosition;\n                        this.selection.end = preservedEndPosition;\n                        this.selection.characterFormat.copyFormat(styleObj.characterFormat);\n                    }\n                    else {\n                        this.onApplyCharacterFormat('styleName', styleObj, false, true);\n                    }\n                }\n                else {\n                    this.onApplyCharacterFormat('styleName', styleObj, false, true);\n                }\n            }\n            else {\n                this.onApplyParagraphFormat('styleName', styleObj, false, true);\n            }\n        }\n        else {\n            /* eslint-disable-next-line max-len */\n            this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), JSON.parse(this.documentHelper.preDefinedStyles.get(style)), this.documentHelper.styles);\n            this.applyStyle(style);\n        }\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'ApplyStyle') {\n            this.startOffset = startPosition;\n            this.endOffset = endPosition;\n            this.editorHistory.updateComplexHistory();\n        }\n        this.startParagraph = undefined;\n        this.endParagraph = undefined;\n    };\n    // Public Implementation Starts\n    /**\n     * Moves the selected content in the document editor control to clipboard.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.cut = function () {\n        if (this.owner.isReadOnlyMode || this.selection.isEmpty || !this.canEditContentControl) {\n            return;\n        }\n        // As per MSWord behaviour, when we select the bookmark whole content except bookmark start & end and cut those content, then bookmark should be removed.\n        var startPosition = this.selection.start;\n        var endPosition = this.selection.end;\n        var previousElementInfo = (startPosition.offset === 0) ? this.selection.getElementInfo(startPosition.currentWidget, startPosition.offset - 1) : this.selection.getElementInfo(startPosition.currentWidget, this.selection.isForward ? startPosition.offset : startPosition.offset + 1);\n        var nextElementInfo = (endPosition.offset === 0) ? this.selection.getElementInfo(endPosition.currentWidget, endPosition.offset - 1) : this.selection.getElementInfo(endPosition.currentWidget, this.selection.isForward ? endPosition.offset + 1 : endPosition.offset);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementInfo) && previousElementInfo.element && nextElementInfo.element\n            && previousElementInfo.index !== -1 && nextElementInfo.index !== -1 && previousElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && nextElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox\n            && previousElementInfo.element.name === nextElementInfo.element.name &&\n            !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo.element.nextElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementInfo.element.previousElement) && previousElementInfo.element.nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && nextElementInfo.element.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox)) {\n            if (this.selection.isForward) {\n                this.selection.start.setPositionParagraph(previousElementInfo.element.line, previousElementInfo.element.line.getOffset(previousElementInfo.element, 0));\n                this.selection.end.setPositionParagraph(nextElementInfo.element.line, nextElementInfo.element.line.getOffset(nextElementInfo.element, 1));\n            }\n            else {\n                this.selection.start.setPositionParagraph(previousElementInfo.element.line, previousElementInfo.element.line.getOffset(previousElementInfo.element, 1));\n                this.selection.end.setPositionParagraph(nextElementInfo.element.line, nextElementInfo.element.line.getOffset(nextElementInfo.element, 0));\n            }\n        }\n        this.selection.copySelectedContent(true);\n        this.documentHelper.owner.parser.isCutPerformed = true;\n    };\n    /**\n     * Inserts the editing region in the current selection range for the specified user.\n     *\n     * @param {string} user Specifies the native rendering\n     * @returns {void}\n     */\n    Editor.prototype.insertEditingRegion = function (user) {\n        this.insertEditRangeElement(user && user !== '' ? user : 'Everyone');\n    };\n    Editor.prototype.enforceProtection = function (credential, restrictFormatType, isReadOnly) {\n        var typeOfProtection;\n        var limitToFormatting;\n        if (typeof (restrictFormatType) === 'boolean') {\n            typeOfProtection = isReadOnly ? 'ReadOnly' : this.documentHelper.protectionType;\n            limitToFormatting = restrictFormatType;\n        }\n        else {\n            typeOfProtection = restrictFormatType;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(limitToFormatting)) {\n            this.documentHelper.restrictFormatting = limitToFormatting;\n        }\n        this.documentHelper.protectionType = typeOfProtection;\n        this.selection.isHighlightEditRegion = true;\n        this.addProtection(credential, this.documentHelper.protectionType, false);\n    };\n    Editor.prototype.enforceProtectionAsync = function (credential, restrictFormatType, isReadOnly) {\n        return __awaiter(this, void 0, void 0, function () {\n            var typeOfProtection, limitToFormatting;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typeof (restrictFormatType) === 'boolean') {\n                            typeOfProtection = isReadOnly ? 'ReadOnly' : this.documentHelper.protectionType;\n                            limitToFormatting = restrictFormatType;\n                        }\n                        else {\n                            limitToFormatting = true;\n                            typeOfProtection = restrictFormatType;\n                        }\n                        this.documentHelper.restrictFormatting = limitToFormatting;\n                        this.documentHelper.protectionType = typeOfProtection;\n                        this.selection.isHighlightEditRegion = true;\n                        return [4 /*yield*/, this.addProtection(credential, this.documentHelper.protectionType, true)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Editor.prototype.getCommentHierarchicalIndex = function (comment) {\n        var index = '';\n        while (comment.ownerComment) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(comment.ownerComment)) {\n                index = comment.ownerComment.replyComments.indexOf(comment) + ';' + index;\n                comment = comment.ownerComment;\n            }\n            else {\n                index = comment.replyComments.indexOf(comment) + ';' + index;\n                comment = comment;\n            }\n        }\n        index = 'C;' + this.documentHelper.comments.indexOf(comment) + ';' + index;\n        return index;\n    };\n    Editor.prototype.alertBox = function () {\n        var localObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n        localObj.setLocale(this.owner.locale);\n        _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n            title: localObj.getConstant('Information'),\n            content: localObj.getConstant('Multiple Comment')\n        });\n    };\n    /**\n     * Inserts a reply to a comment.\n     *\n     * @param {string} id - The unique identifier of the comment to reply to.\n     * @param {string} text - The text of the reply.\n     * @param {CommentProperties} commentProperties - The properties of the reply (author, isResolved, dateTime).\n     * @returns {Comment} Returns the inserted reply comment.\n     */\n    Editor.prototype.insertReplyComment = function (id, text, commentProperties) {\n        var markerData = {};\n        var result = this.getCommentInfo(text);\n        markerData = {\n            author: commentProperties.author ? commentProperties.author : 'Guest user',\n            initial: this.constructCommentInitial(commentProperties.author ? commentProperties.author : 'Guest user'),\n            text: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(result.innerText) ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(text) : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(result.innerText),\n            commentId: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\n            done: false,\n            date: commentProperties.dateTime ? _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate(commentProperties.dateTime) : _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate(),\n        };\n        var parentComment;\n        if (this.documentHelper.comments.length > 0) {\n            for (var i = 0; i < this.documentHelper.comments.length; i++) {\n                if (this.documentHelper.comments[i].commentId === id) {\n                    parentComment = this.documentHelper.comments[i];\n                    break;\n                }\n            }\n        }\n        this.replyComment(parentComment, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(result.innerText) ? text : result.innerText, result.itemData, markerData);\n        var commentInfo = {\n            author: markerData.author,\n            isResolved: markerData.done,\n            dateTime: this.parseDateTime(markerData.date),\n        };\n        var newComment = new _base_index__WEBPACK_IMPORTED_MODULE_10__.Comment(markerData.commentId, commentInfo, text);\n        return newComment;\n    };\n    Editor.prototype.getCommentInfo = function (text) {\n        var itemData = [];\n        var data = [];\n        var result = [];\n        var mailtoRegex = /<a href=\"mailto:([^\"]+)\">([^<]+)<\\/a>/g;\n        var lastIndex = 0;\n        var match;\n        while ((match = mailtoRegex.exec(text)) !== null) {\n            if (match.index > lastIndex) {\n                result.push({ text: text.substring(lastIndex, match.index) });\n            }\n            result.push({\n                mailto: match[1],\n                text: match[2]\n            });\n            lastIndex = mailtoRegex.lastIndex;\n        }\n        if (lastIndex < text.length) {\n            result.push({ text: text.substring(lastIndex) });\n        }\n        var innerText = '';\n        if (result.length > 0) {\n            for (var i = 0; i < result.length; i++) {\n                if (result[i].mailto) {\n                    data.push({ text: result[i].text.replace('@', ''), value: result[i].mailto });\n                    innerText += '<span contenteditable=\"false\" class=\"e-mention-chip\">' + result[i].text.replace('@', '') + '</span>';\n                }\n                else if (result[i].text) {\n                    innerText += result[i].text.replace(/(\\r\\n|\\n\\r|\\n|\\r)/g, \"<br>\");\n                }\n            }\n        }\n        else if (text !== '') {\n            innerText = text.replace(/(\\r\\n|\\n\\r|\\n|\\r)/g, \"<br>\");\n        }\n        itemData = data;\n        return { itemData: itemData, innerText: innerText };\n    };\n    /**\n     * Inserts the comment.\n     *\n     * @param {string} text Specify the comment text to be inserted.\n     * @param {CommentProperties} commentProperties The properties of the comment (author, isResolved, dateTime).\n     * @returns {Comment}\n     */\n    Editor.prototype.insertComment = function (text, commentProperties) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.start) || (this.owner.isReadOnlyMode && !this.documentHelper.isCommentOnlyMode) || this.viewer.owner.enableHeaderAndFooter\n            || !this.viewer.owner.enableComment || this.selection.isPlainContentControl()) {\n            return;\n        }\n        if (this.viewer.owner.commentReviewPane.commentPane.isEditMode) {\n            return this.alertBox();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(text)) {\n            text = '';\n        }\n        var markerData = {};\n        var result = this.getCommentInfo(text);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentProperties)) {\n            var authorInternal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentProperties.author) ? this.owner.currentUser : commentProperties.author;\n            markerData = {\n                author: authorInternal,\n                initial: this.constructCommentInitial(authorInternal),\n                text: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(result.innerText === '' ? text : result.innerText),\n                commentId: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\n                done: commentProperties.isResolved ? commentProperties.isResolved : false,\n                date: commentProperties.dateTime ? _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate(commentProperties.dateTime) : _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate()\n            };\n        }\n        else {\n            markerData = {\n                author: this.owner.currentUser ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(this.owner.currentUser) : 'Guest user',\n                initial: this.constructCommentInitial(this.owner.currentUser ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(this.owner.currentUser) : 'Guest user'),\n                text: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(text),\n                commentId: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\n                done: false,\n                date: _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate(),\n            };\n        }\n        this.insertCommentInternal(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(result.innerText) ? result.innerText : '', markerData, result.itemData);\n        var commentInfo = {\n            author: markerData.author,\n            isResolved: markerData.done,\n            dateTime: this.parseDateTime(markerData.date),\n        };\n        var newComment = new _base_index__WEBPACK_IMPORTED_MODULE_10__.Comment(markerData.commentId, commentInfo, text);\n        return newComment;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.parseDateTime = function (dateTime) {\n        var date = new Date(dateTime);\n        var finalDate = new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n        return finalDate;\n    };\n    Editor.prototype.insertCommentInternal = function (text, markerData, mentions) {\n        this.documentHelper.layout.allowLayout = false;\n        if (this.selection.isEmpty) {\n            // If selection is at paragraph end, move selection to previous word similar to MS Word\n            if (this.selection.start.isAtSamePosition(this.selection.end) && this.selection.start.isAtParagraphEnd) {\n                var startOffset = this.selection.start.offset;\n                this.selection.start.offset = startOffset - 1 !== -1 ? startOffset - 1 : startOffset;\n            }\n            this.selection.selectCurrentWord();\n        }\n        // If paragraph mark selected, remove paragraph mark selection\n        if (this.selection.isParagraphLastLine(this.selection.end.currentWidget)\n            && this.selection.end.offset === this.selection.getLineLength(this.selection.end.currentWidget) + 1) {\n            this.selection.end.offset -= 1;\n        }\n        var paragraphInfo = this.selection.getParagraphInfo(this.selection.start);\n        var startIndex = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n        var endParagraphInfo = this.selection.getParagraphInfo(this.selection.end);\n        var endIndex = this.selection.getHierarchicalIndex(endParagraphInfo.paragraph, endParagraphInfo.offset.toString());\n        this.initComplexHistory('InsertComment');\n        var startPosition = this.selection.start;\n        var endPosition = this.selection.end;\n        var position = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n        if (!this.selection.isForward) {\n            startPosition = this.selection.end;\n            endPosition = this.selection.start;\n        }\n        // Clones the end position.\n        position.setPositionInternal(endPosition);\n        var commentRangeStart = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox(0);\n        var commentRangeEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox(1);\n        var isSameLine = startPosition.currentWidget === endPosition.currentWidget;\n        // Adds comment start at selection start position.\n        endPosition.setPositionInternal(startPosition);\n        var lineIndex = position.currentWidget.indexInOwner;\n        var paragraph = position.currentWidget.paragraph;\n        this.initInsertInline(commentRangeStart);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(position.paragraph) || position.currentWidget.indexInOwner === -1) {\n            var endPos = this.selection.getTextPosBasedOnLogicalIndex(endIndex);\n            position.setPositionInternal(endPos);\n        }\n        // Updates the cloned position, since comment start is added in the same line.\n        if (isSameLine) {\n            position.setPositionParagraph(position.currentWidget, position.offset + commentRangeStart.length);\n        }\n        // Adds comment end and comment at selection end position.\n        startPosition.setPositionInternal(position);\n        endPosition.setPositionInternal(position);\n        this.initInsertInline(commentRangeEnd);\n        var commentAdv = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentElementBox(markerData.date);\n        if (mentions && mentions.length > 0) {\n            commentAdv.mentions = mentions;\n        }\n        if (this.owner.editorHistoryModule) {\n            this.initHistory('InsertCommentWidget');\n            this.owner.editorHistoryModule.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start + _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n            this.owner.editorHistoryModule.currentBaseHistoryInfo.removedNodes.push(commentAdv);\n        }\n        this.updateCommentElement(commentAdv, commentRangeStart, commentRangeEnd, markerData);\n        this.addCommentWidget(commentAdv, true, true, true);\n        if (this.owner.isSpellCheck && commentRangeStart.previousElement && commentRangeStart.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            commentRangeStart.previousElement.ischangeDetected = true;\n        }\n        if (this.owner.isSpellCheck && commentRangeEnd.previousElement && commentRangeEnd.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && commentRangeStart.line !== commentRangeEnd.line) {\n            commentRangeEnd.previousElement.ischangeDetected = true;\n        }\n        if (this.editorHistory) {\n            this.editorHistory.currentBaseHistoryInfo.insertPosition = this.getCommentHierarchicalIndex(commentAdv);\n            this.editorHistory.updateHistory();\n        }\n        // this.selection.selectPosition(this.selection.getTextPosBasedOnLogicalIndex(startIndex), this.selection.getTextPosBasedOnLogicalIndex(endIndex));\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistory();\n        }\n        this.reLayout(this.selection, false);\n        this.documentHelper.layout.allowLayout = true;\n        if (!this.isUserInsert) {\n            var comment = this.owner.commentReviewPane.commentPane.comments.get(commentAdv);\n            if (mentions && mentions.length > 0) {\n                comment.itemData = mentions;\n            }\n            comment.postComment();\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.updateCommentElement = function (commentAdv, commentRangeStart, commentRangeEnd, markerData) {\n        commentAdv.author = markerData.author;\n        commentAdv.initial = markerData.initial;\n        commentAdv.text = markerData.text;\n        commentAdv.commentId = markerData.commentId;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(markerData.done)) {\n            commentAdv.isResolved = markerData.done;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(markerData.isReply)) {\n            commentAdv.isReply = markerData.isReply;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentRangeStart) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentRangeEnd)) {\n            commentRangeStart.comment = commentAdv;\n            commentRangeStart.commentId = commentAdv.commentId;\n            commentRangeEnd.comment = commentAdv;\n            commentRangeEnd.commentId = commentAdv.commentId;\n            commentAdv.commentStart = commentRangeStart;\n            commentAdv.commentEnd = commentRangeEnd;\n        }\n        return commentAdv;\n    };\n    /**\n     * Deletes all the comments in the current document.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.deleteAllComments = function () {\n        if (this.documentHelper.comments.length === 0) {\n            return;\n        }\n        // this.documentHelper.clearSearchHighlight();\n        this.initComplexHistory('DeleteAllComments');\n        this.owner.isLayoutEnabled = false;\n        var historyInfo;\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            historyInfo = this.editorHistory.currentHistoryInfo;\n        }\n        while (this.documentHelper.comments.length > 0) {\n            var comment = this.documentHelper.comments[0];\n            this.initComplexHistory('DeleteComment');\n            this.deleteCommentInternal(comment);\n            if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n                historyInfo.addModifiedAction(this.editorHistory.currentHistoryInfo);\n            }\n        }\n        this.selection.selectContent(this.owner.documentStart, true);\n        if (this.editorHistory) {\n            this.editorHistory.currentHistoryInfo = historyInfo;\n            this.editorHistory.updateComplexHistory();\n        }\n    };\n    /**\n     * Deletes the specified comment.\n     * If the provided id corresponds to a parent comment, the entire comment along with its replies will be deleted.\n     * If the provided id corresponds to a single reply comment, only that particular reply will be deleted.\n     *\n     * @param {string} [id] - The unique identifier of the comment to be deleted. If not provided, the currently selected comment will be deleted.\n     * @returns {void}\n     */\n    Editor.prototype.deleteComment = function (id) {\n        if ((this.owner.isReadOnlyMode && !this.documentHelper.isCommentOnlyMode) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.viewer)\n            || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.documentHelper.currentSelectedComment) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(id)) || this.owner.enableHeaderAndFooter\n            || !this.viewer.owner.enableComment) {\n            return;\n        }\n        var comment;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(id)) {\n            var tempcomment = void 0;\n            if (this.documentHelper.comments.length > 0) {\n                for (var i = 0; i < this.documentHelper.comments.length; i++) {\n                    tempcomment = this.documentHelper.comments[i];\n                    if (tempcomment.commentId === id) {\n                        comment = this.documentHelper.comments[i];\n                        break;\n                    }\n                    else if (tempcomment.replyComments && tempcomment.replyComments.length > 0) {\n                        for (var j = 0; j < tempcomment.replyComments.length; j++) {\n                            if (tempcomment.replyComments[j].commentId === id) {\n                                comment = tempcomment.replyComments[j];\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(comment)) {\n                this.deleteCommentInternal(comment);\n            }\n            else {\n                throw new Error('Enter a valid comment id.');\n            }\n        }\n        else {\n            this.deleteCommentInternal(this.owner.documentHelper.currentSelectedComment);\n        }\n    };\n    /**\n     * @param {CommentElementBox} comment - Specified the comment element box\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.deleteCommentInternal = function (comment) {\n        this.initComplexHistory('DeleteComment');\n        if (comment) {\n            if (comment.replyComments.length > 0) {\n                for (var i = comment.replyComments.length - 1; i >= 0; i--) {\n                    this.deleteCommentInternal(comment.replyComments[i]);\n                }\n            }\n            this.deleteCommentWidgetInternal(comment);\n            var commentStart = comment.commentStart;\n            var commentEnd = comment.commentEnd;\n            if (commentEnd.indexInOwner !== -1) {\n                this.removeInline(commentEnd);\n            }\n            if (commentStart.indexInOwner !== -1) {\n                this.removeInline(commentStart);\n            }\n            commentStart.removeCommentMark();\n        }\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistory();\n        }\n    };\n    Editor.prototype.deleteCommentWidgetInternal = function (comment) {\n        if (this.owner.editorHistoryModule) {\n            this.initHistory('DeleteCommentWidget');\n            this.owner.editorHistoryModule.currentBaseHistoryInfo.insertPosition = this.getCommentHierarchicalIndex(comment);\n            this.owner.editorHistoryModule.currentBaseHistoryInfo.removedNodes.push(comment);\n        }\n        this.deleteCommentWidget(comment);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n    };\n    /**\n     * @param {CommentElementBox} comment - Specified the comment element box\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.deleteCommentWidget = function (comment) {\n        var commentIndex = this.documentHelper.comments.indexOf(comment);\n        if (commentIndex !== -1) {\n            this.documentHelper.comments.splice(commentIndex, 1);\n        }\n        else if (comment.isReply && comment.ownerComment) {\n            commentIndex = comment.ownerComment.replyComments.indexOf(comment);\n            comment.ownerComment.replyComments.splice(commentIndex, 1);\n        }\n        if (this.owner.commentReviewPane) {\n            this.owner.commentReviewPane.deleteComment(comment);\n            if (this.documentHelper.currentSelectedComment === comment) {\n                this.documentHelper.currentSelectedComment = undefined;\n            }\n        }\n    };\n    /**\n     * @param {CommentElementBox} comment - Specified the comment element box\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.resolveComment = function (comment) {\n        if (this.owner.isReadOnlyMode && !this.documentHelper.isCommentOnlyMode) {\n            return;\n        }\n        var eventArgs = { author: comment.author, cancel: false, type: 'Resolve' };\n        this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeCommentActionEvent, eventArgs);\n        if (eventArgs.cancel && eventArgs.type === 'Resolve') {\n            return;\n        }\n        this.initHistory('ResolveComment');\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.removedNodes.push(comment);\n        }\n        this.resolveOrReopenComment(comment, true);\n    };\n    /**\n     * @param {CommentElementBox} comment - Specified the comment element box\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.reopenComment = function (comment) {\n        if (this.owner.isReadOnlyMode && !this.documentHelper.isCommentOnlyMode) {\n            return;\n        }\n        var eventArgs = { author: comment.author, cancel: false, type: 'Reopen' };\n        this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeCommentActionEvent, eventArgs);\n        if (eventArgs.cancel && eventArgs.type === 'Reopen') {\n            return;\n        }\n        this.initHistory('ResolveComment');\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.removedNodes.push(comment);\n        }\n        this.resolveOrReopenComment(comment, false);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.resolveOrReopenComment = function (comment, resolve) {\n        comment.isResolved = resolve;\n        for (var i = 0; i < comment.replyComments.length; i++) {\n            comment.replyComments[i].isResolved = resolve;\n        }\n        if (this.owner.commentReviewPane) {\n            if (resolve) {\n                this.owner.commentReviewPane.resolveComment(comment);\n            }\n            else {\n                this.owner.commentReviewPane.reopenComment(comment);\n            }\n        }\n        this.reLayout(this.selection, false, false);\n    };\n    /**\n     * @param {CommentElementBox} parentComment - Specified the parent comment\n     * @param {string} text - Specified the text.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.replyComment = function (parentComment, text, mentions, markerData) {\n        if (this.owner.isReadOnlyMode && !this.documentHelper.isCommentOnlyMode) {\n            return;\n        }\n        var commentWidget = parentComment;\n        if (parentComment) {\n            var replyComment = void 0;\n            if (markerData) {\n                replyComment = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentElementBox(markerData.date);\n                replyComment.author = markerData.author;\n                replyComment.text = text;\n                replyComment.mentions = mentions ? mentions : [];\n                replyComment.commentId = markerData.commentId;\n                replyComment.isReply = true;\n            }\n            else {\n                replyComment = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentElementBox(_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate());\n                replyComment.author = this.owner.currentUser ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.SanitizeHtmlHelper.sanitize(this.owner.currentUser) : 'Guest user';\n                replyComment.text = text ? text : '';\n                replyComment.mentions = mentions ? mentions : [];\n                replyComment.commentId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n                replyComment.isReply = true;\n            }\n            var eventArgs = { author: replyComment.author, cancel: false, type: 'Post', text: replyComment.text, mentions: replyComment.mentions };\n            this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeCommentActionEvent, eventArgs);\n            if (eventArgs.cancel && eventArgs.type === 'Post') {\n                return;\n            }\n            this.initComplexHistory('InsertComment');\n            var currentCmtStart = commentWidget.commentStart;\n            var currentCmtEnd = commentWidget.commentEnd;\n            var replyCmtLength = commentWidget.replyComments.length;\n            var offset = currentCmtStart.line.getOffset(currentCmtStart, replyCmtLength + 1);\n            var startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n            startPosition.setPositionParagraph(currentCmtStart.line, offset);\n            var endOffset = currentCmtEnd.line.getOffset(currentCmtEnd, replyCmtLength + 1);\n            var endPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n            endPosition.setPositionParagraph(currentCmtEnd.line, endOffset);\n            this.selection.start.setPositionInternal(startPosition);\n            this.selection.end.setPositionInternal(endPosition);\n            startPosition = this.selection.start;\n            endPosition = this.selection.end;\n            var position = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n            // Clones the end position.\n            position.setPositionInternal(endPosition);\n            var commentRangeStart = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox(0);\n            var commentRangeEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox(1);\n            var isAtSameLine = startPosition.currentWidget === endPosition.currentWidget;\n            // Adds comment start at selection start position.\n            endPosition.setPositionInternal(startPosition);\n            var lineIndex = position.currentWidget.indexInOwner;\n            this.initInsertInline(commentRangeStart);\n            if (position.currentWidget.indexInOwner === -1) {\n                position.currentWidget = position.currentWidget.paragraph.childWidgets[lineIndex];\n            }\n            // Updates the cloned position, since comment start is added in the same paragraph.\n            if (isAtSameLine) {\n                position.setPositionParagraph(position.currentWidget, position.offset + commentRangeStart.length);\n            }\n            // Adds comment end and comment at selection end position.\n            startPosition.setPositionInternal(position);\n            endPosition.setPositionInternal(position);\n            this.initInsertInline(commentRangeEnd);\n            commentWidget.replyComments.push(replyComment);\n            replyComment.ownerComment = commentWidget;\n            if (this.owner.editorHistoryModule) {\n                this.initHistory('InsertCommentWidget');\n                this.owner.editorHistoryModule.currentBaseHistoryInfo.removedNodes.push(replyComment);\n                this.owner.editorHistoryModule.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start + _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n            }\n            commentRangeStart.comment = replyComment;\n            commentRangeStart.commentId = replyComment.commentId;\n            commentRangeEnd.comment = replyComment;\n            commentRangeEnd.commentId = replyComment.commentId;\n            replyComment.commentStart = commentRangeStart;\n            replyComment.commentEnd = commentRangeEnd;\n            if (this.owner.commentReviewPane) {\n                this.owner.commentReviewPane.addReply(replyComment, false, true);\n            }\n            if (this.editorHistory) {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = this.getCommentHierarchicalIndex(replyComment);\n                this.editorHistory.updateHistory();\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.reLayout(this.selection);\n            this.isSkipOperationsBuild = false;\n        }\n    };\n    Editor.prototype.removeInline = function (element) {\n        this.selection.start.setPositionParagraph(element.line, element.line.getOffset(element, 0));\n        this.selection.end.setPositionParagraph(this.selection.start.currentWidget, this.selection.start.offset + element.length);\n        this.initHistory('RemoveInline');\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.updateHistoryPosition(this.selection.start, true);\n        }\n        this.removeSelectedContents(this.documentHelper.selection);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.fireContentChange();\n    };\n    /**\n     * @param {CommentElementBox} commentWidget - Specifies the comment\n     * @param {boolean} isNewComment - Specifies is new comment\n     * @param {boolean} showComments - Specifies show comments\n     * @param {boolean} selectComment - Specified select comment\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.addCommentWidget = function (commentWidget, isNewComment, showComments, selectComment) {\n        if (this.documentHelper.comments.indexOf(commentWidget) === -1) {\n            var isInserted = false;\n            if (this.documentHelper.comments.length > 0) {\n                var currentStart = this.selection.getElementPosition(commentWidget.commentStart).startPosition;\n                for (var i = 0; i < this.documentHelper.comments.length; i++) {\n                    /* eslint-disable-next-line max-len */\n                    var paraIndex = this.selection.getElementPosition(this.documentHelper.comments[i].commentStart).startPosition;\n                    if (currentStart.isExistBefore(paraIndex)) {\n                        isInserted = true;\n                        this.documentHelper.comments.splice(i, 0, commentWidget);\n                        break;\n                    }\n                }\n            }\n            if (!isInserted) {\n                this.documentHelper.comments.push(commentWidget);\n            }\n            if (this.owner.commentReviewPane) {\n                this.owner.showComments = showComments;\n                this.owner.commentReviewPane.selectedTab = 0;\n                this.owner.commentReviewPane.addComment(commentWidget, isNewComment, selectComment);\n                this.owner.commentReviewPane.reviewTab.selectedItem = 0;\n                if (selectComment) {\n                    this.owner.selectionModule.selectComment(commentWidget);\n                }\n            }\n        }\n    };\n    /**\n     * @param {CommentElementBox} comment - Specifies comment element box\n     * @param {string} hierarchicalIndex - Specifies the hierachical index.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.addReplyComment = function (comment, hierarchicalIndex) {\n        var index = hierarchicalIndex.split(';');\n        var ownerComment = this.documentHelper.comments[parseInt(index[1], 10)];\n        if (index[2] !== '') {\n            ownerComment.replyComments.splice(parseInt(index[2], 10), 0, comment);\n            comment.ownerComment = ownerComment;\n        }\n        if (this.owner.commentReviewPane) {\n            this.owner.showComments = true;\n            this.owner.commentReviewPane.addReply(comment, false, true);\n            this.owner.selectionModule.selectComment(comment);\n        }\n    };\n    /**\n     * @param {string} password - Specifies the password\n     * @param {string} protectionType - Specifies the protection type\n     * @param {boolean} isAsync - specifies whether the send method is synchronous or asynchronous\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.addProtection = function (password, protectionType, isAsync) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        isAsync = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isAsync) ? true : isAsync;\n                        if (password === '') {\n                            _this.protectDocument(protectionType);\n                            resolve();\n                        }\n                        else {\n                            _this.currentProtectionType = protectionType;\n                            var enforceProtectionHandler = new _base_ajax_helper__WEBPACK_IMPORTED_MODULE_18__.XmlHttpRequestHandler();\n                            var passwordBase64 = _this.base64.encodeString(password);\n                            /* eslint-disable @typescript-eslint/no-explicit-any */\n                            var formObject = {\n                                passwordBase64: passwordBase64,\n                                saltBase64: '',\n                                spinCount: 100000\n                            };\n                            /* eslint-enable @typescript-eslint/no-explicit-any */\n                            var url = _this.owner.serviceUrl + _this.owner.serverActionSettings.restrictEditing;\n                            enforceProtectionHandler.url = url;\n                            enforceProtectionHandler.contentType = 'application/json;charset=UTF-8';\n                            enforceProtectionHandler.onSuccess = function (result) {\n                                _this.enforceProtectionInternal(result);\n                                resolve();\n                            };\n                            enforceProtectionHandler.onFailure = function (result) {\n                                _this.protectionFailureHandler(result);\n                                reject();\n                            };\n                            enforceProtectionHandler.onError = function (result) {\n                                _this.protectionFailureHandler(result);\n                                reject();\n                            };\n                            enforceProtectionHandler.customHeaders = _this.owner.headers;\n                            var httprequestEventArgs = { serverActionType: 'RestrictEditing', headers: _this.owner.headers, timeout: 0, cancel: false, withCredentials: false };\n                            _this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeXmlHttpRequestSend, httprequestEventArgs);\n                            if (httprequestEventArgs.cancel) {\n                                if (_this.documentHelper.dialog.visible) {\n                                    _this.documentHelper.dialog.hide();\n                                }\n                            }\n                            else {\n                                enforceProtectionHandler.send(formObject, httprequestEventArgs, isAsync);\n                            }\n                        }\n                    })];\n            });\n        });\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.protectionFailureHandler = function (result) {\n        if (this.owner) {\n            var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            localeValue.setLocale(this.documentHelper.owner.locale);\n            if (result.name === 'onError') {\n                _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert(localeValue.getConstant('Error in establishing connection with web server'));\n            }\n            else {\n                this.owner.fireServiceFailure(result);\n                console.error(result.statusText);\n            }\n        }\n    };\n    Editor.prototype.enforceProtectionInternal = function (result) {\n        var data = JSON.parse(result.data);\n        this.enforceProtectionAssign(data[0], data[1], this.currentProtectionType);\n        this.owner.showHideRulers();\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.enforceProtectionAssign = function (saltValue, hashValue, protectionType) {\n        if (this.documentHelper) {\n            this.documentHelper.saltValue = saltValue;\n            this.documentHelper.hashValue = hashValue;\n            this.protectDocument(protectionType);\n        }\n    };\n    Editor.prototype.toggleTrackChangesProtection = function (enabled) {\n        this.viewer.owner.enableTrackChanges = enabled;\n        var eventArgs = { isTrackChangesEnabled: enabled };\n        this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.trackChangeEvent, eventArgs);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.protectDocument = function (protectionType) {\n        this.documentHelper.owner.getSettingData(\"protection\", null, this.documentHelper.hashValue, this.documentHelper.saltValue, protectionType);\n        this.protect(protectionType);\n        var restrictPane = this.documentHelper.restrictEditingPane.restrictPane;\n        if (restrictPane && restrictPane.style.display === 'block') {\n            this.documentHelper.restrictEditingPane.showStopProtectionPane(true);\n            this.documentHelper.restrictEditingPane.loadPaneValue();\n            if (this.documentHelper.dialog.visible) {\n                this.documentHelper.dialog.hide();\n            }\n        }\n        this.owner.notify(_base_index__WEBPACK_IMPORTED_MODULE_10__.protectionTypeChangeEvent, {});\n        if (protectionType === 'RevisionsOnly') {\n            this.toggleTrackChangesProtection(true);\n        }\n        this.owner.trackChangesPane.enableDisableButton(false);\n        if (!this.documentHelper.owner.enableCollaborativeEditing) {\n            this.fireContentChange();\n        }\n    };\n    /**\n     * Stops the document protection.\n     *\n     * @param {string} password Specify the password to stop protection.\n     * @returns {void}\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.stopProtection = function (password) {\n        if (this.documentHelper.isDocumentProtected) {\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.saltValue) && this.documentHelper.saltValue === '')\n                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.hashValue) && this.documentHelper.hashValue === '')\n                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(password) && password === '')) {\n                this.unProtectDocument();\n                return;\n            }\n            var unProtectDocumentHandler = new _base_ajax_helper__WEBPACK_IMPORTED_MODULE_18__.XmlHttpRequestHandler();\n            var passwordBase64 = this.base64.encodeString(password);\n            var formObject = {\n                passwordBase64: passwordBase64,\n                saltBase64: this.documentHelper.saltValue,\n                spinCount: 100000\n            };\n            unProtectDocumentHandler.url = this.owner.serviceUrl + this.owner.serverActionSettings.restrictEditing;\n            unProtectDocumentHandler.contentType = 'application/json;charset=UTF-8';\n            unProtectDocumentHandler.customHeaders = this.owner.headers;\n            unProtectDocumentHandler.onSuccess = this.onUnProtectionSuccess.bind(this);\n            unProtectDocumentHandler.onFailure = this.protectionFailureHandler.bind(this);\n            unProtectDocumentHandler.onError = this.protectionFailureHandler.bind(this);\n            var httprequestEventArgs = { serverActionType: 'RestrictEditing', headers: this.owner.headers, timeout: 0, cancel: false, withCredentials: false };\n            this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeXmlHttpRequestSend, httprequestEventArgs);\n            if (httprequestEventArgs.cancel) {\n                if (this.documentHelper.dialog.visible) {\n                    this.documentHelper.dialog.hide();\n                }\n            }\n            else {\n                unProtectDocumentHandler.send(formObject, httprequestEventArgs, false);\n            }\n            if (!this.owner.enableTrackChanges) {\n                this.toggleTrackChangesProtection(false);\n            }\n        }\n    };\n    /**\n     * Stops the document protection.\n     *\n     * @param {string} password Specify the password to stop protection.\n     * @returns {Promise} Returns a Promise which is resolved when protection is stopped, or rejected if for any reason protection cannot be stopped.\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.stopProtectionAsync = function (password) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        if (_this.documentHelper.isDocumentProtected) {\n                            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.documentHelper.saltValue) && _this.documentHelper.saltValue === '')\n                                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.documentHelper.hashValue) && _this.documentHelper.hashValue === '')\n                                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(password) && password === '')) {\n                                _this.unProtectDocument();\n                                resolve();\n                                return;\n                            }\n                            var unProtectDocumentHandler = new _base_ajax_helper__WEBPACK_IMPORTED_MODULE_18__.XmlHttpRequestHandler();\n                            var passwordBase64 = _this.base64.encodeString(password);\n                            var formObject = {\n                                passwordBase64: passwordBase64,\n                                saltBase64: _this.documentHelper.saltValue,\n                                spinCount: 100000\n                            };\n                            unProtectDocumentHandler.url = _this.owner.serviceUrl + _this.owner.serverActionSettings.restrictEditing;\n                            unProtectDocumentHandler.contentType = 'application/json;charset=UTF-8';\n                            unProtectDocumentHandler.customHeaders = _this.owner.headers;\n                            unProtectDocumentHandler.onSuccess = function (result) {\n                                var protectionSuccess = _this.onUnProtectionSuccess(result);\n                                if (protectionSuccess) {\n                                    resolve();\n                                }\n                                else {\n                                    reject();\n                                }\n                            };\n                            unProtectDocumentHandler.onFailure = function (result) {\n                                _this.protectionFailureHandler(result);\n                                reject();\n                            };\n                            unProtectDocumentHandler.onError = function (result) {\n                                _this.protectionFailureHandler(result);\n                                reject();\n                            };\n                            var httprequestEventArgs = { serverActionType: 'RestrictEditing', headers: _this.owner.headers, timeout: 0, cancel: false, withCredentials: false };\n                            _this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeXmlHttpRequestSend, httprequestEventArgs);\n                            if (httprequestEventArgs.cancel) {\n                                if (_this.documentHelper.dialog.visible) {\n                                    _this.documentHelper.dialog.hide();\n                                }\n                            }\n                            else {\n                                unProtectDocumentHandler.send(formObject, httprequestEventArgs);\n                            }\n                            if (!_this.owner.enableTrackChanges) {\n                                _this.toggleTrackChangesProtection(false);\n                            }\n                        }\n                    })];\n            });\n        });\n    };\n    Editor.prototype.onUnProtectionSuccess = function (result) {\n        var encodeString = JSON.parse(result.data);\n        var validateValue = this.validateHashValue(encodeString[1]);\n        this.owner.showHideRulers();\n        return validateValue;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.validateHashValue = function (currentHashValue) {\n        this.currentHashValue = currentHashValue;\n        var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n        localeValue.setLocale(this.documentHelper.owner.locale);\n        var decodeUserHashValue = this.base64.decodeString(currentHashValue);\n        var documentHashValue = this.documentHelper.hashValue;\n        var defaultHashValue = this.base64.decodeString(documentHashValue);\n        var stopProtection = true;\n        if (decodeUserHashValue.length === defaultHashValue.length) {\n            for (var i = 0; i < decodeUserHashValue.length; i++) {\n                if (decodeUserHashValue[i] !== defaultHashValue[i]) {\n                    stopProtection = false;\n                    break;\n                }\n            }\n        }\n        else {\n            stopProtection = false;\n        }\n        if (stopProtection) {\n            this.unProtectDocument();\n            return true;\n        }\n        else {\n            _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert(localeValue.getConstant('The password is incorrect'));\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.unProtectDocument = function () {\n        this.documentHelper.owner.getSettingData('protection', false, this.currentHashValue);\n        this.currentHashValue = null;\n        var previousProtectionType = this.documentHelper.protectionType;\n        this.documentHelper.isDocumentProtected = false;\n        this.documentHelper.restrictFormatting = false;\n        this.documentHelper.protectionType = 'NoProtection';\n        this.documentHelper.saltValue = '';\n        this.documentHelper.hashValue = '';\n        this.documentHelper.selection.highlightEditRegion();\n        var restrictPane = this.documentHelper.restrictEditingPane.restrictPane;\n        if (restrictPane && restrictPane.style.display === 'block') {\n            this.documentHelper.restrictEditingPane.showStopProtectionPane(false);\n        }\n        if (previousProtectionType === 'RevisionsOnly' && !this.owner.enableTrackChanges) {\n            this.toggleTrackChangesProtection(false);\n        }\n        this.owner.trackChangesPane.enableDisableButton(true);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)) {\n            this.owner.editorHistoryModule.clearHistory();\n        }\n        this.owner.notify(_base_index__WEBPACK_IMPORTED_MODULE_10__.protectionTypeChangeEvent, {});\n        if (this.documentHelper.dialog.visible) {\n            this.documentHelper.dialog.hide();\n        }\n        this.owner.showHideRulers();\n        if (!this.documentHelper.owner.enableCollaborativeEditing) {\n            this.fireContentChange();\n        }\n    };\n    /**\n     * Notify content change event\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.fireContentChange = function () {\n        this.owner.documentHelper.render.commentMarkDictionary.clear();\n        if (this.selection.isHighlightEditRegion) {\n            if (this.owner.enableLockAndEdit) {\n                this.owner.collaborativeEditingModule.updateLockRegion();\n            }\n            else {\n                this.selection.onHighlight();\n            }\n        }\n        this.selection.highlightFormFields();\n        if (!this.isPaste) {\n            this.copiedContent = undefined;\n            this.copiedTextContent = '';\n            this.previousSectionFormat = undefined;\n            this.previousParaFormat = undefined;\n            this.previousCharFormat = undefined;\n            this.selection.isViewPasteOptions = false;\n            if (this.isPasteListUpdated) {\n                this.isPasteListUpdated = false;\n            }\n            this.selection.showHidePasteOptions(undefined, undefined);\n        }\n        if (this.documentHelper.owner.isLayoutEnabled && !this.documentHelper.owner.editorModule.isUserInsert && !this.documentHelper.owner.isShiftingEnabled && !this.isSkipOperationsBuild && !this.isRemoteAction) {\n            this.documentHelper.owner.fireContentChange();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.optionsPaneModule) && this.owner.optionsPaneModule.isOptionsPaneShow\n            && !this.owner.optionsPaneModule.isUpdateHeading && this.selection.paragraphFormat.outlineLevel !== 'BodyText' && this.owner.optionsPaneModule.isHeadingTab) {\n            this.owner.optionsPaneModule.updateHeadingTab();\n        }\n        if (this.owner.isSpellCheck && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.editPosition)) {\n            this.triggerPageSpellCheck = false;\n        }\n    };\n    /**\n     * Update physical location for text position\n     *\n     * @param {boolean} isSelectionChanged - Specifies the selection change\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateSelectionTextPosition = function (isSelectionChanged) {\n        this.getOffsetValue(this.selection);\n        this.selection.start.updatePhysicalPosition(true);\n        if (this.selection.isEmpty) {\n            this.selection.end.setPositionInternal(this.selection.start);\n        }\n        else {\n            this.selection.end.updatePhysicalPosition(true);\n        }\n        this.selection.upDownSelectionLength = this.selection.end.location.x;\n        this.selection.fireSelectionChanged(isSelectionChanged);\n    };\n    /**\n     * Predict text\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.predictText = function () {\n        this.documentHelper.suffix = '';\n        if (this.selection.start.paragraph.isEmpty() || this.selection.start.offset === 0 &&\n            this.selection.start.currentWidget.isFirstLine() || this.selection.end.offset === 0 &&\n            this.selection.end.currentWidget.isFirstLine()) {\n            this.documentHelper.prefix = '';\n        }\n        else {\n            this.getPrefixAndSuffix();\n        }\n        this.documentHelper.prefix = '@' + String.fromCharCode(160) + this.documentHelper.prefix; // &nbsp;\n        this.documentHelper.editableDiv.innerText = this.documentHelper.prefix;\n        this.documentHelper.selection.setEditableDivCaretPosition(this.documentHelper.prefix.length);\n    };\n    /* eslint-disable  */\n    Editor.prototype.getPrefixAndSuffix = function () {\n        //let viewer: LayoutViewer = this.owner.viewer;\n        var editor = this.owner;\n        var documentHelper = editor.documentHelper;\n        if (this.selection.text !== '') {\n            documentHelper.prefix = '';\n            return;\n        }\n        else {\n            var startIndex = 0;\n            var inlineInfo = this.selection.start.currentWidget.getInline(this.selection.start.offset, startIndex);\n            var inline = inlineInfo.element;\n            startIndex = inlineInfo.index;\n            if (inline !== undefined) {\n                var boxInfo = this.selection.getElementBoxInternal(inline, startIndex);\n                var box = boxInfo.element;\n                startIndex = boxInfo.index;\n                var spaceIndex = 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(box)) {\n                    var prefixAdded = false;\n                    if (box instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && startIndex > 0 && box.line.isFirstLine()) {\n                        documentHelper.prefix = '';\n                    }\n                    if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                        inline = this.selection.getPreviousTextElement(inline);\n                    }\n                    /* eslint-disable no-cond-assign */\n                    while ((spaceIndex = documentHelper.prefix.lastIndexOf(' ')) < 0 && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                        if (inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && documentHelper.prefix.indexOf(' ') === -1) {\n                            if (!prefixAdded) {\n                                documentHelper.prefix = inline.text.substring(0, startIndex);\n                                prefixAdded = true;\n                            }\n                            else {\n                                documentHelper.prefix = inline.text + documentHelper.prefix;\n                            }\n                            inline = inline.previousNode;\n                            // If the line has no elements then break the loop to avoid the exception.\n                            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                                break;\n                            }\n                            if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                                inline = this.selection.getPreviousTextElement(inline);\n                            }\n                        }\n                        else if (!(inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                            if (!prefixAdded) {\n                                documentHelper.prefix = inline.text.substring(0, startIndex);\n                                prefixAdded = true;\n                            }\n                            else {\n                                documentHelper.prefix = inline.text + documentHelper.prefix;\n                            }\n                            break;\n                        }\n                    }\n                    if (!(documentHelper.prefix.length > 1 && documentHelper.prefix[documentHelper.prefix.length - 1] === ' ' &&\n                        documentHelper.prefix[documentHelper.prefix.length - 2] === '.')) {\n                        spaceIndex = documentHelper.prefix.lastIndexOf(' ');\n                    }\n                    else {\n                        spaceIndex = -1;\n                        documentHelper.prefix = '';\n                    }\n                    documentHelper.prefix = spaceIndex < 0 ? documentHelper.prefix : documentHelper.prefix.substring(spaceIndex);\n                    if (documentHelper.prefix.indexOf(' ') === 0 && documentHelper.prefix.length >= 1) {\n                        documentHelper.prefix = documentHelper.prefix.substring(1);\n                    }\n                    // suffix text prediction\n                    var endIndex = 0;\n                    var endInlineInfo = this.selection.end.currentWidget.getInline(this.selection.end.offset, endIndex);\n                    var endInline = endInlineInfo.element;\n                    endIndex = endInlineInfo.index;\n                    boxInfo = this.selection.getElementBoxInternal(endInline, endIndex);\n                    box = boxInfo.element;\n                    endIndex = boxInfo.index;\n                    if (box) {\n                        var suffixAdded = false;\n                        if (box instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && endIndex < box.length) {\n                            documentHelper.suffix = '';\n                        }\n                        // boxIndex = renderedElements.get(endInline).indexOf(box);\n                        while ((spaceIndex = documentHelper.suffix.indexOf(' ')) < 0 && endInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                            if (endInline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && documentHelper.suffix.indexOf(' ') === -1) {\n                                if (!suffixAdded) {\n                                    documentHelper.suffix = box.text.substring(endIndex);\n                                    suffixAdded = true;\n                                }\n                                else {\n                                    documentHelper.suffix = documentHelper.suffix + endInline.text;\n                                }\n                                endInline = endInline.nextNode;\n                            }\n                            else if (!(endInline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                                if (!suffixAdded) {\n                                    documentHelper.suffix = box.text.substring(endIndex);\n                                    suffixAdded = true;\n                                }\n                                else {\n                                    documentHelper.suffix = documentHelper.suffix + endInline.text;\n                                }\n                                break;\n                            }\n                        }\n                        spaceIndex = documentHelper.suffix.indexOf(' ');\n                        documentHelper.suffix = spaceIndex < 0 ? documentHelper.suffix : documentHelper.suffix.substring(0, spaceIndex);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * key action\n     * @private\n     * @returns {void}\n     */\n    /* eslint-disable  */\n    Editor.prototype.onKeyDownInternal = function (event, ctrl, shift, alt) {\n        var key = event.which || event.keyCode;\n        this.owner.focusIn();\n        if (ctrl && !shift && !alt) {\n            this.documentHelper.isControlPressed = true;\n            switch (key) {\n                case 8:\n                    event.preventDefault();\n                    this.handleCtrlBackKey();\n                    break;\n                case 46:\n                    event.preventDefault();\n                    this.handleCtrlDelete();\n                    break;\n                case 9:\n                    event.preventDefault();\n                    if (this.owner.acceptTab) {\n                        this.selection.handleTabKey(false, false);\n                    }\n                    break;\n                case 13:\n                    event.preventDefault();\n                    this.insertPageBreak();\n                    break;\n                case 48:\n                    event.preventDefault();\n                    var value = 0;\n                    var beforeSpacing = this.documentHelper.selection.start.paragraph.paragraphFormat.beforeSpacing;\n                    if (beforeSpacing > 12) {\n                        value = 12;\n                    }\n                    else if (beforeSpacing > 0 && beforeSpacing <= 12) {\n                        value = 0;\n                    }\n                    else if (beforeSpacing === 0) {\n                        value = 12;\n                    }\n                    this.onApplyParagraphFormat('beforeSpacing', value, true, false);\n                    break;\n                case 49:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.onApplyParagraphFormat('lineSpacing', 1, false, false);\n                    }\n                    break;\n                case 50:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.onApplyParagraphFormat('lineSpacing', 2, false, false);\n                    }\n                    break;\n                case 53:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.onApplyParagraphFormat('lineSpacing', 1.5, false, false);\n                    }\n                    break;\n                case 66:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleBold();\n                    }\n                    break;\n                case 68:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode && this.owner.fontDialogModule) {\n                        this.owner.fontDialogModule.showFontDialog();\n                    }\n                    break;\n                case 69:\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleTextAlignment('Center');\n                    }\n                    event.preventDefault();\n                    break;\n                case 72:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnly && this.owner.optionsPaneModule) {\n                        this.owner.optionsPaneModule.isReplace = true;\n                        this.owner.documentEditorSettings.showNavigationPane = true;\n                    }\n                    break;\n                case 73:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleItalic();\n                    }\n                    break;\n                case 74:\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleTextAlignment('Justify');\n                    }\n                    event.preventDefault();\n                    break;\n                case 75:\n                    event.preventDefault();\n                    if (this.owner.hyperlinkDialogModule && !this.owner.isReadOnlyMode) {\n                        this.owner.hyperlinkDialogModule.show();\n                    }\n                    break;\n                case 76:\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleTextAlignment('Left');\n                    }\n                    event.preventDefault();\n                    break;\n                case 77:\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.owner.selectionModule.increaseIndent();\n                    }\n                    event.preventDefault();\n                    break;\n                case 78:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        this.owner.openBlank();\n                    }\n                    break;\n                case 82:\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleTextAlignment('Right');\n                    }\n                    event.preventDefault();\n                    break;\n                case 85:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.owner.selectionModule.toggleUnderline('Single');\n                    }\n                    break;\n                case 88:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        this.owner.editorModule.cut();\n                    }\n                    break;\n                case 89:\n                    if (this.owner.enableEditorHistory) {\n                        this.editorHistory.redo();\n                        event.preventDefault();\n                    }\n                    break;\n                case 90:\n                    if (this.owner.enableEditorHistory) {\n                        this.editorHistory.undo();\n                        event.preventDefault();\n                    }\n                    break;\n                case 219:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.onApplyCharacterFormat('fontSize', 'decrement', true);\n                    }\n                    break;\n                case 221:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.onApplyCharacterFormat('fontSize', 'increment', true);\n                    }\n                    break;\n                case 187:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n                        this.toggleBaselineAlignment('Subscript');\n                    }\n                    break;\n            }\n        }\n        else if (shift && !ctrl && !alt) {\n            switch (key) {\n                case 9:\n                    if (this.owner.acceptTab) {\n                        event.preventDefault();\n                        this.selection.handleTabKey(false, true);\n                    }\n                    else {\n                        this.documentHelper.editableDiv.blur();\n                    }\n                    break;\n                case 13:\n                    this.handleShiftEnter();\n                    event.preventDefault();\n                    break;\n                case 114:\n                    event.preventDefault();\n                    this.changeCase(this.toggleChangeCase());\n                    break;\n            }\n        }\n        else if (shift && ctrl && !alt) {\n            switch (key) {\n                case 13:\n                    if (!this.owner.isReadOnlyMode) {\n                        event.preventDefault();\n                        this.insertColumnBreak();\n                    }\n                    break;\n                case 68:\n                    if (!this.owner.isReadOnlyMode) {\n                        this.owner.selectionModule.toggleUnderline('Double');\n                    }\n                    break;\n                case 77:\n                    if (!this.owner.isReadOnlyMode) {\n                        this.owner.selectionModule.decreaseIndent();\n                    }\n                    event.preventDefault();\n                    break;\n                case 188:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        this.onApplyCharacterFormat('fontSize', 'decrement', true);\n                    }\n                    break;\n                case 190:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        this.onApplyCharacterFormat('fontSize', 'increment', true);\n                    }\n                    break;\n                case 187:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        this.toggleBaselineAlignment('Superscript');\n                    }\n                    break;\n                case 69:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode) {\n                        var eventArgs = { isTrackChangesEnabled: !this.owner.enableTrackChanges };\n                        this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.trackChangeEvent, eventArgs);\n                    }\n            }\n        }\n        else if (!shift && ctrl && alt) {\n            switch (key) {\n                case 72:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode && this.owner.isDocumentLoaded) {\n                        this.toggleHighlightColor();\n                    }\n                    break;\n                case 70:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode && this.owner.isDocumentLoaded) {\n                        this.insertFootnote();\n                    }\n                    break;\n                case 68:\n                    event.preventDefault();\n                    if (!this.owner.isReadOnlyMode && this.owner.isDocumentLoaded) {\n                        this.insertEndnote();\n                    }\n                    break;\n            }\n        }\n        else {\n            switch (key) {\n                case 8:\n                    event.preventDefault();\n                    this.handleBackKey();\n                    break;\n                case 9:\n                    if (this.owner.acceptTab) {\n                        event.preventDefault();\n                        this.selection.handleTabKey(true, false);\n                    }\n                    else {\n                        this.documentHelper.editableDiv.blur();\n                    }\n                    break;\n                case 13:\n                    event.preventDefault();\n                    if (this.owner.isSpellCheck) {\n                        this.documentHelper.triggerSpellCheck = true;\n                    }\n                    this.handleEnterKey();\n                    if (this.owner.isSpellCheck) {\n                        this.documentHelper.triggerSpellCheck = false;\n                    }\n                    break;\n                case 27:\n                    event.preventDefault();\n                    if (!this.isPaste) {\n                        this.copiedContent = undefined;\n                        this.copiedTextContent = '';\n                        this.previousParaFormat = undefined;\n                        this.previousCharFormat = undefined;\n                        this.previousSectionFormat = undefined;\n                        this.selection.isViewPasteOptions = false;\n                        if (this.isPasteListUpdated) {\n                            this.isPasteListUpdated = false;\n                        }\n                        this.selection.showHidePasteOptions(undefined, undefined);\n                    }\n                    break;\n                case 46:\n                    this.handleDelete();\n                    event.preventDefault();\n                    break;\n                case 32:\n                    this.selection.handleSpaceBarKey();\n                    break;\n                case 120:\n                    var textPosition = this.selection.getDocumentEnd();\n                    textPosition.offset = (this.selection.getDocumentEnd().offset + 1);\n                    if (this.selection.start.isAtSamePosition(this.selection.getDocumentStart()) &&\n                        this.selection.end.isAtSamePosition(textPosition)) {\n                        this.owner.updateFields();\n                    }\n                    else {\n                        this.selection.updateRefField();\n                    }\n                    break;\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleShiftEnter = function () {\n        if (!this.owner.isReadOnlyMode) {\n            this.handleTextInput('\\v');\n        }\n        this.selection.checkForCursorVisibility();\n    };\n    /**\n     * Handles back key.\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleBackKey = function () {\n        if (!this.owner.isReadOnlyMode && this.canEditContentControl || (this.documentHelper.protectionType === 'FormFieldsOnly' && this.canEditContentControl && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.selection) && this.documentHelper.selection.checkContentControlLocked()) || this.selection.isInlineFormFillMode()) {\n            this.owner.editorModule.onBackSpace();\n        }\n        this.selection.checkForCursorVisibility();\n    };\n    /**\n     * Handles delete\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleDelete = function () {\n        if (!this.owner.isReadOnlyMode && this.canEditContentControl || (this.documentHelper.protectionType === 'FormFieldsOnly' && this.canEditContentControl && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.selection) && this.documentHelper.selection.checkContentControlLocked()) || this.selection.isInlineFormFillMode()) {\n            this.owner.editorModule.delete();\n        }\n        this.selection.checkForCursorVisibility();\n    };\n    /**\n     * Handles enter key.\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleEnterKey = function () {\n        var contentControl = this.documentHelper.owner.selection.currentContentControl;\n        if ((!this.owner.isReadOnlyMode && !this.documentHelper.selection.checkContentControlLocked()) || this.selection.isInlineFormFillMode() ||\n            ((this.documentHelper.protectionType === 'FormFieldsOnly' || this.documentHelper.protectionType == 'NoProtection') && (contentControl.contentControlProperties.multiline && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.selection) && this.documentHelper.selection.checkContentControlLocked()))\n            || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && contentControl.contentControlProperties.type === 'RichText' && this.canEditContentControl && (contentControl.contentControlWidgetType === 'Block' || contentControl.contentControlWidgetType === 'Cell'))) {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.Browser.isDevice) {\n                this.documentHelper.isCompositionStart = false;\n            }\n            this.owner.editorModule.onEnter();\n        }\n        this.selection.checkForCursorVisibility();\n    };\n    /**\n     * Handles Control back key.\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleCtrlBackKey = function () {\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            if (!this.selection.isForward) {\n                start = end;\n            }\n            if (this.selection.isEmpty) {\n                this.selection.handleControlShiftLeftKey();\n                this.owner.editorModule.onBackSpace();\n                /* eslint-disable max-len */\n            }\n            else if ((((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(start.paragraph.previousRenderedWidget) || start.paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget)\n                && start.offset === 0)) {\n                return;\n            }\n            else {\n                this.selection.handleLeftKey();\n                this.selection.handleControlShiftLeftKey();\n                this.owner.editorModule.onBackSpace();\n            }\n        }\n    };\n    /**\n     * Handles Ctrl delete\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleCtrlDelete = function () {\n        if ((!this.owner.isReadOnlyMode && this.canEditContentControl) || this.selection.isInlineFormFillMode()) {\n            if (!this.selection.isEmpty) {\n                this.selection.handleLeftKey();\n                this.selection.handleControlShiftRightKey();\n                var selectedText = this.selection.text;\n                var checkSpace = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.endsWith(selectedText);\n                if (checkSpace) {\n                    this.selection.handleShiftLeftKey();\n                }\n                this.owner.editorModule.delete();\n            }\n            else {\n                this.selection.handleControlShiftRightKey();\n                this.owner.editorModule.delete();\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleTextInput = function (text) {\n        var _this = this;\n        if (!this.owner.isReadOnlyMode && this.canEditContentControl || (this.documentHelper.protectionType === 'FormFieldsOnly' && this.canEditContentControl && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.selection) && this.documentHelper.selection.checkContentControlLocked()) || this.selection.isInlineFormFillMode()) {\n            if (this.animationTimer) {\n                clearTimeout(this.animationTimer);\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.classList)(this.selection.caret, [], ['e-de-cursor-animation']);\n            this.handledTextInput = true;\n            this.owner.editorModule.insertText(text);\n            this.handledTextInput = false;\n            /* eslint-disable @typescript-eslint/indent */\n            this.animationTimer = Number(setTimeout(function () {\n                if (_this.animationTimer) {\n                    clearTimeout(_this.animationTimer);\n                }\n                if (_this.selection && _this.selection.caret) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.classList)(_this.selection.caret, ['e-de-cursor-animation'], []);\n                }\n            }, 600));\n        }\n        this.selection.checkForCursorVisibility();\n    };\n    /**\n     * Copies to format.\n     * @param {WCharacterFormat} format\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.copyInsertFormat = function (format, copy, widget) {\n        var insertFormat = widget ? new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(widget) : new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n        var sFormat = this.selection.characterFormat;\n        if (copy) {\n            insertFormat.copyFormat(format);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.bidi) && format.bidi !== sFormat.bidi) {\n            insertFormat.bidi = sFormat.bidi;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.bold) && format.bold !== sFormat.bold) {\n            insertFormat.bold = sFormat.bold;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.italic) && format.italic !== sFormat.italic) {\n            insertFormat.italic = sFormat.italic;\n        }\n        if (sFormat.fontSize > 0 && format.fontSize !== sFormat.fontSize) {\n            insertFormat.fontSize = sFormat.fontSize;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.fontFamily) && format.fontFamily !== sFormat.fontFamily) {\n            insertFormat.fontFamily = sFormat.fontFamily;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.highlightColor) && format.highlightColor !== sFormat.highlightColor) {\n            insertFormat.highlightColor = sFormat.highlightColor;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.baselineAlignment) && format.baselineAlignment !== sFormat.baselineAlignment) {\n            insertFormat.baselineAlignment = sFormat.baselineAlignment;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.fontColor) && format.fontColor !== sFormat.fontColor) {\n            insertFormat.fontColor = sFormat.fontColor;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.underline) && format.underline !== sFormat.underline) {\n            insertFormat.underline = sFormat.underline;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.strikethrough) && format.strikethrough !== sFormat.strikethrough) {\n            insertFormat.strikethrough = sFormat.strikethrough;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.boldBidi) && format.boldBidi !== sFormat.boldBidi) {\n            insertFormat.boldBidi = sFormat.boldBidi;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sFormat.italicBidi) && format.italicBidi !== sFormat.italicBidi) {\n            insertFormat.italicBidi = sFormat.italicBidi;\n        }\n        if (sFormat.fontSizeBidi > 0 && format.fontSizeBidi !== sFormat.fontSizeBidi) {\n            insertFormat.fontSizeBidi = sFormat.fontSizeBidi;\n        }\n        return insertFormat;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getResultContentControlText = function (element) {\n        var ele = element.nextNode;\n        var text = '';\n        while (!(ele instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl)) {\n            if (ele instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                text += ele.text;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(ele)) {\n                break;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(ele.nextNode)) {\n                if (ele.paragraph.nextRenderedWidget) {\n                    ele = ele.paragraph.nextRenderedWidget.firstChild.children[0];\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                ele = ele.nextNode;\n            }\n        }\n        return text;\n    };\n    Editor.prototype.insertContentControlPlaceholder = function () {\n        var contentControl = this.owner.selection.currentContentControl;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && contentControl.nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && contentControl.nextElement === contentControl.reference) {\n            var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            locale.setLocale(this.owner.locale);\n            span.text = locale.getConstant('Default Content Control Text');\n            if (contentControl.contentControlProperties.type === 'ComboBox' || contentControl.contentControlProperties.type === 'DropDownList') {\n                span.text = locale.getConstant('Choose an item');\n            }\n            if (contentControl.contentControlProperties.type === 'Date') {\n                span.text = locale.getConstant('Default Date Picker');\n            }\n            span.characterFormat = this.owner.editor.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n            this.owner.editor.insertElementsInternal(this.owner.selectionModule.end, [span]);\n            contentControl.contentControlProperties.hasPlaceHolderText = true;\n        }\n    };\n    Editor.prototype.insertContentControl = function (typeOrInfo, value, items) {\n        if (this.selection.isPlainContentControl()) {\n            return undefined;\n        }\n        var type;\n        var info;\n        this.selection.isSelectionisInCC = false;\n        if (!(typeof typeOrInfo === 'string')) {\n            type = typeOrInfo.type;\n            value = typeOrInfo.value;\n            items = typeOrInfo.items;\n            info = typeOrInfo;\n        }\n        else {\n            type = typeOrInfo;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info)) {\n            info = {\n                title: undefined,\n                tag: undefined,\n                value: String(value),\n                canDelete: false,\n                canEdit: false,\n                type: type,\n                xmlString: undefined,\n                xmlPath: undefined\n            };\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.xmlString) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.xmlString)) {\n                info = this.mapXmlStringPath(info);\n                value = info.value;\n                this.owner.isXmlMapCC = true;\n            }\n        }\n        switch (type) {\n            case 'RichText':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n                    try {\n                        var parsed = value;\n                        if (typeof parsed !== 'object') {\n                            parsed = JSON.parse(value);\n                        }\n                        if (parsed && typeof parsed === 'object' || 'sections' in parsed) {\n                            this.applyRichText(value, info.title, info.tag, info.canDelete, info.canEdit);\n                        }\n                    }\n                    catch (e) {\n                        var sfdt = {\n                            \"sections\": [\n                                {\n                                    \"blocks\": [\n                                        {\n                                            \"inlines\": [\n                                                {\n                                                    \"text\": value\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n                        this.applyRichText(JSON.stringify(sfdt), info.title, info.tag, info.canDelete, info.canEdit);\n                    }\n                }\n                else {\n                    this.applyRichText();\n                }\n                break;\n            case 'Text':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n                    this.applyPlainText(value, info.title, info.tag, info.canDelete, info.canEdit);\n                }\n                else {\n                    this.applyPlainText();\n                }\n                break;\n            case 'Picture':\n                this.applyPictureContentControl(type, value, info.title, info.tag, info.canDelete, info.canEdit);\n                break;\n            case 'ComboBox':\n                this.applyComboBox('ComboBox', items, value, info.title, info.tag, info.canDelete, info.canEdit);\n                break;\n            case 'DropDownList':\n                this.applyComboBox('DropDownList', items, value, info.title, info.tag, info.canDelete, info.canEdit);\n                break;\n            case 'Date':\n                this.applyDatePickerContentControl(type, value, info.title, info.tag, info.canDelete, info.canEdit);\n                break;\n            case 'CheckBox':\n                this.applyCheckBoxContentControl(type, String.fromCharCode(9744), value, info.title, info.tag, info.canDelete, info.canEdit);\n                break;\n        }\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl)) {\n            return undefined;\n        }\n        var contentControlInfo = {\n            title: contentControl.contentControlProperties.title,\n            tag: contentControl.contentControlProperties.tag,\n            value: String(value),\n            canDelete: contentControl.contentControlProperties.lockContentControl,\n            canEdit: contentControl.contentControlProperties.lockContents,\n            type: contentControl.contentControlProperties.type,\n            xmlString: info.xmlString,\n            xmlPath: info.xmlPath\n        };\n        return contentControlInfo;\n    };\n    Editor.prototype.openContentDialog = function (richText) {\n        var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n        locale.setLocale(this.owner.locale);\n        _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n            title: locale.getConstant('Information'),\n            content: richText ? locale.getConstant('Rich text Controls') : locale.getConstant('Plain text Controls'),\n            showCloseIcon: true,\n            closeOnEscape: true,\n            animationSettings: { effect: 'Zoom' },\n            position: { X: 'center', Y: 'center' }\n        });\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updatePropertiesToBlock = function (contentControl, isUpdate) {\n        var properties = contentControl.contentControlProperties;\n        if (properties.contentControlWidgetType !== 'Block') {\n            return;\n        }\n        var startParagraph = contentControl.line.paragraph;\n        var endParagraph = contentControl.reference.line.paragraph;\n        var startBlock = startParagraph.isInsideTable ? this.documentHelper.layout.getParentTable(startParagraph)\n            : startParagraph;\n        var endBlock = endParagraph.isInsideTable ? this.documentHelper.layout.getParentTable(endParagraph)\n            : endParagraph;\n        while (startBlock) {\n            startBlock.contentControlProperties = isUpdate ? contentControl.contentControlProperties : undefined;\n            startBlock = startBlock !== endBlock ? startBlock.nextRenderedWidget : undefined;\n        }\n    };\n    Editor.prototype.updateContentControlPosition = function (start, end) {\n        var elementStart = start.currentWidget.getInline(start.offset, 0);\n        var elementEnd = end.currentWidget.getInline(end.offset, 0);\n        if (elementStart && elementStart.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && elementStart.element.contentControlWidgetType === 'Block') {\n            start.offset++;\n        }\n        if (elementEnd && elementEnd.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && elementEnd.element.contentControlWidgetType === 'Block') {\n            end.offset--;\n        }\n    };\n    Editor.prototype.applyRichText = function (value, title, tag, lock, lockContents) {\n        var positionStart = this.selection.isForward ? this.selection.start.clone() : this.selection.end.clone();\n        var positionEnd = this.selection.isForward ? this.selection.end.clone() : this.selection.start.clone();\n        if (this.selection.isParagraphMarkSelected()) {\n            positionEnd.offset -= 1;\n        }\n        if (positionStart.paragraph !== positionEnd.paragraph) {\n            if (!positionStart.isAtParagraphStart) {\n                positionEnd.setPositionParagraph(positionStart.paragraph.lastChild, positionStart.paragraph.lastChild.getEndOffset());\n            }\n            else if (positionStart.isAtParagraphStart && !positionEnd.isAtParagraphEnd) {\n                var previousParagraph = void 0;\n                if (positionEnd.paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                    previousParagraph = this.selection.getLastBlockInLastCell(positionEnd.paragraph.previousRenderedWidget);\n                }\n                else {\n                    previousParagraph = positionEnd.paragraph.previousRenderedWidget;\n                }\n                positionEnd.setPositionParagraph(previousParagraph.lastChild, previousParagraph.lastChild.getEndOffset());\n            }\n        }\n        var isInline = true;\n        if (positionStart.isAtParagraphStart && positionEnd.isAtParagraphEnd) {\n            isInline = false;\n        }\n        this.updateContentControlPosition(positionStart, positionEnd);\n        if (this.editorHistory) {\n            this.initComplexHistory('InsertContentControl');\n        }\n        var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl(isInline ? 'Inline' : 'Block');\n        var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl(isInline ? 'Inline' : 'Block');\n        var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties(isInline ? 'Inline' : 'Block');\n        properties.color = \"#00000000\";\n        positionStart.isAtSamePosition(positionEnd) ? properties.hasPlaceHolderText = true : properties.hasPlaceHolderText = false;\n        properties.isTemporary = false;\n        properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? !lock : false;\n        properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? !lockContents : false;\n        properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n        properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n        properties.multiline = false;\n        properties.type = 'RichText';\n        if (this.owner.isXmlMapCC) {\n            this.addXmlProperties(properties, this.owner.xPathString);\n        }\n        blockStartContentControl.contentControlProperties = properties;\n        blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n        blockStartContentControl.type = 0;\n        blockEndContentControl.type = 1;\n        if (properties.hasPlaceHolderText) {\n            var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            locale.setLocale(this.owner.locale);\n            span.text = locale.getConstant('Default Content Control Text');\n            span.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n            this.insertElementsInternal(positionStart, [blockStartContentControl]);\n            this.insertElementsInternal(positionStart, [span]);\n            positionStart.offset + span.length;\n            this.insertElementsInternal(positionStart, [blockEndContentControl]);\n        }\n        else {\n            if (positionStart.currentWidget === positionEnd.currentWidget) {\n                positionEnd.offset++;\n            }\n            var blockInfo = this.selection.getParagraphInfo(positionEnd);\n            var index = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            this.insertElementsInternal(positionStart, [blockStartContentControl]);\n            positionEnd = this.owner.selection.getTextPosBasedOnLogicalIndex(index);\n            this.insertElementsInternal(positionEnd, [blockEndContentControl]);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n            this.documentHelper.selection.selectContentInternal(blockStartContentControl);\n            this.paste(value);\n            properties.hasPlaceHolderText = false;\n        }\n        this.updatePropertiesToBlock(blockStartContentControl, true);\n        if (properties.hasPlaceHolderText) {\n            this.selection.selectPlaceHolderText(blockStartContentControl);\n        }\n        else {\n            this.selection.selectContentInternal(blockStartContentControl);\n        }\n        this.selection.contentControleditRegionHighlighters.clear();\n        this.selection.onHighlightContentControl();\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistory();\n        }\n        this.documentHelper.viewer.updateScrollBars();\n    };\n    Editor.prototype.isInvalidElementPresent = function (positionStart, positionEnd) {\n        var startElement = this.selection.getElementInfo(positionStart.currentWidget, positionStart.offset + 1);\n        var endElement = this.selection.getElementInfo(positionEnd.currentWidget, positionEnd.offset);\n        for (var i = positionStart.currentWidget.indexInOwner; i < positionEnd.currentWidget.indexInOwner + 1; i++) {\n            var line = positionStart.currentWidget.paragraph.childWidgets[i];\n            for (var j = startElement.element.indexInOwner; j < line.children.length; j++) {\n                var currentElement = line.children[j];\n                if (!(currentElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                    return true;\n                }\n                if (endElement.element == currentElement) {\n                    return false;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.applyPlainText = function (value, title, tag, lock, lockContents) {\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) || contentControl.contentControlProperties.type === 'RichText') {\n            var positionStart = this.selection.isForward ? this.selection.start.clone() : this.selection.end.clone();\n            var positionEnd = this.selection.isForward ? this.selection.end.clone() : this.selection.start.clone();\n            if (this.selection.isParagraphMarkSelected()) {\n                positionEnd.offset -= 1;\n            }\n            if (positionStart.paragraph !== positionEnd.paragraph) {\n                positionEnd.setPositionParagraph(positionStart.paragraph.lastChild, positionStart.paragraph.lastChild.getEndOffset());\n            }\n            var isInline = true;\n            if (positionStart.isAtParagraphStart && positionEnd.isAtParagraphEnd) {\n                isInline = false;\n            }\n            var isEmpty = positionStart.isAtSamePosition(positionEnd);\n            if (!isEmpty && this.isInvalidElementPresent(positionStart, positionEnd)) {\n                this.openContentDialog(false);\n                return;\n            }\n            var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl(isInline ? 'Inline' : 'Block');\n            var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl(isInline ? 'Inline' : 'Block');\n            var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties(isInline ? 'Inline' : 'Block');\n            properties.color = \"#00000000\";\n            isEmpty ? properties.hasPlaceHolderText = true : properties.hasPlaceHolderText = false;\n            properties.isTemporary = false;\n            properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? !lock : false;\n            properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? !lockContents : false;\n            properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n            properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n            properties.multiline = false;\n            properties.type = 'Text';\n            if (this.owner.isXmlMapCC) {\n                this.addXmlProperties(properties, this.owner.xPathString);\n            }\n            blockStartContentControl.contentControlProperties = properties;\n            blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n            blockStartContentControl.type = 0;\n            blockEndContentControl.type = 1;\n            if (this.editorHistory) {\n                this.initComplexHistory('InsertContentControl');\n            }\n            if (properties.hasPlaceHolderText) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n                    span.text = value;\n                    properties.hasPlaceHolderText = false;\n                }\n                else {\n                    var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                    locale.setLocale(this.owner.locale);\n                    span.text = locale.getConstant('Default Content Control Text');\n                }\n                span.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                this.insertElementsInternal(positionStart, [span]);\n                positionStart.offset + span.length;\n                this.insertElementsInternal(positionStart, [blockEndContentControl]);\n            }\n            else {\n                if (positionStart.currentWidget === positionEnd.currentWidget) {\n                    positionEnd.offset++;\n                }\n                var blockInfo = this.selection.getParagraphInfo(positionEnd);\n                var index = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                positionEnd = this.owner.selection.getTextPosBasedOnLogicalIndex(index);\n                this.insertElementsInternal(positionEnd, [blockEndContentControl]);\n            }\n            var inlineInfo = this.selection.start.currentWidget.getInline(this.selection.start.offset - 1, 0);\n            var inline = inlineInfo.element;\n            inline.contentControlProperties = properties;\n            this.updatePropertiesToBlock(blockStartContentControl, true);\n            if (properties.hasPlaceHolderText) {\n                this.selection.selectPlaceHolderText(blockStartContentControl);\n            }\n            else {\n                this.selection.selectContentInternal(blockStartContentControl);\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.viewer.updateScrollBars();\n        }\n    };\n    Editor.prototype.applyComboBox = function (type, items, value, title, tag, lock, lockContents) {\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) || contentControl.contentControlProperties.type === 'RichText') {\n            var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties('Inline');\n            properties.color = \"#00000000\";\n            properties.type = type;\n            properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n            properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n            this.selection.isEmpty ? properties.hasPlaceHolderText = true : properties.hasPlaceHolderText = false;\n            properties.isTemporary = false;\n            properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? lock : false;\n            properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? lockContents : false;\n            properties.multiline = false;\n            var list = [];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(items)) {\n                for (var i = 0; i < items.length; i++) {\n                    var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlListItems();\n                    span.displayText = items[i];\n                    span.value = items[i];\n                    list.push(span);\n                }\n            }\n            else {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlListItems();\n                var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                span.displayText = localeValue.getConstant('Choose an item');\n                span.value = localeValue.getConstant('Choose an item');\n                list.push(span);\n            }\n            properties.contentControlListItems = list;\n            //properties.appearance='Bounding Box';\n            properties.contentControlWidgetType = 'Inline';\n            if (this.owner.isXmlMapCC) {\n                this.addXmlProperties(properties, this.owner.xPathString);\n            }\n            blockStartContentControl.contentControlProperties = properties;\n            blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n            blockStartContentControl.type = 0;\n            blockEndContentControl.type = 1;\n            if (this.editorHistory) {\n                this.initComplexHistory('InsertContentControl');\n            }\n            var positionStart = this.selection.isForward ? this.selection.start.clone() : this.selection.end.clone();\n            var positionEnd = this.selection.isForward ? this.selection.end.clone() : this.selection.start.clone();\n            if (positionEnd.paragraph !== positionStart.paragraph) {\n                positionEnd = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                positionEnd.setPositionParagraph(positionStart.paragraph.lastChild, positionStart.paragraph.lastChild.getEndOffset());\n            }\n            if (properties.hasPlaceHolderText) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                span.text = localeValue.getConstant('Choose an item');\n                span.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                this.insertElementsInternal(positionStart, [span]);\n                positionStart.offset + span.length;\n                this.insertElementsInternal(positionStart, [blockEndContentControl]);\n            }\n            else {\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                positionEnd.offset++;\n                this.insertElementsInternal(positionEnd, [blockEndContentControl]);\n            }\n            var inlineInfo = this.selection.start.currentWidget.getInline(this.selection.start.offset - 1, 0);\n            var inline = inlineInfo.element;\n            inline.contentControlProperties = properties;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(items)) {\n                this.dropDownChange(blockStartContentControl, value);\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.viewer.updateScrollBars();\n        }\n    };\n    Editor.prototype.applyDatePickerContentControl = function (type, value, title, tag, lock, lockContents) {\n        this.dateValue = value;\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) || contentControl.contentControlProperties.type === 'RichText') {\n            var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            //blockStartContentControl.contentControlProperties.lockContents=true;\n            var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties('Inline');\n            properties.color = \"#00000000\";\n            this.selection.isEmpty ? properties.hasPlaceHolderText = true : properties.hasPlaceHolderText = false;\n            properties.isTemporary = false;\n            properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? !lock : false;\n            properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? !lockContents : false;\n            properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n            properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n            properties.multiline = false;\n            properties.type = type;\n            //properties.appearance='Bounding Box';\n            properties.contentControlWidgetType = 'Inline';\n            if (this.owner.isXmlMapCC) {\n                this.addXmlProperties(properties, this.owner.xPathString);\n            }\n            blockStartContentControl.contentControlProperties = properties;\n            blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n            blockStartContentControl.type = 0;\n            blockEndContentControl.type = 1;\n            if (this.editorHistory) {\n                this.initComplexHistory('InsertContentControl');\n            }\n            var positionStart = this.selection.isForward ? this.selection.start.clone() : this.selection.end.clone();\n            var positionEnd = this.selection.isForward ? this.selection.end.clone() : this.selection.start.clone();\n            if (positionEnd.paragraph !== positionStart.paragraph) {\n                positionEnd = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                positionEnd.setPositionParagraph(positionStart.paragraph.lastChild, positionStart.paragraph.lastChild.getEndOffset());\n            }\n            if (properties.hasPlaceHolderText) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                if (value) {\n                    span.text = value;\n                }\n                else {\n                    var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                    locale.setLocale(this.owner.locale);\n                    span.text = locale.getConstant('Default Date Picker');\n                }\n                span.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                this.insertElementsInternal(positionStart, [span]);\n                positionStart.offset + span.length;\n                this.insertElementsInternal(positionStart, [blockEndContentControl]);\n            }\n            else {\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                positionEnd.offset++;\n                this.insertElementsInternal(positionEnd, [blockEndContentControl]);\n            }\n            var inlineInfo = this.selection.start.currentWidget.getInline(this.selection.start.offset - 1, 0);\n            var inline = inlineInfo.element;\n            inline.contentControlProperties = properties;\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.viewer.updateScrollBars();\n        }\n    };\n    Editor.prototype.applyCheckBoxContentControl = function (type, value, inputValue, title, tag, lock, lockContents) {\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) || contentControl.contentControlProperties.type === 'RichText') {\n            var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            //blockStartContentControl.contentControlProperties.lockContents=true;\n            var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties('Inline');\n            properties.color = \"#00000000\";\n            properties.hasPlaceHolderText = false;\n            properties.isTemporary = false;\n            properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? lock : false;\n            properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? lockContents : false;\n            properties.multiline = false;\n            properties.type = type;\n            properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n            properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inputValue)) {\n                properties.isChecked = inputValue;\n            }\n            else {\n                properties.isChecked = false;\n            }\n            properties.uncheckedState = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxState();\n            properties.uncheckedState.font = this.selection.characterFormat.fontFamily;\n            properties.uncheckedState.value = String.fromCharCode(9744);\n            properties.checkedState = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxState();\n            properties.checkedState.font = this.selection.characterFormat.fontFamily;\n            properties.checkedState.value = String.fromCharCode(9746);\n            properties.contentControlWidgetType = 'Inline';\n            if (this.owner.isXmlMapCC) {\n                this.addXmlProperties(properties, this.owner.xPathString);\n            }\n            blockStartContentControl.contentControlProperties = properties;\n            blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n            blockStartContentControl.type = 0;\n            blockEndContentControl.type = 1;\n            if (this.editorHistory) {\n                this.initComplexHistory('InsertContentControl');\n            }\n            var positionStart = this.selection.isForward ? this.selection.start.clone() : this.selection.end.clone();\n            var positionEnd = this.selection.isForward ? this.selection.end.clone() : this.selection.start.clone();\n            if (positionEnd.paragraph !== positionStart.paragraph) {\n                positionEnd = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                positionEnd.setPositionParagraph(positionStart.paragraph.lastChild, positionStart.paragraph.lastChild.getEndOffset());\n            }\n            if (this.selection) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                span.text = value;\n                span.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                this.insertElementsInternal(positionStart, [span]);\n                positionStart.offset + span.length;\n                this.insertElementsInternal(positionStart, [blockEndContentControl]);\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.viewer.updateScrollBars();\n        }\n    };\n    /**\n    * Apply the content Control properties to the picture content Control\n    * @param {type} refers the type of Content control.\n    */\n    Editor.prototype.applyPictureContentControl = function (type, value, title, tag, lock, lockContents) {\n        var contentControl = this.selection.currentContentControl;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) || contentControl.contentControlProperties.type === 'RichText') {\n            var blockStartContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            var blockEndContentControl = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl('Inline');\n            //blockStartContentControl.contentControlProperties.lockContents=true;\n            var properties = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlProperties('Inline');\n            properties.color = \"#00000000\";\n            properties.hasPlaceHolderText = false;\n            properties.isTemporary = false;\n            properties.lockContentControl = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lock) ? lock : false;\n            properties.lockContents = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lockContents) ? lockContents : false;\n            properties.multiline = false;\n            properties.type = type;\n            properties.tag = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tag) ? tag : undefined;\n            properties.title = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(title) ? title : undefined;\n            //properties.appearance='Bounding Box';\n            properties.contentControlWidgetType = 'Inline';\n            if (this.owner.isXmlMapCC) {\n                this.addXmlProperties(properties, this.owner.xPathString);\n            }\n            blockStartContentControl.contentControlProperties = properties;\n            blockEndContentControl.contentControlProperties = blockStartContentControl.contentControlProperties;\n            blockStartContentControl.type = 0;\n            blockEndContentControl.type = 1;\n            if (this.editorHistory) {\n                this.initComplexHistory('InsertContentControl');\n            }\n            var positionStart = this.selection.start.clone();\n            var positionEnd = this.selection.end.clone();\n            if (!this.selection.isForward) {\n                blockStartContentControl.type = 1;\n                blockEndContentControl.type = 0;\n            }\n            if (this.selection.start.paragraph == this.selection.end.paragraph) {\n                this.insertElementsInternal(positionStart, [blockStartContentControl]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n                    this.insertImageAsync(value);\n                }\n                this.insertElementsInternal(positionEnd, [blockEndContentControl]);\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.viewer.updateScrollBars();\n        }\n    };\n    /**\n      * To get Prefix Mapping for XML Properties.\n      * @param {ContentControlType} contentcontroltype.\n      * @param {string} xmlString.\n      * @private\n      * @returns {void}\n      */\n    Editor.prototype.getPrefixMapping = function (xmlString) {\n        // Parse the XML string\n        var parser = new DOMParser();\n        var xmlDoc = parser.parseFromString(xmlString, \"application/xml\");\n        // Access the namespace URI to get prefixMappings\n        this.documentHelper.owner.prefixMappings = xmlDoc.documentElement.namespaceURI;\n    };\n    /**\n    * add xml properties to the content control properties\n    * @param {ContentControlProperties} properties.\n    * @param {string} xPath.\n    * @private\n    */\n    Editor.prototype.addXmlProperties = function (properties, xPath) {\n        properties.xmlMapping = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.XmlMapping();\n        properties.xmlMapping.isMapped = true;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.owner.prefixMappings)) {\n            properties.xmlMapping.prefixMapping = this.documentHelper.owner.prefixMappings;\n        }\n        else {\n            properties.xmlMapping.prefixMapping = \" \";\n        }\n        properties.xmlMapping.xPath = xPath;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.guid)) {\n            this.guid = this.createGuid();\n        }\n        properties.xmlMapping.storeItemId = \"{\" + this.guid + \"}\";\n        this.documentHelper.customXmlData.add(properties.xmlMapping.storeItemId, this.xmlStringValue);\n    };\n    /**\n    * To Get XML Store id\n    * @returns {string} store item Id.\n    */\n    Editor.prototype.createGuid = function () {\n        var dateTime = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {\n            var randNo = (dateTime + Math.random() * 16) % 16 | 0;\n            dateTime = Math.floor(dateTime / 16);\n            return (char === 'x' ? randNo : (randNo & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    };\n    /**\n    * To Get data from xml string and path\n    * @param {ContentControlInfo} An object containing the updated details for the content control.\n    * @returns {ContentControlInfo} The updated content control information after applying the changes, or `undefined` if no matching content control is found.\n    */\n    Editor.prototype.mapXmlStringPath = function (controlInfo) {\n        this.getPrefixMapping(controlInfo.xmlString);\n        var parsedXml = this.parseXml(controlInfo.xmlString);\n        var arr = this.objectToArray(parsedXml);\n        this.setXmlData(parsedXml, arr);\n        var xmlValue = this.xmlData;\n        // Split the string by the '/' character and get the last element\n        var lastString = controlInfo.xmlPath.split('/').pop();\n        // Split the string by the '/' character\n        var segments = controlInfo.xmlPath.split('/');\n        // Get the segment before the last one\n        var beforeLastString = segments[segments.length - 2];\n        var dataXMLValue = this.getXmlValue(beforeLastString, lastString);\n        this.owner.isXmlMapCC = true;\n        controlInfo.xmlPath = this.transformString(controlInfo.xmlPath);\n        this.owner.xPathString = \"/\" + controlInfo.xmlPath;\n        controlInfo.value = dataXMLValue;\n        return controlInfo;\n    };\n    /**\n     * Sets the existing content control within the editor using the provided information.\n     * The content control is identified by its unique combination of `title` and `tag`.\n     * @param {ContentControlInfo} An object containing the updated details for the content control.\n     * @returns {ContentControlInfo|undefined} The updated content control information after applying the changes, or `undefined` if no matching content control is found.\n     */\n    Editor.prototype.setContentControlInfo = function (info) {\n        var controlInfo = this.documentHelper.selection.getContentControlInfo();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo)) {\n            controlInfo.xmlString = info.xmlString;\n            controlInfo.xmlPath = info.xmlPath;\n            controlInfo.title = info.title;\n            controlInfo.tag = info.tag;\n            controlInfo.value = info.value;\n            controlInfo.canDelete = info.canDelete;\n            controlInfo.canEdit = info.canEdit;\n            //To change the normal content control to xml mapped content control.\n            var contantControlCheck = this.selection.currentContentControl;\n            var contentControlImage = this.documentHelper.owner.getImageContentControl();\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contantControlCheck) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControlImage)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.xmlString) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.xmlString)) {\n                    controlInfo = this.mapXmlStringPath(controlInfo);\n                    this.documentHelper.owner.selection.selectContentInternal(contantControlCheck);\n                    this.insertText(controlInfo.value);\n                    var propertiesInfo = this.getContentControl();\n                    this.addXmlProperties(propertiesInfo.contentControlProperties, this.owner.xPathString);\n                    this.owner.isXmlMapCC = false;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.tag) && controlInfo.tag !== contantControlCheck.contentControlProperties.tag) {\n                    contantControlCheck.contentControlProperties.tag = controlInfo.tag;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.title) && controlInfo.title !== contantControlCheck.contentControlProperties.title) {\n                    contantControlCheck.contentControlProperties.title = controlInfo.title;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.value) && contantControlCheck.nextElement.text !== controlInfo.value && !controlInfo.canEdit) {\n                    this.insertText(controlInfo.value);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.canDelete) && controlInfo.canDelete !== contantControlCheck.contentControlProperties.lockContentControl) {\n                    contantControlCheck.contentControlProperties.lockContentControl = controlInfo.canDelete;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(controlInfo.canEdit) && controlInfo.canEdit !== contantControlCheck.contentControlProperties.lockContents) {\n                    contantControlCheck.contentControlProperties.lockContents = controlInfo.canEdit;\n                }\n            }\n            return controlInfo;\n        }\n        return undefined;\n    };\n    /**\n    * To get xpath format.\n    * @param {string} inputxpath.\n    * @returns {string}\n    */\n    Editor.prototype.transformString = function (inputxpath) {\n        // Split the string at each '/'\n        var parts = inputxpath.split('/');\n        // Join the parts with '[1]/' and append '[1]' to the last part\n        return parts.map(function (part) { return part + \"[1]\"; }).join('/');\n    };\n    /**\n    * To get Xml Value.\n    * @param {string} beforeLastString.\n    * @param {string} lastString.\n    * @returns {string}\n    */\n    Editor.prototype.getXmlValue = function (beforeLastString, lastString) {\n        var parentId;\n        var currentId;\n        var dataXMLValue;\n        for (var i = 0; i < this.xmlData.length; i++) {\n            if (this.xmlData[i].displayText == beforeLastString) {\n                parentId = this.xmlData[i].id;\n            }\n            parentId = Number(parentId);\n            if (!isNaN(parentId) && this.xmlData[i].displayText == lastString && this.xmlData[parentId - 1].displayText == beforeLastString) {\n                currentId = this.xmlData[i].id;\n                currentId = Number(currentId);\n                dataXMLValue = this.xmlData[i].displayValue;\n                dataXMLValue = dataXMLValue.toString();\n                break;\n            }\n        }\n        return dataXMLValue;\n    };\n    /**\n    * To convert the object into Array.\n    * @param {any} obj.\n    * @private\n    * @returns {Array}\n    */\n    Editor.prototype.objectToArray = function (obj) {\n        return Object.keys(obj).map(function (key, index) { return ({\n            index: String(index + 1),\n            data: obj[key]\n        }); });\n    };\n    /**\n    * To Parse the XML string into an XMLDocument To Convert the XMLDocument to JSON.\n    * @param {string} xmlString.\n    * @private\n    * @returns {void}\n    */\n    Editor.prototype.parseXml = function (xmlString) {\n        this.xmlStringValue = xmlString;\n        try {\n            // Parse the XML string into an XMLDocument\n            var parser = new DOMParser();\n            var xmlDoc = parser.parseFromString(xmlString, 'text/xml');\n            // Convert the XMLDocument to JSON\n            var jsonData = this.xmlToJson(xmlDoc.documentElement);\n            this.xmlTitle = xmlDoc.documentElement.nodeName;\n            // Output the JSON data\n            //console.log(jsonData);\n            return jsonData;\n        }\n        catch (error) {\n            console.error('Error parsing XML string:', error);\n            return null;\n        }\n    };\n    /**\n    * To Convert the XMLDocument to JSON.\n    * @param {Element} xml.\n    * @private\n    * @returns {any}\n    */\n    Editor.prototype.xmlToJson = function (xml) {\n        // Create the object that will hold the JSON representation\n        var obj = {};\n        // If the XML node has child nodes, process them\n        if (xml.hasChildNodes()) {\n            // Loop through each child node\n            for (var i = 0; i < xml.childNodes.length; i++) {\n                var item = xml.childNodes[i];\n                // If the node is an element, recursively process it\n                if (item.nodeType === 1) {\n                    // Check if this node has siblings with the same nodeName to decide whether it should be an array or object\n                    if (item.nextSibling && item.nextSibling.nodeName === item.nodeName) {\n                        if (!obj[item.nodeName]) {\n                            obj[item.nodeName] = [];\n                        }\n                        obj[item.nodeName].push(this.xmlToJson(item)); // Push into an array\n                    }\n                    else {\n                        // If there's only one node with this name, directly assign it\n                        obj[item.nodeName] = this.xmlToJson(item);\n                    }\n                }\n                else if (item.nodeType === 3) { // Node.TEXT_NODE\n                    // Handle text content\n                    var text = item.textContent.trim();\n                    if (text) {\n                        obj = text; // Assign text directly to the object\n                    }\n                }\n            }\n        }\n        return obj;\n    };\n    /**\n    * To set the updated xml json into xml Data for treeview.\n    * @param {any} parsedXmlObj.\n    * @param {any} parsedXmlArr.\n    * @private\n    * @returns {void}\n    */\n    Editor.prototype.setXmlData = function (parsedXmlObj, parsedXmlArr) {\n        var index = 2;\n        this.xmlData = [];\n        this.xmlData.push({\n            id: 1,\n            displayText: this.xmlTitle,\n            hasChild: true,\n            expanded: true,\n        });\n        var i = 0;\n        for (var key in parsedXmlObj) {\n            var open_1 = true;\n            for (i = i; i < parsedXmlArr.length; i++) {\n                var arrayDatahasChild = parsedXmlArr[i].data;\n                if (arrayDatahasChild instanceof Object && Object.keys(arrayDatahasChild).length > 0) {\n                    open_1 = true;\n                }\n                else {\n                    open_1 = false;\n                }\n                i = i + 1;\n                break;\n            }\n            this.xmlData.push({\n                id: index++,\n                displayText: key,\n                displayValue: parsedXmlObj[key],\n                pid: '1',\n                hasChild: open_1,\n                expanded: open_1,\n            });\n            var dataAsObj = parsedXmlObj[key];\n            var j = 0;\n            for (j; j < parsedXmlArr.length; j++) {\n                var arrayData = parsedXmlArr[j].data;\n                var level = (index - 1).toString();\n                if (arrayData instanceof Object) {\n                    if (arrayData == dataAsObj) {\n                        for (var key_1 in arrayData) {\n                            this.xmlData.push({\n                                id: index++,\n                                displayText: key_1,\n                                displayValue: dataAsObj[key_1],\n                                pid: level,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.dictionaryObject[this.dictionaryObjectIndexIncrement++] = {\n            ID: '(no namespace)_' + this.dictionaryObjcetIDIncreament,\n            Data: this.xmlData\n        };\n        this.dictionaryObjcetIDIncreament++;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.dropDownChange = function (contentControl, value) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl)) {\n            this.documentHelper.selection.selectContentInternal(contentControl);\n            this.insertTextInternal(value, true);\n            if (contentControl.contentControlProperties.isTemporary) {\n                this.removeContentControl();\n            }\n        }\n        return;\n    };\n    Editor.prototype.updateXmlMappedContentControl = function () {\n        if (this.isXmlMapped) {\n            var startInlineEle = this.selection.currentContentControl;\n            if (startInlineEle && startInlineEle.contentControlProperties) {\n                this.updateCustomXml(startInlineEle.contentControlProperties.xmlMapping.storeItemId, startInlineEle.contentControlProperties.xmlMapping.xPath, this.getResultContentControlText(startInlineEle));\n            }\n        }\n    };\n    Editor.prototype.updateCustomXml = function (itemId, xPath, text) {\n        if (this.documentHelper.customXmlData.containsKey(itemId) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(xPath)) {\n            var xml = this.documentHelper.customXmlData.get(itemId);\n            var parser = new DOMParser();\n            var xmlDoc = parser.parseFromString(xml, 'text/xml');\n            var lastText = xPath.substring(xPath.lastIndexOf('/') + 1);\n            lastText = lastText.split('[')[0];\n            lastText = lastText.substring(lastText.lastIndexOf(':') + 1);\n            lastText = lastText.substring(lastText.lastIndexOf('@') + 1);\n            var htmlCollec = xmlDoc.getElementsByTagName(lastText);\n            if (htmlCollec.length > 0) {\n                htmlCollec[0].childNodes[0].nodeValue = text;\n            }\n            else if (xmlDoc.documentElement.attributes.length > 0 && xmlDoc.documentElement.attributes.getNamedItem(lastText) !== null) {\n                xmlDoc.documentElement.attributes.getNamedItem(lastText).value = text;\n            }\n            else {\n                return;\n            }\n            var newXml = new XMLSerializer();\n            var xmlString = newXml.serializeToString(xmlDoc);\n            this.documentHelper.customXmlData.set(itemId, xmlString);\n        }\n    };\n    /**\n     * Inserts the specified text at cursor position\n     * @param {string} text Specify the text to insert.\n     */\n    Editor.prototype.insertText = function (text) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(text) || text === ''\n            || this.owner.isReadOnly\n            || this.documentHelper.protectionType === 'ReadOnly' && !this.selection.isSelectionInEditRegion()\n            || this.documentHelper.protectionType === 'CommentsOnly' && this.owner.isReadOnly) {\n            return;\n        }\n        this.isInsertingText = true;\n        this.insertTextInternal(text, false);\n        this.isInsertingText = false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    /* eslint-disable  */\n    Editor.prototype.insertTextInternal = function (text, isReplace, revisionType, allowLayout, isSplitRevision) {\n        if (text.indexOf('\\r') >= 0 || text.indexOf('\\n') >= 0) {\n            if (text === '\\r' || text === '\\n' || text === '\\r\\n') {\n                this.onEnter();\n            }\n            else {\n                this.isInsertText = true;\n                this.pasteContents(text);\n                this.isInsertText = false;\n            }\n            return;\n        }\n        if (this.documentHelper.protectionType === 'FormFieldsOnly' && this.selection.isInlineFormFillMode()) {\n            var inline = this.selection.currentFormField;\n            if (!inline.formFieldData.enabled) {\n                return;\n            }\n            var resultText = this.getFieldResultText(inline);\n            var rex = new RegExp(this.owner.documentHelper.textHelper.getEnSpaceCharacter(), 'gi');\n            if (resultText.length > 0 && resultText.replace(rex, '') === '') {\n                resultText = '';\n                this.selection.selectFieldInternal(inline);\n            }\n            var maxLength = inline.formFieldData.maxLength;\n            if (maxLength !== 0 && resultText.length >= maxLength) {\n                return;\n            }\n        }\n        if (isReplace) {\n            this.documentHelper.layout.isReplaceAll = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(allowLayout) ? !allowLayout : false;\n        }\n        var contentControl = this.documentHelper.owner.selection.currentContentControl;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && contentControl.contentControlProperties.hasPlaceHolderText) {\n            this.documentHelper.selection.selectContentInternal(contentControl);\n            contentControl.contentControlProperties.hasPlaceHolderText = false;\n        }\n        var selection = this.documentHelper.selection;\n        var insertPosition;\n        var isRemoved = true;\n        var isInsertPositionUpdated = false;\n        revisionType = (this.owner.enableTrackChanges && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType)) ? 'Insertion' : revisionType;\n        var commentStarts = this.checkAndRemoveComments(isReplace);\n        this.isListTextSelected();\n        if (this.documentHelper.isBookmarkInserted && !selection.isEmpty && selection.bookmarks.length > 0) {\n            this.extendSelectionToBookmarkStart();\n        }\n        var initComplexHistory = false;\n        if (selection.isEmpty) {\n            var isAtParagraphStart = selection.start.isAtParagraphStart;\n            var isAtParagraphEnd = selection.end.isAtParagraphEnd;\n            if (isAtParagraphStart || isAtParagraphEnd) {\n                var inlineObj = selection.start.currentWidget.getInline(selection.start.offset, 0);\n                var element = inlineObj.element;\n                if (element && element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && element.contentControlWidgetType === 'Block' && element.reference &&\n                    element.paragraph !== element.reference.paragraph) {\n                    this.initComplexHistory('Insert');\n                    initComplexHistory = true;\n                    this.onEnter();\n                    if (isAtParagraphStart) {\n                        var previousParagraph = element.paragraph.previousWidget;\n                        if (previousParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && previousParagraph.isEmpty()) {\n                            selection.moveToPreviousParagraph();\n                        }\n                    }\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType) || revisionType === 'Insertion') {\n            this.initHistory('Insert');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = text;\n                if (this.documentHelper.protectionType === 'FormFieldsOnly') {\n                    var field = this.documentHelper.selection.getCurrentFormField();\n                    if (field && field instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && field.formFieldData && field.formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.DropDownFormField) {\n                        this.editorHistory.currentBaseHistoryInfo.fieldBegin = field;\n                        this.editorHistory.currentBaseHistoryInfo.dropDownIndex = field.formFieldData.selectedIndex;\n                    }\n                }\n            }\n        }\n        var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n        var paraFormat = paragraphInfo.paragraph.paragraphFormat;\n        selection.editPosition = selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n        var bidi = selection.start.paragraph.paragraphFormat.bidi;\n        if ((!selection.isEmpty && !selection.isImageSelected) ||\n            this.documentHelper.isListTextSelected && selection.contextType === 'List') {\n            selection.isSkipLayouting = true;\n            selection.skipFormatRetrieval = true;\n            var endPosition = undefined;\n            var endParagraphInfo = undefined;\n            var endOffset = 0;\n            var paragraphLength = 0;\n            if (this.owner.enableTrackChanges) {\n                if (!this.selection.start.isExistBefore(this.selection.end)) {\n                    endParagraphInfo = this.selection.getParagraphInfo(selection.start);\n                    endPosition = this.selection.start.clone();\n                }\n                else {\n                    endParagraphInfo = this.selection.getParagraphInfo(selection.end);\n                    endPosition = this.selection.end.clone();\n                }\n                paragraphLength = endParagraphInfo.paragraph.getLength();\n                endOffset = endParagraphInfo.offset - 1 === paragraphLength ? endParagraphInfo.offset - 1 : endParagraphInfo.offset;\n                this.skipReplace = true;\n            }\n            isRemoved = this.removeSelectedContents(selection);\n            if (isRemoved) {\n                this.updateInsertPosition();\n                isInsertPositionUpdated = true;\n            }\n            this.skipReplace = false;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endPosition) && this.owner.searchModule && this.owner.searchModule.isRepalceTracking) {\n                this.owner.searchModule.isRepalceTracking = false;\n                this.selection.start.setPositionInternal(this.selection.start);\n                this.selection.end.setPositionInternal(endPosition);\n            }\n            else if (endOffset > 0 && endOffset <= paragraphLength) {\n                var updatedParagraphLength = endParagraphInfo.paragraph.getLength();\n                if (paragraphLength !== updatedParagraphLength) {\n                    endOffset -= paragraphLength - updatedParagraphLength;\n                }\n                this.setPositionParagraph(endParagraphInfo.paragraph, endOffset, true);\n            }\n            selection.skipFormatRetrieval = false;\n            selection.isSkipLayouting = false;\n        }\n        else if (selection.isEmpty && !this.documentHelper.isListTextSelected && !isReplace) {\n            this.documentHelper.isTextInput = true;\n        }\n        paragraphInfo = this.selection.getParagraphInfo(selection.start);\n        paragraphInfo.paragraph.paragraphFormat.copyFormat(paraFormat);\n        var isSpecialChars = this.documentHelper.textHelper.containsSpecialCharAlone(text);\n        if (isRemoved) {\n            selection.owner.isShiftingEnabled = true;\n            if (!isInsertPositionUpdated) {\n                this.updateInsertPosition();\n            }\n            insertPosition = selection.start;\n            if (insertPosition.paragraph.isEmpty()) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                var insertFormat = this.copyInsertFormat(insertPosition.paragraph.characterFormat, true);\n                span.characterFormat.copyFormat(insertFormat);\n                span.text = text;\n                var isBidi = this.documentHelper.textHelper.getRtlLanguage(text).isRtl || this.selection.characterFormat.bidi;\n                span.characterFormat.bidi = isBidi;\n                insertFormat.bidi = isBidi;\n                span.isRightToLeft = isBidi;\n                span.line = insertPosition.paragraph.childWidgets[0];\n                span.margin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.Margin(0, 0, 0, 0);\n                span.line.children.push(span);\n                this.setCharFormatForCollaborativeEditing(span.characterFormat);\n                if (this.owner.enableTrackChanges) {\n                    if (span.paragraph.characterFormat.revisions.length > 0) {\n                        var matchedRevisions = this.getMatchedRevisionsToCombine(span.paragraph.characterFormat.revisions, revisionType);\n                        if (matchedRevisions.length > 0) {\n                            this.mapMatchedRevisions(matchedRevisions, span.paragraph.characterFormat, span, true);\n                        }\n                    }\n                    if (!this.checkToCombineRevisionWithPrevPara(span, revisionType) && span.revisions.length === 0) {\n                        this.insertRevision(span, revisionType);\n                    }\n                }\n                if ((insertPosition.paragraph.paragraphFormat.textAlignment === 'Center'\n                    || insertPosition.paragraph.paragraphFormat.textAlignment === 'Right'\n                    || (insertPosition.paragraph.paragraphFormat.textAlignment === 'Justify'\n                        && insertPosition.paragraph.paragraphFormat.bidi))\n                    && insertPosition.paragraph.paragraphFormat.listFormat.listId === -1) {\n                    insertPosition.paragraph.x = insertPosition.paragraph.clientX;\n                    insertPosition.paragraph.clientX = undefined;\n                    if (insertPosition.paragraph.hasOwnProperty('absoluteXPosition')) {\n                        delete insertPosition.paragraph['absoluteXPosition'];\n                    }\n                }\n                if (span instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && span.text.length > 90) {\n                    // Here, the text is split based on the maximum character length of 90.\n                    _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.splitWordByMaxLength(span, span.line);\n                }\n                this.documentHelper.layout.reLayoutParagraph(insertPosition.paragraph, 0, 0);\n            }\n            else {\n                var indexInInline = 0;\n                var inlineObj = insertPosition.currentWidget.getInline(insertPosition.offset, indexInInline, bidi, (isReplace) ? false : true, this.documentHelper.owner.isSpellCheck);\n                var inline = inlineObj.element;\n                indexInInline = inlineObj.index;\n                inline.ischangeDetected = true;\n                if (!inline.paragraph.isInsideTable && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.bookmarkType === 1\n                    && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.properties) && inline.properties.hasOwnProperty('isAfterParagraphMark')) {\n                    delete inline.properties['isAfterParagraphMark'];\n                }\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && text !== ' ' && this.documentHelper.owner.isSpellCheck) {\n                    this.owner.spellCheckerModule.removeErrorsFromCollection({ 'element': inline, 'text': inline.text });\n                    if (!isReplace) {\n                        inline.ignoreOnceItems = [];\n                    }\n                }\n                if (inline.canTrigger && inline.text.length <= 1) {\n                    inline.canTrigger = false;\n                }\n                // Todo: compare selection format\n                var insertFormat = this.copyInsertFormat(inline.characterFormat, true);\n                if (insertFormat.hidden) {\n                    insertFormat.hidden = false;\n                }\n                var isBidi = this.documentHelper.textHelper.getRtlLanguage(text).isRtl || this.selection.characterFormat.bidi;\n                var insertLangId = this.documentHelper.textHelper.getRtlLanguage(text).id;\n                var inlineLangId = 0;\n                var isRtl = false;\n                var isInlineContainsSpecChar = false;\n                var isTextContainsSpecChar = false;\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                    inlineLangId = this.documentHelper.textHelper.getRtlLanguage(inline.text).id;\n                    isRtl = this.documentHelper.textHelper.getRtlLanguage(inline.text).isRtl;\n                    isTextContainsSpecChar = this.documentHelper.textHelper.containsSpecialCharAlone(text);\n                }\n                if ((!isBidi && inline.characterFormat.bidi && (inlineLangId !== 0 || (isTextContainsSpecChar && isRtl)))\n                    || (text === ' ' && this.selection.characterFormat.bidi)) {\n                    isBidi = true;\n                }\n                if (isBidi || !this.documentHelper.owner.isSpellCheck) {\n                    insertFormat.bidi = isBidi;\n                }\n                this.setCharFormatForCollaborativeEditing(insertFormat);\n                if ((!this.documentHelper.owner.isSpellCheck || (text !== ' ' && inline.text !== ' ')) && !(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) && insertFormat.isSameFormat(inline.characterFormat) && this.canInsertRevision(inline, revisionType)\n                    || (text.trim() === '' && !isBidi && inline.characterFormat.bidi) || isRtl && insertFormat.isSameFormat(inline.characterFormat) && isSpecialChars) {\n                    this.insertTextInline(inline, selection, text, indexInInline);\n                    this.setCharFormatForCollaborativeEditing(inline.characterFormat);\n                }\n                else {\n                    var tempSpan = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                    tempSpan.text = text;\n                    tempSpan.line = inline.line;\n                    tempSpan.isRightToLeft = isRtl;\n                    tempSpan.characterFormat.copyFormat(insertFormat);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.contentControlProperties) {\n                        tempSpan.contentControlProperties = inline.contentControlProperties;\n                    }\n                    this.setCharFormatForCollaborativeEditing(tempSpan.characterFormat);\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        tempSpan.characterFormat.baselineAlignment = 'Normal';\n                    }\n                    var isRevisionCombined = false;\n                    var insertIndex = inline.indexInOwner;\n                    var prevRevisionCount = tempSpan.revisions.length;\n                    if (indexInInline === inline.length && !isSplitRevision) {\n                        var index = -1;\n                        index = insertIndex + 1;\n                        if (this.owner.enableTrackChanges && !(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n                            isRevisionCombined = this.checkToMapRevisionWithInlineText(inline, indexInInline, tempSpan, isBidi, revisionType);\n                            if (!isRevisionCombined && tempSpan.revisions.length === prevRevisionCount) {\n                                if (inline.nextNode != undefined && inline.nextNode.revisions.length == 1) {\n                                    isRevisionCombined = this.checkToMapRevisionWithNextNode(inline.nextNode, tempSpan, isBidi, revisionType);\n                                }\n                                else if (inline.paragraph.characterFormat.revisions.length == 1 && inline.paragraph.characterFormat.revisions[0].revisionType == 'Deletion') {\n                                    isRevisionCombined = this.checkToMapRevisionWithNextNode(inline.nextNode, tempSpan, isBidi, revisionType, inline.paragraph);\n                                }\n                                else {\n                                    isRevisionCombined = this.checkToMapRevisionWithNextNode(inline.nextNode, tempSpan, isBidi, revisionType);\n                                }\n                            }\n                        }\n                        if (!isRevisionCombined) {\n                            inline.line.children.splice(index, 0, tempSpan);\n                            this.checkToCombineRevisionsinBlocks(tempSpan, prevRevisionCount === tempSpan.revisions.length, true, revisionType);\n                        }\n                    }\n                    else if (indexInInline === 0 && !isSplitRevision) {\n                        if (this.owner.enableTrackChanges) {\n                            isRevisionCombined = this.checkToMapRevisionWithInlineText(inline, indexInInline, tempSpan, isBidi, revisionType);\n                            if (!isRevisionCombined && tempSpan.revisions.length === 0) {\n                                this.checkToMapRevisionWithPreviousNode(inline.previousNode, tempSpan, isBidi, revisionType);\n                            }\n                        }\n                        if (!isRevisionCombined) {\n                            inline.line.children.splice(insertIndex, 0, tempSpan);\n                            this.checkToCombineRevisionsinBlocks(tempSpan, prevRevisionCount === tempSpan.revisions.length, true, revisionType);\n                        }\n                    }\n                    else {\n                        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                            var splittedSpan = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                            splittedSpan.line = inline.line;\n                            splittedSpan.characterFormat.copyFormat(inline.characterFormat);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.contentControlProperties) {\n                                splittedSpan.contentControlProperties = inline.contentControlProperties;\n                            }\n                            // Commented because character format is not syncing correctly.\n                            // this.setCharFormatForCollaborativeEditing(splittedSpan.characterFormat);\n                            splittedSpan.text = inline.text.substring(indexInInline);\n                            if (!this.owner.enableTrackChanges && !this.selection.isInField) {\n                                this.updateRevisionForSpittedTextElement(inline, splittedSpan);\n                            }\n                            inline.text = inline.text.slice(0, indexInInline);\n                            inline.isWidthUpdated = false;\n                            if (this.owner.enableTrackChanges) {\n                                isRevisionCombined = this.checkToMapRevisionWithInlineText(inline, indexInInline, tempSpan, isBidi, revisionType);\n                                if (isRevisionCombined || tempSpan.revisions.length > prevRevisionCount) {\n                                    this.copyElementRevision(inline, splittedSpan, true);\n                                }\n                                else if (tempSpan.revisions.length === prevRevisionCount) {\n                                    this.updateRevisionForSpittedTextElement(inline, splittedSpan);\n                                    this.insertRevision(tempSpan, revisionType);\n                                }\n                            }\n                            else if (this.selection.isInField) {\n                                this.copyElementRevision(inline, splittedSpan, false);\n                                this.updateElementInFieldRevision(inline, tempSpan, inline.revisions, true);\n                            }\n                            if (this.owner.isSpellCheck) {\n                                this.owner.spellCheckerModule.updateSplittedElementError(inline, splittedSpan);\n                            }\n                            if (splittedSpan.text !== '') {\n                                inline.line.children.splice(insertIndex + 1, 0, splittedSpan);\n                            }\n                        }\n                        if (!isRevisionCombined) {\n                            inline.line.children.splice(insertIndex + 1, 0, tempSpan);\n                        }\n                    }\n                    if (tempSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && tempSpan.text.length > 90) {\n                        // Here, the text is split based on the maximum character length of 90.\n                        _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.splitWordByMaxLength(tempSpan, tempSpan.line);\n                    }\n                    if (!(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType) && revisionType === 'Deletion' && !insertPosition.paragraph.isLayouted)) {\n                        this.documentHelper.layout.reLayoutParagraph(insertPosition.paragraph, inline.line.indexInOwner, 0);\n                    }\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && inline.line.children.indexOf(inline) !== -1 && inline.text === '') {\n                        inline.line.children.splice(inline.line.children.indexOf(inline), 1);\n                    }\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && contentControl.contentControlProperties.isTemporary) {\n                this.removeContentControl();\n            }\n            this.documentHelper.layout.allowLayout = true;\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset + text.length, true);\n            this.updateEndPosition();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)\n                && (this.editorHistory.currentHistoryInfo.action === 'ListSelect') &&\n                this.documentHelper.isListTextSelected) {\n                this.editorHistory.updateHistory();\n                this.editorHistory.updateComplexHistory();\n            }\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType) || revisionType === 'Insertion') && !this.isFieldOperation) {\n                this.reLayout(selection);\n            }\n            if (initComplexHistory && this.editorHistory) {\n                this.editorHistory.updateComplexHistory();\n            }\n            this.documentHelper.isTextInput = false;\n        }\n        this.updateXmlMappedContentControl();\n        if (!isReplace && isRemoved && (text === ' ' || text === '\\t' || text === '\\v')) {\n            var isList = false;\n            if (!(text === '\\v') && !this.isRemoteAction) {\n                isList = this.checkAndConvertList(selection, text === '\\t');\n            }\n            if (!isList) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.getHyperlinkField())) {\n                    return;\n                }\n                //Checks if the previous text is URL, then it is auto formatted to hyperlink.\n                this.checkAndConvertToHyperlink(selection, false);\n            }\n        }\n        this.updateHistoryForComments(commentStarts);\n    };\n    Editor.prototype.extendSelectionToBookmarkStart = function () {\n        if (this.documentHelper.bookmarks.length > 0) {\n            var startPos = this.selection.start;\n            var endPos = this.selection.end;\n            if (!this.selection.isForward) {\n                startPos = this.selection.end;\n                endPos = this.selection.start;\n            }\n            var bookMark = void 0;\n            var selectionBookmark = this.selection.bookmarks;\n            for (var i = 0; i < selectionBookmark.length; i++) {\n                bookMark = this.documentHelper.bookmarks.get(selectionBookmark[i]);\n                if (this.selection.isElementInSelection(bookMark.reference, false) &&\n                    !this.selection.isElementInSelection(bookMark, true)) {\n                    var bookmarkPargraph = bookMark.line.paragraph;\n                    var selectionParagraphInfo = this.selection.getParagraphInfo(startPos);\n                    if (bookmarkPargraph.equals(selectionParagraphInfo.paragraph)) {\n                        var elementOffset = bookMark.line.getOffset(bookMark, bookMark.bookmarkType);\n                        if (bookMark.line === startPos.currentWidget && selectionParagraphInfo.offset === elementOffset + 1) {\n                            startPos.offset--;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.updateElementInFieldRevision = function (revisionElement, elementToInclude, revisions, isEnd) {\n        for (var i = 0; i < revisions.length; i++) {\n            var currentRevision = revisions[i];\n            var rangeIndex = currentRevision.range.indexOf(revisionElement);\n            currentRevision.range.splice(isEnd ? rangeIndex + 1 : rangeIndex, 0, elementToInclude);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        }\n    };\n    /**\n     * Retrieves the resultant field text from the specified field element box.\n     * @param item Specify the field element box to retrieve field text.\n     * @returns Returns the resultant field text.\n     */\n    Editor.prototype.retrieveFieldResultantText = function (item) {\n        var resultantText = '';\n        if (item.fieldType === 1) {\n            var textElement = item.previousElement;\n            // Get the last child of previous line if the field code presents at the start of the current line.\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement) && item.indexInOwner === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item.line) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item.line.previousLine) && item.line.previousLine.children[item.line.previousLine.children.length - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                textElement = item.line.previousLine.children[item.line.previousLine.children.length - 1];\n            }\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement) && textElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                resultantText = textElement.text + resultantText;\n                textElement = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement.previousNode)) ? textElement.previousNode.previousValidNodeForTracking : undefined;\n            }\n        }\n        return resultantText;\n    };\n    Editor.prototype.checkToCombineRevisionsinBlocks = function (tempSpan, checkWidget, isEnd, revisionType) {\n        if (!checkWidget || !this.owner.enableTrackChanges) {\n            return;\n        }\n        // if (tempSpan instanceof FieldElementBox && tempSpan.fieldType === 2) {\n        //     return;\n        // }\n        if (tempSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || tempSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || tempSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || tempSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            return;\n        }\n        var isCombined = false;\n        if (isEnd) {\n            isCombined = this.combineRevisionWithNextPara(tempSpan, revisionType);\n        }\n        else {\n            isCombined = this.combineRevisionWithPrevPara(tempSpan, revisionType);\n        }\n        if (!isCombined) {\n            this.insertRevision(tempSpan, revisionType);\n        }\n    };\n    Editor.prototype.checkToMapRevisionWithNextNode = function (inline, tempSpan, isBidi, revisionType, inlinePara) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inlinePara) && inlinePara.characterFormat.revisions.length == 1) {\n            var nextElementPara = inlinePara.characterFormat;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementPara)) {\n                return this.checkToMapRevisionWithInlineText(undefined, 0, tempSpan, isBidi, revisionType, nextElementPara);\n            }\n            return false;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            return false;\n        }\n        var nextElement = inline.nextValidNodeForTracking;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement)) {\n            return this.checkToMapRevisionWithInlineText(nextElement, 0, tempSpan, isBidi, revisionType);\n        }\n        return false;\n    };\n    Editor.prototype.checkToMapRevisionWithPreviousNode = function (inline, tempSpan, isBidi, revisionType) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            return false;\n        }\n        var prevElement = inline.previousValidNodeForTracking;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n            return this.checkToMapRevisionWithInlineText(prevElement, prevElement.length, tempSpan, isBidi, revisionType);\n        }\n        return false;\n    };\n    Editor.prototype.checkToMapRevisionWithInlineText = function (inline, indexInInline, newElement, isBidi, revisionType, inlinePara) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inlinePara)) {\n            if (revisionType === 'Deletion') {\n                this.updateLastElementRevision(newElement);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inlinePara) && inlinePara.revisions.length > 0) {\n                return this.applyMatchedRevisionInorder(undefined, newElement, indexInInline, true, isBidi, revisionType, inlinePara);\n            }\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            if (revisionType === 'Deletion') {\n                this.updateLastElementRevision(newElement);\n            }\n            if (inline.length === indexInInline && inline.previousValidNodeForTracking != undefined) {\n                inline = inline.previousValidNodeForTracking;\n                indexInInline = inline.length;\n                if (inline.revisions.length > 0) {\n                    return this.applyMatchedRevisionInorder(inline, newElement, indexInInline, false, isBidi, revisionType);\n                }\n            }\n            else if (indexInInline === 0) {\n                inline = inline.nextValidNodeForTracking;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.revisions.length > 0) {\n                    return this.applyMatchedRevisionInorder(inline, newElement, indexInInline, true, isBidi, revisionType);\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.combineElementRevisions = function (inline, elementToCombine) {\n        if (inline.revisions.length === 0 || elementToCombine.revisions.length === 0) {\n            return;\n        }\n        for (var i = 0; i < inline.revisions.length; i++) {\n            var prevRevision = inline.revisions[i];\n            for (var j = 0; j < elementToCombine.revisions.length; j++) {\n                var currentRevision = elementToCombine.revisions[i];\n                if (prevRevision.range.indexOf(elementToCombine) === -1 && currentRevision.revisionType === prevRevision.revisionType && currentRevision.author === prevRevision.author) {\n                    elementToCombine.revisions.splice(j, 1);\n                    prevRevision.range.push(elementToCombine);\n                    elementToCombine.revisions.splice(j, 0, prevRevision);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(prevRevision);\n                }\n            }\n        }\n    };\n    Editor.prototype.applyMatchedRevisionInorder = function (inline, newElement, indexInInline, isBegin, isBidi, revisionType, inlinePara) {\n        var revisionsMatched;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inlinePara) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            revisionsMatched = this.getMatchedRevisionsToCombine(inlinePara.revisions, revisionType);\n            if (revisionsMatched.length > 0) {\n                this.mapMatchedRevisions(revisionsMatched, inlinePara, newElement, isBegin);\n            }\n            return false;\n        }\n        else {\n            revisionsMatched = this.getMatchedRevisionsToCombine(inline.revisions, revisionType);\n            if (revisionsMatched.length > 0) {\n                this.mapMatchedRevisions(revisionsMatched, inline, newElement, isBegin);\n            }\n            return false;\n        }\n    };\n    Editor.prototype.copyElementRevision = function (elementToCopy, elementToInclude, isSplitElementMerged) {\n        if (!this.isTrackingFormField) {\n            for (var i = 0; i < elementToCopy.revisions.length; i++) {\n                var currentRevision = elementToCopy.revisions[i];\n                var rangeIndex = currentRevision.range.indexOf(elementToCopy);\n                elementToInclude.revisions.splice(0, 0, currentRevision);\n                currentRevision.range.splice(rangeIndex + ((isSplitElementMerged) ? 2 : 1), 0, elementToInclude);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n            }\n        }\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.mapMatchedRevisions = function (revisions, revisionElement, elementToInclude, isBegin) {\n        for (var i = 0; i < revisions.length; i++) {\n            var currentRevision = revisions[i];\n            if (!this.isRevisionAlreadyIn(elementToInclude, currentRevision)) {\n                elementToInclude.revisions.splice(0, 0, currentRevision);\n                if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && this.editorHistory.currentBaseHistoryInfo.markerData.length === 0) {\n                    this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(undefined, undefined, currentRevision));\n                }\n                if (elementToInclude instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                    this.insertRevisionForFootnoteWidget(elementToInclude, currentRevision);\n                }\n                var rangeIndex = currentRevision.range.indexOf(revisionElement);\n                currentRevision.range.splice((isBegin) ? rangeIndex : rangeIndex + 1, 0, elementToInclude);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n            }\n        }\n    };\n    Editor.prototype.isRevisionAlreadyIn = function (element, revision) {\n        if (element.revisions.length > 0) {\n            for (var i = 0; i < element.revisions.length; i++) {\n                var elementRevision = element.revisions[i];\n                if (elementRevision.revisionID === revision.revisionID) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.getMatchedRevisionsToCombine = function (revisions, revisionType) {\n        var matchedRevisions = [];\n        for (var i = 0; i < revisions.length; i++) {\n            if (this.isRevisionMatched(revisions[i], revisionType)) {\n                matchedRevisions.push(revisions[i]);\n            }\n        }\n        return matchedRevisions;\n    };\n    Editor.prototype.decideInlineForTrackChanges = function (inline, revisionType) {\n        var matched = false;\n        if (this.owner.enableTrackChanges && !this.canInsertRevision(inline, revisionType)) {\n            var currentElement = inline.nextValidNodeForTracking;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && this.canInsertRevision(currentElement, revisionType)) {\n                inline = currentElement;\n                matched = true;\n            }\n        }\n        return { 'element': inline, 'isMatched': matched };\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertIMEText = function (text, isUpdate) {\n        if (this.documentHelper.lastComposedText === text && isUpdate) {\n            return;\n        }\n        // Clone selection start position\n        var paragraphInfo = this.selection.getParagraphInfo(this.selection.start);\n        var startPosition = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n        // Insert IME text in current selection\n        this.insertText(text);\n        this.documentHelper.lastComposedText = text;\n        // update selection start\n        var start = this.selection.start;\n        this.setPositionForCurrentIndex(start, startPosition);\n        // Update selection end\n        var endPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n        endPosition.setPositionForLineWidget(start.currentWidget, start.offset + text.length);\n        if (this.owner.enableTrackChanges) {\n            if (!isUpdate) {\n                this.selection.start.setPositionInternal(this.selection.end);\n            }\n            this.selection.end.updatePhysicalPosition(true);\n        }\n        else {\n            this.selection.selectPosition(isUpdate ? start : endPosition, endPosition);\n        }\n    };\n    /**\n      * Inserts the section break at cursor position with specified section break type.\n      *\n      * @param {SectionBreakType} sectionBreakType Specifies the section break type.\n      * > If this parameter is not set, it inserts the section break of type new page.\n      * @returns {void}\n      */\n    Editor.prototype.insertSectionBreak = function (sectionBreakType, sectionFormat) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sectionBreakType)) {\n            sectionBreakType = _base_types__WEBPACK_IMPORTED_MODULE_15__.SectionBreakType.NewPage;\n        }\n        var selection = this.documentHelper.selection;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection) || this.owner.isReadOnlyMode || selection.start.paragraph.isInHeaderFooter) {\n            return;\n        }\n        if (sectionBreakType === _base_types__WEBPACK_IMPORTED_MODULE_15__.SectionBreakType.Continuous) {\n            this.initHistory('SectionBreakContinuous');\n        }\n        else {\n            this.initHistory('SectionBreak');\n        }\n        if (!selection.isEmpty) {\n            selection.selectContent(selection.isForward ? selection.start : selection.end, true);\n        }\n        this.documentHelper.owner.isShiftingEnabled = true;\n        this.updateInsertPosition();\n        if (sectionBreakType === _base_types__WEBPACK_IMPORTED_MODULE_15__.SectionBreakType.Continuous) {\n            this.documentHelper.layout.isSectionBreakCont = true;\n            this.insertSection(selection, true, undefined, true, undefined, sectionFormat);\n        }\n        else {\n            this.insertSection(selection, true, undefined, undefined, true, sectionFormat);\n        }\n        this.updateEndPosition();\n        this.reLayout(selection, true);\n        //if (this.owner.layoutType === 'Continuous') {\n        this.layoutWholeDocument(true);\n        //} \n        this.documentHelper.layout.isSectionBreakCont = false;\n    };\n    Editor.prototype.combineRevisionWithBlocks = function (elementBox, revisionType) {\n        if (!this.owner.enableTrackChanges || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox)) {\n            return;\n        }\n        while (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n            elementBox = elementBox.nextElement;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox)) {\n            return;\n        }\n        var prevPara = (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? elementBox.previousRenderedWidget : elementBox.paragraph.previousRenderedWidget);\n        if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && elementBox.paragraph.firstChild.children[0].revisions.length === 0) {\n            prevPara = undefined;\n        }\n        if (prevPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            return;\n        }\n        var isNew = true;\n        var currentElement;\n        if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            currentElement = elementBox.characterFormat;\n        }\n        else {\n            currentElement = elementBox;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevPara) && prevPara.characterFormat.revisions.length > 0) {\n            var lastLine = prevPara.lastChild;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastLine) || lastLine.children.length === 0) {\n                return;\n            }\n            var lastElement_1 = lastLine.children[lastLine.children.length - 1];\n            while (lastElement_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || lastElement_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || lastElement_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                lastElement_1 = lastElement_1.previousElement;\n            }\n            if (prevPara.isEmpty()) {\n                lastElement_1 = prevPara.characterFormat;\n            }\n            if (lastElement_1.revisions.length > 0) {\n                if (this.compareElementRevision(prevPara.characterFormat, currentElement)) {\n                    var currentRevision = currentElement.revisions[currentElement.revisions.length - 1];\n                    if (this.compareElementRevision(lastElement_1, currentElement)) {\n                        var lastElementRevision = lastElement_1.revisions[lastElement_1.revisions.length - 1];\n                        isNew = false;\n                        if (currentRevision !== lastElementRevision) {\n                            var index = lastElementRevision.range.indexOf(lastElement_1) + 1;\n                            if (lastElementRevision.range.filter(function (range) { return range instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat; })) {\n                                index += 1;\n                            }\n                            this.clearAndUpdateRevisons(currentRevision.range, lastElementRevision, index);\n                            this.owner.revisions.remove(currentRevision);\n                        }\n                    }\n                }\n            }\n        }\n        var lastElement;\n        if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            lastElement = elementBox.characterFormat;\n        }\n        else {\n            var lastLine = elementBox.paragraph.lastChild;\n            while (lastLine.children.length == 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastLine.previousLine)) {\n                // in case there was a line break and last line doesn't have any children\n                lastLine = lastLine.previousLine;\n            }\n            lastElement = lastLine.children[lastLine.children.length - 1];\n            elementBox = lastElement == undefined ? elementBox : lastElement;\n        }\n        var nextPara = (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? elementBox.nextRenderedWidget : elementBox.paragraph.nextRenderedWidget);\n        if (nextPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextPara)) {\n            // let lastLine: LineWidget = elementBox.paragraph.lastChild as LineWidget;\n            // let lastElement: ElementBox = lastLine.children[lastLine.children.length - 1];\n            var firstLine = nextPara.firstChild;\n            var firstElement = firstLine.children[0];\n            while (firstElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || firstElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || firstElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                firstElement = firstElement.nextElement;\n            }\n            if (nextPara.isEmpty()) {\n                firstElement = nextPara.characterFormat;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement)) {\n                return;\n            }\n            if (firstElement.revisions.length > 0) {\n                var firstEleRevision = firstElement.revisions[firstElement.revisions.length - 1];\n                if (this.compareElementRevision(currentElement, firstElement)) {\n                    if (this.compareElementRevision(currentElement, firstElement)) {\n                        var lastElementRevision = currentElement.revisions[currentElement.revisions.length - 1];\n                        isNew = false;\n                        if (firstEleRevision !== lastElementRevision) {\n                            this.clearAndUpdateRevisons(lastElementRevision.range, firstEleRevision, 0, true);\n                            this.owner.revisions.remove(lastElementRevision);\n                        }\n                    }\n                }\n            }\n        }\n        if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && elementBox.revisions.length === 0) {\n            this.insertRevision(elementBox, revisionType);\n        }\n    };\n    Editor.prototype.checkToCombineRevisionWithNextPara = function (elementBox, revisionType) {\n        var nextPara = elementBox.paragraph.nextRenderedWidget;\n        if (nextPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            return false;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextPara) && !nextPara.isEmpty()) {\n            var firstLine = nextPara.firstChild;\n            var firstElement = firstLine.children[0];\n            while (firstElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || firstElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n                firstElement = firstElement.previousElement;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement)) {\n                return false;\n            }\n            if (firstElement.revisions.length > 0) {\n                var mappedRevisions = this.getMatchedRevisionsToCombine(firstElement.revisions, revisionType);\n                if (mappedRevisions.length > 0) {\n                    this.mapMatchedRevisions(mappedRevisions, firstElement, elementBox, true);\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.checkToCombineRevisionWithPrevPara = function (widget, revisionType, newParagraph) {\n        var prevPara = widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox ? widget.paragraph.previousRenderedWidget : widget;\n        if (prevPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            return false;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevPara) && prevPara.characterFormat.revisions.length > 0) {\n            if (!this.isRevisionMatched(prevPara.characterFormat, revisionType)) {\n                return false;\n            }\n            // let firstLine: LineWidget = prevPara.firstChild as LineWidget;\n            // let lastLine: LineWidget = prevPara.lastChild as LineWidget;\n            // if (isNullOrUndefined(lastLine) || lastLine.children.length === 0) {\n            //     return false;\n            // }\n            // let lastElement: ElementBox = lastLine.children[lastLine.children.length - 1];\n            // if (lastElement instanceof BookmarkElementBox || lastElement instanceof CommentCharacterElementBox) {\n            //     lastElement = lastElement.previousValidNodeForTracking;\n            // }\n            // if (isNullOrUndefined(lastElement)) {\n            //     return false;\n            // }\n            // if (lastElement.revisions.length > 0) {\n            var mappedRevisions = this.getMatchedRevisionsToCombine(prevPara.characterFormat.revisions, revisionType);\n            if (mappedRevisions.length > 0) {\n                this.mapMatchedRevisions(mappedRevisions, prevPara.characterFormat, widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox ? widget : newParagraph.characterFormat, false);\n                return true;\n            }\n            // }\n        }\n        return false;\n    };\n    Editor.prototype.combineRevisionWithNextPara = function (elementBox, revisionType) {\n        var isLastLine = elementBox.line.isLastLine();\n        var nextElement = elementBox.nextNode;\n        if (isLastLine && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement)) {\n            return this.checkToCombineRevisionWithNextPara(elementBox, revisionType);\n        }\n        return false;\n    };\n    Editor.prototype.combineRevisionWithPrevPara = function (elementBox, revisionType) {\n        var isFirstLine = elementBox.line.isFirstLine();\n        var prevElement = elementBox.previousNode;\n        if (isFirstLine && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n            return this.checkToCombineRevisionWithPrevPara(elementBox, revisionType);\n        }\n        return false;\n    };\n    /**\n     * Removes the specified revision from the document.\n     *\n     * @param revisionToRemove Specify the revision to be removed.\n     * @returns {void}\n     */\n    Editor.prototype.removeRevision = function (revisionToRemove) {\n        var elementInfo = this.selection.start.currentWidget.getInline(this.selection.start.offset + 1, 0);\n        var elementBox = elementInfo.element;\n        if (elementInfo.element.revisions.length > 0) {\n            for (var i = 0; i < elementBox.revisions.length; i++) {\n                if (elementBox.revisions[i].revisionType === revisionToRemove.revisionType) {\n                    var revision = elementBox.revisions[i];\n                    var startIndex = revision.range.indexOf(elementBox);\n                    for (var j = startIndex; startIndex < revision.range.length; startIndex++) {\n                        revision.range[j].revisions.splice(i, 1);\n                        revision.range.splice(j, 1);\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Clears the specified revision from the document.\n     *\n     * @param revision Specify the revision to clear from the document.\n     * @returns {void}\n     */\n    Editor.prototype.clearElementRevision = function (revision) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n            return;\n        }\n        for (var i = 0; i < revision.range.length; i++) {\n            if (revision.range[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n                var currentElement = revision.range[i];\n                currentElement.revisions.splice(currentElement.revisions.length - 1, 1);\n                revision.range.splice(i, 1);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.insertRevision = function (item, type, author, date, spittedRange, skip, parseRevisionId) {\n        if (this.isRemoteAction && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.revisionData) && !this.documentHelper.owner.parser.isPaste) {\n            return undefined;\n        }\n        var revisionId;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.revisionData) && this.revisionData.length > 0) {\n            var newRevisionData = this.revisionData.pop();\n            author = newRevisionData.author;\n            date = newRevisionData.date;\n            revisionId = newRevisionData.revisionId;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(parseRevisionId)) {\n            revisionId = parseRevisionId;\n        }\n        author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(author) ? author : this.owner.currentUser ? this.owner.currentUser : 'Guest user';\n        var currentDate = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(date) ? date : _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate();\n        if (item instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item.line) && item.line.paragraph.associatedCell || (item instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && item.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && item.ownerBase.associatedCell)) {\n            var cellWidget = undefined;\n            if (item instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n                cellWidget = item.line.paragraph.associatedCell;\n            }\n            else if (item instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                cellWidget = item.ownerBase.associatedCell;\n            }\n            if (cellWidget.ownerRow.rowFormat.revisions.length > 0) {\n                var rowFormat = cellWidget.ownerRow.rowFormat;\n                var matchedRevisions = this.getMatchedRevisionsToCombine(rowFormat.revisions, type);\n                if (matchedRevisions.length > 0) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.markerData.length === 0) {\n                        this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(undefined, undefined, matchedRevisions[0]));\n                    }\n                    for (var i = 0; i < matchedRevisions.length; i++) {\n                        item.revisions.splice(0, 0, matchedRevisions[i]);\n                        matchedRevisions[i].range.push(item);\n                    }\n                    return undefined;\n                }\n            }\n        }\n        var revision = new _track_changes_track_changes__WEBPACK_IMPORTED_MODULE_17__.Revision(this.owner, author, currentDate);\n        revision.revisionType = type;\n        if (this.owner.enableCollaborativeEditing && this.isRemoteAction && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionId) && revisionId != '') {\n            revision.revisionID = revisionId;\n        }\n        else {\n            revision.revisionID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        }\n        if (this.owner.enableCollaborativeEditing && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.getRevision(revision.revisionID))) {\n            revision = this.getRevision(revision.revisionID);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(spittedRange) && spittedRange.length > 0) {\n            this.clearAndUpdateRevisons(spittedRange, revision, spittedRange.indexOf(item));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item)) {\n            if (item.revisions.indexOf(revision) === -1) {\n                item.revisions.push(revision);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(spittedRange)) {\n                if (revision.range.indexOf(item) === -1) {\n                    revision.range.splice(0, 0, item);\n                }\n            }\n            else {\n                revision.range.push(item);\n            }\n        }\n        if (this.isRemoteAction && this.documentHelper.owner.parser.isPaste) {\n            this.remotePasteRevision.push(revision);\n        }\n        else if (revision.range.length > 0) {\n            this.updateRevisionCollection(revision);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item)) {\n            if (item instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                this.insertRevisionForFootnoteWidget(item, revision);\n            }\n            if (this.owner.enableCollaborativeEditing && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && !skip) {\n                this.editorHistory.currentBaseHistoryInfo.markerData.splice(0, 0, this.getMarkerData(item, undefined, revision));\n            }\n        }\n        return revision;\n    };\n    Editor.prototype.insertRevisionForFootnoteWidget = function (element, revision) {\n        var blocks = element.bodyWidget.childWidgets;\n        this.skipFootNoteDeleteTracking = true;\n        this.footnoteRevision = revision;\n        for (var j = 0; j < blocks.length; j++) {\n            this.insertRevisionForBlock(blocks[j], revision.revisionType, false, revision);\n        }\n        this.footnoteRevision = undefined;\n        this.skipFootNoteDeleteTracking = false;\n    };\n    /**\n     * Method help to clear previous revisions and include new revision at specified index\n     *\n     * @param range - range of elements to be cleared\n     * @param revision - revision to be inserted\n     * @param index - index at which to be included in the revision range\n     * @returns {void}\n     */\n    Editor.prototype.clearAndUpdateRevisons = function (range, revision, index, isReverse) {\n        var j = 0;\n        for (var i = 0; i < range.length; i++) {\n            if (range[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox || range[i] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                var currentElement = range[i];\n                var isSameRange = false;\n                if (currentElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && currentElement.text === '') {\n                    currentElement.revisions.splice(currentElement.revisions.length - 1, 1);\n                    continue;\n                }\n                if (currentElement.revisions[currentElement.revisions.length - 1].range === range) {\n                    currentElement.revisions[currentElement.revisions.length - 1].range.splice(currentElement.revisions.length - 1, 1);\n                    isSameRange = true;\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentElement.revisions[currentElement.revisions.length - 1]);\n                }\n                currentElement.revisions.splice(currentElement.revisions.length - 1, 1);\n                currentElement.revisions.push(revision);\n                revision.range.splice(isReverse ? j : index + j, 0, currentElement);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                if (isSameRange) {\n                    i--;\n                }\n                j++;\n            }\n        }\n    };\n    Editor.prototype.splitRevisionByElement = function (item, revision) {\n        if (item.revisions.length > 0) {\n            var range = revision.range;\n            var index = range.indexOf(item);\n            revision.range = range.splice(0, index + 1);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            return range;\n        }\n        return undefined;\n    };\n    /**\n     * Method to update revision for the splitted text element\n     * @param inline - Original text element\n     * @param splittedSpan - Splitted element\n     */\n    Editor.prototype.updateRevisionForSpittedTextElement = function (inline, splittedSpan) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.splittedRevisions = [];\n        }\n        for (var i = 0; i < inline.revisions.length; i++) {\n            var revision = inline.revisions[i];\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            var splittedRange = this.splitRevisionByElement(inline, revision);\n            if (splittedSpan && splittedSpan instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && splittedSpan.text === '') {\n                splittedSpan = undefined;\n            }\n            var splittedRevision = this.insertRevision(splittedSpan, revision.revisionType, revision.author, revision.date, splittedRange, true);\n            if (!this.isRemoteAction) {\n                this.editorHistory.currentBaseHistoryInfo.splittedRevisions.push(this.getMarkerData(undefined, undefined, this.getRevision(splittedRevision.revisionID)));\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getRevision = function (revisionId) {\n        for (var i = 0; i < this.owner.documentHelper.revisionsInternal.length; i++) {\n            var revision = this.owner.documentHelper.revisionsInternal.keys[i];\n            if (revision === revisionId) {\n                return this.owner.documentHelper.revisionsInternal.get(revision);\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.isRevisionMatched = function (item, type) {\n        var author = this.owner.currentUser ? this.owner.currentUser : 'Guest user';\n        if (item instanceof _track_changes_track_changes__WEBPACK_IMPORTED_MODULE_17__.Revision) {\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(type) || type === item.revisionType) && item.author === author) {\n                return true;\n            }\n        }\n        else if (item.revisions.length > 0) {\n            for (var i = 0; i < item.revisions.length; i++) {\n                var elementRevision = item.revisions[i];\n                if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(type) || type === elementRevision.revisionType) && elementRevision.author === author) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.compareElementRevision = function (element, compare) {\n        if (element.revisions.length === 0 || compare.revisions.length === 0) {\n            return false;\n        }\n        for (var i = 0; i < element.revisions.length; i++) {\n            var currentRevision = element.revisions[i];\n            for (var j = 0; j < compare.revisions.length; j++) {\n                if (currentRevision.author === compare.revisions[j].author && currentRevision.revisionType === compare.revisions[j].revisionType) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.canInsertRevision = function (item, type) {\n        var revisionType = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(type) ? 'Insertion' : type;\n        if (revisionType === 'Deletion') {\n            return false;\n        }\n        if (this.owner.enableTrackChanges) {\n            return this.isRevisionMatched(item, revisionType);\n            //if it has revision\n        }\n        else if (item.revisions.length > 0) {\n            return false;\n        }\n        return true;\n    };\n    Editor.prototype.insertRevisionAtEnd = function (item, newElement, revisionType) {\n        if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            return false;\n        }\n        item = item.previousValidNodeForTracking;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item)) {\n            return false;\n        }\n        return this.insertRevisionAtPosition(item, newElement, true, revisionType);\n    };\n    Editor.prototype.insertRevisionAtPosition = function (item, newElement, isEnd, revisionType) {\n        // if (newElement instanceof FieldElementBox && (newElement as FieldElementBox).fieldType === 2) {\n        //     return false;\n        // }\n        var prevRevisionLength = newElement.revisions.length;\n        var isRevisionCombined = this.checkToMapRevisionWithInlineText(item, (isEnd) ? item.length : 0, newElement, false, revisionType);\n        // Check to combine with previous and next element\n        if (isEnd) {\n            if (!isRevisionCombined && newElement.revisions.length === prevRevisionLength) {\n                isRevisionCombined = this.checkToMapRevisionWithNextNode(item.nextNode, newElement, false, revisionType);\n            }\n        }\n        else {\n            if (!isRevisionCombined && newElement.revisions.length === prevRevisionLength) {\n                isRevisionCombined = this.checkToMapRevisionWithPreviousNode(item.previousNode, newElement, false, revisionType);\n            }\n        }\n        return isRevisionCombined;\n    };\n    Editor.prototype.insertRevisionAtBegining = function (item, newElement, revisionType) {\n        if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            return false;\n        }\n        item = item.nextValidNodeForTracking;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item)) {\n            return false;\n        }\n        return this.insertRevisionAtPosition(item, newElement, false, revisionType);\n    };\n    Editor.prototype.splitRevisionForSpittedElement = function (element, spittedElement) {\n        for (var i = element.revisions.length - 1; i >= 0; i--) {\n            var revision = element.revisions[i];\n            var splittedRange = this.splitRevisionByElement(element, revision);\n            this.insertRevision(spittedElement, revision.revisionType, revision.author, revision.date, splittedRange);\n        }\n    };\n    /**\n     * Method to combine element revision if not inserts new revision\n     */\n    // private checkToCombineRevision(element: ElementBox, newElement: ElementBox, revisionType: RevisionType): boolean {\n    //     let isCombined: boolean = false;\n    //     if (this.isRevisionMatched(element, revisionType)) {\n    //         isCombined = true;\n    //         this.combineElementRevision(element, newElement, true);\n    //     } else {\n    //         this.insertRevision(newElement, revisionType);\n    //     }\n    //     return isCombined;\n    // }\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.combineElementRevisionToPrevNxt = function (newElement) {\n        if (newElement.revisions.length > 0 && newElement.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && newElement.nextNode.revisions.length > 0) {\n            this.combineElementRevision(newElement.revisions, newElement.nextNode.revisions);\n        }\n    };\n    Editor.prototype.combineElementRevision = function (currentElementRevisions, elementToCombine, isReverse) {\n        for (var i = 0; i < currentElementRevisions.length; i++) {\n            for (var j = 0; j < elementToCombine.length; j++) {\n                var currentRevision = currentElementRevisions[i];\n                var revisionToCombine = elementToCombine[j];\n                if (currentRevision === revisionToCombine) {\n                    break;\n                }\n                if (currentRevision.author === revisionToCombine.author && currentRevision.revisionType === revisionToCombine.revisionType) {\n                    var rangeLength = revisionToCombine.range.length;\n                    for (var k = 0; k < rangeLength; k++) {\n                        var item = revisionToCombine.range[0];\n                        item.revisions.splice(item.revisions.indexOf(revisionToCombine), 1);\n                        revisionToCombine.range.splice(0, 1);\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(revisionToCombine);\n                        var insertIndex = -1;\n                        if (isReverse) {\n                            if (item instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && item.indexInOwner === 0 && item.line.indexInOwner === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item.paragraph.previousWidget) && item.paragraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                                insertIndex = currentRevision.range.indexOf(item.paragraph.previousWidget.characterFormat);\n                            }\n                            else if (item instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && item.indexInOwner !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(item.previousElement)) {\n                                insertIndex = currentRevision.range.indexOf(item.previousElement);\n                            }\n                            else if (item instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && !item.ownerBase.isEmpty()) {\n                                var element = item.ownerBase.lastChild.children[item.ownerBase.lastChild.children.length - 1];\n                                insertIndex = currentRevision.range.indexOf(element);\n                            }\n                        }\n                        if (insertIndex !== -1) {\n                            currentRevision.range.splice(insertIndex + 1, 0, item);\n                        }\n                        else {\n                            isReverse ? currentRevision.range.splice(k, 0, item) : currentRevision.range.push(item);\n                        }\n                        // Create the new currentChangeView if the current element contains revisions but is not present in the pane case.\n                        var currentChangeView = void 0;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentRevision)) {\n                            currentChangeView = this.owner.trackChangesPane.changes.get(currentRevision);\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentChangeView) && currentRevision.range.length > 0) {\n                            this.updateRevisionCollection(currentRevision);\n                        }\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                        item.revisions.push(currentRevision);\n                    }\n                    if (revisionToCombine.range.length === 0) {\n                        this.owner.revisions.remove(revisionToCombine);\n                        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                            this.removeMarkerInfoRevision(revisionToCombine.revisionID, this.editorHistory.currentBaseHistoryInfo.markerData);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeMarkerInfoRevision = function (revisionID, markerInfo) {\n        for (var i = 0; i < markerInfo.length; i++) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(markerInfo[i].revisionId) && markerInfo[i].revisionId === revisionID) {\n                markerInfo.splice(markerInfo.indexOf(markerInfo[i]), 1);\n            }\n        }\n    };\n    Editor.prototype.combineRevisions = function (block, startPosition, endposition) {\n        if (!this.owner.enableTrackChanges) {\n            return;\n        }\n        var info = this.selection.getLineInfo(block, startPosition.offset);\n        var elementInfo = info.line.getInline(startPosition.offset, 0);\n        var currentElement = elementInfo.element;\n        if (currentElement.revisions.length > 0) {\n            if (this.isRevisionMatched(currentElement, 'Insertion')) {\n                var nextElement = currentElement.nextElement;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement) && nextElement.revisions.length > 0) {\n                    var revision = currentElement.revisions[currentElement.revisions.length - 1];\n                    var range = nextElement.revisions[nextElement.revisions.length - 1].range;\n                    if (revision !== nextElement.revisions[nextElement.revisions.length - 1]) {\n                        this.clearAndUpdateRevisons(range, revision, revision.range.indexOf(currentElement) + 1);\n                    }\n                }\n            }\n        }\n        // let startOffset: number = startPosition.currentWidget.getOffset(firstElement, 0);\n        // let endOffset: number = endposition.currentWidget.getOffset(lastElement, 0);\n    };\n    /**\n     * Method to update the revision for whole block\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertRevisionForBlock = function (widget, revisionType, isTOC, revision, skipReLayout, isRemoveInline, isAssOrder) {\n        var blockRemoved = false;\n        if (widget.childWidgets.length === 0 || !this.owner.enableTrackChanges) {\n            return blockRemoved;\n        }\n        if (revisionType === 'Deletion' && !this.editorHistory.isUndoing) {\n            var editPostion = this.selection.editPosition;\n            var start = this.selection.start.clone();\n            var end = this.selection.end.clone();\n            this.documentHelper.layout.clearListElementBox(widget);\n            var isLastChild = (widget == this.getLastParaForBodywidgetCollection(widget));\n            var nextParagraph = this.selection.getNextParagraphBlock(widget);\n            var paragraphInfo = this.selection.getParagraphInfo(this.selection.start);\n            var endParagraphInfo = this.selection.getParagraphInfo(this.selection.end);\n            var startIndex = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n            var endIndex = this.selection.getHierarchicalIndex(endParagraphInfo.paragraph, endParagraphInfo.offset.toString());\n            var canRemovePara = false;\n            var canTrackParaMark = false;\n            if (widget.isInsideTable && widget == this.selection.getLastParagraph(widget.associatedCell)) {\n                isLastChild = true;\n            }\n            if (!isLastChild && !((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph) && widget.isEmpty()) && !isRemoveInline) {\n                canTrackParaMark = true;\n            }\n            if (canTrackParaMark) {\n                // Added the condition to remove section if current and next para have different section indexes if selection is covered till the end of section.\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph) && !nextParagraph.isInsideTable && widget.bodyWidget.sectionIndex !== nextParagraph.bodyWidget.sectionIndex) {\n                    this.addRemovedNodes(widget.bodyWidget);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule.currentBaseHistoryInfo)) {\n                    this.owner.editorHistoryModule.currentBaseHistoryInfo.recordInsertRevisionDeletetion(widget);\n                }\n                if (!isAssOrder) {\n                    this.addRemovedNodes(widget.clone());\n                    canRemovePara = this.handleDeleteParaMark(widget, undefined);\n                }\n            }\n            for (var i = widget.childWidgets.length - 1; i > -1; i--) {\n                var line = (widget.childWidgets[i]);\n                this.removeContent(line, 0, this.documentHelper.selection.getLineLength(line), undefined, isAssOrder ? true : (isRemoveInline ? false : !isLastChild));\n            }\n            if (canTrackParaMark) {\n                if (isAssOrder) {\n                    canRemovePara = this.handleDeleteParaMark(widget, undefined);\n                }\n                if (canRemovePara && widget.isEmpty()) {\n                    blockRemoved = true;\n                    this.removeBlock(widget);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                if (widget.isEmpty() && this.selection.end.paragraph === widget && isLastChild) {\n                    this.editorHistory.currentBaseHistoryInfo.endRevisionLogicalIndex = this.selection.endOffset;\n                }\n                else if (canRemovePara) {\n                    this.editorHistory.currentBaseHistoryInfo.endRevisionLogicalIndex = undefined;\n                }\n            }\n            var lastLine = widget.lastChild;\n            while (lastLine.children.length == 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastLine.previousLine)) {\n                // in case there was a line break and last line doesn't have any children\n                lastLine = lastLine.previousLine;\n            }\n            if (lastLine.children.length > 0) {\n                var lastEle = lastLine.children[lastLine.children.length - 1];\n                this.combineElementRevision(widget.characterFormat.revisions, lastEle.revisions, isAssOrder ? false : true);\n            }\n            this.selection.editPosition = editPostion;\n            this.selection.start.setPositionInternal(start);\n            this.selection.end.setPositionInternal(end);\n            // let textPosition: TextPosition = this.selection.getTextPosBasedOnLogicalIndex(editPostion);\n            // this.selection.selectContent(textPosition, true);\n            this.removeEmptyLine(widget);\n            if (!skipReLayout && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.containerWidget)) {\n                this.documentHelper.layout.reLayoutParagraph(widget, 0, 0);\n                if (this.selection.start.currentWidget.indexInOwner === -1 && paragraphInfo.paragraph.indexInOwner !== -1) {\n                    var startPos = this.selection.getTextPosBasedOnLogicalIndex(startIndex);\n                    this.selection.start.setPositionInternal(startPos);\n                }\n                if (this.selection.end.currentWidget.indexInOwner === -1 && endParagraphInfo.paragraph.indexInOwner !== -1) {\n                    var endPos = this.selection.getTextPosBasedOnLogicalIndex(endIndex);\n                    this.selection.end.setPositionInternal(endPos);\n                }\n            }\n        }\n        else {\n            var skipParaMark = false;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                var author = this.owner.currentUser ? this.owner.currentUser : 'Guest user';\n                revision = new _track_changes_track_changes__WEBPACK_IMPORTED_MODULE_17__.Revision(this.owner, author, _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getUtcDate());\n                revision.revisionID = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n                revision.revisionType = revisionType;\n            }\n            for (var i = 0; i < widget.childWidgets.length; i++) {\n                var elemets = widget.childWidgets[i].children;\n                if (elemets.length === 0) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.containerWidget)) {\n                        var paraIndex = widget.containerWidget.childWidgets.indexOf(widget);\n                        var prevWidget = undefined;\n                        if (paraIndex > 0) {\n                            prevWidget = widget.containerWidget.childWidgets[paraIndex - 1];\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevWidget) && prevWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && prevWidget.characterFormat.revisions.length > 0) {\n                            if (this.isRevisionMatched(prevWidget.characterFormat, revisionType)) {\n                                var mappedRevisions = this.getMatchedRevisionsToCombine(prevWidget.characterFormat.revisions, revisionType);\n                                if (mappedRevisions.length > 0) {\n                                    this.mapMatchedRevisions(mappedRevisions, prevWidget.characterFormat, widget.characterFormat, false);\n                                    skipParaMark = true;\n                                    revision = undefined;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (var j = 0; j < elemets.length; j++) {\n                    if (j === 0 && !isTOC) {\n                        var prevRevisionCount = elemets[i].revisions.length;\n                        this.checkToCombineRevisionsinBlocks(elemets[i], true, false, 'Insertion');\n                        if (elemets[i].revisions.length > prevRevisionCount) {\n                            revision = elemets[i].revisions[elemets[i].revisions.length - 1];\n                        }\n                        else {\n                            elemets[j].revisions.push(revision);\n                            revision.range.push(elemets[j]);\n                        }\n                    }\n                    else {\n                        elemets[j].revisions.push(revision);\n                        revision.range.push(elemets[j]);\n                    }\n                }\n            }\n            if (!skipParaMark) {\n                widget.characterFormat.revisions.push(revision);\n                revision.range.push(widget.characterFormat);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                this.updateRevisionCollection(revision);\n            }\n        }\n        return blockRemoved;\n    };\n    /**\n    * @private\n    */\n    Editor.prototype.getLastParaForBodywidgetCollection = function (widget) {\n        var bodywidget = widget.containerWidget;\n        if (bodywidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n            return bodywidget.childWidgets[bodywidget.childWidgets.length - 1];\n        }\n        if (widget.isInsideTable && widget.associatedCell) {\n            return widget.associatedCell.lastChild;\n        }\n        var lastPage = this.documentHelper.pages[this.documentHelper.pages.length - 1];\n        var lastBodyWidget = lastPage.bodyWidgets[lastPage.bodyWidgets.length - 1];\n        var lastPara = lastBodyWidget.childWidgets[lastBodyWidget.childWidgets.length - 1];\n        return lastPara;\n    };\n    Editor.prototype.updatePasteRevision = function () {\n        for (var i = 0; i < this.remotePasteRevision.length; i++) {\n            if (this.owner.revisions.changes.indexOf(this.remotePasteRevision[i]) < 0) {\n                this.updateRevisionCollection(this.remotePasteRevision[i]);\n            }\n            else {\n                this.owner.trackChangesPane.updateCurrentTrackChanges(this.remotePasteRevision[i]);\n            }\n        }\n        this.remotePasteRevision = [];\n    };\n    Editor.prototype.updateRevisionCollection = function (revision) {\n        var isInserted = false;\n        var paraIndex = undefined;\n        if (this.owner.revisions.changes.indexOf(revision) < 0) {\n            if (!this.documentHelper.revisionsInternal.containsKey(revision.revisionID)) {\n                this.documentHelper.revisionsInternal.add(revision.revisionID, revision);\n            }\n            if (this.owner.revisions.changes.length > 0) {\n                var currentStart = this.owner.selection.isForward ? this.owner.selectionModule.start : this.owner.selectionModule.end;\n                for (var i = 0; i < this.owner.revisions.changes.length; i++) {\n                    var currentRange = this.owner.revisions.changes[i].range[0];\n                    if (currentRange instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentRange.line) && currentRange.line.paragraph.bodyWidget) {\n                        var elementBox = this.owner.revisions.changes[i].range[0];\n                        if (currentRange instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteEndnoteMarkerElementBox && currentRange.paragraph.containerWidget.footNoteReference.revisions.length > 0) {\n                            elementBox = currentRange.paragraph.containerWidget.footNoteReference;\n                        }\n                        paraIndex = this.selection.getElementPosition(elementBox).startPosition;\n                    }\n                    else if (currentRange instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat) {\n                        var rowWidget = currentRange.ownerBase;\n                        var firstCell = rowWidget.childWidgets[0];\n                        if (firstCell.childWidgets.length === 0) {\n                            for (var j = 1; j < rowWidget.childWidgets.length; j++) {\n                                if (rowWidget.childWidgets[j].childWidgets.length > 0) {\n                                    firstCell = rowWidget.childWidgets[j];\n                                    break;\n                                }\n                            }\n                        }\n                        var firstPara = this.selection.getFirstParagraph(firstCell);\n                        // Get the currentRange position to check (before or after) to insert table revision in order.\n                        var editPosition = void 0;\n                        if (firstPara.bodyWidget) {\n                            var selection = this.documentHelper.selection;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.editPosition)) {\n                                editPosition = selection.editPosition;\n                            }\n                            this.updateEditPosition(firstCell, selection);\n                            paraIndex = this.selection.getTextPosBasedOnLogicalIndex(selection.editPosition);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(editPosition) && !this.selection.start.paragraph.isInsideTable) {\n                                selection.editPosition = editPosition;\n                            }\n                        }\n                    }\n                    else if (currentRange instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                        var paraWidget = currentRange.ownerBase;\n                        if (paraWidget.lastChild && paraWidget.lastChild.paragraph.bodyWidget) {\n                            var offset = paraWidget.getLength();\n                            var startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                            startPosition.setPositionParagraph(paraWidget.lastChild, offset);\n                            paraIndex = startPosition;\n                        }\n                    }\n                    if (this.footnoteRevision === this.owner.revisions.changes[i]) {\n                        var index = this.owner.revisions.changes.indexOf(this.footnoteRevision);\n                        isInserted = true;\n                        this.owner.revisions.changes.splice(index + 1, 0, revision);\n                        var currentChangeView = new _track_changes_track_changes_pane__WEBPACK_IMPORTED_MODULE_20__.ChangesSingleView(this.owner, this.owner.trackChangesPane);\n                        var currentElement = currentChangeView.createSingleChangesDiv(revision);\n                        var previousChangeView = this.owner.trackChangesPane.changes.get(this.footnoteRevision);\n                        var nextSibling = previousChangeView.outerSingleDiv.nextSibling;\n                        if (nextSibling) {\n                            this.owner.trackChangesPane.changesInfoDiv.insertBefore(currentElement, nextSibling);\n                        }\n                        else {\n                            this.owner.trackChangesPane.changesInfoDiv.appendChild(currentElement);\n                        }\n                        this.owner.trackChangesPane.revisions.splice(index + 1, 0, revision);\n                        this.owner.trackChangesPane.changes.add(revision, currentChangeView);\n                        this.owner.trackChangesPane.renderedChanges.add(revision, currentChangeView);\n                        break;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentStart)) {\n                        var isDifferentCell = this.selection.start.paragraph.isInsideTable && this.selection.end.paragraph.isInsideTable && this.selection.start.paragraph.associatedCell !== this.selection.end.paragraph.associatedCell;\n                        if (currentStart.isExistBefore(paraIndex) && !(revision.range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat) && !isDifferentCell) {\n                            isInserted = true;\n                            this.owner.revisions.changes.splice(i, 0, revision);\n                            var currentChangeView = new _track_changes_track_changes_pane__WEBPACK_IMPORTED_MODULE_20__.ChangesSingleView(this.owner, this.owner.trackChangesPane);\n                            this.owner.trackChangesPane.changesInfoDiv.insertBefore(currentChangeView.createSingleChangesDiv(revision), this.owner.trackChangesPane.changesInfoDiv.children[i + 1]);\n                            this.owner.trackChangesPane.revisions.splice(i, 0, revision);\n                            this.owner.trackChangesPane.changes.add(revision, currentChangeView);\n                            this.owner.trackChangesPane.renderedChanges.add(revision, currentChangeView);\n                            break;\n                        }\n                        else if (revision.range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat && currentRange instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat && revision.range[0].ownerBase.containerWidget === currentRange.ownerBase.containerWidget && revision.range[0].ownerBase.index === currentRange.ownerBase.index) {\n                            isInserted = true;\n                            this.owner.revisions.changes.splice(i - revision.range[0].ownerBase.indexInOwner, 0, revision);\n                            break;\n                        }\n                        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentStart) && ((currentStart.isExistBefore(paraIndex)) || currentStart.isAtSamePosition(paraIndex) || (currentStart.paragraph.isInsideTable && paraIndex.paragraph.isInsideTable && currentStart.paragraph.associatedCell === paraIndex.paragraph.associatedCell))) {\n                            // Insert the table revision if getting row is first row of table we insert directly in ith index or insert next index of currentRange.\n                            if (currentRange instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat && revision.range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat && currentRange.ownerBase.containerWidget === revision.range[0].ownerBase.containerWidget) {\n                                if (currentRange.ownerBase.index - 1 === revision.range[0].ownerBase.index) {\n                                    this.owner.revisions.changes.splice(i, 0, revision);\n                                    isInserted = true;\n                                    break;\n                                }\n                                else {\n                                    this.owner.revisions.changes.splice(i + revision.range[0].ownerBase.indexInOwner, 0, revision);\n                                    isInserted = true;\n                                    break;\n                                }\n                            }\n                            else if (revision.range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat) {\n                                this.owner.revisions.changes.splice(i, 0, revision);\n                                isInserted = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!isInserted) {\n                this.owner.revisions.changes.push(revision);\n                if (!(revision.range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat)) {\n                    var currentChangeView = new _track_changes_track_changes_pane__WEBPACK_IMPORTED_MODULE_20__.ChangesSingleView(this.owner, this.owner.trackChangesPane);\n                    this.owner.trackChangesPane.changesInfoDiv.appendChild(currentChangeView.createSingleChangesDiv(revision));\n                    this.owner.trackChangesPane.revisions.push(revision);\n                    this.owner.trackChangesPane.changes.add(revision, currentChangeView);\n                    this.owner.trackChangesPane.renderedChanges.add(revision, currentChangeView);\n                }\n            }\n            this.documentHelper.updateAuthorIdentity();\n        }\n    };\n    /**\n     * @private\n     * @returns {BodyWidget}\n     */\n    Editor.prototype.insertSection = function (selection, selectFirstBlock, isUndoing, sectionBreakContinuous, sectionBreakNewPage, sectionFormat) {\n        var newSectionFormat;\n        var startPara = this.selection.start.paragraph;\n        if (sectionBreakContinuous && !isUndoing && !startPara.isInsideTable && selection.start.offset === 0 && selection.start.currentWidget === startPara.firstChild && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startPara.previousRenderedWidget) && startPara.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && startPara.previousRenderedWidget.isEndsWithPageBreak) {\n            this.selection.start.paragraph.bodyWidget.sectionFormat.breakCode = 'NoBreak';\n            this.selection.start.paragraph.index = 0;\n            this.updateNextBlocksIndex(this.selection.start.paragraph, true);\n            this.updateSectionIndex(this.selection.start.paragraph.bodyWidget.sectionFormat, this.selection.start.paragraph.bodyWidget, true);\n            this.selection.moveToNextParagraph();\n            this.editorHistory.currentBaseHistoryInfo.insertPosition = undefined;\n            this.updateInsertPosition();\n            return undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sectionFormat)) {\n            newSectionFormat = sectionFormat;\n        }\n        else {\n            newSectionFormat = this.selection.start.paragraph.bodyWidget.sectionFormat.cloneFormat();\n        }\n        var lastBlock;\n        var firstBlock;\n        if (selection.start.paragraph.isInsideTable) {\n            var table = this.documentHelper.layout.getParentTable(selection.start.paragraph);\n            table = table.combineWidget(this.owner.viewer);\n            var insertBefore = false;\n            if (selection.start.paragraph.associatedCell.rowIndex === 0) {\n                insertBefore = true;\n            }\n            var newParagraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n            var previousBlock_1 = table.previousRenderedWidget;\n            if (!insertBefore) {\n                lastBlock = this.splitTable(table, selection.start.paragraph.associatedCell.ownerRow);\n                this.documentHelper.layout.layoutBodyWidgetCollection(lastBlock.index, lastBlock.containerWidget, lastBlock, false);\n                lastBlock = lastBlock.getSplitWidgets().pop();\n            }\n            else {\n                lastBlock = table;\n            }\n            var insertIndex = 0;\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousBlock_1) || !previousBlock_1.bodyWidget.equals(lastBlock.bodyWidget)) && insertBefore) {\n                insertIndex = 0;\n                newParagraph.index = 0;\n            }\n            else {\n                insertIndex = lastBlock.indexInOwner + 1;\n                newParagraph.index = lastBlock.index + 1;\n            }\n            lastBlock.containerWidget.childWidgets.splice(insertIndex, 0, newParagraph);\n            newParagraph.containerWidget = lastBlock.containerWidget;\n            this.updateNextBlocksIndex(newParagraph, true);\n            this.documentHelper.layout.layoutBodyWidgetCollection(newParagraph.index, newParagraph.containerWidget, newParagraph, false);\n            lastBlock = newParagraph;\n        }\n        else {\n            var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n            var selectionStart = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n            //Split Paragraph\n            if (!isUndoing) {\n                this.splitParagraphInternal(selection, selection.start.paragraph, selection.start.currentWidget, selection.start.offset, selection.start.paragraph.characterFormat);\n            }\n            this.setPositionForCurrentIndex(selection.start, selectionStart);\n            lastBlock = selection.start.paragraph.getSplitWidgets().pop();\n            if (isUndoing && lastBlock.previousRenderedWidget !== undefined) {\n                lastBlock = lastBlock.previousRenderedWidget;\n            }\n        }\n        //Split body widget\n        firstBlock = this.splitBodyWidget(lastBlock.bodyWidget, newSectionFormat, lastBlock, sectionBreakContinuous, sectionBreakNewPage).firstChild;\n        // if (isUndoing) {\n        //     this.layoutWholeDocument(true);\n        // }\n        // When applying break if the last para is empty need to layout the paragraph in the previous block similar to MS word. \n        var previousBlock = lastBlock.previousWidget;\n        if (lastBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && lastBlock.isEmpty() && previousBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            lastBlock.isSectionBreak = true;\n            this.documentHelper.layout.reLayoutParagraph(lastBlock, 0, 0);\n        }\n        if (firstBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            firstBlock.updateRowIndex(0);\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(firstBlock.index, firstBlock.containerWidget, firstBlock, false);\n        if (firstBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            firstBlock = this.documentHelper.getFirstParagraphInFirstCell(firstBlock);\n        }\n        if (selectFirstBlock) {\n            selection.selectParagraphInternal(firstBlock, true);\n        }\n        return firstBlock;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.splitBodyWidget = function (bodyWidget, sectionFormat, startBlock, sectionBreakContinuous, sectionBreakNewPage) {\n        //let sectionIndex: number;\n        var isUpdated = true;\n        //Move blocks after the start block to next body widget\n        var newBodyWidget = this.documentHelper.layout.moveBlocksToNextPage(startBlock, true, undefined, sectionBreakContinuous);\n        if (this.editorHistory.isUndoing || (this.editorHistory.isRedoing && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sectionFormat.ownerBase))) {\n            startBlock.bodyWidget.sectionFormat = sectionFormat;\n        }\n        if (newBodyWidget.page === undefined) {\n            newBodyWidget.page = bodyWidget.page;\n            bodyWidget.page.bodyWidgets.splice(bodyWidget.page.bodyWidgets.indexOf(bodyWidget) + 1, 0, newBodyWidget);\n        }\n        else if (bodyWidget.page.bodyWidgets.length > 1 && newBodyWidget.page !== undefined && !this.editorHistory.isUndoing) {\n            var temp_NewBody = newBodyWidget;\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.nextRenderedWidget) && newBodyWidget !== bodyWidget.nextRenderedWidget) {\n                var startindex = bodyWidget.nextRenderedWidget.page.bodyWidgets.indexOf(bodyWidget.nextRenderedWidget);\n                newBodyWidget.page.bodyWidgets.push(bodyWidget.nextRenderedWidget);\n                bodyWidget.nextRenderedWidget.page.bodyWidgets.splice(startindex, 1);\n            }\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newBodyWidget.nextRenderedWidget)) {\n                newBodyWidget.nextRenderedWidget.page = newBodyWidget.page;\n                newBodyWidget = newBodyWidget.nextRenderedWidget;\n            }\n            newBodyWidget = temp_NewBody;\n            newBodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(newBodyWidget);\n            if (sectionFormat.numberOfColumns > 1) {\n                this.viewer.owner.parser.parseSectionFormat(0, bodyWidget.sectionFormat, newBodyWidget.sectionFormat);\n                isUpdated = false;\n            }\n            newBodyWidget.sectionFormat.breakCode = 'NewPage';\n        }\n        //Update SectionIndex for splitted body widget\n        if (sectionBreakContinuous) {\n            if (sectionFormat.numberOfColumns > 1 && isUpdated) {\n                newBodyWidget.sectionFormat = sectionFormat;\n                this.viewer.owner.parser.parseSectionFormat(0, bodyWidget.sectionFormat, newBodyWidget.sectionFormat);\n            }\n            else {\n                newBodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(newBodyWidget);\n                if (sectionFormat.numberOfColumns > 1 || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.page) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.page.nextPage) && this.documentHelper.getPageWidth(bodyWidget.page) !== this.documentHelper.getPageWidth(bodyWidget.page.nextPage))) {\n                    this.viewer.owner.parser.parseSectionFormat(0, bodyWidget.sectionFormat, newBodyWidget.sectionFormat);\n                }\n            }\n            newBodyWidget.sectionFormat.breakCode = 'NoBreak';\n        }\n        if (sectionBreakNewPage) {\n            if (sectionFormat.numberOfColumns > 1 && isUpdated) {\n                newBodyWidget.sectionFormat = sectionFormat;\n                this.viewer.owner.parser.parseSectionFormat(0, bodyWidget.sectionFormat, newBodyWidget.sectionFormat);\n            }\n            else {\n                newBodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(newBodyWidget);\n                this.viewer.owner.parser.parseSectionFormat(0, bodyWidget.sectionFormat, newBodyWidget.sectionFormat);\n            }\n            newBodyWidget.sectionFormat.breakCode = 'NewPage';\n        }\n        this.updateSectionIndex(newBodyWidget.sectionFormat, newBodyWidget, true);\n        if (newBodyWidget.sectionFormat.numberOfColumns > 1) {\n            this.updateColumnIndex(newBodyWidget, false);\n        }\n        // insert New header footer widget in to section index \n        if (this.editorHistory && !this.editorHistory.isUndoing) {\n            this.insertRemoveHeaderFooter(newBodyWidget.sectionIndex, true);\n        }\n        // if (this.documentHelper.viewer instanceof PageLayoutViewer) {\n        //     //update header and footer for splitted widget\n        //     this.documentHelper.layout.layoutHeaderFooter(newBodyWidget, this.owner.viewer as PageLayoutViewer, newBodyWidget.page);\n        // }\n        //Update Child item index from 0 for new Section\n        this.updateBlockIndex(0, newBodyWidget.firstChild);\n        // Start sinfting from first block\n        this.owner.viewer.updateClientArea(newBodyWidget, newBodyWidget.page);\n        return newBodyWidget;\n    };\n    Editor.prototype.insertRemoveHeaderFooter = function (sectionIndex, insert) {\n        if (this.documentHelper.headersFooters[sectionIndex]) {\n            // Need to handle further\n            this.documentHelper.headersFooters.splice(sectionIndex, 0, {});\n        }\n        else {\n            this.documentHelper.headersFooters[sectionIndex] = {};\n        }\n    };\n    Editor.prototype.updateBlockIndex = function (blockIndex, block) {\n        var blocks;\n        var sectionIndex = block.bodyWidget.sectionIndex;\n        do {\n            blocks = block.getSplitWidgets();\n            for (var i = 0; i < blocks.length; i++) {\n                blocks[i].index = blockIndex;\n            }\n            blockIndex++;\n            block = blocks.pop().nextRenderedWidget;\n        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && block.bodyWidget.sectionIndex === sectionIndex);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateSectionIndex = function (sectionFormat, startBodyWidget, increaseIndex) {\n        var currentSectionIndex = startBodyWidget.sectionIndex;\n        var blockIndex = 0;\n        var bodyWidget = startBodyWidget;\n        do {\n            if (bodyWidget.index === currentSectionIndex && sectionFormat) {\n                bodyWidget.sectionFormat = sectionFormat;\n            }\n            if (increaseIndex) {\n                bodyWidget.index++;\n            }\n            else {\n                bodyWidget.index--;\n            }\n            bodyWidget = bodyWidget.nextRenderedWidget;\n        } while (bodyWidget);\n    };\n    /**\n    * @private\n    * @returns {void}\n    */\n    Editor.prototype.updateColumnIndex = function (startBodyWidget, increaseIndex) {\n        var bodyWidget = startBodyWidget;\n        do {\n            if (!increaseIndex && bodyWidget.columnIndex === 0) {\n                break;\n            }\n            if (increaseIndex) {\n                bodyWidget.columnIndex++;\n            }\n            else {\n                bodyWidget.columnIndex--;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.nextRenderedWidget) && bodyWidget.sectionIndex !== bodyWidget.nextRenderedWidget.sectionIndex) {\n                break;\n            }\n            bodyWidget = bodyWidget.nextRenderedWidget;\n        } while (bodyWidget);\n    };\n    //Auto convert List\n    Editor.prototype.checkAndConvertList = function (selection, isTab) {\n        var list = selection.paragraphFormat.getList();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) || selection.start.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n            return false;\n        }\n        var convertList = false;\n        var isLeadingZero = false;\n        var indexInInline = 0;\n        var inlineObj = selection.start.currentWidget.getInline(selection.start.offset - 1, indexInInline);\n        var inline = inlineObj.element;\n        indexInInline = inlineObj.index;\n        if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n            return false;\n        }\n        var span = inline;\n        var text = span.text.substring(0, indexInInline);\n        var tabValue = 0;\n        var length = 0;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(span.previousNode)) {\n            if (span.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && (span.previousNode.text === '\\t' || span.previousNode.text.trim().length === 0)) {\n                (span.previousNode.text === '\\t') ? tabValue += 36 : length = span.previousNode.text.length * 2.5;\n                span = span.previousNode;\n                continue;\n            }\n            return false;\n        }\n        span = inline;\n        var index = 0;\n        var tabIndex = text.lastIndexOf('\\t');\n        index = (tabIndex >= 0) ? tabIndex + 1 : text.lastIndexOf(' ') + 1;\n        while (span.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && index === 0) {\n            span = span.previousNode;\n            var previousText = span.text;\n            tabIndex = previousText.lastIndexOf('\\t');\n            index = (tabIndex >= 0) ? tabIndex + 1 : previousText.lastIndexOf(' ') + 1;\n            text = span.text + text;\n            text = text.substring(index);\n        }\n        text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.trimStart(text);\n        var numberFormat = text.substring(1, 2);\n        var previousList = undefined;\n        var listLevelPattern = this.getListLevelPattern(text.substring(0, 1));\n        if (listLevelPattern !== 'None' && this.checkNumberFormat(numberFormat, listLevelPattern === 'Bullet', text)) {\n            previousList = this.checkNextLevelAutoList(text);\n            convertList = true;\n        }\n        else if (this.checkLeadingZero(text)) {\n            isLeadingZero = true;\n            convertList = true;\n        }\n        else {\n            previousList = this.checkNextLevelAutoList(text);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousList)) {\n                convertList = true;\n            }\n        }\n        if (convertList && listLevelPattern === 'Bullet' && inline.text === '- ' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.paragraph.previousWidget) && !(inline.paragraph.previousWidget.firstChild.children[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox))) {\n            convertList = false;\n        }\n        if (convertList) {\n            this.initComplexHistory('AutoList');\n            var paragraph = inline.paragraph;\n            selection.start.setPositionParagraph(paragraph.childWidgets[0], paragraph.childWidgets[0].getOffset(inline, indexInInline + 1));\n            selection.end.setPositionParagraph(paragraph.childWidgets[0], 0);\n            this.initHistory('Delete');\n            this.deleteSelectedContents(selection, false);\n            this.reLayout(selection, false);\n            var followCharacter = isTab ? 'Tab' : 'Space';\n            numberFormat = !isLeadingZero ? '%1' + numberFormat : '%1' + text.substring(text.length - 1, text.length);\n            var leadingZeroText = text.substring(text.length - 3, text.length - 1);\n            listLevelPattern = !isLeadingZero ? listLevelPattern : this.getListLevelPattern(leadingZeroText);\n            var listLevel = new _list_list_level__WEBPACK_IMPORTED_MODULE_8__.WListLevel(undefined);\n            listLevel.listLevelPattern = listLevelPattern;\n            if (listLevelPattern === 'Bullet') {\n                if (text === '*') {\n                    listLevel.numberFormat = String.fromCharCode(61623);\n                    listLevel.characterFormat.fontFamily = 'Symbol';\n                }\n                else if (text === '-') {\n                    listLevel.numberFormat = '-';\n                }\n            }\n            else {\n                listLevel.numberFormat = numberFormat;\n            }\n            listLevel.followCharacter = followCharacter;\n            var leftIndent = selection.paragraphFormat.leftIndent;\n            if (tabValue !== 0 || length !== 0) {\n                listLevel.paragraphFormat.leftIndent = leftIndent + 18 + tabValue + length;\n            }\n            else if (indexInInline > 2) {\n                listLevel.paragraphFormat.leftIndent = leftIndent + (indexInInline - 2) * 2.5 + 18;\n            }\n            else if (leftIndent > 0) {\n                listLevel.paragraphFormat.leftIndent = leftIndent + 18;\n            }\n            else {\n                listLevel.paragraphFormat.leftIndent = 36;\n            }\n            listLevel.paragraphFormat.firstLineIndent = -18;\n            if ((!isLeadingZero && text.substring(0, 1) === '0') || leadingZeroText === '00') {\n                listLevel.startAt = 0;\n            }\n            else {\n                listLevel.startAt = 1;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousList)) {\n                selection.paragraphFormat.setList(previousList);\n            }\n            else {\n                this.autoConvertList(selection, listLevel);\n            }\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n                this.editorHistory.updateComplexHistory();\n            }\n            else {\n                this.reLayout(selection);\n            }\n        }\n        return convertList;\n    };\n    Editor.prototype.checkNextLevelAutoList = function (text) {\n        var selection = this.documentHelper.selection;\n        var previousList = undefined;\n        var convertList = false;\n        var currentParagraph = selection.start.paragraph;\n        var prevParagraph = selection.getPreviousParagraphBlock(currentParagraph);\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevParagraph) && prevParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            if (prevParagraph.paragraphFormat.listFormat && prevParagraph.paragraphFormat.listFormat.listId !== -1) {\n                var levelNumber = prevParagraph.paragraphFormat.listFormat.listLevelNumber;\n                convertList = this.isConvertList(text, prevParagraph);\n                if (convertList) {\n                    this.listLevelNumber = levelNumber;\n                    this.isAutoList = true;\n                    break;\n                }\n                else if (text === '*' || text === '-') {\n                    this.isAutoList = true;\n                    convertList = true;\n                    break;\n                }\n            }\n            prevParagraph = selection.getPreviousParagraphBlock(prevParagraph, true);\n        }\n        if (convertList) {\n            previousList = this.documentHelper.getListById(prevParagraph.paragraphFormat.listFormat.listId);\n        }\n        return previousList;\n    };\n    Editor.prototype.isConvertList = function (text, paragraph) {\n        var convertList = false;\n        var listNumber = this.documentHelper.layout.getListNumber(paragraph.paragraphFormat.listFormat, true);\n        var prevListText = listNumber.substring(0, listNumber.length - 1);\n        var currentListText = text.substring(0, text.length - 1);\n        //check if numberFormat equal\n        var inputString;\n        if (listNumber.substring(listNumber.length - 1) !== text.substring(text.length - 1)) {\n            convertList = false;\n        }\n        else if (currentListText.match(/^[0-9]+$/) && prevListText.match(/^[0-9]+$/)) {\n            inputString = parseInt(currentListText, 10);\n            if (parseInt(prevListText, 10) === inputString || parseInt(prevListText, 10) + 1 === inputString\n                || parseInt(prevListText, 10) + 2 === inputString) {\n                convertList = true;\n            }\n        }\n        else if (currentListText.match(/^[a-zA-Z]+$/) && prevListText.match(/^[a-zA-Z]+$/)) {\n            if (prevListText.charCodeAt(0) === text.charCodeAt(0) || prevListText.charCodeAt(0) + 1 === text.charCodeAt(0)\n                || prevListText.charCodeAt(0) + 2 === text.charCodeAt(0)) {\n                convertList = true;\n            }\n            else if (currentListText.match(/^[MDCLXVImdclxvi]+$/) && prevListText.match(/^[MDCLXVImdclxvi]+$/)) {\n                var prevListNumber = this.getNumber(prevListText.toUpperCase());\n                var currentListNumber = this.getNumber(currentListText.toUpperCase());\n                if (prevListNumber === currentListNumber || prevListNumber + 1 === currentListNumber\n                    || prevListNumber + 2 === currentListNumber) {\n                    convertList = true;\n                }\n            }\n        }\n        return convertList;\n    };\n    Editor.prototype.getNumber = function (roman) {\n        var conversion = { 'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1 };\n        var arr = roman.split('');\n        var num = 0;\n        for (var i = 0; i < arr.length; i++) {\n            var currentValue = conversion[arr[i]];\n            var nextValue = conversion[arr[i + 1]];\n            if (currentValue < nextValue) {\n                num -= (currentValue);\n            }\n            else {\n                num += (currentValue);\n            }\n        }\n        return num;\n    };\n    Editor.prototype.getListLevelPattern = function (value) {\n        switch (value) {\n            case '0':\n            case '1':\n                return 'Arabic';\n            case 'I':\n                return 'UpRoman';\n            case 'i':\n                return 'LowRoman';\n            case 'A':\n                return 'UpLetter';\n            case 'a':\n                return 'LowLetter';\n            case '*':\n            case '-':\n                return 'Bullet';\n            case '00':\n            case '01':\n                return 'LeadingZero';\n            default:\n                return 'None';\n        }\n    };\n    Editor.prototype.autoConvertList = function (selection, listLevel) {\n        var start = selection.start;\n        if (!selection.isForward) {\n            start = selection.end;\n        }\n        var newList = new _list_list__WEBPACK_IMPORTED_MODULE_6__.WList();\n        if (this.documentHelper.lists.length > 0) {\n            newList.listId = this.documentHelper.lists[this.documentHelper.lists.length - 1].listId + 1;\n        }\n        else {\n            newList.listId = 0;\n        }\n        var newAbstractList = new _list_abstract_list__WEBPACK_IMPORTED_MODULE_7__.WAbstractList();\n        var layout = this.documentHelper;\n        if (layout.abstractLists.length > 0) {\n            newAbstractList.abstractListId = layout.abstractLists[layout.abstractLists.length - 1].abstractListId + 1;\n        }\n        else {\n            newAbstractList.abstractListId = 0;\n        }\n        newList.abstractListId = newAbstractList.abstractListId;\n        newList.abstractList = newAbstractList;\n        newList.nsid = newAbstractList.nsid = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.generateUniqueId(layout.lists);\n        layout.abstractLists.push(newAbstractList);\n        newAbstractList.levels.push(listLevel);\n        listLevel.ownerBase = newAbstractList;\n        selection.paragraphFormat.setList(newList);\n        selection.paragraphFormat.listLevelNumber = 0;\n    };\n    Editor.prototype.checkNumberFormat = function (numberFormat, isBullet, text) {\n        if (isBullet) {\n            return numberFormat === '';\n        }\n        else {\n            var index = text.indexOf(numberFormat);\n            return (numberFormat === '.' || numberFormat === ')'\n                || numberFormat === '>' || numberFormat === '-') && text.substring(index, text.length - 1) === '';\n        }\n    };\n    Editor.prototype.checkLeadingZero = function (text) {\n        var j;\n        var isZero = false;\n        for (var i = 0; i <= text.length - 1; i++) {\n            if (text.charAt(i) === '0') {\n                isZero = true;\n                continue;\n            }\n            j = i;\n            break;\n        }\n        var numberFormat = undefined;\n        if (text.charAt(j) === '1') {\n            numberFormat = text.charAt(j + 1);\n        }\n        else {\n            numberFormat = text.charAt(j);\n        }\n        return isZero && this.checkNumberFormat(numberFormat, false, text);\n    };\n    Editor.prototype.getPageFromBlockWidget = function (block) {\n        var page = undefined;\n        if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget) {\n            page = block.containerWidget.page;\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.HeaderFooterWidget) {\n            page = block.containerWidget.page;\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n            page = block.containerWidget.bodyWidget.page;\n        }\n        return page;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertTextInline = function (element, selection, text, index, skipReLayout) {\n        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            element.text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.insert(element.text, index, text);\n            element.isWidthUpdated = false;\n            if (this.owner.enableTrackChanges) {\n                var revision = element.revisions[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                    this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(undefined, undefined, revision));\n                }\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            }\n            var paragraph = element.line.paragraph;\n            var lineIndex = paragraph.childWidgets.indexOf(element.line);\n            var elementIndex = element.line.children.indexOf(element);\n            if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && element.text.length > 90) {\n                // Here, the text is split based on the maximum character length of 90.\n                _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.splitWordByMaxLength(element, element.line);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(skipReLayout) || !skipReLayout) {\n                this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, elementIndex, element.line.paragraph.bidi);\n            }\n        }\n        else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ImageElementBox) {\n            this.insertImageText(element, selection, text, index);\n        }\n        else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n            if (element.fieldType === 0) {\n                this.insertFieldBeginText(element, selection, text, index);\n            }\n            else if (element.fieldType === 2) {\n                this.insertFieldSeparatorText(element, selection, text, index);\n            }\n            else {\n                this.insertFieldEndText(element, selection, text, index);\n            }\n        }\n        else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox\n            || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            this.insertBookMarkText(element, text);\n        }\n    };\n    Editor.prototype.insertFieldBeginText = function (fieldBegin, selection, text, index) {\n        var spanObj = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        spanObj.text = text;\n        var lineIndex = fieldBegin.line.paragraph.childWidgets.indexOf(fieldBegin.line);\n        var spanIndex = fieldBegin.line.children.indexOf(fieldBegin);\n        if (this.owner.enableCollaborativeEditing && this.isRemoteAction) {\n            spanIndex++;\n        }\n        spanObj.characterFormat.copyFormat(fieldBegin.characterFormat);\n        fieldBegin.line.children.splice(spanIndex, 0, spanObj);\n        spanObj.line = fieldBegin.line;\n        this.documentHelper.layout.reLayoutParagraph(fieldBegin.line.paragraph, lineIndex, spanIndex);\n    };\n    Editor.prototype.insertBookMarkText = function (element, text) {\n        var spanObj = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        spanObj.text = text;\n        var lineIndex = element.line.paragraph.childWidgets.indexOf(element.line);\n        var spanIndex = element.line.children.indexOf(element);\n        spanObj.characterFormat.copyFormat(element.characterFormat);\n        element.line.children.splice(spanIndex + 1, 0, spanObj);\n        spanObj.line = element.line;\n        this.documentHelper.layout.reLayoutParagraph(element.line.paragraph, lineIndex, spanIndex);\n    };\n    Editor.prototype.insertFieldSeparatorText = function (fieldSeparator, selection, text, index) {\n        var previousInline = selection.getPreviousTextInline(fieldSeparator);\n        var nextInline = selection.getNextTextInline(fieldSeparator);\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.text = text;\n        var spanIndex = fieldSeparator.line.children.indexOf(fieldSeparator);\n        if (index === fieldSeparator.length) {\n            spanIndex++;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousInline) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextInline)) {\n            span.characterFormat.copyFormat(fieldSeparator.line.paragraph.characterFormat);\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousInline)) {\n            span.characterFormat.copyFormat(nextInline.characterFormat);\n        }\n        else {\n            if (this.owner.enableCollaborativeEditing && this.isRemoteAction) {\n                var temp = this.getCharacterFormat(this.selection);\n                span.characterFormat.copyFormat(temp);\n            }\n            else {\n                span.characterFormat.copyFormat(previousInline.characterFormat);\n            }\n        }\n        fieldSeparator.line.children.splice(spanIndex, 0, span);\n        span.line = fieldSeparator.line;\n        var lineIndex = fieldSeparator.line.paragraph.childWidgets.indexOf(fieldSeparator.line);\n        this.documentHelper.layout.reLayoutParagraph(fieldSeparator.line.paragraph, lineIndex, spanIndex);\n    };\n    Editor.prototype.insertFieldEndText = function (fieldEnd, selection, text, index) {\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.text = text;\n        var spanIndex = fieldEnd.line.children.indexOf(fieldEnd);\n        span.characterFormat.copyFormat(fieldEnd.characterFormat);\n        if (selection.isInlineFormFillMode() && index == 0) {\n            // special case to insert text before fieldEnd while filling a text form field.\n            // when spell check enabled the white space and charaters are inserted as saperate text element box and getInline returns fieldEnd with index 0\n            fieldEnd.line.children.splice(spanIndex, 0, span);\n        }\n        else {\n            fieldEnd.line.children.splice(spanIndex + 1, 0, span);\n        }\n        span.line = fieldEnd.line;\n        var lineIndex = fieldEnd.line.paragraph.childWidgets.indexOf(fieldEnd.line);\n        if (this.owner.enableTrackChanges) {\n            var isBidi = this.documentHelper.textHelper.getRtlLanguage(text).isRtl;\n            var revisionType = 'Insertion';\n            var isRevisionCombined = this.checkToMapRevisionWithInlineText(fieldEnd, index, span, isBidi, revisionType);\n            if (!isRevisionCombined && span.revisions.length === 0) {\n                isRevisionCombined = this.checkToMapRevisionWithNextNode(fieldEnd.nextNode, span, isBidi, revisionType);\n            }\n        }\n        this.documentHelper.layout.reLayoutParagraph(fieldEnd.line.paragraph, lineIndex, spanIndex);\n    };\n    Editor.prototype.insertImageText = function (image, selection, text, index) {\n        var previousInlineObj = selection.getPreviousTextInline(image);\n        var nextInlineObj = selection.getNextTextInline(image);\n        var line = image.line;\n        var element = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        var paragraph = line.paragraph;\n        var lineIndex = paragraph.childWidgets.indexOf(line);\n        element.text = text;\n        var spanIndex = line.children.indexOf(image);\n        if (index === image.length) {\n            spanIndex++;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousInlineObj) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextInlineObj)) {\n            element.characterFormat.copyFormat(paragraph.characterFormat);\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousInlineObj)) {\n            element.characterFormat.copyFormat(nextInlineObj.characterFormat);\n        }\n        else {\n            element.characterFormat.copyFormat(previousInlineObj.characterFormat);\n        }\n        line.children.splice(spanIndex, 0, element);\n        element.line = line;\n        this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, spanIndex);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.isListTextSelected = function () {\n        if (this.documentHelper.isListTextSelected) {\n            this.initComplexHistory('ListSelect');\n            if (this.documentHelper.selection.start.paragraph.paragraphFormat.listFormat && this.documentHelper.selection.start.paragraph.paragraphFormat.listFormat.listId !== -1) {\n                this.onApplyList(undefined);\n            }\n        }\n    };\n    //Auto Format and insert Hyperlink Implementation starts\n    Editor.prototype.checkAndConvertToHyperlink = function (selection, isEnter, paragraph) {\n        var text;\n        var span;\n        if (isEnter) {\n            span = paragraph.lastChild.children[paragraph.lastChild.children.length - 1];\n            text = span.text;\n        }\n        else {\n            var indexInInline = 0;\n            var inlineObj = selection.start.currentWidget.getInline(selection.start.offset - 1, indexInInline);\n            var inline = inlineObj.element;\n            indexInInline = inlineObj.index;\n            if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                return;\n            }\n            span = inline;\n            text = span.text.substring(0, indexInInline);\n        }\n        var index = 0;\n        var tabCharIndex = text.lastIndexOf('\\t');\n        index = (tabCharIndex >= 0) ? tabCharIndex + 1 : text.lastIndexOf(' ') + 1;\n        while (span.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && index === 0) {\n            span = span.previousNode;\n            var previousText = span.text;\n            tabCharIndex = previousText.lastIndexOf('\\t');\n            index = (tabCharIndex >= 0) ? tabCharIndex + 1 : previousText.lastIndexOf(' ') + 1;\n            text = span.text + text;\n        }\n        text = text.substring(index);\n        var lowerCaseText = text.toLowerCase();\n        var containsURL = false;\n        if (lowerCaseText.substring(0, 8) === 'file:///'\n            || (lowerCaseText.substring(0, 7) === 'http://' && lowerCaseText.length > 7)\n            || (lowerCaseText.substring(0, 8) === 'https://' && lowerCaseText.length > 8)\n            || (lowerCaseText.substring(0, 4) === 'www.' && lowerCaseText.length > 4)\n            || (lowerCaseText.substring(0, 3) === '\\\\' && lowerCaseText.length > 3)\n            || (lowerCaseText.substring(0, 7) === 'mailto:' && lowerCaseText.length > 7)) {\n            containsURL = true;\n            if (lowerCaseText.substring(0, 4) === 'www.' && lowerCaseText.length > 4) {\n                text = 'http://' + text;\n            }\n        }\n        else {\n            var atIndex = text.indexOf('@');\n            var dotIndex = text.lastIndexOf('.');\n            if (atIndex > 0 && atIndex < dotIndex && dotIndex < text.length - 1) {\n                containsURL = true;\n                text = 'mailto:' + text;\n            }\n        }\n        if (containsURL) {\n            var startPos = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n            startPos.setPositionParagraph(span.line, span.line.getOffset(span, index));\n            var endPos = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n            if (isEnter) {\n                endPos.setPositionParagraph(span.line, span.line.getEndOffset());\n            }\n            else {\n                if (selection.end.currentWidget.children.length === 0 && selection.end.offset === 0) {\n                    var prevLine = selection.end.currentWidget.previousLine;\n                    endPos.setPositionParagraph(prevLine, prevLine.getEndOffset());\n                }\n                else {\n                    endPos.setPositionParagraph(selection.end.currentWidget, selection.end.offset - 1);\n                }\n            }\n            this.autoFormatHyperlink(selection, text, startPos, endPos);\n        }\n    };\n    Editor.prototype.autoFormatHyperlink = function (selection, url, startPosition, endPosition) {\n        if (this.owner.enableCollaborativeEditing && this.isRemoteAction) {\n            return;\n        }\n        this.initComplexHistory('AutoFormatHyperlink');\n        var blockInfo = this.selection.getParagraphInfo(startPosition);\n        var start = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            this.editorHistory.currentHistoryInfo.insertPosition = start;\n        }\n        // Moves the selection to URL text start and end position.\n        selection.start.setPositionInternal(startPosition);\n        selection.end.setPositionInternal(endPosition);\n        // Preserves the character format for hyperlink field.\n        var temp = this.getCharacterFormat(selection);\n        var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n        format.copyFormat(temp);\n        var fieldEnd = this.createHyperlinkElement(url, startPosition, endPosition, format);\n        // Moves the selection to the end of field end position.\n        selection.start.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 1));\n        // Moves to next text position. (To achieve common behavior for space and enter).\n        selection.start.moveNextPosition();\n        selection.end.setPositionInternal(selection.start);\n        blockInfo = this.selection.getParagraphInfo(selection.end);\n        var end = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            this.editorHistory.currentHistoryInfo.endPosition = end;\n            this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.editorHistory.updateComplexHistory();\n            this.isSkipOperationsBuild = false;\n            this.reLayout(selection);\n        }\n        else {\n            this.updateComplexWithoutHistory(0, start, end);\n        }\n    };\n    Editor.prototype.appylingHyperlinkFormat = function (selection) {\n        this.initHistory('Underline');\n        this.updateCharacterFormatWithUpdate(selection, 'underline', 'Single', false);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.reLayout(selection, false);\n        // Applies font color for field result.\n        this.initHistory('FontColor');\n        this.isForHyperlinkFormat = true;\n        this.updateCharacterFormatWithUpdate(selection, 'fontColor', '#0563c1', false);\n        this.isForHyperlinkFormat = false;\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.reLayout(selection, false);\n    };\n    Editor.prototype.createHyperlinkElement = function (url, startPosition, endPosition, format) {\n        var selection = this.selection;\n        this.documentHelper.layout.allowLayout = false;\n        this.documentHelper.layout.isReplaceAll = true;\n        this.appylingHyperlinkFormat(selection);\n        //this.documentHelper.layout.allowLayout = true;\n        // Adds the field end at the URL text end position.\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        fieldEnd.characterFormat.copyFormat(format);\n        fieldEnd.line = selection.end.currentWidget;\n        selection.start.setPositionInternal(selection.end);\n        // this.insertElementInCurrentLine(selection, fieldEnd, true);\n        this.initInsertInline(fieldEnd);\n        // Moves the selection to URL text start position.        \n        selection.start.setPositionInternal(startPosition);\n        selection.end.setPositionInternal(selection.start);\n        // Adds field begin, field code and field separator at the URL text start position.\n        var begin = this.insertHyperlinkfield(selection, format, url);\n        var lineIndex = selection.start.paragraph.childWidgets.indexOf(begin.line);\n        var index = begin.line.children.indexOf(begin);\n        fieldEnd.linkFieldCharacter(this.documentHelper);\n        this.documentHelper.layout.isReplaceAll = false;\n        this.documentHelper.layout.allowLayout = true;\n        this.documentHelper.layout.reLayoutParagraph(selection.start.paragraph, lineIndex, index);\n        return fieldEnd;\n    };\n    Editor.prototype.insertHyperlinkfield = function (selection, format, url, isBookmark) {\n        // Adds field begin, field code and field separator at the URL text start position.\n        var begin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        begin.characterFormat.copyFormat(format);\n        begin.line = selection.start.currentWidget;\n        this.initInsertInline(begin);\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.characterFormat.copyFormat(format);\n        if (isBookmark) {\n            span.text = ' HYPERLINK \\\\l \\\"' + url + '\\\" ';\n        }\n        else {\n            span.text = ' HYPERLINK \\\"' + url + '\\\" ';\n        }\n        span.line = selection.start.currentWidget;\n        this.initInsertInline(span);\n        var separator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        separator.characterFormat.copyFormat(format);\n        separator.line = selection.start.currentWidget;\n        this.initInsertInline(separator);\n        return begin;\n    };\n    /**\n     * @private\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.unlinkRangeFromRevision = function (inline, removeCollection) {\n        for (var i = 0; i < inline.revisions.length; i++) {\n            var currentRevision = inline.revisions[i];\n            var rangeIndex = currentRevision.range.indexOf(inline);\n            if (rangeIndex >= 0) {\n                currentRevision.range.splice(rangeIndex, 1);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n            }\n            if (currentRevision.range.length === 0 && removeCollection) {\n                this.owner.revisions.remove(currentRevision);\n                if (this.isRemoveRevision && this.documentHelper.revisionsInternal.containsKey(currentRevision.revisionID)) {\n                    this.documentHelper.revisionsInternal.remove(currentRevision.revisionID);\n                    this.owner.trackChangesPane.updateTrackChanges();\n                }\n            }\n        }\n        this.constructRevisionnsForLink(inline, true);\n    };\n    /**\n     * @private\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    // used to update the revisions for elements present between the field separator and field end when performing undo if the link covered multiple blocks.\n    Editor.prototype.constructRevisionnsForLink = function (inline, isRemove) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 2 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.historyInfoStack) && this.editorHistory.historyInfoStack.length > 0 && this.editorHistory.historyInfoStack[0].action === 'InsertHyperlink') {\n            var element = inline.nextElement;\n            var isConstructRevision = false;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.fieldEnd) && inline.fieldEnd.indexInOwner !== -1) {\n                isConstructRevision = true;\n            }\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element)) {\n                if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && element.fieldType === 1) {\n                    break;\n                }\n                if (isRemove) {\n                    this.unlinkRangeFromRevision(element);\n                    this.addRemovedRevisionInfo(element, undefined);\n                }\n                else if (isConstructRevision && element.removedIds.length > 0) {\n                    this.constructRevisionFromID(element, true, false, element.previousElement);\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.nextElement)) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.paragraph) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.paragraph.nextRenderedWidget) && element.paragraph.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !element.paragraph.nextRenderedWidget.isEmpty()) {\n                        if (isRemove) {\n                            this.unlinkRangeFromRevision(element.paragraph.characterFormat);\n                            this.addRemovedRevisionInfo(element.paragraph.characterFormat, undefined);\n                        }\n                        else if (isConstructRevision && element.paragraph.characterFormat.removedIds.length > 0) {\n                            this.constructRevisionFromID(element.paragraph.characterFormat, true);\n                        }\n                        element = element.paragraph.nextRenderedWidget.firstChild.children[0];\n                    }\n                    else {\n                        element = undefined;\n                    }\n                }\n                else {\n                    element = element.nextElement;\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.unlinkWholeRangeInRevision = function (item, revision) {\n        var currentRevision = revision;\n        item.revisions.splice(item.revisions.indexOf(item), 1);\n        var rangeLength = currentRevision.range.length;\n        for (var rangeIndex = 0; rangeIndex < rangeLength; rangeIndex++) {\n            currentRevision.range.splice(0, 1);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        }\n        if (currentRevision.range.length === 0) {\n            this.owner.revisions.remove(currentRevision);\n            if (this.isRemoveRevision && this.documentHelper.revisionsInternal.containsKey(currentRevision.revisionID)) {\n                this.documentHelper.revisionsInternal.remove(currentRevision.revisionID);\n                this.owner.trackChangesPane.updateTrackChanges();\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.unLinkFieldCharacter = function (inline) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 0) {\n            if (inline.fieldEnd) {\n                if (this.documentHelper) {\n                    this.documentHelper.fieldToLayout = inline;\n                    this.documentHelper.fieldEndParagraph = inline.line.paragraph;\n                }\n                // inline.line.paragraph.addFieldCharacter(inline.fieldEnd);\n                if (inline.fieldEnd) {\n                    inline.fieldEnd.fieldBegin = undefined;\n                }\n                inline.fieldEnd = undefined;\n            }\n        }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 2) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.fieldEnd)) {\n                if (this.documentHelper) {\n                    this.documentHelper.fieldToLayout = inline.fieldBegin;\n                    this.documentHelper.fieldEndParagraph = inline.line.paragraph;\n                }\n                inline.fieldBegin.fieldSeparator = undefined;\n                inline.fieldEnd.fieldSeparator = undefined;\n            }\n        }\n        else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1) {\n            if (inline.fieldBegin) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper)) {\n                    this.documentHelper.fieldToLayout = inline.fieldBegin;\n                    this.documentHelper.fieldEndParagraph = inline.line.paragraph;\n                }\n                var fieldIndex = this.documentHelper.fields.indexOf(inline.fieldBegin);\n                if (fieldIndex !== -1) {\n                    this.documentHelper.fields.splice(fieldIndex, 1);\n                }\n                var formFieldIndex = this.documentHelper.formFields.indexOf(inline.fieldBegin);\n                if (formFieldIndex !== -1) {\n                    this.documentHelper.formFields.splice(formFieldIndex, 1);\n                }\n                inline.fieldBegin.fieldEnd = undefined;\n                inline.fieldBegin = undefined;\n            }\n        }\n    };\n    Editor.prototype.getCharacterFormat = function (selection) {\n        if (selection.start.paragraph.isEmpty()) {\n            return selection.start.paragraph.characterFormat;\n        }\n        else {\n            var info = selection.start.currentWidget.getInline(selection.start.offset + 1, 0);\n            return info.element.characterFormat;\n        }\n    };\n    /**\n     * Inserts the Hyperlink.\n     *\n     * @param {string} address Specify the Hyperlink URL to be inserted.\n     * @param {string} displayText Specify the display text for the hyperlink\n     * @param {string} screenTip Specify the screen tip text.\n     * @returns {void}\n     */\n    Editor.prototype.insertHyperlink = function (address, displayText, screenTip) {\n        if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.startsWith(address, 'http://') || _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.startsWith(address, 'https://')) {\n            address = address.replace(/\\s/g, \"\");\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(displayText)) {\n            displayText = address;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(screenTip)) {\n            address = address + '\\\" \\\\o \\\"' + screenTip;\n        }\n        this.insertHyperlinkInternal(address, displayText, this.owner.selectionModule.text !== displayText, false);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.insertHyperlinkInternal = function (url, displayText, remove, isBookmark) {\n        var selection = this.documentHelper.selection;\n        if (selection.start.paragraph.associatedCell !== selection.end.paragraph.associatedCell || this.selection.isPlainContentControl()) {\n            return;\n        }\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        // if selection end is covering paraMark exclude paraMark\n        if (endPosition.offset == endPosition.paragraph.getLength() + 1) {\n            endPosition.movePreviousPosition();\n        }\n        if (remove) {\n            //Empty selection Hyperlink insert\n            this.insertHyperlinkInternalInternal(selection, url, displayText, isBookmark);\n        }\n        else {\n            this.documentHelper.layout.allowLayout = false;\n            //Non-Empty Selection- change the selected text to Field       \n            // this.preservedFontCol = this.getFontColor();\n            var fieldStartPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n            fieldStartPosition.setPositionInternal(startPosition);\n            var temp = this.getCharacterFormat(selection);\n            var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(undefined);\n            format.copyFormat(temp);\n            this.initComplexHistory('InsertHyperlink');\n            var blockInfo = this.selection.getParagraphInfo(startPosition);\n            var start = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n                this.editorHistory.currentHistoryInfo.insertPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            }\n            this.appylingHyperlinkFormat(selection);\n            startPosition.setPositionInternal(endPosition);\n            // Adds the field end at the URL text end position.\n            var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n            fieldEnd.characterFormat.copyFormat(format);\n            fieldEnd.line = selection.end.currentWidget;\n            startPosition.setPositionInternal(endPosition);\n            // this.insertElementInCurrentLine(selection, fieldEnd, true);\n            this.initInsertInline(fieldEnd);\n            // Moves the selection to URL text start position.        \n            startPosition.setPositionInternal(fieldStartPosition);\n            endPosition.setPositionInternal(startPosition);\n            // Adds field begin, field code and field separator at the URL text start position.\n            var begin = this.insertHyperlinkfield(selection, format, url, isBookmark);\n            fieldEnd.linkFieldCharacter(this.documentHelper);\n            var lineIndex = selection.start.paragraph.childWidgets.indexOf(begin.line);\n            var index = begin.line.children.indexOf(begin);\n            this.documentHelper.layout.allowLayout = true;\n            this.documentHelper.layout.reLayoutParagraph(selection.start.paragraph, lineIndex, index);\n            var lineWidget = fieldEnd.line;\n            selection.selects(lineWidget, lineWidget.getOffset(fieldEnd, fieldEnd.length), true);\n            blockInfo = this.selection.getParagraphInfo(endPosition);\n            var end = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n                this.editorHistory.currentHistoryInfo.endPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n                this.editorHistory.updateComplexHistory();\n            }\n            else {\n                this.updateComplexWithoutHistory(1, start, end);\n            }\n        }\n    };\n    Editor.prototype.insertHyperlinkInternalInternal = function (selection, url, displayText, isBookmark) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.start)) {\n            return;\n        }\n        if (this.editHyperlink(selection, url, displayText)) {\n            return;\n        }\n        var commentStarts = this.checkAndRemoveComments();\n        // Preserves the character format for hyperlink field.\n        var temp = this.getCharacterFormat(selection);\n        this.initHistory('InsertHyperlink');\n        var isRemoved = true;\n        if (!selection.isEmpty) {\n            var isTrackEnabled = this.owner.enableTrackChanges;\n            this.owner.enableTrackChanges = false;\n            isRemoved = this.removeSelectedContents(selection);\n            this.owner.enableTrackChanges = isTrackEnabled;\n        }\n        if (isRemoved) {\n            var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n            format.copyFormat(temp);\n            this.insertHyperlinkByFormat(selection, url, displayText, format, isBookmark);\n        }\n        this.updateHistoryForComments(commentStarts);\n    };\n    Editor.prototype.insertHyperlinkByFormat = function (selection, url, displayText, format, isBookmark) {\n        this.updateInsertPosition();\n        selection.owner.isShiftingEnabled = true;\n        var indexInInline = 0;\n        //let initial: number = indexInInline;\n        var element = [];\n        var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.fieldBegin = fieldBegin;\n        }\n        element.push(fieldBegin);\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        if (isBookmark) {\n            span.text = ' HYPERLINK \\\\l \\\"' + url + '\\\" ';\n        }\n        else {\n            span.text = ' HYPERLINK \\\"' + url + '\\\" ';\n        }\n        element.push(span);\n        var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        element.push(fieldSeparator);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(displayText) && displayText !== '') {\n            span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            span.characterFormat.copyFormat(format);\n            span.characterFormat.underline = 'Single';\n            span.characterFormat.fontColor = '#0563c1';\n            span.text = displayText;\n            element.push(span);\n        }\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        element.push(fieldEnd);\n        fieldBegin.fieldSeparator = fieldEnd.fieldSeparator = fieldSeparator;\n        fieldBegin.fieldEnd = fieldSeparator.fieldEnd = fieldEnd;\n        fieldSeparator.fieldBegin = fieldEnd.fieldBegin = fieldBegin;\n        this.insertElement(element);\n        //let paragraph: ParagraphWidget = selection.start.paragraph;\n        fieldEnd.linkFieldCharacter(this.documentHelper);\n        if (this.documentHelper.fields.indexOf(fieldBegin) === -1) {\n            this.documentHelper.fields.push(fieldBegin);\n        }\n        //let offset: number = fieldEnd.line.getOffset(fieldEnd, 1);\n        selection.selects(fieldEnd.line, fieldEnd.line.getOffset(fieldEnd, fieldEnd.length), true);\n        this.updateEndPosition();\n        this.reLayout(selection, true);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.initInsertInline = function (element, insertHyperlink, isInsertRemovedBookamrk) {\n        var selection = this.selection;\n        var isSelectionUpdated = false;\n        // if (!this.isInsertingTOC && isInsertRemovedBookamrk && element instanceof BookmarkElementBox) {\n        //     selection.start.offset--;\n        //     selection.end.offset--;\n        //     isSelectionUpdated = true;\n        // }\n        this.initHistory('InsertInline');\n        this.insertInlineInSelection(selection, element);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        // if (isSelectionUpdated) {\n        //     selection.start.offset++;\n        //     selection.end.offset++;\n        // }\n    };\n    Editor.prototype.insertElementInCurrentLine = function (selection, inline) {\n        if (this.checkIsNotRedoing()) {\n            selection.owner.isShiftingEnabled = true;\n        }\n        if (!selection.isEmpty) {\n            this.removeSelectedContents(selection);\n        }\n        this.updateInsertPosition();\n        this.insertElement([inline]);\n        if (this.checkEndPosition(selection)) {\n            this.updateHistoryPosition(selection.start, false);\n        }\n        this.fireContentChange();\n    };\n    /**\n     * Edit Hyperlink\n     * @param {Selection} selection - Specified the selection\n     * @param {string} url - Specifies the url\n     * @param {string} displayText - Specified the display test\n     * @param {boolean} isBookmark - Specifies is bookmark\n     * @private\n     * @returns {boolean} - Return tru of hyperlink is edited.\n     */\n    Editor.prototype.editHyperlink = function (selection, url, displayText, isBookmark) {\n        var fieldBegin = selection.getHyperlinkField();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(fieldBegin)) {\n            return false;\n        }\n        this.initHistory('InsertHyperlink');\n        this.editHyperlinkInternal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)\n            || (this.editorHistory && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo));\n        var fieldResult = '';\n        var isNestedField = false;\n        // Preserves the character format for hyperlink field.\n        var temp = this.getCharacterFormat(selection);\n        var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n        format.copyFormat(temp);\n        var fieldSeparator = undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(fieldBegin.fieldSeparator)) {\n            fieldSeparator = fieldBegin.fieldSeparator;\n            var fieldObj = selection.getHyperlinkDisplayText(fieldBegin.fieldSeparator.line.paragraph, fieldBegin.fieldSeparator, fieldBegin.fieldEnd, isNestedField, format);\n            fieldResult = fieldObj.displayText;\n            isNestedField = fieldObj.isNestedField;\n            format = fieldObj.format;\n        }\n        var offset = fieldBegin.line.getOffset(fieldBegin, 0);\n        selection.start.setPositionParagraph(fieldBegin.line, offset);\n        offset = fieldBegin.fieldEnd.line.getOffset(fieldBegin.fieldEnd, 1);\n        selection.end.setPositionParagraph(fieldBegin.fieldEnd.line, offset);\n        this.skipFieldDeleteTracking = true;\n        this.deleteSelectedContents(selection, true);\n        if (!isNestedField && fieldResult !== displayText || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(fieldSeparator)) {\n            this.insertHyperlinkByFormat(selection, url, displayText, format, isBookmark);\n            this.skipFieldDeleteTracking = false;\n        }\n        else {\n            //Modify the new hyperlink url. Inserts field begin, url and field separator.\n            this.updateInsertPosition();\n            var newFieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.fieldBegin = newFieldBegin;\n                this.editorHistory.currentBaseHistoryInfo.isEditHyperlink = true;\n            }\n            newFieldBegin.characterFormat.copyFormat(fieldBegin.characterFormat);\n            newFieldBegin.line = selection.start.currentWidget;\n            this.insertInlineInternal(newFieldBegin);\n            var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            span.characterFormat.copyFormat(fieldBegin.characterFormat);\n            if (isBookmark) {\n                span.text = ' HYPERLINK \\\\l \\\"' + url + '\\\" ';\n            }\n            else {\n                span.text = ' HYPERLINK \\\"' + url + '\\\" ';\n            }\n            span.line = selection.start.currentWidget;\n            this.insertInlineInternal(span);\n            var nodes = this.editorHistory && this.editorHistory.currentBaseHistoryInfo ?\n                this.editorHistory.currentBaseHistoryInfo.removedNodes : this.nodes;\n            this.insertClonedFieldResult(selection, nodes, fieldSeparator);\n            var fieldEnd = selection.end.currentWidget.getInline(selection.end.offset, 0).element;\n            fieldEnd.linkFieldCharacter(this.documentHelper);\n            this.skipFieldDeleteTracking = false;\n            var paragraph = newFieldBegin.line.paragraph;\n            var lineIndex = newFieldBegin.line.paragraph.childWidgets.indexOf(newFieldBegin.line);\n            var elementIndex = newFieldBegin.line.children.indexOf(newFieldBegin);\n            this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, elementIndex);\n            offset = newFieldBegin.fieldEnd.line.getOffset(newFieldBegin.fieldEnd, 1);\n            selection.selects(newFieldBegin.fieldEnd.line, offset, true);\n            this.updateEndPosition();\n            this.reLayout(selection, true);\n        }\n        this.editHyperlinkInternal = false;\n        this.nodes = [];\n        return true;\n    };\n    Editor.prototype.insertClonedFieldResult = function (selection, nodes, fieldSeparator) {\n        var fieldEnd;\n        var isStarted = false;\n        for (var i = nodes.length - 1; i > -1; i--) {\n            var node = nodes[i];\n            if (!isStarted) {\n                if (fieldSeparator === node) {\n                    isStarted = true;\n                }\n                else {\n                    if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && node === fieldSeparator.line.paragraph) {\n                        isStarted = true;\n                        var paragraph = undefined;\n                        if (i === nodes.length - 1) {\n                            paragraph = selection.start.paragraph;\n                            var fieldParagraph = fieldSeparator.line.paragraph;\n                            this.getClonedFieldResultWithSel(fieldParagraph, selection, fieldSeparator);\n                        }\n                        else {\n                            paragraph = this.getClonedFieldResult(fieldSeparator.line.paragraph, fieldSeparator);\n                            this.insertParagraph(paragraph, true);\n                        }\n                        selection.selectParagraphInternal(selection.getNextParagraphBlock(paragraph), true);\n                    }\n                    continue;\n                }\n            }\n            if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n                this.insertInlineInternal(node.clone());\n            }\n            else if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BlockWidget) {\n                this.insertBlock(node.clone());\n            }\n            // else if (node instanceof WSection)\n            //     editor.insertSection((node as WSection)._Clone());\n        }\n    };\n    Editor.prototype.getClonedFieldResultWithSel = function (paragraph, selection, fieldSeparator) {\n        var lineIndex = paragraph.childWidgets.indexOf(fieldSeparator.line);\n        var elementIndex = paragraph.childWidgets[lineIndex].children.indexOf(fieldSeparator);\n        for (var j = lineIndex; j < paragraph.childWidgets.length; j++) {\n            var lineWidget = paragraph.childWidgets[j];\n            if (j !== lineIndex) {\n                elementIndex = 0;\n            }\n            for (var i = elementIndex; i < lineWidget.children.length; i++) {\n                this.insertInlineInternal(lineWidget.children[i].clone());\n            }\n        }\n    };\n    Editor.prototype.getClonedFieldResult = function (curParagraph, fieldSeparator) {\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        paragraph.characterFormat.copyFormat(curParagraph.characterFormat);\n        paragraph.paragraphFormat.copyFormat(curParagraph.paragraphFormat);\n        var lineIndex = curParagraph.childWidgets.indexOf(fieldSeparator.line);\n        var elementIndex = curParagraph.childWidgets[lineIndex].children.indexOf(fieldSeparator);\n        for (var j = lineIndex; j < curParagraph.childWidgets.length; j++) {\n            var lineWidget = curParagraph.childWidgets[j];\n            if (j !== lineIndex) {\n                elementIndex = 0;\n            }\n            for (var i = elementIndex; i < lineWidget.children.length; i++) {\n                paragraph.childWidgets[0].children.push(lineWidget.children[i]);\n            }\n        }\n        return paragraph;\n    };\n    /**\n    * Removes the content control if selection is in content control\n    * @returns {void}\n    * @private\n    */\n    Editor.prototype.removeContentControl = function () {\n        var contentControl = this.documentHelper.owner.selection.currentContentControl;\n        if (contentControl instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n            var contentControlEnd = contentControl.reference;\n            var start = this.selection.start.clone();\n            var end = this.selection.end.clone();\n            var endElementInfo = this.selection.getElementInfo(end.currentWidget, end.offset);\n            this.selection.start.setPositionParagraph(contentControl.line, contentControl.line.getOffset(contentControl, contentControl.length));\n            this.selection.end.setPositionParagraph(contentControlEnd.line, contentControlEnd.line.getOffset(contentControlEnd, contentControlEnd.length) - 1);\n            this.initHistory('RemoveContentControl');\n            this.selection.selectPosition(start, end);\n            if (this.editorHistory) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                this.editorHistory.currentBaseHistoryInfo.markerData.push({ text: 'RemoveContentControl', type: contentControl.contentControlWidgetType });\n                this.editorHistory.currentBaseHistoryInfo.setContentControlInfo(contentControl);\n            }\n            this.removeContentControlInternal(contentControl);\n            if (this.editorHistory) {\n                this.editorHistory.updateHistory();\n            }\n            if (endElementInfo.element !== contentControl && endElementInfo.element !== contentControlEnd) {\n                this.selection.end.setPositionParagraph(endElementInfo.element.line, endElementInfo.element.line.getOffset(endElementInfo.element, endElementInfo.index));\n            }\n        }\n        this.fireContentChange();\n        //if (this.owner.documentEditorSettings.showBookmarks == true) {\n        this.viewer.updateScrollBars();\n        //}\n    };\n    /**\n     * Removes the content control if selection is in content control\n     * @returns {void}\n     * @private\n     */\n    Editor.prototype.removeContentControlInternal = function (contentControl) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl)) {\n            contentControl = this.documentHelper.owner.selection.currentContentControl;\n        }\n        if (contentControl.contentControlProperties.type == 'Picture') {\n            this.owner.renderPictureContentControlElement(this.owner, false, false);\n        }\n        var index = this.documentHelper.contentControlCollection.indexOf(contentControl);\n        if (index >= 0) {\n            this.updatePropertiesToBlock(contentControl);\n            this.documentHelper.contentControlCollection.splice(index, 1);\n            contentControl.line.children.splice(contentControl.indexInOwner, 1);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl.reference)) {\n                contentControl.reference.line.children.splice(contentControl.reference.indexInOwner, 1);\n                this.updatePropertiesToBlock(contentControl);\n            }\n        }\n        this.selection.updateContentControlHighlightSelection();\n        var element = document.getElementById(\"contenticon\");\n        var picElement = document.getElementById(this.owner.element.id + 'PICTURE_CONTENT_CONTROL');\n        if (element) {\n            element.style.display = 'none';\n        }\n        if (picElement) {\n            picElement.style.display = 'none';\n        }\n        this.viewer.updateScrollBars();\n    };\n    /**\n     * Removes the hyperlink if selection is within hyperlink.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.removeHyperlink = function () {\n        if (this.owner.isReadOnlyMode) {\n            return;\n        }\n        var selection = this.selection;\n        var fieldBegin = selection.getHyperlinkField();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(fieldBegin)) {\n            return;\n        }\n        var fieldEnd = fieldBegin.fieldEnd;\n        var fieldSeparator = fieldBegin.fieldSeparator;\n        var fieldStartPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n        fieldStartPosition.setPositionParagraph(fieldBegin.line, (fieldBegin.line).getOffset(fieldBegin, 0));\n        var blockInfo = this.selection.getParagraphInfo(fieldStartPosition);\n        var fieldStartString = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        var fieldSeparatorPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n        fieldSeparatorPosition.setPositionParagraph(fieldSeparator.line, (fieldSeparator.line).getOffset(fieldSeparator, fieldSeparator.length));\n        blockInfo = this.selection.getParagraphInfo(fieldSeparatorPosition);\n        var fieldSeparatorString = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        this.initComplexHistory('RemoveHyperlink');\n        selection.start.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 0));\n        blockInfo = this.selection.getParagraphInfo(selection.start);\n        var startIndex = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        selection.end.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 1));\n        this.delete();\n        selection.start.setPositionInternal(this.selection.getTextPosBasedOnLogicalIndex(fieldSeparatorString));\n        this.initHistory('Underline');\n        this.updateCharacterFormatWithUpdate(selection, 'underline', 'None', false);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        selection.end.setPositionInternal(this.selection.getTextPosBasedOnLogicalIndex(startIndex));\n        // Applies font color for field result.\n        this.initHistory('FontColor');\n        this.updateCharacterFormatWithUpdate(selection, 'fontColor', undefined, false);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.reLayout(selection, false);\n        selection.end.setPositionInternal(selection.start);\n        selection.start.setPositionInternal(this.selection.getTextPosBasedOnLogicalIndex(fieldStartString));\n        this.initHistory('Delete');\n        this.deleteSelectedContents(selection, false);\n        this.reLayout(selection, true);\n        // Bug 873011: Combined the field begin and field end revisions to preserve single tracking in track changes pane.\n        this.combineElementRevision(fieldSeparator.revisions, fieldEnd.revisions);\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n            this.editorHistory.updateComplexHistory();\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.updateHyperlinkFormat = function (selection) {\n        var fieldBegin = selection.getHyperlinkField();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(fieldBegin)) {\n            return;\n        }\n        var fieldEnd = fieldBegin.fieldEnd;\n        var fieldSeparator = fieldBegin.fieldSeparator;\n        selection.start.setPositionParagraph(fieldSeparator.line, (fieldSeparator.line).getOffset(fieldSeparator, fieldSeparator.length));\n        selection.end.setPositionParagraph(fieldEnd.line, (fieldEnd.line).getOffset(fieldEnd, 0));\n        this.initHistory('Underline');\n        this.updateCharacterFormatWithUpdate(selection, 'underline', 'Single', false);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.reLayout(selection, false);\n        // Applies font color for field result.\n        this.initHistory('FontColor');\n        this.isForHyperlinkFormat = true;\n        this.updateCharacterFormatWithUpdate(selection, 'fontColor', '#0563c1', false);\n        this.isForHyperlinkFormat = false;\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.reLayout(selection, false);\n    };\n    //Paste Implementation starts\n    /**\n     * Paste copied clipboard content on Paste event\n     * @param {ClipboardEvent} event - Specifies the paste event\n     * @param {any} pasteWindow - Specifies the paste window\n     * @private\n     */\n    Editor.prototype.pasteInternal = function (event, pasteWindow) {\n        this.currentPasteOptions = this.owner.defaultPasteOption;\n        this.isHtmlPaste = false;\n        if (this.documentHelper.owner.enableLocalPaste) {\n            this.paste();\n        }\n        else {\n            this.selection.isViewPasteOptions = true;\n            if (this.selection.pasteElement) {\n                this.selection.pasteElement.style.display = 'none';\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteWindow)) {\n                pasteWindow = window;\n            }\n            var textContent = '';\n            var htmlContent = '';\n            var rtfContent = '';\n            var sfdtContent = '';\n            var clipbordData = pasteWindow.clipboardData ? pasteWindow.clipboardData : event.clipboardData;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.Browser.info.name !== 'msie') {\n                rtfContent = clipbordData.getData('Text/Rtf');\n                htmlContent = clipbordData.getData('Text/Html');\n                sfdtContent = clipbordData.getData('application/json');\n            }\n            this.copiedTextContent = textContent = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.sanitizeString(clipbordData.getData('Text'));\n            this.previousCharFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n            this.previousCharFormat.copyFormat(this.selection.start.paragraph.characterFormat);\n            this.previousParaFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat();\n            this.previousParaFormat.copyFormat(this.selection.start.paragraph.paragraphFormat);\n            if (this.documentHelper.protectionType === 'FormFieldsOnly' && this.documentHelper.selection.isInlineFormFillMode()) {\n                htmlContent = '';\n                rtfContent = '';\n            }\n            if (sfdtContent !== '') {\n                this.pasteFormattedContent({ data: JSON.parse(sfdtContent) });\n            }\n            else if (rtfContent !== '') {\n                this.pasteAjax(rtfContent, '.rtf');\n            }\n            else if (htmlContent !== '') {\n                this.isHtmlPaste = true;\n                this.pasteAjax(htmlContent, '.html');\n            }\n            else if (textContent !== null && textContent !== '') {\n                this.selection.currentPasteAction = 'TextOnly';\n                this.pasteContents(textContent);\n                this.applyPasteOptions(this.currentPasteOptions, true);\n                this.copiedContent = undefined;\n                this.documentHelper.editableDiv.innerHTML = '';\n            }\n            else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.Browser.info.name !== 'msie' && clipbordData.items !== undefined && clipbordData.items.length !== 0) {\n                for (var m = 0; m < clipbordData.items.length; m++) {\n                    var item = clipbordData.items[m];\n                    if (item.type === 'image/png' || (item.type === \"image/svg+xml\" && item.kind !== 'string')) {\n                        this.pasteImage(item.getAsFile());\n                    }\n                }\n            }\n            else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.Browser.info.name === 'msie' && clipbordData.files !== undefined && clipbordData.files.length !== 0 &&\n                (clipbordData.files[0].type === 'image/png')) {\n                this.pasteImage(clipbordData.files[0]);\n            }\n            // if (textContent !== '') {\n            //     this.pasteContents(textContent);\n            //     this.documentHelper.editableDiv.innerHTML = '';\n            // }\n        }\n    };\n    Editor.prototype.pasteImage = function (imgFile) {\n        var _this = this;\n        var fileReader = new FileReader();\n        fileReader.onload = function () {\n            _this.onPasteImage(fileReader.result);\n        };\n        fileReader.readAsDataURL(imgFile);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onPasteImage = function (data) {\n        var image = document.createElement('img');\n        var editor = this;\n        image.addEventListener('load', function () {\n            editor.insertImageInternal(data, true, this.width, this.height, this.alt);\n        });\n        image.src = data;\n    };\n    Editor.prototype.pasteAjax = function (content, type) {\n        var proxy = this;\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var formObject = {\n            content: content,\n            type: type\n        };\n        var editor = this;\n        this.pasteRequestHandler = new _base_ajax_helper__WEBPACK_IMPORTED_MODULE_18__.XmlHttpRequestHandler();\n        this.owner.documentHelper.viewerContainer.focus();\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.showSpinner)(this.owner.element);\n        this.pasteRequestHandler.url = proxy.owner.serviceUrl + this.owner.serverActionSettings.systemClipboard;\n        this.pasteRequestHandler.responseType = 'json';\n        this.pasteRequestHandler.contentType = 'application/json;charset=UTF-8';\n        this.pasteRequestHandler.customHeaders = proxy.owner.headers;\n        this.pasteRequestHandler.onSuccess = this.pasteFormattedContent.bind(this);\n        this.pasteRequestHandler.onFailure = this.onPasteFailure.bind(this);\n        this.pasteRequestHandler.onError = this.onPasteFailure.bind(this);\n        var httprequestEventArgs = { serverActionType: 'SystemClipboard', headers: this.owner.headers, timeout: 0, cancel: false, withCredentials: false, clipboardData: formObject };\n        this.owner.trigger(_base_index__WEBPACK_IMPORTED_MODULE_10__.beforeXmlHttpRequestSend, httprequestEventArgs);\n        if (httprequestEventArgs.cancel) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.hideSpinner)(this.owner.element);\n        }\n        else {\n            this.pasteRequestHandler.send(formObject, httprequestEventArgs);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.pasteFormattedContent = function (result) {\n        var _this = this;\n        if (this.isPasteListUpdated) {\n            this.isPasteListUpdated = false;\n        }\n        this.pasteContents((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(result.data) ? this.copiedTextContent : _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getSfdtDocument(result.data));\n        if (this.currentPasteOptions !== 'KeepSourceFormatting') {\n            this.applyPasteOptions(this.currentPasteOptions);\n        }\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.hideSpinner)(this.owner.element);\n        setTimeout(function () {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.viewer)) {\n                _this.documentHelper.isScrollHandler = true;\n                _this.isPasteContentCheck = true;\n                _this.viewer.updateScrollBars();\n                _this.documentHelper.isScrollHandler = false;\n                _this.isPasteContentCheck = false;\n            }\n        }, 0);\n    };\n    Editor.prototype.onPasteFailure = function (result) {\n        this.owner.fireServiceFailure(result);\n        console.error(result.status, result.statusText);\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.hideSpinner)(this.owner.element);\n        this.documentHelper.updateFocus();\n    };\n    Editor.prototype.paste = function (sfdt, defaultPasteOption) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sfdt)) {\n            sfdt = this.owner.enableLocalPaste ? this.copiedData : undefined;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(defaultPasteOption)) {\n            this.currentPasteOptions = defaultPasteOption;\n        }\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        if (sfdt) {\n            var document_1 = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.getSfdtDocument(sfdt);\n            this.pasteContents(document_1, null, defaultPasteOption);\n            this.applyPasteOptions(this.currentPasteOptions);\n            this.currentPasteOptions = undefined;\n            if (this.chartType) {\n                setTimeout(function () {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.viewer)) {\n                        _this.viewer.updateScrollBars();\n                    }\n                }, 30);\n                this.chartType = false;\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getUniqueListOrAbstractListId = function (isList) {\n        if (isList && this.documentHelper.lists.length) {\n            var sortedList = this.documentHelper.lists.slice().sort(function (a, b) {\n                return a.listId - b.listId;\n            });\n            return sortedList[sortedList.length - 1].listId + 1;\n        }\n        else if (this.documentHelper.abstractLists.length) {\n            var sortedAbsList = this.documentHelper.abstractLists.slice().sort(function (a, b) {\n                return a.abstractListId - b.abstractListId;\n            });\n            return sortedAbsList[sortedAbsList.length - 1].abstractListId + 1;\n        }\n        return 0;\n    };\n    Editor.prototype.getBlocksToUpdate = function (blocks) {\n        var blcks = [];\n        for (var i = 0; i < blocks.length; i++) {\n            var obj = blocks[i];\n            if (obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]] && obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]]\n                && Object.keys(obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]]).length > 0) {\n                blcks.push(obj);\n            }\n            else if (obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]]) {\n                for (var j = 0; j < obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]].length; j++) {\n                    var currentRow = obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]][j];\n                    for (var k = 0; k < currentRow[_index__WEBPACK_IMPORTED_MODULE_19__.cellsProperty[this.keywordIndex]].length; k++) {\n                        var cell = currentRow[_index__WEBPACK_IMPORTED_MODULE_19__.cellsProperty[this.keywordIndex]][k];\n                        blcks = blcks.concat(this.getBlocksToUpdate(cell[_index__WEBPACK_IMPORTED_MODULE_19__.blocksProperty[this.keywordIndex]]));\n                    }\n                }\n            }\n        }\n        return blcks;\n    };\n    Editor.prototype.updateListIdForBlocks = function (blocks, abstractList, list, id, idToUpdate, isPrevParaListFormat, uniqueNsid) {\n        var update = false;\n        for (var i = 0; i < blocks.length; i++) {\n            var obj = blocks[i];\n            if (obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]] && obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]]\n                && Object.keys(obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]]).length > 0) {\n                var format = obj[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]];\n                var existingList = this.isNsIdMatchWithExistingAbstractList(abstractList[_base_index__WEBPACK_IMPORTED_MODULE_10__.nsidProperty]);\n                if (format[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this.keywordIndex]] === id) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(existingList)) {\n                        update = true;\n                        format[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this.keywordIndex]] = idToUpdate;\n                    }\n                    else if (isPrevParaListFormat) {\n                        update = true;\n                        format[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this.keywordIndex]] = idToUpdate;\n                        format[_base_index__WEBPACK_IMPORTED_MODULE_10__.nsidProperty] = uniqueNsid;\n                    }\n                    else {\n                        if (!format.isUpdated) {\n                            format[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this.keywordIndex]] = existingList.listId;\n                            format.isUpdated = true;\n                        }\n                        update = false;\n                    }\n                }\n            }\n            else if (obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]]) {\n                for (var j = 0; j < obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]].length; j++) {\n                    var row = obj[_index__WEBPACK_IMPORTED_MODULE_19__.rowsProperty[this.keywordIndex]][j];\n                    for (var k = 0; k < row[_index__WEBPACK_IMPORTED_MODULE_19__.cellsProperty[this.keywordIndex]].length; k++) {\n                        var cell = row[_index__WEBPACK_IMPORTED_MODULE_19__.cellsProperty[this.keywordIndex]][k];\n                        var toUpdate = this.updateListIdForBlocks(cell[_index__WEBPACK_IMPORTED_MODULE_19__.blocksProperty[this.keywordIndex]], abstractList, list, id, idToUpdate);\n                        if (!update) {\n                            update = toUpdate;\n                        }\n                    }\n                }\n            }\n        }\n        return update;\n    };\n    Editor.prototype.isNsIdMatchWithExistingAbstractList = function (nsid) {\n        for (var i = 0; i < this.documentHelper.lists.length; i++) {\n            var list = this.documentHelper.lists[i];\n            if (list.abstractList.nsid === nsid) {\n                return list;\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.updatePasteContent = function (pasteContent, sectionId) {\n        var _this = this;\n        var uniqueListId = this.getUniqueListOrAbstractListId(true);\n        if (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]].filter(function (obj) { return obj[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[_this.keywordIndex]] === uniqueListId; }).length > 0) {\n            var sortedPasteList = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]].slice().sort(function (a, b) {\n                return a[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[_this.keywordIndex]] - b[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[_this.keywordIndex]];\n            });\n            uniqueListId = sortedPasteList[sortedPasteList.length - 1][_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this.keywordIndex]] + 1;\n        }\n        var uniqueAbsLstId = this.getUniqueListOrAbstractListId(false);\n        if (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this.keywordIndex]].filter(function (obj) {\n            return obj[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[_this.keywordIndex]] === uniqueAbsLstId;\n        }).length > 0) {\n            var sortedPasteAbsList = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this.keywordIndex]].slice().sort(function (a, b) {\n                return a[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[_this.keywordIndex]] - b[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[_this.keywordIndex]];\n            });\n            uniqueAbsLstId = sortedPasteAbsList[sortedPasteAbsList.length - 1][_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[this.keywordIndex]] + 1;\n        }\n        var pastedListCount = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]].length;\n        var _loop_1 = function (k) {\n            var list = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this_1.keywordIndex]][k];\n            var abstractList = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this_1.keywordIndex]].filter(function (obj) {\n                return obj[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[_this.keywordIndex]] === list[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[_this.keywordIndex]];\n            })[0];\n            var lstDup = this_1.documentHelper.lists.filter(function (obj) {\n                return obj.listId === list[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[_this.keywordIndex]];\n            });\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(abstractList)) {\n                var isPrevParaListFormat = false;\n                var uniqueNsid = 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this_1.selection) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this_1.selection.start.paragraph)) {\n                    isPrevParaListFormat = this_1.getPreviousParagraphListFormat(this_1.selection.start.paragraph, pastedListCount);\n                    if (isPrevParaListFormat) {\n                        uniqueNsid = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.generateUniqueId(this_1.documentHelper.lists);\n                    }\n                }\n                var isUpdate = this_1.updateListIdForBlocks(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this_1.keywordIndex]][sectionId][_index__WEBPACK_IMPORTED_MODULE_19__.blocksProperty[this_1.keywordIndex]], abstractList, lstDup[0], list[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this_1.keywordIndex]], uniqueListId, isPrevParaListFormat, uniqueNsid);\n                if (isUpdate) {\n                    var absListId = abstractList[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[this_1.keywordIndex]];\n                    // iterate the list object from pasteContent and update the abstractListId with new value.\n                    for (var i = 0; i < pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this_1.keywordIndex]].length; i++) {\n                        var listObj = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this_1.keywordIndex]][i];\n                        if (listObj[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[this_1.keywordIndex]] === absListId) {\n                            listObj[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[this_1.keywordIndex]] = uniqueAbsLstId;\n                        }\n                    }\n                    abstractList[_base_index__WEBPACK_IMPORTED_MODULE_10__.abstractListIdProperty[this_1.keywordIndex]] = uniqueAbsLstId;\n                    list[_index__WEBPACK_IMPORTED_MODULE_19__.listIdProperty[this_1.keywordIndex]] = uniqueListId;\n                    if (isPrevParaListFormat && uniqueNsid !== 0) {\n                        abstractList[_base_index__WEBPACK_IMPORTED_MODULE_10__.nsidProperty] = list[_base_index__WEBPACK_IMPORTED_MODULE_10__.nsidProperty] = uniqueNsid;\n                    }\n                    uniqueListId++;\n                    uniqueAbsLstId++;\n                }\n                else {\n                    pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this_1.keywordIndex]].splice(k, 1);\n                    pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this_1.keywordIndex]].splice(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this_1.keywordIndex]].indexOf(abstractList), 1);\n                    k--;\n                }\n            }\n            out_k_1 = k;\n        };\n        var this_1 = this, out_k_1;\n        for (var k = 0; k < pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]].length; k++) {\n            _loop_1(k);\n            k = out_k_1;\n        }\n        var blocks = this.getBlocksToUpdate(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][sectionId][_index__WEBPACK_IMPORTED_MODULE_19__.blocksProperty[this.keywordIndex]]);\n        for (var i = 0; i < blocks.length; i++) {\n            var blck = blocks[i];\n            delete blck[_index__WEBPACK_IMPORTED_MODULE_19__.paragraphFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.listFormatProperty[this.keywordIndex]].isUpdated;\n        }\n    };\n    Editor.prototype.getPreviousParagraphListFormat = function (paragraph, pastedListCount) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.layout)) {\n            var previousParagraph = this.selection.getPreviousParagraphBlock(paragraph);\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph) && (previousParagraph.isEmpty() || !this.documentHelper.layout.hasValidElement(previousParagraph))) {\n                previousParagraph = this.selection.getPreviousParagraphBlock(previousParagraph);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph) && previousParagraph.paragraphFormat.listFormat.listId === -1 && pastedListCount === 1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getBlocks = function (pasteContent, isPaste, sections, comments, revision, isContextBasedPaste) {\n        var widgets = [];\n        if (typeof (pasteContent) === 'string') {\n            var startParagraph = this.selection.start.paragraph;\n            if (!this.selection.isForward) {\n                startParagraph = this.selection.end.paragraph;\n            }\n            var arr = [];\n            var txt = pasteContent;\n            txt = txt.replace(/\\r?\\n/g, '\\r');\n            arr = txt.split('\\r');\n            var widget = [];\n            var bodyWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n            bodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(bodyWidget);\n            bodyWidget.childWidgets = widget;\n            for (var i = 0; i < arr.length; i++) {\n                if (i === arr.length - 1 && arr[i].length === 0 && !this.isInsertText) {\n                    continue;\n                }\n                var currentInline = this.selection.start.currentWidget.getInline(this.selection.start.offset, 0);\n                var element = this.selection.getPreviousValidElement(currentInline.element);\n                if (element !== currentInline.element) {\n                    element = this.documentHelper.getNextValidElement(currentInline.element);\n                }\n                var insertFormat = void 0;\n                if (startParagraph.isEmpty()) {\n                    insertFormat = startParagraph.characterFormat;\n                }\n                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element) && !this.isInsertText) {\n                    insertFormat = element.characterFormat;\n                }\n                else {\n                    this.copyInsertFormat(startParagraph.characterFormat, false);\n                }\n                var insertParaFormat = void 0;\n                if (this.isInsertText && !this.selection.isEmpty) {\n                    insertParaFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat();\n                    insertParaFormat.copyFormat(this.selection.end.paragraph.paragraphFormat);\n                }\n                else {\n                    insertParaFormat = this.documentHelper.selection.copySelectionParagraphFormat();\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.previousParaFormat)) {\n                    insertParaFormat = this.previousParaFormat;\n                }\n                var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                paragraph.paragraphFormat.copyFormat(insertParaFormat);\n                var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n                if (arr[i].length > 0) {\n                    //Too many character in single line it took time past the content will cause layout performance, so spliting by space.\n                    var words = arr[i].split(/(\\s+)/);\n                    for (var j = 0; j < words.length; j++) {\n                        var textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                        textElement.characterFormat.copyFormat(insertFormat);\n                        textElement.text = words[j];\n                        line.children.push(textElement);\n                        textElement.line = line;\n                    }\n                }\n                paragraph.childWidgets.push(line);\n                paragraph.containerWidget = bodyWidget;\n                widget.push(paragraph);\n            }\n            widgets.push(bodyWidget);\n        }\n        else {\n            var parser = this.documentHelper.owner.parser;\n            parser.keywordIndex = this.keywordIndex;\n            parser.isPaste = isPaste;\n            parser.isContextBasedPaste = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isContextBasedPaste) ? isContextBasedPaste : false;\n            parser.isHtmlPaste = this.isHtmlPaste;\n            if (!isContextBasedPaste) {\n                parser.addCustomStyles(pasteContent);\n                if (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.commentsProperty[this.keywordIndex]] && pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.commentsProperty[this.keywordIndex]].length > 0) {\n                    parser.commentsCollection = new _base_dictionary__WEBPACK_IMPORTED_MODULE_14__.Dictionary();\n                    parser.commentStarts = new _base_dictionary__WEBPACK_IMPORTED_MODULE_14__.Dictionary();\n                    parser.commentEnds = new _base_dictionary__WEBPACK_IMPORTED_MODULE_14__.Dictionary();\n                    parser.parseComments(pasteContent, comments ? comments : this.documentHelper.comments);\n                }\n                if (pasteContent[_base_index__WEBPACK_IMPORTED_MODULE_10__.customXmlProperty[this.keywordIndex]] && pasteContent[_base_index__WEBPACK_IMPORTED_MODULE_10__.customXmlProperty[this.keywordIndex]].length > 0) {\n                    parser.parseCustomXml(pasteContent);\n                }\n            }\n            var bodyWidget = void 0;\n            this.selection.currentPasteAction = 'DefaultPaste';\n            for (var i = 0; i < pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]].length; i++) {\n                if (!isContextBasedPaste) {\n                    if (!this.isPasteListUpdated && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]])) {\n                        if (this.documentHelper.lists.length > 0) {\n                            this.updatePasteContent(pasteContent, i);\n                        }\n                        this.isPasteListUpdated = true;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[this.keywordIndex]])) {\n                            parser.parseAbstractList(pasteContent, this.documentHelper.abstractLists);\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[this.keywordIndex]])) {\n                            parser.parseList(pasteContent, this.documentHelper.lists);\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]])) {\n                        if (isPaste) {\n                            var revisionChanges = this.viewer.owner.revisionsInternal.changes;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(parser.revisionCollection)) {\n                                parser.revisionCollection = undefined;\n                            }\n                            if (this.isRemoteAction) {\n                                parser.revisionCollection = this.documentHelper.revisionsInternal;\n                            }\n                            else {\n                                parser.revisionCollection = new _base_dictionary__WEBPACK_IMPORTED_MODULE_14__.Dictionary();\n                            }\n                            var revisionCollection = parser.revisionCollection;\n                            if (!(this.documentHelper.owner.sfdtExportModule.copyWithTrackChange && parser.isCutPerformed)) {\n                                if (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]].length >= 1) {\n                                    for (var i_1 = 0; i_1 < pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]].length; i_1++) {\n                                        var revisionCheck = true;\n                                        if (revisionCollection.containsKey(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]][i_1][_index__WEBPACK_IMPORTED_MODULE_19__.revisionIdProperty[this.keywordIndex]])) {\n                                            if (revisionChanges.length > 0) {\n                                                for (var j_1 = 0; j_1 < revisionChanges.length; j_1++) {\n                                                    if (revisionChanges[j_1].revisionID === pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]][i_1][_index__WEBPACK_IMPORTED_MODULE_19__.revisionIdProperty[this.keywordIndex]]) {\n                                                        revisionCheck = false;\n                                                    }\n                                                }\n                                            }\n                                            if (revisionCheck && !this.isRemoteAction) {\n                                                var revision_1 = revisionCollection.get(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.revisionsProperty[this.keywordIndex]][i_1][_index__WEBPACK_IMPORTED_MODULE_19__.revisionIdProperty[this.keywordIndex]]);\n                                                revisionChanges.push(revision_1);\n                                            }\n                                        }\n                                        else {\n                                            parser.parseRevisions(pasteContent, revisionChanges);\n                                        }\n                                    }\n                                }\n                            }\n                            this.documentHelper.owner.sfdtExportModule.copyWithTrackChange = false;\n                        }\n                        else {\n                            parser.revisionCollection = this.documentHelper.revisionsInternal;\n                            parser.parseRevisions(pasteContent, revision);\n                        }\n                    }\n                }\n                bodyWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n                bodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(bodyWidget);\n                if (!isPaste || isContextBasedPaste) {\n                    sections.unshift(bodyWidget);\n                }\n                else {\n                    widgets.push(bodyWidget);\n                }\n                if (isPaste && !isContextBasedPaste && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.stylesProperty[this.keywordIndex]])) {\n                    for (var j = 0; j < pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.stylesProperty[this.keywordIndex]].length; j++) {\n                        var styleName = pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.stylesProperty[this.keywordIndex]][j][_index__WEBPACK_IMPORTED_MODULE_19__.nameProperty[this.keywordIndex]];\n                        var style = this.documentHelper.styles.findByName(styleName);\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style)) {\n                            parser.parseStyle(pasteContent, pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.stylesProperty[this.keywordIndex]][j], this.documentHelper.styles);\n                        }\n                    }\n                }\n                parser.parseBody(pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.blocksProperty[this.keywordIndex]], bodyWidget.childWidgets, undefined, undefined, undefined, pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.stylesProperty[this.keywordIndex]]);\n                if (((pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.lastParagraphMarkCopiedProperty[this.keywordIndex]] || this.owner.enableLocalPaste) && this.selection.start.paragraph.isEmpty() && this.documentHelper.pages.length == 1 && this.documentHelper.pages[0].bodyWidgets[0].childWidgets.length == 1)\n                    || (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.sectionFormatProperty[this.keywordIndex]]\n                        && pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.sectionFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_19__.numberOfColumnsProperty[this.keywordIndex]] > 1) || (pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.sectionFormatProperty[this.keywordIndex]]\n                    && pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.sectionFormatProperty[this.keywordIndex]][_base_index__WEBPACK_IMPORTED_MODULE_10__.breakCodeProperty[this.keywordIndex]] === 'NoBreak')) {\n                    parser.parseSectionFormat(this.keywordIndex, pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.sectionsProperty[this.keywordIndex]][i][_index__WEBPACK_IMPORTED_MODULE_19__.sectionFormatProperty[this.keywordIndex]], bodyWidget.sectionFormat);\n                }\n                if (isPaste && !this.isRemoteAction && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(comments)) {\n                    var existingCommentIds = [];\n                    for (var i_2 = 0; i_2 < this.documentHelper.comments.length; i_2++) {\n                        existingCommentIds.push(this.documentHelper.comments[i_2].commentId);\n                    }\n                    // Updating unique Comment Id when pasting the comments with existingCommentId.\n                    for (var j_2 = 0; j_2 < comments.length; j_2++) {\n                        var comment = comments[j_2];\n                        if (existingCommentIds.indexOf(comment.commentId) !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(comment.commentStart) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(comment.commentEnd)) {\n                            var newCommentId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n                            comment.commentId = comment.commentStart.commentId = comment.commentEnd.commentId = newCommentId;\n                        }\n                        this.documentHelper.comments.push(comment);\n                    }\n                }\n                parser.isPaste = false;\n                parser.isHtmlPaste = false;\n                parser.isContextBasedPaste = false;\n            }\n            if ((pasteContent[_index__WEBPACK_IMPORTED_MODULE_19__.lastParagraphMarkCopiedProperty[this.keywordIndex]] && !isContextBasedPaste) || this.owner.documentEditorSettings.pasteAsNewParagraph) {\n                this.isLastParaMarkCopied = true;\n                var paragraphWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                bodyWidget.childWidgets.push(paragraphWidget);\n            }\n        }\n        if (this.currentPasteOptions === 'MergeWithExistingFormatting' && !isContextBasedPaste) {\n            this.applyMergeFormat(widgets);\n        }\n        return widgets;\n    };\n    Editor.prototype.applyMergeFormat = function (bodyWidgets) {\n        var startParagraph = this.selection.start.paragraph;\n        var currentInline = this.selection.start.currentWidget.getInline(this.selection.start.offset, 0);\n        var element = this.selection.getPreviousValidElement(currentInline.element);\n        var insertFormat = element ? element.characterFormat :\n            this.copyInsertFormat(startParagraph.characterFormat, true, startParagraph);\n        var insertParaFormat = this.documentHelper.selection.paragraphFormat;\n        for (var k = 0; k < bodyWidgets.length; k++) {\n            var widgets = bodyWidgets[k].childWidgets;\n            for (var i = 0; i < widgets.length; i++) {\n                var widget = widgets[i];\n                if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    this.applyParaFormatInternal(widget.paragraphFormat, insertParaFormat);\n                    this.applyFormatInternal(widget, insertFormat);\n                }\n                else {\n                    for (var j = 0; j < widget.childWidgets.length; j++) {\n                        var row = widget.childWidgets[j];\n                        for (var k_1 = 0; k_1 < row.childWidgets.length; k_1++) {\n                            var cell = row.childWidgets[k_1];\n                            for (var l = 0; l < cell.childWidgets.length; l++) {\n                                this.applyFormatInternal(cell.childWidgets[l], insertFormat);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.applyParaFormatInternal = function (paragraphFormat, insertedParaFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.leftIndent)) {\n            paragraphFormat.leftIndent = insertedParaFormat.leftIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.rightIndent)) {\n            paragraphFormat.rightIndent = insertedParaFormat.rightIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.firstLineIndent)) {\n            paragraphFormat.firstLineIndent = insertedParaFormat.firstLineIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.textAlignment)) {\n            paragraphFormat.textAlignment = insertedParaFormat.textAlignment;\n        }\n        else {\n            paragraphFormat.textAlignment = 'Left';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.outlineLevel)) {\n            paragraphFormat.outlineLevel = insertedParaFormat.outlineLevel;\n        }\n        else {\n            paragraphFormat.outlineLevel = 'BodyText';\n        }\n        if (insertedParaFormat.beforeSpacing === -1) {\n            paragraphFormat.beforeSpacing = 0;\n        }\n        else {\n            paragraphFormat.beforeSpacing = insertedParaFormat.beforeSpacing;\n        }\n        if (insertedParaFormat.afterSpacing === -1) {\n            paragraphFormat.afterSpacing = 0;\n        }\n        else {\n            paragraphFormat.afterSpacing = insertedParaFormat.afterSpacing;\n        }\n        if (insertedParaFormat.lineSpacing === 0) {\n            paragraphFormat.lineSpacing = 1;\n        }\n        else {\n            paragraphFormat.lineSpacing = insertedParaFormat.lineSpacing;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.lineSpacingType)) {\n            paragraphFormat.lineSpacingType = insertedParaFormat.lineSpacingType;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.bidi)) {\n            paragraphFormat.bidi = insertedParaFormat.bidi;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.spaceAfterAuto)) {\n            paragraphFormat.spaceAfterAuto = insertedParaFormat.spaceAfterAuto;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.spaceBeforeAuto)) {\n            paragraphFormat.spaceBeforeAuto = insertedParaFormat.spaceBeforeAuto;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.keepWithNext)) {\n            paragraphFormat.keepWithNext = insertedParaFormat.keepWithNext;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.keepLinesTogether)) {\n            paragraphFormat.keepLinesTogether = insertedParaFormat.keepLinesTogether;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.widowControl)) {\n            paragraphFormat.widowControl = insertedParaFormat.widowControl;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertedParaFormat.contextualSpacing)) {\n            paragraphFormat.contextualSpacing = insertedParaFormat.contextualSpacing;\n        }\n        if (paragraphFormat.tabs) {\n            paragraphFormat.tabs = [];\n        }\n    };\n    Editor.prototype.applyFormatInternal = function (widget, insertFormat) {\n        if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            for (var j = 0; j < widget.childWidgets.length; j++) {\n                var lineWidget = widget.childWidgets[j];\n                for (var k = 0; k < lineWidget.children.length; k++) {\n                    var inlineCharacterFormat = lineWidget.children[k].characterFormat;\n                    var characterFormat = inlineCharacterFormat.cloneFormat();\n                    if (characterFormat.bold) {\n                        lineWidget.children[k].characterFormat.bold = characterFormat.bold;\n                    }\n                    if (characterFormat.italic) {\n                        lineWidget.children[k].characterFormat.italic = characterFormat.italic;\n                    }\n                    if (characterFormat.underline !== 'None') {\n                        lineWidget.children[k].characterFormat.underline = characterFormat.underline;\n                    }\n                    if (this.currentPasteOptions === 'MergeWithExistingFormatting' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertFormat)) {\n                        if (insertFormat.bold) {\n                            lineWidget.children[k].characterFormat.bold = insertFormat.bold;\n                        }\n                        if (insertFormat.italic) {\n                            lineWidget.children[k].characterFormat.italic = insertFormat.italic;\n                        }\n                        if (insertFormat.underline !== 'None') {\n                            lineWidget.children[k].characterFormat.underline = insertFormat.underline;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontColor !== insertFormat.fontColor) {\n                            lineWidget.children[k].characterFormat.fontColor = insertFormat.fontColor;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontSize !== insertFormat.fontSize) {\n                            lineWidget.children[k].characterFormat.fontSize = insertFormat.fontSize;\n                            lineWidget.children[k].characterFormat.fontSizeBidi = insertFormat.fontSizeBidi;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontFamily !== insertFormat.fontFamily) {\n                            lineWidget.children[k].characterFormat.fontFamily = insertFormat.fontFamily;\n                            lineWidget.children[k].characterFormat.fontFamilyBidi = insertFormat.fontFamilyBidi;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontFamilyAscii !== insertFormat.fontFamilyAscii) {\n                            lineWidget.children[k].characterFormat.fontFamilyAscii = insertFormat.fontFamilyAscii;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontFamilyFarEast !== insertFormat.fontFamilyFarEast) {\n                            lineWidget.children[k].characterFormat.fontFamilyFarEast = insertFormat.fontFamilyFarEast;\n                        }\n                        if (lineWidget.children[k].characterFormat.fontFamilyAscii !== insertFormat.fontFamilyAscii) {\n                            lineWidget.children[k].characterFormat.fontFamilyAscii = insertFormat.fontFamilyAscii;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            for (var j = 0; j < widget.childWidgets.length; j++) {\n                var rowWidget = widget.childWidgets[j];\n                for (var k = 0; k < rowWidget.childWidgets.length; k++) {\n                    var cellWidget = rowWidget.childWidgets[k];\n                    for (var l = 0; l < cellWidget.childWidgets.length; l++) {\n                        this.applyFormatInternal(cellWidget.childWidgets[l], insertFormat);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.applyPasteOptions = function (options, isPasteOptionTextOnly) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.copiedContent) || this.copiedTextContent === '' || isPasteOptionTextOnly) {\n            return;\n        }\n        //this.isSkipHistory = true;\n        this.currentPasteOptions = options;\n        var start = this.selection.isForward ? this.selection.start : this.selection.end;\n        var currentFormat = start.paragraph.paragraphFormat;\n        var copiedContent = this.copiedContent;\n        var copiedTextContent = this.copiedTextContent;\n        if (this.editorHistory && this.editorHistory.canUndo()) {\n            this.editorHistory.undo();\n            this.editorHistory.redoStack.pop();\n        }\n        this.copiedContent = copiedContent;\n        this.copiedTextContent = copiedTextContent;\n        this.selection.isViewPasteOptions = true;\n        // }\n        switch (options) {\n            case 'KeepSourceFormatting':\n                this.pasteContents(this.copiedContent !== '' ? this.copiedContent : this.copiedTextContent);\n                break;\n            case 'MergeWithExistingFormatting':\n                this.pasteContents(this.copiedContent !== '' ? this.copiedContent : this.copiedTextContent, currentFormat);\n                break;\n            case 'KeepTextOnly':\n                this.pasteContents(this.copiedTextContent);\n                break;\n        }\n        //this.isSkipHistory = false;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.applyTablePasteOptions = function (options) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.copiedContent) || this.copiedTextContent === '') {\n            return;\n        }\n        this.isPaste = true;\n        var copiedContent = this.copiedContent !== '' ? this.copiedContent : this.copiedTextContent;\n        if (this.editorHistory && this.editorHistory.canUndo()) {\n            // this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.editorHistory.undo();\n            this.editorHistory.redoStack.pop();\n            // this.isSkipOperationsBuild = false;\n        }\n        var widgets = this.getBlocks(copiedContent, true);\n        var currentFormat = this.selection.start.paragraph.paragraphFormat;\n        switch (options) {\n            case 'NestTable':\n                this.pasteAsNestedTable(widgets, currentFormat);\n                break;\n            case 'InsertAsRows':\n                this.pasteAsNewRow(widgets[0].childWidgets[0]);\n                break;\n            case 'InsertAsColumns':\n                this.pasteAsNewColumn(widgets[0].childWidgets[0]);\n                break;\n            case 'OverwriteCells':\n                this.pasteOverwriteCell(widgets[0].childWidgets[0]);\n                break;\n        }\n        this.isPaste = false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.pasteContents = function (content, currentFormat, pasteOptions) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(content.optimizeSfdt) && content.optimizeSfdt) {\n            this.keywordIndex = 1;\n        }\n        else {\n            this.keywordIndex = 0;\n        }\n        if (typeof (content) !== 'string') {\n            this.copiedContent = content;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper)) {\n            if (this.documentHelper.protectionType === 'FormFieldsOnly' && this.documentHelper.selection.isInlineFormFillMode()) {\n                var inline = this.selection.getCurrentFormField();\n                var resultText = this.getFieldResultText();\n                var maxLength = inline.formFieldData.maxLength;\n                var selectedTextLength = this.documentHelper.selection.text.length;\n                if (maxLength > 0) {\n                    if (selectedTextLength === 0) {\n                        var contentlength = maxLength - resultText.length;\n                        content = content.substring(0, contentlength);\n                    }\n                    else if (selectedTextLength > 0) {\n                        content = content.substring(0, selectedTextLength);\n                    }\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(content[_base_index__WEBPACK_IMPORTED_MODULE_10__.imagesProperty[this.keywordIndex]])) {\n                var images = content[_base_index__WEBPACK_IMPORTED_MODULE_10__.imagesProperty[this.keywordIndex]];\n                if (this.documentHelper.images.length > 0) {\n                    this.pasteImageIndex = new _base_dictionary__WEBPACK_IMPORTED_MODULE_14__.Dictionary();\n                    var newImages = {};\n                    for (var img in images) {\n                        var newIndex = (Math.max.apply(Math, this.documentHelper.images.keys) + 1) + parseInt(img);\n                        newImages[newIndex] = images[img];\n                        this.pasteImageIndex.add(img, newIndex.toString());\n                    }\n                    images = newImages;\n                }\n                this.documentHelper.owner.parser.parseImages(images);\n            }\n            var pastedComments = [];\n            var widgets = this.getBlocks(content, true, undefined, pastedComments);\n            this.pasteContentsInternal(widgets, true, currentFormat, pasteOptions, pastedComments);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pastedComments) && pastedComments.length > 0) {\n                this.documentHelper.layout.layoutComments(pastedComments);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.pasteImageIndex)) {\n                this.pasteImageIndex.destroy();\n            }\n            this.pasteImageIndex = undefined;\n            this.isInsertField = false;\n            this.isPasteListUpdated = false;\n            this.isLastParaMarkCopied = false;\n        }\n    };\n    Editor.prototype.pasteContentsInternal = function (widgets, isPaste, currentFormat, pasteOptions, pastedComments) {\n        this.isPaste = isPaste;\n        var selection = this.documentHelper.selection;\n        if (selection.start.paragraph.isInsideTable && selection.end.paragraph.isInsideTable && !this.documentHelper.isDragging) {\n            var isTablePaste = false;\n            if (widgets.length === 1) {\n                var childWidgets = widgets[0].childWidgets;\n                if ((childWidgets.length < 3)) {\n                    if (childWidgets.length === 1 && childWidgets[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget || childWidgets.length === 2 && childWidgets[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget && childWidgets[1].isEmpty()) {\n                        isTablePaste = true;\n                    }\n                }\n            }\n            if (isTablePaste) {\n                var startCell = selection.start.paragraph.associatedCell;\n                var endCell = selection.end.paragraph.associatedCell;\n                var newTable = widgets[0].childWidgets[0];\n                // tslint:disable-next-line:max-line-length\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pasteOptions) || (pasteOptions === 'MergeWithExistingFormatting') || (pasteOptions === 'KeepSourceFormatting') || (pasteOptions === 'KeepTextOnly')) {\n                    if (startCell.ownerTable.equals(endCell.ownerTable)) {\n                        if (selection.start.paragraph.associatedCell.rowIndex === 0 && selection.end.paragraph.associatedCell.rowIndex === 0\n                            && startCell.equals(endCell) && !this.selection.isCellSelected(startCell, selection.start, selection.end)) {\n                            this.selection.currentPasteAction = 'InsertAsColumns';\n                            this.pasteAsNewColumn(newTable);\n                        }\n                        else {\n                            this.selection.currentPasteAction = 'OverwriteCells';\n                            this.pasteOverwriteCell(newTable);\n                        }\n                    }\n                }\n                else {\n                    switch (pasteOptions) {\n                        case 'InsertAsColumns': {\n                            this.selection.currentPasteAction = 'InsertAsColumns';\n                            this.pasteAsNewColumn(newTable);\n                            break;\n                        }\n                        case 'OverwriteCells': {\n                            this.selection.currentPasteAction = 'OverwriteCells';\n                            this.pasteOverwriteCell(newTable);\n                            break;\n                        }\n                        case 'NestTable': {\n                            this.selection.currentPasteAction = 'NestTable';\n                            this.pasteAsNestedTable(widgets);\n                            break;\n                        }\n                        case 'InsertAsRows': {\n                            this.selection.currentPasteAction = 'InsertAsRows';\n                            this.pasteAsNewRow(newTable);\n                            break;\n                        }\n                    }\n                }\n                this.isPaste = false;\n                return;\n            }\n        }\n        var commentStartToInsert;\n        //if (!this.isSkipHistory) {\n        commentStartToInsert = this.checkAndRemoveComments();\n        //}\n        this.defaultPaste(widgets, currentFormat, pastedComments);\n        //if (!this.isSkipHistory) {\n        this.updateHistoryForComments(commentStartToInsert);\n        //}\n    };\n    Editor.prototype.defaultPaste = function (widgets, currentFormat, pastedComments) {\n        var _a;\n        var selection = this.documentHelper.selection;\n        var isRemoved = true;\n        var layoutWholeDocument = false;\n        //if (!this.isSkipHistory) {\n        this.initComplexHistory('Paste');\n        //}\n        if (this.documentHelper.isListTextSelected) {\n            var paragraph = selection.start.paragraph;\n            if (paragraph.paragraphFormat.listFormat && paragraph.paragraphFormat.listFormat.listId !== -1) {\n                this.onApplyList(undefined);\n            }\n        }\n        //if (!this.isSkipHistory) {\n        this.initHistory('Paste');\n        //}\n        if ((!selection.isEmpty && (!this.owner.documentHelper.isDragging || !this.owner.selection.isImageSelected)) || this.documentHelper.isListTextSelected) {\n            isRemoved = this.removeSelectedContentInternal(selection, selection.start, selection.end);\n        }\n        if (isRemoved) {\n            layoutWholeDocument = this.pasteContent(widgets, currentFormat);\n            if (this.owner.enableTrackChanges && this.isInsertingTOC && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.documentHelper.blockToShift)) {\n                this.owner.documentHelper.blockToShift = this.selection.start.paragraph;\n            }\n            if (this.isRemoteAction) {\n                this.updatePasteRevision();\n                this.owner.trackChangesPane.updateTrackChanges();\n            }\n        }\n        else if (this.editorHistory) {\n            this.editorHistory.currentBaseHistoryInfo = undefined;\n        }\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            if (this.editorHistory.currentBaseHistoryInfo) {\n                if (this.editorHistory.currentBaseHistoryInfo.action === 'Paste') {\n                    if (this.editorHistory.currentBaseHistoryInfo.endRevisionLogicalIndex) {\n                        this.editorHistory.currentBaseHistoryInfo.endRevisionLogicalIndex = undefined;\n                    }\n                    var start = this.selection.getTextPosBasedOnLogicalIndex(this.editorHistory.currentBaseHistoryInfo.insertPosition);\n                    var end = this.selection.getTextPosBasedOnLogicalIndex(this.editorHistory.currentBaseHistoryInfo.endPosition);\n                    if (!this.isRemoteAction) {\n                        var documentContent = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), start.currentWidget, start.offset, end.currentWidget, end.offset, false, true) : {};\n                        this.editorHistory.currentBaseHistoryInfo.pasteContent = documentContent;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(pastedComments) && pastedComments.length > 0) {\n                        (_a = this.editorHistory.currentBaseHistoryInfo.pastedComments).push.apply(_a, pastedComments);\n                    }\n                }\n            }\n            this.editorHistory.updateHistory();\n            this.editorHistory.updateComplexHistory();\n            selection.isHighlightContentControlEditRegion = true;\n        }\n        else {\n            this.reLayout(selection, selection.isEmpty);\n        }\n        if (layoutWholeDocument) {\n            if (this.selection.pasteElement) {\n                this.selection.pasteElement.style.display = 'none';\n            }\n            if (!this.restrictLayout) {\n                this.layoutWholeDocument(true);\n            }\n        }\n        this.isPaste = false;\n    };\n    Editor.prototype.pasteAsNewColumn = function (data) {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        if (this.selection.start.paragraph.isInsideTable) {\n            if (this.checkIsNotRedoing()) {\n                this.initHistory('PasteColumn');\n            }\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var table = startCell.ownerRow.ownerTable.combineWidget(this.owner.viewer);\n            if (this.editorHistory) {\n                //Clones the entire table to preserve in history.\n                var clonedTable = this.cloneTableToHistoryInfo(table);\n            }\n            this.selection.owner.isLayoutEnabled = false;\n            var cloneTable = data.clone();\n            var rowWidget = cloneTable.childWidgets[0];\n            var numberOfRows = cloneTable.childWidgets.length;\n            var numberOfColumns = rowWidget.childWidgets.length;\n            var cellIndex = startCell.columnIndex;\n            var startParagraph = undefined;\n            var newCell = undefined;\n            var columnCount = numberOfColumns;\n            var rowSpannedCells = [];\n            if (numberOfRows > table.childWidgets.length) {\n                this.addRows(numberOfRows - table.childWidgets.length, table);\n                this.tableUpdate(table);\n            }\n            else if (table.childWidgets.length > numberOfRows) {\n                this.addRows(table.childWidgets.length - numberOfRows, cloneTable, table);\n                this.tableUpdate(table);\n            }\n            for (var i = 0; i < columnCount; i++) {\n                for (var j = 0; j < table.childWidgets.length; j++) {\n                    var row = table.childWidgets[j];\n                    var rowWidget_1 = cloneTable.childWidgets[j];\n                    var cellWidget = rowWidget_1.childWidgets[i];\n                    var cell = row.childWidgets[startCell.columnIndex];\n                    newCell = this.createColumn(this.selection.getLastParagraph(startCell));\n                    newCell.index = j;\n                    newCell.rowIndex = row.index;\n                    newCell.containerWidget = row;\n                    var prevCell = row.previousWidget;\n                    var spannedCell = this.rowspannedCollection(row, rowSpannedCells);\n                    if (cell != null) {\n                        newCell.cellFormat.copyFormat(cell.cellFormat);\n                        newCell.cellFormat.rowSpan = 1;\n                    }\n                    else if (spannedCell.length > 0) {\n                        for (var z = 0; z < spannedCell.length; z++) {\n                            if (prevCell.rowIndex + (spannedCell[z].cellFormat.rowSpan - 1) >= row.rowIndex) {\n                                newCell.cellFormat.copyFormat(spannedCell[z].cellFormat);\n                                newCell.cellFormat.rowSpan = 1;\n                            }\n                        }\n                    }\n                    cellWidget.containerWidget = newCell.containerWidget;\n                    newCell.childWidgets = cellWidget.childWidgets;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startParagraph)) {\n                        startParagraph = this.selection.getFirstParagraph(newCell);\n                    }\n                    if (cellIndex === 0) {\n                        row.childWidgets.splice(i, 0, newCell);\n                    }\n                    else {\n                        this.insertSpannedCells(row, rowSpannedCells, newCell, cellIndex);\n                    }\n                }\n            }\n            this.tableReLayout(table, startParagraph, newCell, true);\n        }\n    };\n    Editor.prototype.pasteAsNestedTable = function (widgets, currentFormat) {\n        var data = widgets[0].childWidgets[0];\n        if (this.selection.start.paragraph.isInsideTable) {\n            if (this.checkIsNotRedoing()) {\n                this.initHistory('PasteNested');\n            }\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var table = startCell.ownerRow.ownerTable.combineWidget(this.owner.viewer);\n            if (this.editorHistory) {\n                //Clones the entire table to preserve in history.\n                this.cloneTableToHistoryInfo(table);\n            }\n            var startParagraph = undefined;\n            var dataTable = data.clone();\n            var endCell = this.selection.end.paragraph.containerWidget;\n            var pasteCell = void 0;\n            if (startCell != endCell) {\n                var row = startCell.ownerRow;\n                while (row != endCell.ownerRow.nextRow) {\n                    for (var cellIndex = startCell.columnIndex; cellIndex <= endCell.columnIndex; cellIndex++) {\n                        pasteCell = row.childWidgets[cellIndex];\n                        var clonedTable = dataTable.clone();\n                        var newPara = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                        pasteCell.childWidgets = [];\n                        pasteCell.childWidgets[0] = clonedTable;\n                        pasteCell.childWidgets[1] = newPara;\n                        newPara.containerWidget = pasteCell;\n                        clonedTable.containerWidget = pasteCell;\n                        clonedTable.index = 0;\n                        newPara.index = 1;\n                        row.childWidgets[cellIndex] = pasteCell;\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startParagraph)) {\n                            startParagraph = this.selection.getFirstParagraph(pasteCell);\n                        }\n                    }\n                    row = row.nextRow;\n                }\n                this.tableReLayout(table, startParagraph, pasteCell);\n            }\n            else {\n                this.defaultPaste(widgets, currentFormat);\n            }\n        }\n    };\n    Editor.prototype.pasteOverwriteCell = function (data) {\n        if (this.selection.start.paragraph.isInsideTable) {\n            if (this.checkIsNotRedoing()) {\n                this.initHistory('PasteOverwrite');\n            }\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var table = startCell.ownerRow.ownerTable.combineWidget(this.owner.viewer);\n            if (this.editorHistory) {\n                //Clones the entire table to preserve in history.\n                this.cloneTableToHistoryInfo(table);\n            }\n            var cloneTable = data.clone();\n            // let rowWidget: TableRowWidget = cloneTable.childWidgets[0] as TableRowWidget;\n            var numberOfRows = cloneTable.childWidgets.length;\n            var endCell = this.getOwnerCell(!this.selection.isForward);\n            // let columnCount: number = numberOfColumns;\n            // let newCell: TableCellWidget = undefined;\n            var coloumnIndexPaste = startCell.columnIndex;\n            var rowIndexPaste = startCell.rowIndex;\n            var startParagraph = undefined;\n            var row = this.selection.start.paragraph.associatedCell.ownerRow;\n            var rowWidget = cloneTable.childWidgets[0];\n            var newCells = void 0; // = rowWidget.childWidgets[0] as TableCellWidget;\n            var numberOfColumns = rowWidget.childWidgets.length;\n            var row2 = startCell.ownerRow;\n            if (startCell != endCell) {\n                var k = 0;\n                var rowSpan = void 0;\n                var rowSpanIndex = void 0;\n                var columnSpan = void 0;\n                var cloneCells = void 0;\n                while (row2 != endCell.ownerRow.nextRow) {\n                    rowWidget = cloneTable.childWidgets[k] || cloneTable.childWidgets[k = 0];\n                    var rowWidgetLength = rowWidget.childWidgets.length;\n                    var cellIndexSE = 0;\n                    for (var cellIndex = startCell.columnIndex; cellIndex <= endCell.columnIndex; cellIndex++) {\n                        rowWidget = cloneTable.childWidgets[k];\n                        if (rowSpan > 1 && rowSpanIndex === cellIndex) {\n                            cellIndex++;\n                            rowSpan--;\n                            rowSpanIndex = null;\n                        }\n                        if (columnSpan > 1 && cellIndexSE >= (rowWidgetLength - (columnSpan - 1))) {\n                            columnSpan = 1;\n                            cellIndex = cellIndex + (columnSpan - 1);\n                            cellIndexSE = 0;\n                        }\n                        newCells = rowWidget.childWidgets[cellIndexSE] || rowWidget.childWidgets[cellIndexSE = 0];\n                        cloneCells = newCells.clone();\n                        var pasteCell = row2.getCell(row2.index, cellIndex);\n                        for (var x = 0; x < cloneCells.childWidgets.length; x++) {\n                            var newPara = cloneCells.childWidgets[x];\n                            newPara.containerWidget = pasteCell;\n                            cloneCells.childWidgets[x] = newPara;\n                        }\n                        pasteCell.childWidgets = cloneCells.childWidgets;\n                        if (newCells.cellFormat.rowSpan > 1) {\n                            rowSpan = newCells.cellFormat.rowSpan;\n                            rowSpanIndex = cellIndex;\n                        }\n                        if (newCells.cellFormat.columnSpan > 1) {\n                            columnSpan = newCells.cellFormat.columnSpan;\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startParagraph)) {\n                            startParagraph = this.selection.getFirstParagraph(cloneCells);\n                        }\n                        cellIndexSE++;\n                    }\n                    row2 = row2.nextRow;\n                    k++;\n                }\n                this.tableReLayout(table, startParagraph, cloneCells, true);\n            }\n            else {\n                var rowsToAdd = void 0;\n                var rowSpan = void 0;\n                var rowSpanIndex = void 0;\n                var pasteCell = void 0;\n                if (numberOfRows > table.childWidgets.length - rowIndexPaste) {\n                    rowsToAdd = numberOfRows - table.childWidgets.length + rowIndexPaste;\n                    this.addRows(rowsToAdd, table);\n                }\n                for (var i = 0; i < numberOfRows; i++) {\n                    var cellIndex = startCell.columnIndex;\n                    rowWidget = cloneTable.childWidgets[i];\n                    var numberOfColumns_1 = rowWidget.childWidgets.length;\n                    for (var cellIterate = 0; cellIterate < numberOfColumns_1; cellIterate++) {\n                        newCells = rowWidget.childWidgets[cellIterate];\n                        var cloneCells = newCells.clone();\n                        if (rowSpan > 1 && rowSpanIndex === cellIndex) {\n                            cellIndex++;\n                            rowSpan--;\n                            rowSpanIndex = null;\n                        }\n                        pasteCell = row.childWidgets[cellIndex];\n                        if (!pasteCell) {\n                            pasteCell = cloneCells;\n                            pasteCell.containerWidget = row;\n                            pasteCell.index = cellIndex;\n                        }\n                        for (var index = 0; index < cloneCells.childWidgets.length; index++) {\n                            var newPara = cloneCells.childWidgets[index];\n                            newPara.containerWidget = pasteCell;\n                            cloneCells.childWidgets[index] = newPara;\n                        }\n                        pasteCell.childWidgets = cloneCells.childWidgets;\n                        if (newCells.cellFormat.rowSpan > 1) {\n                            rowSpan = newCells.cellFormat.rowSpan; //getting span\n                            rowSpanIndex = cellIndex;\n                        }\n                        row.childWidgets.splice(cellIndex++, 1, pasteCell);\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startParagraph)) {\n                            startParagraph = this.selection.getFirstParagraph(pasteCell);\n                        }\n                    }\n                    row = row.nextRow;\n                }\n                this.tableReLayout(table, startParagraph, pasteCell, true);\n            }\n        }\n    };\n    Editor.prototype.pasteAsNewRow = function (data) {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        if (this.checkIsNotRedoing()) {\n            this.initHistory('PasteRow');\n        }\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var startCell = this.getOwnerCell(this.selection.isForward).getSplitWidgets()[0];\n        var endCell = this.getOwnerCell(!this.selection.isForward).getSplitWidgets()[0];\n        var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n        var row = endCell.ownerRow;\n        if (this.editorHistory) {\n            this.cloneTableToHistoryInfo(table);\n        }\n        var rowCount = this.getRowCountToInsert();\n        var columncount = this.getColumnCountToInsert();\n        var rows = [];\n        var index = row.rowIndex;\n        index++;\n        var pasteRowCount = data.childWidgets.length;\n        for (var i = 0; i < pasteRowCount; i++) {\n            var newRow = data.childWidgets[i].clone();\n            if (this.owner.enableTrackChanges) {\n                this.insertRevision(newRow.rowFormat, 'Insertion');\n            }\n            rows.push(newRow);\n        }\n        table.insertTableRowsInternal(rows, index, false);\n        var cellWidget = undefined;\n        var paragraphWidget = undefined;\n        if ((table.childWidgets[index] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget)) {\n            cellWidget = table.childWidgets[index].firstChild;\n            paragraphWidget = this.selection.getFirstParagraph(cellWidget);\n        }\n        else {\n            var widget = undefined;\n            while (!(widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget)) {\n                widget = table.nextRenderedWidget;\n            }\n            paragraphWidget = this.documentHelper.getFirstParagraphInFirstCell(widget);\n        }\n        this.copyContent(table);\n        this.documentHelper.layout.reLayoutTable(table);\n        this.selection.selectParagraphInternal(paragraphWidget, true);\n        this.reLayout(this.selection, true);\n    };\n    Editor.prototype.tableUpdate = function (table) {\n        table.isGridUpdated = false;\n        table.calculateGrid();\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n    };\n    Editor.prototype.rowspannedCollection = function (row, rowSpannedCells) {\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            var rowCell = row.childWidgets[j];\n            if (rowCell.cellFormat.rowSpan > 1) {\n                rowSpannedCells.push(rowCell);\n            }\n        }\n        return rowSpannedCells;\n    };\n    Editor.prototype.insertSpannedCells = function (row, rowSpannedCells, newCell, cellIndex) {\n        var isCellInserted = false;\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            var rowCell = row.childWidgets[j];\n            // Add the row spanned cells to colection for adding column before / after row spnned cells.\n            if (rowCell.cellFormat.rowSpan > 1) {\n                rowSpannedCells.push(rowCell);\n            }\n            if (rowCell.columnIndex + rowCell.cellFormat.columnSpan === cellIndex) {\n                row.childWidgets.splice(rowCell.cellIndex + 1, 0, newCell);\n                isCellInserted = true;\n            }\n            else if (cellIndex > rowCell.columnIndex && rowCell.columnIndex + rowCell.cellFormat.columnSpan > cellIndex\n                && cellIndex < rowCell.columnIndex + rowCell.cellFormat.columnSpan) {\n                row.childWidgets.splice(rowCell.cellIndex + 1, 0, newCell);\n                isCellInserted = true;\n            }\n            if (isCellInserted) {\n                break;\n            }\n        }\n        // If the cell is not inserted for row, then check for row spanned cells.\n        if (!isCellInserted) {\n            if (rowSpannedCells.length > 0) {\n                for (var k = 0; k < rowSpannedCells.length; k++) {\n                    var rowSpannedCell = rowSpannedCells[k];\n                    if (rowSpannedCell.ownerRow !== row\n                        && row.rowIndex <= rowSpannedCell.ownerRow.rowIndex + rowSpannedCell.cellFormat.rowSpan - 1) {\n                        if (rowSpannedCell.columnIndex + rowSpannedCell.cellFormat.columnSpan === cellIndex) {\n                            if (rowSpannedCell.cellIndex > row.childWidgets.length) {\n                                row.childWidgets.push(newCell);\n                            }\n                            else {\n                                row.childWidgets.splice(rowSpannedCell.cellIndex + 1, 0, newCell);\n                            }\n                            isCellInserted = true;\n                        }\n                        else if (cellIndex > rowSpannedCell.columnIndex &&\n                            rowSpannedCell.columnIndex + rowSpannedCell.cellFormat.columnSpan > cellIndex\n                            && cellIndex < rowSpannedCell.columnIndex + rowSpannedCell.cellFormat.columnSpan) {\n                            row.childWidgets.splice(rowSpannedCell.columnIndex, 0, newCell);\n                            isCellInserted = true;\n                        }\n                    }\n                    if (isCellInserted) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.addRows = function (count, table, ownerTable) {\n        var rowPlacement = 'Below';\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        var isInsertRow = false;\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var endPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        var rows = table.childWidgets.length;\n        var rowWidget = table.childWidgets[rows - 1];\n        var column = rowWidget.childWidgets.length;\n        var cloneTable = ownerTable ? ownerTable : table;\n        if (startPos.paragraph.isInsideTable) {\n            var startCell = this.getOwnerCell(this.selection.isForward).getSplitWidgets()[0];\n            var endCell = rowWidget.childWidgets[column - 1];\n            var row = endCell.ownerRow;\n            this.rowInsertion(count, rowPlacement, startCell, endCell, row, table, isInsertRow);\n        }\n        //this.reLayout(this.selection, true);\n    };\n    Editor.prototype.pasteContent = function (widgets, currentFormat) {\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var insertPosition = '';\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.insertPosition = undefined;\n            this.updateInsertPosition();\n            insertPosition = this.editorHistory.currentBaseHistoryInfo.insertPosition;\n        }\n        else {\n            var position = this.selection.start;\n            if (!this.selection.isForward) {\n                position = this.selection.end;\n            }\n            var blockInfo = this.selection.getParagraphInfo(position);\n            insertPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        }\n        this.documentHelper.owner.isLayoutEnabled = true;\n        this.documentHelper.owner.isPastingContent = true;\n        var layoutWholeDocument = this.pasteCopiedData(widgets, currentFormat);\n        var endPosition = '';\n        this.updateEndPosition();\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            endPosition = this.editorHistory.currentBaseHistoryInfo.endPosition;\n        }\n        else {\n            var blockInfo = this.selection.getParagraphInfo(this.selection.start);\n            endPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        }\n        if (this.selection.start.paragraph.isEmpty() && this.selection.start.paragraph.paragraphFormat.bidi) {\n            this.documentHelper.layout.reLayoutParagraph(this.selection.start.paragraph, 0, 0);\n        }\n        var startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n        this.setPositionForCurrentIndex(startPosition, insertPosition);\n        var end = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.documentHelper.owner);\n        this.setPositionForCurrentIndex(end, endPosition);\n        this.pasteTextPosition = { startPosition: startPosition, endPosition: end };\n        this.documentHelper.owner.isPastingContent = false;\n        this.documentHelper.selection.fireSelectionChanged(true);\n        return layoutWholeDocument;\n    };\n    Editor.prototype.pasteCopiedData = function (bodyWidget, currentFormat) {\n        var isSelectionInsideTable = this.selection.start.paragraph.isInsideTable;\n        var layoutWholeDocument = false;\n        var hasFootNoteElement = false;\n        if (this.documentHelper.layout.isBidiReLayout) {\n            this.documentHelper.layout.isBidiReLayout = false;\n        }\n        if (this.isPaste && this.isSectionEmpty(this.selection) && !this.selection.start.paragraph.isInHeaderFooter) {\n            this.previousSectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat();\n            this.previousSectionFormat.copyFormat(this.selection.start.paragraph.bodyWidget.sectionFormat);\n            this.selection.start.paragraph.bodyWidget.sectionFormat.copyFormat(bodyWidget[0].sectionFormat);\n            this.selection.start.paragraph.bodyWidget.sectionFormat.footerDistance = this.previousSectionFormat.footerDistance;\n            this.selection.start.paragraph.bodyWidget.sectionFormat.headerDistance = this.previousSectionFormat.headerDistance;\n            if (this.owner.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer) {\n                var page = this.selection.start.paragraph.bodyWidget.page;\n                this.owner.viewer.updatePageBoundingRectangle(this.selection.start.paragraph.bodyWidget, page, page.boundingRectangle.y);\n                this.owner.viewer.updateClientArea(this.selection.start.paragraph.bodyWidget, page);\n            }\n            layoutWholeDocument = true;\n        }\n        this.documentHelper.layout.isPastingContent = true;\n        for (var k = 0; k < bodyWidget.length; k++) {\n            if (k !== 0) {\n                this.insertSectionBreak(bodyWidget[k].sectionFormat.breakCode, bodyWidget[k].sectionFormat);\n            }\n            var widgets = bodyWidget[k].childWidgets;\n            var isConsiderLastBlock = false;\n            var isLasteSection = (k === bodyWidget.length - 1);\n            for (var j = 0; j < widgets.length; j++) {\n                var isLastBlock = (j === widgets.length - 1);\n                if (isLastBlock) {\n                    isSelectionInsideTable = !isLastBlock;\n                }\n                if (isLastBlock && isLasteSection) {\n                    this.documentHelper.layout.isPastingContent = false;\n                }\n                var widget = widgets[j];\n                if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                    isConsiderLastBlock = true;\n                }\n                if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && widget.childWidgets.length === 0) {\n                    widget.childWidgets[0] = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(widget);\n                }\n                if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentFormat)) {\n                    widget.paragraphFormat.copyFormat(currentFormat);\n                    var insertFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, false);\n                    widget.characterFormat.mergeFormat(insertFormat);\n                }\n                if (j !== widgets.length - 1 && this.isPaste && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentFormat) && this.previousParaFormat &&\n                    widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.paragraphFormat.listFormat) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.paragraphFormat.listFormat.list) && widget.paragraphFormat.listFormat.listId === -1) {\n                    if (this.previousParaFormat.listFormat && this.previousParaFormat.listFormat.list && this.previousParaFormat.listFormat.listId !== -1) {\n                        widget.paragraphFormat.listFormat.copyFormat(this.previousParaFormat.listFormat);\n                        widget.paragraphFormat.leftIndent = this.previousParaFormat.leftIndent;\n                    }\n                    else if (this.previousParaFormat.baseStyle && this.previousParaFormat.baseStyle instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WParagraphStyle && this.previousParaFormat.baseStyle.paragraphFormat.listFormat\n                        && this.previousParaFormat.baseStyle.paragraphFormat.listFormat.list && this.previousParaFormat.baseStyle.paragraphFormat.listFormat.listId !== -1) {\n                        var paraFormat = this.previousParaFormat.baseStyle.paragraphFormat;\n                        widget.paragraphFormat.listFormat.copyFormat(paraFormat.listFormat);\n                        widget.paragraphFormat.leftIndent = paraFormat.leftIndent;\n                    }\n                }\n                if (j === widgets.length - 1 && widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                    && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.paragraphFormat.listFormat)\n                        && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(widget.paragraphFormat.listFormat.list)\n                        && widget.paragraphFormat.listFormat.listId === -1)) {\n                    var newParagraph = widget;\n                    if (newParagraph.childWidgets.length > 0\n                        && newParagraph.childWidgets[0].children.length > 0) {\n                        var insertPosition = this.selection.start;\n                        if ((insertPosition.paragraph.paragraphFormat.textAlignment === 'Center'\n                            || insertPosition.paragraph.paragraphFormat.textAlignment === 'Right') &&\n                            insertPosition.paragraph.paragraphFormat.listFormat.listId === -1) {\n                            insertPosition.paragraph.x = this.owner.viewer.clientActiveArea.x;\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n                            this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(newParagraph.clone());\n                        }\n                        hasFootNoteElement = this.insertElement(newParagraph.childWidgets[0].children, newParagraph.paragraphFormat);\n                    }\n                    else if (isLastBlock && isLasteSection) {\n                        //Handle to update list  numbering for all paragraph below this paragraph\n                        var lastParagraph = this.selection.start.paragraph;\n                        this.documentHelper.layout.reLayoutParagraph(lastParagraph, 0, 0, lastParagraph.paragraphFormat.bidi);\n                    }\n                }\n                else if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BlockWidget) {\n                    var block = widget;\n                    var startParagraph = this.selection.start.paragraph;\n                    var isTable = block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget;\n                    if (isTable) {\n                        var table = block;\n                        this.generateTableRevision(table);\n                        if (startParagraph.isInsideTable) {\n                            //Handled to resize table based on parent cell width.\n                            var clientWidth = startParagraph.getContainerWidth();\n                            table.fitCellsToClientArea(clientWidth);\n                        }\n                        if (startParagraph.isEmpty() && startParagraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget && !this.isPaste) {\n                            this.insertTableRows(table, startParagraph.previousWidget);\n                            return layoutWholeDocument;\n                        }\n                    }\n                    this.insertBlockInternal(block, undefined, isSelectionInsideTable, this.isRemoteAction);\n                }\n            }\n        }\n        this.documentHelper.layout.isPastingContent = false;\n        if (hasFootNoteElement) {\n            layoutWholeDocument = true;\n            if (this.pasteFootNoteType === 'Footnote') {\n                this.arrangeFootnoteCollection();\n            }\n            else if (this.pasteFootNoteType === 'Endnote') {\n                this.arrangeEndnoteCollection();\n            }\n        }\n        if (!layoutWholeDocument && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.blockToShift)) {\n            this.shiftFootnoteContent();\n        }\n        return layoutWholeDocument;\n    };\n    Editor.prototype.arrangeEndnoteCollection = function () {\n        for (var i = 0; i < this.documentHelper.endnoteCollection.length; i++) {\n            for (var j = 0; j < this.documentHelper.endnoteCollection.length - 1 - i; j++) {\n                var currentStart = this.selection.getElementPosition(this.documentHelper.endnoteCollection[j]).startPosition;\n                var nextStart = this.selection.getElementPosition(this.documentHelper.endnoteCollection[j + 1]).startPosition;\n                if (!currentStart.isExistBefore(nextStart)) {\n                    var tempElementBox = this.documentHelper.endnoteCollection[j];\n                    this.documentHelper.endnoteCollection[j] = this.documentHelper.endnoteCollection[j + 1];\n                    this.documentHelper.endnoteCollection[j + 1] = tempElementBox;\n                }\n            }\n        }\n    };\n    Editor.prototype.arrangeFootnoteCollection = function () {\n        for (var i = 0; i < this.documentHelper.footnoteCollection.length; i++) {\n            for (var j = 0; j < this.documentHelper.footnoteCollection.length - 1 - i; j++) {\n                var currentStart = this.selection.getElementPosition(this.documentHelper.footnoteCollection[j]).startPosition;\n                var nextStart = this.selection.getElementPosition(this.documentHelper.footnoteCollection[j + 1]).startPosition;\n                if (!currentStart.isExistBefore(nextStart)) {\n                    var tempElementBox = this.documentHelper.footnoteCollection[j];\n                    this.documentHelper.footnoteCollection[j] = this.documentHelper.footnoteCollection[j + 1];\n                    this.documentHelper.footnoteCollection[j + 1] = tempElementBox;\n                }\n            }\n        }\n    };\n    Editor.prototype.generateTableRevision = function (table) {\n        if (this.owner.enableTrackChanges && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table)) {\n            for (var i = 0; i < table.childWidgets.length; i++) {\n                var row = table.childWidgets[i];\n                this.insertRevision(row.rowFormat, 'Insertion');\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var cell = row.childWidgets[j];\n                    for (var k = 0; k < cell.childWidgets.length; k++) {\n                        var block = cell.childWidgets[k];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n                            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                                this.insertRevisionForBlock(block, 'Insertion');\n                            }\n                            else {\n                                this.generateTableRevision(block);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.isSectionEmpty = function (selection) {\n        var startParagraph = selection.start.paragraph;\n        if (startParagraph) {\n            if (startParagraph.isInsideTable || startParagraph.isInHeaderFooter ||\n                startParagraph !== selection.end.paragraph) {\n                return false;\n            }\n            var bodyWidget = startParagraph.bodyWidget;\n            if (bodyWidget) {\n                var page = bodyWidget.page;\n                if (page) {\n                    if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(page.previousPage) || page.previousPage.sectionIndex !== page.sectionIndex)\n                        && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(page.nextPage) && startParagraph.isEmpty() &&\n                        bodyWidget.childWidgets.length === 1) {\n                        var isEmpty = true;\n                        var sectionIndex = selection.start.paragraph.bodyWidget.sectionIndex;\n                        var headerFooters = this.documentHelper.headersFooters[sectionIndex];\n                        if (headerFooters) {\n                            for (var index in headerFooters) {\n                                var headerFooter = headerFooters[index];\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooter)) {\n                                    var widget = headerFooter.childWidgets[0];\n                                    if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                                        isEmpty = false;\n                                    }\n                                    else if ((widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) && !widget.isEmpty()) {\n                                        isEmpty = false;\n                                    }\n                                }\n                                else {\n                                    isEmpty = false;\n                                }\n                                if (!isEmpty) {\n                                    break;\n                                }\n                            }\n                            return isEmpty;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Insert table on undo\n     *\n     * @param {TableWidget} table - Specifies the table\n     * @param {TableWidget} newTable - Speciefies the new table\n     * @param {boolean} moveRows - Specifies the new row\n     * @private\n     * @private {void}\n     */\n    Editor.prototype.insertTableInternal = function (table, newTable, moveRows, skipRemoving) {\n        //Gets the index of current table.\n        var insertIndex = table.index;\n        var owner;\n        var currentParagraph = this.selection.start.paragraph;\n        if (!table.isInsideTable && newTable.isInsideTable) {\n            insertIndex = newTable.index;\n            skipRemoving = true;\n            owner = currentParagraph.containerWidget;\n        }\n        if (moveRows) {\n            //Moves the rows to table.\n            for (var i = 0, index = 0; i < table.childWidgets.length; i++, index++) {\n                var row = table.childWidgets[i];\n                newTable.childWidgets.splice(index, 0, row);\n                row.containerWidget = newTable;\n                table.childWidgets.splice(i, 1);\n                i--;\n            }\n        }\n        if (!currentParagraph.isInsideTable && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(owner)) {\n            table.containerWidget = currentParagraph.containerWidget;\n            owner = currentParagraph.containerWidget;\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(owner)) {\n            owner = table.containerWidget;\n        }\n        if (table.isInsideTable) {\n            owner = owner.combineWidget(this.owner.viewer);\n        }\n        //remove old table revisions if it is present.\n        this.constructRevisionsForTable(table, false);\n        if (!skipRemoving) {\n            this.removeBlock(table, true);\n        }\n        this.removeRevisionFromTable(newTable);\n        if (owner instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n            owner = owner.combineWidget(this.owner.viewer);\n        }\n        else {\n            var curretBlock = this.documentHelper.layout.checkAndGetBlock(owner, insertIndex);\n            if (owner.childWidgets.indexOf(curretBlock) !== -1) {\n                insertIndex = owner.childWidgets.indexOf(curretBlock);\n            }\n        }\n        //Inserts table in the current table position.\n        var blockAdvCollection = owner.childWidgets;\n        blockAdvCollection.splice(insertIndex, 0, newTable);\n        if (!skipRemoving) {\n            table.containerWidget = undefined;\n            newTable.index = table.index;\n        }\n        newTable.containerWidget = owner;\n        this.documentHelper.layout.clearTableWidget(newTable, true, true, true);\n        newTable.buildTableColumns();\n        this.constructRevisionsForTable(newTable, true);\n        newTable.isGridUpdated = true;\n        this.updateNextBlocksIndex(newTable, true);\n        this.documentHelper.layout.linkFieldInTable(newTable);\n        this.documentHelper.layout.layoutBodyWidgetCollection(newTable.index, owner, newTable, false);\n    };\n    Editor.prototype.removeRevisionFromTable = function (table) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            if (row.rowFormat.revisions.length > 0) {\n                for (var j = 0; j < row.rowFormat.revisions.length; j++) {\n                    if (row.rowFormat.revisions[j].range.length === 0) {\n                        var revisionIndex = row.rowFormat.revisions.indexOf(row.rowFormat.revisions[j]);\n                        row.rowFormat.revisions.splice(revisionIndex, 1);\n                        j--;\n                    }\n                }\n            }\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[j];\n                for (var k = 0; k < cell.childWidgets.length; k++) {\n                    var block = cell.childWidgets[k];\n                    if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        this.removeRevisionFromTable(block);\n                    }\n                }\n            }\n        }\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.canConstructRevision = function (item) {\n        if ((item.revisions.length > 0 && item.revisions[0].range.length === 0) || item.removedIds.length > 0) {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.constructRevisionsForTable = function (table, canConstructRevision) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var rowWidget = table.childWidgets[i];\n            if (canConstructRevision) {\n                if (this.canConstructRevision(rowWidget.rowFormat)) {\n                    this.constructRevisionFromID(rowWidget.rowFormat, true);\n                }\n                for (var rowIndex = 0; rowIndex < rowWidget.childWidgets.length; rowIndex++) {\n                    var cellWidget = rowWidget.childWidgets[rowIndex];\n                    for (var paraIndex = 0; paraIndex < cellWidget.childWidgets.length; paraIndex++) {\n                        if (cellWidget.childWidgets[paraIndex] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                            this.constructRevisionsForBlock(cellWidget.childWidgets[paraIndex], canConstructRevision);\n                        }\n                        else if (cellWidget.childWidgets[paraIndex] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                            this.constructRevisionsForTable(cellWidget.childWidgets[paraIndex], true);\n                        }\n                    }\n                }\n            }\n            else {\n                this.removeDeletedCellRevision(rowWidget, true);\n            }\n        }\n    };\n    Editor.prototype.deleteRevision = function (row) {\n        if (row.rowFormat.revisions.length > 0) {\n            for (var i = 0; i < row.rowFormat.revisions.length; i++) {\n                var currentRevision = row.rowFormat.revisions[i];\n                for (var j = 0; j < currentRevision.range.length; j++) {\n                    currentRevision.range.splice(j, 1);\n                    j--;\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                }\n                if (currentRevision.range.length === 0) {\n                    this.owner.revisions.remove(currentRevision);\n                }\n            }\n        }\n    };\n    Editor.prototype.constructRevisionForFootnote = function (footnote, canConstructRevision) {\n        for (var i = 0; i < footnote.bodyWidget.childWidgets.length; i++) {\n            if (footnote.bodyWidget.childWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.constructRevisionsForBlock(footnote.bodyWidget.childWidgets[i], canConstructRevision);\n            }\n        }\n    };\n    Editor.prototype.constructRevisionsForBlock = function (paragraph, canConstructRevision) {\n        for (var linIndex = 0; linIndex < paragraph.childWidgets.length; linIndex++) {\n            var lineWidget = paragraph.childWidgets[linIndex];\n            for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                if (canConstructRevision) {\n                    if (lineWidget.children[elementIndex] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && this.canConstructRevision(lineWidget.children[elementIndex])) {\n                        this.constructRevisionFromID(lineWidget.children[elementIndex], true);\n                    }\n                    if (lineWidget.children[elementIndex] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        var footnote = lineWidget.children[elementIndex];\n                        this.constructRevisionForFootnote(footnote, canConstructRevision);\n                    }\n                }\n            }\n        }\n        if (this.canConstructRevision(paragraph.characterFormat)) {\n            this.constructRevisionFromID(paragraph.characterFormat, true);\n        }\n    };\n    /**\n     * @private\n     * @param paraWidget\n     * @param startoffset\n     * @param endoffset\n     * @param revisionId\n     * @param isParaMarkIncluded\n     * @returns {void}\n     */\n    Editor.prototype.applyRevisionForCurrentPara = function (paraWidget, startoffset, endoffset, revisionId, isParaMarkIncluded) {\n        var elementInfo = paraWidget.getInline(startoffset + 1, 0);\n        var currentElement = elementInfo.element;\n        if (elementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && elementInfo.element.text === \"\" && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementInfo.element.previousElement)) {\n            currentElement = elementInfo.element.previousElement;\n        }\n        var skipElement = false;\n        if (startoffset === paraWidget.getLength()) {\n            skipElement = true;\n        }\n        // Update the end offset if start and end both are same and both are positioned in the end of previous para of splitted para.\n        if (startoffset === endoffset && paraWidget.nextSplitWidget) {\n            endoffset += currentElement.length;\n        }\n        var endElement = paraWidget.getInline(endoffset, 0).element;\n        // Set false if paraWidget contains nextSplitWidget because we shouldn't include paramark if current para contains nextSplitWidget.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget.nextSplitWidget)) {\n            isParaMarkIncluded = false;\n        }\n        // Get the total length of previous splitted widgets of current para to include paramark because endoffset point out to the end of current. \n        var lastIndex = 0;\n        var tempPara = paraWidget;\n        while (tempPara) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tempPara)) {\n                lastIndex += tempPara.getLength();\n            }\n            tempPara = tempPara.previousSplitWidget;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget.previousSplitWidget) && lastIndex !== 0 && startoffset !== lastIndex) {\n            skipElement = false;\n        }\n        if (endoffset > lastIndex) {\n            isParaMarkIncluded = true;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endElement)) {\n            if (!skipElement && currentElement === endElement) {\n                currentElement.removedIds.push(revisionId);\n                this.constructRevisionFromID(currentElement, true, true);\n            }\n            else {\n                while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && currentElement !== endElement) {\n                    if (!skipElement) {\n                        currentElement.removedIds.push(revisionId);\n                        this.constructRevisionFromID(currentElement, true, true);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement.nextNode)) {\n                        if (currentElement.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                            currentElement = currentElement.nextNode;\n                        }\n                        else {\n                            currentElement = currentElement.nextNode.nextValidNodeForTracking;\n                        }\n                    }\n                    skipElement = false;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && !skipElement) {\n                    currentElement.removedIds.push(revisionId);\n                    this.constructRevisionFromID(currentElement, true, true);\n                }\n            }\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && !skipElement) {\n            currentElement.removedIds.push(revisionId);\n            this.constructRevisionFromID(currentElement, true, true);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endElement)) {\n            endElement.removedIds.push(revisionId);\n            this.constructRevisionFromID(endElement, true, true);\n        }\n        if (isParaMarkIncluded) {\n            if (paraWidget.characterFormat.removedIds.length > 0) {\n                paraWidget.characterFormat.removedIds = [];\n            }\n            paraWidget.characterFormat.removedIds.push(revisionId);\n            this.constructRevisionFromID(paraWidget.characterFormat, true, true);\n        }\n    };\n    /**\n     * Insert table on undo\n     *\n     * @param {Selection} selection - Specified the selection\n     * @param {WBlock} block - Spcifies the block\n     * @param {WTable} table - Specifies the table.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertBlockTable = function (selection, block, table) {\n        var offset = selection.start.offset;\n        var lineIndex = selection.start.paragraph.childWidgets.indexOf(selection.start.currentWidget);\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && offset > 0) {\n            //Moves the inline items before selection start to the inserted paragraph.\n            this.moveInlines(selection.start.paragraph, block, 0, 0, selection.start.paragraph.firstChild, offset, selection.start.currentWidget);\n            selection.selectParagraphInternal(selection.start.paragraph, true);\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(this.selection.getHierarchicalIndex(block, offset.toString()), true);\n            }\n        }\n        if (offset > 0 && this.checkInsertPosition(selection)) {\n            this.updateHistoryPosition(selection.start, true);\n        }\n        var index = table.indexInOwner;\n        table.containerWidget.childWidgets.splice(index, 0, block);\n        block.containerWidget = table.containerWidget;\n        block.index = table.index;\n        this.updateNextBlocksIndex(block, true);\n        // Insert the revision based on id when perform accept + undo in pagebreak case\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            this.constructRevisionsForBlock(block, true);\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(block.index, block.containerWidget, block, false);\n        if (this.checkInsertPosition(selection)) {\n            var paragraph = undefined;\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                paragraph = block;\n            }\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                paragraph = this.documentHelper.getFirstParagraphInFirstCell(block);\n            }\n            this.updateHistoryPosition(this.selection.getHierarchicalIndex(paragraph, '0'), true);\n        }\n    };\n    /**\n     * On cut handle selected content remove and relayout\n     *\n     * @param {Selection} selection - Specified the selection\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.handleCut = function (selection) {\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        var removedCommentStart = this.checkAndRemoveComments();\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        // this.owner.isShiftingEnabled = true;     \n        var image = undefined;\n        if (startPosition.paragraph === endPosition.paragraph && startPosition.offset + 1 === endPosition.offset) {\n            //Gets selected image and copy image to clipboard.\n            var index = 0;\n            var currentInline = startPosition.paragraph.getInline(endPosition.offset, index);\n            var inline = currentInline.element;\n            image = inline;\n        }\n        var blockInfo = this.selection.getParagraphInfo(startPosition);\n        selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        this.initHistory('Cut');\n        selection.owner.isShiftingEnabled = true;\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(selection.editPosition, true);\n            }\n        }\n        this.deleteSelectedContent(endPosition.paragraph, selection, startPosition, endPosition, 3);\n        var textPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n        this.setPositionForCurrentIndex(textPosition, selection.editPosition);\n        selection.selectContent(textPosition, true);\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            if (this.checkEndPosition(selection)) {\n                this.updateHistoryPosition(selection.end, false);\n            }\n        }\n        this.reLayout(selection);\n        this.updateHistoryForComments(removedCommentStart);\n    };\n    Editor.prototype.insertInlineInternal = function (element, revisionType) {\n        var selection = this.selection;\n        var length = element.length;\n        var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n        revisionType = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType) ? 'Insertion' : revisionType);\n        if (selection.start.paragraph.isEmpty()) {\n            var paragraph = selection.start.paragraph;\n            if ((paragraph.paragraphFormat.textAlignment === 'Center' || paragraph.paragraphFormat.textAlignment === 'Right')\n                && paragraph.paragraphFormat.listFormat.listId === -1) {\n                paragraph.x = this.owner.viewer.clientActiveArea.x;\n            }\n            var isUndoing = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) ? (this.editorHistory.isUndoing || this.editorHistory.isRedoing) : false;\n            paragraph.childWidgets[0].children.push(element);\n            element.line = paragraph.childWidgets[0];\n            if (this.owner.enableTrackChanges && element.isValidNodeForTracking && !isUndoing) {\n                this.insertRevision(element, revisionType);\n            }\n            if (element.removedIds.length > 0 || isUndoing) {\n                this.constructRevisionFromID(element, true);\n            }\n            element.linkFieldCharacter(this.documentHelper);\n            if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                this.constructRevisionForFootnote(element, true);\n                if (isUndoing) {\n                    element.isLayout = false;\n                }\n                if (element.footnoteType === 'Footnote') {\n                    this.updateFootnoteCollection(element);\n                }\n                if (element.footnoteType === 'Endnote') {\n                    this.updateEndnoteCollection(element);\n                }\n            }\n            this.documentHelper.layout.reLayoutParagraph(paragraph, 0, 0, undefined, undefined);\n        }\n        else {\n            var indexInInline = 0;\n            var inlineObj = selection.start.currentWidget.getInline(selection.start.offset, indexInInline);\n            var curInline = inlineObj.element;\n            indexInInline = inlineObj.index;\n            this.insertElementInternal(curInline, element, indexInInline, revisionType, true);\n        }\n        var revision = element.revisions[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n        }\n        this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset + length, true);\n    };\n    Editor.prototype.insertElement = function (element, paragraphFormat) {\n        var isElementHasEndNote = false;\n        var selection = this.selection;\n        var length = 0;\n        var paragraph = undefined;\n        var lineIndex = -1;\n        var lineWidget = undefined;\n        var insertIndex = 0;\n        var begin = undefined;\n        var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n        var isTrackingEnabled = this.owner.enableTrackChanges;\n        var curInline = undefined;\n        var prevElement = undefined;\n        var indexInInline = 0;\n        if (selection.start.paragraph.isEmpty()) {\n            paragraph = selection.start.paragraph;\n            lineWidget = paragraph.childWidgets[0];\n            lineIndex = 0;\n        }\n        else {\n            var inlineObj = selection.start.currentWidget.getInline(selection.start.offset, indexInInline);\n            curInline = inlineObj.element;\n            indexInInline = inlineObj.index;\n            paragraph = curInline.line.paragraph;\n            lineIndex = paragraph.childWidgets.indexOf(curInline.line);\n            insertIndex = curInline.indexInOwner;\n            lineWidget = curInline.line;\n            if (indexInInline === curInline.length) { // Add new Element in current \n                insertIndex++;\n                begin = false;\n            }\n            else if (indexInInline === 0) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(curInline.previousNode)) {\n                    insertIndex = 0;\n                }\n                begin = true;\n            }\n            else {\n                insertIndex++;\n                prevElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                prevElement.characterFormat.copyFormat(curInline.characterFormat);\n                prevElement.text = curInline.text.substring(indexInInline);\n                curInline.text = curInline.text.slice(0, indexInInline);\n                curInline.isWidthUpdated = false;\n                if (curInline.revisions.length > 0 && !this.owner.enableTrackChanges) {\n                    this.splitRevisionForSpittedElement(curInline, prevElement);\n                }\n                lineWidget.children.splice(insertIndex, 0, prevElement);\n                prevElement.line = curInline.line;\n            }\n        }\n        for (var i = 0; i < element.length; i++) {\n            length += element[i].length;\n            if (element[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && element[i].text.indexOf(' ') >= 0) {\n                this.documentHelper.triggerSpellCheck = true;\n            }\n            var prevRevisionsCount = element[i].revisions.length;\n            element[i].ischangeDetected = true;\n            lineWidget.children.splice(insertIndex, 0, element[i]);\n            element[i].line = lineWidget;\n            element[i].linkFieldCharacter(this.documentHelper);\n            var isRevisionCombined = this.updateRevisionForElement(curInline, element[i], indexInInline, (i === 0) ? true : false, prevElement, begin);\n            //Check to combine elements with previous / next para\n            if (isTrackingEnabled && !isRevisionCombined && element[i].revisions.length === prevRevisionsCount) {\n                //if (!(element[i] instanceof FieldElementBox && (element[i] as FieldElementBox).fieldType === 2)) {\n                this.checkToCombineRevisionsinBlocks(element[i], prevRevisionsCount === element[i].revisions.length, (i > 0 && i === element.length - 1), 'Insertion');\n                //}\n            }\n            curInline = element[i];\n            insertIndex++;\n            if (element[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                this.pasteFootNoteType = element[i].footnoteType;\n                isElementHasEndNote = true;\n            }\n        }\n        if ((!this.isPaste) && paragraphFormat && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat.listFormat.list) ||\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat.listFormat) && paragraph.paragraphFormat.listFormat.listId === -1))) {\n            paragraph.paragraphFormat.copyFormat(paragraphFormat);\n        }\n        if (this.isPaste) {\n            if (this.isRemoteAction) {\n                var revision = paragraphFormat.ownerBase.characterFormat.revisions;\n                var isBreak = false;\n                for (var i = 0; i < revision.length; i++) {\n                    paragraph.characterFormat.revisions.push(revision[i]);\n                    var range = revision[i].range;\n                    for (var j = 0; j < range.length; j++) {\n                        if (range[j] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && range[j] == paragraphFormat.ownerBase.characterFormat) {\n                            range.splice(j, 1);\n                            range.push(paragraph.characterFormat);\n                            isBreak = true;\n                            break;\n                        }\n                    }\n                    if (isBreak) {\n                        break;\n                    }\n                }\n            }\n            paragraph.textWrapWidth = false;\n            this.viewer.updateClientAreaForBlock(paragraph, true);\n            paragraph.x = this.viewer.clientActiveArea.x;\n        }\n        this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, 0, this.isInsertField ? undefined : paragraph.paragraphFormat.bidi);\n        this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset + length, true);\n        return isElementHasEndNote;\n    };\n    Editor.prototype.updateRevisionForElement = function (currentElement, newElement, indexInInline, isFirstItem, prevElement, isBeginning) {\n        if (!this.owner.enableTrackChanges) {\n            return false;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n            return false;\n        }\n        var isMiddle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isBeginning) ? true : false;\n        var prevRevisionCount = newElement.revisions.length;\n        if (isFirstItem) {\n            if (isMiddle) {\n                var isRevisionCombined = this.checkToMapRevisionWithInlineText(currentElement, indexInInline, newElement, false, 'Insertion');\n                if (isRevisionCombined || newElement.revisions.length > prevRevisionCount) {\n                    this.copyElementRevision(currentElement, prevElement, true);\n                }\n                else if (newElement.revisions.length === 0) {\n                    this.splitRevisionForSpittedElement(currentElement, prevElement);\n                    this.insertRevision(newElement, 'Insertion');\n                }\n            }\n            else if (isBeginning) {\n                return this.insertRevisionAtBegining(currentElement, newElement, 'Insertion');\n            }\n            else {\n                return this.insertRevisionAtEnd(currentElement, newElement, 'Insertion');\n            }\n        }\n        else {\n            // if (currentElement instanceof FieldElementBox && currentElement.fieldType === 2) {\n            //     currentElement = (currentElement as FieldElementBox).previousElement;\n            // }\n            return this.insertRevisionAtEnd(currentElement, newElement, 'Insertion');\n        }\n        return false;\n    };\n    Editor.prototype.insertElementInternal = function (element, newElement, index, revisionType, relayout, isNavigationPane) {\n        var line = element.line;\n        var paragraph = line.paragraph;\n        var lineIndex = line.indexInOwner;\n        var insertIndex = element.indexInOwner;\n        var isBidi = paragraph.paragraphFormat.bidi && element.isRightToLeft;\n        var isEqualFormat = false;\n        revisionType = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revisionType) ? 'Insertion' : revisionType;\n        var isUndoing = this.skipTracking();\n        var isTrackingEnabled = this.owner.enableTrackChanges;\n        var isRevisionCombined = false;\n        var prevRevisionCount = newElement.revisions.length;\n        if (this.owner.editorHistoryModule && (this.owner.editorHistoryModule.isUndoing || this.owner.editorHistoryModule.isRedoing)\n            && newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            isEqualFormat = element.characterFormat.isEqualFormat(newElement.characterFormat)\n                && this.documentHelper.textHelper.isRTLText(newElement.text);\n        }\n        if (!isEqualFormat) {\n            if (index === element.length) {\n                // Add new Element in current \n                insertIndex = this.incrementCommentIndex(isBidi, element, insertIndex);\n                if (newElement.removedIds.length > 0 || isUndoing) {\n                    this.constructRevisionFromID(newElement, true, false, element);\n                }\n                else if (isTrackingEnabled && !isUndoing && !this.skipFieldDeleteTracking) {\n                    isRevisionCombined = this.insertRevisionAtEnd(element, newElement, revisionType);\n                }\n                if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                    if (newElement.revisions.length > 0) {\n                        this.footnoteRevision = newElement.revisions[0];\n                    }\n                    this.constructRevisionForFootnote(newElement, true);\n                    this.footnoteRevision = undefined;\n                }\n                line.children.splice(insertIndex, 0, newElement);\n                if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && newElement.fieldType === 2) {\n                    this.constructRevisionnsForLink(newElement, false);\n                }\n            }\n            else if (index === 0) {\n                if (newElement.removedIds.length > 0) {\n                    // 885534 (insertIndex used for this bug).\n                    this.constructRevisionFromID(newElement, false, false, undefined, insertIndex);\n                }\n                else if (isTrackingEnabled && !isUndoing && !this.skipFieldDeleteTracking) {\n                    isRevisionCombined = this.insertRevisionAtBegining(element, newElement, revisionType);\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.previousNode)) {\n                    element.line.children.splice(0, 0, newElement);\n                    insertIndex = 0;\n                }\n                else {\n                    element.line.children.splice(insertIndex, 0, newElement);\n                }\n            }\n            else if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.isHyperlinkField && newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && newElement.fieldType === 1 && newElement.removedIds.length > 0) {\n                this.constructRevisionFromID(newElement, false);\n                line.children.splice(insertIndex, 0, newElement);\n            }\n            else {\n                insertIndex = this.incrementCommentIndex(isBidi, element, insertIndex);\n                var textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                textElement.characterFormat.copyFormat(element.characterFormat);\n                textElement.text = element.text.substring(index);\n                if (element.revisions.length > 0 && !isTrackingEnabled && !isUndoing && newElement.removedIds.length === 0) {\n                    this.splitRevisionForSpittedElement(element, textElement);\n                }\n                element.text = element.text.substr(0, index);\n                element.isWidthUpdated = false;\n                line.children.splice(insertIndex, 0, textElement);\n                textElement.line = element.line;\n                isRevisionCombined = true;\n                this.isTrackingFormField = element.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox ? true : false;\n                if (newElement.removedIds.length > 0 && !this.isTrackingFormField) {\n                    this.constructRevisionFromID(newElement, false);\n                    this.copyElementRevision(element, textElement, true);\n                }\n                else if (this.owner.enableTrackChanges) {\n                    if (!(newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) && !(newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) && !(newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) && !(newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox)) {\n                        var isRevisionCombined_1 = this.checkToMapRevisionWithInlineText(element, index, newElement, isBidi, revisionType);\n                        if (isRevisionCombined_1 || newElement.revisions.length > prevRevisionCount) {\n                            this.copyElementRevision(element, textElement, true);\n                        }\n                        else if (newElement.revisions.length === prevRevisionCount) {\n                            this.splitRevisionForSpittedElement(element, textElement);\n                            this.insertRevision(newElement, revisionType);\n                        }\n                    }\n                    else if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n                        this.splitRevisionForSpittedElement(element, textElement);\n                        this.copyElementRevision(element, newElement, false);\n                    }\n                    else {\n                        this.copyElementRevision(element, textElement, false);\n                    }\n                }\n                //Inserts the new inline.\n                line.children.splice(insertIndex, 0, newElement);\n                insertIndex -= 1;\n            }\n        }\n        else {\n            element.text = element.text.substring(0, index) + newElement.text + element.text.substring(index);\n            element.isWidthUpdated = false;\n        }\n        newElement.line = element.line;\n        if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n            var bookmarkCol = this.documentHelper.bookmarks;\n            if (newElement.reference) {\n                newElement.reference.reference = newElement;\n            }\n            if (!bookmarkCol.containsKey(newElement.name)) {\n                bookmarkCol.add(newElement.name, newElement);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newElement.line.paragraph.containerWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newElement.line.paragraph.containerWidget.containerWidget) && newElement.line.paragraph.containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n            newElement.line.paragraph.containerWidget.containerWidget.height += newElement.height;\n        }\n        newElement.linkFieldCharacter(this.documentHelper);\n        if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && newElement.type === 0) {\n            this.insertContentControlInCollection(newElement);\n            if (this.owner.editorHistoryModule && (this.owner.editorHistoryModule.isUndoing || this.owner.editorHistoryModule.isRedoing)) {\n                this.updatePropertiesToBlock(newElement, true);\n            }\n        }\n        if ((newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ImageElementBox && newElement.textWrappingStyle !== 'Inline') || newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ShapeElementBox) {\n            if (paragraph.floatingElements.indexOf(newElement) === -1) {\n                paragraph.floatingElements.push(newElement);\n            }\n            if (paragraph.bodyWidget.floatingElements.indexOf(newElement) === -1 && newElement.textWrappingStyle !== 'Inline') {\n                paragraph.bodyWidget.floatingElements.push(newElement);\n            }\n        }\n        if (isTrackingEnabled && !isRevisionCombined && !isUndoing && !this.skipFieldDeleteTracking) {\n            this.checkToCombineRevisionsinBlocks(newElement, prevRevisionCount === newElement.revisions.length, (index === element.length), revisionType);\n        }\n        if (newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n            if (isUndoing) {\n                // this.documentHelper.layout.isLayoutWhole = true;\n                newElement.isLayout = false;\n            }\n            if (newElement.footnoteType === 'Footnote') {\n                this.updateFootnoteCollection(newElement);\n                this.updateFootNoteIndex();\n            }\n            if (newElement.footnoteType === 'Endnote') {\n                this.updateEndnoteCollection(newElement);\n                this.updateEndNoteIndex();\n            }\n        }\n        if (!(newElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox)) {\n            this.combineElementRevisionToPrevNxt(newElement);\n        }\n        if (relayout && !isNavigationPane) {\n            this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, insertIndex, undefined, undefined);\n        }\n    };\n    Editor.prototype.incrementCommentIndex = function (isBidi, element, insertIndex) {\n        if (!this.owner.editorHistoryModule || !(this.owner.editorHistoryModule && this.owner.editorHistoryModule.currentHistoryInfo) || (this.owner.editorHistoryModule && this.owner.editorHistoryModule.currentHistoryInfo\n            && (this.owner.editorHistoryModule.currentHistoryInfo.action !== \"SkipCommentInline\" ||\n                this.owner.editorHistoryModule.currentHistoryInfo.action === \"SkipCommentInline\" &&\n                    (this.owner.editorHistoryModule.currentHistoryInfo.modifiedActions[0] === this.editorHistory.currentBaseHistoryInfo\n                        || (this.owner.editorHistoryModule.currentHistoryInfo.modifiedActions[0] !== this.editorHistory.currentBaseHistoryInfo\n                            && !(element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox)))))) {\n            insertIndex++;\n        }\n        return insertIndex;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Editor.prototype.constructRevisionFromID = function (insertElement, isEnd, skipUpdate, prevElement, index) {\n        if (insertElement.removedIds.length > 0) {\n            for (var i = 0; i < insertElement.removedIds.length; i++) {\n                var revisionToInclude = undefined;\n                if (this.documentHelper.revisionsInternal.containsKey(insertElement.removedIds[i])) {\n                    revisionToInclude = this.documentHelper.revisionsInternal.get(insertElement.removedIds[i]);\n                    insertElement.revisions.push(revisionToInclude);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        // Handle collab editing for track changes.\n                        this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(insertElement, undefined, revisionToInclude));\n                    }\n                    var isFieldBeginRedoing = insertElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && insertElement.fieldType === 0;\n                    isEnd = isEnd ? true : (!isFieldBeginRedoing && this.skipTracking());\n                    var isInsertEnd = false;\n                    // Bug 873011: Handled the revision update for Accept Change action on undoing.\n                    if (this.editorHistory.isUndoing && this.owner.editorHistoryModule.currentBaseHistoryInfo\n                        && this.owner.editorHistoryModule.currentBaseHistoryInfo.isHyperlinkField\n                        && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'Accept Change'\n                        && insertElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && insertElement.fieldType === 1) {\n                        isInsertEnd = true;\n                    }\n                    if (isEnd) {\n                        if (this.editorHistory.isRedoing && this.owner.editorHistoryModule.currentBaseHistoryInfo && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'BackSpace' && this.selection.isTOC()) {\n                            isEnd = false;\n                        }\n                        // Bug 873011: Handled the revision update for Remove Hyperlink action on redoing.\n                        if (this.editorHistory.isRedoing && this.owner.editorHistoryModule.currentHistoryInfo && this.owner.editorHistoryModule.currentHistoryInfo.action === 'RemoveHyperlink'\n                            && insertElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && insertElement.fieldType === 0) {\n                            isEnd = false;\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(index) && revisionToInclude.range.length > 0 && revisionToInclude.range[revisionToInclude.range.length - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && revisionToInclude.range[revisionToInclude.range.length - 1].paragraph.indexInOwner === this.selection.start.paragraph.indexInOwner) {\n                        revisionToInclude.range.splice(index, 0, insertElement);\n                    }\n                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n                        var rangeIndex = revisionToInclude.range.indexOf(prevElement);\n                        if (rangeIndex === -1 && isInsertEnd && revisionToInclude.range.length > 0) {\n                            rangeIndex = revisionToInclude.range.indexOf(revisionToInclude.range[revisionToInclude.range.length - 1]);\n                        }\n                        if (rangeIndex >= 0) {\n                            revisionToInclude.range.splice(rangeIndex + ((isEnd) ? 1 : 0), 0, insertElement);\n                        }\n                        else {\n                            revisionToInclude.range.splice(0, 0, insertElement);\n                        }\n                    }\n                    else {\n                        var insertIndex = void 0;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistory) && (this.owner.editorHistory.isUndoing || this.owner.editorHistory.isRedoing) && !(insertElement instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat)) {\n                            var currentElementIndex = this.owner.selectionModule.start.paragraph.index;\n                            var isInsideTable = this.owner.selectionModule.start.paragraph.isInsideTable;\n                            if (insertElement instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat && insertElement.ownerBase) {\n                                currentElementIndex = insertElement.ownerBase.index;\n                            }\n                            else if (insertElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && insertElement.paragraph && isInsideTable) {\n                                currentElementIndex = insertElement.paragraph.index;\n                            }\n                            var existingIndex = 0;\n                            for (var j = 0; j < revisionToInclude.range.length; j++) {\n                                if (revisionToInclude.range[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                                    existingIndex = revisionToInclude.range[j].paragraph.index;\n                                }\n                                else if (revisionToInclude.range[j] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                                    existingIndex = revisionToInclude.range[j].ownerBase.index;\n                                }\n                                if (currentElementIndex < existingIndex) {\n                                    insertIndex = j;\n                                    break;\n                                }\n                            }\n                            if (isEnd && currentElementIndex === existingIndex && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertIndex) && revisionToInclude.range.length > 0 && revisionToInclude.range[revisionToInclude.range.length - 1] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n                                insertIndex = revisionToInclude.range.length - 1;\n                            }\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertIndex)) {\n                            if (isEnd) {\n                                insertIndex = revisionToInclude.range.length;\n                            }\n                            else {\n                                insertIndex = 0;\n                            }\n                        }\n                        revisionToInclude.range.splice(insertIndex, 0, insertElement);\n                    }\n                    if (!skipUpdate) {\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(revisionToInclude);\n                    }\n                    this.updateRevisionCollection(revisionToInclude);\n                }\n            }\n            insertElement.removedIds = [];\n        }\n        else {\n            // on undoing revisions will be cloned , so need to update range information.\n            for (var i = 0; i < insertElement.revisions.length; i++) {\n                var currentRevision = insertElement.revisions[i];\n                if (this.documentHelper.revisionsInternal.containsKey(currentRevision.revisionID)) {\n                    currentRevision = this.documentHelper.revisionsInternal.get(currentRevision.revisionID);\n                    currentRevision.range.splice(isEnd ? currentRevision.range.length : 0, 0, insertElement);\n                    this.updateRevisionCollection(currentRevision);\n                }\n            }\n        }\n    };\n    /**\n     * Insert block on undo\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {WBlock} block - Specifes the block\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertBlock = function (block, isSelectionInsideTable) {\n        var isRemoved = true;\n        var isSkipEmptyPara = false;\n        var selection = this.selection;\n        if (!selection.isEmpty) {\n            isRemoved = this.removeSelectedContents(selection);\n            isSkipEmptyPara = true;\n        }\n        if (!isRemoved) {\n            selection.selectContent(selection.start, false);\n        }\n        this.insertBlockInternal(block, isSkipEmptyPara, isSelectionInsideTable);\n        if (this.checkInsertPosition(selection)) {\n            var paragraph = undefined;\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                paragraph = block;\n            }\n            else {\n                paragraph = this.documentHelper.getFirstParagraphInFirstCell(block);\n            }\n            this.updateHistoryPosition(this.selection.getHierarchicalIndex(paragraph, '0'), true);\n        }\n        this.fireContentChange();\n    };\n    Editor.prototype.insertBlockInternal = function (block, isRemoved, isSelectionInsideTable, isSkipRevision) {\n        var selection = this.selection;\n        var startPara = this.selection.start.paragraph;\n        var paraStart = this.selection.start.isAtParagraphStart;\n        if (!selection.start.isAtParagraphStart) {\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                var startPosition = selection.start.clone();\n                //let prevBlock: ParagraphWidget = (block as ParagraphWidget).clone()\n                if (!this.isInsertingTOC && this.owner.enableTrackChanges && !this.skipTracking() && !isSkipRevision) {\n                    if (selection.start.isAtParagraphEnd && this.isRevisionMatched(startPara.characterFormat, 'Insertion')) {\n                        this.insertRevisionForBlock(block, 'Insertion', false, this.retrieveRevisionByType(startPara.characterFormat, 'Insertion'));\n                    }\n                    else {\n                        this.insertRevisionForBlock(block, 'Insertion');\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n                    if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(block.clone());\n                    }\n                }\n                this.insertNewParagraphWidget(block, false);\n                if (!this.isInsertingTOC) {\n                    this.combineRevisions(block, startPosition, this.selection.end);\n                }\n                return;\n            }\n            this.updateInsertPosition();\n            startPara = startPara.combineWidget(this.owner.viewer);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n                if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                    this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(startPara);\n                }\n            }\n            this.splitParagraph(startPara, startPara.firstChild, 0, selection.start.currentWidget, selection.start.offset, false);\n            selection.selectParagraphInternal(this.selection.start.paragraph, true);\n        }\n        var bodyWidget = selection.start.paragraph.containerWidget;\n        var blockIndex = selection.start.paragraph.index;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && !this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                    this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(block.clone());\n                }\n                // Added the condition to skip adding an empty paragraph when performing a redo if the document has an empty case.\n                if (this.editorHistory.isRedoing && isRemoved && bodyWidget.firstChild instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && bodyWidget.firstChild.isEmpty() && bodyWidget.firstChild === bodyWidget.lastChild && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && block.isEmpty()) {\n                    return;\n                }\n            }\n            var insertIndex = bodyWidget.childWidgets.indexOf(selection.start.paragraph);\n            // When deleting the section break it will delete the previous paragraph. So, need to update the insert index.\n            if (bodyWidget.childWidgets[bodyWidget.childWidgets.length - 1] === selection.start.paragraph && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && block.isSectionBreak) {\n                insertIndex++;\n                blockIndex++;\n            }\n            if (selection.start.paragraph.isEmpty() && selection.start.paragraph.index === block.index && bodyWidget.childWidgets.length === 1 && selection.start.paragraph.containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget && this.owner.editorHistory.isUndoing) {\n                bodyWidget.childWidgets.splice(0, 1);\n            }\n            bodyWidget.childWidgets.splice(insertIndex, 0, block);\n            block.containerWidget = bodyWidget;\n            block.index = blockIndex;\n            block.height = 0;\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                block.isGridUpdated = false;\n                block.buildTableColumns();\n                block.isGridUpdated = true;\n            }\n            this.updateNextBlocksIndex(block, true);\n            if (!this.isInsertingTOC && this.owner.enableTrackChanges && !this.skipTracking() && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !isSkipRevision) {\n                this.insertRevisionForBlock(block, 'Insertion');\n            }\n            else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.constructRevisionsForBlock(block, true);\n            }\n            else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                this.constructRevisionsForTable(block, true);\n            }\n            if (this.documentHelper.owner.editorModule.isRemoteAction && !paraStart && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                this.updateNextBlocksIndex(block.nextWidget, false);\n                bodyWidget.childWidgets.splice(block.indexInOwner + 1, 1);\n            }\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.documentHelper.layout.linkFieldInParagraph(block);\n            }\n            if (this.isPaste && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.previousWidget) && block.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && block.paragraphFormat.contextualSpacing && !isSelectionInsideTable) {\n                this.documentHelper.layout.reLayoutParagraph(block.previousWidget, 0, 0);\n            }\n            this.documentHelper.layout.layoutBodyWidgetCollection(blockIndex, bodyWidget, block, false, undefined, isSelectionInsideTable);\n        }\n    };\n    /**\n     * Inserts the image with specified size at cursor position in the document editor.\n     *\n     * @deprecated\n     *\n     * @param {string} imageString  Base64 string, web URL or file URL.\n     * @param {number} width Specify the image width.\n     * @param {number} height Specify the image height.\n     * @param {string} alternateText Specify the image alternateText.\n     * @returns {void}\n     */\n    Editor.prototype.insertImage = function (imageString, width, height, alternateText) {\n        this.insertImageInternal(imageString, false, width, height, alternateText);\n    };\n    /**\n     * Inserts an image with a specified size at the cursor position in the DocumentEditor component.\n     *\n     * @param {string} imageString - The Base64 string, web URL, or file URL of the image to be inserted.\n     * @param {number} width - The width of the image. Optional parameter, if not specified, the original width of the image will be used.\n     * @param {number} height - The height of the image. Optional parameter, if not specified, the original height of the image will be used.\n     * @param {string} alternateText - The alternate text of the image. Optional parameter, if specified, this text will be displayed when the image is not available or when images are disabled in the document.\n     * @returns {Promise<void>} - A Promise that is resolved when the image has been inserted successfully, or rejected if the image could not be inserted for any reason.\n     */\n    Editor.prototype.insertImageAsync = function (imageString, width, height, alternateText) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.insertImageInternal(imageString, false, width, height, alternateText)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Inserts the image with specified size at cursor position in the document editor.\n     *\n     * @private\n     * @param {string} imageString Base64 string, web URL or file URL.\n     * @param {boolean} isUiInteracted Is image instered from UI interaction.\n     * @param {number} width? Image width\n     * @param {number} height? Image height\n     * @param {string} alternateText? Image alternateText\n     * @returns {void}\n     */\n    Editor.prototype.insertImageInternal = function (imageString, isUiInteracted, width, height, alternateText) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var formField = _this.selection.getCurrentFormField();\n                        var isFormFillProtectedMode = _this.documentHelper.protectionType === 'FormFieldsOnly' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(formField) && formField.formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField;\n                        if ((_this.owner.isReadOnlyMode || !_this.canEditContentControl) && !isFormFillProtectedMode) {\n                            resolve();\n                            return;\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(width) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(height)) {\n                            var image = document.createElement('img');\n                            var editor_1 = _this;\n                            image.addEventListener('load', function () {\n                                this.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(width) ? this.width : width;\n                                this.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(height) ? this.height : height;\n                                editor_1.insertPicture(imageString, this.width, this.height, this.alt, true);\n                                resolve();\n                            });\n                            image.src = imageString;\n                        }\n                        else {\n                            _this.insertPicture(imageString, width, height, alternateText, isUiInteracted);\n                            resolve();\n                        }\n                        setTimeout(function () {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.documentHelper)) {\n                                _this.viewer.updateScrollBars();\n                            }\n                        }, 30);\n                    })];\n            });\n        });\n    };\n    /**\n     * Inserts a table of specified size at cursor position in the document editor.\n     *\n     * @param {number} rows Default value of ‘rows’ parameter is 1.\n     * @param {number} columns Default value of ‘columns’ parameter is 1.\n     * @returns {void}\n     */\n    Editor.prototype.insertTable = function (rows, columns) {\n        var startPos = this.selection.start;\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl || this.selection.isPlainContentControl()) {\n            return;\n        }\n        rows = rows || 1;\n        columns = columns || 1;\n        var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n        localeValue.setLocale(this.documentHelper.owner.locale);\n        if (columns < 1 || columns > this.documentHelper.owner.documentEditorSettings.maximumColumns) {\n            var columnAlertPopup = localeValue.getConstant('Number of columns must be between') + ' 1 ' + localeValue.getConstant('and') + ' ' + this.documentHelper.owner.documentEditorSettings.maximumColumns.toString();\n            _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert(columnAlertPopup).enableRtl = this.documentHelper.owner.enableRtl;\n            return;\n        }\n        if (rows < 1 || rows > this.documentHelper.owner.documentEditorSettings.maximumRows) {\n            var rowAlertPopup = localeValue.getConstant('Number of rows must be between') + ' 1 ' + localeValue.getConstant('and') + ' ' + this.documentHelper.owner.documentEditorSettings.maximumColumns.toString();\n            localeValue.getConstant('Number of rows must be between 1 and 32767.').replace(\"32767\", this.documentHelper.owner.documentEditorSettings.maximumRows.toString());\n            _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert(rowAlertPopup).enableRtl = this.documentHelper.owner.enableRtl;\n            return;\n        }\n        var table = this.createTable(rows, columns);\n        var clientWidth = startPos.paragraph.getContainerWidth() - table.tableFormat.leftIndent;\n        table.splitWidthToTableCells(clientWidth);\n        var removedComment;\n        var prevBlock = startPos.paragraph.previousWidget;\n        if (startPos.currentWidget.isFirstLine() && startPos.offset === 0 && prevBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            this.insertTableRows(table, prevBlock);\n            table.destroy();\n            return;\n        }\n        else {\n            removedComment = this.checkAndRemoveComments();\n            this.initHistory('InsertTable');\n            this.documentHelper.owner.isShiftingEnabled = true;\n            this.insertBlock(table);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.containerWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.containerWidget.containerWidget) && table.containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n                table.containerWidget.containerWidget.height += table.height;\n                this.isTableInsert = true;\n            }\n        }\n        var startLine = this.documentHelper.getFirstParagraphInFirstCell(table).childWidgets[0];\n        startPos.setPosition(startLine, true);\n        this.selection.end.setPositionInternal(startPos);\n        var lastParagraph = this.documentHelper.getLastParagraphInLastCell(table.getSplitWidgets().pop());\n        var endOffset = lastParagraph.getLength() + 1;\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.endPosition = this.selection.getHierarchicalIndex(lastParagraph, endOffset.toString());\n        }\n        this.reLayout(this.selection);\n        this.isTableInsert = false;\n        this.updateHistoryForComments(removedComment);\n    };\n    /**\n     * Inserts the specified number of rows to the table above or below to the row at cursor position.\n     *\n     * @param {boolean} above The above parameter is optional and if omitted,\n     * it takes the value as false and inserts below the row at cursor position.\n     * @param {number} count The count parameter is optional and if omitted, it takes the value as 1.\n     * @returns {void}\n     */\n    Editor.prototype.insertRow = function (above, count) {\n        var rowPlacement = above ? 'Above' : 'Below';\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        var isInsertRow = true;\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var endPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        if (startPos.paragraph.isInsideTable) {\n            if (this.checkIsNotRedoing()) {\n                this.initHistory(rowPlacement === 'Above' ? 'InsertRowAbove' : 'InsertRowBelow');\n            }\n            this.documentHelper.owner.isShiftingEnabled = true;\n            var startCell = this.getOwnerCell(this.selection.isForward).getSplitWidgets()[0];\n            var endCell = this.getOwnerCell(!this.selection.isForward).getSplitWidgets()[0];\n            var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n            var row = rowPlacement === 'Below' ? endCell.ownerRow : startCell.ownerRow;\n            if (this.editorHistory) {\n                var clonedTable = this.cloneTableToHistoryInfo(table);\n            }\n            this.rowInsertion(count, rowPlacement, startCell, endCell, row, table, isInsertRow);\n        }\n        this.reLayout(this.selection, true);\n    };\n    Editor.prototype.rowInsertion = function (count, rowPlacement, startCell, endCell, row, table, isInsertRow) {\n        var rowCount = count ? count : this.getRowCountToInsert();\n        var rows = [];\n        var index = row.rowIndex;\n        if (rowPlacement === 'Below') {\n            index++;\n            var isAffectedByRowSpannedCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell.previousWidget)\n                || endCell.columnIndex === endCell.previousWidget.columnIndex + 1;\n            var isRowSpanEnd = endCell.cellIndex !== endCell.columnIndex && isAffectedByRowSpannedCell\n                && row.rowIndex + startCell.cellFormat.rowSpan - 1 === endCell.ownerRow.rowIndex;\n            if (!isRowSpanEnd) {\n                if (endCell.cellFormat.rowSpan > 1) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(row.nextWidget) && row.nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget) {\n                        endCell.cellFormat.rowSpan += rowCount;\n                        row = row.nextWidget;\n                    }\n                }\n            }\n            row.bottomBorderWidth = 0;\n        }\n        for (var i = 0; i < rowCount; i++) {\n            var cellCountInfo = this.updateRowspan(row, rowPlacement === 'Below' ? endCell : startCell, rowPlacement);\n            var newRow = this.createRowAndColumn(cellCountInfo.count, i, index, table);\n            newRow.rowFormat = row.rowFormat.cloneFormat();\n            newRow.rowFormat.ownerBase = newRow;\n            if (this.owner.enableTrackChanges) {\n                this.insertRevision(newRow.rowFormat, 'Insertion');\n            }\n            this.updateCellFormatForInsertedRow(newRow, cellCountInfo.cellFormats);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n                this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(newRow);\n            }\n            rows.push(newRow);\n        }\n        table.insertTableRowsInternal(rows, index, isInsertRow);\n        var cell = undefined;\n        var paragraph = undefined;\n        if ((table.childWidgets[index] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget)) {\n            cell = table.childWidgets[index].firstChild;\n            paragraph = this.selection.getFirstParagraph(cell);\n        }\n        else {\n            var widget = undefined;\n            while (!(widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget)) {\n                widget = table.nextRenderedWidget;\n            }\n            paragraph = this.documentHelper.getFirstParagraphInFirstCell(widget);\n        }\n        if (isInsertRow) {\n            this.documentHelper.layout.reLayoutTable(table);\n        }\n        this.selection.selectParagraphInternal(paragraph, true);\n    };\n    /**\n     * Fits the table based on AutoFitType.\n     *\n     * @param {AutoFitType} fitType Specify the auto fit type.\n     * @returns {void}\n     */\n    Editor.prototype.autoFitTable = function (fitType) {\n        if (this.documentHelper.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        this.insertAutoFitTable(fitType);\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertAutoFitTable = function (fitType, tableAdv) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableAdv)) {\n            var startPosition = this.selection.start;\n            var endPosition = this.selection.end;\n            if (!this.selection.isForward) {\n                startPosition = this.selection.end;\n                endPosition = this.selection.start;\n            }\n            tableAdv = this.selection.getTable(startPosition, endPosition);\n            tableAdv = tableAdv.getSplitWidgets()[0];\n        }\n        var parentTable = this.documentHelper.layout.getParentTable(tableAdv);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(parentTable)) {\n            this.setOffsetValue(this.selection);\n            parentTable = parentTable.combineWidget(this.owner.viewer);\n            this.initHistory(fitType === 'FitToContents' ? 'TableAutoFitToContents' : fitType === 'FitToWindow' ? 'TableAutoFitToWindow' : 'TableFixedColumnWidth');\n            if (this.documentHelper.owner.editorHistoryModule) {\n                this.cloneTableToHistoryInfo(parentTable);\n            }\n            parentTable.updateProperties(true, tableAdv, fitType);\n            this.documentHelper.owner.isShiftingEnabled = true;\n            //Layouts the table.\n            this.documentHelper.layout.reLayoutTable(tableAdv);\n            this.reLayout(this.selection, true);\n        }\n    };\n    /**\n     * Inserting the row for collaborative editing.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.rowInsertionForCE = function (index, cellCount, insertrow, table, rowData, cellData, paragraphData, characterData) {\n        var rows = [];\n        for (var i = 0; i < insertrow; i++) {\n            var newRow = this.createRowAndColumn(cellCount, i, index, table);\n            this.documentHelper.owner.parser.parseRowFormat(rowData, newRow.rowFormat, 0);\n            for (var j = 0; j < cellCount; j++) {\n                var cellWidget = newRow.childWidgets[j];\n                this.documentHelper.owner.parser.parseCellFormat(cellData[j], cellWidget.cellFormat, 0);\n                this.documentHelper.owner.parser.parseParagraphFormat(0, paragraphData[j], cellWidget.childWidgets[0].paragraphFormat);\n                this.documentHelper.owner.parser.parseCharacterFormat(0, characterData[j], cellWidget.childWidgets[0].characterFormat);\n            }\n            if (this.owner.enableTrackChanges) {\n                this.insertRevision(newRow.rowFormat, 'Insertion');\n            }\n            rows.push(newRow);\n        }\n        table.insertTableRowsInternal(rows, index, true);\n        var cell = undefined;\n        var paragraph = undefined;\n        if ((table.childWidgets[index] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget)) {\n            cell = table.childWidgets[index].firstChild;\n            paragraph = this.selection.getFirstParagraph(cell);\n        }\n        else {\n            var widget = undefined;\n            while (!(widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget)) {\n                widget = table.nextRenderedWidget;\n            }\n            paragraph = this.documentHelper.getFirstParagraphInFirstCell(widget);\n        }\n        this.documentHelper.layout.reLayoutTable(table);\n        this.selection.selectParagraphInternal(paragraph, true);\n        this.reLayout(this.selection, true);\n    };\n    Editor.prototype.updateCellFormatForInsertedRow = function (newRow, cellFormats) {\n        for (var i = 0; i < newRow.childWidgets.length; i++) {\n            newRow.childWidgets[i].cellFormat.copyFormat(cellFormats[i]);\n            newRow.childWidgets[i].cellFormat.rowSpan = 1;\n        }\n    };\n    Editor.prototype.updateRowspan = function (row, startCell, rowPlacement) {\n        var spannedCells = row.getPreviousRowSpannedCells(true);\n        var count = 0;\n        var cellFormats = [];\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            var cell = row.childWidgets[i];\n            var isCellIncluded = false;\n            // Need to check with all the row spanned cells. if the start cell contains rowspan greater than 1, \n            // and when inserting below, need to increment rowspan for all row spanned cells by 1 except\n            // if the spanned cells is placed in the same column or cell to be cloned has the same row index of cloned cell row index.\n            // and when inserting above, if cloned cell placed in the same row of start cell or\n            // if the cloned cell has equal column index, need to skip updating rowspan value of cloned cell.\n            // else update row span value for spanned cell except \n            // if the spanned cells is placed in the same column or cell to be cloned has the same row index of cloned cell row index.\n            var isRowSpanned = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell.previousWidget)\n                || cell.columnIndex !== cell.previousWidget.columnIndex + 1);\n            for (var j = 0; j < spannedCells.length; j++) {\n                if (isRowSpanned) {\n                    var spannedCell = spannedCells[j];\n                    var clonedRowIndex = spannedCell.ownerRow.rowIndex + spannedCell.cellFormat.rowSpan - 1;\n                    if (cell.columnIndex < spannedCell.columnIndex && cell.cellIndex !== cell.columnIndex && !isCellIncluded) {\n                        isCellIncluded = true;\n                        count++;\n                        cellFormats.push(cell.cellFormat);\n                    }\n                    if (startCell.cellFormat.rowSpan === 1) {\n                        // Need to check whether cell is affected by a row spanned cell. if cell is placed on the row where it is affected \n                        // by row spanned cell, then if we are inserting row below, need to add new cell with spanned cell width\n                        // or if we are inserting above, need to update row span value of the spanned cell.\n                        // if cell is placed inbetween the spanned cell , \n                        // then if we are inserting below, need to update row span value of spanned cell or\n                        // if we are inserting above, need to skip updating row span value except\n                        // if start cell is placed on the same row of spanned cell or if start cell placed in the same column.\n                        if (clonedRowIndex > cell.ownerRow.rowIndex) {\n                            if (rowPlacement === 'Above'\n                                && spannedCell.ownerRow === startCell.ownerRow) {\n                                continue;\n                            }\n                            else {\n                                spannedCell.cellFormat.rowSpan += 1;\n                                spannedCells.splice(j, 1);\n                                j--;\n                            }\n                        }\n                        else if (cell.cellIndex !== cell.columnIndex && isRowSpanned && clonedRowIndex === cell.ownerRow.rowIndex) {\n                            if (rowPlacement === 'Above') {\n                                spannedCell.cellFormat.rowSpan += 1;\n                                spannedCells.splice(j, 1);\n                                j--;\n                            }\n                            else {\n                                count++;\n                                cellFormats.push(spannedCell.cellFormat);\n                                spannedCells.splice(j, 1);\n                                j--;\n                            }\n                        }\n                    }\n                    else {\n                        if (spannedCell !== startCell) {\n                            if (rowPlacement === 'Above'\n                                && (spannedCell.ownerRow === startCell.ownerRow || spannedCell.columnIndex === startCell.columnIndex)) {\n                                continue;\n                            }\n                            else {\n                                if (spannedCell.columnIndex !== startCell.columnIndex\n                                    && spannedCell.ownerRow.rowIndex !== cell.ownerRow.rowIndex\n                                    && (clonedRowIndex > startCell.ownerRow.rowIndex\n                                        || (rowPlacement === 'Above' && clonedRowIndex === startCell.ownerRow.rowIndex))) {\n                                    spannedCell.cellFormat.rowSpan += 1;\n                                    spannedCells.splice(j, 1);\n                                    j--;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (spannedCells.indexOf(cell) === -1 && cell.cellFormat.rowSpan > 1) {\n                isCellIncluded = true;\n            }\n            if (!isCellIncluded) {\n                count++;\n                cellFormats.push(cell.cellFormat);\n            }\n        }\n        cellFormats.sort(function (a, b) { return a.ownerBase.columnIndex - b.ownerBase.columnIndex; });\n        return { count: count, cellFormats: cellFormats };\n    };\n    Editor.prototype.getInsertedTable = function (table, index) {\n        if (table.childWidgets && table.childWidgets.length > 0) {\n            table.childWidgets.splice(0, index);\n            this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(table);\n        }\n    };\n    Editor.prototype.insertTableRows = function (table, prevBlock) {\n        this.initHistory('InsertTableBelow');\n        table.containerWidget = prevBlock.containerWidget;\n        prevBlock = prevBlock.combineWidget(this.owner.viewer);\n        // if (this.editorHistory) {\n        //     let clonedTable: TableWidget = this.cloneTableToHistoryInfo(prevBlock);\n        // }\n        var row = prevBlock.childWidgets[prevBlock.childWidgets.length - 1];\n        var index = prevBlock.childWidgets.length;\n        var initilizeCellBorder = false;\n        var newTableBorders = table.tableFormat.borders;\n        var prevTableBorders = prevBlock.tableFormat.borders;\n        if (newTableBorders.left.lineStyle !== prevTableBorders.left.lineStyle || newTableBorders.top.lineStyle !== prevTableBorders.top.lineStyle ||\n            newTableBorders.right.lineStyle !== prevTableBorders.right.lineStyle || newTableBorders.bottom.lineStyle !== prevTableBorders.bottom.lineStyle) {\n            initilizeCellBorder = true;\n        }\n        prevBlock.insertTableRowsInternal(table.childWidgets, index, true, initilizeCellBorder);\n        var cloneTable = prevBlock.clone();\n        this.getInsertedTable(cloneTable, index);\n        var paragraph = this.selection.getFirstParagraph(row.nextWidget.childWidgets[0]);\n        prevBlock.isDefaultFormatUpdated = false;\n        this.documentHelper.layout.reLayoutTable(prevBlock);\n        if (this.checkInsertPosition(this.selection)) {\n            this.updateHistoryPosition(this.selection.getHierarchicalIndex(paragraph, '0'), true);\n        }\n        this.selection.start.setPosition(paragraph.firstChild, true);\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.updateHistoryPosition(this.selection.end, false);\n        }\n        this.selection.end.setPosition(paragraph.firstChild, true);\n        this.reLayout(this.selection);\n    };\n    /**\n     * Inserts the specified number of columns to the table left or right to the column at cursor position.\n     *\n     * @param {number} left The left parameter is optional and if omitted, it takes the value as false and\n     * inserts to the right of column at cursor position.\n     * @param {number} count The count parameter is optional and if omitted, it takes the value as 1.\n     * @returns {void}\n     */\n    Editor.prototype.insertColumn = function (left, count) {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        var columnPlacement = left ? 'Left' : 'Right';\n        if (this.selection.start.paragraph.isInsideTable) {\n            if (this.checkIsNotRedoing()) {\n                this.initHistory(columnPlacement === 'Left' ? 'InsertColumnLeft' : 'InsertColumnRight');\n            }\n            this.selection.owner.isShiftingEnabled = true;\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var endCell = this.getOwnerCell(!this.selection.isForward);\n            var table = startCell.ownerRow.ownerTable.combineWidget(this.owner.viewer);\n            if (this.editorHistory) {\n                //Clones the entire table to preserve in history.\n                this.cloneTableToHistoryInfo(table);\n            }\n            this.selection.owner.isLayoutEnabled = false;\n            var cellIndex = startCell.columnIndex;\n            if (columnPlacement === 'Right') {\n                cellIndex = endCell.columnIndex + endCell.cellFormat.columnSpan;\n            }\n            var startParagraph = undefined;\n            var newCell = undefined;\n            var columnCount = count ? count : this.getColumnCountToInsert();\n            var rowSpannedCells = [];\n            //let rowSpanCellIndex: number = cellIndex;\n            for (var i = 0; i < columnCount; i++) {\n                for (var j = 0; j < table.childWidgets.length; j++) {\n                    var row = table.childWidgets[j];\n                    newCell = this.createColumn(this.selection.getLastParagraph(startCell));\n                    newCell.index = j;\n                    newCell.rowIndex = row.rowIndex;\n                    newCell.containerWidget = row;\n                    newCell.cellFormat.copyFormat(startCell.cellFormat);\n                    newCell.cellFormat.rowSpan = 1;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startParagraph)) {\n                        startParagraph = this.selection.getFirstParagraph(newCell);\n                    }\n                    if (cellIndex === 0) {\n                        row.childWidgets.splice(cellIndex, 0, newCell);\n                    }\n                    else {\n                        this.insertSpannedCells(row, rowSpannedCells, newCell, cellIndex);\n                    }\n                    this.copyCellFormats(row, cellIndex);\n                    this.editorHistory.currentBaseHistoryInfo.insertedNodes.push(newCell);\n                }\n            }\n            this.tableReLayout(table, startParagraph, newCell);\n        }\n    };\n    /**\n     * Inserting the cell for collaborative editing.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.cellInsertionForCE = function (index, row, cellData, paragraphData, characterData) {\n        var startParagraph = undefined;\n        var newCell = undefined;\n        newCell = this.createColumn(undefined);\n        var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(newCell.childWidgets[0]);\n        newCell.childWidgets[0].childWidgets.push(line);\n        newCell.index = row.index;\n        newCell.rowIndex = row.rowIndex;\n        newCell.containerWidget = row;\n        this.documentHelper.owner.parser.parseCellFormat(cellData, newCell.cellFormat, 0);\n        this.documentHelper.owner.parser.parseParagraphFormat(0, paragraphData, newCell.childWidgets[0].paragraphFormat);\n        this.documentHelper.owner.parser.parseCharacterFormat(0, characterData, newCell.childWidgets[0].characterFormat);\n        newCell.cellFormat.rowSpan = 1;\n        row.childWidgets.splice(index, 0, newCell);\n    };\n    Editor.prototype.copyCellFormats = function (row, index) {\n        var newCell = row.childWidgets[index];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newCell)) {\n            var newCellPara = newCell.childWidgets[0];\n            (index == (row.childWidgets.length - 1)) ? --index : ++index;\n            var nextCell = row.childWidgets[index];\n            var widget = nextCell.childWidgets[0];\n            while (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                widget = widget.childWidgets[0].childWidgets[0].childWidgets[0];\n            }\n            var nextCellpara = nextCell.childWidgets[0];\n            var line = void 0;\n            var nextCellTextBox = void 0;\n            if (nextCellpara.childWidgets.length > 0) {\n                line = nextCellpara.childWidgets[0];\n                if (line.children.length > 0) {\n                    nextCellTextBox = line.children[0];\n                }\n            }\n            newCellPara.paragraphFormat.copyFormat(nextCellpara.paragraphFormat);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextCellTextBox)) {\n                newCellPara.characterFormat.copyFormat(nextCellTextBox.characterFormat);\n            }\n            else {\n                newCellPara.characterFormat.copyFormat(nextCellpara.characterFormat);\n            }\n        }\n    };\n    Editor.prototype.copyContent = function (table) {\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.owner.enableCollaborativeEditing) {\n            var lastPara = this.documentHelper.getLastParagraphBlock(table);\n            var firstPara = this.documentHelper.getFirstParagraphBlock(table);\n            if (firstPara.childWidgets.length === 0) {\n                firstPara.childWidgets[0] = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(firstPara);\n            }\n            if (lastPara.childWidgets.length === 0) {\n                lastPara.childWidgets[0] = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(lastPara);\n            }\n            var startLine = firstPara.firstChild;\n            var lastLine = lastPara.lastChild;\n            var endoffset = lastPara.lastChild.getEndOffset();\n            var documentContent = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.owner.sfdtExportModule.write((this.owner.documentEditorSettings.optimizeSfdt ? 1 : 0), startLine, 0, lastLine, endoffset, false, true) : {};\n            this.editorHistory.currentBaseHistoryInfo.pasteContent = documentContent;\n        }\n    };\n    Editor.prototype.tableReLayout = function (table, startParagraph, newCell, isCollaborativePaste) {\n        table.updateRowIndex(0);\n        var parentTable = this.documentHelper.layout.getParentTable(table);\n        if (parentTable) {\n            parentTable.fitChildToClientArea();\n        }\n        else {\n            table.fitChildToClientArea();\n        }\n        this.selection.owner.isLayoutEnabled = true;\n        table.isGridUpdated = false;\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n        this.documentHelper.skipScrollToPosition = true;\n        if (isCollaborativePaste) {\n            this.copyContent(table);\n        }\n        this.documentHelper.layout.reLayoutTable(table);\n        this.selection.start.setPosition(startParagraph.firstChild, true);\n        this.selection.end.setPosition(this.selection.getLastParagraph(newCell).firstChild, false);\n        if (this.checkIsNotRedoing() || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)) {\n            this.reLayout(this.selection);\n        }\n    };\n    /**\n     * Creates table with specified rows and columns.\n     * @private\n     *\n     * @returns {TableWidget}\n     */\n    Editor.prototype.createTable = function (rows, columns) {\n        var startPara = this.selection.start.paragraph;\n        var table = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget();\n        table.tableFormat.preferredWidthType = 'Auto';\n        table.tableFormat.leftIndent = this.selection.start.paragraph.leftIndent;\n        table.tableFormat.initializeTableBorders();\n        var index = 0;\n        while (index < rows) {\n            var tableRow = this.createRowAndColumn(columns, index);\n            tableRow.rowFormat.heightType = 'Auto';\n            if (this.owner.enableTrackChanges) {\n                this.insertRevision(tableRow.rowFormat, 'Insertion');\n            }\n            tableRow.containerWidget = table;\n            table.childWidgets.push(tableRow);\n            index++;\n        }\n        return table;\n    };\n    Editor.prototype.createRowAndColumn = function (columns, rowIndex, index, table) {\n        var tableWidget = table;\n        var startPara = this.selection.start.paragraph;\n        var tableRow = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget();\n        tableRow.rowFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat(tableRow);\n        tableRow.index = rowIndex;\n        for (var i = 0; i < columns; i++) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(index) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableWidget)) {\n                if (index && index > 0 && tableWidget.childWidgets[index - 1] && tableWidget.childWidgets[index - 1].childWidgets[i]) {\n                    var widget = tableWidget.childWidgets[index - 1].childWidgets[i].childWidgets[0];\n                    while (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        widget = widget.childWidgets[0].childWidgets[0].childWidgets[0];\n                    }\n                    startPara = widget;\n                }\n                else if (index == 0) {\n                    var widget = tableWidget.childWidgets[index].childWidgets[i].childWidgets[0];\n                    while (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        widget = widget.childWidgets[0].childWidgets[0].childWidgets[0];\n                    }\n                    startPara = widget;\n                }\n            }\n            var tableCell = this.createColumn(startPara, true);\n            tableCell.index = i;\n            tableCell.rowIndex = rowIndex;\n            tableCell.containerWidget = tableRow;\n            tableRow.childWidgets.push(tableCell);\n        }\n        return tableRow;\n    };\n    Editor.prototype.createColumn = function (paragraph, isNewRow) {\n        var tableCell = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget();\n        var para = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        // let line: LineWidget = new LineWidget(para);\n        // para.childWidgets.push(line);\n        if (isNewRow) {\n            para.paragraphFormat.copyFormat(paragraph.paragraphFormat);\n            para.paragraphFormat.leftIndent = 0;\n            para.paragraphFormat.firstLineIndent = 0;\n            var elementBox = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.childWidgets[0])) {\n                elementBox = paragraph.childWidgets[0].children[0];\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox)) {\n                para.characterFormat.copyFormat(elementBox.characterFormat);\n            }\n            else {\n                para.characterFormat.copyFormat(paragraph.characterFormat);\n            }\n        }\n        para.containerWidget = tableCell;\n        tableCell.childWidgets.push(para);\n        tableCell.cellFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WCellFormat(tableCell);\n        return tableCell;\n    };\n    Editor.prototype.getColumnCountToInsert = function () {\n        var count = 1;\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.selection.isForward) {\n            start = this.selection.end;\n            end = this.selection.start;\n        }\n        if (start && end && this.selection.getTable(start, end)) {\n            if (start.paragraph.associatedCell === end.paragraph.associatedCell) {\n                return count = 1;\n            }\n            if (start.paragraph.associatedCell.ownerRow === end.paragraph.associatedCell.ownerRow) {\n                return count = count + end.paragraph.associatedCell.cellIndex - start.paragraph.associatedCell.cellIndex;\n            }\n            else {\n                count = 0;\n                var selectedCells = start.paragraph.associatedCell.ownerTable.getColumnCellsForSelection(start.paragraph.associatedCell, end.paragraph.associatedCell);\n                for (var i = 0; i < selectedCells.length; i++) {\n                    if (start.paragraph.associatedCell.ownerRow === selectedCells[i].ownerRow) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count === 0 ? 1 : count;\n    };\n    Editor.prototype.getRowCountToInsert = function () {\n        var count = 1;\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.selection.isForward) {\n            start = this.selection.end;\n            end = this.selection.start;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(start) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(end) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.getTable(start, end))) {\n            if (start.paragraph.associatedCell === end.paragraph.associatedCell ||\n                start.paragraph.associatedCell.ownerRow === end.paragraph.associatedCell.ownerRow) {\n                return count = 1;\n            }\n            else {\n                return count = count +\n                    this.getOwnerRow(!this.selection.isForward).rowIndex - this.getOwnerRow(this.selection.isForward).rowIndex;\n            }\n        }\n        return count === 0 ? 1 : count;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getOwnerCell = function (isStart) {\n        var cell = undefined;\n        var startCell = isStart ? this.selection.start.paragraph.associatedCell\n            : this.selection.end.paragraph.associatedCell;\n        var endCell = isStart ? this.selection.end.paragraph.associatedCell\n            : this.selection.start.paragraph.associatedCell;\n        cell = startCell;\n        var owner = cell.ownerTable;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(owner) && owner.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget && owner !== endCell.ownerTable) {\n            cell = owner.containerWidget;\n            owner = cell.ownerTable;\n        }\n        return cell;\n    };\n    Editor.prototype.getOwnerRow = function (isStart) {\n        var row;\n        var startRow = isStart ? this.selection.start.paragraph.associatedCell.ownerRow\n            : this.selection.end.paragraph.associatedCell.ownerRow;\n        var endRow = isStart ? this.selection.end.paragraph.associatedCell.ownerRow\n            : this.selection.start.paragraph.associatedCell.ownerRow;\n        row = startRow;\n        var owner = row.ownerTable;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(owner) && owner.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget && owner !== endRow.ownerTable) {\n            row = owner.containerWidget.ownerRow;\n            owner = row.ownerTable;\n        }\n        return row;\n    };\n    Editor.prototype.getOwnerTable = function (isStart) {\n        var table = undefined;\n        var startTable = this.selection.start.paragraph.associatedCell.ownerTable;\n        var endTable = this.selection.end.paragraph.associatedCell.ownerTable;\n        table = isStart ? startTable : endTable;\n        while (table.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget && table !== (isStart ? endTable : startTable)) {\n            table = table.containerWidget.ownerTable;\n        }\n        return table;\n    };\n    /**\n     * Merge Selected cells\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.mergeSelectedCellsInTable = function () {\n        if (!this.canMergeCells()) {\n            return;\n        }\n        if (this.owner.enableTrackChanges) {\n            var localizeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            localizeValue.setLocale(this.owner.locale);\n            this.alertDialog = _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n                title: localizeValue.getConstant('UnTrack'),\n                content: localizeValue.getConstant('Merge Track'),\n                showCloseIcon: true,\n                okButton: {\n                    text: 'Ok', click: this.confirmCellMerge.bind(this)\n                },\n                closeOnEscape: true,\n                position: { X: 'center', Y: 'center' },\n                animationSettings: { effect: 'Zoom' }\n            });\n            this.alertDialog.enableRtl = this.owner.enableRtl;\n        }\n        else {\n            this.confirmCellMerge();\n        }\n    };\n    Editor.prototype.confirmCellMerge = function () {\n        if (this.checkIsNotRedoing()) {\n            this.initHistory('MergeCells');\n        }\n        this.selection.owner.isShiftingEnabled = true;\n        var startPosition = this.selection.start;\n        var endPosition = this.selection.end;\n        if (!this.selection.isForward) {\n            startPosition = this.selection.end;\n            endPosition = this.selection.start;\n        }\n        var startOwnerCell = this.getOwnerCell(this.selection.isForward);\n        var endOwnerCell = this.getOwnerCell(!this.selection.isForward);\n        var containerCell = this.selection.getContainerCellOf(startOwnerCell, endOwnerCell);\n        if (containerCell.ownerTable.contains(endOwnerCell)) {\n            if (!this.selection.containsCell(containerCell, endOwnerCell)) {\n                //Start and End are in different cells.               \n                var table = startOwnerCell.ownerTable.combineWidget(this.owner.viewer);\n                startOwnerCell = this.selection.getSelectedCell(startOwnerCell, containerCell);\n                endOwnerCell = this.selection.getSelectedCell(endOwnerCell, containerCell);\n                //Merges the selected cells.               \n                var mergedCell = this.mergeSelectedCells(table, startOwnerCell, endOwnerCell);\n                var firstParagraph = this.selection.getFirstParagraph(mergedCell);\n                startPosition.setPosition(firstParagraph.firstChild, true);\n                var lastParagraph = this.selection.getLastParagraph(mergedCell);\n                endPosition.setPosition(lastParagraph.lastChild, false);\n                this.selection.fireSelectionChanged(false);\n            }\n        }\n        if (this.checkIsNotRedoing() || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)) {\n            this.reLayout(this.selection, false);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.alertDialog)) {\n            this.alertDialog.close();\n            this.alertDialog = undefined;\n        }\n    };\n    Editor.prototype.mergeSelectedCells = function (table, startCell, endCell) {\n        //Clones the entire table to preserve in history.\n        var clonedTable = this.cloneTableToHistoryInfo(table);\n        this.selection.owner.isLayoutEnabled = false;\n        //Merges the selected cells.\n        var start = this.selection.getCellLeft(startCell.ownerRow, startCell);\n        var end = start + startCell.cellFormat.cellWidth;\n        var endCellLeft = this.selection.getCellLeft(endCell.ownerRow, endCell);\n        var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(start, end, endCellLeft, endCellRight);\n        start = cellInfo.start;\n        end = cellInfo.end;\n        var endCellRowSpan = endCell.cellFormat.rowSpan;\n        var count = table.childWidgets.indexOf(endCell.ownerRow);\n        var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n        var mergedCell = undefined;\n        var firstBlock;\n        for (var i = rowStartIndex; i <= count; i++) {\n            var row = table.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[j];\n                var cellStart = this.selection.getCellLeft(row, cell);\n                if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(start, 2) <= _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellStart, 2)\n                    && _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellStart, 2) < _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(end, 2)) {\n                    var lastBlock = cell.lastChild;\n                    if (lastBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && lastBlock.isEmpty()) {\n                        cell.childWidgets.pop();\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(mergedCell)) {\n                        mergedCell = cell;\n                        firstBlock = lastBlock;\n                    }\n                    else {\n                        if (i === rowStartIndex) {\n                            mergedCell.cellFormat.preferredWidth += cell.cellFormat.preferredWidth;\n                            mergedCell.cellFormat.columnSpan += cell.cellFormat.columnSpan;\n                            this.mergeBorders(mergedCell, cell);\n                        }\n                        for (var k = 0; k < cell.childWidgets.length; k++) {\n                            var block = cell.childWidgets[k];\n                            var newBlock = block.clone();\n                            newBlock.containerWidget = mergedCell;\n                            mergedCell.childWidgets.push(newBlock);\n                        }\n                        row.childWidgets.splice(j, 1);\n                        cell.destroy();\n                        j--;\n                        for (var l = this.documentHelper.contentControlCollection.length - 1; l > -1; l--) {\n                            var content = this.documentHelper.contentControlCollection[l];\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(content.contentControlProperties)) {\n                                this.documentHelper.contentControlCollection.splice(l);\n                            }\n                        }\n                    }\n                }\n            }\n            //To Ensure minimul content. \n            if ((mergedCell.childWidgets.length === 0 || mergedCell.childWidgets.length === 1 && mergedCell.childWidgets[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) && firstBlock) {\n                var newBlock = firstBlock.clone();\n                mergedCell.childWidgets.push(newBlock);\n                newBlock.containerWidget = mergedCell;\n            }\n            if (row.childWidgets.length === 0) {\n                var rowIndex = table.childWidgets.indexOf(row);\n                row.updateRowBySpannedCells();\n                table.childWidgets.splice(rowIndex, 1);\n                // This line is commented because if we destroy the row it is also reflected in removedNodes in EditorHistoryModule which leads to exception while performing undo of merged cells.\n                // row.destroy();\n                count--;\n                i--;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(mergedCell) && rowStartIndex < count) {\n            mergedCell.cellFormat.rowSpan = count - rowStartIndex + endCellRowSpan;\n        }\n        this.updateBlockIndexAfterMerge(mergedCell);\n        table.updateRowIndex(0);\n        table.calculateGrid();\n        table.isGridUpdated = false;\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n        this.documentHelper.layout.reLayoutTable(table);\n        //Layouts the table after merging cells.\n        this.selection.owner.isLayoutEnabled = true;\n        return mergedCell;\n    };\n    Editor.prototype.mergeBorders = function (mergedCell, tableCell) {\n        var mergedCellborders = undefined;\n        var cellBorders = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(mergedCell.cellFormat.borders)) {\n            mergedCellborders = mergedCell.cellFormat.borders;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableCell.cellFormat.borders)) {\n            cellBorders = tableCell.cellFormat.borders;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(mergedCellborders) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cellBorders)) {\n            return;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(mergedCellborders)) {\n            mergedCellborders = new _index__WEBPACK_IMPORTED_MODULE_5__.WBorders(mergedCell.cellFormat);\n            mergedCellborders.copyFormat(cellBorders);\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cellBorders)) {\n            return;\n        }\n        else {\n            if (mergedCell.ownerRow.rowIndex === tableCell.ownerRow.rowIndex) {\n                mergedCellborders.top = mergedCell.getBorderBasedOnPriority(mergedCellborders.top, cellBorders.bottom);\n                mergedCellborders.bottom = mergedCell.getBorderBasedOnPriority(mergedCellborders.bottom, cellBorders.bottom);\n            }\n        }\n    };\n    Editor.prototype.updateBlockIndexAfterMerge = function (cell) {\n        for (var i = 0; i < cell.childWidgets.length; i++) {\n            cell.childWidgets[i].index = i;\n        }\n    };\n    /**\n     * Determines whether the merge cell operation can be done.\n     *\n     * @returns {boolean} Returns true if to merge cells; Otherwise, false.\n     */\n    Editor.prototype.canMergeCells = function () {\n        if (this.selection.isEmpty || !this.selection.start.paragraph.isInsideTable || !this.selection.end.paragraph.isInsideTable) {\n            return false;\n        }\n        var startPos = this.selection.start;\n        var endPos = this.selection.end;\n        if (!this.selection.isForward) {\n            startPos = this.selection.end;\n            endPos = this.selection.start;\n        }\n        var startCell = this.getOwnerCell(this.selection.isForward);\n        var endCell = this.getOwnerCell(!this.selection.isForward);\n        var containerCell = this.selection.getContainerCellOf(startCell, endCell);\n        if (containerCell.ownerTable.contains(endCell)) {\n            if (!this.selection.containsCell(containerCell, endCell)) {\n                startCell = this.selection.getSelectedCell(startCell, containerCell);\n                endCell = this.selection.getSelectedCell(endCell, containerCell);\n                var rowSpan = 1;\n                if (startCell.ownerRow === endCell.ownerRow) {\n                    var startCellIndex = startCell.ownerRow.childWidgets.indexOf(startCell);\n                    for (var i = startCellIndex; i <= startCell.ownerRow.childWidgets.indexOf(endCell); i++) {\n                        var cell = startCell.ownerRow.childWidgets[i];\n                        var prevCell = cell.previousWidget;\n                        if (i !== startCellIndex) {\n                            if (cell.cellFormat.rowSpan !== rowSpan) {\n                                return false;\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevCell)\n                                && cell.columnIndex !== (prevCell.cellFormat.columnSpan + prevCell.columnIndex)) {\n                                return false;\n                            }\n                        }\n                        rowSpan = cell.cellFormat.rowSpan;\n                    }\n                    return true;\n                }\n                return this.canMergeSelectedCellsInTable(startCell.ownerTable, startCell, endCell);\n            }\n        }\n        return false;\n    };\n    Editor.prototype.canMergeSelectedCellsInTable = function (table, startCell, endCell) {\n        var count = table.childWidgets.indexOf(endCell.ownerRow);\n        var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n        var startLeft = this.selection.getCellLeft(startCell.ownerRow, startCell);\n        var endLeft = startLeft + startCell.cellFormat.cellWidth;\n        var endCellLeft = this.selection.getCellLeft(endCell.ownerRow, endCell);\n        var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(startLeft, endLeft, endCellLeft, endCellRight);\n        startLeft = cellInfo.start;\n        endLeft = cellInfo.end;\n        var selectionLeft = 0;\n        var selectionRight = 0;\n        var isRowLeftWithinSel = false;\n        var isRowRightWithinSel = false;\n        var rowSpannedCells = [];\n        for (var i = rowStartIndex; i <= count; i++) {\n            var row = table.childWidgets[i];\n            var rowLeft = 0;\n            var rowRight = 0;\n            var isStarted = false;\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[j];\n                var cellStart = this.selection.getCellLeft(row, cell);\n                if (this.checkCellWithInSelection(startLeft, endLeft, cellStart)) {\n                    isRowLeftWithinSel = false;\n                    isRowRightWithinSel = false;\n                    if (cell.cellFormat.rowSpan > 1) {\n                        rowSpannedCells.push(cell);\n                    }\n                    if (!isStarted) {\n                        rowLeft = cellStart;\n                        rowRight = cellStart;\n                        isStarted = true;\n                    }\n                    var prevCell = cell.previousWidget;\n                    if (rowRight !== 0 && _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(rowRight, 0) !== _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellStart, 0)) {\n                        rowRight = cellStart;\n                    }\n                    rowRight += _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(cell.cellFormat.cellWidth);\n                    var isPrevCellWithinSel = this.checkPrevOrNextCellIsWithinSel(startLeft, endLeft, cell, true);\n                    var isNextCellWithinSel = this.checkPrevOrNextCellIsWithinSel(startLeft, endLeft, cell, false);\n                    // When selected cell not having row spanned cells and column index is not having immediate cell index value,\n                    // then returned false.\n                    var isNoRowSpan = rowSpannedCells.length === 0 || rowSpannedCells.length === 1 && rowSpannedCells[0] === cell;\n                    // checks whether current cell is with in selection.\n                    var isCellWithInSel = this.checkCurrentCell(rowSpannedCells, cell, isPrevCellWithinSel, isNextCellWithinSel);\n                    // when last selected row not having equal row span then returned false.\n                    if (i === count && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevCell) && cell.cellFormat.rowSpan > prevCell.cellFormat.rowSpan\n                        && !isCellWithInSel) {\n                        return false;\n                    }\n                    if (i !== rowStartIndex) {\n                        for (var m = 0; m < rowSpannedCells.length; m++) {\n                            {\n                                var rowSpan = (rowSpannedCells[m].ownerRow.rowIndex + rowSpannedCells[m].cellFormat.rowSpan) - 1;\n                                if (rowSpan >= row.rowIndex) {\n                                    if (rowSpannedCells[m].columnIndex > cell.columnIndex) {\n                                        isRowRightWithinSel = true;\n                                    }\n                                    else {\n                                        isRowLeftWithinSel = true;\n                                    }\n                                    if (i === count && rowSpannedCells[m] !== cell\n                                        && rowSpan > (cell.ownerRow.rowIndex + cell.cellFormat.rowSpan - 1)) {\n                                        return false;\n                                    }\n                                    if (rowSpan === row.rowIndex && !this.checkPrevOrNextCellIsWithinSel(startLeft, endLeft, cell, false)) {\n                                        rowSpannedCells.splice(rowSpannedCells.indexOf(rowSpannedCells[m]), 1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (isPrevCellWithinSel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevCell)\n                        && isNoRowSpan\n                        && (cell.columnIndex !== prevCell.columnIndex + 1 && this.checkCellWidth(cell))) {\n                        return false;\n                    }\n                }\n            }\n            if (i === rowStartIndex) {\n                selectionLeft = rowLeft;\n                selectionRight = rowRight;\n            }\n            else {\n                if (rowRight > 0 && rowLeft > 0) {\n                    if (!((isRowLeftWithinSel || Math.round(selectionLeft) === Math.round(rowLeft))\n                        && (isRowRightWithinSel || Math.round(selectionRight) === Math.round(rowRight)))) {\n                        return false;\n                    }\n                }\n                if (i === count) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.checkCellWidth = function (cell) {\n        var prevCell = cell.previousWidget;\n        var cellLeft = this.documentHelper.selection.getCellLeft(cell.ownerRow, cell);\n        var prevCellLeft = this.documentHelper.selection.getCellLeft(cell.ownerRow, prevCell);\n        var left = prevCellLeft + _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(prevCell.cellFormat.cellWidth);\n        if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(left, 2) !== _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellLeft, 2)) {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.checkCellWithInSelection = function (startLeft, endLeft, cellStart) {\n        if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(startLeft, 2) <= _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellStart, 2)\n            && _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(cellStart, 2) < _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(endLeft, 2)) {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.checkPrevOrNextCellIsWithinSel = function (startLeft, endLeft, cell, isPrev) {\n        var prevOrNextCell = isPrev ? cell.previousWidget : cell.nextWidget;\n        var cellStart = 0;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevOrNextCell)) {\n            return false;\n        }\n        cellStart = this.documentHelper.selection.getCellLeft(prevOrNextCell.ownerRow, prevOrNextCell);\n        return this.checkCellWithInSelection(startLeft, endLeft, cellStart);\n    };\n    Editor.prototype.checkCurrentCell = function (rowSpannedCells, cell, isPrevCellWithInSel, isNextCellWithinSel) {\n        var cellOwner = cell.ownerRow;\n        if (rowSpannedCells.length > 0) {\n            for (var i = 0; i < rowSpannedCells.length; i++) {\n                var spannedCellOwner = rowSpannedCells[i].ownerRow;\n                var rowSpan = (spannedCellOwner.rowIndex + rowSpannedCells[i].cellFormat.rowSpan) - 1;\n                if (rowSpannedCells[i] === cell && (rowSpannedCells.length === 1 || this.checkRowSpannedCells(rowSpannedCells, cell))\n                    && !(isNextCellWithinSel || isPrevCellWithInSel)) {\n                    return true;\n                }\n                if (rowSpannedCells[i] !== cell && spannedCellOwner.rowIndex < cellOwner.rowIndex\n                    && rowSpan === (cellOwner.rowIndex + cell.cellFormat.rowSpan - 1)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.checkRowSpannedCells = function (rowSpannedCells, cell) {\n        for (var i = 0; i < rowSpannedCells.length; i++) {\n            if (rowSpannedCells[i] !== cell && rowSpannedCells[i].columnIndex === cell.columnIndex) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertNewParagraphWidget = function (newParagraph, insertAfter) {\n        this.updateInsertPosition();\n        this.insertParagraph(newParagraph, insertAfter);\n        if (!insertAfter) {\n            var nextParagraph = void 0;\n            var currentParagraph = newParagraph;\n            do {\n                nextParagraph = this.selection.getNextParagraphBlock(currentParagraph);\n                currentParagraph = nextParagraph;\n            } while (nextParagraph && nextParagraph.equals(newParagraph));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph)) {\n                this.selection.selectParagraphInternal(nextParagraph, true);\n            }\n            else {\n                this.selection.selectParagraphInternal(newParagraph, true);\n            }\n        }\n        this.fireContentChange();\n    };\n    Editor.prototype.insertParagraph = function (newParagraph, insertAfter) {\n        var lineWidget = this.selection.start.currentWidget;\n        var offset = this.selection.start.offset;\n        if (this.editorHistory && this.editorHistory.isUndoing && this.editorHistory.currentBaseHistoryInfo &&\n            this.editorHistory.currentBaseHistoryInfo.action === 'InsertTextParaReplace') {\n            offset = 0;\n        }\n        var currentParagraph = this.selection.start.paragraph;\n        currentParagraph = currentParagraph.combineWidget(this.owner.viewer);\n        if (insertAfter) {\n            var length_1 = this.selection.getLineLength(currentParagraph.lastChild);\n            var insertIndex_1 = newParagraph.firstChild ? newParagraph.firstChild.children.length : 0;\n            this.moveInlines(currentParagraph, newParagraph, insertIndex_1, offset, lineWidget, length_1, currentParagraph.lastChild);\n            if (currentParagraph.characterFormat.revisions.length > 0) {\n                while (currentParagraph.characterFormat.revisions.length > 0) {\n                    var revision = currentParagraph.characterFormat.revisions.shift();\n                    if (newParagraph.characterFormat.revisions.indexOf(revision) === -1) {\n                        newParagraph.characterFormat.revisions.push(revision);\n                    }\n                }\n            }\n            this.updateCharacterFormatRevision(currentParagraph, newParagraph);\n            if (newParagraph.characterFormat.removedIds.length > 0) {\n                while (newParagraph.characterFormat.removedIds.length > 0) {\n                    currentParagraph.characterFormat.removedIds.push(newParagraph.characterFormat.removedIds.shift());\n                }\n                this.constructRevisionFromID(currentParagraph.characterFormat, true);\n            }\n        }\n        else if (offset > 0) {\n            var length_2 = currentParagraph.getLength();\n            this.moveInlines(currentParagraph, newParagraph, 0, 0, currentParagraph.firstChild, offset, lineWidget);\n            if (this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing) && length_2 === offset && currentParagraph.characterFormat.revisions.length > 0) {\n                while (currentParagraph.characterFormat.revisions.length > 0) {\n                    newParagraph.characterFormat.revisions.push(currentParagraph.characterFormat.revisions.shift());\n                }\n            }\n        }\n        var splittedWidget = currentParagraph.getSplitWidgets();\n        currentParagraph = insertAfter ? splittedWidget[splittedWidget.length - 1] : splittedWidget[0];\n        var insertIndex = currentParagraph.containerWidget.childWidgets.indexOf(currentParagraph);\n        if (insertAfter) {\n            insertIndex++;\n        }\n        var bodyWidget = currentParagraph.containerWidget;\n        newParagraph.index = currentParagraph.index;\n        newParagraph.containerWidget = bodyWidget;\n        bodyWidget.childWidgets.splice(insertIndex, 0, newParagraph);\n        this.constructRevisionsForBlock(newParagraph, true);\n        this.updateNextBlocksIndex(insertAfter ? currentParagraph : newParagraph, true);\n        newParagraph.height = 0;\n        if (newParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            this.documentHelper.layout.linkFieldInParagraph(newParagraph);\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(newParagraph.index, bodyWidget, newParagraph, false);\n    };\n    Editor.prototype.updateCharacterFormatRevision = function (paragraph, newParagraph) {\n        var revisions = newParagraph.characterFormat.revisions;\n        for (var i = 0; i < revisions.length; i++) {\n            var revision = revisions[i];\n            if (revision.range.indexOf(paragraph.characterFormat) !== -1) {\n                var index = revision.range.indexOf(paragraph.characterFormat);\n                revision.range.splice(index, 1, newParagraph.characterFormat);\n                break;\n            }\n        }\n    };\n    Editor.prototype.moveInlines = function (currentParagraph, newParagraph, insertIndex, startOffset, startLine, endOffset, endLine, removeBlock) {\n        if (newParagraph.childWidgets.length === 0) {\n            var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(newParagraph);\n            newParagraph.childWidgets.push(line);\n        }\n        var isMoved = false;\n        this.documentHelper.layout.clearListElementBox(currentParagraph);\n        this.documentHelper.layout.clearListElementBox(newParagraph);\n        for (var j = 0; j < currentParagraph.childWidgets.length; j++) {\n            var lineWidget = currentParagraph.childWidgets[j];\n            if (startLine === lineWidget && endLine === lineWidget) {\n                insertIndex = this.moveContent(lineWidget, startOffset, endOffset, insertIndex, newParagraph);\n                break;\n            }\n            if (endLine === lineWidget) {\n                insertIndex = this.moveContent(lineWidget, 0, endOffset, insertIndex, newParagraph);\n                break;\n            }\n            else if (startLine === lineWidget) {\n                isMoved = true;\n                insertIndex = this.moveContent(lineWidget, startOffset, this.documentHelper.selection.getLineLength(lineWidget), insertIndex, newParagraph);\n            }\n            else if (isMoved) {\n                insertIndex = this.moveContent(lineWidget, 0, this.documentHelper.selection.getLineLength(lineWidget), insertIndex, newParagraph);\n            }\n        }\n        this.removeEmptyLine(currentParagraph);\n        if (!currentParagraph.isInsideTable && !removeBlock) {\n            this.viewer.updateClientArea(currentParagraph.bodyWidget, currentParagraph.bodyWidget.page);\n            this.documentHelper.layout.reLayoutParagraph(currentParagraph, 0, 0);\n        }\n    };\n    Editor.prototype.moveContent = function (lineWidget, startOffset, endOffset, insertIndex, paragraph) {\n        var count = 0;\n        //let lineIndex: number = lineWidget.paragraph.childWidgets.indexOf(lineWidget);\n        for (var i = 0; i < lineWidget.children.length; i++) {\n            var inline = lineWidget.children[i];\n            if (startOffset >= count + inline.length || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox)) {\n                    count += inline.length;\n                }\n                continue;\n            }\n            var startIndex = 0;\n            if (startOffset > count) {\n                startIndex = startOffset - count;\n            }\n            var endIndex = endOffset - count;\n            if (endIndex > inline.length) {\n                endIndex = inline.length;\n            }\n            if (startIndex > 0) {\n                count += startIndex;\n            }\n            if (startIndex === 0 && endIndex === inline.length) {\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ShapeBase) {\n                    var shapeIndex = lineWidget.paragraph.floatingElements.indexOf(inline);\n                    if (shapeIndex !== -1) {\n                        lineWidget.paragraph.floatingElements.splice(shapeIndex, 1);\n                    }\n                }\n                paragraph.firstChild.children.splice(insertIndex, 0, inline);\n                inline.line = paragraph.firstChild;\n                insertIndex++;\n                // if (editAction < 4) {\n                // this.unLinkFieldCharacter(inline);\n                lineWidget.children.splice(i, 1);\n                i--;\n                // }\n            }\n            else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                // if (editAction < 4) {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                span.characterFormat.copyFormat(inline.characterFormat);\n                span.text = inline.text.substr(startIndex, endIndex - startIndex);\n                inline.ischangeDetected = true;\n                span.ischangeDetected = true;\n                paragraph.firstChild.children.splice(insertIndex, 0, span);\n                span.line = paragraph.firstChild;\n                insertIndex++;\n                this.updateRevisionForMovedContent(inline, span);\n                inline.text = inline.text.slice(0, startIndex) + inline.text.slice(endIndex);\n                inline.isWidthUpdated = false;\n                inline.ischangeDetected = true;\n            }\n            if (endOffset <= count + endIndex - startIndex) {\n                break;\n            }\n            count += endIndex - startIndex;\n        }\n        return insertIndex;\n    };\n    Editor.prototype.updateRevisionForMovedContent = function (inline, tempSpan) {\n        for (var i = 0; i < inline.revisions.length; i++) {\n            var currentRevision = inline.revisions[i];\n            var rangeIndex = currentRevision.range.indexOf(inline);\n            tempSpan.revisions.splice(0, 0, currentRevision);\n            currentRevision.range.splice(rangeIndex, 0, tempSpan);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        }\n    };\n    /**\n     * update complex changes when history is not preserved\n     *\n     * @param {number} action - Specifies the action\n     * @param {string} start - Specifies the selection start\n     * @param {string} end - Specified the selection end\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateComplexWithoutHistory = function (action, start, end) {\n        var selection = this.documentHelper.selection;\n        if (action === 0) {\n            var startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n            this.setPositionForCurrentIndex(startPosition, start);\n            this.documentHelper.layout.reLayoutParagraph(startPosition.paragraph, 0, 0);\n            this.setPositionForCurrentIndex(selection.start, end);\n            this.setPositionForCurrentIndex(selection.end, end);\n        }\n        if (action === 1) {\n            var startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n            this.setPositionForCurrentIndex(startPosition, start);\n            var endPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n            this.setPositionForCurrentIndex(endPosition, end);\n            this.documentHelper.layout.reLayoutParagraph(startPosition.paragraph, 0, 0);\n            if (endPosition.paragraph !== startPosition.paragraph) {\n                this.documentHelper.layout.reLayoutParagraph(endPosition.paragraph, 0, 0);\n            }\n        }\n        if (selection.owner.isShiftingEnabled) {\n            this.documentHelper.layout.shiftLayoutedItems(false);\n            if (this.documentHelper.owner.enableHeaderAndFooter) {\n                this.updateHeaderFooterWidget();\n            }\n        }\n        selection.owner.isShiftingEnabled = false;\n        selection.start.updatePhysicalPosition(true);\n        if (selection.isEmpty) {\n            selection.end.setPositionInternal(selection.start);\n        }\n        else {\n            selection.end.updatePhysicalPosition(true);\n        }\n        selection.upDownSelectionLength = selection.end.location.x;\n        selection.fireSelectionChanged(true);\n        this.documentHelper.updateFocus();\n        this.owner.viewer.updateScrollBars();\n        this.fireContentChange();\n        this.isHandledComplex = true;\n    };\n    /**\n     * Re-layout content.\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param isSelectionChanged - Specifies the selection changed\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.reLayout = function (selection, isSelectionChanged, isLayoutChanged) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.previousBlockToLayout)) {\n            // Layout content for previous page to fix content based on KeepWithNext format.\n            var previousBlock = this.previousBlockToLayout;\n            this.documentHelper.layout.layoutBodyWidgetCollection(previousBlock.index, previousBlock.bodyWidget, previousBlock, false, false);\n            this.previousBlockToLayout = undefined;\n        }\n        if (!this.documentHelper.isComposingIME && this.editorHistory && this.editorHistory.isHandledComplexHistory()) {\n            if (this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action !== 'ClearFormat') {\n                if (this.editorHistory.currentHistoryInfo.action !== 'ApplyStyle') {\n                    if (this.editorHistory.currentHistoryInfo.action === 'DragAndDropContent') {\n                        this.documentHelper.layout.shiftLayoutedItems(true);\n                    }\n                    this.startParagraph = undefined;\n                    this.endParagraph = undefined;\n                }\n            }\n            this.isHandledComplex = false;\n            if (this.editorHistory.currentHistoryInfo && (this.editorHistory.currentHistoryInfo.action === 'ColumnBreak'\n                || this.editorHistory.currentHistoryInfo.action === 'PageBreak')) {\n            }\n            else {\n                this.shiftFootnoteContent();\n                this.selection.updateContentControlHighlightSelection();\n                return;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.editRegionHighlighters)) {\n            selection.editRegionHighlighters.clear();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.blockToShift)) {\n            this.documentHelper.removeEmptyPages();\n            this.documentHelper.layout.updateFieldElements();\n            this.documentHelper.layout.checkAndShiftEndnote(true);\n            this.selection.updateContentControlHighlightSelection();\n            /*  if (!isNullOrUndefined(selection.start.paragraph.bodyWidget.page.footnoteWidget)) {\n                  let foot: FootNoteWidget = selection.start.paragraph.bodyWidget.page.footnoteWidget;\n                  //this.documentHelper.layout.layoutfootNote(foot);\n              }\n              if (!isNullOrUndefined(selection.start.paragraph.bodyWidget.page.endnoteWidget)) {\n                  let foot: FootNoteWidget = selection.start.paragraph.bodyWidget.page.endnoteWidget;\n                  //this.documentHelper.layout.layoutfootNote(foot);\n              }*/\n            if (!this.documentHelper.owner.enableHeaderAndFooter) {\n                this.owner.viewer.updateScrollBars();\n            }\n            if (!selection.owner.isShiftingEnabled || this.documentHelper.isRowOrCellResizing) {\n                selection.fireSelectionChanged(true);\n                this.startParagraph = undefined;\n                this.endParagraph = undefined;\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isSelectionChanged)) {\n            isSelectionChanged = selection.isEmpty;\n        }\n        if (this.owner.showRevisions && this.owner.trackChangesPane.isUpdateTrackChanges(this.owner.revisions.length)) {\n            this.owner.trackChangesPane.updateTrackChanges();\n        }\n        if (selection.owner.isShiftingEnabled) {\n            selection.owner.isShiftingEnabled = false;\n            selection.owner.isLayoutEnabled = true;\n            var bodyWidget = selection.start.paragraph.bodyWidget;\n            var splittedSection = bodyWidget.getSplitWidgets();\n            bodyWidget = splittedSection[splittedSection.length - 1];\n            var isColumnBreak = (this.editorHistory && this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'ColumnBreak' && this.documentHelper.layout.isMultiColumnDoc) ? true : false;\n            if (this.documentHelper.compatibilityMode === \"Word2010\" && (bodyWidget.isWord2010NextColumn || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.nextRenderedWidget) && (bodyWidget.nextRenderedWidget.isWord2010NextColumn || (bodyWidget.nextRenderedWidget.sectionFormat.numberOfColumns > 1 && bodyWidget.nextRenderedWidget.sectionFormat.breakCode === \"NoBreak\")))) && !(bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.HeaderFooterWidget) && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.containerWidget) && bodyWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n                this.layoutWholeDocument(true, true);\n            }\n            else if (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.nextRenderedWidget) && bodyWidget.nextRenderedWidget.sectionFormat.breakCode === 'NoBreak' && this.documentHelper.layout.isMultiColumnDoc) || (bodyWidget.sectionFormat.breakCode === 'NoBreak' && (bodyWidget.sectionIndex === bodyWidget.page.bodyWidgets[0].sectionIndex) && bodyWidget.sectionFormat.numberOfColumns > 1) || isColumnBreak) && !(bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.HeaderFooterWidget) && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget.containerWidget) && bodyWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n                var startPosition = this.documentHelper.selection.start;\n                var endPosition = this.documentHelper.selection.end;\n                var startInfo = this.selection.getParagraphInfo(startPosition);\n                var endInfo = this.selection.getParagraphInfo(endPosition);\n                var startIndex = this.selection.getHierarchicalIndex(startInfo.paragraph, startInfo.offset.toString());\n                var endIndex = this.selection.getHierarchicalIndex(endInfo.paragraph, endInfo.offset.toString());\n                this.documentHelper.layout.shiftLayoutedItems(true);\n                this.setPositionForCurrentIndex(startPosition, startIndex);\n                this.setPositionForCurrentIndex(endPosition, endIndex);\n                this.documentHelper.selection.selectPosition(startPosition, endPosition);\n                if (!this.documentHelper.owner.enableHeaderAndFooter) {\n                    this.owner.viewer.updateScrollBars();\n                }\n            }\n            else {\n                this.documentHelper.layout.shiftLayoutedItems(true);\n            }\n            if (this.documentHelper.owner.enableHeaderAndFooter) {\n                this.updateHeaderFooterWidget();\n                // We are considered headerWigetIn and footerWidgetIn for rendering the header and footer. So, we called the updateScrollBars method once the headerWidgetIn and footerWidgetIn were updated.\n                this.owner.viewer.updateScrollBars();\n            }\n            if (!this.documentHelper.isRowOrCellResizing) {\n                this.shiftFootnoteContent();\n                this.getOffsetValue(selection);\n                selection.upDownSelectionLength = selection.end.location.x;\n                selection.fireSelectionChanged(true);\n                if (this.owner.enableAutoFocus) {\n                    this.documentHelper.updateFocus();\n                }\n                this.startParagraph = undefined;\n                this.endParagraph = undefined;\n                //this.documentHelper.layout.allowLayout = true;\n            }\n        }\n        else if (this.documentHelper.owner.enableHeaderAndFooter) {\n            this.updateHeaderFooterWidget();\n            // We are considered headerWigetIn and footerWidgetIn for rendering the header and footer. So, we called the updateScrollBars method once the headerWidgetIn and footerWidgetIn were updated.\n            this.owner.viewer.updateScrollBars();\n        }\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo &&\n            ((this.editorHistory.currentBaseHistoryInfo.action !== 'RowResizing'\n                && this.editorHistory.currentBaseHistoryInfo.action !== 'CellResizing')\n                || (this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n            if (this.editorHistory.currentBaseHistoryInfo.modifiedProperties.length > 0) {\n                this.editorHistory.currentBaseHistoryInfo.updateSelection();\n            }\n            if (!(this.editorHistory.undoStack && this.editorHistory.undoStack.length > 0 && this.editorHistory.undoStack[this.editorHistory.undoStack.length - 1] instanceof _editor_history_index__WEBPACK_IMPORTED_MODULE_12__.HistoryInfo &&\n                this.editorHistory.undoStack[this.editorHistory.undoStack.length - 1].modifiedActions &&\n                this.editorHistory.undoStack[this.editorHistory.undoStack.length - 1].modifiedActions[this.editorHistory.undoStack[this.editorHistory.undoStack.length - 1].modifiedActions.length - 1] === this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.updateHistory();\n            }\n            else {\n                this.editorHistory.currentBaseHistoryInfo = undefined;\n            }\n        }\n        if (isLayoutChanged) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection) && this.documentHelper.formFields.length > 0) {\n                selection.highlightFormFields();\n            }\n            return;\n        }\n        this.fireContentChange();\n        if (this.owner.enableLockAndEdit) {\n            // Editable region border get updated in content changes event.\n            // So, handled rerendering content after applying border.\n            this.owner.viewer.updateScrollBars();\n        }\n        this.owner.documentHelper.layout.isRelayout = false;\n        this.isFootnoteElementRemoved = false;\n        this.isEndnoteElementRemoved = false;\n    };\n    Editor.prototype.shiftFootnoteContent = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.start.paragraph)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.start.paragraph.bodyWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.start.paragraph.bodyWidget.containerWidget) && this.selection.start.paragraph.bodyWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n                if (this.selection.start.paragraph.bodyWidget.containerWidget.footNoteType === 'Footnote') {\n                    this.documentHelper.layout.isRelayoutFootnote = true;\n                    this.shiftFootnotePageContent(this.selection.start.paragraph.bodyWidget.containerWidget);\n                    //this.documentHelper.layout.layoutfootNote(selection.start.paragraph.bodyWidget.containerWidget);\n                }\n                else {\n                    this.documentHelper.layout.isRelayoutFootnote = false;\n                    this.shiftFootnotePageContent();\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateHeaderFooterWidget = function (headerFooterWidget) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooterWidget)) {\n            headerFooterWidget = this.selection.start.paragraph.bodyWidget;\n        }\n        this.updateHeaderFooterWidgetToPage(headerFooterWidget);\n        this.shiftPageContent(headerFooterWidget.headerFooterType, headerFooterWidget.sectionFormat);\n    };\n    Editor.prototype.updateHeaderFooterWidgetToPage = function (node) {\n        var currentPage = node.page;\n        //node = this.documentHelper.layout.updateHeaderFooterToParent(node);\n        var isEvenPage = (node.headerFooterType === 'EvenHeader' || node.headerFooterType === 'EvenFooter');\n        var isFirstPage = (node.headerFooterType === 'FirstPageHeader' || node.headerFooterType === 'FirstPageFooter');\n        for (var i = 0; i < this.documentHelper.pages.length; i++) {\n            var page = this.documentHelper.pages[i];\n            if (page.bodyWidgets[0].sectionFormat.differentFirstPage && isFirstPage\n                && (page.headerWidgetIn.headerFooterType == node.headerFooterType || page.footerWidgetIn.headerFooterType == node.headerFooterType)) {\n                this.updateHeaderFooterWidgetToPageInternal(page, node, node.headerFooterType.indexOf('Header') !== -1);\n                continue;\n            }\n            if (page.bodyWidgets[0].sectionFormat.differentFirstPage &&\n                (isFirstPage || (!isFirstPage && page.index == 0 || page.sectionIndex != page.previousPage.sectionIndex))) {\n                continue;\n            }\n            //if (currentPage !== page) {\n            if (page.bodyWidgets[0].sectionFormat.differentOddAndEvenPages) {\n                if (isEvenPage && (i + 1) % 2 === 0) {\n                    this.updateHeaderFooterWidgetToPageInternal(page, node, node.headerFooterType.indexOf('Header') !== -1);\n                }\n                else if ((!isEvenPage && (i + 1) % 2 !== 0)) {\n                    if (i > 0 || !(page.bodyWidgets[0].sectionFormat.differentFirstPage)) {\n                        this.updateHeaderFooterWidgetToPageInternal(page, node, node.headerFooterType.indexOf('Header') !== -1);\n                    }\n                }\n            }\n            else {\n                this.updateHeaderFooterWidgetToPageInternal(page, node, node.headerFooterType.indexOf('Header') !== -1);\n            }\n            //}\n        }\n    };\n    Editor.prototype.updateHeaderFooterWidgetToPageInternal = function (page, widget, isHeader) {\n        var update = false;\n        if (isHeader) {\n            update = widget != page.headerWidgetIn && widget.page.headerWidget == page.headerWidget;\n        }\n        else {\n            update = widget != page.footerWidgetIn && widget.page.footerWidget == page.footerWidget;\n        }\n        if (update) {\n            var hfWidget = widget.clone();\n            this.documentHelper.layout.clearBlockWidget(hfWidget.childWidgets, true, true, true);\n            hfWidget.page = page;\n            hfWidget.parentHeaderFooter = widget;\n            this.owner.viewer.updateHFClientArea(hfWidget.sectionFormat, isHeader);\n            hfWidget = this.documentHelper.layout.layoutHeaderFooterItems(this.owner.viewer, hfWidget);\n            var headerOrFooter = void 0;\n            if (isHeader) {\n                headerOrFooter = page.headerWidgetIn;\n                page.headerWidget = hfWidget;\n            }\n            else {\n                headerOrFooter = page.footerWidgetIn;\n                page.footerWidget = hfWidget;\n            }\n            this.removeFieldInWidget(headerOrFooter);\n            this.removeFieldInWidget(headerOrFooter, undefined, true);\n            headerOrFooter.destroy();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeFieldInWidget = function (widget, isBookmark, isContentControl, isEditRange) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isBookmark)) {\n            isBookmark = false;\n        }\n        for (var i = 0; i < widget.childWidgets.length; i++) {\n            this.removeFieldInBlock(widget.childWidgets[i], isBookmark, isContentControl, isEditRange);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeFieldInBlock = function (block, isBookmark, isContentControl, isEditRange) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            if (block.wrapTextAround && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.bodyWidget)) {\n                var index = block.bodyWidget.floatingElements.indexOf(block);\n                if (index !== -1) {\n                    block.bodyWidget.floatingElements.splice(index, 1);\n                }\n            }\n            this.removeFieldTable(block, isBookmark, isContentControl, isEditRange);\n        }\n        else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget) {\n            for (var i = 0; i < block.childWidgets.length; i++) {\n                this.removeFieldInWidget(block.childWidgets[i], isBookmark, isContentControl, isEditRange);\n            }\n        }\n        else {\n            this.removeField(block, isBookmark, isContentControl, isEditRange);\n        }\n    };\n    Editor.prototype.removeFieldTable = function (table, isBookmark, isContentControl, isEditRange) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.removeFieldInWidget(row.childWidgets[j], isBookmark, isContentControl, isEditRange);\n            }\n        }\n    };\n    Editor.prototype.shiftFootnotePageContent = function (foot) {\n        var section = this.documentHelper.pages[0].bodyWidgets[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(foot)) {\n            var index = this.documentHelper.pages.indexOf(foot.page);\n            section = this.documentHelper.pages[index].bodyWidgets[0];\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(section.page.footnoteWidget)) {\n            this.checkAndShiftFromBottom(section.page, section.page.footnoteWidget, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(foot) ? true : false);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(section.page.endnoteWidget)) {\n            //this.checkAndShiftFromBottom(section.page, section.page.endnoteWidget);\n        }\n        if (this.documentHelper.blockToShift) {\n            this.documentHelper.renderedLists.clear();\n            this.documentHelper.renderedLevelOverrides = [];\n            this.documentHelper.layout.shiftLayoutedItems(false);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.shiftPageContent = function (type, sectionFormat) {\n        // let type: HeaderFooterType = headerFooter.headerFooterType;\n        var pageIndex;\n        if (type.indexOf('First') !== -1) {\n            pageIndex = 0;\n        }\n        else if (sectionFormat.differentOddAndEvenPages) {\n            var isEven = type.indexOf('Even') !== -1;\n            if (sectionFormat.differentFirstPage) {\n                pageIndex = isEven ? 1 : 2;\n            }\n            else {\n                pageIndex = !isEven ? 0 : 1;\n            }\n        }\n        else {\n            pageIndex = sectionFormat.differentFirstPage ? 1 : 0;\n            if (pageIndex === 1 && this.documentHelper.pages.length === 1) {\n                pageIndex = 0;\n            }\n        }\n        var section = this.documentHelper.pages[pageIndex].bodyWidgets[0];\n        do {\n            if (type.indexOf('Header') !== -1) {\n                var widget = section.page.headerWidget;\n                var isNotEmpty = !widget.isEmpty || widget.isEmpty && this.owner.enableHeaderAndFooter;\n                var firstBlock = section.firstChild;\n                var top_1 = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(sectionFormat.topMargin);\n                var headerDistance = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(sectionFormat.headerDistance);\n                if (isNotEmpty) {\n                    top_1 = Math.max(headerDistance + section.page.headerWidget.height, top_1);\n                }\n                if (firstBlock.y !== top_1 && section.sectionFormat.breakCode !== \"NoBreak\") {\n                    this.owner.viewer.updateClientArea(section, section.page);\n                    firstBlock = firstBlock.combineWidget(this.owner.viewer);\n                    var prevWidget = firstBlock.previousRenderedWidget;\n                    if (prevWidget) {\n                        if (firstBlock.containerWidget.equals(prevWidget.containerWidget) && !(prevWidget.containerWidget.lastChild instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && (prevWidget.containerWidget.lastChild.isEndsWithPageBreak || prevWidget.containerWidget.lastChild.isEndsWithColumnBreak))) {\n                            this.owner.viewer.cutFromTop(prevWidget.y + prevWidget.height);\n                            this.documentHelper.layout.updateContainerWidget(firstBlock, prevWidget.containerWidget, prevWidget.indexInOwner + 1, false);\n                        }\n                    }\n                    this.documentHelper.blockToShift = firstBlock;\n                }\n            }\n            else {\n                this.checkAndShiftFromBottom(section.page, section.page.footerWidget);\n            }\n            if (this.documentHelper.blockToShift) {\n                this.documentHelper.renderedLists.clear();\n                this.documentHelper.renderedLevelOverrides = [];\n                this.documentHelper.layout.shiftLayoutedItems(false);\n            }\n            while (section) {\n                var previousSection = section;\n                do {\n                    //To skip section continuous, since it already shifted in `shiftLayoutedItems` method.\n                    var splittedSection = section.getSplitWidgets();\n                    section = splittedSection[splittedSection.length - 1].nextRenderedWidget;\n                } while (section && previousSection.page === section.page);\n                if (section) {\n                    if (pageIndex === 0) {\n                        break;\n                    }\n                    else {\n                        if (section.page.index + 1 % 2 === 0 && pageIndex === 1 ||\n                            (section.page.index + 1 % 2 !== 0 && pageIndex === 2)) {\n                            break;\n                        }\n                        var nextPage = section.page.nextPage;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextPage) && nextPage.bodyWidgets[0].equals(section)) {\n                            section = nextPage.bodyWidgets[0];\n                            break;\n                        }\n                    }\n                }\n            }\n        } while (section);\n    };\n    Editor.prototype.checkAndShiftFromBottom = function (page, footerWidget, isFootNote) {\n        var bodyWidget = page.bodyWidgets[0];\n        var blockToShift;\n        if (bodyWidget.childWidgets.length > 1) {\n            for (var i = 0; i < bodyWidget.childWidgets.length; i++) {\n                var block = bodyWidget.childWidgets[i];\n                if (block.y + block.height > footerWidget.y) {\n                    blockToShift = block;\n                    break;\n                }\n                if (!(footerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n                    if (bodyWidget.childWidgets.length - 1 === i && block.y + block.height < footerWidget.y) {\n                        blockToShift = block;\n                        break;\n                    }\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockToShift) && isFootNote) {\n                blockToShift = bodyWidget.lastChild;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockToShift)) {\n                this.owner.viewer.updateClientArea(bodyWidget, page, true);\n                this.owner.viewer.cutFromTop(blockToShift.y);\n                this.documentHelper.blockToShift = blockToShift;\n            }\n        }\n    };\n    Editor.prototype.allowFormattingInFormFields = function (property) {\n        if (this.documentHelper.protectionType === 'FormFieldsOnly' && this.selection.isInlineFormFillMode() &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.documentEditorSettings.formFieldSettings.formattingExceptions)) {\n            for (var j = 0; j < this.owner.documentEditorSettings.formFieldSettings.formattingExceptions.length; j++) {\n                if (property.toLowerCase() === this.owner.documentEditorSettings.formFieldSettings.formattingExceptions[j].toLowerCase()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertContentControlInCollection = function (element) {\n        var contentConterolCollection = this.documentHelper.contentControlCollection;\n        var currentStart = this.selection.getElementPosition(element).startPosition;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentStart)) {\n            currentStart = this.selection.isForward ? this.selection.start : this.selection.end;\n        }\n        var paraIndex = undefined;\n        var isInserted = false;\n        if (contentConterolCollection.indexOf(element) === -1) {\n            for (var i = 0; i < contentConterolCollection.length; i++) {\n                var contentControl = contentConterolCollection[i];\n                paraIndex = this.selection.getElementPosition(contentControl).startPosition;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentStart) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraIndex) && currentStart.isExistBefore(paraIndex)) {\n                    contentConterolCollection.splice(i, 0, element);\n                    isInserted = true;\n                    break;\n                }\n            }\n        }\n        if (!isInserted) {\n            contentConterolCollection.push(element);\n        }\n    };\n    /**\n     * @private\n     * @returns {ContentControl}\n     */\n    Editor.prototype.getContentControl = function () {\n        var contentControl = this.getContentControls();\n        if (contentControl.length > 0) {\n            return contentControl[contentControl.length - 1];\n        }\n        return undefined;\n    };\n    /**\n     * @private\n     * @returns {ContentControl[]}\n     */\n    Editor.prototype.getContentControls = function () {\n        var contentControl = [];\n        for (var i = 0; i < this.documentHelper.contentControlCollection.length; i++) {\n            if (this.documentHelper.contentControlCollection[i].paragraph.isInHeaderFooter && this.documentHelper.owner.layoutType === \"Continuous\") {\n                continue;\n            }\n            var contentControlStart = this.documentHelper.contentControlCollection[i];\n            if (this.owner.enableHeaderAndFooter && contentControlStart.paragraph.isInHeaderFooter) {\n                if (this.pushContentControlByOrder(contentControlStart, contentControl)) {\n                    break;\n                }\n            }\n            else if (!contentControlStart.paragraph.isInHeaderFooter) {\n                if (this.pushContentControlByOrder(contentControlStart, contentControl)) {\n                    break;\n                }\n            }\n        }\n        return contentControl;\n    };\n    Editor.prototype.pushContentControlByOrder = function (contentControlStart, contentControls) {\n        var line = contentControlStart.line;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(line.children) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(line.children.length)) {\n            var position = this.selection.getPosition(contentControlStart);\n            if (position.startPosition && position.endPosition) {\n                var cCstart = position.startPosition;\n                var cCend = position.endPosition;\n                var start = this.selection.start;\n                var end = this.selection.end;\n                if (!this.selection.isForward) {\n                    start = this.selection.end;\n                    end = this.selection.start;\n                }\n                var isExistAfter = start.isExistAfter(cCstart) || start.isAtSamePosition(cCstart);\n                var isExistBefore = end.isExistBefore(cCend) || end.isAtSamePosition(cCend);\n                if (isExistAfter && isExistBefore) {\n                    contentControls.push(contentControlStart);\n                }\n                else if (!isExistAfter) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.checkPlainTextContentControl = function () {\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.selection.isForward) {\n            end = this.selection.start;\n            start = this.selection.end;\n        }\n        var startIndex = 0;\n        var endIndex = 0;\n        var startInline = start.currentWidget.getInline(start.offset, startIndex);\n        var endInline = end.currentWidget.getInline(end.offset, endIndex);\n        startIndex = startInline.index;\n        endIndex = endInline.index;\n        var startInlineEle = startInline.element;\n        var endInlineEle = endInline.element;\n        var startPosition;\n        var endPosition;\n        if ((startInlineEle && startInlineEle.contentControlProperties && startInlineEle.contentControlProperties.type === 'Text')\n            || (endInlineEle && endInlineEle.contentControlProperties && endInlineEle.contentControlProperties.type === 'Text')) {\n            startInlineEle = this.getContentControl();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startInlineEle) && startInlineEle.contentControlProperties) {\n                var offset = startInlineEle.line.getOffset(startInlineEle, 1);\n                startPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                startPosition.setPositionParagraph(startInlineEle.line, offset);\n            }\n            else {\n                startPosition = start;\n            }\n            if (endInlineEle.contentControlProperties && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startInlineEle)\n                && startInlineEle.reference) {\n                endInlineEle = startInlineEle.reference;\n                var endoffset = endInlineEle.line.getOffset(endInlineEle, endInlineEle.length);\n                endPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                endPosition.setPositionParagraph(endInlineEle.line, endoffset);\n            }\n            else {\n                endPosition = end;\n            }\n            this.selection.selectRange(startPosition, endPosition);\n        }\n        else if (start.paragraph.contentControlProperties\n            && start.paragraph.contentControlProperties.type === 'Text') {\n            this.selection.selectParagraph();\n        }\n    };\n    //Paste Implementation ends\n    //Character Format apply implementation starts\n    /**\n     * Applies character format for selection.\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @param {boolean} update - Spcifies the update\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyCharacterFormat = function (property, value, update, applyStyle) {\n        var allowFormatting = this.documentHelper.isFormFillProtectedMode\n            && this.documentHelper.selection.isInlineFormFillMode() && this.allowFormattingInFormFields(property);\n        if ((this.restrictFormatting && !allowFormatting) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection) && this.selection.checkContentControlLocked(true))) {\n            return;\n        }\n        this.documentHelper.layout.isBidiReLayout = true;\n        var selection = this.documentHelper.selection;\n        if ((selection.owner.isReadOnlyMode && !allowFormatting) || !selection.owner.isDocumentLoaded) {\n            return;\n        }\n        update = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(update) ? false : update;\n        applyStyle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyStyle) ? false : applyStyle;\n        var action = (property[0].toUpperCase() + property.slice(1));\n        var paragraph = selection.start.paragraph;\n        var lastLine = paragraph.childWidgets[paragraph.childWidgets.length - 1];\n        this.checkPlainTextContentControl();\n        if (selection.isEmpty && selection.contextType !== 'List' && !applyStyle) {\n            selection.skipFormatRetrieval = true;\n            if (selection.end.isAtParagraphEnd) {\n                this.initHistory(action);\n                this.documentHelper.owner.isShiftingEnabled = true;\n                this.applyCharFormatValue(paragraph.characterFormat, property, value, update);\n                this.reLayout(this.documentHelper.selection);\n                this.documentHelper.updateFocus();\n            }\n            else {\n                selection.fireSelectionChanged(true);\n            }\n            selection.skipFormatRetrieval = false;\n            return;\n        }\n        //Skip consider highlightcolor if paragraph mark alone is selected similar to Microsoft Word behaviour\n        if (property === 'highlightColor' && selection.start.isInSameParagraph(selection.end)) {\n            var start = selection.start;\n            var end = selection.end;\n            if (!this.selection.isForward) {\n                end = selection.start;\n                start = selection.end;\n            }\n            if (end.offset === selection.getLineLength(end.currentWidget) + 1 && end.offset - 1 === start.offset) {\n                return;\n            }\n        }\n        this.setOffsetValue(selection);\n        this.initHistory(action);\n        // Todo: Complete Microsoft Word behavior on apply formatting in empty selection\n        // if (selection.isEmpty) {\n        //     this.documentHelper.owner.isShiftingEnabled = true;\n        //     this.applyCharFormatValue(paragraph.characterFormat, property, value, update);\n        //     this.reLayout(this.documentHelper.selection);\n        //     this.documentHelper.updateFocus();\n        //     return;\n        // }\n        if (selection.contextType === 'List') {\n            // this.updateCharacterFormatForListText(selection, action, value, update);\n            this.applyCharacterFormatForListText(selection, property, value, update);\n        }\n        else {\n            //Iterate and update format.\n            this.updateSelectionCharacterFormatting(property, value, update);\n        }\n        this.documentHelper.layout.isBidiReLayout = false;\n    };\n    Editor.prototype.applyCharacterFormatForListText = function (selection, property, values, update) {\n        var listLevel = selection.getListLevel(selection.start.paragraph);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel)) {\n            return;\n        }\n        var characterFormat = listLevel.characterFormat;\n        switch (property) {\n            case 'bold':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'bold', !(characterFormat.bold));\n                break;\n            case 'italic':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'italic', !(characterFormat.italic));\n                break;\n            case 'fontColor':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'fontColor', values);\n                break;\n            case 'fontFamily':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'fontFamily', values);\n                break;\n            case 'fontSize':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'fontSize', values);\n                break;\n            case 'highlightColor':\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'highlightColor', values);\n                break;\n            case 'baselineAlignment':\n                if (characterFormat.baselineAlignment === values) {\n                    values = 'Normal';\n                }\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'baselineAlignment', values);\n                break;\n            case 'strikethrough':\n                if (characterFormat.strikethrough === values) {\n                    values = 'None';\n                }\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'strikethrough', values);\n                break;\n            case 'underline':\n                if (characterFormat.underline === values) {\n                    values = 'None';\n                }\n                this.applyListCharacterFormatByValue(selection, characterFormat, 'underline', values);\n                break;\n            case 'characterFormat':\n                this.applyListCharacterFormatByValue(selection, characterFormat, undefined, values);\n                break;\n        }\n    };\n    Editor.prototype.applyListCharacterFormatByValue = function (selection, format, property, value) {\n        this.initHistory('ListCharacterFormat');\n        this.applyCharFormatValue(format, property, value, false);\n        this.editorHistory.updateHistory();\n        this.reLayout(selection);\n        this.fireContentChange();\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListCharacterFormat = function (selection, property, value) {\n        this.updateListTextSelRange(selection, property, value, false);\n    };\n    Editor.prototype.updateListTextSelRange = function (selection, property, value, update) {\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var startPositionInternal = selection.start;\n        var endPositionInternal = selection.end;\n        if (!selection.isForward) {\n            startPositionInternal = selection.end;\n            endPositionInternal = selection.start;\n        }\n        this.initHistoryPosition(selection, startPositionInternal);\n        var listLevel = selection.getListLevel(selection.start.paragraph);\n        this.applyCharFormatValue(listLevel.characterFormat, property, value, update);\n        this.startSelectionReLayouting(startPositionInternal.paragraph, selection, startPositionInternal, endPositionInternal);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateInsertPosition = function () {\n        var selection = this.documentHelper.selection;\n        var position = selection.start;\n        if (!selection.isForward) {\n            position = selection.end;\n        }\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(position)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.insertPosition)) {\n                this.updateHistoryPosition(position, true);\n            }\n        }\n    };\n    /**\n     * Preserve paragraph and offset value for selection\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.setOffsetValue = function (selection) {\n        var info = this.selection.getParagraphInfo(selection.start);\n        this.startParagraph = info.paragraph;\n        this.startOffset = info.offset;\n        info = this.selection.getParagraphInfo(selection.end);\n        this.endParagraph = info.paragraph;\n        this.endOffset = info.offset;\n    };\n    /**\n     * Toggles the highlight color property of selected contents.\n     *\n     * @param {HighlightColor} highlightColor Specify the highlight color to be applied (default: Yellow).\n     * @returns {void}\n     */\n    Editor.prototype.toggleHighlightColor = function (highlightColor) {\n        var selection = this.documentHelper.selection;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(highlightColor) || highlightColor === 'NoColor') {\n            highlightColor = 'Yellow';\n        }\n        //In Ms Word the highlight color is took from the ribbon. So we Have given yellow as constant.\n        if (selection.characterFormat.highlightColor === highlightColor) {\n            highlightColor = 'NoColor';\n        }\n        this.selection.characterFormat.highlightColor = highlightColor;\n    };\n    /**\n     * Toggles the subscript formatting of selected contents.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.toggleSubscript = function () {\n        if (this.owner.isReadOnlyMode || this.restrictFormatting) {\n            return;\n        }\n        var value = this.selection.characterFormat.baselineAlignment === 'Subscript' ? 'Normal' : 'Subscript';\n        this.selection.characterFormat.baselineAlignment = value;\n    };\n    /**\n     * Toggles the superscript formatting of selected contents.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.toggleSuperscript = function () {\n        if (this.owner.isReadOnlyMode || this.restrictFormatting) {\n            return;\n        }\n        var value = this.selection.characterFormat.baselineAlignment === 'Superscript' ? 'Normal' : 'Superscript';\n        this.selection.characterFormat.baselineAlignment = value;\n    };\n    /**\n     * Increases the left indent of selected paragraphs to a factor of 36 points.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.increaseIndent = function () {\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            this.onApplyParagraphFormat('leftIndent', this.documentHelper.defaultTabWidth, true, false);\n        }\n    };\n    /**\n     * Decreases the left indent of selected paragraphs to a factor of 36 points.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.decreaseIndent = function () {\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            this.onApplyParagraphFormat('leftIndent', -this.documentHelper.defaultTabWidth, true, false);\n        }\n    };\n    /**\n     * Clears the list format for selected paragraphs.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.clearList = function () {\n        this.selection.owner.editorModule.onApplyList(undefined);\n    };\n    /**\n     * Applies the bullet list to selected paragraphs.\n     *\n     * @param {string} bullet Specify the bullet character to be applied.\n     * @param {string} fontFamily Specify the bullet font family name.\n     * @returns {void}\n     */\n    Editor.prototype.applyBullet = function (bullet, fontFamily) {\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            this.applyBulletOrNumbering(bullet, 'Bullet', fontFamily);\n        }\n    };\n    /**\n     * Applies the numbering list to selected paragraphs.\n     *\n     * @param {string} numberFormat  “%n” representations in ‘numberFormat’ parameter will be replaced by respective list level’s value.\n     * `“%1)” will be displayed as “1)” `\n     * @param {ListLevelPattern} listLevelPattern  Default value of ‘listLevelPattern’ parameter is ListLevelPattern.Arabic\n     * @returns {void}\n     */\n    Editor.prototype.applyNumbering = function (numberFormat, listLevelPattern) {\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            this.applyBulletOrNumbering(numberFormat, listLevelPattern, 'Verdana');\n        }\n    };\n    /**\n     * Toggles the baseline alignment property of selected contents.\n     *\n     * @param {BaselineAlignment} baseAlignment Specifies the baseline alignment.\n     * @returns {void}\n     */\n    Editor.prototype.toggleBaselineAlignment = function (baseAlignment) {\n        this.updateProperty(2, baseAlignment);\n    };\n    Editor.prototype.clearFormattingInternal = function (isCompletePara, isApplyStyle) {\n        var selection = this.documentHelper.selection;\n        this.setPreviousBlockToLayout();\n        this.initComplexHistory('ClearFormat');\n        // let startIndex: string = selection.start.getHierarchicalIndexInternal();\n        // let endIndex: string = selection.end.getHierarchicalIndexInternal();\n        if (selection.isEmpty || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isCompletePara) && isCompletePara)) {\n            selection.start.moveToParagraphStartInternal(selection, false);\n            selection.end.moveToParagraphEndInternal(selection, false);\n        }\n        this.setOffsetValue(selection);\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('ClearCharacterFormat');\n        }\n        this.updateSelectionCharacterFormatting('ClearCharacterFormat', undefined, false);\n        this.getOffsetValue(selection);\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.setOffsetValue(selection);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isCompletePara) || isCompletePara) {\n            if (this.editorHistory) {\n                this.editorHistory.initializeHistory('ClearParagraphFormat');\n            }\n            this.updateParagraphFormatInternal('ClearParagraphFormat', undefined, false);\n        }\n        if (this.editorHistory) {\n            this.editorHistory.updateHistory();\n        }\n        this.getOffsetValue(selection);\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n            if (isApplyStyle) {\n                this.editorHistory.updateComplexHistoryInternal();\n            }\n            else {\n                this.editorHistory.updateComplexHistory();\n            }\n        }\n        this.startParagraph = undefined;\n        this.endParagraph = undefined;\n        // else {\n        //     this.checkAndUpdatedSelection(startIndex, endIndex);\n        // }\n    };\n    /**\n     * Clears the formatting.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.clearFormatting = function () {\n        this.clearFormattingInternal();\n    };\n    Editor.prototype.updateProperty = function (type, value) {\n        var selection = this.selection;\n        if (((this.owner.isReadOnlyMode || this.restrictFormatting) && !this.selection.isInlineFormFillMode()) || !selection.owner.isDocumentLoaded) {\n            return;\n        }\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        var indexInInline = 0;\n        var inlineObj = startPosition.currentWidget.getInline(startPosition.offset, indexInInline);\n        var inline = inlineObj.element;\n        indexInInline = inlineObj.index;\n        var paragraph = startPosition.paragraph;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.length === indexInInline && !this.selection.isEmpty) {\n            inline = inline.nextNode;\n        }\n        if (type === 1) {\n            var currentUnderline = 'None';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                currentUnderline = inline.characterFormat.underline;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph)) {\n                currentUnderline = paragraph.characterFormat.underline;\n            }\n            this.selection.characterFormat.underline = value === currentUnderline ? 'None' : value;\n        }\n        else {\n            var script = 'Normal';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                script = inline.characterFormat.baselineAlignment;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph)) {\n                script = paragraph.characterFormat.baselineAlignment;\n            }\n            if (script === value) {\n                value = 'Normal';\n            }\n            this.selection.characterFormat.baselineAlignment = value;\n        }\n    };\n    Editor.prototype.getCompleteStyles = function () {\n        var completeStylesString = '{\"styles\":[';\n        for (var _i = 0, _a = this.documentHelper.preDefinedStyles.keys; _i < _a.length; _i++) {\n            var name_1 = _a[_i];\n            completeStylesString += (this.documentHelper.preDefinedStyles.get(name_1) + ',');\n        }\n        return completeStylesString.slice(0, -1) + ']}';\n    };\n    /**\n     * Initialize default styles\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.intializeDefaultStyles = function () {\n        var existingStyles = this.owner.getStyleNames('Paragraph');\n        var defaultStyleNames = ['Normal', 'Heading 1', 'Heading 2', 'Heading 3', 'Heading 4', 'Heading 5', 'Heading 6', 'Heading 7', 'Heading 8', 'Heading 9', 'Header', 'Footer'];\n        var styleNames = defaultStyleNames.filter(function (val) {\n            return existingStyles.indexOf(val) === -1;\n        });\n        for (var _i = 0, styleNames_1 = styleNames; _i < styleNames_1.length; _i++) {\n            var name_2 = styleNames_1[_i];\n            this.createStyle(this.documentHelper.preDefinedStyles.get(name_2));\n        }\n    };\n    /**\n     * Creates a new style or modifies an existing style with the specified style properties.\n     *\n     * > If modifyExistingStyle parameter is set to true and a style already exists with same name, it modifies the specified properties in the existing style.\n     * > If modifyExistingStyle parameter is set to false and a style already exists with same name, it creates a new style with unique name by appending ‘_1’. Hence, the newly style will not have the specified name.\n     * > If no style exists with same name, it creates a new style.\n     *\n     * @param {string} styleString The style properties.\n     * @param {boolean} modifyExistingStyle The Boolean value denotes whether to modify the properties in the existing style or create a new style.\n     *\n     * @returns {string} Returns the name of the created style.\n     */\n    Editor.prototype.createStyle = function (styleString, modifyExistingStyle) {\n        return this.createStyleIn(styleString, modifyExistingStyle).name;\n    };\n    /**\n     * @private\n     * Adds a new style to the document or updates an existing style.\n     *\n     * @param {string} styleString - The style to be added or updated.\n     * @param {boolean} modifyExistingStyle - Whether to modify an existing style.\n     * @returns {Object} - The style that was added or updated.\n     */\n    Editor.prototype.createStyleIn = function (styleString, modifyExistingStyle) {\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        var style = JSON.parse(styleString);\n        var styleObj = this.documentHelper.styles.findByName(style.name);\n        var inputStyleType = style.type;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleObj) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(modifyExistingStyle) || !modifyExistingStyle) {\n            if (styleObj !== undefined) {\n                // Create a new style with new name and add it to collection.\n                style.name = this.getUniqueStyleName(style.name);\n            }\n            this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), style, this.documentHelper.styles, true);\n        }\n        else {\n            if (inputStyleType === styleObj.type) {\n                // Update the existing style with the newly received style information(Json)\n                this.setStyle(styleObj, style);\n            }\n            else {\n                // Create a new style with new name and add it to collection.\n                style.name = this.getUniqueStyleName(style.name);\n                this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), style, this.documentHelper.styles, true);\n            }\n        }\n        this.owner.notify(_base_index__WEBPACK_IMPORTED_MODULE_10__.internalStyleCollectionChange, {});\n        return this.documentHelper.styles.findByName(style.name);\n    };\n    /**\n     * Modify the Style\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.setStyle = function (styleObj, style) {\n        // based on Style\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style.basedOn)) {\n            var basedOn = this.documentHelper.styles.findByName(style.basedOn);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(basedOn)) {\n                if (basedOn.type === style.type) {\n                    styleObj.basedOn = basedOn;\n                }\n            }\n            else {\n                var basedStyle = this.getStyle(style.basedOn, JSON.parse(this.getCompleteStyles()));\n                var styleData = void 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(basedStyle) && basedStyle.type === style.type) {\n                    styleData = basedStyle;\n                }\n                else {\n                    if (style.type === 'Paragraph') {\n                        styleData = JSON.parse('{\"type\":\"Paragraph\",\"name\":\"Normal\",\"next\":\"Normal\"}');\n                    }\n                    else {\n                        styleData = JSON.parse('{\"type\": \"Character\",\"name\": \"Default Paragraph Font\"}');\n                    }\n                }\n                styleObj.basedOn = this.documentHelper.styles.findByName(styleData.name);\n            }\n        }\n        // next style\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style.next)) {\n            if (style.type === \"Paragraph\") {\n                if (style.next === style.name) {\n                    styleObj.next = styleObj;\n                }\n                else {\n                    var next = this.documentHelper.styles.findByName(style.next);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(next) && next.type === styleObj.type) {\n                        styleObj.next = next;\n                    }\n                    else {\n                        styleObj.next = styleObj;\n                    }\n                }\n            }\n        }\n        // link style\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style.link)) {\n            var link = this.documentHelper.styles.findByName(style.link);\n            var styleString = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(link) && (link.type === \"Character\")) {\n                this.documentHelper.owner.parser.parseCharacterFormat(0, style.characterFormat, link.characterFormat);\n                styleObj.link = link;\n            }\n            else {\n                //Construct the CharacterStyle string\n                var charaStyle = {};\n                charaStyle.characterFormat = style.characterFormat;\n                var newCharStyle = this.documentHelper.styles.findByName(style.name + ' Char');\n                if (newCharStyle.name !== undefined) {\n                    charaStyle.name = this.getUniqueStyleName(style.name) + ' Char';\n                }\n                else {\n                    charaStyle.name = style.name + ' Char';\n                }\n                charaStyle.type = 'Character';\n                charaStyle.basedOn = 'Default Paragraph Font';\n                styleString = charaStyle;\n                this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), styleString, this.documentHelper.styles);\n                styleObj.link = this.documentHelper.styles.findByName(styleString.name);\n            }\n            if (style.type == 'Character') {\n                for (var i = 0; i < this.documentHelper.styles.length; i++) {\n                    var styleFormCollection = this.documentHelper.styles.getItem(i);\n                    var styleLink = styleFormCollection.link;\n                    var linkName = styleLink === undefined ? \"\" : styleLink.name;\n                    if (styleFormCollection.type === 'Paragraph' && linkName === style.link) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleFormCollection.characterFormat)) {\n                            this.documentHelper.owner.parser.parseCharacterFormat(0, style.characterFormat, styleFormCollection.characterFormat);\n                        }\n                    }\n                }\n            }\n        }\n        //update the new paragraph style \n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style.paragraphFormat)) {\n            this.documentHelper.owner.parser.parseParagraphFormat(0, style.paragraphFormat, styleObj.paragraphFormat);\n        }\n        //update the new character style \n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style.characterFormat)) {\n            this.documentHelper.owner.parser.parseCharacterFormat(0, style.characterFormat, styleObj.characterFormat);\n        }\n    };\n    Editor.prototype.getStyle = function (name, data) {\n        for (var i = 0; i < data.styles.length; i++) {\n            if (data.styles[i].name === name) {\n                return data.styles[i];\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.getUniqueStyleName = function (name) {\n        var uniqueName = this.getUniqueName(name);\n        var style = this.documentHelper.styles.findByName(uniqueName);\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style)) {\n            uniqueName = this.getUniqueStyleName(style.name);\n            style = this.documentHelper.styles.findByName(uniqueName);\n        }\n        return uniqueName;\n    };\n    Editor.prototype.getUniqueName = function (name) {\n        var matchArray = name.match(/\\d+$/);\n        var returnName;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(matchArray) && matchArray.length > 0) {\n            return name.replace(matchArray[0], (parseInt(matchArray[0], 10) + 1).toString());\n        }\n        else {\n            return name + '_1';\n        }\n    };\n    /**\n     * Update Character format for selection\n     * @private\n     */\n    Editor.prototype.updateSelectionCharacterFormatting = function (property, values, update) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n            property = 'CharacterFormat';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = values;\n        }\n        switch (property) {\n            case 'bold':\n                this.updateCharacterFormat('bold', values);\n                break;\n            case 'italic':\n                this.updateCharacterFormat('italic', values);\n                break;\n            case 'fontColor':\n                this.updateCharacterFormat('fontColor', values);\n                break;\n            case 'fontFamily':\n                this.updateCharacterFormat('fontFamily', values);\n                break;\n            case 'fontSize':\n                this.documentHelper.layout.isBidiReLayout = false;\n                this.updateCharacterFormatWithUpdate(this.documentHelper.selection, 'fontSize', values, update);\n                break;\n            case 'highlightColor':\n                this.updateCharacterFormat('highlightColor', values);\n                break;\n            case 'baselineAlignment':\n                this.updateCharacterFormat('baselineAlignment', values);\n                break;\n            case 'strikethrough':\n                this.updateCharacterFormat('strikethrough', values);\n                break;\n            case 'underline':\n                this.updateCharacterFormat('underline', values);\n                break;\n            case 'styleName':\n                this.updateCharacterFormatWithUpdate(this.documentHelper.selection, 'styleName', values, true, true);\n                break;\n            case 'CharacterFormat':\n                this.updateCharacterFormat(undefined, values);\n                break;\n            case 'ClearCharacterFormat':\n                this.updateCharacterFormat(undefined, values);\n                break;\n            case 'allCaps':\n                this.updateCharacterFormat('allCaps', values);\n                break;\n        }\n        this.reLayout(this.documentHelper.selection);\n    };\n    Editor.prototype.updateCharacterFormat = function (property, value) {\n        this.updateCharacterFormatWithUpdate(this.documentHelper.selection, property, value, false);\n    };\n    Editor.prototype.updateCharacterFormatWithUpdate = function (selection, property, value, update, styleName) {\n        styleName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleName) ? false : styleName;\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isEmpty && !selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        if (selection.isEmpty && styleName) {\n            var offset = startPosition.offset;\n            var preservedStartPosition = startPosition.clone();\n            var preservedEndPosition = endPosition.clone();\n            this.selection.selectCurrentWord();\n            if (offset === this.selection.start.offset || offset === this.selection.end.offset - 1) {\n                this.selection.start = preservedStartPosition;\n                this.selection.end = preservedEndPosition;\n            }\n        }\n        this.applyCharFormatSelectedContent(startPosition.paragraph, selection, startPosition, endPosition, property, value, update);\n    };\n    Editor.prototype.applyCharFormatSelectedContent = function (paragraph, selection, start, end, property, value, update) {\n        //Selection start in cell.\n        if (start.paragraph.isInsideTable && (!end.paragraph.isInsideTable\n            || start.paragraph.associatedCell !== end.paragraph.associatedCell\n            || selection.isCellSelected(start.paragraph.associatedCell, start, end))) {\n            var cell = void 0;\n            start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(start, true);\n            }\n            cell = start.paragraph.associatedCell;\n            var block = this.applyCharFormatCell(cell, selection, start, end, property, value, update);\n            while (block) {\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    block = this.applyCharFormat(block, selection, start, end, property, value, update);\n                }\n                else {\n                    block = this.applyCharFormatForTable(0, block, selection, start, end, property, value, update);\n                }\n            }\n            var table = cell.ownerTable;\n            this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        }\n        else {\n            var block = paragraph;\n            do {\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    block = this.applyCharFormat(block, selection, start, end, property, value, update);\n                }\n                else {\n                    block = this.applyCharFormatForTable(0, block, selection, start, end, property, value, update);\n                }\n            } while (block);\n        }\n    };\n    Editor.prototype.applyCharFormatForSelectedPara = function (paragraph, selection, property, value, update) {\n        for (var i = 0; i < paragraph.childWidgets.length; i++) {\n            var line = paragraph.childWidgets[i];\n            for (var j = 0; j < line.children.length; j++) {\n                var element = line.children[j];\n                element.isWidthUpdated = false;\n                this.applyCharFormatValue(element.characterFormat, property, value, update);\n            }\n        }\n        this.applyCharFormatValue(paragraph.characterFormat, property, value, update);\n    };\n    Editor.prototype.splittedLastParagraph = function (paragraph) {\n        var splittedWidets = paragraph.getSplitWidgets();\n        return splittedWidets[splittedWidets.length - 1];\n    };\n    Editor.prototype.getNextParagraphForCharacterFormatting = function (block, start, end, property, value, update) {\n        var widgetCollection = block.getSplitWidgets();\n        block = widgetCollection[widgetCollection.length - 1];\n        return this.documentHelper.selection.getNextRenderedBlock(block);\n    };\n    Editor.prototype.applyCharFormat = function (paragraph, selection, start, end, property, value, update) {\n        var previousSplittedWidget = paragraph.previousSplitWidget;\n        var isPageBreak = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousSplittedWidget) && previousSplittedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && previousSplittedWidget.isEndsWithPageBreak) {\n            isPageBreak = true;\n        }\n        paragraph = paragraph.combineWidget(this.owner.viewer);\n        var startOffset = 0;\n        var length = selection.getParagraphLength(paragraph);\n        var startLineWidget = paragraph.childWidgets.indexOf(start.currentWidget) !== -1 ?\n            paragraph.childWidgets.indexOf(start.currentWidget) : 0;\n        var endOffset = end.offset;\n        var endLineWidget = paragraph.childWidgets.indexOf(end.currentWidget) !== -1 ?\n            paragraph.childWidgets.indexOf(end.currentWidget) : paragraph.childWidgets.length - 1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection)) {\n            if (paragraph === start.paragraph) {\n                startOffset = start.offset;\n            }\n        }\n        if (!paragraph.equals(end.paragraph)) {\n            var lastLine = paragraph.childWidgets[paragraph.childWidgets.length - 1];\n            //Skip consider highlightcolor if paragraph mark alone is selected similar to Microsoft Word behaviour\n            if (!(property === 'highlightColor' && selection.isParagraphLastLine(lastLine)\n                && start.currentWidget === lastLine && start.offset === selection.getLineLength(lastLine))) {\n                this.applyCharFormatValue(paragraph.characterFormat, property, value, update);\n            }\n            endOffset = length;\n        }\n        else {\n            var lastLine = paragraph.childWidgets[paragraph.childWidgets.length - 1];\n            if (selection.isParagraphLastLine(lastLine) && end.currentWidget === lastLine\n                && ((endOffset === selection.getLineLength(lastLine) + 1) || (selection.isEmpty && selection.end.isAtParagraphEnd))) {\n                this.applyCharFormatValue(paragraph.characterFormat, property, value, update);\n            }\n        }\n        // let count: number = 0;\n        for (var i = startLineWidget; i <= endLineWidget; i++) {\n            var line = paragraph.childWidgets[i];\n            if (i !== startLineWidget) {\n                startOffset = selection.getStartLineOffset(line);\n            }\n            if (line === end.currentWidget) {\n                endOffset = end.offset;\n            }\n            else {\n                endOffset = selection.getLineLength(line);\n            }\n            var count = 0;\n            var isStarted = true;\n            var endElement = undefined;\n            var indexOf = -1;\n            var isIncrease = true;\n            for (var j = 0; j < line.children.length; isIncrease ? j++ : j--) {\n                var inlineObj = line.children[j];\n                isStarted = false;\n                inlineObj.isWidthUpdated = false;\n                if (inlineObj instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                    continue;\n                }\n                if (endElement === inlineObj) {\n                    endElement = undefined;\n                    j = indexOf;\n                    indexOf = -1;\n                    isIncrease = true;\n                }\n                if (startOffset >= count + inlineObj.length) {\n                    count += inlineObj.length;\n                    continue;\n                }\n                var startIndex = 0;\n                if (startOffset > count) {\n                    startIndex = startOffset - count;\n                }\n                var endIndex = endOffset - count;\n                var inlineLength = inlineObj.length;\n                if (endIndex > inlineLength) {\n                    endIndex = inlineLength;\n                }\n                var index = this.applyCharFormatInline(inlineObj, selection, startIndex, endIndex, property, value, update);\n                // Added the revision for the character format of the current para when inserting the link when selecting the multiple para and inserting the link.\n                if ((property !== \"fontColor\" || paragraph.characterFormat.revisions.length === 0) && !paragraph.equals(end.paragraph) && this.isForHyperlinkFormat && this.owner.enableTrackChanges && line.children[j].indexInOwner === line.children.length - 1 && line === line.paragraph.lastChild) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inlineObj) && inlineObj.revisions.length > 0) {\n                        var currentRevision = inlineObj.revisions[inlineObj.revisions.length - 1];\n                        paragraph.characterFormat.revisions.push(currentRevision);\n                        currentRevision.range.push(paragraph.characterFormat);\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                    }\n                }\n                j += index;\n                if (endOffset <= count + inlineLength) {\n                    break;\n                }\n                count += inlineLength;\n            }\n        }\n        var endParagraph = end.paragraph;\n        this.documentHelper.layout.reLayoutParagraph(paragraph, isPageBreak ? 0 : startLineWidget, 0);\n        if (paragraph.equals(endParagraph)) {\n            return undefined;\n        }\n        return this.getNextParagraphForCharacterFormatting(paragraph, start, end, property, value, update);\n    };\n    /**\n     * Toggles the bold property of selected contents.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.toggleBold = function () {\n        if ((this.owner.isReadOnlyMode || this.restrictFormatting) && !this.selection.isInlineFormFillMode()) {\n            return;\n        }\n        var value = this.getCurrentSelectionValue('bold');\n        this.selection.characterFormat.bold = value;\n    };\n    /**\n     * Toggles the bold property of selected contents.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.toggleItalic = function () {\n        if ((this.owner.isReadOnlyMode || this.restrictFormatting) && !this.selection.isInlineFormFillMode()) {\n            return;\n        }\n        var value = this.getCurrentSelectionValue('italic');\n        this.selection.characterFormat.italic = value;\n    };\n    /**\n     * Change the selected text to uppercase.\n     * @private\n     */\n    Editor.prototype.changeCase = function (property) {\n        if (this.selection.isEmpty || ((this.owner.isReadOnlyMode || this.restrictFormatting) && !this.selection.isInlineFormFillMode())) {\n            return;\n        }\n        // this.selection.characterFormat.allCaps = (property === \"Uppercase\") ? true : false;\n        this.initHistory(property);\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var selection = this.selection;\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        this.changeSelectedTextCase(selection, startPosition, endPosition, property);\n        this.reLayout(selection);\n    };\n    /**\n     * Change the selected text case.\n     * @private\n     */\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeSelectedTextCase = function (selection, startPosition, endPosition, property, removedTextNodes) {\n        var blockInfo = this.selection.getParagraphInfo(startPosition);\n        selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(startPosition, true);\n            }\n        }\n        var isRevert = this.editorHistory.isUndoing;\n        if (isRevert && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(removedTextNodes) && removedTextNodes.length > 0) {\n            this.removedTextNodes = removedTextNodes;\n        }\n        var endPos = selection.isForward ? endPosition.selection.endOffset : endPosition.selection.startOffset;\n        this.changeTextCase(startPosition.paragraph, selection, startPosition, endPosition, property, isRevert);\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            endPosition = selection.getTextPosBasedOnLogicalIndex(endPos);\n            if (this.checkEndPosition(selection)) {\n                this.updateHistoryPosition(endPosition, false);\n            }\n            selection.selectPosition(startPosition, endPosition);\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeTextCase = function (para, selection, startPosition, endPosition, property, isRevert) {\n        if (startPosition.paragraph.isInsideTable && (!endPosition.paragraph.isInsideTable\n            || startPosition.paragraph.associatedCell !== endPosition.paragraph.associatedCell\n            || selection.isCellSelected(startPosition.paragraph.associatedCell, startPosition, endPosition))) {\n            var tableCell = void 0;\n            startPosition.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(startPosition, true);\n            }\n            tableCell = startPosition.paragraph.associatedCell;\n            this.changeCaseParaFormatInCell(tableCell, startPosition, endPosition, property, isRevert);\n            var table = tableCell.ownerTable;\n            this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        }\n        else {\n            this.changeCaseParagraph(para, selection, startPosition, endPosition, property, isRevert);\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParagraph = function (para, selection, startPos, endPos, property, isRevert) {\n        para = para.combineWidget(this.owner.viewer);\n        var startOffsetVal = 0;\n        var len = selection.getParagraphLength(para);\n        var startLine = para.childWidgets.indexOf(startPos.currentWidget) !== -1 ?\n            para.childWidgets.indexOf(startPos.currentWidget) : 0;\n        var endOffsetVal = endPos.offset;\n        var endLine = para.childWidgets.indexOf(endPos.currentWidget) !== -1 ?\n            para.childWidgets.indexOf(endPos.currentWidget) : para.childWidgets.length - 1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection)) {\n            if (para === startPos.paragraph) {\n                startOffsetVal = startPos.offset;\n            }\n        }\n        if (!para.equals(endPos.paragraph)) {\n            endOffsetVal = len;\n        }\n        // let count: number = 0;\n        for (var i = startLine; i <= endLine; i++) {\n            this.checkLastLetterSpaceDot = '';\n            this.checkLastLetterSpace = '';\n            var line = para.childWidgets[i];\n            if (i !== startLine) {\n                startOffsetVal = selection.getStartLineOffset(line);\n            }\n            if (line === endPos.currentWidget) {\n                endOffsetVal = endPos.offset;\n            }\n            else {\n                endOffsetVal = selection.getLineLength(line);\n            }\n            var textCount = 0;\n            var isIterationStarted = true;\n            var endElementBox = undefined;\n            var childIndex = -1;\n            var isIncreaseIteration = true;\n            /* eslint-disable-next-line max-len */\n            for (var j = 0; j < line.children.length; isIncreaseIteration ? j++ : j--) {\n                var child = line.children[j];\n                var isPreviousTextElementBox = false;\n                if (j === 0 || j > 0 && line.children[j - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                    isPreviousTextElementBox = true;\n                    if (j > 0) {\n                        var textElement = line.children[j - 1];\n                        this.checkLastLetterSpace = textElement.text.substr(-1);\n                        this.checkLastLetterSpaceDot = textElement.text.substr(-2);\n                    }\n                }\n                isIterationStarted = false;\n                if (child instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                    continue;\n                }\n                if (endElementBox === child) {\n                    endElementBox = undefined;\n                    j = childIndex;\n                    childIndex = -1;\n                    isIncreaseIteration = true;\n                }\n                if (startOffsetVal >= textCount + child.length) {\n                    textCount += child.length;\n                    continue;\n                }\n                var startIndex = 0;\n                if (startOffsetVal > textCount) {\n                    startIndex = startOffsetVal - textCount;\n                }\n                var endIndex = endOffsetVal - textCount;\n                var inlineLength = child.length;\n                if (endIndex > inlineLength) {\n                    endIndex = inlineLength;\n                }\n                var index = this.changeCaseInline(child, selection, startIndex, endIndex, property, isRevert, isPreviousTextElementBox);\n                j += index;\n                if (endOffsetVal <= textCount + inlineLength) {\n                    break;\n                }\n                textCount += inlineLength;\n            }\n        }\n        var endPara = endPos.paragraph;\n        this.documentHelper.layout.reLayoutParagraph(para, startLine, 0);\n        if (para.equals(endPara)) {\n            return;\n        }\n        this.changeCaseNextBlock(para, startPos, endPos, property, isRevert);\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseInline = function (inline, selection, startIndex, endIndex, property, isRevert, isPreviousTextElementBox) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            if (startIndex === 0 && endIndex === inline.length) {\n                this.changeCaseInlineInternal(inline, selection, startIndex, endIndex, property, isRevert, isPreviousTextElementBox);\n            }\n            else {\n                return this.changeCaseInlineInternal(inline, selection, startIndex, endIndex, property, isRevert, isPreviousTextElementBox);\n            }\n        }\n        return 0;\n    };\n    Editor.prototype.addRemovedTextNodes = function (inline, newText) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                var span = this.editorHistory.currentBaseHistoryInfo.removedNodes[0];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(span)) {\n                    span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                    span.text = '';\n                    this.editorHistory.currentBaseHistoryInfo.removedNodes.push(span);\n                }\n                span.text += newText;\n                span.isWidthUpdated = false;\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseInlineInternal = function (inlineObj, selection, startIndex, endIndex, property, isRevert, isPreviousTextElementBox) {\n        var x = 0;\n        var makeFirstLetterCapital = false;\n        var index = inlineObj.line.children.indexOf(inlineObj);\n        var paragraph = inlineObj.paragraph;\n        var lineIndex = paragraph.childWidgets.indexOf(inlineObj.line);\n        var textElement;\n        inlineObj.isWidthUpdated = false;\n        if (startIndex > 0) {\n            var textToChange = inlineObj.text.substr(startIndex, endIndex - startIndex);\n            this.addRemovedTextNodes(inlineObj, textToChange);\n            textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            textElement.characterFormat.copyFormat(inlineObj.characterFormat);\n            textElement.line = inlineObj.line;\n            //Change the text case\n            if (property === 'CapitalizeEachWord') {\n                var firstLetter = inlineObj.text.substr(startIndex - 1, 1);\n                makeFirstLetterCapital = firstLetter === ' ';\n            }\n            if (property === 'SentenceCase') {\n                var firstLetter = inlineObj.text.substr(startIndex - 2, 2);\n                makeFirstLetterCapital = firstLetter === '. ';\n            }\n            textElement.characterFormat.allCaps = (property === \"Uppercase\") ? isRevert ? false : true : false;\n            textElement.text = this.getChangeCaseText(textToChange, property, isRevert, makeFirstLetterCapital);\n            textElement.isRightToLeft = inlineObj.isRightToLeft;\n            index++;\n            inlineObj.line.children.splice(index, 0, textElement);\n            x++;\n        }\n        if (endIndex < inlineObj.length) {\n            textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            textElement.characterFormat.copyFormat(inlineObj.characterFormat);\n            textElement.text = inlineObj.text.substring(endIndex);\n            textElement.line = inlineObj.line;\n            textElement.isRightToLeft = inlineObj.isRightToLeft;\n            index++;\n            inlineObj.line.children.splice(index, 0, textElement);\n            x++;\n        }\n        var textElementBox = inlineObj;\n        if (startIndex === 0) {\n            var newText = textElementBox.text.substr(0, endIndex);\n            this.addRemovedTextNodes(inlineObj, newText);\n            //Change the text case\n            if (property === 'SentenceCase') {\n                if (this.checkLastLetterSpaceDot === '. ') {\n                    makeFirstLetterCapital = true;\n                }\n                else if (lineIndex === 0 && this.checkLastLetterSpaceDot === '') {\n                    if (isPreviousTextElementBox) {\n                        var line = paragraph.childWidgets[0];\n                        var element = line.children[0];\n                        makeFirstLetterCapital = element === textElementBox;\n                    }\n                    else {\n                        makeFirstLetterCapital = true;\n                    }\n                }\n                this.checkLastLetterSpaceDot = textElementBox.text.substr(-2);\n            }\n            else if (property == 'CapitalizeEachWord') {\n                if (isPreviousTextElementBox) {\n                    makeFirstLetterCapital = selection.getIndexInInline(inlineObj) === 0 || this.checkLastLetterSpace === ' ';\n                }\n                else {\n                    if (textElementBox.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox ||\n                        textElementBox.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox ||\n                        textElementBox.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n                        var tempString = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElementBox.previousElement.previousElement) ? textElementBox.previousElement.previousElement.text : undefined;\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tempString) || _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.endsWith(tempString)) {\n                            makeFirstLetterCapital = true;\n                        }\n                        else {\n                            makeFirstLetterCapital = false;\n                        }\n                    }\n                    else {\n                        makeFirstLetterCapital = true;\n                    }\n                }\n                this.checkLastLetterSpace = textElementBox.text.charAt(textElementBox.length - 1);\n            }\n            textElementBox.characterFormat.allCaps = (property === \"Uppercase\") ? isRevert ? false : true : false;\n            textElementBox.text = this.getChangeCaseText(newText, property, isRevert, makeFirstLetterCapital);\n        }\n        else {\n            var preText = textElementBox.text.substr(0, startIndex);\n            textElementBox.text = preText;\n        }\n        return x;\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseNextBlock = function (block, start, end, property, isRevert) {\n        block = this.getNextBlockForChangeCase(block, start, end, property, isRevert);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) { //Goto the next block.\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.changeCaseParagraph(block, this.documentHelper.selection, start, end, property, isRevert);\n            }\n            else {\n                this.changeCaseForTable(0, block, this.documentHelper.selection, start, end, property, isRevert);\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.getNextBlockForChangeCase = function (block, start, end, property, isRevert) {\n        var widgetCollection = block.getSplitWidgets();\n        block = widgetCollection[widgetCollection.length - 1];\n        block = this.documentHelper.selection.getNextRenderedBlock(block);\n        return block;\n    };\n    Editor.prototype.getChangeCaseText = function (input, property, isRevert, makeFirstLetterCapital) {\n        if (isRevert) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.removedTextNodes) && this.removedTextNodes.length > 0) {\n                var textElement = this.removedTextNodes[0];\n                var oldText = textElement.text.substr(0, input.length);\n                textElement.text = textElement.text.substr(oldText.length, textElement.length - oldText.length);\n                input = oldText;\n                if (textElement.text === '') {\n                    this.removedTextNodes.splice(0, 1);\n                }\n            }\n        }\n        else {\n            switch (property) {\n                case 'SentenceCase':\n                    input = this.sentencecase(input, makeFirstLetterCapital);\n                    break;\n                case 'Uppercase':\n                    input = input.toUpperCase();\n                    break;\n                case 'Lowercase':\n                    input = input.toLowerCase();\n                    break;\n                case 'CapitalizeEachWord':\n                    input = this.capitalizeFirst(input, makeFirstLetterCapital);\n                    break;\n                case 'ToggleCase':\n                    input = this.togglecase(input);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return input;\n    };\n    //Change text into capitalize each word\n    Editor.prototype.capitalizeFirst = function (inputString, makeFirstLetterCapital) {\n        var pattern = /\\b\\w+'\\w+\\b/g;\n        if (pattern.test(inputString)) {\n            var words_1 = inputString.split(/[^a-zA-Z0-9'\\-]+/).toString();\n            words_1 = inputString.split(' ').map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); }).join(' ');\n            return words_1;\n        }\n        var words = inputString.split(/[^\\w]+/g);\n        var capitalizedWords = words.map(function (word, index) {\n            if (index === 0) {\n                return makeFirstLetterCapital ? word.charAt(0).toUpperCase() + word.slice(1).toLowerCase() : word.toLowerCase();\n            }\n            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        });\n        var specialChars = inputString.split(/\\w+/).filter(Boolean);\n        var resultArray = [];\n        for (var i = 0; i < Math.max(capitalizedWords.length, specialChars.length); i++) {\n            if (capitalizedWords[i]) {\n                resultArray.push(capitalizedWords[i]);\n            }\n            if (specialChars[i]) {\n                resultArray.push(specialChars[i]);\n            }\n        }\n        var resultString = resultArray.join('');\n        return resultString;\n    };\n    //change text to sentence case\n    Editor.prototype.sentencecase = function (value, makeFirstLetterCapital) {\n        var sentences = value.split('. ');\n        var capitalizedSentences = sentences.map(function (sentence, index) {\n            if (index === 0) {\n                return makeFirstLetterCapital ? sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase() : sentence.toLowerCase();\n            }\n            return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n        });\n        var resultString = capitalizedSentences.join('. ');\n        return resultString;\n    };\n    //Change text to toggle case\n    Editor.prototype.togglecase = function (value) {\n        var text = '';\n        var toggle = value.split('').map(function (char) {\n            if (char === char.toLowerCase()) {\n                return char.toUpperCase();\n            }\n            else {\n                return char.toLowerCase();\n            }\n        });\n        text = toggle.join('');\n        return text;\n    };\n    // Table\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseForTable = function (indexToStart, tableWidget, selection, startPos, endPos, property, isRevert) {\n        tableWidget = tableWidget.combineWidget(this.owner.viewer);\n        for (var i = indexToStart; i < tableWidget.childWidgets.length; i++) {\n            var row = tableWidget.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.changeCaseForSelectedCell(row.childWidgets[j], selection, property, isRevert);\n            }\n            if (endPos.paragraph.isInsideTable && selection.containsRow(row, endPos.paragraph.associatedCell)) {\n                this.documentHelper.layout.layoutBodyWidgetCollection(tableWidget.index, tableWidget.containerWidget, tableWidget, false);\n                return;\n            }\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(tableWidget.index, tableWidget.containerWidget, tableWidget, false);\n        this.changeCaseNextBlock(tableWidget, startPos, endPos, property, isRevert);\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseForSelectedCell = function (cell, selection, property, isRevert) {\n        for (var i = 0; i < cell.childWidgets.length; i++) {\n            var block = cell.childWidgets[i];\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.changeCaseForSelectedPara(block, selection, property, isRevert);\n            }\n            else {\n                this.changeCaseForSelTable(block, selection, property, isRevert);\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseForSelectedPara = function (paragraph, selection, property, isRevert) {\n        for (var i = 0; i < paragraph.childWidgets.length; i++) {\n            var line = paragraph.childWidgets[i];\n            var firstLetter = '';\n            for (var j = 0; j < line.children.length; j++) {\n                var element = line.children[j];\n                element.characterFormat.allCaps = (property === \"Uppercase\") ? isRevert ? false : true : false;\n                var makeFirstLetterCapital = false;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element) && element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                    this.addRemovedTextNodes(element, element.text);\n                    if (property === 'CapitalizeEachWord') {\n                        makeFirstLetterCapital = j === 0 || firstLetter === ' ';\n                        firstLetter = element.text.substr(element.length - 1, 1);\n                    }\n                    else if (property === 'SentenceCase') {\n                        makeFirstLetterCapital = (element.text.substr(element.length - 2, 2) === '. ') || j === 0;\n                    }\n                    element.text = this.getChangeCaseText(element.text, property, isRevert, makeFirstLetterCapital);\n                    element.isWidthUpdated = false;\n                }\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseForSelTable = function (tableWidget, selection, property, isRevert) {\n        for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n            var row = tableWidget.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.changeCaseForSelectedCell(row.childWidgets[j], selection, property, isRevert);\n            }\n        }\n    };\n    // Cell\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParaFormatInCell = function (tableCell, startPos, endPos, property, isRevert) {\n        var selection = this.documentHelper.selection;\n        if (endPos.paragraph.isInsideTable) {\n            var cellContainer = selection.getContainerCellOf(tableCell, endPos.paragraph.associatedCell);\n            if (cellContainer.ownerTable.contains(endPos.paragraph.associatedCell)) {\n                var startCell = selection.getSelectedCell(tableCell, cellContainer);\n                var endCell = selection.getSelectedCell(endPos.paragraph.associatedCell, cellContainer);\n                if (selection.containsCell(cellContainer, endPos.paragraph.associatedCell)) {\n                    //Selection end is in container cell.\n                    if (selection.isCellSelected(cellContainer, startPos, endPos)) {\n                        this.changeCaseParaForCellInternal(cellContainer, selection, property, isRevert);\n                    }\n                    else {\n                        if (startCell === cellContainer) {\n                            this.changeCaseParagraph(startPos.paragraph, selection, startPos, endPos, property, isRevert);\n                        }\n                        else {\n                            this.changeCaseParaForRow(startCell.ownerRow, selection, startPos, endPos, property, isRevert);\n                        }\n                    }\n                }\n                else {\n                    //Change case of other selected cells in the current table.\n                    this.changeCaseParaForTableCell(cellContainer.ownerTable, cellContainer, endCell, property, isRevert);\n                }\n            }\n            else {\n                this.changeCaseParaForRow(cellContainer.ownerRow, selection, startPos, endPos, property, isRevert);\n            }\n        }\n        else {\n            var wCell = selection.getContainerCell(tableCell);\n            this.changeCaseParaForRow(wCell.ownerRow, selection, startPos, endPos, property, isRevert);\n        }\n    };\n    // Table\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParaForTableCell = function (tableWidget, startCell, endCell, property, isRevert) {\n        var selection = this.documentHelper.selection;\n        var cellStartValue = selection.getCellLeft(startCell.ownerRow, startCell);\n        var cellEndValue = cellStartValue + startCell.cellFormat.cellWidth;\n        var cellEndLeft = selection.getCellLeft(endCell.ownerRow, endCell);\n        var cellEndRight = cellEndLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(cellStartValue, cellEndValue, cellEndLeft, cellEndRight);\n        cellStartValue = cellInfo.start;\n        cellEndValue = cellInfo.end;\n        var count = tableWidget.childWidgets.indexOf(endCell.ownerRow);\n        for (var m = tableWidget.childWidgets.indexOf(startCell.ownerRow); m <= count; m++) {\n            var row = tableWidget.childWidgets[m];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var left = selection.getCellLeft(row, row.childWidgets[j]);\n                if (Math.round(cellStartValue) <= Math.round(left) && Math.round(left) < Math.round(cellEndValue)) {\n                    this.changeCaseParaForCellInternal(row.childWidgets[j], selection, property, isRevert);\n                }\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParaForCellInternal = function (tableCell, selection, property, isRevert) {\n        for (var i = 0; i < tableCell.childWidgets.length; i++) {\n            var childBlock = tableCell.childWidgets[i];\n            if (childBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.changeCaseForSelectedPara(childBlock, selection, property, isRevert);\n            }\n            else {\n                this.changeCaseParaFormatTableInternal(childBlock, selection, property, isRevert);\n            }\n        }\n    };\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParaFormatTableInternal = function (table, selection, property, isRevert) {\n        for (var x = 0; x < table.childWidgets.length; x++) {\n            var row = table.childWidgets[x];\n            for (var y = 0; y < row.childWidgets.length; y++) {\n                this.changeCaseParaForCellInternal(row.childWidgets[y], selection, property, isRevert);\n            }\n        }\n    };\n    // Row\n    /* eslint-disable-next-line max-len */\n    Editor.prototype.changeCaseParaForRow = function (wRow, selection, start, end, property, isRevert) {\n        for (var i = wRow.rowIndex; i < wRow.ownerTable.childWidgets.length; i++) {\n            var row = wRow.ownerTable.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.changeCaseParaForCellInternal(row.childWidgets[j], selection, property, isRevert);\n            }\n            if (end.paragraph.isInsideTable && this.documentHelper.selection.containsRow(row, end.paragraph.associatedCell)) {\n                return;\n            }\n        }\n        this.changeCaseNextBlock(wRow.ownerTable, start, end, property, isRevert);\n    };\n    /**\n     * Toggles the all Caps formatting for the selected content.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.toggleAllCaps = function () {\n        if (this.documentHelper.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) {\n            return;\n        }\n        var value = this.getCurrentSelectionValue('allCaps');\n        this.selection.characterFormat.allCaps = value;\n    };\n    Editor.prototype.toggleChangeCase = function () {\n        var casings = ['Uppercase', 'Lowercase', 'CapitalizeEachWord'];\n        this.casingIndex++;\n        if (this.casingIndex >= casings.length) {\n            this.casingIndex = 0;\n        }\n        return casings[this.casingIndex];\n    };\n    Editor.prototype.getCurrentSelectionValue = function (property) {\n        var value = false;\n        if ((property === 'bold' || property === 'italic')) {\n            var characterFormat = this.getSelectedCharacterFormat();\n            if (property === 'bold') {\n                value = !(characterFormat.bold);\n            }\n            if (property === 'italic') {\n                value = !(characterFormat.italic);\n            }\n        }\n        return value;\n    };\n    Editor.prototype.getSelectedCharacterFormat = function () {\n        var index = 0;\n        var start = this.selection.start;\n        if (!this.selection.isForward) {\n            start = this.selection.end;\n        }\n        var lineWidget = start.currentWidget;\n        var inlineObj = lineWidget.getInline(start.offset, index);\n        var inline = inlineObj.element;\n        // inline.ownerBase\n        index = inlineObj.index;\n        var characterFormat = lineWidget.paragraph.characterFormat;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            if (this.selection.isEmpty && this.selection.contextType === 'List') {\n                var listLevel = this.selection.getListLevel(this.selection.start.paragraph);\n                if (listLevel.characterFormat.uniqueCharacterFormat) {\n                    characterFormat = listLevel.characterFormat;\n                }\n            }\n            else if (!this.selection.isEmpty && index === inline.length) {\n                characterFormat = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.nextNode) ? lineWidget.paragraph.characterFormat\n                    : inline.nextNode.characterFormat;\n            }\n            else {\n                characterFormat = inline.characterFormat;\n            }\n        }\n        return characterFormat;\n    };\n    /**\n     * Toggles the underline property of selected contents.\n     *\n     * @param underline Specify the underline to be toggled (default: Single).\n     * @returns {void}\n     */\n    Editor.prototype.toggleUnderline = function (underline) {\n        if ((this.owner.isReadOnlyMode || this.restrictFormatting) && !this.selection.isInlineFormFillMode()) {\n            return;\n        }\n        this.updateProperty(1, underline);\n    };\n    /**\n     * Toggles the strike through property of selected contents.\n     *\n     * @param {Strikethrough} strikethrough Specify the strike through to be toggled (default: SingleStrike).\n     * @returns {void}\n     */\n    Editor.prototype.toggleStrikethrough = function (strikethrough) {\n        if (!this.owner.isReadOnlyMode || this.selection.isInlineFormFillMode()) {\n            var value = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(strikethrough)) {\n                value = this.selection.characterFormat.strikethrough === 'SingleStrike' ? 'None' : 'SingleStrike';\n            }\n            else {\n                value = strikethrough;\n            }\n            this.selection.characterFormat.strikethrough = value;\n        }\n    };\n    Editor.prototype.updateFontSize = function (format, value) {\n        if (typeof (value) === 'number' && !(value < 0 && format.fontSize === 1)) {\n            return format.fontSize + value;\n        }\n        var fontsizeCollection = [8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 26, 28, 36, 48, 72];\n        if (typeof (value) === 'string' && value === 'increment') {\n            if (format.fontSize < 8) {\n                return format.fontSize + 1;\n            }\n            else if (format.fontSize >= 72 && format.fontSize < 80) {\n                return 80;\n            }\n            else if (format.fontSize >= 80) {\n                return format.fontSize + 10;\n            }\n            else {\n                for (var i = 0; i < fontsizeCollection.length; i++) {\n                    if (format.fontSize < fontsizeCollection[i]) {\n                        return fontsizeCollection[i];\n                    }\n                }\n            }\n        }\n        else if (typeof (value) === 'string' && value === 'decrement' && format.fontSize > 1) {\n            if (format.fontSize <= 8) {\n                return format.fontSize - 1;\n            }\n            else if (format.fontSize > 72 && format.fontSize <= 80) {\n                return 72;\n            }\n            else if (format.fontSize > 80) {\n                return format.fontSize - 10;\n            }\n            else {\n                for (var i = 0; i < fontsizeCollection.length; i++) {\n                    if (format.fontSize <= fontsizeCollection[i]) {\n                        return fontsizeCollection[i - 1];\n                    }\n                }\n            }\n        }\n        return format.fontSize;\n    };\n    // Inline\n    Editor.prototype.applyCharFormatInline = function (inline, selection, startIndex, endIndex, property, value, update) {\n        if (startIndex === 0 && endIndex === inline.length) {\n            this.applyCharFormatValue(inline.characterFormat, property, value, update);\n            return 0;\n        }\n        else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            return this.formatInline(inline, selection, startIndex, endIndex, property, value, update);\n        }\n        return 0;\n    };\n    Editor.prototype.formatInline = function (inline, selection, startIndex, endIndex, property, value, update) {\n        var x = 0;\n        var node = inline;\n        var index = inline.line.children.indexOf(node);\n        var paragraph = inline.paragraph;\n        var textElement;\n        var indexCountForRevision = 0;\n        if (startIndex > 0) {\n            indexCountForRevision += 1;\n            textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            textElement.characterFormat.copyFormat(inline.characterFormat);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.contentControlProperties)) {\n                textElement.contentControlProperties = inline.contentControlProperties;\n            }\n            textElement.line = inline.line;\n            textElement.text = inline.text.substr(startIndex, endIndex - startIndex);\n            textElement.isRightToLeft = inline.isRightToLeft;\n            this.applyCharFormatValue(textElement.characterFormat, property, value, update);\n            index++;\n            node.line.children.splice(index, 0, textElement);\n            x++;\n            this.updateRevisionForFormattedContent(inline, textElement, indexCountForRevision);\n            // this.addToLinkedFields(span);                      \n        }\n        if (endIndex < node.length) {\n            indexCountForRevision += 1;\n            textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n            textElement.characterFormat.copyFormat(inline.characterFormat);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.contentControlProperties)) {\n                textElement.contentControlProperties = inline.contentControlProperties;\n            }\n            textElement.text = node.text.substring(endIndex);\n            textElement.line = inline.line;\n            textElement.isRightToLeft = inline.isRightToLeft;\n            index++;\n            node.line.children.splice(index, 0, textElement);\n            x++;\n            this.updateRevisionForFormattedContent(inline, textElement, indexCountForRevision);\n            // this.addToLinkedFields(span);                       \n        }\n        if (startIndex === 0) {\n            inline.text = inline.text.substr(0, endIndex);\n            this.applyCharFormatValue(inline.characterFormat, property, value, update);\n        }\n        else {\n            inline.text = inline.text.substr(0, startIndex);\n        }\n        return x;\n    };\n    Editor.prototype.updateRevisionForFormattedContent = function (inline, tempSpan, indexCount) {\n        for (var i = 0; i < inline.revisions.length; i++) {\n            var currentRevision = inline.revisions[i];\n            var rangeIndex = currentRevision.range.indexOf(inline) + indexCount;\n            tempSpan.revisions.splice(0, 0, currentRevision);\n            currentRevision.range.splice(rangeIndex, 0, tempSpan);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n        }\n    };\n    // Cell\n    Editor.prototype.applyCharFormatCell = function (cell, selection, start, end, property, value, update) {\n        if (end.paragraph.isInsideTable) {\n            var containerCell = selection.getContainerCellOf(cell, end.paragraph.associatedCell);\n            if (containerCell.ownerTable.contains(end.paragraph.associatedCell)) {\n                var startCell = selection.getSelectedCell(cell, containerCell);\n                var endCell = selection.getSelectedCell(end.paragraph.associatedCell, containerCell);\n                if (selection.containsCell(containerCell, end.paragraph.associatedCell)) {\n                    //Selection end is in container cell.\n                    if (selection.isCellSelected(containerCell, start, end)) {\n                        value = this.getCharacterFormatValueOfCell(cell, selection, value, property);\n                        this.applyCharFormatForSelectedCell(containerCell, selection, property, value, update);\n                        return undefined;\n                    }\n                    else {\n                        if (startCell === containerCell) {\n                            return this.applyCharFormat(start.paragraph, selection, start, end, property, value, update);\n                        }\n                        else {\n                            return this.applyCharFormatRow(startCell.ownerRow, selection, start, end, property, value, update);\n                        }\n                    }\n                }\n                else { //Format other selected cells in current table.\n                    this.applyCharFormatForTableCell(containerCell.ownerTable, selection, containerCell, endCell, property, value, update);\n                    return undefined;\n                }\n            }\n            else {\n                return this.applyCharFormatRow(containerCell.ownerRow, selection, start, end, property, value, update);\n            }\n        }\n        else {\n            var tableCell = selection.getContainerCell(cell);\n            return this.applyCharFormatRow(tableCell.ownerRow, selection, start, end, property, value, update);\n        }\n    };\n    Editor.prototype.applyCharFormatForSelectedCell = function (cell, selection, property, value, update) {\n        for (var i = 0; i < cell.childWidgets.length; i++) {\n            var block = cell.childWidgets[i];\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                this.applyCharFormatForSelectedPara(block, selection, property, value, update);\n            }\n            else {\n                this.applyCharFormatForSelTable(block, selection, property, value, update);\n            }\n        }\n    };\n    // Row\n    Editor.prototype.applyCharFormatRow = function (row, selection, start, end, property, value, update) {\n        value = this.getCharacterFormatValueOfCell(row.childWidgets[0], selection, value, property);\n        return this.applyCharFormatForTable(row.rowIndex, row.ownerTable, selection, start, end, property, value, update);\n    };\n    // Table\n    Editor.prototype.applyCharFormatForTable = function (index, table, selection, start, end, property, value, update) {\n        table = table.combineWidget(this.owner.viewer);\n        for (var i = index; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.applyCharFormatForSelectedCell(row.childWidgets[j], selection, property, value, update);\n            }\n            if (end.paragraph.isInsideTable && selection.containsRow(row, end.paragraph.associatedCell)) {\n                this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n                return undefined;\n            }\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        return this.getNextParagraphForCharacterFormatting(table, start, end, property, value, update);\n    };\n    Editor.prototype.applyCharFormatForSelTable = function (tableWidget, selection, property, value, update) {\n        for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n            var row = tableWidget.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.applyCharFormatForSelectedCell(row.childWidgets[j], selection, property, value, update);\n            }\n        }\n    };\n    Editor.prototype.applyCharFormatForTableCell = function (table, selection, startCell, endCell, property, value, update) {\n        var startCellLeft = selection.getCellLeft(startCell.ownerRow, startCell);\n        var startCellRight = startCellLeft + startCell.cellFormat.cellWidth;\n        var endCellLeft = selection.getCellLeft(endCell.ownerRow, endCell);\n        var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(startCellLeft, startCellRight, endCellLeft, endCellRight);\n        startCellLeft = cellInfo.start;\n        startCellRight = cellInfo.end;\n        var count = table.childWidgets.indexOf(endCell.ownerRow);\n        var isStarted = false;\n        for (var i = table.childWidgets.indexOf(startCell.ownerRow); i <= count; i++) {\n            var row = table.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var left = selection.getCellLeft(row, row.childWidgets[j]);\n                if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(startCellLeft, 2) <= _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(left, 2) &&\n                    _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(left, 2) < _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.round(startCellRight, 2)) {\n                    if (!isStarted) {\n                        value = this.getCharacterFormatValueOfCell(row.childWidgets[j], selection, value, property);\n                        isStarted = true;\n                    }\n                    this.applyCharFormatForSelectedCell(row.childWidgets[j], selection, property, value, update);\n                }\n            }\n        }\n    };\n    /**\n     * private\n     * @returns {CellInfo}\n     */\n    Editor.prototype.updateSelectedCellsInTable = function (start, end, endCellLeft, endCellRight) {\n        var selection = this.documentHelper.selection;\n        if (start > endCellLeft) {\n            start = endCellLeft;\n        }\n        if (end < endCellRight) {\n            end = endCellRight;\n        }\n        if (start > selection.upDownSelectionLength) {\n            start = selection.upDownSelectionLength;\n        }\n        if (end < selection.upDownSelectionLength) {\n            end = selection.upDownSelectionLength;\n        }\n        return { start: start, end: end };\n    };\n    Editor.prototype.getCharacterFormatValueOfCell = function (cell, selection, value, property) {\n        if (typeof (value) === 'boolean' || (value === undefined && (property === 'bold' || property === 'italic'))) {\n            var firstParagraph = selection.getFirstParagraph(cell);\n            var format = firstParagraph.characterFormat;\n            if (firstParagraph.childWidgets.length > 0 && firstParagraph.childWidgets[0].children.length > 0) {\n                format = firstParagraph.childWidgets[0].children[0].characterFormat;\n            }\n            value = !format.getPropertyValue(property);\n        }\n        return value;\n    };\n    /**\n     * Apply Character format for selection\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyCharFormatValueInternal = function (selection, format, property, value) {\n        this.applyCharFormatValue(format, property, value, false);\n    };\n    Editor.prototype.copyInlineCharacterFormat = function (sourceFormat, destFormat) {\n        destFormat.uniqueCharacterFormat = sourceFormat.uniqueCharacterFormat;\n        destFormat.baseCharStyle = sourceFormat.baseCharStyle;\n    };\n    Editor.prototype.applyCharFormatValue = function (format, property, value, update) {\n        if (update && property === 'fontSize') {\n            value = this.updateFontSize(format, value);\n        }\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedProperties(format, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if (value instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat) {\n            if (this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                this.copyInlineCharacterFormat(value, format);\n                if (this.owner.enableCollaborativeEditing && format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n                    this.editorHistory.currentBaseHistoryInfo.buildCharacterFormatOperation(format.ownerBase, format);\n                }\n            }\n            else {\n                format.copyFormat(value);\n            }\n            return;\n        }\n        if (this.isForHyperlinkFormat && this.owner.enableTrackChanges && format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n            var currentElement = format.ownerBase;\n            var prevElement = currentElement.previousNode;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n                var paraWidget = currentElement.paragraph.previousWidget;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget) && !paraWidget.isEmpty()) {\n                    var lineWidget = paraWidget.lastChild;\n                    prevElement = lineWidget.children[lineWidget.children.length - 1];\n                }\n            }\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement) && !(prevElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                prevElement = prevElement.previousNode;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement) && prevElement.revisions.length > 0) {\n                var currentRevision = prevElement.revisions[prevElement.revisions.length - 1];\n                if ((property !== \"fontColor\" || currentElement.revisions.length === 0) && !this.isRevisionAlreadyIn(currentElement, currentRevision)) {\n                    currentElement.revisions.push(currentRevision);\n                    currentRevision.range.push(currentElement);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                }\n            }\n            else {\n                var currentRevision = currentElement.revisions[currentElement.revisions.length - 1];\n                if ((property !== \"fontColor\" || currentElement.revisions.length === 0) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentRevision) && currentRevision.range.length > 0) {\n                    currentElement.revisions.splice(currentElement.revisions.length - 1, 1);\n                    var rangeIndex = currentRevision.range.indexOf(currentElement);\n                    currentRevision.range.splice(rangeIndex, 1);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                }\n                if (property !== \"fontColor\" || currentElement.revisions.length === 0) {\n                    this.insertRevision(currentElement, 'Insertion');\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n            format.clearFormat();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.insertedFormat = format[property];\n            }\n            return;\n        }\n        if (property === 'bold') {\n            if (this.isRTLFormat(format)) {\n                format.boldBidi = format.bold == format.boldBidi ? value : !value;\n            }\n            format.bold = value;\n        }\n        else if (property === 'italic') {\n            if (this.isRTLFormat(format)) {\n                format.italicBidi = format.italic == format.italicBidi ? value : !value;\n            }\n            format.italic = value;\n        }\n        else if (property === 'fontColor') {\n            format.fontColor = value;\n        }\n        else if (property === 'fontFamily') {\n            format.fontFamily = value;\n            format.fontFamilyAscii = value;\n            format.fontFamilyFarEast = value;\n            format.fontFamilyNonFarEast = value;\n            format.fontFamilyBidi = value;\n        }\n        else if (property === 'fontSize') {\n            format.fontSize = value;\n            if (this.isRTLFormat(format)) {\n                format.fontSizeBidi = value;\n            }\n        }\n        else if (property === 'highlightColor') {\n            format.highlightColor = value;\n        }\n        else if (property === 'baselineAlignment') {\n            format.baselineAlignment = value;\n        }\n        else if (property === 'strikethrough') {\n            format.strikethrough = value;\n        }\n        else if (property === 'underline') {\n            format.underline = value;\n        }\n        else if (property === 'styleName') {\n            format.baseCharStyle = value;\n        }\n        else if (property === 'allCaps') {\n            format.allCaps = value;\n        }\n        if (property === 'fontColor') {\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.insertedFormat = format.fontColor;\n            }\n        }\n    };\n    Editor.prototype.isRTLFormat = function (format) {\n        return format.bidi || format.complexScript || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(format.ownerBase) &&\n            format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && this.documentHelper.textHelper.getRtlLanguage(format.ownerBase.text).isRtl);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.updateStyleObject = function (styleData) {\n        var styles = new _format_style__WEBPACK_IMPORTED_MODULE_11__.WStyles();\n        var keyIndex = this.owner.parser.keywordIndex;\n        this.owner.parser.keywordIndex = 1;\n        var isRemoteAction = this.owner.editor.isRemoteAction;\n        this.owner.editor.isRemoteAction = true;\n        this.owner.parser.parseStyles(styleData, styles);\n        for (var i = 0; i < styles.length; i++) {\n            var style = styles.getItem(i);\n            var styleInCollection = this.owner.documentHelper.styles.findByName(style.name);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleData[_index__WEBPACK_IMPORTED_MODULE_19__.abstractListsProperty[1]])) {\n                this.owner.parser.parseAbstractList(styleData, this.owner.documentHelper.abstractLists);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleData[_index__WEBPACK_IMPORTED_MODULE_19__.listsProperty[1]])) {\n                    this.owner.parser.parseList(styleData, this.owner.documentHelper.lists);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleInCollection)) {\n                if (this.owner.editorHistoryModule && (this.owner.editorHistoryModule.isUndoing || this.owner.editorHistoryModule.isRedoing) && i === 0) {\n                    if (this.owner.editorHistoryModule.currentBaseHistoryInfo && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'ModifyStyle') {\n                        var listId = styleInCollection instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WParagraphStyle ? styleInCollection.paragraphFormat.listFormat.listId : -1;\n                        var styleObject = this.owner.getStyleObject(styleInCollection, listId);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(styleData['isNew'])) {\n                            styleObject['isNew'] = styleData['isNew'];\n                        }\n                        this.owner.editorHistoryModule.currentBaseHistoryInfo.modifiedProperties.push(styleObject);\n                    }\n                }\n                if (styleData['isNew'] && this.owner.editorHistoryModule.isUndoing) {\n                    this.owner.documentHelper.styles.remove(styleInCollection);\n                }\n                else {\n                    this.owner.updateStyle(styleInCollection, style);\n                }\n            }\n            else {\n                if (this.owner.editorHistory.isRedoing) {\n                    var listId = style instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WParagraphStyle ? style.paragraphFormat.listFormat.listId : -1;\n                    var styleObject = this.documentHelper.owner.getStyleObject(style, listId);\n                    styleObject[\"isNew\"] = true;\n                    this.documentHelper.owner.editorHistoryModule.currentBaseHistoryInfo.modifiedProperties.push(styleObject);\n                }\n                this.owner.documentHelper.styles.push(style);\n            }\n        }\n        this.owner.editor.isRemoteAction = isRemoteAction;\n        if (styles.length > 0) {\n            this.owner.isShiftingEnabled = true;\n            this.owner.editorModule.layoutWholeDocument();\n            this.owner.isShiftingEnabled = false;\n        }\n        this.owner.parser.keywordIndex = keyIndex;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onImageFormat = function (elementBox, width, height, alternateText) {\n        var modifiedFormat = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.ImageSizeInfo(elementBox);\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('ImageResizing');\n            this.editorHistory.currentBaseHistoryInfo.modifiedProperties.push(modifiedFormat);\n            this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Image;\n            this.editorHistory.currentBaseHistoryInfo.insertedData = { width: _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(width), height: _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(height), alternativeText: alternateText };\n        }\n        this.setOffsetValue(this.selection);\n        elementBox.width = width;\n        elementBox.height = height;\n        elementBox.alternateText = alternateText;\n        this.documentHelper.layout.reLayoutParagraph(elementBox.line.paragraph, elementBox.line.indexInOwner, 0);\n        this.reLayout(this.selection, false);\n        if (this.documentHelper.owner.imageResizerModule && !this.isRemoteAction) {\n            this.documentHelper.owner.imageResizerModule.positionImageResizer(elementBox);\n        }\n    };\n    /**\n     * Toggles the text alignment of selected paragraphs.\n     *\n     * @param {TextAlignment} textAlignment Specifies the text alignment.\n     * @returns {void}\n     */\n    Editor.prototype.toggleTextAlignment = function (textAlignment) {\n        if ((this.documentHelper.owner.isReadOnlyMode && !this.selection.isInlineFormFillMode()) || !this.documentHelper.owner.isDocumentLoaded) {\n            return;\n        }\n        // Toggle performed based on current selection format similar to MS word behavior.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.selection.paragraphFormat.textAlignment) && this.documentHelper.selection.paragraphFormat.textAlignment === textAlignment) {\n            if (textAlignment === 'Left') {\n                this.onApplyParagraphFormat('textAlignment', 'Justify', false, true);\n            }\n            else {\n                this.onApplyParagraphFormat('textAlignment', 'Left', false, true);\n            }\n        }\n        else {\n            this.onApplyParagraphFormat('textAlignment', textAlignment, false, true);\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.setPreviousBlockToLayout = function () {\n        var startPosition = this.documentHelper.selection.start;\n        if (!this.documentHelper.selection.isForward) {\n            startPosition = this.documentHelper.selection.end;\n        }\n        var startParagraph = startPosition.paragraph;\n        if (startParagraph.paragraphFormat.keepWithNext) {\n            var bodyWidget = startParagraph.bodyWidget;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bodyWidget) && bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget && bodyWidget.page) {\n                var previousPage = bodyWidget.page.previousPage;\n                if (previousPage) {\n                    this.previousBlockToLayout = previousPage.bodyWidgets[0].lastChild;\n                }\n            }\n        }\n    };\n    /**\n     * Apply borders for selected paragraph borders\n     * @private\n     */\n    Editor.prototype.applyParagraphBorders = function (property, bordersType, value) {\n        var borders = new _index__WEBPACK_IMPORTED_MODULE_5__.WBorder();\n        switch (property) {\n            case 'color':\n                borders.color = value;\n                break;\n            case 'lineWidth':\n                borders.lineWidth = value;\n                break;\n            case 'lineStyle':\n                borders.lineStyle = value;\n                break;\n            case 'shadow':\n                borders.shadow = value;\n                break;\n            case 'space':\n                borders.space = value;\n                break;\n        }\n        this.onApplyParagraphFormat(bordersType, borders, false, false);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.applyRulerMarkerValues = function (type, initialValue, finalValue) {\n        var differenceValue = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(finalValue - initialValue) / this.owner.zoomFactor;\n        if (type === 'firstLineIndent') {\n            var currentValue = this.owner.selectionModule.start.paragraph.paragraphFormat.firstLineIndent;\n            this.onApplyParagraphFormat(type, currentValue + differenceValue, false, false);\n        }\n        else if (type === 'hangingIndent') {\n            var currentValue = this.owner.selectionModule.start.paragraph.paragraphFormat.firstLineIndent;\n            this.onApplyParagraphFormat('firstLineIndent', currentValue - differenceValue, false, false);\n            var leftIndentCurrentValue = this.owner.selectionModule.start.paragraph.paragraphFormat.leftIndent + currentValue;\n            currentValue = currentValue - differenceValue;\n            this.onApplyParagraphFormat('leftIndent', leftIndentCurrentValue - currentValue, false, false, true);\n        }\n        else if (type === 'leftIndent') {\n            var currentValue = this.owner.selectionModule.start.paragraph.paragraphFormat.leftIndent;\n            this.onApplyParagraphFormat(type, currentValue + differenceValue, false, false);\n        }\n        else if (type === 'rightIndent') {\n            var currentValue = this.owner.selectionModule.start.paragraph.paragraphFormat.rightIndent;\n            this.onApplyParagraphFormat(type, currentValue + differenceValue, false, false);\n        }\n    };\n    /**\n     * Applies paragraph format for the selection ranges.\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @param {boolean} update - Specifies the update\n     * @param {boolean} isSelectionChanged - Specifies the selection change.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyParagraphFormat = function (property, value, update, isSelectionChanged, isSkipPositionCheck) {\n        var allowFormatting = this.documentHelper.isFormFillProtectedMode\n            && this.documentHelper.selection.isInlineFormFillMode() && this.allowFormattingInFormFields(property);\n        if ((this.restrictFormatting && !allowFormatting) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection) && this.selection.checkContentControlLocked(true))) {\n            return;\n        }\n        this.setPreviousBlockToLayout();\n        var action = property === 'bidi' ? 'ParagraphBidi' : (property[0].toUpperCase() + property.slice(1));\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var selection = this.documentHelper.selection;\n        var currentPara = selection.start.paragraph;\n        var isFirstParaForList = false;\n        if (!selection.isForward) {\n            currentPara = selection.end.paragraph;\n        }\n        if (property == 'leftIndent') {\n            isFirstParaForList = this.isFirstParaForList(selection, currentPara);\n        }\n        // To stop the indentation when the paragraph x position is at the clientArea's x position\n        if (value <= 0 && property == 'leftIndent' && !isSkipPositionCheck) {\n            var x = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(value);\n            if ((currentPara.x + x) < this.viewer.clientArea.x && !currentPara.paragraphFormat.bidi) {\n                this.documentHelper.owner.isShiftingEnabled = false;\n                return;\n            }\n        }\n        this.initHistory(action);\n        if ((this.owner.isReadOnlyMode && !allowFormatting) || !this.owner.isDocumentLoaded) {\n            return;\n        }\n        if (property === 'leftIndent') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.paragraphFormat.listId) && selection.paragraphFormat.listId !== -1 && update) {\n                if (isFirstParaForList) {\n                    this.updateListLevelIndent(value, currentPara);\n                }\n                else {\n                    this.updateListLevel(value > 0);\n                }\n                return;\n            }\n        }\n        var isSkipSelection = !((value instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WCharacterStyle) && property == 'styleName' && selection.isEmpty);\n        if (isSkipSelection && selection.isEmpty) {\n            this.setOffsetValue(selection);\n            var isBidiList = selection.paragraphFormat.bidi &&\n                (property === 'listFormat' || selection.paragraphFormat.listId !== -1);\n            if (!isBidiList) {\n                this.documentHelper.layout.isBidiReLayout = true;\n            }\n            if (update && property === 'leftIndent') {\n                value = this.getIndentIncrementValue(selection.start.paragraph, value);\n            }\n            var para = selection.start.paragraph;\n            var layout = this.documentHelper.layout;\n            // let footNoteWidgetsInfo: FootNoteWidgetsInfo = layout.getFootNodeWidgetsToShiftToPage(para);\n            para = para.combineWidget(this.owner.viewer);\n            this.applyParaFormatProperty(para, property, value, update);\n            this.isMeasureParaWidth = true;\n            this.layoutItemBlock(para, false);\n            this.isMeasureParaWidth = false;\n            // if (footNoteWidgetsInfo.footNoteWidgets.length > 0) {\n            //     layout.moveFootNotesToPage(footNoteWidgetsInfo.footNoteWidgets, footNoteWidgetsInfo.fromBodyWidget, footNoteWidgetsInfo.toBodyWidget);\n            //     layout.layoutfootNote(footNoteWidgetsInfo.toBodyWidget.page.footnoteWidget);\n            // }\n        }\n        else {\n            //Iterate and update formatting's.      \n            if (action !== 'ParagraphBidi') {\n                this.setOffsetValue(selection);\n            }\n            this.updateSelectionParagraphFormatting(property, value, update);\n        }\n        this.reLayout(selection);\n    };\n    /**\n     * Updates the indent value in the ListLevel\n     * @param {Object} value - Specifies the value\n     * @param {ParagraphWidget} currentPara - Specifies the selected paragraph\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListLevelIndent = function (value, currentPara) {\n        var _a;\n        var list = this.documentHelper.getListById(currentPara.paragraphFormat.listFormat.listId);\n        var abstractList = this.documentHelper.getAbstractListById(list.abstractListId);\n        var level;\n        var property = undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            property = this.editorHistory.currentBaseHistoryInfo.action;\n        }\n        this.initHistory('List');\n        if (value < 0) {\n            if ((abstractList.levels[0].paragraphFormat.leftIndent + value) <= 0) {\n                value = 18 - abstractList.levels[0].paragraphFormat.leftIndent;\n            }\n        }\n        if (value == 0) {\n            return;\n        }\n        for (var i = 0; i < abstractList.levels.length; i++) {\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.addModifiedPropertiesForList(abstractList.levels[i]);\n            }\n            level = abstractList.levels[i];\n            level.paragraphFormat.leftIndent += value;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = (_a = {}, _a[property.toString().charAt(0).toLowerCase() + property.toString().slice(1)] = value, _a[\"isFirstParaForList\"] = true, _a);\n        }\n        //To Do, Implement relayouting logic for this listStyle applied paragraphs alone.\n        //And shift remaining elements without layouting again.\n        //It will improve the performance in large size documents.\n        //The same can be reused in style modifications.\n        this.documentHelper.owner.isShiftingEnabled = true;\n        this.layoutWholeDocument();\n        this.documentHelper.owner.isShiftingEnabled = false;\n    };\n    /**\n     * To check the current selection is first paragraph for list\n     * @param {Selection} selection - Specifies the selection\n     * @param {ParagraphWidget} currentPara - Specifies the current paragraph\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.isFirstParaForList = function (selection, currentPara) {\n        var isFirstParaForList = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.paragraphFormat.listId) && selection.paragraphFormat.listId !== -1 && currentPara.paragraphFormat.listFormat.listLevelNumber === 0) {\n            //Getting the previous paragraph with same listId\n            var previousParagraph = this.updateWholeListItems(currentPara, true, selection.paragraphFormat.listId);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph)) {\n                isFirstParaForList = true;\n            }\n        }\n        return isFirstParaForList;\n    };\n    /**\n     * Update the list level\n     *\n     * @param {boolean} increaseLevel - Specifies the increase level\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListLevel = function (increaseLevel) {\n        // Increment or Decrement list level for Multilevel lists.\n        var documentHelper = this.documentHelper;\n        var listFormat = this.documentHelper.selection.start.paragraph.paragraphFormat.listFormat;\n        var paragraphFormat = this.documentHelper.selection.start.paragraph.paragraphFormat;\n        var list = documentHelper.getListById(paragraphFormat.listFormat.listId);\n        var listLevel = documentHelper.layout.getListLevel(list, paragraphFormat.listFormat.listLevelNumber);\n        var levelNumber;\n        if (increaseLevel) {\n            levelNumber = paragraphFormat.listFormat.listLevelNumber + 1;\n        }\n        else {\n            levelNumber = paragraphFormat.listFormat.listLevelNumber - 1;\n        }\n        var nextListLevel = documentHelper.layout.getListLevel(list, levelNumber);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextListLevel)) {\n            this.onApplyListInternal(list, levelNumber);\n            documentHelper.selection.start.updatePhysicalPosition(true);\n            documentHelper.selection.end.updatePhysicalPosition(true);\n            documentHelper.selection.updateCaretPosition();\n        }\n    };\n    /**\n     * Applies list\n     *\n     * @param {WList} list - Specified the list\n     * @param {number} listLevelNumber - Specified the list level number\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyListInternal = function (list, listLevelNumber) {\n        //let selection: Selection = this.documentHelper.selection;\n        var listFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WListFormat();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) && listLevelNumber >= 0 && listLevelNumber < 9) {\n            listFormat.listId = list.listId;\n            listFormat.listLevelNumber = listLevelNumber;\n        }\n        this.onApplyParagraphFormat('listFormat', listFormat, false, false);\n    };\n    /**\n     * Apply paragraph format to selection range\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @param {boolean} update - Specifies the update\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateSelectionParagraphFormatting = function (property, value, update) {\n        var selection = this.documentHelper.selection;\n        if (property === 'leftIndent' && update) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.start) && selection.start.isExistBefore(selection.end)) {\n                value = this.getIndentIncrementValue(selection.start.paragraph, value);\n            }\n            else {\n                value = this.getIndentIncrementValue(selection.end.paragraph, value);\n            }\n        }\n        this.updateParagraphFormatInternal(property, value, update);\n    };\n    Editor.prototype.getIndentIncrementValue = function (currentParagraph, incrementFactor) {\n        var currentParagraphIndent = currentParagraph.paragraphFormat.leftIndent;\n        if (currentParagraphIndent < 0) {\n            // In MS Word, if the current paragraph left indent is lesser that or equal to 0\n            // then performing decrement indent will set left indent to 0. \n            if (incrementFactor < 0 || currentParagraphIndent + incrementFactor >= 0) {\n                return -currentParagraphIndent;\n            }\n            else {\n                var incrementValue = -this.getIndentIncrementValueInternal(-currentParagraphIndent, -incrementFactor);\n                return incrementValue % incrementFactor === 0 ? incrementValue : incrementValue + incrementFactor;\n            }\n        }\n        else {\n            return this.getIndentIncrementValueInternal(currentParagraphIndent, incrementFactor);\n        }\n    };\n    Editor.prototype.getIndentIncrementValueInternal = function (position, incrementFactor) {\n        var tabValue = Math.abs(incrementFactor);\n        if (position === 0 || tabValue === 0) {\n            return incrementFactor > 0 ? tabValue : 0;\n        }\n        else {\n            var diff = ((Math.round(position) * 100) % (Math.round(tabValue) * 100)) / 100;\n            var cnt = (Math.round(position) - diff) / Math.round(tabValue);\n            var fPosition = cnt * tabValue;\n            if (incrementFactor > 0) {\n                fPosition += tabValue;\n            }\n            return (fPosition - position) === 0 ? incrementFactor : fPosition - position;\n        }\n    };\n    Editor.prototype.updateParagraphFormatInternal = function (property, value, update) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n            property = 'ParagraphFormat';\n        }\n        switch (property) {\n            case 'afterSpacing':\n                this.updateParagraphFormat('afterSpacing', value, false);\n                break;\n            case 'beforeSpacing':\n                this.updateParagraphFormat('beforeSpacing', value, false);\n                break;\n            case 'spaceAfterAuto':\n                this.updateParagraphFormat('spaceAfterAuto', value, false);\n                break;\n            case 'spaceBeforeAuto':\n                this.updateParagraphFormat('spaceBeforeAuto', value, false);\n                break;\n            case 'rightIndent':\n                this.updateParagraphFormat('rightIndent', value, false);\n                break;\n            case 'leftIndent':\n                this.updateParagraphFormat('leftIndent', value, update);\n                break;\n            case 'firstLineIndent':\n                this.updateParagraphFormat('firstLineIndent', value, false);\n                break;\n            case 'lineSpacing':\n                this.updateParagraphFormat('lineSpacing', value, false);\n                break;\n            case 'lineSpacingType':\n                this.updateParagraphFormat('lineSpacingType', value, false);\n                break;\n            case 'textAlignment':\n                this.updateParagraphFormat('textAlignment', value, false);\n                break;\n            case 'borders':\n            case 'topBorder':\n            case 'bottomBorder':\n            case 'leftBorder':\n            case 'rightBorder':\n            case 'horizontalBorder':\n            case 'verticalBorder':\n                this.updateParagraphFormat(property, value, false);\n                break;\n            case 'listFormat':\n                this.updateParagraphFormat('listFormat', value, false);\n                break;\n            case 'ParagraphFormat':\n                this.updateParagraphFormat(undefined, value, false);\n                break;\n            case 'styleName':\n                this.updateParagraphFormat('styleName', value, false);\n                break;\n            case 'ClearParagraphFormat':\n                // this.initializeHistory('ClearParagraphFormat', selectionRange);\n                this.updateParagraphFormat(undefined, value, false);\n                break;\n            case 'bidi':\n                var isBidiList = this.selection.paragraphFormat.listId !== -1;\n                if (!isBidiList) {\n                    this.documentHelper.layout.isBidiReLayout = true;\n                }\n                this.updateParagraphFormat('bidi', value, false);\n                if (!isBidiList) {\n                    this.documentHelper.layout.isBidiReLayout = false;\n                }\n                break;\n            case 'contextualSpacing':\n                this.updateParagraphFormat('contextualSpacing', value, false);\n                break;\n            case 'tabStop':\n                this.updateParagraphFormat('tabStop', value, false);\n                break;\n        }\n    };\n    /**\n     * Update paragraph format on undo\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @param {boolean} update - Specifies the update\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateParagraphFormat = function (property, value, update) {\n        var selection = this.documentHelper.selection;\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        // this.updateInsertPosition(selection, startPosition);\n        this.applyParaFormatSelectedContent(startPosition, endPosition, property, value, update);\n        // this.startSelectionReLayouting(startPosition.paragraph, selection, startPosition, endPosition);\n    };\n    Editor.prototype.applyParaFormatSelectedContent = function (start, end, property, value, update) {\n        var selection = this.documentHelper.selection;\n        if (start.paragraph.isInsideTable && (!end.paragraph.isInsideTable\n            || start.paragraph.associatedCell !== end.paragraph.associatedCell\n            || selection.isCellSelected(start.paragraph.associatedCell, start, end))) {\n            var cell = void 0;\n            start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n            if (this.checkInsertPosition(selection)) {\n                this.updateHistoryPosition(start, true);\n            }\n            cell = start.paragraph.associatedCell;\n            this.applyParaFormatInCell(cell, start, end, property, value, update);\n            var table = cell.ownerTable;\n            this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value) && !this.selection.isEmpty && property === 'styleName' && this.applyCharacterStyle(start.paragraph, start, end, property, value, update)) {\n                return;\n            }\n            else {\n                this.applyParaFormat(start.paragraph, start, end, property, value, update);\n            }\n        }\n    };\n    /**\n     * Apply Paragraph format\n     *\n     * @param {ParagraphWidget} paragraph - Specifies the selection\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @param {boolean} update - Specifies the update\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyParaFormatProperty = function (paragraph, property, value, update) {\n        var format = paragraph.paragraphFormat;\n        if (update && property === 'leftIndent') {\n            value = format.leftIndent + value;\n        }\n        if (property === 'listFormat' && value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WListFormat) {\n            var listFormat = value;\n            if (!listFormat.hasValue('listLevelNumber')) {\n                if (this.isAutoList) {\n                    listFormat.listLevelNumber = this.listLevelNumber;\n                    // reset the list level number to 0.\n                    this.listLevelNumber = 0;\n                    this.isAutoList = false;\n                }\n                else {\n                    listFormat.listLevelNumber = format.listFormat.listLevelNumber;\n                }\n            }\n        }\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedPropertiesForParagraphFormat(format, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n                if (this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                    this.copyParagraphFormat(value, format);\n                }\n                else if (this.isRemoteAction) {\n                    this.copyParagraphFormat(value, format);\n                }\n                else {\n                    format.copyFormat(value);\n                }\n            }\n            else if (property === 'listFormat') {\n                format.listFormat = value.listFormat;\n                format.listFormat.ownerBase = format;\n                format.copyFormat(value);\n                // this.handleListFormat(format, value as WParagraphFormat);\n            }\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                if (this.owner.enableCollaborativeEditing && this.editorHistory.isUndoing) {\n                    this.editorHistory.currentBaseHistoryInfo.getParagraohFormatOperation(paragraph, format);\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n            format.clearFormat();\n            this.documentHelper.layout.reLayoutParagraph(format.ownerBase, 0, 0);\n            return;\n        }\n        if (property === 'afterSpacing') {\n            format.afterSpacing = value;\n        }\n        else if (property === 'beforeSpacing') {\n            format.beforeSpacing = value;\n        }\n        else if (property === 'leftIndent') {\n            format.leftIndent = value;\n        }\n        else if (property === 'lineSpacingType') {\n            format.lineSpacingType = value;\n        }\n        else if (property === 'lineSpacing') {\n            format.lineSpacing = value;\n        }\n        else if (property === 'rightIndent') {\n            format.rightIndent = value;\n        }\n        else if (property === 'firstLineIndent') {\n            format.firstLineIndent = value;\n        }\n        else if (property === 'textAlignment') {\n            var textAlignment = value;\n            if (format.bidi && !(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                if (textAlignment === 'Left') {\n                    textAlignment = 'Right';\n                }\n                else if (textAlignment === 'Right') {\n                    textAlignment = 'Left';\n                }\n            }\n            format.textAlignment = textAlignment;\n            //this.documentHelper.layout.allowLayout = false;\n        }\n        else if (property === 'outlineLevel') {\n            format.outlineLevel = value;\n        }\n        else if (property === 'topBorder') {\n            this.applyBorder(format.borders.top, value);\n        }\n        else if (property === 'bottomBorder') {\n            this.applyBorder(format.borders.bottom, value);\n        }\n        else if (property === 'leftBorder') {\n            this.applyBorder(format.borders.left, value);\n        }\n        else if (property === 'rightBorder') {\n            this.applyBorder(format.borders.right, value);\n        }\n        else if (property === 'horizontalBorder') {\n            this.applyBorder(format.borders.horizontal, value);\n        }\n        else if (property === 'verticalBorder') {\n            this.applyBorder(format.borders.vertical, value);\n        }\n        else if (property === 'borders') {\n            format.borders.copyFormat(value);\n        }\n        else if (property === 'styleName') {\n            if (typeof (value) === 'string') {\n                value = this.documentHelper.styles.findByName(value);\n            }\n            format.applyStyle(value);\n        }\n        else if (property === 'listFormat') {\n            if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat) {\n                value = value.listFormat;\n            }\n            format.listFormat.copyFormat(value);\n            this.documentHelper.layout.clearListElementBox(format.ownerBase);\n            if (format.listFormat.listId >= 0) {\n                format.clearIndent();\n            }\n            this.layoutItemBlock(format.ownerBase, false);\n            return;\n        }\n        else if (property === 'bidi') {\n            format.bidi = value;\n        }\n        else if (property === 'keepWithNext') {\n            format.keepWithNext = value;\n        }\n        else if (property === 'keepLinesTogether') {\n            format.keepLinesTogether = value;\n        }\n        else if (property === 'widowControl') {\n            format.widowControl = value;\n        }\n        else if (property === 'contextualSpacing') {\n            format.contextualSpacing = value;\n        }\n        else if (property === 'spaceAfterAuto') {\n            format.spaceAfterAuto = value;\n        }\n        else if (property === 'spaceBeforeAuto') {\n            format.spaceBeforeAuto = value;\n        }\n        else if (property === 'tabStop') {\n            var isReplace = this.editorHistory.isUndoing || this.editorHistory.isRedoing;\n            this.updateTabStopCollection(paragraph, value, isReplace);\n        }\n    };\n    Editor.prototype.copyParagraphFormat = function (sourceFormat, destFormat) {\n        destFormat.uniqueParagraphFormat = sourceFormat.uniqueParagraphFormat;\n        destFormat.listFormat = sourceFormat.listFormat;\n        destFormat.listFormat.ownerBase = destFormat;\n        destFormat.baseStyle = sourceFormat.baseStyle;\n        //destFormat.borders = sourceFormat.borders;\n    };\n    /**\n     * Copies list level paragraph format\n     *\n     * @param {WParagraphFormat} oldFormat - Specifies the old format\n     * @param {WParagraphFormat} newFormat - Specifies the new format\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.copyFromListLevelParagraphFormat = function (oldFormat, newFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newFormat.leftIndent)) {\n            oldFormat.leftIndent = newFormat.leftIndent;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newFormat.firstLineIndent)) {\n            oldFormat.firstLineIndent = newFormat.firstLineIndent;\n        }\n    };\n    /**\n     * Applies the continue numbering from the previous list.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.applyContinueNumbering = function () {\n        var selection = this.selection;\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('ContinueNumbering');\n        }\n        this.applyContinueNumberingInternal(selection);\n    };\n    /**\n     * Continues the numbering sequence of the current list from the selected paragraph.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.continueNumbering = function () {\n        var selection = this.selection;\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('ContinueNumbering');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection)) {\n            this.applyContinueNumberingInternal(selection);\n        }\n    };\n    /**\n     * @private\n     * @param selection\n     * @param paraFormat\n     */\n    Editor.prototype.applyContinueNumberingInternal = function (selection, paraFormat) {\n        var paragraph = selection.start.paragraph;\n        var numberingInfo = this.getContinueNumberingInfo(paragraph);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraFormat)) {\n            paraFormat = this.getParagraphFormat(paragraph, numberingInfo.listLevelNumber, numberingInfo.listPattern);\n        }\n        paraFormat = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraFormat) ? paraFormat : paragraph.paragraphFormat;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(numberingInfo.currentList)) {\n            this.changeListId(numberingInfo.currentList, paragraph, paraFormat, numberingInfo.listLevelNumber, numberingInfo.listPattern);\n            this.reLayout(selection, false);\n            if (this.owner.enableAutoFocus) {\n                this.documentHelper.updateFocus();\n            }\n        }\n    };\n    Editor.prototype.getContinueNumberingInfo = function (paragraph) {\n        var currentList = undefined;\n        var listLevelNumber = 0;\n        var listPattern = 'None';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat)\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat.listFormat)) {\n            currentList = this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId);\n            listLevelNumber = paragraph.paragraphFormat.listFormat.listLevelNumber;\n        }\n        var documentHelper = this.documentHelper;\n        if (listLevelNumber !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentList) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(documentHelper.getAbstractListById(currentList.abstractListId))\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(documentHelper.getAbstractListById(currentList.abstractListId).levels[listLevelNumber])) {\n            var listLevel = this.documentHelper.layout.getListLevel(currentList, listLevelNumber);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel)) {\n                listPattern = listLevel.listLevelPattern;\n            }\n        }\n        return {\n            currentList: currentList,\n            listLevelNumber: listLevelNumber,\n            listPattern: listPattern\n        };\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.revertContinueNumbering = function (selection, format) {\n        var paragraph = selection.start.paragraph;\n        var numberingInfo = this.getContinueNumberingInfo(paragraph);\n        this.changeListId(numberingInfo.currentList, paragraph, format, numberingInfo.listLevelNumber, numberingInfo.listPattern);\n        this.reLayout(selection, false);\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            this.editorHistory.updateHistory();\n        }\n    };\n    Editor.prototype.changeListId = function (list, block, format, levelNum, listType) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n            return;\n        }\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            if (list.listId === block.paragraphFormat.listFormat.listId) {\n                if (this.editorHistory) {\n                    var baseHistoryInfo = this.editorHistory.currentBaseHistoryInfo;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(baseHistoryInfo)) {\n                        format = baseHistoryInfo.addModifiedPropertiesForContinueNumbering(block.paragraphFormat, format);\n                        baseHistoryInfo.insertedFormat = format;\n                    }\n                }\n                if (levelNum === block.paragraphFormat.listFormat.listLevelNumber) {\n                    block.paragraphFormat.copyFormat(format);\n                }\n                else {\n                    block.paragraphFormat.listFormat.listId = format.listFormat.listId;\n                }\n                this.documentHelper.layout.reLayoutParagraph(block, 0, 0);\n            }\n        }\n        return this.changeListId(list, block.nextRenderedWidget, format, levelNum, listType);\n    };\n    Editor.prototype.getParagraphFormat = function (paragraph, levelNumber, listType) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.previousRenderedWidget)) {\n            if (paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.previousRenderedWidget.paragraphFormat.listFormat)\n                    && paragraph.previousRenderedWidget.paragraphFormat.listFormat.listId !== -1) {\n                    // let listLevel: WListLevel = this.selection.getListLevel(paragraph.previousRenderedWidget);\n                    if (levelNumber === paragraph.previousRenderedWidget.paragraphFormat.listFormat.listLevelNumber) {\n                        return paragraph.previousRenderedWidget.paragraphFormat;\n                    }\n                    else {\n                        return this.getParagraphFormat(paragraph.previousRenderedWidget, levelNumber, listType);\n                    }\n                }\n                else {\n                    return this.getParagraphFormat(paragraph.previousRenderedWidget, levelNumber, listType);\n                }\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.checkNumberArabic = function (listType, levelPattern) {\n        if ((listType === 'Number' && levelPattern === 'Arabic')\n            || (levelPattern === 'Number' && listType === 'Arabic')) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Restarts the numbering of the current list from the selected paragraph.\n     */\n    Editor.prototype.restartNumbering = function () {\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('RestartNumbering');\n        }\n        var selection = this.documentHelper.selection;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection)) {\n            this.restartListAt(selection);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyRestartNumbering = function (selection) {\n        if (this.editorHistory) {\n            this.editorHistory.initializeHistory('RestartNumbering');\n        }\n        this.restartListAt(selection);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.restartListAt = function (selection) {\n        if (selection.paragraphFormat.getList()) {\n            var currentList = selection.paragraphFormat.getList();\n            var list = currentList.clone();\n            list.listId = this.documentHelper.lists[(this.documentHelper.lists.length - 1)].listId + 1;\n            //let nsid: number = HelperMethods.generateUniqueId(this.documentHelper.lists);\n            this.documentHelper.lists.push(list);\n            var abstractList = currentList.abstractList.clone();\n            abstractList.abstractListId = this.documentHelper.abstractLists[(this.documentHelper.abstractLists.length - 1)].abstractListId + 1;\n            list.abstractListId = abstractList.abstractListId;\n            list.nsid = abstractList.nsid;\n            list.abstractList = abstractList;\n            this.documentHelper.abstractLists.push(abstractList);\n            this.restartListAtInternal(selection, list.listId, list.nsid);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.restartListAtInternal = function (selection, listId, nsid) {\n        var numberingInfo = this.getContinueNumberingInfo(selection.start.paragraph);\n        this.changeRestartNumbering(numberingInfo.currentList, selection.start.paragraph, listId, nsid);\n        this.reLayout(selection, false);\n        this.documentHelper.updateFocus();\n    };\n    Editor.prototype.changeRestartNumbering = function (list, block, listId, nsid) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n            return;\n        }\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            if (list.listId === block.paragraphFormat.listFormat.listId) {\n                if (this.editorHistory) {\n                    var baseHistoryInfo = this.editorHistory.currentBaseHistoryInfo;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(baseHistoryInfo)) {\n                        listId = baseHistoryInfo.addModifiedPropertiesForRestartNumbering(block.paragraphFormat.listFormat, listId);\n                        baseHistoryInfo.insertedFormat = {\n                            listId: listId,\n                            nsid: nsid\n                        };\n                    }\n                }\n                block.paragraphFormat.listFormat.listId = listId;\n                this.documentHelper.layout.reLayoutParagraph(block, 0, 0);\n            }\n        }\n        return this.changeRestartNumbering(list, block.nextRenderedWidget, listId, nsid);\n    };\n    Editor.prototype.applyParaFormat = function (paragraph, start, end, property, value, update) {\n        this.setOffsetValue(this.selection);\n        paragraph = paragraph.combineWidget(this.owner.viewer);\n        //Apply Paragraph Format for spitted paragraph\n        this.applyParaFormatProperty(paragraph, property, value, update);\n        this.isMeasureParaWidth = true;\n        this.layoutItemBlock(paragraph, false);\n        this.isMeasureParaWidth = false;\n        this.getOffsetValue(this.selection);\n        if (paragraph.equals(end.paragraph)) {\n            return;\n        }\n        this.getNextParagraphForFormatting(paragraph, start, end, property, value, update);\n    };\n    Editor.prototype.applyCharacterStyle = function (paragraph, start, end, property, value, update) {\n        var paragraphWidget = paragraph.getSplitWidgets();\n        var selection = end.owner.selectionModule;\n        var lastLine = end.currentWidget;\n        var isParaSelected = start.offset === 0 && (selection.isParagraphLastLine(lastLine) && end.currentWidget === lastLine\n            && end.offset === selection.getLineLength(lastLine) + 1 || end.isAtParagraphEnd);\n        if (!isParaSelected && (end.paragraph === paragraph || paragraphWidget.indexOf(end.paragraph) !== -1)) {\n            if (((value.type === 'Paragraph') && ((value.link) instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WCharacterStyle)) || (value.type === 'Character')) {\n                var obj = (value.type === 'Character') ? value : value.link;\n                this.updateSelectionCharacterFormatting(property, obj, update);\n                return true;\n            }\n        }\n        return false;\n    };\n    // Cell\n    Editor.prototype.applyParaFormatInCell = function (cell, start, end, property, value, update) {\n        var selection = this.documentHelper.selection;\n        if (end.paragraph.isInsideTable) {\n            var cellContainer = selection.getContainerCellOf(cell, end.paragraph.associatedCell);\n            if (cellContainer.ownerTable.contains(end.paragraph.associatedCell)) {\n                var startCell = selection.getSelectedCell(cell, cellContainer);\n                var endCell = selection.getSelectedCell(end.paragraph.associatedCell, cellContainer);\n                if (selection.containsCell(cellContainer, end.paragraph.associatedCell)) {\n                    //Selection end is in container cell.\n                    if (selection.isCellSelected(cellContainer, start, end)) {\n                        value = this.getParaFormatValueInCell(cellContainer, property, value);\n                        this.applyParaFormatCellInternal(cellContainer, property, value, update);\n                    }\n                    else {\n                        if (startCell === cellContainer) {\n                            this.applyParaFormat(start.paragraph, start, end, property, value, update);\n                        }\n                        else {\n                            this.applyParagraphFormatRow(startCell.ownerRow, start, end, property, value, update);\n                        }\n                    }\n                }\n                else {\n                    //Format other selected cells in current table.\n                    this.applyParaFormatTableCell(cellContainer.ownerTable, cellContainer, endCell, property, value, update);\n                }\n            }\n            else {\n                this.applyParagraphFormatRow(cellContainer.ownerRow, start, end, property, value, update);\n            }\n        }\n        else {\n            var wCell = selection.getContainerCell(cell);\n            this.applyParagraphFormatRow(wCell.ownerRow, start, end, property, value, update);\n        }\n    };\n    Editor.prototype.applyParaFormatCellInternal = function (cell, property, value, update, isNext) {\n        for (var i = 0; i < cell.childWidgets.length; i++) {\n            var block = cell.childWidgets[i];\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                if (property === 'listFormat' && value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WListFormat && isNext && block.paragraphFormat.listFormat.hasValue(\"listLevelNumber\") && value[\"listLevelNumber\"] < block.paragraphFormat.listFormat.listLevelNumber) {\n                    value[\"listLevelNumber\"] = block.paragraphFormat.listFormat.listLevelNumber;\n                }\n                this.isMeasureParaWidth = true;\n                this.applyParaFormatProperty(block, property, value, update);\n                this.isMeasureParaWidth = false;\n            }\n            else {\n                this.applyParagraphFormatTableInternal(block, property, value, update, isNext);\n            }\n        }\n    };\n    Editor.prototype.getParaFormatValueInCell = function (cell, property, value) {\n        if (typeof value === 'boolean') {\n            var firstPara = this.documentHelper.selection.getFirstParagraph(cell);\n            value = !firstPara.paragraphFormat.getPropertyValue(property);\n        }\n        return value;\n    };\n    // Row\n    Editor.prototype.applyParagraphFormatRow = function (wRow, start, end, property, value, update) {\n        value = this.getParaFormatValueInCell(wRow.childWidgets[0], property, value);\n        for (var i = wRow.rowIndex; i < wRow.ownerTable.childWidgets.length; i++) {\n            var row = wRow.ownerTable.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                this.applyParaFormatCellInternal(row.childWidgets[j], property, value, update);\n            }\n            if (end.paragraph.isInsideTable && this.documentHelper.selection.containsRow(row, end.paragraph.associatedCell)) {\n                return;\n            }\n        }\n        this.getNextParagraphForFormatting(wRow.ownerTable, start, end, property, value, update);\n    };\n    // Table\n    Editor.prototype.applyParaFormatTableCell = function (table, startCell, endCell, property, value, update) {\n        var selection = this.documentHelper.selection;\n        var startValue = selection.getCellLeft(startCell.ownerRow, startCell);\n        var endValue = startValue + startCell.cellFormat.cellWidth;\n        var endCellLeft = selection.getCellLeft(endCell.ownerRow, endCell);\n        var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(startValue, endValue, endCellLeft, endCellRight);\n        startValue = cellInfo.start;\n        endValue = cellInfo.end;\n        var count = table.childWidgets.indexOf(endCell.ownerRow);\n        var isStarted = false;\n        for (var m = table.childWidgets.indexOf(startCell.ownerRow); m <= count; m++) {\n            var row = table.childWidgets[m];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var left = selection.getCellLeft(row, row.childWidgets[j]);\n                if (Math.round(startValue) <= Math.round(left) && Math.round(left) < Math.round(endValue)) {\n                    if (!isStarted) {\n                        value = this.getParaFormatValueInCell(row.childWidgets[j], property, value);\n                        isStarted = true;\n                    }\n                    this.applyParaFormatCellInternal(row.childWidgets[j], property, value, update);\n                }\n            }\n        }\n    };\n    Editor.prototype.applyParaFormatTable = function (table, start, end, property, value, update, isNext) {\n        table = table.combineWidget(this.owner.viewer);\n        var selection = this.documentHelper.selection;\n        for (var m = 0; m < table.childWidgets.length; m++) {\n            var tableRow = table.childWidgets[m];\n            for (var k = 0; k < tableRow.childWidgets.length; k++) {\n                this.applyParaFormatCellInternal(tableRow.childWidgets[k], property, value, update, isNext);\n            }\n            if (end.paragraph.isInsideTable && selection.containsRow(tableRow, end.paragraph.associatedCell)) {\n                this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n                return;\n            }\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        this.getNextParagraphForFormatting(table, start, end, property, value, update);\n    };\n    Editor.prototype.getNextParagraphForFormatting = function (block, start, end, property, value, update) {\n        var widgetCollection = block.getSplitWidgets();\n        block = widgetCollection[widgetCollection.length - 1];\n        block = this.documentHelper.selection.getNextRenderedBlock(block);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) { //Goto the next block.\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                if (property === 'listFormat' && value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WListFormat && block.paragraphFormat.listFormat.hasValue(\"listLevelNumber\") && value[\"listLevelNumber\"] < block.paragraphFormat.listFormat.listLevelNumber) {\n                    value[\"listLevelNumber\"] = block.paragraphFormat.listFormat.listLevelNumber;\n                }\n                this.applyParaFormat(block, start, end, property, value, update);\n            }\n            else {\n                this.applyParaFormatTable(block, start, end, property, value, update, true);\n            }\n        }\n    };\n    Editor.prototype.applyParagraphFormatTableInternal = function (table, property, value, update, isNext) {\n        for (var x = 0; x < table.childWidgets.length; x++) {\n            var row = table.childWidgets[x];\n            for (var y = 0; y < row.childWidgets.length; y++) {\n                this.applyParaFormatCellInternal(row.childWidgets[y], property, value, update, isNext);\n            }\n        }\n    };\n    /**\n     * Apply column format changes\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyColumnFormat = function (property, value) {\n        if (this.restrictFormatting) {\n            return;\n        }\n        this.initHistory('SectionFormat');\n        var selection = this.documentHelper.selection;\n        selection.owner.isShiftingEnabled = true;\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        var startPageIndex;\n        var endPageIndex;\n        this.documentHelper.clearContent();\n        var startSectionIndex = startPosition.paragraph.bodyWidget.sectionIndex;\n        var endSectionIndex = endPosition.paragraph.bodyWidget.sectionIndex;\n        var isMultipleSection = false;\n        for (var i = 0; i < this.documentHelper.pages.length; i++) {\n            if (this.documentHelper.pages[i].bodyWidgets[0].index === startSectionIndex) {\n                startPageIndex = i;\n            }\n            else {\n                isMultipleSection = true;\n            }\n        }\n        for (var i = startPageIndex; i < this.documentHelper.pages.length; i++) {\n            var bodyWidget = this.documentHelper.pages[i].bodyWidgets[0];\n            endPageIndex = i;\n            if ((bodyWidget.index === startSectionIndex)) {\n                continue;\n            }\n            else if ((bodyWidget.index >= startSectionIndex) && bodyWidget.index <= endSectionIndex) {\n                continue;\n            }\n            else {\n                endPageIndex = i - 1;\n                break;\n            }\n        }\n        if (isMultipleSection && property == \"differentOddAndEvenPages\" && startPosition.paragraph.isInHeaderFooter) {\n            startPageIndex = 0;\n            endPageIndex = this.documentHelper.pages.length - 1;\n        }\n        // let startPageIndex: number = this.documentHelper.pages.indexOf((selection.start.paragraph.containerWidget as BodyWidget).page);\n        // let endPageIndex: number = this.documentHelper.pages.indexOf((selection.end.paragraph.containerWidget as BodyWidget).page);\n        var update = true;\n        var index = 0;\n        for (var i = startPageIndex; i <= endPageIndex; i++) {\n            if (index !== this.documentHelper.pages[i].bodyWidgets[0].index && !update) {\n                update = true;\n            }\n            this.applyPropertyValueForSection(this.documentHelper.pages[i].bodyWidgets[0].sectionFormat, property, value, update);\n            index = this.documentHelper.pages[i].bodyWidgets[0].index;\n            update = false;\n        }\n        this.layoutWholeDocument();\n        this.fireContentChange();\n    };\n    //Paragraph Format apply implementation Ends\n    // Apply Selection Section Format Option Implementation Starts\n    /**\n     * Apply section format selection changes\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplySectionFormat = function (property, value) {\n        if (this.restrictFormatting) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n            var action = (property[0].toUpperCase() + property.slice(1));\n            this.initHistory(action);\n        }\n        else {\n            this.initHistory('SectionFormat');\n        }\n        this.updateSectionFormat(property, value);\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeInlineHeaderFooterWidget = function (sectionIndex, headerFooterType, propertyName, value) {\n        if (sectionIndex != 0) {\n            var headerFooters = this.documentHelper.headersFooters[sectionIndex];\n            var index = this.viewer.getHeaderFooter(headerFooterType);\n            var sectionFormat = this.selection.start.paragraph.containerWidget.sectionFormat.cloneFormat();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(propertyName)) {\n                    var action = (propertyName[0].toUpperCase() + propertyName.slice(1));\n                    this.initHistory(action);\n                    if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n                    }\n                    var blockInfo = this.selection.getParagraphInfo(this.selection.start);\n                    this.selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n                    if (this.checkInsertPosition(this.selection)) {\n                        this.setPositionForHistory(this.selection.editPosition);\n                    }\n                }\n                if (value) {\n                    if (headerFooters && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooters[index])) {\n                        sectionFormat.removedHeaderFooters.push(headerFooters[index]);\n                        this.editorHistory.currentBaseHistoryInfo.addModifiedPropertiesForSection(sectionFormat, propertyName, value);\n                        delete headerFooters[index];\n                    }\n                }\n                else {\n                    var parentHeaderFooter = this.viewer.getCurrentHeaderFooter(headerFooterType, sectionIndex);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(parentHeaderFooter) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooters[index])) {\n                        var HeaderFooterWidget_1 = parentHeaderFooter.clone();\n                        headerFooters[index] = HeaderFooterWidget_1;\n                        sectionFormat.removedHeaderFooters.push(HeaderFooterWidget_1);\n                        this.editorHistory.currentBaseHistoryInfo.addModifiedPropertiesForSection(sectionFormat, propertyName, value);\n                    }\n                }\n                this.selection.updateTextPositionForBlockContainer(this.selection.start.paragraph.containerWidget);\n                this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n                this.layoutWholeDocument();\n                this.isSkipOperationsBuild = false;\n                this.fireContentChange();\n            }\n        }\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateHeaderFooters = function (propertyName, value, sectionIndex, widget) {\n        var headerFooters = this.documentHelper.headersFooters[sectionIndex];\n        var index = this.viewer.getHeaderFooter(widget.headerFooterType);\n        var headerFooter = headerFooters[index];\n        if (this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooter)) {\n                this.documentHelper.headersFooters[sectionIndex][index] = widget;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooter)) {\n                delete headerFooters[index];\n            }\n        }\n        this.selection.updateTextPositionForBlockContainer(this.selection.start.paragraph.containerWidget);\n        this.layoutWholeDocument();\n    };\n    /**\n     * Update section format\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateSectionFormat = function (property, value) {\n        if (this.documentHelper.selection.startPage === 1 && property === \"differentFirstPage\") {\n            var paraInfo = void 0;\n            if (this.documentHelper.selection.start.paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                paraInfo = this.getFirstChildOfTable(this.documentHelper.selection.start.paragraph.containerWidget);\n            }\n            else {\n                paraInfo = this.documentHelper.selection.start.paragraph.containerWidget.childWidgets[0];\n            }\n            var startIndex = this.selection.getHierarchicalIndex(paraInfo, \"0\");\n            this.documentHelper.selection.select(startIndex, startIndex);\n        }\n        var selection = this.documentHelper.selection;\n        selection.owner.isShiftingEnabled = true;\n        var startPosition = selection.start;\n        var endPosition = selection.end;\n        if (!selection.isForward) {\n            startPosition = selection.end;\n            endPosition = selection.start;\n        }\n        var startPageIndex;\n        var endPageIndex;\n        this.documentHelper.clearContent();\n        var startSectionIndex = startPosition.paragraph.bodyWidget.sectionIndex;\n        var endSectionIndex = endPosition.paragraph.bodyWidget.sectionIndex;\n        var isMultipleSection = false;\n        var isSkip = false;\n        for (var i = 0; i < this.documentHelper.pages.length; i++) {\n            for (var j = 0; j < this.documentHelper.pages[i].bodyWidgets.length; j++) {\n                if (this.documentHelper.pages[i].bodyWidgets[j].index === startSectionIndex) {\n                    startPageIndex = i;\n                    if (selection.isForward) {\n                        isSkip = true;\n                        break;\n                    }\n                }\n                else {\n                    isMultipleSection = true;\n                }\n            }\n            if (isSkip) {\n                break;\n            }\n        }\n        for (var i = startPageIndex; i < this.documentHelper.pages.length; i++) {\n            for (var j = 0; j < this.documentHelper.pages[i].bodyWidgets.length; j++) {\n                var bodyWidget = this.documentHelper.pages[i].bodyWidgets[j];\n                if ((bodyWidget.index === startSectionIndex)) {\n                    endPageIndex = i;\n                    continue;\n                }\n                else if ((bodyWidget.index >= startSectionIndex) && bodyWidget.index <= endSectionIndex) {\n                    endPageIndex = i;\n                    continue;\n                }\n            }\n        }\n        if (isMultipleSection && property == \"differentOddAndEvenPages\" && startPosition.paragraph.isInHeaderFooter) {\n            startPageIndex = 0;\n            endPageIndex = this.documentHelper.pages.length - 1;\n        }\n        // let startPageIndex: number = this.documentHelper.pages.indexOf((selection.start.paragraph.containerWidget as BodyWidget).page);\n        // let endPageIndex: number = this.documentHelper.pages.indexOf((selection.end.paragraph.containerWidget as BodyWidget).page);\n        var update = true;\n        var index = 0;\n        for (var i = startPageIndex; i <= endPageIndex; i++) {\n            for (var j = 0; j < this.documentHelper.pages[i].bodyWidgets.length; j++) {\n                if ((this.documentHelper.pages[i].bodyWidgets[j].index >= startSectionIndex && this.documentHelper.pages[i].bodyWidgets[j].index <= endSectionIndex) ||\n                    (!selection.isForward && this.documentHelper.pages[i].bodyWidgets[j].index <= startSectionIndex && this.documentHelper.pages[i].bodyWidgets[j].index >= endSectionIndex)) {\n                    if (index !== this.documentHelper.pages[i].bodyWidgets[j].index && !update) {\n                        update = true;\n                    }\n                    this.applyPropertyValueForSection(this.documentHelper.pages[i].bodyWidgets[j].sectionFormat, property, value, update);\n                    index = this.documentHelper.pages[i].bodyWidgets[j].index;\n                    update = false;\n                    var body = this.documentHelper.pages[i].bodyWidgets[j];\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(body.nextWidget) && (body.sectionFormat.pageHeight !== body.nextWidget.sectionFormat.pageHeight || body.sectionFormat.pageWidth !== body.nextWidget.sectionFormat.pageWidth) && body.nextWidget.sectionFormat.breakCode === 'NoBreak') {\n                        body.nextWidget.sectionFormat.breakCode = 'NewPage';\n                        body = this.documentHelper.layout.getBodyWidget(body.nextWidget, false);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(body.nextWidget)) {\n                            body.nextWidget.sectionFormat.breakCode = 'NewPage';\n                        }\n                    }\n                }\n            }\n        }\n        this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.layoutWholeDocument();\n        this.isSkipOperationsBuild = false;\n        this.fireContentChange();\n    };\n    Editor.prototype.getFirstChildOfTable = function (cellWidget) {\n        var ownerTable = cellWidget.ownerTable;\n        return ownerTable.childWidgets[0].childWidgets[0].childWidgets[0];\n    };\n    //Apply Selection Table Format option implementation starts\n    /**\n     * Apply table format property changes\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyTableFormat = function (property, value, table) {\n        if (this.restrictFormatting) {\n            return;\n        }\n        var action = this.getTableFormatAction(property);\n        this.viewer.owner.isShiftingEnabled = true;\n        var selection = this.documentHelper.selection;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table)) {\n            table = selection.start.paragraph.associatedCell.ownerTable;\n        }\n        table = table.combineWidget(this.owner.viewer);\n        if (selection.isEmpty) {\n            this.initHistory(action);\n            this.applyTablePropertyValue(property, value, table);\n        }\n        else {\n            this.updateSelectionTableFormat(this.selection, action, value);\n        }\n        table.calculateGrid();\n        this.selection.owner.isLayoutEnabled = true;\n        this.documentHelper.layout.reLayoutTable(table);\n        this.reLayout(selection, false);\n    };\n    Editor.prototype.getTableFormatAction = function (property) {\n        switch (property) {\n            case 'tableAlignment':\n                return 'TableAlignment';\n            case 'leftIndent':\n                return 'TableLeftIndent';\n            case 'leftMargin':\n                return 'DefaultCellLeftMargin';\n            case 'rightMargin':\n                return 'DefaultCellRightMargin';\n            case 'bottomMargin':\n                return 'DefaultCellBottomMargin';\n            case 'topMargin':\n                return 'DefaultCellTopMargin';\n            case 'preferredWidth':\n                return 'TablePreferredWidth';\n            case 'preferredWidthType':\n                return 'TablePreferredWidthType';\n            case 'shading':\n                return 'Shading';\n            case 'bidi':\n                return 'TableBidi';\n            case 'title':\n                return 'TableTitle';\n            case 'description':\n                return 'TableDescription';\n            default:\n                return 'DefaultCellSpacing';\n        }\n    };\n    // Apply Selection Row Format Option Implementation Starts\n    /**\n     * Apply table row format property changes\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyTableRowFormat = function (property, value) {\n        if (this.restrictFormatting) {\n            return;\n        }\n        var action = this.getRowAction(property);\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var selection = this.documentHelper.selection;\n        if (selection.isEmpty) {\n            this.initHistory(action);\n            var table = selection.start.paragraph.associatedCell.ownerRow.ownerTable;\n            this.applyRowPropertyValue(selection, property, value, selection.start.paragraph.associatedCell.ownerRow);\n        }\n        else {\n            this.updateSelectionTableFormat(this.selection, action, value);\n        }\n        this.reLayout(selection, false);\n    };\n    Editor.prototype.getRowAction = function (property) {\n        switch (property) {\n            case 'height':\n                return 'RowHeight';\n            case 'heightType':\n                return 'RowHeightType';\n            case 'isHeader':\n                return 'RowHeader';\n            default:\n                return 'AllowBreakAcrossPages';\n        }\n    };\n    /**\n     * Apply table cell property changes\n     *\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyTableCellFormat = function (property, value) {\n        if (this.restrictFormatting) {\n            return;\n        }\n        var action = this.getTableCellAction(property);\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var selection = this.documentHelper.selection;\n        var table = selection.start.paragraph.associatedCell.ownerTable;\n        table = table.combineWidget(this.owner.viewer);\n        if (selection.isEmpty) {\n            this.initHistory(action);\n            this.applyCellPropertyValue(selection, property, value, selection.start.paragraph.associatedCell.cellFormat);\n            table.calculateGrid();\n            this.selection.owner.isLayoutEnabled = true;\n            this.documentHelper.layout.reLayoutTable(table);\n        }\n        else {\n            this.updateSelectionTableFormat(this.selection, action, value);\n        }\n        this.reLayout(selection, false);\n    };\n    Editor.prototype.getTableCellAction = function (property) {\n        switch (property) {\n            case 'verticalAlignment':\n                return 'CellContentVerticalAlignment';\n            case 'leftMargin':\n                return 'CellLeftMargin';\n            case 'rightMargin':\n                return 'CellRightMargin';\n            case 'bottomMargin':\n                return 'CellBottomMargin';\n            case 'topMargin':\n                return 'CellTopMargin';\n            case 'preferredWidth':\n                return 'CellPreferredWidth';\n            case 'shading':\n                return 'Shading';\n            default:\n                return 'CellPreferredWidthType';\n        }\n    };\n    Editor.prototype.applyPropertyValueForSection = function (sectionFormat, property, value, update) {\n        //let selection: Selection = this.documentHelper.selection;\n        if (update && this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            if (property === 'columns') {\n                sectionFormat.numberOfColumns = value.length;\n            }\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedPropertiesForSection(sectionFormat, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value)) {\n            return;\n        }\n        if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n                sectionFormat.copyFormat(value, this.editorHistory);\n            }\n            return;\n        }\n        if (property === 'pageHeight') {\n            sectionFormat.pageHeight = value;\n        }\n        else if (property === 'pageWidth') {\n            sectionFormat.pageWidth = value;\n        }\n        else if (property === 'leftMargin') {\n            sectionFormat.leftMargin = value;\n        }\n        else if (property === 'rightMargin') {\n            sectionFormat.rightMargin = value;\n        }\n        else if (property === 'topMargin') {\n            sectionFormat.topMargin = value;\n        }\n        else if (property === 'bottomMargin') {\n            sectionFormat.bottomMargin = value;\n        }\n        else if (property === 'differentFirstPage') {\n            sectionFormat.differentFirstPage = value;\n        }\n        else if (property === 'differentOddAndEvenPages') {\n            sectionFormat.differentOddAndEvenPages = value;\n        }\n        else if (property === 'headerDistance') {\n            sectionFormat.headerDistance = value;\n        }\n        else if (property === 'footerDistance') {\n            sectionFormat.footerDistance = value;\n        }\n        else if (property === 'pageStartingNumber') {\n            sectionFormat.pageStartingNumber = value;\n        }\n        else if (property === 'restartPageNumbering') {\n            sectionFormat.restartPageNumbering = value;\n        }\n        else if (property === 'endnoteNumberFormat') {\n            sectionFormat.endnoteNumberFormat = value;\n        }\n        else if (property === 'footNoteNumberFormat') {\n            sectionFormat.footNoteNumberFormat = value;\n        }\n        else if (property === 'restartIndexForEndnotes') {\n            sectionFormat.restartIndexForEndnotes = value;\n        }\n        else if (property === 'restartIndexForFootnotes') {\n            sectionFormat.restartIndexForFootnotes = value;\n        }\n        else if (property === 'initialFootNoteNumber') {\n            sectionFormat.initialFootNoteNumber = value;\n        }\n        else if (property === 'initialEndNoteNumber') {\n            sectionFormat.initialEndNoteNumber = value;\n        }\n        else if (property == 'numberOfColumns') {\n            sectionFormat.numberOfColumns = value;\n        }\n        else if (property == 'equalWidth') {\n            sectionFormat.equalWidth = value;\n        }\n        else if (property == 'lineBetweenColumns') {\n            sectionFormat.lineBetweenColumns = value;\n        }\n        else if (property == 'columns') {\n            sectionFormat.columns = value;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.layoutWholeDocument = function (isLayoutChanged, skipClearContent) {\n        this.documentHelper.layout.isInitialLoad = true;\n        this.documentHelper.layout.isLayoutWhole = true;\n        var startPosition = this.documentHelper.selection.start;\n        var endPosition = this.documentHelper.selection.end;\n        if (startPosition.isExistAfter(endPosition)) {\n            startPosition = this.documentHelper.selection.end.clone();\n            endPosition = this.documentHelper.selection.start.clone();\n        }\n        if (this.owner.layoutType == 'Continuous' && (this.documentHelper.selection.isinEndnote || this.documentHelper.selection.isinFootnote)) {\n            this.documentHelper.selection.footnoteReferenceElement(startPosition, endPosition);\n            startPosition = endPosition;\n        }\n        var startInfo = this.selection.getParagraphInfo(startPosition);\n        var endInfo = this.selection.getParagraphInfo(endPosition);\n        var startIndex = this.selection.getHierarchicalIndex(startInfo.paragraph, startInfo.offset.toString());\n        var endIndex = this.selection.getHierarchicalIndex(endInfo.paragraph, endInfo.offset.toString());\n        this.documentHelper.renderedLists.clear();\n        this.documentHelper.renderedLevelOverrides = [];\n        // this.viewer.owner.isLayoutEnabled = true;\n        var sections = this.combineSection();\n        if (!skipClearContent) {\n            this.documentHelper.clearContent();\n        }\n        // this.documentHelper.layout.isRelayout = false;\n        this.documentHelper.layout.layoutItems(sections, true);\n        // this.documentHelper.layout.isRelayout = true;\n        this.documentHelper.owner.isShiftingEnabled = false;\n        this.setPositionForCurrentIndex(startPosition, startIndex);\n        this.setPositionForCurrentIndex(endPosition, endIndex);\n        this.documentHelper.selection.selectPosition(startPosition, endPosition);\n        this.reLayout(this.documentHelper.selection, undefined, isLayoutChanged);\n        this.documentHelper.layout.isLayoutWhole = false;\n        this.documentHelper.layout.isInitialLoad = false;\n    };\n    Editor.prototype.combineSection = function () {\n        var sections = [];\n        var nextSection = this.documentHelper.pages[0].bodyWidgets[0];\n        this.documentHelper.removeEmptyPages(true);\n        do {\n            nextSection = this.combineSectionChild(nextSection, sections, false);\n        } while (nextSection);\n        for (var j = 0; j < this.documentHelper.pages.length; j++) {\n            this.documentHelper.pages[j].destroy();\n            j--;\n        }\n        return sections;\n    };\n    Editor.prototype.combineFollowingSection = function () {\n        var sections = [];\n        var nextSection = this.documentHelper.selection.start.paragraph.bodyWidget.getSplitWidgets()[0];\n        if (nextSection.childWidgets[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            this.updateWholeListItems(nextSection.childWidgets[0]);\n        }\n        else {\n            var block = this.documentHelper.getFirstParagraphInFirstCell(nextSection.childWidgets[0]);\n            this.viewer.owner.editorModule.updateWholeListItems(block);\n        }\n        var pageIndex = this.documentHelper.pages.indexOf(nextSection.page);\n        var startIndex = nextSection.indexInOwner === 0 ? pageIndex : pageIndex + 1;\n        do {\n            nextSection = this.combineSectionChild(nextSection, sections, false);\n        } while (nextSection);\n        for (var i = startIndex; i < this.documentHelper.pages.length; i++) {\n            this.documentHelper.pages[i].destroy();\n            i--;\n        }\n        for (var j = pageIndex; j < this.documentHelper.pages.length; j++) {\n            for (var k = 0; k < this.documentHelper.pages[j].bodyWidgets.length; k++) {\n                if (this.documentHelper.pages[j].bodyWidgets[k].childWidgets.length === 0) {\n                    this.documentHelper.pages[j].bodyWidgets.splice(k, 1);\n                    k--;\n                }\n            }\n        }\n        return sections;\n    };\n    Editor.prototype.combineSectionChild = function (bodyWidget, sections, destoryPage) {\n        var previousBodyWidget = bodyWidget;\n        var temp = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n        var emptyBody = false;\n        temp.sectionFormat = bodyWidget.sectionFormat;\n        temp.index = previousBodyWidget.index;\n        do {\n            emptyBody = false;\n            previousBodyWidget = bodyWidget;\n            if (bodyWidget.lastChild) {\n                bodyWidget.lastChild.combineWidget(this.owner.viewer);\n            }\n            bodyWidget = bodyWidget.nextRenderedWidget;\n            for (var j = 0; j < previousBodyWidget.childWidgets.length; j++) {\n                var block = previousBodyWidget.childWidgets[j];\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                    this.documentHelper.layout.clearTableWidget(block, true, true, true);\n                }\n                else {\n                    block.x = 0;\n                    block.y = 0;\n                    block.width = 0;\n                    block.height = 0;\n                }\n                temp.childWidgets.push(block);\n                previousBodyWidget.childWidgets.splice(j, 1);\n                j--;\n                block.containerWidget = temp;\n            }\n            for (var i = 0; i < previousBodyWidget.page.bodyWidgets.length; i++) {\n                if (previousBodyWidget.page.bodyWidgets[i].childWidgets.length === 0) {\n                    emptyBody = true;\n                }\n                else {\n                    emptyBody = false;\n                    break;\n                }\n            }\n            if (emptyBody && destoryPage) {\n                previousBodyWidget.page.destroy();\n            }\n            // this.documentHelper.pages.splice(previousBodyWidget.page.index, 1);\n        } while (bodyWidget && previousBodyWidget.index === bodyWidget.index);\n        sections.push(temp);\n        return bodyWidget;\n    };\n    Editor.prototype.updateSelectionTableFormat = function (selection, action, value) {\n        switch (action) {\n            case 'TableAlignment':\n                this.editorHistory.initializeHistory('TableAlignment');\n                this.updateTableFormat(selection, 'tableAlignment', value);\n                break;\n            case 'TableLeftIndent':\n                this.editorHistory.initializeHistory('TableLeftIndent');\n                this.updateTableFormat(selection, 'leftIndent', value);\n                break;\n            case 'DefaultCellSpacing':\n                this.editorHistory.initializeHistory('DefaultCellSpacing');\n                this.updateTableFormat(selection, 'cellSpacing', value);\n                break;\n            case 'DefaultCellLeftMargin':\n                this.editorHistory.initializeHistory('DefaultCellLeftMargin');\n                this.updateTableFormat(selection, 'leftMargin', value);\n                break;\n            case 'DefaultCellRightMargin':\n                this.editorHistory.initializeHistory('DefaultCellRightMargin');\n                this.updateTableFormat(selection, 'rightMargin', value);\n                break;\n            case 'DefaultCellTopMargin':\n                this.editorHistory.initializeHistory('DefaultCellTopMargin');\n                this.updateTableFormat(selection, 'topMargin', value);\n                break;\n            case 'TablePreferredWidth':\n                this.editorHistory.initializeHistory('TablePreferredWidth');\n                this.updateTableFormat(selection, 'preferredWidth', value);\n                break;\n            case 'TablePreferredWidthType':\n                this.editorHistory.initializeHistory('TablePreferredWidthType');\n                this.updateTableFormat(selection, 'preferredWidthType', value);\n                break;\n            case 'DefaultCellBottomMargin':\n                this.editorHistory.initializeHistory('DefaultCellBottomMargin');\n                this.updateTableFormat(selection, 'bottomMargin', value);\n                break;\n            case 'CellContentVerticalAlignment':\n                this.editorHistory.initializeHistory('CellContentVerticalAlignment');\n                this.updateCellFormat(selection, 'verticalAlignment', value);\n                break;\n            case 'CellLeftMargin':\n                this.editorHistory.initializeHistory('CellLeftMargin');\n                this.updateCellFormat(selection, 'leftMargin', value);\n                break;\n            case 'CellRightMargin':\n                this.editorHistory.initializeHistory('CellRightMargin');\n                this.updateCellFormat(selection, 'rightMargin', value);\n                break;\n            case 'CellTopMargin':\n                this.editorHistory.initializeHistory('CellTopMargin');\n                this.updateCellFormat(selection, 'topMargin', value);\n                break;\n            case 'CellBottomMargin':\n                this.editorHistory.initializeHistory('CellBottomMargin');\n                this.updateCellFormat(selection, 'bottomMargin', value);\n                break;\n            case 'CellPreferredWidth':\n                this.editorHistory.initializeHistory('CellPreferredWidth');\n                this.updateCellFormat(selection, 'preferredWidth', value);\n                break;\n            case 'CellPreferredWidthType':\n                this.editorHistory.initializeHistory('CellPreferredWidthType');\n                this.updateCellFormat(selection, 'preferredWidthType', value);\n                break;\n            case 'Shading':\n                this.editorHistory.initializeHistory('Shading');\n                this.updateCellFormat(selection, 'shading', value);\n                break;\n            case 'RowHeight':\n                this.editorHistory.initializeHistory('RowHeight');\n                this.updateRowFormat(selection, 'height', value);\n                break;\n            case 'RowHeightType':\n                this.editorHistory.initializeHistory('RowHeightType');\n                this.updateRowFormat(selection, 'heightType', value);\n                break;\n            case 'RowHeader':\n                this.editorHistory.initializeHistory('RowHeader');\n                this.updateRowFormat(selection, 'isHeader', value);\n                break;\n            case 'AllowBreakAcrossPages':\n                this.editorHistory.initializeHistory('AllowBreakAcrossPages');\n                this.updateRowFormat(selection, 'allowBreakAcrossPages', value);\n                break;\n            case 'TableBidi':\n                this.editorHistory.initializeHistory(action);\n                this.updateTableFormat(selection, 'bidi', value);\n                break;\n            case 'TableTitle':\n                this.editorHistory.initializeHistory(action);\n                this.updateTableFormat(selection, 'title', value);\n                break;\n            case 'TableDescription':\n                this.editorHistory.initializeHistory(action);\n                this.updateTableFormat(selection, 'description', value);\n                break;\n        }\n    };\n    // Update Table Properties\n    /**\n     * Update Table Format on undo\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateTableFormat = function (selection, property, value) {\n        var tableStartPosition = selection.start;\n        var tableEndPosition = selection.end;\n        if (!selection.isForward) {\n            tableStartPosition = selection.end;\n            tableEndPosition = selection.start;\n        }\n        this.initHistoryPosition(selection, tableStartPosition);\n        this.applyTablePropertyValue(property, value, tableStartPosition.paragraph.associatedCell.ownerTable);\n        if (this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            this.documentHelper.layout.reLayoutTable(tableStartPosition.paragraph.associatedCell.ownerTable);\n        }\n    };\n    /**\n     * update cell format on undo\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateCellFormat = function (selection, property, value) {\n        selection.owner.isShiftingEnabled = true;\n        var newStartPosition = selection.start;\n        var newEndPosition = selection.end;\n        if (!selection.isForward) {\n            newStartPosition = selection.end;\n            newEndPosition = selection.start;\n        }\n        this.initHistoryPosition(selection, newStartPosition);\n        this.updateFormatForCell(selection, property, value);\n    };\n    /**\n     * Update row format on undo\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {string} property - Specifies the property\n     * @param {Object} value - Specifies the value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateRowFormat = function (selection, property, value) {\n        var rowStartPosition = selection.start;\n        var rowEndPosition = selection.end;\n        if (!selection.isForward) {\n            rowStartPosition = selection.end;\n            rowEndPosition = selection.start;\n        }\n        this.initHistoryPosition(selection, rowStartPosition);\n        this.applyRowFormat(rowStartPosition.paragraph.associatedCell.ownerRow, rowStartPosition, rowEndPosition, property, value);\n    };\n    Editor.prototype.initHistoryPosition = function (selection, position) {\n        if (this.documentHelper.owner.editorHistoryModule && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(position)) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.insertPosition)) {\n                    this.editorHistory.currentBaseHistoryInfo.insertPosition = position.getHierarchicalIndexInternal();\n                }\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.insertPosition)) {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = selection.start.getHierarchicalIndexInternal();\n            }\n        }\n    };\n    Editor.prototype.startSelectionReLayouting = function (paragraph, selection, start, end) {\n        selection.owner.isLayoutEnabled = true;\n        if (start.paragraph.isInsideTable) {\n            var table = start.paragraph.associatedCell.ownerTable;\n            while (table.isInsideTable) {\n                table = table.associatedCell.ownerTable;\n            }\n            this.reLayoutSelectionOfTable(table, selection, start, end);\n        }\n        else {\n            this.reLayoutSelection(paragraph, selection, start, end);\n        }\n    };\n    Editor.prototype.reLayoutSelectionOfTable = function (table, selection, start, end) {\n        var isEnded = false;\n        this.documentHelper.layout.layoutBodyWidgetCollection(table.index, table.containerWidget, table, false);\n        // If the selection ends in the current table, need to stop relayouting.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(end.paragraph.associatedCell) && table.contains(end.paragraph.associatedCell)) {\n            return true;\n        }\n        var block = selection.getNextRenderedBlock(table);\n        // Relayout the next block.\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n            isEnded = this.reLayoutSelectionOfBlock(block, selection, start, end);\n        }\n        return isEnded;\n    };\n    Editor.prototype.reLayoutSelection = function (paragraph, selection, start, end) {\n        if (start.paragraph === paragraph) {\n            var startOffset = start.offset;\n            var length_3 = selection.getParagraphLength(paragraph);\n            var indexInInline = 0;\n            var index = 0;\n            var inlineObj = paragraph.getInline(start.offset, indexInInline);\n            var inline = inlineObj.element;\n            indexInInline = inlineObj.index;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                if (indexInInline === inline.length && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.nextNode)) {\n                    inline = inline.nextNode;\n                }\n                index = inline.line.children.indexOf(inline);\n            }\n            var lineIndex = 0;\n            if (start.currentWidget.paragraph === paragraph) {\n                lineIndex = paragraph.childWidgets.indexOf(start.currentWidget);\n                index = start.currentWidget.children.indexOf(inline);\n            }\n            // If selection start inline is at new inline, need to relayout from the previous inline.\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && !inline.line && index > 0) {\n                this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, index - 1);\n            }\n            else {\n                this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, index);\n            }\n        }\n        else {\n            this.documentHelper.layout.reLayoutParagraph(paragraph, 0, 0);\n        }\n        // If the selection ends at the current paragraph, need to stop relayouting.\n        if (end.paragraph === paragraph) {\n            return true;\n        }\n        // _Relayout the next block.\n        var block = selection.getNextRenderedBlock(paragraph);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n            return this.reLayoutSelectionOfBlock(block, selection, start, end);\n        }\n        return false;\n    };\n    //Relayouting Start    \n    Editor.prototype.reLayoutSelectionOfBlock = function (block, selection, start, end) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            return this.reLayoutSelection(block, selection, start, end);\n        }\n        else {\n            return undefined;\n            // return this.reLayoutSelectionOfTable(block as TableWidget, selection, start, end);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.layoutItemBlock = function (block, shiftNextWidget) {\n        var section = undefined;\n        if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BlockContainer || block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFrame) {\n            // let index: number = section.childWidgets.indexOf(block);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.owner)\n                && this.documentHelper.owner.isLayoutEnabled) {\n                block = block.combineWidget(this.viewer);\n                section = block.containerWidget;\n                this.documentHelper.layout.layoutBodyWidgetCollection(block.index, section, block, false);\n            }\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n            var cell = block.containerWidget;\n            cell = this.documentHelper.selection.getContainerCell(cell);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.owner)\n                && this.documentHelper.owner.isLayoutEnabled) {\n                this.documentHelper.layout.reLayoutTable(block);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.removeSelectedContents = function (selection) {\n        return this.removeSelectedContentInternal(selection, selection.start, selection.end);\n    };\n    Editor.prototype.removeSelectedContentInternal = function (selection, startPosition, endPosition) {\n        var startPos = startPosition;\n        var endPos = endPosition;\n        if (!startPosition.isExistBefore(endPosition)) {\n            startPos = endPosition;\n            endPos = startPosition;\n        }\n        if (startPos.paragraph === endPos.paragraph && startPos.paragraph.childWidgets.indexOf(startPos.currentWidget) === startPos.paragraph.childWidgets.length - 1 &&\n            startPos.offset === selection.getParagraphLength(startPos.paragraph) && startPos.offset + 1 === endPos.offset) {\n            selection.owner.isShiftingEnabled = true;\n            selection.selectContent(startPos, true);\n            return true;\n        }\n        var paragraphInfo = this.selection.getParagraphInfo(startPos);\n        selection.editPosition = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n        var start = startPos.clone();\n        var body = start.paragraph.containerWidget;\n        var isFirstLine = start.currentWidget.isFirstLine();\n        var isMultipleSectionSelected = this.checkMultipleSectionSelected(start, endPos);\n        var isRemoved = this.removeSelectedContent(endPos.paragraph, selection, startPos, endPos);\n        var textPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n        if (isMultipleSectionSelected && this.selection.currentPasteAction == \"DefaultPaste\" && isFirstLine && start.offset < 1) {\n            var currentParagraph = start.paragraph;\n            var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n            var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n            line.paragraph = paragraph;\n            paragraph.containerWidget = body;\n            paragraph.childWidgets.push(line);\n            body.childWidgets.push(paragraph);\n            paragraph.index = currentParagraph.index;\n            paragraph.x = start.location.x;\n            paragraph.y = start.location.y;\n        }\n        this.setPositionForCurrentIndex(textPosition, selection.editPosition);\n        selection.selectContent(textPosition, true);\n        return isRemoved;\n    };\n    Editor.prototype.checkMultipleSectionSelected = function (start, end) {\n        var startSectionIndex = this.getBodyWidgetIndex(start);\n        var endSectionIndex = this.getBodyWidgetIndex(end);\n        if (startSectionIndex == endSectionIndex) {\n            return false;\n        }\n        return true;\n    };\n    Editor.prototype.getBodyWidgetIndex = function (textPosition) {\n        var position = textPosition.hierarchicalPosition;\n        var index = position.indexOf(';');\n        var value = position.substring(0, index);\n        position = position.substring(index).replace(';', '');\n        index = position.indexOf(';');\n        value = position.substring(0, index);\n        var bodyWidgetIndex = parseInt(value, 10);\n        return bodyWidgetIndex;\n    };\n    Editor.prototype.removeSelectedContent = function (paragraph, selection, start, end) {\n        //If end is not table end and start is outside the table, then skip removing the contents and move caret to start position.\n        if (end.paragraph.isInsideTable\n            && end.paragraph !== this.documentHelper.getLastParagraphInLastCell(end.paragraph.associatedCell.ownerTable)\n            && (!start.paragraph.isInsideTable\n                || start.paragraph.associatedCell.ownerTable.index !== end.paragraph.associatedCell.ownerTable.index)) {\n            return false;\n        }\n        selection.owner.isShiftingEnabled = true;\n        this.deleteSelectedContent(paragraph, selection, start, end, 2);\n        return true;\n    };\n    Editor.prototype.deleteSelectedContent = function (paragraph, selection, start, end, editAction, isDeletecell) {\n        //Handled special behaviour for content control start and end should not delete.\n        var isParaMark = end.offset === this.selection.getLineLength(end.currentWidget) + 1;\n        if (start.isAtParagraphStart && (isParaMark || end.isAtParagraphEnd)) {\n            var startInlineObj = start.currentWidget.getInline(start.offset, 0);\n            var startInline = startInlineObj.element;\n            var endInlineObj = end.currentWidget.getInline(end.offset, 0);\n            var endInline = endInlineObj.element;\n            if (startInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && endInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && startInline.reference === endInline) {\n                start.offset += 1;\n                end.offset -= isParaMark ? 2 : 1;\n                var blockInfo = this.selection.getParagraphInfo(start);\n                selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n                //Updating for collaborative editing.\n                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                    this.editorHistory.currentBaseHistoryInfo.updateSelection();\n                }\n            }\n        }\n        var indexInInline = 0;\n        var inlineObj = start.currentWidget.getInline(start.offset, indexInInline);\n        var inline = inlineObj.element;\n        indexInInline = inlineObj.index;\n        // if (!isNullOrUndefined(inline)) {\n        //     inline = selection.getNextRenderedInline(inline, indexInInline);\n        // }\n        // if (inline instanceof WFieldBegin && !isNullOrUndefined((inline as WFieldBegin).fieldEnd)) {\n        //     let fieldEndOffset: number = ((inline as WFieldBegin).fieldEnd.owner as WParagraph).getOffset((inline as WFieldBegin).fieldEnd, 1);\n        //     let fieldEndIndex: string = WordDocument.getHierarchicalIndexOf((inline as WFieldBegin).fieldEnd.owner as WParagraph, fieldEndOffset.toString());\n        //     let selectionEndIndex: string = end.getHierarchicalIndexInternal();\n        //     if (!TextPosition.isForwardSelection(fieldEndIndex, selectionEndIndex)) {\n        //         //If selection end is after field begin, moves selection start to field separator.\n        //         start.moveToInline((inline as WFieldBegin).fieldSeparator, 1);\n        //         selection.editPosition = start.getHierarchicalIndexInternal();\n        //         if (!isNullOrUndefined(selection.currentBaseHistoryInfo)) {\n        //             selection.currentBaseHistoryInfo.insertPosition = selection.editPosition;\n        //         }\n        //     }\n        // }\n        indexInInline = 0;\n        inlineObj = end.currentWidget.getInline(end.offset, indexInInline);\n        inline = inlineObj.element;\n        indexInInline = inlineObj.index;\n        // if (!isNullOrUndefined(inline)) {\n        //     inline = selection.getNextRenderedInline(inline, indexInInline);\n        // }\n        // if (inline instanceof WFieldEnd && !isNullOrUndefined((inline as WFieldEnd).fieldBegin)) {\n        //     let fieldBeginOffset: number = ((inline as WFieldEnd).fieldBegin.owner as WParagraph).getOffset((inline as WFieldEnd).fieldBegin, 0);\n        //     let fieldBeginIndex: string = WordDocument.getHierarchicalIndexOf((inline as WFieldEnd).fieldBegin.owner as WParagraph, fieldBeginOffset.toString());\n        //     let selectionStartIndex: string = start.getHierarchicalIndexInternal();\n        //     if (!TextPosition.isForwardSelection(selectionStartIndex, fieldBeginIndex)) {\n        //         //If field begin is before selection start, move selection end to inline item before field end.\n        //         let prevInline: WInline = selection.getPreviousTextInline(inline);\n        //         if (isNullOrUndefined(prevInline)) {\n        //             end.moveBackward();\n        //         } else {\n        //             end.moveToInline(prevInline, prevInline.length);\n        //         }\n        //     }\n        // }\n        // if (inline instanceof FootnoteElementBox) {\n        //     this.removeFootnote(inline);\n        // }\n        if (end.paragraph !== paragraph) {\n            this.deleteSelectedContent(end.paragraph, selection, start, end, editAction);\n            return;\n        }\n        //  Selection start in cell.\n        if (end.paragraph.isInsideTable && (!start.paragraph.isInsideTable\n            || (start.paragraph.associatedCell && !start.paragraph.associatedCell.equals(end.paragraph.associatedCell))\n            || (selection.isCellSelected(end.paragraph.associatedCell, start, end) && isDeletecell))) {\n            end.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n            this.deleteTableCell(end.paragraph.associatedCell, selection, start, end, editAction, isDeletecell);\n        }\n        else {\n            var shiftPara = undefined;\n            if (this.owner.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer && paragraph.bodyWidget.sectionFormat.numberOfColumns > 1 && paragraph === paragraph.bodyWidget.lastChild && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.bodyWidget.nextRenderedWidget) && paragraph.bodyWidget.index !== paragraph.bodyWidget.nextRenderedWidget.index && paragraph.bodyWidget.page === paragraph.bodyWidget.nextRenderedWidget.page) {\n                shiftPara = paragraph.nextRenderedWidget;\n            }\n            this.deletePara(paragraph, start, end, editAction);\n            if (this.delBlockContinue && this.delBlock) {\n                if (this.delSection) {\n                    var bodyWidget = paragraph.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? paragraph.bodyWidget : undefined;\n                    this.deleteSection(selection, this.delSection, bodyWidget, editAction);\n                    this.delSection = undefined;\n                }\n                this.deleteBlock(this.delBlock, selection, start, end, editAction);\n                this.delBlockContinue = false;\n                this.delBlock = undefined;\n            }\n            if (this.owner.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer && shiftPara !== undefined) {\n                this.documentHelper.blockToShift = shiftPara;\n            }\n        }\n    };\n    /**\n     * Merges the selected cells.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.mergeCells = function () {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl || !this.owner.isDocumentLoaded) {\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper) && !this.selection.isEmpty) {\n            this.mergeSelectedCellsInTable();\n        }\n    };\n    /**\n     * Deletes the entire table at selection.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.deleteTable = function () {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        if (startPos.paragraph.isInsideTable) {\n            var table = this.getOwnerTable(this.selection.isForward).combineWidget(this.owner.viewer);\n            this.selection.selectTable();\n            var commentStart = [];\n            this.selection.owner.isShiftingEnabled = true;\n            if (this.checkIsNotRedoing()) {\n                commentStart = this.checkAndRemoveComments();\n                this.initHistory('DeleteTable');\n                //Sets the insert position in history info as current table.    \n                this.updateHistoryPosition(startPos, true);\n            }\n            var considerTrackChanges = true;\n            if (!this.skipTracking()) {\n                var count = 0;\n                for (var i = 0; i < table.childWidgets.length; i++) {\n                    var row = table.childWidgets[i];\n                    if (row.rowFormat.revisions.length === 1 && row.rowFormat.revisions[0].revisionType === 'Insertion'\n                        && row.rowFormat.revisions[0].author === (this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser)) {\n                        this.isRemoveRevision = true;\n                        this.unlinkRangeFromRevision(row.rowFormat, true);\n                        this.isRemoveRevision = false;\n                        if (row.rowFormat.revisions[0].range.length === 0) {\n                            row.rowFormat.revisions.splice(0, 1);\n                        }\n                        count++;\n                    }\n                }\n                if (count === table.childWidgets.length) {\n                    considerTrackChanges = false;\n                }\n            }\n            var paragraph = this.getParagraphForSelection(table);\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Table;\n                this.editorHistory.currentBaseHistoryInfo.removedNodes.push(table.clone());\n            }\n            if (this.owner.enableTrackChanges && considerTrackChanges) {\n                for (var i = 0; i < table.childWidgets.length; i++) {\n                    if (i === 0) {\n                        var nextCell = table.childWidgets[0];\n                        paragraph = this.selection.getFirstParagraph(nextCell);\n                    }\n                    this.trackRowDeletion(table.childWidgets[i]);\n                }\n            }\n            else {\n                this.removeBlock(table);\n            }\n            this.selection.selectParagraphInternal(paragraph, true);\n            if (this.checkIsNotRedoing() || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)) {\n                this.reLayout(this.selection);\n                this.updateHistoryForComments(commentStart);\n            }\n        }\n    };\n    /**\n     * Deletes the selected column(s).\n     *\n     * @returns {void}\n     */\n    Editor.prototype.deleteColumn = function () {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        if (this.owner.enableTrackChanges) {\n            var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            locale.setLocale(this.owner.locale);\n            this.alertDialog = _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n                title: locale.getConstant('UnTrack'),\n                content: locale.getConstant('Merge Track'),\n                showCloseIcon: true,\n                okButton: {\n                    text: 'Ok', click: this.onDeleteColumnConfirmed.bind(this)\n                },\n                closeOnEscape: true,\n                position: { X: 'center', Y: 'center' },\n                animationSettings: { effect: 'Zoom' }\n            });\n            this.alertDialog.enableRtl = this.owner.enableRtl;\n        }\n        else {\n            this.onDeleteColumnConfirmed();\n        }\n    };\n    Editor.prototype.onDeleteColumnConfirmed = function () {\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var endPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        if (startPos.paragraph.isInsideTable) {\n            var startPosition = this.selection.start.clone();\n            var endPosition = this.selection.end.clone();\n            this.selection.selectColumn();\n            var commentStart = [];\n            this.selection.owner.isShiftingEnabled = true;\n            if (this.checkIsNotRedoing()) {\n                commentStart = this.checkAndRemoveComments();\n                this.selection.start.setPositionInternal(startPosition);\n                this.selection.end.setPositionInternal(endPosition);\n                this.initHistory('DeleteColumn');\n            }\n            this.selection.start.setPositionInternal(startPosition);\n            this.selection.end.setPositionInternal(endPosition);\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var endCell = this.getOwnerCell(!this.selection.isForward);\n            var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                this.cloneTableToHistoryInfo(table);\n            }\n            var paragraph = undefined;\n            if (endCell.nextWidget) {\n                var nextCell = endCell.nextWidget;\n                paragraph = this.selection.getFirstParagraph(nextCell);\n            }\n            else if (startCell.previousWidget) {\n                var previousCell = startCell.previousWidget;\n                paragraph = this.selection.getFirstParagraph(previousCell);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph)) {\n                paragraph = this.getParagraphForSelection(table);\n            }\n            //retrieve the cell collection based on start and end cell to remove. \n            var deleteCells = table.getColumnCellsForSelection(startCell, endCell);\n            this.onDeleteColumn(table, deleteCells);\n            if (table.childWidgets.length === 0) {\n                // Before disposing table reset the paragrph.\n                paragraph = this.getParagraphForSelection(table);\n                this.removeBlock(table);\n                if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                    this.editorHistory.currentBaseHistoryInfo.action = 'DeleteTable';\n                }\n                table.destroy();\n            }\n            else {\n                this.updateTable(table);\n            }\n            this.selection.selectParagraphInternal(paragraph, true);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) || this.checkIsNotRedoing()) {\n                this.reLayout(this.selection, true);\n                this.updateHistoryForComments(commentStart);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.alertDialog)) {\n                this.alertDialog.close();\n                this.alertDialog = undefined;\n            }\n        }\n    };\n    /**\n     * Delete the column for collaborative editing.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onDeleteColumn = function (table, deleteCells) {\n        var length = 0;\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            if (row.childWidgets.length === 1) {\n                if (deleteCells.indexOf(row.childWidgets[0]) >= 0) {\n                    this.removeFieldInWidget(row.childWidgets[0], true);\n                    table.childWidgets.splice(table.childWidgets.indexOf(row), 1);\n                    row.destroy();\n                    length += 1;\n                    i--;\n                }\n            }\n            else {\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var tableCell = row.childWidgets[j];\n                    if (deleteCells.indexOf(tableCell) >= 0) {\n                        this.removeFieldInWidget(tableCell, true);\n                        row.childWidgets.splice(j, 1);\n                        tableCell.destroy();\n                        j--;\n                    }\n                }\n                if (row.childWidgets.length === 0) {\n                    table.childWidgets.splice(table.childWidgets.indexOf(row), 1);\n                    row.destroy();\n                    length += 1;\n                    i--;\n                }\n            }\n        }\n        return length;\n    };\n    /**\n     * Deletes the selected row(s).\n     *\n     * @returns {void}\n     */\n    Editor.prototype.deleteRow = function () {\n        if (this.owner.isReadOnlyMode || !this.canEditContentControl) {\n            return;\n        }\n        var startPos = !this.selection.isForward ? this.selection.end : this.selection.start;\n        var endPos = !this.selection.isForward ? this.selection.start : this.selection.end;\n        var blockInfo = this.selection.getParagraphInfo(startPos);\n        var startIndex = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        if (startPos.paragraph.isInsideTable) {\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var endCell = this.getOwnerCell(!this.selection.isForward);\n            this.selection.selectRow();\n            var commentStart = [];\n            if (this.checkIsNotRedoing()) {\n                commentStart = this.checkAndRemoveComments();\n                this.initHistory('DeleteRow');\n            }\n            this.selection.owner.isShiftingEnabled = true;\n            var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n            var row = this.getOwnerRow(true);\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                this.cloneTableToHistoryInfo(table);\n            }\n            var paragraph = undefined;\n            if (row.nextWidget) {\n                var nextCell = row.nextWidget.childWidgets[0];\n                paragraph = this.selection.getFirstParagraph(nextCell);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph)) {\n                paragraph = this.getParagraphForSelection(table);\n            }\n            startPos = startPos.clone();\n            if (!this.selection.isEmpty) {\n                var containerCell = this.selection.getContainerCellOf(startCell, endCell);\n                if (containerCell.ownerTable.contains(endCell)) {\n                    startCell = this.selection.getSelectedCell(startCell, containerCell);\n                    endCell = this.selection.getSelectedCell(endCell, containerCell);\n                    if (this.selection.containsCell(containerCell, endCell)) {\n                        row = startCell.ownerRow;\n                        if (this.owner.enableTrackChanges) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                                this.editorHistory.currentBaseHistoryInfo.action = 'RemoveRowTrack';\n                                this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Row;\n                            }\n                            this.trackRowDeletion(row, true, false);\n                        }\n                        else {\n                            this.removeRow(row);\n                        }\n                    }\n                    else {\n                        row = startCell.ownerRow;\n                        var endRow = endCell.ownerRow;\n                        //Update the selection paragraph.\n                        paragraph = undefined;\n                        if (endRow.nextWidget) {\n                            var nextCell = endRow.nextWidget.childWidgets[0];\n                            paragraph = this.selection.getFirstParagraph(nextCell);\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph)) {\n                            paragraph = this.getParagraphForSelection(table);\n                        }\n                        for (var i = 0; i < table.childWidgets.length; i++) {\n                            var tableRow = table.childWidgets[i];\n                            if (tableRow.rowIndex >= row.rowIndex && tableRow.rowIndex <= endRow.rowIndex) {\n                                if (this.owner.enableTrackChanges && this.checkIsNotRedoing()) {\n                                    this.trackRowDeletion(tableRow, true, false);\n                                }\n                                else {\n                                    this.removeFieldInBlock(tableRow, true);\n                                    var prevRenderedRow = tableRow.previousRenderedWidget;\n                                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevRenderedRow)) {\n                                        for (var j_3 = 0; j_3 < prevRenderedRow.childWidgets.length; j_3++) {\n                                            var cell = prevRenderedRow.childWidgets[j_3];\n                                            if (tableRow.rowIndex < cell.ownerRow.rowIndex + cell.cellFormat.rowSpan) {\n                                                cell.cellFormat.rowSpan--;\n                                            }\n                                        }\n                                        prevRenderedRow = prevRenderedRow.previousRenderedWidget;\n                                    }\n                                    for (var j = 0; j < tableRow.childWidgets.length; j++) {\n                                        var cell = tableRow.childWidgets[j];\n                                        var nextRenderedRow = tableRow.nextRenderedWidget;\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextRenderedRow)) {\n                                            if (nextRenderedRow.rowIndex < cell.ownerRow.rowIndex + cell.cellFormat.rowSpan) {\n                                                cell.cellFormat.rowSpan--;\n                                                var cellWidget = this.createColumn(this.selection.getLastParagraph(cell));\n                                                cellWidget.cellFormat.copyFormat(cell.cellFormat);\n                                                cellWidget.index = cell.index;\n                                                cellWidget.rowIndex = cell.rowIndex;\n                                                cellWidget.columnIndex = cell.columnIndex;\n                                                cellWidget.containerWidget = nextRenderedRow;\n                                                cellWidget.margin = cell.margin.clone();\n                                                cellWidget.leftBorderWidth = cell.leftBorderWidth;\n                                                cellWidget.rightBorderWidth = cell.rightBorderWidth;\n                                                nextRenderedRow.childWidgets.splice(cellWidget.columnIndex, 0, cellWidget);\n                                            }\n                                        }\n                                        tableRow.childWidgets.splice(j, 1);\n                                        j--;\n                                    }\n                                    tableRow.destroy();\n                                    i--;\n                                }\n                            }\n                        }\n                        if (table.childWidgets.length === 0) {\n                            this.removeBlock(table);\n                            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                                this.editorHistory.currentBaseHistoryInfo.action = 'DeleteTable';\n                            }\n                            table.destroy();\n                        }\n                        else {\n                            this.updateTable(table);\n                        }\n                    }\n                }\n            }\n            else {\n                if (this.owner.enableTrackChanges) {\n                    this.trackRowDeletion(row, true, false);\n                }\n                else {\n                    this.removeRow(row);\n                }\n            }\n            if (!this.owner.enableTrackChanges || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.childWidgets)) {\n                this.selection.selectParagraphInternal(paragraph, true);\n            }\n            else {\n                var textPosition = this.selection.getTextPosBasedOnLogicalIndex(startIndex);\n                this.selection.selectContent(textPosition, true);\n                // this.selection.start.setPositionInternal(startPos);\n                // this.selection.end.setPositionInternal(this.selection.start);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) || this.checkIsNotRedoing()) {\n                this.reLayout(this.selection, true);\n                this.updateHistoryForComments(commentStart);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.trackRowDeletion = function (row, canremoveRow, updateHistory, editAction) {\n        var rowFormat = row.rowFormat;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(rowFormat)) {\n            var canInsertRevision = true;\n            if (rowFormat.revisions.length > 0) {\n                var revision = this.retrieveRevisionInOder(rowFormat);\n                if (revision.revisionType === 'Insertion') {\n                    if (this.isRevisionMatched(rowFormat, undefined)) {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(canremoveRow) || canremoveRow) {\n                            this.removeRow(row);\n                        }\n                        else {\n                            this.removeRevisionsInRow(row);\n                        }\n                        return true;\n                    }\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    this.unlinkWholeRangeInRevision(rowFormat, revision);\n                    if (this.owner.enableTrackChanges && !this.skipTracking()) {\n                        canInsertRevision = true;\n                    }\n                    else {\n                        canInsertRevision = false;\n                    }\n                }\n            }\n            if (canInsertRevision) {\n                if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(updateHistory) || updateHistory) && this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                    this.editorHistory.currentBaseHistoryInfo.action = 'RemoveRowTrack';\n                }\n                this.insertRevision(rowFormat, 'Deletion');\n            }\n            for (var i = 0; i < row.childWidgets.length; i++) {\n                var cellWidget = row.childWidgets[i];\n                for (var j = 0; j < cellWidget.childWidgets.length; j++) {\n                    if (cellWidget.childWidgets[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        this.trackInnerTable(cellWidget.childWidgets[j], canremoveRow, updateHistory);\n                    }\n                    else {\n                        var paraWidget = cellWidget.childWidgets[j];\n                        // We used this boolean since for table tracking we should add removed nodes only for entire table not for every elements in the table\n                        this.skipTableElements = true;\n                        if (canInsertRevision && !this.skipTracking() && editAction !== 0) {\n                            var isBlockRemoved = this.insertRevisionForBlock(paraWidget, 'Deletion', undefined, undefined, true, undefined, true);\n                            if (isBlockRemoved) {\n                                j--;\n                            }\n                        }\n                        this.skipTableElements = false;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    Editor.prototype.trackInnerTable = function (tableWidget, canremoveRow, updateHistory) {\n        for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n            this.trackRowDeletion(tableWidget.childWidgets[i], canremoveRow, updateHistory);\n        }\n    };\n    Editor.prototype.returnDeleteRevision = function (revisions) {\n        for (var i = 0; i < revisions.length; i++) {\n            if (revisions[i].revisionType === 'Deletion') {\n                return revisions[i];\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.removeRow = function (row) {\n        var table = row.ownerTable;\n        if (row.rowFormat.revisions.length > 0) {\n            this.removeRevisionsInRow(row);\n        }\n        if (table.childWidgets.length === 1) {\n            this.removeBlock(table);\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                this.editorHistory.currentBaseHistoryInfo.action = 'Delete';\n            }\n            table.destroy();\n        }\n        else {\n            this.removeFieldInBlock(row, true);\n            table.childWidgets.splice(table.childWidgets.indexOf(row), 1);\n            row.destroy();\n            this.updateTable(table);\n        }\n    };\n    /**\n     * @private\n     * @param {TableWidget} table Specifies the table widget\n     * @returns {void}\n     */\n    Editor.prototype.updateTable = function (table, skipCombine) {\n        if (!skipCombine) {\n            table = table.combineWidget(this.viewer);\n        }\n        table.updateRowIndex(0);\n        table.isGridUpdated = false;\n        table.buildTableColumns();\n        table.isGridUpdated = true;\n        this.documentHelper.layout.reLayoutTable(table);\n    };\n    /**\n     * @private\n     * @param {TableWidget} table Specifies the table widget\n     * @returns { ParagraphWidget }\n     */\n    Editor.prototype.getParagraphForSelection = function (table) {\n        var paragraph = undefined;\n        var nextWidget = table.nextWidget ? table.nextWidget : table.nextRenderedWidget;\n        var previousWidget = table.previousWidget ? table.previousWidget : table.previousRenderedWidget;\n        if (nextWidget) {\n            paragraph = nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? nextWidget\n                : this.documentHelper.getFirstParagraphInFirstCell(nextWidget);\n        }\n        else if (previousWidget) {\n            paragraph = previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? previousWidget\n                : this.documentHelper.getLastParagraphInLastCell(previousWidget);\n        }\n        return paragraph;\n    };\n    Editor.prototype.deletePara = function (paragraph, start, end, editAction) {\n        paragraph = paragraph.combineWidget(this.owner.viewer);\n        var selection = this.documentHelper.selection;\n        var paragraphStart = selection.getStartOffset(paragraph);\n        var endParagraphStartOffset = selection.getStartOffset(end.paragraph);\n        var startOffset = paragraphStart;\n        var endOffset = 0;\n        var isCombineNextParagraph = false;\n        var lastLinelength = this.selection.getLineLength(paragraph.lastChild);\n        var currentParagraph = paragraph;\n        var section = paragraph.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? paragraph.bodyWidget : undefined;\n        var startLine = undefined;\n        var endLineWidget = undefined;\n        var isCombineLastBlock = this.combineLastBlock;\n        var tempStartOffset;\n        var isSelectionInsideTable = false;\n        // BUG 926010: If multiple blocks are deleted into a single cell, then the entire table will be layout for each block deletion, which may lead to performance issues.\n        // Therefore, we should layout the entire table only after the last block deletion.\n        if (paragraph.isInsideTable && start.paragraph.isInsideTable) {\n            isSelectionInsideTable = start.paragraph !== paragraph;\n        }\n        if (paragraph === start.paragraph) {\n            startOffset = start.offset;\n            startLine = start.currentWidget;\n            tempStartOffset = startOffset;\n            if ((startOffset + 1 === this.documentHelper.selection.getLineLength(paragraph.lastChild)) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.nextWidget)) {\n                startOffset++;\n            }\n            if (end.paragraph.isInsideTable && (!this.owner.enableTrackChanges || this.skipTracking())) {\n                isCombineNextParagraph = this.isEndInAdjacentTable(paragraph, end.paragraph);\n            }\n            if (!isCombineNextParagraph) {\n                isCombineNextParagraph = this.combineLastBlock;\n            }\n            this.combineLastBlock = false;\n        }\n        else {\n            startLine = paragraph.firstChild;\n        }\n        if (paragraph !== start.paragraph && selection.isSkipLayouting) {\n            selection.isSkipLayouting = false;\n        }\n        if (paragraph === end.paragraph) {\n            endLineWidget = end.currentWidget;\n            endOffset = end.offset;\n        }\n        else {\n            endLineWidget = paragraph.lastChild;\n            endOffset = this.documentHelper.selection.getLineLength(paragraph.lastChild);\n        }\n        // If previous widget is splitted paragraph, combine paragraph widget.\n        var block = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.previousRenderedWidget) && start.paragraph !== paragraph) ?\n            paragraph.previousRenderedWidget.combineWidget(this.documentHelper.viewer) : undefined;\n        if (this.owner.enableTrackChanges && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget && paragraph.isEmpty() && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.nextRenderedWidget)) {\n            this.delBlockContinue = true;\n            this.delBlock = block;\n            return;\n        }\n        if (startOffset > paragraphStart && start.currentWidget === paragraph.lastChild &&\n            startOffset === lastLinelength && (paragraph === end.paragraph && end.offset === startOffset + 1 ||\n            paragraph.nextRenderedWidget === end.paragraph && end.offset === endParagraphStartOffset) ||\n            (this.editorHistory && this.editorHistory.isUndoing && this.editorHistory.currentHistoryInfo &&\n                this.editorHistory.currentHistoryInfo.action === 'PageBreak' && block && block.isPageBreak()\n                && (startOffset === 0 && !start.currentWidget.isFirstLine || startOffset > 0)) ||\n            start.paragraph !== end.paragraph && editAction === 2 && start.paragraph === paragraph && start.paragraph.nextWidget === end.paragraph && !this.owner.enableTrackChanges || !(paragraph.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && ((this.editorHistory.currentBaseHistoryInfo.action === 'Reject Change' && start.paragraph === paragraph && end.paragraph != paragraph && startOffset >= paragraphStart) ||\n            ((this.editorHistory.currentBaseHistoryInfo.action === 'Accept Change' || (this.editorHistory.currentBaseHistoryInfo.isAcceptOrReject === 'Accept' && this.editorHistory.isRedoing)) && start.currentWidget.isLastLine() && ((start.currentWidget == end.currentWidget && start.offset + 1 >= end.paragraph.getLength()) || (start.currentWidget !== end.currentWidget && start.paragraph === paragraph))))) {\n            isCombineNextParagraph = true;\n        }\n        if ((tempStartOffset + 1 === this.documentHelper.selection.getLineLength(paragraph.lastChild) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.nextWidget))) {\n            startOffset--;\n        }\n        var paraEnd = end.clone();\n        paraEnd.offset = paraEnd.offset - 1;\n        // used the isRemoveInine property to skip the entire block (end of selection), removing and adding in history when inserting text.\n        var isRemoveInline = false;\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && (this.editorHistory.currentBaseHistoryInfo.action === 'Insert' || this.editorHistory.currentBaseHistoryInfo.action === 'InsertTextParaReplace') && end.paragraph === paragraph && endOffset === selection.getLineLength(paragraph.lastChild) + 1) {\n            isRemoveInline = true;\n        }\n        var paraReplace = (start.paragraph === paragraph && start.isAtParagraphStart && paraEnd.isAtParagraphEnd &&\n            this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)\n            && this.editorHistory.currentBaseHistoryInfo.action === 'Insert');\n        if (paraReplace) {\n            this.editorHistory.currentBaseHistoryInfo.action = 'InsertTextParaReplace';\n            if (end.paragraph !== paragraph && this.owner.enableTrackChanges && editAction === 2) {\n                paraReplace = false;\n            }\n        }\n        var isStartParagraph = start.paragraph === paragraph;\n        if (end.paragraph === paragraph && end.currentWidget !== paragraph.lastChild ||\n            (end.currentWidget === paragraph.lastChild && end.offset <= selection.getLineLength(paragraph.lastChild)) || paraReplace) {\n            if (end.currentWidget.isFirstLine() && end.offset > paragraphStart || !end.currentWidget.isFirstLine() || paraReplace) {\n                //If selection end with this paragraph and selection doesnot include paragraph mark.               \n                this.removeInlines(paragraph, startLine, startOffset, endLineWidget, endOffset, editAction);\n                //Removes the splitted paragraph.\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && !isStartParagraph && !paraReplace) {\n                this.delBlockContinue = true;\n                this.delBlock = block;\n                var nextSection = block.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? block.bodyWidget : undefined;\n                if (nextSection && !section.equals(nextSection) && section.index !== nextSection.index) {\n                    this.delSection = nextSection;\n                }\n                else {\n                    this.delSection = undefined;\n                }\n            }\n            else {\n                this.delBlockContinue = false;\n                this.delBlock = undefined;\n            }\n        }\n        else if (start.paragraph === paragraph && (start.currentWidget !== paragraph.firstChild ||\n            (start.currentWidget === paragraph.firstChild && startOffset > paragraphStart))) {\n            // If selection start is after paragraph start\n            //And selection does not end with this paragraph Or selection include paragraph mark.\n            this.delBlockContinue = false;\n            this.delBlock = undefined;\n            if (editAction === 4) {\n                return;\n            }\n            else {\n                if (this.skipTracking() && this.editorHistory.currentBaseHistoryInfo.action === 'ParaMarkTrack') {\n                    this.addRemovedNodes(paragraph.characterFormat.cloneFormat());\n                    if (paragraph.characterFormat.revisions.length > 0) {\n                        this.unlinkRangeFromRevision(paragraph.characterFormat, true);\n                    }\n                    paragraph.characterFormat.revisions = [];\n                }\n                else {\n                    if (this.owner.enableTrackChanges && !this.skipTracking() && this.editorHistory.currentBaseHistoryInfo.action !== 'TOC' && this.editorHistory.currentBaseHistoryInfo.action !== 'Reject Change') {\n                        if (isCombineNextParagraph) {\n                            currentParagraph = this.splitParagraph(paragraph, paragraph.firstChild, 0, startLine, startOffset, true, undefined, isSelectionInsideTable);\n                            this.deleteParagraphMark(currentParagraph, selection, editAction, true);\n                            this.addRemovedNodes(paragraph);\n                        }\n                        else {\n                            if (start.currentWidget === paragraph.lastChild && startOffset === lastLinelength + 1) {\n                                startOffset--;\n                            }\n                            if (start.paragraph !== end.paragraph && startOffset !== paragraph.getLength()) {\n                                var para = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                                para.childWidgets = undefined;\n                                this.addRemovedNodes(para);\n                                this.handleDeleteParaMark(paragraph, undefined);\n                            }\n                            else {\n                                var isLastChild = (paragraph == this.getLastParaForBodywidgetCollection(paragraph));\n                                if (!isLastChild) {\n                                    this.handleDeleteParaMark(paragraph, undefined);\n                                }\n                            }\n                            this.removeInlines(paragraph, startLine, startOffset, endLineWidget, endOffset, editAction);\n                            if (startOffset !== lastLinelength) {\n                                var lastLine = paragraph.lastChild;\n                                if (lastLine.children.length > 0) {\n                                    var lastEle = lastLine.children[lastLine.children.length - 1];\n                                    this.combineElementRevision(lastEle.revisions, paragraph.characterFormat.revisions);\n                                }\n                                if (paragraph.isEmpty()) {\n                                    this.combineRevisionWithBlocks(paragraph);\n                                }\n                                else {\n                                    this.combineRevisionWithBlocks(paragraph.lastChild.children[paragraph.lastChild.children.length - 1]);\n                                }\n                            }\n                            else {\n                                this.combineRevisionWithValidElement(paragraph);\n                            }\n                        }\n                    }\n                    else {\n                        if (!start.currentWidget.isFirstLine() && paragraph.lastChild === end.currentWidget && !isCombineNextParagraph) {\n                            this.removeInlines(paragraph, startLine, startOffset, endLineWidget, endOffset, editAction);\n                        }\n                        else {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && this.editorHistory.currentBaseHistoryInfo.action === 'Reject Change' && start.paragraph === paragraph && end.paragraph != paragraph && startOffset >= paragraphStart && isCombineNextParagraph) {\n                                isCombineLastBlock = true;\n                            }\n                            currentParagraph = this.splitParagraph(paragraph, paragraph.firstChild, 0, startLine, startOffset, true, true, isSelectionInsideTable);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                                this.deletaRevisionIDs(currentParagraph.characterFormat);\n                            }\n                            var skipHistoryCollection = false;\n                            if (!end.paragraph.isEmpty() && isCombineNextParagraph && !(this.editorHistory && this.editorHistory.currentHistoryInfo && this.editorHistory.currentHistoryInfo.action === 'PageBreak')) {\n                                skipHistoryCollection = true;\n                            }\n                            this.insertParagraphPaste(paragraph, currentParagraph, start, end, isCombineNextParagraph, editAction, isCombineLastBlock, skipHistoryCollection);\n                            this.removeRevisionForBlock(paragraph, undefined, false, true);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistory.currentBaseHistoryInfo) && this.owner.editorHistory.currentBaseHistoryInfo.action === 'Paste' && this.owner.editorHistory.historyInfoStack.length > 0 && this.owner.editorHistory.historyInfoStack[0].action === 'DragAndDropContent') {\n                                this.addRemovedNodes(paragraph.clone());\n                                this.removeFieldInBlock(paragraph);\n                                this.removeFieldInBlock(paragraph, true);\n                                this.removeFieldInBlock(paragraph, undefined, true);\n                                this.removeCommentsInBlock(paragraph);\n                            }\n                            else {\n                                this.addRemovedNodes(paragraph);\n                            }\n                            isCombineLastBlock = false;\n                        }\n                    }\n                }\n                return;\n            }\n        }\n        else {\n            if ((!(this.owner.enableTrackChanges && !this.skipTracking()) && end.paragraph === paragraph && end.paragraph.isInsideTable && (start.currentWidget.isFirstLine() && start.offset > selection.getStartOffset(start.paragraph) || !start.currentWidget.isFirstLine()) &&\n                end.offset >= selection.getLineLength(end.paragraph.lastChild) && end.paragraph.nextRenderedWidget)) {\n                this.combineLastBlock = true;\n            }\n            var newParagraph = undefined;\n            var previousBlock = paragraph.previousWidget;\n            var prevParagraph = (previousBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) ? previousBlock : undefined;\n            var nextWidget = paragraph.nextRenderedWidget;\n            if (editAction < 4) {\n                var skipParaMarkdeletion = false;\n                var isLast = (paragraph == this.getLastParaForBodywidgetCollection(paragraph));\n                if (isLast && paragraph === start.paragraph && !paragraph.isInsideTable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.containerWidget) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.containerWidget.containerWidget) && this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action !== 'Delete' && this.editorHistory.currentBaseHistoryInfo.action !== 'Enter') {\n                    skipParaMarkdeletion = true;\n                }\n                //Checks whether this is last paragraph of owner text body and previousBlock is not paragraph.\n                if (this.owner.enableTrackChanges && !this.skipTracking() && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action !== 'TOC') {\n                    var removedNodeLength = -1;\n                    if (this.editorHistory.currentBaseHistoryInfo) {\n                        removedNodeLength = this.editorHistory.currentBaseHistoryInfo.removedNodes.length;\n                    }\n                    this.insertRevisionForBlock(paragraph, 'Deletion', undefined, undefined, undefined, isRemoveInline, undefined);\n                    var charFormatRev = paragraph.characterFormat.revisions;\n                    if (paragraph.isEmpty()) {\n                        this.combineRevisionWithBlocks(paragraph);\n                    }\n                    else {\n                        // On deleting para, para items may be added with delete revisions so we need to ensure whether it can be combined with prev/ next para.\n                        this.combineRevisionWithBlocks(paragraph.firstChild.children[0]);\n                    }\n                    if (this.editorHistory.currentBaseHistoryInfo.action === 'Delete' && !this.isInsertingTOC) {\n                        // Changed the condition to update editposition if current para contains revision (deletion) and previous para contain revision (insertion) and both are selected case.\n                        if ((paragraph === end.paragraph && paragraph.containerWidget && !paragraph.isEmpty()) || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(start.paragraph.containerWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(end.paragraph.containerWidget) && !end.paragraph.isEmpty())) {\n                            var paraInfo = this.selection.getParagraphInfo(end);\n                            this.selection.editPosition = this.selection.getHierarchicalIndex(paraInfo.paragraph, paraInfo.offset.toString());\n                        }\n                        if (paragraph === start.paragraph) {\n                            var blockInfo = this.selection.getParagraph({ index: this.selection.editPosition });\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockInfo.paragraph)) {\n                                var paraInfo = this.selection.getParagraphInfo(end);\n                                this.selection.editPosition = this.selection.getHierarchicalIndex(paraInfo.paragraph, paraInfo.offset.toString());\n                            }\n                        }\n                    }\n                    if (start.paragraph !== paragraph && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n                        this.delBlockContinue = true;\n                        this.delBlock = block;\n                        return;\n                    }\n                }\n                else {\n                    //this.documentHelper.comments;\n                    var foot = void 0;\n                    /*  if (!isNullOrUndefined(selection.start.paragraph.bodyWidget.page.footnoteWidget)) {\n                          foot = selection.start.paragraph.bodyWidget.page.footnoteWidget;\n                      }else if (!isNullOrUndefined(selection.start.paragraph.bodyWidget.page.endnoteWidget)) {\n                          foot = selection.start.paragraph.bodyWidget.page.endnoteWidget;\n                      }*/\n                    newParagraph = this.checkAndInsertBlock(paragraph, start, end, editAction, prevParagraph);\n                    this.removeRevisionForBlock(paragraph, undefined, false, true);\n                    // Added the condition to skip to add entair paragraph (with para mark) into history if the current widget has the last widget. \n                    var isLastChild = (paragraph == this.getLastParaForBodywidgetCollection(paragraph));\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newParagraph) || !isLastChild) {\n                        skipParaMarkdeletion = false;\n                    }\n                    var isRemoved = false;\n                    if ((this.owner.enableTrackChanges || skipParaMarkdeletion) && (isLastChild || isRemoveInline)) {\n                        for (var i = paragraph.childWidgets.length - 1; i > -1; i--) {\n                            var line = (paragraph.childWidgets[i]);\n                            this.removeContent(line, 0, this.documentHelper.selection.getLineLength(line), undefined, false);\n                        }\n                        isRemoved = true;\n                    }\n                    else {\n                        // Added the condition to remove section if current and next para have different section indexes if selection is covered till the end of first section.\n                        var nextParagraph = this.selection.getNextParagraphBlock(paragraph);\n                        if (!isLastChild && !paragraph.isInsideTable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph) && paragraph.bodyWidget.sectionIndex !== nextParagraph.bodyWidget.sectionIndex) {\n                            this.deleteSection(selection, paragraph.bodyWidget, nextParagraph.bodyWidget, editAction);\n                            isStartParagraph = true;\n                        }\n                        this.addRemovedNodes(paragraph.clone());\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && !isStartParagraph && !paraReplace) {\n                        this.delBlock = block;\n                        var nextSection = block.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? block.bodyWidget : undefined;\n                        if (nextSection && section.index !== nextSection.index) {\n                            var bodyWidget = paragraph.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? paragraph.bodyWidget : undefined;\n                            this.deleteSection(selection, nextSection, bodyWidget, editAction);\n                        }\n                    }\n                    if (!isRemoved) {\n                        this.removeBlock(paragraph, undefined, undefined, isSelectionInsideTable);\n                    }\n                    /* let widget: IWidget;\n                     for(let i:number =0;i< foot.childWidgets.length; i++) {\n                     widget = foot.childWidgets[i];\n                     if (widget instanceof ParagraphWidget) {\n \n                     let para: ParagraphWidget = widget;\n                     if (!isNullOrUndefined(para)) {\n                         this.removeBlock(para);\n                     }}}*/\n                }\n                if (this.documentHelper.blockToShift === paragraph) {\n                    this.documentHelper.blockToShift = undefined;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newParagraph)) {\n                    selection.editPosition = this.selection.getHierarchicalIndex(newParagraph, '0');\n                    var offset = selection.getParagraphLength(newParagraph) + 1;\n                    if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        this.editorHistory.currentBaseHistoryInfo.endPosition = this.selection.getHierarchicalIndex(newParagraph, offset.toString());\n                    }\n                }\n                else if (paragraph === start.paragraph && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextWidget) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextWidget.bodyWidget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(section) && section.index !== nextWidget.bodyWidget.index)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevParagraph)) {\n                    var offset = void 0;\n                    // if (isNullOrUndefined(block)) {\n                    if (skipParaMarkdeletion) {\n                        offset = this.selection.getStartOffset(paragraph);\n                        selection.editPosition = this.selection.getHierarchicalIndex(paragraph, offset.toString());\n                    }\n                    else {\n                        offset = this.selection.getParagraphLength(prevParagraph);\n                        selection.editPosition = this.selection.getHierarchicalIndex(prevParagraph, offset.toString());\n                    }\n                    if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        this.updateHistoryPosition(selection.editPosition, true);\n                        this.editorHistory.currentBaseHistoryInfo.endPosition = selection.editPosition;\n                    }\n                    // } else {\n                    //     let offset: number = selection.getParagraphLength(paragraph) + 1;\n                    //     if (block instanceof ParagraphWidget) {\n                    //         prevParagraph = block as ParagraphWidget;\n                    //     }\n                    //     // if (block instanceof WTable) {\n                    //     //     prevParagraph = (block as WTable).getFirstParagraphInFirstCell();\n                    //     // }\n                    //     selection.editPosition = prevLineWidget.getHierarchicalIndex('0');\n                    // }\n                }\n            }\n            if (start.paragraph !== paragraph && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block)) {\n                this.delBlockContinue = true;\n                this.delBlock = block;\n            }\n            else {\n                this.delBlockContinue = false;\n                this.delBlock = undefined;\n            }\n        }\n        this.insertParagraphPaste(paragraph, currentParagraph, start, end, isCombineNextParagraph, editAction, isCombineLastBlock);\n    };\n    Editor.prototype.deletaRevisionIDs = function (format) {\n        if (format.removedIds.length > 0) {\n            while (format.removedIds.length > 0) {\n                format.removedIds.splice(0, 1);\n            }\n        }\n    };\n    Editor.prototype.deleteSection = function (selection, section, nextSection, editAction) {\n        if (editAction < 4) {\n            if (this.owner.enableCollaborativeEditing) {\n                var paragraphInfo = void 0;\n                var positionInfo = void 0;\n                // Find the start linear index of deleted HeadersFooters\n                var headerFooterWidget = this.owner.documentHelper.headersFooters[section.sectionIndex]['0'];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooterWidget)) {\n                    paragraphInfo = { 'paragraph': headerFooterWidget.firstChild, 'offset': 0 };\n                    positionInfo = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false });\n                    this.editorHistory.currentBaseHistoryInfo.headerFooterStart = positionInfo.position;\n                }\n                // Find the end linear index of deleted HeadersFooters\n                var keyCount = Object.keys(this.owner.documentHelper.headersFooters[section.sectionIndex]).length;\n                if (keyCount > 0) {\n                    headerFooterWidget = this.owner.documentHelper.headersFooters[section.sectionIndex][(keyCount - 1).toString()];\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(headerFooterWidget)) {\n                        var paraLength = this.owner.selectionModule.getParagraphLength(headerFooterWidget.lastChild);\n                        paragraphInfo = { 'paragraph': headerFooterWidget.lastChild, 'offset': paraLength + 1 };\n                        positionInfo = this.owner.selectionModule.getPositionInfoForHeaderFooter(paragraphInfo, { position: 0, done: false });\n                        this.editorHistory.currentBaseHistoryInfo.headerFooterEnd = positionInfo.position;\n                    }\n                }\n            }\n            this.combineSectionInternal(selection, section, nextSection);\n        }\n        //Copies the section properties, if this is last paragraph of section.\n        if (editAction > 2) {\n            section.sectionFormat.copyFormat(nextSection.sectionFormat);\n        }\n    };\n    /**\n     *\n     * @private\n     */\n    Editor.prototype.combineSectionInternal = function (selection, section, nextSection) {\n        // if (section.sectionFormat.isEqualFormat(nextSection.sectionFormat)) {\n        // } else {\n        var bodyWidget = section.getSplitWidgets()[0];\n        var currentSection = [];\n        var previousY = bodyWidget.y;\n        this.combineSectionChild(bodyWidget, currentSection, true);\n        bodyWidget = currentSection[0];\n        var lastBlockIndex = bodyWidget.lastChild.index;\n        this.updateBlockIndex(lastBlockIndex + 1, nextSection.firstChild);\n        var insertIndex = 0;\n        var containerWidget = nextSection;\n        containerWidget.y = previousY;\n        for (var i = 0; i < bodyWidget.childWidgets.length; i++) {\n            var block = bodyWidget.childWidgets.splice(i, 1)[0];\n            containerWidget.childWidgets.splice(insertIndex, 0, block);\n            block.containerWidget = containerWidget;\n            this.documentHelper.layout.layoutBodyWidgetCollection(block.index, block.bodyWidget, block, false);\n            block = block.getSplitWidgets().pop();\n            containerWidget = block.containerWidget;\n            insertIndex = block.indexInOwner + 1;\n            i--;\n        }\n        if (bodyWidget.sectionIndex > 0 && this.documentHelper.headersFooters[bodyWidget.sectionIndex]) {\n            bodyWidget.removedHeaderFooters = [];\n            var headerFooters = this.documentHelper.headersFooters.splice(bodyWidget.sectionIndex, 1)[0];\n            var keys = Object.keys(headerFooters);\n            for (var i = 0; i < keys.length; i++) {\n                var headerWidgetIn = headerFooters[keys[i]];\n                //if (headerWidgetIn.page) {\n                this.removeFieldInWidget(headerWidgetIn);\n                // Remove content control\n                this.removeFieldInWidget(headerWidgetIn, false, true);\n                //}\n                headerWidgetIn.page = undefined;\n            }\n            bodyWidget.removedHeaderFooters.push(headerFooters);\n        }\n        this.updateSectionIndex(undefined, nextSection, false);\n        this.addRemovedNodes(bodyWidget);\n        this.documentHelper.removeEmptyPages();\n        if (this.editorHistory && this.editorHistory.isUndoing && !(this.editorHistory.currentBaseHistoryInfo && (this.editorHistory.currentBaseHistoryInfo.endRevisionLogicalIndex || this.editorHistory.currentBaseHistoryInfo.lastElementRevision))) {\n            nextSection.sectionFormat = section.sectionFormat;\n        }\n        var page = nextSection.page;\n        do {\n            this.documentHelper.layout.layoutHeaderFooter(page.bodyWidgets[0], this.viewer, page);\n            page = page.nextPage;\n        } while (page);\n        // }\n    };\n    /* eslint-disable max-len */\n    Editor.prototype.checkAndInsertBlock = function (block, start, end, editAction, previousParagraph) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && block === start.paragraph || block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            var newParagraph = void 0; //Adds an empty paragraph, to ensure minimal content.\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.nextRenderedWidget) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph) || previousParagraph.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget)) {\n                newParagraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                if (editAction === 1 && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.paragraphFormat.baseStyle) && block.paragraphFormat.baseStyle.name === 'Normal') {\n                    newParagraph.characterFormat.copyFormat(block.characterFormat);\n                    // Added the condition to remove removedIds when document contain single empty paragraph\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.previousRenderedWidget) && newParagraph.characterFormat.removedIds.length !== 0) {\n                        while (newParagraph.characterFormat.removedIds.length > 0) {\n                            newParagraph.characterFormat.removedIds.splice(0, 1);\n                        }\n                    }\n                    newParagraph.paragraphFormat.copyFormat(block.paragraphFormat);\n                }\n                newParagraph.index = block.index + 1;\n                newParagraph.containerWidget = block.containerWidget;\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    newParagraph.paragraphFormat.lineSpacing = block.paragraphFormat.lineSpacing;\n                    newParagraph.paragraphFormat.lineSpacingType = block.paragraphFormat.lineSpacingType;\n                    var style = this.documentHelper.styles.findByName('Normal');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(style)) {\n                        newParagraph.paragraphFormat.baseStyle = new _format_style__WEBPACK_IMPORTED_MODULE_11__.WParagraphStyle();\n                        newParagraph.paragraphFormat.baseStyle.copyStyle(style);\n                    }\n                }\n                this.documentHelper.layout.layoutBodyWidgetCollection(newParagraph.index, newParagraph.bodyWidget, newParagraph, false);\n                if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.Widget) {\n                    block.containerWidget.childWidgets.push(newParagraph);\n                }\n            }\n            return newParagraph;\n        }\n        return undefined;\n    };\n    Editor.prototype.splitParagraph = function (paragraphAdv, startLine, startOffset, endLine, endOffset, removeBlock, skipElementRemoval, isSelectionInsideTable) {\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        paragraph.paragraphFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat(paragraph);\n        paragraph.characterFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(paragraph);\n        paragraph.paragraphFormat.copyFormat(paragraphAdv.paragraphFormat);\n        paragraph.characterFormat.copyFormat(paragraphAdv.characterFormat);\n        paragraph.characterFormat.removedIds = [];\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        paragraph.childWidgets.push(lineWidget);\n        var blockIndex = paragraphAdv.index;\n        var insertIndex = paragraphAdv.indexInOwner;\n        this.moveInlines(paragraphAdv, paragraph, 0, startOffset, startLine, endOffset, endLine, removeBlock);\n        if (paragraphAdv.containerWidget.childWidgets[insertIndex]) {\n            var bookmarks = [];\n            var line = (paragraphAdv.containerWidget.childWidgets[insertIndex]);\n            for (var i = 0; i < line.childWidgets.length; i++) {\n                var linewid = line.childWidgets[i];\n                for (var j = 0; j < linewid.children.length; j++) {\n                    var inline = linewid.children[j];\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        this.removeFootnote(inline);\n                    }\n                    else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && removeBlock) {\n                        if (!this.owner.enableTrackChanges || this.owner.enableTrackChanges && this.skipTracking()) {\n                            if (!(this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                                    bookmarks.push(inline);\n                                }\n                            }\n                            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                                if (this.documentHelper.bookmarks.containsKey(inline.name)) {\n                                    if (this.owner.enableCollaborativeEditing && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                                        this.editorHistory.currentBaseHistoryInfo.markerData.push({ bookmarkName: inline.name });\n                                    }\n                                    this.documentHelper.bookmarks.remove(inline.name);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (var i = bookmarks.length - 1; i >= 0; i--) {\n                this.removedBookmarkElements.push(bookmarks[i]);\n            }\n        }\n        //Inserts new paragraph in the current text position.\n        paragraphAdv.containerWidget.childWidgets.splice(insertIndex, 0, paragraph);\n        paragraph.index = blockIndex;\n        paragraph.containerWidget = paragraphAdv.containerWidget;\n        this.updateNextBlocksIndex(paragraph, true);\n        if (removeBlock) {\n            this.removeBlock(paragraphAdv, undefined, skipElementRemoval, isSelectionInsideTable);\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(blockIndex, paragraph.containerWidget, paragraph, false);\n        return paragraph;\n    };\n    Editor.prototype.removeCommentsInBlock = function (block) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            for (var i = 0; i < block.childWidgets.length; i++) {\n                var row = block.childWidgets[i];\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var cell = row.childWidgets[j];\n                    for (var k = 0; k < cell.childWidgets.length; k++) {\n                        var block_1 = cell.childWidgets[k];\n                        this.removeCommentsInBlock(block_1);\n                    }\n                }\n            }\n        }\n        else {\n            this.removeCommentInPara(block);\n        }\n    };\n    Editor.prototype.removeCommentInPara = function (block) {\n        for (var i = 0; i < block.childWidgets.length; i++) {\n            var lineWidget = block.childWidgets[i];\n            //Iterate through each line widgets.\n            for (var j = 0; j < lineWidget.children.length; j++) {\n                this.removeCommentsInline(lineWidget.children[j]);\n            }\n        }\n    };\n    Editor.prototype.removeCommentsInline = function (inline) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n            if (inline.commentType === 1) {\n                // if (!inline.comment.isReply) {\n                //     for (let i: number = 0; i < inline.comment.replyComments.length; i++) {\n                //         this.removeCommentsInline(inline.comment.replyComments[i].commentEnd);\n                //     }\n                // }\n                // if (inline.comment.commentStart && inline.comment.commentStart.commentMark) {\n                //     inline.comment.commentStart.removeCommentMark();\n                // }\n                // if (!inline.comment.isReply && this.documentHelper.comments.indexOf(inline.comment) >= 0\n                //     || inline.comment.isReply && this.documentHelper.comments.indexOf(inline.comment.ownerComment) >= 0) {\n                //     this.deleteCommentWidget(inline.comment);\n                // }\n            }\n            else {\n                inline.removeCommentMark();\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeBlock = function (block, isSkipShifting, skipElementRemoval, isSelectionInsideTable) {\n        var index;\n        var blockCollection;\n        var containerWidget;\n        if (!skipElementRemoval) {\n            this.removeFieldInBlock(block);\n            this.removeFieldInBlock(block, true);\n            this.removeFieldInBlock(block, undefined, true);\n            this.removeFieldInBlock(block, undefined, undefined, true);\n            this.removeCommentsInBlock(block);\n        }\n        if (block.isInsideTable) {\n            containerWidget = block.associatedCell;\n            //this.checkAndRemoveRevisionFromBlock(block, block instanceof TableWidget);\n            index = block.associatedCell.childWidgets.indexOf(block);\n            blockCollection = block.associatedCell.childWidgets;\n            this.updateNextBlocksIndex(block, false);\n            block.associatedCell.childWidgets.splice(index, 1);\n            block.containerWidget = undefined;\n            this.documentHelper.layout.layoutBodyWidgetCollection(block.index, containerWidget, block, false, undefined, isSelectionInsideTable);\n        }\n        else {\n            containerWidget = block.containerWidget;\n            this.checkAndRemoveRevisionFromBlock(block, true);\n            index = containerWidget.childWidgets.indexOf(block);\n            blockCollection = containerWidget.childWidgets;\n            this.updateNextBlocksIndex(block, false);\n            containerWidget.childWidgets.splice(index, 1);\n            block.containerWidget = undefined;\n            containerWidget.height -= block.height;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(containerWidget.containerWidget) && containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n                containerWidget.containerWidget.height -= block.height;\n            }\n            this.documentHelper.layout.layoutBodyWidgetCollection(block.index, containerWidget, block, false, isSkipShifting, isSelectionInsideTable);\n        }\n    };\n    Editor.prototype.checkAndRemoveRevisionFromBlock = function (block, isRowSelected) {\n        for (var i = 0; i < block.childWidgets.length; i++) {\n            var isSkipTracking = void 0;\n            if (!this.isPasteRevertAction()) {\n                isSkipTracking = this.skipTracking();\n            }\n            if (block.childWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget && !isSkipTracking) {\n                var tableDelete = block.childWidgets[i];\n                this.removeDeletedCellRevision(tableDelete, isRowSelected);\n            }\n            if (block.childWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget) {\n                var line = block.childWidgets[i];\n                for (var j = 0; j < line.children.length; j++) {\n                    var element = line.children[j];\n                    if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox && !this.selection.isEmpty) {\n                        this.removeFootnote(element);\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.removePrevParaMarkRevision = function (currentBlock, isFromDelete, addRemovedIDs) {\n        isFromDelete = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isFromDelete) ? false : isFromDelete;\n        if (this.owner.enableTrackChanges || currentBlock.characterFormat.revisions.length != 0) {\n            var currentPara = currentBlock;\n            var rangeIndex = -1;\n            var revision = void 0;\n            var nonEmptyEndPara = currentPara;\n            if (!isFromDelete && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nonEmptyEndPara.previousRenderedWidget)) {\n                nonEmptyEndPara = nonEmptyEndPara.previousRenderedWidget;\n            }\n            if (nonEmptyEndPara.characterFormat.revisions.length > 0) {\n                revision = nonEmptyEndPara.characterFormat.revisions[nonEmptyEndPara.characterFormat.revisions.length - 1];\n                rangeIndex = revision.range.indexOf(nonEmptyEndPara.characterFormat);\n            }\n            if (rangeIndex >= 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                var lastRange = revision.range[rangeIndex];\n                var isParaMark = lastRange instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat;\n                if (isParaMark) {\n                    revision.range.splice(rangeIndex, 1);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                    if (nonEmptyEndPara.characterFormat && nonEmptyEndPara.characterFormat.revisions.indexOf(revision) > -1) {\n                        if (addRemovedIDs) {\n                            currentBlock.characterFormat.removedIds.push(revision.revisionID);\n                        }\n                        nonEmptyEndPara.characterFormat.revisions.splice(nonEmptyEndPara.characterFormat.revisions.indexOf(revision), 1);\n                    }\n                    if (revision.range.length == 0) {\n                        this.owner.revisionsInternal.remove(revision);\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.isPasteRevertAction = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action === 'Paste') {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.toCheckForTrack = function (block) {\n        if (this.owner.enableTrackChanges && !this.skipTracking()) {\n            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget && block.childWidgets.length > 0) {\n                var rowFormat = block.childWidgets[0].rowFormat;\n                if ((rowFormat.revisions.length > 0 && rowFormat.revisions[0].revisionType !== 'Insertion'\n                    && rowFormat.revisions[0].author === (this.owner.currentUser === '' ? 'Guest user' : this.owner.currentUser))\n                    || (rowFormat.revisions.length === 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeFootnote = function (element, paragraph) {\n        if (element.paragraph.bodyWidget.page.footnoteWidget) {\n            var footnoteWidget = element.paragraph.bodyWidget.page.footnoteWidget;\n            for (var j = 0; j < footnoteWidget.bodyWidgets.length; j++) {\n                if (element === (footnoteWidget.bodyWidgets[j]).footNoteReference) {\n                    footnoteWidget.height -= footnoteWidget.bodyWidgets[j].childWidgets[0].height;\n                    if (this.owner.enableTrackChanges) {\n                        for (var i = 0; i < footnoteWidget.bodyWidgets[j].childWidgets.length; i++) {\n                            this.removeRevisionForBlock(footnoteWidget.bodyWidgets[j].childWidgets[i], undefined, false, true);\n                        }\n                    }\n                    footnoteWidget.bodyWidgets.splice(j, 1);\n                    j--;\n                    this.isFootnoteElementRemoved = true;\n                }\n            }\n            if (footnoteWidget.bodyWidgets.length === 0) {\n                element.paragraph.bodyWidget.page.footnoteWidget = undefined;\n            }\n        }\n        this.documentHelper.footnoteCollection.splice(this.documentHelper.footnoteCollection.indexOf(element), 1);\n        this.updateFootNoteIndex();\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeEndnote = function (element, paragraph) {\n        var lastpage = this.documentHelper.pages.length;\n        var bodyWidget = this.documentHelper.pages[lastpage - 1].bodyWidgets[0];\n        if (bodyWidget.page.endnoteWidget) {\n            var endnoteWidget = bodyWidget.page.endnoteWidget;\n            for (var j = 0; j < endnoteWidget.bodyWidgets.length; j++) {\n                if (element === (endnoteWidget.bodyWidgets[j]).footNoteReference) {\n                    endnoteWidget.height -= endnoteWidget.bodyWidgets[j].childWidgets[0].height;\n                    if (this.owner.enableTrackChanges) {\n                        for (var i = 0; i < endnoteWidget.bodyWidgets[j].childWidgets.length; i++) {\n                            this.removeRevisionForBlock(endnoteWidget.bodyWidgets[j].childWidgets[i], undefined, false, true);\n                        }\n                    }\n                    endnoteWidget.bodyWidgets.splice(j, 1);\n                    this.isEndnoteElementRemoved = true;\n                    j--;\n                }\n            }\n            if (endnoteWidget.bodyWidgets.length === 0) {\n                bodyWidget.page.endnoteWidget = undefined;\n            }\n        }\n        this.documentHelper.endnoteCollection.splice(this.documentHelper.endnoteCollection.indexOf(element), 1);\n        this.updateEndNoteIndex();\n    };\n    Editor.prototype.removeAutoShape = function (inline) {\n        var shapeIndex = inline.line.paragraph.floatingElements.indexOf(inline);\n        var floatingElementIndex = inline.line.paragraph.bodyWidget.floatingElements.indexOf(inline);\n        if (floatingElementIndex > -1) {\n            inline.line.paragraph.bodyWidget.floatingElements.splice(floatingElementIndex, 1);\n        }\n        inline.line.paragraph.floatingElements.splice(shapeIndex, 1);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeField = function (block, isBookmark, isContentControl, isEditRange) {\n        if (isEditRange) {\n            var editRangeCollection = this.documentHelper.editRanges.keys;\n            for (var i = 0; i < editRangeCollection.length; i++) {\n                var editRangeElements = this.documentHelper.editRanges.get(editRangeCollection[i]);\n                for (var j = 0; j < editRangeElements.length; j++) {\n                    var element = editRangeElements[j];\n                    if (element.line.paragraph === block) {\n                        editRangeElements.splice(j, 1);\n                        j--;\n                    }\n                }\n                if (editRangeElements.length === 0) {\n                    this.documentHelper.editRanges.remove(editRangeCollection[i]);\n                    i--;\n                }\n            }\n        }\n        else {\n            var collection = this.documentHelper.fields;\n            if (isBookmark) {\n                collection = this.documentHelper.bookmarks.keys;\n            }\n            else if (isContentControl) {\n                collection = this.documentHelper.contentControlCollection;\n            }\n            if (block.floatingElements.length > 0) {\n                for (var z = 0; z < block.floatingElements.length; z++) {\n                    var inline = block.floatingElements[z];\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ShapeElementBox && inline.textFrame && inline.textFrame.childWidgets.length > 0) {\n                        for (var i = 0; i < inline.textFrame.childWidgets.length; i++) {\n                            var block_2 = inline.textFrame.childWidgets[i];\n                            this.removeFieldInBlock(block_2, isBookmark, isContentControl);\n                        }\n                    }\n                    this.removeAutoShape(inline);\n                    z--;\n                }\n            }\n            for (var i = 0; i < collection.length; i++) {\n                var element = isBookmark ?\n                    this.documentHelper.bookmarks.get(collection[i]) : collection[i];\n                if (element.line.paragraph === block || (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.reference) && element.reference.line.paragraph === block)) {\n                    if (isBookmark) {\n                        this.documentHelper.bookmarks.remove(collection[i]);\n                        element.line.children.splice(element.indexInOwner, 1);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.line.paragraph.associatedCell)) {\n                            var cell = element.line.paragraph.associatedCell;\n                            cell.isRenderBookmarkStart ? cell.isRenderBookmarkStart = false : cell.isRenderBookmarkEnd = false;\n                        }\n                        var endBookMarkElement = element.reference;\n                        if (endBookMarkElement) {\n                            endBookMarkElement.line.children.splice(endBookMarkElement.indexInOwner, 1);\n                        }\n                        if (endBookMarkElement && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endBookMarkElement.line.paragraph.associatedCell)) {\n                            var cell = endBookMarkElement.line.paragraph.associatedCell;\n                            cell.isRenderBookmarkStart ? cell.isRenderBookmarkStart = false : cell.isRenderBookmarkEnd = false;\n                        }\n                    }\n                    else if (isContentControl) {\n                        this.documentHelper.contentControlCollection.splice(i, 1);\n                    }\n                    else {\n                        this.documentHelper.fields.splice(i, 1);\n                        if (this.documentHelper.formFields.indexOf(element) !== -1) {\n                            this.documentHelper.formFields.splice(this.documentHelper.formFields.indexOf(element), 1);\n                        }\n                    }\n                    i--;\n                }\n            }\n        }\n        if (this.documentHelper.footnoteCollection.length > 0) {\n            for (var i = 0; i < this.documentHelper.footnoteCollection.length; i++) {\n                var element = this.documentHelper.footnoteCollection[i];\n                if (element.line.paragraph === block) {\n                    if (element.paragraph.bodyWidget.page.footnoteWidget) {\n                        var footnote = element.paragraph.bodyWidget.page.footnoteWidget;\n                        for (var j = 0; j < footnote.bodyWidgets.length; j++) {\n                            if (element === (footnote.bodyWidgets[j]).footNoteReference) {\n                                footnote.height -= (footnote.bodyWidgets[j]).height;\n                                footnote.bodyWidgets.splice(j, 1);\n                                j--;\n                            }\n                        }\n                        if (footnote.bodyWidgets.length === 0) {\n                            element.paragraph.bodyWidget.page.footnoteWidget = undefined;\n                        }\n                    }\n                    this.documentHelper.footnoteCollection.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        if (this.documentHelper.endnoteCollection.length > 0) {\n            for (var i = 0; i < this.documentHelper.endnoteCollection.length; i++) {\n                var element = this.documentHelper.endnoteCollection[i];\n                if (element.line.paragraph === block) {\n                    if (element.paragraph.bodyWidget.page.endnoteWidget) {\n                        var endnote = element.paragraph.bodyWidget.page.endnoteWidget;\n                        for (var j = 0; j < endnote.bodyWidgets.length; j++) {\n                            if (element === (endnote.bodyWidgets[j]).footNoteReference) {\n                                endnote.height -= (endnote.bodyWidgets[j]).height;\n                                endnote.bodyWidgets.splice(j, 1);\n                                j--;\n                            }\n                        }\n                        if (endnote.bodyWidgets.length === 0) {\n                            element.paragraph.bodyWidget.page.endnoteWidget = undefined;\n                        }\n                    }\n                    this.documentHelper.endnoteCollection.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getTabsInSelection = function () {\n        var oldTabstops = [];\n        var selection = this.owner.selectionModule;\n        var selectedWidgets = selection.selectedWidgets.keys;\n        var paragraphsInSelection = [];\n        if (selectedWidgets.length === 0) {\n            return selection.start.paragraph.paragraphFormat.getUpdatedTabs();\n        }\n        else if (selection.start.paragraph === selection.end.paragraph) {\n            return selection.start.paragraph.paragraphFormat.getUpdatedTabs();\n        }\n        else if (selection.start.paragraph !== selection.end.paragraph) {\n            paragraphsInSelection = this.owner.selectionModule.getParagraphsInSelection();\n        }\n        var para = paragraphsInSelection.length > 0 ? paragraphsInSelection[0] : undefined;\n        var tabs = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(para) ? para.paragraphFormat.getUpdatedTabs() : [];\n        var isRemove = true;\n        for (var j = 0; j < tabs.length; j++) {\n            oldTabstops.push(tabs[j]);\n        }\n        for (var i = 1; i < paragraphsInSelection.length; i++) {\n            var para_1 = paragraphsInSelection[i];\n            var newCollection = para_1.paragraphFormat.getUpdatedTabs();\n            var itemsToRemove = [];\n            isRemove = true;\n            for (var k = 0; k < oldTabstops.length; k++) {\n                for (var j = 0; j < newCollection.length; j++) {\n                    if (newCollection[j].equals(oldTabstops[k])) {\n                        isRemove = false;\n                        break;\n                    }\n                }\n                if (isRemove) {\n                    itemsToRemove.push(oldTabstops[k]);\n                }\n            }\n            for (var k = 0; k < itemsToRemove.length; k++) {\n                oldTabstops.splice(oldTabstops.indexOf(itemsToRemove[k]), 1);\n            }\n        }\n        return oldTabstops;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.updateTabStopCollection = function (paragraph, newCollection, isReplace) {\n        var oldCollection = paragraph.paragraphFormat.tabs;\n        if (isReplace) {\n            paragraph.paragraphFormat.tabs = [];\n            for (var i = 0; i < newCollection.length; i++) {\n                paragraph.paragraphFormat.tabs.push(newCollection[i]);\n            }\n            return;\n        }\n        for (var i = 0; i < newCollection.length; i++) {\n            var newTab = newCollection[i];\n            var index = -1;\n            for (var j = 0; j < oldCollection.length; j++) {\n                var oldTab = oldCollection[j];\n                if (newTab.position === oldTab.position) {\n                    index = j;\n                    break;\n                }\n                else if (newTab.position < oldTab.position) {\n                    break;\n                }\n            }\n            if (index >= 0) {\n                this.modifyTabStop(oldCollection[index], newTab);\n            }\n            else {\n                this.addTabStopToCollection(oldCollection, newTab);\n            }\n        }\n    };\n    Editor.prototype.modifyTabStop = function (oldTab, newTab) {\n        oldTab.deletePosition = newTab.deletePosition;\n        oldTab.tabJustification = newTab.tabJustification;\n        oldTab.tabLeader = newTab.tabLeader;\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeTabStops = function (paragraphs, tabs) {\n        for (var k = 0; k < paragraphs.length; k++) {\n            var tabCollection = paragraphs[k].paragraphFormat.tabs;\n            for (var i = 0; i < tabs.length; i++) {\n                var tab = tabs[i];\n                for (var j = 0; j < tabCollection.length; j++) {\n                    if (tabCollection[j].equals(tab)) {\n                        tabCollection.splice(j, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.addTabStopToCollection = function (collection, tab, isReturnIndex) {\n        var index = -1;\n        for (var i = 0; i < collection.length; i++) {\n            var element = collection[i];\n            if (element.position > tab.position) {\n                index = i;\n                break;\n            }\n        }\n        index = index === -1 ? collection.length : index;\n        if (isReturnIndex) {\n            return index;\n        }\n        collection.splice(index, 0, tab.clone());\n        return index;\n    };\n    /**\n     * @private\n     * @param {IWidget} node Specifies the node.\n     * @returns {void}\n     */\n    Editor.prototype.addRemovedNodes = function (node, isInsertBefore) {\n        if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox && node.commentType === 0 && node.commentMark) {\n            node.removeCommentMark();\n        }\n        if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n            if (node.type === 0) {\n                this.documentHelper.contentControlCollection.splice(this.documentHelper.contentControlCollection.indexOf(node), 1);\n            }\n            else {\n                this.updatePropertiesToBlock(node.reference);\n            }\n        }\n        if (node instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && node.fieldType === 0) {\n            if (this.documentHelper.fields.indexOf(node) !== -1) {\n                this.documentHelper.fields.splice(this.documentHelper.fields.indexOf(node), 1);\n            }\n            if (this.documentHelper.formFields.indexOf(node) !== -1) {\n                this.documentHelper.formFields.splice(this.documentHelper.formFields.indexOf(node), 1);\n            }\n        }\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            if (isInsertBefore) {\n                this.editorHistory.currentBaseHistoryInfo.removedNodes.splice(0, 0, node);\n            }\n            else {\n                this.editorHistory.currentBaseHistoryInfo.removedNodes.push(node);\n            }\n        }\n        else if (this.editHyperlinkInternal) {\n            this.nodes.push(node);\n        }\n    };\n    Editor.prototype.deleteBlock = function (block, selection, start, end, editAction) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            this.deletePara(block, start, end, editAction);\n            if (this.delBlockContinue && this.delBlock) {\n                if (this.delSection) {\n                    var bodyWidget = block.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? block.bodyWidget : undefined;\n                    this.deleteSection(selection, this.delSection, bodyWidget, editAction);\n                    this.delSection = undefined;\n                }\n                if (this.delBlock.indexInOwner !== -1) {\n                    this.deleteBlock(this.delBlock, selection, start, end, editAction);\n                }\n                this.delBlockContinue = false;\n                this.delBlock = undefined;\n            }\n        }\n        else {\n            this.deleteTableBlock(block, selection, start, end, editAction);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.childWidgets) && this.owner.enableTrackChanges && !this.skipTracking()) {\n                this.documentHelper.layout.reLayoutTable(block);\n            }\n        }\n    };\n    Editor.prototype.deleteTableCell = function (cellAdv, selection, start, end, editAction, isDeletecell) {\n        var deletePreviousBlock = !(start.paragraph.isInsideTable && cellAdv.ownerTable.contains(start.paragraph.associatedCell));\n        var previousBlock = cellAdv.ownerTable.previousRenderedWidget;\n        if (start.paragraph.isInsideTable) {\n            var containerCell = selection.getContainerCellOf(cellAdv, start.paragraph.associatedCell);\n            if (containerCell.ownerTable.contains(start.paragraph.associatedCell)) {\n                var startCell = selection.getSelectedCell(cellAdv, containerCell);\n                var endCell = selection.getSelectedCell(start.paragraph.associatedCell, containerCell);\n                if (selection.containsCell(containerCell, start.paragraph.associatedCell)) {\n                    //Selection end is in container cell.\n                    if (selection.isCellSelected(containerCell, start, end)) {\n                        //Container cell is completely selected.\n                        this.updateEditPosition(containerCell, selection);\n                        if (editAction === 1 || isDeletecell) {\n                            //Specifically handled for backspace. Delete selected cell in current table.\n                            this.deleteCellsInTable(cellAdv.ownerRow.ownerTable, selection, start, end, editAction);\n                        }\n                        else {\n                            //Delete contents within table cell or Copy contents within table cell to clipboard.\n                            var isCellCleared = this.deleteCell(containerCell, selection, editAction, true);\n                            if (!isCellCleared && editAction !== 2 && this.editorHistory) {\n                                this.editorHistory.currentBaseHistoryInfo = undefined;\n                            }\n                            else if (isCellCleared) {\n                                this.documentHelper.layout.reLayoutTable(containerCell.ownerRow.ownerTable);\n                            }\n                        }\n                    }\n                    else {\n                        if (startCell === containerCell) {\n                            this.deletePara(end.paragraph, start, end, editAction);\n                            if (this.delBlockContinue && this.delBlock) {\n                                if (this.delSection) {\n                                    var para = end.paragraph;\n                                    var bodyWidget = para.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? para.bodyWidget : undefined;\n                                    this.deleteSection(selection, this.delSection, bodyWidget, editAction);\n                                    this.delSection = undefined;\n                                }\n                                this.deleteBlock(this.delBlock, selection, start, end, editAction);\n                                this.delBlockContinue = false;\n                                this.delBlock = undefined;\n                            }\n                        }\n                        else {\n                            this.deleteContainer(startCell, selection, start, end, editAction);\n                        }\n                    }\n                }\n                else {\n                    if (editAction === 2) {\n                        //Delete contents within table cell.\n                        this.deleteCell(cellAdv, selection, 2, false);\n                    }\n                    else {\n                        deletePreviousBlock = false;\n                        //Delete other selected cells in current table.\n                        this.deleteCellsInTable(containerCell.ownerTable, selection, start, end, editAction);\n                    }\n                }\n            }\n            else {\n                //Selection end is different table.\n                this.deleteContainer(containerCell, selection, start, end, editAction);\n            }\n        }\n        else {\n            //Selection end is outside table.\n            var cell = selection.getContainerCell(cellAdv);\n            //Added the condition to remove the entire table when the selection contains a table with the above paragraph.\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                this.deleteTableBlock(cell.ownerTable, selection, start, end, editAction);\n                deletePreviousBlock = false;\n            }\n            else {\n                this.deleteContainer(cell, selection, start, end, editAction);\n            }\n        }\n        if (deletePreviousBlock) {\n            var sectionAdv = previousBlock.bodyWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? previousBlock.bodyWidget : undefined;\n            // this.deleteContent(cellAdv.ownerTable, selection, editAction);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousBlock)) {\n                // let nextSection: WSection = blockAdv.section instanceof WSection ? blockAdv.section as WSection : undefined;\n                // if (sectionAdv !== nextSection) {\n                //     this.deleteSection(selection, sectionAdv, nextSection, editAction);\n                // }\n                //Goto the next block.\n                this.deleteBlock(previousBlock, selection, start, end, editAction);\n            }\n        }\n    };\n    Editor.prototype.deleteCellsInTable = function (table, selection, start, end, editAction, endCells) {\n        var _this = this;\n        var clonedTable = undefined;\n        var action = 'Delete';\n        var isDeleteCells = false;\n        var startCell = start.paragraph.associatedCell;\n        var endCell = end.paragraph.associatedCell;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCells)) {\n            endCell = endCells;\n        }\n        var parentTable = this.documentHelper.layout.getParentTable(startCell);\n        var parentStartCell = this.documentHelper.layout.getParentCell(startCell);\n        var parentEndCell = this.documentHelper.layout.getParentCell(endCell);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCells) && start.paragraph.isInsideTable && end.paragraph.isInsideTable &&\n            this.selection.isCellSelected(parentStartCell, start, end)) {\n            startCell = parentStartCell;\n            endCell = parentEndCell;\n        }\n        var startColumnIndex = startCell.columnIndex;\n        var endColumnIndex = endCell.columnIndex + endCell.cellFormat.columnSpan - 1;\n        var startRowIndex = startCell.rowIndex;\n        var endRowIndex = endCell.rowIndex;\n        var isRowSelected = this.isWholeRowSelected(startCell.ownerRow, startColumnIndex, endColumnIndex);\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            action = this.editorHistory.currentBaseHistoryInfo.action;\n            isDeleteCells = this.editorHistory.currentBaseHistoryInfo.action === 'BackSpace' || this.editorHistory.currentBaseHistoryInfo.action === 'DeleteCells'\n                || this.editorHistory.currentBaseHistoryInfo.action === 'InsertTable' || this.editorHistory.currentBaseHistoryInfo.action === 'RemoveRowTrack' || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startCell.ownerRow.previousWidget)\n                && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell.ownerRow.nextWidget) && this.editorHistory.currentBaseHistoryInfo.action === 'Cut');\n            // let isCellSelected: boolean = false;\n            // if (this.editorHistory.currentBaseHistoryInfo.action === 'RemoveRowTrack' && start.paragraph.isInsideTable && end.paragraph.isInsideTable &&\n            //     this.selection.isCellSelected(startCell, start, end) && startCell === endCell) {\n            //     isCellSelected = true;\n            // }\n            // if (!isCellSelected) {\n            clonedTable = this.cloneTableToHistoryInfo(table, table === parentTable);\n            // }\n            if (this.editorHistory.isRedoing && this.editorHistory.currentBaseHistoryInfo.action === 'RemoveRowTrack') {\n                for (var i = 0; i < table.childWidgets.length; i++) {\n                    var row = table.childWidgets[i];\n                    if (row.index >= startRowIndex && row.index <= endRowIndex) {\n                        if (isRowSelected) {\n                            this.trackRowDeletion(row, false);\n                        }\n                    }\n                }\n            }\n            if (this.editorHistory.currentBaseHistoryInfo.action === 'RemoveRowTrack') {\n                // if (isCellSelected) {\n                //     this.deleteBlock(startCell.lastChild as BlockWidget, this.selection, start, end, editAction);\n                // }\n                return;\n            }\n            this.editorHistory.currentBaseHistoryInfo.action = isDeleteCells ? 'DeleteCells' : 'ClearCells';\n            selection.owner.isLayoutEnabled = false;\n        }\n        //let cells: TableCellWidget[] = [];\n        if (this.owner.enableTrackChanges && !this.skipTracking()) {\n            var isOkButtonClick_1 = false;\n            if (!isRowSelected) {\n                if (editAction === 1) {\n                    var localizeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                    var tiltle = localizeValue.getConstant('UnTrack');\n                    var content = localizeValue.getConstant('Merge Track');\n                    localizeValue.setLocale(this.owner.locale);\n                    this.alertDialog = _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n                        title: tiltle,\n                        content: content,\n                        showCloseIcon: true,\n                        okButton: {\n                            text: 'Ok', click: function () {\n                                isOkButtonClick_1 = true;\n                                _this.onConfirmedTableCellsDeletion(table, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected, action);\n                            }\n                        },\n                        closeOnEscape: true, position: { X: 'center', Y: 'center' },\n                        animationSettings: { effect: 'Zoom' },\n                        close: function () {\n                            if (!isOkButtonClick_1) {\n                                _this.documentHelper.layout.reLayoutTable(table);\n                                _this.viewer.updateScrollBars();\n                            }\n                        }\n                    });\n                    this.alertDialog.enableRtl = this.owner.enableRtl;\n                }\n                else {\n                    this.trackDeletedContentInTableCell(table, selection, start, end, editAction, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex);\n                }\n            }\n            else {\n                this.onConfirmedTableCellsDeletion(table, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected, action);\n            }\n        }\n        else {\n            this.onConfirmedTableCellsDeletion(table, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected, action);\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeDeletedCellRevision = function (row, isRowSelected) {\n        if (row.rowFormat.revisions.length > 0 && isRowSelected) {\n            this.unlinkRangeFromRevision(row.rowFormat, true);\n        }\n        for (var i = 0; i < row.childWidgets.length; i++) {\n            var cellWidget = row.childWidgets[i];\n            for (var j = 0; j < cellWidget.childWidgets.length; j++) {\n                var paraWidget = cellWidget.childWidgets[j];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget) && paraWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    for (var lineIndex = 0; lineIndex < paraWidget.childWidgets.length; lineIndex++) {\n                        var lineWidget = paraWidget.childWidgets[lineIndex];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lineWidget.children)) {\n                            for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                                var element = lineWidget.children[elementIndex];\n                                if (element.revisions.length > 0) {\n                                    this.unlinkRangeFromRevision(element, true);\n                                }\n                            }\n                        }\n                    }\n                    this.unlinkRangeFromRevision(paraWidget.characterFormat, true);\n                }\n                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget) && paraWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                    for (var k = 0; k < paraWidget.childWidgets.length; k++) {\n                        var tableRow = paraWidget.childWidgets[k];\n                        this.removeDeletedCellRevision(tableRow, true);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeDeletedShapeRevision = function (shape) {\n        var textFrame = shape.textFrame;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textFrame)) {\n            for (var i = 0; i < textFrame.childWidgets.length; i++) {\n                var paraWidget = textFrame.childWidgets[i];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget) && paraWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    for (var lineIndex = 0; lineIndex < paraWidget.childWidgets.length; lineIndex++) {\n                        var lineWidget = paraWidget.childWidgets[lineIndex];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lineWidget.children)) {\n                            for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                                var element = lineWidget.children[elementIndex];\n                                if (element.revisions.length > 0) {\n                                    this.unlinkRangeFromRevision(element, true);\n                                }\n                            }\n                        }\n                    }\n                    this.unlinkRangeFromRevision(paraWidget.characterFormat, true);\n                }\n            }\n        }\n    };\n    /**\n     * Public API for inserting shape.\n     *\n     * @private\n     * @returns {ShapeElementBox} - Returns selection start position.\n     */\n    Editor.prototype.insertShape = function (shapeType, shapeProperties) {\n        var shape = this.getShape(shapeType, shapeProperties);\n        this.owner.documentHelper.selection.start.currentWidget.children.push(shape);\n        this.reLayout(this.owner.documentHelper.selection);\n        this.documentHelper.currentPage.bodyWidgets[0].floatingElements.push(shape);\n    };\n    /**\n     * Returns the shape object of the user choice.\n     *\n     * @private\n     * @returns {ShapeElementBox} - Returns selection start position.\n     */\n    Editor.prototype.getShape = function (shapeType, shapeProperties) {\n        var shape = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ShapeElementBox().clone();\n        shape.shapeId = parseInt(Date.now().toString().slice(0, 10), 10);\n        shape.name = shapeType + (\" \" + (this.documentHelper.currentPage.bodyWidgets[0].floatingElements.length + 1));\n        shapeProperties = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties) ? {} : shapeProperties;\n        shape.x = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.x) ? 50 : shapeProperties.x;\n        shape.y = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.x) ? 50 : shapeProperties.y;\n        shape.autoShapeType = shapeType;\n        if (shapeType === 'UpDownArrow') {\n            shape.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.height) ? 140 : shapeProperties.height;\n            shape.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.width) ? 96 : shapeProperties.width;\n        }\n        else if (shapeType === 'LeftRightArrow' || shapeType === 'LeftRightArrowCallout') {\n            shape.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.height) ? 80 : shapeProperties.height;\n            shape.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.width) ? 140 : shapeProperties.width;\n        }\n        else {\n            shape.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.height) ? 96 : shapeProperties.height;\n            shape.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.width) ? 96 : shapeProperties.width;\n        }\n        shape.visible = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.visible) ? true : shapeProperties.visible;\n        shape.widthScale = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.widthScale) ? 100 : shapeProperties.widthScale;\n        shape.heightScale = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.heightScale) ? 100 : shapeProperties.heightScale;\n        shape.verticalPosition = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.verticalPosition) ? shape.y : shapeProperties.verticalPosition;\n        // shape.verticalPosition = HelperMethods.convertPixelToPoint(this.owner.documentHelper.selection.start.location.y);\n        shape.verticalOrigin = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.verticalOrigin) ? \"Paragraph\" : shapeProperties.verticalOrigin;\n        shape.verticalAlignment = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.verticalAlignment) ? 'None' : shapeProperties.verticalAlignment;\n        shape.verticalRelativePercent = -3.4028235e+38;\n        shape.horizontalPosition = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.horizontalPosition) ? shape.x : shapeProperties.horizontalPosition;\n        // shape.horizontalPosition = HelperMethods.convertPixelToPoint(this.owner.documentHelper.selection.start.location.x);\n        shape.horizontalRelativePercent = -3.4028235e+38;\n        shape.heightRelativePercent = -3.4028235e+38;\n        shape.widthRelativePercent = 0;\n        shape.horizontalOrigin = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.horizontalOrigin) ? 'Column' : shapeProperties.horizontalOrigin;\n        shape.horizontalAlignment = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.horizontalAlignment) ? 'None' : shapeProperties.horizontalAlignment;\n        shape.zOrderPosition = 251659264;\n        shape.allowOverlap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.allowOverLap) ? true : shapeProperties.allowOverLap;\n        shape.textWrappingStyle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.textWrappingStyle) ? 'InFrontOfText' : shapeProperties.textWrappingStyle;\n        shape.textWrappingType = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.textWrappingType) ? 'Both' : shapeProperties.textWrappingType;\n        shape.isBelowText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.isBelowText) ? false : shapeProperties.isBelowText;\n        shape.distanceBottom = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.distanceBottom) ? 0 : shapeProperties.distanceBottom;\n        shape.distanceTop = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.distanceTop) ? 0 : shapeProperties.distanceTop;\n        shape.distanceLeft = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.distanceLeft) ? 12 : shapeProperties.distanceLeft;\n        shape.distanceRight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.distanceRight) ? 12 : shapeProperties.distanceRight;\n        shape.isHorizontalRule = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.isHorizontalRule) ? false : shapeProperties.isHorizontalRule;\n        shape.layoutInCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.layoutInCell) ? true : shapeProperties.layoutInCell;\n        shape.lockAnchor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lockAnchor) ? false : shapeProperties.lockAnchor;\n        var textFrame = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFrame();\n        if (shapeType === 'Arc' || shapeType === 'CurvedConnector' || shapeType === 'ElbowConnector') {\n            textFrame.textVerticalAlignment = 'Top';\n        }\n        else {\n            textFrame.textVerticalAlignment = 'Middle';\n            // textFrame.textVerticalAlignment = 'Center';\n        }\n        textFrame.marginLeft = 10;\n        textFrame.marginRight = 10;\n        textFrame.marginTop = 5;\n        textFrame.marginBottom = 5;\n        shape.textFrame = textFrame;\n        textFrame.containerShape = shape;\n        var fillFormat = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FillFormat();\n        if (shapeType === 'Arc' || shapeType === 'CurvedConnector' || shapeType === 'ElbowConnector' || shapeType === 'DoubleBracket' || shapeType === 'DoubleBrace' || shapeType === 'RightBrace' || shapeType === 'LeftBrace' || shapeType === 'RightBracket' || shapeType === 'LeftBracket') {\n            fillFormat.color = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.fillColor) ? \"#FFFFFFFF\" : shapeProperties.fillColor;\n            fillFormat.fill = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.fill) ? true : shapeProperties.fill;\n        }\n        else {\n            fillFormat.fill = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.fill) ? true : shapeProperties.fill;\n            fillFormat.color = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.fillColor) ? '#156082FF' : shapeProperties.fillColor;\n        }\n        shape.fillFormat = fillFormat;\n        var lineFormat = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineFormat();\n        lineFormat.lineFormatType = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lineFormatType) ? \"Solid\" : shapeProperties.lineFormatType;\n        lineFormat.dashStyle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.dashStyle) ? \"Solid\" : shapeProperties.dashStyle;\n        lineFormat.line = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.line) ? true : shapeProperties.line;\n        if (shapeType === 'Arc' || shapeType === 'CurvedConnector' || shapeType === 'ElbowConnector' || shapeType === 'DoubleBracket' || shapeType === 'DoubleBrace' || shapeType === 'RightBrace' || shapeType === 'LeftBrace' || shapeType === 'RightBracket' || shapeType === 'LeftBracket') {\n            lineFormat.color = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lineColor) ? \"#156082FF\" : shapeProperties.lineColor;\n            lineFormat.weight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lineWeight) ? 0.5 : shapeProperties.lineWeight;\n        }\n        else {\n            lineFormat.color = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lineColor) ? \"#042433FF\" : shapeProperties.lineColor;\n            lineFormat.weight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(shapeProperties.lineWeight) ? 1 : shapeProperties.lineWeight;\n        }\n        shape.lineFormat = lineFormat;\n        shape.line = this.owner.documentHelper.selection.start.currentWidget;\n        return shape;\n    };\n    Editor.prototype.trackDeletedContentInTableCell = function (table, selection, start, end, editAction, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex) {\n        var _a;\n        var startCell;\n        var endCell;\n        if (this.selection.hasMergedCells()) {\n            startCell = this.selection.getCellFromSelectionInTable(0);\n            endCell = this.selection.getCellFromSelectionInTable(1);\n        }\n        else {\n            startCell = this.selection.getCellFromSelection(0);\n            endCell = this.selection.getCellFromSelection(1);\n        }\n        var startIndex = this.selection.getActualOffset(startCell, 0);\n        var endIndex = this.selection.getActualOffset(endCell, 1);\n        var removedNodes = [];\n        var isBlockRemoved = false;\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            removedNodes.push.apply(removedNodes, this.editorHistory.currentBaseHistoryInfo.removedNodes);\n        }\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            if (row.index >= startRowIndex && row.index <= endRowIndex) {\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    var cell = row.childWidgets[j];\n                    if (cell.columnIndex >= startColumnIndex && cell.columnIndex <= endColumnIndex) {\n                        var cell_1 = row.childWidgets[j];\n                        var blockCount = cell_1.childWidgets.length;\n                        for (var k = 0; k < cell_1.childWidgets.length; k++) {\n                            var block = cell_1.childWidgets[k];\n                            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                                var paragraph = block;\n                                this.insertRevisionForBlock(paragraph, 'Deletion', undefined, undefined, undefined, undefined, true);\n                                if (blockCount !== cell_1.childWidgets.length) {\n                                    k--;\n                                    blockCount = cell_1.childWidgets.length;\n                                    isBlockRemoved = true;\n                                }\n                                if (paragraph.isEmpty()) {\n                                    this.combineRevisionWithBlocks(paragraph);\n                                }\n                                else {\n                                    this.combineRevisionWithBlocks(paragraph.lastChild.children[paragraph.lastChild.children.length - 1]);\n                                }\n                            }\n                            else {\n                                var table_1 = block;\n                                for (var l = 0; l < table_1.childWidgets.length; l++) {\n                                    var isRowRemoved = this.trackRowDeletion(table_1.childWidgets[l], undefined, false);\n                                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table_1.childWidgets)) {\n                                        k--;\n                                        break;\n                                    }\n                                    else if (table_1.childWidgets.length > 0 && isRowRemoved) {\n                                        l--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            // The whole table is added to the removed nodes in the current base history, so the block inside the table that was added to the removed nodes should be removed from the current base history.\n            // So, reset the removed nodes in the current base history.\n            this.editorHistory.currentBaseHistoryInfo.removedNodes.length = 0;\n            (_a = this.editorHistory.currentBaseHistoryInfo.removedNodes).push.apply(_a, removedNodes);\n            this.editorHistory.currentBaseHistoryInfo.isRevisionEndInAnotherCell = true;\n            this.editorHistory.currentBaseHistoryInfo.selectionStart = startIndex;\n            this.editorHistory.currentBaseHistoryInfo.insertPosition = startIndex;\n            this.editorHistory.currentBaseHistoryInfo.selectionEnd = endIndex;\n            this.editorHistory.currentBaseHistoryInfo.endPosition = endIndex;\n            if (isBlockRemoved) {\n                endIndex = this.selection.getActualOffset(endCell, 1);\n                this.editorHistory.currentBaseHistoryInfo.selectionEnd = endIndex;\n                this.editorHistory.currentBaseHistoryInfo.endPosition = endIndex;\n                this.selection.editPosition = startIndex;\n            }\n        }\n    };\n    Editor.prototype.onConfirmedTableCellsDeletion = function (table, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected, action) {\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            var canRemoveRow = false;\n            if (row.index >= startRowIndex && row.index <= endRowIndex) {\n                if (this.owner.enableTrackChanges && !this.skipTracking()) {\n                    if (isRowSelected) {\n                        canRemoveRow = this.trackRowDeletion(row, false, undefined, editAction);\n                        if (canRemoveRow) {\n                            this.onConfirmedCellDeletion(row, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected);\n                        }\n                    }\n                    else {\n                        this.onConfirmedCellDeletion(row, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected);\n                    }\n                }\n                else {\n                    this.onConfirmedCellDeletion(row, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected);\n                }\n            }\n            if (canRemoveRow || row.childWidgets.length === 0) {\n                var rowToRemove = table.childWidgets[i];\n                var prevRenderedRow = rowToRemove.previousRenderedWidget;\n                while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevRenderedRow)) {\n                    for (var k = 0; k < prevRenderedRow.childWidgets.length; k++) {\n                        var cell = prevRenderedRow.childWidgets[k];\n                        if (rowToRemove.rowIndex < cell.ownerRow.rowIndex + cell.cellFormat.rowSpan) {\n                            cell.cellFormat.rowSpan--;\n                        }\n                    }\n                    prevRenderedRow = prevRenderedRow.previousRenderedWidget;\n                }\n                this.updateNextBlocksIndex(rowToRemove, false);\n                table.childWidgets.splice(i, 1);\n                i--;\n                endRowIndex--;\n            }\n        }\n        //Layouts the table after delete cells.\n        selection.owner.isLayoutEnabled = true;\n        if (table.childWidgets.length === 0) {\n            selection.editPosition = this.selection.getHierarchicalIndex(table, '0');\n            this.setActionInternal(selection, action);\n            this.removeBlock(table);\n        }\n        else {\n            // Before lay outing need to update table grid.\n            table.isGridUpdated = false;\n            table.buildTableColumns();\n            table.isGridUpdated = true;\n            this.documentHelper.layout.reLayoutTable(table);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.alertDialog)) {\n            var textPosition = selection.getTextPosBasedOnLogicalIndex(selection.editPosition);\n            selection.selectContent(textPosition, true);\n            this.reLayout(selection);\n            this.alertDialog.close();\n            this.alertDialog = undefined;\n        }\n    };\n    Editor.prototype.onConfirmedCellDeletion = function (row, selection, startRowIndex, endRowIndex, startColumnIndex, endColumnIndex, isDeleteCells, editAction, isRowSelected) {\n        var isStarted = false;\n        var isCellCleared = false;\n        this.removeDeletedCellRevision(row, isRowSelected);\n        for (var j = 0; j < row.childWidgets.length; j++) {\n            var cell = row.childWidgets[j];\n            //this.removeRevisionForCell(cell, true);\n            if (cell.columnIndex >= startColumnIndex && cell.columnIndex <= endColumnIndex) {\n                if (!isStarted) {\n                    this.updateEditPosition(cell, selection);\n                    isStarted = true;\n                }\n                if (isDeleteCells) {\n                    //Specific for Backspace and Cut if selection includes all rows.\n                    var cell_2 = row.childWidgets[j];\n                    this.updateNextBlocksIndex(cell_2, false);\n                    for (var k = 0; k < cell_2.childWidgets.length; k++) {\n                        var para = cell_2.childWidgets[k];\n                        for (var l = 0; l < para.childWidgets.length; l++) {\n                            var block = para.childWidgets[l];\n                            if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget) {\n                                var line = block;\n                                for (var j_4 = 0; j_4 < line.children.length; j_4++) {\n                                    var element = line.children[j_4];\n                                    if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                                        this.removeFootnote(element);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    var nextRenderedRow = row.nextRenderedWidget;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextRenderedRow)) {\n                        if (nextRenderedRow.rowIndex < cell_2.ownerRow.rowIndex + cell_2.cellFormat.rowSpan) {\n                            cell_2.cellFormat.rowSpan--;\n                            var cellWidget = this.createColumn(this.selection.getLastParagraph(cell_2));\n                            cellWidget.cellFormat.copyFormat(cell_2.cellFormat);\n                            cellWidget.index = cell_2.index;\n                            cellWidget.rowIndex = cell_2.rowIndex;\n                            cellWidget.columnIndex = cell_2.columnIndex;\n                            cellWidget.containerWidget = nextRenderedRow;\n                            cellWidget.margin = cell_2.margin.clone();\n                            cellWidget.leftBorderWidth = cell_2.leftBorderWidth;\n                            cellWidget.rightBorderWidth = cell_2.rightBorderWidth;\n                            nextRenderedRow.childWidgets.splice(cellWidget.columnIndex, 0, cellWidget);\n                        }\n                    }\n                    row.childWidgets.splice(j, 1);\n                    j--;\n                }\n                else if (editAction < 4) {\n                    isCellCleared = this.deleteCell(cell, selection, editAction, false);\n                }\n            }\n        }\n    };\n    Editor.prototype.removeRevisionForRow = function (rowWidget) {\n        if (rowWidget.rowFormat.revisions.length > 0 && this.skipTracking()) {\n            this.unlinkRangeFromRevision(rowWidget.rowFormat, true);\n            this.addRemovedRevisionInfo(rowWidget.rowFormat, undefined);\n        }\n    };\n    Editor.prototype.removeRevisionsInRow = function (rowWidget) {\n        if (rowWidget.rowFormat.revisions.length > 0) {\n            for (var i = 0; i < rowWidget.rowFormat.revisions.length; i++) {\n                var rowRevision = rowWidget.rowFormat.revisions[i];\n                this.unlinkWholeRangeInRevision(rowWidget.rowFormat, rowRevision);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeRevisionForCell = function (cellWidget, removeCollection) {\n        for (var i = 0; i < cellWidget.childWidgets.length; i++) {\n            if (cellWidget.childWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                var paraWidget = cellWidget.childWidgets[i];\n                for (var lineIndex = 0; lineIndex < paraWidget.childWidgets.length; lineIndex++) {\n                    var lineWidget = paraWidget.childWidgets[lineIndex];\n                    for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                        var currentElement = lineWidget.children[elementIndex];\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && currentElement.revisions.length > 0) {\n                            this.unlinkRangeFromRevision(currentElement, removeCollection);\n                            this.addRemovedRevisionInfo(currentElement, undefined);\n                        }\n                    }\n                }\n            }\n            else if (cellWidget.childWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                this.removeRevisionForInnerTable(cellWidget.childWidgets[i]);\n            }\n        }\n    };\n    Editor.prototype.removeRevisionForInnerTable = function (tableWidget) {\n        if (tableWidget.childWidgets.length > 0) {\n            for (var i = 0; i < tableWidget.childWidgets.length; i++) {\n                var row = tableWidget.childWidgets[i];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(row)) {\n                    this.removeRevisionForRow(row);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeRevisionForBlock = function (paraWidget, revision, skipParaMark, addToRevisionInfo) {\n        if (paraWidget.characterFormat.revisions.length > 0 && !skipParaMark) {\n            if (addToRevisionInfo) {\n                this.addRemovedRevisionInfo(paraWidget.characterFormat, undefined, false);\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                this.unlinkRangeFromRevision(paraWidget.characterFormat, true);\n            }\n            else {\n                this.unlinkRangeByRevision(paraWidget.characterFormat, revision);\n            }\n            paraWidget.characterFormat.revisions = [];\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraWidget)) {\n            for (var lineIndex = 0; lineIndex < paraWidget.childWidgets.length; lineIndex++) {\n                var lineWidget = paraWidget.childWidgets[lineIndex];\n                for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                    var currentElement = lineWidget.children[elementIndex];\n                    if (currentElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        var nextRevision = currentElement.nextValidNodeForTracking;\n                        if (nextRevision.footnoteType === 'Footnote') {\n                            this.removeFootnote(nextRevision);\n                        }\n                        else {\n                            this.removeEndnote(nextRevision);\n                        }\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentElement) && currentElement.revisions.length > 0) {\n                        if (addToRevisionInfo) {\n                            this.addRemovedRevisionInfo(currentElement, undefined, false);\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                            this.unlinkRangeFromRevision(currentElement, true);\n                        }\n                        else {\n                            this.unlinkRangeByRevision(currentElement, revision);\n                        }\n                        currentElement.revisions = [];\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.unlinkRangeByRevision = function (item, revision) {\n        for (var i = 0; i < item.revisions.length; i++) {\n            var currentRevision = item.revisions[i];\n            if (currentRevision.author === revision.author && currentRevision.revisionType === revision.revisionType) {\n                item.revisions.splice(item.revisions.indexOf(revision), 1);\n                var rangeIndex = revision.range.indexOf(item);\n                revision.range.splice(rangeIndex, 1);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            }\n        }\n    };\n    Editor.prototype.isWholeRowSelected = function (ownerRow, startColumnIndex, endColumnIndex) {\n        var columnCount = startColumnIndex + endColumnIndex;\n        if (startColumnIndex === 0 && ownerRow.childWidgets.length - 1 === columnCount) {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.deleteCell = function (cell, selection, editAction, copyChildToClipboard) {\n        //Checks whether this is last paragraph of owner textbody.\n        var block = cell.childWidgets[0];\n        if (cell.childWidgets.length === 1 && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && block.isEmpty()) {\n            return false;\n        }\n        var totalLength = cell.childWidgets.length - 1;\n        for (var i = cell.childWidgets.length - 1; i > -1; i--) {\n            block = cell.childWidgets[i];\n            if (editAction < 4) {\n                //Checks whether this is last paragraph of owner textbody.\n                if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && i === totalLength) {\n                    //Preserves empty paragraph, to ensure minimal content.\n                    var paragraph = block;\n                    //Removes all the inlines in the paragraph.\n                    if (!this.checkClearCells(selection)) {\n                        for (var j = paragraph.childWidgets.length - 1; j >= 0; j--) {\n                            var inline = paragraph.childWidgets[j];\n                            for (var k = inline.children.length - 1; k >= 0; k--) {\n                                var element = inline.children[k];\n                                if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                                    this.removeFootnote(element);\n                                }\n                                else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && element.bookmarkType === 0 && this.documentHelper.bookmarks.containsKey(element.name)) {\n                                    this.documentHelper.bookmarks.remove(element.name);\n                                }\n                                this.unLinkFieldCharacter(element);\n                                inline.children.splice(k, 1);\n                            }\n                            if (paragraph.childWidgets.length > 1) {\n                                paragraph.childWidgets.splice(j, 1);\n                            }\n                        }\n                    }\n                    else if (!paragraph.isEmpty()) {\n                        this.removeInlines(paragraph, paragraph.firstChild, 0, paragraph.lastChild, paragraph.lastChild.getEndOffset(), editAction);\n                    }\n                    continue;\n                }\n                this.removeBlock(block);\n                if (this.checkClearCells(selection)) {\n                    this.addRemovedNodes(block);\n                    if (cell.childWidgets.length === 1) {\n                        //Add Index for line Widget\n                        selection.editPosition = this.selection.getHierarchicalIndex(cell.childWidgets[0], '0');\n                        this.updateHistoryPosition(selection.editPosition, true);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    Editor.prototype.paragrapghBookmarkCollection = function (block, existingBookmark) {\n        var bookmarkCol = this.documentHelper.bookmarks;\n        for (var i = 0; i < bookmarkCol.length; i++) {\n            var bookmark = this.documentHelper.bookmarks.get(bookmarkCol.keys[i]);\n            if (bookmark.paragraph === block) {\n                existingBookmark.push(bookmark);\n            }\n        }\n        return existingBookmark;\n    };\n    Editor.prototype.deleteContainer = function (cell, selection, start, end, editAction) {\n        var ownerTable = cell.ownerTable;\n        if (selection.containsRow(ownerTable.lastChild, end.paragraph.associatedCell) && !this.owner.enableTrackChanges) {\n            this.deleteContent(ownerTable, selection, editAction);\n        }\n        else {\n            if (this.toCheckForTrack(ownerTable)) {\n                this.cloneTableToHistoryInfo(ownerTable);\n                for (var i_3 = 0; i_3 < ownerTable.childWidgets.length; i_3++) {\n                    var inline = ownerTable.childWidgets[i_3];\n                    this.trackRowDeletion(inline);\n                    if (end.paragraph.isInsideTable && selection.containsRow(inline, end.paragraph.associatedCell)) {\n                        this.documentHelper.layout.reLayoutTable(ownerTable);\n                        return;\n                    }\n                }\n            }\n            else {\n                if (ownerTable.childWidgets.length > 0) {\n                    var lastChild = ownerTable.childWidgets[ownerTable.childWidgets.length - 1];\n                    //Last row selected, so need to remove entire table\n                    if (selection.containsRow(lastChild, end.paragraph.associatedCell)) {\n                        if (this.owner.enableTrackChanges) {\n                            this.cloneTableToHistoryInfo(ownerTable);\n                            for (var i = 0; i < ownerTable.childWidgets.length; i++) {\n                                this.trackRowDeletion(ownerTable.childWidgets[i], false);\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(ownerTable.childWidgets) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                                this.removeBlock(ownerTable);\n                            }\n                        }\n                        else {\n                            this.deleteContent(ownerTable, selection, editAction);\n                        }\n                    }\n                    else {\n                        for (var i_4 = 0; i_4 < ownerTable.childWidgets.length; i_4++) {\n                            var row = ownerTable.childWidgets[i_4];\n                            if (editAction < 4) {\n                                this.updateNextBlocksIndex(row, false);\n                                ownerTable.childWidgets.splice(i_4, 1);\n                                this.addRemovedNodes(row);\n                                i_4--;\n                            }\n                            if (end.paragraph.isInsideTable && selection.containsRow(row, end.paragraph.associatedCell)) {\n                                this.documentHelper.layout.reLayoutTable(ownerTable);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.deleteTableBlock = function (table, selection, start, end, editAction) {\n        table = table.combineWidget(this.owner.viewer);\n        if (start.paragraph.isInsideTable && table.contains(start.paragraph.associatedCell)) {\n            var block = table.previousRenderedWidget;\n            var previousBlock = this.checkAndInsertBlock(table, start, end, editAction, block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? block : undefined);\n            if (selection.containsRow(table.firstChild, start.paragraph.associatedCell)) {\n                if (this.owner.enableTrackChanges) {\n                    this.cloneTableToHistoryInfo(table);\n                    for (var i = 0; i < table.childWidgets.length; i++) {\n                        var isRemoved = this.trackRowDeletion(table.childWidgets[i]);\n                        if (isRemoved) {\n                            i--;\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.childWidgets)) {\n                            break;\n                        }\n                    }\n                    // Added the condition to remove the entire table when the selection contains a table with the below paragraph.\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.childWidgets) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                        this.removeBlock(table);\n                    }\n                }\n                else {\n                    this.deleteContent(table, selection, editAction);\n                }\n            }\n            else {\n                if (this.owner.enableTrackChanges) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(end.paragraph.associatedCell) && !end.paragraph.isInsideTable) {\n                        //let previousChild: TableCellWidget = end.paragraph.previousRenderedWidget.lastChild as TableCellWidget;\n                        var endCells = table.lastChild.lastChild;\n                        this.deleteCellsInTable(table, selection, start, end, editAction, endCells);\n                    }\n                }\n                else {\n                    var newTable = this.splitTable(table, start.paragraph.associatedCell.ownerRow);\n                    this.deleteContent(table, selection, editAction);\n                    this.documentHelper.layout.layoutBodyWidgetCollection(newTable.index, newTable.containerWidget, newTable, false);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousBlock)) {\n                selection.editPosition = this.selection.getHierarchicalIndex(previousBlock, '0');\n                if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                    this.editorHistory.currentBaseHistoryInfo.endPosition = selection.editPosition;\n                }\n            }\n        }\n        else {\n            var blockAdv = table.previousRenderedWidget;\n            //let sectionAdv: BodyWidget = table.bodyWidget instanceof BodyWidget ? table.bodyWidget : undefined;\n            if (this.owner.enableTrackChanges) {\n                this.cloneTableToHistoryInfo(table);\n                for (var i = 0; i < table.childWidgets.length; i++) {\n                    var isRemoved = this.trackRowDeletion(table.childWidgets[i]);\n                    if (isRemoved) {\n                        i--;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.childWidgets)) {\n                        break;\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table.childWidgets) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                    this.removeBlock(table);\n                }\n            }\n            else {\n                this.deleteContent(table, selection, editAction);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockAdv)) {\n                // let nextSection: WSection = blockAdv.section instanceof WSection ? blockAdv.section as WSection : undefined;\n                // if (sectionAdv !== nextSection) {\n                //     this.deleteSection(selection, sectionAdv, nextSection, editAction);\n                // }\n                //Goto the next block.\n                this.deleteBlock(blockAdv, selection, start, end, editAction);\n            }\n        }\n    };\n    Editor.prototype.splitTable = function (table, splitEndRow) {\n        var newTable = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget();\n        newTable.tableFormat.copyFormat(table.tableFormat);\n        newTable.index = table.index;\n        //Moves the rows to new table.\n        for (var i = 0; i < table.childWidgets.length; i++) {\n            var row = table.childWidgets[i];\n            if (row === splitEndRow) {\n                break;\n            }\n            newTable.childWidgets.push(row);\n            row.containerWidget = newTable;\n            table.childWidgets.splice(i, 1);\n            i--;\n        }\n        //Inserts new table in the current text position.\n        var insertIndex = table.getIndex();\n        table.containerWidget.childWidgets.splice(insertIndex, 0, newTable);\n        newTable.containerWidget = table.containerWidget;\n        this.updateNextBlocksIndex(newTable, true);\n        return newTable;\n    };\n    Editor.prototype.updateEditPosition = function (cell, selection) {\n        var firstParagraph = this.documentHelper.getFirstParagraphInCell(cell);\n        selection.editPosition = this.selection.getHierarchicalIndex(firstParagraph, '0');\n    };\n    Editor.prototype.deleteContent = function (table, selection, editAction) {\n        if (editAction < 4) {\n            this.removeBlock(table);\n            this.addRemovedNodes(table);\n        }\n    };\n    Editor.prototype.setActionInternal = function (selection, action) {\n        if (this.documentHelper.owner.enableHistoryMode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            this.editorHistory.currentBaseHistoryInfo.action = action;\n        }\n    };\n    Editor.prototype.checkClearCells = function (selection) {\n        return this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action !== 'ClearCells';\n    };\n    Editor.prototype.isEndInAdjacentTable = function (paragraph, endParagraph) {\n        var start = this.selection.getHierarchicalIndex(paragraph, '');\n        var end = this.selection.getHierarchicalIndex(endParagraph, '');\n        var selectionStart = start.split(';');\n        var selectionEnd = end.split(';');\n        return selectionStart.length < selectionEnd.length;\n    };\n    /**\n     * @private\n     * @param table\n     * @returns {TableWidget}\n     */\n    Editor.prototype.cloneTableToHistoryInfo = function (table, isParentTable) {\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            //Clones the entire table to preserve in history.\n            var clonedTable = table.clone();\n            clonedTable.index = table.index;\n            //Preserves the cloned table in history info, for future undo operation.\n            this.editorHistory.currentBaseHistoryInfo.removedNodes.push(clonedTable);\n            //Sets the insert position in history info as current table.\n            if (this.documentHelper.selection.start.paragraph.isInsideTable &&\n                this.documentHelper.selection.start.paragraph.associatedCell.ownerTable === table || isParentTable) {\n                this.updateHistoryPosition(this.selection.getHierarchicalIndex(table, '0'), true);\n            }\n            return clonedTable;\n        }\n        return undefined;\n    };\n    Editor.prototype.insertParagraphPaste = function (paragraph, currentParagraph, start, end, isCombineNextParagraph, editAction, isCombineLastBlock, skipHistoryCollection) {\n        if (this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && this.editorHistory.currentBaseHistoryInfo.action === 'Paste') {\n            var nextParagraph = this.selection.getNextParagraphBlock(currentParagraph);\n            if (nextParagraph) {\n                if (start.offset > 0 && nextParagraph === end.paragraph && paragraph === start.paragraph\n                    && this.editorHistory.currentBaseHistoryInfo.action === 'Paste') {\n                    //Combines the current paragraph with end paragraph specific for undo/redo paste action.\n                    var insertIndex = 0;\n                    this.removeBlock(currentParagraph);\n                    this.documentHelper.layout.clearListElementBox(nextParagraph);\n                    this.documentHelper.layout.clearListElementBox(currentParagraph);\n                    for (var i = 0; i < currentParagraph.childWidgets.length; i++) {\n                        var line = currentParagraph.childWidgets[i];\n                        nextParagraph.childWidgets.splice(insertIndex, 0, line);\n                        currentParagraph.childWidgets.splice(i, 1);\n                        i--;\n                        insertIndex++;\n                        line.paragraph = nextParagraph;\n                    }\n                    this.documentHelper.layout.reLayoutParagraph(nextParagraph, 0, 0);\n                    isCombineNextParagraph = false;\n                    var offset = this.selection.editPosition.substring(this.selection.editPosition.lastIndexOf(';') + 1);\n                    this.selection.editPosition = this.selection.getHierarchicalIndex(nextParagraph, offset);\n                }\n            }\n        }\n        if (isCombineNextParagraph) {\n            this.deleteParagraphMark(currentParagraph, this.selection, editAction, false, isCombineLastBlock, skipHistoryCollection);\n        }\n    };\n    Editor.prototype.removeInlines = function (paragraph, startLine, startOffset, endLine, endOffset, editAction) {\n        var isRemoved = false;\n        this.documentHelper.layout.clearListElementBox(paragraph);\n        var startIndex = paragraph.childWidgets.indexOf(startLine);\n        var startPosition = this.selection.start.clone();\n        var endPosition = this.selection.end.clone();\n        // Handled special behaviour equivalent to MSWord, if the entire field isn't selected, then the field is not deleted.\n        var startElementInfo = this.selection.getElementInfo(startPosition.currentWidget, (startPosition.offset !== 0 && this.selection.isForward) ? startPosition.offset + 1 : startPosition.offset);\n        var endElementInfo = this.selection.getElementInfo(endPosition.currentWidget, (endPosition.offset !== 0 && !this.selection.isForward) ? endPosition.offset + 1 : endPosition.offset);\n        if ((startElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && startElementInfo.element.fieldType !== 2 && !(endElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox)) ||\n            (endElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && endElementInfo.element.fieldType !== 2 && !(startElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox))) {\n            if (this.selection.isForward) {\n                if (startElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && startElementInfo.element.fieldType === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startElementInfo.element.fieldEnd)) {\n                    var fieldEndOffset = startElementInfo.element.fieldEnd.line.getOffset(startElementInfo.element.fieldEnd, 1);\n                    var fieldEndPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                    fieldEndPosition.setPositionParagraph(startElementInfo.element.fieldEnd.line, fieldEndOffset);\n                    if (endPosition.isExistBefore(fieldEndPosition) && startElementInfo.element.fieldSeparator) {\n                        this.selection.start.setPositionParagraph(startElementInfo.element.fieldSeparator.line, startElementInfo.element.fieldSeparator.line.getOffset(startElementInfo.element.fieldSeparator, 1));\n                        startOffset = this.selection.start.offset;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                            this.editorHistory.currentBaseHistoryInfo.selectionStart = this.owner.selection.startOffset;\n                            this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selection.startOffset;\n                            this.selection.editPosition = this.owner.selection.startOffset;\n                        }\n                    }\n                }\n                else if (endElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && endElementInfo.element.fieldType === 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endElementInfo.element.fieldBegin)) {\n                    var fieldStartOffset = endElementInfo.element.fieldBegin.line.getOffset(endElementInfo.element.fieldBegin, 0);\n                    var fieldStartPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                    fieldStartPosition.setPositionParagraph(endElementInfo.element.fieldBegin.line, fieldStartOffset);\n                    if (startPosition.isExistAfter(fieldStartPosition)) {\n                        this.selection.end.setPositionParagraph(endElementInfo.element.line, endElementInfo.element.line.getOffset(endElementInfo.element, 0));\n                        endOffset = this.selection.end.offset;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                            this.editorHistory.currentBaseHistoryInfo.selectionEnd = this.owner.selection.endOffset;\n                        }\n                    }\n                }\n            }\n            else {\n                if (startElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && startElementInfo.element.fieldType === 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startElementInfo.element.fieldBegin)) {\n                    var fieldStartOffset = startElementInfo.element.fieldBegin.line.getOffset(startElementInfo.element.fieldBegin, 0);\n                    var fieldStartPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                    fieldStartPosition.setPositionParagraph(startElementInfo.element.fieldBegin.line, fieldStartOffset);\n                    if (endPosition.isExistAfter(fieldStartPosition)) {\n                        this.selection.start.setPositionParagraph(startElementInfo.element.line, startElementInfo.element.line.getOffset(startElementInfo.element, 0));\n                        endOffset = this.selection.start.offset;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                            this.editorHistory.currentBaseHistoryInfo.selectionStart = this.owner.selection.startOffset;\n                            this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selection.endOffset;\n                            this.selection.editPosition = this.owner.selection.endOffset;\n                        }\n                    }\n                }\n                else if (endElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && endElementInfo.element.fieldType === 0 && endElementInfo.element.fieldSeparator && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endElementInfo.element.fieldEnd)) {\n                    var fieldEndOffset = endElementInfo.element.fieldEnd.line.getOffset(endElementInfo.element.fieldEnd, 1);\n                    var fieldEndPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                    fieldEndPosition.setPositionParagraph(endElementInfo.element.fieldEnd.line, fieldEndOffset);\n                    if (startPosition.isExistBefore(fieldEndPosition)) {\n                        this.selection.end.setPositionParagraph(endElementInfo.element.fieldSeparator.line, endElementInfo.element.fieldSeparator.line.getOffset(endElementInfo.element.fieldSeparator, 1));\n                        startOffset = this.selection.end.offset;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                            this.editorHistory.currentBaseHistoryInfo.selectionEnd = this.owner.selection.endOffset;\n                            this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selection.endOffset;\n                            this.selection.editPosition = this.owner.selection.endOffset;\n                        }\n                    }\n                }\n            }\n        }\n        // As per MSWord behaviour, when we select the bookmark whole content except bookmark start and end, then bookmark should be removed.\n        var previousElementInfo = this.selection.getElementInfo(startPosition.currentWidget, this.selection.isForward ? startPosition.offset : startPosition.offset + 1);\n        var nextElementInfo = this.selection.getElementInfo(endPosition.currentWidget, this.selection.isForward ? endPosition.offset + 1 : endPosition.offset);\n        var skipHistroy = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) ? false : (this.editorHistory.isUndoing || this.editorHistory.isRedoing);\n        if (!this.selection.isExcludeBookmarkStartEnd && !skipHistroy && !this.isInsertingText && !(this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action === \"Insert\") && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementInfo) && previousElementInfo.element &&\n            nextElementInfo.element && previousElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && nextElementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox &&\n            previousElementInfo.element.name === nextElementInfo.element.name && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo.element.nextElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementInfo.element.previousElement) && previousElementInfo.element.nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && nextElementInfo.element.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && previousElementInfo.element.nextElement.name === nextElementInfo.element.previousElement.name) &&\n            !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo.element.nextElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElementInfo.element.previousElement) && previousElementInfo.element.nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && nextElementInfo.element.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox)) {\n            if (this.selection.isForward) {\n                this.selection.start.setPositionParagraph(previousElementInfo.element.line, previousElementInfo.element.line.getOffset(previousElementInfo.element, 0));\n                this.selection.end.setPositionParagraph(nextElementInfo.element.line, nextElementInfo.element.line.getOffset(nextElementInfo.element, 1));\n                startOffset = this.selection.start.offset;\n                endOffset = this.selection.end.offset;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                    this.editorHistory.currentBaseHistoryInfo.selectionStart = this.owner.selection.startOffset;\n                    this.editorHistory.currentBaseHistoryInfo.selectionEnd = this.owner.selection.endOffset;\n                    this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selection.startOffset;\n                    this.selection.editPosition = this.owner.selection.startOffset;\n                }\n            }\n            else {\n                this.selection.start.setPositionParagraph(previousElementInfo.element.line, previousElementInfo.element.line.getOffset(previousElementInfo.element, 1));\n                this.selection.end.setPositionParagraph(nextElementInfo.element.line, nextElementInfo.element.line.getOffset(nextElementInfo.element, 0));\n                startOffset = this.selection.end.offset;\n                endOffset = this.selection.start.offset;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                    this.editorHistory.currentBaseHistoryInfo.selectionStart = this.owner.selection.startOffset;\n                    this.editorHistory.currentBaseHistoryInfo.selectionEnd = this.owner.selection.endOffset;\n                    this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selection.endOffset;\n                    this.selection.editPosition = this.owner.selection.endOffset;\n                }\n            }\n        }\n        var editPosition = this.selection.editPosition;\n        var paragraphInfo = this.selection.getParagraphInfo(this.selection.start);\n        var endParagraphInfo = this.selection.getParagraphInfo(this.selection.end);\n        var startAtIndex = this.selection.getHierarchicalIndex(paragraphInfo.paragraph, paragraphInfo.offset.toString());\n        var endIndex = this.selection.getHierarchicalIndex(endParagraphInfo.paragraph, endParagraphInfo.offset.toString());\n        for (var i = paragraph.childWidgets.length - 1; i >= 0; i--) {\n            var lineWidget = paragraph.childWidgets[i];\n            if (startLine === lineWidget && endLine === lineWidget) {\n                this.removeContent(lineWidget, startOffset, endOffset, editAction);\n                isRemoved = true;\n                break;\n            }\n            if (endLine === lineWidget) {\n                paragraph.isLayouted = false;\n                isRemoved = true;\n                this.removeContent(lineWidget, 0, endOffset, editAction);\n            }\n            else if (startLine === lineWidget) {\n                this.removeContent(lineWidget, startOffset, this.documentHelper.selection.getLineLength(lineWidget), editAction);\n                break;\n            }\n            else if (isRemoved) {\n                this.removeContent(lineWidget, 0, this.documentHelper.selection.getLineLength(lineWidget), editAction);\n            }\n        }\n        if (this.owner.enableTrackChanges && !this.skipTracking()) {\n            this.selection.start.setPositionInternal(startPosition);\n            this.selection.end.setPositionInternal(endPosition);\n            if (this.skipReplace) {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = undefined;\n                this.updateInsertPosition();\n            }\n            this.selection.editPosition = editPosition;\n        }\n        if (isRemoved) {\n            paragraph.isLayouted = true;\n            this.removeEmptyLine(paragraph);\n            this.documentHelper.layout.reLayoutParagraph(paragraph, 0, 0);\n            if (this.selection.start.currentWidget.indexInOwner === -1 && this.owner.enableTrackChanges && !this.skipTracking()) {\n                var startPos = this.selection.getTextPosBasedOnLogicalIndex(startAtIndex);\n                this.selection.start.setPositionInternal(startPos);\n            }\n            if (this.selection.end.currentWidget.indexInOwner === -1 && this.owner.enableTrackChanges && !this.skipTracking()) {\n                var endPos = this.selection.getTextPosBasedOnLogicalIndex(endIndex);\n                this.selection.end.setPositionInternal(endPos);\n            }\n        }\n    };\n    Editor.prototype.skipTracking = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && (this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            return true;\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && (this.editorHistory.currentBaseHistoryInfo.action === 'Reject Change' || this.editorHistory.currentBaseHistoryInfo.action === 'Accept Change')) {\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.canHandleDeletion = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && (this.editorHistory.currentBaseHistoryInfo.action === 'DeleteRow')) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     *\n     * @param comment\n     * Deletes comment start and end markers along with its comment widgets.\n     */\n    Editor.prototype.deleteCommentInSelection = function (comment) {\n        //if comment end mark is in selection, both comment start and end markers will get deleted along with its comment widgets.\n        var curentBaseHistoryInfo = this.editorHistory.currentBaseHistoryInfo;\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && !this.editorHistory.currentHistoryInfo\n            && !(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n            this.initComplexHistory('DeleteCommentInline');\n        }\n        this.deleteCommentInternal(comment);\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            if (!(this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                this.editorHistory.currentHistoryInfo.addModifiedAction(curentBaseHistoryInfo);\n            }\n            this.selection.editPosition = curentBaseHistoryInfo.insertPosition;\n            this.editorHistory.currentHistoryInfo.insertPosition = this.selection.editPosition;\n            this.editorHistory.currentBaseHistoryInfo = curentBaseHistoryInfo;\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.removeContent = function (lineWidget, startOffset, endOffset, editAction, skipHistoryCollection) {\n        var count = this.selection.getLineLength(lineWidget);\n        var startText = undefined;\n        var textCount = 0;\n        var lastText = undefined;\n        for (var i = lineWidget.children.length - 1; i >= 0; i--) {\n            var inline = lineWidget.children[i];\n            if (this.owner.enableTrackChanges && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && inline.text === '') {\n                lineWidget.children.splice(i, 1);\n                continue;\n            }\n            inline.isWidthUpdated = false;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(editAction) || (editAction !== 2 && editAction !== 1)) {\n                for (var k = 0; k < lineWidget.children.length; k++) {\n                    var elementbox = lineWidget.children[k];\n                    if (elementbox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                        var text = elementbox.text;\n                        if (text.length + textCount > startOffset && !(textCount > startOffset)) {\n                            startText = text[startOffset - textCount - 1];\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startText) && (startOffset - textCount) === 0) {\n                                startText = lastText;\n                            }\n                        }\n                        // tslint:disable-next-line:max-line-length\n                        if (text.length + textCount > endOffset) {\n                            if ((text[endOffset - textCount] === ' ' && startOffset === 0) || (startText === ' ' && text[endOffset - textCount] === ' ')) {\n                                endOffset += 1;\n                            }\n                        }\n                        lastText = text[text.length - 1];\n                    }\n                    textCount += elementbox.length;\n                }\n            }\n            if (endOffset <= count - inline.length) {\n                count -= inline.length;\n                continue;\n            }\n            var endIndex = inline.length;\n            if (count > endOffset && (count - endIndex < endOffset)) {\n                endIndex = endOffset - (count - inline.length);\n            }\n            var startIndex = 0;\n            if (count - inline.length < startOffset) {\n                startIndex = startOffset - (count - inline.length);\n            }\n            if (count > endOffset) {\n                count -= (inline.length - endIndex);\n            }\n            if (startIndex === 0 && endIndex === inline.length) {\n                if (!this.owner.enableTrackChanges || this.owner.enableTrackChanges && this.skipTracking()) {\n                    if (!(this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                            this.removedBookmarkElements.push(inline);\n                        }\n                    }\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                        if (this.documentHelper.bookmarks.containsKey(inline.name)) {\n                            if (this.owner.enableCollaborativeEditing && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                                this.editorHistory.currentBaseHistoryInfo.markerData.push({ bookmarkName: inline.name });\n                            }\n                            this.documentHelper.bookmarks.remove(inline.name);\n                        }\n                    }\n                }\n                if ((inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ImageElementBox && inline.textWrappingStyle !== 'Inline') || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ShapeElementBox) {\n                    this.removeAutoShape(inline);\n                }\n                //clear form field revisions if it is intentionally deleted.\n                if (this.skipFieldDeleteTracking && inline.revisions.length > 0) {\n                    var fieldInline = inline;\n                    if (fieldInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n                        if (fieldInline.fieldType === 1 || fieldInline.fieldType === 2) {\n                            fieldInline = fieldInline.fieldBegin;\n                        }\n                        this.clearFieldElementRevisions(fieldInline, inline.revisions);\n                    }\n                }\n                if (this.canHandleDeletion() || (this.owner.enableTrackChanges && !this.skipTracking() && !this.skipFieldDeleteTracking)) {\n                    if (!this.skipTableElements && !this.skipFootNoteDeleteTracking && !skipHistoryCollection) {\n                        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n                            this.addRemovedNodes(inline);\n                        }\n                        else {\n                            this.addRemovedNodes(inline.clone());\n                        }\n                    }\n                    this.handleDeleteTracking(inline, startOffset, endOffset, i, skipHistoryCollection);\n                }\n                else {\n                    // if (editAction < 4) {\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        inline.isLayout = false;\n                    }\n                    this.unLinkFieldCharacter(inline);\n                    this.unlinkRangeFromRevision(inline, true);\n                    this.addRemovedRevisionInfo(inline, undefined);\n                    // Added the condition to skip adding inner elements of the table to separate collection of history if the entire table is selected.\n                    if (!skipHistoryCollection) {\n                        this.addRemovedNodes(inline);\n                    }\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                        if (!(this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                            this.removedEditRangeStartElements.push(inline);\n                        }\n                        if (inline.columnFirst != -1 && inline.columnLast != -1) {\n                            this.removeEditRangeFromCollection(inline);\n                        }\n                    }\n                    else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                        if (!(this.editorHistory && (this.editorHistory.isUndoing || this.editorHistory.isRedoing))) {\n                            this.removedEditRangeEndElements.push(inline);\n                        }\n                    }\n                    else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && !this.isInsertingTOC) {\n                        this.removedContentControlElements.push(inline);\n                    }\n                    var previousNode = inline.previousNode;\n                    lineWidget.children.splice(i, 1);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousNode)) {\n                        this.combineElementRevisionToPrevNxt(previousNode);\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lineWidget.layoutedElements) && lineWidget.layoutedElements.length > 0) {\n                        lineWidget.layoutedElements.splice(i, 1);\n                    }\n                }\n            }\n            else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                var span = this.handleDeleteTracking(inline, startIndex, endIndex);\n                //if (editAction < 4) {\n                // let span: TextElementBox = new TextElementBox();\n                // span.characterFormat.copyFormat(inline.characterFormat);\n                // span.text = inline.text.substr(startIndex, endIndex - startIndex);\n                // for (let i = inline.revisions.length - 1; i >= 0; i--) {\n                //     let revision: Revision = inline.revisions[i];\n                //     let splittedRange: object[] = this.splitRevisionByElement(inline, revision);\n                //     this.insertRevision(span, revision.revisionType, revision.author, revision.date, splittedRange);\n                // }\n                // inline.text = inline.text.slice(0, startIndex) + inline.text.slice(endIndex);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(span)) {\n                    if (!this.skipTableElements) {\n                        if (inline.revisions.length > 0) {\n                            this.addRemovedRevisionInfo(inline, span);\n                        }\n                        this.addRemovedNodes(span);\n                    }\n                }\n                // else {\n                //     this.insertTextInternal(span.text, false, 'Deletion');\n                //     this.editorHistory.currentBaseHistoryInfo.revisionToRemove = inline.revisions[inline.revisions.length - 1];\n                //     // let info: ElementInfo = this.selection.start.currentWidget.getInline(startOffset +1, 0);\n                //     // let element: ElementBox = info.element.clone();\n                //     //this.addRemovedNodes(span);\n                // }\n            }\n            if ((!this.owner.enableTrackChanges || this.editorHistory.isUndoing) && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                if (inline.footnoteType === 'Footnote') {\n                    this.removeFootnote(inline);\n                }\n                else {\n                    this.removeEndnote(inline);\n                }\n            }\n            if (startOffset >= count - (endIndex - startIndex)) {\n                break;\n            }\n            count -= (endIndex - startIndex);\n            this.documentHelper.layout.clearListElementBox(lineWidget.paragraph);\n        }\n    };\n    /**\n     * Deletes comment widgets from comment pane along with history preservation.\n     */\n    Editor.prototype.deleteCommentWidgetInline = function (inline) {\n        // let curentBaseHistoryInfo: BaseHistoryInfo = this.editorHistory.currentBaseHistoryInfo;\n        // if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && !this.editorHistory.currentHistoryInfo) {\n        //     this.initComplexHistory('DeleteCommentInline');\n        // }\n        // // if (!this.selection.isElementInSelection(inline.comment.commentStart, true)) {\n        // //     this.removeCommentCharacters.push(inline.comment.commentStart);\n        // // }\n        // this.deleteCommentWidgetInternal(inline.comment);\n        // if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n        //     // let index = this.editorHistory.currentHistoryInfo.modifiedActions.indexOf(curentHistoryInfo);\n        //     // this.editorHistory.currentHistoryInfo.modifiedActions.push(this.editorHistory.currentHistoryInfo.modifiedActions.splice(index, 1)[0]);\n        //     let lstActionHistoryInfo: HistoryInfo = this.editorHistory.currentHistoryInfo;\n        //     let frstAction: BaseHistoryInfo = lstActionHistoryInfo.modifiedActions[0];\n        //     // if (frstAction.action === \"DeleteCommentWidget\" && frstAction.removedNodes[0] instanceof CommentElementBox\n        //     //     && !(frstAction.removedNodes[0] as CommentElementBox).isReply && (lstActionHistoryInfo.modifiedActions[1].action === \"DeleteCommentWidget\")) {\n        //     //     // index = this.editorHistory.currentHistoryInfo.modifiedActions.indexOf(curentHistoryInfo);\n        //     //     // this.editorHistory.currentHistoryInfo.modifiedActions.splice(index - 1, 0, this.editorHistory.currentHistoryInfo.modifiedActions.splice(0, 1)[0]);\n        //     // }\n        // }\n        // this.editorHistory.currentHistoryInfo.addModifiedAction(curentBaseHistoryInfo);\n        // this.editorHistory.currentBaseHistoryInfo = curentBaseHistoryInfo;\n        // this.selection.editPosition = curentBaseHistoryInfo.insertPosition;        \n        // this.editorHistory.currentHistoryInfo.insertPosition = curentBaseHistoryInfo.insertPosition;\n        // this.editorHistory.currentHistoryInfo.endPosition = curentBaseHistoryInfo.insertPosition;\n        // this.editorHistory.currentHistoryInfo.selectionStart = curentBaseHistoryInfo.selectionStart;\n        // this.editorHistory.currentHistoryInfo.selectionEnd = curentBaseHistoryInfo.selectionEnd;\n    };\n    Editor.prototype.clearFieldElementRevisions = function (inline, revision) {\n        var revisions = revision;\n        for (var i = 0; i < revisions.length; i++) {\n            var currentRevision = revisions[i];\n            for (var j = 0; j < currentRevision.range.length; j++) {\n                if (currentRevision.range[j] === inline) {\n                    for (var k = j; k < currentRevision.range.length; k) {\n                        if (currentRevision.range[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && currentRevision.range[j].fieldType === 1 && currentRevision.range[j].fieldBegin === inline) {\n                            currentRevision.removeRangeRevisionForItem(currentRevision.range[j]);\n                            if (currentRevision.range.length === 0) {\n                                this.owner.revisions.remove(currentRevision);\n                            }\n                            break;\n                        }\n                        currentRevision.removeRangeRevisionForItem(currentRevision.range[j]);\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.addRemovedRevisionInfo = function (currentElement, spittedElement, removePrevRevisions) {\n        for (var i = 0; i < currentElement.revisions.length; i++) {\n            var revisionId = currentElement.revisions[i].revisionID;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(spittedElement)) {\n                spittedElement.removedIds.push(revisionId);\n            }\n            else {\n                currentElement.removedIds.push(revisionId);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(spittedElement) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(removePrevRevisions) || removePrevRevisions)) {\n            currentElement.revisions = [];\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeEmptyLine = function (paragraph) {\n        if (paragraph.childWidgets.length > 1) {\n            for (var i = 0; i < paragraph.childWidgets.length; i++) {\n                var lineWidget = paragraph.childWidgets[i];\n                if (lineWidget.children.length === 0 && paragraph.childWidgets.length > 1) {\n                    paragraph.childWidgets.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n    //#endregion\n    /**\n     * Clone the list level\n     *\n     * @param {WListLevel} source - Specifies the source\n     * @private\n     * @returns {WListLevel} - Returns the list level\n     */\n    Editor.prototype.cloneListLevel = function (source) {\n        var listLevel = new _list_list_level__WEBPACK_IMPORTED_MODULE_8__.WListLevel(undefined);\n        this.copyListLevel(listLevel, source);\n        return listLevel;\n    };\n    /**\n     * Copies the list level\n     *\n     * @param {WListLevel} destination - Specifies the destination\n     * @param {WListLevel} listLevel - Specifies the list level\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.copyListLevel = function (destination, listLevel) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.paragraphFormat)) {\n            destination.paragraphFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat(destination);\n            destination.paragraphFormat.copyFormat(listLevel.paragraphFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.characterFormat)) {\n            destination.characterFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(destination);\n            destination.characterFormat.copyFormat(listLevel.characterFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.followCharacter)) {\n            destination.followCharacter = listLevel.followCharacter;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.listLevelPattern)) {\n            destination.listLevelPattern = listLevel.listLevelPattern;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.numberFormat)) {\n            destination.numberFormat = listLevel.numberFormat;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.restartLevel)) {\n            destination.restartLevel = listLevel.restartLevel;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listLevel.startAt)) {\n            destination.startAt = listLevel.startAt;\n        }\n    };\n    /**\n     * Clone level override\n     *\n     * @param {WLevelOverride} source  @returns {void} - Specifies the level override\n     * @private\n     * @returns {WLevelOverride} - Returns the level overeide\n     */\n    Editor.prototype.cloneLevelOverride = function (source) {\n        var levelOverride = new _list_level_override__WEBPACK_IMPORTED_MODULE_9__.WLevelOverride();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(source.startAt)) {\n            levelOverride.startAt = source.startAt;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(source.overrideListLevel)) {\n            levelOverride.overrideListLevel = source.overrideListLevel;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(source.levelNumber)) {\n            levelOverride.levelNumber = source.levelNumber;\n        }\n        return levelOverride;\n    };\n    /**\n     * Update List Paragraph\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListParagraphs = function () {\n        this.documentHelper.listParagraphs = [];\n        for (var j = 0; j < this.documentHelper.pages.length; j++) {\n            var bodyWidget = this.documentHelper.pages[j].bodyWidgets[0];\n            for (var i = 0; i < bodyWidget.childWidgets.length; i++) {\n                this.updateListParagraphsInBlock(bodyWidget.childWidgets[i]);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListParagraphsInBlock = function (block) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.paragraphFormat)\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.paragraphFormat.listFormat)\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.paragraphFormat.listFormat.listId)) {\n                if (block.paragraphFormat.listFormat.listId >= 0) {\n                    block.paragraphFormat.clearIndent();\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.listParagraphs)) {\n                    this.documentHelper.listParagraphs = [];\n                }\n                this.documentHelper.listParagraphs.push(block);\n            }\n        }\n        else if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            for (var i = 0; i < block.childWidgets.length; i++) {\n                for (var j = 0; j < block.childWidgets[i].childWidgets.length; j++) {\n                    var cell = block.childWidgets[i].childWidgets[j];\n                    for (var k = 0; k < cell.childWidgets.length; k++) {\n                        this.updateListParagraphsInBlock(cell.childWidgets[k]);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Applies list format\n     *\n     * @param {WList} list - Specifies the list.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onApplyList = function (list) {\n        var selection = this.documentHelper.selection;\n        this.setOffsetValue(this.documentHelper.selection);\n        this.initHistory('ListFormat');\n        var format = new _index__WEBPACK_IMPORTED_MODULE_5__.WListFormat();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list)) {\n            format.listId = list.listId;\n            format.nsid = list.nsid;\n        }\n        this.documentHelper.owner.isShiftingEnabled = true;\n        if (selection.isEmpty) {\n            this.applyParaFormatProperty(selection.start.paragraph, 'listFormat', format, false);\n            this.isMeasureParaWidth = true;\n            this.layoutItemBlock(selection.start.paragraph, false);\n            this.isMeasureParaWidth = false;\n        }\n        else {\n            this.updateSelectionParagraphFormatting('listFormat', format, false);\n        }\n        this.documentHelper.owner.isShiftingEnabled = true;\n        this.layoutWholeDocument();\n        this.documentHelper.owner.isShiftingEnabled = false;\n        this.startParagraph = undefined;\n        this.endParagraph = undefined;\n    };\n    /**\n     * Applies bullets or numbering list\n     *\n     * @param {string} format - Specifies the format\n     * @param {ListLevelPattern} listLevelPattern - Specifies the list level patterns\n     * @param {string} fontFamily - Specifies the font family.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyBulletOrNumbering = function (format, listLevelPattern, fontFamily) {\n        var selection = this.documentHelper.selection;\n        var list = selection.paragraphFormat.getList();\n        var isUpdate = false;\n        var start = selection.start;\n        if (!selection.isForward) {\n            start = selection.end;\n        }\n        var currentParagraph = start.paragraph;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list)) {\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.previousWidget) && currentParagraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                && currentParagraph.previousWidget.isEmpty() && currentParagraph.previousWidget.paragraphFormat.listFormat.listId === -1) {\n                currentParagraph = currentParagraph.previousWidget;\n            }\n            if (currentParagraph.previousWidget && currentParagraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                && currentParagraph.previousWidget.paragraphFormat.listFormat.listId !== -1) {\n                var isUpdated = false;\n                while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.previousWidget) && currentParagraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                    && currentParagraph.previousWidget.paragraphFormat.listFormat.listId !== -1 && start.paragraph.paragraphFormat.firstLineIndent < Math.abs(currentParagraph.previousWidget.paragraphFormat.firstLineIndent)) {\n                    currentParagraph = currentParagraph.previousWidget;\n                    isUpdated = true;\n                }\n                if (!isUpdated) {\n                    currentParagraph = currentParagraph.previousWidget;\n                }\n                list = this.documentHelper.getListById(currentParagraph.paragraphFormat.listFormat.listId);\n                isUpdate = true;\n            }\n            if (!isUpdate) {\n                while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.nextWidget) && currentParagraph.nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                    && currentParagraph.nextWidget.isEmpty() && currentParagraph.nextWidget.paragraphFormat.listFormat.listId === -1) {\n                    currentParagraph = currentParagraph.nextWidget;\n                }\n                if (currentParagraph.nextWidget && currentParagraph.nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget\n                    && currentParagraph.nextWidget.paragraphFormat.listFormat.listId !== -1) {\n                    currentParagraph = currentParagraph.nextWidget;\n                    list = this.documentHelper.getListById(currentParagraph.paragraphFormat.listFormat.listId);\n                    isUpdate = true;\n                }\n            }\n        }\n        var startListLevel = undefined;\n        var levelNumber = -1;\n        var initialListLevel = undefined;\n        var isSameList = false;\n        if (currentParagraph.paragraphFormat.listFormat.listId !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.paragraphFormat.listFormat.listLevel)) {\n            this.listNumberFormat = currentParagraph.paragraphFormat.listFormat.listLevel.numberFormat;\n            this.listLevelPattern = currentParagraph.paragraphFormat.listFormat.listLevel.listLevelPattern;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.previousWidget) && currentParagraph.paragraphFormat.listFormat.listLevelNumber > 0) {\n                this.listLevelNumber = this.documentHelper.selection.start.paragraph.paragraphFormat.listFormat.listLevelNumber;\n            }\n            else {\n                this.listLevelNumber = currentParagraph.paragraphFormat.listFormat.listLevelNumber;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentParagraph.previousWidget) && currentParagraph.paragraphFormat.listFormat.listLevelNumber > 0) {\n                levelNumber = this.documentHelper.selection.start.paragraph.paragraphFormat.listFormat.listLevelNumber;\n            }\n            else {\n                levelNumber = currentParagraph.paragraphFormat.listFormat.listLevelNumber;\n            }\n            var tempList = this.documentHelper.getListById(currentParagraph.paragraphFormat.listFormat.listId);\n            startListLevel = this.documentHelper.layout.getListLevel(tempList, levelNumber);\n            if (levelNumber > 0) {\n                initialListLevel = this.documentHelper.layout.getListLevel(tempList, 0);\n                isSameList = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(initialListLevel) && levelNumber > 0 && selection.start.isInSameListParagraph(selection.end);\n            }\n            var abstractList = tempList.abstractList;\n            if (!abstractList) {\n                abstractList = this.documentHelper.getAbstractListById(list.abstractListId);\n            }\n            if (abstractList.levels.length === 0) {\n                startListLevel = this.documentHelper.layout.getListLevel(tempList, currentParagraph.paragraphFormat.listFormat.listLevelNumber);\n            }\n            if (isUpdate) {\n                if (listLevelPattern !== 'Bullet' && startListLevel.listLevelPattern === listLevelPattern\n                    && (startListLevel.numberFormat === format || startListLevel.numberFormat.indexOf(format) !== -1)) {\n                    selection.paragraphFormat.listId = list.listId;\n                    selection.paragraphFormat.listLevelNumber = levelNumber;\n                    selection.paragraphFormat.setList(list);\n                    return;\n                }\n                else {\n                    startListLevel = abstractList.levels[0];\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) && levelNumber === 0\n            && ((startListLevel.listLevelPattern !== listLevelPattern) || startListLevel.numberFormat !== format\n                || (startListLevel.characterFormat.fontFamily !== fontFamily && startListLevel.listLevelPattern === 'Bullet')))) {\n            isUpdate = false;\n            list = new _list_list__WEBPACK_IMPORTED_MODULE_6__.WList();\n            if (this.documentHelper.lists.length > 0) {\n                list.listId = this.documentHelper.lists[this.documentHelper.lists.length - 1].listId + 1;\n            }\n            else {\n                list.listId = 0;\n            }\n            var abstractList = new _list_abstract_list__WEBPACK_IMPORTED_MODULE_7__.WAbstractList();\n            if (this.documentHelper.abstractLists.length > 0) {\n                abstractList.abstractListId = this.documentHelper.abstractLists[this.documentHelper.abstractLists.length - 1].abstractListId + 1;\n            }\n            else {\n                abstractList.abstractListId = 0;\n            }\n            list.nsid = abstractList.nsid;\n            list.abstractListId = abstractList.abstractListId;\n            list.abstractList = abstractList;\n            this.documentHelper.abstractLists.push(abstractList);\n            if (format === 'bullet' || format === 'multiLevel' || format === 'numbering') {\n                this.addListLevels(abstractList, format, selection);\n            }\n            else {\n                var listLevel = new _list_list_level__WEBPACK_IMPORTED_MODULE_8__.WListLevel(abstractList);\n                listLevel.listLevelPattern = listLevelPattern;\n                listLevel.numberFormat = format;\n                if (listLevelPattern !== 'Bullet') {\n                    listLevel.startAt = 1;\n                }\n                else {\n                    listLevel.characterFormat.fontFamily = fontFamily;\n                }\n                listLevel.paragraphFormat.leftIndent = 36;\n                listLevel.paragraphFormat.firstLineIndent = -18;\n                abstractList.levels.push(listLevel);\n                selection.paragraphFormat.listLevelNumber = 0;\n            }\n            selection.paragraphFormat.setList(list);\n        }\n        else if (isSameList && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) && !isUpdate) {\n            var tempList = this.documentHelper.getListById(currentParagraph.paragraphFormat.listFormat.listId);\n            var listLevel = this.documentHelper.layout.getListLevel(tempList, levelNumber);\n            if (listLevelPattern === 'Bullet') {\n                listLevel.numberFormat = format;\n                listLevel.characterFormat.fontFamily = fontFamily;\n                listLevel.listLevelPattern = listLevelPattern;\n            }\n            else {\n                listLevel.listLevelPattern = listLevelPattern;\n                listLevel.characterFormat.fontFamily = fontFamily;\n                listLevel.startAt = 1;\n                var currentFormat = listLevel.numberFormat.substring(listLevel.numberFormat.length - 1);\n                if (listLevel.numberFormat.length !== format.length && levelNumber > 0) {\n                    listLevel.numberFormat = format;\n                }\n                else if (format.substring(format.length - 1) !== listLevel.numberFormat.substring(listLevel.numberFormat.length - 1)) {\n                    listLevel.numberFormat = listLevel.numberFormat.replace(currentFormat, format.substring(format.length - 1));\n                }\n            }\n            selection.paragraphFormat.setList(tempList);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(list) && isUpdate) {\n            selection.paragraphFormat.setList(list);\n        }\n        else {\n            selection.paragraphFormat.setList(undefined);\n        }\n    };\n    Editor.prototype.addListLevels = function (abstractListAdv, listName, selection) {\n        var bulletCharacters = [String.fromCharCode(61558), String.fromCharCode(61656), String.fromCharCode(61607), String.fromCharCode(61623), String.fromCharCode(61608)];\n        for (var i = abstractListAdv.levels.length; i < 9; i++) {\n            var listLevel = new _list_list_level__WEBPACK_IMPORTED_MODULE_8__.WListLevel(abstractListAdv);\n            if (listName.match('bullet')) {\n                listLevel.listLevelPattern = 'Bullet';\n                listLevel.numberFormat = bulletCharacters[i < 5 ? i % 5 : i % 5 + 1];\n                listLevel.characterFormat.fontFamily = i < 3 || i === 5 ? 'Wingdings' : 'Symbol';\n            }\n            else {\n                if (listName.match('multiLevel')) {\n                    for (var j = 0; j < i + 1; j++) {\n                        listLevel.numberFormat += '%' + (j + 1).toString() + '.';\n                    }\n                    listLevel.listLevelPattern = 'Number';\n                }\n                else {\n                    listLevel.numberFormat = '%' + (i + 1).toString() + ')';\n                    listLevel.listLevelPattern = i % 3 === 0 ? 'Number'\n                        : i % 3 === 1 ? 'LowLetter' : 'LowRoman';\n                }\n                listLevel.startAt = 1;\n                listLevel.restartLevel = i;\n            }\n            if (i === 0) {\n                listLevel.paragraphFormat.leftIndent = 36;\n            }\n            else {\n                listLevel.paragraphFormat.leftIndent = 36 * i;\n            }\n            listLevel.paragraphFormat.firstLineIndent = -18;\n            abstractListAdv.levels.push(listLevel);\n            selection.paragraphFormat.listLevelNumber = i;\n        }\n    };\n    /**\n     * Inserts the page break at the cursor position.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.insertPageBreak = function () {\n        if (!this.owner.isReadOnlyMode) {\n            if (this.documentHelper.selection.start.paragraph.isInsideTable ||\n                this.documentHelper.selection.start.paragraph.isInHeaderFooter) {\n                return;\n            }\n            this.initComplexHistory('PageBreak');\n            this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.onEnter('PageBreak');\n            this.isSkipOperationsBuild = false;\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n                this.editorHistory.updateComplexHistory();\n            }\n            if (this.owner.enableAutoFocus) {\n                this.selection.checkForCursorVisibility();\n            }\n        }\n    };\n    /**\n     * Inserts a column break at cursor position.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.insertColumnBreak = function () {\n        if (!this.owner.isReadOnlyMode) {\n            if (this.documentHelper.selection.start.paragraph.isInsideTable ||\n                this.documentHelper.selection.start.paragraph.isInHeaderFooter) {\n                return;\n            }\n            this.initComplexHistory('ColumnBreak');\n            var para = this.documentHelper.selection.start.paragraph;\n            if (this.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer && para.bodyWidget.sectionFormat.columns.length > 1) {\n                var lastbody = this.documentHelper.layout.getBodyWidget(para.bodyWidget, false);\n                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastbody.nextRenderedWidget) && lastbody.page === lastbody.nextRenderedWidget.page)) {\n                    this.documentHelper.layout.combineMultiColumn(lastbody);\n                }\n            }\n            this.onEnter('ColumnBreak');\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n                this.editorHistory.updateComplexHistory();\n            }\n            if (this.owner.enableAutoFocus) {\n                this.selection.checkForCursorVisibility();\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onEnter = function (breakType) {\n        this.handledEnter = true;\n        var selection = this.documentHelper.selection;\n        var isInsertParaBeforeTable = false;\n        var format;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.start.paragraph.paragraphFormat.baseStyle) ||\n            selection.start.paragraph.paragraphFormat.baseStyle.name === 'Normal' ||\n            selection.start.paragraph.paragraphFormat.baseStyle.name === 'Normal (Web)') {\n            format = new _index__WEBPACK_IMPORTED_MODULE_5__.SelectionCharacterFormat(undefined);\n            format.cloneFormat(this.selection.characterFormat);\n            var eleme = selection.start.paragraph.lastChild.children[selection.start.paragraph.lastChild.children.length - 1];\n            if (eleme instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                format.baselineAlignment = 'Normal';\n            }\n        }\n        if (selection.isEmpty && selection.start.paragraph.isInsideTable && (selection.start.paragraph.associatedCell.ownerTable.isInsideTable ? true : selection.startPage === 1) && selection.start.paragraph.associatedCell.ownerTable.index === 0 && selection.start.paragraph.associatedCell.columnIndex === 0 && selection.start.paragraph.associatedCell.rowIndex === 0 && selection.start.paragraph.index === 0 && selection.start.offset === 0) {\n            isInsertParaBeforeTable = true;\n        }\n        if (this.isXmlMapped) {\n            return;\n        }\n        if (selection.isEmpty) {\n            //ToDo: Need to handle the CTRL + Enter (Page Break) and SHIFT + Enter (Line Break) behavior.\n            var hyperlinkField = selection.getHyperlinkField();\n            var isSelectionOnHyperlink = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(hyperlinkField);\n            if (isSelectionOnHyperlink) {\n                selection.fireRequestNavigate(hyperlinkField);\n                return;\n            }\n            var paragraph = selection.start.paragraph;\n            // Revert the below line due to test case failure.\n            // paragraph.characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true, paragraph);\n            if (paragraph.isEmpty() && paragraph.paragraphFormat.listFormat.listId !== -1 && !isInsertParaBeforeTable) {\n                this.onApplyListInternal(this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId), paragraph.paragraphFormat.listFormat.listLevelNumber - 1);\n                return;\n            }\n        }\n        var commentStartToInsert = this.checkAndRemoveComments();\n        this.initHistory('Enter');\n        var isRemoved = true;\n        if (!selection.isEmpty && !selection.isImageSelected) {\n            // this.initHistoryWithSelection(selection, 'Enter');\n            isRemoved = this.removeSelectedContents(selection);\n        }\n        if (isRemoved) {\n            if (selection.isImageSelected && !selection.isForward) {\n                var start = selection.start;\n                selection.start = selection.end;\n                selection.end = start;\n            }\n            selection.owner.isShiftingEnabled = true;\n            this.updateInsertPosition();\n            var blockInfo = this.selection.getParagraphInfo(selection.start);\n            var initialStart = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            var characterFormat = this.copyInsertFormat(this.selection.start.paragraph.characterFormat, true);\n            this.splitParagraphInternal(selection, selection.start.paragraph, selection.start.currentWidget, selection.start.offset, characterFormat, isInsertParaBeforeTable);\n            this.setPositionForCurrentIndex(selection.start, initialStart);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(breakType) && (breakType === 'PageBreak' || breakType === 'ColumnBreak')) {\n                var currentParagraph = selection.start.paragraph;\n                var breakParagraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                breakParagraph.characterFormat.copyFormat(currentParagraph.characterFormat);\n                breakParagraph.paragraphFormat.copyFormat(currentParagraph.paragraphFormat);\n                var pageBreak = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                switch (breakType) {\n                    case 'PageBreak':\n                        pageBreak.text = '\\f';\n                        break;\n                    case 'ColumnBreak':\n                        pageBreak.text = String.fromCharCode(14);\n                        break;\n                }\n                var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(breakParagraph);\n                line.children.push(pageBreak);\n                pageBreak.line = line;\n                breakParagraph.childWidgets.push(line);\n                if (this.owner.enableTrackChanges && currentParagraph.characterFormat.revisions.length > 0) {\n                    var currentRevision = this.retrieveRevisionInOder(currentParagraph.characterFormat);\n                    currentRevision.range.push(breakParagraph.characterFormat);\n                    breakParagraph.characterFormat.revisions.push(currentRevision);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                    breakParagraph.characterFormat.removedIds = [];\n                }\n                this.insertParagraph(breakParagraph, true);\n                selection.selectParagraphInternal(breakParagraph, true);\n            }\n            var nextNode = selection.start.paragraph.nextWidget;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextNode)) {\n                nextNode = selection.getNextRenderedBlock(selection.start.paragraph);\n            }\n            selection.selectParagraphInternal(isInsertParaBeforeTable ? selection.start.paragraph : nextNode, true);\n            if (!isInsertParaBeforeTable) {\n                this.updateEndPosition();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(breakType) && this.editorHistory) {\n                this.owner.editorHistoryModule.updateHistory();\n            }\n            // if (!isNullOrUndefined(selection.currentHistoryInfo)) {\n            //     this.updateComplexHistory();\n            // } else {\n            this.reLayout(selection);\n            var currentPara = this.selection.start.paragraph.containerWidget.firstChild;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentPara)) {\n                currentPara.isChangeDetected = false;\n                var nextPara = currentPara.nextRenderedWidget;\n                while (this.owner.isSpellCheck && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextPara)) {\n                    currentPara = nextPara;\n                    currentPara.isChangeDetected = false;\n                    nextPara = currentPara.nextRenderedWidget;\n                }\n            }\n            // }\n            var paragraph = selection.start.paragraph.previousWidget;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph) && !paragraph.isEmpty() &&\n                paragraph.lastChild.children[paragraph.lastChild.children.length - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                this.checkAndConvertToHyperlink(selection, true, paragraph);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(format) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.start.paragraph) && selection.start.paragraph.isEmpty() && !isInsertParaBeforeTable) {\n            this.selection.isRetrieveFormatting = true;\n            this.selection.characterFormat.cloneFormat(format);\n            this.selection.isRetrieveFormatting = false;\n        }\n        this.documentHelper.layout.islayoutFootnote = false;\n        this.updateHistoryForComments(commentStartToInsert);\n        this.handledEnter = false;\n    };\n    Editor.prototype.combineRevisionWithValidElement = function (paragraph) {\n        var lastElement;\n        if (paragraph.isEmpty()) {\n            var previousWidget = paragraph.previousRenderedWidget;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousWidget) && previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                lastElement = previousWidget.characterFormat;\n            }\n        }\n        else {\n            var lastLine = paragraph.lastChild;\n            if (lastLine.children.length > 0) {\n                var elementBox = lastLine.children[lastLine.children.length - 1];\n                while (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                    elementBox = elementBox.previousElement;\n                }\n                lastElement = elementBox;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastElement) && lastElement.revisions.length > 0) {\n            if (this.compareElementRevision(lastElement, paragraph.characterFormat)) {\n                var currentRevision = paragraph.characterFormat.revisions[paragraph.characterFormat.revisions.length - 1];\n                if (this.compareElementRevision(lastElement, paragraph.characterFormat)) {\n                    var lastElementRevision = lastElement.revisions[lastElement.revisions.length - 1];\n                    if (currentRevision !== lastElementRevision) {\n                        this.clearAndUpdateRevisons(currentRevision.range, lastElementRevision, lastElementRevision.range.indexOf(lastElement) + 1);\n                        this.owner.revisions.remove(currentRevision);\n                    }\n                }\n            }\n        }\n        var firstElement = this.getPreviousValidElement(paragraph);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement) && firstElement.revisions.length > 0) {\n            var firstEleRevision = firstElement.revisions[firstElement.revisions.length - 1];\n            if (this.compareElementRevision(paragraph.characterFormat, firstElement)) {\n                if (this.compareElementRevision(paragraph.characterFormat, firstElement)) {\n                    var lastElementRevision = paragraph.characterFormat.revisions[paragraph.characterFormat.revisions.length - 1];\n                    if (firstEleRevision !== lastElementRevision) {\n                        this.clearAndUpdateRevisons(lastElementRevision.range, firstEleRevision, 0, true);\n                        this.owner.revisions.remove(lastElementRevision);\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.getPreviousValidElement = function (paragraph) {\n        var nextWidget = paragraph.nextRenderedWidget;\n        if (nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            if (nextWidget.isEmpty()) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextWidget) && nextWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    return nextWidget.characterFormat;\n                }\n            }\n            else {\n                var firstLine = nextWidget.firstChild;\n                if (firstLine.children.length > 0) {\n                    var elementBox = firstLine.children[0];\n                    while (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                        elementBox = elementBox.nextElement;\n                    }\n                    return elementBox;\n                }\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.splitParagraphInternal = function (selection, paragraphAdv, currentLine, offset, characterFormat, isInsertParaBeforeTable) {\n        var insertIndex = 0;\n        var blockIndex = paragraphAdv.index;\n        var currentPara = paragraphAdv;\n        var isAddRevToNxtPara = false;\n        currentPara.isChangeDetected = (offset === 0) ? true : false;\n        while (this.owner.isSpellCheck && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentPara.nextRenderedWidget)) {\n            currentPara = currentPara.nextRenderedWidget;\n            currentPara.isChangeDetected = true;\n        }\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        paragraph.childWidgets.push(lineWidget);\n        //Cop ies the format to new paragraph.\n        paragraph.paragraphFormat.ownerBase = paragraph;\n        if (currentLine === paragraphAdv.lastChild && offset === selection.getLineLength(currentLine) && !paragraphAdv.isContainsShapeAlone()) {\n            if (!isInsertParaBeforeTable) {\n                if (paragraphAdv.paragraphFormat.baseStyle\n                    && paragraphAdv.paragraphFormat.baseStyle.name !== 'Normal' && paragraphAdv.paragraphFormat.baseStyle.next instanceof _format_style__WEBPACK_IMPORTED_MODULE_11__.WParagraphStyle) {\n                    if (paragraphAdv.paragraphFormat.baseStyle.name === paragraphAdv.paragraphFormat.baseStyle.next.name) {\n                        paragraph.paragraphFormat.copyFormat(paragraphAdv.paragraphFormat);\n                        paragraph.characterFormat.copyFormat(paragraphAdv.characterFormat);\n                    }\n                    else {\n                        paragraph.paragraphFormat.baseStyle = paragraphAdv.paragraphFormat.baseStyle.next;\n                    }\n                    this.selection.skipFormatRetrieval = false;\n                }\n                else {\n                    paragraph.paragraphFormat.copyFormat(paragraphAdv.paragraphFormat);\n                    paragraph.characterFormat.copyFormat(paragraphAdv.characterFormat);\n                }\n                if (paragraphAdv.lastChild.children.length > 0) {\n                    paragraphAdv.characterFormat.copyFormat(paragraphAdv.lastChild.children[paragraphAdv.lastChild.children.length - 1].characterFormat);\n                }\n            }\n            // let revisions: Revision[] = [];\n            // if (paragraphAdv.characterFormat.revisions.length > 0) {\n            //     revisions = paragraphAdv.characterFormat.revisions;\n            // } else {\n            if (this.handledEnter && this.selection.isEmpty && this.selection.start.isAtParagraphEnd && paragraphAdv.characterFormat.revisions.length > 0) {\n                isAddRevToNxtPara = true;\n                paragraph.characterFormat.removedIds = [];\n            }\n            if (this.owner.enableTrackChanges) {\n                var lastLine = paragraphAdv.lastChild;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastLine) && lastLine.children.length > 0) {\n                    var lastElement = lastLine.children[lastLine.children.length - 1].previousValidNodeForTracking;\n                    var firstElement = this.getPreviousValidElement(paragraphAdv);\n                    if (paragraphAdv.characterFormat.revisions.length > 0 && firstElement && firstElement.revisions.length > 0) {\n                        if (isAddRevToNxtPara) {\n                            var sameRevision = this.compareElementRevision(paragraphAdv.characterFormat, firstElement);\n                            var revisionMatched = this.isRevisionMatched(paragraphAdv.characterFormat, 'Insertion') && this.isRevisionMatched(firstElement, 'Insertion');\n                            // const previousRevisionMatched: boolean = this.isRevisionMatched(firstElement, 'Insertion'); \n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastElement) && revisionMatched) {\n                                this.checkParaMarkMatchedWithElement(lastElement, paragraphAdv.characterFormat, false, 'Insertion');\n                            }\n                            if (firstElement && firstElement.revisions.length > 0 && !revisionMatched && sameRevision) {\n                                this.insertRevision(paragraph.characterFormat, 'Insertion');\n                                // this.updateCharacterFormatRevision(paragraphAdv);\n                                this.updateRevisionForSpittedTextElement(paragraphAdv.characterFormat, firstElement);\n                                if (paragraph.characterFormat) {\n                                    isAddRevToNxtPara = false;\n                                }\n                            }\n                        }\n                        else {\n                            this.insertParaRevision(paragraphAdv);\n                        }\n                    }\n                    else {\n                        //ensure whether para mark can be combined with element revision\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastElement) && !this.checkParaMarkMatchedWithElement(lastElement, paragraphAdv.characterFormat, false, 'Insertion')) {\n                            if (isAddRevToNxtPara) {\n                                if (!this.checkToCombineRevisionWithPrevPara(paragraphAdv, 'Insertion', paragraph)) {\n                                    this.insertParaRevision(paragraph);\n                                }\n                            }\n                            else {\n                                this.insertParaRevision(paragraphAdv);\n                            }\n                        }\n                    }\n                }\n            }\n            //}\n            //ToDo in future: Need to skip copying formattings to new paragraph, if the style for following paragraph is same style.\n            insertIndex++;\n            blockIndex++;\n        }\n        else {\n            paragraph.paragraphFormat.copyFormat(paragraphAdv.paragraphFormat);\n            paragraph.characterFormat.copyFormat(characterFormat);\n            if ((offset > 0 || !currentLine.isFirstLine()) && !paragraphAdv.isContainsShapeAlone()) {\n                paragraphAdv = paragraphAdv.combineWidget(this.owner.viewer);\n                this.moveInlines(paragraphAdv, paragraph, 0, 0, paragraphAdv.firstChild, offset, currentLine);\n                if (this.owner.enableTrackChanges) {\n                    this.insertParaRevision(paragraph, paragraphAdv.firstChild);\n                }\n            }\n            else {\n                var paragraphWidget = paragraphAdv.previousRenderedWidget;\n                var isPreviousRevision = false;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraphWidget) && paragraphWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    isPreviousRevision = paragraphWidget.characterFormat.revisions.length > 0 ? true : false;\n                }\n                if (this.owner.enableTrackChanges) {\n                    if (!isPreviousRevision) {\n                        var firstLine = paragraphAdv.firstChild;\n                        var firstElement = firstLine.children[0].previousValidNodeForTracking;\n                        //ensure whether para mark can be combined with element revision\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement) && !this.checkParaMarkMatchedWithElement(firstElement, paragraph.characterFormat, true, 'Insertion')) {\n                            this.insertParaRevision(paragraph);\n                        }\n                        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement)) {\n                            insertIndex++;\n                            blockIndex++;\n                        }\n                    }\n                    else {\n                        if (!this.checkToMatchEmptyParaMark(paragraphAdv, paragraph)) {\n                            this.insertParaRevision(paragraphAdv);\n                        }\n                    }\n                }\n            }\n            paragraphAdv = paragraphAdv.getSplitWidgets()[0];\n        }\n        var container;\n        if (isInsertParaBeforeTable) {\n            insertIndex = 0;\n            blockIndex = 0;\n            var containerTable = paragraphAdv.associatedCell.ownerTable;\n            container = containerTable.containerWidget;\n            container.childWidgets.splice(0, 0, paragraph);\n            paragraph.containerWidget = container;\n            paragraph.index = 0;\n            this.updateNextBlocksIndex(paragraph, true);\n            this.owner.selectionModule.start.setPositionParagraph(paragraph.firstChild, 0);\n            this.owner.selectionModule.end.setPositionParagraph(paragraph.firstChild, 1);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                this.editorHistory.currentBaseHistoryInfo.selectionStart = this.owner.selectionModule.startOffset;\n                this.editorHistory.currentBaseHistoryInfo.selectionEnd = this.owner.selectionModule.startOffset;\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = this.owner.selectionModule.startOffset;\n                this.editorHistory.currentBaseHistoryInfo.endPosition = this.owner.selectionModule.endOffset;\n            }\n        }\n        else {\n            insertIndex += paragraphAdv.getIndex();\n            container = paragraphAdv.containerWidget;\n            var childNodes = container.childWidgets;\n            childNodes.splice(insertIndex, 0, paragraph);\n            paragraph.containerWidget = container;\n            paragraph.index = blockIndex;\n            this.updateNextBlocksIndex(paragraph, true);\n        }\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(container.containerWidget) && container.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) || (container instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(container.bodyWidget) && container.bodyWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n            var height = this.documentHelper.textHelper.getParagraphMarkSize(paragraph.characterFormat).Height;\n            if (container instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                container.bodyWidget.height += height;\n                container.bodyWidget.containerWidget.height += height;\n            }\n            else {\n                container.containerWidget.height += height;\n                container.height += height;\n            }\n        }\n        if (this.owner.enableTrackChanges && (paragraph.characterFormat.revisions.length === 0)) {\n            var para = undefined;\n            if (paragraphAdv.characterFormat.revisions.length === 0 && !isInsertParaBeforeTable) {\n                para = paragraphAdv;\n            }\n            else if (isAddRevToNxtPara || isInsertParaBeforeTable) {\n                para = paragraph;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(para) && !this.checkToMatchEmptyParaMark(para)) {\n                this.insertParaRevision(para);\n            }\n        }\n        this.documentHelper.layout.layoutBodyWidgetCollection(blockIndex, container, paragraph, false);\n    };\n    Editor.prototype.insertParaRevision = function (paragraph, firstChild) {\n        if (this.owner.enableTrackChanges && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstChild) && !this.isRevisionMatched(paragraph.characterFormat, 'Insertion')) {\n            paragraph.characterFormat.revisions = [];\n            this.insertRevision(paragraph.characterFormat, 'Insertion');\n        }\n        //If it is spitted para, we need to ensure whether first element of the spitted para matches with inserted revision\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstChild)) {\n            if (firstChild.paragraph.isInsideTable) {\n                this.insertRevision(paragraph.characterFormat, 'Insertion');\n                return;\n            }\n            this.applyRevisionForParaMark(paragraph, firstChild, 'Insertion', true);\n            // let firstElement: ElementBox = firstChild.children[0];\n            // firstElement = firstElement.nextValidNodeForTracking;\n            // let lastLine: LineWidget = paragraph.lastChild as LineWidget;\n            // let lastElement: ElementBox = lastLine.children.length === 0 ? undefined : lastLine.children[lastLine.children.length - 1].previousValidNodeForTracking;\n            // let isCombined: boolean = false;\n            // //Ensure revision matched with inserted para mark\n            // if (!isNullOrUndefined(lastElement)) {\n            //     isCombined = this.checkParaMarkMatchedWithElement(lastElement, paragraph.characterFormat, true);\n            // }\n            // if (!isNullOrUndefined(firstElement)) {\n            //     if (paragraph.characterFormat.revisions.length > 0) {\n            //         if (this.isRevisionMatched(firstElement, 'Insertion')) {\n            //             let revisionToInclude: Revision = paragraph.characterFormat.revisions[0];\n            //             let matchedRevisions: Revision[] = this.getMatchedRevisionsToCombine(firstElement.revisions, 'Insertion');\n            //             for (let i: number = 0; i < matchedRevisions.length; i++) {\n            //                 isCombined = true;\n            //                 this.clearAndUpdateRevisons(matchedRevisions[i].range, revisionToInclude, revisionToInclude.range.indexOf(paragraph.characterFormat) + 1);\n            //             }\n            //         }\n            //     } else {\n            //         isCombined = this.checkParaMarkMatchedWithElement(firstElement, paragraph.characterFormat, false);\n            //     }\n            // }\n            // if (!isCombined) {\n            //     this.insertRevision(paragraph.characterFormat, 'Insertion');\n            // }\n        }\n    };\n    Editor.prototype.applyRevisionForParaMark = function (paragraph, firstChild, revisionType, splitRevision) {\n        var firstElement = firstChild ? firstChild.children[0] : undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement)) {\n            firstElement = firstElement.nextValidNodeForTracking;\n        }\n        var lastLine = paragraph.lastChild;\n        var lastElement = lastLine.children.length === 0 ? undefined : lastLine.children[lastLine.children.length - 1].previousValidNodeForTracking;\n        var isCombined = false;\n        var prevRevCount = paragraph.characterFormat.revisions.length;\n        //Ensure revision matched with inserted para mark\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastElement)) {\n            isCombined = this.checkParaMarkMatchedWithElement(lastElement, paragraph.characterFormat, false, revisionType);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement)) {\n            //Ensure previous inserted para mark revision matched with first element of the next paragraph.\n            if (paragraph.characterFormat.revisions.length > prevRevCount) {\n                if (this.isRevisionMatched(firstElement, revisionType)) {\n                    var revisionToInclude = paragraph.characterFormat.revisions[0];\n                    var matchedRevisions = this.getMatchedRevisionsToCombine(firstElement.revisions, revisionType);\n                    for (var i = 0; i < matchedRevisions.length; i++) {\n                        if (matchedRevisions[i] !== revisionToInclude) {\n                            isCombined = true;\n                            this.clearAndUpdateRevisons(matchedRevisions[i].range, revisionToInclude, revisionToInclude.range.indexOf(paragraph.characterFormat) + 1);\n                        }\n                    }\n                }\n            }\n            else {\n                isCombined = this.checkParaMarkMatchedWithElement(firstElement, paragraph.characterFormat, true, revisionType);\n            }\n        }\n        if (!isCombined && (this.owner.enableTrackChanges || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstChild) && firstChild.paragraph.characterFormat.revisions.length > 0))) {\n            this.insertRevision(paragraph.characterFormat, revisionType);\n            // for spitted paragraph on moving content we maintain same revision, so if it not matched with inserted paragraph then we need to spit it.\n            if (splitRevision && lastElement.revisions.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement) && firstElement.revisions.length > 0) {\n                this.updateRevisionForSpittedTextElement(lastElement, firstElement);\n            }\n        }\n    };\n    //Combines para mark with element revision\n    Editor.prototype.checkParaMarkMatchedWithElement = function (lastElement, characterFormat, isBegin, revisionType) {\n        var matchedRevisions = this.getMatchedRevisionsToCombine(lastElement.revisions, revisionType);\n        if (matchedRevisions.length > 0) {\n            this.mapMatchedRevisions(matchedRevisions, lastElement, characterFormat, isBegin);\n            return true;\n        }\n        return false;\n    };\n    Editor.prototype.checkToMatchEmptyParaMark = function (paraWidget, paragraphAdv) {\n        var prevPara = paraWidget.previousRenderedWidget;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevPara) && prevPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && prevPara.characterFormat.revisions.length > 0) {\n            var matchedRevisions = this.getMatchedRevisionsToCombine(prevPara.characterFormat.revisions, 'Insertion');\n            if (matchedRevisions.length > 0) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraphAdv)) {\n                    this.mapMatchedRevisions(matchedRevisions, prevPara.characterFormat, paragraphAdv.characterFormat, false);\n                }\n                else {\n                    this.mapMatchedRevisions(matchedRevisions, prevPara.characterFormat, paraWidget.characterFormat, false);\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    Editor.prototype.checkToMatchEmptyParaMarkBack = function (paraWidget) {\n        var prevPara = paraWidget.nextRenderedWidget;\n        var lineWid = prevPara.childWidgets[0];\n        var textWid = lineWid.children[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevPara) && prevPara instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && prevPara.characterFormat.revisions.length > 0) {\n            var matchedRevisions = this.getMatchedRevisionsToCombine(prevPara.characterFormat.revisions, 'Deletion');\n            if (matchedRevisions.length > 0) {\n                if (prevPara != undefined && lineWid != undefined && textWid != undefined && textWid.revisions.length == 1) {\n                    this.mapMatchedRevisions(matchedRevisions, textWid, paraWidget.characterFormat, true);\n                    return true;\n                }\n                else {\n                    this.mapMatchedRevisions(matchedRevisions, prevPara.characterFormat, paraWidget.characterFormat, true);\n                    return true;\n                }\n            }\n        }\n        else if (textWid != undefined && textWid.revisions.length == 1) {\n            var matchedRevisions = this.getMatchedRevisionsToCombine(textWid.revisions, 'Deletion');\n            if (matchedRevisions.length > 0) {\n                this.mapMatchedRevisions(matchedRevisions, textWid, paraWidget.characterFormat, true);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateNextBlocksIndex = function (block, increaseIndex) {\n        var nextIndex = block.containerWidget.childWidgets.indexOf(block) + 1;\n        if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget && !(block.containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n            // let startSel = this.selection.startOffset.substring(0,1);\n            // let endSel = this.selection.endOffset.substring(0,1);\n            if (block.containerWidget.page.bodyWidgets.length > 1 && block.containerWidget.sectionFormat.numberOfColumns > 1) {\n                var fromSectionIndex = block.containerWidget.indexInOwner;\n                for (var i = this.documentHelper.pages.indexOf(block.containerWidget.page); i < this.documentHelper.pages.length; i++) {\n                    var page = this.documentHelper.pages[i];\n                    for (var j = 0; j < page.bodyWidgets.length; j++) {\n                        if (page.bodyWidgets[j].indexInOwner === fromSectionIndex) {\n                            for (var k = nextIndex; k < page.bodyWidgets[j].childWidgets.length; k++) {\n                                var childWidget = page.bodyWidgets[j].childWidgets[k];\n                                this.updateIndex(childWidget, increaseIndex);\n                            }\n                            nextIndex = 0;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(page.bodyWidgets[j].nextRenderedWidget) && page.bodyWidgets[j].nextRenderedWidget.sectionIndex === page.bodyWidgets[j].sectionIndex) {\n                                fromSectionIndex++;\n                            }\n                        }\n                    }\n                    if (fromSectionIndex !== block.containerWidget.indexInOwner && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(page.bodyWidgets[page.bodyWidgets.length - 1].nextRenderedWidget) && page.bodyWidgets[page.bodyWidgets.length - 1].nextRenderedWidget.sectionFormat.columns.length > 1) {\n                        fromSectionIndex = 0;\n                    }\n                }\n            }\n            else if (block.containerWidget.page.bodyWidgets.length > 1) {\n                var currentSectionIndex = block.containerWidget.index;\n                for (var i = this.documentHelper.pages.indexOf(block.containerWidget.page); i < this.documentHelper.pages.length; i++) {\n                    var page = this.documentHelper.pages[i];\n                    for (var j = 0; j < page.bodyWidgets.length; j++) {\n                        if (page.bodyWidgets[j].index === currentSectionIndex) {\n                            for (var k = nextIndex; k < page.bodyWidgets[j].childWidgets.length; k++) {\n                                var childWidget = page.bodyWidgets[j].childWidgets[k];\n                                this.updateIndex(childWidget, increaseIndex);\n                            }\n                            nextIndex = 0;\n                        }\n                    }\n                }\n            }\n            else {\n                var currentSectionIndex = block.containerWidget.index;\n                for (var j = this.documentHelper.pages.indexOf(block.containerWidget.page); j < this.documentHelper.pages.length; j++) {\n                    var page = this.documentHelper.pages[j];\n                    if (page.bodyWidgets[0].index === currentSectionIndex) {\n                        for (var k = nextIndex; k < page.bodyWidgets[0].childWidgets.length; k++) {\n                            var childWidget = page.bodyWidgets[0].childWidgets[k];\n                            this.updateIndex(childWidget, increaseIndex);\n                        }\n                        nextIndex = 0;\n                    }\n                    else {\n                        return;\n                    }\n                }\n            }\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n            var cells = block.containerWidget.getSplitWidgets();\n            var currentCellIndex = cells.indexOf(block.containerWidget);\n            for (var x = currentCellIndex; x < cells.length; x++) {\n                var blocks = cells[x].childWidgets;\n                for (var y = nextIndex; y < blocks.length; y++) {\n                    this.updateIndex(blocks[y], increaseIndex);\n                }\n                currentCellIndex = 0;\n                nextIndex = 0;\n            }\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableRowWidget) {\n            for (var i = nextIndex; i < block.containerWidget.childWidgets.length; i++) {\n                var cell = block.containerWidget.childWidgets[i];\n                if (cell.rowIndex === block.containerWidget.index) {\n                    this.updateIndex(cell, increaseIndex);\n                }\n            }\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            for (var i = nextIndex; i < block.containerWidget.childWidgets.length; i++) {\n                var row = block.containerWidget.childWidgets[i];\n                this.updateIndex(row, increaseIndex);\n                for (var j = 0; j < row.childWidgets.length; j++) {\n                    row.childWidgets[j].rowIndex = row.index;\n                }\n            }\n            //update Row index of all the cell\n        }\n        else if (block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.HeaderFooterWidget || block.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFrame\n            || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block.containerWidget) && block.containerWidget.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget)) {\n            for (var i = nextIndex; i < block.containerWidget.childWidgets.length; i++) {\n                var nextBlock = block.containerWidget.childWidgets[i];\n                this.updateIndex(nextBlock, increaseIndex);\n            }\n        }\n    };\n    Editor.prototype.updateIndex = function (widget, increment) {\n        if (increment) {\n            widget.index++;\n        }\n        else {\n            widget.index--;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateEndPosition = function () {\n        var selection = this.documentHelper.selection;\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            this.updateHistoryPosition(selection.start, false);\n        }\n    };\n    /**\n     * @private\n     * @returns { CommentCharacterElementBox[] }\n     */\n    Editor.prototype.checkAndRemoveComments = function (isReplace, isAccept) {\n        var selection = this.selection;\n        if (selection.isEmpty || (this.owner.enableTrackChanges && !isAccept) || isReplace) {\n            return [];\n        }\n        var initComplexHistory = false;\n        var comments = this.getSelectedComments();\n        if (comments.commentEndInfo.length > 0 || comments.commentStartInfo.length > 0) {\n            if (!initComplexHistory) {\n                initComplexHistory = true;\n                this.initComplexHistory('RemoveComment');\n            }\n            var startPosition = this.selection.start;\n            var endPosition = this.selection.end;\n            if (!this.selection.isForward) {\n                startPosition = this.selection.end;\n                endPosition = this.selection.start;\n            }\n            //Get start and end position in order.\n            var startBlockInfo = this.selection.getParagraphInfo(startPosition);\n            var endBlockInfo = this.selection.getParagraphInfo(endPosition);\n            for (var j = 0; j < comments.commentEndInfo.length; j++) {\n                var commentToDelete = comments.commentEndInfo[j].comment;\n                var commentStart = commentToDelete.commentStart;\n                var commentEndMark = commentToDelete.commentEnd;\n                var commentStartBlockInfo = this.selection.getParagraphInfoInternal(commentStart.line, commentStart.line.getOffset(commentStart, 0));\n                var commentEndBlockInfo = this.selection.getParagraphInfoInternal(commentEndMark.line, commentEndMark.line.getOffset(commentEndMark, 0));\n                if (endBlockInfo.paragraph === commentEndBlockInfo.paragraph) {\n                    if (commentToDelete.replyComments.length > 0) {\n                        for (var m = 0; m < commentToDelete.replyComments.length; m++) {\n                            var replyComment = commentToDelete.replyComments[m];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(replyComment.commentEnd)) {\n                                endBlockInfo.offset--;\n                            }\n                        }\n                    }\n                    endBlockInfo.offset--;\n                }\n                if (startBlockInfo.paragraph === commentStartBlockInfo.paragraph) {\n                    var updateStartPosition = commentStartBlockInfo.offset < startBlockInfo.offset;\n                    if (commentToDelete.replyComments.length > 0) {\n                        for (var m = 0; m < commentToDelete.replyComments.length; m++) {\n                            var replyComment = commentToDelete.replyComments[m];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(replyComment.commentStart)) {\n                                var replyCommentStart = this.selection.getParagraphInfoInternal(replyComment.commentStart.line, replyComment.commentStart.line.getOffset(replyComment.commentStart, 0));\n                                if (replyCommentStart.offset < startBlockInfo.offset) {\n                                    startBlockInfo.offset--;\n                                }\n                                if (endBlockInfo.paragraph === commentStartBlockInfo.paragraph) {\n                                    endBlockInfo.offset--;\n                                }\n                            }\n                        }\n                    }\n                    if (updateStartPosition) {\n                        startBlockInfo.offset--;\n                    }\n                    if (endBlockInfo.paragraph === commentStartBlockInfo.paragraph) {\n                        endBlockInfo.offset--;\n                    }\n                }\n                this.deleteCommentInternal(commentToDelete);\n            }\n            if (comments.commentStartInfo.length > 0) {\n                for (var k = 0; k < comments.commentStartInfo.length; k++) {\n                    if (comments.commentStartInfo[k].line.paragraph.equals(endBlockInfo.paragraph)) {\n                        endBlockInfo.offset--;\n                    }\n                    this.removeInline(comments.commentStartInfo[k]);\n                }\n            }\n            var startLineInfo = selection.getLineInfoBasedOnParagraph(startBlockInfo.paragraph, startBlockInfo.offset);\n            selection.start.setPositionFromLine(startLineInfo.line, startLineInfo.offset);\n            var endLineInfo = selection.getLineInfoBasedOnParagraph(endBlockInfo.paragraph, endBlockInfo.offset);\n            selection.end.setPositionFromLine(endLineInfo.line, endLineInfo.offset);\n        }\n        return comments.commentStartInfo;\n    };\n    Editor.prototype.updateHistoryForComments = function (removedCommentStart) {\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)\n            && this.editorHistory.currentHistoryInfo.action === 'RemoveComment') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(removedCommentStart)) {\n                for (var i = 0; i < removedCommentStart.length; i++) {\n                    this.initInsertInline(removedCommentStart[i], false);\n                }\n            }\n            this.editorHistory.currentHistoryInfo.endPosition = this.selection.startOffset;\n            this.editorHistory.updateComplexHistory();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onBackSpace = function () {\n        this.removeEditRange = true;\n        var selection = this.documentHelper.selection;\n        this.documentHelper.triggerSpellCheck = true;\n        if (!selection.isEmpty && selection.bookmarks.length > 0) {\n            this.extendSelectionToBookmarkStart();\n        }\n        if (selection.isEmpty) {\n            this.singleBackspace(selection, false);\n        }\n        else {\n            var comments = this.checkAndRemoveComments();\n            this.initHistory('BackSpace');\n            var skipBackSpace = this.deleteSelectedContents(selection, true);\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n                if (skipBackSpace) {\n                    this.editorHistory.currentBaseHistoryInfo = undefined;\n                }\n                else {\n                    if (this.checkEndPosition(selection)) {\n                        this.updateHistoryPosition(selection.end, false);\n                    }\n                    this.isSkipOperationsBuild = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.alertDialog);\n                    this.reLayout(selection);\n                    this.isSkipOperationsBuild = false;\n                    this.insertSpaceInFormField();\n                }\n            }\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)) {\n                for (var k = 0; k < comments.length; k++) {\n                    this.initInsertInline(comments[k], false);\n                }\n                this.editorHistory.currentHistoryInfo.endPosition = this.selection.startOffset;\n                this.editorHistory.updateComplexHistory();\n            }\n            if (this.owner.isSpellCheck) {\n                this.documentHelper.triggerSpellCheck = false;\n            }\n        }\n        this.removeEditRange = false;\n        this.documentHelper.layout.islayoutFootnote = false;\n        this.updateXmlMappedContentControl();\n    };\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.insertRemoveBookMarkElements = function (isUpdateComplexHistory) {\n        var isHandledComplexHistory = false;\n        if (!this.isRemoteAction) {\n            for (var i = 0; i < this.removedBookmarkElements.length; i++) {\n                var bookMark = this.removedBookmarkElements[i];\n                if (bookMark.bookmarkType === 0) {\n                    var bookMarkStart = bookMark;\n                    if (bookMarkStart && bookMarkStart.reference && this.removedBookmarkElements.indexOf(bookMarkStart.reference) !== -1) {\n                        var endIndex = this.removedBookmarkElements.indexOf(bookMarkStart.reference);\n                        var startIndex = this.removedBookmarkElements.indexOf(bookMarkStart);\n                        this.removedBookmarkElements.splice(endIndex, 1);\n                        this.removedBookmarkElements.splice(startIndex, 1);\n                        i--;\n                    }\n                    else {\n                        if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                            this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                            this.editorHistory.updateHistory();\n                        }\n                        this.initInsertInline(bookMarkStart.clone(), undefined, true);\n                        if (this.editorHistory.currentHistoryInfo && i === this.removedBookmarkElements.length - 1 && this.removedContentControlElements.length === 0 && this.removedEditRangeStartElements.length === 0 && this.removedEditRangeEndElements.length === 0) {\n                            this.editorHistory.updateComplexHistory();\n                            isHandledComplexHistory = true;\n                        }\n                    }\n                }\n                else {\n                    var bookMarkEnd = bookMark;\n                    if (bookMarkEnd && bookMarkEnd.reference && this.removedBookmarkElements.indexOf(bookMarkEnd.reference) !== -1) {\n                        var endIndex = this.removedBookmarkElements.indexOf(bookMarkEnd.reference);\n                        var startIndex = this.removedBookmarkElements.indexOf(bookMarkEnd);\n                        this.removedBookmarkElements.splice(endIndex, 1);\n                        this.removedBookmarkElements.splice(startIndex, 1);\n                        i--;\n                    }\n                    else {\n                        if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                            this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                            this.editorHistory.updateHistory();\n                        }\n                        this.initInsertInline(bookMarkEnd.clone(), undefined, true);\n                        if (this.editorHistory.currentHistoryInfo && i === this.removedBookmarkElements.length - 1 && this.removedContentControlElements.length === 0 && this.removedEditRangeStartElements.length === 0 && this.removedEditRangeEndElements.length === 0) {\n                            this.editorHistory.updateComplexHistory();\n                            isHandledComplexHistory = true;\n                        }\n                    }\n                }\n            }\n        }\n        this.removedBookmarkElements = [];\n        return isHandledComplexHistory;\n    };\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.insertRemoveContentControlElements = function (isUpdateComplexHistory) {\n        var isHandledComplexHistory = false;\n        if (!this.isRemoteAction) {\n            for (var i = 0; i < this.removedContentControlElements.length; i++) {\n                var contentControl = this.removedContentControlElements[i];\n                if (contentControl.type === 0) {\n                    var contentControlStart = contentControl;\n                    if (contentControlStart && contentControlStart.reference && this.removedContentControlElements.indexOf(contentControlStart.reference) !== -1) {\n                        var endIndex = this.removedContentControlElements.indexOf(contentControlStart.reference);\n                        var startIndex = this.removedContentControlElements.indexOf(contentControlStart);\n                        this.removedContentControlElements.splice(endIndex, 1);\n                        this.removedContentControlElements.splice(startIndex, 1);\n                        i--;\n                    }\n                    else {\n                        if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                            this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                            this.editorHistory.updateHistory();\n                        }\n                        this.initInsertInline(contentControlStart.clone(), undefined, true);\n                        if (this.editorHistory.currentHistoryInfo && i === this.removedContentControlElements.length - 1 && this.removedBookmarkElements.length === 0 && this.removedEditRangeStartElements.length === 0 && this.removedEditRangeEndElements.length === 0) {\n                            this.editorHistory.updateComplexHistory();\n                            isHandledComplexHistory = true;\n                        }\n                    }\n                }\n                else {\n                    var contentControlEnd = contentControl;\n                    if (contentControlEnd && contentControlEnd.reference && this.removedContentControlElements.indexOf(contentControlEnd.reference) !== -1) {\n                        var endIndex = this.removedContentControlElements.indexOf(contentControlEnd.reference);\n                        var startIndex = this.removedContentControlElements.indexOf(contentControlEnd);\n                        this.removedContentControlElements.splice(endIndex, 1);\n                        this.removedContentControlElements.splice(startIndex, 1);\n                        i--;\n                    }\n                    else {\n                        if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                            this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                            this.editorHistory.updateHistory();\n                        }\n                        this.initInsertInline(contentControlEnd.clone(), undefined, true);\n                        if (this.editorHistory.currentHistoryInfo && i === this.removedContentControlElements.length - 1 && this.removedBookmarkElements.length === 0 && this.removedEditRangeStartElements.length === 0 && this.removedEditRangeEndElements.length === 0) {\n                            this.editorHistory.updateComplexHistory();\n                            isHandledComplexHistory = true;\n                        }\n                    }\n                }\n            }\n        }\n        this.removedContentControlElements = [];\n        return isHandledComplexHistory;\n    };\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.insertRemovedEditRangeEndElements = function (isUpdateComplexHistory) {\n        var isHandledComplexHistory = false;\n        if (!this.isRemoteAction) {\n            for (var i = this.removedEditRangeEndElements.length - 1; i >= 0; i--) {\n                var editRangeEndElementBox = this.removedEditRangeEndElements[i];\n                if (editRangeEndElementBox && this.removedEditRangeStartElements.indexOf(editRangeEndElementBox.editRangeStart) !== -1) {\n                    var endIndex = this.removedEditRangeEndElements.indexOf(editRangeEndElementBox);\n                    var startIndex = this.removedEditRangeStartElements.indexOf(editRangeEndElementBox.editRangeStart);\n                    this.removedEditRangeEndElements.splice(endIndex, 1);\n                    this.removedEditRangeStartElements.splice(startIndex, 1);\n                    i--;\n                }\n                else {\n                    if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                        this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                        this.editorHistory.updateHistory();\n                    }\n                    this.initInsertInline(editRangeEndElementBox.clone(), undefined, true);\n                    var inlineObj = this.selection.start.paragraph.getInline(this.selection.start.offset, 0);\n                    inlineObj.element.editRangeStart.editRangeEnd = inlineObj.element;\n                    if (this.editorHistory.currentHistoryInfo && i === 0 && this.removedContentControlElements.length === 0 && this.removedEditRangeStartElements.length === 0 && this.removedBookmarkElements.length === 0) {\n                        this.editorHistory.updateComplexHistory();\n                        isHandledComplexHistory = true;\n                    }\n                }\n            }\n        }\n        this.removedEditRangeEndElements = [];\n        return isHandledComplexHistory;\n    };\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.insertRemovedEditRangeStartElements = function (isUpdateComplexHistory) {\n        var isHandledComplexHistory = false;\n        if (!this.isRemoteAction) {\n            for (var i = 0; i < this.removedEditRangeStartElements.length; i++) {\n                var editRangeStartElementBox = this.removedEditRangeStartElements[i];\n                if (editRangeStartElementBox && this.removedEditRangeEndElements.indexOf(editRangeStartElementBox.editRangeEnd) !== -1) {\n                    var endIndex = this.removedEditRangeEndElements.indexOf(editRangeStartElementBox.editRangeEnd);\n                    var startIndex = this.removedEditRangeStartElements.indexOf(editRangeStartElementBox);\n                    this.removedEditRangeEndElements.splice(endIndex, 1);\n                    this.removedEditRangeStartElements.splice(startIndex, 1);\n                    i--;\n                }\n                else {\n                    if (this.editorHistory.currentBaseHistoryInfo && !isUpdateComplexHistory) {\n                        this.initComplexHistory(this.editorHistory.currentBaseHistoryInfo.action);\n                        this.editorHistory.updateHistory();\n                    }\n                    this.initInsertInline(editRangeStartElementBox.clone(), undefined, true);\n                    var inlineObj = this.selection.start.paragraph.getInline(this.selection.start.offset, 0);\n                    inlineObj.element.editRangeEnd.editRangeStart = inlineObj.element;\n                    if (this.editorHistory.currentHistoryInfo && i === this.removedEditRangeStartElements.length - 1 && this.removedContentControlElements.length === 0 && this.removedBookmarkElements.length === 0 && this.removedEditRangeEndElements.length === 0) {\n                        this.editorHistory.updateComplexHistory();\n                        isHandledComplexHistory = true;\n                    }\n                }\n            }\n        }\n        this.removedEditRangeStartElements = [];\n        return isHandledComplexHistory;\n    };\n    /**\n     * @private\n     * @param {Selection} selection - Specifies the selection\n     * @param {boolean} isBackSpace - Specifies is backspace.\n     * @returns {boolean}\n     */\n    Editor.prototype.deleteSelectedContents = function (selection, isBackSpace, isDeletecell) {\n        var skipBackSpace = this.deleteSelectedContentInternal(selection, isBackSpace, selection.start, selection.end, isDeletecell);\n        var textPosition = selection.getTextPosBasedOnLogicalIndex(selection.editPosition);\n        selection.selectContent(textPosition, true);\n        return skipBackSpace;\n    };\n    Editor.prototype.removeWholeElement = function (selection) {\n        this.initHistory('BackSpace');\n        this.deleteSelectedContents(selection, true);\n        if (this.checkEndPosition(selection)) {\n            this.updateHistoryPosition(selection.end, false);\n        }\n        this.reLayout(selection);\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getSelectedComments = function () {\n        var comments = this.documentHelper.comments;\n        var commentEnds = [];\n        var commentStarts = [];\n        for (var i = 0; i < comments.length; i++) {\n            var comment = comments[i];\n            var commentEnd = comment.commentEnd;\n            var commentStart = comment.commentStart;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentEnd) && this.selection.isElementInSelection(commentEnd, true)) {\n                commentEnds.push(commentEnd);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(commentStart) && this.selection.isElementInSelection(commentStart, false)) {\n                commentStarts.push(commentStart);\n                for (var j = 0; j < comment.replyComments.length; j++) {\n                    if (comment.replyComments[j].commentStart) {\n                        commentStarts.push(comment.replyComments[j].commentStart);\n                    }\n                }\n            }\n        }\n        return { commentStartInfo: commentStarts, commentEndInfo: commentEnds };\n    };\n    /**\n     * Remove single character on left of cursor position\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {boolean} isRedoing - Specified the is redoing.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.singleBackspace = function (selection, isRedoing) {\n        var history = this.editorHistory;\n        // If backspace is pressed after auto format to hyperlink is done, need to undo auto format.\n        if (history && !isRedoing && !history.canRedo() && history.canUndo()) {\n            var historyInfo = history.undoStack[history.undoStack.length - 1];\n            var startBlockInfo = this.selection.getParagraphInfo(selection.start);\n            var endBlockInfo = this.selection.getParagraphInfo(selection.end);\n            if (historyInfo.action === 'AutoFormatHyperlink' && historyInfo.insertPosition === this.selection.getHierarchicalIndex(startBlockInfo.paragraph, startBlockInfo.offset.toString()) &&\n                historyInfo.endPosition === this.selection.getHierarchicalIndex(endBlockInfo.paragraph, endBlockInfo.offset.toString())) {\n                history.undo();\n                return;\n            }\n        }\n        var isCommentDelete = false;\n        var paragraph = selection.start.paragraph;\n        var currentLineWidget = selection.start.currentWidget;\n        var offset = selection.start.offset;\n        var indexInInline = 0;\n        var inlineObj = currentLineWidget.getInline(offset, indexInInline);\n        var inline = inlineObj.element;\n        var initComplextHistory = false;\n        var previousOffset = offset;\n        var updateSelection = false;\n        var previousNode;\n        while (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n            var commentMark = inline;\n            inline = inline.previousNode;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                inline = previousNode;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.commentType == 0) {\n                previousNode = inline.previousNode;\n            }\n            else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                inline = undefined;\n            }\n            if (inline) {\n                previousOffset = inline.length;\n            }\n            if (commentMark.commentType === 0 && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) || !(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox))) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                    inline = commentMark;\n                    previousOffset = 0;\n                }\n                else {\n                    previousOffset = inline.length;\n                }\n                updateSelection = true;\n                break;\n            }\n            else if (commentMark.commentType === 1) {\n                if (!initComplextHistory) {\n                    this.initComplexHistory('RemoveComment');\n                    initComplextHistory = true;\n                }\n                this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n                this.deleteCommentInternal(commentMark.comment);\n                this.isSkipOperationsBuild = false;\n                updateSelection = true;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && inline.characterFormat.hidden) {\n            return;\n        }\n        if (updateSelection) {\n            //When paragraph has only comment end mark, there will be no previous inline and comment end mark will be delete\n            //And paragraph will become empty paragraph.\n            //So handled special case to update selection.\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n                var lineWidget = paragraph.childWidgets[0];\n                selection.start.setPositionParagraph(lineWidget, 0);\n                selection.end.setPositionParagraph(lineWidget, 0);\n            }\n            else {\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, previousOffset);\n                selection.start.setPositionParagraph(inline.line, offset);\n                selection.end.setPositionParagraph(inline.line, offset);\n            }\n        }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n            var contentControl = this.selection.currentContentControl;\n            this.selection.selectContentControlInternal(contentControl);\n            //to prevent the backspacing for content control locked state\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline.type === 1 && contentControl.contentControlProperties.lockContentControl || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.nextElement))) {\n                if (this.selection.isEmpty) {\n                    this.onBackSpace();\n                }\n                else {\n                    return;\n                }\n            }\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline.type === 0 && inline.nextElement !== contentControl.reference) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline.type === 0 && (contentControl.contentControlProperties.lockContentControl || this.documentHelper.isFormFillProtectedMode) && inline.nextElement === contentControl.reference)) {\n                return;\n            }\n        }\n        if (this.selection.isInlineFormFillMode()) {\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 2) {\n                return;\n            }\n            var resultText = this.getFieldResultText();\n            if (resultText.length === 1) {\n                this.selection.selectFieldInternal(this.selection.getCurrentFormField());\n                this.insertTextInternal(this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5), true);\n                this.selection.selectTextElementStartOfField(this.selection.getCurrentFormField());\n                return;\n            }\n        }\n        indexInInline = inlineObj.index;\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            inline.ignoreOnceItems = [];\n        }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            inline.ignoreOnceItems = [];\n        }\n        var previousInline = inline;\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 2) {\n            if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.isLinkedFieldCharacter(inline)) {\n                var begin = inline.fieldBegin;\n                var end = inline.fieldEnd;\n                if (begin.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && begin.nextNode.reference) {\n                    end = begin.nextNode.reference;\n                }\n                selection.start.setPositionParagraph(begin.line, begin.line.getOffset(begin, 0));\n                selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 0) + 1);\n                selection.fireSelectionChanged(true);\n                return;\n            }\n        }\n        if (!this.owner.enableTrackChanges && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n            if (inline.footnoteType === 'Footnote') {\n                this.removeFootnote(inline);\n            }\n            else {\n                this.removeEndnote(inline);\n            }\n        }\n        if (inline && (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl || inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl)) {\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && inline.previousNode && !(inline.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox)) {\n                inline = inline.previousNode;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, inline.length);\n            }\n            if (inline && inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl\n                && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && !this.documentHelper.isFormFillProtectedMode) {\n                var start_1 = inline.previousNode;\n                var end = inline.nextNode;\n                if (!start_1.contentControlProperties.lockContentControl) {\n                    selection.start.setPositionParagraph(start_1.line, start_1.line.getOffset(start_1, 0));\n                    selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 0) + 1);\n                    this.removeWholeElement(selection);\n                    return;\n                }\n            }\n        }\n        // if (inline instanceof CommentCharacterElementBox && inline.commentType === 1) {\n        //     let comment: CommentElementBox = inline.comment;\n        //     if (comment.isReply) {\n        //         comment = comment.ownerComment;\n        //     }\n        //     while (inline instanceof CommentCharacterElementBox) {\n        //         inline = inline.previousNode;\n        //     }\n        //     this.deleteCommentInternal(comment);\n        //     paragraph = inline.line.paragraph;\n        //     offset = inline.line.getOffset(inline, inline.length);\n        //     selection.start.setPositionParagraph(inline.line, offset);\n        //     selection.end.setPositionParagraph(inline.line, offset);\n        //     isCommentDelete = true;\n        // }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1 && !this.selection.isInlineFormFillMode()) {\n            var prevInline = selection.getPreviousValidElement(inline);\n            if (prevInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && prevInline.fieldType !== 0) {\n                inline = prevInline.fieldBegin;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, 0);\n                if (inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.nextNode.reference) {\n                    var start_2 = inline.nextNode.reference;\n                    selection.start.setPositionParagraph(start_2.line, start_2.line.getOffset(start_2, 1));\n                }\n                selection.end.setPositionParagraph(inline.line, offset); //Selects the entire field.\n                selection.fireSelectionChanged(true);\n                return;\n            }\n            else if (prevInline !== inline) {\n                inline = prevInline; //Updates the offset to delete next content.\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, inline.length);\n            }\n        }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            if ((inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox && inline.editRangeEnd === inline.nextNode)\n                || (inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox\n                    && inline.editRangeStart === inline.previousNode)) {\n                return;\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox && !(inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox)) {\n                return;\n            }\n            if (this.documentHelper.isDocumentProtected &&\n                this.documentHelper.protectionType === 'ReadOnly') {\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                    return;\n                }\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                do {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.previousNode)) {\n                        inline = inline.previousNode;\n                        paragraph = inline.line.paragraph;\n                        offset = inline.line.getOffset(inline, inline.length);\n                    }\n                    else {\n                        break;\n                    }\n                } while (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox);\n            }\n            if (inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox\n                && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                var start_3 = inline.previousNode;\n                var end = inline.nextNode;\n                selection.start.setPositionParagraph(start_3.line, start_3.line.getOffset(start_3, 0));\n                selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 0) + 1);\n                this.removeWholeElement(selection);\n                return;\n            }\n        }\n        if (inline && (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n            if (this.documentHelper.isDocumentProtected &&\n                this.documentHelper.protectionType === 'ReadOnly') {\n                if (inline.previousNode && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                    return;\n                }\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                if (inline.previousNode) {\n                    inline = inline.previousNode;\n                    if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && !this.selection.isInlineFormFillMode()) {\n                        inline = inline.fieldBegin;\n                        paragraph = inline.line.paragraph;\n                        offset = inline.line.getOffset(inline, 0);\n                        if (inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.nextNode.reference) {\n                            var start = inline.nextNode.reference;\n                            selection.start.setPositionParagraph(start.line, start.line.getOffset(start, 1));\n                        }\n                        selection.end.setPositionParagraph(inline.line, offset);\n                        selection.fireSelectionChanged(true);\n                        return;\n                    }\n                    paragraph = inline.line.paragraph;\n                    offset = inline.line.getOffset(inline, inline.length);\n                    selection.start.setPositionFromLine(inline.line, offset);\n                    selection.end.setPositionInternal(selection.start);\n                }\n                else {\n                    if (inline.bookmarkType === 1) {\n                        // remove paragraph mark and move bookmark to previous paragraph\n                        if (paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                            var prevParagraph = paragraph.previousRenderedWidget;\n                            var line = prevParagraph.lastChild;\n                            selection.start.setPositionParagraph(inline.line, inline.line.getOffset(inline, 0));\n                            selection.end.setPositionParagraph(line, line.getEndOffset());\n                            this.removeWholeElement(selection);\n                            return;\n                        }\n                    }\n                    else {\n                        if (inline.paragraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                            selection.start.setPositionFromLine(inline.line, 0);\n                            selection.end.setPositionInternal(selection.start);\n                            offset = 0;\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                }\n                // Remove bookmark if selection is in between bookmark start and end element.\n            }\n            else if (inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox &&\n                inline.bookmarkType === 0 && inline.reference === inline.nextNode) {\n                this.deleteBookmark(inline.name);\n                return;\n            }\n            if (inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                var begin = inline.previousNode;\n                var end = inline.nextNode;\n                selection.start.setPositionParagraph(begin.line, begin.line.getOffset(begin, 0));\n                selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 0) + 1);\n                this.removeWholeElement(selection);\n                return;\n            }\n        }\n        if (!isRedoing) {\n            this.initHistory('BackSpace');\n        }\n        if (offset === selection.getStartOffset(paragraph) && selection.start.currentWidget.isFirstLine()) {\n            if (paragraph.paragraphFormat.listFormat && paragraph.paragraphFormat.listFormat.listId !== -1) {\n                // BUG_859140 - handled backspace for list as per word desktop behaviour\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.undoStack) && this.editorHistory.undoStack.length > 0 &&\n                    this.editorHistory.undoStack[this.editorHistory.undoStack.length - 1].action === 'ListFormat') {\n                    this.onApplyListInternal(this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId), paragraph.paragraphFormat.listFormat.listLevelNumber - 1);\n                }\n                else {\n                    this.onApplyList(undefined);\n                }\n                return;\n            }\n            if (paragraph.paragraphFormat.firstLineIndent !== 0) {\n                this.onApplyParagraphFormat('firstLineIndent', 0, false, false);\n                if (paragraph.paragraphFormat.leftIndent !== 0) {\n                    this.onApplyParagraphFormat('leftIndent', 0, false, false);\n                }\n                return;\n            }\n            if (paragraph.paragraphFormat.leftIndent !== 0) {\n                this.onApplyParagraphFormat('leftIndent', 0, false, false);\n                return;\n            }\n            if (!paragraph.paragraphFormat.bidi && paragraph.paragraphFormat.textAlignment !== 'Left') {\n                this.onApplyParagraphFormat('textAlignment', 'Left', false, true);\n                return;\n            }\n            if (paragraph.previousRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                var previousParagraph = paragraph.previousRenderedWidget;\n                // if (isNullOrUndefined(previousParagraph)) {\n                //     previousParagraph = this.documentHelper.selection.getPreviousBlock(paragraph) as ParagraphWidget;\n                // }\n                if (previousParagraph.characterFormat.hidden) {\n                    return;\n                }\n                selection.owner.isShiftingEnabled = true;\n                if (this.owner.enableTrackChanges && paragraph.previousRenderedWidget != undefined && paragraph.previousRenderedWidget.characterFormat.revisions.length == 0) {\n                    var characterFormat = previousParagraph.characterFormat.cloneFormat();\n                    if (!this.checkToMatchEmptyParaMarkBack(previousParagraph)) {\n                        this.insertRevision(previousParagraph.characterFormat, 'Deletion');\n                        var endOffset = this.documentHelper.selection.getLineLength(previousParagraph.lastChild);\n                        var previousIndex = previousParagraph.childWidgets.length - 1;\n                        this.documentHelper.layout.reLayoutParagraph(previousParagraph, previousIndex, 0);\n                        selection.selects(previousParagraph.childWidgets[previousIndex], endOffset, true);\n                        this.addRemovedNodes(characterFormat);\n                    }\n                    else {\n                        var endOffset = this.documentHelper.selection.getLineLength(previousParagraph.lastChild);\n                        var previousIndex = previousParagraph.childWidgets.length - 1;\n                        this.documentHelper.layout.reLayoutParagraph(previousParagraph, previousIndex, 0);\n                        selection.selects(previousParagraph.childWidgets[previousIndex], endOffset, true);\n                        this.addRemovedNodes(characterFormat);\n                    }\n                }\n                else if (previousParagraph.isEmpty() && !this.owner.enableTrackChanges) {\n                    this.removePrevParaMarkRevision(paragraph);\n                    if (!(paragraph === paragraph.bodyWidget.lastChild && previousParagraph.bodyWidget.index !== paragraph.bodyWidget.index)) {\n                        this.removeBlock(previousParagraph);\n                        this.addRemovedNodes(previousParagraph);\n                        var prevParagraph = paragraph.previousRenderedWidget;\n                        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevParagraph) && prevParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && prevParagraph.isEmpty() && prevParagraph.bodyWidget.index !== paragraph.bodyWidget.index) || previousParagraph.isSectionBreak) {\n                            selection.moveToPreviousCharacter();\n                        }\n                    }\n                    else {\n                        var endOffset = this.documentHelper.selection.getLineLength(previousParagraph.lastChild);\n                        var previousIndex = previousParagraph.childWidgets.length - 1;\n                        selection.selects(previousParagraph.childWidgets[previousIndex], endOffset, true);\n                    }\n                }\n                else if (this.owner.enableTrackChanges && previousParagraph.characterFormat.revisions != undefined && previousParagraph.characterFormat.revisions[0].revisionType == 'Deletion') {\n                    var endOffset = this.documentHelper.selection.getLineLength(previousParagraph.lastChild);\n                    var previousIndex = previousParagraph.childWidgets.length - 1;\n                    this.documentHelper.layout.reLayoutParagraph(previousParagraph, previousIndex, 0);\n                    selection.selects(previousParagraph.childWidgets[previousIndex], endOffset, true);\n                    this.addRemovedNodes(paragraph);\n                }\n                else if (this.owner.enableTrackChanges && previousParagraph.characterFormat.revisions != undefined && selection.start.isAtParagraphStart && previousParagraph.isEmpty()) {\n                    this.addRemovedRevisionInfo(previousParagraph.characterFormat, undefined, false);\n                    this.addRemovedNodes(previousParagraph);\n                    this.removePrevParaMarkRevision(paragraph);\n                    this.removeBlock(previousParagraph, false, true);\n                }\n                else {\n                    var checkCombine = false;\n                    if (!(paragraph === paragraph.bodyWidget.lastChild && previousParagraph.bodyWidget.index !== paragraph.bodyWidget.index) && (paragraph.bodyWidget.sectionFormat.breakCode !== 'NoBreak' || paragraph !== paragraph.bodyWidget.firstChild)) {\n                        if (paragraph.characterFormat.revisions.length > 0 && previousParagraph.characterFormat.revisions.length > 0 && paragraph.characterFormat.revisions[0].revisionType == 'Insertion') {\n                            this.addRemovedRevisionInfo(paragraph.characterFormat, undefined, false);\n                            this.removePrevParaMarkRevision(paragraph, true);\n                        }\n                        else {\n                            this.removePrevParaMarkRevision(paragraph, false, true);\n                            for (var i = 0; i < paragraph.characterFormat.revisions.length; i++) {\n                                var revision = paragraph.characterFormat.revisions[i];\n                                if (revision.range.indexOf(paragraph.characterFormat) !== -1) {\n                                    var index = revision.range.indexOf(paragraph.characterFormat);\n                                    revision.range.splice(index, 1, previousParagraph.characterFormat);\n                                }\n                                previousParagraph.characterFormat.revisions.push(revision);\n                            }\n                        }\n                        this.removeBlock(paragraph, false, true);\n                        checkCombine = true;\n                    }\n                    var endOffset = this.documentHelper.selection.getLineLength(previousParagraph.lastChild);\n                    var previousIndex = previousParagraph.childWidgets.length - 1;\n                    var lineWidget = void 0;\n                    if (!paragraph.isEmpty() && checkCombine) {\n                        for (var i = 0; i < paragraph.childWidgets.length; i++) {\n                            lineWidget = paragraph.childWidgets[i];\n                            previousParagraph.childWidgets.push(lineWidget);\n                            for (var j = 0; j < lineWidget.children.length; j++) {\n                                if (lineWidget.children[j] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                                    var index = this.documentHelper.footnoteCollection.indexOf(lineWidget.children[j]);\n                                    if (index === -1) {\n                                        lineWidget.children[j].isLayout = false;\n                                        var indexcolle = parseInt(lineWidget.children[j].text);\n                                        this.documentHelper.footnoteCollection.splice(indexcolle - 1, 0, lineWidget.children[j]);\n                                        // this.documentHelper.footnoteCollection.push(lineWidget.children[j] as FootnoteElementBox);\n                                    }\n                                }\n                            }\n                            paragraph.childWidgets.splice(i, 1);\n                            i--;\n                            lineWidget.paragraph = previousParagraph;\n                        }\n                    }\n                    this.documentHelper.layout.reLayoutParagraph(previousParagraph, previousIndex, 0);\n                    selection.selects(previousParagraph.childWidgets[previousIndex], endOffset, true);\n                    if (checkCombine) {\n                        this.addRemovedNodes(paragraph);\n                    }\n                }\n                this.setPositionForHistory();\n                var footNoteWidgets = this.documentHelper.layout.getFootNoteWidgetsOf(paragraph);\n                if (footNoteWidgets.length > 0) {\n                    var layout = this.documentHelper.layout;\n                    var bodyWidget = paragraph.bodyWidget;\n                    layout.layoutfootNote(bodyWidget.page.footnoteWidget);\n                }\n                // if (!isRedoing) {\n                this.reLayout(selection);\n                // }\n            }\n            else {\n                if (this.editorHistory) {\n                    this.editorHistory.currentBaseHistoryInfo = undefined;\n                }\n            }\n        }\n        else {\n            if (!isRedoing) {\n                selection.owner.isShiftingEnabled = true;\n            }\n            var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n            var lineWidget = selection.start.currentWidget;\n            var removeOffset = offset - 1;\n            if (removeOffset < 0) {\n                lineWidget = lineWidget.previousLine;\n                removeOffset = this.documentHelper.selection.getLineLength(lineWidget) + removeOffset;\n            }\n            this.removeAtOffset(lineWidget, selection, removeOffset);\n            var contentControl = this.selection.currentContentControl;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && contentControl.contentControlProperties.isTemporary) {\n                this.removeContentControl();\n            }\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset - 1, false);\n            this.setPositionForHistory();\n            if (!isRedoing) {\n                this.reLayout(selection);\n                if (isCommentDelete) {\n                    this.owner.editorHistoryModule.undoStack[this.owner.editorHistoryModule.undoStack.length - 2].modifiedActions.push(this.owner.editorHistoryModule.undoStack[this.owner.editorHistoryModule.undoStack.length - 1]);\n                    this.owner.editorHistoryModule.undoStack.splice(this.owner.editorHistoryModule.undoStack.length - 1, 1);\n                    isCommentDelete = false;\n                }\n            }\n            else {\n                this.fireContentChange();\n            }\n        }\n        if (initComplextHistory && this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            this.editorHistory.currentHistoryInfo.endPosition = this.selection.startOffset;\n            this.editorHistory.updateComplexHistory();\n        }\n    };\n    Editor.prototype.setPositionForHistory = function (editPosition) {\n        var selection = this.documentHelper.selection;\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(editPosition)) {\n                this.updateHistoryPosition(selection.start, true);\n                this.editorHistory.currentBaseHistoryInfo.endPosition = this.editorHistory.currentBaseHistoryInfo.insertPosition;\n            }\n            else {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = editPosition;\n                this.editorHistory.currentBaseHistoryInfo.endPosition = editPosition;\n            }\n        }\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeAtOffset = function (lineWidget, selection, offset) {\n        var count = 0;\n        var lineIndex = lineWidget.paragraph.childWidgets.indexOf(lineWidget);\n        var childLength = lineWidget.children.length;\n        for (var i = 0; i < childLength; i++) {\n            var inline = lineWidget.children[i];\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                continue;\n            }\n            var isBreak = this.removeCharacter(inline, offset, count, lineWidget, lineIndex, i);\n            if (isBreak) {\n                break;\n            }\n            count += inline.length;\n        }\n    };\n    Editor.prototype.removeCharacter = function (inline, offset, count, lineWidget, lineIndex, i, isRearrange) {\n        var isBreak = false;\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.reference && inline.line !== inline.reference.line && !(lineWidget.children[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.line.previousLine)) {\n                inline.line.previousLine.children.splice(inline.line.previousLine.children.length, 0, inline);\n                inline.line = inline.line.previousLine;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.line.paragraph.previousRenderedWidget)) {\n                inline.line.paragraph.previousRenderedWidget.lastChild.children.splice(inline.line.paragraph.previousRenderedWidget.lastChild.children.length, 0, inline);\n                inline.line = inline.line.paragraph.previousRenderedWidget.lastChild;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.line.paragraph.nextRenderedWidget)) {\n                inline.line.paragraph.nextRenderedWidget.firstChild.children.splice(inline.line.paragraph.nextRenderedWidget.firstChild.children.length, 0, inline);\n                inline.line = inline.line.paragraph.nextRenderedWidget.firstChild;\n            }\n            lineWidget.children.splice(i, 1);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lineWidget.layoutedElements) && lineWidget.layoutedElements.length > 0) {\n                lineWidget.layoutedElements.splice(i, 1);\n            }\n            return true;\n        }\n        if (offset < count + inline.length) {\n            var indexInInline = offset - count;\n            inline.ischangeDetected = true;\n            if (this.owner.isSpellCheck) {\n                // here we are removing errorCollection for next & previous elements for recalculating spellcheck error\n                var nextElement = inline.nextElement;\n                var previousElement = inline.previousElement;\n                this.owner.spellCheckerModule.removeErrorsFromCollection({ 'element': inline, 'text': inline.text });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement) && nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                    nextElement.ischangeDetected = true;\n                    this.owner.spellCheckerModule.removeErrorsFromCollection({ 'element': nextElement, 'text': nextElement.text });\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElement) && previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                    previousElement.ischangeDetected = true;\n                    this.owner.spellCheckerModule.removeErrorsFromCollection({ 'element': previousElement, 'text': previousElement.text });\n                }\n                if (!inline.canTrigger) {\n                    this.documentHelper.triggerSpellCheck = false;\n                }\n            }\n            if (offset === count && inline.length === 1) {\n                if (this.owner.enableTrackChanges && !this.skipTracking()) {\n                    this.addRemovedNodes(inline.clone());\n                    this.handleDeleteTracking(inline, indexInInline, 1, i);\n                }\n                else {\n                    this.unLinkFieldCharacter(inline);\n                    this.unlinkRangeFromRevision(inline, true);\n                    this.addRemovedRevisionInfo(inline, undefined);\n                    this.addRemovedNodes(inline);\n                    if (this.owner.enableTrackChanges && this.editorHistory.isRedoing && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                        if (inline.footnoteType === 'Footnote') {\n                            this.removeFootnote(inline);\n                        }\n                        else {\n                            this.removeEndnote(inline);\n                        }\n                    }\n                    lineWidget.children.splice(i, 1);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lineWidget.layoutedElements) && lineWidget.layoutedElements.length > 0) {\n                        lineWidget.layoutedElements.splice(i, 1);\n                        if (lineWidget.layoutedElements.length === 0) {\n                            lineWidget.layoutedElements = undefined;\n                        }\n                    }\n                }\n                this.documentHelper.layout.reLayoutParagraph(lineWidget.paragraph, lineIndex, i, undefined, isRearrange);\n            }\n            else {\n                var span = this.handleDeleteTracking(inline, indexInInline, 1);\n                this.documentHelper.layout.reLayoutParagraph(lineWidget.paragraph, lineIndex, i, undefined, isRearrange);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(span)) {\n                    if (inline.revisions.length > 0) {\n                        this.addRemovedRevisionInfo(inline, span);\n                    }\n                    this.addRemovedNodes(span);\n                }\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                this.selection.skipEditRangeRetrieval = true;\n                this.removeUserRestrictionsInternal(inline, undefined, true);\n                this.selection.updateEditRangeCollection();\n                this.fireContentChange();\n                this.selection.skipEditRangeRetrieval = false;\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                if (inline.bookmarkType === 0 && this.documentHelper.bookmarks.containsKey(inline.name)) {\n                    this.documentHelper.bookmarks.remove(inline.name);\n                }\n            }\n            isBreak = true;\n        }\n        return isBreak;\n    };\n    Editor.prototype.removeCharacterInLine = function (inline, indexInInline, endOffset) {\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n            inline.isWidthUpdated = false;\n            span.characterFormat.copyFormat(inline.characterFormat);\n            var removedCount = (endOffset === 1) ? 1 : (endOffset - indexInInline);\n            span.text = inline.text.substr(indexInInline, removedCount);\n            var text = inline.text;\n            inline.text = text.substring(0, indexInInline) + text.substring(indexInInline + removedCount, text.length);\n            if (inline.contentControlProperties) {\n                span.contentControlProperties = inline.contentControlProperties.clone();\n            }\n        }\n        return span;\n    };\n    Editor.prototype.removeRevisionsInformation = function (elementBox, indexInInline, endOffset, elementIndex) {\n        var removeElement = elementBox.previousElement;\n        var revision;\n        revision = this.retrieveRevisionInOder(removeElement);\n        if (revision.revisionType === 'Insertion') {\n            if (this.isRevisionMatched(removeElement, undefined)) {\n                elementBox.line.children.splice(elementIndex, 1);\n            }\n        }\n    };\n    Editor.prototype.handleDeleteTracking = function (elementBox, indexInInline, endOffset, elementIndex, isSkipRecordRevision, startIndex, endIndex) {\n        var isTrackingEnabled = this.owner.enableTrackChanges;\n        var isUndoing = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) ? false : (this.editorHistory.isUndoing || this.editorHistory.isRedoing);\n        var removedNode = undefined;\n        if (this.canHandleDeletion() || (isTrackingEnabled && (!this.skipTracking() || (elementBox.paragraph.isInsideTable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.isRedoing && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action === \"RemoveRowTrack\")))) {\n            if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && elementBox.previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && elementBox.previousElement.formFieldData) {\n                    if (elementBox.previousElement.revisions.length > 0) {\n                        this.removeRevisionsInformation(elementBox, indexInInline, endOffset, elementIndex);\n                    }\n                }\n                else {\n                    if (isTrackingEnabled && elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                        if (!this.checkToCombineRevisionsInSides(elementBox, 'Deletion')) {\n                            this.insertRevision(elementBox, 'Deletion');\n                        }\n                        this.updateLastElementRevision(elementBox);\n                    }\n                    else {\n                        if (!(elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox)) {\n                            elementBox.line.children.splice(elementBox.indexInOwner, 1);\n                        }\n                        else {\n                            var isTrue = false;\n                            for (var i = 0; i < this.owner.documentHelper.comments.length; i++) {\n                                if (elementBox.commentId === this.owner.documentHelper.comments[i].commentId) {\n                                    isTrue = true;\n                                }\n                            }\n                            if (!isTrue) {\n                                elementBox.line.children.splice(elementBox.indexInOwner, 1);\n                            }\n                        }\n                    }\n                }\n                return undefined;\n            }\n            var isDelete = false;\n            if (this.owner.editorHistoryModule) {\n                isDelete = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule.currentBaseHistoryInfo) && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'Delete');\n            }\n            if (!this.skipTableElements) {\n                this.updateEndRevisionIndex();\n            }\n            if (elementBox.revisions.length > 0) {\n                var revision = this.retrieveRevisionInOder(elementBox);\n                var index = this.owner.revisions.changes.indexOf(revision);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule.currentBaseHistoryInfo) && !isSkipRecordRevision) {\n                    var startValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementIndex) ? indexInInline : 0;\n                    var endValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementIndex) ? ((endOffset === 1) ? 1 : (endOffset - indexInInline)) : elementBox.length;\n                    this.owner.editorHistoryModule.currentBaseHistoryInfo.recordInsertRevisionDeletetion(elementBox, startValue, endValue);\n                }\n                if (revision.revisionType === 'Insertion') {\n                    if (this.isRevisionMatched(elementBox, undefined)) {\n                        // inserted revision same author as delete revision so we can delete\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementIndex)) {\n                            removedNode = this.removeCharacterInLine(elementBox, indexInInline, endOffset);\n                            var revision_2 = elementBox.revisions[0];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision_2)) {\n                                this.owner.trackChangesPane.updateCurrentTrackChanges(revision_2);\n                            }\n                        }\n                        else {\n                            var index_1 = revision.range.indexOf(elementBox);\n                            revision.range.splice(index_1, 1);\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                            if (revision.range.length === 0) {\n                                this.owner.revisionsInternal.remove(revision);\n                            }\n                            this.unLinkFieldCharacter(elementBox);\n                            elementBox.line.children.splice(elementIndex, 1);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.line.layoutedElements) && elementBox.line.layoutedElements.length > 0 && elementBox.line.layoutedElements.indexOf(elementBox) !== -1) {\n                                elementBox.line.layoutedElements.splice(elementIndex, 1);\n                            }\n                            if (elementBox.line.children.length === 0) {\n                                elementBox.line.layoutedElements = undefined;\n                            }\n                        }\n                        if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                            if (elementBox.footnoteType === 'Footnote') {\n                                this.removeFootnote(elementBox);\n                            }\n                            else {\n                                this.removeEndnote(elementBox);\n                            }\n                        }\n                    }\n                    else {\n                        //Insert revision and delete revision (which is to be included) haven't matched\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementIndex)) {\n                            var text = this.removeCharacterInLine(elementBox, indexInInline, endOffset);\n                            var revision_3 = elementBox.revisions[0];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision_3)) {\n                                this.owner.trackChangesPane.updateCurrentTrackChanges(revision_3);\n                            }\n                            if (indexInInline === 0) {\n                                var prevElement = elementBox.previousElement;\n                                this.handleDeletionForInsertRevision(prevElement, elementBox, text, endOffset, indexInInline, true);\n                            }\n                            else if (elementBox.length !== indexInInline) {\n                                for (var i = elementBox.revisions.length - 1; i >= 0; i--) {\n                                    var revision_4 = elementBox.revisions[i];\n                                    var index_2 = revision_4.range.indexOf(elementBox);\n                                    var newElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                                    newElement.characterFormat.copyFormat(elementBox.characterFormat);\n                                    newElement.line = elementBox.line;\n                                    newElement.text = elementBox.text.substr(indexInInline);\n                                    newElement.revisions.splice(0, 0, revision_4);\n                                    revision_4.range.splice(index_2 + 1, 0, newElement);\n                                    text.revisions.splice(0, 0, revision_4);\n                                    text.line = elementBox.line;\n                                    text.isWidthUpdated = false;\n                                    revision_4.range.splice(index_2 + 1, 0, text);\n                                    this.owner.trackChangesPane.updateCurrentTrackChanges(revision_4);\n                                    elementBox.text = elementBox.text.substr(0, indexInInline);\n                                    elementBox.isWidthUpdated = false;\n                                    var indexInOwner = elementBox.indexInOwner;\n                                    elementBox.line.children.splice(indexInOwner + 1, 0, newElement);\n                                    elementBox.line.children.splice(indexInOwner + 1, 0, text);\n                                    this.addRemovedNodes(text.clone());\n                                    this.insertRevision(text, 'Deletion');\n                                    this.updateLastElementRevision(text);\n                                }\n                            }\n                            else if (elementBox.length === indexInInline) {\n                                var nextElement = elementBox.nextElement;\n                                this.handleDeletionForInsertRevision(nextElement, elementBox, text, endOffset, indexInInline, false);\n                            }\n                            else {\n                                if (endOffset === 1) {\n                                    if (!isDelete) {\n                                        this.selection.start.movePreviousPosition();\n                                        this.selection.end.setPositionInternal(this.selection.start);\n                                    }\n                                }\n                                else {\n                                    this.updateCursorForInsertRevision(elementBox, indexInInline, endOffset);\n                                }\n                                this.addRemovedNodes(text.clone());\n                                this.insertInlineInternal(text, 'Deletion');\n                            }\n                        }\n                        else if (!this.checkToCombineRevisionsInSides(elementBox, 'Deletion')) {\n                            this.insertRevision(elementBox, 'Deletion');\n                            this.updateLastElementRevision(elementBox);\n                        }\n                        else {\n                            this.updateLastElementRevision(elementBox);\n                        }\n                    }\n                }\n                else if (revision.revisionType === 'Deletion') {\n                    if (index !== -1 && revision.author !== this.owner.currentUser && revision.range.length > 0) {\n                        var range = revision.range;\n                        var startOff = range[0] instanceof _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat || range[0] instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat ? 0 : range[0].line.getOffset(range[0], 0);\n                        var isRevisionInserted = false;\n                        var matchedRevisions = void 0;\n                        if ((indexInInline === 0 && endOffset >= this.selection.getLineLength(elementBox.line)) || (indexInInline + 1 === endOffset && elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && elementBox.length === 1)) {\n                            range.splice(range.indexOf(elementBox), 1);\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                            elementBox.revisions.splice(elementBox.revisions.indexOf(revision), 1);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.nextNode) && elementBox.nextNode.revisions.length > 0) {\n                                matchedRevisions = this.getMatchedRevisionsToCombine(elementBox.nextNode.revisions, 'Deletion');\n                            }\n                            if (matchedRevisions && matchedRevisions.length === 0 && elementBox.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && elementBox.previousNode.revisions.length > 0) {\n                                this.updateRevisionForSpittedTextElement(elementBox.previousNode, undefined);\n                            }\n                            if (!this.checkToCombineRevisionsInSides(elementBox, 'Deletion')) {\n                                this.insertRevision(elementBox, 'Deletion');\n                                isRevisionInserted = true;\n                                this.updateLastElementRevision(elementBox);\n                            }\n                            else {\n                                this.combineElementRevision(elementBox.revisions, elementBox.revisions);\n                            }\n                            if (isRevisionInserted && elementBox.line.getOffset(elementBox, 0) === startOff && this.owner.revisions.changes.indexOf(revision) !== -1 && revision.range.length === 0) {\n                                this.owner.revisions.changes.splice(index, 1);\n                            }\n                        }\n                        else if (endOffset !== 1) {\n                            this.handleDeleteBySplitting(elementBox, indexInInline, endOffset);\n                            var element = this.selection.start.currentWidget.getInline(this.selection.start.offset, 0).element;\n                            if (element) {\n                                elementBox = element;\n                            }\n                            if (elementBox.revisions.length > 0 && elementBox.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox && elementBox.nextNode.revisions.length > 0) {\n                                this.combineElementRevision(elementBox.revisions, elementBox.nextNode.revisions);\n                            }\n                        }\n                    }\n                    if (endOffset === 1) {\n                        if (isDelete) {\n                            this.selection.start.moveNextPosition();\n                            this.selection.end.setPositionInternal(this.selection.start);\n                        }\n                        else {\n                            this.selection.start.movePreviousPosition();\n                            this.selection.end.setPositionInternal(this.selection.start);\n                        }\n                    }\n                    else {\n                        if (this.isRevisionMatched(elementBox, 'Deletion')) {\n                            this.updateCursorForInsertRevision(elementBox, indexInInline, endOffset);\n                        }\n                        else {\n                            var rangeIndex = revision.range.indexOf(elementBox);\n                            var endOff = elementBox.line.getOffset(elementBox, elementBox.length);\n                            if (endOff >= endOffset && (revision.range.length > (rangeIndex + 1))) {\n                                this.updateRevisionForSpittedTextElement(elementBox, revision.range[(rangeIndex + 1)]);\n                                revision.range.splice(revision.range.indexOf(elementBox), 1);\n                                this.toCombineOrInsertRevision(elementBox, 'Deletion');\n                                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n                            }\n                            else if (revision.range.length === 1 || indexInInline === 0) {\n                                this.handleDeleteBySplitting(elementBox, indexInInline, endOffset);\n                                if (rangeIndex > 0 && revision.range.length !== 1) {\n                                    this.updateRevisionForSpittedTextElement(revision.range[(rangeIndex - 1)], revision.range[rangeIndex]);\n                                    revision = this.retrieveRevisionInOder(elementBox);\n                                    revision.range.splice(revision.range.indexOf(elementBox), 1);\n                                }\n                            }\n                            else {\n                                revision.range.splice(revision.range.indexOf(elementBox), 1);\n                                this.toCombineOrInsertRevision(elementBox, 'Deletion');\n                            }\n                        }\n                    }\n                    this.updateLastElementRevision(elementBox);\n                }\n            }\n            else {\n                //No revision information in the element\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementIndex)) {\n                    if (!this.checkToCombineRevisionsInSides(elementBox, 'Deletion')) {\n                        this.insertRevision(elementBox, 'Deletion');\n                    }\n                    if (!this.skipFootNoteDeleteTracking) {\n                        this.updateLastElementRevision(elementBox);\n                    }\n                }\n                else {\n                    this.handleDeleteBySplitting(elementBox, indexInInline, endOffset);\n                }\n            }\n        }\n        else {\n            removedNode = this.removeCharacterInLine(elementBox, indexInInline, endOffset);\n            var revision = elementBox.revisions[0];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n                this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            }\n        }\n        return removedNode;\n    };\n    Editor.prototype.toCombineOrInsertRevision = function (elementBox, type) {\n        if (!this.checkToCombineRevisionsInSides(elementBox, type)) {\n            this.insertRevision(elementBox, type);\n            this.updateLastElementRevision(elementBox);\n        }\n        else {\n            this.combineElementRevision(elementBox.revisions, elementBox.revisions);\n        }\n    };\n    Editor.prototype.updateLastElementRevision = function (elementBox) {\n        if (!this.skipTableElements) {\n            if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && !this.skipReplace && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.searchModule) ? !this.owner.searchModule.isRepalceTracking : true)) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.lastElementRevision)) {\n                    this.editorHistory.currentBaseHistoryInfo.lastElementRevision = elementBox;\n                }\n                elementBox.isMarkedForRevision = true;\n            }\n        }\n    };\n    Editor.prototype.updateEndRevisionIndex = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.undoStack) && this.editorHistory.undoStack.length > 0) {\n            for (var i = this.editorHistory.undoStack.length - 1; i >= 0; i--) {\n                var prevHistoryInfo = this.editorHistory.undoStack[i];\n                if (prevHistoryInfo.lastElementRevision && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevHistoryInfo.endRevisionLogicalIndex)) {\n                    prevHistoryInfo.updateEndRevisionInfo();\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.retrieveRevisionInOder = function (elementBox) {\n        if (elementBox.revisions.length === 1) {\n            return elementBox.revisions[0];\n        }\n        for (var i = 0; i < elementBox.revisions.length; i++) {\n            if (elementBox.revisions[i].revisionType === 'Deletion') {\n                return elementBox.revisions[i];\n            }\n        }\n        return elementBox.revisions[elementBox.revisions.length - 1];\n    };\n    Editor.prototype.handleDeletionForInsertRevision = function (elementToEnsure, currentElement, spittedSpan, endOffset, indexInInline, isBegin) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementToEnsure) && currentElement.revisions.length === 0 && this.isRevisionMatched(elementToEnsure, 'Deletion')) {\n            this.addRemovedNodes(spittedSpan.clone());\n            this.insertTextInline(elementToEnsure, this.selection, spittedSpan.text, 0);\n        }\n        else {\n            var revision = currentElement.revisions[currentElement.revisions.length - 1];\n            var index = revision.range.indexOf(currentElement);\n            revision.range.splice((isBegin) ? index : index + 1, 0, spittedSpan);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n            spittedSpan.revisions.splice(0, 0, revision);\n            var isDelete = false;\n            if (this.owner.editorHistoryModule) {\n                isDelete = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule.currentBaseHistoryInfo) && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'Delete');\n            }\n            //Update cursor position to insert removed content\n            if (endOffset === 1 && this.selection.isEmpty) {\n                if (!isDelete) {\n                    this.selection.start.movePreviousPosition();\n                    this.selection.end.setPositionInternal(this.selection.start);\n                }\n            }\n            else {\n                this.updateCursorForInsertRevision(currentElement, indexInInline, endOffset);\n            }\n            this.addRemovedNodes(spittedSpan.clone());\n            this.insertInlineInternal(spittedSpan, 'Deletion');\n        }\n    };\n    Editor.prototype.handleDeleteBySplitting = function (elementBox, indexInInline, endOffset) {\n        var isDelete = false;\n        if (this.owner.editorHistoryModule) {\n            isDelete = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.editorHistoryModule.currentBaseHistoryInfo) && this.owner.editorHistoryModule.currentBaseHistoryInfo.action === 'Delete');\n        }\n        //Update cursor position to insert removed content\n        if (endOffset === 1 && this.selection.isEmpty) {\n            var startPosition = elementBox.line.getOffset(elementBox, 0);\n            if (startPosition > 0) {\n                var currentPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n                currentPosition.setPositionForLineWidget(elementBox.line, startPosition + indexInInline);\n                this.selection.start.setPositionInternal(currentPosition);\n                this.selection.end.setPositionInternal(this.selection.start);\n            }\n            else {\n                if (!isDelete) {\n                    this.selection.start.movePreviousPosition();\n                    this.selection.end.setPositionInternal(this.selection.start);\n                }\n            }\n        }\n        else {\n            this.updateCursorForInsertRevision(elementBox, indexInInline, endOffset);\n        }\n        var isSplit = false;\n        if (elementBox.revisions.length > 0 && elementBox.length - 1 === indexInInline) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.nextNode) && elementBox.nextNode.revisions.length > 0) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.nextNode) && elementBox.nextNode.revisions.length > 0) {\n                    var matchedRevisions = this.getMatchedRevisionsToCombine(elementBox.nextNode.revisions, 'Deletion');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(matchedRevisions) && matchedRevisions.length === 0) {\n                        isSplit = true;\n                    }\n                }\n            }\n        }\n        else if (elementBox.revisions.length > 0) {\n            var matchedRevisions = this.getMatchedRevisionsToCombine(elementBox.revisions, 'Deletion');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(matchedRevisions) && matchedRevisions.length === 0) {\n                isSplit = true;\n            }\n        }\n        var spittedElement = this.removeCharacterInLine(elementBox, indexInInline, endOffset);\n        var revision = elementBox.revisions[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n            this.owner.trackChangesPane.updateCurrentTrackChanges(revision);\n        }\n        if (elementBox.revisions.length > 0) {\n            spittedElement.removedIds = _track_changes_track_changes__WEBPACK_IMPORTED_MODULE_17__.Revision.cloneRevisions(elementBox.revisions);\n        }\n        this.addRemovedNodes(spittedElement.clone());\n        if (spittedElement.text === '' && !(this.owner.enableTrackChanges && !this.skipTracking())) {\n            this.deleteParagraphMark(elementBox.paragraph, this.selection, 0, true);\n        }\n        else if (spittedElement.text !== '') {\n            this.insertTextInternal(spittedElement.text, false, 'Deletion', false, isSplit);\n        }\n    };\n    Editor.prototype.updateCursorForInsertRevision = function (inline, startOffset, endOffset) {\n        var startPosition = inline.line.getOffset(inline, 0);\n        if (startPosition > 0) {\n            startOffset = startPosition + startOffset;\n            endOffset = startPosition + endOffset;\n        }\n        var currentPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n        currentPosition.setPositionFromLine(inline.line, startOffset);\n        var endPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n        endPosition.setPositionFromLine(inline.line, endOffset);\n        if (!currentPosition.isExistBefore(endPosition)) {\n            this.selection.start.setPositionInternal(endPosition);\n            this.selection.end.setPositionInternal(endPosition);\n        }\n        else {\n            this.selection.end.setPositionInternal(currentPosition);\n            this.selection.start.setPositionInternal(currentPosition);\n        }\n    };\n    Editor.prototype.checkToCombineRevisionsInSides = function (currentElement, revisionType) {\n        var prevElement = currentElement.previousNode;\n        var nextElement = currentElement.nextNode;\n        var isCombined = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n            if (!(prevElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n                prevElement = prevElement.previousValidNodeForTracking;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prevElement)) {\n                var matchedRevisions = this.getMatchedRevisionsToCombine(prevElement.revisions, revisionType);\n                if (matchedRevisions.length > 0) {\n                    this.mapMatchedRevisions(matchedRevisions, prevElement, currentElement, false);\n                    isCombined = true;\n                }\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement)) {\n            if (!(nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n                nextElement = nextElement.nextValidNodeForTracking;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextElement)) {\n                var matchedRevisions = this.getMatchedRevisionsToCombine(nextElement.revisions, revisionType);\n                if (matchedRevisions.length > 0) {\n                    if (isCombined) {\n                        this.combineElementRevision(currentElement.revisions, nextElement.revisions);\n                    }\n                    else {\n                        this.mapMatchedRevisions(matchedRevisions, nextElement, currentElement, true);\n                    }\n                    isCombined = true;\n                }\n            }\n        }\n        return isCombined;\n    };\n    /**\n     * Removes the current selected content or one character right of the cursor.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.delete = function () {\n        this.removeEditRange = true;\n        var selection = this.documentHelper.selection;\n        if (!selection.isEmpty && selection.bookmarks.length > 0) {\n            this.extendSelectionToBookmarkStart();\n        }\n        if (selection.isEmpty) {\n            this.singleDelete(selection, false);\n        }\n        else {\n            var commentStarts = this.checkAndRemoveComments();\n            this.initHistory('Delete');\n            var endPos = void 0;\n            if (selection.isForward) {\n                endPos = selection.end;\n            }\n            else {\n                endPos = selection.start;\n            }\n            var endParagraphInfo = this.selection.getParagraphInfo(endPos);\n            this.deleteSelectedContentInternal(selection, false, selection.start, selection.end);\n            var textPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n            var endIndex = this.selection.getHierarchicalIndex(endParagraphInfo.paragraph, endParagraphInfo.offset.toString());\n            if (this.owner.enableTrackChanges && !this.skipTracking() && !this.isInsertingTOC && endParagraphInfo.paragraph.indexInOwner !== -1) {\n                selection.editPosition = endIndex;\n            }\n            this.setPositionForCurrentIndex(textPosition, selection.editPosition);\n            selection.selectContent(textPosition, true);\n            this.reLayout(selection);\n            this.insertSpaceInFormField();\n            if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentHistoryInfo)\n                && this.editorHistory.currentHistoryInfo.action === 'RemoveComment') {\n                for (var k = 0; k < commentStarts.length; k++) {\n                    this.initInsertInline(commentStarts[k], false);\n                }\n                this.editorHistory.currentHistoryInfo.endPosition = this.selection.startOffset;\n                this.editorHistory.updateComplexHistory();\n            }\n        }\n        this.removeEditRange = false;\n        this.documentHelper.layout.islayoutFootnote = false;\n        this.updateXmlMappedContentControl();\n    };\n    Editor.prototype.deleteEditElement = function (selection) {\n        this.initHistory('Delete');\n        this.deleteSelectedContentInternal(selection, false, selection.start, selection.end);\n        var textPosition = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(selection.owner);\n        this.setPositionForCurrentIndex(textPosition, selection.editPosition);\n        selection.selectContent(textPosition, true);\n        this.reLayout(selection);\n    };\n    Editor.prototype.removeContentControlMark = function (start, end) {\n        if (!start.contentControlProperties.lockContentControl) {\n            this.selection.start.setPositionParagraph(start.line, start.line.getOffset(start, 0));\n            this.selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 0) + 1);\n            this.deleteEditElement(this.selection);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Remove single character on right of cursor position\n     *\n     * @param {Selection} selection - Specifies the selection\n     * @param {boolean} isRedoing - Specified the is redoing.\n     * @private\n     * @returns {void}\n     */\n    /* eslint-disable  */\n    Editor.prototype.singleDelete = function (selection, isRedoing) {\n        var lineWidget = selection.start.currentWidget;\n        var paragraph = selection.start.paragraph;\n        var offset = selection.start.offset;\n        var indexInInline = 0;\n        var inlineObj = lineWidget.getInline(selection.start.offset, indexInInline);\n        var inline = inlineObj.element;\n        if (paragraph.characterFormat.hidden) {\n            return;\n        }\n        if (this.selection.isInlineFormFillMode()) {\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1) {\n                return;\n            }\n            var resultText = this.getFieldResultText();\n            if (!(inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox)) {\n                inline = inline.nextElement;\n            }\n            if (resultText.length === 1 && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                this.selection.selectFieldInternal(this.selection.getCurrentFormField());\n                this.insertTextInternal(this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5), true);\n                this.selection.selectTextElementStartOfField(this.selection.getCurrentFormField());\n                return;\n            }\n            else {\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1) {\n                    return;\n                }\n            }\n        }\n        indexInInline = inlineObj.index;\n        if (paragraph.paragraphFormat.listFormat && paragraph.paragraphFormat.listFormat.listId !== -1 &&\n            this.documentHelper.isListTextSelected && selection.contextType === 'List') {\n            this.onApplyList(undefined);\n            return;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline) && indexInInline === inline.length && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.nextNode)) {\n            inline = inline.nextNode;\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1 &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline.fieldBegin.formFieldData)) {\n                return;\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                return;\n            }\n            indexInInline = 0;\n        }\n        var updateSelection = inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox;\n        //Skip removing comment start/end mark on delete key\n        while (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n            if (inline.nextNode) {\n                inline = inline.nextNode;\n                indexInInline = 0;\n            }\n            else {\n                indexInInline = 1;\n                break;\n            }\n        }\n        if (updateSelection) {\n            paragraph = inline.line.paragraph;\n            offset = inline.line.getOffset(inline, indexInInline);\n            selection.start.setPositionParagraph(inline.line, offset);\n            selection.end.setPositionParagraph(inline.line, offset);\n        }\n        if (!this.owner.enableTrackChanges && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n            if (inline.footnoteType === 'Footnote') {\n                this.removeFootnote(inline);\n            }\n            else {\n                this.removeEndnote(inline);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline)) {\n            var nextRenderedInline = undefined;\n            var nextInline = this.documentHelper.getNextValidElement(inline);\n            if (inline.characterFormat.hidden) {\n                return;\n            }\n            if (nextInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ElementBox) {\n                nextRenderedInline = nextInline;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextRenderedInline) && nextRenderedInline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox\n                && nextRenderedInline.fieldType === 0) { //Selects the entire field.\n                inline = nextRenderedInline.fieldEnd;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, 1);\n                selection.end.setPositionParagraph(inline.line, offset);\n                if (inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                    var end = inline.nextNode;\n                    selection.end.setPositionParagraph(end.line, end.line.getOffset(end, 1));\n                }\n                selection.fireSelectionChanged(true);\n                return;\n            }\n            else if (inline !== nextRenderedInline) { //Updates the offset to delete next content.               \n                inline = nextRenderedInline;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, 0);\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && inline.fieldType === 1) {\n                    offset++;\n                }\n            }\n        }\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            if ((inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox && inline.editRangeEnd === inline.nextNode)\n                || (inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox\n                    && inline.editRangeStart === inline.previousNode)) {\n                return;\n            }\n            if (this.documentHelper.isDocumentProtected &&\n                this.documentHelper.protectionType === 'ReadOnly') {\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                    return;\n                }\n            }\n            else {\n                if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                    inline = inline.nextNode;\n                    offset = inline.line.getOffset(inline, 0);\n                    paragraph = inline.line.paragraph;\n                }\n                else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                    offset++;\n                }\n            }\n            if (inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox\n                && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                var editStart = inline.previousNode;\n                var editEnd = inline.nextNode;\n                selection.start.setPositionParagraph(editStart.line, editStart.line.getOffset(editStart, 0));\n                selection.end.setPositionParagraph(editEnd.line, editEnd.line.getOffset(editEnd, 0) + 1);\n                this.deleteEditElement(selection);\n                return;\n            }\n        }\n        if (inline && (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl || inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl)) {\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && inline.nextNode) {\n                inline = inline.nextNode;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, 0);\n                // Move cursor inbetween content control\n                selection.start.setPositionParagraph(inline.line, offset);\n                selection.end.setPositionParagraph(inline.line, offset);\n                return;\n            }\n            if (inline && inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl\n                && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n                if (this.removeContentControlMark(inline.previousNode, inline.nextNode)) {\n                    return;\n                }\n            }\n            // Remove content if content control is empty\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl\n                && inline.previousNode.reference === inline && !this.documentHelper.isFormFillProtectedMode) {\n                // Remove content control if there is no element presen in between start and end mark.\n                if (this.removeContentControlMark(inline.previousNode, inline)) {\n                    return;\n                }\n            }\n        }\n        if (inline && (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && inline.bookmarkType === 0\n            || inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox)) {\n            if (inline.nextNode && inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                inline = inline.nextNode;\n                paragraph = inline.line.paragraph;\n                offset = inline.line.getOffset(inline, 0);\n                selection.start.setPositionParagraph(inline.line, offset);\n                selection.end.setPositionParagraph(inline.line, offset);\n            }\n            if (inline.length === 1 && inline.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox\n                && inline.previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                var bookMarkBegin = inline.previousNode;\n                var bookMarkEnd = inline.nextNode;\n                selection.start.setPositionParagraph(bookMarkBegin.line, bookMarkBegin.line.getOffset(bookMarkBegin, 0));\n                selection.end.setPositionParagraph(bookMarkEnd.line, bookMarkEnd.line.getOffset(bookMarkEnd, 0) + 1);\n                this.deleteEditElement(selection);\n                return;\n            }\n            if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                offset = inline.line.getOffset(inline, 1);\n            }\n        }\n        if (selection.start.currentWidget.isLastLine() && offset >= this.documentHelper.selection.getLineLength(selection.start.currentWidget)) {\n            if (paragraph.isInsideTable && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.nextWidget)) {\n                return;\n            }\n            var previousParagraph = undefined;\n            var newParagraph = undefined;\n            var nextParagraph = selection.getNextParagraphBlock(paragraph);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph)) {\n                if (nextParagraph.isEmpty() && nextParagraph.characterFormat.hidden) {\n                    return;\n                }\n                var firstLine = nextParagraph.firstChild;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstLine)) {\n                    var firstElement = firstLine.children[0];\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(firstElement) && firstElement.characterFormat.hidden) {\n                        return;\n                    }\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph)) {\n                if (offset > 0) {\n                    return;\n                }\n                else {\n                    if (paragraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                        previousParagraph = paragraph.previousWidget;\n                    }\n                    if (paragraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget) {\n                        return;\n                    }\n                    if (paragraph.previousWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        return;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph) || (paragraph.isEmpty() && previousParagraph.characterFormat.revisions.length > 0)) {\n                        return;\n                        //Adds an empty paragraph, to ensure minimal content.\n                    }\n                }\n            }\n            if (!isRedoing) {\n                this.initHistory('Delete');\n            }\n            if (paragraph.isEndsWithPageBreak || paragraph.isEndsWithColumnBreak) {\n                var lastLine = paragraph.lastChild;\n                var lastChild = lastLine.children[lastLine.children.length - 1];\n                this.selection.start.setPositionForSelection(lastLine, lastChild, 0, this.selection.start.location);\n            }\n            var blockInfo = this.selection.getParagraphInfo(selection.start);\n            selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            if (this.checkInsertPosition(selection)) {\n                this.setPositionForHistory(selection.editPosition);\n            }\n            selection.owner.isShiftingEnabled = true;\n            if (paragraph.isEmpty()) {\n                this.removePrevParaMarkRevision(paragraph, true);\n                var nxtParagraph = selection.getNextParagraphBlock(paragraph);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nxtParagraph) && nxtParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && nxtParagraph.bodyWidget.index !== paragraph.bodyWidget.index) {\n                    this.deleteSection(selection, paragraph.bodyWidget, nxtParagraph.bodyWidget, 0);\n                    this.editorHistory.currentBaseHistoryInfo.type = \"SectionBreak\";\n                }\n                this.removeBlock(paragraph, false, true);\n                this.addRemovedNodes(paragraph);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph)) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousParagraph)) {\n                        // selection.selectParagraphInternal(newParagraph, true, true);\n                        var paraEndOffset = selection.getParagraphLength(newParagraph) + 1;\n                        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                            this.updateHistoryPosition(selection.start, true);\n                            this.editorHistory.currentBaseHistoryInfo.endPosition = this.selection.getHierarchicalIndex(newParagraph, paraEndOffset.toString());\n                        }\n                    }\n                    else {\n                        selection.selectParagraphInternal(previousParagraph, false);\n                        this.setPositionForHistory();\n                    }\n                }\n                else {\n                    selection.selectParagraphInternal(nextParagraph, true);\n                }\n            }\n            else {\n                if (this.owner.enableTrackChanges && paragraph.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    var nextParagraph_1 = paragraph.nextRenderedWidget;\n                    var startingOffset = 0;\n                    var nextIndex = nextParagraph_1.childWidgets.length - 1;\n                    paragraph = paragraph.combineWidget(this.owner.viewer);\n                    var currentParagraph = this.splitParagraph(paragraph, paragraph.firstChild, 0, selection.start.currentWidget, selection.start.offset, true);\n                    if (paragraph != undefined && paragraph.characterFormat.revisions.length != 0 && paragraph.characterFormat.revisions[0].revisionType == 'Insertion') {\n                        this.removePrevParaMarkRevision(paragraph, true);\n                        this.deleteParagraphMark(currentParagraph, selection, 0);\n                        this.addRemovedNodes(paragraph);\n                        this.setPositionForCurrentIndex(selection.start, selection.editPosition);\n                        selection.selectContent(selection.start, true);\n                    }\n                    else {\n                        this.removePrevParaMarkRevision(paragraph, true);\n                        this.deleteParagraphMark(currentParagraph, selection, 0, true);\n                        this.addRemovedNodes(paragraph.characterFormat);\n                        this.setPositionForCurrentIndex(selection.start, selection.editPosition);\n                        selection.selects(nextParagraph_1.childWidgets[nextIndex], startingOffset, true);\n                    }\n                }\n                else {\n                    paragraph = paragraph.combineWidget(this.owner.viewer);\n                    var currentParagraph = this.splitParagraph(paragraph, paragraph.firstChild, 0, selection.start.currentWidget, selection.start.offset, true);\n                    this.removePrevParaMarkRevision(paragraph, true);\n                    this.deleteParagraphMark(currentParagraph, selection, 0);\n                    if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.type === 'SectionBreak') {\n                        this.addRemovedNodes(paragraph);\n                    }\n                    this.setPositionForCurrentIndex(selection.start, selection.editPosition);\n                    selection.selectContent(selection.start, true);\n                }\n            }\n            // if (!isRedoing) {\n            this.reLayout(selection);\n            // }\n        }\n        else {\n            var inline_1 = inlineObj.element;\n            if (inline_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n                var contentControl = this.selection.currentContentControl;\n                this.selection.selectContentControlInternal(contentControl);\n                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline_1.type === 1 && contentControl.contentControlProperties.lockContentControl && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(inline_1.nextElement))) {\n                    if (this.selection.isEmpty) {\n                        this.delete();\n                    }\n                    else {\n                        return;\n                    }\n                }\n                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline_1.type === 0 && inline_1.nextElement !== contentControl.reference) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contentControl) && inline_1.type === 0 && contentControl.contentControlProperties.lockContentControl && inline_1.nextElement === contentControl.reference)) {\n                    return;\n                }\n            }\n            else {\n                this.singleDeleteInternal(selection, isRedoing, paragraph);\n            }\n        }\n        var line = selection.start.currentWidget;\n        var elementInfo = line.getInline(selection.start.offset + 1, 0);\n        if (elementInfo.element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n            selection.start.offset++;\n            selection.end.offset++;\n        }\n    };\n    Editor.prototype.singleDeleteInternal = function (selection, isRedoing, paragraph) {\n        if (!isRedoing) {\n            selection.owner.isShiftingEnabled = true;\n            this.initHistory('Delete');\n        }\n        if (this.checkInsertPosition(selection)) {\n            this.updateHistoryPosition(selection.start, true);\n            this.editorHistory.currentBaseHistoryInfo.endPosition = this.editorHistory.currentBaseHistoryInfo.insertPosition;\n        }\n        var paragraphInfo = this.selection.getParagraphInfo(selection.start);\n        var lineWidget = selection.start.currentWidget;\n        var removeOffset = selection.start.offset;\n        var lineLength = selection.getLineLength(selection.start.currentWidget);\n        if (removeOffset >= lineLength) {\n            lineWidget = lineWidget.nextLine;\n            removeOffset = removeOffset - lineLength;\n        }\n        this.removeAtOffset(lineWidget, selection, removeOffset);\n        if (this.owner.enableTrackChanges && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && this.editorHistory.currentBaseHistoryInfo.action === 'Delete' && lineLength !== selection.getLineLength(selection.start.currentWidget)) {\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset, false);\n        }\n        else if (this.owner.enableTrackChanges && !this.skipTracking()) {\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset + 1, false);\n        }\n        else {\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset, false);\n        }\n        if (!isRedoing) {\n            this.reLayout(selection);\n        }\n        else {\n            this.fireContentChange();\n        }\n    };\n    Editor.prototype.deleteParagraphMark = function (paragraph, selection, editAction, handleParaMark, isCombineLastBlock, skipHistoryCollection) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.containerWidget)) {\n            return;\n        }\n        paragraph = paragraph.combineWidget(this.owner.viewer);\n        var nextParagraph = selection.getNextParagraphBlock(paragraph);\n        if (paragraph.isInsideTable && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.nextWidget) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextParagraph)) {\n            return;\n        }\n        //BodyWidget\n        var section = paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget ? paragraph.containerWidget : undefined;\n        var table = undefined;\n        if (selection.getNextRenderedBlock(paragraph) instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n            table = selection.getNextRenderedBlock(paragraph);\n        }\n        else {\n            table = undefined;\n        }\n        if (nextParagraph.isInsideTable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table) && table.contains(nextParagraph.associatedCell)) {\n            if (editAction < 4) {\n                // let nextSection: BodyWidget = table.containerWidget instanceof BodyWidget ? table.containerWidget : undefined;\n                // if (section !== nextSection) {\n                //     this.combineSection(section, selection, nextSection);\n                // }                \n                var offset = 0;\n                this.removeBlock(paragraph);\n                this.documentHelper.layout.clearListElementBox(nextParagraph);\n                this.documentHelper.layout.clearListElementBox(paragraph);\n                for (var i = paragraph.childWidgets.length - 1; i >= 0; i--) {\n                    var line = paragraph.childWidgets[i];\n                    for (var j = line.children.length - 1; j >= 0; j--) {\n                        var element = line.children[j];\n                        offset += element.length;\n                        nextParagraph.firstChild.children.unshift(element);\n                        element.line = nextParagraph.firstChild;\n                        // this.layoutInlineCollection(false, 0, nextParagraph.inlines, inline);\n                    }\n                }\n                this.documentHelper.layout.reLayoutParagraph(nextParagraph, 0, 0);\n                if (offset > 0) {\n                    selection.editPosition = this.selection.getHierarchicalIndex(nextParagraph, offset.toString());\n                }\n            }\n        }\n        else {\n            if (editAction < 4) {\n                // let nextSection: WSection = nextParagraph.section instanceof WSection ? nextParagraph.section as WSection : undefined;\n                // if (section !== nextSection) {\n                //     this.combineSection(section, selection, nextSection);\n                // }\n                var prevLength = paragraph.childWidgets.length - 1;\n                var nextPara = nextParagraph.getSplitWidgets();\n                nextParagraph = nextParagraph.combineWidget(this.owner.viewer);\n                this.documentHelper.layout.clearListElementBox(nextParagraph);\n                this.documentHelper.layout.clearListElementBox(paragraph);\n                this.updateEditPositionOnMerge(paragraph, nextParagraph);\n                var canRemoveParaMark = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(handleParaMark) && handleParaMark) ? this.handleDeleteParaMark(paragraph, nextPara[0]) : true;\n                if (canRemoveParaMark) {\n                    var prevLastLineIndex = paragraph.childWidgets.length - 1;\n                    var elementIndex = paragraph.childWidgets[prevLastLineIndex].children.length - 1;\n                    for (var i = 0; i < nextParagraph.childWidgets.length; i++) {\n                        var inline_2 = nextParagraph.childWidgets[i];\n                        if (nextParagraph.characterFormat.revisions.length > 0) {\n                            for (var i_5 = 0; i_5 < nextParagraph.characterFormat.revisions.length; i_5++) {\n                                if (nextParagraph.characterFormat.revisions[i_5].range.indexOf(nextParagraph.characterFormat) !== -1) {\n                                    var index = nextParagraph.characterFormat.revisions[i_5].range.indexOf(nextParagraph.characterFormat);\n                                    nextParagraph.characterFormat.revisions[i_5].range.splice(index, 1);\n                                    nextParagraph.characterFormat.revisions[i_5].range.splice(index, 0, paragraph.characterFormat);\n                                }\n                                paragraph.characterFormat.revisions.push(nextParagraph.characterFormat.revisions[i_5]);\n                            }\n                            nextParagraph.characterFormat.revisions = [];\n                        }\n                        nextParagraph.childWidgets.splice(i, 1);\n                        paragraph.childWidgets.push(inline_2);\n                        inline_2.paragraph = paragraph;\n                        i--;\n                    }\n                    for (var i = 0; i < nextParagraph.floatingElements.length; i++) {\n                        var inline = nextParagraph.floatingElements[i];\n                        nextParagraph.floatingElements.splice(i, 1);\n                        paragraph.floatingElements.push(inline);\n                        i--;\n                    }\n                    if (nextParagraph.bodyWidget.index !== paragraph.bodyWidget.index) {\n                        this.deleteSection(selection, paragraph.bodyWidget, nextParagraph.bodyWidget, editAction);\n                        this.editorHistory.currentBaseHistoryInfo.type = \"SectionBreak\";\n                    }\n                    if (nextParagraph.childWidgets.length === 0) {\n                        nextParagraph.childWidgets.push(new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(nextParagraph));\n                    }\n                    this.documentHelper.layout.reLayoutParagraph(paragraph, 0, 0);\n                    this.removeBlock(nextParagraph);\n                    //this.combineRevisionOnDeleteParaMark(paragraph, prevLastLineIndex, elementIndex);\n                    if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo.action !== \"Insert\") {\n                        // if (!isNullOrUndefined(this.editorHistory) && !isNullOrUndefined(this.editorHistory.currentHistoryInfo) && this.editorHistory.currentHistoryInfo.action == 'Accept All') {\n                        //     this.removeRevisionForBlock(nextParagraph, undefined, false, true);\n                        // }\n                        if (!skipHistoryCollection) {\n                            this.addRemovedNodes(nextParagraph, isCombineLastBlock);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.handleDeleteParaMark = function (currentPara, nextPara) {\n        if (!this.owner.enableTrackChanges && currentPara.characterFormat.revisions.length > 0) {\n            // If tracking disabled and revision exists then remove revision from character format\n            for (var i = 0; i < currentPara.characterFormat.revisions.length; i++) {\n                var currentRevision = currentPara.characterFormat.revisions[i];\n                var rangeIndex = currentRevision.range.indexOf(currentPara.characterFormat);\n                currentRevision.range.splice(rangeIndex, 1);\n                this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n                if (currentRevision.range.length === 0) {\n                    this.owner.revisions.remove(currentRevision);\n                }\n                return true;\n            }\n        }\n        if (this.owner.enableTrackChanges) {\n            var canRemoveParaMark = false;\n            var isRevisionInserted = false;\n            if (currentPara.characterFormat.revisions.length > 0) {\n                var deleteRevision = this.retrieveRevisionByType(currentPara.characterFormat, 'Deletion');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(deleteRevision) && this.isRevisionMatched(deleteRevision, 'Deletion')) {\n                    var revisionIndex = currentPara.characterFormat.revisions.indexOf(deleteRevision);\n                    currentPara.characterFormat.revisions.splice(revisionIndex, 1);\n                    deleteRevision.range.splice(deleteRevision.range.indexOf(currentPara.characterFormat), 1);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(deleteRevision);\n                    if (deleteRevision.range.length === 0) {\n                        this.owner.revisions.remove(deleteRevision);\n                    }\n                    nextPara = currentPara.nextRenderedWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget ? currentPara.nextRenderedWidget : undefined;\n                    this.applyRevisionForParaMark(currentPara, nextPara ? nextPara.firstChild : undefined, 'Deletion', false);\n                    isRevisionInserted = true;\n                    canRemoveParaMark = false;\n                }\n                var insertRevision = this.retrieveRevisionByType(currentPara.characterFormat, 'Insertion');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(insertRevision) && this.isRevisionMatched(currentPara.characterFormat, 'Insertion')) {\n                    var rangeIndex = insertRevision.range.indexOf(currentPara.characterFormat);\n                    insertRevision.range.splice(rangeIndex, 1);\n                    this.owner.trackChangesPane.updateCurrentTrackChanges(insertRevision);\n                    if (insertRevision.range.length === 0) {\n                        this.owner.revisions.remove(insertRevision);\n                    }\n                    canRemoveParaMark = true;\n                }\n                if (canRemoveParaMark) {\n                    return true;\n                }\n                else {\n                    if (!isRevisionInserted) {\n                        this.applyRevisionForParaMark(currentPara, nextPara ? nextPara.firstChild : undefined, 'Deletion', false);\n                    }\n                }\n                return false;\n            }\n            else {\n                this.applyRevisionForParaMark(currentPara, nextPara ? nextPara.firstChild : undefined, 'Deletion', false);\n                return false;\n            }\n        }\n        return true;\n    };\n    Editor.prototype.insertDeleteParaMarkRevision = function (currentPara, nextPara) {\n        var lastLine = currentPara.lastChild;\n        var lastElement = lastLine.children.length > 0 ? lastLine.children[lastLine.children.length - 1].previousValidNodeForTracking : undefined;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastElement)) {\n            var matchedRevisions = this.getMatchedRevisionsToCombine(lastElement.revisions, 'Deletion');\n            if (matchedRevisions.length > 0) {\n                this.mapMatchedRevisions(matchedRevisions, lastElement, currentPara.characterFormat, false);\n            }\n        }\n        var firstLine = nextPara.firstChild;\n        var firstElement = firstLine.children[0].nextValidNodeForTracking;\n    };\n    Editor.prototype.retrieveRevisionByType = function (item, revisionToRetrieve) {\n        for (var i = 0; i < item.revisions.length; i++) {\n            if (item.revisions[i].revisionType === revisionToRetrieve) {\n                return item.revisions[i];\n            }\n        }\n        return undefined;\n    };\n    Editor.prototype.combineRevisionOnDeleteParaMark = function (paragraph, lineIndex, elementIndex) {\n        var lastLine = paragraph.childWidgets[lineIndex];\n        var lastElement = lastLine.children[elementIndex];\n        var firstElement = lastElement.nextNode;\n        firstElement = firstElement.nextValidNodeForTracking;\n        lastElement = lastElement.nextValidNodeForTracking;\n        if (firstElement.revisions.length > 0 && lastElement.revisions.length > 0) {\n            this.combineElementRevisions(lastElement, firstElement);\n        }\n    };\n    Editor.prototype.updateEditPositionOnMerge = function (currentParagraph, nextParagraph) {\n        if (this.documentHelper.selection.editPosition === this.selection.getHierarchicalIndex(nextParagraph, '0') &&\n            nextParagraph.nextRenderedWidget === undefined) {\n            this.documentHelper.selection.editPosition = this.selection.getHierarchicalIndex(currentParagraph, this.documentHelper.selection.getLineLength(currentParagraph.lastChild).toString());\n        }\n    };\n    Editor.prototype.checkEndPosition = function (selection) {\n        return (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.endPosition));\n    };\n    Editor.prototype.checkInsertPosition = function (selection) {\n        return (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)\n            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo.insertPosition));\n    };\n    Editor.prototype.checkIsNotRedoing = function () {\n        return this.documentHelper.owner.enableHistoryMode && !this.editorHistory.isRedoing;\n    };\n    /**\n     * deleteSelectedContentInternal\n     * @private\n     */\n    Editor.prototype.deleteSelectedContentInternal = function (selection, isBackSpace, startPosition, endPosition, isDeletecell) {\n        var startPos = startPosition;\n        var endPos = endPosition;\n        if (!startPosition.isExistBefore(endPosition)) {\n            startPos = endPosition;\n            endPos = startPosition;\n        }\n        var blockInfo = this.selection.getParagraphInfo(startPos);\n        selection.editPosition = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        var skipBackSpace = false;\n        if (isBackSpace && startPos.isInSameParagraph(endPos)) {\n            //Handled specifically to skip removal of contents, if selection is only paragraph mark and next rendered block is table.\n            if (startPos.offset < endPos.offset && startPos.offset === selection.getParagraphLength(endPos.paragraph)) {\n                var nextBlock = selection.getNextRenderedBlock(startPos.paragraph);\n                skipBackSpace = nextBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && (this.editorHistory.currentBaseHistoryInfo.action === 'Accept All' || this.editorHistory.currentBaseHistoryInfo.action === 'Accept Change' || this.editorHistory.currentBaseHistoryInfo.action === 'Reject All' || this.editorHistory.currentBaseHistoryInfo.action === 'Reject Change' || this.editorHistory.isUndoing || this.editorHistory.isRedoing)) {\n                    skipBackSpace = false;\n                }\n            }\n            //Handled specifically to remove paragraph completely (Delete behavior), if the selected paragraph is empty.\n            if (endPos.offset === 1 && endPos.offset > selection.getParagraphLength(endPos.paragraph)\n                && !(endPos.paragraph.isInsideTable && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endPos.paragraph.nextWidget))) {\n                isBackSpace = false;\n            }\n        }\n        if (!skipBackSpace) {\n            selection.owner.isShiftingEnabled = true;\n            if (this.checkInsertPosition(selection)) {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = selection.editPosition;\n            }\n            var editAction = (isBackSpace ? 1 : 0);\n            this.deleteSelectedContent(endPos.paragraph, selection, startPos, endPos, editAction, isDeletecell);\n        }\n        return skipBackSpace;\n    };\n    /**\n     * Init EditorHistory\n     *\n     * @private\n     * @param {Action} action Specified the action.\n     * @returns {void}\n     */\n    Editor.prototype.initHistory = function (action) {\n        if (this.documentHelper.owner.enableHistoryMode) {\n            this.editorHistory.initializeHistory(action);\n        }\n    };\n    /**\n     * Init Complex EditorHistory\n     *\n     * @private\n     * @param {Action} action Specified the action.\n     * @returns {void}\n     */\n    Editor.prototype.initComplexHistory = function (action) {\n        if (this.documentHelper.owner.enableHistoryMode) {\n            this.editorHistory.initComplexHistory(this.documentHelper.selection, action);\n        }\n    };\n    //Insert Picture implementation starts\n    /**\n     * Insert image\n     *\n     * @private\n     * @param {string} base64String Base64 string, web URL or file URL.\n     * @param {number} width Image width\n     * @param {number} height Image height\n     * @param {string} alternateText Image alternateText\n     * @returns {void}\n     */\n    Editor.prototype.insertPicture = function (base64String, width, height, alternateText, isUiInteracted) {\n        var _this = this;\n        var imageElementBox = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ImageElementBox(true);\n        imageElementBox.width = width;\n        imageElementBox.height = height;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(alternateText) || alternateText != \"\") {\n            imageElementBox.alternateText = alternateText;\n        }\n        imageElementBox.textWrappingStyle = 'Inline';\n        if (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatClippedString(base64String).extension === '.svg') {\n            imageElementBox.metaFileImageString = base64String;\n            imageElementBox.isMetaFile = true;\n            this.generateFallBackImage(base64String, width, height, imageElementBox, isUiInteracted);\n            if (!this.owner.enableCollaborativeEditing) {\n                this.documentHelper.addBase64StringInCollection(imageElementBox);\n                imageElementBox.element.src = this.documentHelper.getImageString(imageElementBox);\n                this.insertPictureInternal(imageElementBox, isUiInteracted);\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper)) {\n                imageElementBox.imageString = base64String;\n                imageElementBox.element.crossOrigin = 'Anonymous';\n                this.documentHelper.addBase64StringInCollection(imageElementBox);\n                var imgStr = this.documentHelper.getImageString(imageElementBox);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(imgStr) && (_editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.startsWith(imgStr, 'http://') || _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.startsWith(imgStr, 'https://'))) {\n                    var url = new URL(imgStr);\n                    // Generate fall back image for URL images.\n                    this.viewer.documentHelper.getBase64(base64String, width, height).then(function (imageUrlString) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.viewer) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(_this.viewer.documentHelper)) {\n                            _this.viewer.documentHelper.images.get(parseInt(imageElementBox.imageString))[1] = imageUrlString;\n                            // set downloaded image to image element\n                            imageElementBox.element.src = imageUrlString;\n                        }\n                    });\n                }\n                imageElementBox.element.src = imgStr;\n                this.insertPictureInternal(imageElementBox, isUiInteracted);\n            }\n        }\n    };\n    Editor.prototype.generateFallBackImage = function (base64String, width, height, imageElementBox, isUiInteracted) {\n        var _this = this;\n        var drawImage = new Image();\n        drawImage.onload = function () {\n            if (_this.isImageInsert && _this.owner.enableCollaborativeEditing) {\n                _this.isRemoteAction = true;\n            }\n            var displayPixelRatio = Math.max(1, window.devicePixelRatio || 1);\n            var draw = document.createElement('canvas');\n            draw.width = width * displayPixelRatio;\n            draw.height = height * displayPixelRatio;\n            var context = draw.getContext('2d');\n            context.scale(displayPixelRatio, displayPixelRatio);\n            context.drawImage(drawImage, 0, 0, width, height);\n            if (_this.owner.enableCollaborativeEditing) {\n                _this.documentHelper.addBase64StringInCollection(imageElementBox);\n                imageElementBox.element.src = _this.documentHelper.getImageString(imageElementBox);\n                _this.insertPictureInternal(imageElementBox, isUiInteracted, _this.isRemoteAction);\n                _this.isImageInsert = false;\n                _this.isRemoteAction = false;\n            }\n            _this.viewer.documentHelper.images.get(parseInt(imageElementBox.imageString))[1] = draw.toDataURL('image/png', 1);\n        };\n        drawImage.src = base64String;\n        if (this.isRemoteAction) {\n            this.insertInlineInSelection(this.selection, imageElementBox);\n        }\n    };\n    Editor.prototype.insertPictureInternal = function (imageElementBox, isUiInteracted, isElementInserted) {\n        var selection = this.documentHelper.selection;\n        var removedCommentStart = this.checkAndRemoveComments();\n        this.initHistory('InsertInline');\n        if (isUiInteracted) {\n            this.fitImageToPage(selection, imageElementBox);\n        }\n        if (this.owner.enableCollaborativeEditing) {\n            var imageString = void 0;\n            var metaImageString = void 0;\n            if (imageElementBox.isMetaFile) {\n                imageString = this.documentHelper.images.get(parseInt(imageElementBox.imageString))[1].toString();\n                metaImageString = this.documentHelper.images.get(parseInt(imageElementBox.metaFileImageString))[0].toString();\n            }\n            else {\n                imageString = this.documentHelper.images.get(parseInt(imageElementBox.imageString)).toString();\n            }\n            var imageData = {\n                imageString: imageString,\n                height: _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(imageElementBox.height),\n                width: _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(imageElementBox.width),\n                metaString: metaImageString,\n                alternativeText: imageElementBox.alternateText\n            };\n            this.editorHistory.currentBaseHistoryInfo.insertedData = imageData;\n            this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Image;\n        }\n        if (!isElementInserted) {\n            this.insertInlineInSelection(selection, imageElementBox);\n        }\n        this.reLayout(selection);\n        this.updateHistoryForComments(removedCommentStart);\n    };\n    Editor.prototype.fitImageToPage = function (selection, imageElementBox) {\n        var section = selection.start.paragraph.bodyWidget;\n        var pageHeight = section.sectionFormat.pageHeight - section.sectionFormat.topMargin - section.sectionFormat.topMargin;\n        var width = 0;\n        if (section instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget && section.sectionFormat.columns.length > 1) {\n            // column width\n            var colIndex = section.columnIndex;\n            width = section.sectionFormat.columns[colIndex].width;\n        }\n        else {\n            // page width\n            width = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPointToPixel(section.sectionFormat.pageWidth - section.sectionFormat.leftMargin - section.sectionFormat.rightMargin);\n        }\n        // Resize image based on page width or column width\n        if (imageElementBox.width > width) {\n            imageElementBox.height = imageElementBox.height * width / imageElementBox.width;\n            imageElementBox.width = width;\n        }\n        if (imageElementBox.height > pageHeight) {\n            imageElementBox.width = imageElementBox.width * pageHeight / imageElementBox.height;\n            imageElementBox.height = pageHeight;\n        }\n    };\n    //Insert Picture implementation ends\n    /**\n     * @param {selection} Selection context.\n     * @param {elementBox} Elementbox\n     * @param selection\n     * @param elementBox\n     * @private\n     */\n    Editor.prototype.insertInlineInSelection = function (selection, elementBox) {\n        if (this.checkIsNotRedoing()) {\n            selection.owner.isShiftingEnabled = true;\n        }\n        if (!selection.isEmpty) {\n            this.removeSelectedContents(selection);\n        }\n        // Need to check below case when undo/redo in trackchanges enabled.  \n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo && this.owner.enableCollaborativeEditing) {\n            this.editorHistory.currentBaseHistoryInfo.insertedElement = elementBox;\n            if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = elementBox.commentType == 0 ? _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start : _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n            }\n            else if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(elementBox));\n            }\n            else if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox || elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox || (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox && elementBox.removedIds.length == 0)) {\n                this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(elementBox, this.editorHistory.isUndoing));\n                if (elementBox instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && elementBox.fieldType === 0) {\n                    this.editorHistory.currentBaseHistoryInfo.fieldBegin = elementBox;\n                }\n            }\n        }\n        this.updateInsertPosition();\n        this.insertInlineInternal(elementBox);\n        if (this.checkEndPosition(selection)) {\n            this.updateHistoryPosition(selection.start, false);\n        }\n        this.fireContentChange();\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onPortrait = function () {\n        var sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat();\n        var width = this.documentHelper.selection.sectionFormat.pageWidth;\n        var height = this.documentHelper.selection.sectionFormat.pageHeight;\n        if (width > height) {\n            sectionFormat.pageWidth = height;\n            sectionFormat.pageHeight = width;\n        }\n        this.onApplySectionFormat(undefined, sectionFormat);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onLandscape = function () {\n        var sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat();\n        var width = this.documentHelper.selection.sectionFormat.pageWidth;\n        var height = this.documentHelper.selection.sectionFormat.pageHeight;\n        if (width < height) {\n            sectionFormat.pageWidth = height;\n            sectionFormat.pageHeight = width;\n        }\n        this.onApplySectionFormat(undefined, sectionFormat);\n    };\n    Editor.prototype.copyValues = function () {\n        var format = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat();\n        format.bottomMargin = this.documentHelper.selection.sectionFormat.bottomMargin;\n        format.topMargin = this.documentHelper.selection.sectionFormat.topMargin;\n        format.leftMargin = this.documentHelper.selection.sectionFormat.leftMargin;\n        format.rightMargin = this.documentHelper.selection.sectionFormat.rightMargin;\n        format.pageHeight = this.documentHelper.selection.sectionFormat.pageHeight;\n        format.pageWidth = this.documentHelper.selection.sectionFormat.pageWidth;\n        format.footerDistance = this.documentHelper.selection.sectionFormat.footerDistance;\n        format.headerDistance = this.documentHelper.selection.sectionFormat.headerDistance;\n        return format;\n    };\n    /**\n     * @param property\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.changeMarginValue = function (property) {\n        var sectionFormat = this.copyValues();\n        if (property === 'lastCustomSetting' || property === 'normal') {\n            sectionFormat.topMargin = 72;\n            sectionFormat.bottomMargin = 72;\n            sectionFormat.leftMargin = 72;\n            sectionFormat.rightMargin = 72;\n        }\n        else if (property === 'narrow') {\n            sectionFormat.topMargin = 36;\n            sectionFormat.bottomMargin = 36;\n            sectionFormat.leftMargin = 36;\n            sectionFormat.rightMargin = 36;\n        }\n        else if (property === 'moderate') {\n            sectionFormat.topMargin = 72;\n            sectionFormat.bottomMargin = 72;\n            sectionFormat.leftMargin = 54;\n            sectionFormat.rightMargin = 54;\n        }\n        else if (property === 'wide') {\n            sectionFormat.topMargin = 72;\n            sectionFormat.bottomMargin = 72;\n            sectionFormat.leftMargin = 144;\n            sectionFormat.rightMargin = 144;\n        }\n        else if (property === 'mirrored') {\n            sectionFormat.topMargin = 72;\n            sectionFormat.bottomMargin = 72;\n            sectionFormat.leftMargin = 90;\n            sectionFormat.rightMargin = 72;\n        }\n        else if (property === 'office2003Default') {\n            sectionFormat.topMargin = 72;\n            sectionFormat.bottomMargin = 72;\n            sectionFormat.leftMargin = 90;\n            sectionFormat.rightMargin = 90;\n        }\n        this.onApplySectionFormat(undefined, sectionFormat);\n    };\n    /**\n     * @param property\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onPaperSize = function (property) {\n        var sectionFormat = this.copyValues();\n        var width = this.documentHelper.selection.sectionFormat.pageWidth;\n        var height = this.documentHelper.selection.sectionFormat.pageHeight;\n        if (property === 'letter') {\n            if (width < height) {\n                sectionFormat.pageWidth = 612;\n                sectionFormat.pageHeight = 792;\n            }\n            else {\n                sectionFormat.pageWidth = 792;\n                sectionFormat.pageHeight = 612;\n            }\n        }\n        else if (property === 'tabloid') {\n            if (width < height) {\n                sectionFormat.pageWidth = 792;\n                sectionFormat.pageHeight = 1224;\n            }\n            else {\n                sectionFormat.pageWidth = 1224;\n                sectionFormat.pageHeight = 792;\n            }\n        }\n        else if (property === 'legal') {\n            if (width < height) {\n                sectionFormat.pageWidth = 612;\n                sectionFormat.pageHeight = 1008;\n            }\n            else {\n                sectionFormat.pageWidth = 1008;\n                sectionFormat.pageHeight = 612;\n            }\n        }\n        else if (property === 'statement') {\n            if (width < height) {\n                sectionFormat.pageWidth = 396;\n                sectionFormat.pageHeight = 612;\n            }\n            else {\n                sectionFormat.pageWidth = 612;\n                sectionFormat.pageHeight = 396;\n            }\n        }\n        else if (property === 'executive') {\n            if (width < height) {\n                sectionFormat.pageWidth = 522;\n                sectionFormat.pageHeight = 756;\n            }\n            else {\n                sectionFormat.pageWidth = 756;\n                sectionFormat.pageHeight = 522;\n            }\n        }\n        else if (property === 'a3') {\n            if (width < height) {\n                sectionFormat.pageWidth = 841.9;\n                sectionFormat.pageHeight = 1190.55;\n            }\n            else {\n                sectionFormat.pageWidth = 1190.55;\n                sectionFormat.pageHeight = 841.9;\n            }\n        }\n        else if (property === 'a4') {\n            if (width < height) {\n                sectionFormat.pageWidth = 595.3;\n                sectionFormat.pageHeight = 841.9;\n            }\n            else {\n                sectionFormat.pageWidth = 841.9;\n                sectionFormat.pageHeight = 595.3;\n            }\n        }\n        else if (property === 'a5') {\n            if (width < height) {\n                sectionFormat.pageWidth = 419.55;\n                sectionFormat.pageHeight = 595.3;\n            }\n            else {\n                sectionFormat.pageWidth = 595.3;\n                sectionFormat.pageHeight = 419.55;\n            }\n        }\n        else if (property === 'b4') {\n            if (width < height) {\n                sectionFormat.pageWidth = 728.5;\n                sectionFormat.pageHeight = 1031.8;\n            }\n            else {\n                sectionFormat.pageWidth = 1031.8;\n                sectionFormat.pageHeight = 728.5;\n            }\n        }\n        else if (property === 'b5') {\n            if (width < height) {\n                sectionFormat.pageWidth = 515.9;\n                sectionFormat.pageHeight = 728.5;\n            }\n            else {\n                sectionFormat.pageWidth = 728.5;\n                sectionFormat.pageHeight = 515.9;\n            }\n        }\n        this.onApplySectionFormat(undefined, sectionFormat);\n    };\n    //Update List Items\n    /**\n     * @param blockAdv\n     * @param updateNextBlockList\n     * @param blockAdv\n     * @param updateNextBlockList\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateListItemsTillEnd = function (blockAdv, updateNextBlockList) {\n        var splittedWidget = blockAdv.getSplitWidgets();\n        var nextBlock = splittedWidget[splittedWidget.length - 1].nextRenderedWidget;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextBlock)) {\n            var block = updateNextBlockList ? this.documentHelper.selection.getNextRenderedBlock(blockAdv) : blockAdv;\n            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && !this.documentHelper.isTextInput) {\n                //Updates the list value of the rendered paragraph.\n                this.updateRenderedListItems(block);\n                block = block.getSplitWidgets().pop().nextRenderedWidget;\n            }\n        }\n    };\n    /**\n     * @param block\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateWholeListItems = function (block, isFindingListParagraph, listID) {\n        this.documentHelper.renderedLists.clear();\n        this.documentHelper.renderedLevelOverrides = [];\n        var sectionIndex = block.bodyWidget.index;\n        var currentBlock;\n        for (var j = 0; j < this.documentHelper.pages.length; j++) {\n            var page = this.documentHelper.pages[j];\n            for (var i = 0; i < page.bodyWidgets.length; i++) {\n                //if (page.bodyWidgets[i].index === sectionIndex) {\n                currentBlock = this.getNextBlockForList(page.bodyWidgets[i].firstChild);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentBlock)) {\n                    break;\n                }\n                //}\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentBlock)) {\n                break;\n            }\n        }\n        var isListUpdated = false;\n        do {\n            if (!currentBlock) {\n                break;\n            }\n            var listSearchResultInfo = null;\n            if (isFindingListParagraph) {\n                listSearchResultInfo = { paragraph: null, listId: listID };\n            }\n            isListUpdated = this.updateListItems(currentBlock, block, listSearchResultInfo);\n            if (isListUpdated) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo)) {\n                    if (listSearchResultInfo.paragraph == block) {\n                        return null;\n                    }\n                    else {\n                        return listSearchResultInfo.paragraph;\n                    }\n                }\n                break;\n            }\n            currentBlock = currentBlock.getSplitWidgets().pop().nextRenderedWidget;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentBlock)) {\n                currentBlock = this.getNextBlockForList(currentBlock);\n            }\n        } while (currentBlock);\n        return null;\n    };\n    Editor.prototype.getNextBlockForList = function (currentBlock) {\n        if (currentBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget &&\n            this.documentHelper.layout.isFirstElementWithPageBreak(currentBlock)) {\n            var nextBlock = currentBlock.nextRenderedWidget;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextBlock) && nextBlock.equals(currentBlock)) {\n                return nextBlock;\n            }\n        }\n        return currentBlock;\n    };\n    Editor.prototype.updateListItems = function (blockAdv, block, listSearchResultInfo) {\n        var isListUpdated = false;\n        if (blockAdv instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            isListUpdated = this.updateListItemsForPara(blockAdv, block, listSearchResultInfo);\n        }\n        else {\n            isListUpdated = this.updateListItemsForTable(blockAdv, block, listSearchResultInfo);\n        }\n        return isListUpdated;\n    };\n    Editor.prototype.updateListItemsForTable = function (table, block, listSearchResultInfo) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo) && block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget && table.equals(block)) {\n            return true;\n        }\n        var row = table.firstChild;\n        do {\n            var isListUpdated = this.updateListItemsForRow(row, block, listSearchResultInfo);\n            if (isListUpdated) {\n                return true;\n            }\n            row = row.getSplitWidgets().pop().nextRenderedWidget;\n        } while (row);\n        return false;\n    };\n    Editor.prototype.updateListItemsForRow = function (row, block, listSearchResultInfo) {\n        // if (isNullOrUndefined(listSearchResultInfo) && block.isInsideTable && row.childWidgets.indexOf(this.documentHelper.selection.getContainerCell(block.associatedCell)) !== -1) {\n        //     //Returns as list updated, inorder to start list numbering from first list paragraph of this row.\n        //     return true;\n        // }\n        var cell = row.firstChild;\n        do {\n            var isListUpdated = this.updateListItemsForCell(cell, block, listSearchResultInfo);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo.paragraph)) {\n                return true;\n            }\n            if (isListUpdated) {\n                return true;\n            }\n            cell = cell.nextRenderedWidget;\n        } while (cell);\n        return false;\n    };\n    Editor.prototype.updateListItemsForCell = function (cell, block, listSearchResultInfo) {\n        if (cell.childWidgets.length === 0) {\n            return false;\n        }\n        var currentBlock = cell.firstChild;\n        do {\n            var isListUpdated = this.updateListItems(currentBlock, block, listSearchResultInfo);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo.paragraph)) {\n                return true;\n            }\n            if (isListUpdated) {\n                return true;\n            }\n            currentBlock = currentBlock.getSplitWidgets().pop().nextRenderedWidget;\n        } while (currentBlock);\n        return false;\n    };\n    // public abstract updateListParagraphs(): void;\n    /**\n     * @param block\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateRenderedListItems = function (block) {\n        if (block instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            // if the block is a column break pick the next rendered widget.\n            if (block.isEndsWithColumnBreak) {\n                block = block.nextRenderedWidget;\n            }\n            this.updateRenderedListItemsForPara(block);\n        }\n        else {\n            this.updateRenderedListItemsForTable(block);\n        }\n    };\n    Editor.prototype.updateRenderedListItemsForTable = function (table) {\n        var row = table.firstChild;\n        do {\n            this.updateRenderedListItemsForRow(row);\n            row = row.getSplitWidgets().pop().nextRenderedWidget;\n        } while (row);\n    };\n    Editor.prototype.updateRenderedListItemsForRow = function (row) {\n        var cell = row.firstChild;\n        do {\n            this.updateRenderedListItemsForCell(cell);\n            cell = cell.nextRenderedWidget;\n        } while (cell);\n    };\n    Editor.prototype.updateRenderedListItemsForCell = function (cell) {\n        if (cell.childWidgets.length === 0) {\n            return;\n        }\n        var currentBlock = cell.firstChild;\n        do {\n            this.updateRenderedListItems(currentBlock);\n            currentBlock = currentBlock.getSplitWidgets().pop().nextRenderedWidget;\n        } while (currentBlock);\n    };\n    Editor.prototype.updateListItemsForPara = function (paragraph, block, listSearchResultInfo) {\n        if (paragraph.equals(block)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo)) {\n                listSearchResultInfo.paragraph = paragraph;\n            }\n            return true;\n        }\n        else {\n            var currentList = undefined;\n            var levelNumber = 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.paragraphFormat.listFormat)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listSearchResultInfo) && paragraph.paragraphFormat.listFormat.listId === listSearchResultInfo.listId) {\n                    listSearchResultInfo.paragraph = paragraph;\n                    return true;\n                }\n                currentList = this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId);\n                levelNumber = paragraph.paragraphFormat.listFormat.listLevelNumber;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentList) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.getAbstractListById(currentList.abstractListId))\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.getAbstractListById(currentList.abstractListId).levels[levelNumber])) {\n                var currentListLevel = this.documentHelper.layout.getListLevel(currentList, levelNumber);\n                //Updates the list numbering from document start for reLayouting.\n                this.updateListNumber(currentListLevel, paragraph, false);\n            }\n        }\n        return false;\n    };\n    Editor.prototype.updateRenderedListItemsForPara = function (paragraph) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId))) {\n            var currentList = this.documentHelper.getListById(paragraph.paragraphFormat.listFormat.listId);\n            var listLevelNumber = paragraph.paragraphFormat.listFormat.listLevelNumber;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentList) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.getAbstractListById(currentList.abstractListId))\n                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.documentHelper.getAbstractListById(currentList.abstractListId).levels[paragraph.paragraphFormat.listFormat.listLevelNumber])) {\n                var currentListLevel = this.documentHelper.layout.getListLevel(currentList, listLevelNumber);\n                //Updates the list numbering from document start for reLayouting.\n                this.updateListNumber(currentListLevel, paragraph, true);\n            }\n        }\n    };\n    Editor.prototype.updateListNumber = function (currentListLevel, paragraph, isUpdate) {\n        var element = undefined;\n        if (paragraph.childWidgets.length > 0) {\n            var lineWidget = paragraph.childWidgets[0];\n            if (lineWidget.children.length > 0) {\n                element = lineWidget.children[0];\n            }\n        }\n        var listWholeWidth;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element) && element.nextElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n            listWholeWidth = element.width + element.nextElement.width;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element) && element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n            var text = this.documentHelper.layout.getListNumber(paragraph.paragraphFormat.listFormat);\n            if (isUpdate) {\n                var prevWidth = element.width;\n                element.text = text;\n                if (this.documentHelper.isIosDevice || this.documentHelper.isLinuxOS) {\n                    var listText = element.text;\n                    listText = listText === String.fromCharCode(61623) ? String.fromCharCode(9679) : listText === String.fromCharCode(61551) + String.fromCharCode(32) ? String.fromCharCode(9675) : listText;\n                    if (listText !== element.text) {\n                        element.text = listText;\n                    }\n                }\n                var currentWidth = this.documentHelper.textHelper.getTextSize(element, element.characterFormat);\n                if (currentWidth > prevWidth) {\n                    element.width = currentWidth;\n                }\n                this.documentHelper.textHelper.updateTextSize(element, paragraph);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(listWholeWidth) && element.width < listWholeWidth) {\n                    element.nextElement.width = (listWholeWidth - element.width);\n                }\n            }\n        }\n    };\n    /**\n     * Get offset value to update in selection\n     *\n     * @param selection\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.getOffsetValue = function (selection) {\n        if (this.startParagraph) {\n            var lineInfo = selection.getLineInfoBasedOnParagraph(this.startParagraph, this.startOffset);\n            selection.start.setPositionFromLine(lineInfo.line, lineInfo.offset);\n        }\n        selection.start.updatePhysicalPosition(true);\n        if (selection.isEmpty) {\n            selection.end.setPositionInternal(selection.start);\n        }\n        else {\n            if (this.endParagraph) {\n                var lineInfo = selection.getLineInfoBasedOnParagraph(this.endParagraph, this.endOffset);\n                selection.end.setPositionFromLine(lineInfo.line, lineInfo.offset);\n            }\n            selection.end.updatePhysicalPosition(true);\n        }\n    };\n    Editor.prototype.setPositionParagraph = function (paragraph, offset, skipSelectionChange) {\n        var selection = this.documentHelper.selection;\n        var lineInfo = selection.getLineInfoBasedOnParagraph(paragraph, offset);\n        selection.start.setPositionFromLine(lineInfo.line, lineInfo.offset);\n        selection.end.setPositionInternal(selection.start);\n        if (!skipSelectionChange) {\n            selection.fireSelectionChanged(true);\n        }\n    };\n    /**\n     * @param textPosition\n     * @param editPosition\n     * @param textPosition\n     * @param editPosition\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.setPositionForCurrentIndex = function (textPosition, editPosition) {\n        var blockInfo = this.selection.getParagraph({ index: editPosition });\n        var lineInfo = this.selection.getLineInfoBasedOnParagraph(blockInfo.paragraph, blockInfo.offset);\n        textPosition.setPositionForLineWidget(lineInfo.line, lineInfo.offset);\n    };\n    /**\n     * Inserts the page number in the current cursor position.\n     *\n     * @param {string} numberFormat - Optional switch that overrides the numeral style of the page number.\n     * @returns {void}\n     */\n    Editor.prototype.insertPageNumber = function (numberFormat) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(numberFormat)) {\n            numberFormat = '';\n        }\n        else {\n            numberFormat = ' \\\\*' + numberFormat;\n        }\n        var fieldCode = 'PAGE ' + numberFormat + ' \\\\* MERGEFORMAT';\n        this.createFields(fieldCode);\n    };\n    /**\n     * @param numberFormat\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertPageCount = function (numberFormat) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(numberFormat)) {\n            numberFormat = '';\n        }\n        else {\n            numberFormat = ' \\*' + numberFormat;\n        }\n        var fieldCode = 'NUMPAGES ' + numberFormat + ' \\* MERGEFORMAT';\n        this.createFields(fieldCode);\n    };\n    Editor.prototype.createFields = function (fieldCode) {\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var line = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        line.children.push(fieldBegin);\n        var fieldtext = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldTextElementBox();\n        fieldtext.fieldBegin = fieldBegin;\n        fieldtext.text = '1';\n        var text = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        text.text = fieldCode;\n        line.children.push(text);\n        var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        fieldSeparator.fieldBegin = fieldBegin;\n        fieldBegin.fieldSeparator = fieldSeparator;\n        line.children.push(fieldSeparator);\n        line.children.push(fieldtext);\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        fieldEnd.fieldBegin = fieldBegin;\n        fieldEnd.fieldSeparator = fieldSeparator;\n        fieldSeparator.fieldEnd = fieldEnd;\n        fieldBegin.fieldEnd = fieldEnd;\n        line.children.push(fieldEnd);\n        fieldBegin.line = line;\n        paragraph.childWidgets.push(line);\n        this.documentHelper.fields.push(fieldBegin);\n        var bodyWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n        bodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(bodyWidget);\n        bodyWidget.childWidgets.push(paragraph);\n        this.pasteContentsInternal([bodyWidget], false);\n    };\n    /**\n     * Inserts the specified bookmark at the current selection range.\n     *\n     * @param {string} name Specify the name of bookmark to be inserted.\n     * @returns {void}\n     */\n    Editor.prototype.insertBookmark = function (name, isNavigationPane) {\n        if (!(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.optionsPaneModule) && this.owner.optionsPaneModule.isBuildHeading) && this.selection.isPlainContentControl()) {\n            return;\n        }\n        var isHistoryInitiated = false;\n        if (this.documentHelper.bookmarks.containsKey(name)) {\n            var existingBookmark = this.documentHelper.bookmarks.get(name);\n            // existingBookmark.line.children.splice(existingBookmark.line.children.indexOf(existingBookmark), 1);\n            // /* eslint-disable-next-line max-len */\n            // existingBookmark.reference.line.children.splice(existingBookmark.reference.line.children.indexOf(existingBookmark.reference), 1);\n            // this.documentHelper.bookmarks.remove(name);\n            isHistoryInitiated = true;\n            this.initComplexHistory('InsertBookmark');\n            this.documentHelper.owner.editorModule.isRemoteAction = true;\n            this.deleteBookmark(name);\n            this.documentHelper.owner.editorModule.isRemoteAction = false;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(existingBookmark.reference) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(existingBookmark.reference.paragraph.associatedCell)) {\n                var row = existingBookmark.reference.paragraph.associatedCell.ownerRow;\n                if (row.isRenderBookmarkEnd) {\n                    row.isRenderBookmarkEnd = false;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(existingBookmark.properties)) {\n                    var columnFirst = parseInt(existingBookmark.properties[\"columnFirst\"]);\n                    var row_1 = existingBookmark.paragraph.associatedCell.ownerRow;\n                    var cell = row_1.getCellUsingColumnIndex(row_1.rowIndex, columnFirst);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell)) {\n                        cell.isRenderBookmarkStart = false;\n                    }\n                    var columnLast = parseInt(existingBookmark.properties[\"columnLast\"]);\n                    var endRow = existingBookmark.reference.paragraph.associatedCell.ownerRow;\n                    var endCell = undefined;\n                    var cellIndex = columnLast;\n                    while ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell) && cellIndex > -1) {\n                        endCell = endRow.getCell(endRow.rowIndex, cellIndex);\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell)) {\n                            cellIndex--;\n                        }\n                    }\n                    if (endCell.isRenderBookmarkEnd) {\n                        endCell.isRenderBookmarkEnd = false;\n                    }\n                }\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(existingBookmark.properties)) {\n                    var columnFirst = parseInt(existingBookmark.properties[\"columnFirst\"]);\n                    var row = existingBookmark.paragraph.associatedCell.ownerRow;\n                    var cell = row.getCellUsingColumnIndex(row.rowIndex, columnFirst);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell) && cell.isRenderBookmarkStart) {\n                        cell.isRenderBookmarkStart = false;\n                    }\n                }\n            }\n        }\n        var bookmarks = this.createBookmarkElements(name);\n        var bookmark = bookmarks[0];\n        var bookmarkEnd = bookmarks[1];\n        bookmark.properties = this.selection.getBookmarkProperties(bookmark);\n        bookmarkEnd.properties = this.selection.getBookmarkProperties(bookmarkEnd);\n        this.owner.isShiftingEnabled = true;\n        if (!isHistoryInitiated) {\n            this.initComplexHistory('InsertBookmark');\n        }\n        this.insertElements([bookmarkEnd], [bookmark], true, isNavigationPane);\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistoryInternal();\n        }\n        if (this.documentHelper.owner.enableHeaderAndFooter) {\n            this.updateHeaderFooterWidget();\n        }\n        this.documentHelper.bookmarks.add(name, bookmark);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.properties)) {\n            this.selection.selectBookmarkInTable(bookmark);\n            this.documentHelper.owner.isShiftingEnabled = false;\n        }\n        else {\n            this.selection.start.setPositionForSelection(bookmark.line, bookmark, 1, this.selection.start.location);\n            var endOffset = 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkEnd.properties)) {\n                if (bookmarkEnd.properties['isAfterParagraphMark']) {\n                    this.selection.start.setPositionForSelection(bookmark.line, bookmark, 0, this.selection.start.location);\n                    endOffset = 2;\n                }\n            }\n            this.selection.end.setPositionForSelection(bookmarkEnd.line, bookmarkEnd, endOffset, this.selection.end.location);\n            var block = this.documentHelper.blockToShift;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && this.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer && block.bodyWidget.sectionFormat.columns.length > 1) {\n                var lastbody = this.documentHelper.layout.getBodyWidget(block.bodyWidget, false);\n                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastbody.nextRenderedWidget) && lastbody.nextRenderedWidget.sectionFormat.breakCode === 'NoBreak' && lastbody.page === lastbody.nextRenderedWidget.page)) {\n                    this.reLayout(this.selection);\n                }\n            }\n            this.owner.isShiftingEnabled = false;\n            this.selection.fireSelectionChanged(true);\n        }\n        this.fireContentChange();\n        if (this.owner.documentEditorSettings.showBookmarks == true) {\n            this.viewer.updateScrollBars();\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.createBookmarkElements = function (name) {\n        var bookmark = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(0);\n        bookmark.name = name;\n        var bookmarkEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(1);\n        bookmarkEnd.name = name;\n        bookmark.reference = bookmarkEnd;\n        bookmarkEnd.reference = bookmark;\n        return [bookmark, bookmarkEnd];\n    };\n    /**\n     * Deletes the specified bookmark in the current document.\n     *\n     * @param {string} bookmarkName Specify the name of bookmark to be deleted.\n     * @returns {void}\n     */\n    Editor.prototype.deleteBookmark = function (bookmarkName) {\n        var bookmarks = this.documentHelper.bookmarks;\n        var bookmark = bookmarks.get(bookmarkName);\n        if (bookmark instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n            var bookmarkEnd = bookmark.reference;\n            // History for inserting bookmark with existing bookmark name was changed as a complex history as per MS word behavior and added the below lines for getting existing bookmarks offset in history  \n            var start = this.selection.start.clone();\n            var end = this.selection.end.clone();\n            if (!this.selection.isForward) {\n                start = this.selection.end.clone();\n                end = this.selection.start.clone();\n            }\n            var startElementInfo = this.selection.getElementInfo(start.currentWidget, start.offset);\n            var isBookmark = false;\n            var bookmarkNextElementInfo = void 0;\n            var previousElementInfo = void 0;\n            // handled the case where if the bookmark select method is called we get the element present before the bookmark so if the next element is bookmark we get the bookmark.\n            if (startElementInfo.element !== bookmark && startElementInfo.element.nextElement === bookmark) {\n                previousElementInfo = this.selection.getElementInfo(start.currentWidget, start.offset);\n                startElementInfo = this.selection.getElementInfo(start.currentWidget, start.offset + 1);\n                // Updates the offset to the current bookmark for accurate selection.\n                start.offset += 1;\n            }\n            if (startElementInfo.element === bookmark) {\n                isBookmark = true;\n                bookmarkNextElementInfo = this.selection.getElementInfo(start.currentWidget, start.offset === 0 ? start.offset + 2 : start.offset + 1);\n            }\n            var endElementInfo = this.selection.getElementInfo(end.currentWidget, end.offset);\n            if (endElementInfo.element === bookmarkEnd) {\n                endElementInfo = this.selection.getElementInfo(end.currentWidget, end.offset - 1);\n            }\n            this.selection.start.setPositionParagraph(bookmark.line, bookmark.line.getOffset(bookmark, bookmark.length));\n            this.selection.end.setPositionParagraph(bookmarkEnd.line, bookmarkEnd.line.getOffset(bookmarkEnd, bookmarkEnd.length) - 1);\n            this.initHistory('DeleteBookmark');\n            this.selection.selectPosition(start, end);\n            if (this.editorHistory) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                this.editorHistory.currentBaseHistoryInfo.markerData.push({ bookmarkName: bookmarkName });\n                this.editorHistory.currentBaseHistoryInfo.setBookmarkInfo(bookmark);\n            }\n            this.deleteBookmarkInternal(bookmark);\n            if (this.editorHistory) {\n                this.editorHistory.updateHistory();\n            }\n            if (isBookmark && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkNextElementInfo) && bookmarkNextElementInfo.element !== bookmark && bookmarkNextElementInfo.element !== bookmarkEnd) {\n                this.selection.start.setPositionParagraph(bookmarkNextElementInfo.element.line, (bookmarkNextElementInfo.element.line.getOffset(bookmarkNextElementInfo.element, bookmarkNextElementInfo.index) - 1));\n                isBookmark = true;\n            }\n            else {\n                isBookmark = false;\n            }\n            if (endElementInfo.element !== bookmark && endElementInfo.element !== bookmarkEnd) {\n                this.selection.end.setPositionParagraph(endElementInfo.element.line, endElementInfo.element.line.getOffset(endElementInfo.element, endElementInfo.index));\n            }\n            // Handles the case where the start and end positions are the same.\n            if (endElementInfo.element === bookmark && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkNextElementInfo) && bookmarkNextElementInfo.element === bookmarkEnd) {\n                if (!isBookmark && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo)) {\n                    this.selection.start.setPositionParagraph(previousElementInfo.element.line, previousElementInfo.element.line.getOffset(previousElementInfo.element, previousElementInfo.index));\n                    this.selection.selectPosition(this.selection.start, this.selection.start);\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousElementInfo) && bookmarkNextElementInfo.element === bookmarkEnd) {\n                    start.offset = start.offset === 0 ? start.offset : start.offset - 1;\n                    this.selection.selectPosition(start, start);\n                }\n            }\n        }\n        this.fireContentChange();\n        if (this.owner.documentEditorSettings.showBookmarks == true) {\n            this.viewer.updateScrollBars();\n        }\n    };\n    /**\n     * @param bookmark\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.deleteBookmarkInternal = function (bookmark) {\n        var previousNode = bookmark.previousNode;\n        if (previousNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && previousNode.fieldType === 0\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousNode.formFieldData)) {\n            previousNode.formFieldData.name = '';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.properties)) {\n            var columnFirst = parseInt(bookmark.properties[\"columnFirst\"]);\n            var row = bookmark.paragraph.associatedCell.ownerRow;\n            var cell = row.getCellUsingColumnIndex(row.rowIndex, columnFirst);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell)) {\n                cell.isRenderBookmarkStart = false;\n            }\n            var columnLast = parseInt(bookmark.properties[\"columnLast\"]);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.reference) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.reference.paragraph.associatedCell)) {\n                var endRow = bookmark.reference.paragraph.associatedCell.ownerRow;\n                var endCell = undefined;\n                var cellIndex = columnLast;\n                while ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell) && cellIndex > -1) {\n                    endCell = endRow.getCell(endRow.rowIndex, cellIndex);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell)) {\n                        cellIndex--;\n                    }\n                }\n                if (endCell.isRenderBookmarkEnd) {\n                    endCell.isRenderBookmarkEnd = false;\n                }\n            }\n        }\n        else {\n            if (this.documentHelper.selection.isRenderBookmarkAtEnd(bookmark)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.reference) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.reference.paragraph.associatedCell)) {\n                    var row = bookmark.reference.paragraph.associatedCell.ownerRow;\n                    if (row.isRenderBookmarkEnd) {\n                        row.isRenderBookmarkEnd = false;\n                    }\n                }\n            }\n        }\n        this.documentHelper.bookmarks.remove(bookmark.name);\n        bookmark.line.children.splice(bookmark.indexInOwner, 1);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmark.reference)) {\n            bookmark.reference.line.children.splice(bookmark.reference.indexInOwner, 1);\n        }\n        // Remove bookmark from header footer collections\n        var paragraph = bookmark.line.paragraph;\n        if (bookmark.line.paragraph.isInHeaderFooter) {\n            var headerFooterWidget = undefined;\n            if (paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                headerFooterWidget = paragraph.containerWidget.getContainerTable().containerWidget;\n            }\n            else if (paragraph.containerWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.HeaderFooterWidget) {\n                headerFooterWidget = paragraph.containerWidget;\n            }\n            this.updateHeaderFooterWidget(headerFooterWidget);\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getSelectionInfo = function (isBookmark) {\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.selection.isForward) {\n            start = this.selection.end;\n            end = this.selection.start;\n        }\n        if (!(end.offset === this.selection.getLineLength(end.currentWidget) + 1\n            && this.selection.isParagraphLastLine(end.currentWidget)) && !this.owner.documentHelper.isDragging) {\n            end.offset += 1;\n        }\n        var blockInfo = this.selection.getParagraphInfo(start);\n        var startIndex = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        blockInfo = this.selection.getParagraphInfo(end);\n        var endIndex = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        var selectedWidgets = this.selection.selectedWidgets.keys;\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isBookmark) && isBookmark == true) && !this.selection.hasMergedCells()) {\n            if (start.paragraph.isInsideTable) {\n                var startCell_1 = this.selection.getCellFromSelection(0);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startCell_1) && startCell_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                    startIndex = this.selection.getActualOffset(startCell_1, 0);\n                }\n            }\n            if (end.paragraph.isInsideTable) {\n                var endCell_1 = this.selection.getCellFromSelection(1);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell_1) && endCell_1 instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                    endIndex = this.selection.getActualOffset(endCell_1, 1);\n                }\n            }\n        }\n        else {\n            if (selectedWidgets[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                if (start.paragraph.isInsideTable) {\n                    var startCell = this.selection.getCellFromSelectionInTable(0);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startCell) && startCell instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                        startIndex = this.selection.getActualOffset(startCell, 0);\n                    }\n                }\n            }\n            if (selectedWidgets[selectedWidgets.length - 1] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                if (end.paragraph.isInsideTable) {\n                    var endCell = this.selection.getCellFromSelectionInTable(1);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endCell) && endCell instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                        endIndex = this.selection.getActualOffset(endCell, 1);\n                    }\n                }\n            }\n        }\n        return { 'start': startIndex, 'end': endIndex };\n    };\n    Editor.prototype.insertElements = function (endElements, startElements, isBookmark, isNavigationPane) {\n        var info = this.getSelectionInfo(isBookmark);\n        if (isBookmark) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startElements[0].properties) && startElements[0].bookmarkType == 0) {\n                info = this.owner.selection.updateSelectionInfo(info);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startElements)) {\n            this.insertElementsInternal(this.selection.getTextPosBasedOnLogicalIndex(info.start), startElements, undefined, isNavigationPane);\n            if (this.owner.isSpellCheck && isBookmark && startElements[0].previousElement && startElements[0].previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                startElements[0].previousElement.ischangeDetected = true;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(endElements)) {\n            this.insertElementsInternal(this.selection.getTextPosBasedOnLogicalIndex(info.end), endElements, undefined, isNavigationPane);\n            if (this.owner.isSpellCheck && isBookmark && endElements[0].reference.line !== endElements[0].line && endElements[0].previousElement && endElements[0].previousElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                endElements[0].previousElement.ischangeDetected = true;\n            }\n        }\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertElementsInternal = function (position, elements, isRelayout, isNavigationPane) {\n        this.selection.selectPosition(position, position);\n        this.initHistory('InsertElements');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n            if (elements[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && this.editorHistory || elements[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || elements[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox || elements[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n                this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(elements[0]));\n            }\n            if (elements[0] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = elements[0].text;\n                this.setCharFormatForCollaborativeEditing(elements[0].characterFormat);\n            }\n        }\n        this.updateInsertPosition();\n        var indexInInline = 0;\n        var paragraphInfo = this.selection.getParagraphInfo(this.selection.start);\n        if (this.selection.start.paragraph.isEmpty()) {\n            var paragraph = this.selection.start.paragraph;\n            paragraph.childWidgets[0].children.push(elements[0]);\n            elements[0].line = paragraph.childWidgets[0];\n            elements[0].linkFieldCharacter(this.documentHelper);\n            this.documentHelper.layout.reLayoutParagraph(paragraph, 0, 0);\n            this.setPositionParagraph(paragraphInfo.paragraph, paragraphInfo.offset + length, true);\n            position.setPositionForSelection(elements[0].line, elements[0], elements[0].length, this.selection.start.location);\n            this.selection.selectPosition(position, position);\n        }\n        else {\n            var inlineObj = this.selection.start.currentWidget.getInline(this.documentHelper.selection.start.offset, indexInInline);\n            var curInline = inlineObj.element;\n            indexInInline = inlineObj.index;\n            var firstElement = elements[0];\n            this.insertElementInternal(curInline, firstElement, indexInInline, undefined, true, isNavigationPane);\n            var index = firstElement.indexInOwner;\n            var lastElement = firstElement;\n            for (var i = 1; i < elements.length; i++) {\n                lastElement = elements[i];\n                firstElement.line.children.splice(index + i, 0, lastElement);\n            }\n            position.setPositionForSelection(lastElement.line, lastElement, lastElement.length, this.selection.start.location);\n            this.selection.selectPosition(position, position);\n        }\n        if (this.editorHistory) {\n            if (this.checkEndPosition()) {\n                this.updateHistoryPosition(this.selection.start, false);\n            }\n            this.editorHistory.updateHistory();\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getMarkerData = function (element, skip, revision, isAcceptOrReject) {\n        var markerData = {};\n        if (this.editorHistory.currentBaseHistoryInfo || this.editorHistory.isUndoing || this.editorHistory.isRedoing) {\n            if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n                var columnFirst = '';\n                var columnLast = '';\n                var isAfterParagraphMark = void 0;\n                var isAfterTableMark = void 0;\n                var isAfterRowMark = void 0;\n                var isAfterCellMark = void 0;\n                if (element.bookmarkType == 0) {\n                    if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.properties)) {\n                        columnFirst = element.properties['columnFirst'];\n                        columnLast = element.properties['columnLast'];\n                    }\n                }\n                else {\n                    if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n                    }\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(element.properties)) {\n                        isAfterParagraphMark = element.properties['isAfterParagraphMark'];\n                        isAfterTableMark = element.properties['isAfterTableMark'];\n                        isAfterRowMark = element.properties['isAfterRowMark'];\n                        isAfterCellMark = element.properties['isAfterCellMark'];\n                    }\n                }\n                markerData = {\n                    bookmarkName: element.name,\n                    type: \"Bookmark\",\n                    skipOperation: skip,\n                    columnFirst: columnFirst,\n                    columnLast: columnLast,\n                    isAfterParagraphMark: isAfterParagraphMark,\n                    isAfterTableMark: isAfterTableMark,\n                    isAfterRowMark: isAfterRowMark,\n                    isAfterCellMark: isAfterCellMark\n                };\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n                var elementBox = void 0;\n                if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox) {\n                    elementBox = element;\n                    if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                    }\n                }\n                else {\n                    elementBox = element.editRangeStart;\n                    if (!this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n                    }\n                }\n                var user = elementBox.user === '' ? elementBox.group : elementBox.user;\n                markerData = { 'user': user, 'type': \"EditRange\", 'editRangeId': elementBox.editRangeId, 'skipOperation': skip, 'columnFirst': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.columnFirst) ? undefined : elementBox.columnFirst.toString(), 'columnLast': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(elementBox.columnLast) ? undefined : elementBox.columnLast.toString() };\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n                if (element.fieldType == 0) {\n                    this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                }\n                else if (element.fieldType == 2) {\n                    this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Field_Separator;\n                }\n                else {\n                    this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n                }\n                markerData = { 'type': \"Field\" };\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox) {\n                markerData =\n                    {\n                        type: element.footnoteType\n                    };\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                this.editorHistory.currentBaseHistoryInfo.insertedText = element.text;\n            }\n            else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControl) {\n                markerData = {\n                    type: 'ContentControl',\n                    text: element.contentControlWidgetType\n                };\n                if (element.type == 0) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_Start;\n                    }\n                    markerData.contentControlProperties = JSON.stringify(this.getContentControlPropObject(element.contentControlProperties));\n                }\n                else {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n                        this.editorHistory.currentBaseHistoryInfo.insertedText = _base_types__WEBPACK_IMPORTED_MODULE_15__.CONTROL_CHARACTERS.Marker_End;\n                    }\n                }\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(revision)) {\n            markerData = this.getRevisionMarkerData(markerData, revision, skip, isAcceptOrReject);\n        }\n        return markerData;\n    };\n    /**\n     * @private\n     * @returns {any}\n     */\n    Editor.prototype.getRevisionMarkerData = function (markerData, revision, skip, isAcceptOrReject) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(markerData)) {\n            markerData = {};\n        }\n        markerData.revisionId = revision.revisionID;\n        markerData.revisionType = revision.revisionType;\n        markerData.author = revision.author;\n        markerData.date = revision.date;\n        markerData.skipOperation = skip;\n        markerData.isAcceptOrReject = isAcceptOrReject;\n        return markerData;\n    };\n    /**\n     * @param index\n     * @private\n     * @returns {CommentElementBox}\n     */\n    Editor.prototype.getCommentElementBox = function (index) {\n        var position = index.split(';');\n        var comment = this.documentHelper.comments[parseInt(position[1], 10)];\n        if (position.length > 2 && position[2] !== '') {\n            return comment.replyComments[parseInt(position[2], 10)];\n        }\n        return comment;\n    };\n    /**\n     * @param position\n     * @private\n     * @returns {BlockInfo}\n     */\n    Editor.prototype.getBlock = function (position) {\n        var bodyWidget = this.selection.getBodyWidget(position);\n        return this.getBlockInternal(bodyWidget, position);\n    };\n    Editor.prototype.getBlockInternal = function (widget, position) {\n        if (position.index === '' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(position)) {\n            return undefined;\n        }\n        var index = position.index.indexOf(';');\n        var value = position.index.substring(0, index);\n        position.index = position.index.substring(index).replace(';', '');\n        var node = widget;\n        // if (node instanceof WSection && value === 'HF') {\n        //     //Gets the block in Header footers.\n        //     let blockObj: BlockInfo = this.getBlock((node as WSection).headerFooters, position);\n        //     return { 'node': (!isNullOrUndefined(blockObj)) ? blockObj.node : undefined, 'position': (!isNullOrUndefined(blockObj)) ? blockObj.position : undefined };\n        // }\n        index = parseInt(value, 10);\n        var childWidget = this.selection.getBlockByIndex(widget, index);\n        if (childWidget) {\n            var child = childWidget;\n            if (position.index.indexOf(';') >= 0) {\n                if (child instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n                    if (position.index.indexOf(';') >= 0) {\n                        position.index = '0';\n                    }\n                    return { 'node': child, 'position': position };\n                }\n                if (child instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.Widget) {\n                    var blockObj = this.getBlockInternal(child, position);\n                    return { 'node': (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockObj)) ? blockObj.node : undefined, 'position': (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(blockObj)) ? blockObj.position : undefined };\n                }\n            }\n            else {\n                return { 'node': child, 'position': position };\n            }\n        }\n        else {\n            return { 'node': node, 'position': position };\n        }\n        return { 'node': node, 'position': position };\n    };\n    /**\n     * @param position\n     * @param isInsertPosition\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateHistoryPosition = function (position, isInsertPosition) {\n        if (this.editorHistory && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            var hierarchicalIndex = void 0;\n            if (position instanceof _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition) {\n                var blockInfo = this.selection.getParagraphInfo(position);\n                hierarchicalIndex = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n            }\n            else {\n                hierarchicalIndex = position;\n            }\n            if (isInsertPosition) {\n                this.editorHistory.currentBaseHistoryInfo.insertPosition = hierarchicalIndex;\n            }\n            else {\n                this.editorHistory.currentBaseHistoryInfo.endPosition = hierarchicalIndex;\n            }\n        }\n    };\n    /**\n     * Applies the borders based on given settings.\n     *\n     * @param {BorderSettings} settings Specify the border settings to be applied.\n     * @returns {void}\n     */\n    Editor.prototype.applyBorders = function (settings) {\n        this.initHistory('Borders');\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var endPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        var table = startPos.paragraph.associatedCell.ownerTable;\n        table = table.combineWidget(this.owner.viewer);\n        if (this.editorHistory) {\n            var clonedTable = this.cloneTableToHistoryInfo(table);\n        }\n        var startCell = startPos.paragraph.associatedCell;\n        var endCell = endPos.paragraph.associatedCell;\n        var cells;\n        var border = this.getBorder(settings.borderColor, settings.lineWidth, settings.borderStyle);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = startPos.paragraph.associatedCell.cellFormat.borders;\n        }\n        if (this.documentHelper.selection.isTableSelected()) {\n            if (settings.type === 'TopBorder' || settings.type === 'OutsideBorders' || settings.type === 'AllBorders') {\n                table.tableFormat.borders.top.copyFormat(border);\n            }\n            if (settings.type === 'BottomBorder' || settings.type === 'OutsideBorders' || settings.type === 'AllBorders') {\n                table.tableFormat.borders.bottom.copyFormat(border);\n            }\n            if (settings.type === 'LeftBorder' || settings.type === 'OutsideBorders' || settings.type === 'AllBorders') {\n                table.tableFormat.borders.left.copyFormat(border);\n            }\n            if (settings.type === 'RightBorder' || settings.type === 'OutsideBorders' || settings.type === 'AllBorders') {\n                table.tableFormat.borders.right.copyFormat(border);\n            }\n            if (settings.type === 'InsideHorizontalBorder' || settings.type === 'AllBorders' || settings.type === 'InsideBorders') {\n                table.tableFormat.borders.horizontal.copyFormat(border);\n            }\n            if (settings.type === 'InsideVerticalBorder' || settings.type === 'AllBorders' || settings.type === 'InsideBorders') {\n                table.tableFormat.borders.vertical.copyFormat(border);\n            }\n        }\n        else {\n            if (this.selection.isEmpty) {\n                //Apply borders for current selected cell initially.\n                if (settings.type === 'OutsideBorders' || settings.type === 'AllBorders' ||\n                    settings.type === 'LeftBorder') {\n                    endCell.cellFormat.borders.left.copyFormat(border);\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'AllBorders' ||\n                    settings.type === 'TopBorder') {\n                    endCell.cellFormat.borders.top.copyFormat(border);\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'AllBorders' ||\n                    settings.type === 'RightBorder') {\n                    endCell.cellFormat.borders.right.copyFormat(border);\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'AllBorders' ||\n                    settings.type === 'BottomBorder') {\n                    endCell.cellFormat.borders.bottom.copyFormat(border);\n                }\n                if (settings.type === 'AllBorders' || settings.type === 'InsideBorders'\n                    || settings.type === 'InsideVerticalBorder') {\n                    endCell.cellFormat.borders.vertical.copyFormat(border);\n                }\n                if (settings.type === 'AllBorders' || settings.type === 'InsideBorders'\n                    || settings.type === 'InsideHorizontalBorder') {\n                    endCell.cellFormat.borders.horizontal.copyFormat(border);\n                }\n                if (settings.type === 'NoBorder') {\n                    this.clearAllBorderValues(endCell.cellFormat.borders);\n                }\n            }\n            else {\n                if (settings.type === 'OutsideBorders' || settings.type === 'TopBorder') {\n                    var selectedCell = this.getTopBorderCellsOnSelection();\n                    for (var i = 0; i < selectedCell.length; i++) {\n                        selectedCell[i].cellFormat.borders.top.copyFormat(border);\n                    }\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'LeftBorder') {\n                    var selectedCell = this.getLeftBorderCellsOnSelection();\n                    for (var i = 0; i < selectedCell.length; i++) {\n                        selectedCell[i].cellFormat.borders.left.copyFormat(border);\n                    }\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'RightBorder') {\n                    var selectedCell = this.getRightBorderCellsOnSelection();\n                    for (var i = 0; i < selectedCell.length; i++) {\n                        selectedCell[i].cellFormat.borders.right.copyFormat(border);\n                    }\n                }\n                if (settings.type === 'OutsideBorders' || settings.type === 'BottomBorder') {\n                    var selectedCell = this.getBottomBorderCellsOnSelection();\n                    for (var i = 0; i < selectedCell.length; i++) {\n                        selectedCell[i].cellFormat.borders.bottom.copyFormat(border);\n                    }\n                }\n            }\n            //Apply Only borders property to selected cells\n            if (settings.type === 'BottomBorder' || settings.type === 'AllBorders' || settings.type === 'OutsideBorders'\n                || settings.type === 'NoBorder') {\n                cells = this.getAdjacentCellToApplyBottomBorder();\n                for (var i = 0; i < cells.length; i++) {\n                    var cell = cells[i];\n                    if (settings.type === 'NoBorder') {\n                        cell.cellFormat.borders.top.copyFormat(this.clearBorder());\n                    }\n                    else {\n                        cell.cellFormat.borders.top.copyFormat(border);\n                    }\n                }\n            }\n            if (settings.type === 'AllBorders' || settings.type === 'OutsideBorders' || settings.type === 'RightBorder'\n                || settings.type === 'NoBorder') {\n                cells = this.getAdjacentCellToApplyRightBorder();\n                for (var i = 0; i < cells.length; i++) {\n                    var cell = cells[i];\n                    if (settings.type === 'NoBorder') {\n                        cell.cellFormat.borders.left.copyFormat(this.clearBorder());\n                    }\n                    else {\n                        cell.cellFormat.borders.left.copyFormat(border);\n                    }\n                }\n            }\n            if (settings.type === 'AllBorders' || settings.type === 'NoBorder') {\n                this.applyAllBorders(border, settings.type);\n            }\n            if (settings.type === 'InsideBorders' || settings.type === 'InsideVerticalBorder'\n                || settings.type === 'InsideHorizontalBorder' || settings.type === 'NoBorder') {\n                this.applyInsideBorders(border, settings.type, table);\n            }\n        }\n        this.updateGridForTableDialog(table, false);\n        this.reLayout(this.selection, false);\n        this.editorHistory.updateHistory();\n    };\n    Editor.prototype.applyAllBorders = function (border, borderType) {\n        var cells = this.selection.getSelectedCells();\n        for (var i = 0; i < cells.length; i++) {\n            if (borderType === 'NoBorder') {\n                cells[i].cellFormat.borders.left.copyFormat(this.clearBorder());\n                cells[i].cellFormat.borders.right.copyFormat(this.clearBorder());\n                cells[i].cellFormat.borders.top.copyFormat(this.clearBorder());\n                cells[i].cellFormat.borders.bottom.copyFormat(this.clearBorder());\n            }\n            else {\n                cells[i].cellFormat.borders.left.copyFormat(border);\n                cells[i].cellFormat.borders.right.copyFormat(border);\n                cells[i].cellFormat.borders.top.copyFormat(border);\n                cells[i].cellFormat.borders.bottom.copyFormat(border);\n            }\n        }\n    };\n    Editor.prototype.applyInsideBorders = function (border, borderType, table) {\n        var cells = this.selection.getSelectedCells();\n        for (var i = 0; i < cells.length; i++) {\n            var cell = cells[i];\n            var isLastSelectedRow = cell.ownerRow === cells[cells.length - 1].ownerRow;\n            var isLastRightCell = (cell.columnIndex + cell.cellFormat.columnSpan - 1) === cells[cells.length - 1].columnIndex;\n            if (borderType === 'NoBorder') {\n                cell.cellFormat.borders.right.copyFormat(this.clearBorder());\n                cell.cellFormat.borders.bottom.copyFormat(this.clearBorder());\n            }\n            else {\n                if (!isLastRightCell && borderType !== 'InsideHorizontalBorder') {\n                    cell.cellFormat.borders.right.copyFormat(border);\n                }\n                if (!isLastSelectedRow && borderType !== 'InsideVerticalBorder') {\n                    cell.cellFormat.borders.bottom.copyFormat(border);\n                }\n            }\n            if (!isLastSelectedRow && borderType !== 'InsideVerticalBorder') {\n                // Apply adjacent bottom borders.\n                var nextRowIndex = cell.ownerRow.rowIndex + cell.cellFormat.rowSpan;\n                var nextRow = table.childWidgets[nextRowIndex];\n                if (nextRow) {\n                    var selectedCells = this.getAdjacentBottomBorderOnEmptyCells(nextRow, cell, true);\n                    for (var j = 0; j < selectedCells.length; j++) {\n                        if (borderType === 'NoBorder') {\n                            selectedCells[j].cellFormat.borders.top.copyFormat(this.clearBorder());\n                        }\n                        else {\n                            selectedCells[j].cellFormat.borders.top.copyFormat(border);\n                        }\n                    }\n                }\n            }\n            if (!isLastRightCell && borderType !== 'InsideHorizontalBorder') {\n                // Apply adjacent right borders.\n                var rightBorderCells = this.getSelectedCellsNextWidgets(cell, table);\n                for (var k = 0; k < rightBorderCells.length; k++) {\n                    if (borderType === 'NoBorder') {\n                        rightBorderCells[k].cellFormat.borders.left.copyFormat(this.clearBorder());\n                    }\n                    else {\n                        rightBorderCells[k].cellFormat.borders.left.copyFormat(border);\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.getTopBorderCellsOnSelection = function () {\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var startCell = startPos.paragraph.associatedCell;\n        var topBorderCells = [];\n        var cells = this.selection.getSelectedCells();\n        for (var i = 0; i < cells.length; i++) {\n            if (cells[i].ownerRow === startCell.ownerRow) {\n                topBorderCells.push(cells[i]);\n            }\n        }\n        return topBorderCells;\n    };\n    Editor.prototype.getLeftBorderCellsOnSelection = function () {\n        var startPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var startCell = startPos.paragraph.associatedCell;\n        var cells = this.selection.getSelectedCells();\n        var leftBorderCells = [];\n        for (var i = 0; i < cells.length; i++) {\n            if (cells[i].columnIndex === startCell.columnIndex) {\n                leftBorderCells.push(cells[i]);\n            }\n        }\n        return leftBorderCells;\n    };\n    Editor.prototype.getRightBorderCellsOnSelection = function () {\n        var cells = this.selection.getSelectedCells();\n        var rightBorderCells = [];\n        for (var i = 0; i < cells.length; i++) {\n            if ((cells[i].columnIndex + cells[i].cellFormat.columnSpan - 1) === cells[cells.length - 1].columnIndex) {\n                rightBorderCells.push(cells[i]);\n            }\n        }\n        return rightBorderCells;\n    };\n    Editor.prototype.getBottomBorderCellsOnSelection = function () {\n        var endPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        var endCell = endPos.paragraph.associatedCell;\n        var cells = this.selection.getSelectedCells();\n        var bottomBorderCells = [];\n        for (var i = 0; i < cells.length; i++) {\n            if (cells[i].ownerRow === endCell.ownerRow) {\n                bottomBorderCells.push(cells[i]);\n            }\n        }\n        return bottomBorderCells;\n    };\n    Editor.prototype.clearAllBorderValues = function (borders) {\n        var border = this.clearBorder();\n        borders.bottom.copyFormat(border);\n        borders.left.copyFormat(border);\n        borders.right.copyFormat(border);\n        borders.top.copyFormat(border);\n        borders.vertical.copyFormat(border);\n        borders.horizontal.copyFormat(border);\n    };\n    Editor.prototype.clearBorder = function () {\n        var border = new _index__WEBPACK_IMPORTED_MODULE_5__.WBorder();\n        border.lineStyle = 'Cleared';\n        return border;\n    };\n    Editor.prototype.getAdjacentCellToApplyBottomBorder = function () {\n        var cells = [];\n        var startPos = this.selection.start;\n        var endPos = this.selection.end;\n        if (!this.selection.isForward) {\n            startPos = this.selection.end;\n            endPos = this.selection.start;\n        }\n        var table = startPos.paragraph.associatedCell.ownerTable;\n        table = table.combineWidget(this.owner.viewer);\n        var startCell = startPos.paragraph.associatedCell;\n        var endCell = endPos.paragraph.associatedCell;\n        var nextRowIndex = endCell.ownerRow.rowIndex + endCell.cellFormat.rowSpan;\n        var nextRow = table.childWidgets[nextRowIndex];\n        if (nextRow) {\n            if (endCell.cellFormat.columnSpan > 1) {\n                for (var i = endCell.columnIndex; i < endCell.columnIndex + endCell.cellFormat.columnSpan; i++) {\n                    if (nextRow.childWidgets[i]) {\n                        cells.push(nextRow.childWidgets[i]);\n                    }\n                }\n            }\n            else {\n                cells = this.getAdjacentBottomBorderOnEmptyCells(nextRow, endCell);\n                if (!this.selection.isEmpty) {\n                    for (var i = 0; i < nextRow.childWidgets.length; i++) {\n                        var nextCellColIndex = nextRow.childWidgets[i].columnIndex;\n                        if (nextCellColIndex >= startCell.columnIndex && nextCellColIndex <= endCell.columnIndex) {\n                            if (nextRow.childWidgets[i]) {\n                                cells.push(nextRow.childWidgets[i]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getAdjacentBottomBorderOnEmptyCells = function (nextRow, cell, isSingleCell) {\n        var cells = [];\n        if (cell.cellFormat.columnSpan > 1) {\n            for (var i = cell.columnIndex; i < cell.columnIndex; i++) {\n                cells.push(nextRow.childWidgets[i]);\n            }\n        }\n        else {\n            if (this.selection.isEmpty || isSingleCell) {\n                for (var i = 0; i < nextRow.childWidgets.length; i++) {\n                    if (nextRow.childWidgets[i].columnIndex === cell.columnIndex) {\n                        cells.push(nextRow.childWidgets[i]);\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getAdjacentCellToApplyRightBorder = function () {\n        var cells = [];\n        var startPosIn = this.selection.start;\n        var endPosIn = this.selection.end;\n        if (!this.selection.isForward) {\n            startPosIn = this.selection.end;\n            endPosIn = this.selection.start;\n        }\n        var table = startPosIn.paragraph.associatedCell.ownerTable;\n        table = table.combineWidget(this.owner.viewer);\n        var startCell = startPosIn.paragraph.associatedCell;\n        var endCell = endPosIn.paragraph.associatedCell;\n        if (this.selection.isEmpty) {\n            var selectedCell = startPosIn.paragraph.associatedCell;\n            cells = this.getSelectedCellsNextWidgets(selectedCell, table);\n        }\n        else {\n            var selectedCells = this.getRightBorderCellsOnSelection();\n            for (var i = 0; i < selectedCells.length; i++) {\n                var cell = selectedCells[i];\n                cells = cells.concat(this.getSelectedCellsNextWidgets(cell, table));\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getSelectedCellsNextWidgets = function (selectedCell, table) {\n        var cells = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selectedCell.nextWidget)) {\n            cells.push(selectedCell.nextWidget);\n            if (selectedCell.cellFormat.rowSpan > 1) {\n                var nextRowIndex = selectedCell.ownerRow.rowIndex + selectedCell.cellFormat.rowSpan;\n                for (var i = selectedCell.ownerRow.rowIndex + 1; i < nextRowIndex; i++) {\n                    var nextRow = table.childWidgets[i];\n                    if (nextRow) {\n                        for (var j = 0; j < nextRow.childWidgets.length; j++) {\n                            if (nextRow.childWidgets[j].columnIndex ===\n                                selectedCell.nextWidget.columnIndex) {\n                                cells.push(nextRow.childWidgets[j]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getBorder = function (borderColor, lineWidth, borderStyle) {\n        var border = new _index__WEBPACK_IMPORTED_MODULE_5__.WBorder();\n        border.color = borderColor || '#000000';\n        border.lineWidth = lineWidth || 1;\n        border.lineStyle = borderStyle || 'Single';\n        return border;\n    };\n    /**\n     * Applies borders\n     *\n     * @param {WBorders} sourceBorders\n     * @param {WBorders} applyBorders\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyBordersInternal = function (sourceBorders, applyBorders) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.top)) {\n                this.applyBorder(sourceBorders.top, applyBorders.top);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.bottom)) {\n                this.applyBorder(sourceBorders.bottom, applyBorders.bottom);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.left)) {\n                this.applyBorder(sourceBorders.left, applyBorders.left);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.right)) {\n                this.applyBorder(sourceBorders.right, applyBorders.right);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.horizontal)) {\n                this.applyBorder(sourceBorders.horizontal, applyBorders.horizontal);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.vertical)) {\n                this.applyBorder(sourceBorders.vertical, applyBorders.vertical);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.diagonalUp)) {\n                this.applyBorder(sourceBorders.diagonalUp, applyBorders.diagonalUp);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorders.diagonalDown)) {\n                this.applyBorder(sourceBorders.diagonalDown, applyBorders.diagonalDown);\n            }\n        }\n    };\n    /**\n     * Apply shading to table\n     *\n     * @param {WShading} sourceShading\n     * @param {WShading} applyShading\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyShading = function (sourceShading, applyShading) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyShading) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceShading)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyShading.backgroundColor)\n                && sourceShading.backgroundColor !== applyShading.backgroundColor) {\n                sourceShading.backgroundColor = applyShading.backgroundColor;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyShading.foregroundColor)\n                && sourceShading.foregroundColor !== applyShading.foregroundColor) {\n                sourceShading.foregroundColor = applyShading.foregroundColor;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyShading.textureStyle)\n                && sourceShading.textureStyle !== applyShading.textureStyle) {\n                sourceShading.textureStyle = applyShading.textureStyle;\n            }\n        }\n    };\n    Editor.prototype.applyBorder = function (sourceBorder, applyBorder) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(sourceBorder) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder.color)\n                && sourceBorder.color !== applyBorder.color) {\n                sourceBorder.color = applyBorder.color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder.lineStyle)\n                && sourceBorder.lineStyle !== applyBorder.lineStyle) {\n                sourceBorder.lineStyle = applyBorder.lineStyle;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder.lineWidth)\n                && sourceBorder.lineWidth !== applyBorder.lineWidth) {\n                sourceBorder.lineWidth = applyBorder.lineWidth;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder.shadow)\n                && sourceBorder.shadow !== applyBorder.shadow) {\n                sourceBorder.shadow = applyBorder.shadow;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyBorder.space)\n                && sourceBorder.space !== applyBorder.space) {\n                sourceBorder.space = applyBorder.space;\n            }\n        }\n    };\n    /**\n     * Apply Table Format changes\n     *\n     * @param {WTableFormat} format Specifies table format\n     * @param {boolean} isShading Specifies shading.\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onTableFormat = function (format, isShading, table) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.tableFormat)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isShading)) {\n                isShading = false;\n            }\n            this.documentHelper.owner.isShiftingEnabled = true;\n            this.editorHistory.initializeHistory('TableFormat');\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(table)) {\n                table = this.selection.start.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n            }\n            if (isShading) {\n                for (var i = 0; i < table.childWidgets.length; i++) {\n                    var rowWidget = table.childWidgets[i];\n                    for (var j = 0; j < rowWidget.childWidgets.length; j++) {\n                        var cellWidget = rowWidget.childWidgets[j];\n                        cellWidget.cellFormat.shading.copyFormat(format.shading);\n                    }\n                }\n            }\n            // if (!isNullOrUndefined(isShading) && !this.isCellFormatApplied && !isNullOrUndefined(format.borders)) {\n            //     for (let i: number = 0; i < table.childWidgets.length; i++) {\n            //         const rowWidget: TableRowWidget = table.childWidgets[i] as TableRowWidget;\n            //         rowWidget.rowFormat.borders.copyFormat(format.borders);\n            //         for (let j: number = 0; j < rowWidget.childWidgets.length; j++) {\n            //             const cellWidget: TableCellWidget = rowWidget.childWidgets[j] as TableCellWidget;\n            //             cellWidget.cellFormat.borders.copyFormat(format.borders);\n            //         }\n            //     }\n            // }\n            this.applyTableFormat(table, undefined, format);\n            this.reLayout(this.selection, false);\n        }\n    };\n    Editor.prototype.applyTableFormat = function (table, property, value) {\n        this.applyTablePropertyValue(undefined, value, table);\n    };\n    Editor.prototype.applyTablePropertyValue = function (property, value, table) {\n        var sourceFormat = table.tableFormat;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && this.editorHistory.currentBaseHistoryInfo) {\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedTableProperties(sourceFormat, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WTableFormat) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n                this.handleTableFormat(sourceFormat, value);\n            }\n            return;\n        }\n        if (property === 'preferredWidth') {\n            sourceFormat.preferredWidth = value;\n        }\n        else if (property === 'leftIndent') {\n            sourceFormat.leftIndent = value;\n        }\n        else if (property === 'tableAlignment') {\n            sourceFormat.tableAlignment = value;\n        }\n        else if (property === 'cellSpacing') {\n            sourceFormat.cellSpacing = value;\n        }\n        else if (property === 'leftMargin') {\n            sourceFormat.leftMargin = value;\n        }\n        else if (property === 'rightMargin') {\n            sourceFormat.rightMargin = value;\n        }\n        else if (property === 'topMargin') {\n            sourceFormat.topMargin = value;\n        }\n        else if (property === 'bottomMargin') {\n            sourceFormat.bottomMargin = value;\n        }\n        else if (property === 'preferredWidthType') {\n            sourceFormat.preferredWidthType = value;\n        }\n        else if (property === 'bidi') {\n            sourceFormat.bidi = value;\n        }\n        else if (property === 'title') {\n            sourceFormat.title = value;\n        }\n        else if (property === 'description') {\n            sourceFormat.description = value;\n        }\n        if (property === 'shading') {\n            sourceFormat.shading = value;\n        }\n        else if (property === 'borders') {\n            sourceFormat.borders = value;\n        }\n        // if (!isNullOrUndefined(table)) {\n        //     this.layoutItemBlock(table, true);\n        // }\n    };\n    Editor.prototype.handleTableFormat = function (tableFormat, applyFormat) {\n        if (this.isBordersAndShadingDialog || this.editorHistory.isUndoing\n            || this.editorHistory.isRedoing) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableFormat.borders)) {\n                this.applyBordersInternal(tableFormat.borders, applyFormat.borders);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableFormat.shading)) {\n                this.applyShading(tableFormat.shading, applyFormat.shading);\n            }\n        }\n        if (!this.isBordersAndShadingDialog) {\n            if (applyFormat.hasValue('bidi') && applyFormat.bidi !== tableFormat.bidi) {\n                tableFormat.bidi = applyFormat.bidi;\n            }\n            if (applyFormat.hasValue('preferredWidth') && applyFormat.preferredWidth !== tableFormat.preferredWidth) {\n                tableFormat.preferredWidth = applyFormat.preferredWidth;\n            }\n            if (applyFormat.hasValue('preferredWidthType') && applyFormat.preferredWidthType !== tableFormat.preferredWidthType) {\n                tableFormat.preferredWidthType = applyFormat.preferredWidthType;\n            }\n            if (applyFormat.hasValue('tableAlignment') && applyFormat.tableAlignment !== tableFormat.tableAlignment) {\n                tableFormat.tableAlignment = applyFormat.tableAlignment;\n            }\n            if (applyFormat.hasValue('leftIndent') && applyFormat.leftIndent !== tableFormat.leftIndent) {\n                tableFormat.leftIndent = applyFormat.leftIndent;\n            }\n        }\n        this.updateGridForTableDialog(tableFormat.ownerBase, false);\n        if (applyFormat.title !== tableFormat.title) {\n            tableFormat.title = applyFormat.title;\n        }\n        if (applyFormat.description !== tableFormat.description) {\n            tableFormat.description = applyFormat.description;\n        }\n    };\n    Editor.prototype.updateGridForTableDialog = function (table, shiftNextItem) {\n        if (table.tableHolder) {\n            table.updateRowIndex(0);\n            table.isGridUpdated = false;\n        }\n        this.documentHelper.layout.reLayoutTable(table);\n    };\n    /**\n     * Applies Row Format Changes\n     *\n     * @param {WRowFormat} format Specifies row format\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onRowFormat = function (format) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(format)) {\n            return;\n        }\n        this.editorHistory.initializeHistory('RowFormat');\n        this.documentHelper.owner.isShiftingEnabled = true;\n        var rowStartPos = this.selection.isForward ? this.selection.start : this.selection.end;\n        var rowEndPos = this.selection.isForward ? this.selection.end : this.selection.start;\n        var table = rowStartPos.paragraph.associatedCell.ownerTable.combineWidget(this.owner.viewer);\n        this.applyRowFormat(rowStartPos.paragraph.associatedCell.ownerRow, rowStartPos, rowEndPos, undefined, format);\n        this.reLayout(this.selection, false);\n    };\n    Editor.prototype.applyRowFormat = function (row, start, end, property, value) {\n        this.applyRowPropertyValue(this.documentHelper.selection, property, value, row);\n        if (end.paragraph.associatedCell.ownerRow === row) {\n            return;\n        }\n        var newRow = row.nextWidget;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(newRow)) {\n            this.applyRowFormat(newRow, start, end, property, value);\n        }\n    };\n    Editor.prototype.applyRowPropertyValue = function (selection, property, value, row) {\n        var applyFormat = row.rowFormat;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedRowProperties(applyFormat, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WRowFormat) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n                this.handleRowFormat(value, applyFormat);\n            }\n            return;\n        }\n        if (property === 'heightType') {\n            applyFormat.heightType = value;\n        }\n        else if (property === 'height') {\n            applyFormat.height = value;\n        }\n        else if (property === 'isHeader') {\n            applyFormat.isHeader = value;\n        }\n        else if (property === 'allowBreakAcrossPages') {\n            applyFormat.allowBreakAcrossPages = value;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(row.ownerTable)) {\n            this.layoutItemBlock(row.ownerTable, true);\n        }\n    };\n    Editor.prototype.handleRowFormat = function (format, applyFormat) {\n        if (format.hasValue('allowBreakAcrossPages') && format.allowBreakAcrossPages !== applyFormat.allowBreakAcrossPages) {\n            applyFormat.allowBreakAcrossPages = format.allowBreakAcrossPages;\n        }\n        if (format.hasValue('isHeader') && format.isHeader !== applyFormat.isHeader) {\n            applyFormat.isHeader = format.isHeader;\n        }\n        if (format.hasValue('heightType') && format.heightType !== applyFormat.heightType) {\n            applyFormat.heightType = format.heightType;\n        }\n        if (format.hasValue('height') && format.height !== applyFormat.height) {\n            applyFormat.height = format.height;\n        }\n        this.updateGridForTableDialog(applyFormat.ownerBase.ownerTable, true);\n    };\n    /**\n     * Applies Cell Format changes\n     *\n     * @param {WCellFormat} format Specifies cell format\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onCellFormat = function (format) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(format)) {\n            return;\n        }\n        this.editorHistory.initializeHistory('CellFormat');\n        this.updateFormatForCell(this.selection, undefined, format);\n        this.reLayout(this.selection, false);\n    };\n    /**\n     * Applies Paragraph Format changes\n     *\n     * @param {WParagraphFormat} format Specifies cell format\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onParaFormat = function (format) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(format)) {\n            return;\n        }\n        this.editorHistory.initializeHistory('ParagraphFormat');\n        this.updateParagraphFormat(undefined, format, false);\n        this.reLayout(this.selection, false);\n    };\n    /**\n     * @param selection\n     * @param value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateCellMargins = function (selection, value) {\n        var cellStartPosition = selection.start;\n        var cellEndPosition = selection.end;\n        if (!selection.isForward) {\n            cellStartPosition = selection.end;\n            cellEndPosition = selection.start;\n        }\n        this.initHistoryPosition(selection, cellStartPosition);\n        this.documentHelper.owner.cellOptionsDialogModule.applyCellMarginValue(cellStartPosition.paragraph.associatedCell.ownerRow, cellStartPosition, cellEndPosition, value);\n    };\n    Editor.prototype.updateFormatForCell = function (selection, property, value) {\n        var start = selection.start;\n        var end = selection.end;\n        if (!selection.isForward) {\n            start = selection.end;\n            end = selection.start;\n        }\n        var startCell = start.paragraph.associatedCell;\n        var endCell = end.paragraph.associatedCell;\n        var cells;\n        var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n        var appliedFormat;\n        for (var k = startCell.columnIndex; k <= endCell.columnIndex; k++) {\n            cells = this.getSelectedCellInColumn(startCell.ownerTable, startCell.ownerRow.rowIndex, k, endCell.ownerRow.rowIndex);\n            for (var i = 0; i < cells.length; i++) {\n                appliedFormat = this.applyCellPropertyValue(this.documentHelper.selection, property, value, cells[i].cellFormat);\n            }\n        }\n        this.updateGridForTableDialog(table, false);\n    };\n    Editor.prototype.getSelectedCellInColumn = function (table, rowStartIndex, columnIndex, rowEndIndex) {\n        var cells = [];\n        for (var i = rowStartIndex; i <= rowEndIndex; i++) {\n            var row = table.childWidgets[i];\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                if (row.childWidgets[j].columnIndex === columnIndex) {\n                    cells.push(row.childWidgets[j]);\n                }\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getColumnCells = function (table, columnIndex, isLeftSideCollection) {\n        var cells = [];\n        for (var k = 0; k < table.childWidgets.length; k++) {\n            var row = table.childWidgets[k];\n            for (var i = 0; i < row.childWidgets.length; i++) {\n                var cell = row.childWidgets[i];\n                if (isLeftSideCollection) {\n                    if (cell.columnIndex + cell.cellFormat.columnSpan === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n                else {\n                    if (cell.columnIndex === columnIndex) {\n                        cells.push(cell);\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    Editor.prototype.getTableWidth = function (table) {\n        if (table.tableFormat.preferredWidth !== 0 || table.tableFormat.preferredWidthType === 'Percent') {\n            if (table.tableFormat.preferredWidthType === 'Auto' || table.tableFormat.preferredWidthType === 'Point') {\n                return table.tableFormat.preferredWidth;\n            }\n            else {\n                if (table.tableFormat.preferredWidth === 0) {\n                    return 0;\n                }\n                else {\n                    return _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(this.owner.viewer.clientArea.width) / 100 * table.tableFormat.preferredWidth;\n                }\n            }\n        }\n        return _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.convertPixelToPoint(this.documentHelper.layout.getTableWidth(table));\n    };\n    /**\n     *\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyCellPropertyValue = function (selection, property, value, applyFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo)) {\n            value = this.editorHistory.currentBaseHistoryInfo.addModifiedCellProperties(applyFormat, property, value);\n            this.editorHistory.currentBaseHistoryInfo.insertedFormat = value;\n        }\n        if (value instanceof _index__WEBPACK_IMPORTED_MODULE_5__.WCellFormat) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(property)) {\n                this.handleCellFormat(value, applyFormat);\n            }\n            return value;\n        }\n        if (property === 'leftMargin') {\n            applyFormat.leftMargin = value;\n        }\n        else if (property === 'topMargin') {\n            applyFormat.topMargin = value;\n        }\n        else if (property === 'rightMargin') {\n            applyFormat.rightMargin = value;\n        }\n        else if (property === 'bottomMargin') {\n            applyFormat.bottomMargin = value;\n        }\n        else if (property === 'preferredWidth') {\n            applyFormat.preferredWidth = value;\n            applyFormat.cellWidth = value;\n        }\n        else if (property === 'cellWidth') {\n            applyFormat.cellWidth = value;\n        }\n        else if (property === 'columnSpan') {\n            applyFormat.columnSpan = value;\n        }\n        else if (property === 'rowSpan') {\n            applyFormat.rowSpan = value;\n        }\n        else if (property === 'preferredWidthType') {\n            applyFormat.preferredWidthType = value;\n        }\n        else if (property === 'verticalAlignment') {\n            applyFormat.verticalAlignment = value;\n        }\n        if (property === 'shading') {\n            applyFormat.shading = value;\n        }\n        else if (property === 'borders') {\n            applyFormat.borders = value;\n        }\n        return undefined;\n    };\n    Editor.prototype.handleCellFormat = function (cellFormat, applyFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cellFormat) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(applyFormat)) {\n            if (this.isBordersAndShadingDialog) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cellFormat.borders)) {\n                    this.applyBordersInternal(applyFormat.borders, cellFormat.borders);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cellFormat.shading)) {\n                    this.applyShading(applyFormat.shading, cellFormat.shading);\n                }\n                // this.layoutRow((applyFormat.ownerBase as TableCellWidget).ownerRow, this.documentHelper, false);\n            }\n            else {\n                if (cellFormat.hasValue('preferredWidth') && applyFormat.preferredWidth !== cellFormat.preferredWidth) {\n                    applyFormat.preferredWidth = cellFormat.preferredWidth;\n                }\n                if (cellFormat.hasValue('preferredWidthType') && applyFormat.preferredWidthType !== cellFormat.preferredWidthType) {\n                    applyFormat.preferredWidthType = cellFormat.preferredWidthType;\n                }\n                if (cellFormat.hasValue('verticalAlignment') && applyFormat.verticalAlignment !== cellFormat.verticalAlignment) {\n                    applyFormat.verticalAlignment = cellFormat.verticalAlignment;\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.destroy = function () {\n        if (this.tableResize) {\n            this.tableResize.destroy();\n            this.tableResize = undefined;\n        }\n        if (this.previousCharFormat) {\n            this.previousCharFormat.destroy();\n            this.previousCharFormat = undefined;\n        }\n        if (this.previousParaFormat) {\n            this.previousParaFormat.destroy();\n            this.previousParaFormat = undefined;\n        }\n        if (this.alertDialog) {\n            this.alertDialog.destroy();\n        }\n        this.alertDialog = undefined;\n        if (this.base64) {\n            this.base64.destroy();\n        }\n        this.base64 = undefined;\n        this.endParagraph = undefined;\n        this.copiedData = undefined;\n        this.copiedTextContent = undefined;\n        this.listNumberFormat = undefined;\n        this.nodes = [];\n        this.removedTextNodes = [];\n        this.removedBookmarkElements = [];\n        this.editStartRangeCollection = [];\n        this.documentHelper = undefined;\n        this.editRangeID = undefined;\n        this.isCellFormatApplied = undefined;\n        this.removedContentControlElements = [];\n    };\n    /**\n     * Updates the table of contents.\n     *\n     * @param tocField\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateToc = function (tocField) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocField)) {\n            tocField = this.selection.getTocFieldInternal();\n        }\n        if (!this.documentHelper.layout.isTocField(tocField)) {\n            return;\n        }\n        // Decode field code to get parameters\n        var code = this.selection.getFieldCode(tocField);\n        if (code.toLocaleLowerCase().indexOf('toc') !== -1) {\n            this.insertTableOfContents(this.validateTocSettings(this.getTocSettings(code, tocField)));\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getTocSettings = function (code, tocField) {\n        var tocSettings = {};\n        tocSettings.includePageNumber = true;\n        tocSettings.rightAlign = true;\n        // Decode field code to get parameters\n        if (code.toLowerCase() === 'toc \\\\mergeformat') {\n            tocSettings.startLevel = 1;\n            tocSettings.endLevel = 3;\n        }\n        else {\n            var swtiches = code.split('\\\\');\n            for (var i = 0; i < swtiches.length; i++) {\n                var swtch = swtiches[i];\n                if (swtch.length === 0) {\n                    continue;\n                }\n                switch (swtch[0]) {\n                    case 'o':\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(swtch.match(/\\d+/g))) {\n                            var levels = swtch.match(/\\d+/g).map(Number);\n                            tocSettings.startLevel = levels[0];\n                            tocSettings.endLevel = levels[1];\n                        }\n                        else {\n                            tocSettings.startLevel = 1;\n                            tocSettings.endLevel = 9;\n                        }\n                        break;\n                    case 'h':\n                        tocSettings.includeHyperlink = true;\n                        break;\n                    case 'n':\n                        tocSettings.includePageNumber = false;\n                        break;\n                    case 'p':\n                        tocSettings.rightAlign = false;\n                        break;\n                    case 'u':\n                        tocSettings.includeOutlineLevels = true;\n                        break;\n                    case 't':\n                        this.decodeTSwitch(tocSettings, swtch);\n                        break;\n                }\n            }\n        }\n        //assigns tab leader.\n        var tabs = tocField.paragraph.paragraphFormat.getUpdatedTabs();\n        if (tabs.length > 0) {\n            tocSettings.tabLeader = tabs[tabs.length - 1].tabLeader;\n        }\n        if (tocSettings.rightAlign && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.tabLeader)) {\n            tocSettings.tabLeader = 'Dot';\n        }\n        return tocSettings;\n    };\n    Editor.prototype.decodeTSwitch = function (tocSettings, tSwitch) {\n        tocSettings.levelSettings = {};\n        tSwitch = tSwitch.replace('t', '');\n        tSwitch = tSwitch.replace('\"', '');\n        tSwitch = tSwitch.replace('\"', '');\n        tSwitch = tSwitch.trim();\n        var levels = tSwitch.split(',');\n        for (var index = 0; index < levels.length; index++) {\n            tocSettings.levelSettings[levels[index]] = parseInt(levels[index + 1], 10);\n            index++;\n        }\n    };\n    /**\n     * Inserts, modifies or updates the table of contents based on given settings.\n     *\n     * @param {TableOfContentsSettings} tableOfContentsSettings Specify the table of content settings to be inserted.\n     * @returns {void}\n     */\n    Editor.prototype.insertTableOfContents = function (tableOfContentsSettings) {\n        if (this.selection.isPlainContentControl()) {\n            return;\n        }\n        this.isInsertingTOC = true;\n        var removedCommentStart = this.checkAndRemoveComments();\n        this.initComplexHistory('TOC');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tableOfContentsSettings)) {\n            //Initializes with default value.\n            tableOfContentsSettings = {};\n            tableOfContentsSettings.startLevel = 1;\n            tableOfContentsSettings.endLevel = 3;\n            tableOfContentsSettings.includeHyperlink = true;\n            tableOfContentsSettings.includeOutlineLevels = true;\n            tableOfContentsSettings.includePageNumber = true;\n            tableOfContentsSettings.rightAlign = true;\n            tableOfContentsSettings.tabLeader = 'Dot';\n        }\n        var tocField = undefined;\n        var code = undefined;\n        if (this.selection.contextType === 'TableOfContents') {\n            tocField = this.selection.getTocFieldInternal();\n        }\n        if (tocField instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n            this.selection.start.setPositionForSelection(tocField.line, tocField, 0, this.selection.start.location);\n            var offset = 2;\n            var paragraph = tocField.fieldEnd.paragraph;\n            var nextParagraph = paragraph.nextWidget;\n            // If TOC bodywiget is section break. We need to consider it.\n            if (paragraph === paragraph.bodyWidget.lastChild || (nextParagraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && nextParagraph.isSectionBreak)) {\n                offset--;\n            }\n            this.selection.end.setPositionForSelection(tocField.fieldEnd.line, tocField.fieldEnd, offset, this.selection.end.location);\n            this.delete();\n        }\n        // Build TOC field code based on parameter\n        code = this.constructTocFieldCode(tableOfContentsSettings);\n        var isStartParagraph = this.selection.start.isAtParagraphStart;\n        var blockInfo = this.selection.getParagraphInfo(this.selection.start);\n        var initialStart = this.selection.getHierarchicalIndex(blockInfo.paragraph, blockInfo.offset.toString());\n        // Build TOC fields\n        var widgets = this.buildToc(this.validateTocSettings(tableOfContentsSettings), code, true, isStartParagraph);\n        if (widgets.length > 0) {\n            var tocLastPara = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n            var tocLastLine = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(tocLastPara);\n            tocLastPara.childWidgets.push(tocLastLine);\n            var index = 0;\n            if (!isStartParagraph) {\n                index = 1;\n            }\n            var line = widgets[index].childWidgets[0];\n            var fieldBegin = line.children[0];\n            this.appendEndField(fieldBegin, tocLastLine);\n            widgets.push(tocLastPara);\n            this.appendEmptyPara(widgets);\n        }\n        else {\n            var localizeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n            localizeValue.setLocale(this.owner.locale);\n            _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_16__.DialogUtility.alert({\n                title: localizeValue.getConstant('No Headings'),\n                content: localizeValue.getConstant('Add Headings'),\n                showCloseIcon: true,\n                closeOnEscape: true,\n                position: { X: 'center', Y: 'center' },\n                animationSettings: { effect: 'Zoom' }\n            }).enableRtl = this.owner.enableRtl;\n        }\n        this.setPositionForCurrentIndex(this.selection.start, initialStart);\n        this.selection.end.setPositionInternal(this.selection.start);\n        var bodyWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BodyWidget();\n        bodyWidget.sectionFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WSectionFormat(bodyWidget);\n        bodyWidget.childWidgets = widgets;\n        this.pasteContentsInternal([bodyWidget], false);\n        this.updatePageRef();\n        this.isInsertingTOC = false;\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistory();\n            this.updateHistoryForComments(removedCommentStart);\n        }\n        if (widgets.length === 0) {\n            this.owner.editorHistoryModule.undo();\n            this.owner.editorHistoryModule.redoStack.pop();\n        }\n    };\n    Editor.prototype.appendEmptyPara = function (widgets) {\n        var emptyPara = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var emptyLine = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(emptyPara);\n        emptyPara.childWidgets.push(emptyLine);\n        widgets.push(emptyPara);\n    };\n    Editor.prototype.constructTocFieldCode = function (tocSettings) {\n        var tocFieldCode = 'TOC';\n        //appends styles level\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.startLevel) && tocSettings.startLevel !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.endLevel) && tocSettings.endLevel !== 0) {\n            tocFieldCode = tocFieldCode + ' \\\\o \"' + tocSettings.startLevel + '-' + tocSettings.endLevel + '\"';\n        }\n        if (tocSettings.includePageNumber && !tocSettings.rightAlign) {\n            tocFieldCode = tocFieldCode + ' \\\\p \" \"';\n        }\n        if (!tocSettings.includePageNumber) {\n            tocFieldCode = tocFieldCode + ' \\\\n';\n        }\n        if (tocSettings.includeHyperlink) {\n            tocFieldCode = tocFieldCode + ' \\\\h \\\\z';\n        }\n        if (tocSettings.includeOutlineLevels) {\n            tocFieldCode = tocFieldCode + ' \\\\u';\n        }\n        var tSwitch = this.constructTSwitch(tocSettings);\n        if (tSwitch.length > 6) {\n            tocFieldCode = tocFieldCode + tSwitch;\n        }\n        return tocFieldCode;\n    };\n    Editor.prototype.constructTSwitch = function (tocSettings) {\n        var tSwitch = '';\n        var prefix = ' \\\\t ';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.levelSettings)) {\n            for (var _i = 0, _a = Object.keys(tocSettings.levelSettings); _i < _a.length; _i++) {\n                var key = _a[_i];\n                tSwitch = tSwitch + key + ',' + tocSettings.levelSettings[key].toString() + ',';\n            }\n        }\n        tSwitch = tSwitch.slice(0, -1);\n        tSwitch = prefix + '\"' + tSwitch + '\"';\n        return tSwitch;\n    };\n    Editor.prototype.appendEndField = function (fieldBegin, lineWidget) {\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        fieldEnd.fieldSeparator = fieldBegin.fieldSeparator;\n        fieldBegin.fieldSeparator.fieldEnd = fieldEnd;\n        fieldEnd.fieldBegin = fieldBegin;\n        fieldEnd.fieldBegin.fieldEnd = fieldEnd;\n        fieldEnd.line = lineWidget;\n        //For TOC we used to append field end at last we need to map that inserted revision to field end.\n        if (fieldBegin.revisions.length > 0) {\n            var currentRevision = fieldBegin.revisions[fieldBegin.revisions.length - 1];\n            currentRevision.range.push(fieldEnd);\n            this.owner.trackChangesPane.updateCurrentTrackChanges(currentRevision);\n            fieldEnd.revisions.push(currentRevision);\n        }\n        lineWidget.children.push(fieldEnd);\n    };\n    Editor.prototype.validateTocSettings = function (tocSettings) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.startLevel) || tocSettings.startLevel < 1) {\n            tocSettings.startLevel = 1;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.endLevel) || tocSettings.endLevel < tocSettings.endLevel) {\n            tocSettings.endLevel = tocSettings.startLevel > 3 ? tocSettings.startLevel : 3;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.includeHyperlink)) {\n            tocSettings.includeHyperlink = false;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.includePageNumber)) {\n            tocSettings.includePageNumber = false;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.rightAlign)) {\n            tocSettings.rightAlign = false;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocSettings.levelSettings)) {\n            tocSettings.levelSettings = {};\n        }\n        return tocSettings;\n    };\n    /**\n     * Builds the TOC\n     *\n     * @private\n     * @returns {ParagraphWidget[]}\n     *\n     */\n    Editor.prototype.buildToc = function (tocSettings, fieldCode, isFirstPara, isStartParagraph, isNavigationPane) {\n        var tocDomBody = this.documentHelper.pages[0].bodyWidgets[0];\n        var widgets = [];\n        this.createHeadingLevels(tocSettings);\n        if (tocSettings.includeOutlineLevels) {\n            this.createOutlineLevels(tocSettings);\n        }\n        var sectionFormat = this.selection.start.paragraph.bodyWidget.sectionFormat;\n        var widget = tocDomBody.childWidgets[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.optionsPaneModule) && this.owner.optionsPaneModule.isHeadingTab) {\n            this.owner.optionsPaneModule.isBuildHeading = true;\n        }\n        while (widget !== undefined) {\n            if (widget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget && !(isNavigationPane && widget.isInsideTable) && (this.isHeadingStyle(widget) || (tocSettings.includeOutlineLevels && this.isOutlineLevelStyle(widget)))) {\n                var bookmarkName = this.insertTocBookmark(widget, isNavigationPane);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkName)) {\n                    this.createTOCWidgets(widget, widgets, fieldCode, bookmarkName, tocSettings, isFirstPara, isStartParagraph, sectionFormat, isNavigationPane);\n                    isFirstPara = false;\n                }\n            }\n            widget = this.selection.getNextParagraphBlock(widget.getSplitWidgets().pop());\n        }\n        this.tocStyles = {};\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.optionsPaneModule) && this.owner.optionsPaneModule.isHeadingTab) {\n            this.owner.optionsPaneModule.isBuildHeading = false;\n        }\n        return widgets;\n    };\n    Editor.prototype.createOutlineLevels = function (settings) {\n        for (var i = settings.startLevel; i <= settings.endLevel; i++) {\n            var levelStyle = 'Level' + i.toString();\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.tocStyles[levelStyle])) {\n                this.tocStyles[levelStyle] = i;\n            }\n        }\n    };\n    Editor.prototype.createHeadingLevels = function (settings) {\n        //let normalStyle: string = 'Normal';\n        for (var i = settings.startLevel; i <= settings.endLevel; i++) {\n            var headingStyle = 'Heading ' + i.toString();\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.tocStyles[headingStyle])) {\n                this.tocStyles[headingStyle] = i;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(settings.levelSettings)) {\n            for (var _i = 0, _a = Object.keys(settings.levelSettings); _i < _a.length; _i++) {\n                var key = _a[_i];\n                this.tocStyles[key] = settings.levelSettings[key];\n            }\n        }\n    };\n    Editor.prototype.isHeadingStyle = function (para) {\n        var style = para.paragraphFormat.baseStyle;\n        if (style !== undefined) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.tocStyles[style.name]) ? false : true;\n        }\n        return false;\n    };\n    Editor.prototype.isOutlineLevelStyle = function (para) {\n        var styleName = para.paragraphFormat.outlineLevel;\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.tocStyles[styleName]) ? false : true;\n    };\n    Editor.prototype.createTocFieldElement = function (lineWidget, fieldCode, isSkipRevision) {\n        //begin\n        var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        fieldBegin.hasFieldEnd = true;\n        fieldBegin.line = lineWidget;\n        lineWidget.children.push(fieldBegin);\n        var currentRevision = undefined;\n        //format toc\n        var textElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        textElement.text = fieldCode;\n        textElement.line = lineWidget;\n        lineWidget.children.push(textElement);\n        //field separator\n        var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        fieldSeparator.fieldBegin = fieldBegin;\n        fieldSeparator.fieldBegin.fieldSeparator = fieldSeparator;\n        fieldSeparator.line = lineWidget;\n        lineWidget.children.push(fieldSeparator);\n        // If revision enabled.\n        return fieldBegin;\n    };\n    Editor.prototype.createTOCWidgets = function (widget, widgets, fieldCode, bookmarkName, tocSettings, isFirstPara, isStartParagraph, sectionFormat, isNavigationPane) {\n        var fieldBegin = undefined;\n        var tocPara = undefined;\n        var tocLine = undefined;\n        var emptyParaAppended = false;\n        if (widgets.length === 1 && widgets[0].childWidgets[0].children.length === 3 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isFirstPara) && !isFirstPara) {\n            tocLine = widgets[0].childWidgets[0];\n        }\n        else {\n            tocPara = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n            var styleName = undefined;\n            //Adds toc syles into paragraph\n            var headingStyleName = widget.paragraphFormat.baseStyle.name;\n            if (tocSettings.includeOutlineLevels && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.tocStyles[headingStyleName])) {\n                styleName = widget.paragraphFormat.outlineLevel;\n            }\n            else {\n                styleName = headingStyleName;\n            }\n            var tocStyleName = 'TOC ' + this.tocStyles[styleName];\n            var headingPaneStyleName = 'Heading ' + this.tocStyles[styleName];\n            var paraStyle = undefined;\n            if (isNavigationPane) {\n                paraStyle = this.documentHelper.styles.findByName(headingPaneStyleName, 'Paragraph');\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraStyle)) {\n                    this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), JSON.parse(this.documentHelper.preDefinedStyles.get(headingPaneStyleName)), this.documentHelper.styles, true);\n                    paraStyle = this.documentHelper.styles.findByName(headingPaneStyleName, 'Paragraph');\n                }\n            }\n            else {\n                paraStyle = this.documentHelper.styles.findByName(tocStyleName, 'Paragraph');\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paraStyle)) {\n                    this.documentHelper.owner.parser.parseStyle(JSON.parse(this.getCompleteStyles()), JSON.parse(this.documentHelper.preDefinedStyles.get(tocStyleName)), this.documentHelper.styles, true);\n                    paraStyle = this.documentHelper.styles.findByName(tocStyleName, 'Paragraph');\n                }\n            }\n            tocPara.paragraphFormat.applyStyle(paraStyle);\n            //Creates right tab for page number.\n            if (tocSettings.rightAlign && tocSettings.includePageNumber) {\n                var tabStop = new _index__WEBPACK_IMPORTED_MODULE_5__.WTabStop();\n                tabStop.position = sectionFormat.pageWidth - (sectionFormat.leftMargin + sectionFormat.rightMargin);\n                tabStop.tabLeader = tocSettings.tabLeader;\n                tabStop.deletePosition = 0;\n                tabStop.tabJustification = 'Right';\n                tocPara.paragraphFormat.tabs.push(tabStop);\n            }\n            tocLine = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(tocPara);\n            tocPara.childWidgets.push(tocLine);\n        }\n        //creates toc field element if it is insert\n        if ((isFirstPara !== undefined) && isFirstPara) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(isStartParagraph) && !isStartParagraph) {\n                this.appendEmptyPara(widgets);\n                emptyParaAppended = true;\n            }\n            this.createTocFieldElement(tocLine, fieldCode);\n        }\n        var text = '';\n        var isFieldCode = false;\n        var paragraph = widget;\n        while (paragraph instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget) {\n            for (var lineIndex = 0; lineIndex < paragraph.childWidgets.length; lineIndex++) {\n                var lineWidget = paragraph.childWidgets[lineIndex];\n                for (var elementIndex = 0; elementIndex < lineWidget.children.length; elementIndex++) {\n                    var element = lineWidget.children[elementIndex];\n                    if (element.isPageBreak || element.isColumnBreak) {\n                        continue;\n                    }\n                    if ((element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) || (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) || isFieldCode) {\n                        if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox) {\n                            if (element.fieldType === 0) {\n                                isFieldCode = true;\n                            }\n                            else if (element.fieldType === 2) {\n                                isFieldCode = false;\n                            }\n                        }\n                    }\n                    else if (element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox || element instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox) {\n                        var temp = element.text;\n                        var tabChar = '\\t';\n                        if (temp.indexOf(tabChar) !== -1) {\n                            temp = temp.replace(new RegExp(tabChar, 'g'), ' ');\n                        }\n                        text = text + temp;\n                    }\n                }\n            }\n            paragraph = paragraph.nextSplitWidget;\n        }\n        if (text !== '') {\n            // inserts hyperlink\n            if (tocSettings.includeHyperlink && (bookmarkName !== undefined)) {\n                fieldBegin = this.insertTocHyperlink(tocLine, bookmarkName, text, widget);\n            }\n            else {\n                var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n                span.text = text;\n                span.line = tocLine;\n                tocLine.children.push(span);\n            }\n            //inserts page number\n            if (tocSettings.includePageNumber && (bookmarkName !== undefined)) {\n                if (tocSettings.rightAlign) {\n                    var tabText = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TabElementBox();\n                    tabText.text = '\\t';\n                    tabText.line = tocLine;\n                    tocLine.children.push(tabText);\n                }\n                var pageField = this.insertTocPageNumber(bookmarkName, tocLine, tocSettings.rightAlign, widget);\n                this.appendEndField(pageField, tocLine);\n            }\n            if (tocSettings.includeHyperlink && fieldBegin !== undefined) {\n                this.appendEndField(fieldBegin, tocLine);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocPara) && (text !== '' || isFirstPara)) {\n            widgets.push(tocPara);\n            if (!isNavigationPane && this.owner.enableTrackChanges && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(tocPara)) {\n                if (widgets.length === 1 || emptyParaAppended) {\n                    this.insertRevisionForBlock(tocPara, 'Insertion', true);\n                }\n                else {\n                    var revision = this.owner.revisionsInternal.changes[0];\n                    this.insertRevisionForBlock(tocPara, 'Insertion', true, revision);\n                }\n            }\n        }\n    };\n    Editor.prototype.insertTocHyperlink = function (lineWidget, bookmarkName, text, widget) {\n        var fieldCode = ' HYPERLINK \\\\l \\\"' + bookmarkName + '\\\" ';\n        var fieldBegin = this.createTocFieldElement(lineWidget, fieldCode, true);\n        //text element.\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.text = text;\n        // retrieve the TOC character format\n        var styleName = widget.paragraphFormat.baseStyle.name;\n        var curBaseSytle = this.documentHelper.styles.findByName(styleName, 'Paragraph');\n        if (curBaseSytle.characterFormat.isEqualTocFormat(widget.characterFormat)) {\n            var noramlStyle = this.documentHelper.styles.findByName('Normal', 'Paragraph');\n            span.characterFormat.copyTocFormat(noramlStyle.characterFormat);\n        }\n        else {\n            span.characterFormat.copyTocFormat(widget.characterFormat);\n        }\n        span.line = lineWidget;\n        lineWidget.children.push(span);\n        return fieldBegin;\n    };\n    Editor.prototype.getPageNumber = function (widget) {\n        var pageNumber;\n        if (widget.bodyWidget.sectionFormat.restartPageNumbering) {\n            pageNumber = widget.bodyWidget.page.currentPageNum;\n        }\n        else {\n            pageNumber = this.documentHelper.pages.indexOf(widget.bodyWidget.page) + 1;\n        }\n        return pageNumber;\n    };\n    Editor.prototype.insertTocPageNumber = function (bookMarkname, lineWidget, isRightAlign, widget) {\n        var fieldCode = ' PAGEREF' + bookMarkname + ' \\\\h ';\n        var fieldBegin = this.createTocFieldElement(lineWidget, fieldCode, true);\n        var text = (this.getPageNumber(widget)).toString();\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldTextElementBox();\n        span.fieldBegin = fieldBegin;\n        if (!isRightAlign) {\n            text = ' ' + text;\n        }\n        span.text = text;\n        span.line = lineWidget;\n        lineWidget.children.push(span);\n        this.pageRefFields[bookMarkname] = span;\n        return fieldBegin;\n    };\n    Editor.prototype.updatePageRef = function () {\n        for (var _i = 0, _a = Object.keys(this.pageRefFields); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (this.documentHelper.bookmarks.containsKey(key)) {\n                var bookmark = this.documentHelper.bookmarks.get(key);\n                var pageRef = (this.getPageNumber(bookmark.paragraph)).toString();\n                var span = this.pageRefFields[key];\n                if (pageRef !== span.text) {\n                    span.isWidthUpdated = false;\n                    span.text = pageRef;\n                    var paragraph = span.paragraph;\n                    var lineIndex = paragraph.childWidgets.indexOf(span.line);\n                    var elementIndex = span.line.children.indexOf(span);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(paragraph.containerWidget)) {\n                        this.documentHelper.layout.reLayoutParagraph(paragraph, lineIndex, elementIndex);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Inserts toc bookmark.\n     *\n     * @param widget\n     * @returns {string}\n     */\n    Editor.prototype.insertTocBookmark = function (widget, isNavigationPane) {\n        var bookmarkName = undefined;\n        var lineLength = widget.childWidgets.length;\n        if (lineLength > 0) {\n            var splitParagraph = widget.getSplitWidgets();\n            var firstParagraph = splitParagraph[0];\n            var lastParagraph = splitParagraph.pop();\n            var startLine = firstParagraph.childWidgets[0];\n            var endLine = lastParagraph.childWidgets[lastParagraph.childWidgets.length - 1];\n            if ((startLine !== undefined) && (endLine !== undefined)) {\n                var startElement = startLine.children[0];\n                if (startElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox || startElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox) {\n                    do {\n                        startElement = startElement.nextNode;\n                    } while (startElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ListTextElementBox || startElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CommentCharacterElementBox);\n                }\n                //Returns the bookmark if already present for paragraph.\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(startElement) && startElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox && startElement.bookmarkType === 0 && (startElement.name.toLowerCase().match('^_toc'))) {\n                    return startElement.name;\n                }\n                var endElement = endLine.children[endLine.children.length - 1];\n                if ((startElement !== undefined) && (endElement !== undefined) && !this.isRemoteAction) {\n                    this.selection.start.setPositionForSelection(startLine, startElement, 0, this.selection.start.location);\n                    this.selection.end.setPositionForSelection(endLine, endElement, endElement.length, this.selection.end.location);\n                    bookmarkName = this.generateBookmarkName();\n                    this.insertBookmark(bookmarkName, isNavigationPane);\n                }\n            }\n        }\n        return bookmarkName;\n    };\n    Editor.prototype.generateBookmarkName = function () {\n        var bookmarkName = '';\n        do {\n            this.tocBookmarkId++;\n            var count = 10 - this.tocBookmarkId.toString().length;\n            var formatString = '';\n            while (count - 1 > 0) {\n                formatString = '0' + formatString;\n                count--;\n            }\n            bookmarkName = '_Toc' + formatString + this.tocBookmarkId;\n        } while (this.documentHelper.bookmarks.containsKey(bookmarkName));\n        return bookmarkName;\n    };\n    /**\n     * Change cell content alignment\n     *\n     * @param verticalAlignment\n     * @param textAlignment\n     * @param verticalAlignment\n     * @param textAlignment\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.onCellContentAlignment = function (verticalAlignment, textAlignment) {\n        this.owner.isShiftingEnabled = true;\n        var selection = this.owner.selectionModule;\n        if (selection.isEmpty && selection.start.paragraph.isInsideTable) {\n            if (this.owner.editorHistoryModule) {\n                this.owner.editorHistoryModule.initComplexHistory(selection, 'MultiSelection');\n            }\n            //Selecting the table cell to update the all the paragraph format.\n            selection.selectTableCell();\n            this.initHistory('CellContentVerticalAlignment');\n            var cellFormat = selection.start.paragraph.associatedCell.cellFormat;\n            this.applyCellPropertyValue(selection, 'verticalAlignment', verticalAlignment, cellFormat);\n            this.reLayout(selection, false);\n            this.initHistory('TextAlignment');\n            this.updateParagraphFormat('textAlignment', textAlignment, false);\n            this.reLayout(this.owner.selectionModule, false);\n            if (this.owner.editorHistoryModule) {\n                this.owner.editorHistoryModule.updateComplexHistory();\n            }\n        }\n        else {\n            if (this.owner.editorHistoryModule) {\n                this.owner.editorHistoryModule.initComplexHistory(selection, 'MultiSelection');\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(selection.getTable(selection.start, selection.end))) {\n                //Table cell vertical alignment.\n                this.updateSelectionTableFormat(selection, 'CellContentVerticalAlignment', verticalAlignment);\n                this.reLayout(this.owner.selectionModule, false);\n                this.initHistory('TextAlignment');\n                //Paragraph text alignment.\n                this.updateSelectionParagraphFormatting('textAlignment', textAlignment, false);\n                this.reLayout(selection, false);\n            }\n            if (this.owner.editorHistoryModule) {\n                this.owner.editorHistoryModule.updateComplexHistory();\n            }\n        }\n    };\n    //Restrict editing implementation starts\n    /**\n     * @param user\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.insertEditRangeElement = function (user) {\n        if (this.documentHelper.isDocumentProtected || this.documentHelper.selection.isEmpty) {\n            return;\n        }\n        this.initComplexHistory('RestrictEditing');\n        this.selection.skipEditRangeRetrieval = true;\n        var selection = this.documentHelper.selection;\n        var startPos = this.selection.start;\n        var endPos = this.selection.end;\n        if (!this.selection.isForward) {\n            startPos = this.selection.end;\n            endPos = this.selection.start;\n        }\n        if (selection.start.paragraph.isInsideTable && selection.end.paragraph.isInsideTable\n            && selection.start.paragraph.associatedCell.ownerTable.contains(selection.end.paragraph.associatedCell)) {\n            var startCell = this.getOwnerCell(this.selection.isForward);\n            var endCell = this.getOwnerCell(!this.selection.isForward);\n            if (startCell.rowIndex === endCell.rowIndex) {\n                var startIndex = startCell.ownerRow.childWidgets.indexOf(startCell);\n                var endIndex = startCell.ownerRow.childWidgets.indexOf(endCell);\n                var startElement = [];\n                var endElement = [];\n                for (var i = startIndex; i <= endIndex; i++) {\n                    var editStart = this.addEditElement(user);\n                    if (i == startIndex) {\n                        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n                            this.editorHistory.currentHistoryInfo.editRangeStart = editStart;\n                        }\n                    }\n                    editStart.columnFirst = i;\n                    editStart.columnLast = i;\n                    editStart.line = selection.start.currentWidget;\n                    var editEnd = editStart.editRangeEnd;\n                    editEnd.line = selection.end.currentWidget;\n                    startElement.push(editStart);\n                    endElement.push(editEnd);\n                    this.insertElements(undefined, [editStart]);\n                }\n                //this.insertElements(endElement, startElement);\n                var lastLine = this.selection.getLastParagraph(endCell).lastChild;\n                for (var l = 0; l < endElement.length; l++) {\n                    endElement[l].line = lastLine;\n                    if (l == 0) {\n                        this.selection.start.setPositionParagraph(lastLine, this.selection.getLineLength(lastLine));\n                        this.selection.end.setPositionParagraph(lastLine, this.selection.getLineLength(lastLine));\n                    }\n                    this.insertElements(undefined, [endElement[l]]);\n                }\n                if (this.editorHistory) {\n                    this.editorHistory.updateComplexHistoryInternal();\n                }\n                var offset = startElement[0].line.getOffset(startElement[0], 1);\n                this.selection.start.setPositionParagraph(startElement[0].line, offset);\n                offset = endElement[0].line.getOffset(endElement[0], 1);\n                this.selection.end.setPositionParagraph(endElement[0].line, offset);\n                this.selection.fireSelectionChanged(true);\n                this.fireContentChange();\n            }\n            else {\n                this.insertEditRangeInsideTable(startCell, endCell, user);\n                if (this.editorHistory) {\n                    this.editorHistory.updateComplexHistoryInternal();\n                }\n                var startLine = this.documentHelper.getFirstParagraphInCell(startCell).childWidgets[0];\n                var endLine = this.selection.getLastParagraph(endCell).childWidgets[0];\n                var offset = startLine.getOffset(startLine.children[0], 1);\n                this.selection.start.setPositionParagraph(startLine, offset);\n                offset = endLine.getOffset(endLine.children[0], 1);\n                this.selection.end.setPositionParagraph(endLine, offset);\n                this.selection.fireSelectionChanged(true);\n                this.fireContentChange();\n            }\n        }\n        else {\n            this.addRestrictEditingForSelectedArea(user);\n        }\n        this.selection.skipEditRangeRetrieval = false;\n    };\n    Editor.prototype.insertEditRangeInsideTable = function (startCell, endCell, user) {\n        var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n        var count = table.childWidgets.indexOf(endCell.ownerRow);\n        var rowStartIndex = table.childWidgets.indexOf(startCell.ownerRow);\n        var startLeft = this.selection.getCellLeft(startCell.ownerRow, startCell);\n        var endLeft = startLeft + startCell.cellFormat.cellWidth;\n        var endCellLeft = this.selection.getCellLeft(endCell.ownerRow, endCell);\n        var endCellRight = endCellLeft + endCell.cellFormat.cellWidth;\n        var cellInfo = this.updateSelectedCellsInTable(startLeft, endLeft, endCellLeft, endCellRight);\n        startLeft = cellInfo.start;\n        endLeft = cellInfo.end;\n        var endElement = [];\n        for (var i = rowStartIndex; i <= count; i++) {\n            table = startCell.ownerTable.combineWidget(this.owner.viewer);\n            var row = table.childWidgets[i];\n            var cellSelectionStartIndex = -1;\n            var cellSelectionEndIndex = -1;\n            for (var j = 0; j < row.childWidgets.length; j++) {\n                var cell = row.childWidgets[j];\n                var cellStart = this.selection.getCellLeft(row, cell);\n                if (this.checkCellWithInSelection(startLeft, endLeft, cellStart)) {\n                    if (cellSelectionStartIndex === -1) {\n                        cellSelectionStartIndex = j;\n                    }\n                    cellSelectionEndIndex = j;\n                }\n            }\n            var newEndElement = [];\n            for (var z = cellSelectionStartIndex; z <= cellSelectionEndIndex; z++) {\n                var startCell_2 = void 0;\n                var startParagraph = void 0;\n                var startLine = void 0;\n                if (z >= cellSelectionStartIndex && z <= cellSelectionEndIndex) {\n                    startCell_2 = row.childWidgets[cellSelectionStartIndex];\n                    startParagraph = this.documentHelper.getFirstParagraphInCell(startCell_2);\n                    startLine = startParagraph.childWidgets[0];\n                }\n                var editStart = this.addEditElement(user);\n                if (z === cellSelectionStartIndex) {\n                    if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n                        this.editorHistory.currentHistoryInfo.editRangeStart = editStart;\n                    }\n                    this.selection.start.setPositionParagraph(startLine, this.selection.getStartOffset(startParagraph));\n                    this.selection.end.setPositionParagraph(startLine, this.selection.getStartOffset(startParagraph));\n                }\n                editStart.columnFirst = z;\n                editStart.columnLast = z;\n                editStart.line = startLine;\n                this.insertElements(undefined, [editStart]);\n                var editEnd = editStart.editRangeEnd;\n                newEndElement.push(editEnd);\n                if (endElement.length > 0 && z === cellSelectionEndIndex) {\n                    for (var l = 0; l < endElement.length; l++) {\n                        endElement[l].line = editStart.line;\n                        this.insertElements(undefined, [endElement[l]]);\n                    }\n                    endElement = [];\n                }\n            }\n            endElement = newEndElement;\n            if (i === count && endElement.length > 0) {\n                var cellWidget = row.childWidgets[cellSelectionEndIndex];\n                var lastLine = this.selection.getLastParagraph(cellWidget).lastChild;\n                for (var l = 0; l < endElement.length; l++) {\n                    endElement[l].line = lastLine;\n                    if (l == 0) {\n                        this.selection.start.setPositionParagraph(lastLine, this.selection.getLineLength(lastLine));\n                        this.selection.end.setPositionParagraph(lastLine, this.selection.getLineLength(lastLine));\n                    }\n                    this.insertElements(undefined, [endElement[l]]);\n                }\n            }\n        }\n    };\n    Editor.prototype.addRestrictEditingForSelectedArea = function (user) {\n        var editStart = this.addEditElement(user);\n        var editEnd = editStart.editRangeEnd;\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            this.editorHistory.currentHistoryInfo.editRangeStart = editStart;\n        }\n        this.owner.isShiftingEnabled = true;\n        this.insertElements([editEnd], [editStart]);\n        if (this.editorHistory) {\n            this.editorHistory.updateComplexHistoryInternal();\n        }\n        var offset = editStart.line.getOffset(editStart, 1);\n        this.selection.start.setPositionParagraph(editStart.line, offset);\n        offset = editEnd.line.getOffset(editEnd, 1);\n        this.selection.end.setPositionParagraph(editEnd.line, offset);\n        var block = this.documentHelper.blockToShift;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(block) && this.viewer instanceof _index__WEBPACK_IMPORTED_MODULE_5__.PageLayoutViewer && block.bodyWidget.sectionFormat.columns.length > 1) {\n            var lastbody = this.documentHelper.layout.getBodyWidget(block.bodyWidget, false);\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(lastbody.nextRenderedWidget) && lastbody.nextRenderedWidget.sectionFormat.breakCode === 'NoBreak' && lastbody.page === lastbody.nextRenderedWidget.page)) {\n                this.reLayout(this.selection);\n            }\n        }\n        this.owner.isShiftingEnabled = false;\n        this.selection.fireSelectionChanged(true);\n        this.fireContentChange();\n    };\n    /**\n     * @param user\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.addEditElement = function (user, id) {\n        var editStart = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox();\n        if (user.toLocaleLowerCase() === 'everyone') {\n            editStart.group = user;\n        }\n        else {\n            editStart.user = user;\n        }\n        var editEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox();\n        editEnd.editRangeStart = editStart;\n        editStart.editRangeEnd = editEnd;\n        if (id) {\n            editStart.editRangeId = id;\n            editEnd.editRangeId = id;\n        }\n        else {\n            var editRangeId = this.getEditRangeID(9);\n            editStart.editRangeId = editRangeId;\n            editEnd.editRangeId = editRangeId;\n        }\n        this.editStartRangeCollection.push(editStart);\n        this.addEditCollectionToDocument();\n        this.editStartRangeCollection = [];\n        return editStart;\n    };\n    /**\n     * @param numDigits\n     * @private\n     * @returns {number}\n     */\n    Editor.prototype.getEditRangeID = function (numDigits) {\n        var min = Math.pow(10, numDigits - 1);\n        var max = Math.pow(10, numDigits) - 1;\n        var num = Math.floor(Math.random() * (max - min + 1)) + min;\n        if (this.editRangeID.includes(num)) {\n            // Number is not unique, generate a new one recursively\n            return this.getEditRangeID(numDigits);\n        }\n        this.editRangeID.push(num);\n        return num;\n    };\n    /**\n     * @param protectionType\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.protect = function (protectionType) {\n        this.documentHelper.isDocumentProtected = true;\n        this.documentHelper.protectionType = protectionType;\n        this.selection.highlightEditRegion();\n        if (this.editorHistory) {\n            this.editorHistory.destroy();\n        }\n    };\n    Editor.prototype.addEditCollectionToDocument = function () {\n        for (var i = 0; i < this.editStartRangeCollection.length; i++) {\n            var editStart = this.editStartRangeCollection[i];\n            var user = editStart.user === '' ? editStart.group : editStart.user;\n            if (this.documentHelper.editRanges.length > 0 && this.documentHelper.editRanges.containsKey(user)) {\n                this.documentHelper.editRanges.get(user).push(editStart);\n            }\n            else {\n                var collection = [];\n                collection.push(editStart);\n                this.documentHelper.editRanges.add(user, collection);\n            }\n        }\n        this.selection.updateEditRangeCollection();\n    };\n    /**\n     * @param editStart\n     * @param user\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateRangeCollection = function (editStart, user) {\n        if (this.documentHelper.editRanges.length > 0 && this.documentHelper.editRanges.containsKey(user)) {\n            if (this.documentHelper.editRanges.get(user).indexOf(editStart) === -1) {\n                this.documentHelper.editRanges.get(user).push(editStart);\n            }\n        }\n        else {\n            var collection = [];\n            collection.push(editStart);\n            this.documentHelper.editRanges.add(user, collection);\n        }\n    };\n    /**\n     * @param user\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeUserRestrictions = function (user) {\n        if (!this.selection.checkSelectionIsAtEditRegion() && !this.selection.isEditRangeCellSelected()) {\n            return;\n        }\n        this.selection.skipEditRangeRetrieval = true;\n        var editStart = this.selection.getEditRangeStartElement();\n        this.selection.skipEditRangeRetrieval = true;\n        var start = this.selection.start;\n        var end = this.selection.end;\n        if (!this.selection.isForward) {\n            start = this.selection.end;\n            end = this.selection.start;\n        }\n        if (!this.selection.isEmpty && start.paragraph.isInsideTable && end.paragraph.isInsideTable && this.selection.isCellSelected(start.paragraph.associatedCell, start, end)) {\n            var startCell = start.paragraph.associatedCell;\n            var table = startCell.ownerTable.combineWidget(this.owner.viewer);\n            var endCell = end.paragraph.associatedCell;\n            if (table.contains(endCell)) {\n                this.removeEditRangeElementsOnTable(user);\n            }\n        }\n        else {\n            this.removeEditRangeElements(editStart, user);\n        }\n        this.fireContentChange();\n        this.selection.skipEditRangeRetrieval = false;\n    };\n    Editor.prototype.removeEditRangeElements = function (editStart, user) {\n        this.initHistory('RemoveEditRange');\n        if (this.editorHistory) {\n            this.editorHistory.currentBaseHistoryInfo.markerData.push(this.getMarkerData(editStart));\n            this.editorHistory.currentBaseHistoryInfo.setEditRangeInfo(editStart);\n            this.editorHistory.updateHistory();\n        }\n        if (editStart.user === user || editStart.group === user) {\n            this.removeUserRestrictionsInternal(editStart, user);\n        }\n        this.selection.updateEditRangeCollection();\n    };\n    Editor.prototype.removeEditRangeElementsOnTable = function (currentUser) {\n        var selectedWidgets = this.selection.selectedWidgets.keys;\n        if (selectedWidgets) {\n            this.initComplexHistory('RemoveEditRange');\n            for (var i = 0; i < selectedWidgets.length; i++) {\n                if (selectedWidgets[i] instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableCellWidget) {\n                    var cell = selectedWidgets[i];\n                    var row = cell.containerWidget;\n                    var editRangeElements = row.editRangeID.values;\n                    if (editRangeElements.length > 0) {\n                        var editStart = void 0;\n                        for (var _i = 0, editRangeElements_1 = editRangeElements; _i < editRangeElements_1.length; _i++) {\n                            var element = editRangeElements_1[_i];\n                            if (element.columnFirst == cell.index && element.columnLast == cell.index) {\n                                editStart = element;\n                            }\n                        }\n                        if (editStart) {\n                            var editRangeEnd = editStart.editRangeEnd;\n                            this.selection.start.setPositionParagraph(editStart.line, editStart.line.getOffset(editStart, editStart.length));\n                            this.selection.end.setPositionParagraph(editRangeEnd.line, editRangeEnd.line.getOffset(editRangeEnd, editRangeEnd.length) - 1);\n                            if (editStart.user === currentUser || editStart.group === currentUser) {\n                                this.removeEditRangeElements(editStart, currentUser);\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.editorHistory) {\n                this.editorHistory.updateComplexHistoryInternal();\n            }\n        }\n    };\n    /**\n     * @param editStart\n     * @param currentUser\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeUserRestrictionsInternal = function (editStart, currentUser, notRemoveElement) {\n        var user = currentUser;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(currentUser)) {\n            user = editStart.user === '' ? editStart.group : editStart.user;\n        }\n        var index = this.documentHelper.editRanges.get(user).indexOf(editStart);\n        this.documentHelper.editRanges.get(user).splice(index, 1);\n        if (this.documentHelper.editRanges.get(user).length === 0) {\n            this.documentHelper.editRanges.remove(user);\n        }\n        if (editStart.columnFirst != -1 && editStart.columnLast != -1) {\n            this.removeEditRangeFromCollection(editStart);\n        }\n        editStart.removeEditRangeMark();\n        if (!notRemoveElement) {\n            editStart.editRangeEnd.line.children.splice(editStart.editRangeEnd.indexInOwner, 1);\n            editStart.line.children.splice(editStart.indexInOwner, 1);\n        }\n    };\n    Editor.prototype.removeEditRangeFromCollection = function (editStart) {\n        var row = editStart.paragraph.associatedCell.ownerRow;\n        if (row.editRangeID.containsKey(editStart.editRangeId)) {\n            var cell = row.getCellUsingColumnIndex(row.rowIndex, editStart.columnFirst);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell)) {\n                if (cell.isRenderEditRangeStart && cell.isRenderEditRangeEnd) {\n                    cell.isRenderEditRangeEnd = false;\n                    cell.isRenderEditRangeStart = false;\n                    row.editRangeID.remove(editStart.editRangeId);\n                }\n            }\n        }\n        else {\n            var table = editStart.paragraph.associatedCell.ownerTable;\n            for (var i = row.rowIndex - 1; i >= 0; i--) {\n                var previousRow = table.childWidgets[i];\n                if (previousRow.editRangeID.containsKey(editStart.editRangeId)) {\n                    var previousCell = previousRow.getCellUsingColumnIndex(previousRow.rowIndex, editStart.columnFirst);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(previousCell)) {\n                        if (previousCell.isRenderEditRangeStart && previousCell.isRenderEditRangeEnd) {\n                            previousCell.isRenderEditRangeEnd = false;\n                            previousCell.isRenderEditRangeStart = false;\n                            previousRow.editRangeID.remove(editStart.editRangeId);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.removeAllEditRestrictions = function () {\n        this.selection.skipEditRangeRetrieval = true;\n        var startPosition = this.selection.start;\n        var endPosition = this.selection.end;\n        var editStart = [];\n        var keys = this.documentHelper.editRanges.keys;\n        for (var j = 0; j < keys.length; j++) {\n            editStart = this.documentHelper.editRanges.get(keys[j]);\n            for (var i = 0; i < editStart.length; i++) {\n                editStart[i].editRangeEnd.line.children.splice(editStart[i].editRangeEnd.indexInOwner, 1);\n                editStart[i].line.children.splice(editStart[i].indexInOwner, 1);\n            }\n        }\n        this.documentHelper.editRanges.clear();\n        this.selection.updateEditRangeCollection();\n        this.selection.start.setPositionInternal(startPosition);\n        this.selection.end.setPositionInternal(endPosition);\n        this.selection.editRegionHighlighters.clear();\n        this.owner.viewer.updateScrollBars();\n        this.selection.fireSelectionChanged(false);\n        this.selection.skipEditRangeRetrieval = false;\n    };\n    /**\n     * Inserts the specified form field at the current selection.\n     *\n     * @param {FormFieldType} type Specify the Form field type to insert.\n     * @returns {void}\n     */\n    Editor.prototype.insertFormField = function (type) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection.start) || this.owner.enableHeaderAndFooter || this.selection.isPlainContentControl()) {\n            return;\n        }\n        this.initHistory('InsertHyperlink');\n        var isRemoved = true;\n        if (!this.selection.isEmpty) {\n            isRemoved = this.removeSelectedContents(this.selection);\n        }\n        if (isRemoved) {\n            this.insertFormFieldInternal(type);\n        }\n    };\n    Editor.prototype.insertFormFieldInternal = function (type) {\n        this.updateInsertPosition();\n        var element = [];\n        var temp = this.getCharacterFormat(this.selection);\n        var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat(undefined);\n        format.copyFormat(temp);\n        var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        fieldBegin.formFieldData = this.getFormFieldData(type);\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.formFieldType = type;\n            this.editorHistory.currentBaseHistoryInfo.fieldBegin = fieldBegin;\n        }\n        fieldBegin.characterFormat.copyFormat(format);\n        element.push(fieldBegin);\n        var bookmark = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(0);\n        bookmark.characterFormat.copyFormat(format);\n        fieldBegin.formFieldData.name = this.getBookmarkName(type, 'Insert', this.formFieldCounter);\n        bookmark.name = fieldBegin.formFieldData.name;\n        element.push(bookmark);\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.text = this.getFormFieldCode(type);\n        element.push(span);\n        var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        element.push(fieldSeparator);\n        var result = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        result.characterFormat.copyFormat(format);\n        if (type === 'CheckBox') {\n            result.text = String.fromCharCode(9744);\n            this.documentHelper.layout.setCheckBoxFontSize(fieldBegin.formFieldData, result.characterFormat);\n        }\n        else {\n            result.text = this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5);\n        }\n        element.push(result);\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        fieldEnd.characterFormat.copyFormat(format);\n        element.push(fieldEnd);\n        fieldBegin.fieldSeparator = fieldEnd.fieldSeparator = fieldSeparator;\n        fieldBegin.fieldEnd = fieldSeparator.fieldEnd = fieldEnd;\n        fieldSeparator.fieldBegin = fieldEnd.fieldBegin = fieldBegin;\n        var bookmarkEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(1);\n        bookmarkEnd.characterFormat.copyFormat(format);\n        bookmarkEnd.name = fieldBegin.formFieldData.name;\n        bookmarkEnd.reference = bookmark;\n        bookmark.reference = bookmarkEnd;\n        element.push(bookmarkEnd);\n        this.documentHelper.layout.isInsertFormField = true;\n        this.insertElement(element);\n        this.documentHelper.layout.isInsertFormField = false;\n        var paragraph = this.selection.start.paragraph;\n        fieldEnd.linkFieldCharacter(this.documentHelper);\n        if (this.documentHelper.fields.indexOf(fieldBegin) === -1) {\n            this.documentHelper.fields.push(fieldBegin);\n        }\n        this.addFormFieldWidget(fieldBegin);\n        var offset = bookmarkEnd.line.getOffset(bookmarkEnd, 1);\n        this.selection.selects(bookmarkEnd.line, offset, true);\n        this.updateEndPosition();\n        this.reLayout(this.selection, true);\n    };\n    Editor.prototype.addFormFieldWidget = function (fieldBegin) {\n        if (this.documentHelper.formFields.indexOf(fieldBegin) === -1) {\n            var isInserted = false;\n            if (this.documentHelper.formFields.length > 0) {\n                var currentStart = this.selection.getElementPosition(fieldBegin).startPosition;\n                for (var i = 0; i < this.documentHelper.formFields.length; i++) {\n                    /* eslint-disable-next-line max-len */\n                    var paraIndex = this.selection.getElementPosition(this.documentHelper.formFields[i]).startPosition;\n                    if (currentStart.isExistBefore(paraIndex)) {\n                        isInserted = true;\n                        this.documentHelper.formFields.splice(i, 0, fieldBegin);\n                        break;\n                    }\n                }\n            }\n            if (!isInserted) {\n                this.documentHelper.formFields.push(fieldBegin);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Editor.prototype.getFormFieldData = function (type) {\n        switch (type) {\n            case 'Text':\n                return new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField();\n            case 'CheckBox':\n                return new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxFormField();\n            case 'DropDown':\n                return new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.DropDownFormField();\n        }\n    };\n    /**\n     * @param field\n     * @param info\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.setFormField = function (field, info) {\n        var type;\n        var formField;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.format)) {\n            type = 'Text';\n            formField = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.sizeType)) {\n            type = 'CheckBox';\n            formField = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxFormField();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.dropdownItems)) {\n            type = 'DropDown';\n            formField = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.DropDownFormField();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(type) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(formField)) {\n            formField.name = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(info.name) ? info.name : field.formFieldData.name;\n            formField.copyFieldInfo(info);\n            this.editFormField(type, formField);\n        }\n    };\n    /**\n     * @param type\n     * @param formData\n     * @param type\n     * @param formData\n     * @private\n     * @returns {boolean}\n     */\n    Editor.prototype.editFormField = function (type, formData) {\n        var begin = this.selection.getCurrentFormField();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(begin) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(begin.formFieldData)) {\n            return false;\n        }\n        this.initComplexHistory('FormField');\n        var bookmarkStart;\n        var bookmarkEnd;\n        if (formData.name !== '') {\n            if (begin.formFieldData.name !== formData.name &&\n                this.documentHelper.bookmarks.containsKey(formData.name)) {\n                this.deleteBookmark(formData.name);\n            }\n            bookmarkStart = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(0);\n            bookmarkStart.name = formData.name;\n            bookmarkEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox(1);\n            bookmarkEnd.name = formData.name;\n            bookmarkStart.reference = bookmarkEnd;\n            bookmarkEnd.reference = bookmarkStart;\n        }\n        this.initHistory('InsertHyperlink');\n        this.editHyperlinkInternal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory)\n            || (this.editorHistory && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo));\n        // Preserves the character format for hyperlink field.\n        var temp = begin.characterFormat.cloneFormat();\n        var format = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n        format.copyFormat(temp);\n        var textFormat = begin.fieldSeparator.nextElement.characterFormat.cloneFormat();\n        var currentOffset = begin.line.getOffset(begin, 0);\n        this.selection.start.setPositionParagraph(begin.line, currentOffset);\n        var endElement = begin.fieldEnd;\n        if (begin.nextNode && begin.nextNode instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.BookmarkElementBox) {\n            endElement = begin.nextNode.reference;\n        }\n        currentOffset = endElement.line.getOffset(endElement, 1);\n        this.selection.end.setPositionParagraph(endElement.line, currentOffset);\n        this.skipFieldDeleteTracking = true;\n        this.deleteSelectedContents(this.selection, false);\n        this.skipFieldDeleteTracking = false;\n        this.updateInsertPosition();\n        var element = [];\n        var fieldBegin = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(0);\n        fieldBegin.formFieldData = formData;\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.formFieldType = type;\n            this.editorHistory.currentBaseHistoryInfo.fieldBegin = fieldBegin;\n        }\n        element.push(fieldBegin);\n        fieldBegin.characterFormat.copyFormat(format);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkStart)) {\n            element.push(bookmarkStart);\n        }\n        var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.text = this.getFormFieldCode(type);\n        element.push(span);\n        var fieldSeparator = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(2);\n        fieldSeparator.characterFormat.copyFormat(format);\n        element.push(fieldSeparator);\n        span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        span.characterFormat.copyFormat(textFormat);\n        span.text = this.getDefaultText(formData);\n        if (type === 'CheckBox') {\n            span.characterFormat.copyFormat(fieldBegin.characterFormat);\n            if (formData.sizeType === 'Exactly') {\n                span.characterFormat.fontSize = formData.size * CHECK_BOX_FACTOR;\n            }\n        }\n        else if (formData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField) {\n            if (formData.defaultValue !== '') {\n                if (formData.type === 'Text') {\n                    span.text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatText(formData.format, formData.defaultValue);\n                }\n                else if (formData.type === 'Number') {\n                    span.text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatNumber(formData.format, formData.defaultValue);\n                }\n                else {\n                    span.text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatDate(formData.format, formData.defaultValue);\n                }\n            }\n        }\n        element.push(span);\n        var fieldEnd = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox(1);\n        fieldEnd.characterFormat.copyFormat(format);\n        element.push(fieldEnd);\n        var lastElement = fieldEnd;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(bookmarkEnd)) {\n            lastElement = bookmarkEnd;\n            element.push(bookmarkEnd);\n        }\n        fieldBegin.fieldSeparator = fieldEnd.fieldSeparator = fieldSeparator;\n        fieldBegin.fieldEnd = fieldSeparator.fieldEnd = fieldEnd;\n        fieldSeparator.fieldBegin = fieldEnd.fieldBegin = fieldBegin;\n        this.documentHelper.layout.isInsertFormField = true;\n        this.insertElement(element);\n        this.documentHelper.layout.isInsertFormField = false;\n        var paragraph = this.selection.start.paragraph;\n        fieldEnd.linkFieldCharacter(this.documentHelper);\n        if (this.documentHelper.fields.indexOf(fieldBegin) === -1) {\n            this.documentHelper.fields.push(fieldBegin);\n        }\n        this.addFormFieldWidget(fieldBegin);\n        var offset = lastElement.line.getOffset(lastElement, 1);\n        this.selection.selects(lastElement.line, offset, true);\n        this.updateEndPosition();\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.updateHistory();\n        }\n        if (this.editorHistory && this.editorHistory.currentHistoryInfo) {\n            this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n            this.editorHistory.updateComplexHistory();\n            this.isSkipOperationsBuild = false;\n        }\n        this.reLayout(this.selection, true);\n        this.editHyperlinkInternal = false;\n        this.nodes = [];\n        return true;\n    };\n    Editor.prototype.getDefaultText = function (formField) {\n        var defaultText = '';\n        if (formField instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxFormField) {\n            defaultText = formField.defaultValue ? String.fromCharCode(9745) : String.fromCharCode(9744);\n        }\n        else if (formField instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.DropDownFormField) {\n            if (formField.dropdownItems.length > 0) {\n                defaultText = formField.dropdownItems[0];\n            }\n            else {\n                defaultText = this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5);\n            }\n        }\n        else if (formField instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField) {\n            if (formField.defaultValue !== '') {\n                defaultText = formField.defaultValue;\n            }\n            else {\n                defaultText = this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5);\n            }\n        }\n        return defaultText;\n    };\n    Editor.prototype.getFormFieldCode = function (type) {\n        switch (type) {\n            case 'Text':\n                return 'FORMTEXT';\n            case 'CheckBox':\n                return 'FORMCHECKBOX';\n            case 'DropDown':\n                return 'FORMDROPDOWN';\n        }\n    };\n    /**\n     * @param field\n     * @param reset\n     * @param value\n     * @param field\n     * @param reset\n     * @param value\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.toggleCheckBoxFormField = function (field, reset, value) {\n        var formFieldData = field.formFieldData;\n        if (formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxFormField && formFieldData.enabled) {\n            this.initHistory('UpdateFormField');\n            if (this.editorHistory) {\n                var currentValue = void 0;\n                if (formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.CheckBoxFormField) {\n                    currentValue = formFieldData.checked;\n                }\n                this.editorHistory.currentBaseHistoryInfo.fieldBegin = field;\n                this.editorHistory.currentBaseHistoryInfo.setFormFieldInfo(field, currentValue);\n                this.editorHistory.updateHistory();\n            }\n            if (reset) {\n                formFieldData.checked = value;\n            }\n            else {\n                formFieldData.checked = !formFieldData.checked;\n            }\n            var separator = field.fieldSeparator;\n            var checkBoxTextElement = separator.nextNode;\n            if (formFieldData.checked) {\n                checkBoxTextElement.text = String.fromCharCode(9745);\n            }\n            else {\n                checkBoxTextElement.text = String.fromCharCode(9744);\n            }\n            checkBoxTextElement.isWidthUpdated = false;\n            this.owner.documentHelper.layout.reLayoutParagraph(field.line.paragraph, 0, 0);\n            this.reLayout(this.selection, false);\n        }\n    };\n    /**\n     * @private\n     * @param contentControl\n     * @returns {void}\n     */\n    Editor.prototype.toggleContentControlCheckBox = function (contentControl, value) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !this.editorHistory.isUndoing && !this.editorHistory.isRedoing) {\n            this.selection.selectContentInternal(contentControl);\n            this.initHistory('UpdateContentControl');\n        }\n        if (this.editorHistory && this.editorHistory.currentBaseHistoryInfo) {\n            this.editorHistory.currentBaseHistoryInfo.setContentControlCheckBox(contentControl, value);\n        }\n        var checkBoxText = contentControl.nextNode;\n        if (checkBoxText instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeStartElementBox || checkBoxText instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.EditRangeEndElementBox) {\n            checkBoxText = checkBoxText.nextNode;\n        }\n        if (!(checkBoxText instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.selection)) {\n            checkBoxText = this.selection.getNextTextElement(checkBoxText);\n        }\n        checkBoxText.isWidthUpdated = false;\n        var state = value ? contentControl.contentControlProperties.checkedState\n            : contentControl.contentControlProperties.uncheckedState;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(state.font) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(state.value)) {\n            checkBoxText.characterFormat.fontFamily = state.font;\n            checkBoxText.characterFormat.fontFamilyAscii = state.font;\n            checkBoxText.characterFormat.fontFamilyFarEast = state.font;\n            checkBoxText.characterFormat.fontFamilyNonFarEast = state.font;\n            checkBoxText.text = state.value;\n        }\n        else {\n            checkBoxText.text = String.fromCharCode(value ? 9746 : 9744);\n        }\n        contentControl.contentControlProperties.isChecked = value;\n        this.reLayout(this.selection, true);\n    };\n    /**\n     * @param field\n     * @param value\n     * @param reset\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateFormField = function (field, value, reset) {\n        var formFieldData = field.formFieldData;\n        if (formFieldData) {\n            this.updateFormFieldInternal(field, formFieldData, value, reset);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.updateContentControl = function (contentControl, value, reset) {\n        if (contentControl.contentControlProperties.type === 'RichText' || contentControl.contentControlProperties.type === 'Text' || contentControl.contentControlProperties.type === 'Date' || contentControl.contentControlProperties.type === 'Picture') {\n            this.updateContentControlResult(contentControl, value, reset);\n        }\n        else if (contentControl.contentControlProperties.type === 'CheckBox') {\n            this.toggleContentControlCheckBox(contentControl, (value === 'true' && !reset));\n        }\n        else if (contentControl.contentControlProperties.type === 'ComboBox' || contentControl.contentControlProperties.type === 'DropDownList') {\n            var span = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ContentControlListItems();\n            if (reset) {\n                var localeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                span.displayText = localeValue.getConstant('Choose an item');\n                span.value = localeValue.getConstant('Choose an item');\n            }\n            else {\n                span.displayText = value;\n                span.value = value;\n            }\n            contentControl.contentControlProperties.contentControlListItems.push(span);\n            this.dropDownChange(contentControl, span.displayText);\n        }\n    };\n    Editor.prototype.updateContentControlResult = function (contentControl, value, reset) {\n        this.selection.selectContentControlInternal(contentControl);\n        if (contentControl.contentControlProperties.type === 'Picture') {\n            if (reset) {\n                value = '';\n            }\n            this.insertImageAsync(value);\n        }\n        else {\n            if (reset || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(value) || value === '') {\n                var locale = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.L10n('documenteditor', this.owner.defaultLocale);\n                locale.setLocale(this.owner.locale);\n                value = contentControl.contentControlProperties.type === 'Date' ? locale.getConstant('Default Date Picker') : locale.getConstant('Default Content Control Text');\n            }\n            if (contentControl.contentControlProperties.type === 'RichText') {\n                try {\n                    if (typeof value !== 'object') {\n                        value = JSON.parse(value);\n                    }\n                }\n                catch (e) {\n                    var sfdt = {\n                        \"sections\": [\n                            {\n                                \"blocks\": [\n                                    {\n                                        \"inlines\": [\n                                            {\n                                                \"text\": value\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    };\n                    value = JSON.stringify(sfdt);\n                }\n                this.paste(value);\n                this.updatePropertiesToBlock(contentControl, true);\n            }\n            else {\n                this.insertText(value);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.getContentControlPropObject = function (contentControl) {\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.owner.sfdtExportModule) ? this.documentHelper.owner.sfdtExportModule.contentControlProperty(contentControl, 1) : {};\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.assignContentControl = function (contentControl, value) {\n        if (this.owner.parser) {\n            this.owner.parser.parseContentControlProperties(value, contentControl, 1);\n        }\n    };\n    Editor.prototype.updateFormFieldInternal = function (field, formFieldData, value, reset) {\n        if (formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField) {\n            if (value === '') {\n                if (reset) {\n                    value = this.getDefaultText(formFieldData);\n                }\n                else {\n                    value = this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5);\n                }\n            }\n            var formattedText = value;\n            var type = formFieldData.type;\n            if (type === 'Text' && formFieldData.format !== '') {\n                formattedText = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatText(formFieldData.format, value);\n            }\n            this.updateFormFieldResult(field, formattedText);\n        }\n        else if (formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.DropDownFormField) {\n            var text = formFieldData.dropdownItems[value];\n            formFieldData.selectedIndex = value;\n            this.updateFormFieldResult(field, text);\n        }\n        var endoffset = field.fieldEnd.line.getOffset(field.fieldEnd, 1);\n        var startPos = new _selection_selection_helper__WEBPACK_IMPORTED_MODULE_0__.TextPosition(this.owner);\n        startPos.setPositionParagraph(field.fieldEnd.line, endoffset);\n        //selects the field range\n        this.documentHelper.selection.selectRange(startPos, startPos);\n        this.reLayout(this.selection, false);\n    };\n    Editor.prototype.updateFormFieldResult = function (field, value) {\n        //When protection is enabled with type Form Filling below method selects the field result alone.\n        this.selection.selectFieldInternal(field, false, true);\n        this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.insertText(value);\n        this.isSkipOperationsBuild = false;\n    };\n    Editor.prototype.checkBookmarkAvailability = function (name, action) {\n        var bookmarkCol = this.documentHelper.bookmarks;\n        for (var i = 0; i < bookmarkCol.length; i++) {\n            if (bookmarkCol.containsKey(name)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    Editor.prototype.getBookmarkName = function (type, action, count) {\n        var name;\n        var available = false;\n        while (available === false) {\n            name = type + count;\n            available = this.checkBookmarkAvailability(name, action);\n            count = count + 1;\n        }\n        return name;\n    };\n    /**\n     * @param formField\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyFormTextFormat = function (formField) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(formField)) {\n            var text = this.getFieldResultText(formField);\n            var currentValue = text;\n            text = _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.formatText(formField.formFieldData.format, text);\n            if (formField.fieldSeparator != undefined) {\n                this.applyTextFormatInternal(formField, text);\n            }\n            this.initHistory('FormTextFormat');\n            if (this.editorHistory) {\n                this.editorHistory.currentBaseHistoryInfo.setFormFieldInfo(formField, currentValue);\n                this.editorHistory.updateHistory();\n            }\n        }\n    };\n    // Inserts 5 space on Form Fill inline mode if length is 0\n    Editor.prototype.insertSpaceInFormField = function () {\n        if (this.documentHelper.isInlineFormFillProtectedMode && this.selection.isInlineFormFillMode()) {\n            var resultText = this.getFieldResultText();\n            if (resultText.length === 0 || resultText === '\\r') {\n                this.insertTextInternal(this.documentHelper.textHelper.repeatChar(this.documentHelper.textHelper.getEnSpaceCharacter(), 5), true);\n                this.selection.selectTextElementStartOfField(this.selection.getCurrentFormField());\n            }\n        }\n    };\n    /**\n     * @param formField\n     * @private\n     * @returns {string}\n     */\n    Editor.prototype.getFieldResultText = function (formField) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(formField)) {\n            formField = this.selection.getCurrentFormField();\n        }\n        //Stores the current selection index, to reset after getting the result text\n        var previousStartIndex = this.selection.startOffset;\n        var previousEndIndex = this.selection.endOffset;\n        this.selection.isModifyingSelectionInternally = true;\n        this.selection.selectFieldInternal(formField, false, true);\n        var resultText = this.selection.getText(false);\n        //Resets the selection back to the original index\n        this.selection.select(previousStartIndex, previousEndIndex);\n        this.selection.isModifyingSelectionInternally = false;\n        return resultText;\n    };\n    /**\n    * @private\n    * @returns {void}\n    */\n    Editor.prototype.contentControlDropDownChange = function () {\n        var contenControl = this.documentHelper.selection.currentContentControl;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(contenControl)) {\n            if ((contenControl.contentControlProperties.type == 'ComboBox' || contenControl.contentControlProperties.type == 'DropDownList')) {\n                this.documentHelper.contentDropDown.showPopUp(contenControl);\n            }\n            else if (contenControl.contentControlProperties.type == 'Date') {\n                this.documentHelper.owner.dateContentDialogModule.show();\n            }\n        }\n    };\n    /**\n     * @param field\n     * @param text\n     * @private\n     * @returns {void}\n     */\n    Editor.prototype.applyTextFormatInternal = function (field, text) {\n        var textElement = field.fieldSeparator.nextElement;\n        var start = 0;\n        text = text.replace(/\\r/g, '');\n        do {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement) && textElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox) {\n                textElement.text = text.slice(start, start + textElement.text.length);\n                start = start + textElement.length;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement.nextElement)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(textElement.line.nextLine)) {\n                    textElement = textElement.line.nextLine.children[0];\n                }\n                else {\n                    this.documentHelper.layout.layoutBodyWidgetCollection(textElement.paragraph.index, textElement.paragraph.bodyWidget, textElement.paragraph, true);\n                    var nextBlock = textElement.paragraph.nextRenderedWidget;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(nextBlock)) {\n                        break;\n                    }\n                    if (nextBlock instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TableWidget) {\n                        nextBlock = this.documentHelper.getFirstParagraphBlock(nextBlock);\n                    }\n                    while (nextBlock.isEmpty()) {\n                        nextBlock = nextBlock.nextRenderedWidget;\n                    }\n                    textElement = nextBlock.childWidgets[0].children[0];\n                }\n            }\n            else {\n                textElement = textElement.nextElement;\n            }\n        } while (!(textElement instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FieldElementBox && textElement.fieldType === 1 &&\n            textElement.fieldBegin.formFieldData instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextFormField));\n        this.documentHelper.layout.layoutBodyWidgetCollection(textElement.paragraph.index, textElement.paragraph.bodyWidget, textElement.paragraph, true);\n        this.selection.isFormatUpdated = true;\n        this.reLayout(this.selection, false);\n        this.selection.isFormatUpdated = false;\n    };\n    Editor.prototype.constructCommentInitial = function (authorName) {\n        var splittedName = authorName.split(' ');\n        var initials = '';\n        for (var i = 0; i < splittedName.length; i++) {\n            if (splittedName[i].length > 0 && splittedName[i] !== '') {\n                initials += splittedName[i][0];\n            }\n        }\n        return initials;\n    };\n    /**\n     * Inserts the footnote at the current selection.\n     *\n     * @returns {void}\n     */\n    Editor.prototype.insertFootnote = function () {\n        if (this.selection.isinFootnote || this.selection.isinEndnote || this.selection.isPlainContentControl()) {\n            return;\n        }\n        this.isFootNoteInsert = true;\n        this.isFootNote = true;\n        var footnote = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox();\n        footnote.characterFormat.baselineAlignment = 'Superscript';\n        footnote.footnoteType = 'Footnote';\n        footnote.text = 's';\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        var text = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteEndnoteMarkerElementBox();\n        paragraph.paragraphFormat.afterSpacing = 0;\n        text.characterFormat.baselineAlignment = 'Superscript';\n        text.line = lineWidget;\n        text.text = '?';\n        lineWidget.children.push(text);\n        var text1 = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        text1.text = ' ';\n        text1.line = lineWidget;\n        lineWidget.children.push(text1);\n        paragraph.childWidgets.push(lineWidget);\n        footnote.bodyWidget.childWidgets.push(paragraph);\n        if (!this.selection.isEmpty) {\n            this.selection.handleRightKey();\n        }\n        this.initInsertInline(footnote);\n        // this.documentHelper.layout.isLayoutWhole = true;\n        // this.layoutWholeDocument();\n        // this.documentHelper.layout.isLayoutWhole = false;\n        var footPara;\n        if (footnote.paragraph.bodyWidget.page.footnoteWidget) {\n            for (var i = 0; i < footnote.paragraph.bodyWidget.page.footnoteWidget.bodyWidgets.length; i++) {\n                if ((footnote.paragraph.bodyWidget.page.footnoteWidget.bodyWidgets[i]).footNoteReference === footnote) {\n                    footPara = footnote.paragraph.bodyWidget.page.footnoteWidget.bodyWidgets[i].childWidgets[0];\n                }\n            }\n        }\n        this.selection.start.setPositionForLineWidget(footPara.childWidgets[0], text1.line.getOffset(text1, footnote.text.length));\n        this.selection.end.setPositionInternal(this.selection.start);\n        // this.selection.fireSelectionChanged(true);\n        this.updateFootNoteIndex();\n        this.reLayout(this.selection, false);\n        this.documentHelper.layout.isLayoutWhole = true;\n        this.isSkipOperationsBuild = true;\n        this.layoutWholeDocument();\n        this.isSkipOperationsBuild = false;\n        this.documentHelper.layout.isLayoutWhole = false;\n        this.separator('footnote');\n        this.continuationSeparator('footnote');\n        this.isFootNote = false;\n        this.isFootNoteInsert = false;\n    };\n    Editor.prototype.updateFootnoteCollection = function (footnote) {\n        if (this.documentHelper.footnoteCollection.indexOf(footnote) === -1) {\n            var isInserted = false;\n            if (this.documentHelper.footnoteCollection.length > 0) {\n                var currentStart = this.selection.getElementPosition(footnote).startPosition;\n                for (var i = 0; i < this.documentHelper.footnoteCollection.length; i++) {\n                    var paraIndex = this.selection.getElementPosition(this.documentHelper.footnoteCollection[i]).startPosition;\n                    if (currentStart.isExistBefore(paraIndex)) {\n                        isInserted = true;\n                        this.documentHelper.footnoteCollection.splice(i, 0, footnote);\n                        break;\n                    }\n                }\n            }\n            if (!isInserted) {\n                this.documentHelper.footnoteCollection.push(footnote);\n            }\n            // this.viewer.updateScrollBars();\n        }\n    };\n    // Footnote implementation ends\n    /**\n     * Inserts the endnote at the current selection\n     *\n     * @returns {void}\n     */\n    Editor.prototype.insertEndnote = function () {\n        if (this.selection.isinFootnote || this.selection.isinEndnote || this.selection.isPlainContentControl()) {\n            return;\n        }\n        this.documentHelper.layout.isEndnoteContentChanged = true;\n        var endnote = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteElementBox();\n        endnote.characterFormat.baselineAlignment = 'Superscript';\n        endnote.footnoteType = 'Endnote';\n        endnote.text = 's';\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        var footText = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteEndnoteMarkerElementBox();\n        paragraph.paragraphFormat.afterSpacing = 0;\n        footText.characterFormat.baselineAlignment = 'Superscript';\n        footText.line = lineWidget;\n        footText.text = '?';\n        lineWidget.children.push(footText);\n        var followText = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        followText.text = ' ';\n        followText.line = lineWidget;\n        lineWidget.children.push(followText);\n        paragraph.childWidgets.push(lineWidget);\n        endnote.bodyWidget.childWidgets.push(paragraph);\n        if (!this.selection.isEmpty) {\n            this.selection.handleRightKey();\n        }\n        this.initInsertInline(endnote);\n        // this.documentHelper.layout.isLayoutWhole = true;\n        // this.layoutWholeDocument();\n        // this.documentHelper.layout.isLayoutWhole = false;\n        var lastpage = this.documentHelper.pages.length;\n        var bodyWidget = this.documentHelper.pages[lastpage - 1].bodyWidgets[0];\n        var footPara;\n        if (bodyWidget.page.endnoteWidget) {\n            for (var i = 0; i < bodyWidget.page.endnoteWidget.bodyWidgets.length; i++) {\n                if ((bodyWidget.page.endnoteWidget.bodyWidgets[i]).footNoteReference === endnote) {\n                    footPara = bodyWidget.page.endnoteWidget.bodyWidgets[i].childWidgets[0];\n                }\n            }\n        }\n        this.selection.start.setPositionForLineWidget(footPara.childWidgets[0], footText.line.getOffset(followText, endnote.text.length));\n        this.selection.end.setPositionInternal(this.selection.start);\n        this.updateEndNoteIndex();\n        this.reLayout(this.selection, false);\n        this.documentHelper.layout.isLayoutWhole = true;\n        this.isSkipOperationsBuild = this.owner.enableCollaborativeEditing;\n        this.layoutWholeDocument();\n        this.isSkipOperationsBuild = false;\n        this.documentHelper.layout.isLayoutWhole = false;\n        this.owner.documentHelper.blockToShift = undefined;\n        this.separator('endnote');\n        this.continuationSeparator('endnote');\n        this.documentHelper.layout.isEndnoteContentChanged = false;\n    };\n    Editor.prototype.updateEndnoteCollection = function (endnote) {\n        if (this.documentHelper.endnoteCollection.indexOf(endnote) === -1) {\n            var isInserted = false;\n            if (this.documentHelper.endnoteCollection.length > 0) {\n                var currentStart = this.selection.getElementPosition(endnote).startPosition;\n                for (var i = 0; i < this.documentHelper.endnoteCollection.length; i++) {\n                    var paraIndex = this.selection.getElementPosition(this.documentHelper.endnoteCollection[i]).startPosition;\n                    if (currentStart.isExistBefore(paraIndex)) {\n                        isInserted = true;\n                        this.documentHelper.endnoteCollection.splice(i, 0, endnote);\n                        break;\n                    }\n                }\n            }\n            if (!isInserted) {\n                this.documentHelper.endnoteCollection.push(endnote);\n            }\n            var lastpage = this.documentHelper.pages.length;\n            if (this.documentHelper.endnoteCollection.length > 0) {\n                var positionchanged = false;\n                // this.documentHelper.layout.isFootnoteContentChanged = true;\n                var foot = void 0;\n                var endnoteWidget = void 0;\n                var footIndex = this.documentHelper.endnoteCollection.indexOf(endnote);\n                var insertIndex = 1;\n                var height = 0;\n                var isCreated = void 0;\n                var bodyWidget = this.documentHelper.pages[lastpage - 1].bodyWidgets[0];\n                if (bodyWidget.page.endnoteWidget) {\n                    for (var j = 0; j < bodyWidget.page.endnoteWidget.bodyWidgets.length; j++) {\n                        var currentIndex = this.documentHelper.endnoteCollection.indexOf((bodyWidget.page.endnoteWidget.bodyWidgets[j]).footNoteReference);\n                        if (currentIndex > footIndex) {\n                            if (currentIndex - footIndex === 1) {\n                                insertIndex = j;\n                                positionchanged = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n                // endnote.isLayout = true;\n                foot = endnote; //this.documentHelper.endnoteCollection[i];\n                if (bodyWidget.page.endnoteWidget instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget && bodyWidget.page.endnoteWidget.footNoteType === 'Endnote') {\n                    endnoteWidget = bodyWidget.page.endnoteWidget;\n                }\n                else {\n                    isCreated = true;\n                    endnoteWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootNoteWidget();\n                    endnoteWidget.footNoteType = 'Endnote';\n                    endnoteWidget.page = bodyWidget.page;\n                    var newParagraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n                    newParagraph.characterFormat = new _format_character_format__WEBPACK_IMPORTED_MODULE_2__.WCharacterFormat();\n                    newParagraph.paragraphFormat = new _index__WEBPACK_IMPORTED_MODULE_5__.WParagraphFormat();\n                    newParagraph.index = 0;\n                    var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(newParagraph);\n                    newParagraph.childWidgets.push(lineWidget);\n                    //endnoteWidget.childWidgets.push(newParagraph);\n                    this.viewer.cutFromTop(this.viewer.clientActiveArea.y + 18);\n                }\n                var body = foot.bodyWidget;\n                for (var j = 0; j < foot.bodyWidget.childWidgets.length; j++) {\n                    var block = foot.bodyWidget.childWidgets[j];\n                    //body.childWidgets.push(block);\n                    if (this.documentHelper.layout.isLayoutWhole) {\n                        block.containerWidget = undefined;\n                    }\n                    else {\n                        block.containerWidget = body;\n                        body.page = bodyWidget.page;\n                        body.sectionFormat = endnoteWidget.sectionFormat;\n                        block.containerWidget.containerWidget = endnoteWidget;\n                    }\n                    // endnoteWidget.bodyWidgets[j].childWidgets.push(block);\n                    if (positionchanged) {\n                        endnoteWidget.bodyWidgets.splice(insertIndex, 0, body);\n                    }\n                    else {\n                        endnoteWidget.bodyWidgets.push(body);\n                    }\n                }\n                insertIndex++;\n                if (isCreated) {\n                    bodyWidget.page.endnoteWidget = endnoteWidget;\n                }\n                // endNote.containerWidget = bodyWidget;\n                endnoteWidget.height += height;\n                //         }\n                // this.documentHelper.layout.layoutfootNote(endnoteWidget);\n                //this.layoutfootNote(endNote);\n            }\n            // this.viewer.updateScrollBars();\n        }\n    };\n    Editor.prototype.updateEndNoteIndex = function () {\n        var endNoteCollec = this.documentHelper.endnoteCollection;\n        for (var i = 0; i < endNoteCollec.length; i++) {\n            var text = this.documentHelper.layout.getFootEndNote(endNoteCollec[i].paragraph.bodyWidget.sectionFormat.endnoteNumberFormat, i + 1);\n            if (text != '') {\n                endNoteCollec[i].text = text;\n                if (endNoteCollec[i].revisions !== undefined) {\n                    var j = 0;\n                    while (j < endNoteCollec[i].revisions.length) {\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(endNoteCollec[i].revisions[j]);\n                        j++;\n                    }\n                }\n                var marker = endNoteCollec[i].bodyWidget.childWidgets[0].childWidgets[0].children[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(marker)) {\n                    if (marker instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteEndnoteMarkerElementBox || _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.checkTextFormat(marker.text)) {\n                        marker.text = text;\n                        marker.width = endNoteCollec[i].bodyWidget.footNoteReference.width;\n                    }\n                    if (marker.revisions != undefined) {\n                        var j = 0;\n                        while (j < marker.revisions.length) {\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(marker.revisions[j]);\n                            j++;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.separator = function (type) {\n        //let block = new page_1.block;\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        var text = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        text.characterFormat.fontColor = '#00000000';\n        text.line = lineWidget;\n        text.text = String.fromCharCode(3);\n        lineWidget.children.push(text);\n        paragraph.childWidgets.push(lineWidget);\n        if (type === 'footnote' && this.documentHelper.footnotes.separator.length < 1) {\n            this.documentHelper.footnotes.separator.push(paragraph);\n        }\n        else if (type === 'endnote' && this.documentHelper.endnotes.separator.length < 1) {\n            this.documentHelper.endnotes.separator.push(paragraph);\n        }\n    };\n    Editor.prototype.continuationSeparator = function (type) {\n        //var block = new page_1.block;\n        var paragraph = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.ParagraphWidget();\n        var lineWidget = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.LineWidget(paragraph);\n        var text = new _viewer_page__WEBPACK_IMPORTED_MODULE_1__.TextElementBox();\n        text.characterFormat.fontColor = '#00000000';\n        text.line = lineWidget;\n        text.text = String.fromCharCode(4);\n        lineWidget.children.push(text);\n        paragraph.childWidgets.push(lineWidget);\n        if (type === 'footnote' && this.documentHelper.footnotes.continuationSeparator.length < 1) {\n            this.documentHelper.footnotes.continuationSeparator.push(paragraph);\n        }\n        else if (type === 'endnote' && this.documentHelper.endnotes.continuationSeparator.length < 1) {\n            this.documentHelper.endnotes.continuationSeparator.push(paragraph);\n        }\n    };\n    Editor.prototype.updateFootNoteIndex = function () {\n        var footNoteCollec = this.documentHelper.footnoteCollection;\n        for (var i = 0; i < footNoteCollec.length; i++) {\n            var text = this.documentHelper.layout.getFootEndNote(footNoteCollec[i].paragraph.bodyWidget.sectionFormat.footNoteNumberFormat, i + 1);\n            if (text != '') {\n                footNoteCollec[i].text = text;\n                if (footNoteCollec[i].revisions !== undefined) {\n                    var j = 0;\n                    while (j < footNoteCollec[i].revisions.length) {\n                        this.owner.trackChangesPane.updateCurrentTrackChanges(footNoteCollec[i].revisions[j]);\n                        j++;\n                    }\n                }\n                var marker = footNoteCollec[i].bodyWidget.childWidgets[0].childWidgets[0].children[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(marker) && marker instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_1__.FootnoteEndnoteMarkerElementBox) {\n                    marker.text = text;\n                    marker.width = footNoteCollec[i].bodyWidget.footNoteReference.width;\n                    if (marker.revisions != undefined) {\n                        var j = 0;\n                        while (j < marker.revisions.length) {\n                            this.owner.trackChangesPane.updateCurrentTrackChanges(marker.revisions[j]);\n                            j++;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Editor.prototype.setCharFormatForCollaborativeEditing = function (insertFormat) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(this.editorHistory.currentBaseHistoryInfo) && this.owner.enableCollaborativeEditing) {\n            var characterFormat = {};\n            _editor_helper__WEBPACK_IMPORTED_MODULE_3__.HelperMethods.writeCharacterFormat(characterFormat, true, insertFormat, undefined, true);\n            this.editorHistory.currentBaseHistoryInfo.type = \"CharacterFormat\";\n            this.editorHistory.currentBaseHistoryInfo.format = JSON.stringify(characterFormat);\n        }\n    };\n    /**\n    * @private\n    */\n    Editor.prototype.clear = function () {\n        if (this.pageRefFields) {\n            this.pageRefFields = {};\n        }\n    };\n    return Editor;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor.js?");

/***/ })

}]);