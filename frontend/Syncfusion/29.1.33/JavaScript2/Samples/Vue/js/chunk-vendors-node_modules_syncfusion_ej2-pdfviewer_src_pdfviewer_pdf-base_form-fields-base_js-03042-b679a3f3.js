"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_pdf-base_form-fields-base_js-03042-b679a3f3"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/form-fields-base.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/form-fields-base.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FormFieldsBase: () => (/* binding */ FormFieldsBase),\n/* harmony export */   PdfRenderedFields: () => (/* binding */ PdfRenderedFields)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-pdf */ \"./node_modules/@syncfusion/ej2-pdf/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _pdf_base_fontData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pdf-base/fontData */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/fontData.js\");\n/* harmony import */ var _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\n\n\n\n\n\n/**\n * FormFieldsBase\n *\n * @hidden\n */\nvar FormFieldsBase = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - The PdfViewer.\n     * @param {PdfViewerBase} pdfViewerBase - The PdfViewerBase.\n     * @param {boolean} digitalSignatruePresent - The digitalSignatruePresent\n     * @private\n     * @returns {void}\n     */\n    function FormFieldsBase(pdfViewer, pdfViewerBase, digitalSignatruePresent) {\n        /**\n         * @private\n         */\n        this.PdfRenderedFormFields = [];\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n        this.formFieldLoadedDocument = this.pdfViewer.pdfRendererModule.loadedDocument;\n        this.mIsDigitalSignaturePresent = digitalSignatruePresent;\n    }\n    /**\n     * @private\n     * @param {any} textSignature - This is textSignature\n     * @param {any} loadedDocument - loadedDocument\n     * @param {boolean} isAnnotationFlattern - isAnnotationFlattern\n     * @returns {void}\n     */\n    FormFieldsBase.prototype.drawFreeTextAnnotations = function (textSignature, loadedDocument, isAnnotationFlattern) {\n        var stampObjects = textSignature.data;\n        var textData = stampObjects.replace(/\"/g, '');\n        var boundsObject = JSON.parse(textSignature.bounds);\n        var page = loadedDocument.getPage(textSignature.pageIndex);\n        if (stampObjects !== '') {\n            var left = this.convertPixelToPoint(boundsObject.left);\n            var top_1 = this.convertPixelToPoint(boundsObject.top);\n            var width = this.convertPixelToPoint(boundsObject.width);\n            var height = this.convertPixelToPoint(boundsObject.height);\n            var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFreeTextAnnotation(left, top_1, width, height);\n            annotation._dictionary.set('NM', textSignature.signatureName.toString());\n            var fontSize = textSignature.fontSize;\n            annotation.border.width = 0;\n            var fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica;\n            var fontName = textSignature.fontFamily.toString();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName)) {\n                var family = fontName.toString();\n                if (family.includes('Times New Roman')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.timesRoman;\n                }\n                else if (family.includes('Courier')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.courier;\n                }\n                else if (family.includes('Symbol')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.symbol;\n                }\n                else if (family.includes('ZapfDingbats')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats;\n                }\n            }\n            fontSize = Math.floor(this.convertPixelToPoint(fontSize));\n            var fontStyle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.regular;\n            annotation.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(fontFamilyEnum, fontSize, fontStyle);\n            annotation.text = textData;\n            annotation.borderColor = [0, 0, 0];\n            annotation.textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.center;\n            annotation._annotFlags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            if (isAnnotationFlattern) {\n                var rotateAngle = this.getRotateAngle(page.rotation);\n                annotation.rotationAngle = Math.abs(rotateAngle);\n            }\n            annotation.setValues('AnnotationType', 'Signature');\n            if (isAnnotationFlattern) {\n                annotation.flatten = true;\n            }\n            annotation.setAppearance(true);\n            page.annotations.add(annotation);\n        }\n    };\n    FormFieldsBase.prototype.getRotateAngle = function (angleString) {\n        var angle = 0;\n        switch (angleString) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle0:\n                angle = 0;\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle180:\n                angle = 2;\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle270:\n                angle = 3;\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle90:\n                angle = 1;\n                break;\n        }\n        return angle;\n    };\n    /**\n     * @private\n     * @param {any} signatureImage - signatureImage\n     * @param {any} loadedDocument - loadedDocument\n     * @param {boolean} isAnnotationFlattern - isAnnotationFlattern\n     * @returns {void}\n     */\n    FormFieldsBase.prototype.drawImage = function (signatureImage, loadedDocument, isAnnotationFlattern) {\n        var _a;\n        var stampObjects = signatureImage.data;\n        var boundsObject = JSON.parse(signatureImage.bounds);\n        var page = loadedDocument.getPage(signatureImage.pageIndex);\n        if (stampObjects !== '') {\n            var imageUrl = (stampObjects.toString()).split(',')[1];\n            var left = this.convertPixelToPoint(boundsObject.left);\n            var top_2 = this.convertPixelToPoint(boundsObject.top);\n            var width = this.convertPixelToPoint(boundsObject.width);\n            var height = this.convertPixelToPoint(boundsObject.height);\n            if (page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle90 || page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle270) {\n                _a = [height, width], width = _a[0], height = _a[1];\n            }\n            var rubberStampAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRubberStampAnnotation(left, top_2, width, height);\n            var bitmap = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfBitmap(imageUrl);\n            var graphics = page.graphics;\n            var appearance = rubberStampAnnotation.appearance.normal;\n            rubberStampAnnotation._dictionary.set('NM', signatureImage.signatureName.toString());\n            var rotationAngle = this.getRotateAngle(page.rotation);\n            rubberStampAnnotation.rotationAngle = Math.abs(rotationAngle);\n            if (isAnnotationFlattern) {\n                rubberStampAnnotation.flatten = true;\n            }\n            if (!isAnnotationFlattern) {\n                var state = graphics.save();\n                appearance.graphics.drawImage(bitmap, 0, 0, width, height);\n                appearance.graphics.restore(state);\n            }\n            else {\n                appearance.graphics.drawImage(bitmap, 0, 0, width, height);\n            }\n            page.annotations.add(rubberStampAnnotation);\n        }\n    };\n    /**\n     * @private\n     * @param {any} jsonObject - jsonObject\n     * @returns {void}\n     */\n    FormFieldsBase.prototype.saveFormFieldsDesignerData = function (jsonObject) {\n        if (Object.prototype.hasOwnProperty.call(jsonObject, 'formDesigner')) {\n            var formFields = jsonObject['formDesigner'];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFields)) {\n                var data = JSON.parse(formFields);\n                var myList = [];\n                var formFieldsPageList = Object.prototype.hasOwnProperty.call(jsonObject, 'formFieldsPageList') ? JSON.parse(jsonObject['formFieldsPageList']) : myList;\n                //Removing form fields from the page.\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldLoadedDocument.form)) {\n                    var initialCount = this.formFieldLoadedDocument.form._fields.length;\n                    //Get the loaded form.\n                    var loadedForm = this.formFieldLoadedDocument.form;\n                    for (var k = initialCount - 1; k >= 0; k--) {\n                        var formFieldPage = loadedForm.fieldAt(k);\n                        var signField = null;\n                        if (formFieldPage instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField) {\n                            signField = formFieldPage;\n                        }\n                        var signed = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signField) ? signField.isSigned : true;\n                        //Removing the formfields from a page\n                        // if (formFieldsPageList.includes(pageNumber + 1) && (signField === null || !signed)) {\n                        // formFieldsPageList is did not removed  when delete non rendered pages form fields.\n                        if (signField == null || !signed) {\n                            loadedForm.removeField(loadedForm.fieldAt(k));\n                        }\n                    }\n                }\n                for (var i = 0; i < data.length; i++) {\n                    this.addFormFieldsToDocument(data[parseInt(i.toString(), 10)].FormField);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldLoadedDocument.form)) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.defaultAppearanceFields)) {\n                    for (var i = 0; i < this.formFieldLoadedDocument.form.count; i++) {\n                        var field = this.formFieldLoadedDocument.form.fieldAt(i);\n                        if (this.defaultAppearanceFields.indexOf(field.name) === -1) {\n                            field.setAppearance(true);\n                        }\n                    }\n                    this.defaultAppearanceFields = null;\n                }\n                else {\n                    this.formFieldLoadedDocument.form.setDefaultAppearance(false);\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.setFont = function (field, currentField) {\n        var pdfFontStyle = this.getFontStyle(field);\n        currentField._dictionary.set('FontStyle', pdfFontStyle);\n        // eslint-disable-next-line\n        var hasUnicode = /[^\\u0000-\\u007F]/.test(currentField.text);\n        if (hasUnicode) {\n            currentField.font = this.getTrueFont(field.fontSize, pdfFontStyle);\n        }\n        else {\n            currentField.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(this.getFontFamily(field.FontFamily), this.convertPixelToPoint(field.fontSize), pdfFontStyle);\n        }\n    };\n    /**\n     * @private\n     * @param {any} jsonObject - jsonObject\n     * @returns {void}\n     */\n    FormFieldsBase.prototype.saveFormFieldsData = function (jsonObject) {\n        if (Object.prototype.hasOwnProperty.call(jsonObject, 'fieldsData')) {\n            var formFields = jsonObject['fieldsData'];\n            var data = JSON.parse(formFields);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) && Object.keys(data).length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldLoadedDocument.form)) {\n                if (this.formFieldLoadedDocument.form._fields.length > 0) {\n                    this.formFieldLoadedDocument.form.setDefaultAppearance(false);\n                }\n                for (var i = 0; i < this.formFieldLoadedDocument.form._fields.length; i++) {\n                    var currentField = this.formFieldLoadedDocument.form.fieldAt(i);\n                    var currentFieldName = '';\n                    var actualFieldName = '';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentField.name)) {\n                        currentFieldName = currentField.name.replace(/[^0-9a-zA-Z]+/g, '').replace(/\\s+/g, '');\n                        actualFieldName = currentField.name;\n                    }\n                    if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField) {\n                        if (!currentField.password) {\n                            if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                                if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                    currentFieldName = actualFieldName;\n                                }\n                                var field = data[\"\" + currentFieldName];\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) && Object.prototype.hasOwnProperty.call(field, 'isReadOnly')) {\n                                    currentField.text = field['fieldValue'];\n                                    currentField.readOnly = field['isReadOnly'] === 'true' ? true : false;\n                                }\n                                this.setFont(field, currentField);\n                            }\n                        }\n                        else {\n                            if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                                if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                    currentFieldName = actualFieldName;\n                                }\n                                var field = data[\"\" + currentFieldName];\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) && Object.prototype.hasOwnProperty.call(field, 'isReadOnly')) {\n                                    currentField.text = field['fieldValue'];\n                                    currentField.readOnly = field['isReadOnly'] === 'true' ? true : false;\n                                }\n                                this.setFont(field, currentField);\n                            }\n                        }\n                    }\n                    else if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfComboBoxField) {\n                        if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                currentFieldName = actualFieldName;\n                            }\n                            var field = data[\"\" + currentFieldName];\n                            var count = currentField.itemsCount;\n                            var fieldName = '';\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field)) {\n                                if (Object.prototype.hasOwnProperty.call(field, 'isReadOnly')) {\n                                    currentField.readOnly = field['isReadOnly'] === 'true' ? true : false;\n                                }\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field['fieldValue'])) {\n                                    fieldName = field['fieldValue'];\n                                }\n                            }\n                            var isExists = false;\n                            for (var j = 0; j < count; j++) {\n                                var optionArray = void 0;\n                                var text = void 0;\n                                if (currentField._dictionary.has('Opt')) {\n                                    optionArray = currentField._dictionary.get('Opt');\n                                    text = optionArray[parseInt(j.toString(), 10)];\n                                }\n                                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentField.itemAt(j))) {\n                                    text = currentField.itemAt(j).text;\n                                }\n                                if (text === fieldName || (text && text.length > 0 && text[1] === fieldName)) {\n                                    currentField.selectedIndex = j;\n                                    isExists = true;\n                                }\n                            }\n                            if (currentField.editable && !isExists) {\n                                currentField.selectedValue = fieldName;\n                            }\n                            this.setFont(field, currentField);\n                        }\n                    }\n                    else if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField) {\n                        if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                currentFieldName = actualFieldName;\n                            }\n                            var field = data[\"\" + currentFieldName];\n                            var fields = field['isSelected'];\n                            var fieldValueString = fields.toString();\n                            var fieldValue = field['fieldValue'];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldValue)) {\n                                currentField._dictionary.set('ExportValue', fieldValue);\n                            }\n                            if (fieldValueString.toLowerCase() === 'true' || fieldValueString.toLowerCase() === 'false') {\n                                currentField.checked = fields;\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) && Object.prototype.hasOwnProperty.call(field, 'isReadOnly')) {\n                                    currentField.readOnly = field.readonly;\n                                }\n                                if (fieldValueString.toLowerCase() === 'false') {\n                                    var checkBoxField = currentField;\n                                    for (var k = 0; k < checkBoxField.itemsCount; k++) {\n                                        checkBoxField.itemAt(k).checked = false;\n                                    }\n                                    currentField.checked = false;\n                                }\n                            }\n                            else {\n                                var integerValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldValueString) ? -1 : parseInt(fieldValueString, 10);\n                                var checkBoxField = currentField;\n                                if (checkBoxField.itemsCount > 0) {\n                                    if (integerValue === -1) {\n                                        for (var n = 0; n < checkBoxField.itemsCount; n++) {\n                                            checkBoxField.itemAt(n).checked = false;\n                                        }\n                                        currentField.checked = false;\n                                    }\n                                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxField.itemAt(integerValue))) {\n                                        checkBoxField.itemAt(integerValue).checked = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfListBoxField) {\n                        if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                currentFieldName = actualFieldName;\n                            }\n                            var table = data[\"\" + currentFieldName];\n                            var count = currentField.itemsCount;\n                            var fieldName = '';\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table)) {\n                                if (Object.prototype.hasOwnProperty.call(table, 'fieldValue') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table['fieldValue'])) {\n                                    fieldName = table['fieldValue'];\n                                }\n                                if (Object.prototype.hasOwnProperty.call(table, 'isReadOnly')) {\n                                    currentField.readOnly = table['isReadOnly'] === 'true' ? true : false;\n                                }\n                            }\n                            fieldName = JSON.parse(fieldName)[0].replace(/[^0-9a-zA-Z]+/g, '');\n                            var selectedIndexes = [];\n                            for (var k = 0; k < count; k++) {\n                                var text = currentField.itemAt(k).text;\n                                if (text === fieldName) {\n                                    selectedIndexes.push(k);\n                                }\n                            }\n                            currentField.selectedIndex = selectedIndexes;\n                            this.setFont(table, currentField);\n                        }\n                    }\n                    else if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListField) {\n                        if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                currentFieldName = actualFieldName;\n                            }\n                            var field = data[\"\" + currentFieldName];\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field) && Object.prototype.hasOwnProperty.call(field, 'isReadOnly')) {\n                                var selectedValue = field['fieldValue'];\n                                if (selectedValue) {\n                                    for (var i_1 = 0; i_1 < currentField.itemsCount; i_1++) {\n                                        var item = currentField.itemAt(i_1);\n                                        if (item && (item.value === selectedValue || item._optionValue === selectedValue)) {\n                                            currentField.selectedIndex = i_1;\n                                            break;\n                                        }\n                                    }\n                                }\n                                currentField.readOnly = field['isReadOnly'] === 'true' ? true : false;\n                            }\n                        }\n                    }\n                    else if (currentField instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField) {\n                        if ((Object.prototype.hasOwnProperty.call(data, currentFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + currentFieldName])) || (Object.prototype.hasOwnProperty.call(data, actualFieldName) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[\"\" + actualFieldName]))) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName)) {\n                                currentFieldName = actualFieldName;\n                            }\n                            var signatureFields = currentField;\n                            if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'fontName')) {\n                                this.drawFieldFreeTextAnnotations(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds'], data[currentFieldName + 'fontName'], data[currentFieldName + 'fontSize']);\n                            }\n                            else if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'ImageData')) {\n                                this.drawFieldImage(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds']);\n                            }\n                            else if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'bounds')) {\n                                this.drawFieldPath(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds']);\n                            }\n                            var signatureFieldListCount = signatureFields.itemsCount;\n                            if (signatureFieldListCount > 0) {\n                                for (var k = 0; k < signatureFieldListCount; k++) {\n                                    if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'fontName' + '_' + k)) {\n                                        this.drawFieldFreeTextAnnotations(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds' + '_' + k], data[currentFieldName + 'fontName' + '_' + k], data[currentFieldName + 'fontSize' + '_' + k]);\n                                    }\n                                    else if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'ImageData' + '_' + k)) {\n                                        this.drawFieldImage(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds' + '_' + k]);\n                                    }\n                                    else if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'bounds' + '_' + k)) {\n                                        this.drawFieldPath(data[\"\" + currentFieldName], signatureFields, currentFieldName, data[currentFieldName + 'bounds' + '_' + k]);\n                                    }\n                                }\n                            }\n                        }\n                        if (Object.prototype.hasOwnProperty.call(data, currentFieldName + 'isReadOnly') || Object.prototype.hasOwnProperty.call(data, actualFieldName + 'isReadOnly')) {\n                            if (Object.prototype.hasOwnProperty.call(data, actualFieldName + 'isReadOnly')) {\n                                currentFieldName = actualFieldName;\n                            }\n                            currentField.readOnly = data['isReadOnly'] === 'true' ? true : false;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.addFormFieldsToDocument = function (formFieldAttributes) {\n        var loadedPage = this.formFieldLoadedDocument.getPage(formFieldAttributes.pageNumber - 1);\n        var field;\n        switch (formFieldAttributes.formFieldAnnotationType) {\n            case 'Textbox':\n            case 'PasswordField':\n                //Create a password and text box field for name\n                field = this.saveTextBoxField(loadedPage, formFieldAttributes);\n                break;\n            case 'Checkbox':\n                // Create Check Box field.\n                field = this.SaveCheckBoxField(loadedPage, formFieldAttributes);\n                break;\n            case 'RadioButton':\n                field = this.saveRadioButtonField(formFieldAttributes);\n                break;\n            case 'DropdownList':\n                // Create Drop Down field.\n                field = this.saveDropDownField(loadedPage, formFieldAttributes);\n                break;\n            case 'ListBox':\n                field = this.saveListBoxField(loadedPage, formFieldAttributes);\n                break;\n            case 'SignatureField':\n            case 'InitialField':\n                //Create PDF Signature and Initial field.\n                field = this.saveSignatureField(loadedPage, formFieldAttributes);\n                break;\n        }\n        if (field) {\n            this.formFieldLoadedDocument.form.add(field);\n        }\n    };\n    FormFieldsBase.prototype.setFontFromKeys = function (text, field, textFont, fontSize, hasUnicode, fontStyle) {\n        var font = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.tryGetFontFromKeys(textFont, text.toString(), fontSize, fontStyle);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(font)) {\n            field.font = font;\n            field.setAppearance(true);\n        }\n        else {\n            if (hasUnicode) {\n                var trueTypeFont = this.getTrueFont(fontSize, fontStyle);\n                var isGlyphPresent = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.isSupportedFont(text, font);\n                if (isGlyphPresent) {\n                    field.font = trueTypeFont;\n                }\n                else {\n                    this.disableFieldAppearance(field);\n                }\n            }\n            else {\n                this.disableFieldAppearance(field);\n            }\n        }\n    };\n    FormFieldsBase.prototype.setFontAppearance = function (text, fontFamily, fontSize, field, textFont, hasUnicode, fontStyle) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFont) && Object.keys(textFont).length > 0) {\n            var fontKey = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.getFontKey(textFont, fontFamily.toLowerCase());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontKey)) {\n                var fontStream = textFont[\"\" + fontKey];\n                fontStream = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.processFontStream(fontStream);\n                var font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTrueTypeFont(fontStream, this.convertPixelToPoint(fontSize), fontStyle);\n                var glyphPresent = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.isSupportedFont(text, font);\n                field.setAppearance(glyphPresent);\n                if (glyphPresent) {\n                    field.font = font;\n                }\n                else {\n                    this.setFontFromKeys(text, field, textFont, fontSize, hasUnicode, fontStyle);\n                }\n            }\n            else {\n                this.setFontFromKeys(text, field, textFont, fontSize, hasUnicode, fontStyle);\n            }\n        }\n        else {\n            try {\n                field.font.measureString(text.toString());\n            }\n            catch (e) {\n                if (hasUnicode) {\n                    var trueTypeFont = this.getTrueFont(fontSize, fontStyle);\n                    var isGlyphPresent = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.isSupportedFont(text, trueTypeFont);\n                    if (isGlyphPresent) {\n                        field.font = trueTypeFont;\n                    }\n                    else {\n                        this.disableFieldAppearance(field);\n                    }\n                }\n                else {\n                    this.disableFieldAppearance(field);\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.disableFieldAppearance = function (field) {\n        field.setAppearance(false);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.defaultAppearanceFields)) {\n            this.defaultAppearanceFields = [];\n        }\n        this.defaultAppearanceFields.push(field.name);\n    };\n    FormFieldsBase.prototype.saveTextBoxField = function (loadedPage, formFieldAttributes) {\n        var textboxName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.name) ? formFieldAttributes.type === 'Password' ? 'passwordTextbox' : 'textbox' : formFieldAttributes.name;\n        var textBounds = this.convertFieldBounds(formFieldAttributes);\n        var rotationAngle = loadedPage.rotation;\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        var fieldBounds = this.getBounds(textBounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, isFieldRotated);\n        var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n        //Create a new text box field\n        var textbox = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField(loadedPage, textboxName, bound);\n        textbox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n            formFieldAttributes.backgroundColor.b];\n        if (formFieldAttributes.backgroundColor.r === 0 && formFieldAttributes.backgroundColor.g === 0 &&\n            formFieldAttributes.backgroundColor.b === 0 && formFieldAttributes.backgroundColor.a === 0) {\n            textbox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                formFieldAttributes.backgroundColor.b, formFieldAttributes.backgroundColor.a];\n        }\n        textbox.maxLength = formFieldAttributes.maxLength;\n        textbox.insertSpaces = formFieldAttributes.insertSpaces;\n        textbox.readOnly = formFieldAttributes.isReadonly;\n        textbox.required = formFieldAttributes.isRequired;\n        textbox.textAlignment = this.getTextAlignment(formFieldAttributes.textAlign);\n        textbox.visibility = this.getFormFieldsVisibility(formFieldAttributes.visibility);\n        textbox.text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.value) ? '' : formFieldAttributes.value;\n        textbox.toolTip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.tooltip) ? '' : formFieldAttributes.tooltip;\n        textbox.color = [formFieldAttributes.fontColor.r, formFieldAttributes.fontColor.g, formFieldAttributes.fontColor.b];\n        textbox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g, formFieldAttributes.borderColor.b];\n        // eslint-disable-next-line\n        if (formFieldAttributes.borderColor.r == 0 && formFieldAttributes.borderColor.g == 0 &&\n            // eslint-disable-next-line\n            formFieldAttributes.borderColor.b == 0 && formFieldAttributes.borderColor.a == 0) {\n            textbox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n                formFieldAttributes.borderColor.b, formFieldAttributes.borderColor.a];\n        }\n        textbox.border.width = formFieldAttributes.thickness;\n        textbox.multiLine = formFieldAttributes.Multiline;\n        var pdfFontStyle = this.getFontStyle(formFieldAttributes);\n        textbox._dictionary.set('FontStyle', pdfFontStyle);\n        // eslint-disable-next-line\n        var hasUnicode = /[^\\u0000-\\u007F]/.test(textbox.text);\n        var fontFamily = formFieldAttributes.FontFamily ? formFieldAttributes.FontFamily : formFieldAttributes.fontFamily;\n        textbox.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(this.getFontFamily(fontFamily), this.convertPixelToPoint(formFieldAttributes.fontSize), pdfFontStyle);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textbox.text.toString())) {\n            var textFont = this.pdfViewer.pdfRenderer.FallbackFontCollection;\n            this.setFontAppearance(textbox.text.toString(), formFieldAttributes.fontFamily, formFieldAttributes.fontSize, textbox, textFont, hasUnicode, pdfFontStyle);\n        }\n        if (formFieldAttributes.formFieldAnnotationType === 'PasswordField') {\n            textbox.password = true;\n        }\n        if (!isFieldRotated) {\n            textbox.rotate = this.getFormfieldRotation(loadedPage.rotation);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            textbox._dictionary.set('CustomData', customData);\n        }\n        return textbox;\n    };\n    FormFieldsBase.prototype.saveDropDownField = function (loadedPage, formFieldAttributes) {\n        var dropdownListName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.name) ? 'dropdownList' : formFieldAttributes.name;\n        var dropDownListbounds = this.convertFieldBounds(formFieldAttributes);\n        var rotationAngle = loadedPage.rotation;\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        var fieldBounds = this.getBounds(dropDownListbounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, isFieldRotated);\n        var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n        var comboBox = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfComboBoxField(loadedPage, dropdownListName, bound);\n        var hasUnicode = false;\n        for (var i = 0; i < formFieldAttributes.option.length; i++) {\n            var item = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfListFieldItem(formFieldAttributes.option[parseInt(i.toString(), 10)].itemName, formFieldAttributes.option[parseInt(i.toString(), 10)].itemValue);\n            comboBox.addItem(item);\n            // eslint-disable-next-line\n            var flag = /[^\\u0000-\\u007F]/.test(formFieldAttributes.option[parseInt(i.toString(), 10)].itemName);\n            if (flag) {\n                hasUnicode = true;\n            }\n        }\n        comboBox.textAlignment = this.getTextAlignment(formFieldAttributes.textAlign);\n        var pdfFontStyle = this.getFontStyle(formFieldAttributes);\n        comboBox._dictionary.set('FontStyle', pdfFontStyle);\n        var fontFamily = formFieldAttributes.FontFamily ? formFieldAttributes.FontFamily : formFieldAttributes.fontFamily;\n        comboBox.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(this.getFontFamily(fontFamily), this.convertPixelToPoint(formFieldAttributes.fontSize), pdfFontStyle);\n        for (var i = 0; i < formFieldAttributes.option.length; i++) {\n            var comboBoxText = formFieldAttributes.option[parseInt(i.toString(), 10)].itemName.toString();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(comboBoxText)) {\n                var textFont = this.pdfViewer.pdfRenderer.FallbackFontCollection;\n                this.setFontAppearance(comboBoxText, formFieldAttributes.fontFamily, formFieldAttributes.fontSize, comboBox, textFont, hasUnicode, pdfFontStyle);\n                break;\n            }\n        }\n        if (comboBox.itemsCount > 0) {\n            if (formFieldAttributes.selectedIndex.length > 0) {\n                comboBox.selectedIndex = formFieldAttributes.selectedIndex[0];\n            }\n            else {\n                comboBox.selectedIndex = 0;\n            }\n        }\n        comboBox.required = formFieldAttributes.isRequired;\n        comboBox.readOnly = formFieldAttributes.isReadonly;\n        comboBox.visibility = this.getFormFieldsVisibility(formFieldAttributes.visibility);\n        comboBox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n            formFieldAttributes.backgroundColor.b];\n        if (formFieldAttributes.backgroundColor.r === 0 && formFieldAttributes.backgroundColor.g === 0 &&\n            formFieldAttributes.backgroundColor.b === 0 && formFieldAttributes.backgroundColor.a === 0) {\n            comboBox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                formFieldAttributes.backgroundColor.b, formFieldAttributes.backgroundColor.a];\n        }\n        comboBox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g, formFieldAttributes.borderColor.b];\n        // eslint-disable-next-line\n        if (formFieldAttributes.borderColor.r == 0 && formFieldAttributes.borderColor.g == 0 &&\n            // eslint-disable-next-line\n            formFieldAttributes.borderColor.b == 0 && formFieldAttributes.borderColor.a == 0) {\n            comboBox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n                formFieldAttributes.borderColor.b, formFieldAttributes.borderColor.a];\n        }\n        comboBox.border.width = formFieldAttributes.thickness;\n        comboBox.color = [formFieldAttributes.fontColor.r, formFieldAttributes.fontColor.g, formFieldAttributes.fontColor.b];\n        if (!isFieldRotated) {\n            comboBox.rotate = this.getFormfieldRotation(loadedPage.rotation);\n        }\n        comboBox.toolTip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.tooltip) ? '' : formFieldAttributes.tooltip;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            comboBox._dictionary.set('CustomData', customData);\n        }\n        return comboBox;\n    };\n    FormFieldsBase.prototype.SaveCheckBoxField = function (loadedPage, formFieldAttributes) {\n        var checkboxFieldName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.name) && formFieldAttributes.name === '' ? 'checkboxField' : formFieldAttributes.name;\n        var checkBounds = this.convertFieldBounds(formFieldAttributes);\n        var rotationAngle = loadedPage.rotation;\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        var fieldBounds = this.getBounds(checkBounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, isFieldRotated);\n        var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n        //Create a new Check box field\n        var checkBoxField = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField(checkboxFieldName, bound, loadedPage);\n        checkBoxField.readOnly = formFieldAttributes.isReadonly;\n        checkBoxField.required = formFieldAttributes.isRequired;\n        checkBoxField.checked = formFieldAttributes.isChecked;\n        checkBoxField.visibility = this.getFormFieldsVisibility(formFieldAttributes.visibility);\n        checkBoxField._dictionary.set('ExportValue', formFieldAttributes.value);\n        checkBoxField.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n            formFieldAttributes.backgroundColor.b];\n        if (formFieldAttributes.backgroundColor.r === 0 && formFieldAttributes.backgroundColor.g === 0 &&\n            formFieldAttributes.backgroundColor.b === 0 && formFieldAttributes.backgroundColor.a === 0) {\n            checkBoxField.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                formFieldAttributes.backgroundColor.b, formFieldAttributes.backgroundColor.a];\n        }\n        checkBoxField.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n            formFieldAttributes.borderColor.b];\n        if (formFieldAttributes.borderColor.r === 0 && formFieldAttributes.borderColor.g === 0 && formFieldAttributes.borderColor.b === 0\n            && formFieldAttributes.borderColor.a === 0) {\n            checkBoxField.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n                formFieldAttributes.borderColor.b, formFieldAttributes.borderColor.a];\n        }\n        checkBoxField.border.width = formFieldAttributes.thickness;\n        checkBoxField.toolTip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.tooltip) ? '' : formFieldAttributes.tooltip;\n        if (!isFieldRotated) {\n            checkBoxField.rotate = this.getFormfieldRotation(loadedPage.rotation);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            checkBoxField._dictionary.set('CustomData', customData);\n        }\n        return checkBoxField;\n    };\n    FormFieldsBase.prototype.saveListBoxField = function (loadedPage, formFieldAttributes) {\n        var listBoxName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.name) ? 'listBox' : formFieldAttributes.name;\n        var listBounds = this.convertFieldBounds(formFieldAttributes);\n        var rotationAngle = loadedPage.rotation;\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        var fieldBounds = this.getBounds(listBounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, isFieldRotated);\n        var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n        var listBox = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfListBoxField(loadedPage, listBoxName, bound);\n        var flag = false;\n        var hasUnicode = false;\n        for (var i = 0; i < formFieldAttributes.option.length; i++) {\n            var item = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfListFieldItem(formFieldAttributes.option[parseInt(i.toString(), 10)].itemName, formFieldAttributes.option[parseInt(i.toString(), 10)].itemValue);\n            listBox.addItem(item);\n            // eslint-disable-next-line\n            var unicode = /[^\\u0000-\\u007F]/.test(formFieldAttributes.option[parseInt(i.toString(), 10)].itemName);\n            if (unicode) {\n                hasUnicode = true;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item && item._dictionary && !flag)) {\n                item.textAlignment = this.getTextAlignment(formFieldAttributes.textAlign);\n                flag = true;\n            }\n        }\n        if (listBox.itemsCount > 0) {\n            var count = formFieldAttributes.selectedIndex.length;\n            if (Array.isArray(formFieldAttributes.selectedIndex) && count > 0) {\n                if (count === 1) {\n                    listBox.selectedIndex = formFieldAttributes.selectedIndex[0];\n                }\n                else {\n                    var selectedIndexes = [];\n                    for (var j = 0; j < count; j++) {\n                        selectedIndexes.push(formFieldAttributes.selectedIndex[parseInt(j.toString(), 10)]);\n                    }\n                    listBox.selectedIndex = selectedIndexes;\n                }\n            }\n            else {\n                listBox.selectedIndex = 0;\n            }\n        }\n        listBox.textAlignment = this.getTextAlignment(formFieldAttributes.textAlign);\n        listBox.multiSelect = true;\n        listBox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n            formFieldAttributes.backgroundColor.b];\n        if (formFieldAttributes.backgroundColor.r === 0 && formFieldAttributes.backgroundColor.g === 0 &&\n            formFieldAttributes.backgroundColor.b === 0 && formFieldAttributes.backgroundColor.a === 0) {\n            listBox.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                formFieldAttributes.backgroundColor.b, formFieldAttributes.backgroundColor.a];\n        }\n        listBox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g, formFieldAttributes.borderColor.b];\n        // eslint-disable-next-line\n        if (formFieldAttributes.borderColor.r == 0 && formFieldAttributes.borderColor.g == 0 &&\n            // eslint-disable-next-line\n            formFieldAttributes.borderColor.b == 0 && formFieldAttributes.borderColor.a == 0) {\n            listBox.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n                formFieldAttributes.borderColor.b, formFieldAttributes.borderColor.a];\n        }\n        listBox.border.width = formFieldAttributes.thickness;\n        var pdfFontStyle = this.getFontStyle(formFieldAttributes);\n        listBox._dictionary.set('FontStyle', pdfFontStyle);\n        var fontFamily = formFieldAttributes.FontFamily ? formFieldAttributes.FontFamily : formFieldAttributes.fontFamily;\n        listBox.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(this.getFontFamily(fontFamily), this.convertPixelToPoint(formFieldAttributes.fontSize), pdfFontStyle);\n        for (var i = 0; i < formFieldAttributes.option.length; i++) {\n            var listBoxText = formFieldAttributes.option[parseInt(i.toString(), 10)].itemName.toString();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxText)) {\n                var textFont = this.pdfViewer.pdfRenderer.FallbackFontCollection;\n                this.setFontAppearance(listBoxText, formFieldAttributes.fontFamily, formFieldAttributes.fontSize, listBox, textFont, hasUnicode, pdfFontStyle);\n                break;\n            }\n        }\n        listBox.readOnly = formFieldAttributes.isReadonly;\n        listBox.required = formFieldAttributes.isRequired;\n        listBox.visibility = this.getFormFieldsVisibility(formFieldAttributes.visibility);\n        listBox.toolTip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.tooltip) ? '' : formFieldAttributes.tooltip;\n        if (!isFieldRotated) {\n            listBox.rotate = this.getFormfieldRotation(loadedPage.rotation);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            listBox._dictionary.set('CustomData', customData);\n        }\n        return listBox;\n    };\n    FormFieldsBase.prototype.saveRadioButtonField = function (formFieldAttributes) {\n        var loadedPage = this.formFieldLoadedDocument.getPage(formFieldAttributes.pageNumber - 1);\n        var fieldName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.radiobuttonItem[0].name) ? 'radiobuttonField' : formFieldAttributes.radiobuttonItem[0].name;\n        var field = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListField(loadedPage, fieldName);\n        var selectedIndex = 0;\n        var isSelectedItem = false;\n        var isReadOnly = false;\n        var isRequired = false;\n        for (var i = 0; i < formFieldAttributes.radiobuttonItem.length; i++) {\n            var radiobuttonItem = formFieldAttributes.radiobuttonItem[parseInt(i.toString(), 10)];\n            var page = this.formFieldLoadedDocument.getPage(radiobuttonItem.pageNumber - 1);\n            var radioButtonName = !((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(radiobuttonItem.value) || radiobuttonItem.value === '') ? radiobuttonItem.value : fieldName;\n            var rotationAngle = this.getRotateAngle(page.rotation);\n            var bounds = this.convertFieldBounds(radiobuttonItem);\n            var isFieldRotated = false;\n            if (formFieldAttributes.rotation !== 0) {\n                isFieldRotated = true;\n            }\n            var fieldBounds = this.getBounds(bounds, page.size[1], page.size[0], rotationAngle, isFieldRotated);\n            var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n            var radioButtonItem = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListItem(radioButtonName, bound, page);\n            if (isFieldRotated) {\n                radioButtonItem.rotationAngle = this.GetRotateAngle(page.rotation);\n            }\n            if (radiobuttonItem.isReadonly) {\n                isReadOnly = true;\n            }\n            if (radiobuttonItem.isRequired) {\n                isRequired = true;\n            }\n            radioButtonItem.borderColor = [radiobuttonItem.borderColor.r, radiobuttonItem.borderColor.g, radiobuttonItem.borderColor.b];\n            // eslint-disable-next-line\n            if (radiobuttonItem.borderColor.r == 0 && radiobuttonItem.borderColor.g == 0 &&\n                // eslint-disable-next-line\n                radiobuttonItem.borderColor.b == 0 && radiobuttonItem.borderColor.a == 0) {\n                radioButtonItem.borderColor = [radiobuttonItem.borderColor.r, radiobuttonItem.borderColor.g,\n                    radiobuttonItem.borderColor.b, radiobuttonItem.borderColor.a];\n            }\n            radioButtonItem.border.width = radiobuttonItem.thickness;\n            radioButtonItem.backColor = [radiobuttonItem.backgroundColor.r, radiobuttonItem.backgroundColor.g,\n                radiobuttonItem.backgroundColor.b];\n            if (radiobuttonItem.backgroundColor.r === 0 && radiobuttonItem.backgroundColor.g === 0 &&\n                radiobuttonItem.backgroundColor.b === 0 && radiobuttonItem.backgroundColor.a === 0) {\n                radioButtonItem.backColor = [radiobuttonItem.backgroundColor.r, radiobuttonItem.backgroundColor.g,\n                    radiobuttonItem.backgroundColor.b, radiobuttonItem.backgroundColor.a];\n            }\n            radioButtonItem.visibility = this.getFormFieldsVisibility(radiobuttonItem.visibility);\n            field.add(radioButtonItem);\n            if (radiobuttonItem.isSelected) {\n                selectedIndex = i;\n                isSelectedItem = true;\n            }\n        }\n        field.readOnly = isReadOnly;\n        field.required = isRequired;\n        field.toolTip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.tooltip) ? '' : formFieldAttributes.tooltip;\n        if (isSelectedItem) {\n            field.selectedIndex = selectedIndex;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.radiobuttonItem[0].customData)) {\n            var customData = JSON.stringify(formFieldAttributes.radiobuttonItem[0].customData);\n            field._dictionary.set('CustomData', customData);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            field._dictionary.set('CustomData', customData);\n        }\n        return field;\n    };\n    FormFieldsBase.prototype.saveSignatureField = function (loadedPage, formFieldAttributes) {\n        var signatureFieldName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.name) ? 'signatureField' : formFieldAttributes.name;\n        var signatureFieldBounds = this.convertFieldBounds(formFieldAttributes);\n        var rotationAngle = loadedPage.rotation;\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        var fieldBounds = this.getBounds(signatureFieldBounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, isFieldRotated);\n        var bound = { x: fieldBounds.X, y: fieldBounds.Y, width: fieldBounds.Width, height: fieldBounds.Height };\n        var signatureField = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField(loadedPage, signatureFieldName, bound);\n        //let page: PdfPage = signatureField.page;\n        signatureField.toolTip = formFieldAttributes.tooltip;\n        signatureField.required = formFieldAttributes.isRequired;\n        signatureField.readOnly = formFieldAttributes.isReadonly;\n        if (formFieldAttributes.formFieldAnnotationType === 'InitialField') {\n            signatureField._dictionary.set('InitialField', true);\n        }\n        if (formFieldAttributes.value === '') {\n            signatureField.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                formFieldAttributes.backgroundColor.b];\n            if (formFieldAttributes.backgroundColor.r === 0 && formFieldAttributes.backgroundColor.g === 0 &&\n                formFieldAttributes.backgroundColor.b === 0 && formFieldAttributes.backgroundColor.a === 0) {\n                signatureField.backColor = [formFieldAttributes.backgroundColor.r, formFieldAttributes.backgroundColor.g,\n                    formFieldAttributes.backgroundColor.b, formFieldAttributes.backgroundColor.a];\n            }\n        }\n        signatureField.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n            formFieldAttributes.borderColor.b];\n        if (formFieldAttributes.borderColor.r === 0 && formFieldAttributes.borderColor.g === 0 &&\n            formFieldAttributes.borderColor.b === 0 && formFieldAttributes.borderColor.a === 0) {\n            signatureField.borderColor = [formFieldAttributes.borderColor.r, formFieldAttributes.borderColor.g,\n                formFieldAttributes.borderColor.b, formFieldAttributes.borderColor.a];\n        }\n        signatureField.border.width = formFieldAttributes.thickness;\n        if (formFieldAttributes.visibility === 'hidden') {\n            signatureField.visible = false;\n        }\n        else if (formFieldAttributes.visibility === 'visible') {\n            signatureField.visible = true;\n        }\n        if (formFieldAttributes.signatureType === 'Text') {\n            this.drawDesignerFieldFreeTextAnnotations(signatureField, signatureFieldName, formFieldAttributes);\n        }\n        else if (formFieldAttributes.signatureType === 'Image') {\n            this.drawDesignerFieldImage(signatureField, signatureFieldName, formFieldAttributes);\n        }\n        else if (formFieldAttributes.signatureType === 'Path') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.value) && formFieldAttributes.value !== '') {\n                this.drawDesignerFieldPath(signatureField, signatureFieldName, formFieldAttributes);\n            }\n        }\n        if (!isFieldRotated) {\n            signatureField.rotate = this.getFormfieldRotation(loadedPage.rotation);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.customData)) {\n            var customData = JSON.stringify(formFieldAttributes.customData);\n            signatureField._dictionary.set('CustomData', customData);\n        }\n        return signatureField;\n    };\n    FormFieldsBase.prototype.drawDesignerFieldFreeTextAnnotations = function (signatureField, currentFieldName, formFieldAttributes) {\n        var boundsObjects = { X: formFieldAttributes.signatureBound.x, Y: formFieldAttributes.signatureBound.y,\n            Width: formFieldAttributes.signatureBound.width, Height: formFieldAttributes.signatureBound.height };\n        var page = signatureField.page;\n        var pageRotationAngle = page.rotation;\n        var zoomvalue = formFieldAttributes.zoomValue;\n        var signBounds = { X: this.convertPixelToPoint(boundsObjects.X / zoomvalue),\n            Y: this.convertPixelToPoint(boundsObjects.Y / zoomvalue), Width: this.convertPixelToPoint(boundsObjects.Width / zoomvalue),\n            Height: this.convertPixelToPoint(boundsObjects.Height / zoomvalue) };\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        signBounds = this.getBounds(signBounds, page.size[1], page.size[0], pageRotationAngle, isFieldRotated);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes)) {\n            var left = signBounds.X;\n            var top_3 = signBounds.Y;\n            var width = signBounds.Width;\n            var height = signBounds.Height;\n            var freeTextBounds = { X: left, Y: top_3, Width: width, Height: height };\n            var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFreeTextAnnotation(left, top_3, width, height);\n            annotation.setAppearance(true);\n            annotation._dictionary.set('T', currentFieldName);\n            var font = formFieldAttributes.fontSize;\n            var fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.fontFamily)) {\n                fontFamilyEnum = this.getFontFamily(formFieldAttributes.fontFamily);\n            }\n            var fontStyle = this.getFontStyle(formFieldAttributes);\n            // eslint-disable-next-line\n            var hasUnicode = /[^\\u0000-\\u007F]/.test(formFieldAttributes.value);\n            if (hasUnicode) {\n                annotation.font = this.getTrueFont(this.convertPixelToPoint(font), fontStyle);\n            }\n            else {\n                annotation.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(fontFamilyEnum, this.convertPixelToPoint(formFieldAttributes.fontSize), fontStyle);\n            }\n            annotation.text = formFieldAttributes.value;\n            this.setFontSize(this.convertPixelToPoint(font), annotation.font, formFieldAttributes.value, freeTextBounds, fontFamilyEnum, fontStyle);\n            annotation.border.width = 0;\n            annotation.textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.center;\n            annotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            if (formFieldAttributes.visibility === 'hidden') {\n                annotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.hidden;\n            }\n            if (!isFieldRotated) {\n                annotation.rotationAngle = Math.abs(this.getRotateAngle(page.rotation));\n            }\n            annotation.setValues('AnnotationType', 'Signature');\n            annotation.setAppearance(true);\n            page.annotations.add(annotation);\n        }\n    };\n    FormFieldsBase.prototype.drawDesignerFieldImage = function (signatureField, currentFieldName, formFieldAttributes) {\n        var boundsObjects = { X: formFieldAttributes.signatureBound.x, Y: formFieldAttributes.signatureBound.y,\n            Width: formFieldAttributes.signatureBound.width, Height: formFieldAttributes.signatureBound.height };\n        var page = signatureField.page;\n        var pageRotationAngle = page.rotation;\n        var zoomvalue = formFieldAttributes.zoomValue;\n        var signBounds = { X: this.convertPixelToPoint(boundsObjects.X / zoomvalue),\n            Y: this.convertPixelToPoint(boundsObjects.Y / zoomvalue), Width: this.convertPixelToPoint(boundsObjects.Width / zoomvalue),\n            Height: this.convertPixelToPoint(boundsObjects.Height / zoomvalue) };\n        var isFieldRotated = false;\n        if (formFieldAttributes.rotation !== 0) {\n            isFieldRotated = true;\n        }\n        signBounds = this.getBounds(signBounds, page.size[1], page.size[0], pageRotationAngle, isFieldRotated);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes)) {\n            var left = signBounds.X;\n            var top_4 = signBounds.Y;\n            var width = signBounds.Width;\n            var height = signBounds.Height;\n            var imageUrl = (formFieldAttributes.value.toString()).split(',')[1];\n            var rubberStampAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRubberStampAnnotation(left, top_4, width, height);\n            var bitmap = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfBitmap(imageUrl);\n            rubberStampAnnotation.appearance.normal.graphics.drawImage(bitmap, 0, 0, width, height);\n            if (!isFieldRotated) {\n                rubberStampAnnotation.rotationAngle = Math.abs(this.getRotateAngle(page.rotation));\n            }\n            rubberStampAnnotation._dictionary.set('T', currentFieldName);\n            rubberStampAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            if (formFieldAttributes.visibility === 'hidden') {\n                rubberStampAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.hidden;\n            }\n            page.annotations.add(rubberStampAnnotation);\n        }\n    };\n    FormFieldsBase.prototype.drawDesignerFieldPath = function (signatureField, currentFieldName, formFieldAttributes) {\n        var stampObjects = JSON.parse(formFieldAttributes.value);\n        var boundsObjects = { X: formFieldAttributes.signatureBound.x, Y: formFieldAttributes.signatureBound.y,\n            Width: formFieldAttributes.signatureBound.width, Height: formFieldAttributes.signatureBound.height };\n        var page = signatureField.page;\n        var pageRotationAngle = page.rotation;\n        var zoomvalue = formFieldAttributes.zoomValue;\n        var signBounds = { X: this.convertPixelToPoint(boundsObjects.X / zoomvalue),\n            Y: this.convertPixelToPoint(boundsObjects.Y / zoomvalue), Width: this.convertPixelToPoint(boundsObjects.Width / zoomvalue),\n            Height: this.convertPixelToPoint(boundsObjects.Height / zoomvalue) };\n        signBounds = this.getBounds(signBounds, page.size[1], page.size[0], pageRotationAngle, false);\n        var pageNumber = 0;\n        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n            if (page === this.formFieldLoadedDocument.getPage(k)) {\n                break;\n            }\n            pageNumber++;\n        }\n        // Need to check and implement the logic of skia sharp to reduced the ink annotation thickness\n        if (stampObjects.length > 0) {\n            var left = signBounds.X;\n            var top_5 = signBounds.Y;\n            var width = signBounds.Width;\n            var height = signBounds.Height;\n            var minimumX = -1;\n            var minimumY = -1;\n            var maximumX = -1;\n            var maximumY = -1;\n            var drawingPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfPath();\n            for (var p = 0; p < stampObjects.length; p++) {\n                var val = stampObjects[parseInt(p.toString(), 10)];\n                drawingPath.addLine(val.x, val.y, 0, 0);\n            }\n            for (var p = 0; p < drawingPath._points.length; p += 2) {\n                var value = drawingPath._points[parseInt(p.toString(), 10)];\n                if (minimumX === -1) {\n                    minimumX = value[0];\n                    minimumY = value[1];\n                    maximumX = value[0];\n                    maximumY = value[1];\n                }\n                else {\n                    var point1 = value[0];\n                    var point2 = value[1];\n                    if (minimumX >= point1) {\n                        minimumX = point1;\n                    }\n                    if (minimumY >= point2) {\n                        minimumY = point2;\n                    }\n                    if (maximumX <= point1) {\n                        maximumX = point1;\n                    }\n                    if (maximumY <= point2) {\n                        maximumY = point2;\n                    }\n                }\n            }\n            var newDifferenceX = (maximumX - minimumX) / width;\n            var newDifferenceY = (maximumY - minimumY) / height;\n            var linePoints = [];\n            var isNewValues = 0;\n            if (pageRotationAngle !== 0) {\n                for (var j = 0; j < stampObjects.length; j++) {\n                    var value = stampObjects[parseInt(j.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && j !== 0) {\n                        isNewValues = j;\n                        break;\n                    }\n                    linePoints.push(parseFloat(value.x));\n                    linePoints.push(parseFloat(value.y));\n                }\n                linePoints = [];\n                for (var z = 0; z < stampObjects.length; z++) {\n                    var value = stampObjects[parseInt(z.toString(), 10)];\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - ((parseFloat(value.y) - minimumY) /\n                        newDifferenceY) - top_5);\n                }\n            }\n            else {\n                for (var k = 0; k < stampObjects.length; k++) {\n                    var value = stampObjects[parseInt(k.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && k !== 0) {\n                        isNewValues = k;\n                        break;\n                    }\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    var newX = ((parseFloat(value.y) - minimumY) / newDifferenceY);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - newX - top_5);\n                }\n            }\n            var inkAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfInkAnnotation([left, top_5, width, height], linePoints);\n            inkAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            if (formFieldAttributes.visibility === 'hidden') {\n                inkAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.hidden;\n            }\n            inkAnnotation.bounds = { x: signBounds.X, y: signBounds.Y, width: signBounds.Width, height: signBounds.Height };\n            inkAnnotation.border.width = 0;\n            inkAnnotation.color = [0, 0, 0];\n            inkAnnotation.setValues('annotationSignature', 'annotationSignature');\n            linePoints = [];\n            if (pageRotationAngle !== 0) {\n                var pathCollection = [];\n                for (var t = isNewValues; t < stampObjects.length; t++) {\n                    var value = stampObjects[parseInt(t.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && t !== isNewValues) {\n                        pathCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push(parseFloat(value.x));\n                    linePoints.push(parseFloat(value.y));\n                }\n                if (linePoints.length > 0) {\n                    pathCollection.push(linePoints);\n                }\n                for (var w = 0; w < pathCollection.length; w++) {\n                    var pointsCollections = pathCollection[parseInt(w.toString(), 10)];\n                    linePoints = [];\n                    if (pointsCollections.length > 0) {\n                        for (var z = 0; z < stampObjects.length; z++) {\n                            var value = stampObjects[parseInt(z.toString(), 10)];\n                            linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                            linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - ((parseFloat(value.y) -\n                                minimumY) / newDifferenceY) - top_5);\n                        }\n                        inkAnnotation.inkPointsCollection.push(linePoints);\n                    }\n                    linePoints = [];\n                }\n            }\n            else {\n                for (var r = 0; r < stampObjects.length; r++) {\n                    var value = stampObjects[parseInt(r.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && r !== 0) {\n                        inkAnnotation.inkPointsCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    var newX = ((parseFloat(value.y) - minimumY) / newDifferenceY);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - newX - top_5);\n                }\n                if (linePoints.length > 0) {\n                    inkAnnotation.inkPointsCollection.push(linePoints);\n                }\n            }\n            inkAnnotation._dictionary.set('T', currentFieldName);\n            inkAnnotation.setAppearance(true);\n            inkAnnotation.rotationAngle = Math.abs(this.getRotateAngle(page.rotation));\n            this.formFieldLoadedDocument.getPage(pageNumber).annotations.add(inkAnnotation);\n        }\n    };\n    FormFieldsBase.prototype.setFontSize = function (fontSize, font, text, freeTextBounds, fontFamilyEnum, fontStyle) {\n        var minimumFontSize = 0.25;\n        font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(fontFamilyEnum, fontSize, fontStyle);\n        do {\n            fontSize = fontSize - 0.001;\n            font._size = fontSize;\n            if (fontSize < minimumFontSize) {\n                font._size = minimumFontSize;\n                break;\n            }\n            var sizeF = font.measureString(text);\n            if (sizeF[0] < freeTextBounds.Width && sizeF[1] < freeTextBounds.height) {\n                font._size = fontSize;\n                break;\n            }\n        } while (fontSize > minimumFontSize);\n    };\n    FormFieldsBase.prototype.getTrueFont = function (fontSize, fontStyle) {\n        var font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTrueTypeFont((0,_pdf_base_fontData__WEBPACK_IMPORTED_MODULE_3__.getArialFontData)(), this.convertPixelToPoint(fontSize), fontStyle);\n        return font;\n    };\n    FormFieldsBase.prototype.convertFieldBounds = function (formFieldAttributes) {\n        var zoomvalue = formFieldAttributes.zoomValue;\n        return { X: this.convertPixelToPoint(formFieldAttributes.lineBound.X / zoomvalue),\n            Y: this.convertPixelToPoint(formFieldAttributes.lineBound.Y / zoomvalue),\n            Width: this.convertPixelToPoint(formFieldAttributes.lineBound.Width / zoomvalue),\n            Height: this.convertPixelToPoint(formFieldAttributes.lineBound.Height / zoomvalue) };\n    };\n    FormFieldsBase.prototype.getFontFamily = function (font) {\n        var fontFamily = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica;\n        switch (font) {\n            case 'Courier':\n                fontFamily = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.courier;\n                break;\n            case 'Times New Roman':\n                fontFamily = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.timesRoman;\n                break;\n            case 'Symbol':\n                fontFamily = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.symbol;\n                break;\n            case 'ZapfDingbats':\n                fontFamily = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats;\n                break;\n        }\n        return fontFamily;\n    };\n    //Need to calculate bound for all rotation\n    FormFieldsBase.prototype.getBounds = function (bounds, pageHeight, pageWidth, pageRotation, isFieldRotated) {\n        var bound = {};\n        if (pageRotation === 0) {\n            bound = { X: bounds.X, Y: bounds.Y, Width: bounds.Width, Height: bounds.Height };\n        }\n        else if (pageRotation === 1) {\n            if (isFieldRotated) {\n                bound = { X: bounds.Y - (bounds.Width / 2 - bounds.Height / 2),\n                    Y: pageHeight - bounds.X - bounds.Height - (bounds.Width / 2 - bounds.Height / 2),\n                    Width: bounds.Width, Height: bounds.Height };\n            }\n            else {\n                bound = { X: bounds.Y, Y: pageHeight - bounds.X - bounds.Width, Width: bounds.Height, Height: bounds.Width };\n            }\n        }\n        else if (pageRotation === 2) {\n            bound = { X: pageWidth - bounds.X - bounds.Width, Y: pageHeight - bounds.Y - bounds.Height,\n                Width: bounds.Width, Height: bounds.Height };\n        }\n        else if (pageRotation === 3) {\n            if (isFieldRotated) {\n                bound = { X: pageWidth - bounds.Y - bounds.Height - (bounds.Width / 2 - bounds.Height / 2),\n                    Y: bounds.X + (bounds.Width / 2 - bounds.Height / 2), Width: bounds.Width, Height: bounds.Height };\n            }\n            else {\n                bound = { X: pageWidth - bounds.Y - bounds.Height, Y: bounds.X, Width: bounds.Height, Height: bounds.Width };\n            }\n        }\n        return bound;\n    };\n    FormFieldsBase.prototype.getFormfieldRotation = function (rotation) {\n        var angle = 0;\n        switch (rotation) {\n            case 1:\n                angle = 90;\n                break;\n            case 2:\n                angle = 180;\n                break;\n            case 3:\n                angle = 270;\n                break;\n            case 4:\n                angle = 360;\n                break;\n        }\n        return angle;\n    };\n    //Need to check the form field textAlignment property\n    FormFieldsBase.prototype.getTextAlignment = function (alignment) {\n        var textAlignment;\n        switch (alignment.toLowerCase()) {\n            case 'left':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.left;\n                break;\n            case 'right':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.right;\n                break;\n            case 'center':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.center;\n                break;\n            case 'justify':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextAlignment.justify;\n                break;\n        }\n        return textAlignment;\n    };\n    //Need to check the form field visibility property\n    FormFieldsBase.prototype.getFormFieldsVisibility = function (visibility) {\n        var fieldVisibility;\n        switch (visibility) {\n            case 'visible':\n                fieldVisibility = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFormFieldVisibility.visible;\n                break;\n            case 'hidden':\n                fieldVisibility = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFormFieldVisibility.hidden;\n                break;\n            case 'visibleNotPrintable':\n                fieldVisibility = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFormFieldVisibility.visibleNotPrintable;\n                break;\n            case 'hiddenPrintable':\n                fieldVisibility = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFormFieldVisibility.hiddenPrintable;\n                break;\n        }\n        return fieldVisibility;\n    };\n    FormFieldsBase.prototype.getFontStyle = function (formFieldAttributes) {\n        var fontStyle;\n        fontStyle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.regular;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formFieldAttributes.font)) {\n            if (formFieldAttributes.font.isBold) {\n                fontStyle |= _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.bold;\n            }\n            if (formFieldAttributes.font.isItalic) {\n                fontStyle |= _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.italic;\n            }\n            if (formFieldAttributes.font.isUnderline) {\n                fontStyle |= _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.underline;\n            }\n            if (formFieldAttributes.font.isStrikeout) {\n                fontStyle |= _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.strikeout;\n            }\n        }\n        return fontStyle;\n    };\n    FormFieldsBase.prototype.convertPixelToPoint = function (value) {\n        return (value * 72 / 96);\n    };\n    FormFieldsBase.prototype.convertPointtoPixel = function (value) {\n        return (value * 96 / 72);\n    };\n    FormFieldsBase.prototype.fontConvert = function (font) {\n        return {\n            Bold: font.isBold,\n            FontFamily: this.getFontFamilyString(font.fontFamily),\n            Height: font.height,\n            Italic: font.isItalic,\n            Name: this.getFontFamilyString(font.fontFamily).toString(),\n            Size: font.size,\n            Strikeout: font.isStrikeout,\n            Underline: font.isUnderline,\n            Style: font.style\n        };\n    };\n    FormFieldsBase.prototype.parseFontStyle = function (numberValue, fontObject) {\n        if ((numberValue & _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.underline) > 0) {\n            fontObject.Underline = true;\n        }\n        if ((numberValue & _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.strikeout) > 0) {\n            fontObject.Strikeout = true;\n        }\n        if ((numberValue & _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.bold) > 0) {\n            fontObject.Bold = true;\n        }\n        if ((numberValue & _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.italic) > 0) {\n            fontObject.Italic = true;\n        }\n        return fontObject;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    FormFieldsBase.prototype.GetFormFields = function () {\n        this.PdfRenderedFormFields = [];\n        var loadedForm = this.formFieldLoadedDocument.form;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(loadedForm) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(loadedForm._fields)) {\n            loadedForm.orderFormFields();\n            for (var i = 0; i < loadedForm.count; i++) {\n                var field = loadedForm.fieldAt(i);\n                var page = field.page;\n                var pageNumber = 0;\n                for (var j = 0; j < this.formFieldLoadedDocument.pageCount; j++) {\n                    if (page === this.formFieldLoadedDocument.getPage(j)) {\n                        break;\n                    }\n                    pageNumber++;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field.page)) {\n                    if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField) {\n                        var textBox = field;\n                        if (textBox.itemsCount > 0) {\n                            this.addTextBoxFieldItems(textBox);\n                        }\n                        else {\n                            this.addTextBoxField(textBox, pageNumber, textBox.bounds, null);\n                        }\n                    }\n                    else if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfComboBoxField) {\n                        var comboBoxField = loadedForm.fieldAt(i);\n                        this.addComboBoxField(comboBoxField, pageNumber);\n                    }\n                    else if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField) {\n                        var checkbox = field;\n                        if (checkbox.itemsCount > 1) {\n                            this.addCheckBoxFieldItems(checkbox);\n                        }\n                        else {\n                            this.addCheckBoxField(checkbox, pageNumber, checkbox.bounds, null);\n                        }\n                    }\n                    else if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfListBoxField) {\n                        var listBoxField = field;\n                        this.addListBoxField(listBoxField, pageNumber);\n                    }\n                    else if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRadioButtonListField) {\n                        for (var i_2 = 0; i_2 < field.itemsCount; i_2++) {\n                            var item = field.itemAt(i_2);\n                            if (item) {\n                                var page_1 = item.page;\n                                if (page_1) {\n                                    this.addRadioButtonField(item, page_1._pageIndex, field.name);\n                                }\n                            }\n                        }\n                    }\n                    else if (loadedForm.fieldAt(i) instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField) {\n                        var signatureField = loadedForm.fieldAt(i);\n                        if (signatureField.isSigned && this.showDigitalSignatureAppearance) {\n                            this.mIsDigitalSignaturePresent = true;\n                            signatureField.flatten = true;\n                        }\n                        else if (!signatureField.isSigned || !this.hideEmptyDigitalSignatureFields) {\n                            if (signatureField.itemsCount > 0) {\n                                this.addSigntureFieldItems(signatureField);\n                            }\n                            else {\n                                this.addSignatureField(signatureField, pageNumber, signatureField.bounds);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this.retrieveInkAnnotation(this.formFieldLoadedDocument);\n    };\n    FormFieldsBase.prototype.addTextBoxFieldItems = function (field) {\n        if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTextBoxField) {\n            var textBoxField = field;\n            if (textBoxField.itemsCount > 0) {\n                for (var i = 0; i < textBoxField.itemsCount; i++) {\n                    var item = textBoxField.itemAt(i).page;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {\n                        var j = 0;\n                        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n                            if (item === this.formFieldLoadedDocument.getPage(j)) {\n                                break;\n                            }\n                            j++;\n                        }\n                        this.addTextBoxField(textBoxField, j, textBoxField.itemAt(i).bounds, textBoxField.itemAt(i).font);\n                    }\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.addTextBoxField = function (textBox, pageNumber, bounds, font) {\n        var formFields = new PdfRenderedFields();\n        formFields.FieldName = textBox.name;\n        formFields.ActualFieldName = textBox.name;\n        if (textBox.password) {\n            formFields.Name = 'Password';\n        }\n        else {\n            formFields.Name = 'Textbox';\n        }\n        formFields.ToolTip = textBox.toolTip;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds)) {\n            formFields.LineBounds = { X: bounds.x, Y: bounds.y, Width: bounds.width, Height: bounds.height };\n        }\n        else {\n            formFields.LineBounds = { X: textBox.bounds.x, Y: textBox.bounds.y, Width: textBox.bounds.width,\n                Height: textBox.bounds.height };\n        }\n        formFields.TabIndex = textBox.tabIndex;\n        formFields.PageIndex = pageNumber;\n        formFields.BorderWidth = textBox.border.width;\n        formFields.BorderStyle = textBox.border.style;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textBox.backColor)) {\n            formFields.BackColor = { R: textBox.backColor[0], G: textBox.backColor[1], B: textBox.backColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.Alignment = textBox.textAlignment;\n        formFields.MaxLength = textBox.maxLength;\n        formFields.Visible = textBox.visibility;\n        formFields.InsertSpaces = textBox.insertSpaces;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(font)) {\n            formFields.Font = this.fontConvert(font);\n        }\n        else {\n            formFields.Font = this.fontConvert(textBox.font);\n        }\n        if (textBox._dictionary.has('FontStyle')) {\n            var fontStyle = textBox._dictionary.get('FontStyle');\n            formFields.Font = this.parseFontStyle(fontStyle, formFields.Font);\n        }\n        formFields.Rotation = textBox.rotationAngle;\n        formFields.IsReadonly = textBox.readOnly;\n        formFields.IsRequired = textBox.required;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textBox.color)) {\n            formFields.FontColor = { R: textBox.color[0], G: textBox.color[1], B: textBox.color[2] };\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textBox.borderColor)) {\n            formFields.BorderColor = { R: textBox.borderColor[0], G: textBox.borderColor[1], B: textBox.borderColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.Text = textBox.text ? textBox.text.replace('\"', '') : '';\n        formFields.Multiline = textBox.multiLine;\n        formFields.RotationAngle = this.GetRotateAngle(textBox.page.rotation);\n        if (textBox._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(textBox._dictionary.get('CustomData'));\n        }\n        formFields.TextList = [];\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.addComboBoxField = function (comboBoxField, pageNumber) {\n        var formFields = new PdfRenderedFields();\n        formFields.Name = 'DropDown';\n        formFields.ToolTip = comboBoxField.toolTip;\n        formFields.FieldName = comboBoxField.name;\n        formFields.Font = this.fontConvert(comboBoxField.font);\n        formFields.IsAutoSize = comboBoxField._isAutoFontSize;\n        formFields.Selected = comboBoxField.editable;\n        if (comboBoxField._dictionary.has('FontStyle')) {\n            var fontStyle = comboBoxField._dictionary.get('FontStyle');\n            formFields.Font = this.parseFontStyle(fontStyle, formFields.Font);\n        }\n        formFields.ActualFieldName = comboBoxField.name;\n        formFields.SelectedValue = comboBoxField.selectedValue;\n        if (comboBoxField._options.length > 0 && (typeof comboBoxField._options[0] !== 'string')) {\n            var selectedValue = comboBoxField._options.filter(function (option) { return option[0] === formFields.SelectedValue; });\n            if (selectedValue && selectedValue[0]) {\n                formFields.SelectedValue = selectedValue[0][1];\n            }\n        }\n        formFields.selectedIndex = comboBoxField.selectedIndex;\n        formFields.LineBounds = { X: comboBoxField.bounds.x, Y: comboBoxField.bounds.y, Width: comboBoxField.bounds.width,\n            Height: comboBoxField.bounds.height };\n        formFields.TabIndex = comboBoxField.tabIndex;\n        formFields.PageIndex = pageNumber;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(comboBoxField.backColor)) {\n            formFields.BackColor = { R: comboBoxField.backColor[0], G: comboBoxField.backColor[1], B: comboBoxField.backColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.BorderWidth = comboBoxField.border.width;\n        formFields.BorderStyle = comboBoxField.border.style;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(comboBoxField.borderColor)) {\n            formFields.BorderColor = { R: comboBoxField.borderColor[0], G: comboBoxField.borderColor[1], B: comboBoxField.borderColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.FontColor = { R: comboBoxField.color[0], G: comboBoxField.color[1], B: comboBoxField.color[2] };\n        formFields.Rotation = comboBoxField.rotationAngle;\n        formFields.IsRequired = comboBoxField.required;\n        formFields.IsReadonly = comboBoxField.readOnly;\n        formFields.Visible = comboBoxField.visibility;\n        formFields.RotationAngle = this.GetRotateAngle(comboBoxField.page.rotation);\n        formFields.Alignment = comboBoxField.textAlignment;\n        if (comboBoxField._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(comboBoxField._dictionary.get('CustomData'));\n        }\n        formFields.TextList = [];\n        if (comboBoxField._dictionary.has('Opt')) {\n            var options = comboBoxField._dictionary.get('Opt');\n            if (options.length > 0) {\n                formFields.ComboBoxList = options.map(function (item) {\n                    return (typeof item === 'string' ?\n                        { itemName: item, itemValue: item } : (typeof item === 'object' ?\n                        { itemName: item[1], itemValue: item[0] } : { itemName: '', itemValue: '' }));\n                });\n            }\n        }\n        if (formFields.TextList.length === 0) {\n            for (var i = 0; i < comboBoxField.itemsCount; i++) {\n                var item = comboBoxField.itemAt(i);\n                if (item) {\n                    formFields.TextList.push(item.text);\n                    if (i === 0) {\n                        formFields.Alignment = item.textAlignment;\n                    }\n                }\n            }\n        }\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.addCheckBoxFieldItems = function (field) {\n        if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfCheckBoxField) {\n            var checkBoxField = field;\n            if (checkBoxField.itemsCount > 0) {\n                for (var i = 0; i < checkBoxField.itemsCount; i++) {\n                    var item = checkBoxField.itemAt(i).page;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {\n                        var j = 0;\n                        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n                            if (item === this.formFieldLoadedDocument.getPage(j)) {\n                                break;\n                            }\n                            j++;\n                        }\n                        this.addCheckBoxField(checkBoxField, j, checkBoxField.itemAt(i).bounds, i.toString());\n                    }\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.addCheckBoxField = function (chkField, index, bounds, checkBoxIndex) {\n        var formFields = new PdfRenderedFields();\n        formFields.Name = 'CheckBox';\n        formFields.ToolTip = chkField.toolTip;\n        if (!bounds.IsEmpty) {\n            formFields.LineBounds = { X: bounds.x, Y: bounds.y, Width: bounds.width, Height: bounds.height };\n        }\n        else {\n            formFields.LineBounds = { X: chkField.bounds.x, Y: chkField.bounds.y, Width: chkField.bounds.width,\n                Height: chkField.bounds.height };\n        }\n        formFields.Selected = chkField.checked;\n        formFields.TabIndex = chkField.tabIndex;\n        formFields.GroupName = chkField.name.replace(/[^0-9a-zA-Z]+/g, '');\n        formFields.ActualFieldName = chkField.name;\n        formFields.PageIndex = index;\n        formFields.BorderWidth = chkField.border.width;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chkField.backColor)) {\n            formFields.BackColor = { R: chkField.backColor[0], G: chkField.backColor[1], B: chkField.backColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.BorderStyle = chkField.border.style;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chkField.borderColor)) {\n            formFields.BorderColor = { R: chkField.borderColor[0], G: chkField.borderColor[1], B: chkField.borderColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.RotationAngle = this.GetRotateAngle(chkField.page.rotation);\n        formFields.IsReadonly = chkField.readOnly;\n        formFields.IsRequired = chkField.required;\n        formFields.Visible = chkField.visibility;\n        var value = chkField._dictionary._get('ExportValue');\n        if (chkField._dictionary._get('ExportValue') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n            formFields.Value = value;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkBoxIndex)) {\n            formFields.CheckBoxIndex = checkBoxIndex;\n            var chekckboxField = chkField.itemAt(parseInt(checkBoxIndex, 10));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(chekckboxField)) {\n                formFields.Selected = chekckboxField.checked;\n            }\n        }\n        formFields.RotationAngle = this.GetRotateAngle(chkField.page.rotation);\n        if (chkField._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(chkField._dictionary.get('CustomData'));\n        }\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.addListBoxField = function (listBoxField, pageNumber) {\n        var formFields = new PdfRenderedFields();\n        formFields.Name = 'ListBox';\n        formFields.ToolTip = listBoxField.toolTip;\n        formFields.Text = listBoxField.name.replace(/[^0-9a-zA-Z]+/g, '');\n        formFields.ActualFieldName = listBoxField.name;\n        var itemCount = listBoxField.itemsCount;\n        if (itemCount > 0) {\n            var selectedIndex = listBoxField.selectedIndex;\n            if (Array.isArray(selectedIndex)) {\n                for (var i = 0; i < selectedIndex.length; i++) {\n                    formFields.SelectedList.push(selectedIndex[parseInt(i.toString(), 10)]);\n                }\n            }\n            else {\n                formFields.SelectedList.push(selectedIndex);\n            }\n        }\n        formFields.Font = this.fontConvert(listBoxField.font);\n        if (listBoxField._dictionary.has('FontStyle')) {\n            var fontStyle = listBoxField._dictionary.get('FontStyle');\n            formFields.Font = this.parseFontStyle(fontStyle, formFields.Font);\n        }\n        formFields.LineBounds = { X: listBoxField.bounds.x, Y: listBoxField.bounds.y, Width: listBoxField.bounds.width,\n            Height: listBoxField.bounds.height };\n        formFields.TabIndex = listBoxField.tabIndex;\n        formFields.PageIndex = pageNumber;\n        formFields.BorderWidth = listBoxField.border.width;\n        formFields.BorderStyle = listBoxField.border.style;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxField.backColor)) {\n            formFields.BackColor = { R: listBoxField.backColor[0], G: listBoxField.backColor[1], B: listBoxField.backColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.FontColor = { R: listBoxField.color[0], G: listBoxField.color[1], B: listBoxField.color[2] };\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listBoxField.borderColor)) {\n            formFields.BorderColor = { R: listBoxField.borderColor[0], G: listBoxField.borderColor[1], B: listBoxField.borderColor[2] };\n        }\n        formFields.Rotation = listBoxField.rotationAngle;\n        formFields.IsReadonly = listBoxField.readOnly;\n        formFields.IsRequired = listBoxField.required;\n        formFields.Visible = listBoxField.visibility;\n        formFields.MultiSelect = listBoxField.multiSelect;\n        //Need to implement selected value\n        if (itemCount > 0) {\n            if (Array.isArray(listBoxField.selectedIndex) && Array.isArray(listBoxField.selectedValue)) {\n                formFields.selectedIndex = listBoxField.selectedIndex[0];\n                formFields.SelectedValue = listBoxField.selectedValue[0];\n            }\n        }\n        for (var i = 0; i < itemCount; i++) {\n            var item = listBoxField._kidsCount > 0 ? listBoxField.itemAt(i) : listBoxField._options[parseInt(i.toString(), 10)];\n            if (item) {\n                formFields.TextList.push(listBoxField._kidsCount > 0 ? item.text : item);\n                if (i === 0) {\n                    formFields.Alignment = listBoxField.textAlignment;\n                }\n            }\n        }\n        formFields.RotationAngle = this.GetRotateAngle(listBoxField.page.rotation);\n        if (listBoxField._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(listBoxField._dictionary.get('CustomData'));\n        }\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.addRadioButtonField = function (item, index, radioButtonName) {\n        var parent = item._field;\n        var formFields = new PdfRenderedFields();\n        formFields.Name = 'RadioButton';\n        formFields.ToolTip = parent.toolTip;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.actualName)) {\n            formFields.GroupName = parent.actualName.replace(/[^0-9a-zA-Z]+/g, '');\n            formFields.ActualFieldName = radioButtonName;\n        }\n        formFields.TabIndex = parent.tabIndex;\n        formFields.Selected = item.selected;\n        formFields.LineBounds = { X: item.bounds.x, Y: item.bounds.y, Width: item.bounds.width, Height: item.bounds.height };\n        formFields.Value = item.value;\n        formFields.PageIndex = index;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.backColor)) {\n            formFields.BackColor = { R: item.backColor[0], G: item.backColor[1], B: item.backColor[2] };\n        }\n        else {\n            formFields.IsTransparent = true;\n        }\n        formFields.BorderWidth = item.border.width;\n        formFields.BorderStyle = item.border.style;\n        formFields.BorderColor = { R: parent.borderColor[0], G: parent.borderColor[1], B: parent.borderColor[2] };\n        formFields.Rotation = parent.rotationAngle;\n        formFields.IsRequired = parent.required;\n        formFields.IsReadonly = parent.readOnly;\n        formFields.Visible = parent.visibility;\n        formFields.RotationAngle = this.GetRotateAngle(item.page.rotation);\n        if (parent._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(parent._dictionary.get('CustomData'));\n        }\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.checkTransparent = function (backColor) {\n        var IsTransparent = false;\n        if (backColor.R === 0 && backColor.G === 0 && backColor.B === 0) {\n            IsTransparent = true;\n        }\n        return IsTransparent;\n    };\n    FormFieldsBase.prototype.GetRotateAngle = function (angleString) {\n        var angle = 0;\n        switch (angleString) {\n            case 0:\n                angle = 0;\n                break;\n            case 1:\n                angle = -90;\n                break;\n            case 2:\n                angle = -180;\n                break;\n            case 3:\n                angle = -270;\n                break;\n        }\n        return angle;\n    };\n    FormFieldsBase.prototype.drawFieldFreeTextAnnotations = function (resultObjects, signatureFields, currentFieldName, signatureBounds, fontName, fontSizes) {\n        var stampObjects = JSON.parse(resultObjects);\n        var boundsObjects = JSON.parse(signatureBounds);\n        var page = signatureFields.page;\n        var pageNumber = 0;\n        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n            if (page === this.formFieldLoadedDocument.getPage(k)) {\n                break;\n            }\n            pageNumber++;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampObjects) && stampObjects !== '') {\n            var left = this.convertPixelToPoint(boundsObjects['x']);\n            var top_6 = this.convertPixelToPoint(boundsObjects['y']);\n            var width = this.convertPixelToPoint(boundsObjects['width']);\n            var height = this.convertPixelToPoint(boundsObjects['height']);\n            var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFreeTextAnnotation(left, top_6, width, height);\n            annotation.setAppearance(true);\n            annotation._dictionary.set('T', currentFieldName);\n            var fontSize = fontSizes > 0 ? fontSizes : height / 2;\n            var fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontName)) {\n                var family = fontName;\n                if (family.includes('Times New Roman')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.timesRoman;\n                }\n                else if (family.includes('Courier')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.courier;\n                }\n                else if (family.includes('Symbol')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.symbol;\n                }\n                else if (family.includes('ZapfDingbats')) {\n                    fontFamilyEnum = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats;\n                }\n            }\n            var fontStyle = this.getFontStyle();\n            annotation.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont(fontFamilyEnum, this.convertPixelToPoint(fontSize), fontStyle);\n            annotation.text = stampObjects;\n            annotation.rotationAngle = this.getRotateAngle(page.rotation);\n            annotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            annotation.setValues('AnnotationType', 'Signature');\n            annotation.setAppearance(true);\n            page.annotations.add(annotation);\n        }\n    };\n    FormFieldsBase.prototype.drawFieldImage = function (resultObjects, signatureFields, currentFieldName, signatureBounds) {\n        var stampObjects = JSON.parse(resultObjects);\n        var boundsObjects = JSON.parse(signatureBounds);\n        var page = signatureFields.page;\n        var pageNumber = 0;\n        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n            if (page === this.formFieldLoadedDocument.getPage(k)) {\n                break;\n            }\n            pageNumber++;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampObjects) && stampObjects !== '') {\n            var imageUrl = (stampObjects.toString()).split(',')[1];\n            var left = this.convertPixelToPoint(boundsObjects['x']);\n            var top_7 = this.convertPixelToPoint(boundsObjects['y']);\n            var width = this.convertPixelToPoint(boundsObjects['width']);\n            var height = this.convertPixelToPoint(boundsObjects['height']);\n            var rubberStampAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRubberStampAnnotation(left, top_7, width, height);\n            var bitmap = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfBitmap(imageUrl);\n            rubberStampAnnotation.appearance.normal.graphics.drawImage(bitmap, 0, 0, width, height);\n            rubberStampAnnotation.rotationAngle = this.getRotateAngle(page.rotation);\n            rubberStampAnnotation._dictionary.set('T', currentFieldName);\n            rubberStampAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            rubberStampAnnotation.setAppearance(true);\n            page.annotations.add(rubberStampAnnotation);\n        }\n    };\n    FormFieldsBase.prototype.drawFieldPath = function (resultObjects, signatureFields, currentFieldName, signatureBounds) {\n        var stampObjects = JSON.parse(resultObjects);\n        var boundsObjects = JSON.parse(signatureBounds);\n        var page = signatureFields.page;\n        var pageNumber = 0;\n        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n            if (page === this.formFieldLoadedDocument.getPage(k)) {\n                break;\n            }\n            pageNumber++;\n        }\n        if (stampObjects.length > 0) {\n            var rotationAngle = this.GetRotateAngle(page.rotation);\n            var left = this.convertPixelToPoint(boundsObjects['x']);\n            var top_8 = this.convertPixelToPoint(boundsObjects['y']);\n            var width = this.convertPixelToPoint(boundsObjects['width']);\n            var height = this.convertPixelToPoint(boundsObjects['height']);\n            if (rotationAngle !== 0) {\n                left = this.convertPixelToPoint(signatureFields.bounds.x);\n                top_8 = this.convertPixelToPoint(signatureFields.bounds.y);\n                width = this.convertPixelToPoint(signatureFields.bounds.width);\n                height = this.convertPixelToPoint(signatureFields.bounds.height);\n            }\n            var minimumX = -1;\n            var minimumY = -1;\n            var maximumX = -1;\n            var maximumY = -1;\n            for (var p = 0; p < stampObjects.length; p++) {\n                var value = stampObjects[parseInt(p.toString(), 10)];\n                if (minimumX === -1) {\n                    minimumX = value.x;\n                    minimumY = value.y;\n                    maximumX = value.x;\n                    maximumY = value.y;\n                }\n                else {\n                    var point1 = value.x;\n                    var point2 = value.y;\n                    if (minimumX >= point1) {\n                        minimumX = point1;\n                    }\n                    if (minimumY >= point2) {\n                        minimumY = point2;\n                    }\n                    if (maximumX <= point1) {\n                        maximumX = point1;\n                    }\n                    if (maximumY <= point2) {\n                        maximumY = point2;\n                    }\n                }\n            }\n            var newDifferenceX = (maximumX - minimumX) / width;\n            var newDifferenceY = (maximumY - minimumY) / height;\n            var linePoints = [];\n            var isNewValues = 0;\n            if (rotationAngle !== 0) {\n                for (var j = 0; j < stampObjects.length; j++) {\n                    var value = stampObjects[parseInt(j.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && j !== 0) {\n                        isNewValues = j;\n                        break;\n                    }\n                    linePoints.push(parseFloat(value.x));\n                    linePoints.push(parseFloat(value.y));\n                }\n                linePoints = [];\n                for (var z = 0; z < stampObjects.length; z++) {\n                    var value = stampObjects[parseInt(z.toString(), 10)];\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - ((parseFloat(value.y) - minimumY) /\n                        newDifferenceY) - top_8);\n                }\n            }\n            else {\n                for (var k = 0; k < stampObjects.length; k++) {\n                    var value = stampObjects[parseInt(k.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && k !== 0) {\n                        isNewValues = k;\n                        break;\n                    }\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    var newX = ((parseFloat(value.y) - minimumY) / newDifferenceY);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - newX - top_8);\n                }\n            }\n            var inkAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfInkAnnotation([left, top_8, width, height], linePoints);\n            inkAnnotation.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfAnnotationFlag.print;\n            var bounds = { x: inkAnnotation.bounds.x, y: (page.size[1] -\n                    (inkAnnotation.bounds.y + inkAnnotation.bounds.height)), width: inkAnnotation.bounds.width,\n                height: inkAnnotation.bounds.height };\n            inkAnnotation.bounds = bounds;\n            inkAnnotation.border.width = 0;\n            linePoints = [];\n            if (rotationAngle !== 0) {\n                var pathCollection = [];\n                for (var t = isNewValues; t < stampObjects.length; t++) {\n                    var value = stampObjects[parseInt(t.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && t !== isNewValues) {\n                        pathCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push(parseFloat(value.x));\n                    linePoints.push(parseFloat(value.y));\n                }\n                if (linePoints.length > 0) {\n                    pathCollection.push(linePoints);\n                }\n                for (var w = 0; w < pathCollection.length; w++) {\n                    var pointsCollections = pathCollection[parseInt(w.toString(), 10)];\n                    linePoints = [];\n                    if (pointsCollections.length > 0) {\n                        for (var z = 0; z < stampObjects.length; z++) {\n                            var value = stampObjects[parseInt(z.toString(), 10)];\n                            linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                            linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] -\n                                ((parseFloat(value.y) - minimumY) / newDifferenceY) - top_8);\n                        }\n                        inkAnnotation.inkPointsCollection.push(linePoints);\n                    }\n                    linePoints = [];\n                }\n            }\n            else {\n                for (var r = 0; r < stampObjects.length; r++) {\n                    var value = stampObjects[parseInt(r.toString(), 10)];\n                    var path = value.command.toString();\n                    if (path === 'M' && r !== 0) {\n                        inkAnnotation.inkPointsCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push(((parseFloat(value.x) - minimumX) / newDifferenceX) + left);\n                    var newX = ((parseFloat(value.y) - minimumY) / newDifferenceY);\n                    linePoints.push(this.formFieldLoadedDocument.getPage(pageNumber).size[1] - newX - top_8);\n                }\n                if (linePoints.length > 0) {\n                    inkAnnotation.inkPointsCollection.push(linePoints);\n                }\n            }\n            inkAnnotation._dictionary.set('T', currentFieldName);\n            inkAnnotation.setAppearance(true);\n            this.formFieldLoadedDocument.getPage(pageNumber).annotations.add(inkAnnotation);\n        }\n    };\n    FormFieldsBase.prototype.addSigntureFieldItems = function (field) {\n        if (field instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfSignatureField) {\n            var signatureField = field;\n            if (signatureField.itemsCount > 0) {\n                for (var i = 0; i < signatureField.itemsCount; i++) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.itemAt(i).page)) {\n                        var item = signatureField.itemAt(i).page;\n                        var j = 0;\n                        for (var k = 0; k < this.formFieldLoadedDocument.pageCount; k++) {\n                            if (item === this.formFieldLoadedDocument.getPage(j)) {\n                                break;\n                            }\n                            j++;\n                        }\n                        this.addSignatureField(signatureField, j, signatureField.itemAt(i).bounds);\n                    }\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.addSignatureField = function (signatureField, index, bounds) {\n        var formFields = new PdfRenderedFields();\n        formFields.Name = 'SignatureField';\n        formFields.ToolTip = signatureField.toolTip;\n        formFields.FieldName = signatureField.name;\n        formFields.ActualFieldName = signatureField.name;\n        if (!bounds.IsEmpty) {\n            formFields.LineBounds = { X: bounds.x, Y: bounds.y, Width: bounds.width, Height: bounds.height };\n        }\n        else {\n            formFields.LineBounds = { X: signatureField.bounds.x, Y: signatureField.bounds.y,\n                Width: signatureField.bounds.width, Height: signatureField.bounds.height };\n        }\n        formFields.PageIndex = index;\n        formFields.TabIndex = signatureField.tabIndex;\n        formFields.BorderWidth = signatureField.border.width;\n        formFields.BorderStyle = signatureField.border.style;\n        formFields.IsReadonly = signatureField.readOnly;\n        formFields.IsRequired = signatureField.required;\n        formFields.Visible = signatureField.visibility;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signatureField.backColor)) {\n            formFields.BackColor = { R: signatureField.backColor[0], G: signatureField.backColor[1], B: signatureField.backColor[2] };\n        }\n        else if (formFields.IsReadonly) {\n            formFields.IsTransparent = true;\n        }\n        formFields.IsSignatureField = true;\n        formFields.Rotation = signatureField.rotationAngle;\n        formFields.RotationAngle = this.GetRotateAngle(signatureField.page.rotation);\n        var initialField = signatureField._dictionary.get('InitialField');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialField)) {\n            formFields.IsInitialField = initialField;\n        }\n        if (signatureField._dictionary.has('CustomData')) {\n            formFields.CustomData = JSON.parse(signatureField._dictionary.get('CustomData'));\n        }\n        this.PdfRenderedFormFields.push(formFields);\n    };\n    FormFieldsBase.prototype.retrieveInkAnnotation = function (loadedDocument) {\n        var count = 1;\n        for (var i = 0; i < loadedDocument.pageCount; i++) {\n            var loadedPage = loadedDocument.getPage(i);\n            var oldPageAnnotations = loadedPage.annotations;\n            var totalAnnotation = parseInt(oldPageAnnotations.count.toString(), 10);\n            for (var j = 0; j < totalAnnotation; j++) {\n                var annotation = oldPageAnnotations.at(j);\n                if (annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfInkAnnotation) {\n                    var outputstring = '';\n                    var inkAnnot = annotation;\n                    var inkListX = [];\n                    var inkListY = [];\n                    if (inkAnnot._dictionary.has('T') && !inkAnnot._dictionary.has('NM')) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkAnnot.inkPointsCollection)) {\n                            for (var m = 0; m < inkAnnot.inkPointsCollection.length; m++) {\n                                var inkList = inkAnnot.inkPointsCollection[parseInt(m.toString(), 10)];\n                                for (var k = 0; k < inkList.length; k += 2) {\n                                    var x = void 0;\n                                    var y = void 0;\n                                    if (loadedPage.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle90) {\n                                        x = inkList[k + 1];\n                                        y = inkList[parseInt(k.toString(), 10)];\n                                    }\n                                    else if (loadedPage.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle180) {\n                                        x = loadedPage.size[0] - inkList[k + 1];\n                                        y = inkList[k + 1];\n                                    }\n                                    else if (loadedPage.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRotationAngle.angle270) {\n                                        x = loadedPage.size[0] - inkList[k + 1];\n                                        y = loadedPage.size[1] - inkList[parseInt(k.toString(), 10)];\n                                    }\n                                    else {\n                                        x = inkList[parseInt(k.toString(), 10)];\n                                        y = loadedPage.size[1] - inkList[k + 1];\n                                    }\n                                    if (k === 0) {\n                                        outputstring += 'M' + x + ',' + y + ' ';\n                                    }\n                                    else {\n                                        outputstring += 'L' + x + ',' + y + ' ';\n                                    }\n                                    inkListX.push(x);\n                                    inkListY.push(y);\n                                }\n                            }\n                        }\n                        var formFields = new PdfRenderedFields();\n                        if (inkAnnot._dictionary.has('T')) {\n                            formFields.FieldName = inkAnnot._dictionary.get('T');\n                        }\n                        formFields.FieldName = formFields.FieldName + '_' + count;\n                        formFields.Name = 'ink';\n                        var rotationAngle = loadedPage.rotation;\n                        var isFieldRotated = false;\n                        if (annotation.rotationAngle !== 0) {\n                            isFieldRotated = true;\n                        }\n                        var bounds = { X: inkAnnot.bounds.x, Y: inkAnnot.bounds.y, Width: inkAnnot.bounds.width,\n                            Height: inkAnnot.bounds.height };\n                        formFields.LineBounds = this.getBounds(bounds, loadedPage.size[1], loadedPage.size[0], rotationAngle, !isFieldRotated);\n                        formFields.Value = outputstring;\n                        formFields.PageIndex = i;\n                        formFields.BorderColor = [inkAnnot.color[0], inkAnnot.color[1], inkAnnot.color[2]];\n                        formFields.Rotation = annotation.rotationAngle;\n                        this.PdfRenderedFormFields.push(formFields);\n                        count++;\n                    }\n                }\n                else if (annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFreeTextAnnotation) {\n                    var inkAnnot = annotation;\n                    if (inkAnnot._dictionary.has('T') && !inkAnnot._dictionary.has('NM') && !inkAnnot._dictionary.has('M')) {\n                        var formFields = new PdfRenderedFields();\n                        formFields.FieldName = inkAnnot._dictionary.get('T') + '_' + count;\n                        var bounds = { X: inkAnnot.bounds.x, Y: inkAnnot.bounds.y, Width: inkAnnot.bounds.width,\n                            Height: inkAnnot.bounds.height };\n                        formFields.LineBounds = bounds;\n                        formFields.Name = 'SignatureText';\n                        formFields.FontFamily = this.getFontFamilyString(inkAnnot.font._fontFamily);\n                        formFields.FontSize = this.convertPointtoPixel(inkAnnot.font.size);\n                        formFields.Value = inkAnnot.text;\n                        formFields.PageIndex = i;\n                        formFields.BorderColor = inkAnnot.borderColor;\n                        this.PdfRenderedFormFields.push(formFields);\n                        count++;\n                    }\n                }\n                else if (annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfRubberStampAnnotation) {\n                    var stampAnnotation = annotation;\n                    var pdfRenderedFormFields = [];\n                    for (var _i = 0, _a = this.PdfRenderedFormFields; _i < _a.length; _i++) {\n                        var formfield = _a[_i];\n                        if (formfield.ActualFieldName === stampAnnotation._dictionary._map.T) {\n                            pdfRenderedFormFields.push(formfield);\n                            break;\n                        }\n                    }\n                    if (stampAnnotation._dictionary.has('T') && !stampAnnotation._dictionary.has('NM') && !stampAnnotation._dictionary.has('M')\n                        && pdfRenderedFormFields.length > 0 && this.pdfViewerBase.isSignatureWithInRect(this.pdfViewerBase.canvasRectArray(pdfRenderedFormFields[0].LineBounds), this.pdfViewerBase.canvasRectArray(stampAnnotation.bounds))) {\n                        var formFields = new PdfRenderedFields();\n                        formFields.FieldName = stampAnnotation._dictionary.get('T') + '_' + count;\n                        var dictionary = annotation._dictionary.get('AP');\n                        var pageRender = new _index__WEBPACK_IMPORTED_MODULE_2__.PageRenderer(this.pdfViewer, this.pdfViewerBase);\n                        formFields.LineBounds = {\n                            X: stampAnnotation.bounds.x, Y: stampAnnotation.bounds.y,\n                            Width: stampAnnotation.bounds.width, Height: stampAnnotation.bounds.height\n                        };\n                        formFields.Name = 'SignatureImage';\n                        formFields.PageIndex = i;\n                        count++;\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dictionary)) {\n                            var pdfReference = annotation._dictionary.get('AP');\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfReference) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pdfReference.dictionary) && pdfReference.dictionary.has('N')) {\n                                var apDictionary = pdfReference.dictionary;\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(apDictionary)) {\n                                    pageRender.findStampImage(annotation);\n                                }\n                            }\n                        }\n                        else if (dictionary.has('N')) {\n                            var template = annotation.createTemplate();\n                            if (template.size[0] === 0 || template.size[1] === 0 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(template._appearance)) {\n                                pageRender.findStampImage(annotation);\n                            }\n                            else {\n                                formFields.PageIndex = i;\n                                pageRender.findStampTemplate(annotation, formFields, formFields.Rotation, pageRender.annotationOrder.length - 1, true, formFields.FieldName, this.PdfRenderedFormFields, formFields.PageIndex);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    FormFieldsBase.prototype.getFontFamilyString = function (fontFamily) {\n        switch (fontFamily) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.helvetica:\n                return 'Helvetica';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.timesRoman:\n                return 'Times New Roman';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.courier:\n                return 'Courier';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.symbol:\n                return 'Symbol';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily.zapfDingbats:\n                return 'ZapfDingbats';\n            default:\n                return 'Helvetica';\n        }\n    };\n    return FormFieldsBase;\n}());\n\n/**\n * @private\n */\nvar PdfRenderedFields = /** @class */ (function () {\n    function PdfRenderedFields() {\n        this.ActualFieldName = null;\n        this.FontColor = { R: 0, G: 0, B: 0 };\n        this.BackColor = { R: 0, G: 0, B: 0 };\n        this.BorderColor = { R: 0, G: 0, B: 0 };\n        this.CheckBoxGroupName = null;\n        this.Alignment = 0;\n        this.BorderStyle = 0;\n        this.BorderWidth = 0;\n        this.CheckBoxGroupName = null;\n        this.CheckBoxIndex = null;\n        this.ComboBoxList = [];\n        this.FieldName = null;\n        this.Font = null;\n        this.FontFamily = null;\n        this.FontSize = 0;\n        this.FontStyle = 0;\n        this.GroupName = null;\n        this.InsertSpaces = false;\n        this.IsAutoSize = false;\n        this.IsInitialField = false;\n        this.IsReadonly = false;\n        this.IsRequired = false;\n        this.IsSignatureField = false;\n        this.IsTransparent = false;\n        this.MaxLength = 0;\n        this.MultiSelect = false;\n        this.Multiline = false;\n        this.Name = null;\n        this.PageIndex = 0;\n        this.Rotation = 0;\n        this.RotationAngle = 0;\n        this.Selected = false;\n        this.SelectedList = [];\n        this.SelectedValue = null;\n        this.TabIndex = 0;\n        this.Text = null;\n        this.TextList = [];\n        this.ToolTip = null;\n        this.Value = null;\n        this.Visible = 0;\n        this.CustomData = null;\n    }\n    return PdfRenderedFields;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/form-fields-base.js?");

/***/ })

}]);