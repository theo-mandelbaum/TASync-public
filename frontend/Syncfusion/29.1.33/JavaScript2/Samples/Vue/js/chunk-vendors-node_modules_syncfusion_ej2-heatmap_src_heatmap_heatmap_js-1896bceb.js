"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-heatmap_src_heatmap_heatmap_js-1896bceb"],{

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/heatmap/heatmap.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/heatmap/heatmap.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeatMap: () => (/* binding */ HeatMap)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helper */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/helper.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./model/base */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/model/base.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/model/theme.js\");\n/* harmony import */ var _axis_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axis/axis */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/axis/axis.js\");\n/* harmony import */ var _axis_axis_helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./axis/axis-helpers */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/axis/axis-helpers.js\");\n/* harmony import */ var _series_series__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./series/series */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/series/series.js\");\n/* harmony import */ var _utils_colorMapping__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/colorMapping */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/colorMapping.js\");\n/* harmony import */ var _utils_tooltip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tooltip */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/tooltip.js\");\n/* harmony import */ var _datasource_twodimensional__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./datasource/twodimensional */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/datasource/twodimensional.js\");\n/* harmony import */ var _heatmap_legend_legend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../heatmap/legend/legend */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/legend/legend.js\");\n/* harmony import */ var _datasource_adaptor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./datasource/adaptor */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/datasource/adaptor.js\");\n/* harmony import */ var _heatmap_utils_export__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../heatmap/utils/export */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/export.js\");\n/**\n * Heat Map Component\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n// eslint-disable-next-line\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the heatmap control. This is used to customize the properties of the heatmap in order to visualize two-dimensional data, with values represented by gradient or solid color variations.\n * ```html\n * <div id=\"container\"/>\n * <script>\n *   var heatmapObj = new HeatMap();\n *   heatmapObj.appendTo(\"#container\");\n * </script>\n * ```\n */\nvar HeatMap = /** @class */ (function (_super) {\n    __extends(HeatMap, _super);\n    function HeatMap() {\n        /**\n         * Sets and gets the width of the heatmap. The width of the heatmap accepts pixel or percentage values given in string format.\n         *\n         * If specified as '100%, heatmap renders to the full width of its parent element.\n         *\n         * @default null\n         */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.enableCanvasRendering = false;\n        /** @private */\n        _this.isColorRange = false;\n        /** @private */\n        _this.isCellTapHold = false;\n        /** @private */\n        _this.selectedCellCount = 0;\n        /** @private */\n        _this.toggleValue = [];\n        /** @private */\n        _this.legendOnLoad = true;\n        /** @private */\n        _this.resizing = false;\n        /** @private */\n        _this.rendering = true;\n        /** @private */\n        _this.multiSelection = false;\n        /** @private */\n        _this.rectSelected = false;\n        /** @private */\n        _this.previousSelectedCellsRect = [];\n        /** @private */\n        _this.multiCellCollection = [];\n        /** @private */\n        _this.selectedMultiCellCollection = [];\n        /** @private */\n        _this.tempMultiCellCollection = [];\n        /**\n         * @private\n         */\n        _this.tooltipCollection = [];\n        /**\n         * @private\n         */\n        _this.isCellData = false;\n        return _this;\n    }\n    HeatMap.prototype.preRender = function () {\n        this.initPrivateVariable();\n        this.unWireEvents();\n        this.wireEvents();\n    };\n    /**\n     * This method is used to perform the export functionality for the heatmap.\n     *\n     * @param {ExportType} type - Specifies the type of the exported file.\n     * @param {string} fileName - Specifies the file name for the exported file.\n     * @param {PdfPageOrientation} orientation - Specifies the orientation for the exported PDF document.\n     */\n    HeatMap.prototype.export = function (type, fileName, orientation) {\n        var exportMap = new _heatmap_utils_export__WEBPACK_IMPORTED_MODULE_13__.ExportUtils(this);\n        exportMap.export(type, fileName, orientation);\n    };\n    HeatMap.prototype.initPrivateVariable = function () {\n        this.renderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        this.canvasRenderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer(this.element.id);\n        this.secondaryCanvasRenderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer(this.element.id + '_secondary');\n        this.heatMapAxis = new _axis_axis_helpers__WEBPACK_IMPORTED_MODULE_6__.AxisHelper(this);\n        this.heatMapSeries = new _series_series__WEBPACK_IMPORTED_MODULE_7__.Series(this);\n        this.drawSvgCanvas = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.DrawSvgCanvas(this);\n        this.twoDimensional = new _datasource_twodimensional__WEBPACK_IMPORTED_MODULE_10__.TwoDimensional(this);\n        this.cellColor = new _utils_colorMapping__WEBPACK_IMPORTED_MODULE_8__.CellColor(this);\n        this.tempRectHoverClass = '';\n        this.tempTooltipRectId = '';\n        this.setCulture();\n    };\n    /**\n     * Method to set culture for heatmap\n     */\n    HeatMap.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    };\n    HeatMap.prototype.render = function () {\n        this.horizontalGradient = this.legendSettings.position === 'Bottom' || this.legendSettings.position === 'Top';\n        this.updateBubbleHelperProperty();\n        this.trigger('load', { heatmap: this });\n        if (this.theme === 'TailwindDark' || this.theme === 'Tailwind') {\n            var textSettings = { title: { textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'Inter' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '14px', fontFamily: 'Inter' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: textSettings }, true);\n            this.setProperties({ yAxis: textSettings }, true);\n            this.setProperties({ cellSettings: { textStyle: { fontFamily: 'Inter' } } }, true);\n        }\n        if (this.theme === 'Tailwind3Dark' || this.theme === 'Tailwind3') {\n            var textSettings = { title: { textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '14px', fontFamily: 'Inter', fontWeight: '600' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: { title: { textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '400' } } }, true);\n            this.setProperties({ yAxis: { title: { textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '400' } } }, true);\n            this.setProperties({ cellSettings: { textStyle: { fontFamily: 'Inter', fontWeight: '400' } } }, true);\n        }\n        if (this.theme === 'Material3' || this.theme === 'Material3Dark') {\n            var textSettings = { title: { textStyle: { size: '14px', fontFamily: 'Roboto', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'Roboto', fontWeight: '400' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '16px', fontFamily: 'Roboto' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: textSettings }, true);\n            this.setProperties({ yAxis: textSettings }, true);\n            this.setProperties({ cellSettings: { textStyle: { fontFamily: 'Roboto', fontWeight: '400' } } }, true);\n        }\n        if (this.theme === 'Bootstrap5' || this.theme === 'Bootstrap5Dark') {\n            var textSettings = { title: { textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400' } }, textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '14px', fontFamily: 'Segoe UI', fontWeight: '400' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: textSettings }, true);\n            this.setProperties({ yAxis: textSettings }, true);\n            this.setProperties({ cellSettings: { textStyle: { size: '10px', fontWeight: '400', fontFamily: 'Segoe UI' } } }, true);\n        }\n        if (this.theme === 'Fluent' || this.theme === 'FluentDark') {\n            var textSettings = { title: { textStyle: { size: '12px', fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif', fontWeight: '500' } }, textStyle: { size: '12px', fontFamily: 'system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '16px', fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: textSettings }, true);\n            this.setProperties({ yAxis: textSettings }, true);\n            this.setProperties({ cellSettings: { textStyle: { fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif' } } }, true);\n        }\n        if (this.theme === 'Fluent2' || this.theme === 'Fluent2Dark' || this.theme === 'Fluent2HighContrast') {\n            var textSettings = { title: { textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400' } }, textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400' } };\n            this.setProperties({ titleSettings: { textStyle: { size: '14px', fontFamily: 'Segoe UI', fontWeight: '600' } } }, true);\n            this.setProperties({ legendSettings: textSettings }, true);\n            this.setProperties({ xAxis: textSettings }, true);\n            this.setProperties({ yAxis: textSettings }, true);\n            this.setProperties({ cellSettings: { textStyle: { size: '10px', fontWeight: '400', fontFamily: 'Segoe UI' } } }, true);\n        }\n        this.initAxis();\n        this.processInitData();\n        this.setTheme();\n        this.calculateMaxLength();\n        this.heatMapAxis.calculateVisibleLabels();\n        this.twoDimensional.processDataSource(this.completeAdaptDataSource);\n        this.createSvg();\n        this.cellColor.getColorCollection();\n        this.calculateBounds();\n        this.renderElements();\n        this.appendSvgObject();\n        if (this.tooltipModule) {\n            this.tooltipModule.showHideTooltip(false);\n        }\n        this.renderComplete();\n    };\n    /**\n     * To re-calculate the datasource while changing datasource property dynamically.\n     *\n     * @private\n     */\n    HeatMap.prototype.reRenderDatasource = function () {\n        this.dataSourceMinValue = null;\n        this.dataSourceMaxValue = null;\n        this.processInitData();\n        this.calculateMaxLength();\n        this.heatMapAxis.calculateVisibleLabels();\n        this.twoDimensional.processDataSource(this.completeAdaptDataSource);\n        this.cellColor.getColorCollection();\n        this.calculateBounds();\n    };\n    /**\n     * To process datasource property.\n     *\n     * @private\n     */\n    HeatMap.prototype.processInitData = function () {\n        if (this.adaptorModule) {\n            this.adaptorModule.constructDatasource(this.dataSource, this.dataSourceSettings);\n        }\n        else {\n            this.completeAdaptDataSource = this.dataSource;\n        }\n    };\n    /**\n     * To set render mode of heatmap as SVG or Canvas.\n     *\n     * @private\n     */\n    HeatMap.prototype.setRenderMode = function () {\n        if (this.renderingMode === 'Canvas') {\n            this.enableCanvasRendering = true;\n        }\n        else if (this.renderingMode === 'Auto' &&\n            (this.axisCollections[0].axisLabelSize * this.axisCollections[1].axisLabelSize) >= 10000) {\n            this.enableCanvasRendering = true;\n        }\n        else {\n            this.enableCanvasRendering = false;\n        }\n    };\n    /**\n     * To set bubble helper private property.\n     *\n     * @private\n     */\n    HeatMap.prototype.updateBubbleHelperProperty = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule) || (this.cellSettings.tileType === 'Bubble' &&\n            (this.cellSettings.bubbleType === 'Size' || this.cellSettings.bubbleType === 'Sector'))) {\n            this.legendVisibilityByCellType = false;\n        }\n        else if (this.legendModule && this.legendSettings.visible) {\n            this.legendVisibilityByCellType = true;\n        }\n        if (this.cellSettings.tileType === 'Bubble' && this.cellSettings.bubbleType === 'SizeAndColor') {\n            this.bubbleSizeWithColor = true;\n        }\n        else {\n            this.bubbleSizeWithColor = false;\n        }\n    };\n    HeatMap.prototype.renderElements = function () {\n        this.tooltipCollection = [];\n        this.renderSecondaryElement();\n        this.renderBorder();\n        this.renderTitle();\n        this.heatMapAxis.renderAxes();\n        if (this.tooltipModule && this.showTooltip) {\n            this.tooltipModule.tooltipObject = null;\n            this.tooltipModule.createTooltipDiv(this);\n        }\n        this.heatMapSeries.renderRectSeries();\n        if (this.legendModule && this.legendSettings.visible\n            && this.legendVisibilityByCellType) {\n            this.legendModule.renderLegendItems();\n            if (this.paletteSettings.type === 'Fixed' && this.legendSettings.enableSmartLegend &&\n                this.legendSettings.labelDisplayType === 'None') {\n                this.legendModule.createTooltipDiv();\n            }\n        }\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeMeasureElement)();\n    };\n    /**\n     * Get component name\n     *\n     * @private\n     */\n    HeatMap.prototype.getModuleName = function () {\n        return 'heatmap';\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @private\n     */\n    HeatMap.prototype.getPersistData = function () {\n        return '';\n    };\n    /**\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    HeatMap.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var renderer = false;\n        var refreshBounds = false;\n        var isUpdateSelection = true;\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'renderingMode':\n                    this.rendering = false;\n                    isUpdateSelection = false;\n                    renderer = true;\n                    break;\n                case 'cellSettings':\n                    this.updateBubbleHelperProperty();\n                    if (this.legendModule && ((newProp.cellSettings.tileType !== (oldProp.cellSettings\n                        !== undefined && oldProp.cellSettings.tileType))\n                        || (newProp.cellSettings.bubbleType !== oldProp.cellSettings.bubbleType))) {\n                        this.legendOnLoad = true;\n                        this.legendModule.updateLegendRangeCollections();\n                    }\n                    if (this.cellSettings.tileType === 'Bubble') {\n                        isUpdateSelection = false;\n                    }\n                    this.reRenderDatasource();\n                    refreshBounds = true;\n                    break;\n                case 'showTooltip':\n                    refreshBounds = true;\n                    break;\n                case 'dataSource':\n                case 'dataSourceSettings':\n                    this.isCellData = false;\n                    this.paletteCellSelectionUpdation();\n                    this.reRenderDatasource();\n                    isUpdateSelection = false;\n                    renderer = true;\n                    break;\n                case 'titleSettings':\n                case 'width':\n                case 'height':\n                case 'margin':\n                case 'backgroundColor':\n                    refreshBounds = true;\n                    break;\n                case 'legendSettings':\n                    this.updateBubbleHelperProperty();\n                    if (this.legendModule && this.legendVisibilityByCellType && (((newProp.legendSettings.visible !==\n                        (oldProp.legendSettings !== undefined && oldProp.legendSettings.visible)) ||\n                        (newProp.legendSettings.enableSmartLegend !== oldProp.legendSettings.enableSmartLegend)))) {\n                        this.legendOnLoad = true;\n                        this.legendModule.updateLegendRangeCollections();\n                    }\n                    else {\n                        this.legendOnLoad = false;\n                    }\n                    refreshBounds = true;\n                    break;\n                case 'yAxis':\n                case 'xAxis':\n                    this.paletteCellSelectionUpdation();\n                    this.reRenderDatasource();\n                    isUpdateSelection = false;\n                    refreshBounds = true;\n                    break;\n                case 'paletteSettings':\n                    this.paletteCellSelectionUpdation();\n                    this.twoDimensional.processDataSource(this.completeAdaptDataSource);\n                    this.cellColor.getColorCollection();\n                    this.calculateBounds();\n                    renderer = true;\n                    break;\n                case 'theme':\n                    this.setTheme();\n                    renderer = true;\n                    break;\n                case 'tooltipSettings':\n                    if (this.tooltipModule) {\n                        this.tooltipModule.tooltipObject.fill = this.tooltipSettings.fill;\n                        this.tooltipModule.tooltipObject.border = this.tooltipSettings.border;\n                        this.tooltipModule.tooltipObject.textStyle = this.tooltipSettings.textStyle;\n                        this.tooltipModule.tooltipObject.template = this.tooltipSettings.template;\n                        this.tooltipModule.tooltipObject.refresh();\n                    }\n                    break;\n            }\n        }\n        if (!refreshBounds && renderer) {\n            this.createSvg();\n            this.renderElements();\n            this.appendSvgObject();\n            this.trigger('created');\n            if (!isUpdateSelection) {\n                this.clearSelection();\n            }\n        }\n        else if (refreshBounds) {\n            this.createSvg();\n            this.refreshBound();\n            this.appendSvgObject();\n            this.trigger('created');\n        }\n        if (this.allowSelection && this.rectSelected) {\n            if (isUpdateSelection) {\n                this.updateCellSelection();\n            }\n            else {\n                this.clearSelection();\n            }\n        }\n        this.rendering = true;\n    };\n    HeatMap.prototype.paletteCellSelectionUpdation = function () {\n        this.updateBubbleHelperProperty();\n        if (this.legendModule && this.legendVisibilityByCellType) {\n            this.legendOnLoad = true;\n            this.legendModule.updateLegendRangeCollections();\n        }\n    };\n    /**\n     * create svg or canvas element\n     *\n     * @private\n     */\n    HeatMap.prototype.createSvg = function () {\n        this.removeSvg();\n        this.setRenderMode();\n        this.calculateSize();\n        if (!this.enableCanvasRendering) {\n            this.svgObject = this.renderer.createSvg({\n                id: this.element.id + '_svg',\n                width: this.availableSize.width,\n                height: this.availableSize.height\n            });\n            if (this.cellSettings.border.width.toString() === '0' && this.cellSettings.tileType === 'Rect') {\n                this.svgObject.setAttribute('shape-rendering', 'crispEdges');\n            }\n        }\n        else {\n            this.svgObject = this.canvasRenderer.createCanvas({\n                id: this.element.id + '_canvas',\n                width: this.availableSize.width,\n                height: this.availableSize.height\n            });\n            if (this.allowSelection) {\n                this.createMultiCellDiv(true);\n            }\n        }\n    };\n    /**\n     *  To Remove the SVG.\n     *\n     * @private\n     */\n    HeatMap.prototype.removeSvg = function () {\n        if (document.getElementById(this.element.id + '_Secondary_Element')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + '_Secondary_Element'));\n        }\n        if (document.getElementById(this.element.id + 'Celltooltipcontainer')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + 'Celltooltipcontainer'));\n        }\n        if (document.getElementById(this.element.id + 'legendLabelTooltipContainer')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + 'legendLabelTooltipContainer'));\n        }\n        if (document.getElementById(this.element.id + '_Multi_CellSelection_Canvas')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + '_Multi_CellSelection_Canvas'));\n        }\n        if (document.getElementById(this.element.id + '_CellSelection_Container')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + '_CellSelection_Container'));\n        }\n        if (document.getElementById(this.element.id + '_secondary_canvas')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.element.id + '_secondary_canvas'));\n        }\n        if (this.svgObject) {\n            var svgElement = document.getElementById(this.svgObject.id);\n            if (svgElement) {\n                while (this.svgObject.childNodes.length) {\n                    this.svgObject.removeChild(this.svgObject.firstChild);\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n    };\n    HeatMap.prototype.renderSecondaryElement = function () {\n        var tooltipDiv = this.createElement('div');\n        tooltipDiv.id = this.element.id + '_Secondary_Element';\n        this.element.appendChild(tooltipDiv);\n        var divElement = this.createElement('div', {\n            id: this.element.id + '_CellSelection_Container'\n        });\n        divElement.style.cssText = 'position:absolute; z-index: 2 ; top:' + this.initialClipRect.y + 'px' + '; left:' + this.initialClipRect.x + 'px';\n        this.element.appendChild(divElement);\n    };\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]}\n     * @private\n     */\n    HeatMap.prototype.requiredModules = function () {\n        var modules = [];\n        if (this.showTooltip) {\n            modules.push({\n                member: 'Tooltip',\n                args: [this],\n                name: 'Tooltip'\n            });\n        }\n        if (this.legendSettings.visible) {\n            modules.push({\n                member: 'Legend',\n                args: [this],\n                name: 'Legend'\n            });\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSourceSettings) && ((this.dataSourceSettings.adaptorType === 'Table' && this.dataSourceSettings.isJsonData) || this.dataSourceSettings.adaptorType === 'Cell')) {\n            modules.push({\n                member: 'Adaptor',\n                args: [this],\n                name: 'Adaptor'\n            });\n        }\n        return modules;\n    };\n    /**\n     * This method destroys the heatmap. This method removes the events associated with the heatmap and disposes the objects created for rendering and updating the heatmap.\n     * {% codeBlock src='heatmap/destroy/index.md' %}{% endcodeBlock %}\n     *\n     * @function destroy\n     * @returns {void}.\n     * @member of Heatmap\n     */\n    HeatMap.prototype.destroy = function () {\n        this.unWireEvents();\n        this.touchInstance.destroy();\n        this.touchInstance = null;\n        for (var i = 0; i < this.axisCollections.length; i++) {\n            this.axisCollections[i].destroy();\n        }\n        this.axisCollections = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.heatMapSeries)) {\n            this.heatMapSeries.destroy();\n        }\n        this.heatMapSeries = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.heatMapAxis)) {\n            this.heatMapAxis.destroy();\n        }\n        this.heatMapAxis = null;\n        _super.prototype.destroy.call(this);\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeMeasureElement)();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.twoDimensional)) {\n            this.twoDimensional.destroy();\n        }\n        this.twoDimensional = null;\n        this.element.innerHTML = '';\n        this.availableSize = null;\n        this.elementSize = null;\n        this.initialClipRect = null;\n        this.element.classList.remove('e-heatmap');\n        this.drawSvgCanvas = null;\n        this.cellColor = null;\n        this.colorCollection = null;\n        this.legendColorCollection = null;\n        this.clonedDataSource = null;\n        this.completeAdaptDataSource = null;\n        this.currentRect = null;\n        this.dataMax = null;\n        this.dataMin = null;\n        this.previousRect = null;\n        this.selectedCellsRect = null;\n        this.canvasSelectedCells = null;\n        this.titleRect = null;\n        this.tooltipCollection = null;\n        this.border = null;\n        this.intl = null;\n        this.titleCollection = null;\n        this.themeStyle = null;\n        this.renderer = null;\n        this.canvasRenderer = null;\n        this.secondaryCanvasRenderer = null;\n        this.svgObject = null;\n        this.resizeEvent = null;\n        this.toggleValue = [];\n        this.previousSelectedCellsRect = [];\n        this.selectedMultiCellCollection = [];\n        this.tempMultiCellCollection = [];\n    };\n    /**\n     * Applies all the pending property changes and render the component again.\n     *\n     * @function destroy\n     * @returns {void}.\n     */\n    HeatMap.prototype.refresh = function () {\n        _super.prototype.refresh.call(this);\n        this.element.classList.add('e-heatmap');\n    };\n    /**\n     * Appending svg object to the element\n     *\n     * @private\n     */\n    HeatMap.prototype.appendSvgObject = function () {\n        this.element.appendChild(this.svgObject);\n        if (this.enableCanvasRendering && this.allowSelection) {\n            this.createMultiCellDiv(false);\n        }\n    };\n    HeatMap.prototype.renderBorder = function () {\n        this.border = {\n            width: 0\n        };\n        var background = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.backgroundColor) ? this.backgroundColor : this.themeStyle.background;\n        var width = 0;\n        var rect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.RectOption(this.element.id + '_HeatmapBorder', background, this.border, 1, new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(width / 2, width / 2, this.availableSize.width - width, this.availableSize.height - width));\n        this.drawSvgCanvas.drawRectangle(rect, this.svgObject);\n    };\n    HeatMap.prototype.calculateSize = function () {\n        var width = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.width, this.element.offsetWidth) || this.element.offsetWidth || 600;\n        var height = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.stringToNumber)(this.height, this.element.offsetHeight) || this.element.offsetHeight || 450;\n        this.availableSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Size(width, height);\n        var alignElement = this.element;\n        while (alignElement.parentNode) {\n            if (alignElement.tagName === 'BODY') {\n                break;\n            }\n            var align = alignElement.align;\n            if (align === 'center') {\n                var containerWidth = this.availableSize.width.toString();\n                this.element.style.width = containerWidth + 'px';\n                this.element.style.margin = '0 auto';\n                break;\n            }\n            alignElement = alignElement.parentElement;\n        }\n    };\n    HeatMap.prototype.renderTitle = function () {\n        if (this.titleSettings.text) {\n            var titleStyle = this.titleSettings.textStyle;\n            var anchor = titleStyle.textAlignment === 'Near' ? 'start' :\n                titleStyle.textAlignment === 'Far' ? 'end' : 'middle';\n            this.elementSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.measureText)(this.titleCollection[0], titleStyle);\n            var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.TextOption(this.element.id + '_HeatmapTitle', new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.TextBasic((0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.titlePositionX)(this.availableSize.width - this.margin.left - this.margin.right, this.margin.left, this.margin.right, titleStyle), this.margin.top + ((this.elementSize.height) * 3 / 4), anchor, this.titleCollection), titleStyle, titleStyle.color || this.themeStyle.heatMapTitle);\n            if (this.titleCollection.length > 1) {\n                this.drawSvgCanvas.createWrapText(options, titleStyle, this.svgObject);\n            }\n            else {\n                this.drawSvgCanvas.createText(options, this.svgObject, this.titleCollection[0]);\n                if (this.titleCollection[0].indexOf('...') !== -1 && this.enableCanvasRendering) {\n                    this.tooltipCollection.push(new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.CanvasTooltip(this.titleSettings.text, new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(this.margin.left, this.margin.top, this.elementSize.width, this.elementSize.height)));\n                }\n            }\n        }\n    };\n    HeatMap.prototype.titleTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        if ((targetId === (this.element.id + '_HeatmapTitle')) && (event.target.textContent.indexOf('...') > -1)) {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.showTooltip)(this.titleSettings.text, x, y, this.element.offsetWidth, this.element.id + '_Title_Tooltip', (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element'), isTouch, this);\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_Title_Tooltip');\n        }\n    };\n    // eslint-disable-next-line\n    HeatMap.prototype.axisTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        if ((targetId.indexOf(this.element.id + '_XAxis_Label') !== -1) ||\n            (targetId.indexOf(this.element.id + '_YAxis_Label') !== -1) ||\n            (targetId.indexOf(this.element.id + '_XAxis_MultiLevel') !== -1) ||\n            (targetId.indexOf(this.element.id + '_YAxis_MultiLevel') !== -1)) {\n            var tooltipText = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTooltipText)(this.tooltipCollection, x, y);\n            if (tooltipText) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.showTooltip)(tooltipText, x, y, this.element.offsetWidth, this.element.id + '_axis_Tooltip', (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element'), this.isTouch, this);\n            }\n            else {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_axis_Tooltip');\n            }\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_axis_Tooltip');\n        }\n    };\n    HeatMap.prototype.isHeatmapRect = function (x, y) {\n        var firstRectDetails = [];\n        var lastRectDetails = [];\n        var isRect;\n        var borderBoundary = 5;\n        if (this.heatMapSeries.rectPositionCollection.length > 0) {\n            firstRectDetails.push(this.heatMapSeries.rectPositionCollection[0][0]);\n            lastRectDetails.push(this.heatMapSeries.rectPositionCollection[this.yLength - 1][this.xLength - 1]);\n        }\n        if (firstRectDetails.length > 0 && lastRectDetails.length > 0) {\n            if (this.cellSettings.border.width > borderBoundary && (x >= firstRectDetails[0].x && y >= firstRectDetails[0].y &&\n                x <= (lastRectDetails[0].x + lastRectDetails[0].width) &&\n                y <= (lastRectDetails[0].y + lastRectDetails[0].height)) && this.cellSettings.tileType === 'Rect') {\n                var currentRect = this.heatMapSeries.getCurrentRect(x, y);\n                var rectHeight = lastRectDetails[0].height;\n                var rectWidth = lastRectDetails[0].width;\n                var cellBorder = this.cellSettings.border.width / 2;\n                if ((x >= (currentRect.x + cellBorder) && (y >= (currentRect.y + cellBorder)) &&\n                    (x <= (currentRect.x + (rectWidth - cellBorder)) &&\n                        (y <= (currentRect.y + (rectHeight - cellBorder)))))) {\n                    isRect = true;\n                    this.isRectBoundary = true;\n                }\n                else {\n                    isRect = false;\n                    this.isRectBoundary = false;\n                }\n            }\n            else {\n                isRect = (x >= firstRectDetails[0].x && y >= firstRectDetails[0].y &&\n                    x <= (lastRectDetails[0].x + lastRectDetails[0].width) &&\n                    y <= (lastRectDetails[0].y + lastRectDetails[0].height));\n                this.isRectBoundary = isRect;\n            }\n        }\n        return isRect;\n    };\n    HeatMap.prototype.setTheme = function () {\n        /*! Set theme */\n        this.themeStyle = (0,_model_theme__WEBPACK_IMPORTED_MODULE_4__.getThemeColor)(this.theme);\n    };\n    HeatMap.prototype.calculateBounds = function () {\n        var margin = this.margin;\n        // Title Height;\n        var titleHeight = 0;\n        var padding = (this.legendModule && this.legendSettings.position === 'Top'\n            && this.legendVisibilityByCellType) || this.titleSettings.textStyle.size === '0px' ? 0 : 16; // title padding\n        var left = margin.left;\n        var width = this.availableSize.width - left - margin.right;\n        if ((this.paletteSettings.colorGradientMode === 'Column' || this.paletteSettings.colorGradientMode === 'Row') &&\n            this.paletteSettings.type === 'Gradient') {\n            if (this.paletteSettings.palette.length === 0) {\n                this.legendVisibilityByCellType = false;\n            }\n            else {\n                for (var i = 0; i < this.paletteSettings.palette.length; i++) {\n                    if (this.paletteSettings.palette[i].value !== null || '') {\n                        this.legendVisibilityByCellType = true;\n                    }\n                    else if (this.paletteSettings.palette[i].value === null || '') {\n                        this.legendVisibilityByCellType = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.titleSettings.text) {\n            var titleText = this.enableHtmlSanitizer ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.titleSettings.text) :\n                this.titleSettings.text;\n            this.titleCollection = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTitle)(titleText, this.titleSettings.textStyle, width);\n            titleHeight = ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.measureText)(titleText, this.titleSettings.textStyle).height * this.titleCollection.length) +\n                padding;\n        }\n        var top = margin.top + titleHeight;\n        this.titleRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(margin.left, margin.top, this.availableSize.width - margin.left - margin.right, titleHeight);\n        var height = this.availableSize.height - top - margin.bottom;\n        this.initialClipRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(left, top, width, height);\n        var legendTop = this.initialClipRect.y;\n        if (this.legendModule && this.legendSettings.visible && this.legendVisibilityByCellType) {\n            this.legendModule.calculateLegendBounds(this.initialClipRect);\n        }\n        this.heatMapAxis.measureAxis(this.initialClipRect);\n        if (this.legendModule && this.legendSettings.visible && this.legendVisibilityByCellType) {\n            this.legendModule.calculateLegendSize(this.initialClipRect, legendTop);\n        }\n        this.heatMapAxis.calculateAxisSize(this.initialClipRect);\n    };\n    HeatMap.prototype.refreshBound = function () {\n        this.updateBubbleHelperProperty();\n        this.calculateBounds();\n        this.renderElements();\n    };\n    HeatMap.prototype.initAxis = function () {\n        var axis;\n        var axes = [this.xAxis, this.yAxis];\n        this.axisCollections = [];\n        for (var i = 0, len = axes.length; i < len; i++) {\n            axis = axes[i];\n            axis.orientation = (i === 0) ? 'Horizontal' : 'Vertical';\n            axis.jsonCellLabel = [];\n            this.axisCollections.push(axis);\n        }\n    };\n    /**\n     * Method to bind events for HeatMap\n     */\n    HeatMap.prototype.wireEvents = function () {\n        var _this = this;\n        /*! Find the Events type */\n        // eslint-disable-next-line\n        var isIE11Pointer = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer;\n        var start = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var stop = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var move = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? start : 'click', this.heatMapMouseClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.heatMapMouseRightClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'dblclick', this.heatMapMouseDoubleClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, start, this.heatMapMouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, stop, this.heatMapMouseLeave, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, move, this.heatMapMouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, cancel, this.heatMapMouseLeave, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.heatMapKeyUp, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.heatMapKeyDown, this);\n        this.resizeEvent = this.heatMapResize.bind(this);\n        window.addEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeEvent);\n        // eslint-disable-next-line\n        var heatmap = this;\n        /**\n         * Support for touch tapHold and tap for HeatMap\n         */\n        this.touchInstance = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {\n            tapHold: function (e) {\n                var targetId = e.originalEvent.target.id;\n                if ((targetId.indexOf(_this.element.id + '_HeatMapRect_') !== -1 || targetId.indexOf(_this.element.id + '_HeatMapRectLabels_') !== -1) && _this.allowSelection) {\n                    heatmap.isCellTapHold = true;\n                    var selectedCellCollection = [];\n                    for (var i = 0; i < _this.multiCellCollection.length; i++) {\n                        selectedCellCollection.push(_this.multiCellCollection[i]);\n                    }\n                    if (!e.originalEvent.ctrlKey || !_this.enableMultiSelect) {\n                        _this.multiCellCollection = [];\n                    }\n                    heatmap.getDataCollection();\n                    var argData = {\n                        heatmap: heatmap,\n                        cancel: false,\n                        name: 'cellSelected',\n                        data: heatmap.multiCellCollection\n                    };\n                    heatmap.trigger('cellSelected', argData);\n                    if (!argData.cancel) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if (e.ctrlKey === false || !_this.enableMultiSelect) {\n                            _this.removeSelectedCellsBorder(false);\n                        }\n                        heatmap.currentRect.allowCollection = false;\n                    }\n                    else {\n                        _this.multiCellCollection = selectedCellCollection;\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if (_this.multiCellCollection.length > 0 || e.ctrlKey === false || !_this.enableMultiSelect) {\n                            _this.removeSelectedCellsBorder(true);\n                        }\n                    }\n                    heatmap.setCellOpacity();\n                    window.clearTimeout(_this.tooltipTimer);\n                    heatmap.tooltipOnMouseMove(null, heatmap.currentRect, heatmap.isCellTapHold);\n                }\n            },\n            // eslint-disable-next-line @typescript-eslint/tslint/config\n            tap: function (e) {\n                var targetId = e.originalEvent.target.id;\n                if ((targetId.indexOf(_this.element.id + '_HeatMapRect_') !== -1 || targetId.indexOf(_this.element.id + '_HeatMapRectLabels_') !== -1 || targetId.indexOf(_this.element.id + '_CellSelection_Container_') !== -1)) {\n                    var isCellTap = false;\n                    if (!heatmap.isCellTapHold) {\n                        isCellTap = true;\n                    }\n                    var pageX = void 0;\n                    var pageY = void 0;\n                    var touchArg = void 0;\n                    var elementRect = _this.element.getBoundingClientRect();\n                    if (e.originalEvent.type === 'touchend' || e.originalEvent.type === 'touchstart') {\n                        _this.isTouch = true;\n                        touchArg = e.originalEvent;\n                        pageX = touchArg.changedTouches[0].clientX;\n                        pageY = touchArg.changedTouches[0].clientY;\n                    }\n                    else {\n                        _this.isTouch = false;\n                        pageX = e.originalEvent.clientX;\n                        pageY = e.originalEvent.clientY;\n                    }\n                    pageX -= elementRect.left;\n                    pageY -= elementRect.top;\n                    var currentRect = _this.heatMapSeries.getCurrentRect(pageX, pageY);\n                    window.clearTimeout(_this.tooltipTimer);\n                    heatmap.tooltipOnMouseMove(null, currentRect, isCellTap);\n                }\n            }\n        });\n        this.setStyle(this.element);\n    };\n    /**\n     * Applying styles for heatmap element\n     */\n    HeatMap.prototype.setStyle = function (element) {\n        element.style.touchAction = 'element';\n        element.style.touchAction = 'element';\n        element.style.zoom = 'none';\n        element.style.userSelect = 'none';\n        element.style.webkitUserSelect = 'none';\n        element.style.position = 'relative';\n        element.style.display = 'block';\n    };\n    /**\n     * This method is used to print the rendered heatmap.\n     */\n    HeatMap.prototype.print = function () {\n        var exportChart = new _heatmap_utils_export__WEBPACK_IMPORTED_MODULE_13__.ExportUtils(this);\n        exportChart.print();\n    };\n    /**\n     * Method to unbind events for HeatMap\n     */\n    HeatMap.prototype.unWireEvents = function () {\n        /*! Find the Events type */\n        // eslint-disable-next-line\n        var isIE11Pointer = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer;\n        var start = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var stop = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var move = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? start : 'click', this.heatMapMouseClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.heatMapMouseRightClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'dblclick', this.heatMapMouseDoubleClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, start, this.heatMapMouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, stop, this.heatMapMouseLeave);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, move, this.heatMapMouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, cancel, this.heatMapMouseLeave);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.heatMapKeyUp);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.heatMapKeyDown);\n        window.removeEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeEvent);\n    };\n    /**\n     * Handles the heatmap resize.\n     *\n     * @returns {boolean}\n     * @private\n     */\n    // eslint-disable-next-line\n    HeatMap.prototype.heatMapResize = function (e) {\n        var _this = this;\n        this.resizing = true;\n        var argData = {\n            heatmap: this,\n            cancel: false,\n            name: 'resized',\n            currentSize: new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Size(0, 0),\n            previousSize: new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Size(this.availableSize.width, this.availableSize.height)\n        };\n        if (this.resizeTimer) {\n            clearTimeout(this.resizeTimer);\n        }\n        this.resizeTimer = setTimeout(function () {\n            if (_this.isDestroyed) {\n                clearTimeout(_this.resizeTimer);\n                return;\n            }\n            _this.createSvg();\n            argData.currentSize = _this.availableSize;\n            _this.trigger('resized', argData);\n            _this.refreshBound();\n            _this.appendSvgObject();\n            if (_this.allowSelection) {\n                _this.updateCellSelection();\n            }\n            _this.trigger('loaded', ({ heatmap: _this }));\n            _this.resizing = false;\n        }, 500);\n        return false;\n    };\n    /**\n     * Method to bind selection after window resize for HeatMap\n     */\n    HeatMap.prototype.updateCellSelection = function () {\n        var wSize = this.initialClipRect.width / this.axisCollections[0].axisLabelSize;\n        var hSize = this.initialClipRect.height / this.axisCollections[1].axisLabelSize;\n        var x = this.initialClipRect.x;\n        var y = this.initialClipRect.y;\n        if (!this.enableCanvasRendering) {\n            if (this.multiCellCollection.length !== 0) {\n                var containersRect = document.getElementById(this.element.id + '_Container_RectGroup');\n                var containerText = document.getElementById(this.element.id + '_Container_TextGroup');\n                for (var i = 0; i < containersRect.childNodes.length; i++) {\n                    containersRect.childNodes[i].setAttribute('opacity', '0.3');\n                    if (this.cellSettings.showLabel && containerText.childNodes[i]) {\n                        containerText.childNodes[i].setAttribute('opacity', '0.3');\n                    }\n                }\n                for (var i = 0; i < this.multiCellCollection.length; i++) {\n                    var collectionClass = this.multiCellCollection[i].cellElement;\n                    var cellIndex = collectionClass.id.replace(this.element.id + '_HeatMapRect_', '');\n                    var index = parseInt(cellIndex, 10);\n                    containersRect.childNodes[index].setAttribute('opacity', '1');\n                    if (this.cellSettings.showLabel && containerText.childNodes[i]) {\n                        var getText = document.getElementById(this.element.id + '_HeatMapRectLabels_' + index);\n                        if (getText) {\n                            getText.setAttribute('opacity', '1');\n                        }\n                        this.addSvgClass(containersRect.childNodes[index]);\n                    }\n                }\n            }\n        }\n        else if (this.enableCanvasRendering) {\n            var rect = this.multiCellCollection;\n            var oldCanvas = document.getElementById(this.element.id + '_canvas');\n            var newCanvas = document.getElementById(this.element.id + '_secondary_canvas');\n            var initialRect = this.initialClipRect;\n            var rectHeight = initialRect.y + initialRect.height;\n            var rectWidth = initialRect.x + initialRect.width;\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                this.multiCellCollection[i].width = rect[i].width = wSize;\n                this.multiCellCollection[i].height = rect[i].height = hSize;\n                this.multiCellCollection[i].x = rect[i].x = x + wSize * this.multiCellCollection[i].xPosition;\n                this.multiCellCollection[i].y = rect[i].y = y + hSize * this.multiCellCollection[i].yPosition;\n                var rectImage = oldCanvas.getContext('2d').getImageData(rect[i].x, rect[i].y, rect[i].width, rect[i].height);\n                newCanvas.getContext('2d').putImageData(rectImage, rect[i].x, rect[i].y);\n                oldCanvas.style.opacity = '0.3';\n            }\n            var topPositions = oldCanvas.getContext('2d').getImageData(0, 0, this.availableSize.width, initialRect.y);\n            newCanvas.getContext('2d').putImageData(topPositions, 0, 0);\n            var bottomPositions = oldCanvas.getContext('2d').getImageData(0, rectHeight, this.availableSize.width, this.availableSize.height - rectHeight);\n            newCanvas.getContext('2d').putImageData(bottomPositions, 0, initialRect.y + initialRect.height);\n            var rightPosition = oldCanvas.getContext('2d').\n                getImageData(rectWidth, 0, this.availableSize.width - rectWidth, this.availableSize.height);\n            newCanvas.getContext('2d').putImageData(rightPosition, rectWidth, 0);\n            var leftPosition = oldCanvas.getContext('2d').getImageData(0, 0, initialRect.x, this.availableSize.height);\n            newCanvas.getContext('2d').putImageData(leftPosition, 0, 0);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_selectedCells');\n        }\n    };\n    HeatMap.prototype.clearSVGSelection = function () {\n        var rect = document.getElementById(this.element.id + '_Container_RectGroup');\n        var text = document.getElementById(this.element.id + '_Container_TextGroup');\n        for (var i = 0; i < rect.childNodes.length; i++) {\n            var elementClassName = rect.childNodes[i].getAttribute('class');\n            if (elementClassName === this.element.id + '_selected') {\n                this.removeSvgClass(rect.childNodes[i], elementClassName);\n            }\n            rect.childNodes[i].setAttribute('opacity', '1');\n            if (this.cellSettings.showLabel && text.childNodes[i]) {\n                text.childNodes[i].setAttribute('opacity', '1');\n            }\n        }\n    };\n    /**\n     * Get the maximum length of data source for both horizontal and vertical\n     *\n     * @private\n     */\n    HeatMap.prototype.calculateMaxLength = function () {\n        var dataSource = this.completeAdaptDataSource;\n        if (dataSource && dataSource.length > 0) {\n            var xAxisMax = dataSource.length - 1;\n            var yAxisMax = 0;\n            for (var i = 0; i <= xAxisMax; i++) {\n                var length_1 = dataSource[i].length;\n                yAxisMax = yAxisMax > length_1 ? yAxisMax : length_1;\n            }\n            this.axisCollections[0].maxLength = xAxisMax;\n            this.axisCollections[1].maxLength = yAxisMax - 1;\n        }\n        else {\n            this.axisCollections[0].maxLength = 0;\n            this.axisCollections[1].maxLength = 0;\n        }\n    };\n    /**\n     * To find mouse x, y for aligned heatmap element svg position\n     */\n    HeatMap.prototype.setMouseXY = function (pageX, pageY) {\n        var rect = this.element.getBoundingClientRect();\n        var svgCanvasRect;\n        if (this.enableCanvasRendering) {\n            svgCanvasRect = document.getElementById(this.element.id + '_canvas').getBoundingClientRect();\n        }\n        else {\n            svgCanvasRect = document.getElementById(this.element.id + '_svg').getBoundingClientRect();\n        }\n        this.mouseX = (pageX - rect.left) - Math.max(svgCanvasRect.left - rect.left, 0);\n        this.mouseY = (pageY - rect.top) - Math.max(svgCanvasRect.top - rect.top, 0);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    HeatMap.prototype.triggerClickEvent = function (e, isDoubleClick, hasRightClicked) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        var elementRect = this.element.getBoundingClientRect();\n        if (e.type === 'touchstart') {\n            if (!isDoubleClick) {\n                this.isTouch = true;\n            }\n            touchArg = e;\n            pageY = touchArg.changedTouches[0].clientY;\n            pageX = touchArg.changedTouches[0].clientX;\n        }\n        else {\n            if (!isDoubleClick) {\n                this.isTouch = false;\n            }\n            pageY = e.clientY;\n            pageX = e.clientX;\n        }\n        pageX -= elementRect.left;\n        pageY -= elementRect.top;\n        var isheatmapRect = this.isHeatmapRect(pageX, pageY);\n        if (isheatmapRect) {\n            var currentRect = this.heatMapSeries.getCurrentRect(pageX, pageY);\n            this.trigger(isDoubleClick ? 'cellDoubleClick' : 'cellClick', {\n                heatmap: this,\n                value: currentRect.value,\n                x: currentRect.x,\n                y: currentRect.y,\n                xLabel: this.heatMapSeries.hoverXAxisLabel,\n                yLabel: this.heatMapSeries.hoverYAxisLabel,\n                xValue: this.heatMapSeries.hoverXAxisValue,\n                yValue: this.heatMapSeries.hoverYAxisValue,\n                cellElement: this.enableCanvasRendering ? null : document.getElementById(currentRect.id),\n                hasRightClicked: hasRightClicked,\n                event: e\n            });\n        }\n        return { x: pageX, y: pageY };\n    };\n    HeatMap.prototype.heatMapMouseRightClick = function (e) {\n        this.triggerClickEvent(e, false, true);\n    };\n    HeatMap.prototype.heatMapMouseDoubleClick = function (e) {\n        this.triggerClickEvent(e, true, false);\n    };\n    /**\n     * @param {PointerEvent} e - Specifies the event.\n     * @returns {boolean} Returns the boolean that that the heatmap is clicked or not\n     * @private\n     */\n    HeatMap.prototype.heatMapMouseClick = function (e) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var position = this.triggerClickEvent(e, false, false);\n        var pageX = position.x;\n        var pageY = position.y;\n        this.notify('click', e);\n        if (this.isHeatmapRect(pageX, pageY) && this.currentRect) {\n            var rectElement = document.getElementById(this.currentRect.id);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rectElement)) {\n                rectElement.focus();\n            }\n        }\n        if (this.paletteSettings.type !== 'Gradient' && this.legendModule\n            && this.legendSettings.visible && this.legendVisibilityByCellType) {\n            var page = this.legendModule.navigationCollections;\n            if (page.length && pageX > page[0].x && pageX < page[0].x + page[0].width &&\n                pageY > page[0].y && pageY < page[0].y + page[0].height) {\n                this.legendModule.translatePage(this, this.legendModule.currentPage, true);\n            }\n            else if (page.length && pageX > page[1].x && pageX < page[1].x + page[1].width &&\n                pageY > page[1].y && pageY < page[1].y + page[1].height) {\n                this.legendModule.translatePage(this, this.legendModule.currentPage, false);\n            }\n            var legendRange = this.legendModule.legendRange;\n            var legendTextRange = this.legendModule.legendTextRange;\n            var loop = true;\n            for (var i = 0; i < legendRange.length; i++) {\n                if (this.legendModule && this.legendSettings.toggleVisibility &&\n                    this.legendModule.currentPage === legendRange[i].currentPage) {\n                    if ((loop && (pageX >= legendRange[i].x\n                        && pageX <= legendRange[i].width + legendRange[i].x) &&\n                        (pageY >= legendRange[i].y && pageY <= legendRange[i].y + legendRange[i].height) ||\n                        ((this.legendSettings.showLabel && this.legendSettings.labelDisplayType !== 'None' &&\n                            pageX >= legendTextRange[i].x\n                            && pageX <= legendTextRange[i].width + legendTextRange[i].x) &&\n                            (pageY >= legendTextRange[i].y\n                                && pageY <= legendTextRange[i].y + legendTextRange[i].height)))) {\n                        this.legendModule.legendRangeSelection(i);\n                        loop = false;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse Move.\n     *\n     * @returns {boolean}\n     *\n     * @private\n     */\n    HeatMap.prototype.heatMapMouseMove = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        var elementRect = this.element.getBoundingClientRect();\n        if (e.type === 'touchmove' || e.type === 'touchstart') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = false;\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        this.removeFocus('none');\n        pageX -= elementRect.left;\n        pageY -= elementRect.top;\n        this.setMouseXY(pageX, pageY);\n        this.mouseAction(e, pageX, pageY, touchArg, elementRect);\n        return true;\n    };\n    /**\n     * Handles the mouse Move.\n     *\n     * @returns {boolean}\n     */\n    HeatMap.prototype.mouseAction = function (e, pageX, pageY, touchArg, elementRect) {\n        var tooltipText;\n        if (e.target && e.target.id) {\n            var isheatmapRect = this.isHeatmapRect(pageX, pageY);\n            if (this.legendModule) {\n                if (isheatmapRect) {\n                    if (this.paletteSettings.type === 'Gradient' &&\n                        this.legendSettings.showGradientPointer && this.legendSettings.visible && this.legendVisibilityByCellType) {\n                        this.legendModule.renderGradientPointer(e, pageX, pageY);\n                    }\n                }\n                else {\n                    this.legendModule.removeGradientPointer();\n                }\n                this.renderMousePointer(pageX, pageY);\n            }\n            var isshowTooltip = void 0;\n            var currentRect = void 0;\n            isshowTooltip = this.showTooltip && this.tooltipModule ? isheatmapRect : false;\n            if (isheatmapRect) {\n                currentRect = this.heatMapSeries.getCurrentRect(pageX, pageY);\n                if (e.which !== 2 && e.which !== 3) {\n                    isshowTooltip = this.cellSelectionOnMouseMove(e, currentRect, pageX, pageY, isshowTooltip);\n                }\n            }\n            this.tooltipOnMouseMove(e, currentRect, isshowTooltip, isheatmapRect);\n            if (this.legendModule && this.legendSettings.visible && this.paletteSettings.type === 'Fixed' &&\n                this.legendSettings.enableSmartLegend && this.legendSettings.labelDisplayType === 'None') {\n                this.legendModule.createTooltip(pageX, pageY);\n            }\n            if (!this.enableCanvasRendering) {\n                if (this.titleSettings.text && this.titleSettings.textStyle.textOverflow === 'Trim') {\n                    this.titleTooltip(e, pageX, pageY, this.isTouch);\n                }\n                this.axisTooltip(e, pageX, pageY, this.isTouch);\n                if (this.legendModule && this.legendSettings.visible && this.legendSettings.showLabel && this.legendVisibilityByCellType) {\n                    this.legendModule.renderLegendLabelTooltip(e, pageX, pageY);\n                }\n                if (this.legendModule && this.legendSettings.visible && this.legendVisibilityByCellType) {\n                    this.legendModule.renderLegendTitleTooltip(e, pageX, pageY);\n                }\n            }\n            else {\n                // eslint-disable-next-line\n                elementRect = this.element.getBoundingClientRect();\n                var tooltipRect = (this.paletteSettings.type === 'Fixed' && this.legendSettings.enableSmartLegend &&\n                    this.legendSettings.labelDisplayType === 'None') ? false : true;\n                tooltipText = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTooltipText)(this.tooltipCollection, pageX, pageY) || (this.legendModule && tooltipRect &&\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule.legendLabelTooltip) &&\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTooltipText)(this.legendModule.legendLabelTooltip, pageX, pageY)\n                        || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendModule.legendTitleTooltip) &&\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTooltipText)(this.legendModule.legendTitleTooltip, pageX, pageY)));\n                if (tooltipText) {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.showTooltip)(tooltipText, pageX, pageY, this.element.offsetWidth, this.element.id + '_canvas_Tooltip', (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(this.element.id + '_Secondary_Element'), this.isTouch, this);\n                }\n                else {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_canvas_Tooltip');\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * Triggering cell selection\n     */\n    HeatMap.prototype.cellSelectionOnMouseMove = function (e, currentRect, pageX, pageY, isshowTooltip) {\n        if ((this.cellSettings.tileType === 'Rect' && e.type === 'mousedown' || e.type === 'touchstart'\n            || e.type === 'pointerdown') && this.allowSelection) {\n            this.previousRect = currentRect;\n            this.multiSelection = true;\n            this.rectSelected = true;\n            this.initialCellX = pageX;\n            this.initialCellY = pageY;\n            e.preventDefault();\n        }\n        if (this.cellSettings.tileType === 'Rect' && this.multiSelection && currentRect) {\n            isshowTooltip = false;\n            this.highlightSelectedCells(this.previousRect, currentRect, pageX, pageY, e);\n        }\n        return isshowTooltip;\n    };\n    /**\n     * Rendering tooltip on mouse move\n     */\n    HeatMap.prototype.tooltipOnMouseMove = function (e, currentRect, isshowTooltip, isheatmapRect) {\n        var _this = this;\n        if (isshowTooltip && currentRect) {\n            if (this.tempTooltipRectId !== currentRect.id) {\n                if (this.showTooltip) {\n                    if ((this.cellSettings.enableCellHighlighting || (this.tooltipModule && this.showTooltip))\n                        && !this.enableCanvasRendering) {\n                        this.heatMapSeries.highlightSvgRect(currentRect.id);\n                    }\n                    if (this.tooltipTimer && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) && (e.type === 'touchstart' || e.type === 'touchmove')) {\n                        window.clearTimeout(this.tooltipTimer);\n                        this.tooltipTimer = null;\n                    }\n                    this.tooltipModule.renderTooltip(currentRect);\n                    var tooltipObject_1 = this.tooltipModule.tooltipObject;\n                    if (this.isTouch) {\n                        this.tooltipTimer = setTimeout(function () {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tooltipObject_1) &&\n                                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.getElementById(tooltipObject_1.element.id))\n                                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.getElementById(tooltipObject_1.element.id).firstChild)) {\n                                tooltipObject_1.fadeOut();\n                            }\n                            _this.tooltipModule.isFadeout = true;\n                            window.clearTimeout(_this.tooltipTimer);\n                            _this.tooltipTimer = null;\n                        }, 1500);\n                        if (e) {\n                            if (e.type === 'touchmove') {\n                                if (e.cancelable) {\n                                    e.preventDefault();\n                                }\n                            }\n                        }\n                    }\n                }\n                this.tempTooltipRectId = currentRect.id;\n            }\n        }\n        else {\n            if (e !== null) {\n                var borderBoundary = 5;\n                if (!isheatmapRect) {\n                    if ((this.cellSettings.enableCellHighlighting || this.showTooltip) && !this.enableCanvasRendering &&\n                        this.cellSettings.border.width < borderBoundary) {\n                        this.heatMapSeries.highlightSvgRect(e.target.id);\n                    }\n                    if (this.tooltipModule && this.showTooltip) {\n                        this.tooltipModule.showHideTooltip(false, true);\n                    }\n                }\n                else if (!this.showTooltip && this.cellSettings.border.width > borderBoundary) {\n                    this.heatMapSeries.highlightSvgRect(e.target.id);\n                }\n            }\n            this.tempTooltipRectId = '';\n        }\n    };\n    /**\n     * To select the multiple cells on mouse move action\n     */\n    HeatMap.prototype.highlightSelectedCells = function (previousRect, currentRect, pageX, pageY, e) {\n        var pXIndex = previousRect.xIndex;\n        var pYIndex = previousRect.yIndex;\n        var cXIndex = currentRect.xIndex;\n        var cYIndex = currentRect.yIndex;\n        this.currentRect = currentRect;\n        this.selectedCellsRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(0, 0, 0, 0);\n        this.selectedCellsRect.x = previousRect.x > currentRect.x ? currentRect.x : previousRect.x;\n        this.selectedCellsRect.y = previousRect.y > currentRect.y ? currentRect.y : previousRect.y;\n        this.selectedCellsRect.width = ((previousRect.x > currentRect.x ? (pXIndex - cXIndex) :\n            (cXIndex - pXIndex)) + 1) * currentRect.width;\n        this.selectedCellsRect.height = ((previousRect.y > currentRect.y ? (pYIndex - cYIndex) :\n            (cYIndex - pYIndex)) + 1) * currentRect.height;\n        if (e.type === 'touchstart' && this.multiCellCollection.length === 0 && !this.isCellTapHold) {\n            this.isCellTapHold = true;\n        }\n        else {\n            this.isCellTapHold = false;\n        }\n        e.preventDefault();\n        var x = this.initialCellX > pageX ? pageX : this.initialCellX;\n        var y = this.initialCellY > pageY ? pageY : this.initialCellY;\n        var rect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(x - this.initialClipRect.x, y - this.initialClipRect.y, Math.abs(pageX - this.initialCellX), Math.abs(pageY - this.initialCellY));\n        if (((rect.width > 0) && this.enableMultiSelect && e.ctrlKey === false)) {\n            this.removeSelectedCellsBorder(false);\n            var tooltipElement = document.getElementById(this.element.id + 'Celltooltipcontainer_svg');\n            if (tooltipElement) {\n                this.tooltipModule.tooltipObject = null;\n                tooltipElement.setAttribute('opacity', '0');\n            }\n        }\n        var parentDiv = document.getElementById(this.element.id + '_CellSelection_Container');\n        var svgObject = this.renderer.createSvg({\n            id: this.element.id + '_CellSelection_Container_svg',\n            width: this.initialClipRect.width,\n            height: this.initialClipRect.height\n        });\n        parentDiv.appendChild(svgObject);\n        var parent = document.getElementById(this.element.id + '_CellSelection_Container_svg');\n        if (this.enableMultiSelect) {\n            var rectItems = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.RectOption(this.element.id + '_selectedCells', '#87ceeb', { color: 'transparent', width: 1 }, 1, rect, '#0000ff');\n            parent.appendChild(this.renderer.drawRectangle(rectItems));\n            document.getElementById(this.element.id + '_selectedCells').style.opacity = '0.5';\n        }\n    };\n    /**\n     * Method to get selected cell data collection for HeatMap\n     */\n    HeatMap.prototype.getDataCollection = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousRect) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentRect)) {\n            var pXIndex = this.previousRect.xIndex;\n            var pYIndex = this.previousRect.yIndex;\n            var cXIndex = this.currentRect.xIndex;\n            var cYIndex = this.currentRect.yIndex;\n            var minX = cXIndex > pXIndex ? pXIndex : cXIndex;\n            var maxX = cXIndex > pXIndex ? cXIndex : pXIndex;\n            var minY = cYIndex > pYIndex ? pYIndex : cYIndex;\n            var maxY = cYIndex > pYIndex ? cYIndex : pYIndex;\n            var tempX = minX;\n            var tempY = minY;\n            var cellX = this.previousRect.x;\n            var cellY = this.previousRect.y;\n            this.getCellCollection(this.currentRect, this.previousRect, true, tempX, tempY, maxX, maxY, minX, cellX, cellY);\n            tempX = minX;\n            tempY = minY;\n            cellX = this.previousRect.x;\n            cellY = this.previousRect.y;\n            this.checkSelectedCells();\n            this.getCellCollection(this.currentRect, this.previousRect, false, tempX, tempY, maxX, maxY, minX, cellX, cellY);\n            this.selectedMultiCellCollection = [];\n            this.canvasSelectedCells = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(0, 0, 0, 0);\n            this.selectedCellCount = 0;\n        }\n    };\n    /**\n     * To get the selected datas.\n     */\n    HeatMap.prototype.getCellCollection = function (currentRect, previousRect, singleCellData, tempX, tempY, maxX, maxY, minX, cellX, cellY) {\n        var xIndex = Math.abs((currentRect.xIndex === previousRect.xIndex ?\n            0 : currentRect.xIndex - previousRect.xIndex)) + 1;\n        var yIndex = Math.abs((currentRect.yIndex === previousRect.yIndex ?\n            0 : currentRect.yIndex - previousRect.yIndex)) + 1;\n        for (var i = 0; i < (xIndex * yIndex); i++) {\n            if (singleCellData) {\n                this.getSelectedCellData(cellX, cellY, true);\n            }\n            else {\n                this.getSelectedCellData(cellX, cellY, false);\n            }\n            if (tempX < maxX) {\n                cellX += currentRect.xIndex > previousRect.xIndex ? currentRect.width : -currentRect.width;\n                tempX++;\n            }\n            else if (tempY < maxY) {\n                cellY += currentRect.yIndex > previousRect.yIndex ? currentRect.height : -currentRect.height;\n                cellX = previousRect.x;\n                tempX = minX;\n            }\n        }\n    };\n    /**\n     * To remove the selection on mouse click without ctrl key.\n     */\n    HeatMap.prototype.removeSelectedCellsBorder = function (isSelectionCancel) {\n        if (!this.enableCanvasRendering) {\n            var containerRect = document.getElementById(this.element.id + '_Container_RectGroup');\n            var containerText = document.getElementById(this.element.id + '_Container_TextGroup');\n            for (var i = 0; i < containerRect.childNodes.length; i++) {\n                var elementClassName = containerRect.childNodes[i].getAttribute('class');\n                if (isSelectionCancel) {\n                    containerRect.childNodes[i].setAttribute('opacity', '1');\n                    if (this.cellSettings.showLabel && containerText.childNodes[i]) {\n                        containerText.childNodes[i].setAttribute('opacity', '1');\n                        this.removeSvgClass(containerRect.childNodes[i], elementClassName);\n                    }\n                }\n                else {\n                    containerRect.childNodes[i].setAttribute('opacity', '0.3');\n                    if (this.cellSettings.showLabel && containerText.childNodes[i]) {\n                        containerText.childNodes[i].setAttribute('opacity', '0.3');\n                        this.removeSvgClass(containerRect.childNodes[i], elementClassName);\n                    }\n                }\n            }\n        }\n        else {\n            var ctx = this.secondaryCanvasRenderer.ctx;\n            for (var i = 0; i < this.previousSelectedCellsRect.length; i++) {\n                var rect = this.previousSelectedCellsRect[i];\n                ctx.save();\n                ctx.clearRect(rect.x - 1, rect.y - 1, rect.width + 2, rect.height + 2);\n                ctx.restore();\n            }\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                var rects = this.multiCellCollection[i];\n                if (this.multiCellCollection.length > 0) {\n                    ctx.save();\n                    ctx.clearRect(rects.x - 1, rects.y - 1, rects.width + 2, rects.height + 2);\n                }\n            }\n        }\n    };\n    /**\n     * To highlight the selected multiple cells on mouse move action in canvas mode.\n     */\n    HeatMap.prototype.highlightSelectedAreaInCanvas = function (rect) {\n        if (rect.x) {\n            var oldCanvas = document.getElementById(this.element.id + '_canvas');\n            var newCanvas = document.getElementById(this.element.id + '_secondary_canvas');\n            var initialRect = this.initialClipRect;\n            var rectImage = oldCanvas.getContext('2d').getImageData(rect.x, rect.y, rect.width, rect.height);\n            newCanvas.getContext('2d').putImageData(rectImage, rect.x, rect.y);\n            oldCanvas.style.opacity = '0.3';\n            var topPosition = oldCanvas.getContext('2d').getImageData(0, 0, this.availableSize.width, initialRect.y);\n            newCanvas.getContext('2d').putImageData(topPosition, 0, 0);\n            var bottomPosition = oldCanvas.getContext('2d').getImageData(0, initialRect.y + initialRect.height, this.availableSize.width, this.availableSize.height - (initialRect.y + initialRect.height));\n            newCanvas.getContext('2d').putImageData(bottomPosition, 0, initialRect.y + initialRect.height);\n            var rightPosition = oldCanvas.getContext('2d').getImageData(initialRect.x + initialRect.width, 0, this.availableSize.width - (initialRect.x + initialRect.width), this.availableSize.height);\n            newCanvas.getContext('2d').putImageData(rightPosition, initialRect.x + initialRect.width, 0);\n            var leftPosition = oldCanvas.getContext('2d').getImageData(0, 0, initialRect.x, this.availableSize.height);\n            newCanvas.getContext('2d').putImageData(leftPosition, 0, 0);\n        }\n    };\n    /**\n     * To get the collection of selected cells.\n     */\n    HeatMap.prototype.getSelectedCellData = function (cellX, cellY, cellCollection) {\n        var xAxis = this.axisCollections[0];\n        var yAxis = this.axisCollections[1];\n        var xLabels = xAxis.tooltipLabels;\n        var yLabels = yAxis.tooltipLabels.slice().reverse();\n        var rectPosition = this.heatMapSeries.getCurrentRect(cellX + 1, cellY + 1);\n        var currentRect = document.getElementById(rectPosition.id);\n        var cellDetails = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.SelectedCellDetails(null, '', '', 0, 0, null, 0, 0, 0, 0, 0, 0);\n        cellDetails.value = rectPosition.value;\n        cellDetails.xLabel = xLabels[rectPosition.xIndex].toString();\n        cellDetails.yLabel = yLabels[rectPosition.yIndex].toString();\n        cellDetails.xValue = xAxis.labelValue[rectPosition.xIndex];\n        cellDetails.yValue = yAxis.labelValue.slice().reverse()[rectPosition.yIndex];\n        cellDetails.cellElement = this.enableCanvasRendering ? null : currentRect;\n        cellDetails.xPosition = rectPosition.xIndex;\n        cellDetails.yPosition = rectPosition.yIndex;\n        cellDetails.width = this.currentRect.width;\n        cellDetails.height = this.currentRect.height;\n        cellDetails.x = this.currentRect.x;\n        cellDetails.y = this.currentRect.y;\n        this.currentRect.allowCollection = true;\n        this.addSvgClass(currentRect);\n        if (cellCollection) {\n            this.selectedMultiCellCollection.push(cellDetails);\n            this.currentRect.allowCollection = false;\n        }\n        else {\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                if (this.multiCellCollection[i].xPosition === cellDetails.xPosition &&\n                    this.multiCellCollection[i].yPosition === cellDetails.yPosition) {\n                    this.currentRect.allowCollection = false;\n                    if (this.selectedCellCount === this.selectedMultiCellCollection.length) {\n                        this.currentRect.allowCollection = false;\n                        if (!this.enableCanvasRendering) {\n                            for (var j = 0; j < this.selectedMultiCellCollection.length; j++) {\n                                var rectElement = this.selectedMultiCellCollection[j].cellElement;\n                                if (rectElement) {\n                                    var index = rectElement.id.replace(this.element.id + '_HeatMapRect_', '');\n                                    // eslint-disable-next-line\n                                    var containerText = document.getElementById(this.element.id + '_Container_TextGroup');\n                                    var elementClassName = rectElement.getAttribute('class');\n                                    rectElement.setAttribute('opacity', '0.3');\n                                    var getText = document.getElementById(this.element.id + '_HeatMapRectLabels_' + index);\n                                    if (getText) {\n                                        getText.setAttribute('opacity', '0.3');\n                                    }\n                                    this.removeSvgClass(rectElement, elementClassName);\n                                }\n                            }\n                        }\n                        else {\n                            var ctx = this.secondaryCanvasRenderer.ctx;\n                            var rect = this.canvasSelectedCells;\n                            ctx.save();\n                            ctx.clearRect(rect.x - 1, rect.y - 1, rect.width + 2, rect.height + 2);\n                            ctx.restore();\n                            this.selectedCellsRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(0, 0, 0, 0);\n                        }\n                        this.multiCellCollection.splice(i, 1);\n                    }\n                }\n            }\n        }\n        if (rectPosition.visible && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rectPosition.value) && this.currentRect.allowCollection === true) {\n            this.multiCellCollection.push(cellDetails);\n        }\n    };\n    /**\n     * To add class for selected cells\n     *\n     * @private\n     */\n    HeatMap.prototype.addSvgClass = function (element) {\n        if (!this.enableCanvasRendering) {\n            var className = this.element.id + '_selected';\n            element.classList.add(className);\n        }\n    };\n    /**\n     * To remove class for unselected cells\n     *\n     * @private\n     */\n    HeatMap.prototype.removeSvgClass = function (rectElement, className) {\n        if (className) {\n            rectElement.setAttribute('class', className.replace(className, ''));\n        }\n    };\n    /**\n     * This method is used to clear the cell selection in the heatmap.\n     * {% codeBlock src='heatmap/clearSelection/index.md' %}{% endcodeBlock %}\n     */\n    HeatMap.prototype.clearSelection = function () {\n        if (!this.enableCanvasRendering && this.allowSelection) {\n            this.clearSVGSelection();\n        }\n        if (this.enableCanvasRendering) {\n            var ctx = this.secondaryCanvasRenderer.ctx;\n            for (var i = 0; i < this.previousSelectedCellsRect.length; i++) {\n                ctx.save();\n                ctx.clearRect(this.previousSelectedCellsRect[i].x - 1, this.previousSelectedCellsRect[i].y - 1, this.previousSelectedCellsRect[i].width + 2, this.previousSelectedCellsRect[i].height + 2);\n                ctx.restore();\n            }\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                var rects = this.multiCellCollection[i];\n                if (this.multiCellCollection.length > 0) {\n                    ctx.save();\n                    ctx.clearRect(rects.x - 1, rects.y - 1, rects.width + 2, rects.height + 2);\n                }\n            }\n            var canvas = document.getElementById(this.element.id + '_canvas');\n            canvas.style.opacity = '1';\n        }\n        this.tempMultiCellCollection = [];\n        this.multiCellCollection = [];\n        this.rectSelected = false;\n    };\n    HeatMap.prototype.renderMousePointer = function (pageX, pageY) {\n        var legendRange = this.legendModule.legendRange;\n        var legendTextRange = this.legendModule.legendTextRange;\n        var loop = true;\n        for (var i = 0; i < legendRange.length; i++) {\n            if (this.legendSettings.toggleVisibility && this.legendModule.currentPage === legendRange[i].currentPage) {\n                if ((loop && (pageX >= legendRange[i].x\n                    && pageX <= legendRange[i].width + legendRange[i].x) &&\n                    (pageY >= legendRange[i].y && pageY <= legendRange[i].y + legendRange[i].height) ||\n                    ((this.legendSettings.showLabel && this.legendSettings.labelDisplayType !== 'None' &&\n                        pageX >= legendTextRange[i].x\n                        && pageX <= legendTextRange[i].width + legendTextRange[i].x) &&\n                        (pageY >= legendTextRange[i].y\n                            && pageY <= legendTextRange[i].y + legendTextRange[i].height)))) {\n                    if (this.enableCanvasRendering) {\n                        document.getElementById(this.element.id + '_canvas').style.cursor = 'Pointer';\n                    }\n                    else {\n                        document.getElementById(this.element.id + '_svg').style.cursor = 'Pointer';\n                        var legendLabelTooltipContainer = document.getElementById(this.element.id + 'legendLabelTooltipContainer');\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(legendLabelTooltipContainer)) {\n                            legendLabelTooltipContainer.style.cursor = 'Pointer';\n                        }\n                    }\n                    loop = false;\n                }\n                else if (loop) {\n                    if (this.enableCanvasRendering) {\n                        document.getElementById(this.element.id + '_canvas').style.cursor = '';\n                    }\n                    else {\n                        document.getElementById(this.element.id + '_svg').style.cursor = '';\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Handles the mouse end.\n     *\n     * @returns {boolean}\n     * @private\n     */\n    HeatMap.prototype.heatMapMouseLeave = function (e) {\n        var _this = this;\n        if (e.target && e.target.id &&\n            (this.cellSettings.enableCellHighlighting || (this.tooltipModule && this.showTooltip))\n            && !this.enableCanvasRendering) {\n            this.heatMapSeries.highlightSvgRect(this.tempTooltipRectId);\n        }\n        if (this.allowSelection && this.multiSelection) {\n            this.multiSelection = false;\n            if (e.type === 'mouseup' || e.type === 'mouseleave' || e.type === 'touchend' || e.type === 'pointerup') {\n                if (e.which !== 2 && e.which !== 3) {\n                    if (this.isCellTapHold === false) {\n                        var rect = void 0;\n                        var selectionRect = document.getElementById(this.element.id + '_selectedCells');\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectionRect)) {\n                            var rectBound = selectionRect.getClientRects()[0];\n                            rect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(rectBound.left, rectBound.top, rectBound.width, rectBound.height);\n                        }\n                        else {\n                            var pageX = void 0;\n                            var pageY = void 0;\n                            var touchArg = void 0;\n                            var elementRect = this.element.getBoundingClientRect();\n                            if (e.type === 'touchend') {\n                                this.isTouch = true;\n                                touchArg = e;\n                                pageY = touchArg.changedTouches[0].clientY;\n                                pageX = touchArg.changedTouches[0].clientX;\n                            }\n                            else {\n                                this.isTouch = false;\n                                pageY = e.clientY;\n                                pageX = e.clientX;\n                            }\n                            pageX -= elementRect.left;\n                            pageY -= elementRect.top;\n                            var x = this.initialCellX > pageX ? pageX : this.initialCellX;\n                            var y = this.initialCellY > pageY ? pageY : this.initialCellY;\n                            rect = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(x - this.initialClipRect.x, y - this.initialClipRect.y, Math.abs(pageX - this.initialCellX) !== 0 ? Math.abs(pageX - this.initialCellX) :\n                                Math.abs(pageY - this.initialCellY), Math.abs(pageY - this.initialCellY));\n                        }\n                        if (!(rect.width > 0 && !this.enableMultiSelect)) {\n                            var selectedCellCollection = [];\n                            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                                selectedCellCollection.push(this.multiCellCollection[i]);\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            if (e.ctrlKey === false || !this.enableMultiSelect) {\n                                this.multiCellCollection = [];\n                            }\n                            this.getDataCollection();\n                            var argData = {\n                                heatmap: this,\n                                cancel: false,\n                                name: 'cellSelected',\n                                data: this.multiCellCollection\n                            };\n                            this.trigger('cellSelected', argData);\n                            if (!argData.cancel) {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                if (e.ctrlKey === false || !this.enableMultiSelect) {\n                                    this.removeSelectedCellsBorder(false);\n                                }\n                                this.currentRect.allowCollection = false;\n                            }\n                            else {\n                                this.multiCellCollection = selectedCellCollection;\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                if (this.multiCellCollection.length > 0 || e.ctrlKey === false || !this.enableMultiSelect) {\n                                    this.removeSelectedCellsBorder(true);\n                                }\n                            }\n                            this.setCellOpacity();\n                            if (e.type === 'touchend') {\n                                window.clearTimeout(this.tooltipTimer);\n                                this.tooltipOnMouseMove(null, this.currentRect, true);\n                            }\n                        }\n                    }\n                    else {\n                        this.isCellTapHold = false;\n                    }\n                }\n            }\n        }\n        if (this.tooltipModule && this.showTooltip && e.type === 'mouseleave') {\n            this.tooltipModule.showHideTooltip(false);\n        }\n        this.tempTooltipRectId = '';\n        if (this.legendModule && this.legendSettings.visible && this.legendModule.tooltipObject &&\n            this.legendModule.tooltipObject.element) {\n            var tooltipElement_1 = this.legendModule.tooltipObject.element.firstChild;\n            if (e.type === 'mouseleave') {\n                tooltipElement_1.setAttribute('opacity', '0');\n            }\n            else {\n                if (this.legendTooltipTimer) {\n                    window.clearTimeout(this.legendTooltipTimer);\n                }\n                this.legendTooltipTimer = setTimeout(function () {\n                    tooltipElement_1.setAttribute('opacity', '0');\n                }, 1500);\n            }\n        }\n        if (this.paletteSettings.type === 'Gradient' && this.legendModule && this.legendSettings.showGradientPointer &&\n            this.legendSettings.visible && this.legendVisibilityByCellType) {\n            if (e.type === 'mouseleave') {\n                this.legendModule.removeGradientPointer();\n            }\n            else {\n                if (this.gradientTimer) {\n                    window.clearTimeout(this.gradientTimer);\n                }\n                this.gradientTimer = setTimeout(function () { _this.legendModule.removeGradientPointer(); }, 1500);\n            }\n        }\n        if (this.enableCanvasRendering) {\n            var main = document.getElementById(this.element.id + '_hoverRect_canvas');\n            if (main) {\n                main.style.visibility = 'hidden';\n                this.tempRectHoverClass = '';\n            }\n        }\n        if (this.titleSettings.text && this.titleCollection[0].indexOf('...') !== -1) {\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            if (!this.isTouch) {\n                if (!this.enableCanvasRendering) {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_Title_Tooltip');\n                }\n                else {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_canvas_Tooltip');\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * This method is used to perform operations when keyboard up on Heatmap.\n     *\n     * @param {KeyboardEvent} e - Specifies the keyboard event on Heatmap.\n     * @returns {void}\n     * @private\n     */\n    HeatMap.prototype.heatMapKeyUp = function (e) {\n        if (e.code !== 'Tab') {\n            return;\n        }\n        this.removeFocus('none');\n        if (this.tooltipModule) {\n            this.tooltipModule.showHideTooltip(false);\n        }\n        var targetElement = e.target;\n        var isRect = targetElement.id.indexOf('HeatMapRect') > -1;\n        var isLegend = targetElement.id.indexOf('Legend') > -1;\n        var toHighlightCells = this.cellSettings.enableCellHighlighting;\n        if (toHighlightCells && !isLegend && !this.rectSelected) {\n            this.heatMapSeries.highlightSvgRect(targetElement.id);\n        }\n        else if ((isRect && this.allowSelection) || (isLegend && this.legendSettings.toggleVisibility) || targetElement.id.indexOf('arrow') > -1) {\n            targetElement.style.outline = '2px solid black';\n            targetElement.classList.add('keyboard-focused');\n        }\n    };\n    /**\n     * This method is used to perform operations when keyboard down on Heatmap.\n     *\n     * @param {KeyboardEvent} e - Specifies the keyboard event on Heatmap.\n     * @returns {void}\n     * @private\n     */\n    HeatMap.prototype.heatMapKeyDown = function (e) {\n        if (e.code !== 'Enter') {\n            return;\n        }\n        if (!e.ctrlKey) {\n            this.multiCellCollection = [];\n        }\n        this.removeFocus('none');\n        var targetElement = e.target;\n        if (this.allowSelection && (targetElement.id.indexOf('HeatMapRect') > -1) && this.cellSettings.tileType === 'Rect') {\n            this.previousRect = this.currentRect = this.getRectElement(targetElement.id);\n            this.removeSelectedCellsBorder(false);\n            this.getDataCollection();\n            this.setCellOpacity();\n            this.rectSelected = true;\n        }\n        else if (this.legendModule && this.legendSettings.visible) {\n            var index = this.calculateLegendIndex(targetElement);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n                this.legendModule.legendRangeSelection(index);\n            }\n            targetElement = document.getElementById(targetElement.id);\n            this.handleArrowNavigation(targetElement);\n            targetElement.setAttribute('tabindex', '0');\n            targetElement.focus();\n        }\n    };\n    /**\n     * Method to find the legend index.\n     */\n    HeatMap.prototype.calculateLegendIndex = function (targetElement) {\n        if (this.legendSettings.toggleVisibility) {\n            if (targetElement.id.indexOf('Legend_Index') > -1) {\n                return parseFloat(targetElement.id.split('Legend_Index_')[1]);\n            }\n            if (targetElement.id.indexOf('_Smart_Legend_Group_') > -1) {\n                return parseFloat(targetElement.id.split('_Smart_Legend_Group_')[1]);\n            }\n        }\n        return null;\n    };\n    /**\n     * Method to handle arrow navigation in legend.\n     */\n    HeatMap.prototype.handleArrowNavigation = function (targetElement) {\n        if (targetElement.id.indexOf('arrow') > -1) {\n            var currentPage = this.legendModule.currentPage;\n            var maxPage = this.legendColorCollection.length / this.legendModule.listPerPage;\n            if (currentPage < maxPage && targetElement.id.indexOf('rightarrow') > -1) {\n                this.legendModule.translatePage(this, currentPage, true);\n            }\n            else if (currentPage <= maxPage && targetElement.id.indexOf('leftarrow') > -1) {\n                this.legendModule.translatePage(this, currentPage, false);\n            }\n        }\n    };\n    /**\n     * Method to return Current rect.\n     */\n    HeatMap.prototype.getRectElement = function (id) {\n        var rectCollection = this.heatMapSeries.rectPositionCollection;\n        for (var i = 0; i < rectCollection.length; i++) {\n            for (var j = 0; j < rectCollection[i].length; j++) {\n                if (rectCollection[i][j].id === id) {\n                    return rectCollection[i][j];\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Method to remove the highlight outline.\n     */\n    HeatMap.prototype.removeFocus = function (outline) {\n        var highlightedElement = document.querySelector('.keyboard-focused');\n        if (highlightedElement) {\n            highlightedElement.style.outline = outline;\n            highlightedElement.classList.remove('keyboard-focused');\n        }\n    };\n    /**\n     * Method to Check for deselection of cell.\n     */\n    HeatMap.prototype.checkSelectedCells = function () {\n        if (!this.enableCanvasRendering) {\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                for (var j = 0; j < this.selectedMultiCellCollection.length; j++) {\n                    if (this.selectedMultiCellCollection[j].cellElement.getAttribute('id')\n                        === this.multiCellCollection[i].cellElement.getAttribute('id')) {\n                        this.selectedCellCount++;\n                    }\n                }\n            }\n        }\n        else {\n            this.canvasSelectedCells = new _utils_helper__WEBPACK_IMPORTED_MODULE_2__.Rect(0, 0, 0, 0);\n            this.canvasSelectedCells.x = this.selectedCellsRect.x;\n            this.canvasSelectedCells.y = this.selectedCellsRect.y;\n            this.canvasSelectedCells.width = this.selectedCellsRect.width;\n            this.canvasSelectedCells.height = this.selectedCellsRect.height;\n            for (var i = 0; i < this.multiCellCollection.length; i++) {\n                for (var j = 0; j < this.selectedMultiCellCollection.length; j++) {\n                    if (this.selectedMultiCellCollection[j].xPosition === this.multiCellCollection[i].xPosition &&\n                        this.selectedMultiCellCollection[j].yPosition === this.multiCellCollection[i].yPosition) {\n                        this.selectedCellCount++;\n                    }\n                }\n            }\n            if (this.legendModule && this.rectSelected && this.paletteSettings.type === 'Gradient') {\n                this.legendModule.removeGradientPointer();\n            }\n        }\n    };\n    /**\n     * Method to remove opacity for text of selected cell for HeatMap\n     */\n    HeatMap.prototype.removeOpacity = function (containersRect, containerText) {\n        for (var i = 0; i < containersRect.childNodes.length; i++) {\n            containersRect.childNodes[i].setAttribute('opacity', '0.3');\n            if (this.cellSettings.showLabel && containerText.childNodes[i]) {\n                containerText.childNodes[i].setAttribute('opacity', '0.3');\n            }\n        }\n    };\n    /**\n     * Method to set opacity for selected cell for HeatMap\n     */\n    HeatMap.prototype.setCellOpacity = function () {\n        if (!this.enableCanvasRendering) {\n            if (this.multiCellCollection.length !== 0) {\n                this.tempMultiCellCollection.push(this.multiCellCollection);\n                var containersRect = document.getElementById(this.element.id + '_Container_RectGroup');\n                var containerText = document.getElementById(this.element.id + '_Container_TextGroup');\n                this.removeOpacity(containersRect, containerText);\n                for (var i = 0; i < this.multiCellCollection.length; i++) {\n                    var collectionClasss = this.multiCellCollection[i].cellElement;\n                    var index = parseInt(collectionClasss.id.replace(this.element.id + '_HeatMapRect_', ''), 10);\n                    containersRect.childNodes[index].setAttribute('opacity', '1');\n                    containersRect.childNodes[index].setAttribute('tabindex', '0');\n                    if (this.cellSettings.showLabel) {\n                        var getText = document.getElementById(this.element.id + '_HeatMapRectLabels_' + index);\n                        if (getText) {\n                            getText.setAttribute('opacity', '1');\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            this.previousSelectedCellsRect.push(this.selectedCellsRect);\n            this.highlightSelectedAreaInCanvas(this.selectedCellsRect);\n        }\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.element.id + '_selectedCells');\n    };\n    /**\n     * To create div container for rendering two layers of canvas.\n     *\n     * @returns {void}\n     * @private\n     */\n    HeatMap.prototype.createMultiCellDiv = function (onLoad) {\n        if (onLoad) {\n            var divElement = this.createElement('div', {\n                id: this.element.id + '_Multi_CellSelection_Canvas'\n            });\n            divElement.style.position = 'relative';\n            this.element.appendChild(divElement);\n            this.svgObject.style.position = 'absolute';\n            this.svgObject.style.left = '0px';\n            this.svgObject.style.top = '0px';\n            this.svgObject.style.zIndex = '0';\n        }\n        else {\n            var secondaryCanvas = void 0;\n            secondaryCanvas = document.getElementById(this.element.id + '_secondary_canvas');\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(secondaryCanvas)) {\n                secondaryCanvas = this.secondaryCanvasRenderer.createCanvas({\n                    width: this.availableSize.width,\n                    height: this.availableSize.height, x: 0, y: 0\n                });\n            }\n            secondaryCanvas.style.cssText = 'position: relative; z-index: 1';\n            this.element.appendChild(secondaryCanvas);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], HeatMap.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], HeatMap.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], HeatMap.prototype, \"showTooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"tooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"resized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"cellRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"cellSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('SVG')\n    ], HeatMap.prototype, \"renderingMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], HeatMap.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _datasource_adaptor__WEBPACK_IMPORTED_MODULE_12__.Data)\n    ], HeatMap.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], HeatMap.prototype, \"backgroundColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Material')\n    ], HeatMap.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HeatMap.prototype, \"allowSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], HeatMap.prototype, \"enableMultiSelect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], HeatMap.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_3__.Margin)\n    ], HeatMap.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ text: '', textStyle: _model_theme__WEBPACK_IMPORTED_MODULE_4__.Theme.heatMapTitleFont }, _model_base__WEBPACK_IMPORTED_MODULE_3__.Title)\n    ], HeatMap.prototype, \"titleSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _axis_axis__WEBPACK_IMPORTED_MODULE_5__.Axis)\n    ], HeatMap.prototype, \"xAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ position: 'Right' }, _heatmap_legend_legend__WEBPACK_IMPORTED_MODULE_11__.LegendSettings)\n    ], HeatMap.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _utils_colorMapping__WEBPACK_IMPORTED_MODULE_8__.PaletteSettings)\n    ], HeatMap.prototype, \"paletteSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _utils_tooltip__WEBPACK_IMPORTED_MODULE_9__.TooltipSettings)\n    ], HeatMap.prototype, \"tooltipSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _axis_axis__WEBPACK_IMPORTED_MODULE_5__.Axis)\n    ], HeatMap.prototype, \"yAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _series_series__WEBPACK_IMPORTED_MODULE_7__.CellSettings)\n    ], HeatMap.prototype, \"cellSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"cellClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"cellDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], HeatMap.prototype, \"legendRender\", void 0);\n    HeatMap = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], HeatMap);\n    return HeatMap;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/heatmap/heatmap.js?");

/***/ })

}]);