"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_blazor-ui-adaptor_js-c1fb5346"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/blazor-ui-adaptor.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/blazor-ui-adaptor.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlazorUiAdaptor: () => (/* binding */ BlazorUiAdaptor)\n/* harmony export */ });\n/**\n * The `BlazorUIAdaptor` module is used to handle the UI update of native components.\n *\n * @hidden\n */\nvar BlazorUiAdaptor = /** @class */ (function () {\n    /**\n     * Initialize the constructor of blazorUIadapater.\n     *\n     * @param { PdfViewer } pdfviewer - Specified PdfViewer class.\n     * @param { PdfViewerBase } pdfViewerBase - The pdfViewerBase.\n     */\n    function BlazorUiAdaptor(pdfviewer, pdfViewerBase) {\n        this.pdfViewer = null;\n        this.pdfViewerBase = null;\n        /**\n         * @private\n         */\n        this.totalPageElement = null;\n        this.currentPageBoxElementContainer = null;\n        this.currentPageBoxElement = null;\n        this.firstPageElement = null;\n        this.previousPageElement = null;\n        this.nextPageElement = null;\n        this.lastPageElement = null;\n        this.zommOutElement = null;\n        this.zoomInElement = null;\n        this.zoomDropDownElement = null;\n        this.selectToolElement = null;\n        this.handToolElement = null;\n        this.undoElement = null;\n        this.redoElement = null;\n        this.commentElement = null;\n        this.submitFormButton = null;\n        this.searchElement = null;\n        this.annotationElement = null;\n        this.printElement = null;\n        this.downloadElement = null;\n        this.highlightElement = null;\n        this.underlineElement = null;\n        this.strikeThroughElement = null;\n        this.shapeElement = null;\n        this.calibrateElement = null;\n        this.stampElement = null;\n        this.freeTextElement = null;\n        this.signatureElement = null;\n        this.inkElement = null;\n        this.annotationFontSizeInputElement = null;\n        this.annotationFontFamilyInputElement = null;\n        this.annotationColorElement = null;\n        this.annotationStrokeColorElement = null;\n        this.annotationThicknessElement = null;\n        this.annotationOpacityElement = null;\n        this.annotationFontColorElement = null;\n        this.annotationFontFamilyElement = null;\n        this.annotationFontSizeElement = null;\n        this.annotationTextAlignElement = null;\n        this.annotationTextColorElement = null;\n        this.annotationTextPropertiesElement = null;\n        this.annotationDeleteElement = null;\n        this.annotationCloseElement = null;\n        this.annotationCommentPanelElement = null;\n        this.mobileToolbarContainerElement = null;\n        this.mobileSearchPreviousOccurenceElement = null;\n        this.mobileSearchNextOccurenceElement = null;\n        this.cssClass = 'e-overlay';\n        this.disableClass = ' e-overlay';\n        this.editAnnotationButtonElement = null;\n        this.pdfViewer = pdfviewer;\n        this.pdfViewerBase = pdfViewerBase;\n        this.findToolbarElements();\n    }\n    BlazorUiAdaptor.prototype.findToolbarElements = function () {\n        this.totalPageElement = this.pdfViewerBase.getElement('_totalPage').children[0];\n        this.currentPageBoxElementContainer = this.pdfViewerBase.getElement('_currentPageInput');\n        this.currentPageBoxElement = this.pdfViewerBase.getElement('_currentPageInput').children[0].children[0];\n        this.firstPageElement = this.pdfViewerBase.getElement('_firstPage');\n        this.previousPageElement = this.pdfViewerBase.getElement('_previousPage');\n        this.nextPageElement = this.pdfViewerBase.getElement('_nextPage');\n        this.lastPageElement = this.pdfViewerBase.getElement('_lastPage');\n        this.zommOutElement = this.pdfViewerBase.getElement('_zoomOut');\n        this.zoomInElement = this.pdfViewerBase.getElement('_zoomIn');\n        this.zoomDropDownElement = this.pdfViewerBase.getElement('_zoomDropDown');\n        this.selectToolElement = this.pdfViewerBase.getElement('_selectTool');\n        this.handToolElement = this.pdfViewerBase.getElement('_handTool');\n        this.undoElement = this.pdfViewerBase.getElement('_undo');\n        this.redoElement = this.pdfViewerBase.getElement('_redo');\n        this.commentElement = this.pdfViewerBase.getElement('_comment');\n        this.submitFormButton = this.pdfViewerBase.getElement('_submitFormButton');\n        this.searchElement = this.pdfViewerBase.getElement('_search');\n        this.annotationElement = this.pdfViewerBase.getElement('_annotation');\n        this.editAnnotationButtonElement = this.annotationElement.children[0];\n        this.editAnnotationButtonElement.classList.add('e-pv-tbar-btn');\n        this.printElement = this.pdfViewerBase.getElement('_print');\n        this.downloadElement = this.pdfViewerBase.getElement('_download');\n        this.highlightElement = this.pdfViewerBase.getElement('_highLight');\n        this.underlineElement = this.pdfViewerBase.getElement('_underline');\n        this.strikeThroughElement = this.pdfViewerBase.getElement('_strikethrough');\n        this.shapeElement = this.pdfViewerBase.getElement('_annotation_shapes');\n        this.calibrateElement = this.pdfViewerBase.getElement('_annotation_calibrate');\n        this.stampElement = this.pdfViewerBase.getElement('_annotation_stamp');\n        this.freeTextElement = this.pdfViewerBase.getElement('_annotation_freeTextEdit');\n        this.signatureElement = this.pdfViewerBase.getElement('_annotation_signature');\n        this.inkElement = this.pdfViewerBase.getElement('_annotation_ink');\n        this.annotationFontSizeInputElement = this.pdfViewerBase.getElement('_annotation_fontsize').children[0].children[0];\n        this.annotationFontFamilyInputElement = this.pdfViewerBase.getElement('_annotation_fontname').children[0].children[0];\n        this.annotationColorElement = this.pdfViewerBase.getElement('_annotation_color');\n        this.annotationStrokeColorElement = this.pdfViewerBase.getElement('_annotation_stroke');\n        this.annotationThicknessElement = this.pdfViewerBase.getElement('_annotation_thickness');\n        this.annotationOpacityElement = this.pdfViewerBase.getElement('_annotation_opacity');\n        this.annotationFontColorElement = this.pdfViewerBase.getElement('_annotation_textcolor');\n        this.annotationFontFamilyElement = this.pdfViewerBase.getElement('_annotation_fontname');\n        this.annotationFontSizeElement = this.pdfViewerBase.getElement('_annotation_fontsize');\n        this.annotationTextAlignElement = this.pdfViewerBase.getElement('_annotation_textalign');\n        this.annotationTextColorElement = this.pdfViewerBase.getElement('_annotation_textcolor');\n        this.annotationTextPropertiesElement = this.pdfViewerBase.getElement('_annotation_textproperties');\n        this.annotationDeleteElement = this.pdfViewerBase.getElement('_annotation_delete');\n        this.annotationCommentPanelElement = this.pdfViewerBase.getElement('_annotation_commentPanel');\n        this.annotationCloseElement = this.pdfViewerBase.getElement('_annotation_close');\n        this.mobileToolbarContainerElement = this.pdfViewerBase.getElement('_mobileToolbarContainer');\n        this.mobileSearchPreviousOccurenceElement = this.pdfViewerBase.getElement('_prev_occurrence');\n        this.mobileSearchNextOccurenceElement = this.pdfViewerBase.getElement('_next_occurrence');\n    };\n    /**\n     * Update the total page.\n     *\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.updateTotalPage = function () {\n        this.totalPageElement.textContent = this.pdfViewer.localeObj.getConstant('of') + this.pdfViewerBase.pageCount.toString();\n    };\n    /**\n     * Update current page.\n     *\n     * @param {number} pageNumber - The pageNumber.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.updateCurrentPage = function (pageNumber) {\n        this.currentPageBoxElement.value = pageNumber.toString();\n    };\n    /**\n     * Load the PDF document.\n     *\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.loadDocument = function () {\n        if (this.pdfViewer.enableNavigation) {\n            this.currentPageBoxElementContainer.classList.remove(this.cssClass);\n            this.currentPageBoxElement.value = '1';\n            this.totalPageElement.textContent = this.pdfViewer.localeObj.getConstant('of') + this.pdfViewerBase.pageCount.toString();\n            if (!this.isEnabled(this.firstPageElement)) {\n                this.firstPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.previousPageElement)) {\n                this.previousPageElement.className += this.disableClass;\n            }\n            this.nextPageElement.classList.remove(this.cssClass);\n            this.lastPageElement.classList.remove(this.cssClass);\n            if (this.pdfViewerBase.pageCount === 1) {\n                if (!this.nextPageElement.classList.contains(this.cssClass)) {\n                    this.nextPageElement.className += this.disableClass;\n                }\n                if (!this.lastPageElement.classList.contains(this.cssClass)) {\n                    this.lastPageElement.className += this.disableClass;\n                }\n            }\n        }\n        if (this.pdfViewer.enableMagnification) {\n            this.zoomInElement.classList.remove(this.cssClass);\n            this.zommOutElement.classList.remove(this.cssClass);\n            this.zoomDropDownElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableTextSelection) {\n            this.selectToolElement.classList.remove(this.cssClass);\n            this.selectItem(this.pdfViewer.toolbar.SelectToolElement);\n        }\n        this.handToolElement.classList.remove(this.cssClass);\n        if (this.pdfViewer.enableStickyNotesAnnotation) {\n            this.commentElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableTextSearch) {\n            this.searchElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.isFormFieldDocument) {\n            this.submitFormButton.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableAnnotation && this.pdfViewer.enableAnnotationToolbar) {\n            this.annotationElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enablePrint) {\n            this.printElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableDownload) {\n            this.downloadElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableAnnotation && this.pdfViewer.enableTextMarkupAnnotation) {\n            this.highlightElement.classList.remove(this.cssClass);\n            this.underlineElement.classList.remove(this.cssClass);\n            this.strikeThroughElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableAnnotation && this.pdfViewer.enableShapeAnnotation) {\n            this.shapeElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableAnnotation && this.pdfViewer.enableMeasureAnnotation) {\n            this.calibrateElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableAnnotation && this.pdfViewer.enableStampAnnotations) {\n            this.stampElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableFreeText) {\n            this.freeTextElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableHandwrittenSignature) {\n            this.signatureElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableInkAnnotation) {\n            this.inkElement.classList.remove(this.cssClass);\n        }\n        if (this.pdfViewer.enableCommentPanel) {\n            this.annotationCommentPanelElement.classList.remove(this.cssClass);\n        }\n    };\n    BlazorUiAdaptor.prototype.selectItem = function (element) {\n        if (element) {\n            element.classList.add('e-pv-select');\n        }\n    };\n    BlazorUiAdaptor.prototype.deselectItem = function (element) {\n        if (element) {\n            element.classList.remove('e-pv-select');\n        }\n    };\n    BlazorUiAdaptor.prototype.showAnnotationToolbar = function (isToolbarVisible) {\n        this.pdfViewer.toolbar.annotationToolbarModule.adjustViewer(isToolbarVisible[0]);\n        if (isToolbarVisible[0]) {\n            this.pdfViewer.toolbar.selectItem(this.editAnnotationButtonElement);\n        }\n        else {\n            this.pdfViewer.toolbar.deSelectItem(this.editAnnotationButtonElement);\n            this.pdfViewerBase.focusViewerContainer();\n        }\n    };\n    BlazorUiAdaptor.prototype.closeAnnotationToolbar = function () {\n        this.pdfViewer.toolbar.annotationToolbarModule.adjustViewer(false);\n        this.pdfViewer.toolbar.deSelectItem(this.editAnnotationButtonElement);\n        this.pdfViewerBase.navigationPane.closeCommentPanelContainer();\n    };\n    /**\n     * Reset the toolbar.\n     *\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.resetToolbar = function () {\n        if (this.pdfViewer.enableToolbar) {\n            this.currentPageBoxElement.value = '0';\n            this.totalPageElement.textContent = this.pdfViewer.localeObj.getConstant('of') + '0';\n            if (!this.isEnabled(this.currentPageBoxElementContainer)) {\n                this.currentPageBoxElementContainer.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.firstPageElement)) {\n                this.firstPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.previousPageElement)) {\n                this.previousPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.nextPageElement)) {\n                this.nextPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.lastPageElement)) {\n                this.lastPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.zoomInElement)) {\n                this.zoomInElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.zommOutElement)) {\n                this.zommOutElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.zoomDropDownElement)) {\n                this.zoomDropDownElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.selectToolElement)) {\n                this.selectToolElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.handToolElement)) {\n                this.handToolElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.undoElement)) {\n                this.undoElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.redoElement)) {\n                this.redoElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.commentElement)) {\n                this.commentElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.searchElement)) {\n                this.searchElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.submitFormButton)) {\n                this.submitFormButton.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationElement)) {\n                this.annotationElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.printElement)) {\n                this.printElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.downloadElement)) {\n                this.downloadElement.className += this.disableClass;\n            }\n        }\n        if (this.pdfViewer.enableAnnotationToolbar) {\n            if (!this.isEnabled(this.highlightElement)) {\n                this.highlightElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.underlineElement)) {\n                this.underlineElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.strikeThroughElement)) {\n                this.strikeThroughElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.shapeElement)) {\n                this.shapeElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.calibrateElement)) {\n                this.calibrateElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.stampElement)) {\n                this.stampElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.freeTextElement)) {\n                this.freeTextElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.signatureElement)) {\n                this.signatureElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.inkElement)) {\n                this.inkElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontFamilyElement)) {\n                this.annotationFontFamilyElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontSizeElement)) {\n                this.annotationFontSizeElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextColorElement)) {\n                this.annotationTextColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextAlignElement)) {\n                this.annotationTextAlignElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n                this.annotationTextPropertiesElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationColorElement)) {\n                this.annotationColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationStrokeColorElement)) {\n                this.annotationStrokeColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationThicknessElement)) {\n                this.annotationThicknessElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationOpacityElement)) {\n                this.annotationOpacityElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationDeleteElement)) {\n                this.annotationDeleteElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationCommentPanelElement)) {\n                this.annotationCommentPanelElement.className += this.disableClass;\n            }\n        }\n    };\n    /**\n     * When annotation selection changed.\n     *\n     * @param {boolean} isEnable - isEnable\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.EnableDeleteOption = function (isEnable) {\n        if (this.annotationDeleteElement !== null) {\n            if (isEnable) {\n                this.annotationDeleteElement.classList.remove(this.cssClass);\n            }\n            else {\n                if (!this.isEnabled(this.annotationDeleteElement)) {\n                    this.annotationDeleteElement.className += this.disableClass;\n                }\n            }\n        }\n    };\n    /**\n     * when the page changes.\n     *\n     * @param {number} currentPageNumber - The current page number.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.pageChanged = function (currentPageNumber) {\n        if (this.pdfViewer.enableNavigation) {\n            this.currentPageBoxElement.value = currentPageNumber.toString();\n        }\n        if (currentPageNumber === this.pdfViewer.pageCount) {\n            if (!this.isEnabled(this.nextPageElement)) {\n                this.nextPageElement.className += this.disableClass;\n            }\n            this.previousPageElement.classList.remove(this.cssClass);\n            if (!this.isEnabled(this.lastPageElement)) {\n                this.lastPageElement.className += this.disableClass;\n            }\n            this.firstPageElement.classList.remove(this.cssClass);\n        }\n        if (currentPageNumber < this.pdfViewer.pageCount && currentPageNumber !== 1) {\n            this.firstPageElement.classList.remove(this.cssClass);\n            this.previousPageElement.classList.remove(this.cssClass);\n            this.nextPageElement.classList.remove(this.cssClass);\n            this.lastPageElement.classList.remove(this.cssClass);\n        }\n        if (currentPageNumber === 1) {\n            this.nextPageElement.classList.remove(this.cssClass);\n            this.lastPageElement.classList.remove(this.cssClass);\n            if (!this.isEnabled(this.firstPageElement)) {\n                this.firstPageElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.previousPageElement)) {\n                this.previousPageElement.className += this.disableClass;\n            }\n        }\n    };\n    /**\n     * @param {string} item - The current item.\n     * @param {boolean} enable - To enable the item or not.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.updateUndoRedoButton = function (item, enable) {\n        if (item === 'undo') {\n            if (enable) {\n                this.undoElement.classList.remove(this.cssClass);\n            }\n            else {\n                if (!this.isEnabled(this.undoElement)) {\n                    this.undoElement.className += this.disableClass;\n                }\n            }\n        }\n        if (item === 'redo') {\n            if (enable) {\n                this.redoElement.classList.remove(this.cssClass);\n            }\n            else {\n                if (!this.isEnabled(this.redoElement)) {\n                    this.redoElement.className += this.disableClass;\n                }\n            }\n        }\n    };\n    /**\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.disableUndoRedoButton = function () {\n        if (!this.isEnabled(this.undoElement)) {\n            this.undoElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.redoElement)) {\n            this.redoElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @param {boolean} isEnable - isEnable\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableTextMarkupAnnotationPropertiesTools = function (isEnable) {\n        if (isEnable) {\n            this.annotationColorElement.classList.remove(this.cssClass);\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n        }\n        else {\n            if (!this.isEnabled(this.annotationOpacityElement)) {\n                this.annotationOpacityElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationColorElement)) {\n                this.annotationColorElement.className += this.disableClass;\n            }\n        }\n        if (!this.isEnabled(this.annotationFontColorElement)) {\n            this.annotationFontColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontFamilyElement)) {\n            this.annotationFontFamilyElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontSizeElement)) {\n            this.annotationFontSizeElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextAlignElement)) {\n            this.annotationTextAlignElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n            this.annotationTextPropertiesElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationStrokeColorElement)) {\n            this.annotationStrokeColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationThicknessElement)) {\n            this.annotationThicknessElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @param {boolean} isEnable - To enable the item or not.\n     * @param {boolean} isProperitiesChange - To enable the item or not.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableAnnotationPropertiesTool = function (isEnable, isProperitiesChange) {\n        if (isProperitiesChange) {\n            if (isEnable) {\n                this.annotationColorElement.classList.remove(this.cssClass);\n                this.annotationStrokeColorElement.classList.remove(this.cssClass);\n                this.annotationThicknessElement.classList.remove(this.cssClass);\n                this.annotationOpacityElement.classList.remove(this.cssClass);\n                if (this.pdfViewer.enableShapeLabel) {\n                    this.annotationFontColorElement.classList.remove(this.cssClass);\n                    this.annotationFontFamilyElement.classList.remove(this.cssClass);\n                    this.annotationFontSizeElement.classList.remove(this.cssClass);\n                }\n                if (!this.isEnabled(this.annotationTextAlignElement)) {\n                    this.annotationTextAlignElement.className += this.disableClass;\n                }\n                if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n                    this.annotationTextPropertiesElement.className += this.disableClass;\n                }\n            }\n            else {\n                if (!this.isEnabled(this.annotationColorElement)) {\n                    this.annotationColorElement.className += this.disableClass;\n                }\n                if (!this.isEnabled(this.annotationStrokeColorElement)) {\n                    this.annotationStrokeColorElement.className += this.disableClass;\n                }\n                if (!this.isEnabled(this.annotationThicknessElement)) {\n                    this.annotationThicknessElement.className += this.disableClass;\n                }\n                if (!this.isEnabled(this.annotationOpacityElement)) {\n                    this.annotationOpacityElement.className += this.disableClass;\n                }\n                if (!this.isEnabled(this.annotationDeleteElement)) {\n                    this.annotationDeleteElement.className += this.disableClass;\n                }\n            }\n        }\n    };\n    /**\n     * @param {boolean} isEnable - To enable the item or not.\n     * @param {boolean} isProperitiesChange - To enable the item or not.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableFreeTextAnnotationPropertiesTools = function (isEnable, isProperitiesChange) {\n        if (isProperitiesChange && isEnable) {\n            this.annotationColorElement.classList.remove(this.cssClass);\n            this.annotationStrokeColorElement.classList.remove(this.cssClass);\n            this.annotationThicknessElement.classList.remove(this.cssClass);\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            this.annotationFontColorElement.classList.remove(this.cssClass);\n            this.annotationFontFamilyElement.classList.remove(this.cssClass);\n            this.annotationFontSizeElement.classList.remove(this.cssClass);\n            this.annotationTextAlignElement.classList.remove(this.cssClass);\n            this.annotationTextPropertiesElement.classList.remove(this.cssClass);\n            this.annotationDeleteElement.classList.remove(this.cssClass);\n            this.annotationCommentPanelElement.classList.remove(this.cssClass);\n        }\n    };\n    /**\n     * @param {boolean} isEnable - To enable the item or not.\n     * @param {boolean} isPropertiesChange - To enable the item or not.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableStampAnnotationPropertiesTools = function (isEnable, isPropertiesChange) {\n        if (isEnable) {\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            this.annotationDeleteElement.classList.remove(this.cssClass);\n            this.annotationCommentPanelElement.classList.remove(this.cssClass);\n        }\n        else {\n            if (!this.isEnabled(this.annotationOpacityElement)) {\n                this.annotationOpacityElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationDeleteElement)) {\n                this.annotationDeleteElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationCommentPanelElement)) {\n                this.annotationCommentPanelElement.className += this.disableClass;\n            }\n        }\n        if (!this.isEnabled(this.annotationColorElement)) {\n            this.annotationColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationStrokeColorElement)) {\n            this.annotationStrokeColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationThicknessElement)) {\n            this.annotationThicknessElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationOpacityElement)) {\n            this.annotationOpacityElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontColorElement)) {\n            this.annotationFontColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontFamilyElement)) {\n            this.annotationFontFamilyElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontSizeElement)) {\n            this.annotationFontSizeElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextAlignElement)) {\n            this.annotationTextAlignElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n            this.annotationTextPropertiesElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @param {boolean} isEnable - To enable the item or not.\n     * @param {boolean} isProperitiesChange - To enable the item or not.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableSignaturePropertiesTools = function (isEnable, isProperitiesChange) {\n        if (isEnable) {\n            this.annotationStrokeColorElement.classList.remove(this.cssClass);\n            this.annotationThicknessElement.classList.remove(this.cssClass);\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            this.annotationDeleteElement.classList.remove(this.cssClass);\n            this.annotationCommentPanelElement.classList.remove(this.cssClass);\n        }\n        else {\n            if (!this.isEnabled(this.annotationStrokeColorElement)) {\n                this.annotationStrokeColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationThicknessElement)) {\n                this.annotationThicknessElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationOpacityElement)) {\n                this.annotationOpacityElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationDeleteElement)) {\n                this.annotationDeleteElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationCommentPanelElement)) {\n                this.annotationCommentPanelElement.className += this.disableClass;\n            }\n        }\n        if (!this.isEnabled(this.annotationColorElement)) {\n            this.annotationColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontColorElement)) {\n            this.annotationFontColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontFamilyElement)) {\n            this.annotationFontFamilyElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontSizeElement)) {\n            this.annotationFontSizeElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextAlignElement)) {\n            this.annotationTextAlignElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n            this.annotationTextPropertiesElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.annotationAdd = function () {\n        if (!this.isEnabled(this.annotationColorElement)) {\n            this.annotationColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationStrokeColorElement)) {\n            this.annotationStrokeColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationThicknessElement)) {\n            this.annotationThicknessElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationOpacityElement)) {\n            this.annotationOpacityElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontColorElement)) {\n            this.annotationFontColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontFamilyElement)) {\n            this.annotationFontFamilyElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontSizeElement)) {\n            this.annotationFontSizeElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextAlignElement)) {\n            this.annotationTextAlignElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n            this.annotationTextPropertiesElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.annotationUnSelect = function () {\n        if (!this.isEnabled(this.annotationColorElement)) {\n            this.annotationColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationStrokeColorElement)) {\n            this.annotationStrokeColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationThicknessElement)) {\n            this.annotationThicknessElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationOpacityElement)) {\n            this.annotationOpacityElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontColorElement)) {\n            this.annotationFontColorElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontFamilyElement)) {\n            this.annotationFontFamilyElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationFontSizeElement)) {\n            this.annotationFontSizeElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextAlignElement)) {\n            this.annotationTextAlignElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n            this.annotationTextPropertiesElement.className += this.disableClass;\n        }\n        if (!this.isEnabled(this.annotationDeleteElement)) {\n            this.annotationDeleteElement.className += this.disableClass;\n        }\n    };\n    /**\n     * @param {string} annotationType - The annotationType.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.annotationSelect = function (annotationType) {\n        if (annotationType === 'FreeText') {\n            this.annotationColorElement.classList.remove(this.cssClass);\n            this.annotationStrokeColorElement.classList.remove(this.cssClass);\n            this.annotationThicknessElement.classList.remove(this.cssClass);\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            this.annotationFontColorElement.classList.remove(this.cssClass);\n            this.annotationFontFamilyElement.classList.remove(this.cssClass);\n            this.annotationFontSizeElement.classList.remove(this.cssClass);\n            this.annotationTextAlignElement.classList.remove(this.cssClass);\n            this.annotationTextPropertiesElement.classList.remove(this.cssClass);\n        }\n        if (annotationType === 'Shape' || annotationType === 'Measure') {\n            this.annotationColorElement.classList.remove(this.cssClass);\n            this.annotationStrokeColorElement.classList.remove(this.cssClass);\n            this.annotationThicknessElement.classList.remove(this.cssClass);\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            if (!this.isEnabled(this.annotationFontColorElement)) {\n                this.annotationFontColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontFamilyElement)) {\n                this.annotationFontFamilyElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontSizeElement)) {\n                this.annotationFontSizeElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextAlignElement)) {\n                this.annotationTextAlignElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n                this.annotationTextPropertiesElement.className += this.disableClass;\n            }\n        }\n        if (annotationType === 'TextMarkup') {\n            this.annotationColorElement.classList.remove(this.cssClass);\n            if (!this.isEnabled(this.annotationStrokeColorElement)) {\n                this.annotationStrokeColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationThicknessElement)) {\n                this.annotationThicknessElement.className += this.disableClass;\n            }\n            this.annotationOpacityElement.classList.remove(this.cssClass);\n            if (!this.isEnabled(this.annotationFontColorElement)) {\n                this.annotationFontColorElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontFamilyElement)) {\n                this.annotationFontFamilyElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationFontSizeElement)) {\n                this.annotationFontSizeElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextAlignElement)) {\n                this.annotationTextAlignElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.annotationTextPropertiesElement)) {\n                this.annotationTextPropertiesElement.className += this.disableClass;\n            }\n        }\n        this.annotationDeleteElement.classList.remove(this.cssClass);\n        this.annotationCommentPanelElement.classList.remove(this.cssClass);\n    };\n    /**\n     * @param {string} fontFamily - The fontFamily.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.updateFontFamilyInIcon = function (fontFamily) {\n        this.annotationFontFamilyInputElement.value = fontFamily;\n    };\n    /**\n     * @param {number} fontSize - The fontSize.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.updateFontSizeInIcon = function (fontSize) {\n        var fontValue = fontSize.toString() + 'px';\n        this.annotationFontSizeInputElement.value = fontValue;\n    };\n    /**\n     * @param {boolean} isEnable - To enable or disable.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.enableSearchItems = function (isEnable) {\n        if (isEnable) {\n            this.mobileSearchPreviousOccurenceElement.classList.remove(this.cssClass);\n            this.mobileSearchNextOccurenceElement.classList.remove(this.cssClass);\n        }\n        else {\n            if (!this.isEnabled(this.mobileSearchPreviousOccurenceElement)) {\n                this.mobileSearchPreviousOccurenceElement.className += this.disableClass;\n            }\n            if (!this.isEnabled(this.mobileSearchNextOccurenceElement)) {\n                this.mobileSearchNextOccurenceElement.className += this.disableClass;\n            }\n        }\n    };\n    /**\n     * @param {boolean} isTapHidden - To enable or disable.\n     * @returns {void}\n     */\n    BlazorUiAdaptor.prototype.tapOnMobileDevice = function (isTapHidden) {\n        if (this.mobileToolbarContainerElement != null) {\n            if (isTapHidden) {\n                this.mobileToolbarContainerElement.style.display = 'none';\n            }\n            else {\n                this.mobileToolbarContainerElement.style.display = 'block';\n            }\n        }\n    };\n    /**\n     * @param {HTMLElement} element - The HTMLElement.\n     * @returns {boolean} - Returns trur or false.\n     */\n    BlazorUiAdaptor.prototype.isEnabled = function (element) {\n        return element.classList.contains(this.cssClass);\n    };\n    return BlazorUiAdaptor;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/blazor-ui-adaptor.js?");

/***/ })

}]);