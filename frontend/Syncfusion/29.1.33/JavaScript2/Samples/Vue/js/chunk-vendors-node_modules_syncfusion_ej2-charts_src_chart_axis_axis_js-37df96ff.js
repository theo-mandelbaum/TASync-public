"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_axis_axis_js-37df96ff"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/axis/axis.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/axis/axis.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Axis: () => (/* binding */ Axis),\n/* harmony export */   AxisLine: () => (/* binding */ AxisLine),\n/* harmony export */   Column: () => (/* binding */ Column),\n/* harmony export */   CrosshairTooltip: () => (/* binding */ CrosshairTooltip),\n/* harmony export */   MajorGridLines: () => (/* binding */ MajorGridLines),\n/* harmony export */   MajorTickLines: () => (/* binding */ MajorTickLines),\n/* harmony export */   MinorGridLines: () => (/* binding */ MinorGridLines),\n/* harmony export */   MinorTickLines: () => (/* binding */ MinorTickLines),\n/* harmony export */   Row: () => (/* binding */ Row),\n/* harmony export */   VisibleLabels: () => (/* binding */ VisibleLabels)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _utils_double_range__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/double-range */ \"./node_modules/@syncfusion/ej2-charts/src/chart/utils/double-range.js\");\n/* harmony import */ var _axis_double_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../axis/double-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart/axis/double-axis.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _model_chart_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../model/chart-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/model/chart-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n/**\n * Configures the `rows` of the chart to create multiple vertical rows within the chart area.\n */\nvar Row = /** @class */ (function (_super) {\n    __extends(Row, _super);\n    function Row() {\n        /**\n         * The height of the row as a string accepts input both as '100px' and '100%'.\n         * If specified as '100%', the row renders to the full height of its chart.\n         *\n         * @default '100%'\n         */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.axes = [];\n        /** @private */\n        _this.nearSizes = [];\n        /** @private */\n        _this.farSizes = [];\n        /** @private */\n        _this.insideFarSizes = [];\n        /** @private */\n        _this.insideNearSizes = [];\n        return _this;\n    }\n    /**\n     * Measure the row size.\n     *\n     * @param {Axis} axis - The axis for which to measure the row size.\n     * @param {number} scrollBarHeight - The height of the scrollbar.\n     * @param {Row | Column} definition - The definition of the row or column.\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     * @private\n     */\n    Row.prototype.computeSize = function (axis, scrollBarHeight, definition, chart) {\n        var width = 0;\n        var innerPadding = 5;\n        if (axis.visible && axis.internalVisibility) {\n            width += (axis.findTickSize(axis.crossInAxis) + ((axis.scrollbarSettings.position === 'Right' || axis.scrollbarSettings.position === 'Left') ? 0 : scrollBarHeight) +\n                axis.findLabelSize(axis.crossInAxis, innerPadding, definition, chart) + axis.lineStyle.width * 0.5);\n        }\n        if (axis.isAxisOpposedPosition) {\n            this.farSizes.push(width);\n        }\n        else {\n            this.nearSizes.push(width);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Row.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], Row.prototype, \"border\", void 0);\n    return Row;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the `columns` of the chart to create multiple horizontal columns within the chart area.\n */\nvar Column = /** @class */ (function (_super) {\n    __extends(Column, _super);\n    function Column() {\n        /**\n         * The width of the column as a string accepts input both as '100px' and '100%'.\n         * If specified as '100%', the column renders to the full width of its chart.\n         *\n         * @default '100%'\n         */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.axes = [];\n        /** @private */\n        _this.nearSizes = [];\n        /** @private */\n        _this.farSizes = [];\n        /** @private */\n        _this.insideFarSizes = [];\n        /** @private */\n        _this.insideNearSizes = [];\n        /** @private */\n        _this.padding = 0;\n        return _this;\n    }\n    /**\n     * Measure the column size\n     *\n     * @returns {void}\n     * @private\n     */\n    Column.prototype.computeSize = function (axis, scrollBarHeight, definition, chart) {\n        var height = 0;\n        var innerPadding = 5;\n        if (axis.visible && axis.internalVisibility) {\n            height += (axis.findTickSize(axis.crossInAxis) + ((axis.scrollbarSettings.position === 'Top' || axis.scrollbarSettings.position === 'Bottom') ? 0 : scrollBarHeight) +\n                axis.findLabelSize(axis.crossInAxis, innerPadding, definition, chart) + axis.lineStyle.width * 0.5);\n        }\n        if (axis.isAxisOpposedPosition) {\n            this.farSizes.push(height);\n        }\n        else {\n            this.nearSizes.push(height);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Column.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], Column.prototype, \"border\", void 0);\n    return Column;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the major grid lines in the axis, allowing for the setting of properties such as color, width, and dashArray to define how the grid lines appear on the chart.\n */\nvar MajorGridLines = /** @class */ (function (_super) {\n    __extends(MajorGridLines, _super);\n    function MajorGridLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], MajorGridLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], MajorGridLines.prototype, \"dashArray\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], MajorGridLines.prototype, \"color\", void 0);\n    return MajorGridLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the minor grid lines in the axis, allowing for the setting of properties such as color, width, and dashArray to define how the grid lines appear on the chart.\n */\nvar MinorGridLines = /** @class */ (function (_super) {\n    __extends(MinorGridLines, _super);\n    function MinorGridLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0.7)\n    ], MinorGridLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], MinorGridLines.prototype, \"dashArray\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], MinorGridLines.prototype, \"color\", void 0);\n    return MinorGridLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the axis line of a chart, allowing customization of the line's appearance, including its color, width, and dashArray.\n */\nvar AxisLine = /** @class */ (function (_super) {\n    __extends(AxisLine, _super);\n    function AxisLine() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], AxisLine.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], AxisLine.prototype, \"dashArray\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], AxisLine.prototype, \"color\", void 0);\n    return AxisLine;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the major tick lines in the axis, allowing for the setting of properties such as color, width, and height to define how the tick lines appear on the chart.\n */\nvar MajorTickLines = /** @class */ (function (_super) {\n    __extends(MajorTickLines, _super);\n    function MajorTickLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], MajorTickLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], MajorTickLines.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], MajorTickLines.prototype, \"color\", void 0);\n    return MajorTickLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the minor tick lines in the axis, allowing for the setting of properties such as color, width, and height to define how the tick lines appear on the chart.\n */\nvar MinorTickLines = /** @class */ (function (_super) {\n    __extends(MinorTickLines, _super);\n    function MinorTickLines() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0.7)\n    ], MinorTickLines.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], MinorTickLines.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], MinorTickLines.prototype, \"color\", void 0);\n    return MinorTickLines;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the crosshair tooltip for the chart, allowing customization of the tooltip's appearance and content during crosshair interactions.\n */\nvar CrosshairTooltip = /** @class */ (function (_super) {\n    __extends(CrosshairTooltip, _super);\n    function CrosshairTooltip() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CrosshairTooltip.prototype, \"enable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CrosshairTooltip.prototype, \"fill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], CrosshairTooltip.prototype, \"textStyle\", void 0);\n    return CrosshairTooltip;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The Axis class configures the axes in the chart. It provides various properties to customize the appearance and behavior of chart axes, including settings for labels, grid lines, ticks, and more.\n *\n * @public\n */\nvar Axis = /** @class */ (function (_super) {\n    __extends(Axis, _super);\n    function Axis(parent, propName, defaultValue, isArray) {\n        var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n        /** @private */\n        _this.visibleLabels = [];\n        /** @private */\n        _this.series = [];\n        /** @private */\n        _this.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Rect(undefined, undefined, 0, 0);\n        /** @private */\n        _this.axisBottomLine = null;\n        /** @private */\n        _this.intervalDivs = [10, 5, 2, 1];\n        /** @private */\n        _this.isStack100 = false;\n        /** @private */\n        _this.crossAt = null;\n        /** @private */\n        _this.updatedRect = null;\n        /** @private */\n        _this.multiLevelLabelHeight = 0;\n        /** @private */\n        _this.isChart = true;\n        /** @private */\n        _this.isIntervalInDecimal = true;\n        /** @private */\n        _this.titleCollection = [];\n        /** @private */\n        _this.titleSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0);\n        /**\n         * Task: BLAZ-2044\n         * This property used to hide the axis when series hide from legend click\n         *\n         * @private\n         */\n        _this.internalVisibility = true;\n        /**\n         * This property is used to place the vertical axis in opposed position and horizontal axis in inversed\n         * when RTL is enabled in chart\n         *\n         * @private */\n        _this.isRTLEnabled = false;\n        _this.angle = _this.labelRotation;\n        return _this;\n    }\n    /**\n     * The function used to find tick size.\n     *\n     * @param {Axis} crossAxis - The cross axis for which to find the tick size.\n     * @returns {number} - The tick line size.\n     * @private\n     */\n    Axis.prototype.findTickSize = function (crossAxis) {\n        if (this.tickPosition === 'Inside') {\n            return 0;\n        }\n        if (crossAxis && (!crossAxis.visibleRange || this.isInside(crossAxis.visibleRange))) {\n            return 0;\n        }\n        return this.majorTickLines.height;\n    };\n    /**\n     * The function used to find axis position.\n     *\n     * @returns {number}\n     * @private\n     */\n    Axis.prototype.isInside = function (range) {\n        return ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.inside)(this.crossAt, range) ||\n            (!this.isAxisOpposedPosition && this.crossAt >= range.max) || (this.isAxisOpposedPosition && this.crossAt <= range.min));\n    };\n    /**\n     * The function used to find label Size.\n     *\n     * @param {Axis} crossAxis - The cross axis for which to find the label size.\n     * @param {number} innerPadding - The inner padding.\n     * @param {Row | Column} definition - The row or column definition.\n     * @param {Chart} chart - The chart instance.\n     * @returns {number} - The label size.\n     * @private\n     */\n    Axis.prototype.findLabelSize = function (crossAxis, innerPadding, definition, chart) {\n        var titleSize = 0;\n        var isHorizontal = this.orientation === 'Horizontal';\n        if (this.title) {\n            var angle = this.titleRotation;\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(angle))) {\n                this.titleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(this.title, this.titleStyle, chart.themeStyle.axisTitleFont);\n                titleSize = this.titleSize.height + innerPadding;\n            }\n            else {\n                this.titleSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.rotateTextSize)(this.titleStyle, this.title, angle, chart, chart.themeStyle.axisTitleFont);\n                titleSize = (this.orientation === 'Vertical' ? this.titleSize.width : this.titleSize.height) + innerPadding;\n            }\n            if (this.rect.width || this.rect.height) {\n                var length_1 = isHorizontal ? this.rect.width : this.rect.height;\n                this.titleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getTitle)(this.title, this.titleStyle, length_1, chart.enableRtl, chart.themeStyle.axisTitleFont);\n                titleSize = (titleSize * this.titleCollection.length);\n            }\n        }\n        var diff;\n        var value;\n        var labelSize = titleSize + innerPadding + this.titlePadding + this.labelPadding +\n            ((this.orientation === 'Vertical') ? this.maxLabelSize.width : this.maxLabelSize.height) + this.multiLevelLabelHeight;\n        if (crossAxis && this.placeNextToAxisLine) {\n            var range = crossAxis.visibleRange;\n            var size = (crossAxis.orientation === 'Horizontal') ? crossAxis.rect.width : crossAxis.rect.height;\n            if (!range || !size) {\n                return 0;\n            }\n            else if (this.isInside(range)) {\n                value = this.findDifference(crossAxis);\n                diff = (value) * (size / range.delta);\n                diff = (value) * ((size - (diff < labelSize ? (labelSize - diff) : 0)) / range.delta);\n                labelSize = (diff < labelSize) ? (labelSize - diff) : 0;\n            }\n        }\n        var titlePadding = ((this.title !== '' && this.titlePadding !== 5) ? this.titlePadding : 0);\n        if (this.isAxisOpposedPosition) {\n            definition.insideFarSizes.push(labelSize);\n        }\n        else {\n            definition.insideNearSizes.push(labelSize);\n        }\n        if (this.labelPosition === 'Inside') {\n            if ((this.isAxisOpposedPosition && definition.farSizes.length < 1) ||\n                (!this.isAxisOpposedPosition && definition.nearSizes.length < 1)) {\n                innerPadding = (this.labelPosition === 'Inside' && (chart.axes.indexOf(this) > -1)) ? -5 : 5;\n                return titleSize + innerPadding + titlePadding;\n            }\n            else {\n                return titleSize + innerPadding + titlePadding + this.labelPadding +\n                    ((this.orientation === 'Vertical') ? this.maxLabelSize.width : this.maxLabelSize.height) + this.multiLevelLabelHeight;\n            }\n        }\n        return labelSize;\n    };\n    /**\n     * The function used to find axis position.\n     *\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.updateCrossValue = function () {\n        var value = this.crossAt;\n        if (value === null || !this.isInside(this.crossInAxis.visibleRange)) {\n            this.updatedRect = this.rect;\n            return null;\n        }\n        var range = this.crossInAxis.visibleRange;\n        if (!this.isAxisOpposedPosition) {\n            if (this.crossAt > range.max) {\n                value = range.max;\n            }\n        }\n        else {\n            if (this.crossAt < range.min) {\n                value = range.min;\n            }\n        }\n        this.updatedRect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.rect, null, true);\n        if (this.orientation === 'Horizontal') {\n            value = this.crossInAxis.rect.height - ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.valueToCoefficient)(value, this.crossInAxis) * this.crossInAxis.rect.height);\n            this.updatedRect.y = this.crossInAxis.rect.y + value;\n        }\n        else {\n            value = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.valueToCoefficient)(value, this.crossInAxis) * this.crossInAxis.rect.width;\n            this.updatedRect.x = this.crossInAxis.rect.x + value;\n        }\n    };\n    Axis.prototype.findDifference = function (crossAxis) {\n        var value = 0;\n        if (this.isAxisOpposedPosition) {\n            value = crossAxis.isAxisInverse ? crossAxis.visibleRange.min : crossAxis.visibleRange.max;\n        }\n        else {\n            value = crossAxis.isAxisInverse ? crossAxis.visibleRange.max : crossAxis.visibleRange.min;\n        }\n        return Math.abs(this.crossAt - value);\n    };\n    /**\n     * Calculate the visible range for the axis.\n     *\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.calculateVisibleRangeOnZooming = function () {\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.isZoomSet)(this)) {\n            var baseRange = this.actualRange;\n            var start = void 0;\n            var end = void 0;\n            if (!this.isAxisInverse) {\n                start = this.actualRange.min + this.zoomPosition * this.actualRange.delta;\n                end = start + this.zoomFactor * this.actualRange.delta;\n            }\n            else {\n                start = this.actualRange.max - (this.zoomPosition * this.actualRange.delta);\n                end = start - (this.zoomFactor * this.actualRange.delta);\n            }\n            if (start < baseRange.min) {\n                end = end + (baseRange.min - start);\n                start = baseRange.min;\n            }\n            if (end > baseRange.max) {\n                start = start - (end - baseRange.max);\n                end = baseRange.max;\n            }\n            this.doubleRange = new _utils_double_range__WEBPACK_IMPORTED_MODULE_4__.DoubleRange(start, end);\n            this.visibleRange = { min: this.doubleRange.start, max: this.doubleRange.end,\n                delta: this.doubleRange.delta, interval: this.visibleRange.interval };\n        }\n    };\n    /**\n     * Triggers the event.\n     *\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.triggerRangeRender = function (chart, minimum, maximum, interval) {\n        var argsData = {\n            cancel: false, name: _common_model_constants__WEBPACK_IMPORTED_MODULE_6__.axisRangeCalculated, axis: this,\n            minimum: minimum, maximum: maximum, interval: interval\n        };\n        chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_6__.axisRangeCalculated, argsData);\n        if (!argsData.cancel) {\n            this.visibleRange = { min: argsData.minimum, max: argsData.maximum, interval: argsData.interval,\n                delta: argsData.maximum - argsData.minimum };\n        }\n    };\n    /**\n     * Calculate padding for the axis.\n     *\n     * @returns {string}\n     * @private\n     */\n    Axis.prototype.getRangePadding = function (chart) {\n        var padding = this.rangePadding;\n        if (padding !== 'Auto') {\n            return padding;\n        }\n        switch (this.orientation) {\n            case 'Horizontal':\n                if (chart.requireInvertedAxis) {\n                    padding = (this.isStack100 || this.baseModule.chart.stockChart ? 'Round' : 'Normal');\n                }\n                else {\n                    padding = 'None';\n                }\n                break;\n            case 'Vertical':\n                if (!chart.requireInvertedAxis) {\n                    padding = (this.isStack100 || this.baseModule.chart.stockChart ? 'Round' : 'Normal');\n                }\n                else {\n                    padding = 'None';\n                }\n                break;\n        }\n        return padding;\n    };\n    /**\n     * Calculate maximum label width for the axis.\n     *\n     * @param {Chart} chart - The chart for which to calculate the maximum label width.\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.getMaxLabelWidth = function (chart) {\n        var _this = this;\n        var pointX;\n        var previousEnd = 0;\n        var isIntersect = false;\n        var isAxisLabelBreak;\n        this.angle = this.labelRotation;\n        this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0);\n        var action = this.labelIntersectAction;\n        var label;\n        var _loop_1 = function (i, len) {\n            label = this_1.visibleLabels[i];\n            isAxisLabelBreak = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.isBreakLabel)(label.originalText);\n            if (isAxisLabelBreak) {\n                label.size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(label.originalText.replace(/<br>/g, ' '), this_1.labelStyle, chart.themeStyle.axisLabelFont);\n                label.breakLabelSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(this_1.enableTrim ? label.text.join('<br>') : label.originalText, this_1.labelStyle, chart.themeStyle.axisLabelFont);\n            }\n            else if (this_1.enableWrap) {\n                var maximumLabelHeight = chart.initialClipRect.height / this_1.visibleLabels.length;\n                label.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.textWrap)(label.text, this_1.maximumLabelWidth, this_1.labelStyle, chart.enableRtl, null, null, chart.themeStyle.axisLabelFont, this_1.orientation === 'Vertical' ? maximumLabelHeight : null);\n                var maxTextWidth_1 = 0;\n                var maxTextHeight_1 = 0;\n                label.text.forEach(function (textLine) {\n                    var textSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(textLine, _this.labelStyle, chart.themeStyle.axisLabelFont);\n                    maxTextWidth_1 = Math.max(maxTextWidth_1, textSize.width);\n                    maxTextHeight_1 += textSize.height;\n                });\n                label.size.width = maxTextWidth_1;\n                label.size.height = maxTextHeight_1;\n            }\n            else {\n                if ((this_1.angle === -90 || this_1.angle === 90 || this_1.angle === 270 || this_1.angle === -270) && this_1.orientation === 'Vertical') {\n                    label.size = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.rotateTextSize)(this_1.labelStyle, label.text, this_1.angle, chart, chart.themeStyle.axisLabelFont);\n                }\n                else {\n                    label.size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(label.text, this_1.labelStyle, chart.themeStyle.axisLabelFont);\n                }\n            }\n            var width = isAxisLabelBreak ? label.breakLabelSize.width : label.size.width;\n            if (width > this_1.maxLabelSize.width) {\n                this_1.maxLabelSize.width = width;\n                this_1.rotatedLabel = label.text;\n            }\n            var height = isAxisLabelBreak ? label.breakLabelSize.height : label.size.height;\n            if (height > this_1.maxLabelSize.height) {\n                this_1.maxLabelSize.height = height;\n            }\n            if (isAxisLabelBreak) {\n                label.text = this_1.enableTrim ? label.text : label.originalText.split('<br>');\n            }\n            if (action === 'None' || action === 'Hide' || action === 'Trim') {\n                return \"continue\";\n            }\n            if ((action !== 'None' || this_1.angle % 360 === 0) && this_1.orientation === 'Horizontal' &&\n                this_1.rect.width > 0 && !isIntersect) {\n                var width1 = isAxisLabelBreak ? label.breakLabelSize.width : label.size.width;\n                pointX = ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.valueToCoefficient)(label.value, this_1) * this_1.rect.width) + this_1.rect.x;\n                pointX -= width1 / 2;\n                if (this_1.edgeLabelPlacement === 'Shift') {\n                    if (i === 0 && pointX < this_1.rect.x) {\n                        pointX = this_1.rect.x;\n                    }\n                    if (i === this_1.visibleLabels.length - 1 && ((pointX + width1) > (this_1.rect.x + this_1.rect.width))) {\n                        pointX = this_1.rect.x + this_1.rect.width - width1;\n                    }\n                }\n                switch (action) {\n                    case 'MultipleRows':\n                        if (i > 0) {\n                            this_1.findMultiRows(i, pointX, label, isAxisLabelBreak);\n                        }\n                        break;\n                    case 'Rotate45':\n                    case 'Rotate90':\n                        if (i > 0 && (!this_1.isAxisInverse ? pointX <= previousEnd : pointX + width1 >= previousEnd)) {\n                            this_1.angle = (action === 'Rotate45') ? 45 : 90;\n                            isIntersect = true;\n                        }\n                        break;\n                    default: {\n                        if (isAxisLabelBreak) {\n                            var result = void 0;\n                            var result1 = [];\n                            var str = void 0;\n                            for (var index = 0; index < label.text.length; index++) {\n                                result = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.textWrap)(label.text[index], this_1.rect.width / this_1.visibleLabels.length, this_1.labelStyle, chart.enableRtl, null, null, chart.themeStyle.axisLabelFont);\n                                if (result.length > 1) {\n                                    for (var j = 0; j < result.length; j++) {\n                                        str = result[j];\n                                        result1.push(str);\n                                    }\n                                }\n                                else {\n                                    result1.push(result[0]);\n                                }\n                            }\n                            label.text = result1;\n                        }\n                        else {\n                            label.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.textWrap)(label.text, this_1.rect.width / this_1.visibleLabels.length, this_1.labelStyle, chart.enableRtl, null, null, chart.themeStyle.axisLabelFont);\n                        }\n                        var height_1 = (label.size.height * label.text.length);\n                        if (height_1 > this_1.maxLabelSize.height) {\n                            this_1.maxLabelSize.height = height_1;\n                        }\n                        break;\n                    }\n                }\n                previousEnd = this_1.isAxisInverse ? pointX : pointX + width1;\n            }\n        };\n        var this_1 = this;\n        for (var i = 0, len = this.visibleLabels.length; i < len; i++) {\n            _loop_1(i, len);\n        }\n        if (this.angle !== 0 && this.orientation === 'Horizontal') {\n            //I264474: Fix for datasource bind im mounted console error ocurred\n            this.rotatedLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rotatedLabel) ? '' : this.rotatedLabel;\n            var isHorizontalAngle = this.angle === -360 || this.angle === 0 || this.angle === -180 ||\n                this.angle === 180 || this.angle === 360;\n            // To avoid overlap axis label with chart title or chart legend when it is outside.\n            if (this.labelPosition === 'Outside' && !isHorizontalAngle && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.isBreakLabel)(this.rotatedLabel)) {\n                this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(this.maxLabelSize.height, this.maxLabelSize.width);\n            }\n            else {\n                this.maxLabelSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.rotateTextSize)(this.labelStyle, this.rotatedLabel, this.angle, chart, chart.themeStyle.axisLabelFont);\n            }\n        }\n        else if (this.angle !== 0 && this.orientation === 'Vertical') {\n            //I264474: Fix for datasource bind im mounted console error ocurred\n            this.rotatedLabel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rotatedLabel) ? '' : this.rotatedLabel;\n            var isHorizontalAngle = this.angle === -360 || this.angle === 0 || this.angle === -180 ||\n                this.angle === 180 || this.angle === 360;\n            // To avoid overlap axis label with chart title or chart legend when it is outside.\n            if (this.labelPosition === 'Outside' && !isHorizontalAngle && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.isBreakLabel)(this.rotatedLabel)) {\n                this.maxLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(this.maxLabelSize.height, this.maxLabelSize.width);\n            }\n            else {\n                this.maxLabelSize = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.rotateTextSize)(this.labelStyle, this.rotatedLabel, this.angle, chart, chart.themeStyle.axisLabelFont);\n            }\n        }\n        if (chart.multiLevelLabelModule && this.multiLevelLabels.length > 0) {\n            chart.multiLevelLabelModule.getMultilevelLabelsHeight(this);\n        }\n    };\n    /**\n     * Finds the multiple rows for axis.\n     *\n     * @returns {void}\n     */\n    Axis.prototype.findMultiRows = function (length, currentX, currentLabel, isBreakLabels) {\n        var label;\n        var pointX;\n        var width2;\n        var store = [];\n        var isMultiRows;\n        for (var i = length - 1; i >= 0; i--) {\n            label = this.visibleLabels[i];\n            width2 = isBreakLabels ? label.breakLabelSize.width : label.size.width;\n            pointX = ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.valueToCoefficient)(label.value, this) * this.rect.width) + this.rect.x;\n            isMultiRows = !this.isAxisInverse ? currentX < (pointX + width2 * 0.5) :\n                currentX + currentLabel.size.width > (pointX - width2 * 0.5);\n            if (isMultiRows) {\n                store.push(label.index);\n                currentLabel.index = (currentLabel.index > label.index) ? currentLabel.index : label.index + 1;\n            }\n            else {\n                currentLabel.index = store.indexOf(label.index) > -1 ? currentLabel.index : label.index;\n            }\n        }\n        var height = ((isBreakLabels ? currentLabel.breakLabelSize.height : currentLabel.size.height) * currentLabel.index) +\n            (5 * (currentLabel.index - 1));\n        if (height > this.maxLabelSize.height) {\n            this.maxLabelSize.height = height;\n        }\n    };\n    /**\n     * Finds the default module for axis.\n     *\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.getModule = function (chart) {\n        if (this.valueType === 'Double') {\n            this.baseModule = new _axis_double_axis__WEBPACK_IMPORTED_MODULE_5__.Double(chart);\n        }\n        else {\n            this.baseModule = chart[(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.firstToLowerCase)(this.valueType) + 'Module'];\n        }\n    };\n    /**\n     * Set the axis `opposedPosition` and `isInversed` properties.\n     *\n     * @param {boolean} isPolar - Indicates whether the axis is polar or not.\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.setIsInversedAndOpposedPosition = function (isPolar) {\n        if (isPolar === void 0) { isPolar = false; }\n        this.isAxisOpposedPosition = this.opposedPosition || (!isPolar && this.isRTLEnabled && this.orientation === 'Vertical');\n        if (this.opposedPosition && (!isPolar && this.isRTLEnabled && this.orientation === 'Vertical')) {\n            this.isAxisOpposedPosition = false;\n        }\n        this.isAxisInverse = this.isInversed || (this.isRTLEnabled && this.orientation === 'Horizontal');\n        if (this.isInversed && (!isPolar && this.isRTLEnabled && this.orientation === 'Horizontal')) {\n            this.isAxisInverse = false;\n        }\n    };\n    /**\n     * Updates the axis within the chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    Axis.prototype.updateAxis = function () {\n        var chart = this.baseModule.chart;\n        var chartAxisLayoutPanel = chart.chartAxisLayoutPanel;\n        var index = chart.axisCollections.indexOf(this);\n        var axisElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(chart.element.id + 'AxisInsideCollection');\n        var axisLineElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getElement)(chart.element.id + 'AxisOutsideCollection');\n        chartAxisLayoutPanel.element = chart.renderer.createGroup({ id: chart.element.id + 'AxisGroup' + index + 'Inside' });\n        var outsideElement = chart.renderer.createGroup({ id: chart.element.id + 'AxisGroup' + index + 'Outside' });\n        var isInside = chartAxisLayoutPanel.findAxisPosition(this);\n        chartAxisLayoutPanel.drawAxis(this, index, isInside, outsideElement, axisElement, axisLineElement);\n        if (!chart.enableCanvas) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.appendChildElement)(chart.enableCanvas, axisElement, chartAxisLayoutPanel.element, chart.redraw);\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: '400', color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], Axis.prototype, \"labelStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, CrosshairTooltip)\n    ], Axis.prototype, \"crosshairTooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Axis.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], Axis.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Axis.prototype, \"labelFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Axis.prototype, \"skeleton\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('DateTime')\n    ], Axis.prototype, \"skeletonType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Center')\n    ], Axis.prototype, \"lineBreakAlignment\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"plotOffset\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"plotOffsetLeft\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"plotOffsetTop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"plotOffsetRight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"plotOffsetBottom\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Axis.prototype, \"isIndexed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], Axis.prototype, \"logBase\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"columnIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"rowIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Axis.prototype, \"span\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"desiredIntervals\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], Axis.prototype, \"maximumLabels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Axis.prototype, \"zoomFactor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"zoomPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Axis.prototype, \"enableScrollbarOnZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Axis.prototype, \"opposedPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Axis.prototype, \"enableAutoIntervalOnZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Axis.prototype, \"rangePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Double')\n    ], Axis.prototype, \"valueType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Shift')\n    ], Axis.prototype, \"edgeLabelPlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Axis.prototype, \"intervalType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('BetweenTicks')\n    ], Axis.prototype, \"labelPlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Outside')\n    ], Axis.prototype, \"tickPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Outside')\n    ], Axis.prototype, \"labelPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Axis.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Axis.prototype, \"visible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"minorTicksPerInterval\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"labelRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"titleRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"crossesAt\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Axis.prototype, \"placeNextToAxisLine\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"crossesInAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"minimum\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"maximum\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"interval\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(34)\n    ], Axis.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Axis.prototype, \"enableTrim\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Axis.prototype, \"enableWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Axis.prototype, \"labelPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(5)\n    ], Axis.prototype, \"titlePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, MajorTickLines)\n    ], Axis.prototype, \"majorTickLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, MinorTickLines)\n    ], Axis.prototype, \"minorTickLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, MajorGridLines)\n    ], Axis.prototype, \"majorGridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, MinorGridLines)\n    ], Axis.prototype, \"minorGridLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, AxisLine)\n    ], Axis.prototype, \"lineStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 'Rotate45' : 'Trim')\n    ], Axis.prototype, \"labelIntersectAction\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Axis.prototype, \"isInversed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(100)\n    ], Axis.prototype, \"coefficient\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Axis.prototype, \"startAngle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Axis.prototype, \"startFromZero\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Axis.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(2)\n    ], Axis.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _model_chart_base__WEBPACK_IMPORTED_MODULE_7__.StripLineSettings)\n    ], Axis.prototype, \"stripLines\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _model_chart_base__WEBPACK_IMPORTED_MODULE_7__.MultiLevelLabels)\n    ], Axis.prototype, \"multiLevelLabels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: null, width: 0, type: 'Rectangle' }, _model_chart_base__WEBPACK_IMPORTED_MODULE_7__.LabelBorder)\n    ], Axis.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_chart_base__WEBPACK_IMPORTED_MODULE_7__.ScrollbarSettings)\n    ], Axis.prototype, \"scrollbarSettings\", void 0);\n    return Axis;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/** @private */\nvar VisibleLabels = /** @class */ (function () {\n    function VisibleLabels(text, value, labelStyle, originalText, size, breakLabelSize, index) {\n        if (size === void 0) { size = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0); }\n        if (breakLabelSize === void 0) { breakLabelSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0); }\n        if (index === void 0) { index = 1; }\n        this.text = text;\n        this.originalText = originalText;\n        this.value = value;\n        this.labelStyle = labelStyle;\n        this.size = size;\n        this.breakLabelSize = breakLabelSize;\n        this.index = index;\n    }\n    return VisibleLabels;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/axis/axis.js?");

/***/ })

}]);