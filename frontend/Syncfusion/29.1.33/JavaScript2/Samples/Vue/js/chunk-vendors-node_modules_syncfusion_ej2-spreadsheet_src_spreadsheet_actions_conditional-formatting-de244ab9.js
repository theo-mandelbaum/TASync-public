"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_actions_conditional-formatting-de244ab9"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/conditional-formatting.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/conditional-formatting.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConditionalFormatting: () => (/* binding */ ConditionalFormatting)\n/* harmony export */ });\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n/* harmony import */ var _workbook_base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../workbook/base/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _workbook_common_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../workbook/common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Represents Conditional Formatting support for Spreadsheet.\n */\nvar ConditionalFormatting = /** @class */ (function () {\n    /**\n     * Constructor for the Spreadsheet Conditional Formatting module.\n     *\n     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Conditional Formatting module.\n     */\n    function ConditionalFormatting(parent) {\n        this.divElements = [];\n        this.spanElements = [];\n        this.inputElements = [];\n        this.dropDownListElements = [];\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * To destroy the Conditional Formatting module.\n     *\n     * @returns {void} - To destroy the Conditional Formatting module.\n     */\n    ConditionalFormatting.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.dupData) {\n            this.dupData = [];\n        }\n        if (this.colorData) {\n            this.colorData = [];\n        }\n        this.parent = null;\n    };\n    ConditionalFormatting.prototype.addEventListener = function () {\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.applyCF, this.applyCF, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_0__.renderCFDlg, this.renderCFDlg, this);\n        this.parent.on(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.clearCF, this.clearCF, this);\n    };\n    ConditionalFormatting.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.applyCF, this.applyCF);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_0__.renderCFDlg, this.renderCFDlg);\n            this.parent.off(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.clearCF, this.clearCF);\n        }\n    };\n    ConditionalFormatting.prototype.clearCF = function (args) {\n        var _this = this;\n        var sheet = this.parent.getActiveSheet();\n        var clearFn = function (rIdx, cIdx, cell, td) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.removeClass)([td], ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt', 'e-iconset']);\n            var styleVal;\n            var style;\n            ['backgroundColor', 'color'].forEach(function (styleProp) {\n                if (td.style[\"\" + styleProp]) {\n                    td.style[\"\" + styleProp] = '';\n                    styleVal = cell && cell.style && cell.style[\"\" + styleProp] || _this.parent.commonCellStyle[\"\" + styleProp];\n                    if (styleVal) {\n                        style = {};\n                        style[\"\" + styleProp] = styleVal;\n                        _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.applyCellFormat, { style: style, rowIdx: rIdx, colIdx: cIdx, td: td });\n                    }\n                }\n            });\n            var cfEle;\n            ['.e-cf-databar', '.e-iconsetspan'].forEach(function (clsSelector) {\n                cfEle = td.querySelector(clsSelector);\n                var wrapElement = td.querySelector('.e-wrap-content');\n                if (cfEle) {\n                    if (wrapElement) {\n                        wrapElement.removeChild(cfEle);\n                    }\n                    else {\n                        td.removeChild(cfEle);\n                    }\n                    td.textContent = _this.parent.getDisplayText(cell);\n                }\n            });\n        };\n        this.updateRange(sheet, args.indexes, this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCellIndexes)(sheet.topLeftCell), clearFn);\n    };\n    ConditionalFormatting.prototype.renderCFDlg = function (args) {\n        var _this = this;\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var readonlyAlertThrow;\n        var dialogInst = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.dialog);\n        dialogInst.show({\n            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-conditionalformatting-dlg',\n            header: args.action.replace('...', ''),\n            beforeOpen: function (beforeOpenArgs) {\n                var dlgArgs = {\n                    dialogName: 'ConditionalFormatDialog',\n                    element: beforeOpenArgs.element, target: beforeOpenArgs.target, cancel: beforeOpenArgs.cancel\n                };\n                _this.parent.trigger('dialogBeforeOpen', dlgArgs);\n                if (dlgArgs.cancel) {\n                    beforeOpenArgs.cancel = true;\n                }\n                else {\n                    dialogInst.dialogInstance.content = _this.cfDlgContent(args.action);\n                    dialogInst.dialogInstance.dataBind();\n                    (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.focus)(_this.parent.element);\n                }\n            },\n            beforeClose: this.dialogBeforeClose.bind(this),\n            close: function () {\n                if (readonlyAlertThrow) {\n                    _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_0__.readonlyAlert, null);\n                    readonlyAlertThrow = false;\n                }\n            },\n            buttons: [{\n                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },\n                    click: function () {\n                        var sheet = _this.parent.getActiveSheet();\n                        if ((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.isReadOnlyCells)(_this.parent, (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.getSwapRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(sheet.selectedRange)))) {\n                            readonlyAlertThrow = true;\n                        }\n                        else {\n                            _this.dlgClickHandler(args.action);\n                        }\n                        dialogInst.hide();\n                    }\n                }]\n        });\n    };\n    ConditionalFormatting.prototype.dialogBeforeClose = function () {\n        var numeric = this.numericTBElements;\n        if (numeric && numeric.element) {\n            numeric.destroy();\n            numeric.element.remove();\n        }\n        this.numericTBElements = null;\n        this.dropDownListElements.forEach(function (dropDownList) {\n            if (dropDownList && dropDownList.element) {\n                dropDownList.destroy();\n                dropDownList.element.remove();\n            }\n        });\n        this.dropDownListElements = [];\n        if (this.value1Inp) {\n            this.value1Inp.removeEventListener('input', this.validateCFInput.bind(this));\n            if (this.value1Inp.parentNode) {\n                this.value1Inp.parentNode.removeChild(this.value1Inp);\n            }\n            this.value1Inp = null;\n        }\n        if (this.value2Inp) {\n            this.value2Inp.removeEventListener('input', this.validateCFInput.bind(this));\n            if (this.value2Inp.parentNode) {\n                this.value2Inp.parentNode.removeChild(this.value2Inp);\n            }\n            this.value2Inp = null;\n        }\n        (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.removeElements)(this.spanElements);\n        this.spanElements = [];\n        (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.removeElements)(this.inputElements);\n        this.inputElements = [];\n        (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.removeElements)(this.divElements);\n        this.divElements = [];\n    };\n    ConditionalFormatting.prototype.dlgClickHandler = function (action) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var cont = this.parent.element.querySelector('.e-conditionalformatting-dlg .e-dlg-content .e-cf-dlg');\n        var cf = { cFColor: this.getCFColor(cont.querySelector('.e-cfsub .e-input').value),\n            range: this.parent.getActiveSheet().selectedRange };\n        var cfInputs = cont.querySelectorAll('.e-cfmain .e-input');\n        if (action === l10n.getConstant('DuplicateValues') + '...') {\n            cf.type = cfInputs[0].value === l10n.getConstant('Duplicate') ? 'Duplicate' : 'Unique';\n        }\n        else {\n            cf.type = this.getType(action);\n            var cfValues = [];\n            if (cfInputs[0]) {\n                cfValues.push(cfInputs[0].value);\n            }\n            if (cfInputs[1]) {\n                cfValues.push(cfInputs[1].value);\n            }\n            (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.parseLocaleNumber)(cfValues, this.parent);\n            cf.value = cfValues.join(',');\n        }\n        this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.setCFRule, { cfModel: cf, isAction: true });\n    };\n    ConditionalFormatting.prototype.getType = function (action) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var result;\n        switch (action) {\n            case l10n.getConstant('GreaterThan') + '...':\n                result = 'GreaterThan';\n                break;\n            case l10n.getConstant('LessThan') + '...':\n                result = 'LessThan';\n                break;\n            case l10n.getConstant('Between') + '...':\n                result = 'Between';\n                break;\n            case l10n.getConstant('CFEqualTo') + '...':\n                result = 'EqualTo';\n                break;\n            case l10n.getConstant('TextThatContains') + '...':\n                result = 'ContainsText';\n                break;\n            case l10n.getConstant('ADateOccuring') + '...':\n                result = 'DateOccur';\n                break;\n            case l10n.getConstant('Top10Items') + '...':\n                result = 'Top10Items';\n                break;\n            case l10n.getConstant('Bottom10Items') + '...':\n                result = 'Bottom10Items';\n                break;\n            case l10n.getConstant('Top10') + ' %...':\n                result = 'Top10Percentage';\n                break;\n            case l10n.getConstant('Bottom10') + ' %...':\n                result = 'Bottom10Percentage';\n                break;\n            case l10n.getConstant('AboveAverage') + '...':\n                result = 'AboveAverage';\n                break;\n            case l10n.getConstant('BelowAverage') + '...':\n                result = 'BelowAverage';\n                break;\n        }\n        return result;\n    };\n    ConditionalFormatting.prototype.getCFColor = function (value) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var result = 'RedFT';\n        switch (value) {\n            case l10n.getConstant('LightRedFillWithDarkRedText'):\n                result = 'RedFT';\n                break;\n            case l10n.getConstant('YellowFillWithDarkYellowText'):\n                result = 'YellowFT';\n                break;\n            case l10n.getConstant('GreenFillWithDarkGreenText'):\n                result = 'GreenFT';\n                break;\n            case l10n.getConstant('RedFill'):\n                result = 'RedF';\n                break;\n            case l10n.getConstant('RedText'):\n                result = 'RedT';\n                break;\n        }\n        return result;\n    };\n    ConditionalFormatting.prototype.cfDlgContent = function (action) {\n        var dlgText = this.getDlgText(action);\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var dlgContent = this.parent.createElement('div', { className: 'e-cf-dlg' });\n        var mainDiv = this.parent.createElement('div', { className: 'e-cfmain' });\n        var subDiv = this.parent.createElement('div', { className: 'e-cfsub' });\n        this.divElements.push(dlgContent);\n        this.divElements.push(mainDiv);\n        this.divElements.push(subDiv);\n        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header' });\n        value1Text.innerText = dlgText;\n        this.value1Inp =\n            this.parent.createElement('input', { className: 'e-input', id: 'valueInput', attrs: { type: 'text',\n                    'aria-label': dlgText } });\n        var duplicateSelectEle = this.parent.createElement('input', { className: 'e-select' });\n        var subDivText = this.parent.createElement('span', { className: 'e-header' });\n        subDivText.innerText = l10n.getConstant('With');\n        var colorSelectEle = this.parent.createElement('input', { className: 'e-select' });\n        this.spanElements.push(value1Text);\n        this.inputElements.push(duplicateSelectEle);\n        this.spanElements.push(subDivText);\n        this.inputElements.push(colorSelectEle);\n        dlgContent.appendChild(mainDiv);\n        dlgContent.appendChild(subDiv);\n        mainDiv.appendChild(value1Text);\n        var setValidation;\n        if (action !== l10n.getConstant('DuplicateValues') + '...') {\n            if (action !== l10n.getConstant('AboveAverage') + '...' && action !== l10n.getConstant('BelowAverage') + '...') {\n                mainDiv.appendChild(this.value1Inp);\n                setValidation = true;\n                var percent = action === l10n.getConstant('Top10') + ' %...' || action === l10n.getConstant('Bottom10') + ' %...';\n                if (action === l10n.getConstant('Top10Items') + '...' || action === l10n.getConstant('Bottom10Items') + '...' || percent) {\n                    this.value1Inp.maxLength = percent ? 3 : 4;\n                    var numeric = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_6__.NumericTextBox({ value: 10, min: 1, max: percent ? 100 : 1000, format: '###' });\n                    this.numericTBElements = numeric;\n                    numeric.appendTo(this.value1Inp);\n                }\n            }\n        }\n        else {\n            mainDiv.appendChild(duplicateSelectEle);\n            this.dupData = [\n                { text: l10n.getConstant('Duplicate'), id: 'duplicate' },\n                { text: l10n.getConstant('Unique'), id: 'unique' }\n            ];\n            var dupList = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_5__.DropDownList({\n                dataSource: this.dupData,\n                index: 0,\n                popupHeight: '200px'\n            });\n            this.dropDownListElements.push(dupList);\n            dupList.appendTo(duplicateSelectEle);\n        }\n        if (action === l10n.getConstant('Between') + '...') {\n            var value2Text = this.parent.createElement('span', { className: 'e-header e-header-2' });\n            value2Text.innerText = l10n.getConstant('And');\n            this.value2Inp = this.parent.createElement('input', { className: 'e-input e-between' });\n            this.spanElements.push(value2Text);\n            mainDiv.appendChild(value2Text);\n            mainDiv.appendChild(this.value2Inp);\n            this.value2Inp.addEventListener('input', this.validateCFInput.bind(this));\n        }\n        if (setValidation) {\n            this.validateCFInput({ target: this.value1Inp });\n            this.value1Inp.addEventListener('input', this.validateCFInput.bind(this));\n        }\n        subDiv.appendChild(subDivText);\n        subDiv.appendChild(colorSelectEle);\n        this.colorData = [\n            { text: l10n.getConstant('LightRedFillWithDarkRedText'), value: 'redft', id: 'redft' },\n            { text: l10n.getConstant('YellowFillWithDarkYellowText'), id: 'yellowft' },\n            { text: l10n.getConstant('GreenFillWithDarkGreenText'), id: 'greenft' },\n            { text: l10n.getConstant('RedFill'), id: 'redf' },\n            { text: l10n.getConstant('RedText'), id: 'redt' }\n        ];\n        var colorList = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_5__.DropDownList({\n            dataSource: this.colorData,\n            index: 0,\n            popupHeight: '200px'\n        });\n        this.dropDownListElements.push(colorList);\n        colorList.appendTo(colorSelectEle);\n        return dlgContent;\n    };\n    ConditionalFormatting.prototype.validateCFInput = function (e) {\n        var dialogInst = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.dialog);\n        var text = e.target.value;\n        var btn = dialogInst.dialogInstance.element.getElementsByClassName('e-primary')[0];\n        if (text && (e.target.classList.contains('e-between') || e.target.parentElement.querySelector('.e-between'))) {\n            text = e.target.parentElement.querySelector((e.target.classList.contains('e-between') ? '.e-input' : '.e-between')).value;\n        }\n        btn.disabled = !(text.trim());\n    };\n    ConditionalFormatting.prototype.checkCellHandler = function (rowIdx, colIdx, cf) {\n        var ranges = cf.range.trim().split(',');\n        return ranges.some(function (range) {\n            var indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(range.includes(':') ? range : range + \":\" + range);\n            return rowIdx >= indexes[0] && rowIdx <= indexes[2] && colIdx >= indexes[1] && colIdx <= indexes[3];\n        });\n    };\n    ConditionalFormatting.prototype.getDlgText = function (action) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_0__.locale);\n        var result = '';\n        switch (action) {\n            case l10n.getConstant('GreaterThan') + '...':\n                result = l10n.getConstant('FormatCellsGreaterThan');\n                break;\n            case l10n.getConstant('LessThan') + '...':\n                result = l10n.getConstant('FormatCellsLessThan');\n                break;\n            case l10n.getConstant('Between') + '...':\n                result = l10n.getConstant('FormatCellsBetween');\n                break;\n            case l10n.getConstant('CFEqualTo') + '...':\n                result = l10n.getConstant('FormatCellsEqualTo');\n                break;\n            case l10n.getConstant('TextThatContains') + '...':\n                result = l10n.getConstant('FormatCellsThatContainTheText');\n                break;\n            case l10n.getConstant('ADateOccuring') + '...':\n                result = l10n.getConstant('FormatCellsThatContainADateOccurring');\n                break;\n            case l10n.getConstant('DuplicateValues') + '...':\n                result = l10n.getConstant('FormatCellsDuplicate');\n                break;\n            case l10n.getConstant('Top10Items') + '...':\n                result = l10n.getConstant('FormatCellsTop');\n                break;\n            case l10n.getConstant('Top10') + ' %...':\n                result = l10n.getConstant('FormatCellsTop');\n                break;\n            case l10n.getConstant('Bottom10Items') + '...':\n                result = l10n.getConstant('FormatCellsBottom');\n                break;\n            case l10n.getConstant('Bottom10') + ' %...':\n                result = l10n.getConstant('FormatCellsBottom');\n                break;\n            case l10n.getConstant('AboveAverage') + '...':\n                result = l10n.getConstant('FormatCellsAbove');\n                break;\n            case l10n.getConstant('BelowAverage') + '...':\n                result = l10n.getConstant('FormatCellsBelow');\n                break;\n        }\n        return result;\n    };\n    ConditionalFormatting.prototype.updateResult = function (cf, sheet, isDataBar, isColorScale, isAverage, isTopBottom, isIconSets, input) {\n        var valueObj = {};\n        var dupValueObj = {};\n        var rangeArr = cf.range.split(',');\n        var result = [];\n        var rangeIndexes;\n        var val;\n        var cell;\n        var cellType;\n        var updateFn;\n        if (isDataBar) {\n            updateFn = function () {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType !== 'Text') {\n                    var intVal = parseFloat(val);\n                    if (intVal >= 0) {\n                        if (result[0] === undefined || intVal > result[0]) {\n                            result[0] = intVal;\n                        }\n                    }\n                    else if (result[1] === undefined || intVal < result[1]) {\n                        result[1] = intVal;\n                    }\n                }\n            };\n        }\n        else if (isColorScale) {\n            updateFn = function () {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType !== 'Text') {\n                    var intVal = parseFloat(val);\n                    result.push(Number(intVal));\n                }\n            };\n        }\n        else if (isAverage) {\n            result = [0, 0];\n            updateFn = function () {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType !== 'Text') {\n                    result[0] += parseFloat(val);\n                    result[1]++;\n                }\n            };\n        }\n        else if (isTopBottom) {\n            updateFn = function () {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType !== 'Text') {\n                    result.push(parseFloat(val));\n                }\n            };\n        }\n        else if (isIconSets) {\n            updateFn = function () {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType !== 'Text') {\n                    var intVal = parseFloat(val);\n                    if (result[0] === undefined || intVal < result[0]) {\n                        result[0] = intVal;\n                    }\n                    if (result[1] === undefined || intVal > result[1]) {\n                        result[1] = intVal;\n                    }\n                }\n            };\n        }\n        else {\n            updateFn = function () {\n                if (valueObj[\"\" + val]) {\n                    if (val !== '') {\n                        if (!dupValueObj[\"\" + val]) {\n                            dupValueObj[\"\" + val] = true;\n                            result.push(val);\n                        }\n                    }\n                }\n                else {\n                    valueObj[\"\" + val] = true;\n                }\n            };\n        }\n        for (var rangeIdx = 0; rangeIdx < rangeArr.length; rangeIdx++) {\n            rangeIndexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(rangeArr[rangeIdx]);\n            for (var i = rangeIndexes[0]; i <= rangeIndexes[2]; i++) {\n                for (var j = rangeIndexes[1]; j <= rangeIndexes[3]; j++) {\n                    cell = (0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(i, j, sheet, false, true);\n                    cellType = '';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell.value)) {\n                        val = cell.value.toString().toLowerCase();\n                        cellType = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getTypeFromFormat)(cell.format);\n                        updateFn();\n                    }\n                    else if (cell.formula) {\n                        this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.calculateFormula, {\n                            cell: cell, rowIdx: i, colIdx: j, sheetIndex: this.parent.activeSheetIndex\n                        });\n                        val = cell.value.toString().toLowerCase();\n                        cellType = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getTypeFromFormat)(cell.format);\n                        updateFn();\n                    }\n                }\n            }\n        }\n        if (isColorScale || isTopBottom) {\n            result = result.sort(function (n1, n2) { return n1 - n2; });\n            if (!cf.type.includes('Bottom')) {\n                result = result.reverse();\n            }\n            if (isTopBottom) {\n                var endIdx = parseFloat(input);\n                if (cf.type.includes('Percentage')) {\n                    endIdx = endIdx / (100 / result.length);\n                    endIdx = (endIdx < 1) ? 1 : endIdx;\n                }\n                result = result.slice(0, endIdx);\n            }\n        }\n        else if (isAverage) {\n            result = [result[0] / result[1]];\n            if (!result[0]) {\n                result = [];\n            }\n        }\n        cf.result = result;\n    };\n    ConditionalFormatting.prototype.applyCF = function (args) {\n        var rangeCheck = !args.cfModel;\n        var sheet = this.parent.getActiveSheet();\n        var cfRule = args.cfModel || sheet.conditionalFormats;\n        var indexes = [args.indexes];\n        if (args.refreshAll) {\n            indexes = (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.getViewportIndexes)(this.parent, this.parent.viewport);\n        }\n        var updatedCFCellRef = {};\n        for (var i = cfRule.length - 1; i >= 0; i--) {\n            if (rangeCheck && (indexes[0].length === 2 ? !this.checkCellHandler(args.indexes[0], args.indexes[1], cfRule[i]) :\n                !(0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.checkRange)(indexes, cfRule[i].range))) {\n                continue;\n            }\n            this.updateCF(args, sheet, cfRule[i], updatedCFCellRef);\n        }\n    };\n    ConditionalFormatting.prototype.updateCF = function (args, sheet, cf, updatedCFCellRef) {\n        var _this = this;\n        var value1;\n        var value2 = '';\n        var isLongDate = false;\n        if (cf.value) {\n            var dateValues = [];\n            var valueArr = [];\n            if (cf.type === 'Between') {\n                dateValues = cf.value.split('\"').filter(function (date) { return date.trim() && date.trim() !== ','; });\n                if (dateValues.length > 1) {\n                    valueArr = dateValues;\n                    isLongDate = true;\n                }\n                else {\n                    valueArr = cf.value.split(',').filter(function (value) { return !!value.trim(); });\n                }\n            }\n            else {\n                valueArr = [cf.value];\n            }\n            if (valueArr.length > 1) {\n                if (valueArr[0].split('(').length > 1) {\n                    var valueStr = '';\n                    for (var idx = 0; idx < valueArr.length; idx++) {\n                        valueStr += valueArr[idx] + ',';\n                        if (valueStr.split('(').length === valueStr.split(')').length && value1 === undefined) {\n                            value1 = valueStr.substring(0, valueStr.length - 1);\n                            valueStr = '';\n                        }\n                    }\n                    value2 = valueStr.substring(0, valueStr.length - 1);\n                }\n                else {\n                    value1 = valueArr[0];\n                    for (var idx = 1; idx < valueArr.length; idx++) {\n                        value2 += idx + 1 === valueArr.length ? valueArr[idx] : valueArr[idx] + ',';\n                    }\n                }\n            }\n            else {\n                value1 = valueArr[0] || cf.value;\n            }\n        }\n        if (!cf.type) {\n            cf.type = 'GreaterThan';\n        }\n        var style;\n        var cfColor;\n        if (cf.format && cf.format.style) {\n            style = (0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.skipDefaultValue)(cf.format.style, true);\n            if (!Object.keys(style).length) {\n                cfColor = cf.cFColor;\n                if (!cfColor) {\n                    cfColor = cf.cFColor = 'RedFT';\n                }\n            }\n        }\n        else {\n            style = {};\n            cfColor = cf.cFColor;\n            if (!cfColor) {\n                cfColor = cf.cFColor = 'RedFT';\n            }\n        }\n        var isAverage = cf.type.includes('Average');\n        var isTopBottom = cf.type.includes('10') && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(value1);\n        var isIconSets = (cf.type.includes('Three') || cf.type.includes('Four') || cf.type.includes('Five'));\n        var isDataBar = cf.type.includes('DataBar');\n        var isColorScale = cf.type.includes('ColorScale');\n        if ((!args.isRender || !cf.result) && (cf.type === 'Duplicate' || cf.type === 'Unique' || isDataBar\n            || isColorScale || isAverage || isTopBottom || isIconSets)) {\n            this.updateResult(cf, sheet, isDataBar, isColorScale, isAverage, isTopBottom, isIconSets, value1);\n        }\n        var updateCF = function (rIdx, cIdx, cell, td, currentRowHeight, isLongDate) {\n            var cellVal = cell && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(cell.value) ? cell.value.toString() : '';\n            var isApply;\n            var dateEventArgs;\n            var isValueCFRule = true;\n            var cellType = cell ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getTypeFromFormat)(cell.format) : '';\n            switch (cf.type) {\n                case 'GreaterThan':\n                case 'LessThan':\n                    isApply = _this.isGreaterThanLessThan(cf, cellVal, value1, cellType);\n                    break;\n                case 'Between':\n                    isApply = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(cellVal) && cellType !== 'Text' && _this.isBetWeen(cf, cellVal, value1, value2, isLongDate);\n                    break;\n                case 'EqualTo':\n                    isApply = _this.isEqualTo(cf, cellVal, value1);\n                    break;\n                case 'ContainsText':\n                    isApply = cellVal && value1 && _this.isContainsText(cellVal, value1);\n                    break;\n                case 'DateOccur':\n                    dateEventArgs = { value: value1, cell: {}, updatedVal: value1 };\n                    if (!(0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(value1)) {\n                        _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateEventArgs);\n                    }\n                    isApply = cellVal === dateEventArgs.updatedVal;\n                    break;\n                case 'Unique':\n                    isApply = cellVal !== '' && cf.result.indexOf(cellVal.toLowerCase()) === -1;\n                    break;\n                case 'Duplicate':\n                    isApply = cf.result.indexOf(cellVal.toLowerCase()) > -1;\n                    break;\n                case 'Top10Items':\n                case 'Bottom10Items':\n                case 'Top10Percentage':\n                case 'Bottom10Percentage':\n                    if (cf.result) {\n                        var value = parseFloat(cellVal);\n                        if ((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.isDateTime)(cellVal)) {\n                            value = (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.dateToInt)(cellVal);\n                        }\n                        isApply = cf.result.indexOf(value) > -1;\n                    }\n                    break;\n                case 'AboveAverage':\n                    isApply = cf.result.length && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(cellVal) && cellType !== 'Text' && parseFloat(cellVal) > cf.result[0];\n                    break;\n                case 'BelowAverage':\n                    isApply = cf.result.length && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(cellVal) && cellType !== 'Text' && parseFloat(cellVal) < cf.result[0];\n                    break;\n                default:\n                    isValueCFRule = false;\n                    if (isDataBar) {\n                        if (!updatedCFCellRef[rIdx + \"_\" + cIdx + \"_bars\"]) {\n                            updatedCFCellRef[rIdx + \"_\" + cIdx + \"_bars\"] = true;\n                            _this.applyDataBars(cellVal, cf, td, rIdx, cellType, currentRowHeight);\n                        }\n                    }\n                    else if (isColorScale) {\n                        if (!updatedCFCellRef[rIdx + \"_\" + cIdx]) {\n                            var value = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(cellVal) ? parseFloat(cellVal) : NaN;\n                            if (isNaN(value)) {\n                                if (td.style.backgroundColor && !td.classList.contains('e-yellowft') && !td.classList.contains('e-greenft') && !td.classList.value.includes('e-redf')) {\n                                    td.style.backgroundColor = '';\n                                    var style_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.extend)({}, _this.parent.commonCellStyle, cell && cell.style);\n                                    if (style_1.backgroundColor) {\n                                        _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.applyCellFormat, {\n                                            style: { backgroundColor: style_1.backgroundColor }, td: td, rowIdx: rIdx,\n                                            colIdx: cIdx\n                                        });\n                                    }\n                                }\n                            }\n                            else {\n                                var valArr = cf.result;\n                                var idx = valArr.indexOf(value);\n                                if (idx === -1) {\n                                    if (td.style.backgroundColor) {\n                                        td.style.backgroundColor = '';\n                                        var style_2 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.extend)({}, _this.parent.commonCellStyle, cell && cell.style);\n                                        if (style_2.backgroundColor) {\n                                            _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.applyCellFormat, {\n                                                style: { backgroundColor: style_2.backgroundColor }, td: td, rowIdx: rIdx,\n                                                colIdx: cIdx\n                                            });\n                                        }\n                                    }\n                                }\n                                else {\n                                    var colors = _this.getColor(cf.type);\n                                    td.style.backgroundColor = idx === 0 ? colors[0] :\n                                        (idx === valArr.length - 1 ? colors[colors.length - 1] : (valArr.length === 3 && idx === 1 ? colors[1] :\n                                            _this.getGradient(idx, colors[0], colors[1], colors[2], valArr.length)));\n                                    updatedCFCellRef[rIdx + \"_\" + cIdx] = true;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (!updatedCFCellRef[rIdx + \"_\" + cIdx + \"_icons\"]) {\n                            updatedCFCellRef[rIdx + \"_\" + cIdx + \"_icons\"] = true;\n                            var cfIcon = _this.parent.createElement('span', { className: 'e-icon e-iconsetspan' });\n                            var iconSetUpdated = _this.applyIconSet(cellVal, cf, td, cfIcon, cellType);\n                            if (iconSetUpdated && cell && cell.format && cell.format.includes('*') &&\n                                (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getTypeFromFormat)(cell.format) !== 'Accounting') {\n                                _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.rowFillHandler, { cell: cell, cellEle: td, rowIdx: rIdx, colIdx: cIdx, updateFillSize: true,\n                                    iconSetSpan: cfIcon });\n                            }\n                        }\n                    }\n                    break;\n            }\n            if (args.isAction && isValueCFRule) {\n                _this.parent.trigger('beforeConditionalFormat', { conditionalFormat: cf, cell: cell, element: td, apply: isApply,\n                    address: (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.getCellAddress)(rIdx, cIdx) });\n                if (!isApply && args.isEdit && !updatedCFCellRef[rIdx + \"_\" + cIdx]) {\n                    var style_3;\n                    if (cfColor) {\n                        if (td.className.includes('e-' + cfColor.toLowerCase())) {\n                            td.classList.remove('e-' + cfColor.toLowerCase());\n                            td.style.backgroundColor = '';\n                            td.style.color = '';\n                            style_3 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.extend)({}, _this.parent.commonCellStyle, cell && cell.style);\n                            if (style_3.backgroundColor || style_3.color) {\n                                _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.applyCellFormat, { rowIdx: rIdx, colIdx: cIdx, td: td,\n                                    style: { backgroundColor: style_3.backgroundColor, color: style_3.color } });\n                            }\n                        }\n                    }\n                    else {\n                        td.removeAttribute('style');\n                        style_3 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.extend)({}, _this.parent.commonCellStyle, cell && cell.style);\n                        if (Object.keys(style_3).length) {\n                            _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.applyCellFormat, { style: style_3, rowIdx: rIdx, colIdx: cIdx, td: td });\n                        }\n                    }\n                }\n            }\n            if (isApply && !updatedCFCellRef[rIdx + \"_\" + cIdx]) {\n                updatedCFCellRef[rIdx + \"_\" + cIdx] = true;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.removeClass)([td], ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt']);\n                if (cfColor) {\n                    td.classList.add('e-' + cfColor.toLowerCase());\n                    _this.setCFStyle(style, cf);\n                }\n                Object.assign(td.style, style);\n            }\n        };\n        if (args.ele) {\n            updateCF(args.indexes[0], args.indexes[1], args.cell, args.ele, args.resizedRowHeight, isLongDate);\n        }\n        else {\n            var rangeArr = cf.range.split(',');\n            var frozenRow = this.parent.frozenRowCount(sheet);\n            var frozenCol = this.parent.frozenColCount(sheet);\n            var topLeftIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getCellIndexes)(sheet.topLeftCell);\n            for (var i = 0; i < rangeArr.length; i++) {\n                this.updateRange(sheet, (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(rangeArr[i]), frozenRow, frozenCol, topLeftIdx, updateCF, isLongDate);\n            }\n        }\n    };\n    ConditionalFormatting.prototype.updateRange = function (sheet, rangeIdx, frozenRow, frozenCol, topLeftIdx, invokeFn, isLongDate) {\n        rangeIdx[0] = rangeIdx[0] < frozenRow ? (rangeIdx[0] < topLeftIdx[0] ? topLeftIdx[0] : rangeIdx[0]) :\n            (rangeIdx[0] < this.parent.viewport.topIndex + frozenRow ? this.parent.viewport.topIndex + frozenRow : rangeIdx[0]);\n        rangeIdx[1] = rangeIdx[1] < frozenCol ? (rangeIdx[1] < topLeftIdx[1] ? topLeftIdx[1] : rangeIdx[1]) :\n            (rangeIdx[1] < this.parent.viewport.leftIndex + frozenCol ? this.parent.viewport.leftIndex + frozenCol : rangeIdx[1]);\n        rangeIdx[2] = rangeIdx[2] < frozenRow ? (rangeIdx[2] < topLeftIdx[0] ? topLeftIdx[0] - 1 :\n            rangeIdx[2]) : (rangeIdx[2] > this.parent.viewport.bottomIndex ? this.parent.viewport.bottomIndex : rangeIdx[2]);\n        rangeIdx[3] = rangeIdx[3] < frozenCol ? (rangeIdx[3] < topLeftIdx[1] ? topLeftIdx[1] - 1 : rangeIdx[3]) :\n            (rangeIdx[3] > this.parent.viewport.rightIndex ? this.parent.viewport.rightIndex : rangeIdx[3]);\n        var td;\n        for (var rowIdx = rangeIdx[0]; rowIdx <= rangeIdx[2]; rowIdx++) {\n            if (frozenRow && rowIdx === frozenRow) {\n                rowIdx = this.parent.viewport.topIndex + frozenRow;\n            }\n            if ((0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenRow)(sheet, rowIdx)) {\n                continue;\n            }\n            for (var colIdx = rangeIdx[1]; colIdx <= rangeIdx[3]; colIdx++) {\n                if (frozenCol && colIdx === frozenCol) {\n                    colIdx = this.parent.viewport.leftIndex + frozenCol;\n                }\n                if ((0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenCol)(sheet, colIdx)) {\n                    continue;\n                }\n                td = this.parent.getCell(rowIdx, colIdx);\n                if (td) {\n                    invokeFn(rowIdx, colIdx, (0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, colIdx, sheet), td, undefined, isLongDate);\n                }\n            }\n        }\n    };\n    ConditionalFormatting.prototype.applyIconSet = function (val, cf, cellEle, cfIcon, cellType) {\n        var iconSetExist = cellEle.classList.contains('e-iconset');\n        var wrapText = cellEle.querySelector('.e-wrap-content');\n        if (iconSetExist) {\n            cellEle.classList.remove('e-iconset');\n            var iconSpan = cellEle.querySelector('.e-iconsetspan');\n            if (iconSpan) {\n                if (wrapText) {\n                    wrapText.removeChild(iconSpan);\n                }\n                else {\n                    cellEle.removeChild(iconSpan);\n                }\n            }\n        }\n        var value = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) ? parseFloat(val) : NaN;\n        var result = cf.result;\n        if (isNaN(value) || (result[0] === undefined && result[1] === undefined) || ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType === 'Text')) {\n            return iconSetExist;\n        }\n        var min = result[0];\n        var max = result[1];\n        var iconList = this.getIconList(cf.type).split(',');\n        var currentSymbol;\n        if (iconList.length === 3) {\n            var maxPercent = min + (0.67 * ((max) - (min)));\n            var minPercent = min + (0.33 * ((max) - (min)));\n            currentSymbol =\n                'e-' + (value >= maxPercent ? iconList[0].trim() : value >= minPercent ? iconList[1].trim() : iconList[2].trim());\n        }\n        else if (iconList.length === 4) {\n            var percent1 = min + (0.25 * ((max) - (min)));\n            var percent2 = min + (0.50 * ((max) - (min)));\n            var percent3 = min + (0.75 * ((max) - (min)));\n            currentSymbol =\n                'e-' + (value >= percent3 ? iconList[0].trim() : value >= percent2 ? iconList[1].trim() : value >= percent1 ?\n                    iconList[2].trim() : iconList[3].trim());\n        }\n        else if (iconList.length === 5) {\n            var percent1 = min + (0.20 * ((max) - (min)));\n            var percent2 = min + (0.40 * ((max) - (min)));\n            var percent3 = min + (0.60 * ((max) - (min)));\n            var percent4 = min + (0.80 * ((max) - (min)));\n            currentSymbol =\n                'e-' + (value >= percent4 ? iconList[0].trim() : value >= percent3 ? iconList[1].trim() : value >= percent2 ?\n                    iconList[2].trim() : value >= percent1 ? iconList[3].trim() : iconList[4].trim());\n        }\n        cfIcon.classList.add(currentSymbol);\n        var dataBar = cellEle.querySelector('.e-cf-databar');\n        if (dataBar) {\n            cfIcon.style.height = dataBar.style.height;\n            cfIcon.classList.add(cellEle.style.verticalAlign === 'top' ? 'e-cf-icon-top' : cellEle.style.verticalAlign === 'middle' ?\n                'e-cf-icon-middle' : 'e-cf-icon-end');\n        }\n        if (wrapText) {\n            wrapText.insertBefore(cfIcon, wrapText.firstChild);\n        }\n        else {\n            cellEle.insertBefore(cfIcon, cellEle.childNodes[0]);\n        }\n        cellEle.classList.add('e-iconset');\n        return true;\n    };\n    ConditionalFormatting.prototype.getIconList = function (iconName) {\n        var result = '3arrows-1,3arrows-2,3arrows-3';\n        switch (iconName) {\n            case 'ThreeArrows':\n                return '3arrows-1,3arrows-2,3arrows-3';\n            case 'ThreeArrowsGray':\n                return '3arrowsgray-1,3arrowsgray-2,3arrowsgray-3';\n            case 'FourArrowsGray':\n                return '4arrowsgray-1,4arrowsgray-2,4arrowsgray-3,4arrowsgray-4';\n            case 'FourArrows':\n                return '4arrows-1,4arrows-2,4arrows-3,4arrows-4';\n            case 'FiveArrowsGray':\n                return '5arrowsgray-1,5arrowsgray-2,5arrowsgray-3,5arrowsgray-4,5arrowsgray-5';\n            case 'FiveArrows':\n                return '5arrows-1,5arrows-2,5arrows-3,5arrows-4,5arrows-5';\n            case 'ThreeTrafficLights1':\n                return '3trafficlights-1,3trafficlights-2,3trafficlights-3';\n            case 'ThreeTrafficLights2':\n                return '3rafficlights2-1,3rafficlights2-2,3rafficlights2-3';\n            case 'ThreeSigns':\n                return '3signs-1,3signs-2,3signs-3';\n            case 'FourTrafficLights':\n                return '4trafficlights-1,4trafficlights-2,4trafficlights-3,4trafficlights-4';\n            case 'FourRedToBlack':\n                return '4redtoblack-1,4redtoblack-2,4redtoblack-3,4redtoblack-4';\n            case 'ThreeSymbols':\n                return '3symbols-1,3symbols-2,3symbols-3';\n            case 'ThreeSymbols2':\n                return '3symbols2-1,3symbols2-2,3symbols2-3';\n            case 'ThreeFlags':\n                return '3flags-1,3flags-2,3flags-3';\n            case 'FourRating':\n                return '4rating-4,4rating-3,4rating-2,4rating-1';\n            case 'FiveQuarters':\n                return '5quarters-1,5quarters-2,5quarters-3,5quarters-4,5quarters-5';\n            case 'FiveRating':\n                return '5rating-5,5rating-4,5rating-3,5rating-2,5rating-1';\n            case 'ThreeTriangles':\n                return '3triangles-1,3triangles-2,3triangles-3';\n            case 'ThreeStars':\n                return '3stars-1,3stars-2,3stars-3';\n            case 'FiveBoxes':\n                return '5boxes-1,5boxes-2,5boxes-3,5boxes-4,5boxes-5';\n        }\n        return result;\n    };\n    ConditionalFormatting.prototype.applyDataBars = function (val, cf, td, rIdx, cellType, currentRowHeight) {\n        var sheet = this.parent.getActiveSheet();\n        var result = cf.result;\n        var leftStandardWidth = 0;\n        var topVal;\n        var value;\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val)) {\n            value = parseFloat(val);\n        }\n        if ((result[0] === undefined && result[1] === undefined) || isNaN(value) || ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(val) && cellType === 'Text')) {\n            var dataBar = td.getElementsByClassName('e-cf-databar')[0];\n            if (dataBar) {\n                var textContent = dataBar.getElementsByClassName('e-databar-value')[0].textContent;\n                var hyperlink_1 = td.querySelector('.e-hyperlink');\n                var noteIndicator_1 = td.querySelector('.e-addNoteIndicator');\n                var wrapText_1 = td.querySelector('.e-wrap-content');\n                if (wrapText_1) {\n                    wrapText_1.textContent = '';\n                    if (hyperlink_1) {\n                        wrapText_1.appendChild(hyperlink_1);\n                    }\n                    else {\n                        wrapText_1.innerText = textContent;\n                    }\n                }\n                else {\n                    td.removeChild(dataBar);\n                    if (hyperlink_1) {\n                        td.appendChild(hyperlink_1);\n                    }\n                    else {\n                        td.innerText = textContent;\n                    }\n                }\n                if (noteIndicator_1) {\n                    td.appendChild(noteIndicator_1);\n                }\n            }\n            return;\n        }\n        if (result[0] !== undefined && result[1] !== undefined) {\n            topVal = result[0] + Math.abs(result[1]);\n            leftStandardWidth = Math.abs((result[1] / topVal) * 100);\n        }\n        else if (result[0] !== undefined) {\n            topVal = result[0];\n        }\n        else {\n            topVal = result[1];\n        }\n        var databar = this.parent.createElement('div', { id: 'spreadsheet-databar', className: 'e-cf-databar' });\n        var leftSpan = this.parent.createElement('span', { id: 'spreadsheet-leftspan', className: 'e-databar' });\n        var rightSpan = this.parent.createElement('span', { id: 'spreadsheet-rightspan', className: 'e-databar' });\n        var dataSpan = this.parent.createElement('span', { id: 'spreadsheet-dataspan', className: 'e-databar-value' });\n        var iconSetSpan = td.querySelector('.e-iconsetspan');\n        var noteIndicator = td.querySelector('.e-addNoteIndicator');\n        var wrapText = td.querySelector('.e-wrap-content');\n        var rowHeight = currentRowHeight ? currentRowHeight : (0,_workbook_base_index__WEBPACK_IMPORTED_MODULE_1__.getRowHeight)(sheet, rIdx, true);\n        var currencySpan = td.querySelector('#' + this.parent.element.id + '_currency');\n        databar.style.height = rowHeight - 1 + 'px';\n        if (iconSetSpan) {\n            iconSetSpan.style.height = rowHeight - 1 + 'px';\n            iconSetSpan.classList.add(td.style.verticalAlign === 'top' ? 'e-cf-icon-top' : td.style.verticalAlign === 'middle' ?\n                'e-cf-icon-middle' : 'e-cf-icon-end');\n        }\n        if (currencySpan) {\n            currencySpan.style.alignItems = td.style.verticalAlign === 'top' ? 'start' : td.style.verticalAlign === 'middle' ?\n                'center' : 'end';\n            currencySpan.classList.add('e-cf-currency');\n        }\n        var cfColor = cf.type[0];\n        if (cfColor === 'L') {\n            cfColor += 'B';\n        }\n        if (result[1] === undefined) {\n            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';\n            rightSpan.style.height = rowHeight - 3 + 'px';\n            rightSpan.style.backgroundColor = this.getColor(cfColor)[0];\n            rightSpan.style.left = '0px';\n        }\n        else if (result[0] === undefined) {\n            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';\n            rightSpan.style.height = rowHeight - 3 + 'px';\n            rightSpan.style.backgroundColor = this.getColor('R')[0];\n            rightSpan.style.left = '0px';\n        }\n        else if (value >= 0) {\n            leftSpan.style.width = leftStandardWidth + '%';\n            leftSpan.style.height = rowHeight - 3 + 'px'; // -3 buffer of data bar.\n            leftSpan.style.backgroundColor = 'transparent';\n            leftSpan.style.left = '0px';\n            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';\n            rightSpan.style.height = rowHeight - 3 + 'px';\n            rightSpan.style.backgroundColor = this.getColor(cfColor)[0];\n            rightSpan.style.left = leftStandardWidth + '%';\n        }\n        else {\n            leftSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';\n            leftSpan.style.height = rowHeight - 3 + 'px';\n            leftSpan.style.backgroundColor = this.getColor('R')[0];\n            if (leftSpan.style.width === leftStandardWidth + '%') {\n                leftSpan.style.left = '0px';\n            }\n            else {\n                leftSpan.style.right = (100 - leftStandardWidth) + '%';\n            }\n        }\n        dataSpan.style.fontSize = td.style.fontSize || '11pt';\n        dataSpan.style.alignItems = td.style.verticalAlign === 'top' ? 'start' : td.style.verticalAlign === 'middle' ?\n            'center' : 'end';\n        dataSpan.style.textDecoration = td.style.textDecoration;\n        var curEle = td.querySelector(\"#\" + this.parent.element.id + \"_currency\");\n        if (curEle) {\n            databar.appendChild(curEle);\n        }\n        var hyperlink = td.querySelector('.e-hyperlink');\n        if (hyperlink) {\n            dataSpan.appendChild(hyperlink);\n        }\n        else {\n            var dataContent = td.querySelector('.e-validation-list') ? td.innerText : td.textContent;\n            dataSpan.innerText = dataContent;\n            if (dataContent === '') {\n                dataSpan.appendChild(document.createTextNode(dataContent));\n            }\n        }\n        databar.appendChild(leftSpan);\n        databar.appendChild(rightSpan);\n        databar.appendChild(dataSpan);\n        td.textContent = '';\n        if (wrapText) {\n            wrapText.textContent = '';\n            if (iconSetSpan) {\n                wrapText.appendChild(iconSetSpan);\n            }\n            wrapText.appendChild(databar);\n            td.appendChild(wrapText);\n        }\n        else {\n            if (iconSetSpan) {\n                td.insertBefore(iconSetSpan, td.firstElementChild);\n            }\n            td.appendChild(databar);\n        }\n        if (noteIndicator) {\n            td.appendChild(noteIndicator);\n        }\n    };\n    ConditionalFormatting.prototype.getColor = function (cfColor) {\n        if (cfColor === 'LB') {\n            return ['#008aef'];\n        }\n        var colorCodeArr = cfColor.split('');\n        var colorArr = [];\n        for (var i = 0; i < colorCodeArr.length; i++) {\n            switch (colorCodeArr[i]) {\n                case 'G':\n                    colorArr.push('#63be7b');\n                    break;\n                case 'Y':\n                    colorArr.push('#ffeb84');\n                    break;\n                case 'R':\n                    colorArr.push('#f8696b');\n                    break;\n                case 'W':\n                    colorArr.push('#ffffff');\n                    break;\n                case 'B':\n                    colorArr.push('#5a8ac6');\n                    break;\n                case 'O':\n                    colorArr.push('#ffb628');\n                    break;\n                case 'LB':\n                    colorArr.push('#008aef');\n                    break;\n                case 'P':\n                    colorArr.push('#d6007b');\n                    break;\n            }\n        }\n        return colorArr;\n    };\n    ConditionalFormatting.prototype.getGradient = function (t, start, middle, end, large) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(end)) {\n            return this.getLinear(start, middle, t / large);\n        }\n        else {\n            var center = large / 2;\n            return t >= center ? this.getLinear(middle, end, Math.abs((t - center) / center)) : this.getLinear(start, middle, t / center);\n        }\n    };\n    ConditionalFormatting.prototype.getLinear = function (s, e, x) {\n        var r = this.byteLinear(s[1] + s[2], e[1] + e[2], x);\n        var g = this.byteLinear(s[3] + s[4], e[3] + e[4], x);\n        var b = this.byteLinear(s[5] + s[6], e[5] + e[6], x);\n        return '#' + r + g + b;\n    };\n    ConditionalFormatting.prototype.byteLinear = function (a, b, x) {\n        var y = (parseInt(a, 16) * (1 - x) + parseInt(b, 16) * x) | 0;\n        return Math.abs(y).toString(16);\n    };\n    ConditionalFormatting.prototype.isGreaterThanLessThan = function (cf, value, input, cellType) {\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(value) && cellType !== 'Text') {\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(input)) {\n                var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);\n                return cf.type === 'GreaterThan' ? parseFloat(value) > parseFloat(input.replace(txtRegx, '')) : parseFloat(value) <\n                    parseFloat(input.replace(txtRegx, ''));\n            }\n            else {\n                var dateEventArgs = {\n                    value: input, rowIndex: 0, colIndex: 0, sheetIndex: 0,\n                    isDate: false, updatedVal: '', isTime: false\n                };\n                this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateEventArgs);\n                if (dateEventArgs.isDate || dateEventArgs.isTime) {\n                    cf.value = dateEventArgs.updatedVal.toString();\n                    return cf.type === 'GreaterThan' ? Number(value) > Number(dateEventArgs.updatedVal) :\n                        Number(value) < Number(dateEventArgs.updatedVal);\n                }\n                else if (input) {\n                    return cf.type === 'GreaterThan' ? value.toLowerCase() > input.toLowerCase() : value.toLowerCase() < input.toLowerCase();\n                }\n            }\n        }\n        else if (value === '' && Number(input) > 0 && cf.type === 'LessThan') {\n            return true;\n        }\n        return false;\n    };\n    ConditionalFormatting.prototype.isBetWeen = function (cf, value, input1, input2, isLongDate) {\n        var _a, _b;\n        if (!isLongDate) {\n            var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);\n            input1 = input1.replace(txtRegx, '');\n            input2 = input2.replace(txtRegx, '');\n        }\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(input1)) {\n            var firstVal = parseFloat(input1);\n            var secondVal = parseFloat(input2);\n            if (firstVal > secondVal) {\n                _a = [secondVal, firstVal], firstVal = _a[0], secondVal = _a[1];\n            }\n            return parseFloat(value) >= firstVal && parseFloat(value) <= secondVal;\n        }\n        else if (input1 && input2) {\n            var dateEventArgs1 = { value: input1, cell: {}, updatedVal: '' };\n            var dateEventArgs2 = { value: input2, cell: {}, updatedVal: '' };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateEventArgs1);\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateEventArgs2);\n            if ((dateEventArgs1.isDate || dateEventArgs1.isTime) && (dateEventArgs2.isDate || dateEventArgs2.isTime)) {\n                cf.value = dateEventArgs1.updatedVal + ',' + dateEventArgs2.updatedVal;\n                if (dateEventArgs1.updatedVal > dateEventArgs2.updatedVal) {\n                    _b = [dateEventArgs2.updatedVal, dateEventArgs1.updatedVal], dateEventArgs1.updatedVal = _b[0], dateEventArgs2.updatedVal = _b[1];\n                }\n                return value >= dateEventArgs1.updatedVal && value <= dateEventArgs2.updatedVal;\n            }\n            else {\n                return value.toLowerCase() >= input1.toLowerCase() && value.toLowerCase() <= input2.toLowerCase();\n            }\n        }\n        return false;\n    };\n    ConditionalFormatting.prototype.isEqualTo = function (cf, value, input) {\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(input)) {\n            if (value === '') {\n                return parseFloat(input) === 0;\n            }\n            var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);\n            return parseFloat(value) === parseFloat(input.replace(txtRegx, ''));\n        }\n        else if (!value || !input) {\n            return false;\n        }\n        else {\n            var dateTimeArgs = { value: input, cell: {}, updatedVal: '' };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateTimeArgs);\n            if (dateTimeArgs.isTime || dateTimeArgs.isDate) {\n                cf.value = dateTimeArgs.updatedVal;\n                return value === dateTimeArgs.updatedVal;\n            }\n            else {\n                return value.toLowerCase() === input.toLowerCase();\n            }\n        }\n    };\n    ConditionalFormatting.prototype.isContainsText = function (value, input) {\n        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_2__.isNumber)(input.replace(txtRegx, ''))) {\n            input = input.replace(txtRegx, '');\n            if ((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.isDateTime)(value)) {\n                value = (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.dateToInt)(value).toString();\n            }\n            return value.indexOf(input) > -1;\n        }\n        else if ((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.isDateTime)(input)) {\n            if ((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.isDateTime)(value)) {\n                value = (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.dateToInt)(value).toString();\n            }\n            return value.indexOf((0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_3__.dateToInt)(input).toString()) > -1;\n        }\n        else {\n            return value.toLowerCase().indexOf(input.toLowerCase()) > -1;\n        }\n    };\n    ConditionalFormatting.prototype.setCFStyle = function (style, cf) {\n        switch (cf.cFColor) {\n            case 'RedFT':\n                style.backgroundColor = '#ffc7ce';\n                style.color = '#9c0055';\n                break;\n            case 'YellowFT':\n                style.backgroundColor = '#ffeb9c';\n                style.color = '#9c6500';\n                break;\n            case 'GreenFT':\n                style.backgroundColor = '#c6efce';\n                style.color = '#006100';\n                break;\n            case 'RedF':\n                style.backgroundColor = '#ffc7ce';\n                break;\n            case 'RedT':\n                style.color = '#9c0055';\n                break;\n        }\n        return style;\n    };\n    /**\n     * Gets the module name.\n     *\n     * @returns {string} - Gets the module name.\n     */\n    ConditionalFormatting.prototype.getModuleName = function () {\n        return 'conditionalFormatting';\n    };\n    return ConditionalFormatting;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/actions/conditional-formatting.js?");

/***/ })

}]);