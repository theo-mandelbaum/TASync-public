"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor-container_tool-bar_tool-cacca8a5"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/tool-bar/tool-bar.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/tool-bar/tool-bar.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Toolbar: () => (/* binding */ Toolbar)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _document_editor_base_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../document-editor/base/index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/index.js\");\n/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-lists */ \"./node_modules/@syncfusion/ej2-lists/index.js\");\n\n\n\n\n\n\n\n\nvar TOOLBAR_ID = '_toolbar';\nvar NEW_ID = '_new';\nvar OPEN_ID = '_open';\nvar UNDO_ID = '_undo';\nvar REDO_ID = '_redo';\nvar INSERT_IMAGE_ID = '_image';\nvar INSERT_IMAGE_LOCAL_ID = '_image_local';\nvar INSERT_IMAGE_ONLINE_ID = '_image_url';\nvar INSERT_TABLE_ID = '_table';\nvar INSERT_LINK_ID = '_link';\nvar BOOKMARK_ID = '_bookmark';\nvar COMMENT_ID = '_comment';\nvar TRACK_ID = '_track';\nvar TABLE_OF_CONTENT_ID = '_toc';\nvar HEADER_ID = '_header';\nvar FOOTER_ID = '_footer';\nvar PAGE_SET_UP_ID = '_page_setup';\nvar PAGE_NUMBER_ID = '_page_number';\nvar BREAK_ID = '_break';\nvar LISTVIEW_ID = '_listView';\nvar FIND_ID = '_find';\nvar CLIPBOARD_ID = '_use_local_clipboard';\nvar RESTRICT_EDITING_ID = '_restrict_edit';\nvar PAGE_BREAK = '_page_break';\nvar SECTION_BREAK = '_section_break';\nvar SECTION_BREAK_CONTINUOUS = '_section_break_continuous';\nvar COLUMN_BREAK = '_column_break';\nvar READ_ONLY = '_read_only';\nvar PROTECTIONS = '_protections';\nvar FORM_FIELDS_ID = '_form_fields';\nvar UPDATE_FIELDS_ID = '_update_fields';\nvar TEXT_FORM = '_text_form';\nvar CHECKBOX = '_checkbox';\nvar DROPDOWN = '_dropdown';\nvar FOOTNOTE_ID = '_footnote';\nvar ENDNOTE_ID = '_endnote';\nvar COLUMNS_ID = '_columns';\nvar PAGE_SET_UP = '_page_set';\nvar CONTENT_CONTROL_ID = '_content_control';\nvar RICHTEXT_CONTENT_CONTROL_ID = '_richtext_content_control';\nvar PLAINTEXT_CONTENT_CONTROL_ID = '_plaintext_content_control';\nvar COMBOBOX_CONTENT_CONTROL_ID = '_combobox_content_control';\nvar DROPDOWNDOWN_CONTENT_CONTROL_ID = '_dropdown_content_control';\nvar DATEPICKER_CONTENT_CONTROL_ID = '_datepicker_content_control';\nvar CHECKBOX_CONTENT_CONTROL_ID = '_checkbox_content_control';\nvar PICTURE_CONTENT_CONTROL_ID = '_picture_content_control';\nvar XMLMAPPING_ID = '_xmlmapping';\n/**\n * Toolbar Module\n */\nvar Toolbar = /** @class */ (function () {\n    /**\n     * @private\n     * @param {DocumentEditorContainer} container - DocumentEditorContainer object.\n     */\n    function Toolbar(container) {\n        /**\n         * @private\n         */\n        this.isCommentEditing = false;\n        this.container = container;\n        this.importHandler = new _document_editor_base_index__WEBPACK_IMPORTED_MODULE_5__.XmlHttpRequestHandler();\n    }\n    Object.defineProperty(Toolbar.prototype, \"documentEditor\", {\n        get: function () {\n            return this.container.documentEditor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Toolbar.prototype.getModuleName = function () {\n        return 'toolbar';\n    };\n    /**\n     * Enables or disables the specified Toolbar item.\n     *\n     * @param  {number} itemIndex - Index of the toolbar items that need to be enabled or disabled.\n     * @param  {boolean} isEnable  - Boolean value that determines whether the toolbar item should be enabled or disabled. By default, `isEnable` is set to true.\n     * @returns {void}\n     */\n    Toolbar.prototype.enableItems = function (itemIndex, isEnable) {\n        this.toolbar.enableItems(itemIndex, isEnable);\n    };\n    /**\n     * @private\n     * @param {CustomToolbarItemModel|ToolbarItem} items - Toolbar items\n     * @returns {void}\n     */\n    Toolbar.prototype.initToolBar = function (items) {\n        // items = JSON.parse(HelperMethods.sanitizeString(JSON.stringify(items)));\n        this.toolbarItems = items;\n        this.renderToolBar();\n        this.wireEvent();\n    };\n    Toolbar.prototype.renderToolBar = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.container)) {\n            return;\n        }\n        var toolbarContainer = this.container.toolbarContainer;\n        var toolbarWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-de-tlbr-wrapper' });\n        var toolbarTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-de-toolbar' });\n        this.initToolbarItems();\n        toolbarWrapper.appendChild(toolbarTarget);\n        toolbarContainer.appendChild(toolbarWrapper);\n        // Show hide pane button initialization\n        var locale = this.container.localObj;\n        var propertiesPaneDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-de-ctnr-properties-pane-btn' });\n        this.buttonElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { attrs: { type: 'button', 'aria-label': locale.getConstant('Hide properties pane'), 'aria-pressed': 'true' } });\n        propertiesPaneDiv.appendChild(this.buttonElement);\n        var cssClassName = 'e-tbar-btn e-tbtn-txt e-control e-btn e-de-showhide-btn';\n        var iconCss = 'e-icons e-de-ctnr-showhide';\n        if (this.container.enableRtl) {\n            cssClassName += '-rtl';\n            iconCss = 'e-icons e-de-ctnr-showhide e-de-flip';\n        }\n        this.propertiesPaneButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_2__.Button({\n            cssClass: cssClassName,\n            iconCss: iconCss\n        });\n        if (this.container.showPropertiesPane) {\n            this.buttonElement.title = locale.getConstant('Hide properties pane');\n        }\n        else {\n            this.buttonElement.title = locale.getConstant('Show properties pane');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(propertiesPaneDiv, this.container.restrictEditing ? ['e-de-overlay'] : [], this.container.restrictEditing ? [] : ['e-de-overlay']);\n            propertiesPaneDiv.classList.add('e-de-pane-disable-clr');\n        }\n        this.propertiesPaneButton.appendTo(this.buttonElement);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.buttonElement, 'click', this.showHidePropertiesPane, this);\n        toolbarContainer.appendChild(propertiesPaneDiv);\n        this.toolbar.appendTo(toolbarTarget);\n        this.initToolbarDropdown(toolbarTarget);\n    };\n    Toolbar.prototype.initToolbarDropdown = function (toolbarTarget) {\n        var _this = this;\n        if (this.container) {\n            var locale = this.container.localObj;\n            var id_1 = this.container.element.id + TOOLBAR_ID;\n            if (this.toolbarItems.indexOf('Image') >= 0) {\n                this.imgDropDwn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton({\n                    items: [\n                        {\n                            text: locale.getConstant('Upload from computer'), iconCss: 'e-icons e-de-ctnr-upload',\n                            id: id_1 + INSERT_IMAGE_LOCAL_ID\n                        }\n                    ],\n                    //,{ text: locale.getConstant('By URL'), iconCss: 'e-icons e-de-ctnr-link', id: id + INSERT_IMAGE_ONLINE_ID }],\n                    cssClass: 'e-de-toolbar-btn-first e-caret-hide',\n                    select: this.onDropDownButtonSelect.bind(this)\n                });\n                this.imgDropDwn.appendTo('#' + id_1 + INSERT_IMAGE_ID);\n            }\n            if (this.toolbarItems.indexOf('PageSetup') >= 0) {\n                this.PageSetUpDropDwn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton({\n                    items: [\n                        { text: locale.getConstant('Page Setup'), iconCss: 'e-icons e-de-ctnr-page-size', id: id_1 + PAGE_SET_UP },\n                        { text: locale.getConstant('Columns'), iconCss: 'e-icons e-de-ctnr-columns', id: id_1 + COLUMNS_ID }\n                    ],\n                    cssClass: 'e-de-toolbar-btn-first e-caret-hide',\n                    select: this.onDropDownButtonSelect.bind(this)\n                });\n                this.PageSetUpDropDwn.appendTo('#' + id_1 + PAGE_SET_UP_ID);\n            }\n            if (this.toolbarItems.indexOf('ContentControl') >= 0) {\n                //e-btn-icon e-icons e-de-ctnr-image e-icon-left\n                this.ContentControlDropDwn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton({\n                    items: [\n                        { text: locale.getConstant('Rich Text Content Control'), iconCss: 'e-icons e-de-ctnr-change-case', id: id_1 + RICHTEXT_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Plain Text Content Control'), iconCss: 'e-icons e-de-ctnr-change-case', id: id_1 + PLAINTEXT_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Picture Content Control'), iconCss: 'e-icons e-de-ctnr-image', id: id_1 + PICTURE_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Combo Box Content Control'), iconCss: 'e-icons e-de-combo-box', id: id_1 + COMBOBOX_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Drop-Down List Content Control'), iconCss: 'e-icons e-de-dropdown-list', id: id_1 + DROPDOWNDOWN_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Date Picker Content Control'), iconCss: 'e-icons e-timeline-today', id: id_1 + DATEPICKER_CONTENT_CONTROL_ID },\n                        { text: locale.getConstant('Check Box Content Control'), iconCss: 'e-icons e-check-box', id: id_1 + CHECKBOX_CONTENT_CONTROL_ID }\n                    ],\n                    cssClass: 'e-de-toolbar-btn-first e-caret-hide',\n                    select: this.onDropDownButtonSelect.bind(this)\n                });\n                this.ContentControlDropDwn.appendTo('#' + id_1 + CONTENT_CONTROL_ID);\n            }\n            if (this.toolbarItems.indexOf('Break') >= 0) {\n                var breakDataSource = [\n                    { text: locale.getConstant('Page'), iconCss: 'e-de-listview e-de-listview-icon e-icons e-de-ctnr-page-break', id: PAGE_BREAK, category: locale.getConstant('Page Breaks') },\n                    { text: locale.getConstant('Column'), iconCss: 'e-de-listview e-de-listview-icon e-icons e-de-ctnr-page-break-column', id: COLUMN_BREAK, category: locale.getConstant('Page Breaks') },\n                    { text: locale.getConstant('Next Page'), iconCss: 'e-de-listview e-de-listview-icon e-icons e-de-ctnr-section-break', id: SECTION_BREAK, category: locale.getConstant('Section Breaks') },\n                    { text: locale.getConstant('Continuous'), iconCss: 'e-de-listview e-de-listview-icon e-icons e-de-ctnr-section-break-continuous', id: SECTION_BREAK_CONTINUOUS, category: locale.getConstant('Section Breaks') }\n                ];\n                var ddbOption = {\n                    target: '#' + id_1 + BREAK_ID + LISTVIEW_ID,\n                    cssClass: 'e-caret-hide'\n                };\n                this.breakDropDwn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton(ddbOption, '#' + id_1 + BREAK_ID);\n                this.breakListView = new _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_7__.ListView({\n                    dataSource: breakDataSource,\n                    width: '170px',\n                    fields: { iconCss: 'iconCss', groupBy: 'category' },\n                    showIcon: true,\n                    select: this.onListViewSelection.bind(this)\n                });\n                this.breakListView.appendTo('#' + id_1 + BREAK_ID + LISTVIEW_ID);\n            }\n            this.filePicker = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                attrs: { type: 'file', accept: '.doc,.docx,.rtf,.txt,.htm,.html,.sfdt' }, className: 'e-de-ctnr-file-picker'\n            });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                document.body.appendChild(this.filePicker);\n            }\n            this.imagePicker = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {\n                attrs: { type: 'file', accept: '.jpg,.jpeg,.png,.bmp,.svg' }, className: 'e-de-ctnr-file-picker'\n            });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                document.body.appendChild(this.imagePicker);\n            }\n            if (this.toolbarItems.indexOf('LocalClipboard') >= 0) {\n                this.toggleButton(id_1 + CLIPBOARD_ID, this.container.enableLocalPaste);\n            }\n            if (this.toolbarItems.indexOf('TrackChanges') >= 0) {\n                this.toggleButton(id_1 + TRACK_ID, this.container.enableTrackChanges);\n            }\n            if (this.toolbarItems.indexOf('RestrictEditing') >= 0) {\n                this.toggleButton(id_1 + RESTRICT_EDITING_ID, this.container.restrictEditing);\n                var restrictIconCss = '';\n                if (this.container.restrictEditing) {\n                    restrictIconCss = ' e-de-selected-item';\n                }\n                this.restrictDropDwn = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton({\n                    items: [\n                        { text: locale.getConstant('Read only'), id: id_1 + READ_ONLY, iconCss: 'e-icons' + restrictIconCss },\n                        { text: locale.getConstant('Protections'), id: id_1 + PROTECTIONS, iconCss: 'e-icons' }\n                    ],\n                    cssClass: 'e-de-toolbar-btn-first e-caret-hide',\n                    select: this.onDropDownButtonSelect.bind(this),\n                    beforeItemRender: function (args) {\n                        _this.onBeforeRenderRestrictDropdown(args, id_1);\n                    }\n                });\n                this.restrictDropDwn.appendTo('#' + id_1 + RESTRICT_EDITING_ID);\n            }\n            if (this.toolbarItems.indexOf('FormFields') >= 0) {\n                this.formFieldDropDown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_3__.DropDownButton({\n                    items: [\n                        { text: locale.getConstant('Text Form'), iconCss: 'e-icons e-de-textform', id: id_1 + TEXT_FORM },\n                        { text: locale.getConstant('Check Box'), iconCss: 'e-icons e-de-checkbox-form', id: id_1 + CHECKBOX },\n                        { text: locale.getConstant('DropDown'), iconCss: 'e-icons e-de-dropdownform', id: id_1 + DROPDOWN }\n                    ],\n                    cssClass: 'e-de-toolbar-btn-first e-caret-hide',\n                    select: this.onDropDownButtonSelect.bind(this)\n                });\n                this.formFieldDropDown.appendTo('#' + id_1 + FORM_FIELDS_ID);\n            }\n        }\n    };\n    Toolbar.prototype.onListViewSelection = function (args) {\n        var parentId = this.container.element.id + TOOLBAR_ID;\n        var id = args.item.id;\n        if (id === parentId + BREAK_ID + LISTVIEW_ID + '_' + PAGE_BREAK) {\n            this.container.documentEditor.editorModule.insertPageBreak();\n        }\n        else if (id === parentId + BREAK_ID + LISTVIEW_ID + '_' + SECTION_BREAK) {\n            this.container.documentEditor.editorModule.insertSectionBreak();\n        }\n        else if (id === parentId + BREAK_ID + LISTVIEW_ID + '_' + SECTION_BREAK_CONTINUOUS) {\n            this.container.documentEditor.editorModule.insertSectionBreak(_index__WEBPACK_IMPORTED_MODULE_6__.SectionBreakType.Continuous);\n        }\n        else if (id === parentId + BREAK_ID + LISTVIEW_ID + '_' + COLUMN_BREAK) {\n            this.container.documentEditor.editorModule.insertColumnBreak();\n        }\n        args.item.classList.remove('e-active');\n    };\n    Toolbar.prototype.onBeforeRenderRestrictDropdown = function (args, id) {\n        var selectedIcon = args.element.getElementsByClassName('e-menu-icon')[0];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedIcon)) {\n            if (args.item.id === id + READ_ONLY) {\n                this.toggleRestrictIcon(selectedIcon, this.container.restrictEditing);\n            }\n            if (args.item.id === id + PROTECTIONS) {\n                var restrictPane = document.getElementsByClassName('e-de-restrict-pane')[0];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(restrictPane)) {\n                    var toggleProtection = !(restrictPane.style.display === 'none');\n                    this.toggleRestrictIcon(selectedIcon, toggleProtection);\n                }\n            }\n        }\n    };\n    Toolbar.prototype.toggleRestrictIcon = function (icon, toggle) {\n        if (toggle) {\n            icon.classList.add('e-de-selected-item');\n        }\n        else {\n            icon.classList.remove('e-de-selected-item');\n        }\n    };\n    Toolbar.prototype.showHidePropertiesPane = function () {\n        var paneDiv = document.getElementsByClassName('e-de-ctnr-properties-pane-btn')[0];\n        var locale = this.container.localObj;\n        if (this.container.propertiesPaneContainer.style.display === 'none') {\n            this.container.showPropertiesPane = true;\n            paneDiv.classList.remove('e-de-pane-disable-clr');\n            this.buttonElement.title = locale.getConstant('Hide properties pane');\n            this.buttonElement.setAttribute('aria-label', locale.getConstant('Hide properties pane'));\n            this.buttonElement.setAttribute('aria-pressed', 'true');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(paneDiv, ['e-de-pane-enable-clr'], []);\n            this.container.trigger(_document_editor_base_index__WEBPACK_IMPORTED_MODULE_5__.beforePaneSwitchEvent, { type: 'PropertiesPane' });\n        }\n        else if (this.container.previousContext.indexOf('Header') >= 0\n            || this.container.previousContext.indexOf('Footer') >= 0) {\n            this.container.showHeaderProperties = !this.container.showHeaderProperties;\n        }\n        else {\n            this.container.showPropertiesPane = false;\n            paneDiv.classList.remove('e-de-pane-enable-clr');\n            this.buttonElement.title = locale.getConstant('Show properties pane');\n            this.buttonElement.setAttribute('aria-label', locale.getConstant('Show properties pane'));\n            this.buttonElement.setAttribute('aria-pressed', 'false');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(paneDiv, ['e-de-pane-disable-clr'], []);\n        }\n        this.enableDisablePropertyPaneButton(this.container.showPropertiesPane);\n        this.container.showPropertiesPaneOnSelection();\n        this.documentEditor.focusIn();\n    };\n    Toolbar.prototype.onWrapText = function (text) {\n        var content = '';\n        var index = text.lastIndexOf(' ');\n        if (index !== -1) {\n            content = text.slice(0, index);\n            text.slice(index);\n            content += '<div class=\"e-de-text-wrap\">' + text.slice(index) + '</div>';\n        }\n        else {\n            content = text;\n        }\n        return content;\n    };\n    Toolbar.prototype.wireEvent = function () {\n        this.propertiesPaneButton.on('click', this.togglePropertiesPane.bind(this));\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.filePicker, 'change', this.onFileChange, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.imagePicker, 'change', this.onImageChange, this);\n    };\n    Toolbar.prototype.initToolbarItems = function () {\n        this.toolbar = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar({\n            enableRtl: this.container.enableRtl,\n            clicked: this.clickHandler.bind(this),\n            items: this.getToolbarItems()\n        });\n    };\n    /**\n     * @private\n     * @param {CustomToolbarItemModel|ToolbarItem} items - Toolbar items\n     * @returns {void}\n     */\n    Toolbar.prototype.reInitToolbarItems = function (items) {\n        var _this = this;\n        // items = JSON.parse(HelperMethods.sanitizeString(JSON.stringify(items)));\n        for (var i = 0; i < items.length; i++) {\n            switch (items[parseInt(i.toString(), 10)]) {\n                case 'RestrictEditing':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.restrictDropDwn)) {\n                        this.restrictDropDwn.destroy();\n                    }\n                    break;\n                case 'Break':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.breakDropDwn)) {\n                        this.breakDropDwn.destroy();\n                    }\n                    break;\n                case 'PageSetup':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.PageSetUpDropDwn)) {\n                        this.PageSetUpDropDwn.destroy();\n                    }\n                    break;\n                case 'Image':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.imgDropDwn)) {\n                        this.imgDropDwn.destroy();\n                    }\n                    break;\n                case 'FormFields':\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.formFieldDropDown)) {\n                        this.formFieldDropDown.destroy();\n                    }\n                    break;\n            }\n        }\n        this.toolbarItems = items;\n        var toolbarTarget = this.container.toolbarContainer;\n        this.toolbar.items = this.getToolbarItems();\n        /* eslint-disable @typescript-eslint/indent */\n        this.toolbarTimer = Number(setTimeout(function () {\n            if (_this.toolbarTimer) {\n                clearTimeout(_this.toolbarTimer);\n            }\n            _this.initToolbarDropdown(toolbarTarget);\n            if (items.indexOf('Open') >= 0) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(_this.filePicker, 'change', _this.onFileChange, _this);\n            }\n            if (items.indexOf('Image') >= 0) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(_this.imagePicker, 'change', _this.onImageChange, _this);\n            }\n        }, 200));\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Toolbar.prototype.getToolbarItems = function () {\n        var locale = this.container.localObj;\n        var id = this.container.element.id + TOOLBAR_ID;\n        var toolbarItems = [];\n        var className;\n        var tItem = this.toolbarItems;\n        for (var i = 0; i < this.toolbarItems.length; i++) {\n            if (i === 0) {\n                className = 'e-de-toolbar-btn-start';\n            }\n            else if ((tItem[i + 1] === 'Separator') && (tItem[i - 1] === 'Separator')) {\n                className = 'e-de-toolbar-btn';\n            }\n            else if (tItem[i + 1] === 'Separator') {\n                className = 'e-de-toolbar-btn-last';\n            }\n            else if (tItem[i - 1] === 'Separator') {\n                className = 'e-de-toolbar-btn-first';\n            }\n            else if (i === (this.toolbarItems.length - 1)) {\n                className = 'e-de-toolbar-btn-end';\n            }\n            else {\n                className = 'e-de-toolbar-btn-middle';\n            }\n            switch (tItem[parseInt(i.toString(), 10)]) {\n                case 'Separator':\n                    toolbarItems.push({\n                        type: 'Separator', cssClass: 'e-de-separator'\n                    });\n                    break;\n                case 'New':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-new', tooltipText: locale.getConstant('Create a new document'),\n                        id: id + NEW_ID, text: locale.getConstant('New'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Create a new document') }\n                    });\n                    break;\n                case 'Open':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-open', tooltipText: locale.getConstant('Open a document'), id: id + OPEN_ID,\n                        text: locale.getConstant('Open'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Open a document') }\n                    });\n                    break;\n                case 'Undo':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-undo', tooltipText: locale.getConstant('Undo Tooltip'),\n                        id: id + UNDO_ID, text: locale.getConstant('Undo'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Undo Tooltip') }\n                    });\n                    break;\n                case 'Redo':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-redo', tooltipText: locale.getConstant('Redo Tooltip'),\n                        id: id + REDO_ID, text: locale.getConstant('Redo'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Redo Tooltip') }\n                    });\n                    break;\n                case 'Comments':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-cnt-cmt-add',\n                        tooltipText: locale.getConstant('Show comments'),\n                        id: id + COMMENT_ID, text: locale.getConstant('Comments'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Show comments') }\n                    });\n                    break;\n                case 'TrackChanges':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-cnt-track',\n                        tooltipText: locale.getConstant('Track Changes'),\n                        id: id + TRACK_ID, text: this.onWrapText(locale.getConstant('TrackChanges')), cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('TrackChanges'), 'aria-pressed': this.container.enableTrackChanges, role: 'button', 'aria-hidden': 'true' }\n                    });\n                    break;\n                case 'Image':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Insert inline picture from a file') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-de-toolbar-btn-first e-caret-hide\" type=\"button\" id=\"' + id + INSERT_IMAGE_ID + '\"><span class=\"e-btn-icon e-icons e-de-ctnr-image e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + locale.getConstant('Image') + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button>',\n                        id: id + INSERT_IMAGE_ID, htmlAttributes: { 'aria-label': locale.getConstant('Insert inline picture from a file'), 'aria-haspopup': false }\n                    });\n                    break;\n                case 'Table':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-table', tooltipText: locale.getConstant('Insert a table into the document'),\n                        id: id + INSERT_TABLE_ID, text: locale.getConstant('Table'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Insert a table into the document'), 'aria-haspopup': true }\n                    });\n                    break;\n                case 'Hyperlink':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-link',\n                        tooltipText: locale.getConstant('Create Hyperlink'),\n                        id: id + INSERT_LINK_ID, text: locale.getConstant('Link'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Create Hyperlink'), 'aria-haspopup': true }\n                    });\n                    break;\n                case 'Bookmark':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-bookmark',\n                        tooltipText: locale.getConstant('Insert a bookmark in a specific place in this document'),\n                        id: id + BOOKMARK_ID, text: locale.getConstant('Bookmark'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Insert a bookmark in a specific place in this document'), 'aria-haspopup': true }\n                    });\n                    break;\n                case 'TableOfContents':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-tableofcontent',\n                        tooltipText: locale.getConstant('Provide an overview of your document by adding a table of contents'),\n                        id: id + TABLE_OF_CONTENT_ID, text: this.onWrapText(locale.getConstant('Table of Contents')),\n                        cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Table of Contents') }\n                    });\n                    break;\n                case 'Header':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-header', tooltipText: locale.getConstant('Add or edit the header'),\n                        id: id + HEADER_ID, text: locale.getConstant('Header'), cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('Add or edit the header') }\n                    });\n                    break;\n                case 'Footer':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-footer', tooltipText: locale.getConstant('Add or edit the footer'),\n                        id: id + FOOTER_ID, text: locale.getConstant('Footer'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Add or edit the footer') }\n                    });\n                    break;\n                case 'PageSetup':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Page Setup') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-caret-hide\" type=\"button\" id=\"' + id + PAGE_SET_UP_ID + '\"><span class=\"e-btn-icon e-icons e-de-ctnr-pagesetup e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + this.onWrapText(locale.getConstant('Page Setup')) + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button>',\n                        id: id + PAGE_SET_UP_ID, htmlAttributes: { 'aria-label': locale.getConstant('Page Setup') }\n                    });\n                    break;\n                case 'PageNumber':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-pagenumber', tooltipText: locale.getConstant('Add page numbers'),\n                        id: id + PAGE_NUMBER_ID, text: this.onWrapText(locale.getConstant('Page Number')),\n                        cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Page Number') }\n                    });\n                    break;\n                case 'Break':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Break') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-caret-hide\" type=\"button\" id=\"' + id + BREAK_ID + '\"><span class=\"e-btn-icon e-icons e-de-ctnr-break e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + locale.getConstant('Break') + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button><div id=\"' + id + BREAK_ID + LISTVIEW_ID + '\"></div>',\n                        id: id + BREAK_ID, htmlAttributes: { 'aria-label': locale.getConstant('Break') }\n                    });\n                    break;\n                case 'Find':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-find', tooltipText: locale.getConstant('Find Text'),\n                        id: id + FIND_ID, text: locale.getConstant('Find'), cssClass: className, htmlAttributes: { 'aria-label': locale.getConstant('Find Text') }\n                    });\n                    break;\n                case 'LocalClipboard':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-paste',\n                        tooltipText: locale.getConstant('Toggle between the internal clipboard and system clipboard'),\n                        id: id + CLIPBOARD_ID, text: this.onWrapText(locale.getConstant('Local Clipboard')),\n                        cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('Local Clipboard'), 'aria-pressed': this.container.enableLocalPaste, role: 'button', 'aria-hidden': 'true' }\n                    });\n                    break;\n                case 'RestrictEditing':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Restrict editing') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-de-toolbar-btn-first e-caret-hide\" type=\"button\" id=\"' + id + RESTRICT_EDITING_ID + '\"><span class=\"e-btn-icon e-de-ctnr-lock e-icons e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + this.onWrapText(locale.getConstant('Restrict Editing')) + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button>',\n                        htmlAttributes: { 'aria-label': locale.getConstant('Restrict editing') }\n                    });\n                    break;\n                case 'FormFields':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Form Fields') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-de-toolbar-btn-first e-caret-hide\" type=\"button\" id=\"' + id + FORM_FIELDS_ID + '\"><span class=\"e-btn-icon e-de-formfield e-icons e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + this.onWrapText(locale.getConstant('Form Fields')) + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button>',\n                        id: id + FORM_FIELDS_ID,\n                        htmlAttributes: { 'aria-label': locale.getConstant('Form Fields') }\n                    });\n                    break;\n                case 'UpdateFields':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-update-field', tooltipText: locale.getConstant('Update cross reference fields'),\n                        id: id + UPDATE_FIELDS_ID, text: this.onWrapText(locale.getConstant('Update Fields')),\n                        cssClass: className + ' e-de-formfields',\n                        htmlAttributes: { 'aria-label': locale.getConstant('Update cross reference fields') }\n                    });\n                    break;\n                case 'InsertFootnote':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-footnote', tooltipText: locale.getConstant('Footnote Tooltip'),\n                        text: this.onWrapText(locale.getConstant('Insert Footnote')), id: id + FOOTNOTE_ID,\n                        cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('Insert Footnote') }\n                    });\n                    break;\n                case 'InsertEndnote':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-endnote', tooltipText: locale.getConstant('Endnote Tooltip'),\n                        text: this.onWrapText(locale.getConstant('Insert Endnote')), id: id + ENDNOTE_ID,\n                        cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('Insert Endnote') }\n                    });\n                    break;\n                case 'ContentControl':\n                    toolbarItems.push({\n                        template: '<button title=\"' + locale.getConstant('Content Control') + '\" class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib e-dropdown-btn e-caret-hide\" type=\"button\" id=\"' + id + CONTENT_CONTROL_ID + '\"><span class=\"e-btn-icon e-icons e-de-ctnr-content-control e-icon-left\"></span><span class=\"e-tbar-btn-text\">' + this.onWrapText(locale.getConstant('Content Control')) + '</span><span class=\"e-btn-icon e-icons e-icon-right e-caret\"></span></button>',\n                        id: id + CONTENT_CONTROL_ID, htmlAttributes: { 'aria-label': locale.getConstant('Content Control') }\n                    });\n                    break;\n                case 'XML Mapping':\n                    toolbarItems.push({\n                        prefixIcon: 'e-de-ctnr-xml-mapping', tooltipText: locale.getConstant('XML Mapping Pane'),\n                        id: id + XMLMAPPING_ID, text: this.onWrapText(locale.getConstant('XML Mapping Pane')), cssClass: className,\n                        htmlAttributes: { 'aria-label': locale.getConstant('XML Mapping Pane') }\n                    });\n                    break;\n                default:\n                    //Here we need to process the items\n                    toolbarItems.push(tItem[parseInt(i.toString(), 10)]);\n                    break;\n            }\n        }\n        /* eslint-disable */\n        for (var i = 0; i < toolbarItems.length; i++) {\n            var tabindex = void 0;\n            if (toolbarItems[i].text !== 'Separator') {\n                tabindex = i.toString();\n                toolbarItems[i].htmlattributes = { 'tabindex': tabindex };\n            }\n        }\n        /* eslint-enable */\n        return toolbarItems;\n    };\n    Toolbar.prototype.clickHandler = function (args) {\n        var id = this.container.element.id + TOOLBAR_ID;\n        switch (args.item.id) {\n            case id + NEW_ID:\n                this.container.documentEditor.openBlank();\n                this.documentEditor.focusIn();\n                break;\n            case id + OPEN_ID:\n                this.filePicker.value = '';\n                this.filePicker.click();\n                this.documentEditor.focusIn();\n                break;\n            case id + UNDO_ID:\n                this.container.documentEditor.editorHistoryModule.undo();\n                break;\n            case id + REDO_ID:\n                this.container.documentEditor.editorHistoryModule.redo();\n                break;\n            case id + INSERT_TABLE_ID:\n                this.container.documentEditor.showDialog('Table');\n                break;\n            case id + INSERT_LINK_ID:\n                this.container.documentEditor.showDialog('Hyperlink');\n                break;\n            case id + BOOKMARK_ID:\n                this.container.documentEditor.showDialog('Bookmark');\n                break;\n            case id + COMMENT_ID:\n                this.documentEditor.editorModule.isUserInsert = true;\n                this.documentEditor.editorModule.insertComment('');\n                this.documentEditor.editorModule.isUserInsert = false;\n                break;\n            case id + TRACK_ID:\n                this.toggleTrackChangesInternal(args.item.id);\n                break;\n            case id + HEADER_ID:\n                this.container.documentEditor.selectionModule.goToHeader();\n                this.container.statusBar.toggleWebLayout();\n                break;\n            case id + TABLE_OF_CONTENT_ID:\n                this.onToc();\n                break;\n            case id + XMLMAPPING_ID:\n                if (!this.container.documentEditor.isXmlPaneTool) {\n                    this.container.documentEditor.showXmlPane();\n                }\n                this.container.statusBar.toggleWebLayout();\n                break;\n            case id + FOOTER_ID:\n                this.container.documentEditor.selectionModule.goToFooter();\n                this.container.statusBar.toggleWebLayout();\n                break;\n            // case id + PAGE_SET_UP_ID:\n            //     this.container.documentEditor.showDialog('PageSetup');\n            //     break;\n            case id + PAGE_NUMBER_ID:\n                this.container.documentEditor.editorModule.insertPageNumber();\n                break;\n            case id + FIND_ID:\n                this.container.documentEditor.showOptionsPane();\n                break;\n            case id + CLIPBOARD_ID:\n                this.toggleLocalPaste(args.item.id);\n                break;\n            case id + UPDATE_FIELDS_ID:\n                this.documentEditor.updateFields();\n                break;\n            case id + FOOTNOTE_ID:\n                this.documentEditor.editorModule.insertFootnote();\n                break;\n            case id + ENDNOTE_ID:\n                this.documentEditor.editorModule.insertEndnote();\n                break;\n            default:\n                this.container.trigger(_document_editor_base_index__WEBPACK_IMPORTED_MODULE_5__.toolbarClickEvent, args);\n                break;\n        }\n        if (args.item.id === id + NEW_ID || args.item.id === id + OPEN_ID || args.item.id === id + UNDO_ID || args.item.id === REDO_ID\n            || args.item.id === id + XMLMAPPING_ID || args.item.id === id + COMMENT_ID || args.item.id === id + TRACK_ID\n            || args.item.id === id + HEADER_ID || args.item.id === id + TABLE_OF_CONTENT_ID || args.item.id === id + FOOTER_ID\n            || args.item.id === id + PAGE_NUMBER_ID || args.item.id === id + CLIPBOARD_ID || args.item.id === id + UPDATE_FIELDS_ID\n            || args.item.id === id + FOOTNOTE_ID || args.item.id === id + ENDNOTE_ID || args.item.id === id + PAGE_SET_UP_ID ||\n            args.item.id === id + BREAK_ID || args.item.id === id + RESTRICT_EDITING_ID || args.item.id === id + FORM_FIELDS_ID) {\n            this.documentEditor.focusIn();\n        }\n    };\n    Toolbar.prototype.toggleLocalPaste = function (id) {\n        this.container.enableLocalPaste = !this.container.enableLocalPaste;\n        this.toggleButton(id, this.container.enableLocalPaste);\n    };\n    Toolbar.prototype.toggleEditing = function () {\n        this.container.restrictEditing = !this.container.restrictEditing;\n        this.container.showPropertiesPane = !this.container.restrictEditing;\n    };\n    /**\n     * @private\n     * @param {boolean} enable - Enable/Disable restrictEditing changes toolbar item.\n     * @returns {void}\n     */\n    Toolbar.prototype.toggleRestrictEditing = function (enable) {\n        var restrictEditingId = this.container.element.id + TOOLBAR_ID + RESTRICT_EDITING_ID;\n        var element = document.getElementById(restrictEditingId);\n        if (element) {\n            this.toggleButton(restrictEditingId, enable);\n        }\n    };\n    Toolbar.prototype.toggleButton = function (id, toggle) {\n        var element = document.getElementById(id);\n        if (toggle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(element, ['e-btn-toggle'], []);\n            element.setAttribute('aria-pressed', 'true');\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(element, [], ['e-btn-toggle']);\n            element.setAttribute('aria-pressed', 'false');\n        }\n    };\n    Toolbar.prototype.toggleTrackChangesInternal = function (id, enable) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(enable)) {\n            this.container.enableTrackChanges = !enable;\n        }\n        this.container.enableTrackChanges = !this.container.enableTrackChanges;\n        this.toggleButton(id, this.container.enableTrackChanges);\n    };\n    Toolbar.prototype.togglePropertiesPane = function () {\n        this.container.showPropertiesPane = !this.container.showPropertiesPane;\n    };\n    Toolbar.prototype.onDropDownButtonSelect = function (args) {\n        var _this = this;\n        var parentId = this.container.element.id + TOOLBAR_ID;\n        var id = args.item.id;\n        if (id === parentId + INSERT_IMAGE_LOCAL_ID) {\n            this.imagePicker.value = '';\n            this.imagePicker.click();\n        }\n        else if (id === parentId + PAGE_SET_UP) {\n            this.container.documentEditor.showDialog('PageSetup');\n        }\n        else if (id === parentId + COLUMNS_ID) {\n            this.container.documentEditor.showDialog('Columns');\n        }\n        else if (id === parentId + DATEPICKER_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('Date');\n        }\n        else if (id === parentId + CHECKBOX_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('CheckBox');\n        }\n        else if (id === parentId + COMBOBOX_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('ComboBox');\n        }\n        else if (id === parentId + RICHTEXT_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('RichText');\n        }\n        else if (id === parentId + PLAINTEXT_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('Text');\n        }\n        else if (id === parentId + PICTURE_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.showDialog('PictureContentControl');\n        }\n        else if (id === parentId + DROPDOWNDOWN_CONTENT_CONTROL_ID) {\n            this.container.documentEditor.editor.insertContentControl('DropDownList');\n        }\n        else if (id === parentId + INSERT_IMAGE_ONLINE_ID) {\n            // Need to implement image dialog;\n        }\n        else if (id === parentId + READ_ONLY) {\n            this.toggleEditing();\n        }\n        else if (id === parentId + PROTECTIONS) {\n            this.documentEditor.documentHelper.restrictEditingPane.showHideRestrictPane(true);\n        }\n        else if (id === parentId + CHECKBOX) {\n            this.documentEditor.editorModule.insertFormField('CheckBox');\n        }\n        else if (id === parentId + DROPDOWN) {\n            this.documentEditor.editorModule.insertFormField('DropDown');\n        }\n        else if (id === parentId + TEXT_FORM) {\n            this.documentEditor.editorModule.insertFormField('Text');\n        }\n        setTimeout(function () {\n            _this.documentEditor.focusIn();\n        }, 30);\n    };\n    Toolbar.prototype.onFileChange = function () {\n        var _this = this;\n        var file = this.filePicker.files[0];\n        var filesize = file.size;\n        var check;\n        var eventArgs = { fileSize: filesize, isCanceled: check };\n        this.documentEditor.trigger(_document_editor_base_index__WEBPACK_IMPORTED_MODULE_5__.beforeFileOpenEvent, eventArgs);\n        if (eventArgs.isCanceled) {\n            return;\n        }\n        if (file) {\n            var formatType_1 = file.name.substr(file.name.lastIndexOf('.'));\n            if (formatType_1 === '.sfdt' || formatType_1 === '.txt') {\n                var fileReader_1 = new FileReader();\n                fileReader_1.onload = function () {\n                    if (formatType_1 === '.txt') {\n                        _this.container.documentEditor.documentHelper.openTextFile(fileReader_1.result);\n                    }\n                    else {\n                        /* eslint-disable */\n                        _this.container.documentEditor.openAsync(fileReader_1.result);\n                        /* eslint-enable */\n                    }\n                };\n                fileReader_1.readAsText(file);\n            }\n            else {\n                if (this.isSupportedFormatType(formatType_1.toLowerCase())) {\n                    //this.convertToSfdt(file);\n                    this.documentEditor.open(file);\n                }\n                else {\n                    var localizeValue = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n('documenteditor', this.documentEditor.defaultLocale);\n                    _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.DialogUtility.alert({\n                        content: localizeValue.getConstant('Unsupported format'),\n                        closeOnEscape: true, showCloseIcon: true,\n                        position: { X: 'center', Y: 'center' }\n                    }).enableRtl = this.container.enableRtl;\n                }\n            }\n            this.container.documentEditor.documentName = file.name.substr(0, file.name.lastIndexOf('.'));\n        }\n    };\n    Toolbar.prototype.isSupportedFormatType = function (formatType) {\n        switch (formatType) {\n            case '.dotx':\n            case '.docx':\n            case '.docm':\n            case '.dotm':\n            case '.dot':\n            case '.doc':\n            case '.rtf':\n            case '.txt':\n            case '.xml':\n            case '.html':\n                return true;\n            default:\n                return false;\n        }\n    };\n    // private convertToSfdt(file: File): void {\n    //     showSpinner(this.container.containerTarget);\n    //     this.importHandler.url = this.container.serviceUrl + this.container.serverActionSettings.import;\n    //     this.importHandler.onSuccess = this.successHandler.bind(this);\n    //     this.importHandler.onFailure = this.failureHandler.bind(this);\n    //     this.importHandler.onError = this.failureHandler.bind(this);\n    //     this.importHandler.customHeaders = this.container.headers;\n    //     const httprequestEventArgs: XmlHttpRequestEventArgs = { serverActionType: 'Import', headers: this.container.headers, timeout: 0, cancel: false, withCredentials: false  };\n    //     this.container.trigger(beforeXmlHttpRequestSend, httprequestEventArgs);\n    //     const formData: FormData = new FormData();\n    //     formData.append('files', file);\n    //     if (httprequestEventArgs.cancel) {\n    //         hideSpinner(this.container.containerTarget);\n    //     } else {\n    //         this.importHandler.send(formData, httprequestEventArgs);\n    //     }\n    // }\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    Toolbar.prototype.failureHandler = function (args) {\n        if (args.name === 'onError') {\n            _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.DialogUtility.alert({\n                content: this.container.localObj.getConstant('Error in establishing connection with web server'),\n                closeOnEscape: true, showCloseIcon: true,\n                position: { X: 'center', Y: 'center' }\n            }).enableRtl = this.container.enableRtl;\n        }\n        else {\n            alert('Failed to load the file');\n            this.documentEditor.fireServiceFailure(args);\n        }\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.hideSpinner)(this.container.containerTarget);\n    };\n    Toolbar.prototype.successHandler = function (result) {\n        /* eslint-disable */\n        this.container.documentEditor.open(result.data);\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.hideSpinner)(this.container.containerTarget);\n        /* eslint-enable */\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    Toolbar.prototype.onImageChange = function () {\n        var _this = this;\n        var file = this.imagePicker.files[0];\n        var fileReader = new FileReader();\n        fileReader.onload = function () {\n            _this.insertImage(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    };\n    Toolbar.prototype.insertImage = function (data) {\n        var image = document.createElement('img');\n        var container = this.container;\n        image.addEventListener('load', function () {\n            container.documentEditor.editorModule.insertImageInternal(data, true, this.width, this.height, this.alt);\n        });\n        image.src = data;\n    };\n    Toolbar.prototype.enableDisableFormField = function (enable) {\n        var ele = document.getElementById('container_toolbar_form_fields');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele)) {\n            this.toolbar.enableItems(ele.parentElement, enable);\n        }\n    };\n    /**\n     * @private\n     * @param {boolean} enable - Emable/Disable insert comment toolbar item.\n     * @returns {void}\n     */\n    Toolbar.prototype.enableDisableInsertComment = function (enable) {\n        this.isCommentEditing = !enable;\n        var id = this.container.element.id + TOOLBAR_ID;\n        var commentId = id + COMMENT_ID;\n        var element = document.getElementById(commentId);\n        if (!this.container.enableComment && element) {\n            this.toolbar.removeItems(element.parentElement);\n        }\n        else if (element) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentEditor) && (this.documentEditor.isReadOnly ||\n                this.documentEditor.documentHelper.isDocumentProtected)) {\n                enable = this.documentEditor.documentHelper.isCommentOnlyMode || !this.documentEditor.isReadOnlyMode;\n            }\n            this.toolbar.enableItems(element.parentElement, enable);\n        }\n    };\n    /**\n     * @private\n     * @param {boolean} enable - Emable/Disable track changes toolbar item.\n     * @returns {void}\n     */\n    Toolbar.prototype.toggleTrackChanges = function (enable) {\n        var trackId = this.container.element.id + TOOLBAR_ID + TRACK_ID;\n        var element = document.getElementById(trackId);\n        if (element) {\n            this.toggleTrackChangesInternal(trackId, enable);\n        }\n    };\n    // /**\n    //  * @private\n    //  */\n    // public enableDisableTrackChanges(enable: boolean): void {\n    //     let id: string = this.container.element.id + TOOLBAR_ID + TRACK_ID;\n    //     if (!isNullOrUndefined(this.documentEditor) && (this.documentEditor.isReadOnly ||\n    //         this.documentEditor.documentHelper.isDocumentProtected)) {\n    //         enable = false;\n    //     }\n    //     this.toggleTrackChanges(id, enable);\n    // }\n    /**\n     * @private\n     * @param {boolean} enable - Enable/Diable toolbar items.\n     * @param {boolean} isProtectedContent - Define whether document is protected.\n     * @returns {void}\n     */\n    Toolbar.prototype.enableDisableToolBarItem = function (enable, isProtectedContent) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.container.element)) {\n            var id = this.container.element.id + TOOLBAR_ID;\n            for (var _i = 0, _a = this.toolbar.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                var itemId = item.id;\n                if (itemId !== id + NEW_ID && itemId !== id + OPEN_ID && itemId !== id + FIND_ID &&\n                    itemId !== id + CLIPBOARD_ID && itemId !== id + RESTRICT_EDITING_ID\n                    && item.type !== 'Separator') {\n                    if (enable && this.isCommentEditing && itemId === id + COMMENT_ID) {\n                        continue;\n                    }\n                    if (itemId !== id + UNDO_ID && itemId !== id + REDO_ID && itemId !== id + INSERT_TABLE_ID &&\n                        itemId !== id + INSERT_LINK_ID && itemId !== id + BOOKMARK_ID && itemId !== id + COMMENT_ID &&\n                        itemId !== id + HEADER_ID && itemId !== id + XMLMAPPING_ID && itemId !== id + TABLE_OF_CONTENT_ID &&\n                        itemId !== id + FOOTER_ID && itemId !== id + PAGE_SET_UP_ID && itemId !== id + CONTENT_CONTROL_ID\n                        && itemId !== id + PAGE_NUMBER_ID && itemId !== id + INSERT_IMAGE_ID && itemId !== id + FORM_FIELDS_ID\n                        && itemId !== id + BREAK_ID && itemId !== id + TRACK_ID && itemId !== id + FOOTNOTE_ID\n                        && itemId !== id + ENDNOTE_ID &&\n                        itemId !== id + UPDATE_FIELDS_ID) {\n                        continue;\n                    }\n                    if (isProtectedContent && this.documentEditor.documentHelper.isFormFillProtectedMode\n                        && itemId === id + UPDATE_FIELDS_ID) {\n                        continue;\n                    }\n                    var element = document.getElementById(item.id);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement)) {\n                        this.toolbar.enableItems(element.parentElement, enable);\n                    }\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.documentEditor)) {\n                this.enableDisableFormField(!this.documentEditor.enableHeaderAndFooter && enable && !this.documentEditor.isReadOnlyMode);\n            }\n            var isPlainContetnControl = this.documentEditor.selectionModule.isPlainContentControl();\n            if (this.documentEditor.selectionModule.isinFootnote || this.documentEditor.selectionModule.isinEndnote\n                || this.documentEditor.enableHeaderAndFooter || isPlainContetnControl) {\n                if (this.containsItem(id + ENDNOTE_ID)) {\n                    this.toolbar.enableItems(document.getElementById(id + ENDNOTE_ID).parentElement, false);\n                }\n                if (this.containsItem(id + FOOTNOTE_ID)) {\n                    this.toolbar.enableItems(document.getElementById(id + FOOTNOTE_ID).parentElement, false);\n                }\n                if (this.containsItem(id + BREAK_ID)) {\n                    this.toolbar.enableItems(document.getElementById(id + BREAK_ID).parentElement, false);\n                }\n                if (isPlainContetnControl) {\n                    if (this.containsItem(id + INSERT_TABLE_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + INSERT_TABLE_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + INSERT_IMAGE_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + INSERT_IMAGE_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + COMMENT_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + COMMENT_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + BOOKMARK_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + BOOKMARK_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + INSERT_LINK_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + INSERT_LINK_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + FORM_FIELDS_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + FORM_FIELDS_ID).parentElement, false);\n                    }\n                    if (this.containsItem(id + CONTENT_CONTROL_ID)) {\n                        this.toolbar.enableItems(document.getElementById(id + CONTENT_CONTROL_ID).parentElement, false);\n                    }\n                }\n            }\n            if (!isProtectedContent || this.container.showPropertiesPane) {\n                if (isProtectedContent) {\n                    enable = this.container.showPropertiesPane;\n                }\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.propertiesPaneButton.element.parentElement, !enable ? ['e-de-overlay'] : [], !enable ? [] : ['e-de-overlay']);\n            }\n            var protectionType = this.documentEditor.documentHelper.protectionType;\n            if (enable || (this.documentEditor.documentHelper.isDocumentProtected &&\n                (protectionType === 'FormFieldsOnly' || protectionType === 'CommentsOnly'))) {\n                this.enableDisableUndoRedo();\n            }\n            if (this.documentEditor.documentHelper.isTrackedOnlyMode && this.containsItem(id + TRACK_ID)) {\n                this.toolbar.enableItems(document.getElementById(id + TRACK_ID).parentElement, false);\n            }\n        }\n    };\n    Toolbar.prototype.containsItem = function (id) {\n        for (var _i = 0, _a = this.toolbar.items; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.id === id) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Toolbar.prototype.enableDisableUndoRedo = function () {\n        var id = this.container.element.id + TOOLBAR_ID;\n        if (this.toolbarItems.indexOf('Undo') >= 0) {\n            var undoElement = document.getElementById(id + UNDO_ID);\n            // We can optimize this condition check to single bool validation instead of array collection.\n            /* eslint-disable-next-line max-len */\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(undoElement)) {\n                this.toolbar.enableItems(undoElement.parentElement, this.container.documentEditor.editorHistoryModule.canUndo());\n            }\n        }\n        if (this.toolbarItems.indexOf('Redo') >= 0) {\n            var redoElement = document.getElementById(id + REDO_ID);\n            // We can optimize this condition check to single bool validation instead of array collection.\n            /* eslint-disable-next-line max-len */\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(redoElement)) {\n                this.toolbar.enableItems(redoElement.parentElement, this.container.documentEditor.editorHistoryModule.canRedo());\n            }\n        }\n    };\n    Toolbar.prototype.onToc = function () {\n        if (this.container.previousContext === 'TableOfContents' && this.container.propertiesPaneContainer.style.display === 'none') {\n            this.container.showPropertiesPane = false;\n            this.documentEditor.focusIn();\n            return;\n        }\n        if (this.container.headerFooterProperties.element.style.display === 'block') {\n            this.documentEditor.selectionModule.closeHeaderFooter();\n        }\n        this.enableDisablePropertyPaneButton(false);\n        this.container.showProperties('toc');\n    };\n    /**\n     * @private\n     * @param {boolean} isShow - show/hide property pane.\n     * @returns {void}\n     */\n    Toolbar.prototype.enableDisablePropertyPaneButton = function (isShow) {\n        if (isShow) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.propertiesPaneButton.element.firstChild, ['e-pane-enabled'], ['e-pane-disabled']);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.propertiesPaneButton.element.firstChild, ['e-pane-disabled'], ['e-pane-enabled']);\n        }\n    };\n    /**\n     * @private\n     * @returns { void }\n     */\n    Toolbar.prototype.destroy = function () {\n        if (this.restrictDropDwn) {\n            this.restrictDropDwn.destroy();\n            this.restrictDropDwn = undefined;\n        }\n        if (this.imgDropDwn) {\n            this.imgDropDwn.destroy();\n            this.imgDropDwn = undefined;\n        }\n        if (this.PageSetUpDropDwn) {\n            this.PageSetUpDropDwn.destroy();\n            this.PageSetUpDropDwn = undefined;\n        }\n        if (this.breakDropDwn) {\n            this.breakDropDwn.destroy();\n            this.breakDropDwn = undefined;\n        }\n        if (this.formFieldDropDown) {\n            this.formFieldDropDown.destroy();\n            this.formFieldDropDown = undefined;\n        }\n        if (this.ContentControlDropDwn) {\n            this.ContentControlDropDwn.destroy();\n            this.ContentControlDropDwn = undefined;\n        }\n        if (this.toolbar) {\n            var toolbarElement = this.toolbar.element;\n            this.toolbar.destroy();\n            this.toolbar = undefined;\n            toolbarElement.parentElement.removeChild(toolbarElement);\n        }\n        if (this.container.toolbarContainer) {\n            this.container.containerTarget.removeChild(this.container.toolbarContainer);\n            this.container.toolbarContainer = undefined;\n        }\n        if (this.container.toolbarModule) {\n            this.container.toolbarModule = undefined;\n        }\n        if (this.propertiesPaneButton) {\n            this.propertiesPaneButton.destroy();\n        }\n        if (this.breakListView) {\n            this.breakListView.destroy();\n            this.breakListView = undefined;\n        }\n        this.propertiesPaneButton = undefined;\n        this.toolbarItems = [];\n        this.toolbarItems = undefined;\n        this.container = undefined;\n    };\n    return Toolbar;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor-container/tool-bar/tool-bar.js?");

/***/ })

}]);