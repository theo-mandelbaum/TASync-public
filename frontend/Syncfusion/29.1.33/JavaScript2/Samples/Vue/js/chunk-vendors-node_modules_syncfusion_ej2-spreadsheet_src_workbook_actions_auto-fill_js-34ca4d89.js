"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_actions_auto-fill_js-34ca4d89"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/actions/auto-fill.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/actions/auto-fill.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkbookAutoFill: () => (/* binding */ WorkbookAutoFill)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_internalization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/internalization */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/internalization.js\");\n\n\n\n\n\n\n\n/**\n * WorkbookAutoFill module allows to perform auto fill functionalities.\n */\nvar WorkbookAutoFill = /** @class */ (function () {\n    /**\n     * Constructor for the workbook AutoFill module.\n     *\n     * @param {Workbook} parent - Specifies the workbook.\n     * @private\n     */\n    function WorkbookAutoFill(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    WorkbookAutoFill.prototype.getFillInfo = function (options) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_2__.workbookLocale);\n        var val = '';\n        var isStringType = true;\n        var fillType = 'CopyCells';\n        var disableItems = [];\n        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;\n        var data = this.getRangeData({ range: options.dataRange, sheetIdx: this.parent.activeSheetIndex });\n        var len = data.join().replace(/,/g, '').length;\n        var i = this.isRange(options.dataRange) && len ? data.length : 1;\n        while (i--) {\n            val = data[i] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[i].value) ? data[i].value : '';\n            if ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val) || (0,_index__WEBPACK_IMPORTED_MODULE_3__.checkIsFormula)(val) || (0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val[val.length - 1])) {\n                isStringType = false;\n                fillType = this.parent.autoFillSettings.fillType;\n                break;\n            }\n        }\n        if (!len || isStringType) {\n            disableItems.push(l10n.getConstant('FillSeries'));\n            fillType = (options.fillType === 'FillSeries') ? fillType : options.fillType;\n        }\n        if (!isVFill || (isVFill && options.dataRange[1] !== options.dataRange[3])) {\n            disableItems.push('Flash Fill'); // for flash fill option\n        }\n        return { fillType: fillType, disableItems: disableItems };\n    };\n    WorkbookAutoFill.prototype.isRange = function (range) {\n        return range && (range[0] !== range[2] || range[1] !== range[3]);\n    };\n    WorkbookAutoFill.prototype.autoFill = function (options) {\n        if (!options.dataRange || !options.fillRange || !options.direction || !this.parent.allowEditing ||\n            (this.parent.getActiveSheet().isProtected && options.isLockedCell)) {\n            return;\n        }\n        var dataRangeIndices = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(options.dataRange));\n        var fillRangeIndices = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(options.fillRange));\n        var autoFillOptions = {\n            dataRange: dataRangeIndices, fillRange: fillRangeIndices, direction: options.direction, fillType: options.fillType || this.fillInfo.fillType, dataSheetIndex: (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getSheetIndexFromAddress)(this.parent, options.dataRange),\n            fillSheetIndex: (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getSheetIndexFromAddress)(this.parent, options.fillRange), cells: options.cells\n        };\n        this.fillInfo = this.getFillInfo({ dataRange: dataRangeIndices, fillRange: fillRangeIndices, fillType: options.fillType,\n            direction: options.direction });\n        this.fillInfo.fillType = options.isFillOptClick ? options.fillType : this.fillInfo.fillType;\n        switch (options.fillType) {\n            case 'FillSeries':\n            case 'FillWithoutFormatting':\n                this.fillSeries(autoFillOptions);\n                break;\n            case 'CopyCells':\n            case 'FillFormattingOnly':\n                this.copyCells(autoFillOptions);\n                break;\n        }\n    };\n    WorkbookAutoFill.prototype.fillSeries = function (options) {\n        var val;\n        var plen;\n        var patterns;\n        var patrn;\n        var pRanges;\n        var patrnRange;\n        var fillRange;\n        var data;\n        var nextStringValue;\n        var match;\n        var temp;\n        var dlen;\n        var j;\n        var k;\n        var l;\n        var tlen;\n        var tot;\n        var hasRef;\n        var cells;\n        var clen;\n        var cellIdx;\n        var cellProps = {};\n        var i = 0;\n        var prevCellData;\n        var dateVal;\n        var dateObj;\n        var dataSheetIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.dataSheetIndex) ? this.parent.activeSheetIndex : options.dataSheetIndex;\n        var dataSheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, dataSheetIndex);\n        var fillSheetIndex;\n        var activeSheet;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.fillSheetIndex)) {\n            fillSheetIndex = this.parent.activeSheetIndex;\n            activeSheet = true;\n        }\n        else {\n            fillSheetIndex = options.fillSheetIndex;\n            activeSheet = fillSheetIndex === this.parent.activeSheetIndex;\n        }\n        var fillSheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, fillSheetIndex);\n        var dminr = options.dataRange[0];\n        var dminc = options.dataRange[1];\n        var dmaxr = options.dataRange[2];\n        var dmaxc = options.dataRange[3];\n        var fminr = options.fillRange[0];\n        var fminc = options.fillRange[1];\n        var fmaxr = options.fillRange[2];\n        var fmaxc = options.fillRange[3];\n        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;\n        var isReverseFill = ['Up', 'Left'].indexOf(options.direction) > -1;\n        var len = isVFill ? dmaxc - dminc : dmaxr - dminr;\n        var fillWithFrmt = options.fillType === 'FillSeries';\n        var prop;\n        var cfRefreshAll;\n        var cancel;\n        var cf = dataSheet.conditionalFormats && dataSheet.conditionalFormats.length &&\n            [].slice.call(dataSheet.conditionalFormats);\n        var cfRule = [];\n        var applyWrapToOuterCells = activeSheet && this.applyWrapToOuterCells(fillSheet);\n        var isRowHeightCheck = options.fillType !== 'FillWithoutFormatting' && activeSheet && isVFill;\n        while (i <= len) {\n            pRanges = this.updateFillValues(isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i);\n            patrnRange = pRanges.patternRange;\n            fillRange = pRanges.fillRange;\n            patterns = this.getPattern(patrnRange, { isReverseFill: isReverseFill, isVFill: isVFill }, dataSheetIndex);\n            data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex });\n            if (!isVFill) {\n                data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex }, true);\n            }\n            var isRefFormula = false;\n            if (data[0] && data[0].formula && data[0].formula.match(/=[A-Za-z]+\\(([^:]+):([^:]+)\\)/)) {\n                isRefFormula = true;\n            }\n            dlen = data.length;\n            for (var l_1 = 0; l_1 < dlen; l_1++) {\n                if (data[l_1] && data[l_1].isReadOnly) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.workbookReadonlyAlert, null);\n                    return;\n                }\n            }\n            if (!patterns || !patterns.length) {\n                return;\n            }\n            plen = patterns.length;\n            cells = this.getSelectedRange(fillSheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2],\n                colIndex: fillRange[3] });\n            clen = cells.length;\n            if (isReverseFill) {\n                cells = cells.reverse();\n                patterns = patterns.reverse();\n                patterns = this.ensurePattern(patterns);\n                data = data.reverse();\n            }\n            j = 0;\n            while (j < clen) {\n                cellIdx = cells[j];\n                patrn = patterns[j % plen];\n                if ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(patrn)) {\n                    patrn = patterns[patrn];\n                }\n                l = j % dlen;\n                switch (patrn['type']) {\n                    case 'number':\n                    case 'date':\n                        patrn = patrn;\n                        if (patrn.isStartWithMonth && dlen === 1) {\n                            dateVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.intToDate)(patrn.regVal.a);\n                            dateObj = new Date(dateVal);\n                            dateVal.setMonth(dateVal.getMonth() + (patrn.regVal.b * patrn.i));\n                            if (dateObj.getDate() > 28 && dateObj.getDate() !== dateVal.getDate()) {\n                                dateObj.setDate(1);\n                                dateObj.setMonth(dateObj.getMonth() + (patrn.regVal.b * patrn.i));\n                                dateObj.setDate(new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 0).getDate());\n                                dateVal = dateObj;\n                            }\n                            val = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.dateToInt)(dateVal).toString();\n                        }\n                        else {\n                            val = (this.round(patrn['regVal'].a + (patrn['regVal'].b * patrn['i']), 5)).toString();\n                            if (patrn.val) {\n                                match = (typeof (patrn.val[0]) === 'string') && patrn.val[0].match(/^0+/);\n                                if (match) {\n                                    nextStringValue = this.getNextFormattedValue(patrn.val[0], Number(val));\n                                }\n                            }\n                        }\n                        if (patrn.dataVal) {\n                            if (patrn.copy === undefined && !match) {\n                                patrn.copy = patrn.val.length > 2;\n                                if (patrn.copy) {\n                                    for (var m = 2; m < patrn.val.length; m++) {\n                                        patrn.copy = Math.abs(this.round(patrn['regVal'].a + (patrn['regVal'].b * m), 5)) !==\n                                            patrn.val[m];\n                                        if (patrn.copy) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            val = patrn.copy ? (data[l] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[l].value) ? data[l].value : '') :\n                                (patrn.start ? Math.abs(Number(val)) + patrn.dataVal :\n                                    (match ? patrn.dataVal + nextStringValue : patrn.dataVal + Math.abs(Number(val))));\n                        }\n                        if (isReverseFill) {\n                            patrn['i']--;\n                        }\n                        else {\n                            patrn['i']++;\n                        }\n                        break;\n                    case 'string':\n                        // eslint-disable-next-line no-case-declarations\n                        var newVal = patrn['i'] % patrn['val'].length;\n                        val = patrn['val'][newVal];\n                        patrn['i']++;\n                        break;\n                    case 'formula':\n                        hasRef = false;\n                        val = '=';\n                        k = 0;\n                        tlen = patrn['val'].length;\n                        while (k < tlen) {\n                            temp = patrn['val'][k];\n                            if (typeof temp === 'object') {\n                                hasRef = true;\n                                tot = this.round(temp['a'] + (temp['b'] * patrn['i']), 5);\n                                if (tot < 1) {\n                                    val += '#REF!';\n                                    if (isRefFormula) {\n                                        k = tlen - 1;\n                                        val += patrn['val'][k];\n                                    }\n                                }\n                                else {\n                                    val += isVFill ? temp['c'] + (temp['b'] ? tot : '$' + tot) : (temp['b'] ? (0,_index__WEBPACK_IMPORTED_MODULE_3__.getColumnHeaderText)(tot) : temp['c'].substring(0, temp['c'].search(/\\d/)) + '$' + (0,_index__WEBPACK_IMPORTED_MODULE_3__.getColumnHeaderText)(tot)) + temp['c'].trim();\n                                }\n                            }\n                            else {\n                                val += temp;\n                            }\n                            k++;\n                        }\n                        if (hasRef && isReverseFill) {\n                            patrn['i']--;\n                        }\n                        else {\n                            patrn['i']++;\n                        }\n                        break;\n                    case 'time':\n                        val = (patrn['regVal'].a + (patrn['regVal'].b * patrn['i'])).toString();\n                        if (Number(val) < 0 && isReverseFill) {\n                            val = ((patrn['regVal'].a + Math.ceil(Math.abs(patrn['i'] / 24))) + (patrn['regVal'].b * patrn['i'])).toString();\n                        }\n                        if (isReverseFill) {\n                            patrn['i']--;\n                        }\n                        else {\n                            patrn['i']++;\n                        }\n                        break;\n                }\n                prevCellData = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(cellIdx.rowIndex, cellIdx.colIndex, fillSheet, false, true);\n                if (prevCellData && prevCellData.isReadOnly) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.workbookReadonlyAlert, null);\n                    return;\n                }\n                if (fillWithFrmt) {\n                    Object.assign(cellProps, data[l], null, true);\n                }\n                else {\n                    if (options.fillType === 'FillWithoutFormatting' && data[l] && data[l].hyperlink) {\n                        cellProps.hyperlink = data[l].hyperlink;\n                        cellProps.style = { textDecoration: 'none', color: 'inherit' };\n                    }\n                    else {\n                        cellProps.style = prevCellData.style;\n                    }\n                    cellProps.format = prevCellData.format;\n                    cellProps.wrap = prevCellData.wrap;\n                    cellProps.rowSpan = prevCellData.rowSpan;\n                    cellProps.colSpan = prevCellData.colSpan;\n                }\n                if (data[l] && data[l].validation) {\n                    cellProps.validation = Object.assign({}, data[l].validation);\n                    var currIdx = [cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex];\n                    var prevIdx = [options.dataRange[0], options.dataRange[1], options.dataRange[2], options.dataRange[3]];\n                    var sheet = this.parent.sheets[this.parent.activeSheetIndex];\n                    var updatedValue = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getUpdatedFormula)(currIdx, prevIdx, sheet, this.parent, { formula: cellProps.validation.value1 });\n                    cellProps.validation.value1 = updatedValue;\n                    if (cellProps.validation.value2 !== '') {\n                        updatedValue = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getUpdatedFormula)(currIdx, prevIdx, sheet, this.parent, { formula: cellProps.validation.value2 });\n                        cellProps.validation.value2 = updatedValue;\n                    }\n                }\n                var isFormula = (0,_index__WEBPACK_IMPORTED_MODULE_3__.checkIsFormula)(val);\n                if (isFormula) {\n                    cellProps.formula = val;\n                }\n                if (val !== '0' || (val === '0' && options.fillType !== 'FillWithoutFormatting')) {\n                    cellProps.value = isFormula && this.parent.calculationMode === 'Manual' ?\n                        (data[l] ? data[l].value : '0') : val;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellProps.notes)) {\n                    delete cellProps.notes;\n                }\n                prop = { cell: cellProps, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true, uiRefresh: activeSheet,\n                    pvtExtend: true, skipFormatCheck: true, fillType: options.fillType };\n                if (activeSheet && !(0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenRow)(fillSheet, cellIdx.rowIndex) && !(0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenCol)(fillSheet, cellIdx.colIndex)) {\n                    prop.td = this.parent.getCell(cellIdx.rowIndex, cellIdx.colIndex);\n                    if (prop.td) {\n                        prop.uiRefresh = true;\n                    }\n                }\n                cancel = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.updateCell)(this.parent, fillSheet, prop, options.cells);\n                if (!cancel) {\n                    if (activeSheet) {\n                        applyWrapToOuterCells(prop);\n                    }\n                    if (cf && !cfRefreshAll) {\n                        cfRefreshAll = prop.isFormulaDependent;\n                        if (!cfRefreshAll) {\n                            (0,_index__WEBPACK_IMPORTED_MODULE_3__.updateCFModel)(cf, cfRule, cellIdx.rowIndex, cellIdx.colIndex, options.dataRange, options.fillRange, dataSheet);\n                        }\n                    }\n                    if (isRowHeightCheck && cellProps.style && (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isHeightCheckNeeded)(cellProps.style)) {\n                        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.applyCellFormat, {\n                            rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, style: cellProps.style,\n                            lastCell: true, isHeightCheckNeeded: true, onActionUpdate: true, manualUpdate: true\n                        });\n                    }\n                }\n                cellProps = {};\n                j++;\n            }\n            i++;\n        }\n        if (cfRule.length || cfRefreshAll) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true, isEdit: true });\n        }\n    };\n    WorkbookAutoFill.prototype.copyCells = function (options) {\n        var i = 0;\n        var j;\n        var k;\n        var patrnRange;\n        var fillRange;\n        var pRanges;\n        var data;\n        var dlen;\n        var cells;\n        var clen;\n        var cellProperty = {};\n        var cellIdx;\n        var dMinR = options.dataRange[0];\n        var dMinC = options.dataRange[1];\n        var dMaxR = options.dataRange[2];\n        var dMaxC = options.dataRange[3];\n        var fMinR = options.fillRange[0];\n        var fMinC = options.fillRange[1];\n        var fMaxR = options.fillRange[2];\n        var fMaxC = options.fillRange[3];\n        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;\n        var isReverseFill = ['Up', 'Left'].indexOf(options.direction) > -1;\n        var len = isVFill ? dMaxC - dMinC : dMaxR - dMinR;\n        var dataSheetIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.dataSheetIndex) ? this.parent.activeSheetIndex : options.dataSheetIndex;\n        var dataSheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, dataSheetIndex);\n        var fillSheetIndex;\n        var activeSheet;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.fillSheetIndex)) {\n            activeSheet = true;\n            fillSheetIndex = this.parent.activeSheetIndex;\n        }\n        else {\n            activeSheet = options.fillSheetIndex === this.parent.activeSheetIndex;\n            fillSheetIndex = options.fillSheetIndex;\n        }\n        var fillSheet = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, fillSheetIndex);\n        var formatOnly = options.fillType === 'FillFormattingOnly';\n        var prevCellData;\n        var cfRefreshAll;\n        var prop;\n        var cf = dataSheet.conditionalFormats && dataSheet.conditionalFormats.length &&\n            [].slice.call(dataSheet.conditionalFormats);\n        var cancel;\n        var applyWrapToOuterCells = activeSheet && this.applyWrapToOuterCells(fillSheet);\n        var cfRule = [];\n        var isRowHeightCheck = activeSheet && isVFill;\n        while (i <= len) {\n            pRanges = this.updateFillValues(isVFill, dMinR, dMinC, dMaxR, dMaxC, fMinR, fMinC, fMaxR, fMaxC, i);\n            patrnRange = pRanges.patternRange;\n            fillRange = pRanges.fillRange;\n            data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex });\n            dlen = data.length;\n            for (var m = 0; m < dlen; m++) {\n                if (data[m] && data[m].isReadOnly) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.workbookReadonlyAlert, null);\n                    return;\n                }\n            }\n            cells = this.getSelectedRange(fillSheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2], colIndex: fillRange[3] });\n            clen = cells.length;\n            j = 0;\n            if (isReverseFill) {\n                cells = cells.reverse();\n            }\n            while (j < clen) {\n                k = j % dlen;\n                cellIdx = cells[j];\n                if (formatOnly) {\n                    prevCellData = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(cellIdx.rowIndex, cellIdx.colIndex, fillSheet);\n                }\n                Object.assign(cellProperty, data[k], null, true);\n                if (formatOnly) {\n                    cellProperty.value = prevCellData.value;\n                    cellProperty.formula = prevCellData.formula;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellProperty.notes)) {\n                        delete cellProperty.notes;\n                    }\n                    if (cellProperty.validation) {\n                        delete cellProperty.validation;\n                    }\n                }\n                if (cellProperty && cellProperty.isReadOnly) {\n                    this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.workbookReadonlyAlert, null);\n                    return;\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellProperty.notes) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cellProperty.isNoteEditable)) {\n                    delete cellProperty.notes;\n                    delete cellProperty.isNoteEditable;\n                }\n                prop = { cell: cellProperty, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true,\n                    pvtExtend: true, fillType: options.fillType };\n                if (activeSheet && !(0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenRow)(fillSheet, cellIdx.rowIndex) && !(0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenCol)(fillSheet, cellIdx.colIndex)) {\n                    prop.td = this.parent.getCell(cellIdx.rowIndex, cellIdx.colIndex);\n                    prop.uiRefresh = !!prop.td;\n                }\n                cancel = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.updateCell)(this.parent, fillSheet, prop, options.cells);\n                if (!cancel) {\n                    if (activeSheet) {\n                        applyWrapToOuterCells(prop);\n                    }\n                    if (cf && !cfRefreshAll) {\n                        cfRefreshAll = prop.isFormulaDependent;\n                        if (!cfRefreshAll) {\n                            (0,_index__WEBPACK_IMPORTED_MODULE_3__.updateCFModel)(cf, cfRule, cellIdx.rowIndex, cellIdx.colIndex, options.dataRange, options.fillRange, dataSheet);\n                        }\n                    }\n                    if (isRowHeightCheck && cellProperty.style && (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isHeightCheckNeeded)(cellProperty.style)) {\n                        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.applyCellFormat, {\n                            rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, style: cellProperty.style,\n                            lastCell: true, isHeightCheckNeeded: true, onActionUpdate: true, manualUpdate: true\n                        });\n                    }\n                }\n                cellProperty = {};\n                j++;\n            }\n            i++;\n        }\n        if (cfRule.length || cfRefreshAll) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true, isEdit: true });\n        }\n    };\n    WorkbookAutoFill.prototype.applyWrapToOuterCells = function (sheet) {\n        var _this = this;\n        var viewTopIdx;\n        var viewLeftIdx;\n        var frozenRow = this.parent.frozenRowCount(sheet);\n        var frozenCol = this.parent.frozenColCount(sheet);\n        var viewport = this.parent.viewport;\n        if (viewport) {\n            viewTopIdx = viewport.topIndex + frozenRow;\n            viewLeftIdx = viewport.leftIndex + frozenCol;\n        }\n        var wrapArgs;\n        return function (options) {\n            if (!options.td && (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(options.rowIdx, options.colIdx, sheet, false, true).wrap && ((options.rowIdx >= frozenRow &&\n                options.rowIdx < viewTopIdx) || (options.colIdx >= frozenCol && options.colIdx < viewLeftIdx))) {\n                if (!wrapArgs) {\n                    wrapArgs = { range: null, wrap: true, sheet: sheet, initial: true, outsideViewport: true };\n                }\n                wrapArgs.range = [options.rowIdx, options.colIdx, options.rowIdx, options.colIdx];\n                _this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.wrapEvent, wrapArgs);\n            }\n        };\n    };\n    WorkbookAutoFill.prototype.updateFillValues = function (isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i) {\n        var pStart;\n        var pEnd;\n        var fStart;\n        var fEnd;\n        if (isVFill) {\n            pStart = { rowIndex: dminr, colIndex: dminc + i };\n            pEnd = { rowIndex: dmaxr, colIndex: dminc + i };\n            fStart = { rowIndex: fminr, colIndex: fminc + i };\n            fEnd = { rowIndex: fmaxr, colIndex: fminc + i };\n        }\n        else {\n            pStart = { rowIndex: dminr + i, colIndex: dminc };\n            pEnd = { rowIndex: dminr + i, colIndex: dmaxc };\n            fStart = { rowIndex: fminr + i, colIndex: fminc };\n            fEnd = { rowIndex: fminr + i, colIndex: fmaxc };\n        }\n        var patternRange = [pStart.rowIndex, pStart.colIndex, pEnd.rowIndex, pEnd.colIndex];\n        var fillRange = [fStart.rowIndex, fStart.colIndex, fEnd.rowIndex, fEnd.colIndex];\n        return { patternRange: patternRange, fillRange: fillRange };\n    };\n    WorkbookAutoFill.prototype.getDataPattern = function (range, sheetIdx) {\n        var val;\n        var numValue;\n        var type;\n        var i = 0;\n        var obj = { val: null,\n            type: null };\n        var patrn = [];\n        var data = this.getRangeData({\n            range: range, sheetIdx: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(sheetIdx) ? this.parent.activeSheetIndex\n                : sheetIdx\n        });\n        var dlen = data.length;\n        var isStartNum;\n        var isDateStartsWithMonth;\n        if (dlen) {\n            var count = void 0;\n            var dataVal = void 0;\n            var format = void 0;\n            var isNumVal = void 0;\n            var minusOperator = function (data) {\n                return !isStartNum && data && data[data.length - 1] === '-' ? data.slice(0, data.length - 1) : data;\n            };\n            while (i < dlen) {\n                isDateStartsWithMonth = false;\n                if (data[i]) {\n                    if (data[i].formula && (0,_index__WEBPACK_IMPORTED_MODULE_3__.checkIsFormula)(data[i].formula)) {\n                        val = data[i].formula;\n                        type = 'formula';\n                    }\n                    else {\n                        val = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[i].value) ? '' : data[i].value;\n                        var option = {};\n                        format = data[i].format;\n                        isNumVal = (0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val);\n                        if (format && (0,_index__WEBPACK_IMPORTED_MODULE_3__.isCustomDateTime)(format, true, option)) {\n                            type = option.type;\n                            if (val && !isNumVal) {\n                                var dateEventArgs = { value: val, updatedVal: val, cell: data[i] };\n                                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.checkDateFormat, dateEventArgs);\n                                if (dateEventArgs.isDate || dateEventArgs.isTime) {\n                                    data[i].value = val = dateEventArgs.updatedVal;\n                                }\n                                else {\n                                    type = 'string';\n                                }\n                            }\n                            isDateStartsWithMonth = type === 'date' && format.toLowerCase().startsWith('mmm');\n                        }\n                        else {\n                            type = isNumVal ? 'number' : 'string';\n                        }\n                    }\n                }\n                else {\n                    val = '';\n                    type = 'string';\n                }\n                dataVal = '';\n                if (type === 'string') {\n                    isStartNum = false;\n                    if ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val[0])) {\n                        count = 0;\n                        do {\n                            count++;\n                        } while ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val[count]));\n                        if (val[count] === ' ') {\n                            isStartNum = true;\n                            type = 'number';\n                            dataVal = val.slice(count, val.length);\n                            val = Number(val.slice(0, count));\n                        }\n                    }\n                    val = val;\n                    if (!isStartNum && (0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val[val.length - 1])) {\n                        count = 1;\n                        do {\n                            count++;\n                        } while ((0,_index__WEBPACK_IMPORTED_MODULE_3__.isNumber)(val[val.length - count]));\n                        type = 'number';\n                        count -= 1;\n                        dataVal = val.slice(0, val.length - count);\n                        numValue = val.slice(val.length - count, val.length);\n                        val = numValue.match(/^0+/) ? numValue : Number(numValue);\n                        if (obj.dataVal && obj.dataVal !== dataVal && obj.dataVal === minusOperator(dataVal)) {\n                            dataVal = obj.dataVal;\n                        }\n                    }\n                }\n                if (i === 0) {\n                    obj = { val: [val], type: type, isStartWithMonth: isDateStartsWithMonth };\n                    if (dataVal) {\n                        obj.dataVal = dataVal;\n                        obj.start = isStartNum;\n                    }\n                }\n                else if (type === obj.type && (!obj.dataVal || minusOperator(obj.dataVal) === minusOperator(dataVal))) {\n                    obj.val.push(val);\n                }\n                else {\n                    patrn.push(obj);\n                    obj = { val: [val], type: type };\n                    if (dataVal) {\n                        obj.dataVal = dataVal;\n                        obj.start = isStartNum;\n                    }\n                }\n                i++;\n            }\n            patrn.push(obj);\n            return patrn;\n        }\n        else {\n            return [{ val: null, type: null }];\n        }\n    };\n    WorkbookAutoFill.prototype.getPredictionValue = function (args, isTime) {\n        var i = 0;\n        var sumx = 0;\n        var sumy = 0;\n        var sumxy = 0;\n        var sumxx = 0;\n        var a = 0;\n        var b = 0;\n        var n = args.length;\n        while (i < n) {\n            sumx = sumx + i;\n            sumy = sumy + Number(args[i]);\n            sumxy = sumxy + (i * Number(args[i]));\n            sumxx = sumxx + (i * i);\n            i++;\n        }\n        if (!isTime) {\n            a = this.round(((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx)), 5);\n            b = this.round(((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx)), 5);\n        }\n        else {\n            a = ((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx));\n            b = ((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx));\n        }\n        return { a: a, b: b };\n    };\n    WorkbookAutoFill.prototype.getPattern = function (range, options, sheetIdx) {\n        var j;\n        var idx;\n        var temp;\n        var regVal;\n        var diff;\n        var len;\n        var i = 0;\n        var pattern = [];\n        var patrns = this.getDataPattern(range, sheetIdx);\n        var plen = patrns.length;\n        var patrn;\n        if (patrns) {\n            while (i < plen) {\n                patrn = patrns[i];\n                switch (patrn.type) {\n                    case 'number':\n                    case 'date':\n                        idx = pattern.length;\n                        len = patrn.val.length;\n                        diff = options.isReverseFill ? -1 : len;\n                        if (len === 1) {\n                            var newVal = parseFloat(patrn.val[0]) + 1;\n                            if (typeof (patrn.val[0]) === 'string' && patrn.val[0].match(/^0+/)) {\n                                patrn.val.push(this.getNextFormattedValue(patrn.val[0], newVal));\n                            }\n                            else {\n                                patrn.val.push(newVal);\n                            }\n                        }\n                        regVal = this.getPredictionValue(patrn.dataVal ? patrn.val.slice(0, 2) : patrn.val);\n                        temp = { regVal: regVal, type: patrn.type, i: diff, isStartWithMonth: patrn.isStartWithMonth };\n                        if (patrn.dataVal) {\n                            temp.dataVal = patrn.dataVal;\n                            temp.val = patrn.val;\n                            temp.start = patrn.start;\n                        }\n                        pattern.push(temp);\n                        j = 1;\n                        while (j < len) {\n                            pattern.push(idx);\n                            j++;\n                        }\n                        break;\n                    case 'string':\n                        idx = pattern.length;\n                        temp = { val: patrn.val, type: patrn.type, i: 0 };\n                        pattern.push(temp);\n                        j = 1;\n                        len = patrn.val.length;\n                        while (j < len) {\n                            pattern.push(idx);\n                            j++;\n                        }\n                        break;\n                    case 'formula':\n                        len = patrn.val.length;\n                        patrn = this.getFormulaPattern(patrn.val, options);\n                        diff = options.isReverseFill ? -1 : len;\n                        if (patrn.isInPattern) {\n                            idx = pattern.length;\n                            temp = { val: patrn.val, type: 'formula', i: diff };\n                            pattern.push(temp);\n                            j = 1;\n                            while (j < len) {\n                                pattern.push(idx);\n                                j++;\n                            }\n                        }\n                        else {\n                            j = 0;\n                            diff = options.isReverseFill ? -1 : 1;\n                            while (j < len) {\n                                pattern.push({ val: patrn.val[j], type: 'formula', i: diff });\n                                j++;\n                            }\n                        }\n                        break;\n                    case 'time':\n                        idx = pattern.length;\n                        len = patrn.val.length;\n                        diff = options.isReverseFill ? -1 : len;\n                        if (len === 1) {\n                            var oldTimeVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.intToDate)(patrn.val[0]);\n                            var patrnVal = Number(patrn.val[0]);\n                            var isTimeOnly = patrnVal >= 0 && patrnVal < 1;\n                            var newTimeVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.dateToInt)(new Date(oldTimeVal.getTime() + 60 * 60000), true, isTimeOnly);\n                            patrn.val.push(newTimeVal);\n                        }\n                        regVal = this.getPredictionValue(patrn.val, true);\n                        temp = { regVal: regVal, type: patrn.type, i: diff };\n                        pattern.push(temp);\n                        j = 1;\n                        while (j < len) {\n                            pattern.push(idx);\n                            j++;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                i++;\n            }\n            return pattern;\n        }\n        else {\n            return [{ regVal: null }];\n        }\n    };\n    WorkbookAutoFill.prototype.getNextFormattedValue = function (value, numValue) {\n        var val = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization().formatNumber(Math.abs(numValue), { minimumIntegerDigits: value.length, useGrouping: false });\n        var numeArgs = (0,_common_internalization__WEBPACK_IMPORTED_MODULE_4__.checkIsNumberAndGetNumber)({ value: val }, this.parent.locale);\n        return numeArgs.isNumber ? numeArgs.value : val;\n    };\n    WorkbookAutoFill.prototype.isCellReference = function (text) {\n        return /^[a-z]{1,3}\\d{1,7}$/gi.test(text) ? 'relative' : (/^\\$[a-z]{1,3}\\$\\d{1,7}$/gi.test(text) ? 'absolute' : (/^((\\$[a-z]{1,3})\\d{1,7}|[a-z]{1,3}(\\$\\d{1,7}))$/gi.test(text) ? 'mixed' : false));\n    };\n    WorkbookAutoFill.prototype.round = function (value, round) {\n        return Number(Math.round(parseFloat(value + 'e' + round)) + 'e-' + round) || Number(value);\n    };\n    WorkbookAutoFill.prototype.getRangeData = function (options, isVFill) {\n        var arr = [];\n        var sheet = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(options.sheetIdx) ? this.parent.getActiveSheet() : (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this.parent, options.sheetIdx);\n        var minR = options.range[0];\n        var minC = options.range[1];\n        var maxR = options.range[2];\n        var maxC = options.range[3];\n        var minCol = minC;\n        var cell;\n        var column;\n        while (minR <= maxR) {\n            if ((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenRow)(sheet, minR)) {\n                minR++;\n                continue;\n            }\n            minC = minCol;\n            while (minC <= maxC) {\n                if ((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isHiddenCol)(sheet, minC)) {\n                    minC++;\n                    continue;\n                }\n                cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(minR, minC, sheet);\n                if (isVFill) {\n                    cell = Object.assign({}, (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(minR, minC, sheet));\n                    column = Object.assign({}, (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(sheet, minC));\n                    if (cell && !cell.validation) {\n                        if (column && column.validation) {\n                            cell.validation = Object.assign({}, (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getColumn)(sheet, minC).validation);\n                            var currIdx = [minR, minC, minR, minC];\n                            var prevIdx = [0, minC, 0, minC];\n                            var updateVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getUpdatedFormula)(currIdx, prevIdx, sheet, this.parent, { formula: column.validation.value1 });\n                            cell.validation.value1 = updateVal;\n                            if (cell.validation.value2 !== '') {\n                                updateVal = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getUpdatedFormula)(currIdx, prevIdx, sheet, this.parent, { formula: column.validation.value2 });\n                                cell.validation.value2 = updateVal;\n                            }\n                        }\n                    }\n                }\n                arr.push(cell);\n                minC++;\n            }\n            minR++;\n        }\n        return arr;\n    };\n    WorkbookAutoFill.prototype.getFormulaPattern = function (data, options) {\n        var j;\n        var temp;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var patrn;\n        var patrns = [];\n        var i = 0;\n        var len = data.length;\n        var cRfrType;\n        var eventArgs = {};\n        while (i < len) {\n            eventArgs.formula = data[i];\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.parseFormulaArgument, eventArgs);\n            patrns.push(eventArgs.formulaArr);\n            i++;\n        }\n        var isInPatrn = this.isInPattern(patrns, options.isVFill);\n        if (isInPatrn) {\n            patrn = patrns[0];\n            i = patrn.length;\n            while (i--) {\n                temp = patrn[i];\n                cRfrType = this.isCellReference(temp);\n                if (cRfrType && (cRfrType !== 'absolute')) {\n                    patrn[i] = this.getCellRefPrediction(temp, options, null, cRfrType);\n                }\n            }\n            return { isInPattern: isInPatrn, val: patrn };\n        }\n        else {\n            i = 0;\n            while (i < len) {\n                patrn = patrns[i];\n                j = patrn.length;\n                while (j--) {\n                    temp = patrn[j];\n                    cRfrType = this.isCellReference(temp.trim());\n                    if (cRfrType && (cRfrType !== 'absolute')) {\n                        patrns[i][j] = this.getCellRefPrediction(temp, options, len, cRfrType);\n                    }\n                }\n                i++;\n            }\n            return { isInPattern: isInPatrn, val: patrns };\n        }\n    };\n    WorkbookAutoFill.prototype.generateColCount = function (text) {\n        var colCount = 0;\n        for (var i = 0; i < text.length; i++) {\n            var charValue = text.charCodeAt(i) - 64;\n            colCount = colCount * 26 + charValue;\n        }\n        return colCount;\n    };\n    WorkbookAutoFill.prototype.getCellRefPrediction = function (text, options, length, rfrType) {\n        text = text.toUpperCase();\n        var eStr = '';\n        var aRegx = new RegExp('[a-z$]', 'gi');\n        var nRegx = new RegExp('[0-9$]', 'g');\n        var str = options.isVFill ? text.replace(nRegx, eStr) : text.replace(aRegx, eStr);\n        var temp = options.isVFill ? Number(text.replace(aRegx, eStr)) :\n            this.generateColCount(text.replace(nRegx, eStr).trim());\n        var dollarPosition = null;\n        var arr = [temp];\n        var isColAbslt = text[0] === '$';\n        if (!isColAbslt && text.includes('$') && text.trim()[0] === '$') {\n            for (var idx = 1; idx < text.length; idx++) {\n                if (text[idx] === '$') {\n                    dollarPosition = idx;\n                    isColAbslt = true;\n                    break;\n                }\n            }\n        }\n        if (length && length !== 1) {\n            arr.push(temp + length);\n        }\n        else {\n            arr.push(temp + 1);\n        }\n        temp = this.getPredictionValue(arr);\n        if (rfrType && (rfrType === 'mixed')) {\n            if (isColAbslt === options.isVFill) {\n                if (dollarPosition) {\n                    str = str.substring(0, dollarPosition) + '$' + str.substring(dollarPosition);\n                }\n                else {\n                    str = '$' + str;\n                }\n            }\n            else {\n                temp['b'] = 0;\n            }\n        }\n        temp['c'] = str;\n        return temp;\n    };\n    WorkbookAutoFill.prototype.isInPattern = function (patrn, isVFill) {\n        var oldPatrn;\n        var olen;\n        var newPatrn;\n        var nlen;\n        var oldStr;\n        var newStr;\n        var oldInt;\n        var newInt;\n        var eStr = '';\n        var i = 0;\n        var j = 1;\n        var plen = patrn.length;\n        var nregx = new RegExp('[0-9$]', 'g');\n        var aregx = new RegExp('[a-z$]', 'gi');\n        if (plen === 1) {\n            return false;\n        }\n        while (j < plen) {\n            oldPatrn = patrn[i];\n            newPatrn = patrn[j];\n            olen = oldPatrn.length;\n            nlen = newPatrn.length;\n            if (olen !== nlen) {\n                return false;\n            }\n            else {\n                while (olen--) {\n                    oldStr = oldPatrn[olen];\n                    newStr = newPatrn[olen];\n                    if (this.isCellReference(oldStr) === this.isCellReference(newStr)) {\n                        if (isVFill) {\n                            oldInt = Number(oldStr.replace(aregx, eStr));\n                            newInt = Number(newStr.replace(aregx, eStr));\n                        }\n                        else {\n                            oldInt = this.generateColCount(oldStr.replace(nregx, eStr));\n                            newInt = this.generateColCount(newStr.replace(nregx, eStr));\n                        }\n                        if (oldInt !== newInt - 1) {\n                            return false;\n                        }\n                    }\n                    else if (oldStr !== newStr) {\n                        return false;\n                    }\n                }\n            }\n            i++;\n            j++;\n        }\n        return true;\n    };\n    WorkbookAutoFill.prototype.ensurePattern = function (patterns) {\n        var patrn;\n        var idx = -1;\n        var i = patterns.length;\n        while (i--) {\n            patrn = patterns[i];\n            if (typeof (patrn) === 'object') {\n                idx = i;\n                if (patrn.type === 'string') {\n                    patrn.val = patrn.val.reverse();\n                }\n            }\n            else {\n                patterns[i] = idx;\n            }\n        }\n        return patterns;\n    };\n    WorkbookAutoFill.prototype.getSelectedRange = function (sheet, startcell, endcell) {\n        var i;\n        var k;\n        var l;\n        var arr = [];\n        var range = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getSwapRange)([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);\n        i = range[0];\n        var j = range[2];\n        while (i <= j) {\n            if ((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isFilterHidden)(sheet, i)) {\n                i++;\n                continue;\n            }\n            k = range[1];\n            l = range[3];\n            while (k <= l) {\n                arr.push({ rowIndex: i, colIndex: k });\n                k++;\n            }\n            i++;\n        }\n        return arr;\n    };\n    WorkbookAutoFill.prototype.getFillType = function (args) {\n        args.fillType = this.fillInfo.fillType;\n        args.disableItems = this.fillInfo.disableItems;\n        return args;\n    };\n    WorkbookAutoFill.prototype.addEventListener = function () {\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.setAutoFill, this.autoFill, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.getFillInfo, this.getFillType, this);\n    };\n    /**\n     * Destroy workbook AutoFill module.\n     *\n     * @returns {void} - destroy the workbook AutoFill module.\n     */\n    WorkbookAutoFill.prototype.destroy = function () {\n        this.removeEventListener();\n        this.parent = null;\n    };\n    WorkbookAutoFill.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.setAutoFill, this.autoFill);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.getFillInfo, this.getFillType);\n        }\n    };\n    /**\n     * Get the workbook AutoFill module name.\n     *\n     * @returns {string} - Return the string.\n     */\n    WorkbookAutoFill.prototype.getModuleName = function () {\n        return 'workbookautofill';\n    };\n    return WorkbookAutoFill;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/actions/auto-fill.js?");

/***/ })

}]);