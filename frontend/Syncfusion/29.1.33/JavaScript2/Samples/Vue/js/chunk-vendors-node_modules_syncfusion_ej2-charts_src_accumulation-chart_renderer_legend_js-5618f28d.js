"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_accumulation-chart_renderer_legend_js-5618f28d"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccumulationLegend: () => (/* binding */ AccumulationLegend)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _model_acc_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/acc-base */ \"./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/acc-base.js\");\n/* harmony import */ var _common_legend_legend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * AccumulationChart legend\n */\n\n\n\n\n\n\n\n/**\n * The `AccumulationLegend` module is used to render the `Legend` for the Accumulation chart.\n */\nvar AccumulationLegend = /** @class */ (function (_super) {\n    __extends(AccumulationLegend, _super);\n    /**\n     * Constructor for Accumulation Legend.\n     *\n     * @param {AccumulationChart} chart Get a chart as a parameter.\n     */\n    function AccumulationLegend(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.library = _this;\n        _this.titleRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Rect(0, chart.margin.top, 0, 0);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for legend module.\n     *\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd, this);\n        this.chart.on('click', this.click, this);\n    };\n    /**\n     * UnBinding events for legend module.\n     *\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('click', this.click);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd);\n    };\n    /**\n     * To handle mosue move for legend module.\n     *\n     * @param {MouseEvent} e - The mouse move event for legend module.\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.mouseMove = function (e) {\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n            if (this.chart.accumulationHighlightModule && this.chart.highlightMode !== 'None') {\n                if (!this.chart.legendSettings.toggleVisibility) {\n                    this.click(e);\n                }\n                var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n                    this.legendID + '_shape_', this.legendID + '_g_'];\n                var targetId = e.target.id;\n                var index = void 0;\n                for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n                    var id = legendItemsId_1[_i];\n                    if (targetId.indexOf(id) > -1) {\n                        index = parseInt(targetId.split(id)[1], 10);\n                        this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, index, e.target, e.type);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To handle mosue end for legend module.\n     *\n     * @param {MouseEvent} e - The mouse end event for legend module.\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.mouseEnd = function (e) {\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\n            this.move(e);\n        }\n    };\n    /**\n     * Get the legend options.\n     *\n     * @param {AccumulationChart} chart - The accumulation chart control.\n     * @param {AccumulationSeries[]} series - The array of series in the accumulation chart.\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\n        this.legendCollections = [];\n        this.isRtlEnable = chart.enableRtl;\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n        for (var i = 0; i < 1; i++) {\n            var seriesType = series[i].type;\n            if (seriesType === 'Pie' || seriesType === 'Doughnut') {\n                seriesType = (series[i].innerRadius !== '0' && series[i].innerRadius !== '0%') ?\n                    'Doughnut' : 'Pie';\n            }\n            for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n                var point = _a[_i];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(point.x) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(point.y)) {\n                    this.legendCollections.push(new _common_legend_legend__WEBPACK_IMPORTED_MODULE_2__.LegendOptions((chart.useGroupingSeparator && typeof point.x === 'number') ? chart.intl.formatNumber(point.x, { useGrouping: true })\n                        : point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, point.legendImageUrl, null, null, point.index, series[i].index, null, point.x.toString()));\n                }\n            }\n            if (this.isReverse) {\n                this.legendCollections.reverse();\n            }\n        }\n    };\n    /**\n     * To find legend bounds for accumulation chart.\n     *\n     * @param {Size} availableSize - The available size for the legend.\n     * @param {Rect} legendBounds - The boundary of the legend.\n     * @param {LegendSettingsModel} legend - The legend settings.\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n        this.calculateLegendTitle(legend, legendBounds);\n        this.isTitle = legend.title ? true : false;\n        var extraWidth = 0;\n        var extraHeight = 0;\n        var legendOption;\n        this.chartRowCount = 1;\n        this.rowHeights = [];\n        this.columnHeights = [];\n        this.pageHeights = [];\n        var padding = legend.padding;\n        var titlePosition = legend.titlePosition;\n        var titlePlusArrowSpace = 0;\n        var arrowWidth = this.arrowWidth;\n        var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n        if (!this.isVertical) {\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\n        }\n        else {\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\n        }\n        legendBounds.width += extraWidth;\n        legendBounds.height += extraHeight;\n        var shapePadding = legend.shapePadding;\n        var maximumWidth = legend.maximumLabelWidth ? legend.maximumLabelWidth : 0;\n        var shapeWidth = legend.shapeWidth;\n        var rowWidth = 0;\n        var columnCount = 0;\n        var rowCount = 0;\n        var columnWidth = [];\n        var pageWidth = [];\n        var pageRowWidth = 0;\n        var previousRowCount = 0;\n        var columnHeight = 0;\n        var legendWidth = 0;\n        var titleHeight = 0;\n        this.maxItemHeight = Math.max((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n        var legendEventArgs;\n        var render = false;\n        var maxColumn = legend.layout === 'Auto' && legend.maximumColumns > 0;\n        if (legend.fixedWidth) {\n            for (var i = 0; i < this.legendCollections.length; i++) {\n                var textWidth = shapeWidth + shapePadding + (!this.isVertical ? (i === 0) ? padding : this.itemPadding :\n                    padding) + (legend.maximumLabelWidth ? legend.maximumLabelWidth :\n                    (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(this.legendCollections[i].text, legend.textStyle, this.chart.themeStyle.legendLabelFont).width);\n                this.maxColumnWidth = this.maxColumnWidth > textWidth ? this.maxColumnWidth : textWidth;\n            }\n        }\n        for (var i = 0; i < this.legendCollections.length; i++) {\n            legendOption = this.legendCollections[i];\n            legendEventArgs = { fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\n                name: 'legendRender', cancel: false };\n            this.chart.trigger('legendRender', legendEventArgs);\n            legendOption.render = !legendEventArgs.cancel;\n            legendOption.text = legendOption.originalText = ((legendEventArgs.text.indexOf('&') > -1) ?\n                this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text);\n            legendOption.fill = legendEventArgs.fill;\n            legendOption.shape = legendEventArgs.shape;\n            legendOption.textSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n            if (legendOption.render && legendOption.text !== '') {\n                render = true;\n                legendWidth = legend.fixedWidth ? this.maxColumnWidth : shapeWidth + shapePadding +\n                    (legend.maximumLabelWidth ? legend.maximumLabelWidth : legendOption.textSize.width)\n                    + (!this.isVertical || legend.layout === 'Horizontal' ? (i === 0 || (columnCount === 1 && rowCount > 0 && legend.layout === 'Horizontal')) ? padding : this.itemPadding : padding);\n                this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n                if (this.isVertical && legend.layout === 'Auto' && !maxColumn) {\n                    columnHeight += Math.max(legendOption.textSize.height, legend.shapeHeight) + ((i === 0) ? padding : this.itemPadding);\n                    if (columnHeight + this.itemPadding + (arrowHeight / this.pageButtonSize) > (legendBounds.height)) {\n                        //columnHeight = Math.max(columnHeight, (rowCount * (this.maxItemHeight + padding)) + padding + arrowHeight);\n                        rowWidth = rowWidth + maximumWidth;\n                        pageRowWidth = this.getPageWidth(pageWidth);\n                        this.totalPages = Math.max(rowCount, this.totalPages || 1);\n                        if ((rowWidth - pageRowWidth + legendWidth) > legendBounds.width) {\n                            pageWidth.push(rowWidth - pageRowWidth);\n                            rowCount = this.rowHeights.length;\n                            previousRowCount = rowCount;\n                        }\n                        else {\n                            rowCount = previousRowCount;\n                        }\n                        columnWidth.push(maximumWidth);\n                        maximumWidth = 0;\n                        columnHeight = Math.max(legendOption.textSize.height, legend.shapeHeight) + padding;\n                        columnCount++;\n                    }\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                        this.columnHeights[columnCount] : 0) + Math.max(legendOption.textSize.height, legend.shapeHeight)\n                        + ((i === 0) ? padding : this.itemPadding);\n                    maximumWidth = Math.max(legendWidth, maximumWidth);\n                    this.rowHeights[rowCount] = Math.max((this.rowHeights[rowCount] ?\n                        this.rowHeights[rowCount] : 0), Math.max(legendOption.textSize.height, legend.shapeHeight));\n                    rowCount++;\n                }\n                else {\n                    if (!legend.enablePages) { // For new legend navigation support\n                        titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n                        titlePlusArrowSpace += arrowWidth;\n                    }\n                    rowWidth = rowWidth + legendWidth;\n                    if (maxColumn ? legend.maximumColumns === columnCount : legendBounds.width < (padding + rowWidth + titlePlusArrowSpace) || (this.legend.layout === 'Vertical' && columnCount === 1)) {\n                        maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - legendWidth));\n                        if (rowCount === 0 && (legendWidth !== rowWidth)) {\n                            rowCount = 1;\n                        }\n                        rowWidth = legendWidth;\n                        rowCount++;\n                        columnCount = 0;\n                        //  columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding + this.legendTitleSize.height;\n                    }\n                    var len = rowCount ? (rowCount - 1) : rowCount;\n                    this.rowHeights[len] = Math.max((this.rowHeights[len] ? this.rowHeights[len] : 0), Math.max(legendOption.textSize.height, legend.shapeHeight));\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                        this.columnHeights[columnCount] : 0) +\n                        Math.max(legendOption.textSize.height, legend.shapeHeight) + padding;\n                    if (maxColumn && this.columnHeights[columnCount] > legendBounds.height) {\n                        this.columnHeights[columnCount] -= Math.max(legendOption.textSize.height, legend.shapeHeight) + padding;\n                    }\n                    columnCount++;\n                }\n            }\n        }\n        titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n        if (this.isVertical && legend.layout === 'Auto' && !maxColumn) {\n            rowWidth = rowWidth + maximumWidth;\n            this.isPaging = legendBounds.width < (rowWidth + padding);\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n            columnHeight = Math.max(columnHeight, ((this.totalPages || 1) * (this.maxItemHeight + padding)) + padding + arrowHeight);\n            this.isPaging = this.isPaging && (this.totalPages > 1);\n            columnWidth.push(maximumWidth);\n        }\n        else {\n            this.totalPages = this.totalRowCount = rowCount;\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n            this.isPaging = (legendBounds.height < columnHeight || (legend.layout === 'Horizontal' && this.rowHeights.length > 1)) && !maxColumn;\n            columnHeight = !legend.enablePages && this.isPaging && legend.layout !== 'Vertical' ? (this.maxItemHeight + padding) + padding + titleHeight : columnHeight;\n            columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleHeight);\n            if (legend.layout === 'Horizontal') {\n                columnHeight = (this.maxItemHeight) + (padding * 2) + titleHeight + this.pageButtonSize + legend.border.width;\n            }\n            if (!this.isPaging) { // For title left and right position\n                rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\n            }\n        }\n        this.maxColumns = 0; // initialization for max columns\n        var width;\n        if (maxColumn && this.maxColumnWidth && legend.fixedWidth) {\n            width = (this.maxColumnWidth * legend.maximumColumns) + padding;\n            this.isPaging = false;\n        }\n        else {\n            width = (this.isVertical && legend.layout === 'Auto' && !maxColumn) ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) :\n                Math.max(rowWidth + padding, maximumWidth);\n        }\n        if (render) { // if any legends not skipped in event check\n            this.setBounds(width, columnHeight, legend, legendBounds);\n        }\n        else {\n            this.setBounds(0, 0, legend, legendBounds);\n        }\n    };\n    AccumulationLegend.prototype.getPageWidth = function (pageWidth) {\n        var sum = 0;\n        for (var i = 0; i < pageWidth.length; i++) {\n            sum += pageWidth[i];\n        }\n        return sum;\n    };\n    /** @private */\n    AccumulationLegend.prototype.getLegendHeight = function (option, legend, bounds, rowWidth, legendHeight, padding) {\n        var legendWidth = option.textSize.width;\n        var textPadding = legend.shapePadding + (padding * 2) + legend.shapeWidth;\n        switch (legend.textWrap) {\n            case 'Wrap':\n            case 'AnyWhere':\n                if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > bounds.width) {\n                    option.textCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.textWrap)(option.text, (legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, (bounds.width - textPadding)) :\n                        (bounds.width - textPadding)), legend.textStyle, this.chart.enableRtl, legend.textWrap === 'AnyWhere', null, this.chart.themeStyle.legendLabelFont);\n                }\n                else {\n                    option.textCollection.push(option.text);\n                }\n                option.textSize.height = (legendHeight * option.textCollection.length);\n                break;\n        }\n    };\n    /**\n     * To find html entities value for legend.\n     *\n     * @param {string} legendText - The text of the legend item.\n     * @returns {string} - Converts the entities to normal string.\n     * @private\n     */\n    AccumulationLegend.prototype.convertHtmlEntities = function (legendText) {\n        var text = (legendText).replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n        text = (text).replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').\n            replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n        return text;\n    };\n    /**\n     * To find maximum column size for legend.\n     *\n     * @param {number[]} columns - Array containing the number of legend items in each column.\n     * @param {number} width - The total width available.\n     * @param {number} padding - The padding between legend items.\n     * @param {number} rowWidth - The width of each row of legend items.\n     * @returns {number} - Get a maximum columns.\n     */\n    AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n        var maxPageColumn = padding;\n        this.maxColumnWidth = Math.max.apply(null, columns);\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var column = columns_1[_i];\n            maxPageColumn += this.maxColumnWidth;\n            this.maxColumns++;\n            if (maxPageColumn + padding > width) {\n                maxPageColumn -= this.maxColumnWidth;\n                this.maxColumns--;\n                break;\n            }\n        }\n        this.isPaging = (maxPageColumn < rowWidth) && (this.totalPages > 1);\n        if (maxPageColumn === padding) {\n            maxPageColumn = width;\n        }\n        this.maxColumns = Math.max(1, this.maxColumns);\n        this.maxWidth = maxPageColumn;\n        var columnWidth = this.maxColumnWidth + padding;\n        var prevPage = 0;\n        var columnCount = this.columnHeights.length;\n        if (this.isPaging && this.isVertical) {\n            for (var i = 1; i < columnCount; i++) {\n                columnWidth += (this.maxColumnWidth + padding);\n                if (columnWidth > width) {\n                    this.pageHeights.push(((prevPage !== i - 1) ? Math.max.apply(null, this.columnHeights.slice(prevPage, i - 1)) :\n                        this.columnHeights[prevPage]));\n                    columnWidth = this.maxColumnWidth + padding;\n                    prevPage = i;\n                }\n            }\n            this.pageHeights.push(((prevPage !== columnCount - 1) ?\n                Math.max.apply(null, this.columnHeights.slice(prevPage, columnCount - 1)) : this.columnHeights[prevPage]));\n            this.totalPages = this.pageHeights.length;\n        }\n        return maxPageColumn;\n    };\n    /**\n     * To find available width from legend x position.\n     *\n     * @param {number} tx - The x-coordinate of the legend.\n     * @param {number} width - The total width available.\n     * @returns {number} - Get a available width.\n     */\n    AccumulationLegend.prototype.getAvailWidth = function (tx, width) {\n        if (this.isVertical && this.legend.layout === 'Auto' && !(this.legend.maximumColumns > 0)) {\n            width = this.maxWidth;\n        }\n        else if (!this.isVertical && this.legend.layout !== 'Vertical' && !(this.legend.maximumColumns > 0) && this.isPaging && !this.legend.enablePages) {\n            return width - tx - this.fivePixel;\n        }\n        return width - ((this.legend.padding * 2) + this.legend.shapeWidth + this.legend.shapePadding);\n    };\n    /**\n     * To find legend rendering locations from legend items.\n     *\n     * @param {LegendOptions} legendOption - The legend options.\n     * @param {ChartLocation} start - The starting location for legend rendering.\n     * @param {number} textPadding - The padding between legend text items.\n     * @param {LegendOptions} prevLegend - The previous legend options.\n     * @param {Rect} rect - The bounding of the legend.\n     * @param {number} count - The count of legend items.\n     * @param {number} firstLegend - The index of the first legend item.\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n        var padding = this.legend.padding;\n        var previousLocation = prevLegend.location.y + this.maxItemHeight / 4 + (prevLegend.textCollection.length > 0 ?\n            ((prevLegend.textCollection.length - 1) * this.maxItemHeight) : 0);\n        if (this.isVertical && this.legend.layout === 'Auto' && !(this.legend.maximumColumns > 0)) {\n            if (count === firstLegend || (previousLocation + Math.max(legendOption.textSize.height, this.legend.shapeHeight)\n                + padding > (rect.y + rect.height))) {\n                legendOption.location.x = prevLegend.location.x + ((count === firstLegend) ? 0 : (!this.isRtlEnable) ?\n                    this.maxColumnWidth : -this.maxColumnWidth);\n                legendOption.location.y = start.y;\n                var textStartLoc = (this.legend.shapeWidth / 2) + padding;\n                this.pageXCollections.push(legendOption.location.x + ((!this.isRtlEnable) ? -textStartLoc : textStartLoc));\n            }\n            else {\n                legendOption.location.x = prevLegend.location.x;\n                legendOption.location.y = prevLegend.location.y + Math.max(prevLegend.textSize.height, this.legend.shapeHeight)\n                    + this.itemPadding;\n            }\n        }\n        else {\n            var textWidth = this.legend.fixedWidth ? this.maxColumnWidth : textPadding + (this.legend.maximumLabelWidth ?\n                this.legend.maximumLabelWidth : prevLegend.textSize.width);\n            var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\n            if (this.legend.layout === 'Auto' && this.legend.maximumColumns > 0 ? count % this.legend.maximumColumns === 0 :\n                this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth :\n                    legendOption.textSize.width) + textPadding - this.itemPadding, rect, this.legend.shapeWidth / 2) || this.legend.layout === 'Vertical') {\n                if (count !== firstLegend) {\n                    this.chartRowCount++;\n                }\n                legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\n                    prevLegend.location.y + this.rowHeights[(this.chartRowCount - 2)] + padding;\n                legendOption.location.x = start.x;\n            }\n            else {\n                legendOption.location.y = prevLegend.location.y;\n                legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\n            }\n        }\n        var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n        availablewidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availablewidth) : availablewidth;\n        if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n            legendOption.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.textTrim)(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n        }\n    };\n    /**\n     * Check whether legend group within legend bounds or not.\n     *\n     * @param {number} previousBound - The previous bound value.\n     * @param {number} textWidth - The width of the legend text.\n     * @param {Rect} legendBounds - The bounding of the legend.\n     * @param {number} shapeWidth - The width of the legend shape.\n     * @returns {boolean} - A boolean indicating whether the legend group is within the legend bounds.\n     */\n    AccumulationLegend.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n        if (!this.isRtlEnable) {\n            return (previousBound + textWidth) > (legendBounds.x + legendBounds.width + shapeWidth);\n        }\n        else {\n            return (previousBound - textWidth) < (legendBounds.x - shapeWidth);\n        }\n    };\n    /**\n     * Finding the smart legend place according to positions.\n     *\n     * @param {Rect} labelBound - The bounding of the label.\n     * @param {Rect} legendBound - The bounding of the legend.\n     * @param {MarginModel} margin - The margin of the legend.\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n        var space;\n        switch (this.position) {\n            case 'Left':\n                space = ((labelBound.x - legendBound.width) - margin.left) / 2;\n                legendBound.x = (labelBound.x - legendBound.width) < margin.left ? legendBound.x :\n                    (labelBound.x - legendBound.width) - space;\n                break;\n            case 'Right':\n                space = ((this.chart.availableSize.width - margin.right) - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n                legendBound.x = (labelBound.x + labelBound.width + legendBound.width) > (this.chart.availableSize.width - margin.right) ?\n                    legendBound.x : (labelBound.x + labelBound.width + space);\n                break;\n            case 'Top':\n                this.getTitleRect(this.chart);\n                space = ((labelBound.y - legendBound.height) - (this.titleRect.y + this.titleRect.height)) / 2;\n                legendBound.y = (labelBound.y - legendBound.height) < margin.top ? legendBound.y :\n                    (labelBound.y - legendBound.height) - space;\n                break;\n            case 'Bottom':\n                space = ((this.chart.availableSize.height - margin.bottom) - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n                legendBound.y = labelBound.y + labelBound.height + legendBound.height > (this.chart.availableSize.height - margin.bottom) ?\n                    legendBound.y : (labelBound.y + labelBound.height) + space;\n                break;\n        }\n    };\n    /**\n     * To get title rect.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.getTitleRect = function (accumulation) {\n        if (!accumulation.title) {\n            return null;\n        }\n        var titleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.measureText)(accumulation.title, accumulation.titleStyle, this.chart.themeStyle.legendTitleFont);\n        this.titleRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\n    };\n    /**\n     * To get legend by index.\n     *\n     * @param {number} index - The index of the legend.\n     * @param {LegendOptions[]} legendCollections - The array of legend options.\n     * @returns {LegendOptions} - Return legend index.\n     */\n    AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\n        for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n            var legend = legendCollections_1[_i];\n            if (legend.pointIndex === index) {\n                return legend;\n            }\n        }\n        return null;\n    };\n    /**\n     * To show or hide the legend on clicking the legend.\n     *\n     * @param {Event} event - The click event.\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.click = function (event) {\n        var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ?\n            event.target.firstChild['id'] : event.target.id;\n        var chart = this.chart;\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n        // if ((<AccumulationChart>this.chart).accumulationSelectionModule) {\n        //     // const selectedDataIndexes: Indexes[] = <Indexes[]>extend([], (<AccumulationChart>this.chart)\n        //     //     .accumulationSelectionModule.selectedDataIndexes, null, true);\n        // }\n        this.chart.animateSeries = false;\n        for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n            var id = legendItemsId_2[_i];\n            if (targetId.indexOf(id) > -1) {\n                var pointIndex = parseInt(targetId.split(id)[1], 10);\n                if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n                    var currentSeries = this.chart.visibleSeries[0];\n                    var point = (0,_model_acc_base__WEBPACK_IMPORTED_MODULE_1__.pointByIndex)(pointIndex, currentSeries.points);\n                    var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n                    var legendClickArgs = {\n                        legendText: legendOption.text, legendShape: legendOption.shape,\n                        chart: chart.isBlazor ? {} : chart, series: currentSeries, point: point,\n                        name: _common_model_constants__WEBPACK_IMPORTED_MODULE_5__.legendClick, cancel: false\n                    };\n                    this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.legendClick, legendClickArgs);\n                    if (!legendClickArgs.cancel) {\n                        point.visible = !point.visible;\n                        legendOption.visible = point.visible;\n                        currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n                        chart.redraw = chart.enableAnimation;\n                        this.sliceVisibility(pointIndex, point.visible);\n                        chart.removeSvg();\n                        //To remove the blazor templates\n                        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.blazorTemplatesReset)(chart);\n                        this.chart.refreshPoints(currentSeries.points);\n                        this.chart.calculateBounds();\n                        var borderElement = document.getElementById(this.chart.element.id + 'PointHover_Border');\n                        if (borderElement) {\n                            this.chart.pieSeriesModule.removeBorder(borderElement, 0);\n                        }\n                        if (this.chart.accumulationTooltipModule) {\n                            this.chart.accumulationTooltipModule.removeTooltip(0);\n                        }\n                        this.chart.renderElements();\n                    }\n                }\n                else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\n                    this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\n                }\n                else if (this.chart.accumulationHighlightModule && !isNaN(pointIndex)) {\n                    this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, pointIndex, event.target, event.type);\n                }\n            }\n        }\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n            this.changePage(event, true);\n        }\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n            this.changePage(event, false);\n        }\n        chart.redraw = false;\n    };\n    /**\n     * To translate the point elements by index and position.\n     *\n     * @param {number} index - The index of the point element.\n     * @param {boolean} isVisible - A boolean value indicating whether the point is visible.\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\n        var sliceId = this.chart.element.id + '_Series_0_Point_';\n        if (this.chart.visibleSeries[0].dataLabel.visible) {\n            sliceId = this.chart.element.id + '_datalabel_Series_0_';\n            this.sliceAnimate((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.getElement)(sliceId + 'g_' + index), isVisible);\n        }\n    };\n    /**\n     * Slice animation.\n     *\n     * @param {Element} element - slice element.\n     * @param {boolean} isVisible - boolean value of slice.\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\n        if (!element) {\n            return null;\n        }\n        new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({}).animate(element, {\n            duration: 300,\n            delay: 0,\n            name: isVisible ? 'FadeIn' : 'FadeOut',\n            end: function (args) {\n                args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n            }\n        });\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Return module name.\n     * @private\n     */\n    AccumulationLegend.prototype.getModuleName = function () {\n        return 'AccumulationLegend';\n    };\n    /**\n     * To destroy the Legend.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n        this.removeEventListener();\n    };\n    return AccumulationLegend;\n}(_common_legend_legend__WEBPACK_IMPORTED_MODULE_2__.BaseLegend));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.js?");

/***/ })

}]);