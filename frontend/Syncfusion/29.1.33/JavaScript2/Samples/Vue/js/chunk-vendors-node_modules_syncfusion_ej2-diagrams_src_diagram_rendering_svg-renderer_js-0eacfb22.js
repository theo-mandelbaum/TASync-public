"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_rendering_svg-renderer_js-0eacfb22"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/svg-renderer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/svg-renderer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SvgRenderer: () => (/* binding */ SvgRenderer)\n/* harmony export */ });\n/* harmony import */ var _primitives_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../primitives/point */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _utility_path_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utility/path-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/path-util.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n/* harmony import */ var _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../rendering/canvas-renderer */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/canvas-renderer.js\");\n/* harmony import */ var _core_elements_native_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/elements/native-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js\");\n/* harmony import */ var _utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utility/diagram-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.js\");\n\n\n\n\n\n\n\n\n\n/**\n * SVG Renderer\n */\n/** @private */\nvar SvgRenderer = /** @class */ (function () {\n    function SvgRenderer() {\n    }\n    /**\n     * Draw the shawdow  for the rectangle shape in diagram \\\n     *\n     *  @returns {void}  Draw the shawdow  for the rectangle shape in diagram .\\\n     *\n     *  @param { SVGElement} options - Provide the base attributes .\n     *  @param { RectAttributes} canvas - Provide the canvas values .\n     *  @param { string} collection - Provide the collection value.\n     *  @param { boolean} parentSvg - Provide the parent SVG values .\n     *  @private\n     */\n    SvgRenderer.prototype.renderShadow = function (options, canvas, collection, parentSvg) {\n        if (collection === void 0) { collection = null; }\n        var pointModel = { x: 0, y: 0 };\n        var point = _primitives_point__WEBPACK_IMPORTED_MODULE_0__.Point.transform(pointModel, options.shadow.angle, options.shadow.distance);\n        //const tX: number = options.x + point.x; const tY: number = options.y + point.y;\n        //let pivotX: number = tX + options.width * options.pivotX;\n        //let pivotY: number = tY + options.height * options.pivotY;\n        var type;\n        var shadowElement;\n        if (parentSvg) {\n            shadowElement = parentSvg.getElementById(canvas.id + '_shadow');\n        }\n        if (!shadowElement) {\n            type = collection ? 'path' : 'rect';\n            shadowElement = document.createElementNS('http://www.w3.org/2000/svg', type);\n            canvas.appendChild(shadowElement);\n        }\n        var attr = {\n            'id': canvas.id + '_shadow', 'fill': options.shadow.color, 'stroke': options.shadow.color,\n            'opacity': options.shadow.opacity.toString(),\n            'transform': 'rotate(' + options.angle + ',' + (options.x + options.width * options.pivotX) + ','\n                + (options.y + options.height * options.pivotY) + ')' +\n                'translate(' + (options.x + point.x) + ',' + (options.y + point.y) + ')'\n        };\n        if (parentSvg) {\n            var svgContainer = parentSvg.getElementById(canvas.id);\n            if (svgContainer) {\n                svgContainer.insertBefore(shadowElement, svgContainer.firstChild);\n            }\n        }\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(shadowElement, attr);\n        if (!collection) {\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(shadowElement, { 'width': options.width, 'height': options.height });\n        }\n        else if (collection) {\n            this.renderPath(shadowElement, options, collection);\n        }\n    };\n    /**\n     * Return the dashed array values \\\n     *\n     *  @returns {number[]}  Return the dashed array values .\\\n     *  @param { SVGElement} dashArray - Return the dashed array values .\n     *  @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SvgRenderer.prototype.parseDashArray = function (dashArray) {\n        var dashes = [];\n        return dashes;\n    };\n    /**\n     * Draw the Rectangle for the diagram \\\n     *\n     *  @returns {void}  Draw the Rectangle for the diagram .\\\n     *\n     *  @param { SVGElement} svg - Provide the SVG .\n     *  @param { RectAttributes} options - Provide the Rect attributes .\n     *  @param { string} diagramId - Provide the diagram id .\n     *  @param { boolean} onlyRect - Provide the boolean attribute for the shawdow rendering  .\n     *  @param { boolean} isSelector - Provide the selector possobilities .\n     *  @param { SVGSVGElement} parentSvg - Provide the parent svg element .\n     *  @param { Object} ariaLabel - Provide the Arial label attributes .\n     *  @param { boolean} isCircularHandle - Provide the boolean attribute for the circular handle .\n     *  @param { number} enableSelector - Provide the selector possobilities .\n     *  @private\n     */\n    SvgRenderer.prototype.drawRectangle = function (svg, options, diagramId, onlyRect, isSelector, parentSvg, ariaLabel, isCircularHandle, enableSelector) {\n        if (options.shadow && !onlyRect) {\n            this.renderShadow(options, svg, undefined, parentSvg);\n        }\n        var id;\n        if (options.id === svg.id) {\n            id = options.id + '_container';\n        }\n        else {\n            id = options.id;\n        }\n        var rect;\n        if (parentSvg) {\n            rect = parentSvg.getElementById(id);\n        }\n        if (!rect || isSelector) {\n            rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            svg.appendChild(rect);\n        }\n        var shadowElement;\n        if (parentSvg && !options.shadow) {\n            shadowElement = parentSvg.getElementById(options.id + '_groupElement_shadow');\n            if (shadowElement) {\n                shadowElement.parentNode.removeChild(shadowElement);\n            }\n        }\n        if (parentSvg) {\n            shadowElement = parentSvg.getElementById(options.id + '_groupElement_shadow');\n            if (shadowElement) {\n                shadowElement.style.visibility = options.visible ? 'visible' : 'hidden';\n            }\n        }\n        var attr;\n        // EJ2-65895 - Added below code to calculate the transform to render the circular handle\n        if (isCircularHandle) {\n            attr = {\n                'id': id, 'x': options.x.toString(), 'y': options.y.toString(), 'width': options.width.toString(),\n                'height': options.height.toString(), 'visibility': options.visible ? 'visible' : 'hidden',\n                'transform': 'rotate(' + options.angle + ','\n                    + (options.x + options.width / 2) + ',' + (options.y + options.height / 2) + ')',\n                'rx': options.cornerRadius || 0, 'ry': options.cornerRadius || 0, 'opacity': options.opacity\n            };\n        }\n        else {\n            attr = {\n                'id': id, 'x': options.x.toString(), 'y': options.y.toString(), 'width': options.width.toString(),\n                'height': options.height.toString(), 'visibility': options.visible ? 'visible' : 'hidden',\n                'transform': 'rotate(' + options.angle + ','\n                    + (options.x + options.width * options.pivotX) + ',' + (options.y + options.height * options.pivotY) + ')',\n                'rx': options.cornerRadius || 0, 'ry': options.cornerRadius || 0, 'opacity': options.opacity\n            };\n        }\n        if (ariaLabel) {\n            // BLAZ-24062: Adding 'aria-label' without role attribute it causes violation in accessibility test\n            attr['role'] = 'img';\n            attr['aria-label'] = ariaLabel;\n        }\n        var classval = options.class || '';\n        if (!enableSelector) {\n            if (classval.includes('e-diagram-resize-handle') || classval.includes('e-diagram-endpoint-handle') || classval.includes('e-diagram-bezier-control-handle')) {\n                classval += ' e-disabled';\n            }\n        }\n        if (options.class) {\n            attr['class'] = classval;\n        }\n        var poiterEvents = 'pointer-events';\n        if (!ariaLabel) {\n            attr[\"\" + poiterEvents] = 'none';\n        }\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(rect, attr);\n        this.setSvgStyle(rect, options, diagramId);\n    };\n    /**\n     * Update the diagram selection region \\\n     *\n     *  @returns {void}  Update the diagram selection region .\\\n     *\n     *  @param { SVGElement} gElement - Provide the element type.\n     *  @param { RectAttributes} options - Provide the Rect attributes .\n     *  @private\n     */\n    SvgRenderer.prototype.updateSelectionRegion = function (gElement, options) {\n        var rect;\n        rect = gElement.parentNode.getElementById(options.id);\n        var attr = {\n            'id': options.id, 'x': options.x.toString(), 'y': options.y.toString(), 'width': options.width.toString(),\n            'height': options.height.toString(), 'transform': 'rotate(' + options.angle + ','\n                + (options.x + options.width * options.pivotX) + ',' + (options.y + options.height * options.pivotY) + ')',\n            class: 'e-diagram-selected-region'\n        };\n        if (!rect) {\n            rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            gElement.appendChild(rect);\n        }\n        this.setSvgStyle(rect, options);\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(rect, attr);\n    };\n    /**\n     * Create the g element for the diagram \\\n     *\n     *  @returns {SVGGElement}   Create the g element for the diagram .\\\n     *\n     *  @param { SVGElement} elementType - Provide the element type.\n     *  @param { Object} attribute - Provide the attributes for the g element.\n     *  @private\n     */\n    SvgRenderer.prototype.createGElement = function (elementType, attribute) {\n        var gElement = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.createSvgElement)(elementType, attribute);\n        return gElement;\n    };\n    /**\n     * Draw the line for the diagram\\\n     *\n     *  @returns {void}  Draw the line for the diagram .\\\n     *\n     *  @param { SVGElement} gElement - Provide the g element .\n     *  @param { LineAttributes} options - Provide the line element attributes .\n     *  @private\n     */\n    SvgRenderer.prototype.drawLine = function (gElement, options) {\n        var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        this.setSvgStyle(line, options);\n        var pivotX = options.x + options.width * options.pivotX;\n        var pivotY = options.y + options.height * options.pivotY;\n        //const kk: string = '';\n        var attr = {\n            'id': options.id,\n            'x1': options.startPoint.x + options.x,\n            'y1': options.startPoint.y + options.y,\n            'x2': options.endPoint.x + options.x,\n            'y2': options.endPoint.y + options.y,\n            'stroke': options.stroke,\n            'stroke-width': options.strokeWidth.toString(), 'opacity': options.opacity.toString(),\n            'transform': 'rotate(' + options.angle + ' ' + pivotX + ' ' + pivotY + ')',\n            'visibility': options.visible ? 'visible' : 'hidden'\n        };\n        if (options.class) {\n            attr['class'] = options.class;\n        }\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(line, attr);\n        gElement.appendChild(line);\n    };\n    /**\n     * Draw the circle for the diagram\\\n     *\n     *  @returns {void}  Draw the circle for the diagram .\\\n     *\n     *  @param { SVGElement} gElement - Provide the g element .\n     *  @param { CircleAttributes} options - Provide the circle element attributes .\n     *  @param {string} enableSelector - Provide the selector constraints string .\n     *  @param {Object} ariaLabel - Provide arial label value .\n     *  @private\n     */\n    SvgRenderer.prototype.drawCircle = function (gElement, options, enableSelector, ariaLabel) {\n        var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        this.setSvgStyle(circle, options);\n        var classval = options.class || '';\n        if (!enableSelector) {\n            classval += ' e-disabled';\n        }\n        var attr = {\n            'id': options.id,\n            'cx': options.centerX,\n            'cy': options.centerY,\n            'r': options.radius,\n            'visibility': options.visible ? 'visible' : 'hidden',\n            'class': classval\n        };\n        if (ariaLabel) {\n            // BLAZ-24062: Adding 'aria-label' without role attribute it causes violation in accessibility test\n            attr['role'] = 'img';\n            attr['aria-label'] = ariaLabel;\n        }\n        circle.style.display = options.visible ? 'block' : 'none';\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(circle, attr);\n        gElement.appendChild(circle);\n    };\n    /**\n     * Draw the path element for the diagram\\\n     *\n     *  @returns {void}  Draw the path element for the diagram .\\\n     *\n     *  @param { SVGElement} svg - Provide the SVG element .\n     *  @param { PathAttributes} options - Provide the path element attributes .\n     *  @param {string} diagramId - Provide the diagram id .\n     *  @param {boolean} isSelector - Provide selector boolean value .\n     *  @param {SVGSVGElement} parentSvg - Provide the parent SVG element .\n     *  @param {Object} ariaLabel - Provide arial label value .\n     *  @param {number} scale - Provide the scale value .\n     *  @private\n     */\n    SvgRenderer.prototype.drawPath = function (svg, options, diagramId, isSelector, parentSvg, ariaLabel, scale) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var x = Math.floor((Math.random() * 10) + 1);\n        //const id: string = svg.id + '_shape' + x.toString();\n        var collection = [];\n        collection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_2__.processPathData)(options.data);\n        collection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_2__.pathSegmentCollection)(collection);\n        if (options.shadow) {\n            this.renderShadow(options, svg, collection, parentSvg);\n        }\n        var shadowElement;\n        if (parentSvg && !options.shadow) {\n            shadowElement = parentSvg.getElementById(options.id + '_groupElement_shadow');\n            if (shadowElement) {\n                shadowElement.parentNode.removeChild(shadowElement);\n            }\n        }\n        if (parentSvg) {\n            shadowElement = parentSvg.getElementById(options.id + '_groupElement_shadow');\n            if (shadowElement) {\n                shadowElement.style.visibility = options.visible ? 'visible' : 'hidden';\n            }\n        }\n        var path;\n        if (parentSvg) {\n            path = parentSvg.getElementById(options.id);\n        }\n        if (!path || isSelector) {\n            path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            // Check if the parent of the SVG element has the ID 'diagram_nativeLayer'\n            if (svg.parentElement && svg.parentElement.id === 'diagram_nativeLayer') {\n                // Create a new 'g' element with the ID based on path.id + '_groupElement'\n                var groupElement = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                groupElement.id = options.id + \"_groupElement\";\n                // Append the 'g' element as a child of the SVG element\n                svg.appendChild(groupElement);\n                // Append the path as a child of the newly created 'g' element\n                groupElement.appendChild(path);\n            }\n            else {\n                // If the parent is not 'diagram_nativeLayer', append the path directly to the SVG\n                svg.appendChild(path);\n            }\n        }\n        this.renderPath(path, options, collection);\n        var attr = {};\n        if (scale) {\n            attr = {\n                'id': options.id, 'transform': 'rotate(' + options.angle + ',' + (options.x + options.width * options.pivotX) + ','\n                    + (options.y + options.height * options.pivotY) + ')' + 'translate(' + (options.x) + ',' + (options.y) + '),scale(' + scale + ')',\n                'visibility': options.visible ? 'visible' : 'hidden', 'opacity': options.opacity\n            };\n        }\n        else {\n            attr = {\n                'id': options.id, 'transform': 'rotate(' + options.angle + ',' + (options.x + options.width * options.pivotX) + ','\n                    + (options.y + options.height * options.pivotY) + ')' + 'translate(' + (options.x) + ',' + (options.y) + ')',\n                'visibility': options.visible ? 'visible' : 'hidden', 'opacity': options.opacity\n            };\n        }\n        if (ariaLabel) {\n            // BLAZ-24062: Adding 'aria-label' without role attribute it causes violation in accessibility test\n            attr['role'] = 'img';\n            attr['aria-label'] = ariaLabel;\n        }\n        if (options.class) {\n            attr['class'] = options.class;\n        }\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(path, attr);\n        this.setSvgStyle(path, options, diagramId);\n    };\n    /**\n     * Draw the path element for the diagram\\\n     *\n     *  @returns {void}  Draw the path element for the diagram .\\\n     *\n     *  @param { SVGElement} svg - Provide the SVG element .\n     *  @param {PathAttributes} options - Provide the path element attributes .\n     *  @param {Object[]} collection - Provide the parent SVG element .\n     *  @private\n     */\n    SvgRenderer.prototype.renderPath = function (svg, options, collection) {\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        var x;\n        var y;\n        var length;\n        var i;\n        var segments = collection;\n        var d = '';\n        for (x = 0, y = 0, i = 0, length = segments.length; i < length; ++i) {\n            var obj = segments[parseInt(i.toString(), 10)];\n            var segment = obj;\n            var char = segment.command;\n            if ('x1' in segment) {\n                x1 = segment.x1;\n            }\n            if ('x2' in segment) {\n                x2 = segment.x2;\n            }\n            if ('y1' in segment) {\n                y1 = segment.y1;\n            }\n            if ('y2' in segment) {\n                y2 = segment.y2;\n            }\n            if ('x' in segment) {\n                x = segment.x;\n            }\n            if ('y' in segment) {\n                y = segment.y;\n            }\n            switch (char) {\n                case 'M':\n                    d = d + 'M' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'L':\n                    d = d + 'L' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'C':\n                    d = d + 'C' + x1.toString() + ',' + y1.toString() + ',' + x2.toString() + ',' + y2.toString() + ',';\n                    d += x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'Q':\n                    d = d + 'Q' + x1.toString() + ',' + y1.toString() + ',' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'A':\n                    d = d + 'A' + segment.r1.toString() + ',' + segment.r2.toString() + ',' + segment.angle.toString() + ',';\n                    d += segment.largeArc.toString() + ',' + segment.sweep + ',' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'Z':\n                case 'z':\n                    d = d + 'Z' + ' ';\n                    break;\n            }\n        }\n        svg.setAttribute('d', d);\n    };\n    SvgRenderer.prototype.setSvgFontStyle = function (text, options) {\n        text.style.fontStyle = options.italic ? 'italic' : 'normal';\n        text.style.fontWeight = options.bold ? 'bold' : 'normal';\n        text.style.fontSize = options.fontSize.toString() + 'px';\n        text.style.fontFamily = options.fontFamily;\n    };\n    /**\n     * Draw the text element for the diagram\\\n     *\n     *  @returns {void}  Draw the text element for the diagram .\\\n     *\n     *  @param { SVGElement} canvas - Provide the SVG element .\n     *  @param {TextAttributes} options - Provide the text element attributes .\n     *  @param {SVGSVGElement} parentSvg - Provide the parent SVG element .\n     *  @param {Object} ariaLabel - Provide the label properties .\n     *  @param {string} diagramId - Provide the diagram id .\n     *  @param {number} scaleValue - Provide the scale value .\n     *  @param {any} renderer - Provide the renderer value .\n     *  @private\n     */\n    SvgRenderer.prototype.drawText = function (canvas, options, parentSvg, ariaLabel, diagramId, scaleValue, renderer) {\n        if (options.content !== undefined) {\n            var parentNode = renderer.groupElement;\n            var textNode = void 0;\n            var childNodes = void 0;\n            var wrapBounds = void 0;\n            var position = void 0;\n            var child = void 0;\n            var tspanElement = void 0;\n            var offsetX = 0;\n            var offsetY = 0;\n            var i = 0;\n            var text = void 0;\n            var nodeContent = void 0;\n            if (parentSvg) {\n                text = parentSvg.getElementById(options.id + '_text');\n            }\n            if (text) {\n                if (options.doWrap) {\n                    while (text.firstChild) {\n                        text.removeChild(text.firstChild);\n                    }\n                }\n            }\n            else {\n                options.doWrap = true;\n                text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                if (options.whiteSpace === 'pre-wrap') {\n                    text.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n                }\n                if (parentNode) {\n                    nodeContent = document.getElementById(parentNode.id + '_content_groupElement');\n                }\n                if (nodeContent && parentNode && parentNode.children && parentNode.children[0] instanceof _core_elements_native_element__WEBPACK_IMPORTED_MODULE_6__.DiagramNativeElement) {\n                    var textTag = this.createGElement('g', { id: ariaLabel + '_groupElement' });\n                    nodeContent.appendChild(textTag);\n                    textTag.appendChild(text);\n                }\n                else {\n                    canvas.appendChild(text);\n                }\n            }\n            var pivotX = options.x + options.width * options.pivotX;\n            var pivotY = options.y + options.height * options.pivotY;\n            var childNodesHeight = 0;\n            if (options.doWrap || options.textOverflow !== 'Wrap') {\n                //(EJ2-70658)- Node annotation disappear, while giving same id for annotation in two different diagrams\n                //Added the below code for removing the extra span element that added when we double click the text annotation node\n                while (text.firstChild) {\n                    text.removeChild(text.firstChild);\n                }\n                this.setSvgStyle(text, options, diagramId);\n                this.setSvgFontStyle(text, options);\n                textNode = document.createTextNode(options.content);\n                childNodes = options.childNodes;\n                wrapBounds = options.wrapBounds;\n                position = this.svgLabelAlign(options, wrapBounds, childNodes);\n                if (wrapBounds.width > options.width && options.textOverflow !== 'Wrap' && options.textWrapping === 'NoWrap') {\n                    childNodes[0].text = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.overFlow)(options.content, options);\n                }\n                for (i = 0; i < childNodes.length; i++) {\n                    tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n                    textNode = document.createTextNode(childNodes[parseInt(i.toString(), 10)].text);\n                    child = childNodes[parseInt(i.toString(), 10)];\n                    child.x = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setChildPosition)(child, childNodes, i, options);\n                    if (options.textAlign === 'justify' || options.textAlign === 'left') {\n                        offsetX = 0;\n                    }\n                    else {\n                        offsetX = position.x + child.x - wrapBounds.x;\n                    }\n                    offsetY = position.y + child.dy * (i) + ((options.fontSize) * 0.8);\n                    if ((options.textOverflow === 'Clip' || options.textOverflow === 'Ellipsis') &&\n                        (options.textWrapping === 'WrapWithOverflow' || options.textWrapping === 'Wrap') && parentNode) {\n                        var size = (options.isHorizontalLane) ? parentNode.actualSize.width : parentNode.actualSize.height;\n                        if (offsetY < size) {\n                            if (options.textOverflow === 'Ellipsis' && childNodes[i + 1]) {\n                                var temp = childNodes[i + 1];\n                                var y = position.y + temp.dy * (i + 1) + ((options.fontSize) * 0.8);\n                                if (y > size) {\n                                    child.text = child.text.slice(0, child.text.length - 3);\n                                    child.text = child.text.concat('...');\n                                    textNode.data = child.text;\n                                }\n                            }\n                            //EJ2-863489 - Node annotation textAlign \"Justify\" option is not working correctly\n                            this.alignText(text, tspanElement, child, textNode, offsetX, offsetY, i, options, childNodes);\n                            childNodesHeight += child.dy;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    else {\n                        //EJ2-863489 - Node annotation textAlign \"Justify\" option is not working correctly\n                        this.alignText(text, tspanElement, child, textNode, offsetX, offsetY, i, options, childNodes);\n                    }\n                }\n            }\n            if (childNodesHeight && options.isHorizontalLane) {\n                pivotX = options.parentOffsetX + options.pivotX;\n                pivotY = options.parentOffsetY + options.pivotY;\n                options.y = options.parentOffsetY - childNodesHeight * options.pivotY + 0.5;\n            }\n            if (options.textDecoration && options.textDecoration === 'LineThrough') {\n                options.textDecoration = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.wordBreakToString)(options.textDecoration);\n            }\n            var attr = {\n                'id': options.id + '_text', 'fill': options.color, 'visibility': options.visible ? 'visible' : 'hidden',\n                'text-decoration': options.textDecoration, 'transform': 'rotate(' + options.angle + ','\n                    + (pivotX) + ',' + (pivotY) + ')'\n                    + 'translate(' + (options.x) + ',' + (options.y) + ')', 'opacity': options.opacity\n            };\n            if (ariaLabel) {\n                // BLAZ-24062: Adding 'aria-label' without role attribute it causes violation in accessibility test\n                attr['role'] = 'img';\n                attr['aria-label'] = ariaLabel;\n            }\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(text, attr);\n        }\n    };\n    SvgRenderer.prototype.alignText = function (text, tspanElement, child, textNode, offsetX, offsetY, i, options, childNodes) {\n        //EJ2-863489 - Node annotation textAlign \"Justify\" option is not working correctly\n        if (options.textAlign !== 'justify') {\n            this.setText(text, tspanElement, child, textNode, offsetX, offsetY, options);\n        }\n        else {\n            if (i !== childNodes.length - 1) {\n                var textlength = options.width;\n                var adjustlen = 'spacing';\n                this.setText(text, tspanElement, child, textNode, offsetX, offsetY, options, textlength, adjustlen);\n            }\n            else {\n                this.setText(text, tspanElement, child, textNode, offsetX, offsetY, options);\n            }\n        }\n    };\n    SvgRenderer.prototype.setText = function (text, tspanElement, child, textNode, offsetX, offsetY, options, textlength, adjustlen) {\n        if (options.textAlign !== 'justify') {\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(tspanElement, { 'x': offsetX.toString(), 'y': offsetY.toString() });\n        }\n        else {\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(tspanElement, { 'x': offsetX.toString(), 'y': offsetY.toString(), 'textLength': textlength ? textlength : 0, 'lengthAdjust': adjustlen ? adjustlen : 'spacing' });\n        }\n        text.setAttribute('fill', child.text);\n        tspanElement.appendChild(textNode);\n        text.appendChild(tspanElement);\n    };\n    /**\n     * Draw the image element for the diagram\\\n     *\n     *  @returns {void} Draw the image element for the diagram .\n     *  @param { SVGElement | HTMLCanvasElement} canvas - Provide the SVG element .\n     *  @param {ImageAttributes} obj - Provide the image attributes .\n     *  @param {SVGSVGElement} parentSvg - Provide the parent SVG element .\n     *  @param {boolean} fromPalette - Provide the pointer event value .\n     *  @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SvgRenderer.prototype.drawImage = function (canvas, obj, parentSvg, fromPalette) {\n        ///const id: string = obj.id + '_image';\n        var image;\n        if (parentSvg) {\n            image = parentSvg.getElementById(obj.id + 'image');\n        }\n        if (!image) {\n            image = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n            canvas.appendChild(image);\n        }\n        var imageObj = new Image();\n        imageObj.src = obj.source;\n        var scale = obj.scale !== 'None' ? obj.scale : '';\n        //Removed isBlazor code\n        var imgAlign = obj.alignment;\n        var aspectRatio = imgAlign.charAt(0).toLowerCase() + imgAlign.slice(1);\n        if (scale !== 'Stretch') {\n            aspectRatio += ' ' + scale.charAt(0).toLowerCase() + scale.slice(1);\n        }\n        var attr = {\n            'id': obj.id + 'image', 'x': obj.x.toString(), 'y': obj.y.toString(), 'transform': 'rotate(' + obj.angle + ','\n                + (obj.x + obj.width * obj.pivotX) + ',' + (obj.y + obj.height * obj.pivotY) + ')',\n            'width': obj.width.toString(), 'visibility': obj.visible ? 'visible' : 'hidden',\n            'height': obj.height.toString(), 'preserveAspectRatio': aspectRatio,\n            //832073 - Opacity when set to Zero for image node is not working - opacity value of 1 is already set as default\n            'opacity': obj.opacity.toString()\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(image, attr);\n        image.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', imageObj.src.toString());\n    };\n    /**\n     * Draw the HTML element for the diagram\\\n     *\n     *  @returns {void} Draw the native element for the diagram.\n     *  @param {DiagramHtmlElement} element - Provide the element .\n     *  @param {HTMLElement} canvas - Provide the canvas element  .\n     *  @param {Transforms} transform - Provide the transform value .\n     *  @param {boolean} value - Provide the pointer event value .\n     *  @param {number} indexValue - Provide the index value .\n     *  @private\n     */\n    SvgRenderer.prototype.drawHTMLContent = function (element, canvas, transform, value, indexValue) {\n        var htmlElement;\n        var parentHtmlElement;\n        if (canvas) {\n            //869698- drag performance is slow when dealing with 1000 plus HTML shapes and Overview feature\n            htmlElement = canvas.querySelector('#' + element.id + '_html_element');\n        }\n        if (!htmlElement) {\n            parentHtmlElement = canvas.querySelector(('#' + element.id + '_html_element')) ||\n                canvas.querySelector(('#' + element.nodeId + '_html_element'));\n            if (!parentHtmlElement) {\n                var attr_1 = {\n                    'id': element.nodeId + '_html_element',\n                    'class': 'foreign-object'\n                };\n                parentHtmlElement = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.createHtmlElement)('div', attr_1);\n            }\n            var attr = {\n                'id': element.id + '_html_element',\n                'class': 'foreign-object'\n            };\n            htmlElement = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.createHtmlElement)('div', attr);\n            var diagram = document.getElementById(element.diagramId).ej2_instances[0];\n            var isOverviewLayer = false;\n            if (canvas.parentNode && canvas.parentNode.parentNode && canvas.parentNode.parentNode.parentNode && canvas.parentNode.parentNode.parentNode.classList.contains('e-overview')) {\n                isOverviewLayer = true;\n            }\n            if (isOverviewLayer) {\n                //893685: HTML node with node Template not shown in Overview in React.\n                if (diagram.isReact) {\n                    diagram.renderReactTemplates(function () {\n                        htmlElement.appendChild(element.template.cloneNode(true));\n                    });\n                }\n                else {\n                    htmlElement.appendChild(element.template.cloneNode(true));\n                }\n            }\n            else {\n                //Bug 852259: User handle template not working properly after saving and loading the diagram.\n                // After serialization the template will be in string format, so we need to convert it to element.\n                if (typeof element.template === 'string') {\n                    var temp = document.createElement('div');\n                    temp.innerHTML = element.template;\n                    element.template = temp;\n                    var handle = diagram.selectedItems.userHandles.filter(function (x) {\n                        return x.name === (element.id.split('_shape')[0]) && x.template !== '';\n                    });\n                    handle[0].template = element.template;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                // 883335-Exception Throws When Loading Data Without Defining Node Template at Application Level\n                if (element.isTemplate && element.template) {\n                    htmlElement.appendChild(element.template);\n                }\n                else if (element.template) {\n                    htmlElement.appendChild(element.template.cloneNode(true));\n                }\n            }\n            if (indexValue !== undefined && canvas.childNodes.length > indexValue) {\n                canvas.insertBefore(htmlElement, canvas.childNodes[parseInt(indexValue.toString(), 10)]);\n            }\n            parentHtmlElement.appendChild(htmlElement);\n            canvas.appendChild(parentHtmlElement);\n        }\n        var point = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_4__.cornersPointsBeforeRotation)(element).topLeft;\n        htmlElement.style.height = element.actualSize.height + 'px';\n        htmlElement.style.width = element.actualSize.width + 'px';\n        htmlElement.style.left = point.x + 'px';\n        htmlElement.style.top = point.y + 'px';\n        htmlElement.style.position = 'absolute';\n        htmlElement.style.transform = \"rotate(\" + (element.rotateAngle + element.parentTransform) + \"deg)\";\n        htmlElement.style.pointerEvents = value ? 'all' : 'none';\n        htmlElement.style.visibility = element.visible ? 'visible' : 'hidden';\n        htmlElement.style.opacity = element.style.opacity.toString();\n    };\n    /**\n     * Draw the native element for the diagram\\\n     *\n     *  @returns {void} Draw the native element for the diagram.\n     *  @param {DiagramNativeElement} element - Provide the node element .\n     *  @param {HTMLCanvasElement} canvas - Provide the SVG element  .\n     *  @param {number} height - Provide the height for the shape .\n     *  @param {number} width - Provide the width for the shape .\n     *  @param {SVGSVGElement} parentSvg - Provide the parent svg for  the shape .\n     *  @private\n     */\n    SvgRenderer.prototype.drawNativeContent = function (element, canvas, height, width, parentSvg) {\n        var nativeElement;\n        var clipPath;\n        if (parentSvg) {\n            nativeElement = parentSvg.getElementById(element.id + '_native_element');\n            clipPath = parentSvg.getElementById(element.id + '_clip');\n        }\n        if (!nativeElement) {\n            nativeElement = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n            nativeElement.setAttribute('id', element.id + '_native_element');\n            nativeElement.appendChild(element.template.cloneNode(true));\n            var svgContentTag = this.createGElement('g', { id: element.id + '_inner_native_element' });\n            svgContentTag.appendChild(nativeElement);\n            canvas.appendChild(svgContentTag);\n        }\n        if (clipPath) {\n            nativeElement.removeChild(clipPath);\n        }\n        nativeElement.style.visibility = element.visible ? 'visible' : 'hidden';\n        nativeElement.style.opacity = element.style.opacity ? element.style.opacity.toString() : '1';\n        this.setNativTransform(element, nativeElement, height, width);\n        if (element.scale === 'Slice') {\n            this.drawClipPath(element, nativeElement, height, width, parentSvg);\n        }\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(nativeElement, element.description ? { 'role': 'img', 'aria-label': element.description } : {});\n    };\n    SvgRenderer.prototype.setNativTransform = function (element, nativeElement, height, width) {\n        //let angle: number;\n        var contentWidth = element.contentSize.width !== 0 ? element.contentSize.width : 1;\n        var contentHeight = element.contentSize.height !== 0 ? element.contentSize.height : 1;\n        var x = element.templatePosition.x * width / contentWidth;\n        var y = element.templatePosition.y * height / contentHeight;\n        nativeElement.setAttribute('transform', 'rotate(' + element.parentTransform + ',' + element.offsetX + ',' + element.offsetY +\n            ') translate(' + (element.offsetX - x - width * element.pivot.x) + ',' + (element.offsetY - y - height * element.pivot.y) +\n            ') scale(' + (width / contentWidth) + ',' + (height / contentHeight) + ')');\n    };\n    /**\n     *used to crop the given native element into a rectangle of the given size .\\\n     *\n     *  @returns {SVGElement} used to crop the given native element into a rectangle of the given size.\n     *  @param {DiagramNativeElement} node - Provide the node element .\n     *  @param {SVGElement} group - Provide the SVG element  .\n     *  @param {number} height - Provide the height for the shape .\n     *  @param {number} width - Provide the width for the shape .\n     *  @param {SVGSVGElement} parentSvg - Provide the parent svg for  the shape .\n     *  @private\n     */\n    SvgRenderer.prototype.drawClipPath = function (node, group, height, width, parentSvg) {\n        var contentWidth = node.contentSize.width;\n        var contentHeight = node.contentSize.height;\n        //let actualWidth: number = node.actualSize.width;\n        //let actualHeight: number = node.actualSize.height;\n        var clipWidth = node.width / (width / contentWidth);\n        var clipHeight = node.height / (height / contentHeight);\n        var x = node.templatePosition.x + (node.width >= node.height ? 0 : (contentWidth - clipWidth) / 2);\n        var y = node.templatePosition.y + (node.height >= node.width ? 0 : (contentHeight - clipHeight) / 2);\n        var clipPath = parentSvg.getElementById(node.id + '_clip');\n        clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');\n        clipPath.setAttribute('id', node.id + '_clip');\n        group.appendChild(clipPath);\n        var rect = parentSvg.getElementById(node.id + '_clip_rect');\n        rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        clipPath.appendChild(rect);\n        var attr = {\n            'id': node.id + '_clip_rect', 'width': clipWidth.toString(), 'height': clipHeight.toString(),\n            'x': x.toString(), 'y': y.toString()\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(rect, attr);\n        if ((0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__.checkBrowserInfo)()) {\n            group.setAttribute('clip-path', 'url(' + location.protocol + '//' + location.host + location.pathname +\n                '#' + node.id + '_clip)');\n        }\n        else {\n            group.setAttribute('clip-path', 'url(#' + node.id + '_clip)');\n        }\n        return group;\n    };\n    /**\n     * Draw the gradient for the diagram shapes .\\\n     *\n     *  @returns {SVGElement} Draw the gradient for the diagram shapes.\n     *  @param {StyleAttributes} options - Provide the options  for the gradient  element .\n     *  @param {SVGElement} svg - Provide the SVG element  .\n     *  @param {string} diagramId - Provide the diagram id .\n     *  @private\n     */\n    SvgRenderer.prototype.renderGradient = function (options, svg, diagramId) {\n        var max;\n        var min;\n        var grd;\n        var svgContainer = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.getBackgroundLayerSvg)(diagramId);\n        var defs = svgContainer.getElementById(diagramId + 'gradient_pattern');\n        if (!defs) {\n            defs = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.createSvgElement)('defs', { id: diagramId + 'gradient_pattern' });\n            svgContainer.insertBefore(defs, svgContainer.firstChild);\n        }\n        var radial;\n        var linear; //let stop: StopModel; let offset: number;\n        (0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__.removeGradient)(svg.id);\n        if (options.gradient.type !== 'None') {\n            for (var i = 0; i < options.gradient.stops.length; i++) {\n                max = !max ? options.gradient.stops[parseInt(i.toString(), 10)].offset\n                    : Math.max(max, options.gradient.stops[parseInt(i.toString(), 10)].offset);\n                min = !min ? options.gradient.stops[parseInt(i.toString(), 10)].offset\n                    : Math.min(min, options.gradient.stops[parseInt(i.toString(), 10)].offset);\n            }\n            if (options.gradient.type === 'Linear') {\n                linear = options.gradient;\n                linear.id = svg.id + '_linear';\n                grd = this.createLinearGradient(linear);\n                defs.appendChild(grd);\n            }\n            else {\n                radial = options.gradient;\n                radial.id = svg.id + '_radial';\n                grd = this.createRadialGradient(radial);\n                defs.appendChild(grd);\n            }\n            for (var i = 0; i < options.gradient.stops.length; i++) {\n                var stop_1 = options.gradient.stops[parseInt(i.toString(), 10)];\n                var offset = min < 0 ? (max + stop_1.offset) / (2 * max) : stop_1.offset / max;\n                var stopElement = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n                (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(stopElement, { 'offset': offset.toString(), 'style': 'stop-color:' + stop_1.color });\n                grd.appendChild(stopElement);\n            }\n        }\n        return grd;\n    };\n    /**\n     * Draw the Linear gradient for the diagram .\\\n     *\n     *  @returns {SVGElement} Draw the Linear gradient for the diagram.\n     *  @param {LinearGradientModel} linear - Provide the objects for the gradient  element .\n     *  @private\n     */\n    SvgRenderer.prototype.createLinearGradient = function (linear) {\n        var lineargradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');\n        var attr = {\n            'id': linear.id, 'x1': linear.x1 + '%', 'y1': linear.y1 + '%', 'x2': linear.x2 + '%', 'y2': linear.y2 + '%'\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(lineargradient, attr);\n        return lineargradient;\n    };\n    /**\n     * Draw the radial gradient for the diagram .\\\n     *\n     *  @returns {SVGElement} Draw the radial gradient for the diagram.\n     *  @param {RadialGradientModel} radial - Provide the objects for the gradient  element .\n     *  @private\n     */\n    SvgRenderer.prototype.createRadialGradient = function (radial) {\n        var radialgradient = document.createElementNS('http://www.w3.org/2000/svg', 'radialGradient');\n        var attr = {\n            'id': radial.id, 'cx': radial.cx + '%', 'cy': radial.cy + '%', 'r': radial.r + '%', 'fx': radial.fx + '%', 'fy': radial.fy + '%'\n        };\n        (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.setAttributeSvg)(radialgradient, attr);\n        return radialgradient;\n    };\n    /**\n     * Set the SVG style for the SVG elements in the diagram.\\\n     *\n     *  @returns {void}\n     *  @param {SVGElement} svg - Provide the canvas element .\n     *  @param {StyleAttributes} style - Provide the canvas element .\n     *  @param {string} diagramId - Provide the canvas element .\n     *  @private\n     */\n    SvgRenderer.prototype.setSvgStyle = function (svg, style, diagramId) {\n        if (style.canApplyStyle || style.canApplyStyle === undefined) {\n            if (style.fill === 'none') {\n                style.fill = 'transparent';\n            }\n            if (style.stroke === 'none') {\n                style.stroke = 'transparent';\n            }\n            var dashArray = [];\n            var fill = void 0;\n            if (style.dashArray) {\n                var canvasRenderer = new _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_5__.CanvasRenderer();\n                dashArray = canvasRenderer.parseDashArray(style.dashArray);\n            }\n            if (style.gradient && style.gradient.type !== 'None' && diagramId) {\n                var grd = this.renderGradient(style, svg, diagramId);\n                if ((0,_utility_diagram_util__WEBPACK_IMPORTED_MODULE_7__.checkBrowserInfo)()) {\n                    fill = 'url(' + location.protocol + '//' + location.host + location.pathname + '#' + grd.id + ')';\n                }\n                else {\n                    fill = 'url(#' + grd.id + ')';\n                }\n            }\n            else {\n                fill = style.fill;\n            }\n            if (style.stroke) {\n                svg.setAttribute('stroke', style.stroke);\n            }\n            if (style.strokeWidth !== undefined && style.strokeWidth !== null) {\n                svg.setAttribute('stroke-width', style.strokeWidth.toString());\n            }\n            if (dashArray) {\n                svg.setAttribute('stroke-dasharray', dashArray.toString() || 'none');\n            }\n            if (fill) {\n                svg.setAttribute('fill', fill);\n            }\n        }\n    };\n    //end region\n    // text utility\n    /**\n     * Draw the SVG label.\\\n     *\n     * @returns {PointModel} Draw the SVG label .\n     *  @param {TextAttributes} text - Provide the canvas element .\n     *  @param {Object} wrapBound - Provide the canvas element .\n     *  @param {SubTextElement []} childNodes - Provide the canvas element .\n     * @private\n     */\n    SvgRenderer.prototype.svgLabelAlign = function (text, wrapBound, childNodes) {\n        var bounds = new _primitives_size__WEBPACK_IMPORTED_MODULE_1__.Size(wrapBound.width, childNodes.length * (text.fontSize * 1.2));\n        var pos = { x: 0, y: 0 };\n        var x = 0;\n        var y = 1.2;\n        var offsetX = text.width * 0.5;\n        var offsety = text.height * 0.5;\n        var pointX = offsetX;\n        var pointY = offsety;\n        if (text.textAlign === 'left' || text.textAlign === 'justify') {\n            pointX = 0;\n        }\n        else if (text.textAlign === 'center') {\n            if (wrapBound.width > text.width && (text.textOverflow === 'Ellipsis' || text.textOverflow === 'Clip')) {\n                if (text.textWrapping === 'NoWrap') {\n                    pointX = 0;\n                }\n                else {\n                    pointX = text.width * 0.5;\n                }\n            }\n            else {\n                pointX = text.width * 0.5;\n            }\n        }\n        else if (text.textAlign === 'right') {\n            pointX = (text.width * 1);\n        }\n        pos.x = x + pointX + (wrapBound ? wrapBound.x : 0);\n        pos.y = y + pointY - bounds.height / 2;\n        return pos;\n    };\n    return SvgRenderer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/rendering/svg-renderer.js?");

/***/ })

}]);