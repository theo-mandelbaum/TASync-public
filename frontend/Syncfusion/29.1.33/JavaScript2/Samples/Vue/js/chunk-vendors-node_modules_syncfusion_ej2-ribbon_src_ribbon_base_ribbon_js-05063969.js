"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-ribbon_src_ribbon_base_ribbon_js-05063969"],{

/***/ "./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/ribbon.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/ribbon.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ribbon: () => (/* binding */ Ribbon)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _models_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/models/index.js\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interface */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/interface.js\");\n/* harmony import */ var _items_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../items/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/utils.js\");\n/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constant */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/constant.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The Ribbon Component is a structured layout to manage tools with tabs and groups.\n */\nvar Ribbon = /** @class */ (function (_super) {\n    __extends(Ribbon, _super);\n    /**\n     * Constructor for creating the widget.\n     *\n     * @param  {RibbonModel} options - Specifies the ribbon model\n     * @param  {string|HTMLDivElement} element - Specifies the target element\n     */\n    function Ribbon(options, element) {\n        var _this = this;\n        Ribbon_1.Inject(_items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonButton, _items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonCheckBox, _items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonDropDown, _items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonSplitButton, _items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonComboBox, _items_index__WEBPACK_IMPORTED_MODULE_4__.RibbonGroupButton);\n        _this = _super.call(this, options, element) || this;\n        return _this;\n    }\n    Ribbon_1 = Ribbon;\n    /**\n     * Initialize the control rendering.\n     *\n     * @returns {void}\n     * @private\n     */\n    Ribbon.prototype.render = function () {\n        this.initialize();\n    };\n    Ribbon.prototype.preRender = function () {\n        this.keysPress = '';\n        this.idIndex = 0;\n        this.tooltipData = [];\n        this.initialPropsData = {};\n        this.hiddenElements = {};\n        this.keyTipElements = {};\n        this.hiddenGroups = [];\n        this.itemsModel = [];\n        this.targetTabs = {};\n        this.isAddRemove = false;\n        this.isUpdateItems = false;\n        this.keyConfigs = {\n            leftarrow: 'leftarrow',\n            rightarrow: 'rightarrow',\n            tab: 'tab',\n            shiftTab: 'shift+tab'\n        };\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Persist data\n     */\n    Ribbon.prototype.getPersistData = function () {\n        return this.addOnPersist(['activeLayout']);\n    };\n    /**\n     * Get component name.\n     *\n     * @returns {string} - Module name\n     * @private\n     */\n    Ribbon.prototype.getModuleName = function () {\n        return 'ribbon';\n    };\n    /**\n     * To provide the array of modules needed for component rendering\n     *\n     * @returns {ModuleDeclaration[]} - returns module declaration.\n     * @hidden\n     */\n    Ribbon.prototype.requiredModules = function () {\n        var modules = [];\n        modules.push({ member: 'ribbonButton', args: [this], name: 'RibbonButton' }, { member: 'ribbonDropDown', args: [this], name: 'RibbonDropDown' }, { member: 'ribbonSplitButton', args: [this], name: 'RibbonSplitButton' }, { member: 'ribbonCheckBox', args: [this], name: 'RibbonCheckBox' }, { member: 'ribbonComboBox', args: [this], name: 'RibbonComboBox' }, { member: 'ribbonGroupButton', args: [this], name: 'RibbonGroupButton' });\n        var canInjectColorPickerModule = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, null, _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.ColorPicker);\n        var canInjectGalleryModule = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, null, _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery);\n        if (canInjectColorPickerModule) {\n            modules.push({ member: 'ribbonColorPicker', args: [this], name: 'RibbonColorPicker' });\n        }\n        if (canInjectGalleryModule) {\n            modules.push({ member: 'ribbonGallery', args: [this], name: 'RibbonGallery' });\n        }\n        if (this.backStageMenu.visible || this.backStageMenu.items.length) {\n            modules.push({ member: 'ribbonBackstage', args: [this], name: 'RibbonBackstage' });\n        }\n        if (this.fileMenu.visible || this.fileMenu.menuItems.length) {\n            modules.push({ member: 'ribbonFileMenu', args: [this], name: 'RibbonFileMenu' });\n        }\n        if (this.contextualTabs.length) {\n            modules.push({ member: 'ribbonContextualTab', args: [this], name: 'RibbonContextualTab' });\n        }\n        if (this.enableKeyTips) {\n            modules.push({ member: 'ribbonKeyTip', args: [this], name: 'RibbonKeyTip' });\n        }\n        return modules;\n    };\n    Ribbon.prototype.initialize = function () {\n        this.element.id = this.element.id || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('e-' + this.getModuleName());\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], ['e-rbn'].concat((this.cssClass ? this.cssClass.split(_constant__WEBPACK_IMPORTED_MODULE_6__.SPACE) : [])));\n        if (this.enableRtl) {\n            this.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RTL_CSS);\n        }\n        this.element.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.width);\n        this.renderTabs();\n        if (this.ribbonContextualTabModule) {\n            this.ribbonContextualTabModule.addContextualTabs();\n        }\n        if (this.ribbonFileMenuModule) {\n            this.ribbonFileMenuModule.createFileMenu(this.fileMenu);\n        }\n        if (this.ribbonBackstageModule) {\n            this.ribbonBackstageModule.createBackStage(this.backStageMenu);\n        }\n        this.createHelpPaneTemplate();\n        var toolbar = this.tabObj['tbObj'];\n        toolbar.refreshOverflow();\n        this.addTabOverflowKeyTip();\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.createTooltip)(this.element, this);\n        this.isKeytipOpen = false;\n        this.wireEvents();\n        this.wireKeyboardEvent();\n        this.currentControlIndex = 0;\n    };\n    Ribbon.prototype.wireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'resize', this.resizeHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document.body, 'keydown', this.keytipActionHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mousedown', this.mouseEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'scroll', this.mouseEventHandler, this);\n    };\n    Ribbon.prototype.wireKeyboardEvent = function () {\n        this.keyboardModuleRibbon = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n    };\n    Ribbon.prototype.keyActionHandler = function (e) {\n        if (((e.key === 'Tab') && (!(e.target.classList.contains('e-tab-wrap')) && !(e.target.classList.contains('e-combobox'))))) {\n            e.preventDefault();\n        }\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[this.selectedTab].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        var controlElements = Array.prototype.slice.call(activeContent.querySelectorAll('.e-control'));\n        var templateElements = Array.prototype.slice.call(activeContent.querySelectorAll('.e-ribbon-template'));\n        var galleryElements = Array.prototype.slice.call(activeContent.querySelectorAll('.e-ribbon-gallery-item'));\n        var ribbonControls = controlElements.concat(templateElements, galleryElements);\n        var comboBoxElements = activeContent.querySelectorAll('.e-combobox');\n        var comboBoxEle;\n        if (comboBoxElements) {\n            for (var i = 0; i < comboBoxElements.length; i++) {\n                if (comboBoxElements[parseInt(i.toString(), 10)].closest('.e-input-focus')) {\n                    comboBoxEle = comboBoxElements[parseInt(i.toString(), 10)];\n                }\n            }\n        }\n        if (comboBoxEle) {\n            for (var i = 0; i < ribbonControls.length; i++) {\n                if (ribbonControls[parseInt(i.toString(), 10)].classList.contains('e-combobox')) {\n                    if (ribbonControls[parseInt(i.toString(), 10)].closest('.e-input-focus')) {\n                        this.currentControlIndex = i;\n                    }\n                }\n            }\n        }\n        if (this.currentControlIndex === 0) {\n            var item = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n            while (item && item.classList.contains('e-disabled')) {\n                this.currentControlIndex++;\n                item = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n            }\n        }\n        if (e.target.classList.contains('e-control') || e.target.classList.contains('e-ribbon-launcher-icon') ||\n            e.target.classList.contains('e-ribbon-collapse-btn') || e.target.classList.contains('e-ribbon-last-item') ||\n            e.target.classList.contains('e-ribbon-first-item') || e.target.classList.contains('e-ribbon-group-of-btn') ||\n            e.target.classList.contains('e-ribbon-overall-of-btn') || e.target.classList.contains('e-ribbon-template') || e.target.classList.contains('e-ribbon-gallery-item')) {\n            switch (e.action) {\n                case 'rightarrow':\n                    this.handleNavigation(e, !this.enableRtl, ribbonControls);\n                    break;\n                case 'leftarrow':\n                    this.handleNavigation(e, this.enableRtl, ribbonControls);\n                    break;\n                case 'tab':\n                    if (e.target.classList.contains('e-combobox')) {\n                        if (this.currentControlIndex < ribbonControls.length - 1) {\n                            this.currentControlIndex++;\n                        }\n                    }\n                    break;\n                case 'shiftTab':\n                    if (e.target.classList.contains('e-combobox')) {\n                        if (this.currentControlIndex > 0) {\n                            this.currentControlIndex--;\n                        }\n                    }\n                    else {\n                        this.tabObj.element.querySelector('.e-toolbar-item.e-active').querySelector('.e-tab-wrap').focus();\n                        this.currentControlIndex = 0;\n                    }\n            }\n        }\n    };\n    Ribbon.prototype.handleNavigation = function (e, enableRtl, ribbonControls) {\n        var groupContainer;\n        var prevGroupId;\n        if (enableRtl) {\n            if (this.currentControlIndex < ribbonControls.length - 1 && ribbonControls[this.currentControlIndex + 1].classList.contains('e-colorpicker')) {\n                this.currentControlIndex++;\n            }\n        }\n        else {\n            if (this.currentControlIndex > 0 && ribbonControls[this.currentControlIndex - 1].classList.contains('e-colorpicker')) {\n                this.currentControlIndex--;\n            }\n        }\n        if ((!enableRtl && (this.currentControlIndex > 0)) || (enableRtl && (this.currentControlIndex < ribbonControls.length - 1))) {\n            if (!e.target.classList.contains('e-combobox') && (e.target.classList.contains('e-control') || e.target.classList.contains('e-ribbon-template') || e.target.classList.contains('e-ribbon-gallery-item')) && !e.target.classList.contains('e-ribbon-last-item')) {\n                if (enableRtl) {\n                    this.currentControlIndex++;\n                }\n                else {\n                    var prevGroupContainer = ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTAINER);\n                    if (prevGroupContainer) {\n                        prevGroupId = prevGroupContainer.getAttribute('id');\n                    }\n                    this.currentControlIndex--;\n                }\n                var item = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                while (item && item.classList.contains('e-disabled')) {\n                    if (((enableRtl && this.currentControlIndex === ribbonControls.length - 1) ||\n                        (!enableRtl && this.currentControlIndex === 0))) {\n                        if (ribbonControls[this.currentControlIndex].closest('.e-ribbon-item').classList.contains('e-disabled')) {\n                            this.tabObj.element.querySelector('.e-ribbon-collapse-btn').focus();\n                            break;\n                        }\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    enableRtl ? this.currentControlIndex++ : this.currentControlIndex--;\n                    item = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                }\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n                if (this.activeLayout === 'Classic') {\n                    groupContainer = ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTAINER);\n                    if (enableRtl) {\n                        var launcherIconEle = void 0;\n                        if (groupContainer) {\n                            launcherIconEle = groupContainer.querySelector('.e-ribbon-launcher-icon');\n                        }\n                        if (launcherIconEle) {\n                            var items = groupContainer.querySelectorAll('.e-ribbon-item');\n                            var elem = items[items.length - 1].querySelector('.e-control');\n                            if (elem) {\n                                elem.classList.add('e-ribbon-last-item');\n                            }\n                        }\n                    }\n                    else {\n                        if (groupContainer) {\n                            var groupContainerId = groupContainer.getAttribute('id');\n                            if (prevGroupId !== groupContainerId) {\n                                var launcherIconEle = groupContainer.querySelector('.e-ribbon-launcher-icon');\n                                if (launcherIconEle) {\n                                    ribbonControls[parseInt((this.currentControlIndex + 1).toString(), 10)].classList.add('e-ribbon-first-item');\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (ribbonControls[parseInt((this.currentControlIndex).toString(), 10)].classList.contains('e-ribbon-first-item')) {\n                        ribbonControls[parseInt((this.currentControlIndex).toString(), 10)].classList.remove('e-ribbon-first-item');\n                    }\n                    else if (ribbonControls[parseInt((this.currentControlIndex).toString(), 10)].classList.contains('e-ribbon-last-item')) {\n                        ribbonControls[parseInt((this.currentControlIndex).toString(), 10)].classList.remove('e-ribbon-last-item');\n                    }\n                }\n            }\n        }\n        else {\n            if (this.activeLayout === 'Classic') {\n                this.tabObj.element.querySelector('.e-ribbon-collapse-btn').focus();\n            }\n            if (this.activeLayout === 'Simplified') {\n                var overflowButton = this.tabObj.element.querySelector('.e-ribbon-overall-of-btn');\n                if (enableRtl && (overflowButton && !overflowButton.classList.contains('e-ribbon-hide'))) {\n                    overflowButton.focus();\n                }\n                else {\n                    this.tabObj.element.querySelector('.e-ribbon-collapse-btn').focus();\n                }\n            }\n        }\n        if (e.target.classList.contains('e-ribbon-last-item')) {\n            if (enableRtl) {\n                groupContainer = ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTAINER);\n                groupContainer.querySelector('.e-ribbon-launcher-icon').focus();\n            }\n            else {\n                this.currentControlIndex--;\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n            }\n        }\n        if (!enableRtl && e.target.classList.contains('e-ribbon-first-item')) {\n            groupContainer = ribbonControls[parseInt((this.currentControlIndex - 1).toString(), 10)].closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTAINER);\n            var launcherIconEle = groupContainer.querySelector('.e-ribbon-launcher-icon');\n            if (launcherIconEle) {\n                groupContainer.querySelector('.e-ribbon-launcher-icon').focus();\n            }\n        }\n        if (e.target.classList.contains('e-ribbon-launcher-icon')) {\n            if (enableRtl) {\n                this.currentControlIndex++;\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n                if (ribbonControls[parseInt((this.currentControlIndex - 1).toString(), 10)].classList.contains('e-ribbon-last-item')) {\n                    ribbonControls[parseInt((this.currentControlIndex - 1).toString(), 10)].classList.remove('e-ribbon-last-item');\n                }\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                this.currentControlIndex;\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n            }\n        }\n        if (e.target.classList.contains('e-ribbon-collapse-btn')) {\n            if (enableRtl) {\n                this.currentControlIndex = 0;\n                var ribbonItem = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                while (ribbonItem && ribbonItem.classList.contains('e-disabled')) {\n                    this.currentControlIndex++;\n                    ribbonItem = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                }\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n            }\n            else {\n                var overflowButton = this.tabObj.element.querySelector('.e-ribbon-overall-of-btn');\n                if ((overflowButton && !overflowButton.classList.contains('e-ribbon-hide'))) {\n                    overflowButton.focus();\n                }\n                else {\n                    this.currentControlIndex = ribbonControls.length - 1;\n                    var ribbonItem = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                    while (ribbonItem && ribbonItem.classList.contains('e-disabled')) {\n                        this.currentControlIndex--;\n                        ribbonItem = ribbonControls[this.currentControlIndex].closest('.e-ribbon-item');\n                    }\n                    ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n                }\n            }\n        }\n        if (this.activeLayout === 'Simplified' && e.target.classList.contains('e-ribbon-overall-of-btn')) {\n            if (enableRtl) {\n                this.tabObj.element.querySelector('.e-ribbon-collapse-btn').focus();\n            }\n            else {\n                this.currentControlIndex = ribbonControls.length - 1;\n                ribbonControls[parseInt(this.currentControlIndex.toString(), 10)].focus();\n            }\n        }\n    };\n    Ribbon.prototype.resizeHandler = function () {\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[this.selectedTab].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        this.checkOverflow(this.selectedTab, activeContent);\n        if (this.scrollModule) {\n            var scrollEle = this.tabObj.element.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.HORIZONTAL_SCROLLBAR);\n            this.scrollModule.scrollStep = scrollEle.offsetWidth;\n        }\n        if (this.activeLayout === 'Simplified') {\n            var activePopup = document.querySelectorAll('.e-ribbon .e-dropdown-btn.e-active, .e-ribbon-group-overflow-ddb .e-dropdown-btn.e-active');\n            if (activePopup.length) {\n                for (var i = 0; i < activePopup.length; i++) {\n                    var dropDownBtn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(activePopup[parseInt(i.toString(), 10)], _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    dropDownBtn.toggle();\n                }\n            }\n        }\n        var galleryPopupEle = document.querySelector('.e-ribbon-gallery-popup.e-popup-open');\n        if (galleryPopupEle) {\n            var popup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(galleryPopupEle, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_7__.Popup);\n            popup.hide();\n        }\n        if (this.ribbonKeyTipModule && this.enableKeyTips) {\n            this.ribbonKeyTipModule.removeKeytip();\n        }\n    };\n    Ribbon.prototype.mouseEventHandler = function () {\n        if (this.ribbonKeyTipModule && this.enableKeyTips) {\n            this.ribbonKeyTipModule.removeKeytip();\n        }\n    };\n    Ribbon.prototype.keytipActionHandler = function (e) {\n        if (this.enableKeyTips) {\n            var isKeyTipPresent = false;\n            var keyPress = e.key;\n            if (e.altKey && e.key === 'Meta') {\n                var activePopup = document.querySelectorAll('.e-ribbon .e-dropdown-btn.e-active, .e-ribbon-group-overflow-ddb .e-dropdown-btn.e-active');\n                if (activePopup.length) {\n                    for (var i = 0; i < activePopup.length; i++) {\n                        var dropDownBtn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(activePopup[parseInt(i.toString(), 10)], _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                        dropDownBtn.toggle();\n                    }\n                    this.ribbonKeyTipModule.removeKeytip();\n                }\n                else {\n                    if (!this.isKeytipOpen) {\n                        var backstagePopup = document.querySelector('.e-ribbon-backstage-popup');\n                        if (backstagePopup && backstagePopup.classList.contains('e-popup-open')) {\n                            this.ribbonBackstageModule.hideBackstage();\n                        }\n                        this.ribbonKeyTipModule.createKeytip('tab');\n                    }\n                    else {\n                        this.ribbonKeyTipModule.removeKeytip();\n                    }\n                }\n            }\n            else if (e.key === 'Escape' || e.key === 'Tab' || e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n                this.ribbonKeyTipModule.removeKeytip(e.key);\n            }\n            else {\n                var keyTipItems = document.querySelectorAll('.e-ribbon-keytip');\n                if (keyTipItems) {\n                    for (var i = 0; i < keyTipItems.length; i++) {\n                        var keyTipItem = keyTipItems[parseInt(i.toString(), 10)];\n                        if (keyTipItem.innerHTML.toLowerCase() === keyPress) {\n                            isKeyTipPresent = true;\n                            this.ribbonKeyTipModule.keytipPress(keyPress);\n                            break;\n                        }\n                    }\n                    if (!isKeyTipPresent) {\n                        this.checkKeyTipPresent(keyPress, this.keysPress.length);\n                    }\n                }\n            }\n        }\n    };\n    Ribbon.prototype.checkKeyTipPresent = function (keyTip, length) {\n        var keyTipItems = document.querySelectorAll('.e-ribbon-keytip');\n        for (var i = 0; i < keyTipItems.length; i++) {\n            var keyTipItem = keyTipItems[parseInt(i.toString(), 10)];\n            if (keyTipItem.innerHTML.length > 1 && keyTipItem.innerHTML[parseInt(length.toString(), 10)].toLowerCase() === keyTip) {\n                this.keysPress += keyTip;\n                this.ribbonKeyTipModule.keytipPress(this.keysPress);\n                this.removeKeytip(this.keysPress);\n                break;\n            }\n        }\n    };\n    Ribbon.prototype.removeKeytip = function (keyTip) {\n        var keyTipItems = document.querySelectorAll('.e-ribbon-keytip');\n        for (var i = 0; i < keyTipItems.length; i++) {\n            var keyTipItem = keyTipItems[parseInt(i.toString(), 10)];\n            if (keyTipItem.innerHTML[0].toLowerCase() !== keyTip && keyTip !== '') {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(keyTipItem);\n            }\n        }\n    };\n    Ribbon.prototype.addKeyTip = function (tabIndex, keyTip, id, type) {\n        if (this.keyTipElements && this.keyTipElements[parseInt(tabIndex.toString(), 10)]) {\n            var isKeyTipExist = false;\n            if (!(this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type])) {\n                this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type] = [];\n            }\n            if (Object.keys(this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type]).length) {\n                var keytipData = this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type];\n                for (var i = 0; i < Object.keys(this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type]).length; i++) {\n                    if (keytipData[parseInt(i.toString(), 10)].id === id) {\n                        isKeyTipExist = true;\n                    }\n                }\n                if (!isKeyTipExist) {\n                    this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type].\n                        push({ id: id, type: type, keyTip: keyTip });\n                }\n            }\n            else {\n                this.keyTipElements[parseInt(tabIndex.toString(), 10)][\"\" + type].push({ id: id, type: type, keyTip: keyTip });\n            }\n        }\n    };\n    Ribbon.prototype.renderTabs = function () {\n        this.tabsInternal = this.tabs.slice();\n        this.tabsInternal = this.checkID(this.tabsInternal, 'tab', this.element.id);\n        this.setProperties({ tabs: this.tabsInternal }, true);\n        var tabEle = this.createElement('div', {\n            id: this.element.id + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_ID\n        });\n        this.element.appendChild(tabEle);\n        this.validateItemSize();\n        var tabItems = this.createTabItems(this.tabs);\n        this.tabObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Tab({\n            cssClass: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB,\n            selectedItem: this.selectedTab,\n            overflowMode: 'Popup',\n            width: this.width,\n            items: tabItems,\n            enableRtl: this.enableRtl,\n            created: this.tabCreated.bind(this),\n            selected: this.ribbonTabSelected.bind(this),\n            selecting: this.ribbonTabSelecting.bind(this),\n            animation: this.tabAnimation\n        });\n        this.tabObj.appendTo(tabEle);\n        //Set the width value as \"0px\" with unit for proper calculation.\n        this.element.style.setProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_FILE_MENU_WIDTH, '0px');\n        this.element.style.setProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_PANE_TEMPLATE_WIDTH, '0px');\n        var toolbarEle = tabEle.querySelector('.e-toolbar');\n        var toolbar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(toolbarEle, _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar);\n        toolbar.setProperties({ width: 'calc(100% - var(--fileMenuWidth) - var(--helpTemplateWidth))' });\n        this.element.classList[this.isMinimized ? 'add' : 'remove'](_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MINIMIZE);\n    };\n    Ribbon.prototype.minimize = function (val) {\n        var _this = this;\n        if (val === this.isMinimized) {\n            return;\n        }\n        var eventArgs = { cancel: false };\n        this.trigger(val ? 'ribbonCollapsing' : 'ribbonExpanding', eventArgs, function (args) {\n            if (args.cancel) {\n                return;\n            }\n            _this.setProperties({ isMinimized: val }, true);\n            _this.element.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MINIMIZE, _this.isMinimized);\n            //to overwrite inline styles from hscroll\n            _this.tabObj.element.querySelector('.e-content').style.display = val ? 'none' : 'block';\n            if (!val) {\n                _this.refreshLayout();\n            }\n        });\n    };\n    Ribbon.prototype.toggleLayout = function (args) {\n        this.setProperties({ activeLayout: this.activeLayout === 'Simplified' ? 'Classic' : 'Simplified' }, true);\n        this.switchLayout();\n        var eventArgs = { activeLayout: this.activeLayout, event: args };\n        this.trigger('ribbonLayoutSwitched', eventArgs);\n    };\n    Ribbon.prototype.tabCreated = function () {\n        if (!this.hideLayoutSwitcher) {\n            this.addExpandCollapse();\n        }\n        this.renderInitialTab(this.selectedTab);\n    };\n    Ribbon.prototype.ribbonTabSelected = function (e) {\n        e.preventFocus = true;\n        this.isAddRemove = false;\n        var selectedTabId = e.selectedItem.getAttribute('data-id');\n        var selectedIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, (function (tab) { return (tab.id === selectedTabId); }));\n        selectedIndex = selectedIndex === -1 ? this.selectedTab : selectedIndex;\n        var selectedContent = this.tabObj.items[parseInt(selectedIndex.toString(), 10)].content;\n        if ((!selectedContent.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP)) && (this.tabs[parseInt(selectedIndex.toString(), 10)].groups.length !== 0)) {\n            var elements = this.createGroups(this.tabs[parseInt(selectedIndex.toString(), 10)].groups, selectedIndex);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, selectedContent);\n        }\n        var isContextual = this.isContextualTab(selectedTabId);\n        this.updateSelectedState(selectedTabId);\n        var eventArgs = { previousIndex: this.selectedTab, selectedIndex: selectedIndex, isContextual: isContextual };\n        this.setProperties({ selectedTab: selectedIndex }, true);\n        this.calculateHiddenElementsWidth(selectedIndex);\n        if (this.isUpdateItems) {\n            for (var i = 0; i < this.itemsModel.length; i++) {\n                var item = this.itemsModel[parseInt(i.toString(), 10)];\n                if (this.selectedTab === this.targetTabs[item.id]) {\n                    this.updateItem(item);\n                    this.itemsModel.splice(i, 1);\n                    i--;\n                }\n            }\n            if (this.itemsModel.length === 0) {\n                this.isUpdateItems = false;\n            }\n        }\n        if (this.ribbonGalleryModule) {\n            this.ribbonGalleryModule.checkAvailableHeight(e.selectedContent.firstChild);\n        }\n        this.checkOverflow(selectedIndex, selectedContent);\n        if (this.activeLayout === 'Simplified' && this.overflowDDB) {\n            var overflowTarget = this.overflowDDB.target;\n            var ofTabContainer = overflowTarget.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB_ACTIVE);\n            if (ofTabContainer) {\n                ofTabContainer.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB_ACTIVE);\n            }\n            var activeTab = overflowTarget.querySelector('#' + selectedTabId + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n            if (activeTab) {\n                activeTab.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB_ACTIVE);\n                this.overflowDDB.element.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.HIDE_CSS);\n                this.checkOverflowHiddenItems(false, selectedIndex);\n            }\n            else {\n                this.overflowDDB.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.HIDE_CSS);\n            }\n        }\n        this.trigger('tabSelected', eventArgs);\n    };\n    Ribbon.prototype.updateSelectedState = function (tabID) {\n        if (this.contextualTabs.length) {\n            for (var i = 0; i < this.contextualTabs.length; i++) {\n                var isSelected = false;\n                for (var j = 0; j < this.contextualTabs[parseInt(i.toString(), 10)].tabs.length; j++) {\n                    if (this.contextualTabs[parseInt(i.toString(), 10)].tabs[parseInt(j.toString(), 10)].id === tabID) {\n                        isSelected = true;\n                        break;\n                    }\n                }\n                this.contextualTabs[parseInt(i.toString(), 10)].\n                    setProperties({ isSelected: isSelected }, true);\n            }\n        }\n    };\n    Ribbon.prototype.checkOverflow = function (tabIndex, activeContent) {\n        var tabContent = activeContent.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_CONTENT);\n        var isOverFlow = tabContent.offsetWidth < activeContent.offsetWidth;\n        if (isOverFlow && !this.scrollModule) {\n            if (this.activeLayout === 'Classic') {\n                // Defines whether the shrinking is breaked due to insufficient space.\n                var isBreak = false;\n                isBreak = this.checkGroupShrinking(tabIndex, tabContent, activeContent, true);\n                if (!isBreak && (tabContent.offsetWidth < activeContent.offsetWidth)) {\n                    isBreak = this.checkGroupShrinking(tabIndex, tabContent, activeContent, false);\n                }\n                if (tabContent.offsetWidth < activeContent.offsetWidth) {\n                    this.createOverflowDropdown(tabIndex, tabContent, activeContent);\n                }\n            }\n            else {\n                this.checkSimplifiedItemShrinking(tabIndex, tabContent, activeContent);\n                if (tabContent.offsetWidth < activeContent.offsetWidth) {\n                    this.createSimplfiedOverflow(tabContent, activeContent, tabIndex);\n                }\n            }\n            //Adds Scroll if the tabwidth is less the content width even after adding overflow dropdown.\n            if ((tabContent.offsetWidth < activeContent.offsetWidth) && (!this.scrollModule)) {\n                this.scrollModule = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.HScroll({\n                    enableRtl: this.enableRtl\n                }, this.tabObj.element.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_CONTENT));\n            }\n        }\n        else if (!isOverFlow) {\n            this.destroyScroll();\n            if (this.activeLayout === 'Classic') {\n                var isBreak = false;\n                isBreak = this.removeOverflowDropdown(tabContent, activeContent, false, tabIndex);\n                //Check for expanding small items to medium items.\n                if (!isBreak && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                    isBreak = this.checkGroupExpanding(tabIndex, tabContent, activeContent, true);\n                }\n                //Check for expanding medium items to large items.\n                if (!isBreak && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                    isBreak = this.checkGroupExpanding(tabIndex, tabContent, activeContent, false);\n                }\n            }\n            else {\n                this.removeSimplfiedOverflow(tabContent, activeContent, tabIndex);\n                if (tabContent.offsetWidth > activeContent.offsetWidth) {\n                    this.checkSimplifiedItemExpanding(tabIndex, tabContent, activeContent);\n                }\n            }\n        }\n        this.addTabOverflowKeyTip();\n    };\n    Ribbon.prototype.addTabOverflowKeyTip = function () {\n        var tabOverflow = this.tabObj.element.querySelector('#_nav');\n        if (tabOverflow) {\n            this.keyTipElements['taboverflow'] = [];\n            this.keyTipElements['taboverflow'].push({ id: tabOverflow.id, type: 'taboverflow', keyTip: '00' });\n        }\n        else {\n            delete (this.keyTipElements['taboverflow']);\n        }\n    };\n    Ribbon.prototype.checkSimplifiedItemShrinking = function (tabIndex, tabContent, activeContent) {\n        var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n        for (var i = (tab.groups.length - 1); (i >= 0); i--) {\n            var group = tab.groups[parseInt(i.toString(), 10)];\n            var groupContainer = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            for (var j = 0; ((j < group.collections.length) && (tabContent.offsetWidth < activeContent.offsetWidth)); j++) {\n                var collection = group.collections[parseInt(j.toString(), 10)];\n                for (var k = collection.items.length; ((k >= 1) && (tabContent.offsetWidth < activeContent.offsetWidth)); k--) {\n                    var item = collection.items[k - 1];\n                    if (((item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) && (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium))\n                        && (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) && (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified)) {\n                        var itemContainer = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                        if (itemContainer) {\n                            var itemEle = itemContainer.querySelector('#' + item.id);\n                            itemContainer.setAttribute('data-medium-width', activeContent.offsetWidth.toString());\n                            item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small }, true);\n                            this.setItemSize(itemEle, item);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Ribbon.prototype.checkSimplifiedItemExpanding = function (tabIndex, tabContent, activeContent) {\n        var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n        for (var i = (tab.groups.length - 1); (i >= 0); i--) {\n            var group = tab.groups[parseInt(i.toString(), 10)];\n            var groupContainer = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            for (var j = 0; ((j < group.collections.length) && (tabContent.offsetWidth > activeContent.offsetWidth)); j++) {\n                var collection = group.collections[parseInt(j.toString(), 10)];\n                for (var k = collection.items.length; ((k >= 1) && (tabContent.offsetWidth > activeContent.offsetWidth)); k--) {\n                    var item = collection.items[k - 1];\n                    if (((item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) && (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium))\n                        && (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) && (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified)) {\n                        var itemContainer = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                        if (itemContainer) {\n                            var valString = itemContainer.getAttribute('data-medium-width');\n                            var value = valString ? parseInt(valString, 10) : null;\n                            if (value && (tabContent.offsetWidth > value)) {\n                                itemContainer.removeAttribute('data-medium-width');\n                                var itemEle = itemContainer.querySelector('#' + item.id);\n                                item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                                this.setItemSize(itemEle, item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Ribbon.prototype.createSimplfiedOverflow = function (tabContent, activeContent, tabIndex) {\n        var orderedGroups = this.getGroupResizeOrder(true, tabIndex);\n        var isEmptyCollection;\n        for (var i = 0; ((i < orderedGroups.length) && (tabContent.offsetWidth < activeContent.offsetWidth)); i++) {\n            var isGroupUpdated = false;\n            var group = orderedGroups[parseInt(i.toString(), 10)];\n            var groupEle = tabContent.querySelector('#' + group.id);\n            var groupContainer = groupEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            for (var j = group.collections.length; ((j >= 1) && (tabContent.offsetWidth < activeContent.offsetWidth)); j--) {\n                var collection = group.collections[parseInt((j - 1).toString(), 10)];\n                var collectionEle = groupEle.querySelector('#' + collection.id);\n                for (var k = collection.items.length; ((k >= 1) && (tabContent.offsetWidth < activeContent.offsetWidth)); k--) {\n                    var item = collection.items[k - 1];\n                    var itemContainer = collectionEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (((item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Auto) ||\n                        (item.displayOptions === (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow))) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(itemContainer)) {\n                        var groupHidden = false;\n                        var itemHidden = false;\n                        var isAllItemHidden = false;\n                        var isEmptyCollection_1 = false;\n                        var groupItems = void 0;\n                        if (groupEle.classList.contains('e-hidden') || groupEle.classList.contains('e-hide-group')) {\n                            groupItems = groupEle.querySelectorAll('.e-ribbon-item.e-hidden');\n                            if (groupItems.length) {\n                                for (var i_1 = 0; i_1 < groupItems.length; i_1++) {\n                                    groupItems[parseInt(i_1.toString(), 10)].classList.remove('e-hidden');\n                                }\n                            }\n                            if (groupEle.classList.contains('e-hide-group')) {\n                                isAllItemHidden = true;\n                                groupEle.classList.remove('e-hide-group');\n                                groupEle.classList.remove('e-ribbon-emptyCollection');\n                                if (this.hiddenGroups.indexOf(groupEle.id) !== -1) {\n                                    this.hiddenGroups.splice(this.hiddenGroups.indexOf(groupEle.id), 1);\n                                }\n                            }\n                            else {\n                                groupHidden = true;\n                                groupEle.classList.remove('e-hidden');\n                            }\n                            if (!isGroupUpdated) {\n                                this.calculateOverflowItemsWidth(groupEle.offsetWidth, false, tabIndex);\n                                this.calculateMediumDataWidth(groupEle.offsetWidth, tabIndex, false);\n                                isGroupUpdated = true;\n                            }\n                        }\n                        else {\n                            if (itemContainer.classList.contains('e-hidden')) {\n                                itemHidden = true;\n                                itemContainer.classList.remove('e-hidden');\n                                if (groupEle.classList.contains('e-ribbon-emptyCollection')) {\n                                    isEmptyCollection_1 = true;\n                                    groupEle.classList.remove('e-ribbon-emptyCollection');\n                                }\n                                this.calculateOverflowItemsWidth(itemContainer.offsetWidth, false, tabIndex);\n                                this.calculateMediumDataWidth(itemContainer.offsetWidth, tabIndex, false);\n                            }\n                        }\n                        itemContainer.setAttribute('data-simplified-width', (activeContent.offsetWidth).toString());\n                        if (itemHidden) {\n                            itemContainer.classList.add('e-hidden');\n                        }\n                        if (groupItems && groupItems.length) {\n                            for (var i_2 = 0; i_2 < groupItems.length; i_2++) {\n                                groupItems[parseInt(i_2.toString(), 10)].classList.add('e-hidden');\n                            }\n                        }\n                        if (groupHidden) {\n                            groupEle.classList.add('e-hidden');\n                        }\n                        if (isAllItemHidden) {\n                            groupEle.classList.add('e-hide-group');\n                            groupEle.classList.add('e-ribbon-emptyCollection');\n                        }\n                        if (isEmptyCollection_1) {\n                            groupEle.classList.add('e-ribbon-emptyCollection');\n                        }\n                        this.createOverflowPopup(item, tabIndex, group.enableGroupOverflow, group.id, group.header, itemContainer, groupContainer, true);\n                        if (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) {\n                            var itemEle = itemContainer.querySelector('#' + item.id);\n                            item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                            this.setItemSize(itemEle, item);\n                        }\n                        if ((item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                            (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                            this.updatePopupItems(item, itemContainer, group.enableGroupOverflow, true);\n                        }\n                    }\n                }\n            }\n            if (!(group.enableGroupOverflow || groupEle.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM))) {\n                groupEle.classList.add('e-ribbon-emptyCollection');\n            }\n            var itemsLength = groupEle.querySelectorAll('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM);\n            if (itemsLength && !group.enableGroupOverflow) {\n                isEmptyCollection = this.checkEmptyCollection(itemsLength);\n                if (isEmptyCollection) {\n                    groupEle.classList.add('e-ribbon-emptyCollection');\n                }\n            }\n            this.checkOverflowHiddenItems(group.enableGroupOverflow, tabIndex, group.id);\n        }\n    };\n    Ribbon.prototype.checkEmptyCollection = function (itemsLength) {\n        var isEmptyCollection = true;\n        for (var i = 0; i < itemsLength.length; i++) {\n            if (!(itemsLength[parseInt(i.toString(), 10)].classList.contains('e-hidden'))) {\n                isEmptyCollection = false;\n                break;\n            }\n        }\n        return isEmptyCollection;\n    };\n    Ribbon.prototype.updatePopupItems = function (item, itemEle, isGroupOF, isMenu) {\n        var _this = this;\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(itemEle.querySelector('#' + item.id), (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown || item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery || item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) ? _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton : _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.SplitButton);\n        var dropDownPopup = dropdown.dropDown;\n        // popup is on right if (isGroupOF && isMenu)\n        // The position is reversed if RTL is enabled.\n        // isRight = ((isGroupOF && isMenu) && !this.enableRtl ) || (!(isGroupOF && isMenu) && this.enableRtl)  ==> (isGroupOF && isMenu) !== this.enableRtl\n        var isLeft = (isGroupOF && isMenu) === this.enableRtl;\n        if (dropDownPopup) {\n            dropDownPopup.setProperties({ position: { X: isLeft ? 'left' : 'right', Y: isMenu ? 'top' : 'bottom' } }, true);\n            if (isMenu) {\n                dropdown.beforeOpen = function () {\n                    if (isLeft) {\n                        if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery && _this.ribbonGalleryModule) {\n                            _this.ribbonGalleryModule.checkCollision(dropDownPopup, dropDownPopup.element);\n                        }\n                        dropDownPopup.element.style.setProperty('visibility', 'hidden');\n                        dropDownPopup.element.style.setProperty('display', 'block');\n                        dropDownPopup.setProperties({ offsetX: -1 * dropDownPopup.element.offsetWidth });\n                        dropDownPopup.element.style.removeProperty('display');\n                        dropDownPopup.element.style.removeProperty('visibility');\n                    }\n                };\n            }\n            else {\n                dropDownPopup.setProperties({ offsetX: 0 }, true);\n                dropdown.beforeOpen = null;\n            }\n        }\n    };\n    Ribbon.prototype.removeSimplfiedOverflow = function (tabContent, activeContent, tabIndex, isClear) {\n        if (isClear === void 0) { isClear = false; }\n        var orderedGroups = this.getGroupResizeOrder(false, tabIndex);\n        var flag = true;\n        var isEmptyCollection;\n        for (var i = 0; ((i < orderedGroups.length) && flag); i++) {\n            var group = orderedGroups[parseInt(i.toString(), 10)];\n            var overflowDDB = void 0;\n            var overflowtarget = void 0;\n            if (group.enableGroupOverflow) {\n                var overflowDDBEle = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n                if (overflowDDBEle) {\n                    overflowDDB = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDBEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    overflowtarget = overflowDDB.target;\n                }\n            }\n            else {\n                overflowDDB = this.overflowDDB;\n                overflowtarget = this.overflowDDB ? this.overflowDDB.target : null;\n            }\n            for (var j = 0; ((j < group.collections.length) && flag); j++) {\n                var collection = group.collections[parseInt(j.toString(), 10)];\n                // eslint-disable-next-line max-len\n                for (var k = 0; ((k < collection.items.length) && flag && !isClear && (tabContent.offsetWidth > activeContent.offsetWidth)); k++) {\n                    var item = collection.items[parseInt(k.toString(), 10)];\n                    var itemContainer = void 0;\n                    if (overflowtarget) {\n                        itemContainer = overflowtarget.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    }\n                    if (((item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Auto) ||\n                        (item.displayOptions === (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow))) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(itemContainer)) {\n                        var width = parseInt(itemContainer.getAttribute('data-simplified-width'), 10);\n                        var groupItemEle = tabContent.querySelector('#' + group.id);\n                        if (itemContainer.classList.contains('e-hidden') || groupItemEle.classList.contains('e-hidden')) {\n                            width = Math.abs(width - activeContent.offsetWidth);\n                        }\n                        if (!isClear && (tabContent.offsetWidth < width)) {\n                            flag = false;\n                            break;\n                        }\n                        var groupEle = tabContent.querySelector('#' + collection.id);\n                        if ((item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                            (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                            this.updatePopupItems(item, itemContainer, group.enableGroupOverflow, false);\n                        }\n                        groupEle.append(itemContainer);\n                        if (itemContainer.classList.contains('e-hidden') || groupItemEle.classList.contains('e-hidden')) {\n                            itemContainer.setAttribute('data-simplified-width', width.toString());\n                            var isGroupHidden = false;\n                            var widthDifference = 0;\n                            if (itemContainer.classList.contains('e-hidden')) {\n                                itemContainer.classList.remove('e-hidden');\n                                if (groupItemEle.classList.contains('e-hide-group')) {\n                                    isGroupHidden = true;\n                                    widthDifference = this.checkWidthDifference(itemContainer, groupItemEle);\n                                }\n                                width = itemContainer.offsetWidth + widthDifference;\n                                itemContainer.classList.add('e-hidden');\n                            }\n                            this.calculateOverflowItemsWidth(width, true, tabIndex);\n                            this.calculateMediumDataWidth(width, tabIndex, true);\n                            if (isGroupHidden) {\n                                groupItemEle.classList.add('e-hide-group');\n                                groupItemEle.classList.add('e-ribbon-emptyCollection');\n                            }\n                        }\n                        this.removeOverflowEvent(item, itemContainer);\n                        if (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) {\n                            item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small }, true);\n                            this.setItemSize(itemContainer.querySelector('#' + item.id), item);\n                        }\n                        var groupElement = tabContent.querySelector('#' + group.id);\n                        var itemEle = groupElement.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM);\n                        if (groupElement.classList.contains('e-ribbon-emptyCollection') && itemEle !== null) {\n                            var itemsLength = groupElement.querySelectorAll('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM);\n                            if (itemsLength) {\n                                isEmptyCollection = this.checkEmptyCollection(itemsLength);\n                                if (!isEmptyCollection) {\n                                    groupElement.classList.remove('e-ribbon-emptyCollection');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (overflowDDB) {\n                if (group.enableGroupOverflow) {\n                    if (overflowtarget.childElementCount === 0 ||\n                        (overflowtarget.childElementCount === 1 && this.isHeaderVisible(overflowtarget, group.id))) {\n                        this.removeOverflowButton(overflowDDB);\n                    }\n                }\n                else {\n                    var ofGroupContainer = overflowtarget.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (ofGroupContainer && ofGroupContainer.childElementCount === 1) {\n                        ofGroupContainer.remove();\n                    }\n                    var ofTabContainer = overflowtarget.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                    if (ofTabContainer && ofTabContainer.childElementCount === 0) {\n                        ofTabContainer.remove();\n                        this.overflowDDB.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.HIDE_CSS);\n                    }\n                }\n            }\n        }\n        for (var i = 0; i < orderedGroups.length; i++) {\n            this.checkOverflowHiddenItems(orderedGroups[parseInt(i.toString(), 10)].enableGroupOverflow, tabIndex, orderedGroups[parseInt(i.toString(), 10)].id);\n        }\n        if (this.overflowDDB) {\n            var overflowEle = this.overflowDDB.target;\n            if (overflowEle.childElementCount === 0) {\n                this.removeOverflowButton(this.overflowDDB);\n                this.overflowDDB = null;\n            }\n        }\n    };\n    Ribbon.prototype.checkOverflowHiddenItems = function (isGroupOF, tabIndex, groupId) {\n        if (isGroupOF) {\n            var overflowDDB = document.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n            if (overflowDDB) {\n                var overflowButton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDB, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                var overflowBtnTarget = overflowButton.target;\n                var itemEle = overflowBtnTarget.querySelectorAll('.e-ribbon-item');\n                var isHidden = true;\n                for (var i = 0; i < itemEle.length; i++) {\n                    if (!(itemEle[parseInt(i.toString(), 10)].classList.contains('e-hidden'))) {\n                        isHidden = false;\n                        break;\n                    }\n                }\n                overflowButton.element.classList[isHidden ? 'add' : 'remove']('e-hidden');\n            }\n        }\n        else {\n            if (this.overflowDDB) {\n                var isGroupHidden = true;\n                var isItemHidden = void 0;\n                var overflowEle = this.overflowDDB.target;\n                var ofTabContainer = overflowEle.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                if (ofTabContainer) {\n                    for (var k = 0; k < ofTabContainer.children.length; k++) {\n                        isItemHidden = true;\n                        var overflowTab = ofTabContainer.children[parseInt(k.toString(), 10)];\n                        var groupTabContainer = overflowTab.querySelectorAll('.e-ribbon-item');\n                        for (var n = 0; n < groupTabContainer.length; n++) {\n                            if (!(groupTabContainer[parseInt(n.toString(), 10)].classList.contains('e-hidden'))) {\n                                isItemHidden = false;\n                                break;\n                            }\n                        }\n                        overflowTab.classList[isItemHidden ? 'add' : 'remove']('e-hide-group');\n                        if (!(overflowTab.classList.contains('e-hide-group')) && !(overflowTab.classList.contains('e-hidden'))) {\n                            isGroupHidden = false;\n                        }\n                    }\n                    this.overflowDDB.element.classList[isGroupHidden ? 'add' : 'remove'](_constant__WEBPACK_IMPORTED_MODULE_6__.HIDE_CSS);\n                }\n            }\n        }\n    };\n    Ribbon.prototype.createOverflowPopup = function (item, tabIndex, isGroupOF, groupId, groupHeader, itemEle, groupContainer, isResize) {\n        var overflowButton;\n        var overflowtarget;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        var contentEle = this.tabObj.items[parseInt(tabIndex.toString(), 10)].content;\n        var groupEle = contentEle.querySelector('#' + groupId);\n        if (isGroupOF) {\n            var overflowDDB = groupContainer.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n            if (!overflowDDB) {\n                overflowButton = this.addOverflowButton(groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID, isGroupOF);\n                overflowButton.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_OF_BUTTON);\n                groupContainer.appendChild(overflowButton.element);\n            }\n            else {\n                overflowButton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDB, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n            }\n            this.addKeyTip(tabIndex, '0' + (itemProp.groupIndex + 1), overflowButton.element.id, 'grpofbtn');\n            overflowtarget = overflowButton.target;\n            var overflowBtnTarget = overflowButton.target;\n            var headerEle = overflowBtnTarget.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID);\n            if (!headerEle) {\n                if (itemProp.group.overflowHeader) {\n                    var groupHeader_1 = this.createElement('div', {\n                        className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW_HEADER,\n                        id: groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID,\n                        innerHTML: itemProp.group.overflowHeader\n                    });\n                    overflowBtnTarget.append(groupHeader_1);\n                }\n            }\n            if (groupEle) {\n                if (groupEle.classList.contains('e-disabled')) {\n                    overflowBtnTarget.classList.add('e-disabled');\n                }\n                if (groupEle.classList.contains('e-hidden')) {\n                    overflowBtnTarget.classList.add('e-hidden');\n                }\n                if (groupEle.classList.contains('e-hide-group')) {\n                    overflowBtnTarget.classList.add('e-hide-group');\n                }\n            }\n            if (isResize) {\n                overflowBtnTarget.insertBefore(itemEle, overflowBtnTarget.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM));\n            }\n            else {\n                overflowBtnTarget.append(itemEle);\n            }\n        }\n        else {\n            if (!this.overflowDDB) {\n                this.overflowDDB = this.addOverflowButton(this.tabObj.element.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVRLOF_BUTTON_ID, isGroupOF);\n                this.tabObj.element.insertBefore(this.overflowDDB.element, this.collapseButton);\n                this.overflowDDB.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERALL_OF_BUTTON);\n                this.createOfTabContainer(groupId, groupHeader, itemEle, tabIndex);\n            }\n            else {\n                this.overflowDDB.element.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.HIDE_CSS);\n                var overflowEle = this.overflowDDB.target;\n                var ofTabContainer = overflowEle.querySelector('#' +\n                    this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                if (ofTabContainer) {\n                    var ofGroupContainer = overflowEle.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (!ofGroupContainer) {\n                        ofGroupContainer = itemProp.group.overflowHeader ? this.createGroupContainer(groupId, itemProp.group.overflowHeader) : this.createGroupContainer(groupId, groupHeader);\n                        if (groupEle) {\n                            if (groupEle.classList.contains('e-disabled')) {\n                                ofGroupContainer.classList.add('e-disabled');\n                            }\n                            if (groupEle.classList.contains('e-hidden')) {\n                                ofGroupContainer.classList.add('e-hidden');\n                            }\n                            if (groupEle.classList.contains('e-hide-group')) {\n                                ofGroupContainer.classList.add('e-hide-group');\n                            }\n                        }\n                        ofTabContainer.append(ofGroupContainer);\n                    }\n                    if (isResize) {\n                        ofGroupContainer.insertBefore(itemEle, ofGroupContainer.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM));\n                    }\n                    else {\n                        ofGroupContainer.append(itemEle);\n                    }\n                }\n                else {\n                    this.createOfTabContainer(groupId, groupHeader, itemEle, tabIndex);\n                }\n            }\n            overflowButton = this.overflowDDB;\n            overflowtarget = this.overflowDDB ? this.overflowDDB.target : null;\n        }\n        if (itemEle !== null) {\n            this.addOverflowEvents(item, itemEle, overflowButton);\n        }\n        if (overflowtarget) {\n            if (item.keyTip) {\n                this.addKeyTip(tabIndex, item.keyTip, item.id, 'popupitem');\n            }\n        }\n    };\n    Ribbon.prototype.addOverflowEvents = function (item, itemEle, overflowButton) {\n        switch (item.type) {\n            case 'Button':\n                this.ribbonButtonModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'DropDown':\n                this.ribbonDropDownModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'SplitButton':\n                this.ribbonSplitButtonModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'CheckBox':\n                this.ribbonCheckBoxModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'ColorPicker':\n                this.ribbonColorPickerModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'ComboBox':\n                this.ribbonComboBoxModule.addOverFlowEvents(item, itemEle, overflowButton);\n                break;\n            case 'Gallery':\n                if (this.activeLayout === 'Simplified') {\n                    this.ribbonGalleryModule.addOverFlowEvents(item, itemEle);\n                }\n                break;\n            case 'GroupButton':\n                if (this.activeLayout === 'Simplified') {\n                    this.ribbonGroupButtonModule.addOverFlowEvents(item, itemEle, overflowButton);\n                    break;\n                }\n        }\n    };\n    Ribbon.prototype.createOfTabContainer = function (groupId, groupHeader, itemEle, tabIndex) {\n        var ofTabContainer = this.createElement('div', {\n            id: this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID,\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OF_TAB_CONTAINER\n        });\n        var overflowtarget = this.overflowDDB.target;\n        overflowtarget.append(ofTabContainer);\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        var ofGroupContainer = itemProp.group.overflowHeader ?\n            this.createGroupContainer(groupId, itemProp.group.overflowHeader) : this.createGroupContainer(groupId, groupHeader);\n        ofGroupContainer.append(itemEle);\n        ofTabContainer.append(ofGroupContainer);\n        if (tabIndex === this.selectedTab) {\n            ofTabContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB_ACTIVE);\n        }\n        var groupEle = document.querySelector('#' + groupId);\n        if (groupEle) {\n            if (groupEle.classList.contains('e-disabled')) {\n                ofGroupContainer.classList.add('e-disabled');\n            }\n            if (groupEle.classList.contains('e-hidden')) {\n                ofGroupContainer.classList.add('e-hidden');\n            }\n            if (groupEle.classList.contains('e-hide-group')) {\n                ofGroupContainer.classList.add('e-hide-group');\n            }\n        }\n    };\n    Ribbon.prototype.checkGroupShrinking = function (tabIndex, tabContent, activeContent, isLarge) {\n        var isOverFlow = true;\n        var isBreak = false;\n        var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n        for (var j = (tab.groups.length - 1); (isOverFlow && (j >= 0)); j--) {\n            // eslint-disable-next-line max-len\n            isBreak = isLarge ? this.checkLargeToMedium(tabIndex, tab, j, tabContent, activeContent) : this.checkMediumToSmall(tabIndex, tab, j, tabContent, activeContent);\n            isOverFlow = !isBreak && (tabContent.offsetWidth < activeContent.offsetWidth);\n        }\n        return isBreak;\n    };\n    Ribbon.prototype.checkValidCollectionLength = function (collections) {\n        var count = 0;\n        for (var i = 0; i < collections.length; i++) {\n            var items = collections[parseInt(i.toString(), 10)].items;\n            for (var ind = 0; ind < items.length; ind++) {\n                if (items[parseInt(ind.toString(), 10)].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                    count++;\n                    break;\n                }\n            }\n            if (count > 1) {\n                return false;\n            }\n        }\n        return count === 1;\n    };\n    Ribbon.prototype.checkClassicCollection = function (collections, n, isIncrement) {\n        var items = collections[parseInt(n.toString(), 10)].items;\n        for (var ind = 0; ind < items.length; ind++) {\n            if (items[parseInt(ind.toString(), 10)].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                return n;\n            }\n        }\n        n = isIncrement ? n + 1 : n - 1;\n        if (isIncrement) {\n            return (n === collections.length) ? n : this.checkClassicCollection(collections, n, isIncrement);\n        }\n        else {\n            return (n < 0) ? n : this.checkClassicCollection(collections, n, isIncrement);\n        }\n    };\n    Ribbon.prototype.checkClassicItem = function (items, n, isIncrement) {\n        var item = items[parseInt(n.toString(), 10)];\n        if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n            return n;\n        }\n        n = isIncrement ? n + 1 : n - 1;\n        if (isIncrement) {\n            return (n === items.length) ? n : this.checkClassicItem(items, n, isIncrement);\n        }\n        else {\n            return (n < 0) ? n : this.checkClassicItem(items, n, isIncrement);\n        }\n    };\n    Ribbon.prototype.checkLargeToMedium = function (tabIndex, tab, groupIndex, tabContent, activeContent, shouldSkip) {\n        var _this = this;\n        if (shouldSkip === void 0) { shouldSkip = false; }\n        var group = tab.groups[parseInt(groupIndex.toString(), 10)];\n        if (group.isCollapsed && !shouldSkip) {\n            return false;\n        }\n        var canReduceCollection = function (collection) {\n            return (collection.items.length === 1) && canReduceItem(collection.items[0]);\n        };\n        var canReduceItem = function (item) {\n            return (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) && (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large);\n        };\n        var createShrinkEle = function (id, firstItem, start, end) {\n            var shrinkEle = _this.createElement('div', {\n                className: 'e-ribbon-shrink' + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW,\n                id: id + '_shrink_container' + start,\n                attrs: { 'data-start': start.toString(), 'data-end': end.toString() }\n            });\n            firstItem.parentElement.insertBefore(shrinkEle, firstItem);\n            if (!shouldSkip) {\n                shrinkEle.setAttribute('data-large-width', activeContent.offsetWidth.toString());\n            }\n            return shrinkEle;\n        };\n        var moveItemToColumn = function (start, end) {\n            var collection = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)].collections[0];\n            var firstItem = activeContent.querySelector('#' + collection.items[parseInt(start.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            var shrinkEle = shouldSkip ? activeContent.querySelector('#' + collection.id + '_shrink_container' + start) :\n                createShrinkEle(collection.id, firstItem, start, end);\n            for (var i = start; i <= end; i++) {\n                var item = collection.items[parseInt(i.toString(), 10)];\n                if (!(item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic)) {\n                    continue;\n                }\n                var ele = activeContent.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                shrinkEle.appendChild(ele);\n                item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton && _this.activeLayout === 'Classic') {\n                    _this.setItemSize(ele.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID), item);\n                }\n                else {\n                    _this.setItemSize(ele.querySelector('#' + item.id), item);\n                }\n            }\n        };\n        var moveCollectionToColumn = function (start, end) {\n            var group = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)];\n            var firstItem = activeContent.querySelector('#' + group.collections[parseInt(start.toString(), 10)].id);\n            var shrinkEle = shouldSkip ? activeContent.querySelector('#' + group.id + '_shrink_container' + start) :\n                createShrinkEle(group.id, firstItem, start, end);\n            for (var i = start; i <= end; i++) {\n                var collection = group.collections[parseInt(i.toString(), 10)];\n                var ele = activeContent.querySelector('#' + collection.id);\n                shrinkEle.appendChild(ele);\n                collection.items[0].setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                if (collection.items[0].type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton && _this.activeLayout === 'Classic') {\n                    _this.setItemSize(ele.querySelector('#' + collection.items[0].id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID), collection.items[0]);\n                }\n                else {\n                    _this.setItemSize(ele.querySelector('#' + collection.items[0].id), collection.items[0]);\n                }\n            }\n        };\n        var orientation = group.orientation;\n        if (orientation === _interface__WEBPACK_IMPORTED_MODULE_3__.ItemOrientation.Column) {\n            for (var k = (group.collections.length - 1); k > 0; k--) {\n                //to avoid negative index while checking for the second collection\n                k = this.checkClassicCollection(group.collections, k, false);\n                var l = k - 1;\n                //Checks the element rendered at position n\n                if ((l >= 0) && canReduceCollection(group.collections[parseInt(k.toString(), 10)])) {\n                    l = this.checkClassicCollection(group.collections, l, false);\n                    //Checks the element rendered at position n-1\n                    if ((l >= 0) && canReduceCollection(group.collections[parseInt(l.toString(), 10)])) {\n                        var m = l - 1;\n                        if (m >= 0) {\n                            m = this.checkClassicCollection(group.collections, m, false);\n                        }\n                        //Checks the element rendered at position n-2\n                        if ((m >= 0) && canReduceCollection(group.collections[parseInt(m.toString(), 10)])) {\n                            moveCollectionToColumn(m, k);\n                        }\n                        else {\n                            moveCollectionToColumn(l, k);\n                        }\n                        k = m;\n                        if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        k = l;\n                    }\n                }\n            }\n        }\n        else {\n            if (this.checkValidCollectionLength(group.collections)) {\n                var collection = group.collections[0];\n                for (var k = (collection.items.length - 1); k > 0; k--) {\n                    //to avoid negative index while checking for the second item\n                    k = this.checkClassicItem(collection.items, k, false);\n                    var l = k - 1;\n                    //Checks the element rendered at position n\n                    if ((l >= 0) && canReduceItem(collection.items[parseInt(k.toString(), 10)])) {\n                        l = this.checkClassicItem(collection.items, l, false);\n                        //Checks the element rendered at position n-1\n                        if ((l >= 0) && canReduceItem(collection.items[parseInt(l.toString(), 10)])) {\n                            var m = l - 1;\n                            //Checks the element rendered at position n-2\n                            if (m >= 0) {\n                                m = this.checkClassicItem(collection.items, m, false);\n                            }\n                            if ((m >= 0) && canReduceItem(collection.items[parseInt(m.toString(), 10)])) {\n                                moveItemToColumn(m, k);\n                            }\n                            else {\n                                moveItemToColumn(l, k);\n                            }\n                            k = m;\n                            if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                                return true;\n                            }\n                        }\n                        else {\n                            k = l;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    Ribbon.prototype.checkMediumToSmall = function (tabIndex, tab, groupIndex, tabContent, activeContent, shouldSkip) {\n        var _this = this;\n        if (shouldSkip === void 0) { shouldSkip = false; }\n        var group = tab.groups[parseInt(groupIndex.toString(), 10)];\n        if (group.isCollapsed && !shouldSkip) {\n            return false;\n        }\n        var orientation = group.orientation;\n        var ele = activeContent.querySelector('#' + group.id);\n        var shrinkColumns = ele.querySelectorAll('.' + 'e-ribbon-shrink');\n        var canReduceItem = function (item) {\n            return (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small) && (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium);\n        };\n        var reduceItemsToSmall = function (collectionIndex, start, end, middle) {\n            if (middle === void 0) { middle = null; }\n            var collection = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)].collections[parseInt(collectionIndex.toString(), 10)];\n            var reduce = function (i) {\n                var item = collection.items[parseInt(i.toString(), 10)];\n                if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                    var ele_1 = activeContent.querySelector('#' + item.id);\n                    item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small }, true);\n                    if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                        ele_1 = activeContent.querySelector('#' + item.id + '_grpbtn');\n                    }\n                    _this.setItemSize(ele_1, item);\n                }\n            };\n            reduce(start);\n            if (middle) {\n                reduce(middle);\n            }\n            reduce(end);\n        };\n        var reduceCollectionsToSmall = function (index, start, end, middle) {\n            if (middle === void 0) { middle = null; }\n            var group = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)];\n            if (!shouldSkip) {\n                shrinkColumns[parseInt(index.toString(), 10)].setAttribute('data-medium-width', activeContent.offsetWidth.toString());\n            }\n            var reduce = function (i) {\n                var collection = group.collections[parseInt(i.toString(), 10)];\n                if (collection.items[0].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                    var ele_2 = activeContent.querySelector('#' + collection.items[0].id);\n                    collection.items[0].setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small }, true);\n                    if (collection.items[0].type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                        ele_2 = activeContent.querySelector('#' + collection.items[0].id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                    }\n                    _this.setItemSize(ele_2, collection.items[0]);\n                }\n            };\n            reduce(start);\n            if (middle) {\n                reduce(middle);\n            }\n            reduce(end);\n        };\n        var setWidth = function (id) {\n            if (!shouldSkip) {\n                var ele_3 = activeContent.querySelector('#' + id);\n                ele_3.setAttribute('data-medium-width', activeContent.offsetWidth.toString());\n            }\n        };\n        if (orientation === _interface__WEBPACK_IMPORTED_MODULE_3__.ItemOrientation.Column) {\n            if (shrinkColumns.length > 0) {\n                for (var k = (shrinkColumns.length - 1); k >= 0; k--) {\n                    var start = parseInt(shrinkColumns[parseInt(k.toString(), 10)].getAttribute('data-start'), 10);\n                    var end = parseInt(shrinkColumns[parseInt(k.toString(), 10)].getAttribute('data-end'), 10);\n                    //only 2 or 3 itmes alone can be present in shrinked column\n                    var l = this.checkClassicCollection(group.collections, start + 1, false); //next valid item\n                    if (canReduceItem(group.collections[parseInt(start.toString(), 10)].items[0])\n                        && canReduceItem(group.collections[parseInt(l.toString(), 10)].items[0])) {\n                        if (end === l) { //if only 2 item, then next valid item will be the end item, else check for 3 rd item satus.\n                            reduceCollectionsToSmall(k, start, end);\n                        }\n                        else if (canReduceItem(group.collections[parseInt(end.toString(), 10)].items[0])) {\n                            reduceCollectionsToSmall(k, start, end, l);\n                        }\n                        if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            for (var k = (group.collections.length - 1); k >= 0; k--) {\n                var collection = group.collections[parseInt(k.toString(), 10)];\n                var classicItems = [];\n                for (var i = 0; i < collection.items.length; i++) {\n                    if (collection.items[parseInt(i.toString(), 10)].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                        classicItems.push(i);\n                    }\n                }\n                //If items length is 1 then, it would have been already check for shrinked column\n                if ((classicItems.length > 1)) {\n                    if (canReduceItem(collection.items[classicItems[0]]) && canReduceItem(collection.items[classicItems[1]])) {\n                        if (classicItems.length === 2) {\n                            setWidth(collection.id);\n                            reduceItemsToSmall(k, classicItems[0], classicItems[1]);\n                        }\n                        else if (canReduceItem(collection.items[classicItems[2]])) {\n                            setWidth(collection.id);\n                            reduceItemsToSmall(k, classicItems[0], classicItems[2], classicItems[1]);\n                        }\n                        if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.checkValidCollectionLength(group.collections)) {\n                if (shrinkColumns.length > 0) {\n                    for (var k = (shrinkColumns.length - 1); k >= 0; k--) {\n                        var shrinkColumn = shrinkColumns[parseInt(k.toString(), 10)];\n                        var start = parseInt(shrinkColumn.getAttribute('data-start'), 10);\n                        var end = parseInt(shrinkColumn.getAttribute('data-end'), 10);\n                        //only 2 or 3 itmes alone can be present in shrinked column\n                        var collection = group.collections[0];\n                        var l = this.checkClassicItem(collection.items, start + 1, false); //next valid item\n                        if (canReduceItem(group.collections[0].items[parseInt(start.toString(), 10)])\n                            && canReduceItem(group.collections[0].items[parseInt(l.toString(), 10)])) {\n                            if (end === l) { //if only 2 item, then next valid item will be the end item, else check for 3 rd item satus.\n                                setWidth(shrinkColumn.id);\n                                reduceItemsToSmall(0, start, end);\n                            }\n                            else if (canReduceItem(group.collections[0].items[parseInt(end.toString(), 10)])) {\n                                setWidth(shrinkColumn.id);\n                                reduceItemsToSmall(0, start, end, l);\n                            }\n                            if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                for (var k = (group.collections.length - 1); k >= 0; k--) {\n                    var collection = group.collections[parseInt(k.toString(), 10)];\n                    for (var l = (collection.items.length - 1); l >= 0; l--) {\n                        l = this.checkClassicItem(collection.items, l, false);\n                        if (l < 0) {\n                            continue;\n                        }\n                        var item = collection.items[parseInt(l.toString(), 10)];\n                        if (canReduceItem(item)) {\n                            if (item.type !== _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                setWidth(item.id);\n                            }\n                            else {\n                                setWidth(item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                            }\n                            reduceItemsToSmall(k, l, l);\n                            if (!shouldSkip && (tabContent.offsetWidth > activeContent.offsetWidth)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    Ribbon.prototype.checkGroupExpanding = function (tabIndex, tabContent, activeContent, isSmall) {\n        var isBreak = false;\n        var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n        for (var j = 0; (!isBreak && (j < tab.groups.length)); j++) {\n            isBreak = isSmall ? this.checkSmallToMedium(tabIndex, tab, j, tabContent, activeContent, false, true) :\n                this.checkMediumToLarge(tabIndex, tab, j, tabContent, activeContent, false, true);\n        }\n        return isBreak;\n    };\n    // eslint-disable-next-line max-len\n    Ribbon.prototype.checkSmallToMedium = function (tabIndex, tab, groupIndex, tabContent, activeContent, shouldSkip, shouldClear) {\n        var _this = this;\n        var group = tab.groups[parseInt(groupIndex.toString(), 10)];\n        var orientation = group.orientation;\n        var ele = activeContent.querySelector('#' + group.id);\n        var shrinkColumns = ele.querySelectorAll('.' + 'e-ribbon-shrink');\n        var canExpandItem = function (item) {\n            return (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) && (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small);\n        };\n        var expandItemToMedium = function (collectionIndex, index, parentEle) {\n            var collection = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)].collections[parseInt(collectionIndex.toString(), 10)];\n            var item = collection.items[parseInt(index.toString(), 10)];\n            if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                var ele_4 = parentEle.id === item.id ? parentEle : parentEle.querySelector('#' + item.id);\n                item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                    ele_4 = document.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                }\n                _this.setItemSize(ele_4, item);\n            }\n        };\n        var expandCollectionsToMedium = function (i) {\n            var collections = _this.tabs[parseInt(tabIndex.toString(), 10)]\n                .groups[parseInt(groupIndex.toString(), 10)].collections;\n            var item = collections[parseInt(i.toString(), 10)].items[0];\n            if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                var ele_5 = activeContent.querySelector('#' + collections[parseInt(i.toString(), 10)].items[0].id);\n                collections[parseInt(i.toString(), 10)].items[0].setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                    ele_5 = activeContent.querySelector('#' + collections[parseInt(i.toString(), 10)].items[0].id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                }\n                _this.setItemSize(ele_5, collections[parseInt(i.toString(), 10)].items[0]);\n            }\n        };\n        if (orientation === _interface__WEBPACK_IMPORTED_MODULE_3__.ItemOrientation.Row) {\n            // collection length is 1, then the it wll be covered in shrinked columns\n            if (!this.checkValidCollectionLength(group.collections)) {\n                for (var k = 0; k < group.collections.length; k++) {\n                    var collection = group.collections[parseInt(k.toString(), 10)];\n                    for (var l = 0; l < collection.items.length; l++) {\n                        l = this.checkClassicItem(collection.items, l, true);\n                        if (l === collection.items.length) {\n                            continue;\n                        }\n                        var item = collection.items[parseInt(l.toString(), 10)];\n                        if (canExpandItem(item)) {\n                            var itemEle = activeContent.querySelector('#' + item.id);\n                            if (item.type === 'GroupButton') {\n                                itemEle = activeContent.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                            }\n                            var valString = itemEle.getAttribute('data-medium-width');\n                            var value = valString ? parseInt(valString, 10) : null;\n                            if (value && (shouldSkip || (tabContent.offsetWidth > value))) {\n                                expandItemToMedium(k, l, itemEle);\n                                if (!shouldSkip || shouldClear) {\n                                    itemEle.removeAttribute('data-medium-width');\n                                }\n                            }\n                            else if (value) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            for (var k = 0; k < group.collections.length; k++) {\n                //If items length is 1 then, it will be handled in shrinked column\n                if ((group.collections[parseInt(k.toString(), 10)].items.length > 1)) {\n                    var collection = group.collections[parseInt(k.toString(), 10)];\n                    var itemEle = activeContent.querySelector('#' + collection.id);\n                    var valString = itemEle.getAttribute('data-medium-width');\n                    var value = valString ? parseInt(valString, 10) : null;\n                    var classicItems = [];\n                    for (var i = 0; i < collection.items.length; i++) {\n                        if (collection.items[parseInt(i.toString(), 10)].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                            classicItems.push(i);\n                        }\n                    }\n                    if ((classicItems.length > 1) && value && (shouldSkip || (tabContent.offsetWidth > value))) {\n                        expandItemToMedium(k, classicItems[0], itemEle);\n                        expandItemToMedium(k, classicItems[1], itemEle);\n                        if (classicItems.length === 3) {\n                            expandItemToMedium(k, classicItems[2], itemEle);\n                        }\n                        if (!shouldSkip || shouldClear) {\n                            itemEle.removeAttribute('data-medium-width');\n                        }\n                    }\n                    else if (value) {\n                        return true;\n                    }\n                }\n            }\n        }\n        if (shrinkColumns.length > 0) {\n            for (var k = 0; k < shrinkColumns.length; k++) {\n                var shrinkColumn = shrinkColumns[parseInt(k.toString(), 10)];\n                var valString = shrinkColumn.getAttribute('data-medium-width');\n                var value = valString ? parseInt(valString, 10) : null;\n                if (value && (shouldSkip || (tabContent.offsetWidth > value))) {\n                    var start = parseInt(shrinkColumn.getAttribute('data-start'), 10);\n                    var end = parseInt(shrinkColumn.getAttribute('data-end'), 10);\n                    if (orientation === _interface__WEBPACK_IMPORTED_MODULE_3__.ItemOrientation.Row) {\n                        var collection = group.collections[0];\n                        var l = this.checkClassicItem(collection.items, start + 1, true); //next valid item\n                        expandItemToMedium(0, start, shrinkColumn);\n                        expandItemToMedium(0, l, shrinkColumn);\n                        // if l == end, then l is the last item, else L is the middle item. If l is middle then call the method for end.\n                        if (l !== end) {\n                            expandItemToMedium(0, end, shrinkColumn);\n                        }\n                    }\n                    else {\n                        var m = this.checkClassicCollection(group.collections, start + 1, true); //next valid item\n                        expandCollectionsToMedium(start);\n                        expandCollectionsToMedium(m);\n                        if (m !== end) {\n                            expandCollectionsToMedium(end);\n                        }\n                    }\n                    if (!shouldSkip || shouldClear) {\n                        shrinkColumn.removeAttribute('data-medium-width');\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Ribbon.prototype.checkMediumToLarge = function (tabIndex, tab, groupIndex, tabContent, activeContent, shouldSkip, shouldClear) {\n        var _this = this;\n        var group = tab.groups[parseInt(groupIndex.toString(), 10)];\n        var orientation = group.orientation;\n        var ele = activeContent.querySelector('#' + group.id);\n        var shrinkColumns = ele.querySelectorAll('.' + 'e-ribbon-shrink');\n        if (shrinkColumns.length === 0) {\n            return false;\n        }\n        var expandItemsToLarge = function (start, end, parentEle, middle) {\n            var items = _this.tabs[parseInt(tabIndex.toString(), 10)].\n                groups[parseInt(groupIndex.toString(), 10)].collections[0].items;\n            var reduce = function (i) {\n                var item = items[parseInt(i.toString(), 10)];\n                if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                    var container = parentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    var ele_6 = container.querySelector('#' + item.id);\n                    item.setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large }, true);\n                    if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                        ele_6 = container.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                    }\n                    _this.setItemSize(ele_6, item);\n                    parentEle.insertAdjacentElement('beforebegin', container);\n                }\n            };\n            reduce(start);\n            if (middle) {\n                reduce(middle);\n            }\n            reduce(end);\n            if (!shouldSkip || shouldClear) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(parentEle);\n            }\n        };\n        var expandCollectionsToLarge = function (start, end, parentEle, middle) {\n            var collections = _this.tabs[parseInt(tabIndex.toString(), 10)].\n                groups[parseInt(groupIndex.toString(), 10)].collections;\n            var reduce = function (i) {\n                var collection = collections[parseInt(i.toString(), 10)];\n                if (collection.items[0].displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                    var collectionEle = parentEle.querySelector('#' + collection.id);\n                    var ele_7 = collectionEle.querySelector('#' + collection.items[0].id);\n                    collection.items[0].setProperties({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large }, true);\n                    if (collection.items[0].type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                        ele_7 = collectionEle.querySelector('#' + collection.items[0].id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                    }\n                    _this.setItemSize(ele_7, collection.items[0]);\n                    parentEle.insertAdjacentElement('beforebegin', collectionEle);\n                }\n            };\n            reduce(start);\n            if (middle) {\n                reduce(middle);\n            }\n            reduce(end);\n            if (!shouldSkip || shouldClear) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(parentEle);\n            }\n        };\n        for (var k = 0; k < shrinkColumns.length; k++) {\n            var shrinkColumn = shrinkColumns[parseInt(k.toString(), 10)];\n            var valString = shrinkColumn.getAttribute('data-large-width');\n            var value = valString ? parseInt(valString, 10) : null;\n            if (value && (shouldSkip || (tabContent.offsetWidth > value))) {\n                var start = parseInt(shrinkColumn.getAttribute('data-start'), 10);\n                var end = parseInt(shrinkColumn.getAttribute('data-end'), 10);\n                if (orientation === _interface__WEBPACK_IMPORTED_MODULE_3__.ItemOrientation.Row) {\n                    var collection = group.collections[0];\n                    var l = this.checkClassicItem(collection.items, start + 1, true); //next valid item\n                    if (l === end) {\n                        expandItemsToLarge(start, end, shrinkColumn);\n                    }\n                    else {\n                        expandItemsToLarge(start, end, shrinkColumn, l);\n                    }\n                }\n                else {\n                    var m = this.checkClassicCollection(group.collections, start + 1, true); //next valid item\n                    if (m === end) {\n                        expandCollectionsToLarge(start, end, shrinkColumn);\n                    }\n                    else {\n                        expandCollectionsToLarge(start, end, shrinkColumn, m);\n                    }\n                }\n                if (!shouldSkip || shouldClear) {\n                    shrinkColumn.removeAttribute('data-large-width');\n                }\n            }\n            else if (value) {\n                return true;\n            }\n        }\n        return false;\n    };\n    Ribbon.prototype.handleContentSize = function (itemEle, isRemoveOverflow) {\n        var itemContainer = itemEle.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTENT);\n        if (isRemoveOverflow) {\n            itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n        }\n        else {\n            itemContainer.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n        }\n    };\n    Ribbon.prototype.setItemSize = function (itemEle, item) {\n        if (itemEle) {\n            var itemContainer = itemEle.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM);\n            if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Button) {\n                this.ribbonButtonModule.updateButtonSize(itemEle, item);\n            }\n            else if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) {\n                this.ribbonDropDownModule.updateDropDownSize(itemEle, item);\n            }\n            else if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) {\n                this.ribbonSplitButtonModule.updateSplitButtonSize(itemEle, item);\n            }\n            else if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Template) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(itemEle);\n                this.createTemplateContent(item, itemContainer);\n            }\n            else if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                this.ribbonGroupButtonModule.updateGroupButtonSize(itemEle, item);\n            }\n            itemContainer.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LARGE_ITEM, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MEDIUM_ITEM, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SMALL_ITEM);\n            if (item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) {\n                itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LARGE_ITEM, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n            }\n            else {\n                itemContainer.classList.add((item.activeSize === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ?\n                    _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MEDIUM_ITEM : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SMALL_ITEM);\n            }\n        }\n    };\n    Ribbon.prototype.createOverflowDropdown = function (tabIndex, tabContent, activeContent) {\n        var collapseOrder = this.getGroupResizeOrder(true, tabIndex);\n        if (collapseOrder.length === 0) {\n            return;\n        }\n        var _loop_1 = function (i) {\n            var group = collapseOrder[parseInt(i.toString(), 10)];\n            var groupEle = this_1.tabObj.element.querySelector('#' + group.id);\n            groupEle.setAttribute('data-expanded-width', activeContent.offsetWidth.toString());\n            var groupContainer = groupEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            var groupOverFlow = this_1.createElement('div', {\n                className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_OVERFLOW + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LARGE_ITEM,\n                id: group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID\n            });\n            groupEle.insertBefore(groupOverFlow, groupContainer);\n            var groupIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this_1.tabs[parseInt(tabIndex.toString(), 10)].groups, function (e) { return e.id === group.id; });\n            var tab = this_1.tabs[parseInt(tabIndex.toString(), 10)];\n            //Expanding the items in the group to their original expanded state\n            this_1.checkSmallToMedium(tabIndex, tab, groupIndex, tabContent, activeContent, true, false);\n            this_1.checkMediumToLarge(tabIndex, tab, groupIndex, tabContent, activeContent, true, false);\n            var dropdown = this_1.ribbonDropDownModule.createOverFlowDropDown(group.id, group.header, group.groupIconCss, groupContainer, groupOverFlow, this_1.enableRtl);\n            if (group.keyTip) {\n                var overflowDDB = group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID;\n                this_1.addKeyTip(tabIndex, group.keyTip, overflowDDB, 'grpoverflow');\n            }\n            this_1.tabs[parseInt(tabIndex.toString(), 10)].\n                groups[parseInt(groupIndex.toString(), 10)].setProperties({ isCollapsed: true }, true);\n            for (var j = 0; j < group.collections.length; j++) {\n                var collection = group.collections[parseInt(j.toString(), 10)];\n                var collectionEle = groupContainer.querySelector('#' + collection.id);\n                for (var k = 0; k < collection.items.length; k++) {\n                    var item = collection.items[parseInt(k.toString(), 10)];\n                    var itemEle = collectionEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (itemEle !== null) {\n                        this_1.handleContentSize(itemEle);\n                        this_1.addOverflowEvents(item, itemEle, dropdown);\n                    }\n                    var overflowDDB = document.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID);\n                    var overflowButton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDB, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    if (overflowButton) {\n                        var overflowtarget = overflowButton.target;\n                        if (overflowtarget) {\n                            if (this_1.keyTipElements[parseInt(tabIndex.toString(), 10)]) {\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                    for (var i_3 = 0; i_3 < item.groupButtonSettings.items.length; i_3++) {\n                                        if (item.groupButtonSettings.items[parseInt(i_3.toString(), 10)].keyTip) {\n                                            this_1.addKeyTip(tabIndex, item.groupButtonSettings.items[parseInt(i_3.toString(), 10)].keyTip, item.id + (_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i_3), 'grpoverflowpopup');\n                                        }\n                                    }\n                                }\n                                if (item.keyTip) {\n                                    this_1.addKeyTip(tabIndex, item.keyTip, item.id, 'grpoverflowpopup');\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; ((i < collapseOrder.length) && (tabContent.offsetWidth < activeContent.offsetWidth)); i++) {\n            _loop_1(i);\n        }\n    };\n    // eslint-disable-next-line max-len\n    Ribbon.prototype.removeOverflowDropdown = function (tabContent, activeContent, isClear, tabIndex) {\n        if (isClear === void 0) { isClear = false; }\n        var expandOrder = this.getGroupResizeOrder(false, tabIndex);\n        if (expandOrder.length === 0) {\n            return false;\n        }\n        var _loop_2 = function (i) {\n            var group = expandOrder[parseInt(i.toString(), 10)];\n            var groupEle = this_2.tabObj.element.querySelector('#' + group.id);\n            if (!groupEle) {\n                return \"break\";\n            } //to handle the rerendering of tabcontrol when a ribbon tab is added/removed\n            var width = parseInt(groupEle.getAttribute('data-expanded-width'), 10);\n            if (!isClear && (tabContent.offsetWidth < width)) {\n                return { value: true };\n            }\n            this_2.removeDropdown(group.id);\n            var groupIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this_2.tabs[parseInt(tabIndex.toString(), 10)].groups, function (e) { return e.id === group.id; });\n            this_2.tabs[parseInt(tabIndex.toString(), 10)].\n                groups[parseInt(groupIndex.toString(), 10)].setProperties({ isCollapsed: false }, true);\n            var tab = this_2.tabs[parseInt(tabIndex.toString(), 10)];\n            //Shrinking the items in the group to their previous shrinked state (before moving to dropdown)\n            this_2.checkLargeToMedium(tabIndex, tab, groupIndex, tabContent, activeContent, true);\n            this_2.checkMediumToSmall(tabIndex, tab, groupIndex, tabContent, activeContent, true);\n            for (var j = 0; j < group.collections.length; j++) {\n                var collection = group.collections[parseInt(j.toString(), 10)];\n                var collectionEle = groupEle.querySelector('#' + collection.id);\n                for (var k = 0; k < collection.items.length; k++) {\n                    var item = collection.items[parseInt(k.toString(), 10)];\n                    var itemEle = collectionEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (itemEle !== null) {\n                        this_2.handleContentSize(itemEle, true);\n                        this_2.removeOverflowEvent(item, itemEle);\n                    }\n                }\n            }\n        };\n        var this_2 = this;\n        for (var i = 0; i < expandOrder.length; i++) {\n            var state_1 = _loop_2(i);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n            if (state_1 === \"break\")\n                break;\n        }\n        return false;\n    };\n    Ribbon.prototype.removeDropdown = function (groupId) {\n        var dropdownElement = this.tabObj.element.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID);\n        if (dropdownElement) {\n            var groupOverFlow = dropdownElement.parentElement;\n            this.ribbonDropDownModule.removeOverFlowDropDown(dropdownElement);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(groupOverFlow);\n        }\n    };\n    Ribbon.prototype.getGroupResizeOrder = function (isCollapse, tabIndex) {\n        var _this = this;\n        var groups = this.tabs[parseInt(tabIndex.toString(), 10)].groups;\n        groups = groups.filter(function (e) {\n            // (isUndefined(e.isCollapsible) || e.isCollapsible) => check whethe rhte item is collapsible\n            // if a isCollapsed property is undefined, then it is considered collapsible and included in collapsible list\n            // ((isCollapse && !e.isCollapsed)||(!isCollapse && e.isCollapsed)) => isCollapse !== e.isCollapsed\n            return (_this.activeLayout === 'Classic') ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(e.isCollapsible) || e.isCollapsible) && ((isCollapse &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(e.isCollapsed)) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(e.isCollapsed) && (isCollapse !== e.isCollapsed))) : true;\n        });\n        //sort the collapsible groups based on the priority\n        groups.sort(function (a, b) { return a.priority - b.priority; });\n        //reverse the sorted array to return the array in descending order while collapsing.\n        return isCollapse ? groups.reverse() : groups;\n    };\n    Ribbon.prototype.destroyScroll = function () {\n        if (this.scrollModule) {\n            this.scrollModule.destroy();\n            this.scrollModule = null;\n        }\n    };\n    Ribbon.prototype.clearOverflowDropDown = function (index) {\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[parseInt(index.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        if (!activeContent) {\n            return;\n        }\n        var tabContent = activeContent.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_CONTENT);\n        if (this.activeLayout === 'Simplified') {\n            this.removeSimplfiedOverflow(activeContent, tabContent, index, true);\n        }\n        else {\n            this.removeOverflowDropdown(activeContent, tabContent, true, index);\n        }\n    };\n    Ribbon.prototype.isContextualTab = function (tabID) {\n        var isContextual = false;\n        if (this.contextualTabs.length) {\n            for (var i = 0; i < this.contextualTabs.length; i++) {\n                for (var j = 0; j < this.contextualTabs[parseInt(i.toString(), 10)].tabs.length; j++) {\n                    if (this.contextualTabs[parseInt(i.toString(), 10)].tabs[parseInt(j.toString(), 10)].id === tabID) {\n                        isContextual = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return isContextual;\n    };\n    Ribbon.prototype.ribbonTabSelecting = function (e) {\n        var _this = this;\n        this.currentControlIndex = 0;\n        var nextTabId = e.selectingItem ? e.selectingItem.getAttribute('data-id') : null;\n        var previousTabId = e.previousItem.getAttribute('data-id');\n        var nextIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, (function (tab) { return (tab.id === nextTabId); }));\n        var isContextual = this.isContextualTab(nextTabId);\n        var previousIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, (function (tab) { return (tab.id === previousTabId); }));\n        nextIndex = nextIndex === -1 ? this.selectedTab : nextIndex;\n        var eventArgs = {\n            cancel: e.cancel, isInteracted: e.isInteracted, previousIndex: previousIndex,\n            selectedIndex: nextIndex, isContextual: isContextual\n        };\n        this.trigger('tabSelecting', eventArgs, function (args) {\n            if (args.cancel) {\n                return;\n            }\n            _this.destroyScroll();\n            if (!_this.isAddRemove && (previousIndex !== -1)) {\n                _this.clearOverflowDropDown(previousIndex);\n            }\n            var selectedTabContent = _this.tabObj.items[parseInt(nextIndex.toString(), 10)].content;\n            if ((!selectedTabContent.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP)) && (_this.tabs[parseInt(nextIndex.toString(), 10)].groups.length !== 0)) {\n                var elements = _this.createGroups(_this.tabs[parseInt(nextIndex.toString(), 10)].groups, nextIndex);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, selectedTabContent);\n            }\n        });\n    };\n    Ribbon.prototype.createTabItems = function (tabs) {\n        var _this = this;\n        var tabItems = [];\n        var _loop_3 = function (i) {\n            var ribbonTab = tabs[parseInt(i.toString(), 10)];\n            var header = this_3.createElement('span', {\n                innerHTML: ribbonTab.header,\n                id: ribbonTab.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID\n            });\n            var tabIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this_3.tabs, (function (tab) { return (tab.id === ribbonTab.id); }));\n            if (ribbonTab.keyTip) {\n                if (!this_3.keyTipElements[parseInt(tabIndex.toString(), 10)]) {\n                    this_3.keyTipElements[parseInt(tabIndex.toString(), 10)] = {};\n                }\n                this_3.addKeyTip(tabIndex, ribbonTab.keyTip, ribbonTab.id, 'tab');\n            }\n            header.onclick = function () { _this.minimize(false); };\n            header.ondblclick = function () { _this.minimize(true); };\n            var tab = { header: { text: header }, id: ribbonTab.id, cssClass: ribbonTab.cssClass };\n            var content = this_3.createElement('div', {\n                className: tab.cssClass,\n                id: ribbonTab.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID\n            });\n            content.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TAB_ITEM);\n            tab.content = content;\n            tabItems.push(tab);\n        };\n        var this_3 = this;\n        for (var i = 0; i < tabs.length; i++) {\n            _loop_3(i);\n        }\n        return tabItems;\n    };\n    Ribbon.prototype.renderInitialTab = function (index) {\n        var elements = this.createGroups(this.tabs[parseInt(index.toString(), 10)].groups, index);\n        var content = this.tabObj.items[parseInt(index.toString(), 10)].content;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, content);\n        if (this.activeLayout === 'Simplified') {\n            this.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SIMPLIFIED_MODE);\n        }\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[this.selectedTab].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        if (this.ribbonGalleryModule) {\n            this.ribbonGalleryModule.checkAvailableHeight(activeContent);\n        }\n        this.checkOverflow(this.selectedTab, activeContent);\n    };\n    Ribbon.prototype.addOverflowButton = function (btnId, isGroupOF) {\n        var _this = this;\n        var overflowButton = this.createElement('button', {\n            id: btnId\n        });\n        var overflowTarget = this.createElement('div', {\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW_TARGET,\n            attrs: { 'tabindex': '0' }\n        });\n        var overflowDDB = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton({\n            iconCss: _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ICON,\n            cssClass: _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWNBUTTON_HIDE + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_OVERFLOW_DDB,\n            target: overflowTarget,\n            locale: this.locale,\n            enableRtl: this.enableRtl,\n            enablePersistence: this.enablePersistence,\n            beforeOpen: function (args) {\n                var eventArgs = { element: args.element, event: args.event, cancel: args.cancel };\n                _this.trigger('overflowPopupOpen', eventArgs, function (ribbonArgs) {\n                    if (ribbonArgs.cancel) {\n                        args.cancel = true;\n                    }\n                });\n            },\n            beforeClose: function (args) {\n                var ele = args.event ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.event.target, '.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_POPUP_CONTROL) : null;\n                var groupButtonEle = args.event ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.event.target, '.e-ribbon-group-button-overflow-popup') : null;\n                var eventArgs = { element: args.element, event: args.event, cancel: args.cancel };\n                _this.trigger('overflowPopupClose', eventArgs, function (ribbonArgs) {\n                    if (ele || ribbonArgs.cancel || groupButtonEle) {\n                        args.cancel = true;\n                    }\n                });\n            }\n        }, overflowButton);\n        this.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.createTooltip)(overflowTarget, this);\n        if (!isGroupOF) {\n            this.keyTipElements['overflowbtn'] = [];\n            this.keyTipElements['overflowbtn'].push({ id: btnId, type: 'overflowbtn', keyTip: '00' });\n        }\n        var isGroupOf;\n        overflowButton.onkeydown = overflowButton.onclick = function () { _this.itemIndex = -1; isGroupOf = overflowButton.classList.contains('e-ribbon-overall-of-btn') ? false : true; };\n        overflowTarget.onkeydown = function (e) { return (_this.upDownKeyHandler(e, overflowTarget, isGroupOf), _this); };\n        return overflowDDB;\n    };\n    Ribbon.prototype.upDownKeyHandler = function (e, target, isGroupOf) {\n        var items;\n        if (isGroupOf) {\n            items = target.getElementsByClassName('e-ribbon-item');\n        }\n        else {\n            var currentList = target.querySelector('.e-ribbon-of-tab.e-ribbon-active');\n            items = currentList.getElementsByClassName('e-ribbon-item');\n        }\n        var control = items[(!this.itemIndex || this.itemIndex < 0) ? 0 : this.itemIndex].querySelector('.e-control');\n        var comboBoxEle = control && control.classList.contains('e-combobox') ?\n            items[(!this.itemIndex || this.itemIndex < 0) ? 0 : this.itemIndex].querySelector('.e-combobox') : null;\n        var ribbonItem;\n        var templateEle;\n        if (comboBoxEle === null || (e.key === 'Tab') || this.itemIndex < 0) {\n            if (e.key === 'ArrowDown' || (!e.shiftKey && e.key === 'Tab')) {\n                if ((!this.itemIndex && this.itemIndex !== 0) || this.itemIndex < 0 || this.itemIndex === items.length - 1) {\n                    this.itemIndex = 0;\n                    ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n                    this.findDisabledItem(ribbonItem, items, true);\n                    if (comboBoxEle && e.key === 'Tab') {\n                        e.preventDefault();\n                        var item = items[this.itemIndex].querySelector('.e-control');\n                        if (item) {\n                            item.focus();\n                        }\n                    }\n                    templateEle = items[this.itemIndex].querySelector('.e-ribbon-template');\n                }\n                else if (this.itemIndex < items.length - 1 && this.itemIndex >= 0) {\n                    this.itemIndex++;\n                    ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n                    this.findDisabledItem(ribbonItem, items, true);\n                    templateEle = items[this.itemIndex].querySelector('.e-ribbon-template');\n                }\n                if (templateEle) {\n                    templateEle.focus();\n                }\n            }\n            else if (e.key === 'ArrowUp' || (e.shiftKey && e.key === 'Tab')) {\n                if (comboBoxEle === null || (e.key === 'Tab')) {\n                    if (!this.itemIndex || this.itemIndex === -1) {\n                        this.itemIndex = items.length - 1;\n                        ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n                        this.findDisabledItem(ribbonItem, items, false);\n                        if (comboBoxEle && (e.shiftKey && e.key === 'Tab')) {\n                            e.preventDefault();\n                            var item = items[this.itemIndex].querySelector('.e-control');\n                            if (item) {\n                                item.focus();\n                            }\n                        }\n                        templateEle = items[this.itemIndex].querySelector('.e-ribbon-template');\n                    }\n                    else if (this.itemIndex <= items.length - 1 && this.itemIndex > 0) {\n                        this.itemIndex--;\n                        ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n                        this.findDisabledItem(ribbonItem, items, false);\n                        templateEle = items[this.itemIndex].querySelector('.e-ribbon-template');\n                    }\n                    if (templateEle) {\n                        templateEle.focus();\n                    }\n                }\n            }\n            target.setAttribute('index', this.itemIndex.toString());\n        }\n        var currentItemIndex = parseInt(target.getAttribute('index'), 10);\n        var itemType = '';\n        var controlItem = items[parseInt(currentItemIndex.toString(), 10)] ? items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-control') : null;\n        if (controlItem) {\n            itemType = controlItem.getAttribute('data-control');\n        }\n        if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === ' ' || e.key === 'Tab') {\n            if (itemType === 'ColorPicker') {\n                if (e.key === 'Tab') {\n                    e.preventDefault();\n                }\n                items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-split-colorpicker').focus();\n            }\n            else {\n                if (e.key === 'Tab') {\n                    e.preventDefault();\n                }\n                var elem = items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-control');\n                if (elem) {\n                    elem.focus();\n                }\n            }\n            if (e.key === ' ' && (itemType === 'CheckBox')) {\n                var checkBoxEle = items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-control');\n                var checkBox = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(checkBoxEle, _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_9__.CheckBox);\n                this.itemIndex = -1;\n                checkBox.click();\n            }\n        }\n        if (((itemType === 'SplitButton') && (e.key === 'ArrowRight' || e.key === 'ArrowLeft'))) {\n            if (e.key === 'ArrowRight') {\n                if (this.enableRtl) {\n                    items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-control').focus();\n                }\n                else {\n                    items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-dropdown-btn').focus();\n                }\n            }\n            if (e.key === 'ArrowLeft') {\n                if (this.enableRtl) {\n                    items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-dropdown-btn').focus();\n                }\n                else {\n                    items[parseInt(currentItemIndex.toString(), 10)].querySelector('.e-control').focus();\n                }\n            }\n        }\n        if (e.key === 'Enter') {\n            this.itemIndex = -1;\n        }\n    };\n    Ribbon.prototype.findDisabledItem = function (ribbonItem, items, isIncrease) {\n        while (ribbonItem && ribbonItem.classList.contains('e-disabled')) {\n            if (isIncrease) {\n                if (this.itemIndex === items.length - 1 && items[this.itemIndex].closest('.e-ribbon-item').classList.contains('e-disabled')) {\n                    this.itemIndex = -1;\n                }\n            }\n            else {\n                if (this.itemIndex === 0 && items[this.itemIndex].closest('.e-ribbon-item').classList.contains('e-disabled')) {\n                    this.itemIndex = items.length;\n                }\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            isIncrease ? this.itemIndex++ : this.itemIndex--;\n            ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n        }\n    };\n    Ribbon.prototype.removeOverflowButton = function (overflowDDB) {\n        if (overflowDDB) {\n            var btnEle = overflowDDB.element;\n            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.destroyTooltip)(overflowDDB.target);\n            overflowDDB.destroy();\n            btnEle.remove();\n        }\n    };\n    Ribbon.prototype.removeOverflowEvent = function (item, itemEle) {\n        if (itemEle) {\n            switch (item.type) {\n                case 'Button':\n                    this.ribbonButtonModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'DropDown':\n                    this.ribbonDropDownModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'SplitButton':\n                    this.ribbonSplitButtonModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'CheckBox':\n                    this.ribbonCheckBoxModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'ColorPicker':\n                    this.ribbonColorPickerModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'ComboBox':\n                    this.ribbonComboBoxModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'Gallery':\n                    this.ribbonGalleryModule.removeOverFlowEvents(item, itemEle);\n                    break;\n                case 'GroupButton':\n                    this.ribbonGroupButtonModule.removeOverFlowEvents(item, itemEle);\n                    break;\n            }\n        }\n    };\n    Ribbon.prototype.createGroupContainer = function (groupId, groupHeader) {\n        var ofGroupContainer = this.createElement('div', {\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OF_GROUP_CONTAINER,\n            id: groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID\n        });\n        var ofGroupHeader = this.createElement('div', {\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW_HEADER,\n            id: groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID,\n            innerHTML: groupHeader\n        });\n        ofGroupContainer.append(ofGroupHeader);\n        return ofGroupContainer;\n    };\n    Ribbon.prototype.addExpandCollapse = function () {\n        var _this = this;\n        this.collapseButton = this.createElement('span', {\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLAPSE_BUTTON + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + _constant__WEBPACK_IMPORTED_MODULE_6__.EXPAND_COLLAPSE_ICON,\n            id: this.tabObj.element.id + _constant__WEBPACK_IMPORTED_MODULE_6__.COLLAPSE_BUTTON_ID,\n            attrs: { 'tabindex': '0', 'type': 'button', 'aria-label': 'Layout Switcher', 'role': 'button' }\n        });\n        this.collapseButton.onclick = function (e) { _this.toggleLayout(e); };\n        this.collapseButton.onkeydown = function (e) {\n            if (e.key === 'Enter') {\n                _this.toggleLayout(e);\n            }\n        };\n        this.element.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLAPSIBLE);\n        if (this.activeLayout === 'Simplified') {\n            this.collapseButton.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_EXPAND_BUTTON);\n        }\n        this.tabObj.element.appendChild(this.collapseButton);\n        if (this.layoutSwitcherKeyTip) {\n            this.keyTipElements['collapse'] = [];\n            this.keyTipElements['collapse'].push({ id: this.collapseButton.id, type: 'collapse', keyTip: this.layoutSwitcherKeyTip });\n        }\n    };\n    Ribbon.prototype.removeExpandCollapse = function () {\n        var _this = this;\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tooltipData, function (e) { return e.id === _this.collapseButton.id; });\n        if (index !== -1) {\n            this.tooltipData.splice(index, 1);\n        }\n        this.element.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLAPSIBLE);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.tabObj.element.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLAPSE_BUTTON));\n        this.collapseButton = null;\n    };\n    Ribbon.prototype.reRenderTabs = function (tabs) {\n        this.destroyScroll();\n        this.checkID(this.tabs, 'tab', this.element.id);\n        for (var _i = 0, _a = Object.keys(tabs); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var index = parseInt(key, 10);\n            var tab = tabs[parseInt(index.toString(), 10)];\n            var isNewTab = false;\n            for (var j = 0; j < (this.tabObj.items.length); j++) {\n                if (this.tabs[parseInt(index.toString(), 10)].id === this.tabObj.items[parseInt(j.toString(), 10)].id) {\n                    isNewTab = true;\n                    break;\n                }\n            }\n            if (!isNewTab) {\n                this.destroyTabItems(this.tabsInternal);\n                this.tabsInternal = this.tabs.slice();\n                this.validateItemSize();\n                var tabItems = this.createTabItems(this.tabs);\n                if (this.selectedTab >= this.tabs.length) {\n                    this.selectedTab = this.tabs.length - 1;\n                }\n                this.tabObj.setProperties({ items: tabItems, selectedItem: this.selectedTab });\n                break;\n            }\n            else {\n                var groups = this.tabs[parseInt(index.toString(), 10)].groups;\n                var tabEle = this.tabObj.element;\n                var ribbonTab = this.tabs[parseInt(index.toString(), 10)];\n                ribbonTab.setProperties(tab, true);\n                this.setProperties({ groups: this.checkID(ribbonTab.groups, 'group', ribbonTab.id) }, true);\n                this.validateItemSize();\n                var contentEle = this.tabObj.items[parseInt(index.toString(), 10)].content;\n                if (groups) {\n                    // Check whether header is passed by the user and sets the updated values.\n                    if (tab.header) {\n                        this.tabObj.items[parseInt(index.toString(), 10)].header.text.innerText = ribbonTab.header;\n                    }\n                    // Check whether cssClass is passed by the user, and if it is, then remove the old values.\n                    if (tab.cssClass) {\n                        if (this.tabObj.items[parseInt(index.toString(), 10)].cssClass) {\n                            contentEle.classList.remove(this.tabObj.items[parseInt(index.toString(), 10)].cssClass);\n                            tabEle.querySelector('.e-active').classList.remove(this.tabObj.items[parseInt(index.toString(), 10)].cssClass);\n                        }\n                        contentEle.classList.add(ribbonTab.cssClass);\n                        tabEle.querySelector('.e-active').classList.add(ribbonTab.cssClass);\n                    }\n                    // Check whether group is passed by the user, and if it is, then remove the old values.\n                    if (tab.groups) {\n                        for (var _b = 0, groups_1 = groups; _b < groups_1.length; _b++) {\n                            var group = groups_1[_b];\n                            var dropdownElement = group.isCollapsed ? contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID) : null;\n                            for (var _c = 0, _d = group.collections; _c < _d.length; _c++) {\n                                var collection = _d[_c];\n                                for (var _e = 0, _f = collection.items; _e < _f.length; _e++) {\n                                    var item = _f[_e];\n                                    var ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id) : contentEle.querySelector('#' + item.id);\n                                    if (ele) {\n                                        this.destroyFunction(item, ele);\n                                    }\n                                }\n                            }\n                            if (dropdownElement) {\n                                this.ribbonDropDownModule.removeOverFlowDropDown(dropdownElement);\n                            }\n                        }\n                        var groupElements = contentEle.querySelectorAll('.e-ribbon-group');\n                        // eslint-disable-next-line @typescript-eslint/tslint/config\n                        groupElements.forEach(function (groupEle) { groupEle.remove(); });\n                        var elements = this.createGroups(ribbonTab.groups, index);\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, contentEle);\n                    }\n                }\n            }\n        }\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[this.selectedTab].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        this.checkOverflow(this.selectedTab, activeContent);\n    };\n    Ribbon.prototype.switchLayout = function () {\n        this.currentControlIndex = 0;\n        this.destroyScroll();\n        this.collapseButton.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_EXPAND_BUTTON, this.activeLayout === 'Simplified');\n        this.element.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SIMPLIFIED_MODE, this.activeLayout === 'Simplified');\n        for (var i = 0; i <= (this.tabs.length - 1); i++) {\n            var tabIndex = i;\n            var contentEle = this.tabObj.items[parseInt(tabIndex.toString(), 10)].content;\n            if (contentEle.innerHTML !== '') {\n                var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n                var groupList = this.tabs[parseInt(tabIndex.toString(), 10)].groups;\n                var activeContent = this.tabObj.element.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n                var tabContent = activeContent.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_CONTENT);\n                if (this.activeLayout === 'Simplified') {\n                    for (var i_4 = 0; i_4 < groupList.length; i_4++) {\n                        var group = groupList[parseInt(i_4.toString(), 10)];\n                        var alignType = groupList[parseInt(i_4.toString(), 10)].orientation;\n                        if (group.isCollapsed) {\n                            group.setProperties({ isCollapsed: false }, true);\n                            this.removeDropdown(group.id);\n                        }\n                        else {\n                            this.checkSmallToMedium(tabIndex, tab, i_4, tabContent, activeContent, true, false);\n                            this.checkMediumToLarge(tabIndex, tab, i_4, tabContent, activeContent, true, false);\n                        }\n                        var groupEle = tabContent.querySelector('#' + group.id);\n                        var groupContainer = groupEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                        var shrinkColumns = groupContainer.querySelectorAll('.' + 'e-ribbon-shrink');\n                        for (var i_5 = 0; i_5 < shrinkColumns.length; i_5++) {\n                            shrinkColumns[parseInt(i_5.toString(), 10)].remove();\n                        }\n                        var groupHeader = groupContainer.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID);\n                        groupHeader.remove();\n                        var groupContent = groupContainer.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n                        groupContent.classList.replace(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN);\n                        groupContent.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n                        for (var j = 0; j < group.collections.length; j++) {\n                            var collection = group.collections[parseInt(j.toString(), 10)];\n                            var groupCollection = groupContainer.querySelector('#' + collection.id);\n                            groupCollection.classList.replace(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN);\n                            for (var k = 0; k < collection.items.length; k++) {\n                                var itemList = collection.items;\n                                var item = collection.items[parseInt(k.toString(), 10)];\n                                var flag = true;\n                                while ((flag) && (item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic)) {\n                                    k++;\n                                    var itemEle_1 = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                    var ele = itemEle_1.querySelector('#' + item.id);\n                                    this.destroyFunction(item, ele);\n                                    itemEle_1.remove();\n                                    if (k < itemList.length) {\n                                        item = itemList[parseInt(k.toString(), 10)];\n                                    }\n                                    else {\n                                        flag = false;\n                                    }\n                                }\n                                if (!flag) {\n                                    break;\n                                }\n                                var size = ((item.allowedSizes === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) ||\n                                    (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium)) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small;\n                                size = (!(item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) && (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow))\n                                    ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : size;\n                                var itemEle = void 0;\n                                if (!(item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic)) {\n                                    itemEle = this.createItems([item], alignType, group.id, group.header, group.enableGroupOverflow, tabIndex, groupContainer)[0];\n                                    if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) {\n                                        groupCollection.append(itemEle);\n                                    }\n                                }\n                                else {\n                                    itemEle = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                    if (item.displayOptions === (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow)) {\n                                        this.createOverflowPopup(item, tabIndex, group.enableGroupOverflow, group.id, group.header, itemEle, groupContainer);\n                                        if ((item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                                            (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                                            this.updatePopupItems(item, itemEle, group.enableGroupOverflow, true);\n                                        }\n                                    }\n                                    if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                        this.ribbonGroupButtonModule.switchGroupButton(item, itemEle);\n                                    }\n                                    item.setProperties({ activeSize: size }, true);\n                                    if (itemEle) {\n                                        var ele = itemEle.querySelector('#' + item.id);\n                                        this.setItemSize(ele, item);\n                                    }\n                                }\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery) {\n                                    this.ribbonGalleryModule.switchGalleryItems(this.activeLayout, item.id);\n                                }\n                            }\n                        }\n                        if (!(group.enableGroupOverflow || groupEle.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM))) {\n                            groupEle.classList.add('e-ribbon-emptyCollection');\n                        }\n                    }\n                }\n                else {\n                    this.element.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW);\n                    for (var i_6 = 0; i_6 < groupList.length; i_6++) {\n                        var group = groupList[parseInt(i_6.toString(), 10)];\n                        var alignType = groupList[parseInt(i_6.toString(), 10)].orientation;\n                        var groupContainer = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                        var groupContent = groupContainer.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n                        var groupHeader = this.createElement('div', {\n                            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_HEADER,\n                            id: group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID,\n                            innerHTML: group.header\n                        });\n                        groupContainer.appendChild(groupHeader);\n                        if (alignType === 'Row') {\n                            groupContent.classList.replace(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW);\n                        }\n                        groupContent.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n                        for (var j = 0; j < group.collections.length; j++) {\n                            var overflowDDB = void 0;\n                            var overflowtarget = void 0;\n                            if (!group.enableGroupOverflow) {\n                                overflowDDB = this.overflowDDB;\n                                if (overflowDDB) {\n                                    overflowtarget = this.overflowDDB.target;\n                                }\n                            }\n                            else {\n                                var overflowDDBEle = groupContainer.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n                                if (overflowDDBEle) {\n                                    overflowDDB = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDBEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                                    overflowtarget = overflowDDB.target;\n                                }\n                            }\n                            var collection = group.collections[parseInt(j.toString(), 10)];\n                            var groupCollection = groupContainer.querySelector('#' + collection.id);\n                            if (alignType === 'Column') {\n                                groupCollection.classList.replace(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW);\n                            }\n                            for (var k = 0; k < collection.items.length; k++) {\n                                var itemList = collection.items;\n                                var item = collection.items[parseInt(k.toString(), 10)];\n                                var flag = true;\n                                while ((flag) && !(item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic)) {\n                                    k++;\n                                    var itemEle = void 0;\n                                    if ((item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) || (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow)) {\n                                        if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) {\n                                            itemEle = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                        }\n                                        else {\n                                            itemEle = overflowtarget.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                        }\n                                        if (itemEle !== null) {\n                                            var ele_8 = itemEle.querySelector('#' + item.id);\n                                            this.destroyFunction(item, ele_8);\n                                            itemEle.remove();\n                                        }\n                                    }\n                                    if (k < itemList.length) {\n                                        item = itemList[parseInt(k.toString(), 10)];\n                                    }\n                                    else {\n                                        flag = false;\n                                    }\n                                }\n                                if (!flag) {\n                                    break;\n                                }\n                                if (!(item.displayOptions & (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow))) {\n                                    var itemEle = this.createItems([item], alignType, group.id, group.header, group.enableGroupOverflow, tabIndex)[0];\n                                    groupCollection.append(itemEle);\n                                }\n                                else {\n                                    var itemEle = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                    if (!itemEle && overflowtarget) {\n                                        itemEle = overflowtarget.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                        if ((item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                                            (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                                            this.updatePopupItems(item, itemEle, group.enableGroupOverflow, false);\n                                        }\n                                        this.removeOverflowEvent(item, itemEle);\n                                    }\n                                    if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                        this.ribbonGroupButtonModule.switchGroupButton(item, itemEle);\n                                    }\n                                    if (itemEle) {\n                                        groupCollection.append(itemEle);\n                                    }\n                                }\n                                var ele = groupContainer.querySelector('#' + item.id);\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                    ele = groupContainer.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                                }\n                                var itemsize = (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large :\n                                    (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small;\n                                item.setProperties({ activeSize: itemsize }, true);\n                                this.setItemSize(ele, item);\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery) {\n                                    this.ribbonGalleryModule.switchGalleryItems(this.activeLayout, item.id);\n                                }\n                            }\n                            if (group.enableGroupOverflow && overflowDDB) {\n                                if (overflowtarget.childElementCount === 0 ||\n                                    (overflowtarget.childElementCount === 1 && this.isHeaderVisible(overflowtarget, group.id))) {\n                                    this.removeOverflowButton(overflowDDB);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this.selectedTab === tabIndex) {\n                    this.checkOverflow(tabIndex, activeContent);\n                }\n            }\n        }\n        if (this.activeLayout === 'Classic') {\n            this.removeOverflowButton(this.overflowDDB);\n            this.overflowDDB = null;\n        }\n    };\n    Ribbon.prototype.createLauncherIcon = function (groupId, groupContainer, tabIndex) {\n        var _this = this;\n        var launcherIcon = this.createElement('div', {\n            className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER_ICON_ELE + ' ' + (this.launcherIconCss ? this.launcherIconCss : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER_ICON),\n            id: groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.LAUNCHER_ID,\n            attrs: { 'tabindex': '0', 'type': 'button', 'aria-label': 'Launcher Icon', 'role': 'button' }\n        });\n        groupContainer.appendChild(launcherIcon);\n        groupContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(launcherIcon, 'click', this.launcherIconClicked.bind(this, groupId), this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(launcherIcon, 'keydown', function (e) {\n            if (e.key === 'Enter') {\n                _this.launcherIconClicked(groupId);\n            }\n        }, this);\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        if (itemProp.group.launcherIconKeyTip) {\n            this.addKeyTip(tabIndex, itemProp.group.launcherIconKeyTip, launcherIcon.id, 'launcher');\n        }\n    };\n    Ribbon.prototype.launcherIconClicked = function (id) {\n        var eventArgs = { groupId: id };\n        this.trigger('launcherIconClick', eventArgs);\n    };\n    Ribbon.prototype.createGroups = function (groupList, tabIndex) {\n        var groupElements = [];\n        for (var i = 0; i < groupList.length; i++) {\n            var group = groupList[parseInt(i.toString(), 10)];\n            var alignType = group.orientation;\n            var groupEle = this.createElement('div', {\n                className: group.cssClass,\n                id: group.id\n            });\n            groupEle.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP);\n            groupElements.push(groupEle);\n            var groupContainer = this.createElement('div', {\n                className: group.cssClass,\n                id: group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID\n            });\n            groupContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTAINER);\n            groupEle.appendChild(groupContainer);\n            var groupContent = this.createElement('div', {\n                className: this.activeLayout === 'Simplified' ? _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTENT : (_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_CONTENT + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT),\n                id: group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID\n            });\n            groupContent.classList.add(((alignType === 'Column') || (this.activeLayout === 'Simplified')) ? _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW);\n            groupContainer.appendChild(groupContent);\n            if (this.activeLayout === 'Classic') {\n                var groupHeader = this.createElement('div', {\n                    className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_HEADER,\n                    id: group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID,\n                    innerHTML: group.header\n                });\n                groupContainer.appendChild(groupHeader);\n            }\n            if (group.showLauncherIcon) {\n                this.createLauncherIcon(group.id, groupContainer, tabIndex);\n            }\n            var elements = this.createCollection(group.collections, group.orientation, group.id, group.header, group.enableGroupOverflow, tabIndex, groupContainer);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, groupContent);\n            var isItemsHidden = true;\n            for (var j = 0; j < elements.length; j++) {\n                if (isItemsHidden) {\n                    for (var k = 0; k < elements[parseInt(j.toString(), 10)].children.length; k++) {\n                        if (!(elements[parseInt(j.toString(), 10)].children[parseInt(k.toString(), 10)].classList.contains('e-hidden'))) {\n                            isItemsHidden = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (isItemsHidden) {\n                groupEle.classList.add('e-hide-group');\n            }\n            if ((this.activeLayout === 'Simplified') && !(group.enableGroupOverflow || groupEle.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM))) {\n                groupEle.classList.add('e-ribbon-emptyCollection');\n            }\n            var initialProps = this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n            if (initialProps) {\n                if (initialProps.hiddenGroups && initialProps.hiddenGroups.length) {\n                    this.updateGroupProps('hiddenGroups', initialProps, groupEle);\n                }\n                if (initialProps.disabledGroups && initialProps.disabledGroups.length) {\n                    this.updateGroupProps('disabledGroups', initialProps, groupEle);\n                }\n            }\n        }\n        if (this.initialPropsData[parseInt(tabIndex.toString(), 10)]) {\n            delete this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n        }\n        return groupElements;\n    };\n    Ribbon.prototype.updateGroupProps = function (key, initialProps, groupEle) {\n        // eslint-disable-next-line\n        var groupIndex = initialProps[key].indexOf(groupEle.id);\n        if (groupIndex !== -1) {\n            if (key === 'hiddenGroups') {\n                groupEle.classList.add('e-hidden');\n            }\n            else {\n                groupEle.classList.add('e-disabled');\n            }\n        }\n    };\n    Ribbon.prototype.validateItemSize = function () {\n        for (var k = 0; k < this.tabs.length; k++) {\n            var groupList = this.tabs[parseInt(k.toString(), 10)].groups;\n            for (var l = 0; l < groupList.length; l++) {\n                var collectionList = groupList[parseInt(l.toString(), 10)].collections;\n                var alignType = groupList[parseInt(l.toString(), 10)].orientation;\n                for (var i = 0; i < collectionList.length; i++) {\n                    var items = collectionList[parseInt(i.toString(), 10)].items;\n                    for (var j = 0; j < items.length; j++) {\n                        var ribbonitem = items[parseInt(j.toString(), 10)];\n                        if (!ribbonitem.allowedSizes || (ribbonitem.allowedSizes === 0)) {\n                            ribbonitem.setProperties({\n                                allowedSizes: (_interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small | _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium | _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large)\n                            }, true);\n                        }\n                        if ((ribbonitem.type === 'ColorPicker') && (ribbonitem.allowedSizes !== _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small)) {\n                            ribbonitem.setProperties({ allowedSizes: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small }, true);\n                        }\n                        else if ((ribbonitem.type === 'ComboBox' || ribbonitem.type === 'CheckBox') &&\n                            (ribbonitem.allowedSizes !== _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium)) {\n                            ribbonitem.setProperties({ allowedSizes: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium }, true);\n                        }\n                        else if (((alignType === 'Column') && (items.length > 1)) || ((alignType === 'Row') && (collectionList.length > 1))) {\n                            if (ribbonitem.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) {\n                                // To remove large size, perform 'and' with 011(3).\n                                var sizeVal = ribbonitem.allowedSizes & (_interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small | _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium);\n                                sizeVal = sizeVal ? sizeVal : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium;\n                                ribbonitem.setProperties({ allowedSizes: sizeVal }, true);\n                            }\n                        }\n                        var itemsize = (ribbonitem.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large :\n                            (ribbonitem.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small;\n                        ribbonitem.setProperties({ activeSize: itemsize }, true);\n                    }\n                }\n            }\n        }\n    };\n    Ribbon.prototype.createCollection = function (collectionList, alignType, groupId, groupHeader, isGroupOF, tabIndex, groupContainer) {\n        var collectionElements = [];\n        for (var i = 0; i < collectionList.length; i++) {\n            var collection = collectionList[parseInt(i.toString(), 10)];\n            var collectionEle = this.createElement('div', {\n                className: collection.cssClass,\n                id: collection.id\n            });\n            collectionEle.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLECTION);\n            collectionEle.classList.add(((alignType !== 'Column') || (this.activeLayout === 'Simplified')) ?\n                _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW);\n            collectionElements.push(collectionEle);\n            var elements = this.createItems(collection.items, alignType, groupId, groupHeader, isGroupOF, tabIndex, groupContainer);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, collectionEle);\n            if ((alignType === 'Row') && (i === 2)) {\n                break;\n            }\n        }\n        return collectionElements;\n    };\n    Ribbon.prototype.createRibbonItem = function (item, itemEle) {\n        switch (item.type) {\n            case 'Button':\n                this.ribbonButtonModule.createButton(item, itemEle);\n                break;\n            case 'DropDown':\n                this.ribbonDropDownModule.createDropDown(item, itemEle);\n                break;\n            case 'SplitButton':\n                this.ribbonSplitButtonModule.createSplitButton(item, itemEle);\n                break;\n            case 'CheckBox':\n                this.ribbonCheckBoxModule.createCheckBox(item, itemEle);\n                break;\n            case 'ColorPicker':\n                this.ribbonColorPickerModule.createColorPicker(item, itemEle);\n                break;\n            case 'ComboBox':\n                this.ribbonComboBoxModule.createComboBox(item, itemEle);\n                break;\n            case 'Template':\n                this.createTemplateContent(item, itemEle);\n                break;\n            case 'GroupButton':\n                this.ribbonGroupButtonModule.createGroupButton(item, itemEle);\n                break;\n            case 'Gallery':\n                this.ribbonGalleryModule.createGallery(item, itemEle);\n                break;\n        }\n    };\n    Ribbon.prototype.createItems = function (itemList, alignType, groupId, groupHeader, isGroupOF, tabIndex, groupContainer) {\n        var _a;\n        var itemElements = [];\n        for (var i = 0; i < itemList.length; i++) {\n            var item = itemList[parseInt(i.toString(), 10)];\n            //To stop rendering of items with simplified mode position type as none\n            var flag = true;\n            while (flag &&\n                (((this.activeLayout === 'Simplified') && !(item.displayOptions & (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow))) ||\n                    ((this.activeLayout === 'Classic') && !(item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic)))) {\n                i++;\n                if (i < itemList.length) {\n                    item = itemList[parseInt(i.toString(), 10)];\n                }\n                else {\n                    flag = false;\n                }\n            }\n            if (!flag) {\n                break;\n            }\n            var itemEle = this.createElement('div', {\n                className: item.cssClass,\n                id: item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID\n            });\n            (_a = itemEle.classList).add.apply(_a, [_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM].concat((item.disabled ? [_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS] : [])));\n            // To avoid undefined items condition is added\n            if (item.ribbonTooltipSettings && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isTooltipPresent)(item.ribbonTooltipSettings)) {\n                itemEle.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TOOLTIP_TARGET);\n                this.tooltipData.push({ id: itemEle.id, data: item.ribbonTooltipSettings });\n            }\n            if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                for (var i_7 = 0; i_7 < item.groupButtonSettings.items.length; i_7++) {\n                    if (this.keyTipElements[parseInt(tabIndex.toString(), 10)] &&\n                        item.groupButtonSettings.items[parseInt(i_7.toString(), 10)].keyTip) {\n                        this.addKeyTip(tabIndex, item.groupButtonSettings.items[parseInt(i_7.toString(), 10)].keyTip, item.id + (_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i_7), 'item');\n                    }\n                }\n            }\n            if (item.keyTip) {\n                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery) {\n                    this.addKeyTip(tabIndex, item.keyTip, (item.id + '_popupButton'), 'item');\n                }\n                else {\n                    this.addKeyTip(tabIndex, item.keyTip, item.id, 'item');\n                }\n            }\n            var size = item.activeSize;\n            if (!(item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                if (this.activeLayout === 'Simplified') {\n                    size = ((item.allowedSizes === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) || (item.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ||\n                        (item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow)) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small;\n                    item.setProperties({ activeSize: size }, true);\n                }\n                if (size & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) {\n                    itemEle.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LARGE_ITEM, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n                }\n                else {\n                    itemEle.classList.add((size & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ? _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MEDIUM_ITEM : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SMALL_ITEM);\n                }\n            }\n            var initialProps = this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n            if (initialProps && initialProps.hiddenItems && initialProps.hiddenItems.length) {\n                var itemIndex = initialProps.hiddenItems.indexOf(item.id);\n                if (itemIndex !== -1) {\n                    itemEle.classList.add('e-hidden');\n                }\n            }\n            this.createRibbonItem(item, itemEle);\n            if ((this.activeLayout === 'Simplified') && ((item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow) || (item.displayOptions === (_interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic | _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow)))) {\n                this.createOverflowPopup(item, tabIndex, isGroupOF, groupId, groupHeader, itemEle, groupContainer);\n                if ((item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                    (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                    this.updatePopupItems(item, itemEle, isGroupOF, true);\n                }\n            }\n            else {\n                // For normal mode and Simplified mode position type as Group and Auto\n                itemElements.push(itemEle);\n            }\n            if ((alignType === 'Column') && (i === 2)) {\n                break;\n            }\n        }\n        return itemElements;\n    };\n    Ribbon.prototype.createHelpPaneTemplate = function () {\n        if (this.helpPaneTemplate) {\n            var templateName = 'helpPaneTemplate';\n            this.clearTemplate([templateName]);\n            this.ribbonTempEle = this.createElement('div', {\n                className: _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_TEMPLATE,\n                id: this.element.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_PANE_TEMPLATE_ID\n            });\n            var templateFunction = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getTemplateFunction)(this.helpPaneTemplate);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(templateFunction({}, this, templateName, 'helpPaneTemplate', this.isStringTemplate), this.ribbonTempEle);\n            var tabEle = this.tabObj.element;\n            var toolbarEle = tabEle.querySelector('.e-toolbar');\n            toolbarEle.after(this.ribbonTempEle);\n            tabEle.style.setProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_PANE_TEMPLATE_WIDTH, this.ribbonTempEle.offsetWidth + 'px');\n            this.renderReactTemplates();\n        }\n    };\n    Ribbon.prototype.createTemplateContent = function (item, itemElement) {\n        var itemEle = this.createElement('div', {\n            className: item.cssClass ? (_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TEMPLATE + _constant__WEBPACK_IMPORTED_MODULE_6__.SPACE + item.cssClass) : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TEMPLATE,\n            id: item.id,\n            attrs: { 'tabindex': '-1' }\n        });\n        if (item.disabled) {\n            itemEle.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS);\n            itemEle.setAttribute('disabled', '');\n        }\n        itemElement.appendChild(itemEle);\n        this.renderItemTemplate(item, itemEle);\n    };\n    Ribbon.prototype.renderItemTemplate = function (item, itemElement) {\n        var templateName = 'ribbon' + item.id + 'itemTemplate';\n        this.clearTemplate([templateName]);\n        var templateFunction = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getTemplateFunction)(item.itemTemplate);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(templateFunction({ activeSize: _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize[item.activeSize] }, this, templateName, (item.id + 'itemTemplate'), this.isStringTemplate), itemElement);\n        this.renderReactTemplates();\n    };\n    Ribbon.prototype.checkID = function (list, type, initId) {\n        var key = type === 'tab' ? _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_ID : type === 'group' ? _constant__WEBPACK_IMPORTED_MODULE_6__.GROUP_ID :\n            type === 'collection' ? _constant__WEBPACK_IMPORTED_MODULE_6__.COLLECTION_ID : _constant__WEBPACK_IMPORTED_MODULE_6__.ITEM_ID;\n        for (var i = 0; i < list.length; i++) {\n            var listitem = list[parseInt(i.toString(), 10)];\n            if (!listitem.id) {\n                var htmlAttrID = void 0;\n                if (type === 'item') {\n                    htmlAttrID = this.hasHtmlAtrrID(listitem);\n                }\n                listitem.setProperties({ id: htmlAttrID ? htmlAttrID : initId + key + (this.idIndex++) }, true);\n            }\n            switch (type) {\n                case 'tab':\n                    listitem.setProperties({ groups: this.checkID(listitem.groups, 'group', listitem.id) }, true);\n                    break;\n                case 'group':\n                    listitem.setProperties({ collections: this.checkID(listitem.collections, 'collection', listitem.id) }, true);\n                    break;\n                case 'collection':\n                    listitem.setProperties({ items: this.checkID(listitem.items, 'item', listitem.id) }, true);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return list;\n    };\n    Ribbon.prototype.hasHtmlAtrrID = function (listItem) {\n        var id = '';\n        if (listItem.buttonSettings.htmlAttributes.id) {\n            id = listItem.buttonSettings.htmlAttributes.id;\n        }\n        else if (listItem.checkBoxSettings.htmlAttributes.id) {\n            id = listItem.checkBoxSettings.htmlAttributes.id;\n        }\n        else if (listItem.colorPickerSettings.htmlAttributes.id) {\n            id = listItem.colorPickerSettings.htmlAttributes.id;\n        }\n        else if (listItem.comboBoxSettings.htmlAttributes.id) {\n            id = listItem.comboBoxSettings.htmlAttributes.id;\n        }\n        else if (listItem.dropDownSettings.htmlAttributes.id) {\n            id = listItem.dropDownSettings.htmlAttributes.id;\n        }\n        else if (listItem.splitButtonSettings.htmlAttributes.id) {\n            id = listItem.splitButtonSettings.htmlAttributes.id;\n        }\n        return id;\n    };\n    Ribbon.prototype.updateCommonProperty = function (commonProp) {\n        this.tabObj.setProperties(commonProp);\n        if (this.ribbonFileMenuModule) {\n            this.ribbonFileMenuModule.setCommonProperties(commonProp);\n        }\n        if (this.ribbonBackstageModule) {\n            this.ribbonBackstageModule.setCommonProperties(commonProp);\n        }\n        for (var i = 0; i < this.tabs.length; i++) {\n            var tab = this.tabs[parseInt(i.toString(), 10)];\n            var contentEle = this.tabObj.items[parseInt(i.toString(), 10)].content;\n            if (contentEle.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP)) {\n                for (var _i = 0, _a = tab.groups; _i < _a.length; _i++) {\n                    var group = _a[_i];\n                    var dropdownElement = void 0;\n                    var dropdown = void 0;\n                    if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n                        dropdownElement = group.isCollapsed ?\n                            contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID) : null;\n                    }\n                    else {\n                        dropdownElement = group.enableGroupOverflow ?\n                            contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                        dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n                        if (dropdown) {\n                            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateTooltipProp)(dropdown.target, commonProp);\n                            dropdown.setProperties(commonProp);\n                        }\n                    }\n                    for (var _b = 0, _c = group.collections; _b < _c.length; _b++) {\n                        var collection = _c[_b];\n                        for (var _d = 0, _e = collection.items; _d < _e.length; _d++) {\n                            var item = _e[_d];\n                            var ele = null;\n                            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n                                if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                                    ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id) : item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton ? contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID) : contentEle.querySelector('#' + item.id);\n                                }\n                            }\n                            else {\n                                //Checks for Simplified and Auto options (Auto = classic + simplified + popup)\n                                ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) ? contentEle.querySelector('#' + item.id) : null;\n                                // element will be null for \"Popup\" and if the item is moved to overflow in \"Auto\" mode\n                                if (!ele) {\n                                    ele = dropdown.target.querySelector('#' + item.id);\n                                    if (item.type === 'DropDown') {\n                                        this.updatePopupItems(item, dropdown.target, group.enableGroupOverflow, true);\n                                    }\n                                }\n                            }\n                            if (ele) {\n                                var moduleName = this.getItemModuleName(item);\n                                if (moduleName !== 'template') {\n                                    if (moduleName === 'group-btn' && this.activeLayout === 'Classic') {\n                                        for (var i_8 = 0; i_8 < item.groupButtonSettings.items.length; i_8++) {\n                                            var btnEle = ele.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i_8);\n                                            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateCommonProperty)(btnEle, 'btn', commonProp);\n                                        }\n                                    }\n                                    else if (moduleName === 'group-btn' && this.activeLayout === 'Simplified') {\n                                        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateCommonProperty)(ele, 'dropdown-btn', commonProp);\n                                        for (var i_9 = 0; i_9 < item.groupButtonSettings.items.length; i_9++) {\n                                            var btnEle = document.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i_9);\n                                            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateCommonProperty)(btnEle, 'btn', commonProp);\n                                        }\n                                    }\n                                    else {\n                                        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateCommonProperty)(ele, moduleName, commonProp);\n                                    }\n                                }\n                                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(commonProp.enableRtl)) {\n                                    ele.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RTL_CSS, commonProp.enableRtl);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Ribbon.prototype.removeLauncherIcon = function (groupId, dropdownElement, contentEle) {\n        var containerId = groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID;\n        var containerEle = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, containerId) : contentEle.querySelector('#' + containerId);\n        if (containerEle) {\n            containerEle.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER);\n            var launcherIcon = containerEle.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.LAUNCHER_ID);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(launcherIcon);\n        }\n    };\n    Ribbon.prototype.destroyTabItems = function (tabs) {\n        for (var i = 0; i < tabs.length; i++) {\n            var tab = tabs[parseInt(i.toString(), 10)];\n            var contentEle = this.tabObj.items[parseInt(i.toString(), 10)].content;\n            for (var _i = 0, _a = tab.groups; _i < _a.length; _i++) {\n                var group = _a[_i];\n                var dropdownElement = void 0;\n                var dropdown = void 0;\n                if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n                    dropdownElement = group.isCollapsed ?\n                        contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID) : null;\n                    if (group.showLauncherIcon) {\n                        this.removeLauncherIcon(group.id, dropdownElement, contentEle);\n                    }\n                }\n                else {\n                    dropdownElement = group.enableGroupOverflow ?\n                        contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                    dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n                }\n                for (var _b = 0, _c = group.collections; _b < _c.length; _b++) {\n                    var collection = _c[_b];\n                    for (var _d = 0, _e = collection.items; _d < _e.length; _d++) {\n                        var item = _e[_d];\n                        var ele = void 0;\n                        if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n                            if (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) {\n                                ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id) :\n                                    contentEle.querySelector('#' + item.id);\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) {\n                                    ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id +\n                                        _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID) : contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                                }\n                                if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery) {\n                                    ele = contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                                }\n                            }\n                        }\n                        else {\n                            //Checks for Simplified and Auto options (Auto = classic + simplified + popup)\n                            ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) ?\n                                contentEle.querySelector('#' + item.id) : null;\n                            if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery) {\n                                ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) ? contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID) : null;\n                            }\n                            // element will be null for \"Popup\" and if the item is moved to overflow in \"Auto\" mode\n                            if (!ele) {\n                                ele = dropdown ? dropdown.target.querySelector('#' + item.id) : null;\n                            }\n                        }\n                        if (ele) {\n                            this.destroyFunction(item, ele);\n                        }\n                    }\n                }\n                if ((this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) && dropdownElement) {\n                    this.ribbonDropDownModule.removeOverFlowDropDown(dropdownElement);\n                }\n                else if ((this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) && group.enableGroupOverflow && dropdownElement) {\n                    this.removeOverflowButton(dropdown);\n                }\n            }\n        }\n        if (this.overflowDDB) {\n            this.removeOverflowButton(this.overflowDDB);\n            this.overflowDDB = null;\n        }\n    };\n    Ribbon.prototype.destroyFunction = function (item, ele) {\n        var moduleName = this.getItemModuleName(item);\n        if (moduleName === 'colorpicker') {\n            this.ribbonColorPickerModule.unwireColorPickerEvents(ele);\n        }\n        else if (moduleName === 'group-btn') {\n            if (this.activeLayout === 'Classic') {\n                for (var i = 0; i < item.groupButtonSettings.items.length; i++) {\n                    var btnEle = ele.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i);\n                    if (btnEle) {\n                        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.destroyControl)(btnEle, 'btn');\n                    }\n                }\n            }\n            else {\n                this.ribbonGroupButtonModule.destroyDropDown(item);\n            }\n            var _loop_4 = function (i) {\n                if (item.groupButtonSettings.items[parseInt(i.toString(), 10)].ribbonTooltipSettings) {\n                    var groupButtonID_1 = item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i;\n                    var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this_4.tooltipData, function (e) { return e.id === groupButtonID_1; });\n                    if (index !== -1) {\n                        this_4.tooltipData.splice(index, 1);\n                    }\n                }\n            };\n            var this_4 = this;\n            for (var i = 0; i < item.groupButtonSettings.items.length; i++) {\n                _loop_4(i);\n            }\n        }\n        else if (moduleName === 'gallery') {\n            if (ele.closest('.e-ribbon-overflow-target')) {\n                (0,_utils__WEBPACK_IMPORTED_MODULE_5__.destroyControl)(ele, 'dropdown-btn');\n                var galleryPopupEle = Array.prototype.slice.call(document.querySelectorAll('#' + item.id + '_galleryPopup'));\n                galleryPopupEle.concat(Array.prototype.slice.call(document.querySelectorAll('#' + item.id + '-popup')));\n                for (var i = 0; i < galleryPopupEle.length; i++) {\n                    galleryPopupEle[parseInt(i.toString(), 10)].remove();\n                }\n                var galleryPopupBtn = document.querySelector('#' + item.id + '_popupButton');\n                if (galleryPopupBtn) {\n                    galleryPopupBtn.remove();\n                }\n                var galleryWrapper = document.querySelector('#' + item.id + '_galleryWrapper');\n                if (galleryWrapper) {\n                    galleryWrapper.remove();\n                }\n            }\n            else {\n                var galleryEle = ele.querySelectorAll('.e-ribbon-gallery-item');\n                var galleryPopupBtn = ele.parentElement.querySelector('#' + item.id + '_popupButton');\n                if (galleryPopupBtn) {\n                    galleryPopupBtn.remove();\n                }\n                for (var i = 0; i < galleryEle.length; i++) {\n                    galleryEle[parseInt(i.toString(), 10)].remove();\n                }\n                var galleryPopupEle = document.querySelectorAll('#' + item.id + '_galleryPopup');\n                for (var i = 0; i < galleryPopupEle.length; i++) {\n                    galleryPopupEle[parseInt(i.toString(), 10)].remove();\n                }\n            }\n        }\n        else if (moduleName !== 'template') {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.destroyControl)(ele, moduleName);\n        }\n        if (item.ribbonTooltipSettings) {\n            var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tooltipData, function (e) { return e.id === item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID; });\n            if (index !== -1) {\n                this.tooltipData.splice(index, 1);\n            }\n        }\n        if (item.type === 'GroupButton') {\n            this.ribbonGroupButtonModule.destroyDropDown(item);\n        }\n    };\n    /**\n     * Gets the item module name.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @returns {void}\n     * @hidden\n     */\n    Ribbon.prototype.getItemModuleName = function (item) {\n        switch (item.type) {\n            case 'Button':\n                return 'btn';\n            case 'DropDown':\n                return 'dropdown-btn';\n            case 'SplitButton':\n                return 'split-btn';\n            case 'CheckBox':\n                return 'checkbox';\n            case 'ColorPicker':\n                return 'colorpicker';\n            case 'ComboBox':\n                return 'combobox';\n            case 'GroupButton':\n                return 'group-btn';\n            case 'Gallery':\n                return 'gallery';\n            default:\n                return 'template';\n        }\n    };\n    Ribbon.prototype.clearOverflowResize = function () {\n        this.destroyScroll();\n        this.clearOverflowDropDown(this.selectedTab);\n        var tab = this.tabs[this.selectedTab];\n        var activeContent = this.tabObj.element.querySelector('#' + this.tabs[this.selectedTab].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n        var tabContent = activeContent.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_CONTENT);\n        for (var j = 0; (j < tab.groups.length); j++) {\n            this.checkSmallToMedium(this.selectedTab, tab, j, tabContent, activeContent, true, true);\n            this.checkMediumToLarge(this.selectedTab, tab, j, tabContent, activeContent, true, true);\n        }\n    };\n    /**\n     * Refreshes the layout.\n     *\n     * @returns {void}\n     */\n    Ribbon.prototype.refreshLayout = function () {\n        this.resizeHandler();\n    };\n    /**\n     * Selects the tab\n     *\n     * @param  {string} tabId - Gets the tab ID\n     * @returns {void}\n     */\n    Ribbon.prototype.selectTab = function (tabId) {\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        this.setProperties({ selectedTab: index });\n    };\n    /**\n     * Shows a specific tab in the ribbon.\n     *\n     * @param {string} tabId - The ID of the tab to be shown.\n     * @param {boolean} isContextual - The boolean if the rendering is contextual.\n     * @returns {void}\n     */\n    Ribbon.prototype.showTab = function (tabId, isContextual) {\n        if (isContextual === void 0) { isContextual = false; }\n        this.showHideTab(tabId, false, isContextual);\n    };\n    /**\n     * Hides a specific tab in the ribbon.\n     *\n     * @param {string} tabId - The ID of the tab to be hidden.\n     * @param {boolean} isContextual - The boolean if the rendering is contextual.\n     * @returns {void}\n     */\n    Ribbon.prototype.hideTab = function (tabId, isContextual) {\n        if (isContextual === void 0) { isContextual = false; }\n        this.showHideTab(tabId, true, isContextual);\n    };\n    Ribbon.prototype.showHideTab = function (tabId, value, isContextual) {\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        if (index === -1) {\n            return;\n        }\n        this.tabObj.hideTab(index, value);\n        if (isContextual) {\n            var contextualTab_1;\n            var tabEle = this.tabObj.element;\n            for (var i = 0; i < this.contextualTabs.length; i++) {\n                for (var j = 0; j < this.contextualTabs[parseInt(i.toString(), 10)].tabs.length; j++) {\n                    if (tabId === this.contextualTabs[parseInt(i.toString(), 10)].tabs[parseInt(j.toString(), 10)].id) {\n                        contextualTab_1 = this.contextualTabs[parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n            if (contextualTab_1) {\n                var isTabHidden = true;\n                var _loop_5 = function (i) {\n                    var index_1 = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this_5.tabs, function (e) {\n                        return e.id === contextualTab_1.tabs[parseInt(i.toString(), 10)].id;\n                    });\n                    if (index_1 !== -1) {\n                        var toolbarEle = tabEle.querySelectorAll('.e-toolbar-item')[parseInt(index_1.toString(), 10)];\n                        if (!(toolbarEle.classList.contains('e-hidden'))) {\n                            isTabHidden = false;\n                        }\n                    }\n                };\n                var this_5 = this;\n                for (var i = 0; i < contextualTab_1.tabs.length; i++) {\n                    _loop_5(i);\n                }\n                if (isTabHidden) {\n                    contextualTab_1.setProperties({ visible: false }, true);\n                }\n                else {\n                    contextualTab_1.setProperties({ visible: true }, true);\n                }\n            }\n        }\n    };\n    /**\n     * Enables a specific tab in the ribbon.\n     *\n     * @param {string} tabId - The ID of the tab to be enabled.\n     * @returns {void}\n     */\n    Ribbon.prototype.enableTab = function (tabId) {\n        this.enableDisableTab(tabId, true);\n    };\n    /**\n     * Disables a specific tab in the ribbon.\n     *\n     * @param {string} tabId - The ID of the tab to be disabled.\n     * @returns {void}\n     */\n    Ribbon.prototype.disableTab = function (tabId) {\n        this.enableDisableTab(tabId, false);\n    };\n    Ribbon.prototype.enableDisableTab = function (tabId, value) {\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        if (index === -1) {\n            return;\n        }\n        var tbItems = this.tabObj.items[parseInt(index.toString(), 10)].content;\n        this.tabObj.element.querySelector('#' + tabId + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID).classList[value ? 'remove' : 'add']('e-disabled');\n        tbItems.classList[value ? 'remove' : 'add']('e-disabled');\n        this.tabObj.enableTab(index, value);\n    };\n    /**\n     * Adds the ribbon tab.\n     *\n     * @param {RibbonTabModel} tab - Gets the ribbon tab model\n     * @param {string} targetId  - Gets the ID of the target tab to add the new tab.\n     * @param {boolean} isAfter - Defines whether the tab is added before or after the target.\n     * @returns {void}\n     */\n    Ribbon.prototype.addTab = function (tab, targetId, isAfter) {\n        var index = targetId ? (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === targetId; }) : -1;\n        index = (index === -1) ? this.tabs.length : (index + (isAfter ? 1 : 0));\n        this.tabsInternal = this.tabs.slice();\n        this.tabsInternal.splice(index, 0, tab);\n        this.setProperties({ tabs: this.tabsInternal }, true);\n        this.checkID([this.tabs[parseInt(index.toString(), 10)]], 'tab', this.element.id);\n        this.tabsInternal = this.tabs.slice();\n        this.validateItemSize();\n        var tabItem = this.createTabItems([tab]);\n        this.tabObj.addTab(tabItem, index);\n    };\n    /**\n     * Removes the ribbon tab.\n     *\n     * @param {string} tabId - Gets the tab ID\n     * @returns {void}\n     */\n    Ribbon.prototype.removeTab = function (tabId) {\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        if (index === -1) {\n            return;\n        }\n        var contentEle = this.tabObj.items[parseInt(index.toString(), 10)].content;\n        var groups = this.tabs[parseInt(index.toString(), 10)].groups;\n        if (groups && (contentEle.innerHTML !== '')) {\n            for (var _i = 0, groups_2 = groups; _i < groups_2.length; _i++) {\n                var group = groups_2[_i];\n                var dropdownElement = group.isCollapsed ? contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID) : null;\n                for (var _a = 0, _b = group.collections; _a < _b.length; _a++) {\n                    var collection = _b[_a];\n                    for (var _c = 0, _d = collection.items; _c < _d.length; _c++) {\n                        var item = _d[_c];\n                        var ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id) : contentEle.querySelector('#' + item.id);\n                        if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton && this.activeLayout === 'Classic') {\n                            ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id +\n                                _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID) : contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                        }\n                        if (ele) {\n                            this.destroyFunction(item, ele);\n                        }\n                    }\n                }\n                if (dropdownElement) {\n                    this.ribbonDropDownModule.removeOverFlowDropDown(dropdownElement);\n                }\n            }\n        }\n        if (index === this.selectedTab) {\n            this.isAddRemove = true;\n        }\n        this.tabsInternal = this.tabs.slice();\n        this.tabsInternal.splice(index, 1);\n        this.setProperties({ tabs: this.tabsInternal }, true);\n        this.tabObj.removeTab(index);\n    };\n    /**\n     * Adds the ribbon group.\n     *\n     * @param {string} tabId - Gets the tab ID.\n     * @param {RibbonGroupModel} group - Gets the ribbon group model.\n     * @param {string} targetId - Gets the ID of the target group to add the new group.\n     * @param {boolean} isAfter - Defines whether the group is added before or after the target.\n     * @returns {void}\n     */\n    Ribbon.prototype.addGroup = function (tabId, group, targetId, isAfter) {\n        var tabIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        if (tabIndex === -1) {\n            return;\n        }\n        if (this.selectedTab === tabIndex) {\n            this.clearOverflowResize();\n        }\n        var tab = this.tabs[parseInt(tabIndex.toString(), 10)];\n        var ribbonGroups = tab.groups.slice();\n        var index = targetId ? (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(ribbonGroups, function (e) { return e.id === targetId; }) : -1;\n        index = (index === -1) ? ribbonGroups.length : (index + (isAfter ? 1 : 0));\n        ribbonGroups.splice(index, 0, group);\n        tab.setProperties({ groups: ribbonGroups }, true);\n        this.checkID([tab.groups[parseInt(index.toString(), 10)]], 'group', tabId);\n        this.validateItemSize();\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[parseInt(tabIndex.toString(), 10)].content;\n        if (contentEle.innerHTML !== '') {\n            var element = this.createGroups([tab.groups[parseInt(index.toString(), 10)]], tabIndex)[0];\n            //insert the element in tab items property.\n            var targetEle = targetId ? contentEle.querySelector('#' + targetId) : null;\n            if (targetEle) {\n                targetEle.insertAdjacentElement(isAfter ? 'afterend' : 'beforebegin', element);\n            }\n            else {\n                contentEle.append(element);\n            }\n        }\n        if (this.selectedTab === tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    /**\n     * Removes the ribbon group.\n     *\n     * @param {string} groupId -Gets the group ID.\n     * @returns {void}\n     */\n    Ribbon.prototype.removeGroup = function (groupId) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        if (contentEle.innerHTML !== '') {\n            var dropdownElement = void 0;\n            var dropdown = void 0;\n            if (itemProp.group.showLauncherIcon) {\n                this.removeLauncherIcon(itemProp.group.id, null, contentEle);\n            }\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                dropdownElement = itemProp.group.enableGroupOverflow ?\n                    contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n            }\n            for (var _i = 0, _a = itemProp.group.collections; _i < _a.length; _i++) {\n                var collection = _a[_i];\n                for (var _b = 0, _c = collection.items; _b < _c.length; _b++) {\n                    var item = _c[_b];\n                    this.removeItemElement(contentEle, item, dropdown);\n                }\n            }\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                if (itemProp.group.enableGroupOverflow) {\n                    if (dropdown.target.childElementCount === 0 || (dropdown.target.childElementCount\n                        === 1 && this.isHeaderVisible(dropdown.target, itemProp.group.id))) {\n                        this.removeOverflowButton(dropdown);\n                    }\n                }\n                else {\n                    var ofGroupContainer = dropdown.target.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (ofGroupContainer && ofGroupContainer.childElementCount === 1) {\n                        ofGroupContainer.remove();\n                    }\n                    var ofTabContainer = dropdown.target.querySelector('#' + this.tabs[parseInt(itemProp.tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                    if (ofTabContainer && ofTabContainer.childElementCount === 0) {\n                        ofTabContainer.remove();\n                    }\n                }\n            }\n            var groupEle = contentEle.querySelector('#' + groupId);\n            if (groupEle) {\n                groupEle.remove();\n            }\n        }\n        var ribbonGroups = this.tabs[itemProp.tabIndex].groups.slice();\n        ribbonGroups.splice(itemProp.groupIndex, 1);\n        this.tabs[itemProp.tabIndex].setProperties({ groups: ribbonGroups }, true);\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    Ribbon.prototype.isHeaderVisible = function (headerEle, groupID) {\n        return headerEle.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID) ? true : false;\n    };\n    /**\n     * Hides a specific group within a ribbon tab.\n     *\n     * @param {string} groupID - The ID of the group to be hidden.\n     * @returns {void}\n     */\n    Ribbon.prototype.hideGroup = function (groupID) {\n        this.showHideGroup(groupID, true);\n    };\n    /**\n     * Shows a specific group within a ribbon tab.\n     *\n     * @param {string} groupID - The ID of the group to be shown.\n     * @returns {void}\n     */\n    Ribbon.prototype.showGroup = function (groupID) {\n        this.showHideGroup(groupID, false);\n    };\n    Ribbon.prototype.showHideGroup = function (groupID, isHidden) {\n        var overflowDDB;\n        var overflowtarget;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupID);\n        if (!itemProp) {\n            return;\n        }\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var groupEle = contentEle.querySelector('#' + groupID);\n        if (groupEle) {\n            this.updateHiddenElements(itemProp.tabIndex, isHidden ? 'hideGroup' : 'showGroup', groupID, isHidden, groupEle);\n        }\n        else {\n            this.updateInitialProps(itemProp.tabIndex, groupID, 'hiddenGroups', isHidden);\n        }\n        if (this.overflowDDB) {\n            var overflowEle = this.overflowDDB.target;\n            var ofTabContainer = overflowEle.querySelector('#' + this.tabs[parseInt(itemProp.tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n            if (itemProp.group.enableGroupOverflow) {\n                var overflowDDBEle = contentEle.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n                if (overflowDDBEle) {\n                    overflowDDB = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDBEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    overflowtarget = overflowDDB.target;\n                }\n                if (overflowtarget) {\n                    if (isHidden) {\n                        overflowtarget.classList.add('e-hidden');\n                    }\n                    else {\n                        overflowtarget.classList.remove('e-hidden');\n                    }\n                }\n            }\n            else if (ofTabContainer) {\n                var grpContainer = ofTabContainer.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                if (grpContainer) {\n                    if (isHidden) {\n                        grpContainer.classList.add('e-hidden');\n                    }\n                    else {\n                        grpContainer.classList.remove('e-hidden');\n                    }\n                }\n            }\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    Ribbon.prototype.updateHiddenElements = function (tabIndex, key, id, isHidden, element, group) {\n        if (isHidden) {\n            if (!(element.classList.contains('e-hidden'))) {\n                this.checkHiddenElements(key, id, tabIndex);\n                element.classList.add('e-hidden');\n                if (key === 'hideItem') {\n                    this.checkHiddenItems(group, isHidden, tabIndex);\n                }\n                this.calculateHiddenElementsWidth(tabIndex);\n            }\n        }\n        else {\n            if (element.classList.contains('e-hidden')) {\n                this.checkHiddenElements(key, id, tabIndex);\n                element.classList.remove('e-hidden');\n                this.calculateHiddenElementsWidth(tabIndex);\n                if (key === 'showItem') {\n                    this.checkHiddenItems(group, isHidden, tabIndex);\n                }\n            }\n        }\n    };\n    Ribbon.prototype.checkHiddenElements = function (key, id, tabIndex) {\n        if (this.activeLayout === 'Simplified') {\n            var hiddenProps = this.hiddenElements[parseInt(tabIndex.toString(), 10)];\n            if (!hiddenProps) {\n                this.hiddenElements[parseInt(tabIndex.toString(), 10)] = {};\n                hiddenProps = this.hiddenElements[parseInt(tabIndex.toString(), 10)];\n            }\n            if (hiddenProps) {\n                if (!hiddenProps[\"\" + key]) {\n                    hiddenProps[\"\" + key] = [];\n                }\n                if (hiddenProps[\"\" + key].length) {\n                    var index = hiddenProps[\"\" + key].indexOf(id);\n                    if (index === -1) {\n                        hiddenProps[\"\" + key].push(id);\n                    }\n                }\n                else {\n                    hiddenProps[\"\" + key].push(id);\n                }\n            }\n        }\n    };\n    Ribbon.prototype.updateItemsSimplifiedWidth = function (tabIndex, key) {\n        var hiddenProps = this.hiddenElements[parseInt(tabIndex.toString(), 10)];\n        if (hiddenProps && hiddenProps[\"\" + key] && hiddenProps[\"\" + key].length) {\n            var _loop_6 = function (i) {\n                var contentEle = this_6.tabObj.items[parseInt(tabIndex.toString(), 10)].content;\n                var hiddenEle;\n                var groupEle = void 0;\n                var isGroupHidden = false;\n                var widthDifference = 0;\n                if (key === 'hideGroup' || key === 'showGroup') {\n                    hiddenEle = contentEle.querySelector('#' + hiddenProps[\"\" + key][parseInt(i.toString(), 10)]);\n                }\n                else {\n                    hiddenEle = contentEle.querySelector('#' + hiddenProps[\"\" + key][parseInt(i.toString(), 10)] + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                }\n                if (hiddenEle) {\n                    if (key === 'hideGroup' || key === 'hideItem') {\n                        var isHidden = false;\n                        if (hiddenEle.classList.contains('e-hidden')) {\n                            isHidden = true;\n                            hiddenEle.classList.remove('e-hidden');\n                        }\n                        if (key === 'hideItem') {\n                            groupEle = hiddenEle.closest('.e-ribbon-group');\n                            if (groupEle.classList.contains('e-hide-group')) {\n                                isGroupHidden = true;\n                                widthDifference = this_6.checkWidthDifference(hiddenEle, groupEle);\n                            }\n                        }\n                        this_6.calculateOverflowItemsWidth(hiddenEle.offsetWidth + widthDifference, true, tabIndex);\n                        this_6.calculateMediumDataWidth(hiddenEle.offsetWidth + widthDifference, tabIndex, true);\n                        if (isHidden) {\n                            hiddenEle.classList.add('e-hidden');\n                        }\n                    }\n                    else {\n                        if (key === 'showItem') {\n                            groupEle = hiddenEle.closest('.e-ribbon-group');\n                            if (groupEle.classList.contains('e-hide-group')) {\n                                isGroupHidden = true;\n                                groupEle.classList.remove('e-hide-group');\n                                groupEle.classList.remove('e-ribbon-emptyCollection');\n                                widthDifference = Math.abs(hiddenEle.offsetWidth - groupEle.offsetWidth);\n                                if (this_6.hiddenGroups.indexOf(groupEle.id) !== -1) {\n                                    this_6.hiddenGroups.splice(this_6.hiddenGroups.indexOf(groupEle.id), 1);\n                                }\n                            }\n                            else {\n                                if (this_6.hiddenGroups.indexOf(groupEle.id) !== -1) {\n                                    var hiddenItems = groupEle.querySelectorAll('.e-ribbon-item:not(.e-hidden)');\n                                    hiddenItems.forEach(function (item) {\n                                        if (item.id !== hiddenEle.id) {\n                                            item.classList.add('e-hidden');\n                                        }\n                                    });\n                                    widthDifference = Math.abs(hiddenEle.offsetWidth - groupEle.offsetWidth);\n                                    hiddenItems.forEach(function (item) {\n                                        if (item.id !== hiddenEle.id) {\n                                            item.classList.remove('e-hidden');\n                                        }\n                                    });\n                                    this_6.hiddenGroups.splice(this_6.hiddenGroups.indexOf(groupEle.id), 1);\n                                }\n                            }\n                        }\n                        this_6.calculateOverflowItemsWidth(hiddenEle.offsetWidth + widthDifference, false, tabIndex);\n                        this_6.calculateMediumDataWidth(hiddenEle.offsetWidth + widthDifference, tabIndex, false);\n                    }\n                    if (isGroupHidden) {\n                        groupEle.classList.add('e-hide-group');\n                        groupEle.classList.add('e-ribbon-emptyCollection');\n                    }\n                }\n                var index = hiddenProps[\"\" + key].indexOf(hiddenProps[\"\" + key][parseInt(i.toString(), 10)]);\n                if (index !== -1) {\n                    hiddenProps[\"\" + key].splice(index, 1);\n                    i--;\n                }\n                out_i_1 = i;\n            };\n            var this_6 = this, out_i_1;\n            for (var i = 0; i < hiddenProps[\"\" + key].length; i++) {\n                _loop_6(i);\n                i = out_i_1;\n            }\n        }\n    };\n    Ribbon.prototype.checkWidthDifference = function (hiddenEle, groupEle) {\n        var widthDifference = 0;\n        groupEle.classList.remove('e-hide-group');\n        groupEle.classList.remove('e-ribbon-emptyCollection');\n        if (this.hiddenGroups.length) {\n            if (this.hiddenGroups.indexOf(groupEle.id) === -1) {\n                this.hiddenGroups.push(groupEle.id);\n                widthDifference = Math.abs(hiddenEle.offsetWidth - groupEle.offsetWidth);\n            }\n        }\n        else {\n            this.hiddenGroups.push(groupEle.id);\n            widthDifference = Math.abs(hiddenEle.offsetWidth - groupEle.offsetWidth);\n        }\n        return widthDifference;\n    };\n    Ribbon.prototype.calculateHiddenElementsWidth = function (tabIndex) {\n        if (tabIndex === this.selectedTab && this.activeLayout === 'Simplified') {\n            var hiddenProps = this.hiddenElements[parseInt(tabIndex.toString(), 10)];\n            if (hiddenProps) {\n                for (var i = 0; i < Object.keys(hiddenProps).length; i++) {\n                    this.updateItemsSimplifiedWidth(tabIndex, Object.keys(hiddenProps)[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    Ribbon.prototype.calculateMediumDataWidth = function (hiddenWidth, tabIndex, isHidden) {\n        if (this.selectedTab === tabIndex && this.activeLayout === 'Simplified') {\n            var activeContent = this.tabObj.element.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID);\n            var mediumDataItems = Array.prototype.slice.call(activeContent.querySelectorAll('.e-ribbon-item'));\n            if (this.overflowDDB) {\n                var overflowEle = this.overflowDDB.target;\n                var overflowItems = overflowEle.querySelectorAll('.e-ribbon-item');\n                var selectedOFTab = document.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                for (var i = 0; i < overflowItems.length; i++) {\n                    var ofTab = overflowItems[parseInt(i.toString(), 10)].closest('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                    if (selectedOFTab && ofTab && selectedOFTab.id === ofTab.id && overflowItems[parseInt(i.toString(), 10)].hasAttribute('data-medium-width')) {\n                        mediumDataItems.push(overflowItems[parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n            var groupOFButton = activeContent.querySelectorAll('.e-ribbon-group-of-btn');\n            for (var i = 0; i < groupOFButton.length; i++) {\n                var overflowButton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(groupOFButton[parseInt(i.toString(), 10)], _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                var overflowBtnTarget = overflowButton.target;\n                var overflowItems = overflowBtnTarget.querySelectorAll('.e-ribbon-item');\n                for (var i_10 = 0; i_10 < overflowItems.length; i_10++) {\n                    if (overflowItems[parseInt(i_10.toString(), 10)].hasAttribute('data-medium-width')) {\n                        mediumDataItems.push(overflowItems[parseInt(i_10.toString(), 10)]);\n                    }\n                }\n            }\n            for (var i = 0; i < mediumDataItems.length; i++) {\n                if (mediumDataItems[parseInt(i.toString(), 10)].hasAttribute('data-medium-width')) {\n                    var previousWidth = parseInt(mediumDataItems[parseInt(i.toString(), 10)].getAttribute('data-medium-width'), 10);\n                    mediumDataItems[parseInt(i.toString(), 10)].setAttribute('data-medium-width', isHidden ? (previousWidth - hiddenWidth).toString() : (previousWidth + hiddenWidth).toString());\n                }\n            }\n        }\n    };\n    Ribbon.prototype.calculateOverflowItemsWidth = function (hiddenItem, isHidden, tabIndex) {\n        if (this.selectedTab === tabIndex && this.activeLayout === 'Simplified') {\n            var groupList = this.tabs[parseInt(tabIndex.toString(), 10)].groups;\n            for (var i = 0; i < groupList.length; i++) {\n                var group = groupList[parseInt(i.toString(), 10)];\n                if (group.enableGroupOverflow) {\n                    var groupContainer = document.querySelector('#' + group.id);\n                    var overflowButton = void 0;\n                    var overflowDDB = groupContainer.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n                    if (overflowDDB) {\n                        overflowButton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDB, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    }\n                    if (overflowButton) {\n                        var overflowEle = overflowButton.target;\n                        var overflowItems = overflowEle.querySelectorAll('.e-ribbon-item');\n                        for (var i_11 = 0; i_11 < overflowItems.length; i_11++) {\n                            var previousWidth = parseInt(overflowItems[parseInt(i_11.toString(), 10)].getAttribute('data-simplified-width'), 10);\n                            if (previousWidth) {\n                                overflowItems[parseInt(i_11.toString(), 10)].setAttribute('data-simplified-width', isHidden ? (previousWidth - hiddenItem).toString() : (previousWidth + hiddenItem).toString());\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (this.overflowDDB) {\n            var selectedOFTab = document.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n            var overflowEle = this.overflowDDB.target;\n            var overflowItems = overflowEle.querySelectorAll('.e-ribbon-item');\n            for (var i = 0; i < overflowItems.length; i++) {\n                var ofTab = overflowItems[parseInt(i.toString(), 10)].closest('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                if (selectedOFTab && ofTab && selectedOFTab.id === ofTab.id) {\n                    var previousWidth = parseInt(overflowItems[parseInt(i.toString(), 10)].getAttribute('data-simplified-width'), 10);\n                    if (previousWidth) {\n                        overflowItems[parseInt(i.toString(), 10)].setAttribute('data-simplified-width', isHidden ? (previousWidth - hiddenItem).toString() : (previousWidth + hiddenItem).toString());\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Disables a specific group within a ribbon tab.\n     *\n     * @param {string} groupID - The ID of the group to be disabled.\n     * @returns {void}\n     */\n    Ribbon.prototype.disableGroup = function (groupID) {\n        this.enableDisableGroup(groupID, true);\n    };\n    /**\n     * Enables a specific group within a ribbon tab.\n     *\n     * @param {string} groupID - The ID of the group to be enabled.\n     * @returns {void}\n     */\n    Ribbon.prototype.enableGroup = function (groupID) {\n        this.enableDisableGroup(groupID, false);\n    };\n    Ribbon.prototype.enableDisableGroup = function (groupID, isDisabled) {\n        var overflowDDB;\n        var overflowtarget;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupID);\n        if (!itemProp) {\n            return;\n        }\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var groupEle = contentEle.querySelector('#' + groupID);\n        if (groupEle) {\n            if (isDisabled) {\n                groupEle.classList.add('e-disabled');\n            }\n            else {\n                groupEle.classList.remove('e-disabled');\n            }\n        }\n        else {\n            this.updateInitialProps(itemProp.tabIndex, groupID, 'disabledGroups', isDisabled);\n        }\n        if (this.overflowDDB) {\n            var overflowEle = this.overflowDDB.target;\n            var ofTabContainer = overflowEle.querySelector('#' + this.tabs[parseInt(itemProp.tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n            if (itemProp.group.enableGroupOverflow) {\n                var overflowDDBEle = contentEle.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n                if (overflowDDBEle) {\n                    overflowDDB = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDBEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    overflowtarget = overflowDDB.target;\n                }\n                if (overflowtarget) {\n                    if (isDisabled) {\n                        overflowtarget.classList.add('e-disabled');\n                    }\n                    else {\n                        overflowtarget.classList.remove('e-disabled');\n                    }\n                }\n            }\n            else if (ofTabContainer) {\n                var grpContainer = ofTabContainer.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                if (grpContainer) {\n                    if (isDisabled) {\n                        grpContainer.classList.add('e-disabled');\n                    }\n                    else {\n                        grpContainer.classList.remove('e-disabled');\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * adds the ribbon collection.\n     *\n     * @param {string} groupId - Gets the ribbon group ID.\n     * @param {RibbonCollectionModel} collection - Gets the ribbon collection model.\n     * @param {string} targetId - Gets the ID of the target collection to add the new collection.\n     * @param {boolean} isAfter - Defines whether the collection is added before or after the target.\n     * @returns {void}\n     */\n    Ribbon.prototype.addCollection = function (groupId, collection, targetId, isAfter) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        if (!itemProp) {\n            return;\n        }\n        if ((itemProp.group.orientation === 'Row') && (itemProp.group.collections.length === 3)) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        var ribbonCollections = itemProp.group.collections.slice();\n        var index = targetId ? (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(ribbonCollections, function (e) { return e.id === targetId; }) : -1;\n        index = (index === -1) ? ribbonCollections.length : (index + (isAfter ? 1 : 0));\n        ribbonCollections.splice(index, 0, collection);\n        itemProp.group.setProperties({ collections: ribbonCollections }, true);\n        this.checkID([itemProp.group.collections[parseInt(index.toString(), 10)]], 'collection', groupId);\n        this.validateItemSize();\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        if (contentEle.innerHTML !== '') {\n            var collection_1 = itemProp.group.collections[parseInt(index.toString(), 10)];\n            var element = this.createCollection([collection_1], itemProp.group.orientation, itemProp.group.id, itemProp.group.header, itemProp.group.enableGroupOverflow, itemProp.tabIndex)[0];\n            if (itemProp.group.isCollapsed) {\n                contentEle = this.ribbonDropDownModule.getOverflowDropDownPopup(itemProp, contentEle);\n            }\n            //insert the element in tab items property.\n            var targetEle = targetId ? contentEle.querySelector('#' + targetId) : null;\n            if (targetEle) {\n                targetEle.insertAdjacentElement(isAfter ? 'afterend' : 'beforebegin', element);\n            }\n            else {\n                contentEle.querySelector('#' + groupId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTENT_ID).append(element);\n            }\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    /**\n     * Removes the ribbon collection.\n     *\n     * @param {string} collectionId - Gets the collection ID.\n     * @returns {void}\n     */\n    Ribbon.prototype.removeCollection = function (collectionId) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getCollection)(this.tabs, collectionId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        if (contentEle.innerHTML !== '') {\n            var dropdownElement = void 0;\n            var dropdown = void 0;\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                dropdownElement = itemProp.group.enableGroupOverflow ?\n                    contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n            }\n            for (var _i = 0, _a = itemProp.collection.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                this.removeItemElement(contentEle, item, dropdown);\n            }\n            var groupEle = contentEle.querySelector('#' + collectionId);\n            if (groupEle) {\n                groupEle.remove();\n            }\n        }\n        var ribbonGroup = itemProp.group;\n        var ribbonCollections = ribbonGroup.collections.slice();\n        ribbonCollections.splice(itemProp.collectionIndex, 1);\n        ribbonGroup.setProperties({ collections: ribbonCollections }, true);\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    /**\n     * Adds ribbon item.\n     *\n     * @param {string} collectionId - Gets the collection ID.\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {string} targetId - Gets the ID of the target item to add the new item.\n     * @param {boolean} isAfter - Defines whether the item is added before or after the target.\n     * @returns {void}\n     */\n    Ribbon.prototype.addItem = function (collectionId, item, targetId, isAfter) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getCollection)(this.tabs, collectionId);\n        if (!itemProp) {\n            return;\n        }\n        if ((itemProp.group.orientation === 'Column') && (itemProp.collection.items.length === 3)) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        var ribbonItems = itemProp.collection.items.slice();\n        var index = targetId ? (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(ribbonItems, function (e) { return e.id === targetId; }) : -1;\n        index = (index === -1) ? ribbonItems.length : (index + (isAfter ? 1 : 0));\n        ribbonItems.splice(index, 0, item);\n        itemProp.collection.setProperties({ items: ribbonItems }, true);\n        this.checkID([itemProp.collection.items[parseInt(index.toString(), 10)]], 'item', collectionId);\n        this.validateItemSize();\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var groupContainer = contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n        if (contentEle.innerHTML !== '') {\n            var item_1 = itemProp.collection.items[parseInt(index.toString(), 10)];\n            var element = this.createItems([item_1], itemProp.group.orientation, itemProp.group.id, itemProp.group.header, itemProp.group.enableGroupOverflow, itemProp.tabIndex, groupContainer)[0];\n            if (itemProp.group.isCollapsed) {\n                contentEle = this.ribbonDropDownModule.getOverflowDropDownPopup(itemProp, contentEle);\n            }\n            //insert the element in tab items property.\n            var targetEle = targetId ? contentEle.querySelector('#' + targetId) : null;\n            if (targetEle) {\n                targetEle.closest('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM).insertAdjacentElement(isAfter ? 'afterend' : 'beforebegin', element);\n            }\n            else {\n                if (element) {\n                    contentEle.querySelector('#' + collectionId).append(element);\n                }\n            }\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    /**\n     * Removes ribbon item.\n     *\n     * @param {string} itemId - Gets the item ID.\n     * @returns {void}\n     */\n    Ribbon.prototype.removeItem = function (itemId) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, itemId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        if (contentEle.innerHTML !== '') {\n            var dropdownElement = void 0;\n            var dropdown = void 0;\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                dropdownElement = itemProp.group.enableGroupOverflow ?\n                    contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n            }\n            var item = itemProp.item;\n            this.removeItemElement(contentEle, item, dropdown);\n        }\n        var ribbonCollection = itemProp.collection;\n        var ribbonItems = ribbonCollection.items;\n        ribbonItems.splice(itemProp.itemIndex, 1);\n        ribbonCollection.setProperties({ items: ribbonItems }, true);\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n    };\n    /**\n     * Hides a specific ribbon item.\n     *\n     * @param {string} itemId - The ID of the item to be hidden.\n     * @returns {void}\n     */\n    Ribbon.prototype.hideItem = function (itemId) {\n        this.showHideItem(itemId, true);\n    };\n    /**\n     * Shows a specific ribbon item.\n     *\n     * @param {string} itemId - The ID of the item to be shown.\n     * @returns {void}\n     */\n    Ribbon.prototype.showItem = function (itemId) {\n        this.showHideItem(itemId, false);\n    };\n    Ribbon.prototype.showHideItem = function (itemId, isHidden) {\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, itemId);\n        if (!itemProp) {\n            return;\n        }\n        var ele;\n        if (itemProp.item.type === 'GroupButton') {\n            ele = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID, itemProp);\n        }\n        else {\n            ele = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, itemId, itemProp);\n        }\n        if (ele) {\n            var itemEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, '.e-ribbon-item');\n            this.updateHiddenElements(itemProp.tabIndex, isHidden ? 'hideItem' : 'showItem', itemId, isHidden, itemEle, itemProp.group);\n            if (this.selectedTab === itemProp.tabIndex) {\n                this.refreshLayout();\n            }\n        }\n        else {\n            this.updateInitialProps(itemProp.tabIndex, itemId, 'hiddenItems', isHidden);\n        }\n    };\n    Ribbon.prototype.updateInitialProps = function (tabIndex, id, key, isInsert) {\n        var initialProps = this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n        if (!initialProps) {\n            this.initialPropsData[parseInt(tabIndex.toString(), 10)] = {};\n            initialProps = this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n        }\n        if (initialProps) {\n            if (!initialProps[\"\" + key]) {\n                initialProps[\"\" + key] = [];\n            }\n            var itemIndex = initialProps[\"\" + key].indexOf(id);\n            if (isInsert) {\n                if (itemIndex === -1) {\n                    initialProps[\"\" + key].push(id);\n                }\n            }\n            else {\n                if (itemIndex !== -1) {\n                    initialProps[\"\" + key].splice(itemIndex, 1);\n                }\n                if (initialProps[\"\" + key].length === 0) {\n                    delete initialProps[\"\" + key];\n                }\n                if (Object.keys(initialProps).length === 0) {\n                    delete this.initialPropsData[parseInt(tabIndex.toString(), 10)];\n                }\n            }\n        }\n    };\n    Ribbon.prototype.checkHiddenItems = function (group, isHidden, tabIndex) {\n        var isItemsHidden = true;\n        var isEmptyCollection;\n        var contentEle = this.tabObj.items[parseInt(tabIndex.toString(), 10)].content;\n        var groupEle = contentEle.querySelector('#' + group.id);\n        if (isHidden) {\n            for (var i = 0; i < group.collections.length; i++) {\n                if (isItemsHidden) {\n                    var collection = group.collections[parseInt(i.toString(), 10)];\n                    for (var j = 0; j < collection.items.length; j++) {\n                        var item = collection.items[parseInt(j.toString(), 10)];\n                        var itemEle = void 0;\n                        if (item.type === 'GroupButton') {\n                            var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, item.id);\n                            itemEle = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID, itemProp);\n                        }\n                        else {\n                            itemEle = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, item.id);\n                        }\n                        var itemContainer = itemEle ? itemEle.closest('.e-ribbon-item') : null;\n                        if (!(itemContainer.classList.contains('e-hidden'))) {\n                            isItemsHidden = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (isItemsHidden) {\n                groupEle.classList.add('e-hide-group');\n                this.checkOverflowItems(isHidden, contentEle, group.enableGroupOverflow, tabIndex, group.id);\n            }\n        }\n        else {\n            groupEle.classList.remove('e-hide-group');\n            this.checkOverflowItems(isHidden, contentEle, group.enableGroupOverflow, tabIndex, group.id);\n        }\n        if (this.activeLayout === 'Simplified' && !group.enableGroupOverflow) {\n            var itemsLength = groupEle.querySelectorAll('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ITEM);\n            if (itemsLength) {\n                isEmptyCollection = this.checkEmptyCollection(itemsLength);\n                groupEle.classList[isEmptyCollection ? 'add' : 'remove']('e-ribbon-emptyCollection');\n            }\n        }\n    };\n    Ribbon.prototype.checkOverflowItems = function (isHidden, contentEle, isGroupOF, tabIndex, groupID) {\n        var overflowDDB;\n        var overflowtarget;\n        if (isGroupOF) {\n            var overflowDDBEle = contentEle.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID);\n            if (overflowDDBEle) {\n                overflowDDB = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowDDBEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                overflowtarget = overflowDDB.target;\n            }\n            if (overflowtarget) {\n                if (isHidden) {\n                    overflowtarget.classList.add('e-hide-group');\n                }\n                else {\n                    overflowtarget.classList.remove('e-hide-group');\n                }\n            }\n        }\n        else {\n            if (this.overflowDDB) {\n                var overflowEle = this.overflowDDB.target;\n                var ofTabContainer = overflowEle.querySelector('#' + this.tabs[parseInt(tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                if (ofTabContainer) {\n                    var grpContainer = ofTabContainer.querySelector('#' + groupID + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (grpContainer) {\n                        if (isHidden) {\n                            grpContainer.classList.add('e-hide-group');\n                        }\n                        else {\n                            grpContainer.classList.remove('e-hide-group');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * tab - Gets the ribbon tab to be updated. The id of the tab is a required property. Other properties are optional.\n     *\n     * @param {RibbonTabModel} tab - Gets the ribbon tab model.\n     * @returns {void}\n     */\n    Ribbon.prototype.updateTab = function (tab) {\n        var tabId = tab.id;\n        var index = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getIndex)(this.tabs, function (e) { return e.id === tabId; });\n        if (index === -1) {\n            return;\n        }\n        var contentEle = this.tabObj.items[parseInt(index.toString(), 10)].content;\n        var groups = this.tabs[parseInt(index.toString(), 10)].groups;\n        var tabEle = this.tabObj.element;\n        if (groups && (contentEle.innerHTML !== '')) {\n            // Check whether cssClass is passed by the user, and if it is, then remove the old values.\n            if (tab.cssClass) {\n                if (this.tabs[parseInt(index.toString(), 10)].cssClass) {\n                    contentEle.classList.remove(this.tabs[parseInt(index.toString(), 10)].cssClass);\n                    tabEle.querySelector('.e-active').classList.remove(this.tabs[parseInt(index.toString(), 10)].cssClass);\n                }\n            }\n            // Check whether group is passed by the user, and if it is, then remove the old values.\n            if (tab.groups) {\n                for (var _i = 0, groups_3 = groups; _i < groups_3.length; _i++) {\n                    var group = groups_3[_i];\n                    var dropdownElement = group.isCollapsed ? contentEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID) : null;\n                    for (var _a = 0, _b = group.collections; _a < _b.length; _a++) {\n                        var collection = _b[_a];\n                        for (var _c = 0, _d = collection.items; _c < _d.length; _c++) {\n                            var item = _d[_c];\n                            var ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id) : contentEle.querySelector('#' + item.id);\n                            if (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton && this.activeLayout === 'Classic') {\n                                ele = dropdownElement ? this.ribbonDropDownModule.getDDBItemElement(dropdownElement, item.id +\n                                    _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID) : contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                            }\n                            if (ele) {\n                                this.destroyFunction(item, ele);\n                            }\n                        }\n                    }\n                    if (dropdownElement) {\n                        this.ribbonDropDownModule.removeOverFlowDropDown(dropdownElement);\n                    }\n                }\n                var groupElements = contentEle.querySelectorAll('.e-ribbon-group');\n                // eslint-disable-next-line @typescript-eslint/tslint/config\n                groupElements.forEach(function (groupEle) { groupEle.remove(); });\n            }\n        }\n        if (index === this.selectedTab) {\n            this.isAddRemove = true;\n        }\n        var ribbonTab = this.tabs[parseInt(index.toString(), 10)];\n        ribbonTab.setProperties(tab, true);\n        this.setProperties({ groups: this.checkID(ribbonTab.groups, 'group', ribbonTab.id) }, true);\n        this.validateItemSize();\n        if (contentEle.innerHTML === '') {\n            // Check whether group is passed by the user and sets the updated values.\n            if (tab.groups) {\n                var elements = this.createGroups(ribbonTab.groups, index);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, contentEle);\n            }\n            if (this.selectedTab === index) {\n                this.refreshLayout();\n            }\n            // Check whether cssClass is passed by the user and sets the updated values.\n            if (tab.cssClass) {\n                contentEle.classList.add(ribbonTab.cssClass);\n                tabEle.querySelector('.e-active').classList.add(ribbonTab.cssClass);\n            }\n            // Check whether header is passed by the user and sets the updated values.\n            if (tab.header) {\n                tabEle.querySelector('#' + tabId + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID).innerText = ribbonTab.header;\n            }\n        }\n    };\n    /**\n     * group - Gets the ribbon group to be updated. The id of the group is a required property. Other properties are optional.\n     *\n     * @param {RibbonGroupModel} group - Gets the ribbon group model.\n     * @returns {void}\n     */\n    Ribbon.prototype.updateGroup = function (group) {\n        var groupId = group.id;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getGroup)(this.tabs, groupId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var groupEle = contentEle.querySelector('#' + groupId);\n        var groupContainer = groupEle.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n        var dropdownElement;\n        var dropdown;\n        if (contentEle.innerHTML !== '') {\n            if (itemProp.group.showLauncherIcon) {\n                this.removeLauncherIcon(itemProp.group.id, null, contentEle);\n            }\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                dropdownElement = itemProp.group.enableGroupOverflow ?\n                    contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n            }\n            // Check whether cssClass is passed by the user, and if it is, then remove the old values.\n            if (group.cssClass) {\n                if (itemProp.group.cssClass) {\n                    groupEle.classList.remove(itemProp.group.cssClass);\n                    if (groupContainer) {\n                        groupContainer.classList.remove(itemProp.group.cssClass);\n                    }\n                }\n            }\n            // Check whether collections or orientation is passed by the user, and if it is, then remove the old values.\n            if (group.collections || group.orientation) {\n                if (itemProp.group.collections || itemProp.group.orientation) {\n                    for (var _i = 0, _a = itemProp.group.collections; _i < _a.length; _i++) {\n                        var collection = _a[_i];\n                        for (var _b = 0, _c = collection.items; _b < _c.length; _b++) {\n                            var item = _c[_b];\n                            this.removeItemElement(contentEle, item, dropdown);\n                        }\n                    }\n                    var collectionElements = groupEle.querySelectorAll('.e-ribbon-collection');\n                    // eslint-disable-next-line @typescript-eslint/tslint/config\n                    collectionElements.forEach(function (collectionEle) { collectionEle.remove(); });\n                    if (group.orientation) {\n                        var groupContent = groupContainer.querySelector('.e-ribbon-group-content');\n                        var removeCss = groupContent.classList.value.match(/(e-ribbon-[column|row]+)/g);\n                        if (removeCss) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([groupContent], removeCss);\n                        }\n                    }\n                }\n            }\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                if (itemProp.group.enableGroupOverflow) {\n                    if (dropdown.target.childElementCount === 0 || (dropdown.target.childElementCount\n                        === 1 && this.isHeaderVisible(dropdown.target, itemProp.group.id))) {\n                        this.removeOverflowButton(dropdown);\n                    }\n                }\n                else {\n                    var ofGroupContainer = dropdown.target.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    if (ofGroupContainer && ofGroupContainer.childElementCount === 1) {\n                        ofGroupContainer.remove();\n                    }\n                    var ofTabContainer = dropdown.target.querySelector('#' + this.tabs[parseInt(itemProp.tabIndex.toString(), 10)].id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID);\n                    if (ofTabContainer && ofTabContainer.childElementCount === 0) {\n                        ofTabContainer.remove();\n                    }\n                }\n            }\n        }\n        var ribbongroup = itemProp.group;\n        ribbongroup.setProperties(group, true);\n        ribbongroup.setProperties({ collections: this.checkID(ribbongroup.collections, 'collection', ribbongroup.id) }, true);\n        this.validateItemSize();\n        if (contentEle.innerHTML !== '') {\n            // Check whether showLauncherIcon or orientation is passed by the user and sets the updated values.\n            if (group.showLauncherIcon) {\n                this.createLauncherIcon(ribbongroup.id, groupContainer, itemProp.tabIndex);\n            }\n            // Check whether collections or orientation is passed by the user and sets the updated values.\n            if (group.collections || group.orientation) {\n                var groupContent = groupContainer.querySelector('.e-ribbon-group-content');\n                groupContent.classList.add(((ribbongroup.orientation === 'Column') || (this.activeLayout === 'Simplified')) ? _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLUMN : _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_ROW);\n                var elements = this.createCollection(ribbongroup.collections, ribbongroup.orientation, ribbongroup.id, ribbongroup.header, ribbongroup.enableGroupOverflow, itemProp.tabIndex, groupContainer);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, groupContent);\n            }\n            if (this.selectedTab === itemProp.tabIndex) {\n                this.refreshLayout();\n            }\n            // Check whether cssClass is passed by the user and sets the updated values.\n            if (group.cssClass) {\n                groupEle.classList.add(ribbongroup.cssClass);\n                if (groupContainer) {\n                    groupContainer.classList.add(ribbongroup.cssClass);\n                }\n            }\n            // Check whether header is passed by the user and sets the updated values.\n            if (group.header) {\n                if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified && !group.enableGroupOverflow) {\n                    var overflowHeader = dropdown.target.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID);\n                    if (overflowHeader) {\n                        overflowHeader.innerText = ribbongroup.header;\n                    }\n                }\n                else if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic && !ribbongroup.isCollapsed) {\n                    groupEle.querySelector('.e-ribbon-group-header').innerText = ribbongroup.header;\n                }\n                else if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic && ribbongroup.isCollapsed) {\n                    var overflowEle = groupEle.querySelector('#' + ribbongroup.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID);\n                    // need to set instance for dropdown\n                    var dropDownBtn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(overflowEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                    var overflowHeader = dropDownBtn.target.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.HEADER_ID);\n                    if (overflowHeader) {\n                        overflowHeader.innerText = ribbongroup.header;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * collection - Gets the ribbon collection to be updated. The id of the collection is a required property. Other properties are optional.\n     *\n     * @param {RibbonCollectionModel} collection - Gets the ribbon collection model.\n     * @returns {void}\n     */\n    Ribbon.prototype.updateCollection = function (collection) {\n        var collectionId = collection.id;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getCollection)(this.tabs, collectionId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var collectionEle = contentEle.querySelector('#' + collectionId);\n        if (contentEle.innerHTML !== '') {\n            var dropdownElement = void 0;\n            var dropdown = void 0;\n            if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                dropdownElement = itemProp.group.enableGroupOverflow ?\n                    contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n            }\n            // Check whether cssClass is passed by the user, and if it is, then remove the old values.\n            if (collection.cssClass) {\n                if (itemProp.collection.cssClass) {\n                    collectionEle.classList.remove(itemProp.collection.cssClass);\n                }\n            }\n            if (collection.items) {\n                if (itemProp.collection.items) {\n                    for (var _i = 0, _a = itemProp.collection.items; _i < _a.length; _i++) {\n                        var item = _a[_i];\n                        this.removeItemElement(contentEle, item, dropdown);\n                    }\n                }\n            }\n        }\n        var ribboncollection = itemProp.collection;\n        ribboncollection.setProperties(collection, true);\n        ribboncollection.setProperties({ items: this.checkID(ribboncollection.items, 'item', ribboncollection.id) }, true);\n        this.validateItemSize();\n        if (contentEle.innerHTML !== '') {\n            if (collection.items) {\n                var groupContainer = contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                var elements = this.createItems(ribboncollection.items, itemProp.group.orientation, itemProp.group.id, itemProp.group.header, itemProp.group.enableGroupOverflow, itemProp.tabIndex, groupContainer);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(elements, collectionEle);\n            }\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.refreshLayout();\n        }\n        // Check whether cssClass is passed by the user and sets the updated values.\n        if (collection.cssClass) {\n            collectionEle.classList.add(ribboncollection.cssClass);\n        }\n    };\n    /**\n     * item - Gets the ribbon item to be updated. The id of the item is a required property. Other properties are optional.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @returns {void}\n     */\n    Ribbon.prototype.updateItem = function (item) {\n        var itemId = item.id;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, itemId);\n        if (!itemProp) {\n            return;\n        }\n        if (this.selectedTab === itemProp.tabIndex) {\n            this.clearOverflowResize();\n        }\n        //Check whether the tab items are rendered\n        var contentEle = this.tabObj.items[itemProp.tabIndex].content;\n        var groupEle = contentEle.querySelector('#' + itemProp.group.id);\n        if (groupEle) {\n            var groupContainer = groupEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n            var itemContainer = null;\n            var itemEle = null;\n            var dropdownElement = void 0;\n            var dropdown = void 0;\n            if (contentEle.innerHTML !== '') {\n                if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                    dropdownElement = itemProp.group.enableGroupOverflow ?\n                        contentEle.querySelector('#' + itemProp.group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.GROUPOF_BUTTON_ID) : null;\n                    dropdown = dropdownElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton) : this.overflowDDB;\n                }\n                if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified && itemProp.item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow) {\n                    itemContainer = dropdown.target.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    itemEle = dropdown.target.querySelector('#' + itemId);\n                    if (item.displayOptions && item.displayOptions !== _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow) {\n                        var collectionEle = groupContainer.querySelector('#' + itemProp.collection.id);\n                        if (collectionEle) {\n                            collectionEle.appendChild(itemContainer);\n                        }\n                    }\n                }\n                else {\n                    itemContainer = groupContainer.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    itemEle = contentEle.querySelector('#' + itemId);\n                    if (!itemContainer) {\n                        itemContainer = dropdown ? dropdown.target.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID) : groupContainer.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID);\n                    }\n                    if (!itemEle) {\n                        itemEle = dropdown ? dropdown.target.querySelector('#' + itemId) : contentEle.querySelector('#' + itemId);\n                    }\n                    if (itemProp.item.type === 'Gallery') {\n                        if (!itemEle) {\n                            itemEle = contentEle.querySelector('#' + itemId + '_galleryWrapper');\n                        }\n                    }\n                    if (itemProp.item.type === 'GroupButton' && this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n                        itemEle = contentEle.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID);\n                    }\n                    if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified && item.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow) {\n                        this.createOverflowPopup(itemProp.item, itemProp.tabIndex, itemProp.group.enableGroupOverflow, itemProp.group.id, itemProp.group.header, itemContainer, groupContainer);\n                        if ((itemProp.item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.DropDown) || (itemProp.item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.SplitButton) ||\n                            (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.GroupButton) || (item.type === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemType.Gallery)) {\n                            this.updatePopupItems(itemProp.item, itemContainer, itemProp.group.enableGroupOverflow, true);\n                        }\n                    }\n                }\n                // Check whether cssClass is passed by the user, and if it is, then remove the old values.\n                if (item.cssClass) {\n                    if (itemProp.item.cssClass) {\n                        itemContainer.classList.remove(itemProp.item.cssClass);\n                    }\n                }\n                this.destroyFunction(itemProp.item, itemEle);\n                itemEle.remove();\n                var removeCss = itemContainer.classList.value.match(/(e-ribbon-[large|medium|small]+-item)/g);\n                if (removeCss) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([itemContainer], removeCss);\n                }\n            }\n            var ribbonItem = itemProp.item;\n            ribbonItem.setProperties(item, true);\n            this.validateItemSize();\n            if (contentEle.innerHTML !== '') {\n                // To avoid undefined items condition is added\n                if (ribbonItem.ribbonTooltipSettings && (0,_utils__WEBPACK_IMPORTED_MODULE_5__.isTooltipPresent)(ribbonItem.ribbonTooltipSettings)) {\n                    itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_TOOLTIP_TARGET);\n                    this.tooltipData.push({ id: itemContainer.id, data: ribbonItem.ribbonTooltipSettings });\n                }\n                var size = ribbonItem.activeSize;\n                if (this.activeLayout === 'Simplified') {\n                    size = ((ribbonItem.allowedSizes === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) || (ribbonItem.allowedSizes & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) ||\n                        (ribbonItem.displayOptions === _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow)) ? _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium : _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small;\n                    ribbonItem.setProperties({ activeSize: size }, true);\n                }\n                if (size & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) {\n                    itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LARGE_ITEM, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_CONTENT_HEIGHT);\n                }\n                else {\n                    if (size & _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Medium) {\n                        itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MEDIUM_ITEM);\n                    }\n                    else {\n                        itemContainer.classList.add(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SMALL_ITEM);\n                    }\n                }\n                this.createRibbonItem(ribbonItem, itemContainer);\n                if (itemProp.item.type === 'Gallery' && document.querySelector('#' + itemId + '_container').closest('.e-ribbon-overflow-target') && item.displayOptions !== _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Overflow) {\n                    this.createOverflowPopup(itemProp.item, itemProp.tabIndex, itemProp.group.enableGroupOverflow, itemProp.group.id, itemProp.group.header, itemContainer, groupContainer);\n                }\n                if (this.activeLayout === 'Simplified' && itemProp.group.enableGroupOverflow) {\n                    if (dropdown.target.childElementCount === 0 ||\n                        (dropdown.target.childElementCount === 1 &&\n                            this.isHeaderVisible(dropdown.target, itemProp.group.id))) {\n                        this.removeOverflowButton(dropdown);\n                    }\n                }\n                if (this.selectedTab === itemProp.tabIndex) {\n                    this.refreshLayout();\n                }\n                if (item.cssClass) {\n                    itemContainer.classList.add(ribbonItem.cssClass);\n                }\n                if (!(ribbonItem.disabled) && itemContainer.classList.contains(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS)) {\n                    itemContainer.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS);\n                }\n                this.enableDisableItem(ribbonItem.id, ribbonItem.disabled);\n            }\n        }\n        else {\n            this.isUpdateItems = true;\n            this.itemsModel.push(item);\n            this.targetTabs[item.id] = itemProp.tabIndex;\n        }\n    };\n    Ribbon.prototype.removeItemElement = function (contentEle, item, dropdown) {\n        var ele = null;\n        if (this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Classic) {\n            ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) ? contentEle.querySelector('#' + item.id) : null;\n            if (item.type === 'GroupButton') {\n                ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Classic) ? contentEle.querySelector('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID) : null;\n            }\n        }\n        else {\n            //Checks for Simplified and Auto options (Auto = classic + simplified + popup)\n            ele = (item.displayOptions & _interface__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.Simplified) ? contentEle.querySelector('#' + item.id) : null;\n            // element will be null for \"Popup\" and if the item is moved to overflow in \"Auto\" mode\n            if (!ele) {\n                ele = dropdown.target.querySelector('#' + item.id);\n            }\n        }\n        if (ele) {\n            this.destroyFunction(item, ele);\n            if (item.type === 'GroupButton' && this.activeLayout === _interface__WEBPACK_IMPORTED_MODULE_3__.RibbonLayout.Simplified) {\n                document.getElementById(item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID).remove();\n            }\n            else {\n                ele.closest('#' + item.id + _constant__WEBPACK_IMPORTED_MODULE_6__.CONTAINER_ID).remove();\n            }\n        }\n    };\n    /**\n     * Enables ribbon item.\n     *\n     * @param {string} itemId - Gets the item ID.\n     * @returns {void}\n     */\n    Ribbon.prototype.enableItem = function (itemId) {\n        this.enableDisableItem(itemId, false);\n    };\n    /**\n     * Disables ribbon item.\n     *\n     * @param {string} itemId - Gets the item ID.\n     * @returns {void}\n     */\n    Ribbon.prototype.disableItem = function (itemId) {\n        this.enableDisableItem(itemId, true);\n    };\n    /**\n     * Gets the Ribbon item model associated with the specified item ID.\n     *\n     * @param {string} itemId - The unique ID of the Ribbon item.\n     * @returns {RibbonItemModel} - Returns the Ribbon item model.\n     */\n    Ribbon.prototype.getItem = function (itemId) {\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, itemId).item;\n    };\n    Ribbon.prototype.enableDisableItem = function (itemId, isDisabled) {\n        var isUpdated = false;\n        var isOverflow = false;\n        var itemProp = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItem)(this.tabs, itemId);\n        if (!itemProp) {\n            return;\n        }\n        itemProp.item.setProperties({ disabled: isDisabled }, true);\n        var ele;\n        if (itemProp.item.type === 'GroupButton') {\n            ele = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID, itemProp);\n        }\n        else if (itemProp.item.type === 'Gallery') {\n            ele = document.querySelector('#' + itemId);\n            if (!ele) {\n                ele = document.querySelector('#' + itemId + '_galleryWrapper');\n            }\n            else {\n                isOverflow = true;\n            }\n        }\n        else {\n            ele = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getItemElement)(this, itemId, itemProp);\n        }\n        if (ele) {\n            var itemEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, '.e-ribbon-item');\n            var moduleName = this.getItemModuleName(itemProp.item);\n            isUpdated = isDisabled ? !itemEle.classList.contains(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS) :\n                itemEle.classList.contains(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS);\n            if (moduleName !== 'template') {\n                if (isUpdated) {\n                    if (moduleName === 'group-btn' && this.activeLayout === 'Simplified') {\n                        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateControlDisabled)(ele, 'dropdown-btn', isDisabled);\n                        for (var i = 0; i < itemProp.item.groupButtonSettings.items.length; i++) {\n                            var btnEle = document.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i);\n                            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateControlDisabled)(btnEle, 'btn', isDisabled);\n                        }\n                    }\n                    else if (moduleName === 'group-btn' && this.activeLayout === 'Classic') {\n                        for (var i = 0; i < itemProp.item.groupButtonSettings.items.length; i++) {\n                            var btnEle = ele.querySelector('#' + itemId + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP_BUTTON_ID + i);\n                            (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateControlDisabled)(btnEle, 'btn', isDisabled);\n                        }\n                    }\n                    else if (moduleName === 'gallery') {\n                        ele.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS, isDisabled);\n                        document.getElementById(itemId + '_popupButton').classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS, isDisabled);\n                        if (isOverflow) {\n                            var galleryEle = document.getElementById(itemId + '_galleryWrapper');\n                            galleryEle.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS, isDisabled);\n                        }\n                    }\n                    else {\n                        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.updateControlDisabled)(ele, moduleName, isDisabled);\n                    }\n                }\n            }\n            else {\n                ele.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS, isDisabled);\n                ele.toggleAttribute('disabled', isDisabled);\n            }\n            itemEle.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.DISABLED_CSS, itemProp.item.disabled);\n        }\n    };\n    Ribbon.prototype.unwireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'resize', this.resizeHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document.body, 'keydown', this.keytipActionHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mousedown', this.mouseEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'scroll', this.mouseEventHandler);\n    };\n    Ribbon.prototype.destroy = function () {\n        this.keyboardModuleRibbon.destroy();\n        this.keyboardModuleRibbon = null;\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.destroyTooltip)(this.element);\n        if (this.refreshing) {\n            this.clearOverflowDropDown(this.selectedTab);\n        }\n        this.destroyTabItems(this.tabs);\n        if (!this.hideLayoutSwitcher) {\n            this.removeExpandCollapse();\n        }\n        this.collapseButton = undefined;\n        if (this.scrollModule) {\n            this.scrollModule.destroy();\n            this.scrollModule = null;\n        }\n        if (this.ribbonTempEle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.ribbonTempEle);\n            this.ribbonTempEle = null;\n        }\n        _super.prototype.destroy.call(this);\n        this.tabObj.destroy();\n        this.tabObj = undefined;\n        this.initialPropsData = {};\n        this.hiddenGroups = [];\n        this.hiddenElements = {};\n        this.keyTipElements = {};\n        this.itemsModel = [];\n        this.targetTabs = {};\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.element.querySelector('#' + this.element.id + _constant__WEBPACK_IMPORTED_MODULE_6__.TAB_ID));\n        this.element.style.removeProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_FILE_MENU_WIDTH);\n        this.element.style.removeProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_PANE_TEMPLATE_WIDTH);\n        this.element.style.removeProperty('width');\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], this.cssClass.split(_constant__WEBPACK_IMPORTED_MODULE_6__.SPACE));\n        }\n        this.element.classList.remove(_constant__WEBPACK_IMPORTED_MODULE_6__.RTL_CSS, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_SIMPLIFIED_MODE, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_OVERFLOW, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_COLLAPSIBLE, _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MINIMIZE, 'e-rbn');\n        this.unwireEvents();\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param  {RibbonModel} newProp - Specifies new properties\n     * @param  {RibbonModel} oldProp - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n    Ribbon.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var _a, _b;\n        for (var _i = 0, _c = Object.keys(newProp); _i < _c.length; _i++) {\n            var prop = _c[_i];\n            switch (prop) {\n                case 'activeLayout':\n                    this.switchLayout();\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        (_a = this.element.classList).remove.apply(_a, oldProp.cssClass.split(_constant__WEBPACK_IMPORTED_MODULE_6__.SPACE));\n                    }\n                    if (newProp.cssClass) {\n                        (_b = this.element.classList).add.apply(_b, newProp.cssClass.split(_constant__WEBPACK_IMPORTED_MODULE_6__.SPACE));\n                    }\n                    break;\n                case 'isMinimized':\n                    this.element.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_MINIMIZE, this.isMinimized);\n                    this.tabObj.element.querySelector('.e-content').style.display = this.isMinimized ? 'none' : 'block';\n                    if (!this.isMinimized) {\n                        this.refreshLayout();\n                    }\n                    break;\n                case 'locale':\n                    this.updateCommonProperty({ locale: this.locale });\n                    break;\n                case 'enablePersistence':\n                    this.updateCommonProperty({ enablePersistence: this.enablePersistence });\n                    break;\n                case 'enableRtl':\n                    this.element.classList.toggle(_constant__WEBPACK_IMPORTED_MODULE_6__.RTL_CSS, this.enableRtl);\n                    this.updateCommonProperty({ enableRtl: newProp.enableRtl });\n                    if (this.scrollModule) {\n                        this.scrollModule.setProperties({ enableRtl: newProp.enableRtl });\n                    }\n                    break;\n                case 'launcherIconCss':\n                    for (var i = 0; i < this.tabs.length; i++) {\n                        var tabContent = this.tabObj.items[parseInt(i.toString(), 10)].content;\n                        var tab = this.tabs[parseInt(i.toString(), 10)];\n                        if (tabContent.querySelector('.' + _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_GROUP)) {\n                            for (var _d = 0, _e = tab.groups; _d < _e.length; _d++) {\n                                var group = _e[_d];\n                                if (group.showLauncherIcon) {\n                                    var className = _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER_ICON_ELE + ' ' + (this.launcherIconCss || _constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_LAUNCHER_ICON);\n                                    if (group.isCollapsed) {\n                                        var element = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.OVERFLOW_ID + _constant__WEBPACK_IMPORTED_MODULE_6__.DROPDOWN_ID);\n                                        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(element, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_8__.DropDownButton);\n                                        var launcherIconEle = dropdown.target.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.LAUNCHER_ID);\n                                        launcherIconEle.className = className;\n                                    }\n                                    else {\n                                        var element = tabContent.querySelector('#' + group.id + _constant__WEBPACK_IMPORTED_MODULE_6__.LAUNCHER_ID);\n                                        element.className = className;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'selectedTab': {\n                    var tabEle = this.tabObj.element;\n                    var toolbarItem = tabEle.querySelectorAll('.e-toolbar-item')[parseInt(newProp.selectedTab.toString(), 10)];\n                    if (!(toolbarItem.classList.contains('e-hidden') || toolbarItem.classList.contains('e-disable'))) {\n                        this.tabObj.setProperties({ selectedItem: newProp.selectedTab });\n                    }\n                    break;\n                }\n                case 'tabAnimation':\n                    this.tabObj.setProperties({ animation: newProp.tabAnimation });\n                    break;\n                case 'tabs':\n                    this.reRenderTabs(newProp.tabs);\n                    break;\n                case 'contextualTabs':\n                    for (var i = 0; i < this.contextualTabs.length; i++) {\n                        if (newProp.contextualTabs[parseInt(i.toString(), 10)]) {\n                            this.ribbonContextualTabModule.updateContextualTabs(newProp.contextualTabs[parseInt(i.toString(), 10)], this.contextualTabs[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    break;\n                case 'width':\n                    this.element.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(newProp.width);\n                    this.refreshLayout();\n                    break;\n                case 'fileMenu': {\n                    if (this.ribbonFileMenuModule) {\n                        this.ribbonFileMenuModule.updateFileMenu(this.fileMenu);\n                    }\n                    var toolbarEle = this.tabObj['tbObj'];\n                    toolbarEle.refreshOverflow();\n                    break;\n                }\n                case 'backStageMenu': {\n                    if (this.ribbonBackstageModule) {\n                        this.ribbonBackstageModule.updateBackStageMenu(this.backStageMenu);\n                    }\n                    var toolbarElement = this.tabObj['tbObj'];\n                    toolbarElement.refreshOverflow();\n                    break;\n                }\n                case 'helpPaneTemplate': {\n                    if (this.ribbonTempEle) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.ribbonTempEle);\n                        this.ribbonTempEle = null;\n                        this.tabObj.element.style.setProperty(_constant__WEBPACK_IMPORTED_MODULE_6__.RIBBON_HELP_PANE_TEMPLATE_WIDTH, '0px');\n                    }\n                    if (this.helpPaneTemplate) {\n                        this.createHelpPaneTemplate();\n                    }\n                    var toolbar_1 = this.tabObj['tbObj'];\n                    toolbar_1.refreshOverflow();\n                    break;\n                }\n                case 'hideLayoutSwitcher':\n                    if (this.hideLayoutSwitcher) {\n                        this.removeExpandCollapse();\n                    }\n                    else {\n                        this.addExpandCollapse();\n                    }\n                    break;\n            }\n        }\n    };\n    var Ribbon_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Classic')\n    ], Ribbon.prototype, \"activeLayout\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Ribbon.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Ribbon.prototype, \"enableKeyTips\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Ribbon.prototype, \"layoutSwitcherKeyTip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_index__WEBPACK_IMPORTED_MODULE_2__.FileMenuSettings)\n    ], Ribbon.prototype, \"fileMenu\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_index__WEBPACK_IMPORTED_MODULE_2__.BackStageMenu)\n    ], Ribbon.prototype, \"backStageMenu\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Ribbon.prototype, \"launcherIconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Ribbon.prototype, \"isMinimized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('en-us')\n    ], Ribbon.prototype, \"locale\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Ribbon.prototype, \"selectedTab\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.TabAnimationSettings)\n    ], Ribbon.prototype, \"tabAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_index__WEBPACK_IMPORTED_MODULE_2__.RibbonTab)\n    ], Ribbon.prototype, \"tabs\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_index__WEBPACK_IMPORTED_MODULE_2__.RibbonContextualTabSettings)\n    ], Ribbon.prototype, \"contextualTabs\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Ribbon.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Ribbon.prototype, \"helpPaneTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Ribbon.prototype, \"hideLayoutSwitcher\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"tabSelecting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"tabSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"ribbonExpanding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"ribbonCollapsing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"ribbonLayoutSwitched\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"launcherIconClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"overflowPopupOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Ribbon.prototype, \"overflowPopupClose\", void 0);\n    Ribbon = Ribbon_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Ribbon);\n    return Ribbon;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/ribbon.js?");

/***/ })

}]);