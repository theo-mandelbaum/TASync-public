"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_pdf-outline_js-5254e30a"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-outline.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-outline.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfBookmark: () => (/* binding */ PdfBookmark),\n/* harmony export */   PdfBookmarkBase: () => (/* binding */ PdfBookmarkBase),\n/* harmony export */   PdfNamedDestination: () => (/* binding */ PdfNamedDestination),\n/* harmony export */   _PdfNamedDestinationCollection: () => (/* binding */ _PdfNamedDestinationCollection)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _pdf_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pdf-page */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page.js\");\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n/**\n * Represents a base class for all bookmark objects.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get bookmarks\n * let bookmarks: PdfBookmarkBase = document.bookmarks;\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBookmarkBase = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfBookmarkBase` class.\n     *\n     * @private\n     * @param {_PdfDictionary} dictionary Outline dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference.\n     *\n     */\n    function PdfBookmarkBase(dictionary, crossReference) {\n        this._bookMarkList = [];\n        this._isExpanded = false;\n        this._isLoadedBookmark = false;\n        this._dictionary = dictionary;\n        this._crossReference = crossReference;\n    }\n    Object.defineProperty(PdfBookmarkBase.prototype, \"count\", {\n        /**\n         * Gets the bookmark count (Read only).\n         *\n         * @returns {number} Number of bookmarks.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Get bookmark count\n         * let bookmarkCount: number = bookmarks.count;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._isLoadedBookmark && this._bookMarkList.length === 0) {\n                this._reproduceTree();\n            }\n            return this._bookMarkList.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmarkBase.prototype, \"isExpanded\", {\n        /**\n         * Gets the boolean flag indicating whether the bookmark is expanded or not.\n         *\n         * @returns {boolean} whether the bookmark is expanded or not.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the boolean flag indicating whether the bookmark is expanded or not\n         * let isExpanded: boolean = bookmark.isExpanded;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._dictionary && this._dictionary.has('Count')) {\n                return (this._dictionary.get('Count') >= 0);\n            }\n            else {\n                return this._isExpanded;\n            }\n        },\n        /**\n         * Sets the boolean flag indicating whether the bookmark is expanded or not.\n         *\n         * @param {boolean} value whether the bookmark is expanded or not.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Sets the boolean flag indicating whether the bookmark is expanded or not\n         * bookmark.isExpanded = true;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._isExpanded = value;\n            if (this.count > 0 && this._dictionary) {\n                this._dictionary.update('Count', value ? this._bookMarkList.length : (-this._bookMarkList.length));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfBookmark` at the specified index.\n     *\n     * @param {number} index Bookmark index.\n     * @returns {PdfBookmark} Bookmark at the specified index.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get bookmarks\n     * let bookmarks: PdfBookmarkBase = document.bookmarks;\n     * // Get bookmark at the specified index\n     * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfBookmarkBase.prototype.at = function (index) {\n        var bookmark;\n        if (index < 0 || index >= this.count) {\n            throw Error('Index out of range.');\n        }\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__._isNullOrUndefined)(this._bookMarkList) && this._bookMarkList.length > 0 && index < this._bookMarkList.length) {\n            bookmark = this._bookMarkList[Number.parseInt(index.toString(), 10)];\n        }\n        return bookmark;\n    };\n    /**\n     * Gets the boolean flag indicating whether `PdfBookmark` is present or not.\n     *\n     * @param {PdfBookmark} outline Bookmark.\n     * @returns {boolean} whether the bookmark is present or not.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the bookmarks\n     * let bookmarks: PdfBookmarkBase = document.bookmarks;\n     * // Get the bookmark at the specified index\n     * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n     * // Gets the boolean flag indicating whether `PdfBookmark` is present or not.\n     * let isPresent: boolean = bookmarks.contains(bookmark);\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfBookmarkBase.prototype.contains = function (outline) {\n        return this._bookMarkList.indexOf(outline) !== -1;\n    };\n    PdfBookmarkBase.prototype.add = function (title, index) {\n        var bookmark;\n        if (this._dictionary) {\n            var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary(this._crossReference);\n            dictionary.update('Parent', this._reference);\n            var reference = this._crossReference._getNextReference();\n            this._crossReference._cacheMap.set(reference, dictionary);\n            bookmark = new PdfBookmark(dictionary, this._crossReference);\n            bookmark._reference = reference;\n            bookmark.title = title;\n            if (typeof index === 'undefined') {\n                if (this.count === 0) {\n                    this._dictionary.update('First', reference);\n                    this._dictionary.update('Last', reference);\n                }\n                else {\n                    var last = this.at(this.count - 1);\n                    this._dictionary.update('Last', reference);\n                    if (last && last._reference) {\n                        dictionary.update('Prev', last._reference);\n                        last._dictionary.update('Next', reference);\n                    }\n                }\n                this._bookMarkList.push(bookmark);\n            }\n            else {\n                if (index < 0 || index > this.count) {\n                    throw new Error('Index out of range');\n                }\n                if (this.count === 0) {\n                    this._dictionary.update('First', reference);\n                    this._dictionary.update('Last', reference);\n                    this._bookMarkList.push(bookmark);\n                }\n                else if (index === this.count) {\n                    var last = this.at(this.count - 1);\n                    this._dictionary.update('Last', reference);\n                    if (last && last._reference) {\n                        dictionary.update('Prev', last._reference);\n                        last._dictionary.update('Next', reference);\n                    }\n                    this._bookMarkList.push(bookmark);\n                }\n                else if (index === 0) {\n                    var first = this.at(0);\n                    this._dictionary.update('First', reference);\n                    if (first && first._reference) {\n                        dictionary.update('Next', first._reference);\n                        first._dictionary.update('Prev', reference);\n                    }\n                    this._updateBookmarkList(index, bookmark);\n                }\n                else {\n                    var next = this.at(index);\n                    var prev = this.at(index - 1);\n                    if (prev && prev._reference && next && next._reference) {\n                        dictionary.update('Prev', prev._reference);\n                        prev._dictionary.update('Next', reference);\n                        next._dictionary.update('Prev', reference);\n                        dictionary.update('Next', next._reference);\n                    }\n                    this._updateBookmarkList(index, bookmark);\n                }\n            }\n            this._updateCount();\n        }\n        return bookmark;\n    };\n    PdfBookmarkBase.prototype.remove = function (value) {\n        if (typeof value === 'string') {\n            for (var i = this._bookMarkList.length - 1; i >= 0; i--) {\n                var bookmark = this.at(i);\n                if (bookmark.title === value) {\n                    this.remove(i);\n                }\n                else if (bookmark.count > 0) {\n                    bookmark.remove(value);\n                }\n            }\n        }\n        else {\n            if (value >= 0 && value < this.count) {\n                if (this.count === 1) {\n                    this._removeFirst(this._dictionary);\n                    this._removeLast(this._dictionary);\n                    this._removeCount(this._dictionary);\n                    this._bookMarkList = [];\n                }\n                else {\n                    if (value === 0) {\n                        var next = this.at(value + 1);\n                        if (this._dictionary && next && next._reference) {\n                            this._removePrevious(next._dictionary);\n                            this._dictionary.update('First', next._reference);\n                        }\n                    }\n                    else if (value === this.count - 1) {\n                        var prev = this.at(value - 1);\n                        if (this._dictionary && prev && prev._reference) {\n                            this._removeNext(prev._dictionary);\n                            this._dictionary.update('Last', prev._reference);\n                        }\n                    }\n                    else {\n                        var prev = this.at(value - 1);\n                        var next = this.at(value + 1);\n                        if (prev && prev._reference && next && next._reference) {\n                            prev._dictionary.update('Next', next._reference);\n                            next._dictionary.update('Prev', prev._reference);\n                        }\n                    }\n                    this._updateBookmarkList(value);\n                    if (this._dictionary) {\n                        this._updateCount();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Removes all the bookmark from the collection.\n     *\n     * @returns {void} Nothing.\n     *\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Get the bookmarks\n     * let bookmarks: PdfBookmarkBase = document.bookmarks;\n     * // Remove all the bookmark from the collection.\n     * bookmarks.clear();\n     * // Get count after removal of all outlines.\n     * let count: number = bookmarks.count;\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfBookmarkBase.prototype.clear = function () {\n        this._removeFirst(this._dictionary);\n        this._removeLast(this._dictionary);\n        this._removeCount(this._dictionary);\n        this._bookMarkList = [];\n    };\n    PdfBookmarkBase.prototype._removeFirst = function (dictionary) {\n        if (dictionary && dictionary.has('First')) {\n            delete dictionary._map.First;\n            dictionary._updated = true;\n        }\n    };\n    PdfBookmarkBase.prototype._removeLast = function (dictionary) {\n        if (dictionary && dictionary.has('Last')) {\n            delete dictionary._map.Last;\n            dictionary._updated = true;\n        }\n    };\n    PdfBookmarkBase.prototype._removeNext = function (dictionary) {\n        if (dictionary && dictionary.has('Next')) {\n            delete dictionary._map.Next;\n            dictionary._updated = true;\n        }\n    };\n    PdfBookmarkBase.prototype._removePrevious = function (dictionary) {\n        if (dictionary && dictionary.has('Prev')) {\n            delete dictionary._map.Prev;\n            dictionary._updated = true;\n        }\n    };\n    PdfBookmarkBase.prototype._removeCount = function (dictionary) {\n        if (dictionary && dictionary.has('Count')) {\n            delete dictionary._map.Count;\n            dictionary._updated = true;\n        }\n    };\n    PdfBookmarkBase.prototype._updateBookmarkList = function (index, bookmark) {\n        var updatedList = [];\n        if (typeof bookmark === 'undefined') {\n            for (var i = 0; i < this.count; i++) {\n                var entry = this._bookMarkList[Number.parseInt(i.toString(), 10)];\n                if (i !== index) {\n                    updatedList.push(entry);\n                }\n                else {\n                    var reference = entry._reference;\n                    if (reference && this._crossReference._cacheMap.has(reference)) {\n                        this._crossReference._cacheMap.get(reference)._updated = false;\n                    }\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < this.count; i++) {\n                if (i === index) {\n                    updatedList.push(bookmark);\n                }\n                updatedList.push(this._bookMarkList[Number.parseInt(i.toString(), 10)]);\n            }\n        }\n        this._bookMarkList = updatedList;\n    };\n    PdfBookmarkBase.prototype._updateCount = function () {\n        if (this.isExpanded || !this._dictionary.has('Count')) {\n            this._dictionary.update('Count', this._bookMarkList.length);\n        }\n        else {\n            this._dictionary.update('Count', -this._bookMarkList.length);\n        }\n    };\n    PdfBookmarkBase.prototype._reproduceTree = function () {\n        var firstBookmark = this._getBookmark(this);\n        var isBookmark = (firstBookmark) ? true : false;\n        while (isBookmark && firstBookmark._dictionary) {\n            this._bookMarkList.push(firstBookmark);\n            firstBookmark = firstBookmark._next;\n            isBookmark = (firstBookmark) ? true : false;\n        }\n    };\n    PdfBookmarkBase.prototype._getBookmark = function (bookmarkBase, isFirst) {\n        if (isFirst === void 0) { isFirst = true; }\n        var bookmarkBaseDictionary = bookmarkBase._dictionary;\n        var bookMark;\n        if (bookmarkBaseDictionary && bookmarkBaseDictionary.has(isFirst ? 'First' : 'Last')) {\n            var reference = bookmarkBaseDictionary._get(isFirst ? 'First' : 'Last');\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__._isNullOrUndefined)(reference)) {\n                var bookMarkDictionary = this._crossReference._fetch(reference);\n                if (bookMarkDictionary) {\n                    bookMark = new PdfBookmark(bookMarkDictionary, this._crossReference);\n                    bookMark._reference = reference;\n                }\n            }\n        }\n        return bookMark;\n    };\n    return PdfBookmarkBase;\n}());\n\n/**\n * Represents a bookmark in a PDF document\n *\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the bookmarks\n * let bookmarks: PdfBookmarkBase = document.bookmarks;\n * // Gets the bookmark at the specified index\n * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBookmark = /** @class */ (function (_super) {\n    __extends(PdfBookmark, _super);\n    /**\n     * Initializes a new instance of the `PdfBookmark` class.\n     *\n     * @private\n     * @param {_PdfDictionary} dictionary Bookmark dictionary.\n     * @param {_PdfCrossReference} crossReference Cross reference.\n     *\n     */\n    function PdfBookmark(dictionary, crossReference) {\n        var _this = _super.call(this, dictionary, crossReference) || this;\n        if (_this._dictionary && !_this._dictionary.has('Dest') && _this._dictionary.has('A')) {\n            var actionDictionary = _this._dictionary.get('A');\n            if (actionDictionary && actionDictionary.has('D')) {\n                var destinationArray = actionDictionary.getRaw('D'); // eslint-disable-line\n                _this._dictionary.update('Dest', destinationArray);\n            }\n        }\n        _this._isLoadedBookmark = true;\n        return _this;\n    }\n    Object.defineProperty(PdfBookmark.prototype, \"destination\", {\n        /**\n         * Gets the destination.\n         *\n         * @returns {PdfDestination} Page destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the destination\n         * let destination: PdfDestination = bookmark.destination;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (!this._destination) {\n                var namedDestination = this._obtainNamedDestination();\n                if (namedDestination === null || typeof namedDestination === 'undefined') {\n                    this._destination = (0,_utils__WEBPACK_IMPORTED_MODULE_3__._obtainDestination)(this._dictionary, 'Dest');\n                }\n            }\n            return this._destination;\n        },\n        /**\n         * Sets the destination.\n         *\n         * @param {PdfDestination} value destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Set the destination\n         * bookmark.destination = new PdfDestination(page, [100, 200]);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                value._parent = this;\n                this._destination = value;\n                this._destination._initializePrimitive();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmark.prototype, \"namedDestination\", {\n        /**\n         * Gets the named destination.\n         *\n         * @returns {PdfNamedDestination} Named destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._namedDestination === null || typeof this._namedDestination === 'undefined') {\n                this._namedDestination = this._obtainNamedDestination();\n            }\n            return this._namedDestination;\n        },\n        /**\n         * Sets the named destination.\n         *\n         * @param {PdfNamedDestination} value Named destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (this._namedDestination !== value && this._dictionary) {\n                this._namedDestination = value;\n                var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary(this._crossReference);\n                dictionary.update('D', value.title);\n                dictionary.update('S', _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('GoTo'));\n                var reference = this._crossReference._getNextReference();\n                this._crossReference._cacheMap.set(reference, dictionary);\n                this._dictionary.update('A', reference);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmark.prototype, \"title\", {\n        /**\n         * Gets the bookmark title.\n         *\n         * @returns {string} Bookmark title.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the bookmark title\n         * let bookmarkTitle: string = bookmark.title;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._title === null || typeof this._title === 'undefined') {\n                if (this._dictionary && this._dictionary.has('Title')) {\n                    this._title = this._dictionary.get('Title');\n                }\n                else {\n                    this._title = '';\n                }\n            }\n            return this._title;\n        },\n        /**\n         * Sets the bookmark title.\n         *\n         * @param {string} value Bookmark title.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Sets the bookmark title\n         * bookmark.title = 'Syncfusion';\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._title = value;\n            if (this._dictionary) {\n                this._dictionary.update('Title', value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmark.prototype, \"color\", {\n        /**\n         * Gets the bookmark color.\n         *\n         * @returns {number[]} Bookmark color.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the bookmark color\n         * let color: number[] = bookmark.color;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._color === null || typeof this._color === 'undefined') {\n                if (this._dictionary && this._dictionary.has('C')) {\n                    this._color = (0,_utils__WEBPACK_IMPORTED_MODULE_3__._parseColor)(this._dictionary.getArray('C'));\n                }\n            }\n            return (this._color) ? this._color : [0, 0, 0];\n        },\n        /**\n         * Sets the bookmark color.\n         *\n         * @param {number[]} value Bookmark color.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Sets the bookmark color\n         * bookmark.color = [255, 0, 0];\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._color = value;\n            if (this._dictionary) {\n                this._dictionary.update('C', [Number.parseFloat((value[0] / 255).toFixed(7)),\n                    Number.parseFloat((value[1] / 255).toFixed(7)),\n                    Number.parseFloat((value[2] / 255).toFixed(7))]);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmark.prototype, \"textStyle\", {\n        /**\n         * Gets the text style.\n         *\n         * @returns {PdfTextStyle} Text style.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the textStyle\n         * let textStyle: PdfTextStyle = bookmark.textStyle;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (this._textStyle === null || typeof this._textStyle === 'undefined') {\n                this._textStyle = this._obtainTextStyle();\n            }\n            return this._textStyle;\n        },\n        /**\n         * Sets the text style.\n         *\n         * @param {PdfTextStyle} value Text style.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Sets the textStyle\n         * bookmark.textStyle = PdfTextStyle.italic;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._textStyle = value;\n            this._updateTextStyle(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBookmark.prototype, \"_next\", {\n        get: function () {\n            var nextBookmark;\n            if (this._dictionary && this._dictionary.has('Next')) {\n                var reference = this._dictionary._get('Next');\n                if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__._isNullOrUndefined)(reference)) {\n                    var dictionary = this._crossReference._fetch(reference);\n                    if (dictionary) {\n                        nextBookmark = new PdfBookmark(dictionary, this._crossReference);\n                        nextBookmark._reference = reference;\n                    }\n                }\n            }\n            return nextBookmark;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfBookmark.prototype._updateTextStyle = function (value) {\n        if (value === _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextStyle.regular) {\n            if (this._dictionary && this._dictionary.has('F')) {\n                delete this._dictionary._map.F;\n            }\n        }\n        else if (this._dictionary) {\n            this._dictionary.update('F', value);\n        }\n    };\n    PdfBookmark.prototype._obtainTextStyle = function () {\n        var style = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfTextStyle.regular;\n        if (this._dictionary && this._dictionary.has('F')) {\n            var flag = this._dictionary.get('F');\n            var flagValue = 0;\n            if (typeof flag !== 'undefined' && flag !== null) {\n                flagValue = flag;\n            }\n            style |= flagValue;\n        }\n        return style;\n    };\n    PdfBookmark.prototype._obtainNamedDestination = function () {\n        var document = this._crossReference._document;\n        var destinationCollection;\n        if (document) {\n            destinationCollection = document._destinationCollection;\n        }\n        var destination; // eslint-disable-line\n        var namedDestination;\n        if (destinationCollection) {\n            var dictionary = this._dictionary;\n            if (dictionary) {\n                if (dictionary.has('A')) {\n                    var action = dictionary.get('A');\n                    if (action && action.has('D')) {\n                        destination = action.get('D');\n                    }\n                }\n                else if (dictionary.has('Dest')) {\n                    destination = dictionary.get('Dest');\n                }\n            }\n            if (destination) {\n                var value = void 0;\n                if (destination instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName) {\n                    value = destination.name;\n                }\n                else if (typeof destination === 'string') {\n                    value = destination;\n                }\n                if (value) {\n                    var namedDestinations = destinationCollection._namedDestinations;\n                    for (var i = 0; i < namedDestinations.length; i++) {\n                        namedDestination = namedDestinations[Number.parseInt(i.toString(), 10)];\n                        if (namedDestination._title === value) {\n                            destination = namedDestination;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return namedDestination;\n    };\n    return PdfBookmark;\n}(PdfBookmarkBase));\n\n/**\n * Represents a named destination in a PDF document.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Get the bookmarks\n * let bookmarks: PdfBookmarkBase = document.bookmarks;\n * // Gets the bookmark at the specified index\n * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n * // Gets the named destination\n * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfNamedDestination = /** @class */ (function () {\n    function PdfNamedDestination(element, crossReference) {\n        if (typeof element === 'string') {\n            this._initialize();\n            this.title = element;\n        }\n        else {\n            this._dictionary = element;\n            this._crossReference = crossReference;\n        }\n    }\n    Object.defineProperty(PdfNamedDestination.prototype, \"destination\", {\n        /**\n         * Gets the destination.\n         *\n         * @returns {PdfDestination} Page destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Gets the destination\n         * let destination: PdfDestination = namedDestination.destination;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._destination;\n        },\n        /**\n         * Sets the destination.\n         *\n         * @param {PdfDestination} value destination.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Set the destination\n         * namedDestination.destination = new PdfDestination(page, [100, 200]);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value) {\n                value._parent = this;\n                this._destination = value;\n                this._destination._initializePrimitive();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNamedDestination.prototype, \"title\", {\n        /**\n         * Gets the title.\n         *\n         * @returns {string} title.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Gets the title\n         * let title: string = namedDestination.title;\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._title;\n        },\n        /**\n         * Sets the title.\n         *\n         * @param {string} value title.\n         *\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Get the bookmarks\n         * let bookmarks: PdfBookmarkBase = document.bookmarks;\n         * // Gets the bookmark at the specified index\n         * let bookmark: PdfBookmark = bookmarks.at(0) as PdfBookmark;\n         * // Gets the named destination\n         * let namedDestination: PdfNamedDestination = bookmark.namedDestination;\n         * // Set the title\n         * namedDestination.title = 'Syncfusion';\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            if (value !== this._title && this._dictionary) {\n                this._title = value;\n                this._dictionary.update('Title', value);\n                this._dictionary._updated = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfNamedDestination.prototype._initialize = function () {\n        this._dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n        this._dictionary.update('S', _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('GoTo'));\n    };\n    return PdfNamedDestination;\n}());\n\nvar _PdfNamedDestinationCollection = /** @class */ (function () {\n    function _PdfNamedDestinationCollection(dictionary, crossReference) {\n        this._namedDestinations = [];\n        if (dictionary) {\n            this._dictionary = dictionary;\n        }\n        if (crossReference) {\n            this._crossReference = crossReference;\n        }\n        if (dictionary && dictionary.has('Dests')) {\n            var destination = dictionary.get('Dests');\n            if (destination) {\n                if (destination.has('Names')) {\n                    this._addCollection(destination);\n                }\n                else if (destination.has('Kids')) {\n                    var destinationArray = destination.getArray('Kids'); // eslint-disable-line\n                    for (var i = 0; i < destinationArray.length; i++) {\n                        this._findDestination(destinationArray[Number.parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n        }\n    }\n    _PdfNamedDestinationCollection.prototype._findDestination = function (destination) {\n        if (destination) {\n            if (destination.has('Names')) {\n                this._addCollection(destination);\n            }\n            else if (destination.has('Kids')) {\n                var kids = destination.getArray('Kids'); // eslint-disable-line\n                if (kids && Array.isArray(kids) && kids.length > 0) {\n                    for (var i = 0; i < kids.length; i++) {\n                        this._findDestination(kids[Number.parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n        }\n    };\n    _PdfNamedDestinationCollection.prototype._addCollection = function (destination) {\n        var elements = destination.getRaw('Names'); // eslint-disable-line\n        var ref; // eslint-disable-line\n        var dictionary;\n        if (elements && elements instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfReference) {\n            ref = this._crossReference._fetch(elements);\n        }\n        if (ref && Array.isArray(ref) && ref.length > 0) {\n            elements = ref;\n        }\n        if (elements && Array.isArray(elements) && elements.length > 0) {\n            for (var i = 1; i < elements.length; i = i + 2) {\n                var reference = elements[i]; // eslint-disable-line\n                if (reference && reference instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfReference) {\n                    var destinationArray = this._crossReference._fetch(reference); // eslint-disable-line\n                    if (destinationArray && Array.isArray(destinationArray) && destinationArray.length > 0) {\n                        dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n                        dictionary.update('D', destinationArray);\n                    }\n                    else {\n                        dictionary = this._crossReference._fetch(reference);\n                    }\n                }\n                else if ((dictionary === null || typeof dictionary === 'undefined') && Array.isArray(reference)) {\n                    dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n                    dictionary.update('D', reference);\n                }\n                if (dictionary) {\n                    var namedDestination = new PdfNamedDestination(dictionary, this._crossReference);\n                    var value = elements[i - 1];\n                    var destinationObject = void 0;\n                    var destinationArray = void 0; // eslint-disable-line\n                    if (value) {\n                        namedDestination._title = value;\n                        if (dictionary.has('D')) {\n                            destinationArray = dictionary.get('D');\n                            destinationObject = new _pdf_page__WEBPACK_IMPORTED_MODULE_1__.PdfDestination();\n                            var reference_1 = destinationArray[0];\n                            if (reference_1 && destinationArray && destinationArray[0] instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfReference) {\n                                var pageDictionary = this._crossReference._fetch(reference_1);\n                                var loadedDocument = this._crossReference._document;\n                                var index = void 0;\n                                if (loadedDocument && pageDictionary) {\n                                    index = (0,_utils__WEBPACK_IMPORTED_MODULE_3__._getPageIndex)(loadedDocument, pageDictionary);\n                                    if (typeof index !== 'undefined' && index !== null && index >= 0) {\n                                        destinationObject._index = index;\n                                        destinationObject.page = loadedDocument.getPage(index);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (destinationArray[1] instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName) {\n                        var left = void 0;\n                        var height = void 0;\n                        var zoom = void 0;\n                        var mode = destinationArray[1].name;\n                        var page = destinationObject.page;\n                        switch (mode) {\n                            case 'Fit':\n                                destinationObject._destinationMode = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfDestinationMode.fitToPage;\n                                break;\n                            case 'XYZ':\n                                destinationObject._destinationMode = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfDestinationMode.location;\n                                if (destinationArray.length > 2) {\n                                    left = destinationArray[2];\n                                }\n                                if (destinationArray.length > 3) {\n                                    height = destinationArray[3];\n                                }\n                                if (destinationArray.length > 4) {\n                                    zoom = destinationArray[4];\n                                }\n                                if (page) {\n                                    var size = page.size;\n                                    var topValue = (height === null || typeof height === 'undefined') ? 0 : size[1] - height;\n                                    var leftValue = (left === null || typeof left === 'undefined') ? 0 : left;\n                                    destinationObject._location = [leftValue, topValue];\n                                    if (page.rotation !== _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfRotationAngle.angle0) {\n                                        topValue = (0,_utils__WEBPACK_IMPORTED_MODULE_3__._checkRotation)(page, height, left);\n                                    }\n                                    destinationObject._zoom = (typeof zoom !== 'undefined' && zoom !== null) ? zoom : 0;\n                                    if (left === null || height === null || zoom === null || typeof left === 'undefined'\n                                        || typeof height === 'undefined' || typeof zoom === 'undefined') {\n                                        destinationObject._isValid = false;\n                                    }\n                                }\n                                break;\n                            case 'FitH':\n                            case 'FitBH':\n                                destinationObject._destinationMode = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfDestinationMode.fitH;\n                                if (destinationArray.length >= 3) {\n                                    height = destinationArray[2];\n                                }\n                                if (page) {\n                                    var size = page.size;\n                                    var topValue = (height === null || typeof height === 'undefined') ? 0 : size[1] - height;\n                                    destinationObject._location = [0, topValue];\n                                }\n                                if (height === null || typeof height === 'undefined') {\n                                    destinationObject._isValid = false;\n                                }\n                                break;\n                            case 'FitR':\n                                destinationObject._destinationMode = _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfDestinationMode.fitR;\n                                break;\n                        }\n                    }\n                    destinationObject._parent = namedDestination;\n                    namedDestination._destination = destinationObject;\n                    this._namedDestinations.push(namedDestination);\n                }\n            }\n        }\n    };\n    return _PdfNamedDestinationCollection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-outline.js?");

/***/ })

}]);