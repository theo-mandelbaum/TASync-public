"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-schedule_src_schedule_actions_crud_js-baeee079"],{

/***/ "./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Crud: () => (/* binding */ Crud)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../recurrence-editor/date-generator */ \"./node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/constant.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/util.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable max-len */\n\n\n\n\n/**\n * Schedule CRUD operations\n */\nvar Crud = /** @class */ (function () {\n    function Crud(parent) {\n        this.parent = parent;\n        this.crudObj = { sourceEvent: null, targetEvent: null, isCrudAction: false };\n    }\n    Crud.prototype.getQuery = function () {\n        var start = this.parent.activeView.startDate();\n        var end = this.parent.activeView.endDate();\n        return this.parent.dataModule.generateQuery(start, end);\n    };\n    Crud.prototype.getTable = function () {\n        if (this.parent.eventSettings.query) {\n            var query = this.parent.eventSettings.query.clone();\n            return query.fromTable;\n        }\n        return null;\n    };\n    Crud.prototype.refreshDataManager = function () {\n        var _this = this;\n        if (!this.parent.activeView) {\n            return;\n        }\n        if (this.parent.uiStateValues && this.parent.uiStateValues.isPreventEventRefresh) {\n            this.parent.uiStateValues.isPreventEventRefresh = false;\n            this.parent.refreshEvents(false);\n            this.parent.hideSpinner();\n            return;\n        }\n        var start = this.parent.activeView.startDate();\n        var end = this.parent.activeView.endDate();\n        var dataManager = this.parent.dataModule.getData(this.parent.dataModule.generateQuery(start, end));\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); }).catch(function (e) { return _this.dataManagerFailure(e); });\n    };\n    Crud.prototype.dataManagerSuccess = function (e) {\n        var _this = this;\n        if (!this.parent || this.parent && this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.dataBinding, e, function (args) {\n            if (args.cancel) {\n                return;\n            }\n            var resultData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], args.result, null, true);\n            _this.parent.eventsData = resultData.filter(function (data) { return !data[_this.parent.eventFields.isBlock]; });\n            _this.parent.blockData = resultData.filter(function (data) { return data[_this.parent.eventFields.isBlock]; });\n            _this.refreshProcessedData();\n            if (_this.parent.dragAndDropModule && _this.parent.dragAndDropModule.actionObj.action === 'drag') {\n                _this.parent.dragAndDropModule.navigationWrapper();\n            }\n            _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.dataBound, null, function () {\n                _this.parent.hideSpinner();\n                if (_this.parent.isPrinting) {\n                    setTimeout(function () {\n                        _this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_2__.print, {});\n                    }, 100);\n                }\n            });\n        });\n    };\n    Crud.prototype.dataManagerFailure = function (e) {\n        var _this = this;\n        if (!this.parent || this.parent && this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionFailure, { error: e }, function () { return _this.parent.hideSpinner(); });\n    };\n    Crud.prototype.refreshProcessedData = function (isVirtualScrollAction, dynamicEvents) {\n        if (isVirtualScrollAction === void 0) { isVirtualScrollAction = false; }\n        if (this.parent.dragAndDropModule) {\n            this.parent.dragAndDropModule.actionObj.action = '';\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], 'e-event-action');\n        }\n        if (this.parent.activeViewOptions && this.parent.activeViewOptions.eventTemplate) {\n            var templateNames = ['eventTemplate'];\n            if (this.crudObj.isCrudAction &&\n                ['Agenda', 'MonthAgenda', 'Year', 'TimelineYear'].indexOf(this.parent.currentView) === -1) {\n                templateNames = [];\n                for (var i = 0, len = this.crudObj.sourceEvent.length; i < len; i++) {\n                    templateNames.push('eventTemplate_' + this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex);\n                    if (this.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !==\n                        this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {\n                        templateNames.push('eventTemplate_' + this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex);\n                    }\n                }\n            }\n            if (templateNames.length > 0) {\n                this.parent.resetTemplates(templateNames);\n            }\n        }\n        if (isVirtualScrollAction) {\n            this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_2__.dataReady, { processedData: dynamicEvents ? this.parent.eventBase.processData(dynamicEvents) : this.parent.eventsProcessed });\n            return;\n        }\n        var eventsData = this.parent.eventsData || [];\n        var blockData = this.parent.blockData || [];\n        var data = eventsData.concat(blockData);\n        this.parent.notify(_base_constant__WEBPACK_IMPORTED_MODULE_2__.dataReady, { processedData: this.parent.eventBase ? this.parent.eventBase.processData(data) : [] });\n    };\n    Crud.prototype.refreshData = function (args) {\n        var _this = this;\n        var actionArgs = {\n            requestType: args.requestType, cancel: false, data: args.data,\n            addedRecords: args.editParams.addedRecords, changedRecords: args.editParams.changedRecords,\n            deletedRecords: args.editParams.deletedRecords\n        };\n        if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element && this.parent.dragAndDropModule.actionObj.action) {\n            this.parent.dragAndDropModule.actionObj.element.style.display = 'none';\n        }\n        if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element && this.parent.resizeModule.actionObj.action) {\n            this.parent.resizeModule.actionObj.element.style.display = 'none';\n        }\n        if (this.parent.isSpecificResourceEvents()) {\n            if (args.requestType === 'eventCreated' || args.requestType === 'eventRemoved') {\n                this.crudObj.isCrudAction = true;\n                this.crudObj.sourceEvent = [];\n                var crudData = args.data instanceof Array ? (args.data.length === 0 &&\n                    args.requestType === 'eventRemoved' ? args.editParams.deletedRecords : args.data) :\n                    ((typeof args.data === 'string' || typeof args.data === 'number') && args.requestType === 'eventRemoved') ?\n                        args.editParams.deletedRecords : [args.data];\n                var _loop_1 = function (data) {\n                    this_1.crudObj.isCrudAction = !(args.requestType === 'eventRemoved' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.parent));\n                    var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data);\n                    if (groupIndex > -1 && this_1.parent.crudModule.crudObj.sourceEvent.filter(function (tdData) { return tdData.groupIndex === groupIndex; }).length === 0\n                        && this_1.crudObj.isCrudAction) {\n                        this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)]);\n                    }\n                };\n                var this_1 = this;\n                for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {\n                    var data = crudData_1[_i];\n                    _loop_1(data);\n                }\n                this.crudObj.targetEvent = this.crudObj.sourceEvent;\n            }\n        }\n        if (this.parent.dataModule.dataManager.dataSource.offline) {\n            this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionComplete, actionArgs, function (offlineArgs) {\n                if (!offlineArgs.cancel) {\n                    _this.refreshDataManager();\n                }\n            });\n        }\n        else {\n            args.promise.then(function () {\n                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                    return;\n                }\n                _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionComplete, actionArgs, function (onlineArgs) {\n                    if (!onlineArgs.cancel) {\n                        _this.refreshDataManager();\n                    }\n                });\n            }).catch(function (e) {\n                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                    return;\n                }\n                _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionFailure, { error: e });\n            });\n        }\n    };\n    Crud.prototype.processAddEvent = function (addArgs) {\n        var fields = this.parent.eventFields;\n        var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n        var promise;\n        if (addArgs.addedRecords instanceof Array) {\n            for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n                var event_1 = _a[_i];\n                event_1 = this.parent.eventBase.updateEventDateTime(event_1);\n                var eventData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.parent.eventBase.processTimezone(event_1, true), null, true);\n                editParams.addedRecords.push(eventData);\n            }\n            promise = this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, this.getTable(), this.getQuery());\n        }\n        else {\n            var event_2 = this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n            editParams.addedRecords.push(event_2);\n            promise = this.parent.dataModule.dataManager.insert(event_2, this.getTable(), this.getQuery());\n        }\n        var crudArgs = {\n            requestType: 'eventCreated', cancel: false, data: addArgs.addedRecords, promise: promise, editParams: editParams\n        };\n        this.refreshData(crudArgs);\n    };\n    Crud.prototype.processSaveEvent = function (saveArgs) {\n        var promise;\n        var fields = this.parent.eventFields;\n        var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n        if (saveArgs.changedRecords instanceof Array) {\n            for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                var event_3 = _a[_i];\n                event_3 = this.parent.eventBase.updateEventDateTime(event_3);\n                var eventData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.parent.eventBase.processTimezone(event_3, true), null, true);\n                editParams.changedRecords.push(eventData);\n            }\n            promise = this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, this.getTable(), this.getQuery());\n        }\n        else {\n            var event_4 = this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n            editParams.changedRecords.push(event_4);\n            promise = this.parent.dataModule.dataManager.update(fields.id, event_4, this.getTable(), this.getQuery());\n        }\n        var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, saveArgs.changedRecords[saveArgs.changedRecords.length - 1], null, true);\n        this.parent.eventBase.selectWorkCellByTime([this.parent.eventBase.processTimezone(cloneEvent)]);\n        var crudArgs = {\n            requestType: 'eventChanged', cancel: false,\n            data: saveArgs.changedRecords, promise: promise, editParams: editParams\n        };\n        this.refreshData(crudArgs);\n    };\n    Crud.prototype.processDeleteEvent = function (deleteArgs) {\n        var promise;\n        var fields = this.parent.eventFields;\n        var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n        if (deleteArgs.deletedRecords.length > 1) {\n            editParams.deletedRecords = editParams.deletedRecords.concat(deleteArgs.deletedRecords);\n            promise = this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, this.getTable(), this.getQuery());\n        }\n        else {\n            editParams.deletedRecords.push(deleteArgs.deletedRecords[0]);\n            promise = this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], this.getTable(), this.getQuery());\n        }\n        this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n        var crudArgs = {\n            requestType: 'eventRemoved', cancel: false,\n            data: deleteArgs.deletedRecords, promise: promise, editParams: editParams\n        };\n        this.refreshData(crudArgs);\n    };\n    Crud.prototype.addEvent = function (eventData) {\n        var _this = this;\n        if (this.parent.eventSettings.allowAdding && !this.parent.activeViewOptions.readonly) {\n            if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', eventData);\n                return;\n            }\n            if (this.parent.eventBase.checkOverlap(eventData)) {\n                return;\n            }\n            var addEvents = (eventData instanceof Array) ? eventData : [eventData];\n            if (addEvents.length === 0) {\n                return;\n            }\n            var args = {\n                requestType: 'eventCreate', cancel: false, data: addEvents,\n                addedRecords: addEvents, changedRecords: [], deletedRecords: []\n            };\n            this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (addArgs) {\n                if (!addArgs.cancel) {\n                    if (addArgs.promise) {\n                        addArgs.promise.then(function (hasContinue) {\n                            if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                return;\n                            }\n                            if (hasContinue) {\n                                _this.processAddEvent(addArgs);\n                            }\n                        }).catch(function (e) {\n                            if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                return;\n                            }\n                            _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionFailure, { error: e });\n                        });\n                    }\n                    else {\n                        _this.processAddEvent(addArgs);\n                    }\n                }\n            });\n        }\n    };\n    Crud.prototype.saveEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowEditing && !this.parent.activeViewOptions.readonly) {\n            if (this.parent.currentAction !== 'EditFollowingEvents' && !this.isBlockEvent(eventData)\n                && this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', eventData);\n                this.parent.crudModule.crudObj.isCrudAction = false;\n                return;\n            }\n            var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n            if (updateEvents.length === 0) {\n                return;\n            }\n            this.parent.currentAction = action;\n            if (action) {\n                switch (action) {\n                    case 'Save':\n                        this.processSave(eventData);\n                        break;\n                    case 'EditOccurrence':\n                        this.processOccurrences(eventData, action);\n                        break;\n                    case 'EditFollowingEvents':\n                        this.processFollowSeries(eventData, action);\n                        break;\n                    case 'EditSeries':\n                        this.processEntireSeries(eventData, action);\n                        break;\n                }\n            }\n            else {\n                if (this.parent.eventBase.checkOverlap(eventData)) {\n                    return;\n                }\n                var args = {\n                    requestType: 'eventChange', cancel: false, data: eventData,\n                    addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n                };\n                this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (saveArgs) {\n                    if (!saveArgs.cancel) {\n                        if (saveArgs.promise) {\n                            saveArgs.promise.then(function (hasContinue) {\n                                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                    return;\n                                }\n                                if (hasContinue) {\n                                    _this.processSaveEvent(saveArgs);\n                                }\n                            }).catch(function (e) {\n                                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                    return;\n                                }\n                                _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionFailure, { error: e });\n                            });\n                        }\n                        else {\n                            _this.processSaveEvent(saveArgs);\n                        }\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.deleteEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowDeleting && !this.parent.activeViewOptions.readonly) {\n            this.parent.currentAction = action;\n            var deleteEvents = [];\n            if (typeof eventData === 'string' || typeof eventData === 'number') {\n                deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n                    return eventObj[_this.parent.eventFields.id] === eventData;\n                });\n            }\n            else {\n                deleteEvents = (eventData instanceof Array ? eventData : [eventData]);\n            }\n            if (deleteEvents.length === 0) {\n                return;\n            }\n            if (action) {\n                switch (action) {\n                    case 'Delete':\n                        this.processDelete(deleteEvents);\n                        break;\n                    case 'DeleteOccurrence':\n                        this.processOccurrences(deleteEvents, action);\n                        break;\n                    case 'DeleteFollowingEvents':\n                        this.processFollowSeries(deleteEvents, action);\n                        break;\n                    case 'DeleteSeries':\n                        this.processEntireSeries(deleteEvents, action);\n                        break;\n                }\n            }\n            else {\n                var args = {\n                    requestType: 'eventRemove', cancel: false, data: eventData,\n                    addedRecords: [], changedRecords: [], deletedRecords: deleteEvents\n                };\n                this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (deleteArgs) {\n                    if (!deleteArgs.cancel) {\n                        if (deleteArgs.promise) {\n                            deleteArgs.promise.then(function (hasContinue) {\n                                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                    return;\n                                }\n                                if (hasContinue) {\n                                    _this.processDeleteEvent(deleteArgs);\n                                }\n                            }).catch(function (e) {\n                                if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n                                    return;\n                                }\n                                _this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionFailure, { error: e });\n                            });\n                        }\n                        else {\n                            _this.processDeleteEvent(deleteArgs);\n                        }\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.processOccurrences = function (eventData, action) {\n        var _this = this;\n        var occurrenceData = [];\n        var isDeletedRecords = false;\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n                var event_5 = eventData_1[_i];\n                occurrenceData.push({ occurrence: event_5, parent: this.getParentEvent(event_5) });\n            }\n        }\n        else {\n            occurrenceData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove',\n            cancel: false,\n            addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n        };\n        args.data = occurrenceData;\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (occurrenceArgs) {\n            if (!occurrenceArgs.cancel) {\n                var fields = _this.parent.eventFields;\n                var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var occurrenceEvents = (occurrenceData instanceof Array ? occurrenceData : [occurrenceData]);\n                var _loop_2 = function (a, count) {\n                    var childEvent = occurrenceArgs.changedRecords[parseInt(a.toString(), 10)];\n                    var parentEvent = occurrenceEvents[parseInt(a.toString(), 10)].parent;\n                    var parentException = parentEvent[fields.recurrenceException];\n                    var editedData = void 0;\n                    var exceptionDate = void 0;\n                    switch (action) {\n                        case 'EditOccurrence':\n                            editedData = _this.parent.eventsProcessed.filter(function (event) { return event.Guid === childEvent.Guid; })[0];\n                            exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n                            if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] = exceptionDate;\n                                childEvent[fields.recurrenceException] = (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.getRecurrenceStringFromDate)(editedData[fields.startTime]);\n                                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                                childEvent[fields.followingID] = null;\n                                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                                editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            else {\n                                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            break;\n                        case 'DeleteOccurrence':\n                            if (!childEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] =\n                                    _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            }\n                            if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                                editParams.deletedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                                isDeletedRecords = true;\n                            }\n                            break;\n                    }\n                };\n                for (var a = 0, count = occurrenceArgs.changedRecords.length; a < count; a++) {\n                    _loop_2(a, count);\n                }\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n                var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, occurrenceArgs.changedRecords[occurrenceArgs.changedRecords.length - 1], null, true);\n                _this.parent.eventBase.selectWorkCellByTime(action === 'EditOccurrence' ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);\n                var crudArgs = {\n                    requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: isDeletedRecords ? occurrenceArgs.deletedRecords : occurrenceArgs.changedRecords,\n                    promise: promise, editParams: editParams\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processFollowSeries = function (eventData, action) {\n        var _this = this;\n        var followData = [];\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n                var event_6 = eventData_2[_i];\n                followData.push({ occurrence: event_6, parent: this.getParentEvent(event_6) });\n            }\n        }\n        else {\n            followData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateFollowEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateFollowEvents, deletedRecords: []\n        };\n        args.data = followData;\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (followArgs) {\n            if (!followArgs.cancel) {\n                var fields_1 = _this.parent.eventFields;\n                var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var followEvents = followData instanceof Array ? followData : [followData];\n                var _loop_3 = function (a, count) {\n                    var childEvent = followArgs.changedRecords[parseInt(a.toString(), 10)];\n                    var parentEvent = followEvents[parseInt(a.toString(), 10)].parent;\n                    var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n                    var isSpanned = void 0;\n                    switch (action) {\n                        case 'EditFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent);\n                            isSpanned = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n                            childEvent[fields_1.followingID] = isSpanned ? null : parentEvent[fields_1.id];\n                            childEvent[fields_1.recurrenceID] = null;\n                            editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                                childEvent[fields_1.recurrenceException] = null;\n                                if (followData_1.occurrence.length > 0) {\n                                    var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n                                    if (rule.indexOf('COUNT') === -1) {\n                                        childEvent[fields_1.recurrenceRule] = rule;\n                                    }\n                                }\n                                if (followData_1.follow.length > 0) {\n                                    childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                                    editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.follow);\n                                }\n                                if (isSpanned) {\n                                    followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                                        return eventObj[fields_1.recurrenceID] === parentEvent[fields_1.id];\n                                    });\n                                }\n                                editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence);\n                            }\n                            break;\n                        case 'DeleteFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n                            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n                            break;\n                    }\n                };\n                for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n                    _loop_3(a, count);\n                }\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_1.id, _this.getTable(), _this.getQuery());\n                var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, followArgs.changedRecords[followArgs.changedRecords.length - 1], null, true);\n                _this.parent.eventBase.selectWorkCellByTime(action === 'EditFollowingEvents' ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);\n                var crudArgs = {\n                    requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: followArgs.changedRecords, promise: promise, editParams: editParams\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processEntireSeries = function (eventData, action) {\n        var _this = this;\n        var seriesData = [];\n        var isDeletedRecords = false;\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n                var event_7 = eventData_3[_i];\n                seriesData.push(this.getParentEvent(event_7, true));\n            }\n        }\n        else {\n            seriesData = this.getParentEvent(eventData, true);\n        }\n        var updateSeriesEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: [], deletedRecords: []\n        };\n        args.data = seriesData;\n        if (action === 'EditSeries') {\n            args.changedRecords = updateSeriesEvents;\n        }\n        else {\n            args.deletedRecords = updateSeriesEvents;\n        }\n        if (action === 'EditSeries' && !this.parent.uiStateValues.isIgnoreOccurrence) {\n            var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n            for (var a = 0, count = args.changedRecords.length; a < count; a++) {\n                var parentEvent = seriesEvents[parseInt(a.toString(), 10)];\n                var eventCollections = this.parent.eventBase.getEventCollections(parentEvent);\n                var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n                args.deletedRecords = args.deletedRecords.concat(deletedEvents);\n            }\n        }\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (seriesArgs) {\n            if (!seriesArgs.cancel) {\n                var fields_2 = _this.parent.eventFields;\n                var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n                var records = action === 'EditSeries' ? seriesArgs.changedRecords : seriesArgs.deletedRecords;\n                var _loop_4 = function (a, count) {\n                    var childEvent = records[parseInt(a.toString(), 10)];\n                    var parentEvent = seriesEvents[parseInt(a.toString(), 10)];\n                    var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n                    var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n                    switch (action) {\n                        case 'EditSeries':\n                            childEvent[fields_2.id] = parentEvent[fields_2.id];\n                            childEvent[fields_2.recurrenceID] = null;\n                            childEvent[fields_2.followingID] = null;\n                            if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                                    return eventObj[fields_2.id] === childEvent[fields_2.id];\n                                });\n                                if (originalParent.length > 0) {\n                                    childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                                }\n                            }\n                            else {\n                                childEvent[fields_2.recurrenceException] = null;\n                                editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents);\n                            }\n                            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            _this.parent.uiStateValues.isIgnoreOccurrence = false;\n                            break;\n                        case 'DeleteSeries':\n                            editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents.concat(_this.parent.eventBase.processTimezone(parentEvent, true)));\n                            isDeletedRecords = true;\n                            break;\n                    }\n                };\n                for (var a = 0, count = records.length; a < count; a++) {\n                    _loop_4(a, count);\n                }\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_2.id, _this.getTable(), _this.getQuery());\n                var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, records[records.length - 1], null, true);\n                _this.parent.eventBase.selectWorkCellByTime(action === 'EditSeries' ? [_this.parent.eventBase.processTimezone(cloneEvent)] : [cloneEvent]);\n                var crudArgs = {\n                    requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,\n                    promise: promise, editParams: editParams\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processDelete = function (eventData) {\n        var _this = this;\n        var deleteData = [];\n        for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n            var eventObj = eventData_4[_i];\n            if (eventObj[this.parent.eventFields.recurrenceRule]) {\n                deleteData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });\n            }\n            else {\n                deleteData.push(eventObj);\n            }\n        }\n        var args = {\n            requestType: 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: [], deletedRecords: eventData\n        };\n        args.data = deleteData;\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (deleteArgs) {\n            if (!deleteArgs.cancel) {\n                var fields_3 = _this.parent.eventFields;\n                var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var _loop_5 = function (a, count) {\n                    var isDelete = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(deleteArgs.deletedRecords[parseInt(a.toString(), 10)][_this.parent.eventFields.recurrenceRule]);\n                    if (!isDelete) {\n                        var parentEvent_1 = deleteData[parseInt(a.toString(), 10)].parent;\n                        var isEdited = editParams.changedRecords.filter(function (obj) {\n                            return obj[fields_3.id] === parentEvent_1[fields_3.id];\n                        });\n                        var editedDate = deleteArgs.deletedRecords[parseInt(a.toString(), 10)][fields_3.startTime];\n                        if (isEdited.length > 0) {\n                            var editedData = isEdited[0];\n                            editedData[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n                        }\n                        else {\n                            parentEvent_1[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n                        }\n                        if (isEdited.length === 0) {\n                            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n                        }\n                        isDelete = deleteArgs.deletedRecords[parseInt(a.toString(), 10)][fields_3.id] !== parentEvent_1[fields_3.id];\n                    }\n                    if (isDelete) {\n                        if (deleteArgs.deletedRecords instanceof Array) {\n                            for (var _i = 0, _a = deleteArgs.deletedRecords; _i < _a.length; _i++) {\n                                var event_8 = _a[_i];\n                                _this.parent.eventBase.processTimezone(event_8, true);\n                            }\n                        }\n                        editParams.deletedRecords.push(deleteArgs.deletedRecords[parseInt(a.toString(), 10)]);\n                    }\n                };\n                for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n                    _loop_5(a, count);\n                }\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_3.id, _this.getTable(), _this.getQuery());\n                var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, deleteArgs.deletedRecords[deleteArgs.deletedRecords.length - 1], null, true);\n                _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);\n                var crudArgs = {\n                    requestType: 'eventRemoved', cancel: false, data: deleteArgs.deletedRecords, promise: promise, editParams: editParams\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processSave = function (data) {\n        var _this = this;\n        var eventData = (data instanceof Array) ? data : [data];\n        var editData = [];\n        for (var _i = 0, eventData_5 = eventData; _i < eventData_5.length; _i++) {\n            var eventObj = eventData_5[_i];\n            if (eventObj[this.parent.eventFields.recurrenceRule]) {\n                editData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });\n            }\n            else {\n                editData.push(eventObj);\n            }\n        }\n        var args = { requestType: 'eventChange', cancel: false, addedRecords: [], changedRecords: eventData, deletedRecords: [] };\n        args.data = editData;\n        this.parent.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_2__.actionBegin, args, function (editArgs) {\n            if (!editArgs.cancel) {\n                var fields = _this.parent.eventFields;\n                var editParams = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                for (var _i = 0, _a = editArgs.changedRecords; _i < _a.length; _i++) {\n                    var record = _a[_i];\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(record[fields.recurrenceRule]) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(record[fields.recurrenceException])) {\n                        var exceptionString = (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.getRecurrenceStringFromDate)(record[fields.startTime]);\n                        var parentEle = _this.getParentEvent(record);\n                        parentEle[fields.recurrenceException] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentEle[fields.recurrenceException]) ?\n                            exceptionString : parentEle[fields.recurrenceException].concat(',' + exceptionString);\n                        record[fields.id] = _this.parent.getEventMaxID();\n                        record[fields.recurrenceException] = exceptionString;\n                        editParams.addedRecords.push(_this.parent.eventBase.processTimezone(record, true));\n                        editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEle, true));\n                    }\n                    else {\n                        editParams.changedRecords.push(_this.parent.eventBase.processTimezone(record, true));\n                    }\n                }\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n                var cloneEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, editArgs.changedRecords[editArgs.changedRecords.length - 1], null, true);\n                _this.parent.eventBase.selectWorkCellByTime([_this.parent.eventBase.processTimezone(cloneEvent)]);\n                var crudArgs = { requestType: 'eventChanged', cancel: false, data: editArgs.changedRecords, promise: promise, editParams: editParams };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.getParentEvent = function (event, isParent) {\n        if (isParent === void 0) { isParent = false; }\n        var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n        if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n            this.parent.eventBase.timezoneConvert(parentEvent);\n        }\n        return parentEvent;\n    };\n    Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n        var timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();\n        if (timezone) {\n            eventStartTime = this.parent.tzModule.remove(new Date(+eventStartTime.getTime()), timezone);\n        }\n        var exDate = (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.getRecurrenceStringFromDate)(eventStartTime);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(exceptionDateList)) {\n            if (exceptionDateList.indexOf(exDate) === -1) {\n                exceptionDateList = !((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(exceptionDateList)) ? exceptionDateList + ',' + exDate : exDate;\n            }\n        }\n        else {\n            exceptionDateList = exDate;\n        }\n        return exceptionDateList;\n    };\n    Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n        var fields = this.parent.eventFields;\n        var recurrenceRule = parentEvent[fields.recurrenceRule];\n        var endDate;\n        if (followEvent instanceof Date) {\n            endDate = new Date(+followEvent);\n        }\n        else {\n            endDate = new Date(+followEvent[fields.startTime]);\n            var newRecurrenceRule = followEvent[fields.recurrenceRule];\n            if (newRecurrenceRule) {\n                var startDate = parentEvent[fields.startTime];\n                var ruleException = (this.parent.currentAction === 'DeleteFollowingEvents') ? followEvent[fields.recurrenceException] : null;\n                var dateCollection = (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.generate)(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n                var untilDate = new Date(dateCollection.slice(-1)[0]);\n                untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());\n                endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());\n                followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, new Date(+untilDate), false);\n            }\n        }\n        parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, _base_util__WEBPACK_IMPORTED_MODULE_3__.addDays(new Date(endDate.getTime()), -1), true);\n    };\n    Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n        var splitRule = recurrenceRule.split(';');\n        var updatedRule = '';\n        for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n            var rule = splitRule_1[_i];\n            if (rule !== '') {\n                var ruleKey = rule.split('=')[0];\n                var ruleValue = rule.split('=')[1];\n                if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n                    ruleValue = (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.getRecurrenceStringFromDate)(untilDate);\n                    rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n                }\n                updatedRule += rule + ';';\n            }\n        }\n        if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n            updatedRule += 'UNTIL=' + (0,_recurrence_editor_date_generator__WEBPACK_IMPORTED_MODULE_1__.getRecurrenceStringFromDate)(untilDate);\n        }\n        return updatedRule;\n    };\n    Crud.prototype.isBlockEvent = function (eventData) {\n        var eventCollection = (eventData instanceof Array) ? eventData : [eventData];\n        var value = false;\n        for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n            var event_9 = eventCollection_1[_i];\n            value = event_9[this.parent.eventFields.isBlock] || false;\n        }\n        return value;\n    };\n    /**\n     * To destroy the crud module.\n     *\n     * @returns {void}\n     * @private\n     */\n    Crud.prototype.destroy = function () {\n        this.crudObj = null;\n        this.parent = null;\n    };\n    return Crud;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js?");

/***/ })

}]);