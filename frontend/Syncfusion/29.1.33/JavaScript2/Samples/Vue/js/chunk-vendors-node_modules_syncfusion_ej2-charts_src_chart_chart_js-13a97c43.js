"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_chart_js-13a97c43"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/chart.js":
/*!****************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/chart.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart: () => (/* binding */ Chart),\n/* harmony export */   CrosshairSettings: () => (/* binding */ CrosshairSettings),\n/* harmony export */   RangeColorSetting: () => (/* binding */ RangeColorSetting),\n/* harmony export */   ZoomSettings: () => (/* binding */ ZoomSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/model/theme */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/theme.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _axis_axis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis/axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart/axis/axis.js\");\n/* harmony import */ var _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axis/cartesian-panel */ \"./node_modules/@syncfusion/ej2-charts/src/chart/axis/cartesian-panel.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _utils_get_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/get-data */ \"./node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js\");\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _common_model_data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/model/data */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/data.js\");\n/* harmony import */ var _series_marker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./series/marker */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/marker.js\");\n/* harmony import */ var _common_legend_legend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js\");\n/* harmony import */ var _technical_indicators_technical_indicator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./technical-indicators/technical-indicator */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/technical-indicator.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _model_chart_base__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./model/chart-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/model/chart-base.js\");\n/* harmony import */ var _common_utils_print__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/utils/print */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/print.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Configures the range color settings in the chart.\n */\nvar RangeColorSetting = /** @class */ (function (_super) {\n    __extends(RangeColorSetting, _super);\n    function RangeColorSetting() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], RangeColorSetting.prototype, \"start\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], RangeColorSetting.prototype, \"end\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], RangeColorSetting.prototype, \"colors\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], RangeColorSetting.prototype, \"label\", void 0);\n    return RangeColorSetting;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Options to configure the crosshair on the chart, which displays lines that follow the mouse cursor and show the axis values of the data points.\n */\nvar CrosshairSettings = /** @class */ (function (_super) {\n    __extends(CrosshairSettings, _super);\n    function CrosshairSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CrosshairSettings.prototype, \"enable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CrosshairSettings.prototype, \"dashArray\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: null, width: 1 }, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Border)\n    ], CrosshairSettings.prototype, \"line\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Both')\n    ], CrosshairSettings.prototype, \"lineType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CrosshairSettings.prototype, \"verticalLineColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CrosshairSettings.prototype, \"horizontalLineColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], CrosshairSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CrosshairSettings.prototype, \"snapToData\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CrosshairSettings.prototype, \"highlightCategory\", void 0);\n    return CrosshairSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the zooming behavior for the chart.\n */\nvar ZoomSettings = /** @class */ (function (_super) {\n    __extends(ZoomSettings, _super);\n    function ZoomSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enableSelectionZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enablePinchZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"showToolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enableMouseWheelZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ZoomSettings.prototype, \"enableDeferredZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('XY')\n    ], ZoomSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Zoom', 'ZoomIn', 'ZoomOut', 'Pan', 'Reset'])\n    ], ZoomSettings.prototype, \"toolbarItems\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enablePan\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enableScrollbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ZoomSettings.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_chart_base__WEBPACK_IMPORTED_MODULE_14__.ToolbarPosition)\n    ], ZoomSettings.prototype, \"toolbarPosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Accessibility)\n    ], ZoomSettings.prototype, \"accessibility\", void 0);\n    return ZoomSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Represents the chart control.\n * ```html\n * <div id=\"chart\"/>\n * <script>\n *   var chartObj = new Chart({});\n *   chartObj.appendTo(\"#chart\");\n * </script>\n * ```\n *\n * @public\n */\nvar Chart = /** @class */ (function (_super) {\n    __extends(Chart, _super);\n    /**\n     * Constructor for the chart component.\n     *\n     * @param {ChartModel} [options] - The chart model options.\n     * @param {string | HTMLElement} [element] - The element ID or instance where the chart needs to be rendered.\n     * @private\n     */\n    function Chart(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @private */\n        _this.rotatedDataLabelCollections = [];\n        /** @public */\n        _this.animated = false;\n        /** @private */\n        _this.isPointMouseDown = false;\n        /** @private */\n        _this.isScrolling = false;\n        /** @private */\n        _this.checkResize = 0;\n        /** @private */\n        _this.visible = 0;\n        /** @private */\n        _this.clickCount = 0;\n        /** @private */\n        _this.maxPointCount = 0;\n        /** @private */\n        _this.singleClickTimer = 0;\n        /** @private */\n        _this.chartAreaType = 'Cartesian';\n        /** @private */\n        _this.isRtlEnabled = false;\n        _this.isCrosshair = true;\n        _this.chartid = 57723;\n        /** @private */\n        _this.isLegendClicked = false;\n        _this.isZoomed = false;\n        _this.previousTargetId = '';\n        _this.currentPointIndex = 0;\n        _this.currentSeriesIndex = 0;\n        _this.currentLegendIndex = 0;\n        _this.previousPageX = null;\n        _this.previousPageY = null;\n        _this.allowPan = false;\n        /** @private */\n        _this.pointsRemoved = false;\n        /** @private */\n        _this.pointsAdded = false;\n        /** @private */\n        _this.zoomRedraw = false;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('mergePersistData', _this.mergePersistChartData, _this);\n        return _this;\n    }\n    /**\n     * To manage persist chart data.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.mergePersistChartData = function () {\n        var data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n        if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) || (data === ''))) {\n            var dataObj = JSON.parse(data);\n            var keys = Object.keys(dataObj);\n            this.isProtectedOnChange = true;\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if ((typeof this[key] === 'object') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this[key])) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this[key], dataObj[key]);\n                }\n                else {\n                    this[key] = dataObj[key];\n                }\n            }\n            this.isProtectedOnChange = false;\n        }\n    };\n    /**\n     * Checks if the element ID contains special characters.\n     *\n     * @param {string} elementId - The ID of the element.\n     * @returns {string} - The modified ID without special characters.\n     */\n    Chart.prototype.isIdHasSpecialCharacter = function (elementId) {\n        var regex = /^[A-Za-z ]+$/;\n        var numberRegex = /^[0-9 ]+$/;\n        var childElementId = '';\n        if (!regex.test(elementId)) {\n            var start = 0;\n            if (numberRegex.test(elementId[0])) {\n                childElementId += ('\\\\3' + elementId[0]);\n                start = 1;\n            }\n            for (var i = start; i < elementId.length; i++) {\n                if (!regex.test(elementId[i]) && elementId.indexOf('-') === -1 &&\n                    elementId.indexOf('_') === -1 && elementId.indexOf('\\\\') === -1 && !numberRegex.test(elementId[i])) {\n                    childElementId += ('\\\\' + elementId[i]);\n                }\n                else {\n                    childElementId += elementId[i];\n                }\n            }\n            return childElementId;\n        }\n        else {\n            return elementId;\n        }\n    };\n    /**\n     * Initialize the event handler.\n     */\n    Chart.prototype.preRender = function () {\n        this.element.id = this.isIdHasSpecialCharacter(this.element.id);\n        // It is used for checking blazor framework or not.\n        var blazor = 'Blazor';\n        this.isBlazor = window[blazor];\n        this.allowServerDataBinding = false;\n        this.markerIndex = 0;\n        this.unWireEvents();\n        this.initPrivateVariable();\n        this.setCulture();\n        this.wireEvents();\n        if (this.stockChart) {\n            if (this.stockChart.tooltip.header === null) {\n                this.tooltip.header = this.stockChart.theme.indexOf('Tailwind3') > -1 ? '${point.x}' : '<b>${point.x}</b>';\n            }\n            if (this.stockChart.tooltip.format === null) {\n                this.tooltip.format = this.stockChart.theme.indexOf('Tailwind3') > -1 ? 'High : ${point.high}<br/>Low :' +\n                    ' ${point.low}<br/>Open : ${point.open}<br/>Close : ${point.close}' : 'High : <b>${point.high}</b><br/>Low :' +\n                    ' <b>${point.low}</b><br/>Open : <b>${point.open}</b><br/>Close : <b>${point.close}</b>';\n            }\n        }\n        this.element.setAttribute('dir', this.enableRtl ? 'rtl' : 'ltr');\n    };\n    Chart.prototype.initPrivateVariable = function () {\n        this.animateSeries = true;\n        this.delayRedraw = false;\n        this.dragY = null;\n        this.horizontalAxes = [];\n        this.verticalAxes = [];\n        this.refreshAxis();\n        this.refreshDefinition(this.rows);\n        this.refreshDefinition(this.columns);\n        if (this.tooltipModule) {\n            this.tooltipModule.previousPoints = [];\n        }\n        this.element.setAttribute('role', this.accessibility.accessibilityRole ? this.accessibility.accessibilityRole : 'region');\n        this.element.setAttribute('tabindex', this.accessibility.focusable ? String(this.accessibility.tabIndex) : '-1');\n        this.element.style.outline = 'none';\n        this.element.setAttribute('aria-label', this.accessibility.accessibilityDescription ? this.accessibility.accessibilityDescription : this.title + '. Syncfusion interactive chart.');\n        if (!(this.element.classList.contains('e-chart-focused'))) {\n            this.element.setAttribute('class', this.element.getAttribute('class') + ' e-chart-focused');\n        }\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-chart').length;\n            var elementid = 'chart_' + this.chartid + '_' + collection;\n            while (document.getElementById(elementid)) {\n                collection++;\n                elementid = 'chart_' + this.chartid + '_' + collection;\n            }\n            this.element.id = 'chart_' + this.chartid + '_' + collection;\n        }\n        //seperate ID to differentiate chart and stock chart\n        this.svgId = this.stockChart ? this.stockChart.element.id + '_stockChart_chart' :\n            this.element.id + (this.enableCanvas ? '_canvas' : '_svg');\n    };\n    /**\n     * To Initialize the control rendering.\n     */\n    Chart.prototype.render = function () {\n        var _this = this;\n        this.svgRenderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.SvgRenderer(this.element.id);\n        var loadEventData = {\n            chart: this.isBlazor ? {} : this, theme: this.theme, name: _common_model_constants__WEBPACK_IMPORTED_MODULE_13__.load, cancel: false\n        };\n        if (!this.stockChart) {\n            /**\n             * Load event for the chart will be triggered only chart componet, if this is stock chart, load event did not triggered.\n             */\n            this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.load, loadEventData, function () {\n                if (!loadEventData.cancel) {\n                    _this.cartesianChartRendering(loadEventData);\n                }\n            });\n        }\n        else {\n            // The fix is specific for nextjs app, as window is set as not defined for server side application like nextjs.\n            this.isRtlEnabled = (window.getComputedStyle(document.querySelector('body')).direction === 'rtl');\n            this.cartesianChartRendering(loadEventData);\n        }\n        this.applyZoomkit();\n    };\n    Chart.prototype.cartesianChartRendering = function (beforeRenderData) {\n        this.theme = this.isBlazor ? beforeRenderData.theme : this.theme;\n        this.setTheme();\n        this.createChartSvg();\n        this.markerRender = new _series_marker__WEBPACK_IMPORTED_MODULE_10__.Marker(this);\n        this.calculateAreaType();\n        this.calculateVisibleSeries();\n        this.initTechnicalIndicators();\n        this.initTrendLines();\n        this.calculateVisibleAxis();\n        this.processData();\n        this.renderComplete();\n        this.mouseMoveEvent();\n        this.allowServerDataBinding = true;\n    };\n    /**\n     * Gets the localized label by locale keyword.\n     *\n     * @param  {string} key key\n     * @returns {string} localized label\n     */\n    Chart.prototype.getLocalizedLabel = function (key) {\n        return this.localeObject.getConstant(key);\n    };\n    /**\n     * Initiates animation for the chart.\n     *\n     * @param {number} [duration] - The duration of the animation in milliseconds.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.animate = function (duration) {\n        this.redraw = true;\n        this.animated = true; //used to set duration as 1000 for animation at default 300\n        this.duration = duration ? duration : 1000;\n        if (this.tooltipModule) {\n            this.tooltipModule.removeHighlightedMarker(this.tooltipModule.previousPoints, true);\n        }\n        else if (this.markerRender.previousPoints) {\n            for (var previousPoint = 0; previousPoint < this.markerRender.previousPoints.length; previousPoint++) {\n                this.markerRender.removeHighlightedMarker(this.markerRender.previousPoints[previousPoint].series, this.markerRender.previousPoints[previousPoint].point);\n            }\n        }\n    };\n    /**\n     * Refresh the chart bounds.\n     *\n     * @private\n     */\n    Chart.prototype.refreshBound = function () {\n        this.rotatedDataLabelCollections = [];\n        if (this.legendModule && this.legendSettings.visible) {\n            this.legendModule.getLegendOptions(this.visibleSeries, this);\n        }\n        /**\n         * I264230, EJ2-36761\n         * Issue: Tooltip doesnot appears after zooming and hovering on same point\n         * Root cause: While performing zoom, previous points in tooltip restore.\n         * Fix: previous points set to empty array\n         */\n        if (this.tooltip.enable && this.tooltipModule) {\n            this.tooltipModule.previousPoints = [];\n        }\n        this.calculateStackValues();\n        this.calculateBounds();\n        //this prevents the initial rendering of stock chart\n        if (this.stockChart && !this.stockChart.rangeFound) {\n            if (this.stockChart.enablePeriodSelector || this.stockChart.enableSelector) {\n                return null;\n            }\n        }\n        this.renderElements();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)('chartmeasuretext');\n        this.removeSelection();\n        if (this.markerRender) {\n            this.markerRender.mergeXvalues(this.visibleSeries);\n        }\n    };\n    /**\n     * To calcualte the stack values.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.calculateStackValues = function () {\n        var series;\n        var isCalculateStacking = false;\n        for (var i = 0, len = this.visibleSeries.length; i < len; i++) {\n            series = this.visibleSeries[i];\n            if (series.visible) {\n                series.position = series.rectCount = undefined;\n            }\n            if (((series.type.indexOf('Stacking') !== -1) || (series.drawType.indexOf('Stacking') !== -1\n                && this.chartAreaType === 'PolarRadar')) && !isCalculateStacking) {\n                series.calculateStackedValue(series.type.indexOf('100') > -1, this);\n                isCalculateStacking = true;\n            }\n        }\n    };\n    Chart.prototype.removeSelection = function () {\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                    var point = _c[_b];\n                    point.isSelect = false;\n                }\n            }\n        }\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_ej2_drag_multi_group')) {\n            if (this.selectionMode.indexOf('Drag') > -1) {\n                this.selectionModule.filterArray = [];\n            }\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_drag_multi_group');\n            this.selectionModule.calculateDragSelectedElements(this, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(0, 0, 0, 0), true);\n        }\n        else if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_ej2_drag_group')) {\n            if (this.selectionMode !== 'Lasso') {\n                this.selectionModule.filterArray = [];\n            }\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_drag_group');\n            this.selectionModule.calculateDragSelectedElements(this, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(0, 0, 0, 0), true);\n        }\n    };\n    Chart.prototype.renderElements = function () {\n        this.renderBorder();\n        this.renderTitle();\n        this.renderAreaBorder();\n        this.renderSeriesElements(this.renderAxes());\n        this.renderLegend();\n        this.applyZoomkit();\n        this.performSelection();\n        this.setSecondaryElementPosition();\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var value = _a[_i];\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.updateBlazorTemplate)(this.element.id + '_DataLabel', 'Template', value.marker.dataLabel);\n        }\n        this.renderAnnotation();\n        if (this.stackLabels.visible && this.visibleSeries.some(function (series) { return series.type && series.type.indexOf('Stacking') > -1; }) && this.dataLabelModule) {\n            this.dataLabelModule.renderStackLabels();\n        }\n    };\n    /**\n     * To render the legend\n     *\n     * @private\n     */\n    Chart.prototype.renderAxes = function () {\n        this.yAxisElements = this.renderer.createGroup({ id: this.element.id + 'yAxisCollection' });\n        var axisElement;\n        if (this.rows.length > 0 && this.columns.length > 0) {\n            axisElement = this.chartAxisLayoutPanel.renderAxes();\n        }\n        if (this.stripLineModule) {\n            this.stripLineModule.renderStripLine(this, 'Behind', this.axisCollections);\n        }\n        return axisElement;\n    };\n    /**\n     * To render the legend\n     */\n    Chart.prototype.renderLegend = function () {\n        if (this.legendModule && this.legendModule.legendCollections.length && this.legendSettings.visible) {\n            this.legendModule.calTotalPage = true;\n            var borderWidth = this.legendSettings.border.width;\n            var bounds = this.legendModule.legendBounds;\n            var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(bounds.x, bounds.y, bounds.width, bounds.height);\n            if (this.enableCanvas) {\n                this.canvasRender.ctx.beginPath();\n                rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(rect.x - borderWidth / 2, rect.y - borderWidth / 2, rect.width + borderWidth, rect.height + borderWidth);\n                this.renderer.canvasClip(rect);\n            }\n            this.legendModule.renderLegend(this, this.legendSettings, bounds);\n            if (this.enableCanvas) {\n                this.renderer.canvasRestore();\n            }\n        }\n        if (!this.redraw) {\n            if (!this.stockChart) {\n                this.element.appendChild(this.svgObject);\n            }\n            else {\n                if (!(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.stockChart.chartObject.id)) {\n                    this.stockChart.mainObject.appendChild(this.svgObject);\n                }\n            }\n        }\n    };\n    /**\n     * To set the left and top position for data label template for center aligned chart.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.setSecondaryElementPosition = function () {\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Secondary_Element');\n        if (!element) {\n            return;\n        }\n        var rect = this.element.getBoundingClientRect();\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.svgId).getBoundingClientRect();\n        element.style.left = Math.max(((svgRect.left - rect.left) / this.scaleX), 0) + 'px';\n        element.style.top = Math.max(((svgRect.top - rect.top) / this.scaleY), 0) + 'px';\n    };\n    Chart.prototype.initializeModuleElements = function () {\n        this.dataLabelCollections = [];\n        var elementId = this.element.id;\n        if (this.series.length) {\n            this.seriesElements = this.svgRenderer.createGroup({ id: elementId + 'SeriesCollection' });\n        }\n        if (this.indicators.length) {\n            this.indicatorElements = this.renderer.createGroup({ id: elementId + 'IndicatorCollection' });\n        }\n        if (this.hasTrendlines()) {\n            this.trendLineElements = this.renderer.createGroup({ id: elementId + 'TrendLineCollection' });\n        }\n        this.dataLabelElements = this.renderer.createGroup({ id: elementId + 'DataLabelCollection' });\n    };\n    Chart.prototype.hasTrendlines = function () {\n        var isTrendline;\n        for (var _i = 0, _a = this.series; _i < _a.length; _i++) {\n            var series = _a[_i];\n            isTrendline = series.trendlines.length ? true : false;\n            if (isTrendline) {\n                break;\n            }\n        }\n        return isTrendline;\n    };\n    Chart.prototype.renderSeriesElements = function (axisElement) {\n        // Initialize the series elements values\n        this.initializeModuleElements();\n        var elementId = this.element.id;\n        if (this.element.tagName !== 'g') {\n            var tooltipDiv = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, elementId + '_Secondary_Element') ||\n                this.createElement('div');\n            tooltipDiv.id = elementId + '_Secondary_Element';\n            tooltipDiv.style.cssText = 'position: relative';\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(false, this.element, tooltipDiv, this.redraw);\n        }\n        // For canvas\n        if (this.enableCanvas) {\n            var tooltipdiv = document.getElementById(elementId + '_Secondary_Element');\n            tooltipdiv = !tooltipdiv ? this.createElement('div', { id: elementId + '_Secondary_Element',\n                attrs: { 'style': 'position: relative; left:0px; top:0px' } }) : tooltipdiv;\n            var svg = this.svgRenderer.createSvg({\n                id: elementId + '_tooltip_svg',\n                width: this.availableSize.width,\n                height: this.availableSize.height\n            });\n            svg.style.cssText = 'position: absolute; pointer-events: none';\n            tooltipdiv.appendChild(svg);\n        }\n        // For userInteraction\n        if (this.tooltip.enable && !this.stockChart) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.renderer.createGroup({ id: elementId + '_UserInteraction', style: 'pointer-events:none;' }), this.redraw);\n        }\n        if (this.rows.length > 0 && this.columns.length > 0) {\n            this.initializeIndicator();\n            this.initializeTrendLine();\n            this.renderSeries();\n            // Trendline is append to DOM after the series\n            if (this.trendLineElements) {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.trendLineElements, this.redraw);\n            }\n            this.appendElementsAfterSeries(axisElement);\n        }\n    };\n    /**\n     * Renders the series on the chart.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart.prototype.renderSeries = function () {\n        var visibility;\n        if (this.enableCanvas) {\n            // To clip the series rect for canvas\n            this.renderer.canvasClip(this.chartAxisLayoutPanel.seriesClipRect);\n        }\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.category === 'TrendLine') {\n                visibility = this.series[item.sourceIndex].trendlines[item.index].visible;\n            }\n            else {\n                visibility = item.visible;\n            }\n            if (visibility) {\n                this.visible++;\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.findClipRect)(item, this.enableCanvas);\n                if (this.enableCanvas) {\n                    // To render scatter and bubble series in canvas\n                    this.renderCanvasSeries();\n                }\n                item.renderSeries(this);\n            }\n            else if (item.isLegendClicked && (item.type.indexOf('StackingArea') > -1 || item.type.indexOf('StackingBar') > -1 || item.type.indexOf('StackingColumn') > -1)) {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.findClipRect)(item, this.enableCanvas);\n                item.renderSeries(this);\n            }\n        }\n        if (this.enableCanvas) {\n            this.renderer.canvasRestore();\n        }\n        this.visible = 0;\n        var options = {\n            'id': this.element.id + '_ChartAreaClipRect_',\n            'x': this.chartAxisLayoutPanel.seriesClipRect.x,\n            'y': this.chartAxisLayoutPanel.seriesClipRect.y,\n            'width': this.chartAxisLayoutPanel.seriesClipRect.width,\n            'height': this.chartAxisLayoutPanel.seriesClipRect.height,\n            'fill': 'transparent',\n            'stroke-width': 1,\n            'stroke': 'Gray'\n        };\n        if (!this.seriesElements || (options.height < 0 || options.width < 0)) {\n            return;\n        }\n        var clipRectElement;\n        if (this.chartAreaType === 'PolarRadar') {\n            clipRectElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendClipElement)(this.redraw, options, this.renderer, 'drawCircularClipPath');\n        }\n        else {\n            clipRectElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendClipElement)(this.redraw, options, this.renderer);\n        }\n        if (!this.enableCanvas) {\n            this.seriesElements.appendChild(clipRectElement);\n        }\n        var seriesSvg = document.getElementById(this.element.id + '_series_svg');\n        if (seriesSvg) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(false, seriesSvg, this.seriesElements, this.redraw);\n        }\n        else {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.seriesElements, this.redraw);\n        }\n    };\n    Chart.prototype.renderCanvasSeries = function () {\n        // const svgElement: Element;\n        // svgElement = (this.enableCanvas) ?\n        //     svgElement : this.svgObject;\n        // const canvas: boolean = (this.enableCanvas) ?\n        //     false : this.enableCanvas;\n        var svgElement;\n        // let canvas: boolean;\n        if (this.enableCanvas) {\n            var tempSvgElement = svgElement;\n            svgElement = tempSvgElement;\n            // canvas = false;\n        }\n        else {\n            svgElement = this.svgObject;\n            // canvas = this.enableCanvas;\n        }\n    };\n    Chart.prototype.initializeIndicator = function () {\n        for (var _i = 0, _a = this.indicators; _i < _a.length; _i++) {\n            var indicator = _a[_i];\n            if (this[(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.firstToLowerCase)(indicator.type) + 'IndicatorModule']) {\n                this[(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.firstToLowerCase)(indicator.type) + 'IndicatorModule'].createIndicatorElements(this, indicator, indicator.index);\n            }\n        }\n        if (this.indicatorElements) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.indicatorElements, this.redraw);\n        }\n    };\n    Chart.prototype.initializeTrendLine = function () {\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.trendlines.length) {\n                this.trendLineModule.getTrendLineElements(series, this);\n            }\n        }\n    };\n    Chart.prototype.appendElementsAfterSeries = function (axisElement) {\n        if (this.chartAreaType === 'PolarRadar') {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.yAxisElements, this.redraw);\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, axisElement, this.redraw);\n        if ((this.zoomModule && this.zoomSettings.enableScrollbar && this.scrollElement && this.scrollElement.childElementCount) ||\n            (this.scrollElement && this.scrollElement.childElementCount)) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(false, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Secondary_Element'), this.scrollElement, this.redraw);\n        }\n        if (this.stripLineModule) {\n            this.stripLineModule.renderStripLine(this, 'Over', this.axisCollections);\n        }\n        if (!this.tooltip.enable || this.stockChart) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.renderer.createGroup({ id: this.element.id + '_UserInteraction', style: 'pointer-events:none;' }), this.redraw);\n        }\n        if (this.stockChart) {\n            this.stockChart.calculateStockEvents();\n        }\n    };\n    Chart.prototype.applyZoomkit = function () {\n        /**\n         * Issue: Zoomkit not visible after performing refresh()\n         * Fix: this method called without checking `zoomModule.isZoomed`\n         */\n        if (this.chartAreaType === 'PolarRadar') {\n            return;\n        }\n        if ((!this.redraw || this.zoomRedraw) && this.zoomModule && (!this.zoomSettings.enablePan || this.zoomModule.performedUI ||\n            this.zoomSettings.showToolbar)) {\n            this.zoomModule.applyZoomToolkit(this, this.axisCollections);\n        }\n    };\n    /**\n     * Render annotation perform here.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart.prototype.renderAnnotation = function () {\n        if (this.annotationModule) {\n            //for stock chart, stock chart's id is added to render the annotations\n            this.annotationModule.renderAnnotations((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)((this.stockChart ? this.stockChart.element.id : this.element.id) + '_Secondary_Element'));\n        }\n    };\n    Chart.prototype.performSelection = function () {\n        var selectedDataIndexes = [];\n        if (this.selectionModule) {\n            selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.selectionModule.selectedDataIndexes, null, true);\n            this.selectionModule.invokeSelection(this);\n        }\n        if (this.highlightModule) {\n            this.highlightModule.invokeHighlight(this);\n        }\n        if (selectedDataIndexes.length > 0) {\n            this.selectionModule.selectedDataIndexes = selectedDataIndexes;\n            this.selectionModule.redrawSelection(this, this.selectionMode);\n        }\n    };\n    Chart.prototype.processData = function (render) {\n        if (render === void 0) { render = true; }\n        this.visibleSeriesCount = 0;\n        var check = true;\n        var prevPointCount = 0;\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (!series.visible && !this.legendSettings.visible) {\n                this.visibleSeriesCount++;\n                continue;\n            }\n            if (series.category !== 'Indicator' && series.category !== 'TrendLine') {\n                this.initializeDataModule(series);\n            }\n        }\n        for (var _b = 0, _c = this.indicators; _b < _c.length; _b++) {\n            var indicator = _c[_b];\n            if (indicator.dataSource) {\n                var techIndicator = indicator;\n                this.initializeDataModule(techIndicator);\n                check = false;\n            }\n        }\n        if (render && (!this.visibleSeries.length || this.visibleSeriesCount === this.visibleSeries.length && check)) {\n            this.refreshBound();\n            this.trigger('loaded', { chart: this.isBlazor ? {} : this });\n        }\n        if (!this.stockChart && this.visibleSeries.length > 0) {\n            for (var _d = 0, _e = this.visibleSeries; _d < _e.length; _d++) {\n                var series = _e[_d];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(series.points)) {\n                    this.maxPointCount = Math.max(prevPointCount, series.points.length);\n                    prevPointCount = series.points.length;\n                }\n            }\n        }\n    };\n    Chart.prototype.initializeDataModule = function (series) {\n        series.xData = [];\n        series.yData = [];\n        var dataSource;\n        var isAngular = 'isAngular';\n        if (this[isAngular]) {\n            dataSource = Object.keys(series.dataSource).length ? series.dataSource : this.dataSource;\n        }\n        else {\n            dataSource = series.dataSource || this.dataSource;\n        }\n        series.dataModule = new _common_model_data__WEBPACK_IMPORTED_MODULE_9__.Data(dataSource, series.query);\n        series.points = [];\n        series.refreshDataManager(this);\n    };\n    /**\n     * To provide the array of modules needed for control rendering.\n     *\n     * @returns {void} - To provide the array of modules needed for control rendering.\n     * @private\n     */\n    Chart.prototype.calculateBounds = function () {\n        var margin = this.margin;\n        // Title Height;\n        var titleHeight = 0;\n        var subTitleHeight = 0;\n        var padding = this.titleStyle.position === 'Top' || (this.titleStyle.position === 'Bottom' && !this.legendSettings.visible) ? 15 : 5;\n        var left = margin.left + this.border.width;\n        var width = this.availableSize.width - left - margin.right - this.border.width;\n        var elementSpacing = 0;\n        this.titleCollection = [];\n        this.subTitleCollection = [];\n        if (this.title) {\n            this.titleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTitle)(this.title, this.titleStyle, width, this.enableRtl, this.themeStyle.chartTitleFont);\n            titleHeight = ((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont).height *\n                this.titleCollection.length) + padding;\n            if (this.subTitle) {\n                this.subTitleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTitle)(this.subTitle, this.subTitleStyle, width, this.enableRtl, this.themeStyle.chartSubTitleFont);\n                subTitleHeight = ((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont).height *\n                    this.subTitleCollection.length) + padding;\n            }\n        }\n        else if (this.legendSettings.position !== 'Top' && this.border.width) {\n            elementSpacing = 10;\n        }\n        var top = margin.top + elementSpacing + this.border.width + this.chartArea.border.width * 0.5;\n        var height = this.availableSize.height - top - this.border.width - margin.bottom;\n        var marginTotal = subTitleHeight + titleHeight + this.titleStyle.border.width + this.subTitleStyle.border.width;\n        switch (this.titleStyle.position) {\n            case 'Top':\n                top += marginTotal;\n                height -= marginTotal;\n                break;\n            case 'Bottom':\n                height -= marginTotal;\n                break;\n            case 'Left':\n                left += marginTotal;\n                width -= marginTotal;\n                break;\n            case 'Right':\n                left -= (this.titleStyle.border.width + this.subTitleStyle.border.width);\n                width -= marginTotal;\n                break;\n        }\n        if (this.stockChart && this.stockChart.legendSettings.visible && this.stockChart.stockLegendModule) {\n            if (this.stockChart.legendSettings.position === 'Top') {\n                top += this.stockChart.stockLegendModule.legendBounds.height;\n            }\n            else if (this.stockChart.legendSettings.position === 'Left') {\n                left += this.stockChart.stockLegendModule.legendBounds.width;\n            }\n        }\n        if (this.scrollBarModule && ((this.zoomModule && this.zoomSettings.enableScrollbar && this.zoomModule.isZoomed) ||\n            this.scrollSettingEnabled)) {\n            var scrollbarPadding = 10;\n            for (var i = 0, len = this.axisCollections.length; i < len; i++) {\n                var axis = this.axisCollections[i];\n                if (axis.orientation === 'Horizontal' && axis.scrollbarSettings.position === 'Bottom') {\n                    height -= axis.scrollbarSettings.height + scrollbarPadding;\n                }\n                else if (axis.orientation === 'Horizontal' && axis.scrollbarSettings.position === 'Top') {\n                    height -= axis.scrollbarSettings.height + scrollbarPadding;\n                    top += axis.scrollbarSettings.height + scrollbarPadding;\n                }\n                else if (axis.orientation === 'Vertical' && axis.scrollbarSettings.position === 'Right') {\n                    width -= axis.scrollbarSettings.height + scrollbarPadding;\n                }\n                else if (axis.orientation === 'Vertical' && axis.scrollbarSettings.position === 'Left') {\n                    width -= axis.scrollbarSettings.height + scrollbarPadding;\n                    left += axis.scrollbarSettings.height + scrollbarPadding;\n                }\n            }\n        }\n        this.initialClipRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(left, top, width, height);\n        if (this.legendModule && this.legendSettings.visible) {\n            this.legendModule.calculateLegendBounds(this.initialClipRect, this.availableSize, null);\n        }\n        this.initialClipRect.y += this.chartArea.margin.top;\n        this.initialClipRect.height -= (this.chartArea.margin.top + this.chartArea.margin.bottom);\n        this.initialClipRect.x += this.chartArea.margin.left;\n        this.initialClipRect.width -= (this.chartArea.margin.left + this.chartArea.margin.right);\n        this.chartAxisLayoutPanel.measureAxis(this.initialClipRect);\n    };\n    /**\n     * Prints the chart or specified element.\n     *\n     * @param {string[] | string | Element} id - The ID or array of IDs of the elements to print.\n     * @returns {void}\n     */\n    Chart.prototype.print = function (id) {\n        var exportChart = new _common_utils_print__WEBPACK_IMPORTED_MODULE_15__.PrintUtils(this);\n        var width = this.width;\n        if (this.getModuleName() === 'chart' && parseInt(this.width, 10) >= 80 && this.width.indexOf('%') > -1) {\n            this.width = '80%';\n            this.dataBind();\n        }\n        exportChart.print(id);\n        if (this.getModuleName() === 'chart' && parseInt(this.width, 10) >= 80 && this.width.indexOf('%') > -1) {\n            this.width = width;\n            this.dataBind();\n        }\n    };\n    /**\n     * Defines the trendline initialization.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.initTrendLines = function () {\n        this.isProtectedOnChange = true;\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            var trendIndex = 0;\n            for (var _b = 0, _c = series.trendlines; _b < _c.length; _b++) {\n                var trendline = _c[_b];\n                var trendLine = trendline;\n                if (this.trendLineModule) {\n                    trendLine.index = trendIndex;\n                    trendLine.sourceIndex = series.index;\n                    this.trendLineModule.initSeriesCollection(trendLine, this);\n                    if (trendLine.targetSeries) {\n                        trendLine.targetSeries.xAxisName = series.xAxisName;\n                        trendLine.targetSeries.yAxisName = series.yAxisName;\n                        this.visibleSeries.push(trendLine.targetSeries);\n                    }\n                }\n                trendIndex++;\n            }\n        }\n        this.isProtectedOnChange = false;\n    };\n    Chart.prototype.calculateAreaType = function () {\n        var series = this.series[0];\n        this.chartArea.border.width = this.stockChart ? 0 : this.chartArea.border.width;\n        if (series) {\n            this.requireInvertedAxis = ((series.type.indexOf('Bar') !== -1) && !this.isTransposed) ||\n                ((series.type.indexOf('Bar') === -1) && this.isTransposed && this.chartAreaType !== 'PolarRadar');\n        }\n        this.chartAxisLayoutPanel = this.chartAreaType === 'PolarRadar' ? (this.polarSeriesModule || this.radarSeriesModule)\n            : new _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__.CartesianAxisLayoutPanel(this);\n    };\n    /**\n     * Calculate the visible axis.\n     *\n     * @private\n     * @returns {void}\n     */\n    Chart.prototype.calculateVisibleAxis = function () {\n        var axis;\n        var axes = [this.primaryXAxis, this.primaryYAxis];\n        axes = this.chartAreaType === 'Cartesian' ? axes.concat(this.axes) : axes;\n        if (this.paretoSeriesModule && this.series[0].type === 'Pareto') {\n            axes = axes.concat(this.paretoSeriesModule.paretoAxes);\n        }\n        this.axisCollections = [];\n        if (this.zoomModule) {\n            this.zoomModule.isPanning = this.zoomModule.isAxisZoomed(axes) && this.zoomSettings.enablePan;\n            this.svgObject.setAttribute('cursor', this.zoomModule.isPanning ? 'pointer' : 'auto');\n            if (this.scrollBarModule) {\n                this.scrollBarModule.axes = axes;\n            }\n        }\n        if (this.scrollSettingEnabled) {\n            if (this.scrollBarModule) {\n                this.scrollBarModule.axes = axes;\n            }\n        }\n        for (var i = 0, len = axes.length; i < len; i++) {\n            axis = axes[i];\n            axis.series = [];\n            axis.labels = [];\n            axis.indexLabels = {};\n            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                this.initAxis(series, axis, true);\n                if (series.category === 'Pareto' && series.type === 'Line' && series.yAxis) {\n                    series.yAxis.internalVisibility = series.paretoOptions.showAxis;\n                }\n            }\n            for (var _b = 0, _c = this.indicators; _b < _c.length; _b++) {\n                var indicator = _c[_b];\n                this.initAxis(indicator, axis, false);\n            }\n            if (this.scrollBarModule && !axis.zoomingScrollBar) {\n                this.scrollBarModule.injectTo(axis, this);\n            }\n            if (axis.orientation != null) {\n                this.axisCollections.push(axis);\n            }\n        }\n        if (this.rows.length > 0 && this.columns.length > 0) {\n            this.chartAxisLayoutPanel.measure();\n        }\n    };\n    Chart.prototype.initAxis = function (series, axis, isSeries) {\n        if (series.xAxisName === axis.name || (series.xAxisName == null && axis.name === 'primaryXAxis')) {\n            axis.orientation = this.requireInvertedAxis ? 'Vertical' : 'Horizontal';\n            series.xAxis = axis;\n            if (isSeries) {\n                axis.series.push(series);\n            }\n        }\n        else if (series.yAxisName === axis.name || (series.yAxisName == null && axis.name === 'primaryYAxis')) {\n            axis.orientation = this.requireInvertedAxis ? 'Horizontal' : 'Vertical';\n            series.yAxis = axis;\n            if (isSeries) {\n                axis.series.push(series);\n            }\n        }\n    };\n    Chart.prototype.initTechnicalIndicators = function () {\n        var i = 0;\n        for (var _i = 0, _a = this.indicators; _i < _a.length; _i++) {\n            var indicator = _a[_i];\n            var techIndicator = indicator;\n            var type = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.firstToLowerCase)(techIndicator.type);\n            if (this[type + 'IndicatorModule']) {\n                techIndicator.index = i;\n                this[type + 'IndicatorModule'].initSeriesCollection(techIndicator, this);\n                for (var _b = 0, _c = techIndicator.targetSeries; _b < _c.length; _b++) {\n                    var targetSeries = _c[_b];\n                    if (indicator.seriesName || indicator.dataSource) {\n                        this.visibleSeries.push(targetSeries);\n                    }\n                }\n            }\n            i++;\n        }\n    };\n    /**\n     * Refreshes the technical indicator for the specified series.\n     *\n     * @param {SeriesBase} series - The series for which to refresh the technical indicator.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.refreshTechnicalIndicator = function (series) {\n        if (this.indicators.length) {\n            var targetIndicator = null;\n            if (series instanceof _series_chart_series__WEBPACK_IMPORTED_MODULE_8__.Series && series.category !== 'Indicator') {\n                for (var _i = 0, _a = this.indicators; _i < _a.length; _i++) {\n                    var indicator = _a[_i];\n                    if (indicator.seriesName === series.name && !indicator.dataSource) {\n                        targetIndicator = indicator;\n                        targetIndicator.setDataSource(series, this);\n                    }\n                }\n            }\n            else if (series instanceof _technical_indicators_technical_indicator__WEBPACK_IMPORTED_MODULE_12__.TechnicalIndicator) {\n                targetIndicator = series;\n                targetIndicator.setDataSource(series instanceof _series_chart_series__WEBPACK_IMPORTED_MODULE_8__.Series ? series : null, this);\n            }\n        }\n    };\n    Chart.prototype.calculateVisibleSeries = function () {\n        var series;\n        this.visibleSeries = [];\n        var colors = this.palettes.length ? this.palettes : (0,_common_model_theme__WEBPACK_IMPORTED_MODULE_2__.getSeriesColor)(this.theme);\n        var count = colors.length;\n        var seriesCollection = this.series.sort(function (a, b) { return a.zOrder - b.zOrder; });\n        for (var i = 0, len = seriesCollection.length; i < len; i++) {\n            series = seriesCollection[i];\n            // for y axis label issue during chart navigation\n            series.category = seriesCollection[0].type === 'Pareto' ? 'Pareto' : 'Series';\n            series.index = i;\n            series.interior = series.fill || colors[i % count];\n            if (!series.marker.shape && (series.marker.visible || series.type === 'Scatter' || series.drawType === 'Scatter')) {\n                series.marker.shape = _series_marker__WEBPACK_IMPORTED_MODULE_10__.markerShapes[this.markerIndex % 10];\n                this.markerIndex++;\n            }\n            if (this.isSecondaryAxis(series.xAxis)) {\n                series.xAxis.internalVisibility = series.xAxis.series.some(function (value) { return (value.visible); });\n            }\n            if (this.isSecondaryAxis(series.yAxis)) {\n                series.yAxis.internalVisibility = series.yAxis.series.some(function (value) { return (value.visible); });\n            }\n            switch (series.type) {\n                case 'Bar':\n                case 'StackingBar':\n                case 'StackingBar100':\n                    if (seriesCollection[0].type.indexOf('Bar') === -1) {\n                        continue;\n                    }\n                    break;\n                case 'Polar':\n                case 'Radar':\n                    if (this.chartAreaType !== 'PolarRadar') {\n                        continue;\n                    }\n                    if (this.chartAreaType === 'PolarRadar' && ((series.xAxisName !== null && (this.primaryXAxis.name !== series.xAxisName)) ||\n                        (series.yAxisName !== null && (this.primaryYAxis.name !== series.yAxisName)))) {\n                        continue;\n                    }\n                    break;\n                case 'Pareto':\n                    this.visibleSeries.push(series);\n                    this.paretoSeriesModule.initSeries(series, this);\n                    continue;\n                default:\n                    if (this.chartAreaType === 'PolarRadar' || seriesCollection[0].type.indexOf('Bar') > -1) {\n                        continue;\n                    }\n                    break;\n            }\n            this.visibleSeries.push(series);\n            seriesCollection[i] = series;\n        }\n    };\n    Chart.prototype.isSecondaryAxis = function (axis) {\n        return (this.axes.indexOf(axis) > -1);\n    };\n    Chart.prototype.renderTitle = function () {\n        var rect;\n        var margin = this.margin;\n        var elementSpacing = 5;\n        if (this.title) {\n            var getAnchor = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTextAnchor)(this.titleStyle.textAlignment, this.enableRtl);\n            var elementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont);\n            rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(margin.left, 0, this.availableSize.width - margin.left - margin.right, 0);\n            var borderWidth = this.titleStyle.border.width;\n            var positionY = this.margin.top + ((elementSize.height) * 3 / 4);\n            var positionX = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.titlePositionX)(rect, this.titleStyle || this.themeStyle.chartTitleFont) + borderWidth;\n            var rotation = void 0;\n            var alignment = this.titleStyle.textAlignment;\n            var subtitleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont);\n            switch (this.titleStyle.position) {\n                case 'Top':\n                    positionY += borderWidth * 0.5;\n                    positionX += getAnchor === 'start' ? borderWidth * 0.5 + this.border.width :\n                        getAnchor === 'end' ? ((-borderWidth * 2) - this.border.width) : 0;\n                    break;\n                case 'Bottom':\n                    positionX += getAnchor === 'start' ? (borderWidth * 0.5) + this.border.width :\n                        getAnchor === 'end' ? (-borderWidth * 2) - this.border.width : 0;\n                    positionY = this.availableSize.height - this.margin.bottom - subtitleSize.height - (elementSize.height / 2) -\n                        (borderWidth * 0.5) - (this.subTitleStyle.border.width * 0.5);\n                    break;\n                case 'Left':\n                    positionX = this.margin.left + ((elementSize.height) * 3 / 4) + (borderWidth * 0.5);\n                    positionY = alignment === 'Near' ? margin.bottom + (borderWidth * 0.5) + this.border.width :\n                        alignment === 'Far' ? this.availableSize.height - margin.bottom - (borderWidth * 0.5) - this.border.width : this.availableSize.height / 2;\n                    getAnchor = alignment === 'Near' ? 'end' : alignment === 'Far' ? 'start' : 'middle';\n                    getAnchor = this.enableRtl ? (getAnchor === 'end' ? 'start' : getAnchor === 'start' ? 'end' : getAnchor) : getAnchor;\n                    rotation = 'rotate(' + -90 + ',' + positionX + ',' + positionY + ')';\n                    break;\n                case 'Right':\n                    positionX = this.availableSize.width - this.margin.right - ((elementSize.height) * 3 / 4) - (borderWidth * 0.5);\n                    positionY = alignment === 'Near' ? margin.bottom + (borderWidth * 0.5) + this.border.width :\n                        alignment === 'Far' ? this.availableSize.height - margin.bottom - (borderWidth * 0.5) - this.border.width : this.availableSize.height / 2;\n                    getAnchor = alignment === 'Near' ? 'start' : alignment === 'Far' ? 'end' : 'middle';\n                    getAnchor = this.enableRtl ? (getAnchor === 'end' ? 'start' : getAnchor === 'start' ? 'end' : getAnchor) : getAnchor;\n                    rotation = 'rotate(' + 90 + ',' + positionX + ',' + positionY + ')';\n                    break;\n                case 'Custom':\n                    positionX = this.titleStyle.x;\n                    positionY = this.titleStyle.y;\n                    getAnchor = 'middle';\n                    break;\n            }\n            var borderOptions = {\n                'id': this.element.id + '_ChartTitleBorder',\n                'x': positionX - (getAnchor === 'middle' ? (elementSize.width / 2) + elementSpacing : getAnchor === 'end' ? elementSize.width + elementSpacing : elementSpacing),\n                'y': positionY - elementSize.height + (elementSize.height / 4),\n                'rx': this.titleStyle.border.cornerRadius,\n                'ry': this.titleStyle.border.cornerRadius,\n                'width': elementSize.width + (elementSpacing * 2),\n                'height': elementSize.height * this.titleCollection.length,\n                'fill': this.titleStyle.background,\n                'stroke-width': borderWidth,\n                'stroke': this.titleStyle.border.color,\n                'transform': rotation ? rotation : '',\n                'd': ''\n            };\n            var htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartTitleBorder', borderOptions, this.renderer)\n                || this.renderer.drawRectangle(borderOptions);\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, htmlObject, this.redraw);\n            var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.TextOption(this.element.id + '_ChartTitle', positionX, positionY, getAnchor, this.titleCollection, rotation, 'auto');\n            var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartTitle', options, this.renderer) ||\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textElement)(this.renderer, options, this.titleStyle, this.titleStyle.color || this.themeStyle.chartTitleFont.color, this.svgObject, null, null, null, null, null, null, null, null, this.enableCanvas, null, this.themeStyle.chartTitleFont);\n            if (element && !this.enableCanvas) {\n                element.setAttribute('tabindex', this.titleStyle.accessibility.focusable ? String(this.titleStyle.accessibility.tabIndex) : '-1');\n                element.style.outline = 'none';\n                element.setAttribute('class', 'e-chart-focused');\n                element.setAttribute('role', this.titleStyle.accessibility.accessibilityRole);\n                element.setAttribute('aria-label', this.titleStyle.accessibility.accessibilityDescription);\n            }\n            if (this.subTitle) {\n                this.renderSubTitle(options);\n            }\n        }\n    };\n    Chart.prototype.renderSubTitle = function (options) {\n        var maxWidth = 0;\n        var subMaxWidth = 0;\n        var titleWidth = 0;\n        var subTitleWidth = 0;\n        var padding = 10;\n        var alignment = this.titleStyle.textAlignment;\n        for (var _i = 0, _a = this.titleCollection; _i < _a.length; _i++) {\n            var titleText = _a[_i];\n            titleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(titleText, this.titleStyle, this.themeStyle.chartTitleFont).width;\n            maxWidth = titleWidth > maxWidth ? titleWidth : maxWidth;\n        }\n        for (var _b = 0, _c = this.subTitleCollection; _b < _c.length; _b++) {\n            var subTitleText = _c[_b];\n            subTitleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(subTitleText, this.subTitleStyle, this.themeStyle.chartSubTitleFont).width;\n            subMaxWidth = subTitleWidth > subMaxWidth ? subTitleWidth : subMaxWidth;\n        }\n        maxWidth = Math.max(titleWidth, subMaxWidth);\n        var subTitleElementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.subTitleCollection.reduce(function (a, b) {\n            return (a.length > b.length ? a : b);\n        }), this.subTitleStyle, this.themeStyle.chartSubTitleFont);\n        var getAnchor = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTextAnchor)(this.subTitleStyle.textAlignment, this.enableRtl);\n        var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(alignment === 'Center' ? (options.x - maxWidth * 0.5) : alignment === 'Far' ? options.x - maxWidth : options.x, 0, maxWidth, 0);\n        if (this.titleStyle.position === 'Left') {\n            rect.x = alignment === 'Center' ? (options.x - maxWidth * 0.5) : alignment === 'Far' ? this.margin.left + ((subTitleElementSize.height) * 3 / 4) : (options.x - maxWidth);\n        }\n        var elementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont);\n        var positionY = options.y * options.text.length + subTitleElementSize.height + (padding / 2) +\n            this.titleStyle.border.width + (this.subTitleStyle.border.width * 0.5);\n        if (this.titleStyle.position === 'Bottom') {\n            positionY = options.y * options.text.length + (padding / 2) + (elementSize.height / 2) + (subTitleElementSize.height / 2);\n        }\n        var borderOptions = {\n            'id': this.element.id + '_ChartSubTitleBorder',\n            'x': (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.titlePositionX)(rect, this.subTitleStyle) - (getAnchor === 'middle' ? (subTitleElementSize.width / 2) + padding / 2 : getAnchor === 'end' ? subTitleElementSize.width + padding / 2 : padding / 2),\n            'y': positionY - subTitleElementSize.height + (subTitleElementSize.height / 4),\n            'rx': this.subTitleStyle.border.cornerRadius,\n            'ry': this.subTitleStyle.border.cornerRadius,\n            'width': subTitleElementSize.width + padding,\n            'height': subTitleElementSize.height * this.subTitleCollection.length,\n            'fill': this.subTitleStyle.background,\n            'stroke-width': this.subTitleStyle.border.width,\n            'stroke': this.subTitleStyle.border.color,\n            'transform': options.transform,\n            'd': ''\n        };\n        var htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartSubTitleBorder', borderOptions, this.renderer)\n            || this.renderer.drawRectangle(borderOptions);\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, htmlObject, this.redraw);\n        var subTitleOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.TextOption(this.element.id + '_ChartSubTitle', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.titlePositionX)(rect, this.subTitleStyle), positionY, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTextAnchor)(this.subTitleStyle.textAlignment, this.enableRtl), this.subTitleCollection, options.transform, 'auto');\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartSubTitle', subTitleOptions, this.renderer) ||\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textElement)(this.renderer, subTitleOptions, this.subTitleStyle, this.subTitleStyle.color ||\n                this.themeStyle.chartSubTitleFont.color, this.svgObject, null, null, null, null, null, null, null, null, this.enableCanvas, null, this.themeStyle.chartSubTitleFont);\n        if (element && !this.enableCanvas) {\n            element.setAttribute('tabindex', this.subTitleStyle.accessibility.focusable ? String(this.subTitleStyle.accessibility.tabIndex) : '-1');\n            if (this.subTitleStyle.accessibility.focusable) {\n                element.style.outline = 'none';\n            }\n            element.setAttribute('class', 'e-chart-focused');\n            element.setAttribute('role', this.subTitleStyle.accessibility.accessibilityRole);\n            element.setAttribute('aria-label', this.subTitleStyle.accessibility.accessibilityDescription);\n        }\n    };\n    Chart.prototype.renderBorder = function () {\n        var x = 0;\n        var y = 0;\n        var width = this.border.width;\n        var backGroundImage = this.backgroundImage;\n        var fillColor = backGroundImage ? 'transparent' : (this.background || this.themeStyle.background);\n        if (this.stockChart && this.stockChart.legendSettings.visible && this.stockChart.stockLegendModule) {\n            if (this.stockChart.legendSettings.position === 'Top') {\n                y += this.stockChart.stockLegendModule.legendBounds.height;\n            }\n            else if (this.stockChart.legendSettings.position === 'Left') {\n                x += this.stockChart.stockLegendModule.legendBounds.width;\n            }\n        }\n        var rect = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(this.element.id + '_ChartBorder', fillColor, this.border, 1, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(width * 0.5 + x, width * 0.5 + y, this.availableSize.width - width, this.availableSize.height - width), 0, 0, '', this.border.dashArray);\n        this.htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartBorder', rect, this.renderer)\n            || this.renderer.drawRectangle(rect);\n        this.htmlObject.setAttribute('aria-hidden', 'true');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.htmlObject, this.redraw);\n        // to draw back ground image for chart\n        if (backGroundImage) {\n            var image = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.ImageOption(this.availableSize.height - width, this.availableSize.width - width, backGroundImage, 0, 0, this.element.id + '_ChartBackground', 'visible', 'none');\n            this.htmlObject = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.redrawElement)(this.redraw, this.element.id + '_ChartBackground', image, this.renderer)\n                || this.renderer.drawImage(image);\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.htmlObject, this.redraw);\n        }\n    };\n    /**\n     * Renders the border for the area.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.renderAreaBorder = function () {\n        if (this.chartAreaType === 'PolarRadar') {\n            return null;\n        }\n        else {\n            var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_ChartAreaBorder');\n            var previousRect = element ?\n                new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(+element.getAttribute('x'), +element.getAttribute('y'), +element.getAttribute('width'), +element.getAttribute('height')) : null;\n            var rect = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(this.element.id + '_ChartAreaBorder', this.chartArea.background, { width: this.chartArea.border.width, color: this.chartArea.border.color || this.themeStyle.areaBorder }, this.chartArea.opacity, this.chartAxisLayoutPanel.seriesClipRect, 0, 0, '', this.chartArea.border.dashArray);\n            if (rect.height < 0 || rect.width < 0) {\n                return null;\n            }\n            this.htmlObject = this.renderer.drawRectangle(rect);\n            this.htmlObject.setAttribute('aria-hidden', 'true');\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.htmlObject, this.redraw, true, 'x', 'y', null, null, true, true, previousRect);\n            this.htmlObject = null;\n        }\n        // to draw back ground image for chart area\n        var backGroundImage = this.chartArea.backgroundImage;\n        if (backGroundImage) {\n            var width = this.chartArea.border.width;\n            var image = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.ImageOption(this.initialClipRect.height - width, this.initialClipRect.width - width, backGroundImage, this.initialClipRect.x, this.initialClipRect.y, this.element.id + '_ChartAreaBackground', 'visible', 'none');\n            this.htmlObject = this.renderer.drawImage(image);\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.appendChildElement)(this.enableCanvas, this.svgObject, this.htmlObject, this.redraw, true, 'x', 'y', null, null, true, true);\n        }\n    };\n    /**\n     * To add series for the chart\n     *\n     * @param {SeriesModel[]} seriesCollection - Defines the series collection to be added in chart.\n     * @returns {void}.\n     */\n    Chart.prototype.addSeries = function (seriesCollection) {\n        var scrollTop = window.scrollY || document.documentElement.scrollTop;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            series = new _series_chart_series__WEBPACK_IMPORTED_MODULE_8__.Series(this, 'series', series);\n            this.series.push(series);\n        }\n        this.refresh();\n        window.scrollTo(0, scrollTop);\n    };\n    /**\n     * To Remove series for the chart\n     *\n     * @param {number} index - Defines the series index to be remove in chart series\n     * @returns {void}\n     */\n    Chart.prototype.removeSeries = function (index) {\n        this.redraw = false; //fix for remove svg not working when use animatemethod.\n        var scrollTop = window.scrollY || document.documentElement.scrollTop;\n        var series = this.visibleSeries[index];\n        if (series) {\n            if (series.xAxis.series.length <= 1) {\n                series.xAxis.orientation = null;\n            }\n            if (series.yAxis.series.length <= 1) {\n                series.yAxis.orientation = null;\n            }\n        }\n        for (var i = 0; i < this.axes.length; i++) {\n            if (this.axes[i].orientation === null) {\n                this.axes.splice(i, 1);\n            }\n        }\n        this.series.splice(index, 1);\n        this.refresh();\n        window.scrollTo(0, scrollTop);\n    };\n    /**\n     * Clear all series from the chart.\n     *\n     * @returns {void}.\n     */\n    Chart.prototype.clearSeries = function () {\n        this.series = [];\n        var scrollTop = window.scrollY || document.documentElement.scrollTop;\n        this.refresh();\n        window.scrollTo(0, scrollTop);\n    };\n    /**\n     * To add secondary axis for the chart\n     *\n     * @param {AxisModel[]} axisCollection - Defines the axis collection to be added in chart.\n     * @returns {void}.\n     */\n    Chart.prototype.addAxes = function (axisCollection) {\n        for (var _i = 0, axisCollection_1 = axisCollection; _i < axisCollection_1.length; _i++) {\n            var axis = axisCollection_1[_i];\n            axis = new _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Axis(this, 'axes', axis);\n            if (this.isBlazor) {\n                axis.interval = isNaN(axis.interval) ? null : axis.interval;\n                axis.desiredIntervals = isNaN(axis.desiredIntervals) ? null : axis.desiredIntervals;\n            }\n            this.axes.push(axis);\n        }\n        this.refresh();\n    };\n    /**\n     * To remove secondary axis for the chart.\n     *\n     * @param {number} index - Defines the axis collection to be removed in chart.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.removeAxis = function (index) {\n        this.redraw = false;\n        this.axes.splice(index, 1);\n        this.refresh();\n    };\n    /**\n     * To destroy the widget\n     *\n     * @function destroy\n     * @returns {void}.\n     * @member of Chart\n     */\n    Chart.prototype.destroy = function () {\n        if (this.scrollBarModule) {\n            this.scrollBarModule.destroy();\n        }\n        if (this.markerRender) {\n            this.markerRender.removeEventListener();\n            this.markerRender = null;\n        }\n        this.horizontalAxes = [];\n        this.verticalAxes = [];\n        this.visibleSeries = [];\n        this.axisCollections = [];\n        this.rotatedDataLabelCollections = [];\n        this.seriesElements = null;\n        this.chartAxisLayoutPanel = null;\n        this.dataLabelCollections = null;\n        this.dataLabelElements = null;\n        this.yAxisElements = null;\n        var element = document.getElementById(this.element.id + 'Keyboard_chart_focus');\n        if (element) {\n            element.remove();\n        }\n        var highlightElement = document.getElementById(this.element.id + '_ej2_chart_highlight');\n        if (highlightElement) {\n            highlightElement.remove();\n        }\n        var selectionElement = document.getElementById(this.element.id + '_ej2_chart_selection');\n        if (selectionElement) {\n            selectionElement.remove();\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)('chartmeasuretext');\n        /**\n         * To fix react timeout destroy issue.\n         */\n        if (this.element) {\n            this.unWireEvents();\n            if (this.isReact) {\n                this.clearTemplate();\n            }\n            _super.prototype.destroy.call(this);\n            if (!this.enableCanvas) {\n                this.removeSvg();\n                this.svgObject = null;\n            }\n        }\n    };\n    /**\n     * Get component name\n     */\n    Chart.prototype.getModuleName = function () {\n        return 'chart';\n    };\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     *\n     * @private\n     * @returns {string} - The persisted data.\n     */\n    Chart.prototype.getPersistData = function () {\n        var keyEntity = ['loaded', 'animationComplete', 'primaryXAxis', 'primaryYAxis'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Method to create SVG element.\n     *\n     * @private\n     */\n    Chart.prototype.createChartSvg = function () {\n        this.removeSvg();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.createSvg)(this);\n    };\n    /**\n     * Method to bind events for chart\n     */\n    Chart.prototype.unWireEvents = function () {\n        var startEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var moveEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var stopEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        /** UnBind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, startEvent, this.chartOnMouseDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, moveEvent, this.mouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, stopEvent, this.mouseEnd);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.chartOnMouseClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'dblclick', this.chartOnDoubleClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.chartRightClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, cancelEvent, this.mouseLeave);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.chartKeyDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document.body, 'keydown', this.documentKeyHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.chartKeyUp);\n        window.removeEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeBound);\n        /**\n         * To fix memory issue\n         */\n        if (this.touchObject) {\n            this.touchObject.destroy();\n            this.touchObject = null;\n        }\n    };\n    Chart.prototype.wireEvents = function () {\n        /**\n         * To fix react timeout destroy issue.\n         */\n        if (!this.element) {\n            return;\n        }\n        /** Find the Events type */\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        /** Bind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.chartOnMouseDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.chartOnMouseClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'dblclick', this.chartOnDoubleClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.chartRightClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.chartKeyDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document.body, 'keydown', this.documentKeyHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.chartKeyUp, this);\n        this.resizeBound = this.chartResize.bind(this);\n        window.addEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.resizeBound);\n        this.longPressBound = this.longPress.bind(this);\n        this.touchObject = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, { tapHold: this.longPressBound, tapHoldThreshold: 500 });\n        /** Apply the style for chart */\n        this.setStyle(this.element);\n    };\n    Chart.prototype.chartRightClick = function (event) {\n        if (this.crosshair.enable && this.crosshairModule &&\n            (event.buttons === 2 || event.which === 0 || event.pointerType === 'touch')) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false;\n        }\n        return true;\n    };\n    Chart.prototype.setStyle = function (element) {\n        var zooming = this.zoomSettings;\n        var disableScroll = zooming.enableSelectionZooming || zooming.enablePinchZooming ||\n            this.selectionMode !== 'None' || this.highlightMode !== 'None';\n        element.style.touchAction = disableScroll ? 'none' : 'element';\n        element.style.msTouchAction = disableScroll ? 'none' : 'element';\n        element.style.msContentZooming = 'none';\n        element.style.msUserSelect = 'none';\n        element.style.webkitUserSelect = 'none';\n        element.style.position = 'relative';\n        element.style.display = 'block';\n        // To fix angular and react tooltip div scrollbar issue\n        element.style.overflow = 'hidden';\n        element.style.height = (element.style.height || (this.height && this.height.indexOf('%') === -1)) ? element.style.height : 'inherit';\n    };\n    /**\n     * Determines the orientation.\n     *\n     * @private\n     * @returns {boolean} - True if the orientation is found, otherwise false.\n     */\n    Chart.prototype.isOrientation = function () {\n        return ('orientation' in window && 'onorientationchange' in window);\n    };\n    /**\n     * Handles the long press on the chart.\n     *\n     * @param {TapEventArgs} [e] - The event arguments for the long press.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.longPress = function (e) {\n        this.mouseX = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientX) : 0;\n        this.mouseY = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientY) : 0;\n        this.startMove = true;\n        this.allowPan = this.stockChart ? false : this.allowPan;\n        this.setMouseXY(this.mouseX, this.mouseY);\n        this.notify('tapHold', e);\n        return false;\n    };\n    /**\n     * Sets the mouse x and y coordinates for the aligned chart element SVG position.\n     *\n     * @param {number} pageX - The x-coordinate of the mouse pointer.\n     * @param {number} pageY - The y-coordinate of the mouse pointer.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.setMouseXY = function (pageX, pageY) {\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.svgId)) {\n            var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.svgId).getBoundingClientRect();\n            var rect = this.element.getBoundingClientRect();\n            this.scaleX = svgRect.width / this.availableSize.width;\n            this.scaleY = svgRect.height / this.availableSize.height;\n            this.mouseY = ((pageY - rect.top) - Math.max(svgRect.top - rect.top, 0)) / this.scaleY;\n            this.mouseX = ((pageX - rect.left) - Math.max(svgRect.left - rect.left, 0)) / this.scaleX;\n            if (this.stockChart) {\n                this.mouseX += this.stockChart.legendSettings.position === 'Left' ? this.stockChart.stockLegendModule.legendBounds.width : 0;\n                this.mouseY += this.stockChart.legendSettings.position === 'Top' ? this.stockChart.stockLegendModule.legendBounds.height : 0;\n            }\n        }\n    };\n    /**\n     * Exports the chart in the specified format.\n     *\n     * @param {ExportType} type - The file format for the export. Available options are PNG, JPEG, PDF, and SVG.\n     * @param {string} fileName - The name of the file to be saved.\n     * @returns {void}\n     */\n    Chart.prototype.export = function (type, fileName) {\n        if (this.exportModule) {\n            this.exportModule.export(type, fileName);\n            if (this.afterExport) {\n                this.exportModule.getDataUrl(this);\n            }\n        }\n    };\n    /**\n     * Handles the chart resize.\n     *\n     * @returns {boolean} false\n     * @private\n     */\n    Chart.prototype.chartResize = function () {\n        var _this = this;\n        this.animateSeries = false;\n        var arg = {\n            chart: this,\n            name: _common_model_constants__WEBPACK_IMPORTED_MODULE_13__.resized,\n            currentSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(0, 0),\n            previousSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(this.availableSize.width, this.availableSize.height)\n        };\n        var beforeResizeArgs = { name: 'beforeResize', cancelResizedEvent: false };\n        if (this.resizeTo) {\n            clearTimeout(this.resizeTo);\n        }\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.beforeResize, beforeResizeArgs);\n        if (!beforeResizeArgs.cancelResizedEvent) {\n            this.resizeTo = +setTimeout(function () {\n                if (_this.isDestroyed || _this.stockChart) {\n                    clearTimeout(_this.resizeTo);\n                    return;\n                }\n                _this.createChartSvg();\n                arg.currentSize = _this.availableSize;\n                _this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.resized, arg);\n                _this.refreshAxis();\n                _this.refreshBound();\n                _this.trigger('loaded', { chart: _this.isBlazor ? {} : _this });\n            }, 500);\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse movement event on the chart.\n     *\n     * @param {PointerEvent} e - The mouse event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.mouseMove = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        if (this.allowPan) {\n            return false;\n        }\n        if (e.type === 'touchmove') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2' || this.isTouch;\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        this.previousPageX = pageX;\n        this.previousPageY = pageY;\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.svgId)) {\n            this.setMouseXY(pageX, pageY);\n            this.chartOnMouseMove(e);\n        }\n        return false;\n    };\n    /**\n     * Handles the mouse leave event on the chart.\n     *\n     * @param {PointerEvent} e - The mouse event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.mouseLeave = function (e) {\n        var pageX;\n        var pageY;\n        var touchArg;\n        if (this.stockChart && this.stockChart.onPanning) {\n            return false;\n        }\n        if (e.type === 'touchleave') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n            pageX = e.clientX;\n            pageY = e.clientY;\n        }\n        this.previousPageX = null;\n        this.previousPageY = null;\n        this.setMouseXY(pageX, pageY);\n        this.chartOnMouseLeave(e);\n        return false;\n    };\n    /**\n     * Handles the mouse leave event on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - The mouse or touch event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.chartOnMouseLeave = function (e) {\n        var element = e.target;\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartMouseLeave, { target: element.id, x: this.mouseX, y: this.mouseY });\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_EJ2_AxisLabel_Tooltip');\n        this.isChartDrag = this.isPointMouseDown = false;\n        this.notify(cancelEvent, e);\n        return false;\n    };\n    /**\n     * Handles the double click event on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - The mouse or touch event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.chartOnDoubleClick = function (e) {\n        var element = e.target;\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartDoubleClick, { target: element.id, x: this.mouseX, y: this.mouseY });\n        return false;\n    };\n    /**\n     * Handles the key down event on the chart.\n     *\n     * @param {KeyboardEvent} e - The keyboard event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.chartKeyDown = function (e) {\n        var actionKey = '';\n        if ((this.isZoomed && e.code === 'Tab') || e.code === 'Space') {\n            e.preventDefault();\n        }\n        if (this.tooltip.enable && ((e.code === 'Tab' && this.previousTargetId.indexOf('Series') > -1) || e.code === 'Escape')) {\n            actionKey = 'ESC';\n        }\n        if (this.highlightMode !== 'None' && e.code === 'Tab' && this.previousTargetId.indexOf('_chart_legend_') > -1) {\n            if (this.highlightModule) {\n                this.highlightModule.removeLegendHighlightStyles();\n            }\n        }\n        if (e.ctrlKey && (e.key === '+' || e.code === 'Equal' || e.key === '-' || e.code === 'Minus')) {\n            e.preventDefault();\n            this.isZoomed = this.zoomModule && (this.zoomSettings.enableDeferredZooming || this.zoomSettings.enableSelectionZooming ||\n                this.zoomSettings.enablePinchZooming || this.zoomSettings.enableMouseWheelZooming);\n            //this.tooltipModule.fadeOut(this.element);\n            actionKey = this.isZoomed ? e.code : '';\n        }\n        else if (e['keyCode'] === 82 && this.isZoomed) { // KeyCode 82 (R) for reseting\n            e.preventDefault();\n            this.isZoomed = false;\n            actionKey = 'R';\n        }\n        else if (e.code.indexOf('Arrow') > -1) {\n            e.preventDefault();\n            actionKey = this.isZoomed ? e.code : '';\n        }\n        if (e.ctrlKey && (e.key === 'p')) {\n            e.preventDefault();\n            actionKey = 'CtrlP';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, e.target.id, actionKey);\n        }\n        if (e.code === 'Tab') {\n            this.removeNavigationStyle();\n        }\n        return false;\n    };\n    /**\n     * Handles the key up event on the chart.\n     *\n     * @param {KeyboardEvent} e - The keyboard event.\n     * @returns {boolean} - Returns false.\n     * @private\n     */\n    Chart.prototype.chartKeyUp = function (e) {\n        var actionKey = '';\n        var targetId = e.target['id'];\n        var groupElement;\n        var markerGroup;\n        var targetElement = e.target;\n        var titleElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_ChartTitle');\n        var seriesElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SeriesCollection');\n        var legendElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_translate_g');\n        var pagingElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pageup');\n        if (titleElement) {\n            titleElement.setAttribute('class', 'e-chart-focused');\n        }\n        if (seriesElement && seriesElement.firstElementChild && seriesElement.firstElementChild.children[1]) {\n            var firstChild = seriesElement.firstElementChild.children[1];\n            var className = firstChild.getAttribute('class');\n            if (className && className.indexOf('e-chart-focused') === -1) {\n                className = className + ' e-chart-focused';\n            }\n            else if (!className) {\n                className = 'e-chart-focused';\n            }\n            firstChild.setAttribute('class', className);\n        }\n        if (legendElement) {\n            var firstChild = legendElement.firstElementChild;\n            var className = firstChild.getAttribute('class');\n            if (className && className.indexOf('e-chart-focused') === -1) {\n                className = className + ' e-chart-focused';\n            }\n            else if (!className) {\n                className = 'e-chart-focused';\n            }\n            firstChild.setAttribute('class', className);\n        }\n        if (pagingElement) {\n            pagingElement.setAttribute('class', 'e-chart-focused');\n        }\n        if (e.code === 'Tab') {\n            if (this.previousTargetId !== '') {\n                if ((this.previousTargetId.indexOf('_Series_') > -1 && targetId.indexOf('_Series_') === -1)) {\n                    groupElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SeriesCollection');\n                    var previousElement = void 0;\n                    if (this.previousTargetId.indexOf('_Symbol') > -1 ? (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SymbolGroup' + this.currentSeriesIndex) :\n                        groupElement.children[this.currentSeriesIndex]) {\n                        previousElement = this.previousTargetId.indexOf('_Symbol') > -1 ?\n                            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SymbolGroup' + this.currentSeriesIndex).children[this.currentPointIndex + 1] :\n                            (this.previousTargetId.indexOf('_Point_') > -1 ?\n                                groupElement.children[this.currentSeriesIndex].children[this.currentPointIndex + 1] :\n                                groupElement.children[this.currentSeriesIndex]);\n                    }\n                    this.currentPointIndex = 0;\n                    this.currentSeriesIndex = 0;\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_page') > -1 && targetId.indexOf('_chart_legend_page') === -1\n                    && targetId.indexOf('_chart_legend_g_') === -1) {\n                    this.setTabIndex(e.target, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pageup'));\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_g_') > -1 && targetId.indexOf('_chart_legend_g_') === -1) {\n                    groupElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_translate_g');\n                    this.setTabIndex(groupElement.children[this.currentLegendIndex], groupElement.firstElementChild);\n                }\n            }\n            this.previousTargetId = targetId;\n            if (targetId.indexOf('SeriesGroup') > -1) {\n                this.currentSeriesIndex = +targetId.split('SeriesGroup')[1];\n                targetElement.removeAttribute('tabindex');\n                targetElement.blur();\n                if (targetElement.children[1].id.indexOf('_Point_') === -1) {\n                    markerGroup = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SymbolGroup' + targetId.split('SeriesGroup')[1]);\n                }\n                targetId = this.focusChild((markerGroup != null ? markerGroup.children[1] : targetElement.children[1]));\n            }\n            else if (targetId.indexOf('_ChartTitle') > -1) {\n                this.setNavigationStyle(targetId);\n            }\n            actionKey = targetId !== this.element.id ? 'Tab' : '';\n        }\n        else if (e.code.indexOf('Arrow') > -1) {\n            e.preventDefault();\n            this.previousTargetId = targetId;\n            if (targetId.indexOf('_chart_legend_page') > -1) {\n                if (e.code === 'ArrowLeft') {\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pagedown').removeAttribute('tabindex');\n                    this.focusChild((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pageup'));\n                }\n                else if (e.code === 'ArrowRight') {\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pageup').removeAttribute('tabindex');\n                    this.focusChild((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_chart_legend_pagedown'));\n                }\n            }\n            else if ((targetId.indexOf('_chart_legend_') > -1)) {\n                var legendElement_1 = targetElement.parentElement.children;\n                legendElement_1[this.currentLegendIndex].removeAttribute('tabindex');\n                this.currentLegendIndex += (e.code === 'ArrowUp' || e.code === 'ArrowRight') ? +1 : -1;\n                this.currentLegendIndex = this.getActualIndex(this.currentLegendIndex, legendElement_1.length);\n                var currentLegend = legendElement_1[this.currentLegendIndex];\n                this.focusChild(currentLegend);\n                this.removeNavigationStyle();\n                this.setNavigationStyle(currentLegend.id);\n                targetId = currentLegend.children[1].id;\n                actionKey = this.highlightMode !== 'None' ? 'ArrowMove' : '';\n            }\n            else if (targetId.indexOf('_Series_') > -1) {\n                groupElement = targetElement.parentElement.parentElement;\n                var currentPoint = e.target;\n                targetElement.removeAttribute('tabindex');\n                targetElement.blur();\n                if (e.code === 'ArrowRight' || e.code === 'ArrowLeft') {\n                    var seriesIndexes = [];\n                    for (var i = 0; i < groupElement.children.length; i++) {\n                        if (groupElement.children[i].id.indexOf('SeriesGroup') > -1) {\n                            seriesIndexes.push(+groupElement.children[i].id.split('SeriesGroup')[1]);\n                        }\n                    }\n                    this.currentSeriesIndex = seriesIndexes.indexOf(this.currentSeriesIndex) + (e.code === 'ArrowRight' ? 1 : -1);\n                    this.currentSeriesIndex = seriesIndexes[this.getActualIndex(this.currentSeriesIndex, seriesIndexes.length)];\n                }\n                else {\n                    this.currentPointIndex += e.code === 'ArrowUp' ? 1 : -1;\n                }\n                if (targetId.indexOf('_Symbol') > -1) {\n                    this.currentPointIndex = this.getActualIndex(this.currentPointIndex, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SymbolGroup' + this.currentSeriesIndex).childElementCount - 1);\n                    currentPoint = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Series_' + this.currentSeriesIndex + '_Point_' +\n                        this.currentPointIndex + '_Symbol');\n                }\n                else if (targetId.indexOf('_Point_') > -1) {\n                    this.currentPointIndex = this.getActualIndex(this.currentPointIndex, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + 'SeriesGroup' + this.currentSeriesIndex).childElementCount - 1);\n                    currentPoint = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Series_' + this.currentSeriesIndex + '_Point_' +\n                        this.currentPointIndex);\n                }\n                targetId = this.focusChild(currentPoint);\n                actionKey = 'ArrowMove';\n            }\n        }\n        else if ((e.code === 'Enter' || e.code === 'Space') && ((targetId.indexOf('_chart_legend_') > -1) ||\n            (targetId.indexOf('_Point_') > -1))) {\n            targetId = (targetId.indexOf('_chart_legend_page') > -1) ? targetId : ((targetId.indexOf('_chart_legend_') > -1) ?\n                targetElement.children[1].id : targetId);\n            actionKey = 'Enter';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, targetId, actionKey);\n        }\n        return false;\n    };\n    /**\n     * Sets the tab index for the specified elements.\n     *\n     * @param {HTMLElement} previousElement - The previous element whose tab index needs to be removed.\n     * @param {HTMLElement} currentElement - The current element to which the tab index needs to be set.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.setTabIndex = function (previousElement, currentElement) {\n        if (previousElement) {\n            previousElement.removeAttribute('tabindex');\n        }\n        if (currentElement) {\n            currentElement.setAttribute('tabindex', '0');\n        }\n    };\n    Chart.prototype.getActualIndex = function (index, totalLength) {\n        return index > totalLength - 1 ? 0 : (index < 0 ? totalLength - 1 : index);\n    };\n    Chart.prototype.focusChild = function (element) {\n        element.setAttribute('tabindex', '0');\n        var className = element.getAttribute('class');\n        element.setAttribute('tabindex', '0');\n        if (className && className.indexOf('e-chart-focused') === -1) {\n            className = 'e-chart-focused ' + className;\n        }\n        else if (!className) {\n            className = 'e-chart-focused';\n        }\n        element.setAttribute('class', className);\n        element.focus();\n        return element.id;\n    };\n    /**\n     * Handles the key event on the document.\n     *\n     * @param {KeyboardEvent} e - The keyboard event.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.documentKeyHandler = function (e) {\n        // 74 - J\n        if (e.altKey && e.keyCode === 74 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element)) {\n            this.element.focus();\n            this.setNavigationStyle(this.element.id);\n        }\n    };\n    /**\n     * Handles to set style for key event on the document.\n     *\n     * @param {target} target - element which currently focused.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.setNavigationStyle = function (target) {\n        var currentElement = document.getElementById(target);\n        if (currentElement) {\n            currentElement.style.setProperty('outline', this.focusBorderWidth + \"px solid \" + (this.focusBorderColor || this.themeStyle.tabColor));\n            currentElement.style.setProperty('margin', this.focusBorderMargin + \"px\");\n        }\n    };\n    /**\n     * Handles to remove style for key event on the document.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.removeNavigationStyle = function () {\n        var currentElement = document.querySelectorAll(\"[id*=_Point_], [id*=\" + this.element.id + \"], [id*=_ChartBorder], text[id*=_ChartTitle],g[id*=_chart_legend],  text[id*=_ChartSubTitle], div[id*=_Annotation], g[id*=IndicatorGroup], g[id*=_Zooming_Zoom], g[id*=_Zooming_ZoomIn], g[id*=_Zooming_ZoomOut], g[id*=_Zooming_Pan], g[id*=_Zooming_Reset], path[id*=_TrendLine_]\");\n        if (currentElement) {\n            currentElement.forEach(function (element) {\n                if (element instanceof HTMLElement || element instanceof SVGElement) {\n                    element.style.setProperty('outline', 'none');\n                    element.style.setProperty('margin', '');\n                }\n            });\n        }\n    };\n    /**\n     * Handles keyboard navigation on the chart.\n     *\n     * @param {KeyboardEvent} e - The keyboard event.\n     * @param {string} targetId - The ID of the target element.\n     * @param {string} actionKey - The key that determines the action to be taken.\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.chartKeyboardNavigations = function (e, targetId, actionKey) {\n        this.isLegendClicked = false;\n        this.removeNavigationStyle();\n        if (actionKey !== 'Enter' && actionKey !== 'Space') {\n            this.setNavigationStyle(targetId);\n        }\n        switch (actionKey) {\n            case 'Tab':\n            case 'ArrowMove':\n                if (this.highlightModule) {\n                    this.highlightModule.removeLegendHighlightStyles();\n                }\n                if (targetId.indexOf('_Point_') > -1) {\n                    var seriesIndex = +(targetId.split('_Series_')[1].split('_Point_')[0]);\n                    var pointIndex = +(targetId.split('_Series_')[1].replace('_Symbol', '').split('_Point_')[1]);\n                    var pointRegion = this.visibleSeries[seriesIndex].points[pointIndex].\n                        symbolLocations[0];\n                    this.mouseX = pointRegion.x + this.initialClipRect.x - (this.visibleSeries[seriesIndex].type.indexOf('StackingBar') > -1 ?\n                        this.visibleSeries[seriesIndex].marker.height / 2 : 0);\n                    this.mouseY = pointRegion.y + this.initialClipRect.y + (this.visibleSeries[seriesIndex].type.indexOf('StackingColumn') > -1 ?\n                        this.visibleSeries[seriesIndex].marker.height / 2 : 0);\n                    if (this.highlightModule) {\n                        this.highlightModule.highlightChart(document.getElementById(targetId), 'mousemove');\n                        this.highlightModule.completeSelection(document.getElementById(targetId), 'mousemove');\n                    }\n                    if (this.tooltipModule) {\n                        this.tooltipModule.tooltip();\n                    }\n                }\n                if (this.highlightModule && this.highlightMode !== 'None') {\n                    targetId = targetId.indexOf('_chart_legend_g_') > -1 ? document.getElementById(targetId).firstChild['id'] : targetId;\n                    var legendID = this.element.id + '_chart_legend';\n                    var legendItemsId = [legendID + '_text_', legendID + '_shape_marker_',\n                        legendID + '_shape_'];\n                    for (var i = 0; i < legendItemsId.length; i++) {\n                        var id = legendItemsId[i];\n                        if (targetId.indexOf(id) > -1) {\n                            document.getElementById(targetId).setAttribute('class', '');\n                            this.highlightModule.legendSelection(this, parseInt(targetId.split(id)[1], 10), document.getElementById(targetId), 'mousemove');\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 'Enter':\n            case 'Space':\n                if (targetId.indexOf('_chart_legend_') > -1) {\n                    this.isLegendClicked = true;\n                    this.legendModule.click(e);\n                    this.focusChild(document.getElementById(targetId).parentElement);\n                    this.setNavigationStyle(document.getElementById(targetId).parentElement.id);\n                }\n                else {\n                    if (this.selectionModule) {\n                        this.selectionModule.calculateSelectedElements(document.getElementById(targetId), 'click');\n                    }\n                    this.setNavigationStyle(targetId);\n                }\n                break;\n            case 'CtrlP':\n                this.print();\n                break;\n            case 'ESC':\n                this.tooltipModule.removeTooltip(1);\n                break;\n            case 'Equal':\n            case 'Minus':\n                this.zoomModule.isZoomed = this.zoomModule.performedUI = true;\n                this.zoomModule.isPanning = this.isChartDrag = false;\n                if (actionKey === 'Equal') {\n                    this.zoomModule.toolkit.zoomInOutCalculation(1, this, this.axisCollections, this.zoomSettings.mode);\n                }\n                else {\n                    this.zoomModule.toolkit.zoomInOutCalculation(-1, this, this.axisCollections, this.zoomSettings.mode);\n                }\n                this.zoomModule.performZoomRedraw(this);\n                this.element.focus();\n                break;\n            case 'ArrowUp':\n            case 'ArrowDown':\n            case 'ArrowLeft':\n            case 'ArrowRight': {\n                var yArrowPadding = actionKey === 'ArrowUp' ? 10 : (actionKey === 'ArrowDown' ? -10 : 0);\n                var xArrowPadding = actionKey === 'ArrowLeft' ? -10 : (actionKey === 'ArrowRight' ? 10 : 0);\n                this.zoomModule.isPanning = this.isChartDrag = true;\n                this.zoomModule.doPan(this, this.axisCollections, xArrowPadding, yArrowPadding);\n                this.zoomModule.performZoomRedraw(this);\n                this.element.focus();\n                break;\n            }\n            case 'R':\n                this.zoomModule.toolkit.reset(e);\n                break;\n        }\n    };\n    /**\n     * Handles the mouse click on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - The mouse or touch event.\n     * @returns {boolean} -  Return false.\n     * @private\n     */\n    Chart.prototype.chartOnMouseClick = function (e) {\n        var _this = this;\n        var element = e.target;\n        var chart = this;\n        this.clickCount++;\n        var XYvalues = this.FindXYPointValue(chart.mouseX, chart.mouseY);\n        var timeInterval = 400;\n        if (this.clickCount === 1) {\n            this.singleClickTimer = +setTimeout(function () {\n                chart.clickCount = 0;\n                chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartMouseClick, { target: element.id, x: chart.mouseX, y: chart.mouseY, axisData: XYvalues });\n            }, timeInterval);\n        }\n        else if (this.clickCount === 2 && !this.pointDoubleClick) {\n            clearTimeout(this.singleClickTimer);\n            this.clickCount = 0;\n        }\n        var isAngular = 'isAngular';\n        if (this[isAngular]) {\n            var observers = 'observers';\n            timeInterval = this.pointDoubleClick[observers].length > 0 ? 400 : 0;\n        }\n        else {\n            timeInterval = this.pointDoubleClick ? 400 : 0;\n        }\n        if (this.clickCount === 1 && this.pointClick) {\n            this.singleClickTimer = +setTimeout(function () {\n                _this.clickCount = 0;\n                _this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.pointClick, e);\n            }, timeInterval);\n        }\n        else if (this.clickCount === 2 && this.pointDoubleClick) {\n            clearTimeout(this.singleClickTimer);\n            this.clickCount = 0;\n            this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.pointDoubleClick, e);\n        }\n        if (this.axisLabelClick) {\n            this.triggerAxisLabelClickEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.axisLabelClick, e);\n        }\n        this.removeNavigationStyle();\n        this.notify('click', e);\n        return false;\n    };\n    Chart.prototype.FindXYPointValue = function (mouseX, mouseY) {\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.withInBounds)(mouseX, mouseY, this.chartAxisLayoutPanel.seriesClipRect)\n            && this.series.some(function (series) { return series.visible; })) {\n            var axis = void 0;\n            var Xvalue = void 0;\n            var Yvalue = void 0;\n            var axisData = {};\n            for (var k = 0, length_1 = this.axisCollections.length; k < length_1; k++) {\n                axis = this.axisCollections[k];\n                if (axis.orientation === 'Horizontal') {\n                    Xvalue = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueXByPoint)(Math.abs(mouseX - axis.rect.x), axis.rect.width, axis);\n                    axisData[this.axisCollections[k].name] = Xvalue;\n                }\n                else {\n                    Yvalue = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueYByPoint)(Math.abs(mouseY - axis.rect.y), axis.rect.height, axis);\n                    axisData[this.axisCollections[k].name] = Yvalue;\n                }\n            }\n            return axisData;\n        }\n        return null;\n    };\n    Chart.prototype.triggerPointEvent = function (event, e) {\n        var evt = e;\n        var data = new _utils_get_data__WEBPACK_IMPORTED_MODULE_7__.ChartData(this);\n        var pointData = data.getData();\n        if (pointData.series && pointData.point) {\n            this.trigger(event, {\n                series: this.isBlazor ? {} : pointData.series,\n                point: pointData.point,\n                seriesIndex: pointData.series.index, pointIndex: pointData.point.index,\n                x: this.mouseX, y: this.mouseY, pageX: evt.pageX, pageY: evt.pageY\n            });\n        }\n    };\n    Chart.prototype.triggerAxisLabelClickEvent = function (event, e) {\n        var targetElement = e.target;\n        var clickEvt = e;\n        if (targetElement.id.indexOf('_AxisLabel_') !== -1) {\n            var index = targetElement.id.split('_AxisLabel_');\n            var axisIndex = +index[0].slice(-1);\n            var labelIndex = +index[1];\n            var currentAxis = this.axisCollections[axisIndex];\n            if (currentAxis.visible && (axisIndex === 0 || axisIndex === 1)) {\n                this.trigger(event, {\n                    chart: this,\n                    axis: currentAxis,\n                    text: currentAxis.visibleLabels[labelIndex].text,\n                    labelID: targetElement.id,\n                    index: labelIndex,\n                    location: new _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.ChartLocation(clickEvt.pageX, clickEvt.pageY),\n                    value: currentAxis.visibleLabels[labelIndex].value\n                });\n            }\n        }\n    };\n    /**\n     * Handles the mouse move on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - The mouse or touch event.\n     * @returns {boolean} - False.\n     * @private\n     */\n    Chart.prototype.chartOnMouseMove = function (e) {\n        var element = e.target;\n        var XYvalues = this.FindXYPointValue(this.mouseX, this.mouseY);\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartMouseMove, { target: element.id, x: this.mouseX, y: this.mouseY, axisData: XYvalues });\n        if (this.pointMove) {\n            this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.pointMove, e);\n        }\n        // Tooltip for chart series.\n        if (!this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY);\n            this.axisTooltip(e, this.mouseX, this.mouseY);\n        }\n        if (this.dataEditingModule) {\n            this.dataEditingModule.pointMouseMove(e);\n        }\n        if (this.crosshair.enable && this.startMove) {\n            e.preventDefault();\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, e);\n        this.isTouch = false;\n        return false;\n    };\n    Chart.prototype.titleTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        var id = (targetId === (this.element.id + '_ChartTitle') || targetId === (this.element.id + '_ChartSubTitle') ||\n            targetId.indexOf('_AxisTitle') > -1 || targetId.indexOf('_legend_title') > -1);\n        var index = 0;\n        if (targetId.indexOf('_AxisTitle') > -1) {\n            index = parseInt(((targetId.replace(this.element.id, '')).replace('AxisLabel_', '')).split('_')[2], 10);\n        }\n        if (id && (event.target.textContent.indexOf('...') > -1)) {\n            var title = (targetId === (this.element.id + '_ChartTitle')) ? this.title :\n                targetId.indexOf('_AxisTitle') > -1 ? this.axisCollections[index].title :\n                    targetId.indexOf('_ChartSubTitle') > -1 ? this.subTitle : this.legendSettings.title;\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.showTooltip)(title, x, y, this.element.offsetWidth, this.element.id + '_EJ2_Title_Tooltip', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Secondary_Element'), isTouch);\n        }\n        else {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_EJ2_Title_Tooltip');\n        }\n    };\n    Chart.prototype.axisTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        if (((targetId.indexOf('AxisLabel') > -1) || targetId.indexOf('Axis_MultiLevelLabel') > -1) &&\n            (event.target.textContent.indexOf('...') > -1)) {\n            var isTitleOrLegendEnabled = (this.legendSettings.visible || this.primaryXAxis.title === '');\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.showTooltip)(this.findAxisLabel(targetId), x, y, this.element.offsetWidth, this.element.id + '_EJ2_AxisLabel_Tooltip', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Secondary_Element'), isTouch, isTitleOrLegendEnabled);\n        }\n        else {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_EJ2_AxisLabel_Tooltip');\n        }\n    };\n    Chart.prototype.findAxisLabel = function (text) {\n        var texts;\n        if (text.indexOf('AxisLabel') > -1) {\n            texts = ((text.replace(this.element.id, '')).replace('AxisLabel_', '')).split('_');\n            return this.axisCollections[parseInt(texts[0], 10)].visibleLabels[parseInt(texts[1], 10)].originalText;\n        }\n        else {\n            texts = ((text.replace(this.element.id, '')).replace('Axis_MultiLevelLabel_Level_', '').replace('Text_', '')).split('_');\n            return (this.axisCollections[parseInt(texts[0], 10)].multiLevelLabels[parseInt(texts[1], 10)]\n                .categories[parseInt(texts[2], 10)].text);\n        }\n    };\n    /**\n     * Handles the mouse down on the chart.\n     *\n     * @param {PointerEvent} e - The mouse event.\n     * @returns {boolean} - False.\n     * @private\n     */\n    Chart.prototype.chartOnMouseDown = function (e) {\n        var pageX;\n        var pageY;\n        var target;\n        var touchArg;\n        var XYvalues = this.FindXYPointValue(this.mouseX, this.mouseY);\n        var offset = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 20 : 30;\n        var rect = this.element.getBoundingClientRect();\n        var element = e.target;\n        if (this.stockChart && this.stockChart.zoomSettings.enablePan) {\n            this.allowPan = true;\n        }\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartMouseDown, { target: element.id, x: this.mouseX, y: this.mouseY, axisData: XYvalues });\n        if (e.type === 'touchstart') {\n            this.isTouch = true;\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n            target = touchArg.target;\n        }\n        else {\n            this.isTouch = e.pointerType === 'touch';\n            pageX = e.clientX;\n            pageY = e.clientY;\n            target = e.target;\n        }\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.svgId).getBoundingClientRect();\n        this.mouseDownX = this.previousMouseMoveX = (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);\n        this.mouseDownY = this.previousMouseMoveY = (pageY - rect.top) - Math.max(svgRect.top - rect.top, 0);\n        if (this.isTouch) {\n            this.isDoubleTap = (new Date().getTime() < this.threshold && target.id.indexOf(this.element.id + '_Zooming_') === -1 &&\n                (this.mouseDownX - offset >= this.mouseX || this.mouseDownX + offset >= this.mouseX) &&\n                (this.mouseDownY - offset >= this.mouseY || this.mouseDownY + offset >= this.mouseY) &&\n                (this.mouseX - offset >= this.mouseDownX || this.mouseX + offset >= this.mouseDownX) &&\n                (this.mouseY - offset >= this.mouseDownY || this.mouseY + offset >= this.mouseDownY));\n        }\n        if (this.dataEditingModule) {\n            this.dataEditingModule.pointMouseDown();\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, e);\n        return false;\n    };\n    /**\n     * Handles the mouse up on the chart.\n     *\n     * @param {PointerEvent} e - The mouse event.\n     * @returns {boolean} - False.\n     * @private\n     */\n    Chart.prototype.mouseEnd = function (e) {\n        var pageY;\n        var pageX;\n        var touchArg;\n        if (e.type === 'touchend') {\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            this.isTouch = true;\n            pageY = touchArg.changedTouches[0].clientY;\n        }\n        else {\n            pageY = e.clientY;\n            pageX = e.clientX;\n            this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n        }\n        this.setMouseXY(pageX, pageY);\n        this.chartOnMouseUp(e);\n        return false;\n    };\n    /**\n     * Handles the mouse up on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} e - The mouse or touch event.\n     * @returns {boolean} - False.\n     * @private\n     */\n    Chart.prototype.chartOnMouseUp = function (e) {\n        var element = e.target;\n        var XYvalues = this.FindXYPointValue(this.mouseX, this.mouseY);\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_13__.chartMouseUp, { target: element.id, x: this.mouseX, y: this.mouseY, axisData: XYvalues });\n        this.isChartDrag = false;\n        this.allowPan = false;\n        if (this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY, this.isTouch);\n            this.axisTooltip(e, this.mouseX, this.mouseY, this.isTouch);\n            this.threshold = new Date().getTime() + 300;\n        }\n        if (this.dataEditingModule) {\n            this.dataEditingModule.pointMouseUp();\n        }\n        if (!this.enableCanvas && this.seriesElements) {\n            this.seriesElements.removeAttribute('clip-path');\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, e);\n        return false;\n    };\n    /**\n     * Method to set culture for chart.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n        this.setLocaleConstants();\n        this.localeObject = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocalConstants, this.locale);\n    };\n    /**\n     * Sets the content of the annotation dynamically for the chart.\n     *\n     * @param {number} annotationIndex - The index of the annotation.\n     * @param {string} content - The content to set for the annotation.\n     * @returns {void}\n     */\n    Chart.prototype.setAnnotationValue = function (annotationIndex, content) {\n        var parentNode = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Annotation_Collections');\n        var annotation = this.annotations[annotationIndex];\n        var element;\n        if (content !== null) {\n            annotation.content = content;\n            if (parentNode) {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_Annotation_' + annotationIndex);\n                element = this.createElement('div');\n                this.annotationModule.processAnnotation(annotation, annotationIndex, element);\n                parentNode.appendChild(element.children[0]);\n            }\n            else {\n                this.annotationModule.renderAnnotations((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.element.id + '_Secondary_Element'));\n            }\n        }\n    };\n    /**\n     * Method to set locale constants.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.setLocaleConstants = function () {\n        this.defaultLocalConstants = {\n            ZoomIn: 'Zoom in',\n            Zoom: 'Zoom',\n            ZoomOut: 'Zoom out',\n            Pan: 'Pan',\n            Reset: 'Reset',\n            ResetZoom: 'Reset Zoom'\n        };\n    };\n    /**\n     * Theming for chart.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.setTheme = function () {\n        /** Set theme */\n        this.themeStyle = (0,_common_model_theme__WEBPACK_IMPORTED_MODULE_2__.getThemeColor)(this.theme, this.enableCanvas, this);\n    };\n    /**\n     * Provides the array of modules needed for control rendering.\n     *\n     * @returns {ModuleDeclaration[]} - The array of module declarations.\n     * @private\n     */\n    Chart.prototype.requiredModules = function () {\n        var _this = this;\n        var modules = [];\n        var series = this.series;\n        var enableAnnotation = false;\n        var moduleName;\n        var errorBarVisible = false;\n        var isPointDrag = false;\n        var dataLabelEnable = false;\n        var zooming = this.zoomSettings;\n        this.chartAreaType = (series.length > 0 && (series[0].type === 'Polar' || series[0].type === 'Radar')) ? 'PolarRadar' : 'Cartesian';\n        if (this.tooltip.enable) {\n            modules.push({\n                member: 'Tooltip',\n                args: [this]\n            });\n        }\n        series.map(function (value) {\n            _this.isLegend = (_this.legendSettings.visible && ((value.name !== '') || !!_this.isLegend));\n            moduleName = value.type.indexOf('100') !== -1 ? value.type.replace('100', '') + 'Series' : value.type + 'Series';\n            errorBarVisible = value.errorBar.visible || errorBarVisible;\n            dataLabelEnable = value.marker.dataLabel.visible || dataLabelEnable || (value.type === 'Pareto' && value.paretoOptions.marker.dataLabel.visible);\n            isPointDrag = value.dragSettings.enable || isPointDrag;\n            if (!modules.some(function (currentModule) {\n                return currentModule.member === moduleName;\n            })) {\n                modules.push({\n                    member: moduleName,\n                    args: [_this, series]\n                });\n            }\n            if (_this.chartAreaType === 'PolarRadar') {\n                modules.push({\n                    member: value.drawType + 'Series',\n                    args: [_this, series]\n                });\n            }\n            if (value.type === 'Pareto') {\n                modules.push({\n                    member: 'ColumnSeries',\n                    args: [_this, series]\n                });\n                modules.push({\n                    member: 'LineSeries',\n                    args: [_this, series]\n                });\n            }\n        });\n        this.findIndicatorModules(modules);\n        this.findTrendLineModules(modules);\n        modules = this.findAxisModule(modules);\n        enableAnnotation = this.annotations.some(function (value) {\n            return (value.content !== null);\n        });\n        if (errorBarVisible) {\n            modules.push({\n                member: 'ErrorBar',\n                args: [this, series]\n            });\n        }\n        if (this.isLegend) {\n            modules.push({\n                member: 'Legend',\n                args: [this]\n            });\n        }\n        if (this.enableExport || this.allowExport) {\n            modules.push({\n                member: 'Export',\n                args: [this]\n            });\n        }\n        if (this.chartAreaType !== 'PolarRadar' && this.crosshair.enable) {\n            modules.push({\n                member: 'Crosshair',\n                args: [this]\n            });\n        }\n        if (this.chartAreaType !== 'PolarRadar' && !this.scrollSettingEnabled && (zooming.enableSelectionZooming\n            || zooming.enableMouseWheelZooming || zooming.enablePinchZooming || zooming.enablePan ||\n            zooming.enableScrollbar || zooming.showToolbar)) {\n            modules.push({\n                member: 'Zoom',\n                args: [this, this.zoomSettings]\n            });\n            if (zooming.enableScrollbar) {\n                modules.push({\n                    member: 'ScrollBar',\n                    args: [this]\n                });\n            }\n        }\n        if (this.selectionMode !== 'None' && !(this.chartAreaType === 'PolarRadar' &&\n            this.selectionMode.indexOf('Drag') > -1)) {\n            modules.push({\n                member: 'Selection',\n                args: [this]\n            });\n        }\n        if (this.highlightMode !== 'None' || this.legendSettings.enableHighlight) {\n            modules.push({\n                member: 'Highlight',\n                args: [this]\n            });\n        }\n        if (dataLabelEnable) {\n            modules.push({\n                member: 'DataLabel',\n                args: [this, series]\n            });\n        }\n        if (isPointDrag) {\n            modules.push({\n                member: 'DataEditing',\n                args: [this]\n            });\n        }\n        if (enableAnnotation) {\n            modules.push({\n                member: 'Annotation',\n                args: [this]\n            });\n        }\n        return modules;\n    };\n    Chart.prototype.findAxisModule = function (modules) {\n        var axisCollections = [];\n        axisCollections.push(this.primaryXAxis);\n        axisCollections.push(this.primaryYAxis);\n        axisCollections = axisCollections.concat(this.axes);\n        var datetimeEnabled = false;\n        var categoryEnabled = false;\n        var logarithmicEnabled = false;\n        var striplineEnabled = false;\n        var dateTimeCategoryEnabled = false;\n        var multiLevelEnabled = false;\n        for (var _i = 0, axisCollections_1 = axisCollections; _i < axisCollections_1.length; _i++) {\n            var axis = axisCollections_1[_i];\n            datetimeEnabled = axis.valueType === 'DateTime' || datetimeEnabled;\n            categoryEnabled = axis.valueType === 'Category' || categoryEnabled;\n            logarithmicEnabled = axis.valueType === 'Logarithmic' || logarithmicEnabled;\n            dateTimeCategoryEnabled = axis.valueType === 'DateTimeCategory' || dateTimeCategoryEnabled;\n            striplineEnabled = this.findStriplineVisibility(axis.stripLines) || striplineEnabled;\n            multiLevelEnabled = axis.multiLevelLabels.length > 0 || multiLevelEnabled;\n            this.scrollSettingEnabled = axis.scrollbarSettings.enable ? true : this.scrollSettingEnabled;\n        }\n        if (datetimeEnabled) {\n            modules.push({\n                member: 'DateTime',\n                args: [this]\n            });\n        }\n        if (categoryEnabled) {\n            modules.push({\n                member: 'Category',\n                args: [this]\n            });\n        }\n        if (logarithmicEnabled) {\n            modules.push({\n                member: 'Logarithmic',\n                args: [this]\n            });\n        }\n        if (striplineEnabled) {\n            modules.push({\n                member: 'StripLine',\n                args: [this]\n            });\n        }\n        if (multiLevelEnabled) {\n            modules.push({\n                member: 'MultiLevelLabel',\n                args: [this]\n            });\n        }\n        if (dateTimeCategoryEnabled) {\n            modules.push({\n                member: 'DateTimeCategory',\n                args: [this]\n            });\n        }\n        if (this.scrollSettingEnabled) {\n            modules.push({\n                member: 'ScrollBar',\n                args: [this]\n            });\n        }\n        return modules;\n    };\n    Chart.prototype.findIndicatorModules = function (modules) {\n        var macdEnable;\n        var bandEnable;\n        var indicators = this.indicators;\n        if (this.indicators.length) {\n            modules.push({\n                member: 'LineSeries',\n                args: [this]\n            });\n            indicators.map(function (indicator) {\n                macdEnable = macdEnable || indicator.type === 'Macd';\n                bandEnable = bandEnable || indicator.type === 'BollingerBands';\n            });\n            if (macdEnable) {\n                modules.push({\n                    member: 'ColumnSeries',\n                    args: [this]\n                });\n            }\n            if (bandEnable) {\n                modules.push({\n                    member: 'RangeAreaSeries',\n                    args: [this]\n                });\n            }\n            if (bandEnable) {\n                modules.push({\n                    member: 'SplineRangeAreaSeries',\n                    args: [this]\n                });\n            }\n            for (var _i = 0, _a = this.indicators; _i < _a.length; _i++) {\n                var indicator = _a[_i];\n                modules.push({\n                    member: indicator.type + 'Indicator',\n                    args: [this]\n                });\n            }\n        }\n    };\n    Chart.prototype.findTrendLineModules = function (modules) {\n        var isLine;\n        var isSpline;\n        var _loop_1 = function (series) {\n            var markerEnable;\n            series.trendlines.map(function (trendline) {\n                markerEnable = markerEnable || trendline.marker.visible;\n                isLine = isLine || (trendline.type === 'Linear' || trendline.type === 'MovingAverage') ? true : false;\n                isSpline = isSpline || (!isLine || (trendline.type === 'Exponential' || trendline.type === 'Logarithmic' || trendline.type === 'Power' || trendline.type === 'Polynomial')) ? true : false;\n            });\n            if (markerEnable) {\n                modules.push({\n                    member: 'Marker',\n                    args: [this_1, series]\n                });\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = this.series; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        if (isLine || isSpline) {\n            modules.push({\n                member: 'TrendLine',\n                args: [this]\n            });\n        }\n        if (isLine) {\n            modules.push({\n                member: 'LineSeries',\n                args: [this]\n            });\n        }\n        if (isSpline) {\n            modules.push({\n                member: 'SplineSeries',\n                args: [this]\n            });\n        }\n    };\n    Chart.prototype.findStriplineVisibility = function (striplines) {\n        var visible = false;\n        for (var _i = 0, striplines_1 = striplines; _i < striplines_1.length; _i++) {\n            var stripline = striplines_1[_i];\n            if (stripline.visible) {\n                visible = true;\n                break;\n            }\n        }\n        return visible;\n    };\n    /**\n     * To Remove the SVG.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.removeSvg = function () {\n        if (this.redraw) {\n            return null;\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.blazorTemplatesReset)(this);\n        if (this.enableCanvas && this.svgObject && this.svgObject.tagName === 'CANVAS') {\n            this.renderer.clearRect(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(0, 0, this.availableSize.width, this.availableSize.height));\n            if (this.svgObject.parentNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n            return null;\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_Secondary_Element');\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        var removeLength = 0;\n        if (this.zoomModule && this.zoomModule.pinchTarget) {\n            this.zoomModule.pinchTarget.id = '';\n            this.zoomModule.pinchTarget.setAttribute('opacity', '0');\n            this.svgObject.appendChild(this.zoomModule.pinchTarget);\n            removeLength = 1;\n        }\n        // Fix for blazor resize issue\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.resizeTo)) {\n            if (this.resizeTo !== this.checkResize && this.isBlazor && this.element.childElementCount) {\n                var containerCollection = document.querySelectorAll('.e-chart');\n                for (var index = 0; index < containerCollection.length; index++) {\n                    var container = containerCollection[index];\n                    while (container.firstChild) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(container.firstChild);\n                    }\n                }\n            }\n            this.checkResize = this.resizeTo;\n        }\n        if (this.svgObject) {\n            while (this.svgObject.childNodes.length > removeLength) {\n                this.svgObject.removeChild(this.svgObject.firstChild);\n            }\n            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode && !(this.stockChart)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n    };\n    Chart.prototype.refreshDefinition = function (definitions) {\n        for (var _i = 0, definitions_1 = definitions; _i < definitions_1.length; _i++) {\n            var item = definitions_1[_i];\n            item.axes = [];\n        }\n    };\n    /**\n     * Refresh the axis default value.\n     *\n     * @returns {void}\n     * @private\n     */\n    Chart.prototype.refreshAxis = function () {\n        var axis = this.primaryXAxis;\n        axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(undefined, undefined, 0, 0);\n        axis = this.primaryYAxis;\n        axis.isStack100 = false;\n        axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(undefined, undefined, 0, 0);\n        for (var _i = 0, _a = this.axes; _i < _a.length; _i++) {\n            var item = _a[_i];\n            axis = item;\n            axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(undefined, undefined, 0, 0);\n            axis.isStack100 = false;\n        }\n        if (this.paretoSeriesModule && this.series[0].type === 'Pareto') {\n            for (var _b = 0, _c = this.paretoSeriesModule.paretoAxes; _b < _c.length; _b++) {\n                var item = _c[_b];\n                axis = item;\n                axis.rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(undefined, undefined, 0, 0);\n                axis.isStack100 = false;\n            }\n        }\n    };\n    Chart.prototype.axisChange = function (axis) {\n        if (!axis.name && !axis.valueType) {\n            return false;\n        }\n        this.refreshDefinition(this.columns);\n        this.refreshDefinition(this.rows);\n        this.calculateVisibleAxis();\n        this.processData();\n        return true;\n    };\n    /**\n     * Gets the visible series by index.\n     *\n     * @param {Series[]} visibleSeries - The array of visible series.\n     * @param {number} index - The index of the series to retrieve.\n     * @returns {Series} - The visible series at the specified index.\n     * @private\n     */\n    Chart.prototype.getVisibleSeries = function (visibleSeries, index) {\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (index === series.index) {\n                return series;\n            }\n        }\n        return null;\n    };\n    /**\n     * Refresh the chart for live data updates.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.refreshLiveData = function () {\n        this.calculateVisibleSeries();\n        this.initTechnicalIndicators();\n        this.initTrendLines();\n        this.refreshDefinition(this.columns);\n        this.refreshDefinition(this.rows);\n        this.calculateVisibleAxis();\n        this.processData(false);\n        if (!this.isBlazor) {\n            if (this.enableCanvas) {\n                this.createChartSvg();\n            }\n            else {\n                this.removeSvg();\n            }\n            // this.enableCanvas ? this.createChartSvg() : this.removeSvg();\n            this.refreshAxis();\n            this.refreshBound();\n            this.trigger('loaded', { chart: this.isBlazor ? {} : this });\n        }\n    };\n    /**\n     * To remove style element.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.removeStyles = function () {\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_chart_selection');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.element.id + '_ej2_chart_highlight');\n    };\n    /**\n     * To trigger the manual mouse move event for live chart tooltip.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.mouseMoveEvent = function () {\n        if (this.tooltip.enable && this.previousPageX !== null && this.previousPageY !== null) {\n            var mousemove = document.createEvent('MouseEvent');\n            mousemove.initMouseEvent('mousemove', true, false, window, 1, 100, 100, this.previousPageX, this.previousPageY, false, false, false, false, 0, null);\n            this.element.dispatchEvent(mousemove);\n        }\n    };\n    /**\n     * Displays a tooltip for the data points.\n     *\n     * @param {number | string | Date} x - Specifies the x value of the point or x coordinate.\n     * @param {number} y - Specifies the x value of the point or y coordinate.\n     * @param {boolean} isPoint - Specifies whether x and y are data point or chart coordinates.\n     * @returns {void}\n     */\n    Chart.prototype.showTooltip = function (x, y, isPoint) {\n        if (isPoint === void 0) { isPoint = false; }\n        if (isPoint) {\n            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                    var point = _c[_b];\n                    var pointX = series.xAxis.valueType === 'DateTime' ? point.xValue : point.x;\n                    var xValue = x;\n                    if (series.xAxis.valueType === 'DateTime') {\n                        xValue = new Date(xValue).getTime();\n                    }\n                    if (x === pointX && y === point.yValue) {\n                        this.mouseX = point.regions[0].x + this.chartAxisLayoutPanel.seriesClipRect.x;\n                        this.mouseY = point.regions[0].y + this.chartAxisLayoutPanel.seriesClipRect.y;\n                        this.tooltipModule.tooltip();\n                        this.markerRender.mouseMoveHandler();\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            if (this.isTouch) {\n                this.startMove = true;\n            }\n            this.mouseX = x;\n            this.mouseY = y;\n            this.tooltipModule.mouseMoveHandler();\n            this.markerRender.mouseMoveHandler();\n        }\n    };\n    /**\n     * Hides a tooltip in the chart.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.hideTooltip = function () {\n        this.tooltipModule.removeTooltip(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 2000 : 1000);\n    };\n    /**\n     * Displays a crosshair for the chart.\n     *\n     * @param {number} x - Specifies the x value of the point or x coordinate.\n     * @param {number} y - Specifies the x value of the point or y coordinate.\n     * @returns {void}\n     */\n    Chart.prototype.showCrosshair = function (x, y) {\n        this.mouseX = x;\n        this.mouseY = y;\n        this.isCrosshair = false;\n        if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.withInBounds)(this.mouseX, this.mouseY, this.chartAxisLayoutPanel.seriesClipRect)) {\n            this.crosshairModule.crosshair();\n        }\n        else {\n            this.hideCrosshair();\n        }\n        this.isCrosshair = true;\n    };\n    /**\n     * Hides a tooltip in the chart.\n     *\n     * @returns {void}\n     */\n    Chart.prototype.hideCrosshair = function () {\n        this.crosshairModule.removeCrosshair(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 2000 : 1000);\n    };\n    /**\n     * Method to sanitize any potentially untrusted strings and scripts before rendering them.\n     *\n     * @param {string} value - Specifies the html value to sanitize\n     * @returns {string} Returns the sanitized html string\n     * @private\n     */\n    Chart.prototype.sanitize = function (value) {\n        if (this.enableHtmlSanitizer) {\n            return _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(value);\n        }\n        return value;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @private\n     * @param {ChartModel} newProp - The new ChartModel.\n     * @param {ChartModel} oldProp - The new ChartModel.\n     * @returns {void}\n     */\n    Chart.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var renderer = false;\n        var refreshBounds = false;\n        this.animateSeries = false;\n        var axis;\n        var axisChange = false;\n        var isZooming = false;\n        if (!this.delayRedraw && !this.zoomRedraw) {\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                axisChange = axisChange || (prop !== 'primaryXAxis' && prop !== 'primaryYAxis' && prop !== 'axes');\n                if (isZooming && axisChange) {\n                    this.redraw = false;\n                }\n                switch (prop) {\n                    case 'primaryXAxis':\n                        axis = newProp.primaryXAxis;\n                        refreshBounds = this.axisChange(axis);\n                        if (newProp.primaryXAxis.edgeLabelPlacement) {\n                            renderer = true;\n                        }\n                        if (!newProp.primaryXAxis.crosshairTooltip) {\n                            refreshBounds = true;\n                        }\n                        if (newProp.primaryXAxis.scrollbarSettings) {\n                            refreshBounds = true;\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                            this.primaryXAxis.setIsInversedAndOpposedPosition();\n                        }\n                        if ((!this.primaryXAxis.zoomingScrollBar || !(this.primaryXAxis.zoomingScrollBar.isScrollUI)) &&\n                            this.zoomModule && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomFactor) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomPosition))) {\n                            this.redraw = this.zoomSettings.enableAnimation && !axisChange;\n                            isZooming = this.zoomSettings.enableAnimation && !axisChange;\n                        }\n                        break;\n                    case 'primaryYAxis':\n                        axis = newProp.primaryYAxis;\n                        refreshBounds = this.axisChange(axis);\n                        if (newProp.primaryYAxis.edgeLabelPlacement) {\n                            renderer = true;\n                        }\n                        if (!newProp.primaryYAxis.crosshairTooltip) {\n                            refreshBounds = true;\n                        }\n                        if (newProp.primaryYAxis.scrollbarSettings) {\n                            refreshBounds = true;\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                            this.primaryYAxis.setIsInversedAndOpposedPosition();\n                        }\n                        if ((!this.primaryYAxis.zoomingScrollBar || !(this.primaryYAxis.zoomingScrollBar.isScrollUI)) &&\n                            this.zoomModule && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomFactor) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomPosition))) {\n                            this.redraw = this.zoomSettings.enableAnimation && !axisChange;\n                            isZooming = this.zoomSettings.enableAnimation && !axisChange;\n                        }\n                        break;\n                    case 'axes':\n                        for (var _b = 0, _c = Object.keys(newProp.axes); _b < _c.length; _b++) {\n                            var index = _c[_b];\n                            axis = newProp.axes[index];\n                            refreshBounds = refreshBounds || this.axisChange(axis);\n                            if (!axis.crosshairTooltip) {\n                                refreshBounds = true;\n                            }\n                            if (axis.scrollbarSettings) {\n                                refreshBounds = true;\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.isInversed) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.opposedPosition)) {\n                                this.axes[index].setIsInversedAndOpposedPosition();\n                            }\n                            if ((!this.axes[index].zoomingScrollBar || !(this.axes[index].zoomingScrollBar.isScrollUI)) &&\n                                this.zoomModule && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomFactor) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(axis.zoomPosition))) {\n                                this.redraw = this.zoomSettings.enableAnimation && !axisChange;\n                                isZooming = this.zoomSettings.enableAnimation && !axisChange;\n                            }\n                        }\n                        if (this.scrollElement && this.zoomSettings.enableScrollbar) {\n                            this.scrollElement = null;\n                        }\n                        break;\n                    case 'height':\n                    case 'width':\n                        this.createChartSvg();\n                        refreshBounds = true;\n                        break;\n                    case 'subTitle':\n                    case 'title':\n                        refreshBounds = true;\n                        break;\n                    case 'titleStyle':\n                        if (newProp.titleStyle && (newProp.titleStyle.size || newProp.titleStyle.textOverflow || newProp.titleStyle.position)) {\n                            refreshBounds = true;\n                        }\n                        else {\n                            renderer = true;\n                        }\n                        break;\n                    case 'subTitleStyle':\n                        if (newProp.subTitleStyle && (newProp.subTitleStyle.size || newProp.subTitleStyle.textOverflow)) {\n                            refreshBounds = true;\n                        }\n                        else {\n                            renderer = true;\n                        }\n                        break;\n                    case 'border':\n                        renderer = true;\n                        break;\n                    case 'dataSource':\n                        this.processData(false);\n                        refreshBounds = true;\n                        break;\n                    case 'enableCanvas':\n                        this.refresh();\n                        break;\n                    case 'series': {\n                        var len = this.series.length;\n                        var seriesRefresh = false;\n                        var series = void 0;\n                        var blazorProp = void 0;\n                        for (var i = 0; i < len; i++) {\n                            series = newProp.series[i];\n                            // I264774 blazor series visible property binding not working issue fixed.\n                            if (this.isBlazor && series && ((series.visible !== oldProp.series[i].visible) || series.isClosed ||\n                                series.marker || series.emptyPointSettings || series.type || series.boxPlotMode || series.showMean)) {\n                                blazorProp = true;\n                            }\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(series) && (series.dataSource || series.query || series.errorBar || series.xName ||\n                                series.yName || series.size || series.high || series.low || series.open || series.close || series.trendlines ||\n                                series.fill || series.name || series.marker || series.width || series.binInterval || series.type ||\n                                (series.visible !== oldProp.series[i].visible) ||\n                                series.legendShape || series.emptyPointSettings || series.opacity ||\n                                series.columnWidth || series.columnSpacing || series.opacity || series.dashArray ||\n                                series.bearFillColor || series.bullFillColor || blazorProp)) {\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.getVisibleSeries(this.visibleSeries, i), series, null, true);\n                                seriesRefresh = true;\n                            }\n                        }\n                        if (seriesRefresh) {\n                            this.calculateAreaType();\n                            this.calculateVisibleSeries();\n                            this.initTechnicalIndicators();\n                            this.initTrendLines();\n                            this.refreshDefinition(this.columns);\n                            this.refreshDefinition(this.rows);\n                            this.calculateVisibleAxis();\n                            this.processData(false);\n                            refreshBounds = true;\n                        }\n                        break;\n                    }\n                    case 'indicators':\n                        refreshBounds = true;\n                        break;\n                    case 'zoomSettings':\n                        if (newProp.zoomSettings.enableScrollbar || oldProp.zoomSettings.enableScrollbar) {\n                            refreshBounds = true;\n                        }\n                        renderer = true;\n                        break;\n                    case 'background':\n                        renderer = true;\n                        break;\n                    case 'chartArea':\n                        if (newProp.chartArea.border && newProp.chartArea.border.width) {\n                            refreshBounds = true;\n                        }\n                        renderer = true;\n                        break;\n                    case 'legendSettings':\n                        if (!newProp.legendSettings.background || !newProp.legendSettings.opacity) {\n                            refreshBounds = true;\n                        }\n                        renderer = true;\n                        break;\n                    case 'palettes':\n                        this.calculateVisibleSeries();\n                        renderer = true;\n                        break;\n                    case 'selectedDataIndexes':\n                        if (this.selectionModule) {\n                            this.selectionModule.currentMode = this.selectionMode;\n                            this.selectionModule.selectedDataIndexes = this.selectedDataIndexes;\n                            this.selectionModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selectionModule.redrawSelection(this, oldProp.selectionMode, true);\n                        }\n                        else if (this.highlightModule) {\n                            this.highlightModule.currentMode = this.highlightMode;\n                            this.highlightModule.highlightDataIndexes = this.selectedDataIndexes;\n                            this.highlightModule.styleId = this.element.id + '_ej2_chart_highlight';\n                            this.highlightModule.redrawSelection(this, oldProp.selectionMode, true);\n                        }\n                        break;\n                    case 'selectionMode':\n                        if (this.selectionModule && newProp.selectionMode && newProp.selectionMode.indexOf('Drag') === -1) {\n                            this.selectionModule.currentMode = this.selectionMode;\n                            if (oldProp.selectionMode === 'None') {\n                                this.selectionModule.invokeSelection(this);\n                            }\n                            this.selectionModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selectionModule.redrawSelection(this, oldProp.selectionMode, true);\n                        }\n                        break;\n                    case 'isMultiSelect':\n                        if (this.selectionModule && !newProp.isMultiSelect && this.selectionModule.selectedDataIndexes.length > 1) {\n                            this.selectionModule.currentMode = this.selectionMode;\n                            this.selectionModule.styleId = this.element.id + '_ej2_chart_selection';\n                            this.selectionModule.redrawSelection(this, oldProp.selectionMode);\n                        }\n                        break;\n                    case 'highlightMode':\n                    case 'selectionPattern':\n                    case 'highlightPattern':\n                        this.removeStyles();\n                        renderer = true;\n                        break;\n                    case 'theme':\n                        this.animateSeries = true;\n                        break;\n                    case 'enableRtl':\n                    case 'locale':\n                    case 'currencyCode':\n                        if (this.isBlazor) {\n                            this.setCulture();\n                            renderer = true;\n                        }\n                        else {\n                            this.refresh();\n                        }\n                        break;\n                    case 'tooltip':\n                        if (this.tooltipModule) { // To check the tooltip enable is true.\n                            this.tooltipModule.previousPoints = [];\n                            if (this.tooltip.template) {\n                                this.tooltipModule.template = this.tooltip.template;\n                            }\n                        }\n                        break;\n                }\n            }\n            if (!refreshBounds && renderer) {\n                this.rotatedDataLabelCollections = [];\n                this.removeSvg();\n                this.renderElements();\n                this.trigger('loaded', { chart: this.isBlazor ? {} : this });\n            }\n            if (refreshBounds) {\n                if (this.enableCanvas) {\n                    this.createChartSvg();\n                }\n                else {\n                    this.removeSvg();\n                }\n                // this.enableCanvas ? this.createChartSvg() : this.removeSvg();\n                if (this.isReact) {\n                    this.clearTemplate();\n                }\n                this.dragY = null;\n                this.refreshAxis();\n                this.refreshBound();\n                this.trigger('loaded', { chart: this.isBlazor ? {} : this });\n                this.redraw = false;\n                this.animated = false;\n            }\n        }\n        this.zoomRedraw = false;\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.titleSettings)\n    ], Chart.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart.prototype, \"subTitle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null, accessibility: { focusable: false } }, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.titleSettings)\n    ], Chart.prototype, \"subTitleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Margin)\n    ], Chart.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: '#DDDDDD', width: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Border)\n    ], Chart.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ border: { color: null, width: 0.5 }, background: 'transparent' }, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.ChartArea)\n    ], Chart.prototype, \"chartArea\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ name: 'primaryXAxis' }, _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Axis)\n    ], Chart.prototype, \"primaryXAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ name: 'primaryYAxis' }, _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Axis)\n    ], Chart.prototype, \"primaryYAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Row)\n    ], Chart.prototype, \"rows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Column)\n    ], Chart.prototype, \"columns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _axis_axis__WEBPACK_IMPORTED_MODULE_4__.Axis)\n    ], Chart.prototype, \"axes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _series_chart_series__WEBPACK_IMPORTED_MODULE_8__.Series)\n    ], Chart.prototype, \"series\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{ accessibility: { focusable: false } }], _model_chart_base__WEBPACK_IMPORTED_MODULE_14__.ChartAnnotationSettings)\n    ], Chart.prototype, \"annotations\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], Chart.prototype, \"palettes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Material')\n    ], Chart.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.TooltipSettings)\n    ], Chart.prototype, \"tooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, CrosshairSettings)\n    ], Chart.prototype, \"crosshair\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_legend_legend__WEBPACK_IMPORTED_MODULE_11__.LegendSettings)\n    ], Chart.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], RangeColorSetting)\n    ], Chart.prototype, \"rangeColorSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ZoomSettings)\n    ], Chart.prototype, \"zoomSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart.prototype, \"highlightColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart.prototype, \"selectionMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart.prototype, \"highlightMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart.prototype, \"selectionPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], Chart.prototype, \"highlightPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"isMultiSelect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart.prototype, \"enableExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"allowExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Indexes)\n    ], Chart.prototype, \"selectedDataIndexes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"useGroupingSeparator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"enableAutoIntervalOnBothAxis\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"isTransposed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart.prototype, \"enableCanvas\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"backgroundImage\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _technical_indicators_technical_indicator__WEBPACK_IMPORTED_MODULE_12__.TechnicalIndicator)\n    ], Chart.prototype, \"indicators\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Chart.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart.prototype, \"enableSideBySidePlacement\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_3__.Accessibility)\n    ], Chart.prototype, \"accessibility\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart.prototype, \"focusBorderColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1.5)\n    ], Chart.prototype, \"focusBorderWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Chart.prototype, \"focusBorderMargin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_chart_base__WEBPACK_IMPORTED_MODULE_14__.StackLabelSettings)\n    ], Chart.prototype, \"stackLabels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"resized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"beforeResize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"annotationRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"beforeExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"afterExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"animationComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"legendRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"textRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"pointRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"seriesRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"axisLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"axisLabelClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"axisRangeCalculated\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"axisMultiLabelRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"legendClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"multiLevelLabelClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"tooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"sharedTooltipRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartMouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartMouseClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"pointClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"pointDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"pointMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartMouseLeave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartMouseDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"chartMouseUp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"dragComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"selectionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"zoomComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"onZooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"scrollStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"scrollEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"scrollChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"dragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"drag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Chart.prototype, \"dragEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('USD')\n    ], Chart.prototype, \"currencyCode\", void 0);\n    Chart = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Chart);\n    return Chart;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/chart.js?");

/***/ })

}]);