"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-gantt_src_gantt_actions_taskbar-edit_js-6d55194f"],{

/***/ "./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskbarEdit: () => (/* binding */ TaskbarEdit)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/utils */ \"./node_modules/@syncfusion/ej2-gantt/src/gantt/base/utils.js\");\n/* harmony import */ var _base_date_processor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/date-processor */ \"./node_modules/@syncfusion/ej2-gantt/src/gantt/base/date-processor.js\");\n/* harmony import */ var _base_css_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/css-constants */ \"./node_modules/@syncfusion/ej2-gantt/src/gantt/base/css-constants.js\");\n/* harmony import */ var _renderer_edit_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renderer/edit-tooltip */ \"./node_modules/@syncfusion/ej2-gantt/src/gantt/renderer/edit-tooltip.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n\n\n/**\n * File for handling taskbar editing operation in Gantt.\n */\nvar TaskbarEdit = /** @class */ (function (_super) {\n    __extends(TaskbarEdit, _super);\n    function TaskbarEdit(ganttObj) {\n        var _this = _super.call(this, ganttObj) || this;\n        _this.leftValue = 0;\n        _this.previousLeftValue = 0;\n        _this.isMouseDragged = false;\n        _this.dependencyCancel = false;\n        _this.isDragged = false;\n        _this.editElement = null;\n        _this.elementOffsetLeft = 0;\n        _this.elementOffsetTop = 0;\n        _this.elementOffsetWidth = 0;\n        _this.elementOffsetHeight = 0;\n        _this.segmentIndex = -1;\n        _this.currentItemTop = 0;\n        _this.currentItemPrevTop = 0;\n        _this.topValue = 0;\n        _this.draggedRecordMarginTop = '0px';\n        _this.isClonedElement = false;\n        _this.updatePosition = false;\n        _this.tooltipValue = 0;\n        _this.parent = ganttObj;\n        _this.initPublicProp();\n        _this.wireEvents();\n        _this.editTooltip = new _renderer_edit_tooltip__WEBPACK_IMPORTED_MODULE_4__.EditTooltip(_this.parent, _this);\n        return _this;\n    }\n    TaskbarEdit.prototype.wireEvents = function () {\n        this.parent.on('chartMouseDown', this.mouseDownHandler, this);\n        this.parent.on('chartMouseUp', this.mouseUpHandler, this);\n        this.parent.on('chartMouseLeave', this.mouseLeaveHandler, this);\n        this.parent.on('chartMouseMove', this.mouseMoveAction, this);\n        this.parent.on('chartMouseClick', this.mouseClickHandler, this);\n    };\n    /**\n     * To initialize the public property.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.initPublicProp = function () {\n        this.taskBarEditElement = null;\n        this.taskBarEditRecord = null;\n        this.taskBarEditAction = null;\n        this.connectorSecondElement = null;\n        this.connectorSecondRecord = null;\n        this.connectorSecondAction = null;\n        this.highlightedSecondElement = null;\n        this.fromPredecessorText = null;\n        this.toPredecessorText = null;\n        this.finalPredecessor = null;\n        this.drawPredecessor = false;\n        this.roundOffDuration = true;\n        this.dragMouseLeave = false;\n        this.isMouseDragged = false;\n        this.previousItemProperty = ['left', 'progress', 'duration', 'isMilestone', 'startDate', 'endDate', 'width', 'progressWidth',\n            'autoLeft', 'autoDuration', 'autoStartDate', 'autoEndDate', 'autoWidth', 'segments'];\n        this.tapPointOnFocus = false;\n        this.touchEdit = false;\n    };\n    TaskbarEdit.prototype.mouseDownHandler = function (e) {\n        if (this.parent.editSettings.allowTaskbarEditing && !this.parent.readOnly) {\n            this.canDrag = false;\n            if (this.taskBarEditElement) {\n                var targetElement = this.getElementByPosition(e);\n                var element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(targetElement, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n                if ((element && element.innerHTML === this.taskBarEditElement.innerHTML ||\n                    this.taskBarEditElement.classList.contains('e-segmented-taskbar') || this.taskBarEditElement.classList.contains('collpse-parent-border'))) {\n                    this.updateTaskBarEditElement(e);\n                    this.canDrag = true;\n                    e.preventDefault();\n                }\n            }\n            else if (!this.parent.isAdaptive) {\n                this.updateTaskBarEditElement(e);\n            }\n        }\n    };\n    TaskbarEdit.prototype.mouseClickHandler = function (e) {\n        if (!this.parent.editSettings.allowTaskbarEditing) {\n            return;\n        }\n        var targetElement = this.getElementByPosition(e);\n        var element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(targetElement, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n        if (this.parent.selectionModule && this.parent.selectionModule.enableSelectMultiTouch) {\n            if (this.tapPointOnFocus) {\n                this.updateTaskBarEditElement(e);\n            }\n            return;\n        }\n        if (this.tapPointOnFocus && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditElement) && element &&\n            element.innerHTML !== this.taskBarEditElement.innerHTML) {\n            this.connectorSecondRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.connectorSecondElement = element;\n            this.fromPredecessorText = 'Finish';\n            if (this.validateConnectorPoint()) {\n                this.taskBarEditingAction(e, true);\n            }\n            this.showHideActivePredecessors(false);\n            this.initPublicProp();\n        }\n        else if (targetElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeftHover)) {\n            this.canDrag = false;\n            this.multipleSelectionEnabled();\n            this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n            this.tapPointOnFocus = true;\n            this.taskBarEditAction = 'ConnectorPointLeftDrag';\n            this.connectorSecondRecord = this.taskBarEditRecord;\n            this.taskBarEditingAction(e, false);\n        }\n        else if (targetElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRightHover)) {\n            this.canDrag = false;\n            this.multipleSelectionEnabled();\n            this.showHideTaskBarEditingElements(targetElement, this.taskBarEditElement);\n            this.tapPointOnFocus = true;\n            this.taskBarEditAction = 'ConnectorPointRightDrag';\n            this.connectorSecondRecord = this.taskBarEditRecord;\n            this.taskBarEditingAction(e, false);\n        }\n        else {\n            if (this.tapPointOnFocus) {\n                this.showHideActivePredecessors(false);\n                this.showHideTaskBarEditingElements(element, this.taskBarEditElement);\n            }\n            this.updateTaskBarEditElement(e);\n        }\n    };\n    TaskbarEdit.prototype.showHideActivePredecessors = function (show) {\n        var ganttProp = this.taskBarEditRecord.ganttProperties;\n        var predecessors = ganttProp.predecessor;\n        var id = this.parent.viewType === 'ResourceView' ? ganttProp.taskId : ganttProp.rowUniqueID;\n        if (predecessors) {\n            for (var i = 0; i < predecessors.length; i++) {\n                var predecessor = predecessors[i];\n                if (id.toString() === predecessor.from || id.toString() === predecessor.to) {\n                    this.applyActiveColor(predecessor.from, predecessor.to, show);\n                }\n            }\n        }\n        var chartContent = this.parent.ganttChartModule.chartBodyContainer;\n        if (show) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.taskBarEditElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeChildTask]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([chartContent], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.touchMode]);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.taskBarEditElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeChildTask]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([chartContent], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.touchMode]);\n        }\n        this.touchEdit = show;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    TaskbarEdit.prototype.applyActiveColor = function (from, to, enable) {\n        var taskId = this.parent.viewType === 'ProjectView' ? this.taskBarEditRecord.ganttProperties.taskId.toString() :\n            this.taskBarEditRecord.ganttProperties.rowUniqueID.toString();\n        var ganttRecord = (taskId === from) ? this.parent.connectorLineModule.getRecordByID(to) :\n            this.parent.connectorLineModule.getRecordByID(from);\n        var $tr = this.parent.ganttChartModule.getChartRows()[this.parent.currentViewData.indexOf(ganttRecord)];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)($tr)) {\n            var $taskbar = $tr.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n            var $connectorElement = this.parent.element.querySelector('#ConnectorLineparent' + from + 'child' + to);\n            if (enable) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([$taskbar], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeConnectedTask]);\n                if ($connectorElement) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([$connectorElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeConnectedTask]);\n                }\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([$taskbar], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeConnectedTask]);\n                if ($connectorElement) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([$connectorElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeConnectedTask]);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.validateConnectorPoint = function () {\n        var parentRecord = this.taskBarEditRecord.ganttProperties;\n        var childRecord = this.connectorSecondRecord.ganttProperties;\n        var isValid = true;\n        var parentId = this.parent.viewType === 'ResourceView' ? parentRecord.taskId : parentRecord.rowUniqueID;\n        var childId = this.parent.viewType === 'ResourceView' ? childRecord.taskId : childRecord.rowUniqueID;\n        if (this.connectorSecondRecord.hasChildRecords) {\n            isValid = false;\n        }\n        else if (childRecord.predecessor) {\n            for (var i = 0; i < childRecord.predecessor.length; i++) {\n                var predecessor = childRecord.predecessor[i];\n                if (predecessor.from === parentId.toString() &&\n                    predecessor.to === childId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.connectorSecondRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n                else if (predecessor.from === childId.toString() &&\n                    predecessor.to === parentId.toString()) {\n                    this.parent.connectorLineEditModule.childRecord = this.taskBarEditRecord;\n                    this.parent.connectorLineEditModule.predecessorIndex = i;\n                    this.parent.connectorLineEditModule.renderPredecessorDeleteConfirmDialog();\n                    isValid = false;\n                    break;\n                }\n            }\n        }\n        return isValid;\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.mouseLeaveHandler = function (e) {\n        if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n            this.taskBarEditAction === 'ProgressResizing' || this.taskBarEditAction === 'LeftResizing' ||\n            this.taskBarEditAction === 'RightResizing') {\n            this.dragMouseLeave = false;\n        }\n        else {\n            this.dragMouseLeave = true;\n        }\n    };\n    /**\n     * To update taskbar edited elements on mouse down action.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {\n        var target = this.getElementByPosition(e);\n        var cloneTaskBar;\n        var element;\n        if (target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentRightResizer) || target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMainContainer)\n            || target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentTaskBar)) {\n            element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMainContainer);\n        }\n        else if (target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMilestone)) {\n            element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMilestone);\n        }\n        else {\n            element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element) && !target.classList.contains('e-connectorpoint-left') &&\n                !target.classList.contains('e-connectorpoint-right')) {\n                var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRecord.ganttProperties.segments) && currentRecord.ganttProperties.segments.length > 0) {\n                    if (target.classList.contains('e-progressbar-handler-after')) {\n                        for (var i = 0; i < currentRecord.ganttProperties.segments.length; i++) {\n                            if (currentRecord.ganttProperties.segments[i].showProgress) {\n                                element = element.querySelectorAll('.e-segmented-taskbar')[i];\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childTaskBarInnerDiv);\n                    }\n                }\n            }\n        }\n        if (this.parent.editSettings.allowTaskbarEditing && element) {\n            this.showHideTaskBarEditingElements(element, this.editElement);\n            this.editElement = element;\n            this.realTaskbarElement = this.editElement;\n            var index = this.editElement.getAttribute('data-segment-index');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n                this.segmentIndex = Number(index);\n            }\n            else {\n                this.segmentIndex = -1;\n            }\n            this.taskBarEditRecord = this.parent.ganttChartModule.getRecordByTaskBar(this.editElement);\n            if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {\n                this.taskBarEditAction = this.getTaskBarAction(e);\n                var index_1 = this.editElement.getAttribute('data-segment-index');\n                var currentRecord = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                var ganttprop = currentRecord.ganttProperties;\n                var parentleft = this.editElement.parentElement.offsetLeft;\n                this.currentData = currentRecord;\n                var resizeElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { styles: 'height:100%;border-style:dashed;border-bottom:none;border-top:none;border-width:1px;position:absolute;z-index:10000' });\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([resizeElement], 'e-taskbar-resize-div');\n                resizeElement.style.setProperty('width', ganttprop.width + 'px');\n                var currentindex = this.editElement.getAttribute('data-segment-index');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttprop.segments) && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                    resizeElement.style.setProperty('left', ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttprop.segments) ? parentleft + 'px' : (ganttprop.left) + 'px')));\n                }\n                else {\n                    resizeElement.style.setProperty('left', (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttprop.segments) && ganttprop.segments.length > 1) ? parentleft + ganttprop.segments[Number(currentindex)].left + 'px' : (ganttprop.left) + 'px')));\n                }\n                var resizeTable = this.parent.createElement('table');\n                var resizetableBody = this.parent.createElement('tbody');\n                resizetableBody.appendChild(resizeElement);\n                resizeTable.appendChild(resizetableBody);\n                var Check = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-clone-taskbar');\n                var createTable = null;\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index_1) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index_1) ? Number(index_1) === 0 : false) {\n                    cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n                }\n                else {\n                    if (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' &&\n                        this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        cloneTaskBar = this.editElement.parentElement.cloneNode(true);\n                    }\n                    else {\n                        cloneTaskBar = this.editElement.cloneNode(true);\n                    }\n                }\n                if (!Check) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([cloneTaskBar], 'e-clone-taskbar');\n                    cloneTaskBar.style.setProperty('position', 'absolute');\n                    if (currentRecord.hasChildRecords && !currentRecord.ganttProperties.isAutoSchedule) {\n                        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n                        var taskbarPosition = this.parent.getOffsetRect(this.editElement);\n                        if (this.editElement.classList.contains('e-manualparent-main-container')) {\n                            cloneTaskBar.style.setProperty('left', (currentRecord.ganttProperties.left - currentRecord.ganttProperties.autoLeft) + 'px');\n                        }\n                        else {\n                            cloneTaskBar.style.setProperty(this.parent.enableRtl ?\n                                'right' : 'left', Math.abs(taskbarPosition.left - containerPosition.left + Math.abs(this.parent.ganttChartModule.scrollElement.scrollLeft)) + 'px');\n                        }\n                    }\n                    cloneTaskBar.style.setProperty('top', 0 + 'px');\n                    createTable = this.parent.createElement('table');\n                    var tableBody = this.parent.createElement('tbody');\n                    tableBody.appendChild(cloneTaskBar);\n                    createTable.appendChild(tableBody);\n                }\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index_1) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index_1) ? Number(index_1) === 0 : false) {\n                    var segmentedTasks = cloneTaskBar.getElementsByClassName('e-segmented-taskbar');\n                    this.cloneTaskbarElement = segmentedTasks[Number(index_1)];\n                }\n                else {\n                    this.cloneTaskbarElement = cloneTaskBar;\n                }\n                this.taskBarEditElement = this.cloneTaskbarElement;\n                this.taskbarElement = createTable;\n                this.taskbarResizer = resizeTable;\n                this.currentIndex = index_1;\n                this.roundOffDuration = true;\n                if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') &&\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.dependency)) {\n                    this.taskBarEditAction = null;\n                }\n                this.updateMouseDownProperties(e);\n                if (this.parent.viewType === 'ResourceView' || this.parent.viewType === 'ProjectView') {\n                    if (this.taskBarEditRecord.level === 0) {\n                        return;\n                    }\n                    else if (this.parent.enableMultiTaskbar) {\n                        var parentRecord = this.parent.getTaskByUniqueID(this.taskBarEditRecord.parentItem.uniqueID);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentRecord) && !parentRecord.expanded) {\n                            this.prevZIndex = (this.taskBarEditElement).style.zIndex;\n                            (this.taskBarEditElement).style.zIndex = '1000';\n                            if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')) {\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (this.taskBarEditElement) {\n                    this.showHideTaskBarEditingElements(element, this.editElement);\n                }\n                this.initPublicProp();\n            }\n            else {\n                this.showHideTaskBarEditingElements(element, this.editElement);\n            }\n        }\n    };\n    /**\n     * To show/hide taskbar editing elements.\n     *\n     * @param {Element} element .\n     * @param {Element} secondElement .\n     * @param {boolean} fadeConnectorLine .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.showHideTaskBarEditingElements = function (element, secondElement, fadeConnectorLine) {\n        secondElement = secondElement ? secondElement : this.editElement;\n        var isShowProgressResizer = this.parent.taskFields.progress ? true : false;\n        var isShowConnectorPoints = true;\n        if (this.parent.readOnly) {\n            return;\n        }\n        var record = element ? this.parent.ganttChartModule.getRecordByTaskBar(element) :\n            secondElement ? this.parent.ganttChartModule.getRecordByTaskBar(secondElement) : null;\n        if (this.parent.enableMultiTaskbar && element) {\n            var parentRecord = this.parent.getParentTask(record.parentItem);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentRecord)) {\n                if (!parentRecord.expanded) {\n                    isShowConnectorPoints = false;\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.collapseMultiTaskBar]);\n                }\n            }\n        }\n        if (element) {\n            if (element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarLeftResizer)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarLeftResizer)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.leftResizeGripper]);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarRightResizer)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.rightResizeGripper]);\n                if (isShowProgressResizer) {\n                    var progressElement = (record && record.ganttProperties.segments &&\n                        record.ganttProperties.segments.length > 0) ?\n                        this.parent.getRowByIndex(this.parent.currentViewData.indexOf(record)).\n                            querySelectorAll('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer)[0] :\n                        element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(progressElement)) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([progressElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.progressResizeGripper]);\n                        progressElement.style.top = '3px';\n                    }\n                }\n            }\n            else if (this.parent.isAdaptive && isShowProgressResizer) {\n                var record_1 = this.parent.ganttChartModule.getRecordByTaskBar(element);\n                if (record_1.hasChildRecords) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeParentTask]);\n                }\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineContainer), [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineZIndex]);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.dependency)\n                && (element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)\n                    || element.parentElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft))\n                && isShowConnectorPoints) {\n                var connectorElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)) ?\n                    element : element.parentElement;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft))) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeftHover]);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight))) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRightHover]);\n                }\n            }\n        }\n        else if (!fadeConnectorLine) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineContainer), [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineZIndex]);\n        }\n        if (secondElement && element !== secondElement) {\n            if (secondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarLeftResizer)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([secondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarLeftResizer)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.leftResizeGripper]);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([secondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarRightResizer)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.rightResizeGripper]);\n                var progressElement = (record && record.ganttProperties.segments && record.ganttProperties.segments.length > 0) ?\n                    this.parent.getRowByIndex(this.parent.currentViewData.indexOf(record)) : secondElement;\n                if (progressElement && progressElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([progressElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.progressResizeGripper]);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.dependency)\n                && (secondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)\n                    || secondElement.parentElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft))) {\n                var connectorElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(secondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)) ?\n                    secondElement : secondElement.parentElement;\n                var leftConnector = connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft);\n                var rightConnector = connectorElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight);\n                if (leftConnector) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([leftConnector], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeftHover]);\n                }\n                if (rightConnector) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([rightConnector], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRightHover]);\n                }\n            }\n            else if (this.parent.isAdaptive) {\n                var record_2 = this.parent.ganttChartModule.getRecordByTaskBar(secondElement);\n                if (record_2 && record_2.hasChildRecords) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([secondElement], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.activeParentTask]);\n                }\n            }\n            this.editElement = null;\n        }\n    };\n    /**\n     * To get taskbar edit actions.\n     *\n     * @param {PointerEvent} e .\n     * @returns {string} .\n     * @private\n     */\n    TaskbarEdit.prototype.getTaskBarAction = function (e) {\n        var mouseDownElement = this.getElementByPosition(e);\n        var data = this.taskBarEditRecord;\n        var action = '';\n        if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarLeftResizer)) {\n            action = 'LeftResizing';\n        }\n        else if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarRightResizer)) {\n            action = 'RightResizing';\n        }\n        else if ((mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer) ||\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(mouseDownElement, '.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer)) && (this.parent.taskFields.progress)) {\n            action = 'ProgressResizing';\n        }\n        else if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)) {\n            action = 'ConnectorPointLeftDrag';\n        }\n        else if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight)) {\n            action = 'ConnectorPointRightDrag';\n        }\n        else if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentRightResizer)) {\n            action = 'ParentResizing';\n        }\n        else if (mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentTaskBar) ||\n            mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMainContainer) ||\n            mouseDownElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentMilestone)) {\n            action = 'ManualParentDrag';\n        }\n        else if (data) {\n            action = data.hasChildRecords ? data[this.parent.taskFields.manual] ? '' : 'ParentDrag'\n                : data.ganttProperties.isMilestone ? 'MilestoneDrag' : 'ChildDrag';\n        }\n        return action;\n    };\n    /**\n     * To update property while perform mouse down.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseDownProperties = function (event) {\n        var e = this.getCoordinate(event);\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            e.pageX = e.pageX / zoom1;\n            e.pageY = e.pageY / zoom1;\n        }\n        if (e.pageX || e.pageY) {\n            var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n            if (this.parent.enableRtl) {\n                this.mouseDownX = Math.abs(e.pageX - (containerPosition.left +\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n            }\n            else {\n                this.mouseDownX = (e.pageX - containerPosition.left) +\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n            this.tooltipPositionX = this.mouseDownX;\n            this.mouseDownY = this.dragMoveY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag' || this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            this.fromPredecessorText = this.taskBarEditAction === 'ConnectorPointLeftDrag' ? 'start' : 'finish';\n            this.parent.connectorLineModule.tooltipTable.innerHTML = '';\n            this.parent.connectorLineModule.tooltipTable.appendChild(this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.taskBarEditRecord.ganttProperties.taskName, this.fromPredecessorText, '', ''));\n        }\n    };\n    TaskbarEdit.prototype.isMouseDragCheck = function () {\n        if (!this.isMouseDragged && this.taskBarEditAction && ((this.mouseDownX !== this.mouseMoveX) &&\n            ((this.mouseDownX + 3) < this.mouseMoveX || (this.mouseDownX - 3) > this.mouseMoveX)\n            || (this.mouseDownY !== this.mouseMoveY) &&\n                ((this.mouseDownY + 3) < this.mouseMoveY || (this.mouseDownY - 3) > this.mouseMoveY))) {\n            this.isMouseDragged = true;\n            this.parent.initiateEditAction(true);\n            var item = this.taskBarEditRecord.ganttProperties;\n            this.previousItem = this.parent.timelineModule.extendFunction(item, this.previousItemProperty);\n            if (this.taskBarEditAction !== 'ConnectorPointLeftDrag' &&\n                this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n                !(this.parent.viewType === 'ResourceView' && this.taskBarEditAction === 'ParentDrag')) {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            this.taskBarEditElement.setAttribute('aria-grabbed', 'true');\n        }\n    };\n    /* eslint-disable-next-line */\n    TaskbarEdit.prototype.removeFirstBorder = function (element) {\n        var canremove = this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment';\n        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&\n            (element.getAttribute('aria-rowindex') - 1 !== 0 || canremove)) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n    };\n    TaskbarEdit.prototype.removeLastBorder = function (element) {\n        var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader')\n            || element.classList.contains('e-detailrow'));\n        var islastRowIndex;\n        if (this.parent.enableVirtualization) {\n            islastRowIndex = element && !isEmptyRow &&\n                this.parent.treeGrid.getRows()[this.parent.treeGrid.getCurrentViewRecords().length - 1].getAttribute('data-uid') !==\n                    element.getAttribute('data-uid');\n        }\n        else {\n            islastRowIndex = element && !isEmptyRow &&\n                this.parent.treeGrid.getRowByIndex(this.parent.treeGrid.getCurrentViewRecords().length - 1).getAttribute('data-uid') !==\n                    element.getAttribute('data-uid');\n        }\n        var canremove = islastRowIndex || this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment';\n        if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {\n            this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();\n        }\n    };\n    TaskbarEdit.prototype.removetopOrBottomBorder = function () {\n        var border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n        if (border.length) {\n            this.addRemoveClasses(border, false, 'e-dropbottom');\n            this.addRemoveClasses(border, false, 'e-droptop');\n        }\n    };\n    TaskbarEdit.prototype.topOrBottomBorder = function (target) {\n        var rowElement;\n        if (this.parent.enableVirtualization) {\n            var gridElement = this.parent.treeGrid.getRows().filter(function (data) {\n                return parseInt(data.getAttribute('aria-rowindex'), 10) - 1 === parseInt(target.getAttribute('aria-rowindex'), 10) - 1;\n            })[0];\n            var index = this.parent.treeGrid.getRows().indexOf(gridElement);\n            rowElement = this.parent.getRowByIndex(index).children;\n        }\n        else {\n            rowElement = this.parent.getRowByIndex(parseInt(target.getAttribute('aria-rowindex'), 10) - 1).children;\n        }\n        if (rowElement) {\n            if (this.parent.rowDragAndDropModule['dropPosition'] === 'above') {\n                this.addRemoveClasses(rowElement, true, 'e-droptop');\n                if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {\n                    this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();\n                }\n            }\n            if (this.parent.rowDragAndDropModule['dropPosition'] === 'below') {\n                this.addRemoveClasses(rowElement, true, 'e-dropbottom');\n            }\n        }\n    };\n    TaskbarEdit.prototype.removeChildBorder = function () {\n        var borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n        if (borderElem.length > 0) {\n            this.addRemoveClasses(borderElem, false, 'e-childborder');\n        }\n    };\n    TaskbarEdit.prototype.addRemoveClasses = function (cells, add, className) {\n        for (var i = 0, len = cells.length; i < len; i++) {\n            if (add) {\n                cells[parseInt(i.toString(), 10)].classList.add(className);\n            }\n            else {\n                cells[parseInt(i.toString(), 10)].classList.remove(className);\n            }\n        }\n    };\n    TaskbarEdit.prototype.addErrorElem = function () {\n        var dragelem = document.getElementsByClassName('e-clone-taskbar')[0];\n        var errorelem = document.querySelectorAll('.e-errorelem').length;\n        if (!errorelem) {\n            var ele = document.createElement('div');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(ele, ['e-errorcontainer'], []);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(ele, ['e-icons', 'e-errorelem'], []);\n            if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n                ele.style.paddingTop = this.parent.taskbarHeight + 'px';\n            }\n            dragelem.appendChild(ele);\n        }\n    };\n    TaskbarEdit.prototype.removeErrorElem = function () {\n        var errorelem = document.querySelector('.e-errorelem');\n        if (errorelem) {\n            errorelem.remove();\n        }\n    };\n    TaskbarEdit.prototype.ensurePosition = function (draggedRecords, currentRecord) {\n        var _this = this;\n        draggedRecords.filter(function (draggedRecord) {\n            if (draggedRecord.hasChildRecords && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(draggedRecord.childRecords)) {\n                var valid = draggedRecord.childRecords.indexOf(currentRecord);\n                if (valid === -1) {\n                    _this.ensurePosition(draggedRecord.childRecords, currentRecord);\n                }\n                else {\n                    _this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                    _this.addErrorElem();\n                    return;\n                }\n            }\n        });\n    };\n    /**\n     * To handle mouse move action in chart\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseMoveAction = function (event) {\n        var _this = this;\n        if (this.parent.isAdaptive) {\n            if (!this.canDrag) {\n                return;\n            }\n            else {\n                this.multipleSelectionEnabled();\n            }\n        }\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        if (this.parent.enableRtl) {\n            this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left +\n                Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n        }\n        else {\n            this.mouseMoveX = e.pageX - containerPosition.left +\n                this.parent.ganttChartModule.scrollObject.previousScroll.left;\n        }\n        this.mouseMoveY = e.pageY - containerPosition.top +\n            this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.dragMouseLeave = false;\n        var cancel = false;\n        if (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag') {\n            var ganttRowElement = void 0;\n            if (this.parent.enableVirtualization) {\n                var index = this.parent.currentViewData.indexOf(this.taskBarEditRecord);\n                ganttRowElement = this.parent.getRowByIndex(index);\n            }\n            else {\n                ganttRowElement = this.parent.getRowByIndex(this.taskBarEditRecord.index);\n            }\n            var eventArgs = {\n                cancel: cancel,\n                cloneElement: this.taskbarElement,\n                data: this.taskBarEditRecord,\n                target: event.target,\n                rows: ganttRowElement\n            };\n            this.parent.trigger('rowDrag', eventArgs);\n            cancel = eventArgs['cancel'];\n        }\n        if (!cancel) {\n            this.isMouseDragCheck();\n        }\n        if (this.isMouseDragged && this.taskBarEditAction) {\n            event.preventDefault();\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskbarElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editElement) && (this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n                this.taskBarEditAction !== 'ConnectorPointLeftDrag') && !(this.parent.viewType === 'ResourceView' && this.currentData.hasChildRecords)) {\n                var currentElement = this.editElement.parentElement;\n                if (this.parent.enableTimelineVirtualization &&\n                    this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                    currentElement.style.setProperty('position', 'relative');\n                }\n                else {\n                    currentElement.style.setProperty('position', 'absolute');\n                }\n                if ((this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'LeftResizing') &&\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentIndex) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentIndex) ? Number(this.currentIndex) === 0 : false) {\n                    this.taskbarElement.childNodes[0].childNodes[0].style.setProperty('top', currentElement.parentElement.offsetTop + 'px');\n                    if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n                    }\n                    else {\n                        currentElement.parentElement.appendChild(this.taskbarElement);\n                    }\n                }\n                else {\n                    if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                        this.parent.chartPane.getElementsByClassName('e-gantt-chart')[0].appendChild(this.taskbarElement);\n                    }\n                    else {\n                        currentElement.appendChild(this.taskbarElement);\n                    }\n                }\n                if (this.taskBarEditAction !== 'ProgressResizing') {\n                    if (this.parent.enableTimelineVirtualization &&\n                        this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                        var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-scroll-container');\n                        rootElement[0].appendChild(this.taskbarResizer);\n                    }\n                    else {\n                        var rootElement = this.parent.ganttChartModule.chartBodyContainer.querySelectorAll('.e-chart-rows-container');\n                        rootElement[0].appendChild(this.taskbarResizer);\n                    }\n                }\n            }\n            if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n                this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag')) {\n                var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n                var left = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.body.className) && document.body.className.includes('e-bigger')) ? 12 : 0;\n                var pointerLeft = (3 + this.parent.chartRowsModule.connectorPointWidth + left);\n                var xValue = void 0;\n                if (this.parent.enableRtl) {\n                    xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n                }\n                else {\n                    xValue = Math.abs(taskbarPosition.left - pointerLeft - 1);\n                }\n                if (!this.isClonedElement && !this.parent.enableRtl) {\n                    xValue = xValue - this.parent.ganttChartModule.scrollElement.scrollLeft;\n                    this.isClonedElement = true;\n                }\n                var rowPositionHeight = 0;\n                this.parent.rowDragAndDropModule['dropPosition'] = undefined;\n                var target = void 0;\n                var yValue = void 0;\n                if (event.type === 'touchmove' || event.type === 'touchstart' || event.type === 'touchend') {\n                    yValue = event['changedTouches'][0].pageY;\n                }\n                else {\n                    yValue = event.y;\n                }\n                if (this.parent.enableRtl) {\n                    target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth, yValue);\n                    if (target.classList.contains('e-taskbar-resize-div')) {\n                        target = document.elementFromPoint(this.parent.ganttChartModule.chartBodyContainer.offsetWidth - target['offsetWidth'], yValue);\n                    }\n                }\n                else {\n                    target = document.elementFromPoint(xValue, yValue);\n                }\n                var draggedTreeGridRowElement = void 0;\n                if (this.parent.enableVirtualization) {\n                    if (!this.draggedTreeGridRowElement) {\n                        var currentElement = this.editElement.parentElement;\n                        draggedTreeGridRowElement = currentElement.parentElement;\n                        this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n                        this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                    }\n                }\n                else {\n                    draggedTreeGridRowElement = this.parent.treeGrid.getRows()[this.parent.flatData.indexOf(this.taskBarEditRecord)];\n                    this.draggedTreeGridRowElement = draggedTreeGridRowElement;\n                    if (this.parent.enableMultiTaskbar) {\n                        if (this.taskBarEditRecord.parentItem &&\n                            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId))) {\n                            this.draggedTreeGridRowHeight = this.parent.getRowByID(this.taskBarEditRecord.parentItem.taskId).offsetHeight;\n                            if (this.parent.viewType === 'ProjectView' && this.draggedTreeGridRowHeight === 0) {\n                                var nestedParent = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n                                while (nestedParent.parentItem) {\n                                    nestedParent = this.parent.getRecordByID(nestedParent.parentItem.taskId);\n                                    this.draggedTreeGridRowHeight = this.parent.getRowByID(nestedParent['TaskID']).offsetHeight;\n                                }\n                            }\n                        }\n                        else {\n                            var currentElement = this.editElement.parentElement;\n                            this.draggedTreeGridRowElement = currentElement.parentElement;\n                            this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                        }\n                    }\n                    else {\n                        this.draggedTreeGridRowHeight = this.draggedTreeGridRowElement.offsetHeight;\n                    }\n                }\n                var chartRowElement_1;\n                if (target) {\n                    chartRowElement_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'tr.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.chartRow);\n                }\n                if (chartRowElement_1) {\n                    var droppedTreeGridRowElement = void 0;\n                    if (this.parent.enableVirtualization) {\n                        droppedTreeGridRowElement = this.parent.treeGrid.getRows().filter(function (data) {\n                            return parseInt(data.getAttribute('aria-rowindex'), 10) - 1 === parseInt(chartRowElement_1.getAttribute('aria-rowindex'), 10) - 1;\n                        })[0];\n                    }\n                    else {\n                        droppedTreeGridRowElement = this.parent.treeGrid.getRows()[parseInt(chartRowElement_1.getAttribute('aria-rowindex'), 10) - 1];\n                    }\n                    this.removeFirstBorder(droppedTreeGridRowElement);\n                    this.removeLastBorder(droppedTreeGridRowElement);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(droppedTreeGridRowElement) && droppedTreeGridRowElement.getAttribute('data-uid') === this.draggedTreeGridRowElement.getAttribute('data-uid')\n                        || !(0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, 'e-chart-rows-container')) {\n                        this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                        this.addErrorElem();\n                    }\n                    var tObj = this.parent;\n                    var rowTop = 0;\n                    var toolHeight = tObj.toolbarModule ?\n                        this.parent.toolbarModule.element.offsetHeight : 0;\n                    var positionOffSet = this.parent.getOffsetRect(tObj.element);\n                    var contentHeight = tObj.treeGrid.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n                    var scrollTop = tObj.treeGrid.getContent().firstElementChild.scrollTop;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(droppedTreeGridRowElement)) {\n                        rowPositionHeight = droppedTreeGridRowElement.offsetTop - scrollTop;\n                    }\n                    if (this.parent.enableVirtualization) {\n                        rowTop = this.parent.getOffsetRect(droppedTreeGridRowElement).top;\n                    }\n                    else {\n                        rowTop = rowPositionHeight + contentHeight;\n                    }\n                    var rowBottom = rowTop + this.draggedTreeGridRowHeight;\n                    var difference = rowBottom - rowTop;\n                    var divide = difference / 3;\n                    var topRowSegment = rowTop + divide;\n                    var middleRowSegment = topRowSegment + divide;\n                    var bottomRowSegment = middleRowSegment + divide;\n                    var posy = (event.type === 'mousemove') ? event.pageY : ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(event['changedTouches'])) ? event['changedTouches'][0].pageY : null);\n                    var isTopSegment = posy <= topRowSegment;\n                    var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);\n                    var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);\n                    if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n                        var rowElement = void 0;\n                        if (this.parent.enableVirtualization) {\n                            var index = this.parent.treeGrid.getRows().indexOf(droppedTreeGridRowElement);\n                            rowElement = this.parent.getRowByIndex(index);\n                        }\n                        else {\n                            rowElement = this.parent.getRowByIndex(parseInt(droppedTreeGridRowElement.getAttribute('aria-rowindex'), 10) - 1);\n                        }\n                        var rowIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('rowIndex', rowElement);\n                        var droppedTreeGridRecord = this.parent.flatData[rowIndex];\n                        var isValid = true;\n                        if (this.parent.viewType === 'ResourceView' && !this.taskBarEditRecord.hasChildRecords && !droppedTreeGridRecord.hasChildRecords &&\n                            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(droppedTreeGridRecord.parentItem) &&\n                            this.taskBarEditRecord.parentItem.taskId === droppedTreeGridRecord.parentItem.taskId) {\n                            isValid = false;\n                        }\n                        if (droppedTreeGridRecord) {\n                            this.ensurePosition([this.taskBarEditRecord], droppedTreeGridRecord);\n                        }\n                        if (isValid) {\n                            if (isTopSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'above';\n                                this.removeChildBorder();\n                                this.removeErrorElem();\n                                this.removetopOrBottomBorder();\n                                this.topOrBottomBorder(rowElement);\n                            }\n                            if (isMiddleRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'child';\n                                this.removetopOrBottomBorder();\n                                this.addRemoveClasses(rowElement.children, true, 'e-childborder');\n                            }\n                            if (isBottomRowSegment && this.parent.rowDragAndDropModule['dropPosition'] !== 'Invalid') {\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'below';\n                                this.removetopOrBottomBorder();\n                                this.removeErrorElem();\n                                this.removeChildBorder();\n                                this.removeFirstBorder(droppedTreeGridRowElement);\n                                this.topOrBottomBorder(droppedTreeGridRowElement);\n                            }\n                        }\n                    }\n                }\n            }\n            var args_1 = {\n                cancel: false,\n                requestType: 'taskbarediting',\n                taskBarEditAction: this.taskBarEditAction,\n                data: this.taskBarEditRecord\n            };\n            if (this.segmentIndex !== -1) {\n                args_1.requestType = 'mergeSegment';\n            }\n            this.parent.trigger('actionBegin', args_1, function (arg) {\n                if (args_1.taskBarEditAction === 'ConnectorPointRightDrag' || args_1.taskBarEditAction === 'ConnectorPointLeftDrag'\n                    || args_1.taskBarEditAction === 'LeftResizing' || args_1.taskBarEditAction === 'RightResizing'\n                    || args_1.taskBarEditAction === 'ProgressResizing' || args_1.taskBarEditAction === 'ChildDrag' || args_1.taskBarEditAction === 'ParentDrag' ||\n                    args_1.taskBarEditAction === 'MilestoneDrag' || args_1.taskBarEditAction === 'ManualParentDrag' || args_1.taskBarEditAction === 'ParentResizing') {\n                    _this.parent.showIndicator = false;\n                    if (_this.parent.undoRedoModule && _this.parent['isUndoRedoItemPresent']('Edit')) {\n                        if (_this.parent.undoRedoModule['redoEnabled']) {\n                            _this.parent.undoRedoModule['disableRedo']();\n                        }\n                        var action = {};\n                        if (_this.parent.undoRedoModule['getUndoCollection'].length === 0) {\n                            _this.isDragged = true;\n                            action['modifiedRecords'] = [];\n                            action['action'] = args_1.taskBarEditAction;\n                            _this.parent.undoRedoModule['createUndoCollection']();\n                            _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n                            _this.parent.editModule['createArray'] = false;\n                            _this.parent.undoRedoModule['changedRecords'] = [];\n                        }\n                        else if (_this.parent.editModule['createArray']) {\n                            _this.isDragged = true;\n                            action['modifiedRecords'] = [];\n                            action['action'] = args_1.taskBarEditAction;\n                            _this.parent.undoRedoModule['createUndoCollection']();\n                            _this.parent.undoRedoModule['getUndoCollection'][_this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n                            _this.parent.editModule['createArray'] = false;\n                            _this.parent.undoRedoModule['changedRecords'] = [];\n                        }\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.parent.loadingIndicator) && _this.parent.loadingIndicator.indicatorType === 'Shimmer' && _this.parent.showIndicator) {\n                    _this.parent.showMaskRow();\n                }\n                else if (_this.parent.showIndicator) {\n                    _this.parent.showSpinner();\n                }\n                if (arg.cancel === false) {\n                    _this.taskBarEditingAction(event, false);\n                }\n            });\n        }\n        else if (!this.parent.isAdaptive && !this.taskBarEditAction) {\n            this.updateTaskBarEditElement(event);\n        }\n    };\n    /**\n     * Method to update taskbar editing action on mous move.\n     *\n     * @param {PointerEvent} e .\n     * @param {boolean} isMouseClick .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {\n        var _this = this;\n        var args = {};\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        if (this.taskBarEditRecord !== null) {\n            args.editingFields = this.taskBarEditRecord.ganttProperties;\n            args.data = this.taskBarEditRecord;\n            if (this.parent.viewType === 'ResourceView' && args.data.level === 0) {\n                return;\n            }\n            args.recordIndex = recordIndex;\n            args.taskBarEditAction = this.taskBarEditAction;\n            args.roundOffDuration = this.roundOffDuration;\n            args.cancel = false;\n            args.previousData = this.previousItem;\n            args.segmentIndex = this.segmentIndex;\n            this.roundOffDuration = args.roundOffDuration;\n            this.targetElement = args.target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-gantt-child-taskbar');\n            this.updateMouseMoveProperties(e);\n            if (!this.oldData) {\n                this.oldData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], [], [this.taskBarEditRecord], true)[0];\n            }\n            var segmentIndex = this.segmentIndex !== -1 ? this.segmentIndex : null;\n            if (this.taskBarEditAction === 'ProgressResizing') {\n                this.mainElement = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(this.taskBarEditElement, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n                if (this.taskBarEditRecord.ganttProperties.segments && this.taskBarEditRecord.ganttProperties.segments.length > 0) {\n                    segmentIndex = -1;\n                    for (var i = 0; i < this.taskBarEditRecord.ganttProperties.segments.length; i++) {\n                        var resizeGripper = document.getElementsByClassName('e-child-progress-resizer e-progress-resize-gripper')[0]['style'];\n                        var currentWidth = (this.parent.enableRtl ? parseInt(resizeGripper['right'], 10) - 8 : parseInt(resizeGripper['left'], 10) + 8);\n                        if (currentWidth < this.taskBarEditRecord.ganttProperties.segments[i].width && i === 0) {\n                            segmentIndex = i;\n                        }\n                        if (this.taskBarEditRecord.ganttProperties.segments[i + 1] &&\n                            currentWidth < this.taskBarEditRecord.ganttProperties.segments[i + 1].width +\n                                this.taskBarEditRecord.ganttProperties.segments[i + 1].left && currentWidth >\n                            this.taskBarEditRecord.ganttProperties.segments[i + 1].left) {\n                            segmentIndex = i + 1;\n                        }\n                    }\n                }\n                this.performProgressResize(e, segmentIndex);\n            }\n            else if (this.taskBarEditAction === 'LeftResizing') {\n                this.enableLeftResizing(e);\n            }\n            else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {\n                this.enableRightResizing(e);\n            }\n            else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' ||\n                this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') {\n                this.enableDragging(e);\n            }\n            else if (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                this.updateConnectorLineSecondProperties(e);\n                this.triggerDependencyEvent(e);\n                this.drawFalseLine();\n            }\n            if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction !== 'LeftResizing' && this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                var parentClientRect = this.parent.getOffsetRect(this.parent.chartPane);\n                var coordinates = this.getCoordinate(e);\n                var position = { top: coordinates.pageY, left: coordinates.pageX };\n                var pos = { left: Math.abs(position.left - parentClientRect.left), top: position.top - parentClientRect.top };\n                if (this.parent.viewType === 'ResourceView' && this.parent.enableMultiTaskbar) {\n                    var parentRecord = this.parent.getRecordByID(this.taskBarEditRecord.parentItem.taskId);\n                    if (!this.parent.allowTaskbarOverlap && this.taskBarEditRecord.parentItem && !parentRecord.expanded) {\n                        var reduceHeight = 0;\n                        if (parseInt(this.editElement['style'].marginTop, 10) > this.parent.rowHeight) {\n                            for (var i = 0; i < parentRecord.childRecords.length; i++) {\n                                if (parentRecord.childRecords[i].ganttProperties.taskId !==\n                                    this.taskBarEditRecord.ganttProperties.taskId) {\n                                    reduceHeight = reduceHeight + this.parent.rowHeight;\n                                }\n                                else {\n                                    break;\n                                }\n                            }\n                            pos.top = pos.top - reduceHeight;\n                        }\n                    }\n                }\n                this.topValue = pos.top;\n                var xValue = void 0;\n                if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n                    xValue = e['changedTouches'][0].pageX;\n                }\n                else {\n                    xValue = e.pageX;\n                }\n                if (this.parent.enableRtl) {\n                    this.leftValue = pos.left - Math.abs(xValue - (this.parent.getOffsetRect(this.taskBarEditElement).left)) -\n                        (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n                }\n                else {\n                    this.leftValue = pos.left - (xValue - this.parent.getOffsetRect(this.taskBarEditElement).left) +\n                        (this.previousLeftValue !== 0 ? xValue - this.previousLeftValue : 0);\n                }\n                if (this.previousLeftValue === 0) {\n                    if (!this.parent.enableRtl) {\n                        this.leftValue = this.leftValue - this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                    }\n                    else {\n                        this.leftValue = this.leftValue - (this.parent.ganttChartModule.scrollObject.previousScroll.left);\n                        if (this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n                            this.leftValue = this.leftValue - 60;\n                        }\n                    }\n                }\n                this.previousLeftValue = xValue;\n            }\n            else {\n                this.leftValue = this.taskBarEditRecord.ganttProperties.left;\n            }\n            this.currentSegmentIndex = segmentIndex;\n            this.setItemPosition();\n            this.updateEditedItem();\n            this.tooltipValue = (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') ? e['changedTouches'][0].pageX : e.pageX;\n            if ((!this.taskBarEditRecord.ganttProperties.segments || segmentIndex !== -1)) {\n                this.editTooltip.updateTooltip(segmentIndex);\n            }\n            if (isMouseClick) {\n                this.taskBarEditedAction(e);\n            }\n            this.parent.trigger('taskbarEditing', args, function (arg) {\n                if (arg.cancel && _this.taskBarEditRecord !== null) {\n                    _this.tapPointOnFocus = false;\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(_this.taskBarEditRecord.ganttProperties, arg.previousData);\n                }\n            });\n        }\n    };\n    /**\n     * To update property while perform mouse move.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {\n        var containerPosition = this.parent.getOffsetRect(this.parent.ganttChartModule.chartBodyContainer);\n        var e = this.getCoordinate(event);\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            e.pageX = e.pageX / zoom1;\n            e.pageY = e.pageY / zoom1;\n        }\n        if (e.pageX || e.pageY) {\n            if (this.parent.enableRtl) {\n                this.mouseMoveX = Math.abs(e.pageX - (containerPosition.left +\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left)));\n            }\n            else {\n                this.mouseMoveX = e.pageX - containerPosition.left +\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n            this.tooltipPositionX = this.mouseMoveX;\n            this.mouseMoveY = e.pageY - containerPosition.top +\n                this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        }\n        var isConnectorLineEdit = (this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') ?\n            true : false;\n        if (((this.taskBarEditRecord.ganttProperties.width > 3 || this.taskBarEditRecord.ganttProperties.isMilestone) && !(this.taskBarEditAction === 'ProgressResizing' &&\n            (this.taskBarEditRecord.ganttProperties.progress === 0 || this.taskBarEditRecord.ganttProperties.progress === 100))) ||\n            isConnectorLineEdit) {\n            var mouseX = 0;\n            if (this.parent.enableRtl) {\n                mouseX = Math.abs(Math.abs(this.mouseMoveX) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left) +\n                    containerPosition.left);\n            }\n            else {\n                mouseX = this.mouseMoveX - this.parent.ganttChartModule.scrollObject.previousScroll.left +\n                    containerPosition.left;\n            }\n            var mouseY = this.mouseMoveY - this.parent.ganttChartModule.scrollObject.previousScroll.top +\n                containerPosition.top;\n            if ((mouseX + 20) >\n                containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('right');\n            }\n            else if ((mouseX + 40) >\n                containerPosition.left + this.parent.ganttChartModule.chartBodyContainer.offsetWidth && this.parent.enableRtl &&\n                this.parent.ganttChartModule.scrollObject.previousScroll.left === 0) {\n                this.parent.ganttChartModule.scrollObject.previousScroll.left = -1;\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('right');\n            }\n            else if ((mouseX - 20) < containerPosition.left) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.left;\n                this.startScrollTimer('left');\n            }\n            else if (((mouseY + 80) >\n                containerPosition.top + this.parent.ganttChartModule.chartBodyContainer.offsetHeight)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('bottom');\n            }\n            else if (((mouseY - 20) < containerPosition.top)) {\n                this.timerCount = this.parent.ganttChartModule.scrollObject.previousScroll.top;\n                this.startScrollTimer('top');\n            }\n            else {\n                this.stopScrollTimer();\n            }\n        }\n        else {\n            this.stopScrollTimer();\n        }\n    };\n    /**\n     * To start the scroll timer.\n     *\n     * @param {string} direction .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.startScrollTimer = function (direction) {\n        var _this = this;\n        this.stopScrollTimer();\n        var leftSign = 0;\n        this.scrollTimer = window.setInterval(function () {\n            if (Math.sign(_this.timerCount) === -1) {\n                leftSign = -1;\n                _this.timerCount = Math.abs(_this.timerCount);\n            }\n            if (direction === 'right') {\n                var timelineWidth = _this.parent.enableTimelineVirtualization ?\n                    _this.parent.timelineModule.wholeTimelineWidth : _this.parent.timelineModule.totalTimelineWidth;\n                _this.timerCount = (_this.timerCount + 1) >= timelineWidth ?\n                    timelineWidth : (_this.timerCount + 1);\n            }\n            else if (direction === 'bottom') {\n                _this.timerCount = _this.timerCount + 1;\n            }\n            else {\n                _this.timerCount = (_this.timerCount - 1) < 0 ? 0 : (_this.timerCount - 1);\n            }\n            if (direction === 'bottom' || direction === 'top') {\n                _this.parent.ganttChartModule.scrollObject.setScrollTop(_this.timerCount);\n            }\n            else {\n                _this.parent.ganttChartModule.scrollObject.setScrollLeft(_this.timerCount, leftSign);\n            }\n            if (_this.taskBarEditAction === 'ConnectorPointLeftDrag'\n                || _this.taskBarEditAction === 'ConnectorPointRightDrag') {\n                _this.drawFalseLine();\n            }\n        }, 0);\n    };\n    /**\n     * To stop the scroll timer.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.stopScrollTimer = function () {\n        window.clearInterval(this.scrollTimer);\n        this.scrollTimer = null;\n    };\n    /**\n     * To update left and width while perform taskbar drag operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.enableDragging = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var timelineWidth = this.parent.enableTimelineVirtualization ?\n            this.parent.timelineModule.wholeTimelineWidth : this.parent.timelineModule.totalTimelineWidth;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') &&\n            !this.taskBarEditElement.classList.contains('e-segment-first')) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left - differenceWidth;\n            }\n            else {\n                differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                segment.left = segment.left + differenceWidth;\n            }\n            var previousSegment = segments[this.segmentIndex - 1];\n            var nextSegment = segments[this.segmentIndex + 1];\n            var left = void 0;\n            if (this.taskBarEditElement.classList.contains('e-segment-inprogress')) {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    ((segment.width + segment.left) > (nextSegment.left)) ? nextSegment.left - segment.width : segment.left;\n            }\n            else {\n                left = segment.left < (previousSegment.left + previousSegment.width) ? (previousSegment.left + previousSegment.width) :\n                    (item.left + segment.width + segment.left) >= timelineWidth ?\n                        (timelineWidth - segment.width) : segment.left;\n            }\n            segment.left = left;\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                differenceWidth = this.mouseDownX - this.mouseMoveX;\n                if (differenceWidth > 0) {\n                    this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                }\n            }\n            else {\n                differenceWidth = this.mouseMoveX - this.mouseDownX;\n                this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n            }\n            var left = item.left < 0 ? 0 : (item.left + item.width) >= timelineWidth ?\n                (timelineWidth - item.width) : item.left;\n            this.parent.setRecordValue('left', left, item, true);\n        }\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.validateProgressWidth = function (item, progressWidth, totalTaskWidth) {\n        var reduceWidth = 0;\n        if (this.currentSegmentIndex !== -1 && item.segments) {\n            var startIndex = this.currentSegmentIndex >= this.segmentIndex ? 0 : this.currentSegmentIndex !== 0 ?\n                this.currentSegmentIndex : -1;\n            var endIndex = this.currentSegmentIndex >= this.segmentIndex ? this.currentSegmentIndex : this.segmentIndex;\n            if (startIndex !== -1) {\n                for (var i = startIndex; i < endIndex; i++) {\n                    reduceWidth = (item.segments[i + 1].left) - (item.segments[i].left + item.segments[i].width);\n                    progressWidth = progressWidth - reduceWidth;\n                }\n            }\n        }\n        var totalWidth = 0;\n        if (item.segments && item.segments.length > 0) {\n            totalTaskWidth = this.splitTasksDuration(item.segments) * this.parent.perDayWidth;\n            totalWidth = item.segments.reduce(function (width, segment) {\n                return width + segment.width;\n            }, 0);\n            totalTaskWidth = totalWidth;\n        }\n        if (progressWidth > totalTaskWidth) {\n            progressWidth = totalTaskWidth;\n        }\n        return { progressWidth: progressWidth, totalTaskWidth: totalTaskWidth };\n    };\n    /**\n     * To update left and width while perform progress resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @param {number} segmentIndex .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.performProgressResize = function (e, segmentIndex) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var diffrenceWidth = 0;\n        var prevProgress = item.progressWidth;\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width)) && item.left > 0) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX >= (item.left + item.width)) {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n            }\n        }\n        else {\n            if (this.mouseMoveX > item.left &&\n                (this.mouseMoveX < (item.left + item.width))) {\n                diffrenceWidth = this.mouseMoveX - item.left;\n                this.parent.setRecordValue('progressWidth', diffrenceWidth, item, true);\n            }\n            else {\n                if (this.mouseMoveX <= item.left) {\n                    this.parent.setRecordValue('progressWidth', 0, item, true);\n                }\n                else {\n                    this.parent.setRecordValue('progressWidth', item.width, item, true);\n                }\n            }\n        }\n        var widthValue = item.progressWidth > item.width ?\n            item.width : item.progressWidth;\n        widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;\n        if (segmentIndex !== -1 || !segmentIndex) {\n            this.parent.setRecordValue('progressWidth', widthValue, item, true);\n        }\n        else {\n            this.parent.setRecordValue('progressWidth', prevProgress, item, true);\n        }\n        this.progressValue = widthValue;\n        var diff = item.width - item.progressWidth;\n        if (diff <= 4) {\n            this.progressBorderRadius = 4 - diff;\n        }\n        else {\n            this.progressBorderRadius = 0;\n        }\n    };\n    /**\n     * To update left and width while perform taskbar left resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableLeftResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n            this.enableSplitTaskLeftResize(item);\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    if (item.left > 0) {\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                    }\n                }\n                else {\n                    if (this.mouseMoveX > (item.left + item.width)) {\n                        differenceWidth = this.mouseDownX - this.mouseMoveX;\n                        this.parent.setRecordValue('left', this.previousItem.left - differenceWidth, item, true);\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX < (item.left + item.width)) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    if ((item.left) < (item.left + item.width) &&\n                        ((this.previousItem.left + differenceWidth) <= (this.previousItem.left + this.previousItem.width))) {\n                        this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                        this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                    }\n                }\n                else {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('left', this.previousItem.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', 3, item, true);\n                }\n            }\n            if (item.segments && item.segments.length === 1) {\n                item.segments[0].width = item.width;\n            }\n            this.updateEditPosition(e, item);\n            this.parent.setRecordValue('left', (this.previousItem.left + this.previousItem.width - item.width), item, true);\n        }\n    };\n    TaskbarEdit.prototype.enableSplitTaskLeftResize = function (item) {\n        var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n        var segment = segments[this.segmentIndex];\n        var differenceWidth = 0;\n        //when decrease the left and increase the width\n        if (this.mouseDownX > this.mouseMoveX) {\n            if (this.mouseMoveX < (item.left + segment.width + segment.left)) {\n                differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                    (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                this.previousMouseMove = this.mouseMoveX;\n                // when resize other than 0th segment\n                if (segment.left > 0) {\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = segment.width + differenceWidth;\n                    if (this.segmentIndex !== 0) {\n                        var previousSegment = segments[this.segmentIndex - 1];\n                        if ((item.left + segment.left) < (item.left + previousSegment.left + previousSegment.width)) {\n                            var difference = (item.left + previousSegment.left + previousSegment.width) - (item.left + segment.left);\n                            segment.width -= difference;\n                            segment.left = segment.left + difference;\n                        }\n                    }\n                }\n                else if (segment.left <= 0 && this.segmentIndex === 0) {\n                    this.parent.setRecordValue('left', item.left - differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width + differenceWidth, item, true);\n                    segment.width = segment.width + differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_1 = segments[i];\n                        segment_1.left = segment_1.left + differenceWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > (item.left + segment.width + segment.left)) {\n                    differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.left = segment.left - differenceWidth;\n                    segment.width = this.parent.perDayWidth;\n                }\n            }\n        }\n        else {\n            // when increase left value and decrease width of segment\n            if (this.mouseMoveX < (item.left + segment.width + segment.left - this.parent.perDayWidth)) {\n                differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                    (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                this.previousMouseMove = this.mouseMoveX;\n                // when decrease the first segment width\n                if (this.segmentIndex === 0 && segment.left <= 0) {\n                    this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                    this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                    segment.width = segment.width - differenceWidth;\n                    for (var i = 1; i < item.segments.length; i++) {\n                        var segment_2 = segments[i];\n                        segment_2.left = segment_2.left - differenceWidth;\n                    }\n                    // when decrease remaining segments\n                }\n                else if ((segment.left) < (segment.left + segment.width) &&\n                    ((segment.left + differenceWidth) <= (segment.left + segment.width))) {\n                    segment.left = segment.left + differenceWidth;\n                    segment.width = segment.width - differenceWidth;\n                }\n                // when mouse move goes beyond one day width of task bar.\n            }\n            else {\n                if (this.mouseMoveX < (item.left + segment.left + segment.width)) {\n                    if (segment.width > this.parent.perDayWidth) {\n                        differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                            (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                        this.previousMouseMove = this.mouseMoveX;\n                        var singleDayDifference = (segment.width - differenceWidth) < this.parent.perDayWidth ?\n                            this.parent.perDayWidth > segment.width ?\n                                this.parent.perDayWidth - segment.width : segment.width - this.parent.perDayWidth : 0;\n                        differenceWidth -= singleDayDifference;\n                        if (this.segmentIndex === 0) {\n                            this.parent.setRecordValue('width', item.width - differenceWidth, item, true);\n                            this.parent.setRecordValue('left', item.left + differenceWidth, item, true);\n                            segment.width = segment.width - differenceWidth;\n                            for (var i = 1; i < item.segments.length; i++) {\n                                var segment_3 = segments[i];\n                                segment_3.left = segment_3.left - differenceWidth;\n                            }\n                        }\n                        else {\n                            segment.left = segment.left + differenceWidth;\n                            segment.width = segment.width - differenceWidth;\n                        }\n                    }\n                }\n            }\n        }\n        this.parent.setRecordValue('segments', segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * Update mouse position and edited item value\n     *\n     * @param {PointerEvent} e .\n     * @param {ITaskData} item .\n     * @returns {void} .\n     */\n    TaskbarEdit.prototype.updateEditPosition = function (e, item) {\n        this.updateIsMilestone(item);\n        this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(item.width, item.progress), item, true);\n    };\n    /**\n     *  To update milestone property.\n     *\n     * @param {ITaskData} item .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateIsMilestone = function (item) {\n        if (item.width <= 3) {\n            this.parent.setRecordValue('width', 3, item, true);\n            this.parent.setRecordValue('isMilestone', true, item, true);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n                this.parent.setRecordValue(this.parent.taskFields.milestone, true, this.taskBarEditRecord, true);\n            }\n        }\n        else {\n            this.parent.setRecordValue('width', item.width, item, true);\n            this.parent.setRecordValue('isMilestone', false, item, true);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditRecord[this.parent.taskFields.milestone])) {\n                this.parent.setRecordValue(this.parent.taskFields.milestone, false, this.taskBarEditRecord, true);\n            }\n        }\n    };\n    /**\n     * To update left and width while perform taskbar right resize operation.\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.enableRightResizing = function (e) {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var differenceWidth = 0;\n        if (this.taskBarEditElement.classList.contains('e-segmented-taskbar') && item.segments.length > 1) {\n            var segments = this.taskBarEditRecord.ganttProperties.segments.map(function (e) { return (__assign({}, e)); });\n            var segment = segments[this.segmentIndex];\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > (item.left + segment.left) && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                        (this.mouseDownX - this.mouseMoveX) : (this.previousMouseMove - this.mouseMoveX);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width - differenceWidth;\n                }\n                else {\n                    if (this.mouseMoveX < (item.left + segment.left)) {\n                        var segmentWidth = (this.parent.timelineModule.isSingleTier &&\n                            (this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes' ||\n                                this.parent.timelineModule.customTimelineSettings.topTier.unit === 'Minutes')) ||\n                            (this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Hour' ||\n                                this.parent.timelineModule.customTimelineSettings.bottomTier.unit === 'Minutes') ?\n                            this.parent.timelineModule.customTimelineSettings.timelineUnitSize :\n                            this.parent.perDayWidth;\n                        segment.width = segmentWidth;\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > segment.left) {\n                    differenceWidth = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousMouseMove) ?\n                        (this.mouseMoveX - this.mouseDownX) : (this.mouseMoveX - this.previousMouseMove);\n                    this.previousMouseMove = this.mouseMoveX;\n                    segment.width = segment.width + differenceWidth;\n                }\n            }\n            var width = void 0;\n            var nextSegment = this.segmentIndex !== segments.length - 1 ? segments[this.segmentIndex + 1] : null;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextSegment)) {\n                if (!this.taskBarEditElement.classList.contains('e-segment-last')) {\n                    width = (segment.left + segment.width) > nextSegment.left ? (nextSegment.left - segment.left) : segment.width;\n                }\n                segment.width = width;\n            }\n            if (this.segmentIndex === item.segments.length - 1) {\n                if (this.segmentIndex === 0) {\n                    this.parent.setRecordValue('width', segment.width, item, true);\n                }\n            }\n            this.parent.setRecordValue('segments', segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        }\n        else {\n            if (this.mouseDownX > this.mouseMoveX) {\n                if (this.mouseMoveX > item.left && (this.mouseDownX - this.mouseMoveX) > 3) {\n                    differenceWidth = this.mouseDownX - this.mouseMoveX;\n                    this.parent.setRecordValue('width', this.previousItem.width - differenceWidth, item, true);\n                }\n                else {\n                    if (this.mouseMoveX < item.left) {\n                        this.parent.setRecordValue('width', 3, item, true);\n                    }\n                }\n            }\n            else {\n                if (this.mouseMoveX > item.left) {\n                    differenceWidth = this.mouseMoveX - this.mouseDownX;\n                    this.parent.setRecordValue('width', this.previousItem.width + differenceWidth, item, true);\n                }\n            }\n            if (item.segments && item.segments.length === 1) {\n                item.segments[0].width = item.width;\n            }\n            this.updateEditPosition(e, item);\n        }\n    };\n    /**\n     * To updated startDate and endDate while perform taskbar edit operation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateEditedItem = function () {\n        var item = this.taskBarEditRecord.ganttProperties;\n        var left;\n        var projectStartDate;\n        var endDate;\n        var startDate;\n        switch (this.taskBarEditAction) {\n            case 'ProgressResizing':\n                {\n                    var progressWidth = item.progressWidth;\n                    var totalTaskWidth = item.width;\n                    var updatedValues = this.validateProgressWidth(item, progressWidth, totalTaskWidth);\n                    this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), item, true);\n                    break;\n                }\n            case 'LeftResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n                    projectStartDate = this.getDateByLeft(left);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.endDate)) {\n                        endDate = this.parent.dateValidationModule.getValidEndDate(item);\n                        this.parent.setRecordValue('endDate', endDate, item, true);\n                    }\n                    startDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                    this.parent.setRecordValue('startDate', new Date(startDate.getTime()), item, true);\n                    if (this.parent.dateValidationModule.compareDates(item.startDate, item.endDate) === 0\n                        && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.isMilestone) && item.isMilestone === false && item.duration === 0) {\n                        this.parent.setRecordValue('duration', 1, item, true);\n                    }\n                    if (item.isMilestone) {\n                        this.parent.setRecordValue('endDate', new Date(startDate.getTime()), item, true);\n                    }\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitLeftResize(item);\n                }\n                break;\n            case 'RightResizing':\n            case 'ParentResizing':\n                if (this.segmentIndex === -1) {\n                    left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n                    var tempEndDate = this.getDateByLeft(left);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.startDate)) {\n                        startDate = this.parent.dateValidationModule.getValidStartDate(item);\n                        this.parent.setRecordValue('startDate', startDate, item, true);\n                    }\n                    var tempdate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.startDate) ? startDate : item.startDate;\n                    endDate = item.isMilestone ? tempdate :\n                        this.parent.dateValidationModule.checkEndDate(tempEndDate, this.taskBarEditRecord.ganttProperties);\n                    this.parent.setRecordValue('endDate', new Date(endDate.getTime()), item, true);\n                    this.parent.dateValidationModule.calculateDuration(this.taskBarEditRecord);\n                    this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n                }\n                else {\n                    this.updateSplitRightResizing(item);\n                }\n                break;\n            case 'ParentDrag':\n            case 'ChildDrag':\n            case 'MilestoneDrag':\n            case 'ManualParentDrag':\n                if (this.segmentIndex === -1 || this.segmentIndex === 0 || (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop)) {\n                    this.updateChildDrag(item);\n                }\n                else {\n                    this.setSplitTaskDrag(item);\n                }\n                break;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditRecord.ganttProperties.segments)) {\n            this.parent.chartRowsModule.updateSegment(this.taskBarEditRecord.ganttProperties.segments, this.taskBarEditRecord.ganttProperties.taskId);\n        }\n    };\n    TaskbarEdit.prototype.updateChildDrag = function (item) {\n        var left = this.getRoundOffStartLeft(item, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left, item.isMilestone, item);\n        var endDate;\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n            item.segments[0].startDate = projectStartDate;\n            item.segments[0].endDate = this.parent.dataOperation.getEndDate(item.segments[0].startDate, item.segments[0].duration, item.durationUnit, item, false);\n            this.parent.setRecordValue('segments', item.segments, item, true);\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n            this.parent.chartRowsModule.incrementSegments(item.segments, 0, this.taskBarEditRecord);\n            this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n            this.parent.setRecordValue('taskData.' + this.parent.taskFields.segments, item.segments, this.taskBarEditRecord, true);\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.endDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.startDate)) {\n                endDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n                endDate = this.parent.dateValidationModule.checkEndDate(endDate, this.taskBarEditRecord.ganttProperties);\n                this.parent.setRecordValue('endDate', endDate, item, true);\n            }\n            else {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null), item, true);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.duration)) {\n                    this.parent.dateValidationModule.calculateEndDate(this.taskBarEditRecord);\n                }\n            }\n        }\n    };\n    TaskbarEdit.prototype.updateSplitLeftResize = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.segmentIndex === 0 ? this.getRoundOffStartLeft(item, this.roundOffDuration) :\n            this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left);\n        var startDate = this.parent.dataOperation.checkStartDate(projectStartDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.startDate = new Date(startDate.getTime());\n        segment.duration = duration;\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        if (this.segmentIndex === 0) {\n            this.parent.setRecordValue('startDate', segment.startDate, item, true);\n        }\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments[this.segmentIndex - 1])) {\n            var segmentOffsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    TaskbarEdit.prototype.updateSplitRightResizing = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffEndLeft(item, this.roundOffDuration);\n        var tempEndDate = this.getDateByLeft(left);\n        var endDate = this.parent.dataOperation.checkEndDate(tempEndDate, item, false);\n        var duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        segment.endDate = new Date(endDate.getTime());\n        segment.duration = duration;\n        // update next segment offset duration\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var segmentOffset = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            segment.offsetDuration = segmentOffset;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        this.parent.editModule.updateResourceRelatedFields(this.taskBarEditRecord, 'duration');\n    };\n    TaskbarEdit.prototype.sumOfDuration = function (segments) {\n        var duration = 0;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            duration += segment.duration;\n        }\n        return duration;\n    };\n    TaskbarEdit.prototype.setSplitTaskDrag = function (item) {\n        var segment = item.segments[this.segmentIndex];\n        var left = this.getRoundOffStartLeft(segment, this.roundOffDuration);\n        var projectStartDate = this.getDateByLeft(left);\n        projectStartDate = this.parent.dateValidationModule.checkStartDate(projectStartDate, item, null);\n        segment.startDate = projectStartDate;\n        var segmentDate = this.parent.dataOperation.getEndDate(segment.startDate, segment.duration, item.durationUnit, item, false);\n        if (item.segments[this.segmentIndex + 1] && segmentDate.getTime() > item.segments[this.segmentIndex + 1].startDate.getTime()) {\n            segment.endDate = item.segments[this.segmentIndex + 1].startDate;\n        }\n        else {\n            segment.endDate = segmentDate;\n        }\n        segment.duration = this.parent.dataOperation.getDuration(segment.startDate, segment.endDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n        this.parent.setRecordValue('duration', this.sumOfDuration(item.segments), item, true);\n        this.parent.setRecordValue('endDate', item.segments[item.segments.length - 1].endDate, item, true);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.endDate)) {\n            this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'endDate');\n        }\n        //set offset if previous record present\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments[this.segmentIndex - 1])) {\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex - 1].endDate, item.segments[this.segmentIndex].startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (segment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            segment.offsetDuration = offsetDuration;\n        }\n        //set next record  offset if present\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments[this.segmentIndex + 1])) {\n            var nextSegment = item.segments[this.segmentIndex + 1];\n            var offsetDuration = this.parent.dataOperation.getDuration(item.segments[this.segmentIndex].endDate, nextSegment.startDate, item.durationUnit, item.isAutoSchedule, item.isMilestone);\n            if (nextSegment.startDate.getDay() === 1 && offsetDuration === 0 && !this.parent.includeWeekend) {\n                offsetDuration = 1;\n            }\n            nextSegment.offsetDuration = offsetDuration;\n        }\n        this.parent.setRecordValue('segments', item.segments, item, true);\n        this.parent.dataOperation.updateMappingData(this.taskBarEditRecord, 'segments');\n    };\n    /**\n     * To get roundoff enddate.\n     *\n     * @param {ITaskData} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffEndLeft = function (ganttRecord, isRoundOff) {\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var totalLeft = ganttRecord.width + ganttRecord.left;\n        if (this.segmentIndex !== -1 && ganttRecord.segments.length > 1) {\n            var segment = ganttRecord.segments[this.segmentIndex];\n            totalLeft = totalLeft - ganttRecord.width + segment.width + segment.left;\n        }\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainingLeft = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var positionValue = remainingLeft / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (positionValue > 0.5) {\n                    totalLeft = totalLeft - remainingLeft + this.parent.perDayWidth;\n                }\n                else if (positionValue < 0.5) {\n                    totalLeft = (totalLeft - remainingLeft) + (this.parent.perDayWidth / 2);\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                var inHour = (this.parent.perDayWidth / 24);\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Hour') / (1000 * 60 * 60)));\n                remainingLeft = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inHour;\n                }\n            }\n            else if (tierMode === 'Minutes') {\n                var inMinutes = (this.parent.perDayWidth / (24 * 60));\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(totalLeft), 1, 'Minutes') / (1000 * 60)));\n                remainingLeft = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + inMinutes;\n                }\n            }\n            else {\n                if (remainingLeft !== 0) {\n                    totalLeft = (totalLeft - remainingLeft) + this.parent.perDayWidth;\n                }\n            }\n        }\n        return totalLeft;\n    };\n    /**\n     * To get roundoff startdate.\n     *\n     * @param {ITaskData | ITaskSegment} ganttRecord .\n     * @param {boolean} isRoundOff .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getRoundOffStartLeft = function (ganttRecord, isRoundOff) {\n        var left = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttRecord) ? ganttRecord.left\n            : ganttRecord.left;\n        if (this.segmentIndex !== -1 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttRecord.segments)) {\n            left = ganttRecord.left + this.taskBarEditRecord.ganttProperties.left;\n        }\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.bottomTier :\n            this.parent.timelineModule.topTier;\n        var remainingContribution = (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttRecord) ? ganttRecord.isMilestone : null, ganttRecord), 1, 'Day') / (1000 * 60 * 60 * 24)));\n        var remainDays = this.parent.perDayWidth - (this.parent.perDayWidth / remainingContribution);\n        var remainDaysInDecimal = remainDays / this.parent.perDayWidth;\n        if (isRoundOff === undefined) {\n            isRoundOff = false;\n        }\n        /*Rounding the decimal value for week-month-year schedule mode*/\n        if (!isRoundOff) {\n            if ((tierMode !== 'Hour' && tierMode !== 'Minutes')) {\n                if (remainDaysInDecimal <= 0.5) {\n                    left = left - remainDays;\n                }\n                else if (remainDaysInDecimal > 0.5) {\n                    left = (left - remainDays) + this.parent.perDayWidth / 2;\n                }\n            }\n        }\n        else if (isRoundOff) {\n            if (tierMode === 'Hour') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Hour') / (1000 * 60 * 60)));\n                remainDays = (this.parent.perDayWidth / 24) - ((this.parent.perDayWidth / 24) / remainingContribution);\n                left = left - remainDays;\n            }\n            else if (tierMode === 'Minutes') {\n                remainingContribution =\n                    (1 / (this.parent.timelineModule.getIncrement(this.getDateByLeft(left), 1, 'Minutes') / (1000 * 60)));\n                remainDays = (this.parent.perDayWidth / (24 * 60)) - ((this.parent.perDayWidth / (24 * 60)) / remainingContribution);\n                left = left - remainDays;\n            }\n            else {\n                left = left - remainDays;\n            }\n        }\n        return left;\n    };\n    /**\n     * To get date by left value.\n     *\n     * @param {number} left .\n     * @param {boolean} isMilestone .\n     * @param {ITaskData} property .\n     * @returns {Date} .\n     * @private\n     */\n    TaskbarEdit.prototype.getDateByLeft = function (left, isMilestone, property) {\n        var pStartDate = new Date(this.parent.timelineModule.timelineStartDate.toString());\n        var milliSecondsPerPixel = (24 * 60 * 60 * 1000) / this.parent.perDayWidth;\n        pStartDate.setTime(pStartDate.getTime() + (left * milliSecondsPerPixel));\n        /* To render the milestone in proper date while editing */\n        if (isMilestone && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(property.predecessorsName) && property.predecessorsName !== '') {\n            //  pStartDate.setDate(pStartDate.getDate() -1);\n            var dayEndTime = this.parent['getCurrentDayEndTime'](property.isAutoSchedule ? property.autoEndDate : property.endDate);\n            this.parent.dateValidationModule.setTime(dayEndTime, pStartDate);\n            pStartDate = this.parent.dateValidationModule.checkStartDate(pStartDate, property, true);\n        }\n        var tierMode = this.parent.timelineModule.bottomTier !== 'None' ? this.parent.timelineModule.topTier :\n            this.parent.timelineModule.bottomTier;\n        if (tierMode !== 'Hour' && tierMode !== 'Minutes') {\n            if (this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) &&\n                !this.parent.isInDst(pStartDate)) {\n                pStartDate.setTime(pStartDate.getTime() + (60 * 60 * 1000));\n            }\n            // else if (!this.parent.isInDst(new Date(this.parent.timelineModule.timelineStartDate.toString())) && this.parent.isInDst(pStartDate)) {\n            //     pStartDate.setTime(pStartDate.getTime() - (60 * 60 * 1000));\n            // }\n        }\n        return pStartDate;\n    };\n    /**\n     * To set item position.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.setItemPosition = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editElement)) {\n            var currentElement = this.editElement.parentElement;\n            if (this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction === 'ChildDrag') {\n                currentElement.style.position = null;\n            }\n            else {\n                if (this.parent.enableTimelineVirtualization &&\n                    this.parent.timelineModule.wholeTimelineWidth > this.parent.element.offsetWidth * 3) {\n                    currentElement.style.setProperty('position', 'relative');\n                }\n                else {\n                    currentElement.style.setProperty('position', 'absolute');\n                }\n            }\n        }\n        var item = this.taskBarEditRecord.ganttProperties;\n        var position = this.parent.enableRtl ? 'right' : 'left';\n        var segment = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments) ? item.segments[this.segmentIndex] : null;\n        var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ?\n            this.parent.chartRowsModule.milestoneHeight : item.width;\n        var rightResizer = this.parent.isAdaptive ? (width - 2) : (width - 10);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(segment)) {\n            rightResizer = this.parent.isAdaptive ? (segment.width - 2) : (segment.width - 10);\n        }\n        this.taskBarEditElement.style.setProperty('opacity', '.75');\n        var taskBarMainContainer;\n        if (this.parent.allowTaskbarDragAndDrop && !item.isAutoSchedule && this.taskBarEditRecord.hasChildRecords) {\n            taskBarMainContainer = this.taskBarEditElement;\n        }\n        else {\n            taskBarMainContainer = (!this.taskBarEditElement.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer)) ? ((this.taskBarEditAction === 'ChildDrag' ||\n                this.taskBarEditAction === 'LeftResizing') && this.segmentIndex === 0) ? this.taskBarEditElement.parentElement : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.taskBarEditElement, 'tr.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.chartRow)\n                .querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer) : this.taskBarEditElement;\n        }\n        var segmentedTaskBarContainer = (this.taskBarEditElement.classList.contains('e-segmented-taskbar') ||\n            this.taskBarEditElement.querySelector('.e-segmented-taskbar')) ? true : false;\n        var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.traceChildProgressBar);\n        var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.traceChildTaskBar);\n        var childProgressResizer = segmentedTaskBarContainer ? (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(this.taskBarEditElement, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer).querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer) : this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.childProgressResizer);\n        var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarRightResizer);\n        var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.traceParentTaskBar);\n        var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.traceParentProgressBar);\n        var traceConnectorPointRight = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.rightConnectorPointOuterDiv);\n        var segmentConnectorPointRight = taskBarMainContainer.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.rightConnectorPointOuterDiv);\n        var manualParentTaskbar = this.taskBarEditElement;\n        var manualTaskbar = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentTaskBar);\n        var manualParentRight = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentRightResizer);\n        var manualParentLeft = this.taskBarEditElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.manualParentLeftResizer);\n        var resizeLine = this.parent.ganttChartModule.chartBodyContainer.querySelector('.e-taskbar-resize-div');\n        if (this.parent.allowTaskbarDragAndDrop && !this.updatePosition) {\n            this.leftValue = this.leftValue + 30;\n            this.updatePosition = true;\n        }\n        if (this.taskBarEditAction !== 'ConnectorPointRightDrag' &&\n            this.taskBarEditAction !== 'ConnectorPointLeftDrag') {\n            if (this.taskBarEditAction !== 'ParentResizing' && this.taskBarEditAction !== 'ManualParentDrag') {\n                if (segmentedTaskBarContainer && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.segments)\n                    && (this.taskBarEditAction === 'RightResizing' || this.segmentIndex !== 0)) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeLine)) {\n                        if (!this.parent.allowTaskbarDragAndDrop || (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag' &&\n                            this.taskBarEditAction !== 'ParentDrag')) {\n                            resizeLine.style.width = (segment.width) + 'px';\n                        }\n                    }\n                    this.taskBarEditElement.style.width = (segment.width) + 'px';\n                    if (this.parent.enableRtl) {\n                        this.taskBarEditElement.style.right = (segment.left) + 'px';\n                    }\n                    else {\n                        this.taskBarEditElement.style.left = (segment.left) + 'px';\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeLine)) {\n                            if (!this.parent.allowTaskbarDragAndDrop || (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'ChildDrag'\n                                && this.taskBarEditAction !== 'ParentDrag')) {\n                                resizeLine.style.left = (segment.left + this.editElement.parentElement.offsetLeft) + 'px';\n                            }\n                        }\n                    }\n                }\n                taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left)) + 'px');\n                taskBarMainContainer.style.width = (width) + 'px';\n                if (segmentedTaskBarContainer && segmentConnectorPointRight) {\n                    segmentConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width + 2)) + 'px';\n                }\n                if (this.parent.allowTaskbarDragAndDrop && this.parent.rowDragAndDropModule && this.taskBarEditAction !== 'LeftResizing' &&\n                    this.taskBarEditAction !== 'RightResizing' && this.taskBarEditAction !== 'ProgressResizing') {\n                    var addTop = this.parent.taskbarHeight / 2;\n                    taskBarMainContainer.style.setProperty('top', (this.topValue + addTop) + 'px');\n                    taskBarMainContainer.style.zIndex = '4';\n                }\n                if (this.taskBarEditAction === 'LeftResizing' && this.segmentIndex === 0) {\n                    this.taskBarEditElement.style.setProperty('opacity', '.75');\n                    var parent_1 = this.taskBarEditElement.parentElement;\n                    var segmentedTasks = parent_1.getElementsByClassName('e-segmented-taskbar');\n                    for (var i = 0; i < item.segments.length; i++) {\n                        var segment_4 = item.segments[i];\n                        var segmentElement = segmentedTasks[i];\n                        segmentElement.style.width = (segment_4.width) + 'px';\n                        if (item.segments.length === 1) {\n                            resizeLine.style.width = (segment_4.width) + 'px';\n                            resizeLine.style.setProperty(position, (item.left) + 'px');\n                        }\n                        else {\n                            if (i === 0) {\n                                resizeLine.style.width = (segment_4.width) + 'px';\n                                resizeLine.style.setProperty(position, (segment_4.left + item.left) + 'px');\n                            }\n                            if (this.parent.enableRtl) {\n                                segmentElement.style.right = (segment_4.left) + 'px';\n                            }\n                            else {\n                                segmentElement.style.left = (segment_4.left) + 'px';\n                            }\n                        }\n                    }\n                }\n                if (this.taskBarEditAction === 'ChildDrag' && (this.segmentIndex === 0 || (this.segmentIndex !== -1 && this.parent.allowTaskbarDragAndDrop))) {\n                    resizeLine.style.width = (width) + 'px';\n                    resizeLine.style.setProperty(position, item.left + 'px');\n                    taskBarMainContainer.style.setProperty('opacity', '.75');\n                }\n            }\n            if (traceConnectorPointRight) {\n                if (this.parent.enableRtl) {\n                    traceConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width - 2)) + 'px';\n                }\n                else {\n                    traceConnectorPointRight.style.left = (this.parent.isAdaptive ? (width + 10) : (width + 2)) + 'px';\n                }\n            }\n            if (traceConnectorPointRight && this.taskBarEditAction === 'LeftResizing') {\n                traceConnectorPointRight.style.left = (width - 2) + 'px';\n            }\n            if (childProgressResizer && traceChildProgressBar && (this.taskBarEditAction === 'LeftResizing' || this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag')) {\n                childProgressResizer.style.display = 'none';\n                traceChildProgressBar.style.display = 'none';\n            }\n            if (traceConnectorPointRight && this.taskBarEditAction === 'ProgressResizing') {\n                traceConnectorPointRight.style.display = 'none';\n            }\n            if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {\n                taskBarMainContainer.style.setProperty(position, (this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left - (width / 2))) + 'px');\n                resizeLine.style.setProperty(position, (item.left - (width / 2)) + 'px');\n                resizeLine.style.width = (width) + 'px';\n            }\n            else if (this.taskBarEditAction === 'ProgressResizing') {\n                if (this.segmentIndex === -1) {\n                    traceChildTaskBar.style.setProperty(position, (item.left + item.progressWidth - 10) + 'px');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildProgressBar)) {\n                        traceChildProgressBar.style.width = item.progressWidth + 'px';\n                        traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                        traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                        var width_1 = this.parent.enableRtl ? item.progressWidth + 8 : item.progressWidth - 8;\n                        childProgressResizer.style.setProperty(position, width_1 + 'px');\n                    }\n                }\n                else {\n                    this.updateSegmentProgress(this.taskBarEditRecord.ganttProperties);\n                    var progressElements = taskBarMainContainer.querySelectorAll('.e-gantt-child-progressbar');\n                    for (var count = 0; count < progressElements.length; count++) {\n                        if (item.segments[count] && item.segments[count].progressWidth && this.segmentIndex !== count) {\n                            progressElements[count]['style'].display = 'block';\n                            progressElements[count].style.width = item.segments[count].progressWidth + 'px';\n                        }\n                    }\n                    traceChildProgressBar.style.width = item.segments[this.segmentIndex].progressWidth + 'px';\n                    traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';\n                    traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';\n                    var width_2 = this.parent.enableRtl ? this.progressValue + 8 : this.progressValue - 8;\n                    childProgressResizer.style.setProperty(position, width_2 + 'px');\n                }\n            }\n            else if (this.taskBarEditAction === 'RightResizing' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildTaskBar)) {\n                resizeLine.style.width = (width) + 'px';\n                traceChildTaskBar.style.width = (width) + 'px';\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildProgressBar)) {\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n                    }\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentDrag') {\n                resizeLine.style.setProperty(position, item.left + 'px');\n                resizeLine.style.width = (width) + 'px';\n                resizeLine.style.width = (item.width) + 'px';\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceParentTaskBar)) {\n                    traceParentTaskBar.style.width = (width) + 'px';\n                    resizeLine.style.width = (item.width) + 'px';\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildProgressBar) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceParentProgressBar)) {\n                    traceParentProgressBar.style.width = (item.progressWidth) + 'px';\n                }\n            }\n            else if (this.taskBarEditAction === 'ParentResizing') {\n                resizeLine.style.width = (item.width) + 'px';\n                resizeLine.style.setProperty(position, item.left + 'px');\n                manualParentTaskbar.style.setProperty('width', (item.width) + 'px');\n                manualTaskbar.style.setProperty('width', (item.width) + 'px');\n                this.editElement.parentElement.style.setProperty('width', (item.width) + 'px');\n            }\n            else if (this.taskBarEditAction === 'ManualParentDrag') {\n                resizeLine.style.width = (item.width) + 'px';\n                resizeLine.style.setProperty(position, item.left + 'px');\n                manualParentTaskbar.style.setProperty(position, item.left - item.autoLeft + 'px');\n                if (this.parent.allowTaskbarDragAndDrop) {\n                    manualParentTaskbar.style.setProperty(position, this.leftValue + 'px');\n                    manualParentTaskbar.style.setProperty('top', (this.topValue) + 'px');\n                    manualParentTaskbar.style.zIndex = '4';\n                }\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildTaskBar) && !segmentedTaskBarContainer) {\n                    traceChildTaskBar.style.width = (item.width) + 'px';\n                    traceChildTaskBar.style.left = (item.left) + 'px';\n                    this.taskBarEditElement.style.width = (item.width) + 'px';\n                    this.taskBarEditElement.style.left = ((this.parent.allowTaskbarDragAndDrop ? this.leftValue : (item.left))) + 'px';\n                    resizeLine.style.setProperty(position, item.left + 'px');\n                    resizeLine.style.width = (item.width) + 'px';\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(traceChildProgressBar)) {\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    traceChildProgressBar.style.width = (item.progressWidth) + 'px';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, item.progressWidth - 10 + 'px');\n                    }\n                }\n                if (segmentedTaskBarContainer) {\n                    taskBarRightResizer.style.setProperty(position, rightResizer + 'px');\n                    traceChildProgressBar.style.width = (segment.width) + 'px';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childProgressResizer)) {\n                        childProgressResizer.style.setProperty(position, segment.width - 10 + 'px');\n                    }\n                }\n            }\n        }\n        if (this.parent.allowTaskbarDragAndDrop && (this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n            this.taskBarEditAction === 'ManualParentDrag' || this.taskBarEditAction === 'MilestoneDrag')) {\n            var resizeValue = this.parent.enableRtl ? parseInt(resizeLine.style.right, 10) : parseInt(resizeLine.style.left, 10);\n            if (this.parent.enableRtl) {\n                resizeLine.style.right = (resizeValue - 30) + 'px';\n            }\n            else {\n                resizeLine.style.left = (resizeValue + 30) + 'px';\n            }\n        }\n    };\n    /**\n     * To handle mouse up event in chart\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.mouseUpHandler = function (e) {\n        var mouseDragged = this.isMouseDragged;\n        this.previousMouseMove = null;\n        this.leftValue = 0;\n        this.previousLeftValue = 0;\n        this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n        if (this.taskBarEditAction && this.isMouseDragged) {\n            if ((!this.dragMouseLeave && this.taskBarEditedAction) || (this.parent.allowTaskbarDragAndDrop)) {\n                if (e.type === 'touchmove' || e.type === 'touchstart' || e.type === 'touchend') {\n                    var coordinates = this.getCoordinate(e);\n                    this['droppedTarget'] = document.elementFromPoint(coordinates.pageX, coordinates.pageY);\n                }\n                else {\n                    if (this.taskBarEditRecord.hasChildRecords && !this.taskBarEditRecord.ganttProperties.isAutoSchedule) {\n                        var taskbarPosition = this.parent.getOffsetRect(this.taskBarEditElement);\n                        var left = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.body.className) && document.body.className.includes('e-bigger')) ? 12 : 0;\n                        var pointerLeft = (3 + this.parent.chartRowsModule.connectorPointWidth + left);\n                        var xValue = void 0;\n                        if (this.parent.enableRtl) {\n                            xValue = Math.abs(taskbarPosition.left + pointerLeft + 1);\n                        }\n                        else {\n                            xValue = Math.abs(Math.abs(taskbarPosition.left - pointerLeft - 1) -\n                                this.parent.ganttChartModule.scrollElement.scrollLeft);\n                        }\n                        this['droppedTarget'] = document.elementFromPoint(xValue, e.y);\n                    }\n                    else {\n                        this['droppedTarget'] = document.elementFromPoint(e.x, e.y);\n                    }\n                    if (this['droppedTarget'] && this['droppedTarget'].classList.contains('e-span-label')) {\n                        this['droppedTarget'] = document.elementFromPoint(e.x + this['droppedTarget']['offsetWidth'], e.y);\n                    }\n                }\n                this.previousIds = this.parent.ids.slice();\n                this.previousFlatData = this.parent.flatData.slice();\n                this.taskBarEditedAction(e);\n                this.isMouseDragged = false;\n            }\n            else {\n                this.parent.isOnEdit = false;\n                this.cancelTaskbarEditActionInMouseLeave();\n                var criticalModule = this.parent.criticalPathModule;\n                if (this.parent.enableCriticalPath && criticalModule && criticalModule.criticalPathCollection) {\n                    criticalModule.criticalConnectorLine(criticalModule.criticalPathCollection, criticalModule.detailPredecessorCollection, true, criticalModule.predecessorCollectionTaskIds);\n                }\n            }\n        }\n        if (this.parent.enableMultiTaskbar && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditElement)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.taskBarEditElement.querySelector('.e-gantt-child-taskbar'))) {\n                if (this.taskBarEditElement.querySelector('.e-gantt-child-taskbar').classList.contains('e-collapsed-taskbar-drag')) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.taskBarEditElement.querySelector('.e-gantt-child-taskbar')], 'e-collapsed-taskbar-drag');\n                    this.taskBarEditElement.style.zIndex = this.prevZIndex;\n                    this.prevZIndex = '';\n                }\n            }\n        }\n        if (!this.parent.isAdaptive || mouseDragged) {\n            this.initPublicProp();\n        }\n        this.stopScrollTimer();\n    };\n    /**\n     * To perform taskbar edit operation.\n     *\n     * @param {PointerEvent} event .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskBarEditedAction = function (event) {\n        var args = {};\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var item = this.taskBarEditRecord;\n        var recordIndex = this.parent.ganttChartModule.getIndexByTaskBar(this.taskBarEditElement);\n        var x2 = this.mouseMoveX;\n        var e = this.getCoordinate(event);\n        var resMouseY = e.pageY - this.parent.ganttChartModule.chartBodyContainer.offsetTop;\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && !this.drawPredecessor) {\n            this.dependencyCancel = true;\n        }\n        var parentRecord = [];\n        if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n            this.taskBarEditAction === 'ConnectorPointRightDrag') && this.drawPredecessor && (!this.connectorSecondRecord.hasChildRecords ||\n            this.connectorSecondRecord.hasChildRecords && this.parent.allowParentDependency)) {\n            parentRecord.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], [], [this.taskBarEditRecord], true)[0]);\n            if (this.parent.undoRedoModule) {\n                this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1]['connectedRecords'] = parentRecord;\n                if (this.parent.toolbarModule) {\n                    this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n                }\n            }\n            this.parent.connectorLineEditModule.updatePredecessor(this.connectorSecondRecord, this.finalPredecessor);\n        }\n        else {\n            if ((this.taskBarEditAction === 'ConnectorPointLeftDrag' ||\n                this.taskBarEditAction === 'ConnectorPointRightDrag') || (this.oldData && JSON.stringify(item.ganttProperties) === JSON.stringify(this.oldData.ganttProperties))) {\n                if (this.parent.undoRedoModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n                    this.parent['totalUndoAction']--;\n                    this.parent.undoRedoModule['getUndoCollection'].splice(this.parent.undoRedoModule['getUndoCollection'].length - 1, 1);\n                    if (this.parent.toolbarModule) {\n                        this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], false);\n                    }\n                }\n            }\n            else {\n                if (this.parent.undoRedoModule && this.parent.toolbarModule && this.parent.undoRedoModule['getUndoCollection'].length > 0) {\n                    this.parent.toolbarModule.enableItems([this.parent.controlId + '_undo'], true);\n                }\n            }\n            if (x1 !== x2 || (Math.abs(y1 - resMouseY) >= (this.parent.rowHeight - this.parent.taskbarHeight) / 2)) {\n                if (item !== null) {\n                    args.editingFields = item.ganttProperties;\n                    args.data = item;\n                    args.recordIndex = recordIndex;\n                    args.previousData = this.previousItem;\n                    args.taskBarEditAction = this.taskBarEditAction;\n                    args.action = 'TaskbarEditing';\n                    args.roundOffDuration = this.roundOffDuration;\n                    args.target = this.targetElement;\n                    this.taskbarEditedArgs = args;\n                    this.taskbarEdited(args);\n                }\n            }\n        }\n        this.parent['isProjectDateUpdated'] = false;\n    };\n    /**\n     * To cancel the taskbar edt action.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.cancelTaskbarEditActionInMouseLeave = function () {\n        this.parent.editModule.reUpdatePreviousRecords(true);\n    };\n    TaskbarEdit.prototype.updateSegmentProgress = function (taskData) {\n        var segments = taskData.segments;\n        var fixedWidth = true;\n        var totalTaskWidth = this.splitTasksDuration(segments) * this.parent.perDayWidth;\n        var progress = Math.ceil((taskData.progressWidth / totalTaskWidth) * 100);\n        var totalProgressWidth = (totalTaskWidth * progress) / 100;\n        var tempWidth = totalProgressWidth;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            if (i !== 0) {\n                if (segment.left <= tempWidth) {\n                    var newWidth = (tempWidth - segment.left);\n                    totalProgressWidth = newWidth;\n                }\n                else {\n                    totalProgressWidth = 0;\n                }\n            }\n            delete segment.progressWidth;\n            if (totalProgressWidth > 0 && totalProgressWidth > segment.width) {\n                totalProgressWidth = totalProgressWidth - segment.width;\n                segment.progressWidth = segment.width;\n                segment.showProgress = false;\n            }\n            else if (fixedWidth) {\n                segment.progressWidth = totalProgressWidth;\n                segment.showProgress = true;\n                totalProgressWidth = totalProgressWidth - segment.width;\n                fixedWidth = false;\n            }\n        }\n    };\n    /**\n     * To trigger taskbar edited event.\n     *\n     * @param {ITaskbarEditedEventArgs} arg .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.taskbarEdited = function (arg) {\n        var args = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, arg);\n        var ganttRecord = args.data;\n        var taskData = ganttRecord.ganttProperties;\n        var draggedRecIndex = this.parent.flatData.indexOf(ganttRecord);\n        if ((this.parent.allowTaskbarDragAndDrop && this.taskBarEditAction === 'ChildDrag' || this.taskBarEditAction === 'ParentDrag' ||\n            this.taskBarEditAction === 'MilestoneDrag' || this.taskBarEditAction === 'ManualParentDrag') && this.dragMoveY > 0 &&\n            ((this.parent.viewType === 'ResourceView' && !ganttRecord.hasChildRecords) || this.parent.viewType === 'ProjectView')) {\n            if (this.parent.rowDragAndDropModule) {\n                var flatRecordCol = this.parent.currentViewData;\n                if (this.taskBarEditRecord.parentItem && flatRecordCol[this.taskBarEditRecord.parentItem.index] &&\n                    ((this.parent.editedRecords.indexOf(flatRecordCol[this.taskBarEditRecord.parentItem.index]) === -1))) {\n                    this.parent.editedRecords.push(flatRecordCol[this.taskBarEditRecord.parentItem.index]);\n                }\n                this.removeChildBorder();\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                var droppedRecord = void 0;\n                this.updatePosition = false;\n                this.draggedRecordMarginTop = this.taskBarEditElement.style.marginTop;\n                var row = void 0;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.droppedTarget)) {\n                    row = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.droppedTarget, 'tr.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.chartRow);\n                }\n                if (row) {\n                    var recordIndex = Array.from(this.parent.ganttChartModule.getChartRows()).indexOf(row);\n                    droppedRecord = flatRecordCol[recordIndex];\n                    var droppedParentRecordIndex = this.parent.getRootParent(droppedRecord, 0).index;\n                    var draggedParentRecordIndex = this.parent.getRootParent(this.taskBarEditRecord, 0).index;\n                    var e = {\n                        cancel: false,\n                        data: this.taskBarEditRecord,\n                        fromIndex: this.taskBarEditRecord.index,\n                        dropIndex: droppedRecord.index,\n                        dropPosition: this.parent.rowDragAndDropModule['dropPosition'],\n                        dropRecord: droppedRecord\n                    };\n                    this.parent.trigger('rowDrop', e);\n                    if (!e['cancel'] && droppedRecord && recordIndex !== draggedRecIndex && ((droppedParentRecordIndex !== draggedParentRecordIndex ||\n                        (this.taskBarEditRecord.hasChildRecords && droppedRecord.hasChildRecords)) ||\n                        !this.taskBarEditRecord.hasChildRecords)) {\n                        var droppedRecordIndex = this.parent.flatData.indexOf(droppedRecord);\n                        var position = void 0;\n                        if (this.parent.viewType === 'ProjectView' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.rowDragAndDropModule['dropPosition'])) {\n                            position = this.parent.rowDragAndDropModule['dropPosition'];\n                        }\n                        else {\n                            position = (droppedRecord.hasChildRecords || (!droppedRecord.parentItem &&\n                                droppedRecord.childRecords.length === 0)) ? 'child' : this.parent.rowDragAndDropModule['dropPosition'];\n                        }\n                        if (this.parent.rowDragAndDropModule) {\n                            if (this.parent.viewType === 'ResourceView' && (position === 'child' && !droppedRecord.hasChildRecords) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(droppedRecord.parentItem)) {\n                                position = 'Invalid';\n                                this.parent.rowDragAndDropModule['dropPosition'] = 'Invalid';\n                            }\n                            if (position) {\n                                this.parent.rowDragAndDropModule.reorderRows([draggedRecIndex], droppedRecordIndex, position);\n                            }\n                        }\n                        this.dragMoveY = 0;\n                    }\n                }\n                this.isClonedElement = false;\n            }\n            if (this.parent.showOverAllocation) {\n                this.parent.ganttChartModule.renderOverAllocationContainer();\n            }\n        }\n        if (args.taskBarEditAction === 'ProgressResizing') {\n            if (args.previousData.progress !== taskData.progress) {\n                var progressWidth = args.data.ganttProperties.progressWidth;\n                var totalTaskWidth = args.data.ganttProperties.width;\n                /* eslint-disable-next-line */\n                var updatedValues = this.validateProgressWidth(args.data.ganttProperties, progressWidth, totalTaskWidth);\n                this.parent.setRecordValue('progress', this.getProgressPercent(updatedValues.totalTaskWidth, updatedValues.progressWidth), taskData, true);\n                if (ganttRecord.parentItem) {\n                    this.parent.editModule.updateParentProgress(ganttRecord.parentItem);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(taskData.segments)) {\n                    this.updateSegmentProgress(taskData);\n                }\n            }\n        }\n        else {\n            var segments = args.data.ganttProperties.segments;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(segments) && segments.length > 0\n                && ((this.taskBarEditAction === 'LeftResizing' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'ChildDrag' && this.segmentIndex !== 0)\n                    || (this.taskBarEditAction === 'RightResizing'))) {\n                var segment = segments[this.segmentIndex];\n                var ganttProp = this.taskBarEditRecord.ganttProperties;\n                var previousSegment = this.segmentIndex === 0 ? null\n                    : segments[this.segmentIndex - 1];\n                var nextSegment = this.segmentIndex === segments.length - 1 ? null\n                    : segments[this.segmentIndex + 1];\n                var sDate = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextSegment) ?\n                    new Date(nextSegment.startDate.getTime()) : this.parent.cloneProjectEndDate;\n                var eDate = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(previousSegment) ?\n                    new Date(previousSegment.endDate.getTime()) : this.parent.cloneProjectStartDate;\n                var cStartDate = new Date(segment.startDate.getTime());\n                var cEndDate = new Date(segment.endDate.getTime());\n                if (this.parent.timelineModule.topTier === 'Day' && this.parent.timelineModule.bottomTier === 'Hour') {\n                    cStartDate.setHours(cStartDate.getHours() - 1);\n                    cEndDate.setHours(cEndDate.getHours() + 1);\n                }\n                else {\n                    cStartDate.setDate(cStartDate.getDate());\n                    cEndDate.setDate(cEndDate.getDate());\n                }\n                if (this.parent.includeWeekend) {\n                    sDate.setHours(0, 0, 0, 0);\n                    eDate.setHours(0, 0, 0, 0);\n                    cStartDate.setDate(cStartDate.getDate() - 1);\n                    cEndDate.setDate(cEndDate.getDate() + 1);\n                    cStartDate.setHours(0, 0, 0, 0);\n                    cEndDate.setHours(0, 0, 0, 0);\n                    if (cStartDate.getTime() <= eDate.getTime() && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(previousSegment) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(segment)) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': previousSegment.segmentIndex, 'secondSegmentIndex': segment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    else if (cEndDate.getTime() >= sDate.getTime() && this.segmentIndex !== segments.length - 1) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': segment.segmentIndex, 'secondSegmentIndex': nextSegment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    else if (cEndDate.getTime() >= sDate.getTime()) {\n                        segment.endDate.setDate(this.parent.cloneProjectEndDate.getDate() - 1);\n                        segment.startDate = this.parent.dataOperation.getStartDate(segment.endDate, segment.duration, ganttProp.durationUnit, ganttProp);\n                        // eslint-disable-next-line\n                        for (var i = segments.length - 2; i >= 0; i--) {\n                            var segment_5 = __assign({}, segments[i]);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(segment_5)) {\n                                var eDate_1 = new Date(segment_5.endDate);\n                                eDate_1.setDate(eDate_1.getDate() - segment_5.offsetDuration);\n                                segment_5.endDate = eDate_1;\n                                segment_5.startDate = this.parent.dataOperation.getStartDate(segment_5.endDate, segment_5.duration, ganttProp.durationUnit, ganttProp);\n                            }\n                        }\n                    }\n                }\n                else {\n                    //Hits while dragging taskbar toward right & taskbar rightside resizing:\n                    if (cEndDate.getTime() <= sDate.getTime() && this.segmentIndex !== segments.length - 1 && !this.parent.includeWeekend &&\n                        this.parent.dataOperation.getDuration((this.parent.dataOperation.checkStartDate(cEndDate, taskData, false)), sDate, taskData.durationUnit, false, false) === 0) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': segment.segmentIndex, 'secondSegmentIndex': nextSegment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                    //Hits while dragging taskbar toward left & taskbar leftside resizing:\n                    else if (cStartDate.getTime() >= eDate.getTime() &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(previousSegment) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(segment) &&\n                        !this.parent.includeWeekend && this.parent.dataOperation.getDuration((this.parent.dataOperation.checkEndDate(cStartDate, taskData, false)), eDate, taskData.durationUnit, false, false) === 0) {\n                        var segmentIndexes = [\n                            { 'firstSegmentIndex': previousSegment.segmentIndex, 'secondSegmentIndex': segment.segmentIndex }\n                        ];\n                        this.parent.chartRowsModule.mergeTask(ganttProp.taskId, segmentIndexes);\n                    }\n                }\n            }\n            this.parent.dataOperation.updateWidthLeft(args.data);\n        }\n        this.isDragged = false;\n        this.parent.dataOperation.updateTaskData(ganttRecord);\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To get progress in percentage.\n     *\n     * @param {number} parentwidth .\n     * @param {number} progresswidth .\n     * @returns {number} .\n     * @private\n     */\n    TaskbarEdit.prototype.getProgressPercent = function (parentwidth, progresswidth) {\n        return Math.ceil(((progresswidth / parentwidth) * 100));\n    };\n    /**\n     * false line implementation.\n     *\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.drawFalseLine = function () {\n        var x1 = this.mouseDownX;\n        var y1 = this.mouseDownY;\n        var x2 = this.mouseMoveX;\n        var y2 = this.mouseMoveY;\n        var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n        var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n        var transform = 'rotate(' + (this.parent.enableRtl ? -angle : angle) + 'deg)';\n        var left;\n        var width = 0;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.querySelectorAll('.e-chart-row')[0])) {\n            width = document.querySelectorAll('.e-chart-row')[0].offsetWidth;\n        }\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            if (this.parent.enableRtl) {\n                left = ((width - (this.elementOffsetLeft + (this.parent.chartRowsModule.connectorPointWidth / 2)))) -\n                    Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n            else {\n                left = (this.elementOffsetLeft - (this.parent.chartRowsModule.connectorPointWidth / 2)) -\n                    this.parent.ganttChartModule.scrollObject.previousScroll.left;\n            }\n        }\n        if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            if (this.parent.enableRtl) {\n                left = (width - (this.elementOffsetLeft + this.elementOffsetWidth +\n                    (this.parent.chartRowsModule.connectorPointWidth / 2))) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n            else {\n                left = (this.elementOffsetLeft + this.elementOffsetWidth) +\n                    (this.parent.chartRowsModule.connectorPointWidth / 2) - Math.abs(this.parent.ganttChartModule.scrollObject.previousScroll.left);\n            }\n        }\n        var top = ((this.elementOffsetTop) + (this.elementOffsetHeight / 2) +\n            this.parent.ganttChartModule.chartBodyContainer.offsetTop) - this.parent.ganttChartModule.scrollObject.previousScroll.top;\n        this.removeFalseLine(false);\n        this.falseLine = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            className: _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.falseLine, id: 'ganttfalseline' + this.parent.element.id,\n            styles: 'position: absolute;transform:' + transform + ';' +\n                'border-top-width: 1px;border-top-style: dashed;z-index: 5;width:' + (length - 3) + 'px;' +\n                'top:' + top + 'px;'\n        });\n        if (this.parent.enableRtl) {\n            this.falseLine.style.left = 'auto';\n            this.falseLine.style.right = left + 'px';\n            this.falseLine.style.transformOrigin = '100% 0%';\n        }\n        else {\n            this.falseLine.style.right = 'auto';\n            this.falseLine.style.left = left + 'px';\n            this.falseLine.style.transformOrigin = '0% 100%';\n        }\n        this.parent.ganttChartModule.chartBodyContainer.appendChild(this.falseLine);\n    };\n    /**\n     *\n     * @param {boolean} isRemoveConnectorPointDisplay .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.removeFalseLine = function (isRemoveConnectorPointDisplay) {\n        if (this.falseLine) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.falseLine);\n            this.falseLine = null;\n            if (isRemoveConnectorPointDisplay) {\n                this.elementOffsetLeft = 0;\n                this.elementOffsetTop = 0;\n                this.elementOffsetWidth = 0;\n                this.elementOffsetHeight = 0;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.parent.ganttChartModule.scrollElement.querySelectorAll('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineContainer), [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorLineZIndex]);\n            }\n        }\n    };\n    /**\n     *\n     * @param {PointerEvent} e .\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.updateConnectorLineSecondProperties = function (e) {\n        var target = this.getElementByPosition(e);\n        var element = (0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.taskBarMainContainer);\n        var isBigger = document.body.className.includes('e-bigger');\n        this.connectorSecondAction = null;\n        var scrollTop = 0;\n        if ((0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)) {\n            this.connectorSecondAction = 'ConnectorPointLeftDrag';\n            this.toPredecessorText = 'Start';\n        }\n        else if ((0,_base_utils__WEBPACK_IMPORTED_MODULE_1__.parentsUntil)(target, _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight)) {\n            this.connectorSecondAction = 'ConnectorPointRightDrag';\n            this.toPredecessorText = 'Finish';\n        }\n        else {\n            this.connectorSecondAction = null;\n            this.toPredecessorText = null;\n        }\n        if (this.taskBarEditElement !== element && this.taskBarEditElement !== this.highlightedSecondElement) {\n            if (this.parent.virtualScrollModule && this.parent.enableVirtualization) {\n                var top_1 = this.parent.virtualScrollModule.getTopPosition();\n                scrollTop = top_1;\n            }\n            if ((this.parent.virtualScrollModule && this.parent.enableVirtualization &&\n                !this.elementOffsetLeft) || !this.parent.enableVirtualization) {\n                if (!this.parent.allowParentDependency) {\n                    this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                    this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop +\n                        this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n                }\n                else {\n                    if (this.taskBarEditElement.children[0].classList.contains('e-manualparent-main-container')) {\n                        this.elementOffsetLeft = this.realTaskbarElement.children[0]['offsetLeft'] +\n                            this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                        this.elementOffsetTop = ((this.realTaskbarElement.parentElement.offsetTop + this.realTaskbarElement.offsetHeight / 3 - 5) + this.taskBarEditElement.children[0]['offsetTop']) + scrollTop;\n                    }\n                    else {\n                        this.elementOffsetLeft = this.realTaskbarElement.offsetLeft - ((isBigger) ? 10 : 0);\n                        this.elementOffsetTop = this.realTaskbarElement.parentElement.offsetTop +\n                            this.realTaskbarElement.offsetHeight / 3 + scrollTop;\n                    }\n                }\n                this.elementOffsetWidth = this.realTaskbarElement.offsetWidth + ((isBigger) ? 20 : 0);\n                this.elementOffsetHeight = this.realTaskbarElement.offsetHeight;\n            }\n            this.showHideTaskBarEditingElements(element, this.highlightedSecondElement, true);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.connectorSecondAction) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.connectorSecondElement) &&\n            (!this.connectorSecondRecord.hasChildRecords || this.connectorSecondRecord.hasChildRecords &&\n                this.parent.allowParentDependency)) {\n            this.editTooltip.showHideTaskbarEditTooltip(false, this.segmentIndex);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.connectorSecondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointAllowBlock]);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.connectorSecondElement.querySelector('.' + _base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight)], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointAllowBlock]);\n        }\n        this.connectorSecondElement = this.connectorSecondAction ? element : null;\n        this.highlightedSecondElement = element;\n        this.connectorSecondRecord = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.connectorSecondElement) ?\n            null : this.parent.ganttChartModule.getRecordByTaskBar(this.connectorSecondElement);\n    };\n    // eslint-disable-next-line\n    TaskbarEdit.prototype.triggerDependencyEvent = function (e, mouseUp) {\n        var parentWithZoomStyle = this.parent.element.closest('[style*=\"zoom\"]');\n        var zoomedPageY;\n        if (parentWithZoomStyle) {\n            var zoom1 = parseFloat(getComputedStyle(parentWithZoomStyle).zoom);\n            zoomedPageY = e.pageY / zoom1;\n        }\n        var fromItem = this.taskBarEditRecord.ganttProperties;\n        var toItem = this.connectorSecondRecord ? this.connectorSecondRecord.ganttProperties : null;\n        var predecessor;\n        var currentTarget;\n        var target = this.getElementByPosition(e);\n        var element = target;\n        var uniqueId = this.parent.viewType === 'ResourceView' ? fromItem.taskId : fromItem.rowUniqueID;\n        if (this.taskBarEditAction === 'ConnectorPointLeftDrag') {\n            predecessor = uniqueId + (this.parent.enableRtl ? 'F' : 'S');\n        }\n        else if (this.taskBarEditAction === 'ConnectorPointRightDrag') {\n            predecessor = uniqueId + (this.parent.enableRtl ? 'S' : 'F');\n        }\n        if (this.connectorSecondAction) {\n            if (this.connectorSecondAction === 'ConnectorPointLeftDrag') {\n                predecessor += this.parent.enableRtl ? 'F' : 'S';\n                currentTarget = this.parent.enableRtl ? 'finish' : 'start';\n            }\n            else if (this.connectorSecondAction === 'ConnectorPointRightDrag') {\n                predecessor += this.parent.enableRtl ? 'S' : 'F';\n                currentTarget = this.parent.enableRtl ? 'start' : 'finish';\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toItem)) {\n            this.drawPredecessor = false;\n            return;\n        }\n        if (toItem.predecessorsName) {\n            this.finalPredecessor = toItem.predecessorsName + ',' + predecessor;\n        }\n        else {\n            this.finalPredecessor = predecessor;\n        }\n        var isValidLink = this.parent.connectorLineEditModule.validatePredecessorRelation(this.connectorSecondRecord, this.finalPredecessor);\n        // eslint-disable-next-line\n        var predecessorArray = this.parent.predecessorModule.calculatePredecessor(predecessor, this.connectorSecondRecord);\n        var args = {};\n        args.fromItem = fromItem;\n        args.toItem = toItem;\n        args.newPredecessorString = this.finalPredecessor;\n        args.predecessor = predecessorArray && predecessorArray[0];\n        args.isValidLink = isValidLink;\n        args.requestType = 'ValidateDependency';\n        this.parent.trigger('actionBegin', args);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.loadingIndicator) && this.parent.loadingIndicator.indicatorType === 'Shimmer' && args.requestType !== 'ValidateDependency') {\n            this.parent.showMaskRow();\n        }\n        else if (args.requestType !== 'ValidateDependency') {\n            this.parent.showSpinner();\n        }\n        args.isValidLink = !isValidLink && args.isValidLink ? false : args.isValidLink;\n        if (args.isValidLink) {\n            if (!this.editTooltip.toolTipObj && !this.parent.isAdaptive) {\n                this.editTooltip.showHideTaskbarEditTooltip(true, this.segmentIndex);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editTooltip.toolTipObj)) {\n                this.parent.connectorLineModule.tooltipTable.innerHTML = '';\n                this.parent.connectorLineModule.tooltipTable.appendChild(this.parent.connectorLineModule.getConnectorLineTooltipInnerTd(this.parent.editModule.taskbarEditModule.taskBarEditRecord.ganttProperties.taskName, this.parent.editModule.taskbarEditModule.fromPredecessorText, '', ''));\n                var table = this.parent.connectorLineModule.tooltipTable.querySelector('#toPredecessor').querySelectorAll('td');\n                table[1].innerText = toItem.taskName;\n                table[2].innerText = this.parent.localeObj.getConstant(currentTarget);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.connectorLineModule.tooltipTable.parentElement) &&\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.connectorLineModule.tooltipTable.parentElement.parentElement)) {\n                    var tooltipElement = this.parent.connectorLineModule.tooltipTable.parentElement.parentElement;\n                    if (tooltipElement.offsetTop + tooltipElement.offsetHeight > zoomedPageY) {\n                        tooltipElement.style.top = (e.pageY - tooltipElement.offsetHeight - 20) + 'px';\n                    }\n                }\n            }\n            this.drawPredecessor = true;\n        }\n        else {\n            if (this.parent.isAdaptive) {\n                if (target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointLeft) ||\n                    target.classList.contains(_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointRight)) {\n                    this.showHideActivePredecessors(true);\n                }\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], [_base_css_constants__WEBPACK_IMPORTED_MODULE_3__.connectorPointAllowBlock]);\n            }\n            this.drawPredecessor = false;\n        }\n    };\n    // Get XY coordinates for touch and non-touch device\n    TaskbarEdit.prototype.getCoordinate = function (event) {\n        var coordinates = {};\n        var e = event;\n        coordinates.pageX = e.pageX;\n        coordinates.pageY = e.pageY;\n        if (event && event.type !== 'click') {\n            var e_1 = event;\n            if (e_1.type === 'touchmove' || e_1.type === 'touchstart' || e_1.type === 'touchend') {\n                coordinates.pageX = e_1.changedTouches[0].pageX;\n                coordinates.pageY = e_1.changedTouches[0].pageY;\n            }\n        }\n        return coordinates;\n    };\n    // Get current target element by mouse position\n    // window.pageXOffset && window.pageYOffset is used to find the accurate element position in IPad/IPhone\n    TaskbarEdit.prototype.getElementByPosition = function (event) {\n        if (!this.parent.isAdaptive) {\n            return event.target;\n        }\n        else {\n            var e = this.getCoordinate(event);\n            return document.elementFromPoint((e.pageX - window.pageXOffset), (e.pageY - window.pageYOffset));\n        }\n    };\n    TaskbarEdit.prototype.multipleSelectionEnabled = function () {\n        if (this.parent.selectionModule &&\n            this.parent.selectionSettings.mode !== 'Cell'\n            && this.parent.selectionSettings.type === 'Multiple') {\n            this.parent.selectionModule.hidePopUp();\n        }\n    };\n    TaskbarEdit.prototype.unWireEvents = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('chartMouseDown', this.mouseDownHandler);\n        this.parent.off('chartMouseUp', this.mouseUpHandler);\n        this.parent.off('chartMouseLeave', this.mouseLeaveHandler);\n        this.parent.off('chartMouseMove', this.mouseMoveAction);\n        this.parent.off('chartMouseClick', this.mouseClickHandler);\n    };\n    /**\n     * @returns {void} .\n     * @private\n     */\n    TaskbarEdit.prototype.destroy = function () {\n        this.unWireEvents();\n        this.stopScrollTimer();\n        this.parent.editModule.taskbarEditModule = undefined;\n    };\n    return TaskbarEdit;\n}(_base_date_processor__WEBPACK_IMPORTED_MODULE_2__.DateProcessor));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/taskbar-edit.js?");

/***/ })

}]);