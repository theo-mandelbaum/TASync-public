"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_pdf-base_annotation-renderer_js-18-469e5446"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/annotation-renderer.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/annotation-renderer.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnnotBounds: () => (/* binding */ AnnotBounds),\n/* harmony export */   AnnotColor: () => (/* binding */ AnnotColor),\n/* harmony export */   AnnotPoint: () => (/* binding */ AnnotPoint),\n/* harmony export */   AnnotationRenderer: () => (/* binding */ AnnotationRenderer),\n/* harmony export */   FontBase: () => (/* binding */ FontBase),\n/* harmony export */   FreeTextAnnotationBase: () => (/* binding */ FreeTextAnnotationBase),\n/* harmony export */   InkSignatureAnnotation: () => (/* binding */ InkSignatureAnnotation),\n/* harmony export */   MeasureShapeAnnotationBase: () => (/* binding */ MeasureShapeAnnotationBase),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   PdfLayer: () => (/* binding */ PdfLayer),\n/* harmony export */   PointBase: () => (/* binding */ PointBase),\n/* harmony export */   PopupAnnotationBase: () => (/* binding */ PopupAnnotationBase),\n/* harmony export */   RectangleBase: () => (/* binding */ RectangleBase),\n/* harmony export */   ShapeAnnotationBase: () => (/* binding */ ShapeAnnotationBase),\n/* harmony export */   SignatureAnnotationBase: () => (/* binding */ SignatureAnnotationBase),\n/* harmony export */   TextMarkupAnnotationBase: () => (/* binding */ TextMarkupAnnotationBase)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-pdf */ \"./node_modules/@syncfusion/ej2-pdf/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\n\n\n\n\n\n/**\n * AnnotationRenderer\n *\n * @hidden\n */\nvar AnnotationRenderer = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - The PdfViewer.\n     * @param {PdfViewerBase} pdfViewerBase - The PdfViewerBase.\n     * @private\n     */\n    function AnnotationRenderer(pdfViewer, pdfViewerBase) {\n        this.formats = ['M/d/yyyy h:mm:ss tt', 'M/d/yyyy, h:mm:ss tt', 'M/d/yyyy h:mm tt',\n            'MM/dd/yyyy hh:mm:ss', 'M/d/yyyy h:mm:ss',\n            'M/d/yyyy hh:mm tt', 'M/d/yyyy hh tt',\n            'M/d/yyyy h:mm', 'M/d/yyyy h:mm',\n            'MM/dd/yyyy hh:mm', 'M/dd/yyyy hh:mm', 'dd/M/yyyy h:mm:ss tt', 'dd/M/yyyy, h:mm:ss tt',\n            'M/d/yy, h:mm:ss tt', 'yyyy/MM/dd, h:mm:ss tt', 'dd/MMM/yy, h:mm:ss tt',\n            'yyyy-MM-dd, h:mm:ss tt', 'dd-MMM-yy, h:mm:ss tt', 'MM-dd-yy, h:mm:ss tt', 'YYYY-MM-DDTHH:mm:ss.sssZ', 'Â±YYYYYY-MM-DDTHH:mm:ss.sssZ', 'yyyy-MM-ddTHH:mm:ss.fffZ'];\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addShape = function (details, page) {\n        var shapeAnnotation = details;\n        var isLock = this.checkAnnotationLock(shapeAnnotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.shapeAnnotationType) && shapeAnnotation.shapeAnnotationType === 'Line') {\n            var points = JSON.parse(shapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var lineAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineAnnotation(linePoints);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.note)) {\n                lineAnnotation.text = shapeAnnotation.note.toString();\n            }\n            lineAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.author) && shapeAnnotation.author.toString() !== '' ? shapeAnnotation.author.toString() : 'Guest';\n            lineAnnotation._dictionary.set('NM', shapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.subject)) {\n                lineAnnotation.subject = shapeAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(shapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                lineAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(shapeAnnotation.fillColor);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fillColor.r) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fillColor.g) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fillColor.b) &&\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fillColor.a) && fillColor.a > 0) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    lineAnnotation.innerColor = innerColor;\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                lineAnnotation.opacity = shapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = shapeAnnotation.thickness;\n            lineBorder.style = shapeAnnotation.borderStyle;\n            lineBorder.dash = shapeAnnotation.borderDashArray;\n            lineAnnotation.border = lineBorder;\n            lineAnnotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            lineAnnotation.lineEndingStyle.begin = this.getLineEndingStyle(shapeAnnotation.lineHeadStart);\n            lineAnnotation.lineEndingStyle.end = this.getLineEndingStyle(shapeAnnotation.lineHeadEnd);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                lineAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = shapeAnnotation.comments;\n            var bounds = JSON.parse(shapeAnnotation.bounds);\n            lineAnnotation.bounds = bounds;\n            lineAnnotation.bounds.x = bounds.left;\n            lineAnnotation.bounds.y = bounds.top;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    lineAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], lineAnnotation.bounds));\n                }\n            }\n            var reviewDetails = shapeAnnotation.review;\n            lineAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, lineAnnotation.bounds));\n            this.preserveIsLockProperty(shapeAnnotation, lineAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                lineAnnotation.setValues('CustomData', JSON.stringify(shapeAnnotation.customData));\n            }\n            if (shapeAnnotation.allowedInteractions && shapeAnnotation['allowedInteractions'] != null) {\n                lineAnnotation.setValues('AllowedInteractions', JSON.stringify(shapeAnnotation['allowedInteractions']));\n            }\n            lineAnnotation.setAppearance(true);\n            page.annotations.add(lineAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.shapeAnnotationType) && shapeAnnotation.shapeAnnotationType === 'Square') {\n            var bounds = JSON.parse(shapeAnnotation.bounds);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.left)) {\n                shapeAnnotation.bounds.left = 0;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.top)) {\n                shapeAnnotation.bounds.top = 0;\n            }\n            var cropValues = this.getCropBoxValue(page, false);\n            var left = this.convertPixelToPoint(bounds.left);\n            var top_1 = this.convertPixelToPoint(bounds.top);\n            var width = this.convertPixelToPoint(bounds.width);\n            var height = this.convertPixelToPoint(bounds.height);\n            var cropX = 0;\n            var cropY = 0;\n            if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n                cropX = cropValues.x;\n                cropY = cropValues.y;\n            }\n            else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n                cropX = cropValues.x;\n                cropY = cropValues.y;\n            }\n            var squareAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfSquareAnnotation(cropX + left, cropY + top_1, width, height);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.note)) {\n                squareAnnotation.text = shapeAnnotation.note.toString();\n            }\n            squareAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.author) && shapeAnnotation.author.toString() !== '' ? shapeAnnotation.author.toString() : 'Guest';\n            squareAnnotation._dictionary.set('NM', shapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.subject)) {\n                squareAnnotation.subject = shapeAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(shapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                squareAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(shapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    squareAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    squareAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    squareAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                squareAnnotation.opacity = shapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = shapeAnnotation.thickness;\n            lineBorder.style = shapeAnnotation.borderStyle;\n            lineBorder.dash = shapeAnnotation.borderDashArray;\n            squareAnnotation.border = lineBorder;\n            squareAnnotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                squareAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = shapeAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    squareAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], squareAnnotation.bounds));\n                }\n            }\n            var reviewDetails = shapeAnnotation.review;\n            squareAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, squareAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.isCloudShape) && shapeAnnotation.isCloudShape) {\n                var borderEffect = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffect();\n                borderEffect.style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n                borderEffect.intensity = shapeAnnotation.cloudIntensity;\n                squareAnnotation.borderEffect = borderEffect;\n                var rectDifferences = JSON.parse(shapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    squareAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(shapeAnnotation, squareAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                squareAnnotation.setValues('CustomData', JSON.stringify(shapeAnnotation.customData));\n            }\n            if (shapeAnnotation.allowedInteractions && shapeAnnotation['allowedInteractions'] != null) {\n                squareAnnotation.setValues('AllowedInteractions', JSON.stringify(shapeAnnotation['allowedInteractions']));\n            }\n            squareAnnotation.setAppearance(true);\n            page.annotations.add(squareAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.shapeAnnotationType) && shapeAnnotation.shapeAnnotationType === 'Circle') {\n            var bounds = JSON.parse(shapeAnnotation.bounds);\n            var left = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.left) ? this.convertPixelToPoint(bounds.left) : 0;\n            var top_2 = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.top) ? this.convertPixelToPoint(bounds.top) : 0;\n            var width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.width) ? this.convertPixelToPoint(bounds.width) : 0;\n            var height = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.height) ? this.convertPixelToPoint(bounds.height) : 0;\n            var cropValues = this.getCropBoxValue(page, false);\n            var cropX = 0;\n            var cropY = 0;\n            if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n                cropX = cropValues.x;\n                cropY = cropValues.y;\n            }\n            else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n                cropX = cropValues.x;\n                cropY = cropValues.y;\n            }\n            var circleAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfCircleAnnotation(cropX + left, cropY + top_2, width, height);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.note)) {\n                circleAnnotation.text = shapeAnnotation.note.toString();\n            }\n            circleAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.author) && shapeAnnotation.author.toString() !== '' ? shapeAnnotation.author.toString() : 'Guest';\n            circleAnnotation._dictionary.set('NM', shapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.subject)) {\n                circleAnnotation.subject = shapeAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(shapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                circleAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(shapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    circleAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    circleAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    circleAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                circleAnnotation.opacity = shapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = shapeAnnotation.thickness;\n            lineBorder.style = shapeAnnotation.borderStyle;\n            lineBorder.dash = shapeAnnotation.borderDashArray;\n            circleAnnotation.border = lineBorder;\n            circleAnnotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                circleAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = shapeAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    circleAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], circleAnnotation.bounds));\n                }\n            }\n            var reviewDetails = shapeAnnotation.review;\n            circleAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, circleAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.isCloudShape) && shapeAnnotation.isCloudShape) {\n                var borderEffect = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffect();\n                borderEffect.style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n                borderEffect.intensity = shapeAnnotation.cloudIntensity;\n                circleAnnotation._borderEffect = borderEffect;\n                var rectDifferences = JSON.parse(shapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    circleAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(shapeAnnotation, circleAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                circleAnnotation.setValues('CustomData', JSON.stringify(shapeAnnotation.customData));\n            }\n            if (shapeAnnotation.allowedInteractions && shapeAnnotation['allowedInteractions'] != null) {\n                circleAnnotation.setValues('AllowedInteractions', JSON.stringify(shapeAnnotation['allowedInteractions']));\n            }\n            circleAnnotation.setAppearance(true);\n            page.annotations.add(circleAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.shapeAnnotationType) && shapeAnnotation.shapeAnnotationType === 'Polygon') {\n            var points = JSON.parse(shapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var bounds = JSON.parse(shapeAnnotation.bounds);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.left)) {\n                shapeAnnotation.bounds.left = 0;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.top)) {\n                shapeAnnotation.bounds.top = 0;\n            }\n            var left = this.convertPixelToPoint(bounds.left);\n            var top_3 = this.convertPixelToPoint(bounds.top);\n            var width = this.convertPixelToPoint(bounds.width);\n            var height = this.convertPixelToPoint(bounds.height);\n            var polygonAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolygonAnnotation(linePoints);\n            polygonAnnotation.bounds = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(left, top_3, width, height);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.note)) {\n                polygonAnnotation.text = shapeAnnotation.note.toString();\n            }\n            polygonAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.author) && shapeAnnotation.author.toString() !== '' ? shapeAnnotation.author.toString() : 'Guest';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.subject)) {\n                polygonAnnotation.subject = shapeAnnotation.subject.toString();\n            }\n            polygonAnnotation._dictionary.set('NM', shapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(shapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                polygonAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(shapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    polygonAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    polygonAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    polygonAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                polygonAnnotation.opacity = shapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = shapeAnnotation.thickness;\n            lineBorder.style = shapeAnnotation.borderStyle;\n            lineBorder.dash = shapeAnnotation.borderDashArray;\n            polygonAnnotation.border = lineBorder;\n            polygonAnnotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                polygonAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = shapeAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    polygonAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], polygonAnnotation.bounds));\n                }\n            }\n            var reviewDetails = shapeAnnotation.review;\n            polygonAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, polygonAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.isCloudShape) && shapeAnnotation.isCloudShape) {\n                var borderEffect = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffect();\n                borderEffect.style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n                borderEffect.intensity = shapeAnnotation.cloudIntensity;\n                polygonAnnotation.borderEffect = borderEffect;\n                var rectDifferences = JSON.parse(shapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    polygonAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(shapeAnnotation, polygonAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                polygonAnnotation.setValues('CustomData', JSON.stringify(shapeAnnotation.customData));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.allowedInteractions)) {\n                polygonAnnotation.setValues('AllowedInteractions', JSON.stringify(shapeAnnotation.allowedInteractions));\n            }\n            polygonAnnotation.setAppearance(true);\n            page.annotations.add(polygonAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.shapeAnnotationType) && shapeAnnotation.shapeAnnotationType === 'Polyline') {\n            var points = JSON.parse(shapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var bounds = JSON.parse(shapeAnnotation.bounds);\n            var polylineAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolyLineAnnotation(linePoints);\n            polylineAnnotation.bounds = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(this.convertPixelToPoint(bounds.left ? bounds.left : 0), this.convertPixelToPoint(bounds.top ? bounds.top : 0), this.convertPixelToPoint(bounds.width ? bounds.width : 0), this.convertPixelToPoint(bounds.height ? bounds.height : 0));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.note)) {\n                polylineAnnotation.text = shapeAnnotation.note.toString();\n            }\n            polylineAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.author) && shapeAnnotation.author.toString() !== '' ? shapeAnnotation.author.toString() : 'Guest';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.subject)) {\n                polylineAnnotation.subject = shapeAnnotation.subject.toString();\n            }\n            polylineAnnotation._dictionary.set('NM', shapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(shapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                polylineAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(shapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    polylineAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    polylineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    polylineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                polylineAnnotation.opacity = shapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = shapeAnnotation.thickness;\n            lineBorder.style = shapeAnnotation.borderStyle;\n            lineBorder.dash = shapeAnnotation.borderDashArray;\n            polylineAnnotation.border = lineBorder;\n            polylineAnnotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            polylineAnnotation.beginLineStyle = this.getLineEndingStyle(shapeAnnotation.lineHeadStart);\n            polylineAnnotation.endLineStyle = this.getLineEndingStyle(shapeAnnotation.lineHeadEnd);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                polylineAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = shapeAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    polylineAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], polylineAnnotation.bounds));\n                }\n            }\n            var reviewDetails = shapeAnnotation.review;\n            polylineAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, polylineAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.isCloudShape) && shapeAnnotation.isCloudShape) {\n                var dictionary = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary(page._crossReference);\n                dictionary.update('S', _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('C'));\n                dictionary.update('I', shapeAnnotation.cloudIntensity);\n                polylineAnnotation._dictionary.update('BE', dictionary);\n                var rectDifferences = JSON.parse(shapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    polylineAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(shapeAnnotation, polylineAnnotation);\n            polylineAnnotation.setAppearance(true);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                polylineAnnotation.setValues('CustomData', JSON.stringify(shapeAnnotation.customData));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.allowedInteractions)) {\n                polylineAnnotation.setValues('AllowedInteractions', JSON.stringify(shapeAnnotation.allowedInteractions));\n            }\n            page.annotations.add(polylineAnnotation);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.enableShapeLabel) && shapeAnnotation.enableShapeLabel) {\n            var labelBounds = JSON.parse(shapeAnnotation.labelBounds.toString());\n            var left = this.convertPixelToPoint(labelBounds.left);\n            var top_4 = this.convertPixelToPoint(labelBounds.top);\n            if (shapeAnnotation.shapeAnnotationType === 'Line') {\n                top_4 = top_4 - 5;\n            }\n            var labelWidth = this.convertPixelToPoint(labelBounds.width);\n            var labelHeight = this.convertPixelToPoint(labelBounds.height);\n            var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFreeTextAnnotation(top_4, left, labelWidth, labelHeight);\n            annotation.author = shapeAnnotation.author;\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.modifiedDate) && !isNaN(Date.parse(shapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(shapeAnnotation.modifiedDate));\n                annotation.modifiedDate = dateValue;\n            }\n            annotation._dictionary.set('NM', shapeAnnotation.annotName.toString() + 'freeText');\n            annotation.lineEndingStyle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow;\n            annotation.annotationIntent = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextTypeWriter;\n            var fontSize = 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.fontSize)) {\n                fontSize = parseFloat(shapeAnnotation.fontSize);\n            }\n            fontSize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontSize) && !isNaN(fontSize) && fontSize > 0 ? fontSize : 16;\n            var fontFamily = this.getFontFamily(shapeAnnotation.fontFamily);\n            var fontJson = {};\n            var fontStyle = this.getFontStyle(fontJson);\n            annotation.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(fontFamily, this.convertPixelToPoint(fontSize), fontStyle);\n            annotation.subject = 'Text Box';\n            annotation.text = '';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.labelContent)) {\n                if (shapeAnnotation.labelContent.toString() !== null) {\n                    annotation.text = shapeAnnotation.labelContent.toString();\n                }\n            }\n            annotation.rotationAngle = this.getRotateAngle(shapeAnnotation.rotateAngle);\n            annotation.border = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            if (Object.prototype.hasOwnProperty.call(shapeAnnotation, 'thickness')) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.thickness)) {\n                    var thickness = parseInt(shapeAnnotation.thickness.toString(), 10);\n                    annotation.border.width = thickness;\n                }\n            }\n            annotation.opacity = 1.0;\n            if (Object.prototype.hasOwnProperty.call(shapeAnnotation, 'opacity')) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.opacity)) {\n                    annotation.opacity = parseFloat(shapeAnnotation.opacity);\n                }\n            }\n            var color = JSON.parse(shapeAnnotation.labelBorderColor);\n            var color1 = [color.r, color.g, color.b];\n            annotation.borderColor = color1;\n            var fillColor = JSON.parse(shapeAnnotation.labelFillColor);\n            var color2 = [fillColor.r, fillColor.g, fillColor.b];\n            annotation.color = color2;\n            var textMarkupColor = JSON.parse(shapeAnnotation.fontColor);\n            var color3 = [textMarkupColor.r, textMarkupColor.g, textMarkupColor.b];\n            annotation.textMarkUpColor = color3;\n            var commentsDetails = annotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    annotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], annotation.bounds));\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.customData)) {\n                annotation.setValues('CustomData', shapeAnnotation.customData);\n            }\n            page.annotations.add(annotation);\n        }\n    };\n    /**\n     * @private\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.saveInkSignature = function (details, page) {\n        var inkSignatureAnnotation = details;\n        var bounds = JSON.parse(inkSignatureAnnotation.bounds);\n        var stampObjects = JSON.parse(inkSignatureAnnotation.data.toString());\n        var rotationAngle = this.getInkRotateAngle(page.rotation.toString());\n        var left = this.convertPixelToPoint(bounds.x);\n        var top = this.convertPixelToPoint(bounds.y);\n        var width = this.convertPixelToPoint(bounds.width);\n        var height = this.convertPixelToPoint(bounds.height);\n        var opacity = inkSignatureAnnotation.opacity;\n        var thickness = parseInt(inkSignatureAnnotation.thickness.toString(), 10);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.strokeColor)) {\n            var strokeColor = JSON.parse(inkSignatureAnnotation.strokeColor);\n            var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n            inkSignatureAnnotation.color = color;\n        }\n        var minimumX = -1;\n        var minimumY = -1;\n        var maximumX = -1;\n        var maximumY = -1;\n        var drawingPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPath();\n        for (var p = 0; p < stampObjects.length; p++) {\n            var val = stampObjects[parseInt(p.toString(), 10)];\n            drawingPath.addLine(val.x, val.y, 0, 0);\n        }\n        var rotatedPath = this.getRotatedPathForMinMax(drawingPath._points, rotationAngle);\n        for (var k = 0; k < rotatedPath.points.length; k += 2) {\n            var value = rotatedPath.points[parseInt(k.toString(), 10)];\n            if (minimumX === -1) {\n                minimumX = value[0];\n                minimumY = value[1];\n                maximumX = value[0];\n                maximumY = value[1];\n            }\n            else {\n                var point1 = value[0];\n                var point2 = value[1];\n                if (minimumX >= point1) {\n                    minimumX = point1;\n                }\n                if (minimumY >= point2) {\n                    minimumY = point2;\n                }\n                if (maximumX <= point1) {\n                    maximumX = point1;\n                }\n                if (maximumY <= point2) {\n                    maximumY = point2;\n                }\n            }\n        }\n        var newDifferenceX = (maximumX - minimumX) / width;\n        var newDifferenceY = (maximumY - minimumY) / height;\n        if (newDifferenceX === 0) {\n            newDifferenceX = 1;\n        }\n        else if (newDifferenceY === 0) {\n            newDifferenceY = 1;\n        }\n        var linePoints = [];\n        var isNewValues = 0;\n        if (rotationAngle !== 0) {\n            for (var j = 0; j < stampObjects.length; j++) {\n                var val = stampObjects[parseInt(j.toString(), 10)];\n                var path = val['command'].toString();\n                if (path === 'M' && j !== isNewValues) {\n                    isNewValues = j;\n                    break;\n                }\n                linePoints.push((parseFloat(val['x'].toString())));\n                linePoints.push((parseFloat(val['y'].toString())));\n            }\n            var rotatedPoints = this.getRotatedPath(linePoints, rotationAngle);\n            linePoints = [];\n            for (var z = 0; z < rotatedPoints._points.length; z += 2) {\n                linePoints.push((rotatedPoints._points[parseInt(z.toString(), 10)][0] - minimumX) / newDifferenceX + left);\n                linePoints.push(page.size[1] - (rotatedPoints._points[parseInt(z.toString(), 10)][1] - minimumY) / newDifferenceY - top);\n            }\n        }\n        else {\n            for (var j = 0; j < stampObjects.length; j++) {\n                var val = stampObjects[parseInt(j.toString(), 10)];\n                var path = val['command'].toString();\n                if (path === 'M' && j !== isNewValues) {\n                    isNewValues = j;\n                    break;\n                }\n                linePoints.push(((val.x - minimumX) / newDifferenceX) + left);\n                var newX = ((val.y - minimumY) / newDifferenceY);\n                linePoints.push(page.size[1] - newX - top);\n            }\n        }\n        var colors = [inkSignatureAnnotation.color[0], inkSignatureAnnotation.color[1], inkSignatureAnnotation.color[2]];\n        var inkAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfInkAnnotation([left, top, width, height], linePoints);\n        var bound = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect();\n        bound = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(inkAnnotation.bounds.x, (page.size[1] - (inkAnnotation.bounds.y + inkAnnotation.bounds.height)), inkAnnotation.bounds.width, inkAnnotation.bounds.height);\n        inkAnnotation.bounds = bound;\n        inkAnnotation.color = colors;\n        linePoints = [];\n        if (isNewValues > 0) {\n            if (rotationAngle !== 0) {\n                var pathCollection = [];\n                for (var i = isNewValues; i < stampObjects.length; i++) {\n                    var val = stampObjects[parseInt(i.toString(), 10)];\n                    var path = val['command'].toString();\n                    if (path === 'M' && i !== isNewValues) {\n                        pathCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push(val['x']);\n                    linePoints.push(val['y']);\n                }\n                if (linePoints.length > 0) {\n                    pathCollection.push(linePoints);\n                }\n                for (var g = 0; g < pathCollection.length; g++) {\n                    var graphicsPoints = [];\n                    var pointsCollections = pathCollection[parseInt(g.toString(), 10)];\n                    if (pointsCollections.length > 0) {\n                        var rotatedPoints = this.getRotatedPath(pointsCollections, rotationAngle);\n                        for (var z = 0; z < rotatedPoints._points.length; z += 2) {\n                            graphicsPoints.push((rotatedPoints._points[parseInt(z.toString(), 10)][0] - minimumX) / newDifferenceX + left);\n                            graphicsPoints.push(page.size[1] - (rotatedPoints._points[parseInt(z.toString(), 10)][1]\n                                - minimumY) / newDifferenceY - top);\n                        }\n                        inkAnnotation.inkPointsCollection.push(graphicsPoints);\n                    }\n                    graphicsPoints = [];\n                }\n            }\n            else {\n                for (var i = isNewValues; i < stampObjects.length; i++) {\n                    var val = stampObjects[parseInt(i.toString(), 10)];\n                    var path = val['command'].toString();\n                    if (path === 'M' && i !== isNewValues) {\n                        inkAnnotation.inkPointsCollection.push(linePoints);\n                        linePoints = [];\n                    }\n                    linePoints.push((val['x'] - minimumX) / newDifferenceX + left);\n                    var newX = ((val['y'] - minimumY) / newDifferenceY);\n                    linePoints.push(page.size[1] - newX - top);\n                }\n                if (linePoints.length > 0) {\n                    inkAnnotation.inkPointsCollection.push(linePoints);\n                }\n            }\n        }\n        var isLock = this.checkAnnotationLock(inkSignatureAnnotation);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.author) || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.author) && inkSignatureAnnotation.author === '')) {\n            inkSignatureAnnotation.author = 'Guest';\n        }\n        else {\n            inkAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.author) ? inkSignatureAnnotation.author.toString() !== '' ? inkSignatureAnnotation.author.toString() : 'Guest' : 'Guest';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.subject) && inkSignatureAnnotation.subject !== '') {\n            inkAnnotation.subject = inkSignatureAnnotation.subject.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.note)) {\n            inkAnnotation.text = inkSignatureAnnotation.note.toString();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.notes)) {\n            inkAnnotation.text = inkSignatureAnnotation.notes.toString();\n        }\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.modifiedDate) && !isNaN(Date.parse(inkSignatureAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(inkSignatureAnnotation.modifiedDate));\n            inkAnnotation.modifiedDate = dateValue;\n        }\n        var reviewDetails = inkSignatureAnnotation.review;\n        inkAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, inkAnnotation.bounds));\n        var commentsDetails = inkSignatureAnnotation.comments;\n        if (commentsDetails.length > 0) {\n            for (var i = 0; i < commentsDetails.length; i++) {\n                inkAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], inkAnnotation.bounds));\n            }\n        }\n        this.preserveIsLockProperty(inkSignatureAnnotation, inkAnnotation);\n        inkAnnotation.border.width = thickness;\n        inkAnnotation.opacity = opacity;\n        inkAnnotation._isEnableControlPoints = false;\n        inkAnnotation._dictionary.set('NM', inkSignatureAnnotation.annotName.toString());\n        inkAnnotation.rotationAngle = this.getRotateAngle(inkSignatureAnnotation.rotationAngle);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkSignatureAnnotation.customData)) {\n            inkAnnotation.setValues('CustomData', JSON.stringify(inkSignatureAnnotation.customData));\n        }\n        inkAnnotation.setAppearance(true);\n        page.annotations.add(inkAnnotation);\n        return inkSignatureAnnotation;\n    };\n    /**\n     * @private\n     * @param {number[]} linePoints - points\n     * @param {number} rotationAngle - rotateAngle\n     * @returns {PdfPath} - graphicsPath\n     */\n    AnnotationRenderer.prototype.getRotatedPath = function (linePoints, rotationAngle) {\n        var docPath = this.getRotatedPoints(linePoints, rotationAngle);\n        var graphicsPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPath();\n        for (var j = 0; j < docPath.points.length; j += 2) {\n            graphicsPath.addLine(docPath.points[parseInt(j.toString(), 10)][0], docPath.points[parseInt(j.toString(), 10)][1], docPath.points[parseInt((j + 1).toString(), 10)][0], docPath.points[j + 1][1]);\n        }\n        return graphicsPath;\n    };\n    AnnotationRenderer.prototype.getRotationMatrix = function (angleInDegrees) {\n        var angleInRadians = angleInDegrees * (Math.PI / 180);\n        var cosTheta = Math.cos(angleInRadians);\n        var sinTheta = Math.sin(angleInRadians);\n        return [\n            [cosTheta, -sinTheta, 0],\n            [sinTheta, cosTheta, 0],\n            [0, 0, 1]\n        ];\n    };\n    AnnotationRenderer.prototype.getRotatedPoints = function (pointsCollection, rotationAngle) {\n        var graphicsPath = new Path();\n        for (var j = 0; j < pointsCollection.length; j += 2) {\n            graphicsPath.moveTo(pointsCollection[parseInt(j.toString(), 10)], pointsCollection[parseInt((j + 1).toString(), 10)]);\n            graphicsPath.lineTo(0, 0);\n        }\n        var rotationMatrix = this.getRotationMatrix(rotationAngle);\n        graphicsPath.transform(rotationMatrix);\n        return graphicsPath;\n    };\n    /**\n     * Rotates a path based on the provided points collection and rotation angle.\n     * @param {number[]} pointsCollection - The collection of points to be rotated.\n     * @param {number} rotationAngle - The angle to rotate the points, in degrees.\n     * @returns {Path} - The rotated graphics path.\n     * @private\n     */\n    AnnotationRenderer.prototype.getRotatedPathForMinMax = function (pointsCollection, rotationAngle) {\n        var graphicsPath = new Path();\n        for (var j = 0; j < pointsCollection.length; j += 2) {\n            graphicsPath.moveTo(pointsCollection[parseInt(j.toString(), 10)][0], pointsCollection[parseInt(j.toString(), 10)][1]);\n            graphicsPath.lineTo(pointsCollection[parseInt((j + 1).toString(), 10)][0], pointsCollection[parseInt((j + 1).toString(), 10)][1]);\n        }\n        var rotationMatrix = this.getRotationMatrix(rotationAngle);\n        graphicsPath.transform(rotationMatrix);\n        return graphicsPath;\n    };\n    /**\n     * @param {any} details -details\n     * @param {PdfDocument} loadedDocument - loadedDocument\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addTextMarkup = function (details, loadedDocument) {\n        var markupAnnotation = details;\n        var pageNo = parseInt(markupAnnotation['pageNumber'].toString(), 10);\n        var page = loadedDocument.getPage(pageNo);\n        var annotationtypes = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotation();\n        switch (markupAnnotation.textMarkupAnnotationType.toString()) {\n            case 'Highlight':\n                annotationtypes.textMarkupType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.highlight;\n                break;\n            case 'Strikethrough':\n                annotationtypes.textMarkupType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.strikeOut;\n                break;\n            case 'Underline':\n                annotationtypes.textMarkupType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.underline;\n                break;\n            case 'Squiggly':\n                annotationtypes.textMarkupType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.squiggly;\n                break;\n        }\n        var bounds = JSON.parse(markupAnnotation.bounds);\n        var boundsCollection = [];\n        for (var i = 0; i < bounds.length; i++) {\n            var bound = bounds[parseInt(i.toString(), 10)];\n            var cropValues = this.getCropBoxValue(page, true);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bound['left'])) {\n                boundsCollection.push(new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(cropValues.x + this.convertPixelToPoint(bound['left']), cropValues.y + this.convertPixelToPoint(bound['top']), Object.prototype.hasOwnProperty.call(bound, 'width') ? this.convertPixelToPoint(bound['width']) : 0, Object.prototype.hasOwnProperty.call(bound, 'height') ? this.convertPixelToPoint(bound['height']) : 0));\n            }\n        }\n        var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotation(null, 0, 0, 0, 0);\n        if (boundsCollection.length > 0) {\n            annotation.bounds = { x: boundsCollection[0].x, y: boundsCollection[0].y,\n                width: boundsCollection[0].width, height: boundsCollection[0].height };\n        }\n        annotation.textMarkupType = annotationtypes.textMarkupType;\n        var isLock = this.checkAnnotationLock(markupAnnotation);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.author) || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.author) && markupAnnotation.author === '')) {\n            markupAnnotation.author = 'Guest';\n        }\n        else {\n            annotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.author) ? markupAnnotation.author.toString() !== '' ? markupAnnotation.author.toString() : 'Guest' : 'Guest';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.subject) && markupAnnotation.subject !== '') {\n            annotation.subject = markupAnnotation.subject.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.note)) {\n            annotation.text = markupAnnotation.note.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.annotationRotation)) {\n            annotation.rotateAngle = this.getRotateAngle(markupAnnotation.annotationRotation);\n        }\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.modifiedDate) && !isNaN(Date.parse(markupAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(markupAnnotation.modifiedDate));\n            annotation.modifiedDate = dateValue;\n        }\n        annotation._dictionary.set('NM', markupAnnotation.annotName.toString());\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.color)) {\n            var annotColor = JSON.parse(markupAnnotation.color);\n            var color = [annotColor.r, annotColor.g, annotColor.b];\n            annotation.color = color;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.opacity)) {\n            annotation.opacity = markupAnnotation.opacity;\n        }\n        if (boundsCollection.length > 0) {\n            // Don't need to set bounds explicitly for text markup annotation\n            var boundArrayCollection = [];\n            for (var i = 0; i < boundsCollection.length; i++) {\n                var _a = boundsCollection[parseInt(i.toString(), 10)], x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n                if (x !== 0 && y !== 0 && width !== 0 && height !== 0) {\n                    boundArrayCollection.push([x, y, width, height]);\n                }\n            }\n            annotation.boundsCollection = boundArrayCollection;\n        }\n        var commentsDetails = markupAnnotation.comments;\n        if (commentsDetails.length > 0) {\n            for (var i = 0; i < commentsDetails.length; i++) {\n                annotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], annotation.bounds));\n            }\n        }\n        var reviewDetails = markupAnnotation.review;\n        annotation.reviewHistory.add(this.addReviewCollections(reviewDetails, annotation.bounds));\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.color)) {\n            var annotColor = JSON.parse(markupAnnotation.color);\n            var color = [annotColor.r, annotColor.g, annotColor.b];\n            annotation.textMarkUpColor = color;\n        }\n        this.preserveIsLockProperty(markupAnnotation, annotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.customData)) {\n            annotation.setValues('CustomData', JSON.stringify(markupAnnotation.customData));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.allowedInteractions)) {\n            annotation.setValues('AllowedInteractions', JSON.stringify(markupAnnotation.allowedInteractions));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.textMarkupContent)) {\n            annotation._dictionary.set('TextMarkupContent', markupAnnotation.textMarkupContent.toString());\n        }\n        annotation.setAppearance(true);\n        page.annotations.add(annotation);\n    };\n    /**\n     * @private\n     * @param {PdfPage} page - page\n     * @param {boolean} isPath - path\n     * @returns {PointBase} - points\n     */\n    AnnotationRenderer.prototype.getCropBoxValue = function (page, isPath) {\n        var cropBoxX = 0;\n        var cropBoxY = 0;\n        if (page != null) {\n            cropBoxX = !isPath ? page.cropBox[0] : 0;\n            cropBoxY = !isPath ? page.cropBox[1] : 0;\n        }\n        return { x: cropBoxX, y: cropBoxY };\n    };\n    AnnotationRenderer.prototype.getBothCropBoxValue = function (page) {\n        var cropBoxX = page.cropBox[0];\n        var cropBoxY = page.cropBox[1];\n        return [cropBoxX, cropBoxY];\n    };\n    AnnotationRenderer.prototype.preserveIsLockProperty = function (annotation, annotPDF) {\n        var isLock = this.checkAnnotationLock(annotation);\n        var isPrint = false;\n        var isCommentLock = false;\n        if (annotation.isCommentLock && annotation['isCommentLock'] !== null) {\n            isCommentLock = Boolean(annotation['isCommentLock'].toString());\n        }\n        if (annotation.isPrint && annotation['isPrint'] !== null) {\n            isPrint = Boolean(annotation['isPrint'].toString());\n        }\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation.isLocked) && annotation.isLocked) || isLock) {\n            isLock = true;\n        }\n        if (isLock && isCommentLock && isPrint) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly;\n        }\n        else if (isLock && isCommentLock) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly;\n        }\n        else if (isLock && isPrint) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print;\n        }\n        else if (isCommentLock && isPrint) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly;\n        }\n        else if (isLock) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked;\n        }\n        else if (isCommentLock) {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly;\n        }\n        else {\n            annotPDF.flags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print;\n        }\n    };\n    /**\n     * @private\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addCustomStampAnnotation = function (details, page) {\n        var stampAnnotation = details;\n        var bounds = JSON.parse(stampAnnotation.bounds);\n        var pageNo = parseInt(stampAnnotation['pageNumber'].toString(), 10);\n        var cropValues = this.getCropBoxValue(page, false);\n        var left = 0;\n        var top = 0;\n        var graphics = page.graphics;\n        var isTemplate = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.template) && (stampAnnotation.template !== '')) ? true : false;\n        if (Object.prototype.hasOwnProperty.call(stampAnnotation, 'wrapperBounds') && !isTemplate) {\n            var wrapperBounds = stampAnnotation.wrapperBounds;\n            var boundsXY = this.calculateBoundsXY(wrapperBounds, bounds, pageNo, page);\n            left = boundsXY.x;\n            top = boundsXY.y;\n        }\n        else {\n            left = this.convertPixelToPoint(bounds.left);\n            top = this.convertPixelToPoint(bounds.top);\n        }\n        var cropX = 0;\n        var cropY = 0;\n        if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        left += cropX;\n        top += cropY;\n        var width = this.convertPixelToPoint(bounds.width);\n        var height = this.convertPixelToPoint(bounds.height);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.stampAnnotationType) && (stampAnnotation.stampAnnotationType === 'image') && (stampAnnotation.stampAnnotationPath !== ' ') && !isTemplate) {\n            if (page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90 || page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n                width = this.convertPixelToPoint((bounds.height));\n                height = this.convertPixelToPoint((bounds.width));\n            }\n        }\n        var opacity = stampAnnotation.opacity;\n        var rotateAngle = stampAnnotation.rotateAngle;\n        var isLock = false;\n        if (Object.prototype.hasOwnProperty.call(stampAnnotation, 'annotationSettings') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.annotationSettings)) {\n            var annotationSettings = stampAnnotation.annotationSettings;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotationSettings.isLock)) {\n                isLock = annotationSettings.isLock;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.stampAnnotationType) && (stampAnnotation.stampAnnotationType === 'image') && (stampAnnotation.stampAnnotationPath !== ' ') || isTemplate) {\n            var rubberStampAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotation(left, top, width, height);\n            page.annotations.add(rubberStampAnnotation);\n            if (isTemplate) {\n                var appearance = rubberStampAnnotation.appearance.normal;\n                var dictionary = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary(page._crossReference);\n                var state = appearance.graphics.save();\n                appearance.graphics.setTransparency(opacity);\n                var template = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTemplate(stampAnnotation.template, dictionary._crossReference);\n                template._isExported = true;\n                template._appearance = stampAnnotation.template;\n                template._crossReference = dictionary._crossReference;\n                template._size = [stampAnnotation.templateSize[0], stampAnnotation.templateSize[1]];\n                var bounds_1 = { x: 0, y: 0, width: width, height: height };\n                appearance.graphics.drawTemplate(template, bounds_1);\n                appearance.graphics.restore(state);\n            }\n            else {\n                var imageUrl = (stampAnnotation['stampAnnotationPath'].toString()).split(',')[1];\n                var bytes = (0,_syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._decode)(imageUrl, false);\n                var bitmap = void 0;\n                if (bytes && bytes.length > 2 && ((bytes[0] === 255 && bytes[1] === 216) || (bytes[0] === 137 && bytes[1] === 80 &&\n                    bytes[2] === 78 && bytes[3] === 71 && bytes[4] === 13 && bytes[5] === 10 && bytes[6] === 26 && bytes[7] === 10))) {\n                    bitmap = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBitmap(bytes);\n                    var appearance = rubberStampAnnotation.appearance.normal;\n                    var state = appearance.graphics.save();\n                    appearance.graphics.setTransparency(opacity);\n                    appearance.graphics.drawImage(bitmap, 0, 0, width, height);\n                    appearance.graphics.restore(state);\n                }\n                else {\n                    var appearance = rubberStampAnnotation.appearance;\n                    var filterAnnot = this.pdfViewerBase.pngData.filter(function (nameStamp) { return nameStamp.name === stampAnnotation.annotName; });\n                    var dictionary = filterAnnot[0]._dictionary.get('AP');\n                    var pngDictionary = dictionary.get('N');\n                    appearance.normal = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTemplate(pngDictionary, page._crossReference);\n                }\n                rubberStampAnnotation.rotationAngle = this.getRubberStampRotateAngle(page.rotation, rotateAngle);\n            }\n            rubberStampAnnotation.opacity = opacity;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.note)) {\n                rubberStampAnnotation.text = stampAnnotation.note.toString();\n            }\n            rubberStampAnnotation._dictionary.set('NM', stampAnnotation.annotName.toString());\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.modifiedDate) && !isNaN(Date.parse(stampAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(stampAnnotation.modifiedDate));\n                rubberStampAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = stampAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    rubberStampAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], rubberStampAnnotation.bounds));\n                }\n            }\n            var reviewDetails = stampAnnotation.review;\n            rubberStampAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, rubberStampAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.author) && stampAnnotation.author) {\n                rubberStampAnnotation.author = stampAnnotation.author.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.subject) && stampAnnotation.subject) {\n                rubberStampAnnotation.subject = stampAnnotation.subject.toString();\n            }\n            this.preserveIsLockProperty(stampAnnotation, rubberStampAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.customData)) {\n                rubberStampAnnotation.setValues('CustomData', JSON.stringify(stampAnnotation.customData));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.icon)) {\n                rubberStampAnnotation.setValues('iconName', stampAnnotation.icon);\n            }\n        }\n        else {\n            var icon = stampAnnotation.icon.toString();\n            var stampColor = stampAnnotation.stampFillcolor.toString();\n            var fillColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.fillColor) ? stampAnnotation.fillColor.toString() : '#192760';\n            var isDynamic = stampAnnotation.isDynamicStamp.toString();\n            var textBrush = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBrush([0, 0, 0]);\n            var colors = [];\n            if (fillColor === '#192760') {\n                colors = [25, 39, 96];\n            }\n            else if (fillColor === '#516c30') {\n                colors = [81, 108, 48];\n            }\n            else if (fillColor === '#8a251a') {\n                colors = [138, 37, 26];\n            }\n            textBrush = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBrush(colors);\n            var stampBrush = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBrush([0, 0, 0]);\n            var stampcolors = [];\n            if (stampColor === '#e6eddf') {\n                stampcolors = [230, 237, 223];\n            }\n            else if (stampColor === '#f6dedd') {\n                stampcolors = [246, 222, 221];\n            }\n            else if (stampColor === '#dce3ef') {\n                stampcolors = [220, 227, 239];\n            }\n            textBrush = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBrush(colors);\n            stampBrush = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBrush(stampcolors);\n            var pens = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPen(colors, 1);\n            var rectangle = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(left, top, width, height);\n            if (page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90 || page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n                rectangle = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(left, top, height, width);\n            }\n            var rubberStampAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotation;\n            rubberStampAnnotation.bounds = rectangle;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.subject) && stampAnnotation.subject) {\n                rubberStampAnnotation.subject = stampAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.note)) {\n                rubberStampAnnotation.text = stampAnnotation.note.toString();\n            }\n            rubberStampAnnotation._dictionary.set('NM', stampAnnotation.annotName.toString());\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.modifiedDate) && !isNaN(Date.parse(stampAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(stampAnnotation.modifiedDate));\n                rubberStampAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = stampAnnotation.comments;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    rubberStampAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], rubberStampAnnotation.bounds));\n                }\n            }\n            var reviewDetails = stampAnnotation.review;\n            rubberStampAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, rubberStampAnnotation.bounds));\n            var isIconExists = false;\n            if (isDynamic !== 'true') {\n                isIconExists = this.getIconName(stampAnnotation, icon, rubberStampAnnotation);\n            }\n            var graphicsPath = void 0;\n            if (icon.trim() === 'Accepted' || icon.trim() === 'Rejected') {\n                graphicsPath = this.drawStampAsPath(stampAnnotation.stampAnnotationPath, rubberStampAnnotation, textBrush, stampBrush);\n            }\n            else if (isIconExists) {\n                if (page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90 || page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n                    rubberStampAnnotation.bounds = rectangle;\n                }\n                rubberStampAnnotation.rotationAngle = this.getRubberStampRotateAngle(page.rotation, stampAnnotation.rotateAngle);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.modifiedDate) && !isNaN(Date.parse(stampAnnotation.modifiedDate))) {\n                var dateValue_1;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.modifiedDate) && !isNaN(Date.parse(stampAnnotation.modifiedDate))) {\n                    dateValue_1 = new Date(Date.parse(stampAnnotation.modifiedDate));\n                    rubberStampAnnotation.modifiedDate = dateValue_1;\n                }\n            }\n            rubberStampAnnotation.opacity = opacity;\n            rubberStampAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.author) && stampAnnotation.author.toString() !== '' ? stampAnnotation.author.toString() : 'Guest';\n            this.preserveIsLockProperty(stampAnnotation, rubberStampAnnotation);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.customData)) {\n                rubberStampAnnotation.setValues('CustomData', JSON.stringify(stampAnnotation.customData));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.rotateAngle)) {\n                rubberStampAnnotation.setValues('rotateAngle', stampAnnotation.rotateAngle.toString());\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stampAnnotation.icon)) {\n                rubberStampAnnotation.setValues('iconName', stampAnnotation.icon.toString());\n            }\n            page.annotations.add(rubberStampAnnotation);\n            if (!isIconExists) {\n                var appearance = rubberStampAnnotation.appearance.normal;\n                appearance.graphics.drawRoundedRectangle(0, 0, rectangle.width, rectangle.height, 10, pens, stampBrush);\n                if (isDynamic === 'true') {\n                    var text = stampAnnotation.dynamicText.toString();\n                    var state = appearance.graphics.save();\n                    appearance.graphics.setTransparency(opacity);\n                    this.renderDynamicStamp(rubberStampAnnotation, icon, text, textBrush, rectangle, pens, page);\n                    appearance.graphics.restore(state);\n                    rubberStampAnnotation._dictionary.set('Name', _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('#23D' + icon.split(' ').join('')));\n                }\n                else {\n                    this.retriveDefaultWidth(icon.trim());\n                    var state = appearance.graphics.save();\n                    appearance.graphics.setTransparency(opacity);\n                    this.renderSignHereStamp(rubberStampAnnotation, rectangle, icon, textBrush, page, pens, graphicsPath);\n                    appearance.graphics.restore(state);\n                }\n                rubberStampAnnotation.rotationAngle = this.getRubberStampRotateAngle(page.rotation, rotateAngle);\n            }\n        }\n    };\n    /**\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addMeasure = function (details, page) {\n        var measureShapeAnnotation = details;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.shapeAnnotationType) && measureShapeAnnotation.shapeAnnotationType === 'Line') {\n            var points = JSON.parse(measureShapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var lineAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineAnnotation(linePoints);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.note)) {\n                lineAnnotation.text = measureShapeAnnotation.note.toString();\n            }\n            lineAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.author) && measureShapeAnnotation.author.toString() !== '' ? measureShapeAnnotation.author.toString() : 'Guest';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.subject)) {\n                lineAnnotation.subject = measureShapeAnnotation.subject.toString();\n            }\n            lineAnnotation.lineIntent = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineIntent.lineDimension;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.annotName)) {\n                lineAnnotation.name = measureShapeAnnotation.annotName.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(measureShapeAnnotation.strokeColor);\n                lineAnnotation.color = [strokeColor.r, strokeColor.g, strokeColor.b];\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(measureShapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    lineAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    lineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    lineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.opacity)) {\n                lineAnnotation.opacity = measureShapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = measureShapeAnnotation.thickness;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.borderStyle) && measureShapeAnnotation.borderStyle !== '') {\n                lineBorder.style = this.getBorderStyle(measureShapeAnnotation.borderStyle);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.borderDashArray)) {\n                lineBorder.dash = [measureShapeAnnotation.borderDashArray, measureShapeAnnotation.borderDashArray];\n            }\n            lineAnnotation.border = lineBorder;\n            lineAnnotation.rotationAngle = this.getRotateAngle(measureShapeAnnotation.rotateAngle);\n            lineAnnotation.lineEndingStyle.begin = this.getLineEndingStyle(measureShapeAnnotation.lineHeadStart);\n            lineAnnotation.lineEndingStyle.end = this.getLineEndingStyle(measureShapeAnnotation.lineHeadEnd);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.modifiedDate) && !isNaN(Date.parse(measureShapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(measureShapeAnnotation.modifiedDate));\n                lineAnnotation.modifiedDate = dateValue;\n            }\n            lineAnnotation.caption.type = this.getCaptionType(measureShapeAnnotation.captionPosition);\n            var hasUniCode = /[\\u0600-\\u06FF]/.test(lineAnnotation.text);\n            lineAnnotation.caption.cap = !hasUniCode && measureShapeAnnotation.caption;\n            lineAnnotation.leaderExt = measureShapeAnnotation.leaderLength;\n            lineAnnotation.leaderLine = measureShapeAnnotation.leaderLineExtension;\n            var commentsDetails = measureShapeAnnotation.comments;\n            var bounds = JSON.parse(measureShapeAnnotation.bounds);\n            lineAnnotation.bounds = bounds;\n            lineAnnotation.bounds.x = bounds.left;\n            lineAnnotation.bounds.y = bounds.top;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    lineAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], lineAnnotation.bounds));\n                }\n            }\n            var reviewDetails = measureShapeAnnotation.review;\n            lineAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, lineAnnotation.bounds));\n            lineAnnotation._dictionary.update('LLO', measureShapeAnnotation.leaderLineOffset);\n            this.preserveIsLockProperty(measureShapeAnnotation, lineAnnotation);\n            var measureDetail = JSON.parse(measureShapeAnnotation.calibrate);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail)) {\n                lineAnnotation._dictionary.set('Measure', this.setMeasureDictionary(measureDetail));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.customData)) {\n                lineAnnotation.setValues('CustomData', JSON.stringify(measureShapeAnnotation.customData));\n            }\n            if (measureShapeAnnotation.allowedInteractions && measureShapeAnnotation['allowedInteractions'] != null) {\n                lineAnnotation.setValues('AllowedInteractions', JSON.stringify(measureShapeAnnotation['allowedInteractions']));\n            }\n            lineAnnotation.setAppearance(true);\n            page.annotations.add(lineAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.shapeAnnotationType) && measureShapeAnnotation.shapeAnnotationType === 'Polyline') {\n            var points = JSON.parse(measureShapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var polylineAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolyLineAnnotation(linePoints);\n            polylineAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.author) && measureShapeAnnotation.author.toString() !== '' ? measureShapeAnnotation.author.toString() : 'Guest';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.note)) {\n                polylineAnnotation.text = measureShapeAnnotation.note.toString();\n            }\n            polylineAnnotation._dictionary.set('NM', measureShapeAnnotation.annotName.toString());\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.subject)) {\n                polylineAnnotation.subject = measureShapeAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(measureShapeAnnotation.strokeColor);\n                var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n                polylineAnnotation.color = color;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(measureShapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    polylineAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    polylineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    polylineAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.opacity)) {\n                polylineAnnotation.opacity = measureShapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = measureShapeAnnotation.thickness;\n            lineBorder.style = this.getBorderStyle(measureShapeAnnotation.borderStyle);\n            lineBorder.dash = measureShapeAnnotation.borderDashArray;\n            polylineAnnotation.border = lineBorder;\n            polylineAnnotation.rotationAngle = this.getRotateAngle(measureShapeAnnotation.rotateAngle);\n            polylineAnnotation.beginLineStyle = this.getLineEndingStyle(measureShapeAnnotation.lineHeadStart);\n            polylineAnnotation.endLineStyle = this.getLineEndingStyle(measureShapeAnnotation.lineHeadEnd);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.modifiedDate) && !isNaN(Date.parse(measureShapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(measureShapeAnnotation.modifiedDate));\n                polylineAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = measureShapeAnnotation.comments;\n            var bounds = JSON.parse(measureShapeAnnotation.bounds);\n            polylineAnnotation.bounds = bounds;\n            polylineAnnotation.bounds.x = bounds.left;\n            polylineAnnotation.bounds.y = bounds.top;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    polylineAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], polylineAnnotation.bounds));\n                }\n            }\n            var reviewDetails = measureShapeAnnotation.review;\n            polylineAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, polylineAnnotation.bounds));\n            polylineAnnotation._dictionary.set('IT', _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfName.get(measureShapeAnnotation.indent.toString()));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.isCloudShape) && measureShapeAnnotation.isCloudShape) {\n                var dictionary = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary(page._crossReference);\n                dictionary.update('S', _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('C'));\n                dictionary.update('I', measureShapeAnnotation.cloudIntensity);\n                polylineAnnotation._dictionary.update('BE', dictionary);\n                var rectDifferences = JSON.parse(measureShapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    polylineAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(measureShapeAnnotation, polylineAnnotation);\n            var measureDetail = JSON.parse(measureShapeAnnotation.calibrate);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail)) {\n                polylineAnnotation._dictionary.set('Measure', this.setMeasureDictionary(measureDetail));\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.customData)) {\n                polylineAnnotation.setValues('CustomData', JSON.stringify(measureShapeAnnotation.customData));\n            }\n            if (measureShapeAnnotation.allowedInteractions && measureShapeAnnotation['allowedInteractions'] !== null) {\n                polylineAnnotation.setValues('AllowedInteractions', JSON.stringify(measureShapeAnnotation['allowedInteractions']));\n            }\n            polylineAnnotation.setAppearance(true);\n            page.annotations.add(polylineAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.shapeAnnotationType) && (measureShapeAnnotation.shapeAnnotationType === 'Polyline') && (measureShapeAnnotation.shapeAnnotationType === 'PolygonRadius') || (measureShapeAnnotation.shapeAnnotationType === 'Circle')) {\n            var circleMeasurementAnnotation = this.addCircleMeasurementAnnotation(measureShapeAnnotation, page);\n            page.annotations.add(circleMeasurementAnnotation);\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.shapeAnnotationType) && (measureShapeAnnotation.shapeAnnotationType === 'Polygon') && measureShapeAnnotation.indent !== 'PolygonRadius') {\n            var points = JSON.parse(measureShapeAnnotation.vertexPoints);\n            var linePoints = this.getSaveVertexPoints(points, page);\n            var polygonAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolygonAnnotation(linePoints);\n            polygonAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.author) && measureShapeAnnotation.author.toString() !== '' ? measureShapeAnnotation.author.toString() : 'Guest';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.note)) {\n                polygonAnnotation.text = measureShapeAnnotation.note.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.annotName)) {\n                polygonAnnotation.name = measureShapeAnnotation.annotName.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.subject)) {\n                polygonAnnotation.subject = measureShapeAnnotation.subject.toString();\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.strokeColor)) {\n                var strokeColor = JSON.parse(measureShapeAnnotation.strokeColor);\n                polygonAnnotation.color = [strokeColor.r, strokeColor.g, strokeColor.b];\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.fillColor)) {\n                var fillColor = JSON.parse(measureShapeAnnotation.fillColor);\n                if (!this.isTransparentColor(fillColor)) {\n                    var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                    polygonAnnotation.innerColor = innerColor;\n                }\n                if (fillColor.a < 1 && fillColor.a > 0) {\n                    polygonAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                    fillColor.a = 1;\n                }\n                else {\n                    polygonAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.opacity)) {\n                polygonAnnotation.opacity = measureShapeAnnotation.opacity;\n            }\n            var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n            lineBorder.width = measureShapeAnnotation.thickness;\n            lineBorder.style = measureShapeAnnotation.borderStyle;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.borderDashArray)) {\n                lineBorder.dash = [measureShapeAnnotation.borderDashArray, measureShapeAnnotation.borderDashArray];\n            }\n            polygonAnnotation.border = lineBorder;\n            polygonAnnotation._dictionary.update('IT', _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfName.get(measureShapeAnnotation.indent.toString()));\n            polygonAnnotation.rotationAngle = this.getRotateAngle(measureShapeAnnotation.rotateAngle);\n            var dateValue = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.modifiedDate) && !isNaN(Date.parse(measureShapeAnnotation.modifiedDate))) {\n                dateValue = new Date(Date.parse(measureShapeAnnotation.modifiedDate));\n                polygonAnnotation.modifiedDate = dateValue;\n            }\n            var commentsDetails = measureShapeAnnotation.comments;\n            var bounds = JSON.parse(measureShapeAnnotation.bounds);\n            polygonAnnotation.bounds = bounds;\n            polygonAnnotation.bounds.x = bounds.left;\n            polygonAnnotation.bounds.y = bounds.top;\n            if (commentsDetails.length > 0) {\n                for (var i = 0; i < commentsDetails.length; i++) {\n                    polygonAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], polygonAnnotation.bounds));\n                }\n            }\n            var reviewDetails = measureShapeAnnotation.review;\n            polygonAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, polygonAnnotation.bounds));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.isCloudShape) && Boolean(measureShapeAnnotation['isCloudShape'].toString())) {\n                polygonAnnotation.borderEffect.style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n                polygonAnnotation.borderEffect.intensity = measureShapeAnnotation['cloudIntensity'];\n                var rectDifferences = JSON.parse(measureShapeAnnotation.rectangleDifference);\n                if (rectDifferences.length > 0) {\n                    var rd = this.getRDValues(rectDifferences);\n                    polygonAnnotation._dictionary.update('RD', rd);\n                }\n            }\n            this.preserveIsLockProperty(measureShapeAnnotation, polygonAnnotation);\n            var measureDetail = JSON.parse(measureShapeAnnotation.calibrate);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail)) {\n                polygonAnnotation._dictionary.set('Measure', this.setMeasureDictionary(measureDetail));\n                if (measureShapeAnnotation['indent'] === 'PolygonVolume' && Object.prototype.hasOwnProperty.call(measureDetail, 'depth')) {\n                    polygonAnnotation._dictionary.update('Depth', measureDetail['depth']);\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.customData)) {\n                polygonAnnotation.setValues('CustomData', JSON.stringify(measureShapeAnnotation.customData));\n            }\n            if (measureShapeAnnotation.allowedInteractions && measureShapeAnnotation['allowedInteractions'] != null) {\n                polygonAnnotation.setValues('AllowedInteractions', JSON.stringify(measureShapeAnnotation['allowedInteractions']));\n            }\n            polygonAnnotation.setAppearance(true);\n            page.annotations.add(polygonAnnotation);\n        }\n    };\n    /**\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addStickyNotes = function (details, page) {\n        var popUpAnnotation = details;\n        var bounds = JSON.parse(popUpAnnotation.bounds);\n        var cropValues = this.getCropBoxValue(page, false);\n        var left = this.convertPixelToPoint(bounds.left);\n        var top = this.convertPixelToPoint(bounds.top);\n        var width = this.convertPixelToPoint(bounds.width);\n        var height = this.convertPixelToPoint(bounds.height);\n        var cropX = 0;\n        var cropY = 0;\n        if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupAnnotation(null, cropX + left, cropY + top, width, height);\n        if (popUpAnnotation['author'] === null) {\n            popUpAnnotation['author'] = 'Guest';\n        }\n        if (popUpAnnotation['note'] != null) {\n            annotation.text = popUpAnnotation['note'].toString();\n        }\n        annotation.author = popUpAnnotation['author'].toString();\n        if (popUpAnnotation['subject'] != null) {\n            annotation.subject = popUpAnnotation['subject'].toString();\n        }\n        annotation._dictionary.set('NM', popUpAnnotation.annotName.toString());\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popUpAnnotation.modifiedDate) && !isNaN(Date.parse(popUpAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(popUpAnnotation.modifiedDate));\n            annotation.modifiedDate = dateValue;\n        }\n        var commentsDetails = popUpAnnotation.comments;\n        if (commentsDetails.length > 0) {\n            for (var i = 0; i < commentsDetails.length; i++) {\n                annotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], annotation.bounds));\n            }\n        }\n        var reviewDetails = popUpAnnotation.review;\n        annotation.reviewHistory.add(this.addReviewCollections(reviewDetails, annotation.bounds));\n        var color = [255, 255, 51];\n        annotation.color = color;\n        annotation.opacity = popUpAnnotation.opacity;\n        annotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.comment;\n        this.preserveIsLockProperty(popUpAnnotation, annotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popUpAnnotation.customData)) {\n            annotation.setValues('CustomData', JSON.stringify(popUpAnnotation.customData));\n        }\n        page.annotations.add(annotation);\n    };\n    AnnotationRenderer.hasDynamicText = function (freeTextAnnotation) {\n        return Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'dynamicText') &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.dynamicText.toString());\n    };\n    AnnotationRenderer.setFontFromKeys = function (freeTextAnnotation, annotation, textFont, fontSize, fontStyle) {\n        var font = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.tryGetFontFromKeys(textFont, freeTextAnnotation.dynamicText.toString(), fontSize, fontStyle);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(font)) {\n            annotation.font = font;\n            annotation.setAppearance(true);\n        }\n        else {\n            annotation.setAppearance(false);\n        }\n    };\n    /**\n     * @param {any} details - details\n     * @param {PdfPage} page - page\n     * @param {string} textFont - textFont\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.addFreeText = function (details, page, textFont) {\n        var freeTextAnnotation = details;\n        var bounds = JSON.parse(freeTextAnnotation.bounds);\n        var cropValues = this.getCropBoxValue(page, false);\n        var left = this.convertPixelToPoint(bounds.left);\n        var top = this.convertPixelToPoint(bounds.top);\n        var width = this.convertPixelToPoint(bounds.width);\n        var height = this.convertPixelToPoint(bounds.height);\n        var cropX = 0;\n        var cropY = 0;\n        if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFreeTextAnnotation(cropX + left, cropY + top, width, height);\n        annotation.setAppearance(true);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation['author'])) {\n            freeTextAnnotation['author'] = 'Guest';\n        }\n        annotation.author = freeTextAnnotation['author'].toString();\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.modifiedDate) && !isNaN(Date.parse(freeTextAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(freeTextAnnotation.modifiedDate));\n            annotation.modifiedDate = dateValue;\n        }\n        var reviewDetails = freeTextAnnotation.review;\n        annotation.reviewHistory.add(this.addReviewCollections(reviewDetails, annotation.bounds));\n        annotation._dictionary.set('NM', freeTextAnnotation.annotName.toString());\n        annotation.lineEndingStyle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow;\n        annotation.annotationIntent = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextTypeWriter;\n        var fontSize = 0;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.fontSize)) {\n            fontSize = parseFloat(freeTextAnnotation.fontSize);\n        }\n        fontSize = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontSize) && !isNaN(fontSize) && fontSize > 0 ? fontSize : 16; //default 16px\n        var fontFamily = this.getFontFamily(freeTextAnnotation.fontFamily);\n        var fontJson = {};\n        if (Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'font') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.font)) {\n            fontJson = freeTextAnnotation.font;\n        }\n        var fontStyle = this.getFontStyle(fontJson);\n        annotation.font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(fontFamily, this.convertPixelToPoint(fontSize), fontStyle);\n        if (AnnotationRenderer.hasDynamicText(freeTextAnnotation)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textFont) && Object.keys(textFont).length > 0) {\n                var fontKey = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.getFontKey(textFont, freeTextAnnotation.fontFamily.toLowerCase());\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontKey)) {\n                    var fontStream = textFont[\"\" + fontKey];\n                    fontStream = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.processFontStream(fontStream);\n                    var font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTrueTypeFont(fontStream, this.convertPixelToPoint(fontSize), fontStyle);\n                    var glyphPresent = _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_4__.PdfViewerUtils.isSupportedFont(freeTextAnnotation.dynamicText.toString(), font);\n                    annotation.setAppearance(glyphPresent);\n                    if (glyphPresent) {\n                        annotation.font = font;\n                    }\n                    else {\n                        AnnotationRenderer.setFontFromKeys(freeTextAnnotation, annotation, textFont, fontSize, fontStyle);\n                    }\n                }\n                else {\n                    AnnotationRenderer.setFontFromKeys(freeTextAnnotation, annotation, textFont, fontSize, fontStyle);\n                }\n            }\n            else {\n                try {\n                    annotation.font.measureString(freeTextAnnotation.dynamicText.toString());\n                }\n                catch (e) {\n                    annotation.setAppearance(false);\n                }\n            }\n        }\n        if (freeTextAnnotation['subject'] != null) {\n            annotation.subject = freeTextAnnotation['subject'].toString();\n        }\n        // Markup Text\n        annotation.text = '';\n        if (Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'dynamicText') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.dynamicText.toString())) {\n            // Markup Text\n            annotation.text = freeTextAnnotation.dynamicText.toString();\n        }\n        var rotateAngle = 'RotateAngle' + Math.abs(freeTextAnnotation.rotateAngle);\n        annotation.rotationAngle = this.getRotateAngle(rotateAngle);\n        var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n        lineBorder.width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.thickness) ? freeTextAnnotation.thickness : 1;\n        annotation.border = lineBorder;\n        annotation.border.width = lineBorder.width;\n        if (Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'padding') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.padding)) {\n            // let padding: PdfPaddings = new PdfPaddings(); // PdfPaddings not exist in ej2-pdf\n            // annotation.setPaddings(padding);  // setPaddings not exist\n        }\n        annotation.opacity = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.opacity) ? freeTextAnnotation.opacity : 1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.strokeColor)) {\n            var strokeColor = JSON.parse(freeTextAnnotation.strokeColor);\n            var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n            annotation.borderColor = color;\n            // Modified Implementation for setting border width for transparent border\n            if (!this.isTransparentColor(strokeColor)) {\n                annotation.border.width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.thickness) ? freeTextAnnotation.thickness : 0;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.fillColor)) {\n            var fillColor = JSON.parse(freeTextAnnotation.fillColor);\n            if (!this.isTransparentColor(fillColor)) {\n                var color = [fillColor.r, fillColor.g, fillColor.b];\n                if (freeTextAnnotation.isTransparentSet) {\n                    annotation.color = undefined;\n                }\n                else {\n                    annotation.color = color;\n                }\n            }\n            if (fillColor.a < 1 && fillColor.a > 0) {\n                annotation._dictionary.update('FillOpacity', fillColor.a);\n                fillColor.a = 1;\n            }\n            else {\n                annotation._dictionary.update('FillOpacity', fillColor.a);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.fontColor)) {\n            var textMarkupColor = JSON.parse(freeTextAnnotation.fontColor);\n            if (!this.isTransparentColor(textMarkupColor)) {\n                var fontColor = [textMarkupColor.r, textMarkupColor.g, textMarkupColor.b];\n                annotation.textMarkUpColor = fontColor;\n            }\n        }\n        var commentsDetails = freeTextAnnotation.comments;\n        if (commentsDetails.length > 0) {\n            for (var i = 0; i < commentsDetails.length; i++) {\n                annotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], annotation.bounds));\n            }\n        }\n        this.preserveIsLockProperty(freeTextAnnotation, annotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.customData)) {\n            annotation.setValues('CustomData', JSON.stringify(freeTextAnnotation.customData));\n        }\n        if (Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'textAlign') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.textAlign)) {\n            annotation.textAlignment = this.getPdfTextAlignment(freeTextAnnotation.textAlign.toString().toLowerCase());\n        }\n        if (Object.prototype.hasOwnProperty.call(freeTextAnnotation, 'allowedInteractions') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.allowedInteractions)) {\n            annotation.setValues('AllowedInteractions', JSON.stringify(freeTextAnnotation.allowedInteractions));\n        }\n        page.annotations.add(annotation);\n    };\n    AnnotationRenderer.prototype.renderSignHereStamp = function (rubberStampAnnotation, rectangle, icon, textBrush, page, pens, graphicsPath) {\n        var stringFormat = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStringFormat();\n        var font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica, 20, _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic);\n        stringFormat.alignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.center;\n        stringFormat.lineAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfVerticalAlignment.middle;\n        var point1 = [0, 0];\n        var point2 = [0, 0];\n        var drawingPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPath();\n        var appearance = rubberStampAnnotation.appearance.normal;\n        if (this.defaultHeight > 0 && this.defaultWidth > 0) {\n            appearance.graphics.scaleTransform(rectangle.width / (this.defaultWidth + 4), rectangle.height / 28.00);\n        }\n        point1 = [(this.defaultWidth / 2 + 1), 15, 0, 0];\n        point2 = [0, 0];\n        drawingPath.addLine(point1[0], point1[1], point2[0], point2[1]);\n        var pointValues = [drawingPath._points[0][0], drawingPath._points[0][1], 0, 0];\n        if (graphicsPath) {\n            var minX = Number.MAX_VALUE;\n            var minY = Number.MAX_VALUE;\n            var maxX = Number.MIN_VALUE;\n            var maxY = Number.MIN_VALUE;\n            for (var i = 0; i < graphicsPath._points.length; i++) {\n                var point = graphicsPath._points[parseInt(i.toString(), 10)];\n                minX = Math.min(minX, point[0]);\n                minY = Math.min(minY, point[1]);\n                maxX = Math.max(maxX, point[0]);\n                maxY = Math.max(maxY, point[1]);\n            }\n            var offsetX = (rectangle.width - (maxX - minX)) / 2 - minX;\n            var offsetY = (rectangle.height - (maxY - minY)) / 2 - minY;\n            for (var i = 0; i < graphicsPath._points.length; i++) {\n                graphicsPath._points[parseInt(i.toString(), 10)][0] += offsetX;\n                graphicsPath._points[parseInt(i.toString(), 10)][1] += offsetY;\n            }\n            rubberStampAnnotation.appearance.normal.graphics.drawPath(graphicsPath, pens, textBrush);\n        }\n        else {\n            appearance.graphics.drawString(icon.toUpperCase(), font, pointValues, pens, textBrush, stringFormat);\n        }\n    };\n    AnnotationRenderer.prototype.retriveDefaultWidth = function (subject) {\n        switch (subject.trim()) {\n            case 'Witness':\n                this.defaultWidth = 97.39;\n                this.defaultHeight = 16.84;\n                break;\n            case 'Initial Here':\n                this.defaultWidth = 151.345;\n                this.defaultHeight = 16.781;\n                break;\n            case 'Sign Here':\n                this.defaultWidth = 121.306;\n                this.defaultHeight = 16.899;\n                break;\n            default:\n                this.defaultWidth = 0;\n                this.defaultHeight = 0;\n                break;\n        }\n    };\n    AnnotationRenderer.prototype.renderDynamicStamp = function (rubberStampAnnotation, icon, text, textBrush, rectangle, pens, page) {\n        var stringFormat = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStringFormat();\n        stringFormat.alignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.left;\n        stringFormat.lineAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfVerticalAlignment.middle;\n        var stampFont = null;\n        var detailsFont = null;\n        var hasUniCode = false;\n        var regex = /[\\u0600-\\u06FF]/;\n        var flag = regex.test(text);\n        if (flag) {\n            hasUniCode = true;\n        }\n        if (hasUniCode) {\n            stampFont = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTrueTypeFont((0,_index__WEBPACK_IMPORTED_MODULE_3__.getArialFontData)(), this.pdfViewer.annotationModule.calculateFontSize(icon.toUpperCase(), rectangle) - 5, _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic);\n            detailsFont = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTrueTypeFont((0,_index__WEBPACK_IMPORTED_MODULE_3__.getArialFontData)(), this.pdfViewer.annotationModule.calculateFontSize(text.toUpperCase(), rectangle) - 5, _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic);\n        }\n        else {\n            stampFont = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica, this.pdfViewer.annotationModule.calculateFontSize(icon.toUpperCase(), rectangle) - 5, _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic);\n            detailsFont = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica, this.pdfViewer.annotationModule.calculateFontSize(text, rectangle) - 5, _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic);\n        }\n        var appearance = rubberStampAnnotation.appearance.normal;\n        var point1 = [0, 0];\n        var point2 = [0, 0];\n        var drawingPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPath();\n        point1 = [5, (rectangle.height / 3)];\n        point2 = [5, (rectangle.height - (detailsFont.size * 2))];\n        drawingPath.addLine(point1[0], point1[1], point2[0], point2[1]);\n        var stampTypeBounds = [drawingPath._points[0][0], drawingPath._points[0][1], 0, 0];\n        var stampTimeStampbounds = [drawingPath._points[1][0], drawingPath._points[1][1],\n            (rectangle.width - drawingPath._points[1][0]), (rectangle.height - drawingPath._points[1][1])];\n        appearance.graphics.drawString(icon.toUpperCase(), stampFont, stampTypeBounds, pens, textBrush, stringFormat);\n        appearance.graphics.drawString(text, detailsFont, stampTimeStampbounds, pens, textBrush, stringFormat);\n    };\n    AnnotationRenderer.prototype.calculateBoundsXY = function (wrapperBounds, bounds, pageNo, pdfPageBase) {\n        var boundsXY = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect();\n        var pageSize = this.pdfViewer.pdfRendererModule.getPageSize(pageNo);\n        if (pdfPageBase.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90) {\n            boundsXY.x = this.convertPixelToPoint(wrapperBounds.y);\n            boundsXY.y = this.convertPixelToPoint(pageSize.width - wrapperBounds.x - wrapperBounds.width);\n        }\n        else if (pdfPageBase.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180) {\n            boundsXY.x = this.convertPixelToPoint(pageSize.width - wrapperBounds.x - wrapperBounds.width);\n            boundsXY.y = this.convertPixelToPoint(pageSize.height - wrapperBounds.y - wrapperBounds.height);\n        }\n        else if (pdfPageBase.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n            boundsXY.x = this.convertPixelToPoint(pageSize.height - wrapperBounds.y - wrapperBounds.height);\n            boundsXY.y = this.convertPixelToPoint(wrapperBounds.x);\n        }\n        else {\n            boundsXY.x = this.convertPixelToPoint(wrapperBounds.x);\n            boundsXY.y = this.convertPixelToPoint(wrapperBounds.y);\n        }\n        return boundsXY;\n    };\n    AnnotationRenderer.prototype.setMeasurementUnit = function (unit) {\n        var measurementUnit;\n        switch (unit) {\n            case 'cm':\n                measurementUnit = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.centimeter;\n                break;\n            case 'in':\n                measurementUnit = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.inch;\n                break;\n            case 'mm':\n                measurementUnit = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.millimeter;\n                break;\n            case 'pt':\n                measurementUnit = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.point;\n                break;\n            case 'p':\n                measurementUnit = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfMeasurementUnit.pica;\n                break;\n        }\n        return measurementUnit;\n    };\n    AnnotationRenderer.prototype.getRubberStampRotateAngle = function (angleEnum, rotationAngle) {\n        var angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0;\n        switch (rotationAngle) {\n            case 0:\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0;\n                break;\n            case 90:\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90;\n                break;\n            case 180:\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180;\n                break;\n            case 270:\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270;\n                break;\n            default:\n                break;\n        }\n        angle = (angleEnum - angle + 4) % 4;\n        return angle;\n    };\n    AnnotationRenderer.prototype.getFontFamily = function (fontFamily) {\n        var font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica;\n        fontFamily = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontFamily) && fontFamily !== '' ? fontFamily : 'Helvetica';\n        switch (fontFamily) {\n            case 'Helvetica':\n                font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica;\n                break;\n            case 'Courier':\n                font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.courier;\n                break;\n            case 'Times New Roman':\n                font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.timesRoman;\n                break;\n            case 'Symbol':\n                font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.symbol;\n                break;\n            case 'ZapfDingbats':\n                font = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.zapfDingbats;\n                break;\n            default:\n                break;\n        }\n        return font;\n    };\n    AnnotationRenderer.prototype.getFontStyle = function (fontJson) {\n        var fontStyle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.regular;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontJson)) {\n            if (fontJson.isBold) {\n                fontStyle = fontStyle | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold;\n            }\n            if (fontJson.isItalic) {\n                fontStyle = fontStyle | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic;\n            }\n            if (fontJson.isStrikeout) {\n                fontStyle = fontStyle | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.strikeout;\n            }\n            if (fontJson.isUnderline) {\n                fontStyle = fontStyle | _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.underline;\n            }\n        }\n        return fontStyle;\n    };\n    AnnotationRenderer.prototype.getPdfTextAlignment = function (alignment) {\n        var textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.left;\n        switch (alignment) {\n            case 'center':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.center;\n                break;\n            case 'right':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.right;\n                break;\n            case 'justify':\n                textAlignment = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.justify;\n                break;\n            default:\n                break;\n        }\n        return textAlignment;\n    };\n    AnnotationRenderer.prototype.drawStampAsPath = function (resultObjects, rubberStampAnnotation, textBrush, stampBrush) {\n        var currentPoint = { x: 0, y: 0 };\n        var graphicsPath = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPath();\n        var stampObjects = resultObjects;\n        for (var index = 0; index < stampObjects.length; index++) {\n            var val = stampObjects[parseInt(index.toString(), 10)];\n            var path = val.command.toString();\n            if (path === 'M') {\n                graphicsPath.startFigure();\n                currentPoint = { x: val.x, y: val.y };\n            }\n            if (path === 'L') {\n                var array = [\n                    currentPoint, { x: val.x, y: val.y }\n                ];\n                this.transformPoints(array);\n                var array1 = [\n                    { x: array[0].x, y: array[0].y }, { x: array[1].x, y: array[1].y }\n                ];\n                graphicsPath.addLine(this.convertPixelToPoint(array1[0].x), this.convertPixelToPoint(array1[0].y), this.convertPixelToPoint(array1[1].x), this.convertPixelToPoint(array1[1].y));\n                currentPoint = { x: val.x, y: val.y };\n            }\n            if (path === 'C') {\n                var array2 = [\n                    currentPoint,\n                    { x: val.x, y: val.y },\n                    { x: val.x1, y: val.y1 },\n                    { x: val.x2, y: val.y2 }\n                ];\n                this.transformPoints(array2);\n                var array21 = [\n                    { x: array2[0].x, y: array2[0].y },\n                    { x: array2[1].x, y: array2[1].y },\n                    { x: array2[2].x, y: array2[2].y },\n                    { x: array2[3].x, y: array2[3].y }\n                ];\n                graphicsPath.addBezier(this.convertPixelToPoint(array21[0].x), this.convertPixelToPoint(array21[0].y), this.convertPixelToPoint(array21[1].x), this.convertPixelToPoint(array21[1].y), this.convertPixelToPoint(array21[2].x), this.convertPixelToPoint(array21[2].y), this.convertPixelToPoint(array21[3].x), this.convertPixelToPoint(array21[3].y));\n                currentPoint = { x: val.x, y: val.y };\n            }\n            if (path === 'Z' || path === 'z') {\n                graphicsPath.closeFigure();\n            }\n        }\n        return graphicsPath;\n    };\n    AnnotationRenderer.prototype.transformPoints = function (points) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(points)) {\n            for (var i = 0; i < points.length; i++) {\n                points[parseInt(i.toString(), 10)] = this.transform(points[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    AnnotationRenderer.prototype.transform = function (point) {\n        var x = point.x;\n        var y = point.y;\n        return { x: x, y: y };\n    };\n    AnnotationRenderer.prototype.getIconName = function (stampAnnotation, subject, rubberStampAnnotation) {\n        var iconExists = true;\n        switch (subject.trim()) {\n            case 'Approved':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.approved;\n                break;\n            case 'Confidential':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.confidential;\n                break;\n            case 'Not Approved':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.notApproved;\n                break;\n            case 'Draft':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.draft;\n                break;\n            case 'Final':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.final;\n                break;\n            case 'Completed':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.completed;\n                break;\n            case 'For Public Release':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.forPublicRelease;\n                break;\n            case 'Not For Public Release':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.notForPublicRelease;\n                break;\n            case 'For Comment':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.forComment;\n                break;\n            case 'Void':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.void;\n                break;\n            case 'Preliminary Results':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.preliminaryResults;\n                break;\n            case 'Information Only':\n                rubberStampAnnotation.icon = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotationIcon.informationOnly;\n                break;\n            default:\n                iconExists = false;\n                break;\n        }\n        return iconExists;\n    };\n    AnnotationRenderer.prototype.addCircleMeasurementAnnotation = function (measureShapeAnnotation, page) {\n        var bounds = JSON.parse(measureShapeAnnotation.bounds);\n        var cropValues = this.getCropBoxValue(page, false);\n        var left = this.convertPixelToPoint(bounds.left);\n        var top = this.convertPixelToPoint(bounds.top);\n        var width = this.convertPixelToPoint(bounds.width);\n        var height = this.convertPixelToPoint(bounds.height);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.left)) {\n            measureShapeAnnotation.bounds.left = 0;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.top)) {\n            measureShapeAnnotation.bounds.top = 0;\n        }\n        var cropX = 0;\n        var cropY = 0;\n        if (cropValues.x !== 0 && cropValues.y !== 0 && cropValues.x === left) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        else if (cropValues.x === 0 && page.cropBox[2] === page.size[0] && cropValues.y === page.size[1]) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        var circleAnnotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfCircleAnnotation(cropX + left, cropY + top, width, height);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.note)) {\n            circleAnnotation.text = measureShapeAnnotation.note.toString();\n        }\n        circleAnnotation.author = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.author) && measureShapeAnnotation.author.toString() !== '' ? measureShapeAnnotation.author.toString() : 'Guest';\n        circleAnnotation._dictionary.set('NM', measureShapeAnnotation.annotName.toString());\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.subject)) {\n            circleAnnotation.subject = measureShapeAnnotation.subject.toString();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.strokeColor)) {\n            var strokeColor = JSON.parse(measureShapeAnnotation.strokeColor);\n            var color = [strokeColor.r, strokeColor.g, strokeColor.b];\n            circleAnnotation.color = color;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.fillColor)) {\n            var fillColor = JSON.parse(measureShapeAnnotation.fillColor);\n            if (!this.isTransparentColor(fillColor)) {\n                var innerColor = [fillColor.r, fillColor.g, fillColor.b];\n                circleAnnotation.innerColor = innerColor;\n            }\n            if (fillColor.a < 1 && fillColor.a > 0) {\n                circleAnnotation._dictionary.update('FillOpacity', fillColor.a);\n                fillColor.a = 1;\n            }\n            else {\n                circleAnnotation._dictionary.update('FillOpacity', fillColor.a);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.opacity)) {\n            circleAnnotation.opacity = measureShapeAnnotation.opacity;\n        }\n        var lineBorder = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBorder();\n        lineBorder.width = measureShapeAnnotation.thickness;\n        lineBorder.style = measureShapeAnnotation.borderStyle;\n        lineBorder.dash = measureShapeAnnotation.borderDashArray;\n        circleAnnotation.border = lineBorder;\n        circleAnnotation.rotationAngle = this.getRotateAngle(measureShapeAnnotation.rotateAngle);\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.modifiedDate) && !isNaN(Date.parse(measureShapeAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(measureShapeAnnotation.modifiedDate));\n            circleAnnotation.modifiedDate = dateValue;\n        }\n        var commentsDetails = measureShapeAnnotation.comments;\n        if (commentsDetails.length > 0) {\n            for (var i = 0; i < commentsDetails.length; i++) {\n                circleAnnotation.comments.add(this.addCommentsCollection(commentsDetails[parseInt(i.toString(), 10)], circleAnnotation.bounds));\n            }\n        }\n        var reviewDetails = measureShapeAnnotation.review;\n        circleAnnotation.reviewHistory.add(this.addReviewCollections(reviewDetails, circleAnnotation.bounds));\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.isCloudShape) && measureShapeAnnotation.isCloudShape) {\n            var borderEffect = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffect();\n            borderEffect.style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy;\n            borderEffect.intensity = measureShapeAnnotation.cloudIntensity;\n            circleAnnotation._borderEffect = borderEffect;\n            var rectDifferences = JSON.parse(measureShapeAnnotation.rectangleDifference);\n            if (rectDifferences.length > 0) {\n                var rd = this.getRDValues(rectDifferences);\n                circleAnnotation._dictionary.update('RD', rd);\n            }\n        }\n        this.preserveIsLockProperty(measureShapeAnnotation, circleAnnotation);\n        circleAnnotation.measureType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfCircleMeasurementType.radius;\n        var measureDetail = JSON.parse(measureShapeAnnotation.calibrate);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail)) {\n            circleAnnotation._dictionary.set('Measure', this.setMeasureDictionary(measureDetail));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.customData)) {\n            circleAnnotation.setValues('CustomData', JSON.stringify(measureShapeAnnotation.customData));\n        }\n        circleAnnotation.setAppearance(true);\n        return circleAnnotation;\n    };\n    AnnotationRenderer.prototype.setMeasureDictionary = function (measureDetail) {\n        var measureDictionary = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n        measureDictionary.set('Type', 'Measure');\n        measureDictionary.set('R', measureDetail.ratio);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail.x)) {\n            var xNumberFormat = this.createNumberFormat(measureDetail.x);\n            measureDictionary.set('X', xNumberFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail.distance)) {\n            var dNumberFormat = this.createNumberFormat(JSON.parse(measureDetail.distance));\n            measureDictionary.set('D', dNumberFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail.area)) {\n            var aNumberFormat = this.createNumberFormat(JSON.parse(measureDetail.area));\n            measureDictionary.set('A', aNumberFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail.angle)) {\n            var tNumberFormat = this.createNumberFormat(JSON.parse(measureDetail.angle));\n            measureDictionary.set('T', tNumberFormat);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDetail.volume)) {\n            var vNumberFormat = this.createNumberFormat(JSON.parse(measureDetail.volume));\n            measureDictionary.set('V', vNumberFormat);\n        }\n        return measureDictionary;\n    };\n    AnnotationRenderer.prototype.createNumberFormat = function (numberFormatList) {\n        var numberFormats = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(numberFormatList) || numberFormatList.length === 0) {\n            return undefined;\n        }\n        for (var index = 0; index < numberFormatList.length; index++) {\n            var numberFormatDictionary = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n            var numberFormat = numberFormatList[parseInt(index.toString(), 10)];\n            numberFormatDictionary.set('Type', 'NumberFormat');\n            numberFormatDictionary.set('U', numberFormat.unit);\n            numberFormatDictionary.set('F', numberFormat.fractionalType);\n            numberFormatDictionary.set('D', numberFormat.denominator);\n            numberFormatDictionary.set('C', numberFormat.conversionFactor);\n            numberFormatDictionary.set('FD', numberFormat.formatDenominator);\n            numberFormats.push(numberFormatDictionary);\n        }\n        return numberFormats;\n    };\n    AnnotationRenderer.prototype.checkAnnotationLock = function (annotation) {\n        var isLock = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation.annotationSettings)) {\n            var annotationSettings = annotation.annotationSettings;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotationSettings.isLock)) {\n                isLock = annotationSettings.isLock;\n            }\n        }\n        return isLock;\n    };\n    AnnotationRenderer.prototype.getSaveVertexPoints = function (points, page) {\n        var pageHeight = page.size[1];\n        var pointList = [];\n        for (var index = 0; index < points.length; index++) {\n            var x = this.convertPixelToPoint(points[parseInt(index.toString(), 10)].x);\n            pointList.push(x);\n            var y = pageHeight - this.convertPixelToPoint(points[parseInt(index.toString(), 10)].y);\n            pointList.push(y);\n        }\n        return pointList;\n    };\n    AnnotationRenderer.prototype.getLineEndingStyle = function (endingStyle) {\n        var style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.none;\n        switch (endingStyle) {\n            case 'Square':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.square;\n                break;\n            case 'ClosedArrow':\n            case 'Closed':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.closedArrow;\n                break;\n            case 'RClosedArrow':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rClosedArrow;\n                break;\n            case 'OpenArrow':\n            case 'Open':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow;\n                break;\n            case 'ROpenArrow':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rOpenArrow;\n                break;\n            case 'Butt':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.butt;\n                break;\n            case 'Circle':\n            case 'Round':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.circle;\n                break;\n            case 'Diamond':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.diamond;\n                break;\n            case 'Slash':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.slash;\n                break;\n        }\n        return style;\n    };\n    AnnotationRenderer.prototype.getCaptionType = function (captionPosition) {\n        var captionType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineCaptionType.inline;\n        switch (captionPosition) {\n            case 'Inline':\n                captionType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineCaptionType.inline;\n                break;\n            case 'Top':\n                captionType = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineCaptionType.top;\n                break;\n        }\n        return captionType;\n    };\n    AnnotationRenderer.prototype.addReviewCollections = function (popupAnnotation, bounds) {\n        var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupAnnotation(null, bounds.x, bounds.y, bounds.width, bounds.height);\n        if (popupAnnotation['state'] != null) {\n            annotation.state = this.getReviewState(popupAnnotation['state'].toString());\n            annotation.stateModel = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.review;\n        }\n        return annotation;\n    };\n    AnnotationRenderer.prototype.addCommentsCollection = function (popupAnnotation, bounds) {\n        var annotation = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupAnnotation();\n        annotation.text = popupAnnotation.note;\n        annotation.author = popupAnnotation.author;\n        annotation.subject = popupAnnotation.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnotation.note)) {\n            annotation.text = popupAnnotation['note'].toString();\n        }\n        else {\n            annotation._annotFlags = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print;\n        }\n        var reviewDetails = popupAnnotation.review;\n        annotation.reviewHistory.add(this.addReviewCollections(reviewDetails, bounds));\n        var dateValue;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnotation.modifiedDate) && !isNaN(Date.parse(popupAnnotation.modifiedDate))) {\n            dateValue = new Date(Date.parse(popupAnnotation.modifiedDate));\n            annotation.modifiedDate = dateValue;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnotation.annotName)) {\n            annotation._dictionary.set('NM', popupAnnotation.annotName.toString());\n        }\n        return annotation;\n    };\n    AnnotationRenderer.prototype.getReviewState = function (state) {\n        var reviewState;\n        switch (state) {\n            case 'Accepted':\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.accepted;\n                break;\n            case 'Cancelled':\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.cancel;\n                break;\n            case 'Completed':\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.completed;\n                break;\n            case 'Rejected':\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.rejected;\n                break;\n            case 'None':\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.none;\n                break;\n            default:\n                reviewState = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unmarked;\n                break;\n        }\n        return reviewState;\n    };\n    AnnotationRenderer.prototype.convertPixelToPoint = function (value) {\n        return (value * 72 / 96);\n    };\n    AnnotationRenderer.prototype.convertPointToPixel = function (value) {\n        return (value * 96 / 72);\n    };\n    AnnotationRenderer.prototype.isTransparentColor = function (fillColor) {\n        return fillColor && fillColor.a === 0;\n    };\n    AnnotationRenderer.prototype.getRDValues = function (values) {\n        var rectDifference = [];\n        for (var i = 0; i < values.length; i++) {\n            rectDifference.push(parseFloat(values[parseInt(i.toString(), 10)]));\n        }\n        return rectDifference;\n    };\n    AnnotationRenderer.prototype.getRotateAngle = function (angleString) {\n        var angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0;\n        switch (angleString) {\n            case 'RotateAngle0':\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0;\n                break;\n            case 'RotateAngle180':\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180;\n                break;\n            case 'RotateAngle270':\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270;\n                break;\n            case 'RotateAngle90':\n                angle = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90;\n                break;\n        }\n        return angle;\n    };\n    /**\n     * @private\n     * @param {string} angleString - height\n     * @returns {number} - angle\n     */\n    AnnotationRenderer.prototype.getInkRotateAngle = function (angleString) {\n        var angle = 0;\n        switch (angleString) {\n            case '0':\n                angle = 0;\n                break;\n            case '1':\n                angle = -90;\n                break;\n            case '2':\n                angle = -180;\n                break;\n            case '3':\n                angle = -270;\n                break;\n        }\n        return angle;\n    };\n    /**\n     * @private\n     * @param {PdfInkAnnotation} inkAnnot - inkAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {number} pageNumber - pageNumber\n     * @param {PdfPage} loadedPage - loadedPage\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadSignature = function (inkAnnot, height, width, pageRotation, pageNumber, loadedPage) {\n        var signature = new SignatureAnnotationBase();\n        var outputstring = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkAnnot.inkPointsCollection)) {\n            for (var index = 0; index < inkAnnot.inkPointsCollection.length; index++) {\n                var inkList = inkAnnot.inkPointsCollection[parseInt(index.toString(), 10)];\n                for (var j = 0; j < inkList.length; j += 2) {\n                    var x = void 0;\n                    var y = void 0;\n                    if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90) {\n                        x = inkList[j + 1];\n                        y = inkList[parseInt(j.toString(), 10)];\n                    }\n                    else if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180) {\n                        x = inkAnnot._page.size[0] - inkList[parseInt(j.toString(), 10)];\n                        y = inkList[j + 1];\n                    }\n                    else if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n                        x = inkAnnot._page.size[0] - inkList[j + 1];\n                        y = inkAnnot._page.size[1] - inkList[parseInt(j.toString(), 10)];\n                    }\n                    else {\n                        x = inkList[parseInt(j.toString(), 10)];\n                        y = inkAnnot._page.size[1] - inkList[j + 1];\n                    }\n                    if (j === 0) {\n                        outputstring += 'M' + x + ',' + y + ' ';\n                    }\n                    else {\n                        outputstring += 'L' + x + ',' + y + ' ';\n                    }\n                }\n            }\n        }\n        signature.AnnotationType = 'Signature';\n        signature.Bounds = this.getBounds(inkAnnot.bounds, height, width, pageRotation);\n        signature.Opacity = inkAnnot.opacity;\n        signature.Thickness = inkAnnot.border.width;\n        signature.PathData = outputstring;\n        signature.StrokeColor = 'rgba(' + inkAnnot.color[0] + ',' + inkAnnot.color[1] + ',' + inkAnnot.color[2] + ',' + (inkAnnot.color[3] ? inkAnnot.color[3] : 1) + ')';\n        signature.PageNumber = pageNumber;\n        signature.SignatureName = inkAnnot.name;\n        return signature;\n    };\n    /**\n     * @private\n     * @param {PdfInkAnnotation} inkAnnot - inkAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - PageRotation\n     * @param {number} pageNumber - number\n     * @param {PdfPage} loadedPage - loadedPage\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadInkAnnotation = function (inkAnnot, height, width, pageRotation, pageNumber, loadedPage) {\n        var signature = new InkSignatureAnnotation();\n        var outputstring = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkAnnot.inkPointsCollection)) {\n            for (var index = 0; index < inkAnnot.inkPointsCollection.length; index++) {\n                var inkList = inkAnnot.inkPointsCollection[parseInt(index.toString(), 10)];\n                for (var j = 0; j < inkList.length; j += 2) {\n                    var x = void 0;\n                    var y = void 0;\n                    if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90) {\n                        x = inkList[j + 1];\n                        y = inkList[parseInt(j.toString(), 10)];\n                    }\n                    else if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180) {\n                        x = inkAnnot._page.size[0] - inkList[parseInt(j.toString(), 10)];\n                        y = inkList[j + 1];\n                    }\n                    else if (inkAnnot._page.rotation === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270) {\n                        x = inkAnnot._page.size[0] - inkList[j + 1];\n                        y = inkAnnot._page.size[1] - inkList[parseInt(j.toString(), 10)];\n                    }\n                    else {\n                        x = inkList[parseInt(j.toString(), 10)];\n                        y = inkAnnot._page.size[1] - inkList[j + 1];\n                    }\n                    if (j === 0) {\n                        outputstring += 'M' + x + ',' + y + ' ';\n                    }\n                    else {\n                        outputstring += 'L' + x + ',' + y + ' ';\n                    }\n                }\n            }\n        }\n        signature.Author = inkAnnot.author;\n        signature.Subject = inkAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkAnnot.modifiedDate)) {\n            signature.ModifiedDate = this.formatDate(inkAnnot.modifiedDate);\n        }\n        else {\n            signature.ModifiedDate = this.formatDate(new Date());\n        }\n        signature.Note = this.getValidNoteContent(inkAnnot.text);\n        for (var i = 0; i < inkAnnot.reviewHistory.count; i++) {\n            signature.State = this.getStateString(inkAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            signature.StateModel = this.getStateModelString(inkAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signature.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signature.StateModel)) {\n            signature.State = 'Unmarked';\n            signature.StateModel = 'None';\n        }\n        signature.Comments = new Array();\n        for (var i = 0; i < inkAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(inkAnnot.comments.at(i), height, width, pageRotation);\n            signature.Comments.push(annot);\n        }\n        this.updateIsLockProperty(signature, inkAnnot);\n        signature.AnnotationType = 'Ink';\n        signature.AnnotType = 'Ink';\n        signature.Bounds = this.getBounds(inkAnnot.bounds, height, width, pageRotation);\n        if (inkAnnot.bounds.y < 0) {\n            var cropRect = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(inkAnnot.bounds.x, loadedPage.cropBox[1] + inkAnnot.bounds.y, inkAnnot.bounds.width, inkAnnot.bounds.height);\n            signature.Bounds = this.getBounds(cropRect, height, width, pageRotation);\n        }\n        signature.Opacity = inkAnnot.opacity;\n        signature.Thickness = inkAnnot.border.width;\n        signature.PathData = outputstring;\n        signature.StrokeColor = 'rgba(' + inkAnnot.color[0] + ',' + inkAnnot.color[1] + ',' + inkAnnot.color[2] + ',' + (inkAnnot.color[3] ? inkAnnot.color[3] : 1) + ')';\n        signature.PageNumber = pageNumber;\n        signature.AnnotName = inkAnnot.name;\n        if (inkAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inkAnnot._dictionary.get('CustomData'))) {\n            var customData = inkAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                signature.ExistingCustomData = customData;\n            }\n        }\n        return signature;\n    };\n    /**\n     * @param {PdfSquareAnnotation} squareAnnot - squareAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfFreeTextAnnotation} shapeFreeText - shapeFreeText\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadSquareAnnotation = function (squareAnnot, height, width, pageRotation, shapeFreeText) {\n        var shapeAnnotation = new ShapeAnnotationBase();\n        shapeAnnotation.ShapeAnnotationType = 'Square';\n        shapeAnnotation.Author = squareAnnot.author;\n        shapeAnnotation.AnnotName = squareAnnot.name;\n        shapeAnnotation.Subject = squareAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot.modifiedDate)) {\n            shapeAnnotation.ModifiedDate = this.formatDate(squareAnnot.modifiedDate);\n        }\n        else {\n            shapeAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        shapeAnnotation.Note = this.getValidNoteContent(squareAnnot.text);\n        shapeAnnotation.Thickness = squareAnnot.border.width;\n        shapeAnnotation.BorderStyle = this.getBorderStylesString(squareAnnot.border.style);\n        shapeAnnotation.BorderDashArray = squareAnnot.border.dash ? squareAnnot.border.dash[0] ? squareAnnot.border.dash[0] : 0 : 0;\n        shapeAnnotation.Opacity = squareAnnot.opacity;\n        shapeAnnotation.RotateAngle = this.getRotateAngleString(squareAnnot.rotate);\n        shapeAnnotation.AnnotType = 'shape';\n        for (var i = 0; i < squareAnnot.reviewHistory.count; i++) {\n            shapeAnnotation.State = this.getStateString(squareAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            shapeAnnotation.StateModel = this.getStateModelString(squareAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.StateModel)) {\n            shapeAnnotation.State = 'Unmarked';\n            shapeAnnotation.StateModel = 'None';\n        }\n        shapeAnnotation.Comments = new Array();\n        for (var i = 0; i < squareAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(squareAnnot.comments.at(i), height, width, pageRotation);\n            shapeAnnotation.Comments.push(annot);\n        }\n        shapeAnnotation.Bounds = this.getBounds(squareAnnot.bounds, height, width, pageRotation);\n        shapeAnnotation.LineHeadStart = 'None';\n        shapeAnnotation.LineHeadEnd = 'None';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot.borderEffect)) {\n            if (squareAnnot.borderEffect.style === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy) {\n                shapeAnnotation.IsCloudShape = true;\n                shapeAnnotation.CloudIntensity = squareAnnot.borderEffect.intensity;\n            }\n            else {\n                shapeAnnotation.IsCloudShape = false;\n                shapeAnnotation.CloudIntensity = 0;\n            }\n        }\n        else {\n            shapeAnnotation.IsCloudShape = false;\n            shapeAnnotation.CloudIntensity = 0;\n        }\n        if (squareAnnot._dictionary.has('RD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot._dictionary.get('RD'))) {\n            shapeAnnotation.RectangleDifference = squareAnnot._dictionary.get('RD');\n        }\n        else {\n            shapeAnnotation.RectangleDifference = new Array();\n        }\n        this.updateIsLockProperty(shapeAnnotation, squareAnnot);\n        if (squareAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = squareAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            shapeAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        shapeAnnotation.StrokeColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot.color) ? 'rgba(' + squareAnnot.color[0] + ',' + squareAnnot.color[1] + ',' + squareAnnot.color[2] + ',' + (squareAnnot.color[3] ? squareAnnot.color[3] : 1) + ')' : 'rgba(0,0,0,1)';\n        var fillOpacity = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot.color) && squareAnnot.color[3]) ? squareAnnot.color[3] : 1;\n        if (squareAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(squareAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = squareAnnot.innerColor ? fillOpacity : 0;\n        squareAnnot.innerColor = squareAnnot.innerColor ? squareAnnot.innerColor : [255, 255, 255];\n        shapeAnnotation.FillColor = 'rgba(' + squareAnnot.innerColor[0] + ',' + squareAnnot.innerColor[1] + ',' + squareAnnot.innerColor[2] + ',' + fillOpacity + ')';\n        shapeAnnotation.EnableShapeLabel = false;\n        if (shapeFreeText != null) {\n            shapeAnnotation.EnableShapeLabel = true;\n            shapeAnnotation.LabelContent = shapeFreeText.text;\n            shapeAnnotation.LabelFillColor = 'rgba(' + shapeFreeText.color[0] + ',' + shapeFreeText.color[1] + ',' + shapeFreeText.color[2] + ',' + (shapeFreeText.color[3] ? shapeFreeText.color[3] : 1) + ')';\n            shapeAnnotation.FontColor = 'rgba(' + shapeFreeText.textMarkUpColor[0] + ',' + shapeFreeText.textMarkUpColor[1] + ',' + shapeFreeText.textMarkUpColor[2] + ',' + (shapeFreeText.textMarkUpColor[3] ? shapeFreeText.textMarkUpColor[3] : 1) + ')';\n            shapeAnnotation.LabelBorderColor = 'rgba(' + shapeFreeText.borderColor[0] + ',' + shapeFreeText.borderColor[1] + ',' + shapeFreeText.borderColor[2] + ',' + (shapeFreeText.borderColor[3] ? shapeFreeText.borderColor[3] : 1) + ')';\n            shapeAnnotation.FontSize = shapeFreeText.font.size;\n        }\n        if (squareAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(squareAnnot._dictionary.get('CustomData'))) {\n            var customData = squareAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                shapeAnnotation.ExistingCustomData = customData;\n            }\n        }\n        return shapeAnnotation;\n    };\n    /**\n     * @param {PdfLineAnnotation} lineAnnot - lineAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfFreeTextAnnotation} shapeFreeText - shapeFreeText\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadLineAnnotation = function (lineAnnot, height, width, pageRotation, shapeFreeText) {\n        var shapeAnnotation = new ShapeAnnotationBase();\n        shapeAnnotation.ShapeAnnotationType = 'Line';\n        shapeAnnotation.Author = lineAnnot.author;\n        shapeAnnotation.AnnotName = lineAnnot.name;\n        shapeAnnotation.Subject = lineAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot.modifiedDate)) {\n            shapeAnnotation.ModifiedDate = this.formatDate(lineAnnot.modifiedDate);\n        }\n        else {\n            shapeAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        shapeAnnotation.Note = this.getValidNoteContent(lineAnnot.text);\n        shapeAnnotation.Thickness = lineAnnot.border.width;\n        shapeAnnotation.BorderStyle = this.getBorderStylesString(lineAnnot.border.style);\n        shapeAnnotation.BorderDashArray = lineAnnot.border.dash ? lineAnnot.border.dash[0] ? lineAnnot.border.dash[0] : 0 : 0;\n        shapeAnnotation.Opacity = lineAnnot.opacity;\n        shapeAnnotation.RotateAngle = this.getRotateAngleString(lineAnnot.rotate);\n        shapeAnnotation.AnnotType = 'shape';\n        shapeAnnotation.EnableShapeLabel = false;\n        if (shapeFreeText != null) {\n            shapeAnnotation.EnableShapeLabel = true;\n            shapeAnnotation.LabelContent = shapeFreeText.text;\n            shapeAnnotation.LabelFillColor = 'rgba(' + shapeFreeText.color[0] + ',' + shapeFreeText.color[1] + ',' + shapeFreeText.color[2] + ',' + (shapeFreeText.color[3] ? shapeFreeText.color[3] : 1) + ')';\n            shapeAnnotation.FontColor = 'rgba(' + shapeFreeText.textMarkUpColor[0] + ',' + shapeFreeText.textMarkUpColor[1] + ',' + shapeFreeText.textMarkUpColor[2] + ',' + (shapeFreeText.textMarkUpColor[3] ? shapeFreeText.textMarkUpColor[3] : 1) + ')';\n            shapeAnnotation.LabelBorderColor = 'rgba(' + shapeFreeText.borderColor[0] + ',' + shapeFreeText.borderColor[1] + ',' + shapeFreeText.borderColor[2] + ',' + (shapeFreeText.borderColor[3] ? shapeFreeText.borderColor[3] : 1) + ')';\n            shapeAnnotation.FontSize = shapeFreeText.font.size;\n        }\n        for (var i = 0; i < lineAnnot.reviewHistory.count; i++) {\n            shapeAnnotation.State = this.getStateString(lineAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            shapeAnnotation.StateModel = this.getStateModelString(lineAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.StateModel)) {\n            shapeAnnotation.State = 'Unmarked';\n            shapeAnnotation.StateModel = 'None';\n        }\n        shapeAnnotation.Comments = new Array();\n        for (var i = 0; i < lineAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(lineAnnot.comments.at(i), height, width, pageRotation);\n            shapeAnnotation.Comments.push(annot);\n        }\n        shapeAnnotation.Bounds = this.getBounds(lineAnnot.bounds, height, width, pageRotation);\n        shapeAnnotation.LineHeadStart = this.getLineEndingStyleString(lineAnnot.lineEndingStyle.begin);\n        shapeAnnotation.LineHeadEnd = this.getLineEndingStyleString(lineAnnot.lineEndingStyle.end);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot._borderEffect)) {\n            if (lineAnnot._borderEffect.style === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy) {\n                shapeAnnotation.IsCloudShape = true;\n                shapeAnnotation.CloudIntensity = lineAnnot._borderEffect.intensity;\n            }\n            else {\n                shapeAnnotation.IsCloudShape = false;\n                shapeAnnotation.CloudIntensity = 0;\n            }\n        }\n        else {\n            shapeAnnotation.IsCloudShape = false;\n            shapeAnnotation.CloudIntensity = 0;\n        }\n        shapeAnnotation.VertexPoints = this.getLinePoints(lineAnnot.linePoints, height, width, pageRotation, lineAnnot._page);\n        if (lineAnnot._dictionary.has('RD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot._dictionary.get('RD'))) {\n            shapeAnnotation.RectangleDifference = lineAnnot._dictionary.get('RD');\n        }\n        else {\n            shapeAnnotation.RectangleDifference = new Array();\n        }\n        this.updateIsLockProperty(shapeAnnotation, lineAnnot);\n        if (lineAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = lineAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            shapeAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        var color = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot.color) ? lineAnnot.color : [0, 0, 0];\n        shapeAnnotation.StrokeColor = 'rgba(' + color[0] + ',' + color[1] + ',' + color[2] + ',' + (color[3] ? color[3] : 1) + ')';\n        var fillOpacity = lineAnnot.color && lineAnnot.color[3] ? lineAnnot.color[3] : 1;\n        if (lineAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(lineAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = lineAnnot.innerColor ? fillOpacity : 0;\n        lineAnnot.innerColor = lineAnnot.innerColor ? lineAnnot.innerColor : [255, 255, 255];\n        shapeAnnotation.FillColor = 'rgba(' + lineAnnot.innerColor[0] + ',' + lineAnnot.innerColor[1] + ',' + lineAnnot.innerColor[2] + ',' + fillOpacity + ')';\n        if (lineAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot._dictionary.get('CustomData'))) {\n            var customData = lineAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                shapeAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (lineAnnot.lineIntent === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineIntent.lineArrow || !lineAnnot._dictionary.has('Measure')) {\n            return shapeAnnotation;\n        }\n        else {\n            var measureShapeAnnotation = new MeasureShapeAnnotationBase(shapeAnnotation);\n            if (lineAnnot._dictionary.has('Measure')) {\n                measureShapeAnnotation.Calibrate = this.getMeasureObject(lineAnnot);\n            }\n            measureShapeAnnotation.Indent = lineAnnot.lineIntent.toString();\n            measureShapeAnnotation.Caption = lineAnnot.caption.cap;\n            measureShapeAnnotation.LeaderLength = lineAnnot.leaderExt;\n            measureShapeAnnotation.LeaderLineExtension = lineAnnot.leaderLine;\n            measureShapeAnnotation.ExistingCustomData = shapeAnnotation.ExistingCustomData;\n            if (lineAnnot._dictionary.has('LLO')) {\n                measureShapeAnnotation.LeaderLineOffset = lineAnnot._dictionary.get('LLO');\n            }\n            else {\n                measureShapeAnnotation.LeaderLineOffset = 0;\n            }\n            measureShapeAnnotation.CaptionPosition = lineAnnot.caption.type.toString();\n            if (lineAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly) {\n                measureShapeAnnotation.IsCommentLock = true;\n            }\n            else {\n                measureShapeAnnotation.IsCommentLock = false;\n            }\n            if (lineAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print) {\n                measureShapeAnnotation.IsPrint = true;\n            }\n            if (lineAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lineAnnot._dictionary.get('CustomData'))) {\n                var customData = lineAnnot._dictionary.get('CustomData');\n                if (customData != null) {\n                    measureShapeAnnotation.ExistingCustomData = customData;\n                }\n            }\n            return measureShapeAnnotation;\n        }\n    };\n    AnnotationRenderer.prototype.getLinePoints = function (points, pageHeight, pageWidth, pageRotation, page) {\n        var linePoints = [];\n        var startingPoint = new AnnotPoint(points[0], points[1]);\n        var endingPoint = new AnnotPoint(points[2], points[3]);\n        var cropBox = this.getBothCropBoxValue(page);\n        var cropBoxX = 0;\n        var cropBoxY = 0;\n        if (!(cropBox[0] === 0 && page.cropBox[2] === page.size[2] && cropBox[1] === page.size[3])) {\n            cropBoxX = cropBox[0];\n            cropBoxY = cropBox[1];\n        }\n        if (pageRotation === 0) {\n            startingPoint = { X: this.convertPointToPixel(points[0]) - this.convertPointToPixel(cropBoxX),\n                Y: (pageHeight - this.convertPointToPixel(points[1])) + this.convertPointToPixel(cropBoxY) };\n            endingPoint = { X: this.convertPointToPixel(points[2]) - this.convertPointToPixel(cropBoxX),\n                Y: (pageHeight - this.convertPointToPixel(points[3])) + this.convertPointToPixel(cropBoxY) };\n        }\n        else if (pageRotation === 1) {\n            startingPoint = { X: this.convertPointToPixel(points[1]), Y: this.convertPointToPixel(points[0]) };\n            endingPoint = { X: this.convertPointToPixel(points[3]), Y: this.convertPointToPixel(points[2]) };\n        }\n        else if (pageRotation === 2) {\n            startingPoint = { X: pageWidth - this.convertPointToPixel(points[0]), Y: this.convertPointToPixel(points[1]) };\n            endingPoint = { X: pageWidth - this.convertPointToPixel(points[2]), Y: this.convertPointToPixel(points[3]) };\n        }\n        else if (pageRotation === 3) {\n            startingPoint = { X: (pageWidth - this.convertPointToPixel(points[1])), Y: (pageHeight - this.convertPointToPixel(points[0])) };\n            endingPoint = { X: pageWidth - this.convertPointToPixel(points[3]), Y: pageHeight - this.convertPointToPixel(points[2]) };\n        }\n        linePoints.push(startingPoint);\n        linePoints.push(endingPoint);\n        return linePoints;\n    };\n    /**\n     * @param {PdfEllipseAnnotation} ellipseAnnot - ellipseAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfFreeTextAnnotation} shapeFreeText - shapeFreeTezt\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadEllipseAnnotation = function (ellipseAnnot, height, width, pageRotation, shapeFreeText) {\n        var shapeAnnotation = new ShapeAnnotationBase();\n        shapeAnnotation.ShapeAnnotationType = 'Circle';\n        shapeAnnotation.Author = ellipseAnnot.author;\n        shapeAnnotation.AnnotName = ellipseAnnot.name;\n        shapeAnnotation.Subject = ellipseAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot.modifiedDate)) {\n            shapeAnnotation.ModifiedDate = this.formatDate(ellipseAnnot.modifiedDate);\n        }\n        else {\n            shapeAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        shapeAnnotation.Note = this.getValidNoteContent(ellipseAnnot.text);\n        shapeAnnotation.Thickness = ellipseAnnot.border.width;\n        shapeAnnotation.BorderStyle = this.getBorderStylesString(ellipseAnnot.border.style);\n        shapeAnnotation.BorderDashArray = ellipseAnnot.border.dash ? ellipseAnnot.border.dash[0] ? ellipseAnnot.border.dash[0] : 0 : 0;\n        shapeAnnotation.Opacity = ellipseAnnot.opacity;\n        shapeAnnotation.RotateAngle = this.getRotateAngleString(ellipseAnnot.rotate);\n        shapeAnnotation.AnnotType = 'shape';\n        for (var i = 0; i < ellipseAnnot.reviewHistory.count; i++) {\n            shapeAnnotation.State = this.getStateString(ellipseAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            shapeAnnotation.StateModel = this.getStateModelString(ellipseAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.StateModel)) {\n            shapeAnnotation.State = 'Unmarked';\n            shapeAnnotation.StateModel = 'None';\n        }\n        shapeAnnotation.Comments = new Array();\n        for (var i = 0; i < ellipseAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(ellipseAnnot.comments.at(i), height, width, pageRotation);\n            shapeAnnotation.Comments.push(annot);\n        }\n        shapeAnnotation.Bounds = this.getBounds(ellipseAnnot.bounds, height, width, pageRotation);\n        shapeAnnotation.LineHeadStart = 'None';\n        shapeAnnotation.LineHeadEnd = 'None';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot._borderEffect)) {\n            if (ellipseAnnot._borderEffect.style === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy) {\n                shapeAnnotation.IsCloudShape = true;\n                shapeAnnotation.CloudIntensity = ellipseAnnot._borderEffect.intensity;\n            }\n            else {\n                shapeAnnotation.IsCloudShape = false;\n                shapeAnnotation.CloudIntensity = 0;\n            }\n        }\n        else {\n            shapeAnnotation.IsCloudShape = false;\n            shapeAnnotation.CloudIntensity = 0;\n        }\n        if (ellipseAnnot._dictionary.has('RD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot._dictionary.get('RD'))) {\n            shapeAnnotation.RectangleDifference = ellipseAnnot._dictionary.get('RD');\n        }\n        else {\n            shapeAnnotation.RectangleDifference = new Array();\n        }\n        this.updateIsLockProperty(shapeAnnotation, ellipseAnnot);\n        if (ellipseAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = ellipseAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            shapeAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        shapeAnnotation.StrokeColor = 'rgba(' + ellipseAnnot.color[0] + ',' + ellipseAnnot.color[1] + ',' + ellipseAnnot.color[2] + ',' + (ellipseAnnot.color[3] ? ellipseAnnot.color[3] : 1) + ')';\n        var fillOpacity = ellipseAnnot.color[3] ? ellipseAnnot.color[3] : 1;\n        if (ellipseAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(ellipseAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = ellipseAnnot.innerColor ? fillOpacity : 0;\n        ellipseAnnot.innerColor = ellipseAnnot.innerColor ? ellipseAnnot.innerColor : [255, 255, 255];\n        shapeAnnotation.FillColor = 'rgba(' + ellipseAnnot.innerColor[0] + ',' + ellipseAnnot.innerColor[1] + ',' + ellipseAnnot.innerColor[2] + ',' + fillOpacity + ')';\n        shapeAnnotation.EnableShapeLabel = false;\n        if (shapeFreeText != null) {\n            shapeAnnotation.EnableShapeLabel = true;\n            shapeAnnotation.LabelContent = shapeFreeText.text;\n            shapeAnnotation.LabelFillColor = 'rgba(' + shapeFreeText.color[0] + ',' + shapeFreeText.color[1] + ',' + shapeFreeText.color[2] + ',' + (shapeFreeText.color[3] ? shapeFreeText.color[3] : 1) + ')';\n            shapeAnnotation.FontColor = 'rgba(' + shapeFreeText.textMarkUpColor[0] + ',' + shapeFreeText.textMarkUpColor[1] + ',' + shapeFreeText.textMarkUpColor[2] + ',' + (shapeFreeText.textMarkUpColor[3] ? shapeFreeText.textMarkUpColor[3] : 1) + ')';\n            shapeAnnotation.LabelBorderColor = 'rgba(' + shapeFreeText.borderColor[0] + ',' + shapeFreeText.borderColor[1] + ',' + shapeFreeText.borderColor[2] + ',' + (shapeFreeText.borderColor[3] ? shapeFreeText.borderColor[3] : 1) + ')';\n            shapeAnnotation.FontSize = shapeFreeText.font.size;\n        }\n        if (ellipseAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot._dictionary.get('CustomData'))) {\n            var customData = ellipseAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                shapeAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (ellipseAnnot._dictionary.has('Measure')) {\n            shapeAnnotation.FillColor = 'rgba(' + ellipseAnnot.innerColor[0] + ',' + ellipseAnnot.innerColor[1] + ',' + ellipseAnnot.innerColor[2] + ',' + fillOpacity + ')';\n            var measureShapeAnnotation = new MeasureShapeAnnotationBase(shapeAnnotation);\n            measureShapeAnnotation.Calibrate = this.getMeasureObject(ellipseAnnot);\n            if (ellipseAnnot._dictionary.has('IT')) {\n                measureShapeAnnotation.Indent = ellipseAnnot._dictionary.get('IT');\n            }\n            else {\n                measureShapeAnnotation.Indent = 'PolyLineDimension';\n            }\n            measureShapeAnnotation.Caption = false;\n            measureShapeAnnotation.LeaderLength = 0;\n            measureShapeAnnotation.LeaderLineExtension = 0;\n            measureShapeAnnotation.LeaderLineOffset = 0;\n            measureShapeAnnotation.CaptionPosition = '';\n            if (ellipseAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly) {\n                measureShapeAnnotation.IsCommentLock = true;\n            }\n            else {\n                measureShapeAnnotation.IsCommentLock = false;\n            }\n            if (ellipseAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print) {\n                measureShapeAnnotation.IsPrint = true;\n            }\n            if (ellipseAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ellipseAnnot._dictionary.get('CustomData'))) {\n                var customData = ellipseAnnot._dictionary.get('CustomData');\n                if (customData != null) {\n                    measureShapeAnnotation.ExistingCustomData = customData;\n                }\n            }\n            return measureShapeAnnotation;\n        }\n        else {\n            return shapeAnnotation;\n        }\n    };\n    /**\n     * @param {PdfPolygonAnnotation} polygonAnnot - polygonAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfFreeTextAnnotation} shapeFreeText - shapeFreeText\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadPolygonAnnotation = function (polygonAnnot, height, width, pageRotation, shapeFreeText) {\n        var shapeAnnotation = new ShapeAnnotationBase();\n        shapeAnnotation.ShapeAnnotationType = 'Polygon';\n        shapeAnnotation.Author = polygonAnnot.author;\n        shapeAnnotation.AnnotName = polygonAnnot.name;\n        shapeAnnotation.Subject = polygonAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot.modifiedDate)) {\n            shapeAnnotation.ModifiedDate = this.formatDate(polygonAnnot.modifiedDate);\n        }\n        else {\n            shapeAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        shapeAnnotation.Note = this.getValidNoteContent(polygonAnnot.text);\n        shapeAnnotation.Thickness = polygonAnnot.border.width;\n        shapeAnnotation.BorderStyle = this.getBorderStylesString(polygonAnnot.border.style);\n        shapeAnnotation.BorderDashArray = polygonAnnot.border.dash ? polygonAnnot.border.dash[0] ? polygonAnnot.border.dash[0] : 0 : 0;\n        shapeAnnotation.Opacity = polygonAnnot.opacity;\n        shapeAnnotation.RotateAngle = this.getRotateAngleString(polygonAnnot.rotate);\n        shapeAnnotation.AnnotType = 'shape';\n        for (var i = 0; i < polygonAnnot.reviewHistory.count; i++) {\n            shapeAnnotation.State = this.getStateString(polygonAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            shapeAnnotation.StateModel = this.getStateModelString(polygonAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.StateModel)) {\n            shapeAnnotation.State = 'Unmarked';\n            shapeAnnotation.StateModel = 'None';\n        }\n        shapeAnnotation.Comments = new Array();\n        for (var i = 0; i < polygonAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(polygonAnnot.comments.at(i), height, width, pageRotation);\n            shapeAnnotation.Comments.push(annot);\n        }\n        shapeAnnotation.Bounds = this.getBounds(polygonAnnot.bounds, height, width, pageRotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('Vertices'))) {\n            shapeAnnotation.VertexPoints = this.getVertexPoints(polygonAnnot._dictionary.get('Vertices'), width, height, pageRotation, polygonAnnot._page);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.VertexPoints) && shapeAnnotation.VertexPoints[0] !==\n            shapeAnnotation.VertexPoints[shapeAnnotation.VertexPoints.length - 1]) {\n            shapeAnnotation.VertexPoints.push(shapeAnnotation.VertexPoints[0]);\n        }\n        shapeAnnotation.StrokeColor = 'rgba(' + polygonAnnot.color[0] + ',' + polygonAnnot.color[1] + ',' + polygonAnnot.color[2] + ',' + (polygonAnnot.color[3] ? polygonAnnot.color[3] : 1) + ')';\n        var fillOpacity = polygonAnnot.color[3] ? polygonAnnot.color[3] : 1;\n        if (polygonAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(polygonAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = polygonAnnot.innerColor ? fillOpacity : 0;\n        polygonAnnot.innerColor = polygonAnnot.innerColor ? polygonAnnot.innerColor : [255, 255, 255];\n        shapeAnnotation.FillColor = 'rgba(' + polygonAnnot.innerColor[0] + ',' + polygonAnnot.innerColor[1] + ',' + polygonAnnot.innerColor[2] + ',' + fillOpacity + ')';\n        shapeAnnotation.LineHeadStart = 'None';\n        shapeAnnotation.LineHeadEnd = 'None';\n        shapeAnnotation.EnableShapeLabel = false;\n        if (shapeFreeText != null) {\n            shapeAnnotation.EnableShapeLabel = true;\n            shapeAnnotation.LabelContent = shapeFreeText.text;\n            shapeAnnotation.LabelFillColor = 'rgba(' + shapeFreeText.color[0] + ',' + shapeFreeText.color[1] + ',' + shapeFreeText.color[2] + ',' + (shapeFreeText.color[3] ? shapeFreeText.color[3] : 1) + ')';\n            shapeAnnotation.FontColor = 'rgba(' + shapeFreeText.textMarkUpColor[0] + ',' + shapeFreeText.textMarkUpColor[1] + ',' + shapeFreeText.textMarkUpColor[2] + ',' + (shapeFreeText.textMarkUpColor[3] ? shapeFreeText.textMarkUpColor[3] : 1) + ')';\n            shapeAnnotation.LabelBorderColor = 'rgba(' + shapeFreeText.borderColor[0] + ',' + shapeFreeText.borderColor[1] + ',' + shapeFreeText.borderColor[2] + ',' + (shapeFreeText.borderColor[3] ? shapeFreeText.borderColor[3] : 1) + ')';\n            shapeAnnotation.FontSize = shapeFreeText.font.size;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot.borderEffect)) {\n            if (polygonAnnot.borderEffect.style === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy) {\n                shapeAnnotation.IsCloudShape = true;\n                shapeAnnotation.CloudIntensity = polygonAnnot.borderEffect.intensity;\n            }\n            else {\n                shapeAnnotation.IsCloudShape = false;\n                shapeAnnotation.CloudIntensity = 0;\n            }\n        }\n        else {\n            shapeAnnotation.IsCloudShape = false;\n            shapeAnnotation.CloudIntensity = 0;\n        }\n        if (polygonAnnot._dictionary.has('RD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('RD'))) {\n            shapeAnnotation.RectangleDifference = polygonAnnot._dictionary.get('RD');\n        }\n        else {\n            shapeAnnotation.RectangleDifference = new Array();\n        }\n        this.updateIsLockProperty(shapeAnnotation, polygonAnnot);\n        if (polygonAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('CustomData'))) {\n            var customData = polygonAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                shapeAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (polygonAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = polygonAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            shapeAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        if (polygonAnnot._dictionary.has('Measure')) {\n            var measureShapeAnnotation = new MeasureShapeAnnotationBase(shapeAnnotation);\n            if (polygonAnnot._dictionary.has('IT') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('IT'))) {\n                measureShapeAnnotation.Indent = polygonAnnot._dictionary.get('IT').name;\n            }\n            else {\n                measureShapeAnnotation.Indent = 'PolygonDimension';\n            }\n            measureShapeAnnotation.Calibrate = this.getMeasureObject(polygonAnnot);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureShapeAnnotation.Calibrate)) {\n                return shapeAnnotation;\n            }\n            if (measureShapeAnnotation.Indent === 'PolygonVolume' && polygonAnnot._dictionary.has('Depth') && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('Depth')))) {\n                measureShapeAnnotation.Calibrate.Depth = polygonAnnot._dictionary.get('Depth');\n            }\n            measureShapeAnnotation.Caption = false;\n            measureShapeAnnotation.LeaderLength = 0;\n            measureShapeAnnotation.LeaderLineExtension = 0;\n            measureShapeAnnotation.LeaderLineOffset = 0;\n            measureShapeAnnotation.CaptionPosition = '';\n            if (polygonAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly) {\n                measureShapeAnnotation.IsCommentLock = true;\n            }\n            else {\n                measureShapeAnnotation.IsCommentLock = false;\n            }\n            if (polygonAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print) {\n                measureShapeAnnotation.IsPrint = true;\n            }\n            if (polygonAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polygonAnnot._dictionary.get('CustomData'))) {\n                var customData = polygonAnnot._dictionary.get('CustomData');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(customData)) {\n                    measureShapeAnnotation.ExistingCustomData = customData;\n                }\n            }\n            return measureShapeAnnotation;\n        }\n        else {\n            return shapeAnnotation;\n        }\n    };\n    /**\n     * @param {PdfPolyLineAnnotation} polyLineAnnot - polyLineAnnot\n     * @param {number} height -height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfFreeTextAnnotation} shapeFreeText - shapeFreeText\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadPolylineAnnotation = function (polyLineAnnot, height, width, pageRotation, shapeFreeText) {\n        var shapeAnnotation = new ShapeAnnotationBase();\n        shapeAnnotation.ShapeAnnotationType = 'Polyline';\n        shapeAnnotation.Author = polyLineAnnot.author;\n        shapeAnnotation.AnnotName = polyLineAnnot.name;\n        shapeAnnotation.Subject = polyLineAnnot.subject;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot.modifiedDate)) {\n            shapeAnnotation.ModifiedDate = this.formatDate(polyLineAnnot.modifiedDate);\n        }\n        else {\n            shapeAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        shapeAnnotation.Note = this.getValidNoteContent(polyLineAnnot.text);\n        shapeAnnotation.Thickness = polyLineAnnot.border.width;\n        shapeAnnotation.BorderStyle = this.getBorderStylesString(polyLineAnnot.border.style);\n        shapeAnnotation.BorderDashArray = polyLineAnnot.border.dash ? polyLineAnnot.border.dash[0] ? polyLineAnnot.border.dash[0] : 0 : 0;\n        shapeAnnotation.Opacity = polyLineAnnot.opacity;\n        shapeAnnotation.RotateAngle = this.getRotateAngleString(polyLineAnnot.rotate);\n        shapeAnnotation.AnnotType = 'shape';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot.reviewHistory)) {\n            for (var i = 0; i < polyLineAnnot.reviewHistory.count; i++) {\n                shapeAnnotation.State = this.getStateString(polyLineAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n                shapeAnnotation.StateModel = this.getStateModelString(polyLineAnnot.reviewHistory.at(parseInt(i.toString(), 10)).\n                    stateModel);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(shapeAnnotation.StateModel)) {\n            shapeAnnotation.State = 'Unmarked';\n            shapeAnnotation.StateModel = 'None';\n        }\n        shapeAnnotation.Comments = new Array();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot.comments)) {\n            for (var i = 0; i < polyLineAnnot.comments.count; i++) {\n                var annot = this.loadPopupAnnotation(polyLineAnnot.comments.at(i), height, width, pageRotation);\n                shapeAnnotation.Comments.push(annot);\n            }\n        }\n        shapeAnnotation.Bounds = this.getBounds(polyLineAnnot.bounds, height, width, pageRotation);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._dictionary.get('Vertices'))) {\n            shapeAnnotation.VertexPoints = this.getVertexPoints(polyLineAnnot._dictionary.get('Vertices'), width, height, pageRotation, polyLineAnnot._page);\n        }\n        shapeAnnotation.StrokeColor = 'rgba(' + polyLineAnnot.color[0] + ',' + polyLineAnnot.color[1] + ',' + polyLineAnnot.color[2] + ',' + (polyLineAnnot.color[3] ? polyLineAnnot.color[3] : 1) + ')';\n        var fillOpacity = polyLineAnnot.color[3] ? polyLineAnnot.color[3] : 1;\n        if (polyLineAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(polyLineAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = polyLineAnnot.innerColor ? fillOpacity : 0;\n        polyLineAnnot.innerColor = polyLineAnnot.innerColor ? polyLineAnnot.innerColor : [255, 255, 255];\n        shapeAnnotation.FillColor = 'rgba(' + polyLineAnnot.innerColor[0] + ',' + polyLineAnnot.innerColor[1] + ',' + polyLineAnnot.innerColor[2] + ',' + fillOpacity + ')';\n        shapeAnnotation.LineHeadStart = this.getLineEndingStyleString(polyLineAnnot.beginLineStyle);\n        shapeAnnotation.LineHeadEnd = this.getLineEndingStyleString(polyLineAnnot.endLineStyle);\n        shapeAnnotation.EnableShapeLabel = false;\n        if (shapeFreeText != null) {\n            shapeAnnotation.EnableShapeLabel = true;\n            shapeAnnotation.LabelContent = shapeFreeText.text;\n            shapeAnnotation.LabelFillColor = 'rgba(' + shapeFreeText.color[0] + ',' + shapeFreeText.color[1] + ',' + shapeFreeText.color[2] + ',' + (shapeFreeText.color[3] ? shapeFreeText.color[3] : 1) + ')';\n            shapeAnnotation.FontColor = 'rgba(' + shapeFreeText.textMarkUpColor[0] + ',' + shapeFreeText.textMarkUpColor[1] + ',' + shapeFreeText.textMarkUpColor[2] + ',' + (shapeFreeText.textMarkUpColor[3] ? shapeFreeText.textMarkUpColor[3] : 1) + ')';\n            shapeAnnotation.LabelBorderColor = 'rgba(' + shapeFreeText.borderColor[0] + ',' + shapeFreeText.borderColor[1] + ',' + shapeFreeText.borderColor[2] + ',' + (shapeFreeText.borderColor[3] ? shapeFreeText.borderColor[3] : 1) + ')';\n            shapeAnnotation.FontSize = shapeFreeText.font.size;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._borderEffect)) {\n            if (polyLineAnnot._borderEffect.style === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderEffectStyle.cloudy) {\n                shapeAnnotation.IsCloudShape = true;\n                shapeAnnotation.CloudIntensity = polyLineAnnot._borderEffect.intensity;\n            }\n            else {\n                shapeAnnotation.IsCloudShape = false;\n                shapeAnnotation.CloudIntensity = 0;\n            }\n        }\n        else {\n            shapeAnnotation.IsCloudShape = false;\n            shapeAnnotation.CloudIntensity = 0;\n        }\n        if (polyLineAnnot._dictionary.has('RD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._dictionary.get('RD'))) {\n            shapeAnnotation.RectangleDifference = polyLineAnnot._dictionary.get('RD');\n        }\n        else {\n            shapeAnnotation.RectangleDifference = new Array();\n        }\n        this.updateIsLockProperty(shapeAnnotation, polyLineAnnot);\n        if (polyLineAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._dictionary.get('CustomData'))) {\n            var customData = polyLineAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                shapeAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (polyLineAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = polyLineAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            shapeAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        if (polyLineAnnot._dictionary.has('Measure')) {\n            shapeAnnotation.FillColor = 'rgba(' + polyLineAnnot.innerColor[0] + ',' + polyLineAnnot.innerColor[1] + ',' + polyLineAnnot.innerColor[2] + ',' + fillOpacity + ')';\n            var measureShapeAnnotation = new MeasureShapeAnnotationBase(shapeAnnotation);\n            measureShapeAnnotation.Calibrate = this.getMeasureObject(polyLineAnnot);\n            if (polyLineAnnot._dictionary.has('IT')) {\n                measureShapeAnnotation.Indent = polyLineAnnot._dictionary.get('IT').name;\n            }\n            else {\n                measureShapeAnnotation.Indent = 'PolyLineDimension';\n            }\n            measureShapeAnnotation.Caption = false;\n            measureShapeAnnotation.LeaderLength = 0;\n            measureShapeAnnotation.LeaderLineExtension = 0;\n            measureShapeAnnotation.LeaderLineOffset = 0;\n            measureShapeAnnotation.CaptionPosition = '';\n            if (polyLineAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly) {\n                measureShapeAnnotation.IsCommentLock = true;\n            }\n            else {\n                measureShapeAnnotation.IsCommentLock = false;\n            }\n            if (polyLineAnnot.flags === _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print) {\n                measureShapeAnnotation.IsPrint = true;\n            }\n            if (polyLineAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(polyLineAnnot._dictionary.get('CustomData'))) {\n                var customData = polyLineAnnot._dictionary.get('CustomData');\n                if (customData != null) {\n                    measureShapeAnnotation.ExistingCustomData = customData;\n                }\n            }\n            return measureShapeAnnotation;\n        }\n        else {\n            return shapeAnnotation;\n        }\n    };\n    /**\n     * @private\n     * @param {PdfRubberStampAnnotation} annotation - annotation\n     * @param {number} pageNumber - pageNumber\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadSignatureImage = function (annotation, pageNumber) {\n        var stampAnnotation = annotation;\n        var formsFields = new SignatureAnnotationBase();\n        formsFields.SignatureName = stampAnnotation.name;\n        var dictionary = annotation._dictionary.get('AP');\n        if (dictionary === null) {\n            var pdfReference = annotation._dictionary.get('AP');\n            if (pdfReference !== null && pdfReference.Object !== null) {\n                dictionary = pdfReference.Object;\n            }\n        }\n        if (dictionary !== null && dictionary.has('N')) {\n            this.m_renderer.findStampImage(annotation);\n        }\n        formsFields.Bounds = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_1__.Rect(stampAnnotation.bounds.x, stampAnnotation.bounds.y, stampAnnotation.bounds.width, stampAnnotation.bounds.height);\n        formsFields.PathData = this.m_renderer.imageData;\n        formsFields.AnnotationType = 'SignatureImage';\n        formsFields.PageNumber = pageNumber;\n        formsFields.Opacity = stampAnnotation.opacity;\n        formsFields.StrokeColor = 'rgba(' + stampAnnotation.color + ',' + stampAnnotation.color[1] + ',' + stampAnnotation.color[2] + ',' + (stampAnnotation.color[3] ? stampAnnotation.color[3] : 1) + ')';\n        return formsFields;\n    };\n    AnnotationRenderer.prototype.getMeasureObject = function (annotation) {\n        var measureObject = new Measure();\n        var measureDictionary;\n        if (annotation._dictionary.has('Measure')) {\n            measureDictionary = annotation._dictionary.get('Measure');\n        }\n        if (measureDictionary.has('R')) {\n            measureObject.Ratio = measureDictionary.get('R');\n        }\n        else {\n            return null;\n        }\n        var xList;\n        if (measureDictionary.has('X')) {\n            xList = this.getMeasureValues(measureDictionary.getArray('X'));\n        }\n        measureObject.X = xList;\n        var distanceList;\n        if (measureDictionary.has('D')) {\n            distanceList = this.getMeasureValues(measureDictionary.getArray('D'));\n        }\n        measureObject.Distance = distanceList;\n        var areaList;\n        if (measureDictionary.has('A')) {\n            areaList = this.getMeasureValues(measureDictionary.getArray('A'));\n        }\n        measureObject.Area = areaList;\n        var angleList;\n        if (measureDictionary.has('T')) {\n            angleList = this.getMeasureValues(measureDictionary.getArray('T'));\n        }\n        measureObject.Angle = angleList;\n        var volumeList;\n        if (measureDictionary.has('V')) {\n            volumeList = this.getMeasureValues(measureDictionary.getArray('V'));\n        }\n        measureObject.Volume = volumeList;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureDictionary) && measureDictionary.has('TargetUnitConversion')) {\n            measureObject.TargetUnitConversion = measureDictionary.get('TargetUnitConversion').FloatValue;\n        }\n        else {\n            measureObject.TargetUnitConversion = 0;\n        }\n        return measureObject;\n    };\n    AnnotationRenderer.prototype.getMeasureValues = function (arrayValues) {\n        var measureValuesArray = new Array();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(arrayValues)) {\n            for (var index = 0; index < arrayValues.length; index++) {\n                var measureFormat = arrayValues[parseInt(index.toString(), 10)];\n                var measureValue = new NumberFormat();\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat)) {\n                    if (measureFormat.has('D') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat.get('D'))) {\n                        measureValue.Denominator = measureFormat.get('D');\n                    }\n                    if (measureFormat.has('C') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat.get('C'))) {\n                        measureValue.ConversionFactor = measureFormat.get('C');\n                    }\n                    if (measureFormat.has('F') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat.get('F'))) {\n                        var fObject = measureFormat.get('F');\n                        if (typeof fObject === 'object' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fObject.name)) {\n                            measureValue.FractionalType = fObject.name;\n                        }\n                    }\n                    else {\n                        measureValue.FractionalType = 'D';\n                    }\n                    if (measureFormat.has('FD') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat.get('FD'))) {\n                        measureValue.FormatDenominator = measureFormat.get('FD');\n                    }\n                    if (measureFormat.has('U') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(measureFormat.get('U'))) {\n                        measureValue.Unit = measureFormat.get('U');\n                    }\n                }\n                measureValuesArray.push(measureValue);\n            }\n        }\n        return measureValuesArray;\n    };\n    AnnotationRenderer.prototype.getVertexPoints = function (vertices, pageWidth, pageHeight, pageRotation, page) {\n        var vertexPoints = [];\n        var cropBox = this.getBothCropBoxValue(page);\n        var cropBoxX = 0;\n        var cropBoxY = 0;\n        if (!(cropBox[0] === 0 && page.cropBox[2] === page.size[2] && cropBox[1] === page.size[3])) {\n            cropBoxX = cropBox[0];\n            cropBoxY = cropBox[1];\n        }\n        if (pageRotation === 0) {\n            for (var i = 0; i < vertices.length; i++) {\n                var point = { X: this.convertPointToPixel(vertices[parseInt(i.toString(), 10)]) -\n                        this.convertPointToPixel(cropBoxX), Y: (pageHeight - this.convertPointToPixel(vertices[i + 1])) +\n                        this.convertPointToPixel(cropBoxY) };\n                i = i + 1;\n                vertexPoints.push(point);\n            }\n        }\n        else if (pageRotation === 1) {\n            for (var i = 0; i < vertices.length; i++) {\n                var point = { X: this.convertPointToPixel(vertices[i + 1]),\n                    Y: this.convertPointToPixel(vertices[parseInt(i.toString(), 10)]) };\n                i = i + 1;\n                vertexPoints.push(point);\n            }\n        }\n        else if (pageRotation === 2) {\n            for (var i = 0; i < vertices.length; i++) {\n                var point = { X: pageWidth - this.convertPointToPixel(vertices[parseInt(i.toString(), 10)]),\n                    Y: this.convertPointToPixel(vertices[i + 1]) };\n                i = i + 1;\n                vertexPoints.push(point);\n            }\n        }\n        else if (pageRotation === 3) {\n            for (var i = 0; i < vertices.length; i++) {\n                var point = { X: pageWidth - this.convertPointToPixel(vertices[i + 1]),\n                    Y: pageHeight - this.convertPointToPixel(vertices[parseInt(i.toString(), 10)]) };\n                i = i + 1;\n                vertexPoints.push(point);\n            }\n        }\n        return vertexPoints;\n    };\n    AnnotationRenderer.prototype.getLineIndentString = function (lineIntent) {\n        switch (lineIntent) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineIntent.lineArrow:\n                return 'LineArrow';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineIntent.lineDimension:\n                return 'LineDimension';\n        }\n    };\n    AnnotationRenderer.prototype.getLineEndingStyleString = function (lineEndingStyle) {\n        switch (lineEndingStyle) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.none:\n                return 'None';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.butt:\n                return 'Butt';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.circle:\n                return 'Circle';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.closedArrow:\n                return 'ClosedArrow';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.diamond:\n                return 'Diamond';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.openArrow:\n                return 'OpenArrow';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rClosedArrow:\n                return 'RClosedArrow';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.rOpenArrow:\n                return 'ROpenArrow';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.slash:\n                return 'Slash';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineEndingStyle.square:\n                return 'Square';\n        }\n    };\n    AnnotationRenderer.prototype.getBorderStylesString = function (borderStyle) {\n        switch (borderStyle) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.solid:\n                return 'Solid';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dashed:\n                return 'Dashed';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.beveled:\n                return 'Beveled';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.inset:\n                return 'Inset';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.underline:\n                return 'Underline';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dot:\n                return 'Dot';\n            default:\n                return 'None';\n        }\n    };\n    AnnotationRenderer.prototype.getBorderStyle = function (borderStyle) {\n        var style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.solid;\n        switch (borderStyle) {\n            case 'Solid':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.solid;\n                break;\n            case 'Dashed':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dashed;\n                break;\n            case 'Beveled':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.beveled;\n                break;\n            case 'Inset':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.inset;\n                break;\n            case 'Underline':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.underline;\n                break;\n            case 'Dot':\n                style = _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfBorderStyle.dot;\n                break;\n        }\n        return style;\n    };\n    AnnotationRenderer.prototype.getRotateAngleString = function (angle) {\n        switch (angle) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle0:\n                return 'RotateAngle0';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle90:\n                return 'RotateAngle90';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle180:\n                return 'RotateAngle180';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRotationAngle.angle270:\n                return 'RotateAngle270';\n            default:\n                return 'RotateAngle0';\n        }\n    };\n    AnnotationRenderer.prototype.getValidNoteContent = function (note) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(note) || note === '' || note === ' ') {\n            return '';\n        }\n        return note;\n    };\n    AnnotationRenderer.prototype.getBounds = function (bounds, pageHeight, pageWidth, pageRotation) {\n        var bound;\n        if (pageRotation === 0) {\n            bound = new AnnotBounds(this.convertPointToPixel(bounds.x), this.convertPointToPixel(bounds.y), this.convertPointToPixel(bounds.width), this.convertPointToPixel(bounds.height));\n        }\n        else if (pageRotation === 1) {\n            bound = new AnnotBounds(pageWidth - this.convertPointToPixel(bounds.y) - this.convertPointToPixel(bounds.height), this.convertPointToPixel(bounds.x), this.convertPointToPixel(bounds.height), this.convertPointToPixel(bounds.width));\n        }\n        else if (pageRotation === 2) {\n            bound = new AnnotBounds(pageWidth - this.convertPointToPixel(bounds.x) - this.convertPointToPixel(bounds.width), pageHeight - this.convertPointToPixel(bounds.y) - this.convertPointToPixel(bounds.height), this.convertPointToPixel(bounds.width), this.convertPointToPixel(bounds.height));\n        }\n        else if (pageRotation === 3) {\n            bound = new AnnotBounds(this.convertPointToPixel(bounds.y), pageHeight - this.convertPointToPixel(bounds.x) -\n                this.convertPointToPixel(bounds.width), this.convertPointToPixel(bounds.height), this.convertPointToPixel(bounds.width));\n        }\n        return bound;\n    };\n    /**\n     * @private\n     * @param {PdfPopupAnnotation} popupAnnot - popupAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadPopupAnnotation = function (popupAnnot, height, width, pageRotation) {\n        var popupAnnotation = new PopupAnnotationBase();\n        popupAnnotation.Author = popupAnnot.author;\n        popupAnnotation.Subject = popupAnnot.subject;\n        if (popupAnnot._dictionary.has('Subtype') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('Subtype')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('Subtype').name)) {\n            popupAnnotation.SubType = popupAnnot._dictionary.get('Subtype').name.toString();\n        }\n        if (popupAnnot._dictionary.has('Type') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('Type')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('Type').name)) {\n            popupAnnotation.Type = popupAnnot._dictionary.get('Type').name.toString();\n        }\n        if (popupAnnot._dictionary.has('IRT') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('IRT'))) {\n            var reference = popupAnnot._dictionary.get('IRT');\n            if (reference != null) {\n                popupAnnotation.Reference = reference.Reference;\n            }\n        }\n        popupAnnotation.AnnotName = popupAnnot.name;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot.modifiedDate)) {\n            popupAnnotation.ModifiedDate = this.formatDate(popupAnnot.modifiedDate);\n        }\n        else {\n            popupAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        popupAnnotation.Note = popupAnnot.text;\n        this.updateIsLockProperty(popupAnnotation, popupAnnot);\n        popupAnnotation.Icon = this.getPopupIconString(popupAnnot.icon);\n        popupAnnotation.State = this.getStateString(popupAnnot.state);\n        popupAnnotation.StateModel = this.getStateModelString(popupAnnot.stateModel);\n        popupAnnotation.Size = new _index__WEBPACK_IMPORTED_MODULE_3__.SizeBase(popupAnnot.bounds.width, popupAnnot.bounds.height);\n        popupAnnot.color = popupAnnot.color ? popupAnnot.color : [0, 0, 0];\n        popupAnnotation.Color = new AnnotColor(popupAnnot.color[0], popupAnnot.color[1], popupAnnot.color[2]);\n        popupAnnotation.Opacity = popupAnnot.opacity;\n        popupAnnotation.AnnotType = 'sticky';\n        popupAnnotation.StrokeColor = 'rgba(' + popupAnnotation.Color.R + ',' + popupAnnotation.Color.G + ',' + popupAnnotation.Color.B + ',' + 1 + ')';\n        popupAnnotation.Bounds = this.getBounds(popupAnnot.bounds, height, width, pageRotation);\n        for (var i = 0; i < popupAnnot.reviewHistory.count; i++) {\n            popupAnnotation.State = this.getStateString(popupAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            popupAnnotation.StateModel = this.getStateModelString(popupAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnotation.State) || popupAnnotation.State === 'None' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnotation.StateModel)) {\n            popupAnnotation.State = 'Unmarked';\n            popupAnnotation.StateModel = 'None';\n        }\n        popupAnnotation.Comments = new Array();\n        if (popupAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupAnnot._dictionary.get('CustomData'))) {\n            var customData = popupAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                popupAnnotation.ExistingCustomData = customData;\n            }\n        }\n        for (var i = 0; i < popupAnnot.comments.count; i++) {\n            popupAnnotation.Comments.push(this.loadPopupAnnotation(popupAnnot.comments.at(i), height, width, pageRotation));\n        }\n        return popupAnnotation;\n    };\n    /**\n     * @param {PdfFreeTextAnnotation} freeTextAnnot - freeTextAnnot\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfPage} page - page\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadFreeTextAnnotation = function (freeTextAnnot, height, width, pageRotation, page) {\n        var freeTextAnnotation = new FreeTextAnnotationBase();\n        freeTextAnnotation.AnnotationIntent = this.getAnnotationIntentString(freeTextAnnot.annotationIntent); // returns wrong value\n        freeTextAnnotation.AnnotationFlags = this.getAnnotationFlagsString(freeTextAnnot.flags);\n        freeTextAnnotation.Author = freeTextAnnot.author;\n        freeTextAnnotation.AnnotName = freeTextAnnot.name;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.AnnotName) || freeTextAnnotation.AnnotName === '') {\n            freeTextAnnotation.AnnotName = Math.abs(Math.random()).toString(36).substring(2);\n        }\n        freeTextAnnotation.AnnotType = 'Text Box';\n        freeTextAnnotation.FreeTextAnnotationType = 'Text Box';\n        freeTextAnnotation.BorderColor = new AnnotColor(freeTextAnnot.borderColor[0], freeTextAnnot.borderColor[1], freeTextAnnot.borderColor[2]);\n        var points = [{ X: 100, Y: 400 }, { X: 200, Y: 400 }];\n        freeTextAnnotation.CalloutLines = points;\n        var backgroundColor = freeTextAnnot.color ? freeTextAnnot.color : [0, 0, 0];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot.color)) {\n            freeTextAnnotation.IsTransparentSet = true;\n        }\n        freeTextAnnotation.Color = new AnnotColor(backgroundColor[0], backgroundColor[1], backgroundColor[2]);\n        freeTextAnnotation.Flatten = freeTextAnnot.flatten;\n        freeTextAnnotation.FlattenPopups = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot.flattenPopups) ? freeTextAnnot.flattenPopups : false; // returns undefined\n        freeTextAnnotation.FontFamily = this.getFontFamilyString(freeTextAnnot.font._fontFamily);\n        freeTextAnnotation.FontSize = this.convertPointToPixel(freeTextAnnot.font.size);\n        freeTextAnnotation.Font = new FontBase(freeTextAnnot.font, freeTextAnnotation.FontFamily); // need to be checked\n        freeTextAnnotation.Thickness = freeTextAnnot.border.width;\n        freeTextAnnotation.StrokeColor = 'rgba(' + freeTextAnnot.borderColor[0] + ',' + freeTextAnnot.borderColor[1] + ',' + freeTextAnnot.borderColor[2] + ',' + (freeTextAnnot.borderColor[3] ? freeTextAnnot.borderColor[3] : 1) + ')';\n        var fillOpacity;\n        if (freeTextAnnot._dictionary.has('FillOpacity') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot._dictionary.get('FillOpacity'))) {\n            fillOpacity = parseInt(freeTextAnnot._dictionary.get('FillOpacity').toString(), 10);\n        }\n        fillOpacity = freeTextAnnot.color ? (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fillOpacity) ? fillOpacity : 1) : 0;\n        freeTextAnnotation.FillColor = 'rgba(' + backgroundColor[0] + ',' + backgroundColor[1] + ',' + backgroundColor[2] + ',' + fillOpacity + ')';\n        freeTextAnnotation.Layer = freeTextAnnot._dictionary.has('Layer') ? freeTextAnnot._dictionary.get('Layer') : null;\n        // freeTextAnnotation.Location = freeTextAnnot._dictionary.has('Location') ? freeTextAnnot._dictionary.get('Location') : JSON.stringify({X: freeTextAnnot.bounds.x ,Y: freeTextAnnot.bounds.y});\n        freeTextAnnotation.Location = freeTextAnnot._dictionary.has('Location') ? freeTextAnnot._dictionary.get('Location') : '{X=' + freeTextAnnot.bounds.x + ',Y=' + freeTextAnnot.bounds.y + '}';\n        freeTextAnnotation.MarkupText = freeTextAnnot.text;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot.modifiedDate)) {\n            freeTextAnnotation.ModifiedDate = this.formatDate(freeTextAnnot.modifiedDate);\n        }\n        else {\n            freeTextAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        freeTextAnnotation.Name = 'freeText';\n        freeTextAnnotation.Opacity = freeTextAnnot.opacity;\n        if (freeTextAnnot._dictionary.has('Rotation') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot._dictionary.get('Rotation'))) {\n            freeTextAnnotation.Rotate = parseInt(freeTextAnnot._dictionary.get('Rotation'), 10);\n        }\n        if (freeTextAnnot._dictionary.has('Rotate') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot._dictionary.get('Rotate'))) {\n            freeTextAnnotation.Rotate = parseInt(freeTextAnnot._dictionary.get('Rotate'), 10);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot.subject)) {\n            freeTextAnnotation.Subject = freeTextAnnot.subject;\n        }\n        else {\n            freeTextAnnotation.Subject = 'Text Box';\n        }\n        freeTextAnnotation.Text = freeTextAnnot.text;\n        freeTextAnnotation.MarkupText = freeTextAnnot.text;\n        freeTextAnnotation.TextAlign = this.getTextAlignmentString(freeTextAnnot.textAlignment);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.State) || freeTextAnnotation.State === 'None' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnotation.StateModel)) {\n            freeTextAnnotation.State = 'Unmarked';\n            freeTextAnnotation.StateModel = 'None';\n        }\n        freeTextAnnotation.FontColor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot.textMarkUpColor) ? 'rgba(' + freeTextAnnot.textMarkUpColor[0] + ',' + freeTextAnnot.textMarkUpColor[1] + ',' + freeTextAnnot.textMarkUpColor[2] + ',' + (freeTextAnnot.textMarkUpColor[3] ? freeTextAnnot.textMarkUpColor[3] : 1) + ')' : 'rgba(0, 0, 0, 1)';\n        for (var i = 0; i < freeTextAnnot.reviewHistory.count; i++) {\n            freeTextAnnotation.State = this.getStateString(freeTextAnnot.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            freeTextAnnotation.StateModel = this.getStateModelString(freeTextAnnot.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        freeTextAnnotation.Comments = new Array();\n        for (var i = 0; i < freeTextAnnot.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(freeTextAnnot.comments.at(i), height, width, pageRotation);\n            freeTextAnnotation.Comments.push(annot);\n        }\n        freeTextAnnotation.Bounds = this.getBounds(freeTextAnnot.bounds, height, width, pageRotation);\n        if (freeTextAnnotation.Bounds.Y < 0) {\n            var cropRect = { x: freeTextAnnot.bounds.x, y: page.cropBox[1] + freeTextAnnot.bounds.y,\n                width: freeTextAnnot.bounds.width, height: freeTextAnnot.bounds.height };\n            freeTextAnnotation.Bounds = this.getBounds(cropRect, height, width, pageRotation);\n        }\n        freeTextAnnotation.PageRotation = pageRotation;\n        this.updateIsLockProperty(freeTextAnnotation, freeTextAnnot);\n        if (freeTextAnnot._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(freeTextAnnot._dictionary.get('CustomData'))) {\n            var customData = freeTextAnnot._dictionary.get('CustomData');\n            if (customData != null) {\n                freeTextAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (freeTextAnnot._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = freeTextAnnot.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            freeTextAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        return freeTextAnnotation;\n    };\n    AnnotationRenderer.prototype.getTextAlignmentString = function (textAlignment) {\n        switch (textAlignment) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.left:\n                return 'Left';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.right:\n                return 'Right';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.center:\n                return 'Center';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextAlignment.justify:\n                return 'Justify';\n            default:\n                return 'Left';\n        }\n    };\n    /**\n     * @param {PdfFreeTextAnnotation} inkAnnot - inkAnnot\n     * @param {number} pageNumber - pageNumber\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadSignatureText = function (inkAnnot, pageNumber, height, width, pageRotation) {\n        var formFields = new SignatureAnnotationBase();\n        formFields.SignatureName = inkAnnot.name;\n        formFields.Bounds = this.getBounds(inkAnnot.bounds, width, height, pageRotation);\n        formFields.AnnotationType = 'SignatureText';\n        formFields.FontFamily = this.getFontFamilyString(inkAnnot.font._fontFamily);\n        formFields.FontSize = this.convertPointToPixel(inkAnnot.font.size);\n        formFields.PathData = inkAnnot.text;\n        formFields.PageNumber = pageNumber;\n        formFields.StrokeColor = 'rgba(' + inkAnnot.textMarkUpColor[0] + ',' + inkAnnot.textMarkUpColor[1] + ',' + inkAnnot.textMarkUpColor[2] + ',' + (inkAnnot.textMarkUpColor[3] ? inkAnnot.textMarkUpColor[3] : 1) + ')';\n        formFields.Opacity = inkAnnot.opacity;\n        formFields.Thickness = 1;\n        return formFields;\n    };\n    AnnotationRenderer.prototype.getFontFamilyString = function (fontFamily) {\n        switch (fontFamily) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica:\n                return 'Helvetica';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.timesRoman:\n                return 'Times New Roman';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.courier:\n                return 'Courier';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.symbol:\n                return 'Symbol';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.zapfDingbats:\n                return 'ZapfDingbats';\n            default:\n                return 'Helvetica';\n        }\n    };\n    AnnotationRenderer.prototype.getAnnotationFlagsString = function (flags) {\n        switch (flags) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.default:\n                return 'Default';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.invisible:\n                return 'Invisible';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.hidden:\n                return 'Hidden';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.print:\n                return 'Print';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noZoom:\n                return 'NoZoom';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noRotate:\n                return 'NoRotate';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.noView:\n                return 'NoView';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.readOnly:\n                return 'ReadOnly';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.locked:\n                return 'Locked';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationFlag.toggleNoView:\n                return 'ToggleNoView';\n            default:\n                return 'Default';\n        }\n    };\n    AnnotationRenderer.prototype.getAnnotationIntentString = function (annotationIntent) {\n        switch (annotationIntent) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextCallout:\n                return 'FreeTextCallout';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.freeTextTypeWriter:\n                return 'FreeTextTypeWriter';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationIntent.none:\n                return 'None';\n        }\n    };\n    AnnotationRenderer.prototype.getStateString = function (state) {\n        switch (state) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.accepted:\n                return 'Accepted';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.rejected:\n                return 'Rejected';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.cancel:\n                return 'Cancelled';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.completed:\n                return 'Completed';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.none:\n                return 'None';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unmarked:\n                return 'Unmarked';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.marked:\n                return 'Marked';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationState.unknown:\n                return 'Unknown';\n            default:\n                return null;\n        }\n    };\n    AnnotationRenderer.prototype.getStateModelString = function (stateModel) {\n        switch (stateModel) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.review:\n                return 'Review';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.marked:\n                return 'Marked';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationStateModel.none:\n                return 'None';\n            default:\n                return 'None';\n        }\n    };\n    AnnotationRenderer.prototype.getPopupIconString = function (icon) {\n        switch (icon) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.comment:\n                return 'Comment';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.help:\n                return 'Help';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.insert:\n                return 'Insert';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.key:\n                return 'Key';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.newParagraph:\n                return 'NewParagraph';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.note:\n                return 'Note';\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupIcon.paragraph:\n                return 'Paragraph';\n            default:\n                return null;\n        }\n    };\n    AnnotationRenderer.prototype.formatDate = function (date) {\n        var month = this.datePadding(date.getMonth() + 1); // Months are zero-based\n        var day = this.datePadding(date.getDate());\n        var year = date.getFullYear();\n        var hours = this.datePadding(date.getHours());\n        var minutes = this.datePadding(date.getMinutes());\n        var seconds = this.datePadding(date.getSeconds());\n        return month + \"/\" + day + \"/\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n    };\n    // Pad the numbers with leading zeros if they are single digits\n    AnnotationRenderer.prototype.datePadding = function (number) {\n        return number < 10 ? ('0' + number) : number.toString();\n    };\n    /**\n     * @param {string} jsonObject - jsonObject\n     * @param {PdfDocument} loadedDocument - loadedDocument\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.removeSignatureTypeAnnot = function (jsonObject, loadedDocument) {\n        if ((Object.prototype.hasOwnProperty.call(jsonObject, 'isAnnotationsExist') &&\n            JSON.parse(jsonObject['isAnnotationsExist'])) ||\n            (Object.prototype.hasOwnProperty.call(jsonObject, 'isFormFieldAnnotationsExist') &&\n                JSON.parse(jsonObject['isFormFieldAnnotationsExist']))) {\n            var annotationPageList = jsonObject.annotationsPageList ? jsonObject.annotationsPageList : [];\n            var formFieldsPageList = jsonObject.formFieldsPageList ? (jsonObject.formFieldsPageList) : '[]';\n            if (annotationPageList.length !== 0) {\n                var removeAnnotList = JSON.parse(annotationPageList);\n                for (var i = 0; i < removeAnnotList.length; i++) {\n                    var loadedPageNo = removeAnnotList[parseInt(i.toString(), 10)];\n                    // Removing annotations from the page.\n                    var page = loadedDocument.getPage(parseInt(loadedPageNo, 10));\n                    var oldPageAnnotations = page.annotations;\n                    var totalAnnotation = parseInt(oldPageAnnotations.count.toString(), 10);\n                    for (var m = totalAnnotation - 1; m >= 0; m--) {\n                        var annotation = oldPageAnnotations.at(m);\n                        if (annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFreeTextAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfInkAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfSquareAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfCircleAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfEllipseAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolygonAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRectangleAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolyLineAnnotation) {\n                            oldPageAnnotations.remove(annotation);\n                        }\n                    }\n                }\n            }\n            if (formFieldsPageList.length !== 0) {\n                var removeAnnotList = JSON.parse(formFieldsPageList);\n                for (var i = 0; i < removeAnnotList.length; i++) {\n                    var loadedPageNo = removeAnnotList[parseInt(i.toString(), 10)];\n                    // Removing formfields from the page.\n                    var page = loadedDocument.getPage(parseInt(loadedPageNo, 10) - 1);\n                    var oldPageAnnotations = page.annotations;\n                    var totalAnnotation = parseInt(oldPageAnnotations.count.toString(), 10);\n                    for (var m = totalAnnotation - 1; m >= 0; m--) {\n                        var annotation = oldPageAnnotations.at(m);\n                        if (annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfFreeTextAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfInkAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfLineAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRubberStampAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPopupAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfSquareAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfCircleAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfEllipseAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolygonAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfRectangleAnnotation ||\n                            annotation instanceof _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfPolyLineAnnotation) {\n                            oldPageAnnotations.remove(annotation);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {any} annotation - annotation\n     * @param {any} AnnotFromPDF - AnnotFromPDF\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.updateIsLockProperty = function (annotation, AnnotFromPDF) {\n        var annotFlags = (0,_syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__._annotationFlagsToString)(AnnotFromPDF.flags);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotFlags) && annotFlags.includes('locked')) {\n            annotation.IsLocked = true;\n        }\n        else {\n            annotation.IsLocked = false;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotFlags) && annotFlags.includes('readOnly')) {\n            annotation.IsCommentLock = true;\n        }\n        else {\n            annotation.IsCommentLock = false;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotFlags) && annotFlags.includes('print')) {\n            annotation.IsPrint = true;\n        }\n    };\n    /**\n     * @param {PdfTextMarkupAnnotation} textMarkup - textMarkup\n     * @param {number} height - height\n     * @param {number} width - width\n     * @param {number} pageRotation - pageRotation\n     * @param {PdfPage} page - page\n     * @private\n     * @returns {void}\n     */\n    AnnotationRenderer.prototype.loadTextMarkupAnnotation = function (textMarkup, height, width, pageRotation, page) {\n        var markupAnnotation = new TextMarkupAnnotationBase();\n        markupAnnotation.TextMarkupAnnotationType = this.getMarkupAnnotTypeString(textMarkup.textMarkupType);\n        if (markupAnnotation.TextMarkupAnnotationType === 'StrikeOut') {\n            markupAnnotation.TextMarkupAnnotationType = 'Strikethrough';\n        }\n        markupAnnotation.Author = textMarkup.author;\n        markupAnnotation.Subject = textMarkup.subject;\n        markupAnnotation.AnnotName = textMarkup.name;\n        markupAnnotation.Note = textMarkup.text ? textMarkup.text : '';\n        markupAnnotation.Rect = new RectangleBase(textMarkup.bounds.x, textMarkup.bounds.y, textMarkup.bounds.width + textMarkup.bounds.x, textMarkup.bounds.height + textMarkup.bounds.y);\n        markupAnnotation.Opacity = textMarkup.opacity;\n        // markupAnnotation.Color = 'rgba(' + textMarkup.color[0] + ',' + textMarkup.color[1] + ',' + textMarkup.color[2] + ',' + (textMarkup.color[3] ? textMarkup.color[3] : 1) + ')';\n        markupAnnotation.Color = '#' + (1 << 24 | textMarkup.color[0] << 16 | textMarkup.color[1] << 8 | textMarkup.color[2]).toString(16).slice(1);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textMarkup.modifiedDate)) {\n            markupAnnotation.ModifiedDate = this.formatDate(textMarkup.modifiedDate);\n        }\n        else {\n            markupAnnotation.ModifiedDate = this.formatDate(new Date());\n        }\n        markupAnnotation.AnnotationRotation = textMarkup.rotationAngle;\n        var quadPoints = textMarkup._dictionary.has('QuadPoints') ? textMarkup._dictionary.get('QuadPoints') : [];\n        var bounds = [];\n        if (pageRotation === 0) {\n            for (var i = 0; i < textMarkup.boundsCollection.length; i++) {\n                var _a = textMarkup.boundsCollection[parseInt(i.toString(), 10)], x = _a[0], y = _a[1], width_1 = _a[2], height_1 = _a[3];\n                var boundsObject = { x: x, y: y, width: width_1, height: height_1 };\n                bounds.push(this.getBounds(boundsObject, height_1, width_1, pageRotation));\n            }\n        }\n        else {\n            bounds = this.getTextMarkupBounds(quadPoints, height, width, pageRotation, page);\n        }\n        markupAnnotation.Bounds = bounds;\n        markupAnnotation.AnnotType = 'textMarkup';\n        for (var i = 0; i < textMarkup.reviewHistory.count; i++) {\n            markupAnnotation.State = this.getStateString(textMarkup.reviewHistory.at(parseInt(i.toString(), 10)).state);\n            markupAnnotation.StateModel = this.getStateModelString(textMarkup.reviewHistory.at(parseInt(i.toString(), 10)).stateModel);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.State) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(markupAnnotation.StateModel)) {\n            markupAnnotation.State = 'Unmarked';\n            markupAnnotation.StateModel = 'None';\n        }\n        markupAnnotation.Comments = new Array();\n        for (var i = 0; i < textMarkup.comments.count; i++) {\n            var annot = this.loadPopupAnnotation(textMarkup.comments.at(i), height, width, pageRotation);\n            markupAnnotation.Comments.push(annot);\n        }\n        this.updateIsLockProperty(markupAnnotation, textMarkup);\n        if (textMarkup._dictionary.has('CustomData') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textMarkup._dictionary.get('CustomData'))) {\n            var customData = textMarkup._dictionary.get('CustomData');\n            if (customData != null) {\n                markupAnnotation.ExistingCustomData = customData;\n            }\n        }\n        if (textMarkup._dictionary.has('AllowedInteractions')) {\n            var allowedInteractions = textMarkup.getValues('AllowedInteractions');\n            var text = allowedInteractions[0];\n            markupAnnotation.AllowedInteractions = JSON.parse(text);\n        }\n        if (textMarkup._dictionary.has('TextMarkupContent')) {\n            var textMarkupData = textMarkup.getValues('TextMarkupContent');\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textMarkupData)) {\n                markupAnnotation.TextMarkupContent = textMarkupData[0];\n            }\n        }\n        return markupAnnotation;\n    };\n    AnnotationRenderer.prototype.getTextMarkupBounds = function (quadPoints, pageHeight, pageWidth, pageRotation, page) {\n        var x = 0;\n        var y = 0;\n        var width = 0;\n        var height = 0;\n        var annotationBoundList = [];\n        var cropValues = this.getCropBoxValue(page, false);\n        var cropX = 0;\n        var cropY = 0;\n        if (cropValues.x !== 0 && cropValues.y !== 0) {\n            cropX = cropValues.x;\n            cropY = cropValues.y;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(quadPoints)) {\n            for (var k = 0; k < quadPoints.length; k++) {\n                if (pageRotation === 0) {\n                    x = this.convertPointToPixel(parseInt(quadPoints[parseInt(k.toString(), 10)], 10) - cropX);\n                    y = pageHeight - this.convertPointToPixel(parseInt(quadPoints[k + 1], 10) + cropY);\n                    height = this.convertPointToPixel(parseInt(quadPoints[k + 3], 10) - parseInt(quadPoints[k + 7], 10));\n                    width = this.convertPointToPixel(parseInt(quadPoints[k + 6], 10) - parseInt(quadPoints[k + 4], 10));\n                }\n                else if (pageRotation === 1) {\n                    x = this.convertPointToPixel(parseInt(quadPoints[k + 5], 10));\n                    y = this.convertPointToPixel(parseInt(quadPoints[parseInt(k.toString(), 10)], 10));\n                    height = this.convertPointToPixel(parseInt(quadPoints[k + 6], 10) - parseInt(quadPoints[k + 4], 10));\n                    width = this.convertPointToPixel(parseInt(quadPoints[k + 3], 10) - parseInt(quadPoints[k + 7], 10));\n                }\n                else if (pageRotation === 2) {\n                    x = pageWidth - this.convertPointToPixel(parseInt(quadPoints[k + 2], 10));\n                    y = this.convertPointToPixel(parseInt(quadPoints[k + 5], 10));\n                    height = this.convertPointToPixel(parseInt(quadPoints[k + 3], 10) - parseInt(quadPoints[k + 7], 10));\n                    width = this.convertPointToPixel(parseInt(quadPoints[k + 6], 10) - parseInt(quadPoints[k + 4], 10));\n                }\n                else {\n                    x = pageWidth - this.convertPointToPixel(parseInt(quadPoints[k + 1], 10));\n                    y = pageHeight - this.convertPointToPixel(parseInt(quadPoints[k + 6], 10));\n                    height = this.convertPointToPixel(parseInt(quadPoints[k + 6], 10) - parseInt(quadPoints[k + 4], 10));\n                    width = this.convertPointToPixel(parseInt(quadPoints[k + 3], 10) - parseInt(quadPoints[k + 7], 10));\n                }\n                var bounds = new AnnotBounds(x, y, width, height);\n                k = k + 7;\n                annotationBoundList.push(bounds);\n            }\n        }\n        return annotationBoundList;\n    };\n    AnnotationRenderer.prototype.getMarkupAnnotTypeString = function (textMarkupType) {\n        var type = '';\n        switch (textMarkupType) {\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.highlight:\n                type = 'Highlight';\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.strikeOut:\n                type = 'StrikeOut';\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.underline:\n                type = 'Underline';\n                break;\n            case _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_2__.PdfTextMarkupAnnotationType.squiggly:\n                type = 'Squiggly';\n                break;\n        }\n        return type;\n    };\n    return AnnotationRenderer;\n}());\n\n/**\n *\n * @hidden\n */\nvar PointBase = /** @class */ (function () {\n    function PointBase(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    return PointBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar FreeTextAnnotationBase = /** @class */ (function () {\n    function FreeTextAnnotationBase() {\n        this.AnnotationSelectorSettings = null;\n        this.TextMarkupColor = null;\n        this.Color = null;\n        this.Font = null;\n        this.Border = null;\n        this.LineEndingStyle = null;\n        this.AnnotationFlags = null;\n        this.CalloutLines = null;\n        this.ModifiedDate = null;\n        this.Comments = null;\n        this.CreatedDate = null;\n        this.InnerColor = null;\n        this.Layer = null;\n        this.Page = null;\n        this.PageTags = null;\n        this.ReviewHistory = null;\n        this.Rotate = 0;\n        this.Note = null;\n        this.CustomData = null;\n        this.AnnotationSettings = null;\n        this.IsPrint = true;\n        this.IsReadonly = false;\n        this.ExistingCustomData = null;\n        this.Bounds = null;\n        this.PageRotation = 0;\n        this.IsTransparentSet = false;\n    }\n    return FreeTextAnnotationBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar InkSignatureAnnotation = /** @class */ (function () {\n    function InkSignatureAnnotation() {\n        this.AnnotationType = null;\n        this.Bounds = null;\n        this.CustomData = null;\n        this.Opacity = 0;\n        this.StrokeColor = null;\n        this.Thickness = null;\n        this.PathData = null;\n        this.IsLocked = null;\n        this.IsCommentLock = null;\n        this.PageNumber = null;\n        this.AnnotName = null;\n        this.Author = null;\n        this.ModifiedDate = null;\n        this.Subject = null;\n        this.Note = null;\n        this.State = null;\n        this.StateModel = null;\n        this.AnnotationSelectorSettings = null;\n        this.AnnotationSettings = null;\n        this.AllowedInteractions = null;\n        this.Comments = null;\n        this.AnnotType = null;\n        this.IsPrint = null;\n        this.ExistingCustomData = null;\n    }\n    return InkSignatureAnnotation;\n}());\n\n/**\n *\n * @hidden\n */\nvar ShapeAnnotationBase = /** @class */ (function () {\n    function ShapeAnnotationBase() {\n        this.LabelBounds = new AnnotBounds(0, 0, 0, 0);\n        this.LabelContent = null;\n        this.LabelFillColor = null;\n        this.LabelBorderColor = null;\n        this.LabelSettings = null;\n        this.FontColor = null;\n        this.FontSize = 0;\n        this.AnnotationSettings = null;\n        this.AnnotationSelectorSettings = null;\n        this.VertexPoints = null;\n        this.CustomData = null;\n        this.ExistingCustomData = null;\n        this.IsPrint = true;\n        this.AllowedInteractions = null;\n        this.AnnotationRotation = 0;\n    }\n    return ShapeAnnotationBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar MeasureShapeAnnotationBase = /** @class */ (function () {\n    function MeasureShapeAnnotationBase(shapeAnnotation) {\n        this.LabelBounds = new AnnotBounds(0, 0, 0, 0);\n        this.LabelContent = null;\n        this.LabelFillColor = null;\n        this.LabelBorderColor = null;\n        this.LabelSettings = null;\n        this.FontColor = null;\n        this.FontSize = 0;\n        this.AnnotationSettings = null;\n        this.AnnotationSelectorSettings = null;\n        this.VertexPoints = null;\n        this.CustomData = null;\n        this.ExistingCustomData = null;\n        this.IsPrint = true;\n        this.AllowedInteractions = null;\n        this.AnnotationRotation = 0;\n        this.Author = shapeAnnotation.Author;\n        this.AnnotationSelectorSettings = shapeAnnotation.AnnotationSelectorSettings;\n        this.BorderDashArray = shapeAnnotation.BorderDashArray;\n        this.BorderStyle = shapeAnnotation.BorderStyle;\n        this.Bounds = shapeAnnotation.Bounds;\n        this.CloudIntensity = shapeAnnotation.CloudIntensity;\n        this.FillColor = shapeAnnotation.FillColor;\n        this.IsCloudShape = shapeAnnotation.IsCloudShape;\n        this.IsLocked = shapeAnnotation.IsLocked;\n        this.LineHeadEnd = shapeAnnotation.LineHeadEnd;\n        this.LineHeadStart = shapeAnnotation.LineHeadStart;\n        this.ModifiedDate = shapeAnnotation.ModifiedDate;\n        this.Note = shapeAnnotation.Note;\n        this.Opacity = shapeAnnotation.Opacity;\n        this.RectangleDifference = shapeAnnotation.RectangleDifference;\n        this.RotateAngle = shapeAnnotation.RotateAngle;\n        this.ShapeAnnotationType = shapeAnnotation.ShapeAnnotationType;\n        this.StrokeColor = shapeAnnotation.StrokeColor;\n        this.Subject = shapeAnnotation.Subject;\n        this.Thickness = shapeAnnotation.Thickness;\n        this.VertexPoints = shapeAnnotation.VertexPoints;\n        this.AnnotName = shapeAnnotation.AnnotName;\n        this.Comments = shapeAnnotation.Comments;\n        this.State = shapeAnnotation.State;\n        this.StateModel = shapeAnnotation.StateModel;\n        this.AnnotType = 'shape_measure';\n        this.AnnotationSettings = shapeAnnotation.AnnotationSettings;\n        this.EnableShapeLabel = shapeAnnotation.EnableShapeLabel;\n        this.AllowedInteractions = shapeAnnotation.AllowedInteractions;\n        this.AnnotationRotation = shapeAnnotation.AnnotationRotation;\n        if (shapeAnnotation.EnableShapeLabel === true) {\n            this.LabelContent = shapeAnnotation.LabelContent;\n            this.LabelFillColor = shapeAnnotation.LabelFillColor;\n            this.FontColor = shapeAnnotation.FontColor;\n            this.LabelBorderColor = shapeAnnotation.LabelBorderColor;\n            this.FontSize = shapeAnnotation.FontSize;\n            this.LabelSettings = shapeAnnotation.LabelSettings;\n            this.LabelBounds = shapeAnnotation.LabelBounds;\n        }\n    }\n    return MeasureShapeAnnotationBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar SignatureAnnotationBase = /** @class */ (function () {\n    function SignatureAnnotationBase() {\n        this.PathData = null;\n        this.ExistingCustomData = null;\n    }\n    return SignatureAnnotationBase;\n}());\n\nvar Measure = /** @class */ (function () {\n    function Measure() {\n        this.Ratio = '';\n        this.X = [];\n        this.Distance = [];\n        this.Area = [];\n        this.Angle = [];\n        this.Volume = [];\n        this.TargetUnitConversion = 0;\n        this.Depth = 0;\n    }\n    return Measure;\n}());\nvar NumberFormat = /** @class */ (function () {\n    function NumberFormat() {\n        this.Unit = '';\n        this.ConversionFactor = 0;\n        this.FractionalType = '';\n        this.Denominator = 0;\n        this.FormatDenominator = false;\n    }\n    return NumberFormat;\n}());\n/**\n *\n * @hidden\n */\nvar PopupAnnotationBase = /** @class */ (function () {\n    function PopupAnnotationBase() {\n        this.AnnotationFlags = null;\n        this.AnnotationSelectorSettings = null;\n        this.AnnotationSettings = null;\n        this.ExistingCustomData = null;\n        this.CustomData = null;\n        this.IsPrint = false;\n    }\n    return PopupAnnotationBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar TextMarkupAnnotationBase = /** @class */ (function () {\n    function TextMarkupAnnotationBase() {\n        this.AnnotationSelectorSettings = null;\n        this.AnnotationSettings = null;\n        this.ExistingCustomData = null;\n        this.CustomData = null;\n        this.IsPrint = true;\n        this.IsMultiSelect = false;\n        this.AnnotpageNumbers = null;\n        this.AnnotNameCollection = null;\n    }\n    return TextMarkupAnnotationBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar PdfLayer = /** @class */ (function () {\n    function PdfLayer() {\n    }\n    return PdfLayer;\n}());\n\n/**\n *\n * @hidden\n */\nvar AnnotPoint = /** @class */ (function () {\n    function AnnotPoint(_X, _Y) {\n        this.X = _X;\n        this.Y = _Y;\n    }\n    return AnnotPoint;\n}());\n\n/**\n *\n * @hidden\n */\nvar AnnotBounds = /** @class */ (function () {\n    function AnnotBounds(_X, _Y, _Width, _Height) {\n        this.X = _X;\n        this.Y = _Y;\n        this.Width = _Width;\n        this.Height = _Height;\n        this.Location = {\n            X: _X,\n            Y: _Y\n        };\n        this.Size = {\n            IsEmpty: false,\n            Width: _Width,\n            Height: _Height\n        };\n        this.Left = _X;\n        this.Top = _Y;\n        this.Right = _X + _Width;\n        this.Bottom = _Y + _Height;\n    }\n    return AnnotBounds;\n}());\n\n/**\n *\n * @hidden\n */\nvar AnnotColor = /** @class */ (function () {\n    function AnnotColor(_R, _G, _B) {\n        this.IsEmpty = true;\n        this.R = _R;\n        this.G = _G;\n        this.B = _B;\n        if (this.R !== 0 || this.G !== 0 || this.B !== 0) {\n            this.IsEmpty = false;\n        }\n    }\n    return AnnotColor;\n}());\n\n/**\n *\n * @hidden\n */\nvar FontBase = /** @class */ (function () {\n    function FontBase(pdfFont, fontFamilyString) {\n        this.Bold = pdfFont.isBold;\n        this.FontFamily = pdfFont._fontFamily;\n        this.Height = pdfFont.height;\n        this.Italic = pdfFont.isItalic;\n        this.Name = fontFamilyString;\n        this.Size = pdfFont.size;\n        this.Strikeout = pdfFont.isStrikeout;\n        this.Style = pdfFont.style;\n        this.Underline = pdfFont.isUnderline;\n    }\n    return FontBase;\n}());\n\n/**\n *\n * @hidden\n */\nvar Path = /** @class */ (function () {\n    function Path() {\n        this.points = [];\n    }\n    Path.prototype.moveTo = function (x, y) {\n        this.points.push([x, y]);\n    };\n    Path.prototype.lineTo = function (x, y) {\n        this.points.push([x, y]);\n    };\n    Path.prototype.transform = function (matrix) {\n        this.points = this.points.map(function (_a) {\n            var x = _a[0], y = _a[1];\n            var newX = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2];\n            var newY = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2];\n            return [newX, newY];\n        });\n    };\n    return Path;\n}());\n\n/**\n *\n * @hidden\n */\nvar RectangleBase = /** @class */ (function () {\n    /**\n     * @param {number} left - left\n     * @param {number} top - top\n     * @param {number} right - right\n     * @param {number} bottom - bottom\n     * @private\n     */\n    function RectangleBase(left, top, right, bottom) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.width = right - left;\n        this.height = bottom - top;\n    }\n    return RectangleBase;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/pdf-base/annotation-renderer.js?");

/***/ })

}]);