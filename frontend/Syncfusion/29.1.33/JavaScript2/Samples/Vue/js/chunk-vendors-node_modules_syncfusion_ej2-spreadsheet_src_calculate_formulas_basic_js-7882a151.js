"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_calculate_formulas_basic_js-7882a151"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/formulas/basic.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/formulas/basic.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicFormulas: () => (/* binding */ BasicFormulas)\n/* harmony export */ });\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/common/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n\n\n\n\n\n/**\n * Represents the basic formulas module.\n */\nvar BasicFormulas = /** @class */ (function () {\n    function BasicFormulas(parent) {\n        this.formulas = [\n            { formulaName: 'SUM', category: 'Math & Trig', description: 'Sums individual values, cell references or ranges.' },\n            {\n                formulaName: 'SUMIFS', category: 'Math & Trig',\n                description: 'Sums the cells specified by a given set of conditionsor criteria.'\n            },\n            {\n                formulaName: 'SUMPRODUCT', category: 'Math & Trig',\n                description: 'Returns sum of the product of given ranges of arrays.'\n            },\n            { formulaName: 'ABS', category: 'Math & Trig', description: 'Returns the absolute value of a number.' },\n            { formulaName: 'RAND', category: 'Math & Trig', description: 'Return a random number between 0 and 1.' },\n            { formulaName: 'FLOOR', category: 'Math & Trig', description: 'Returns the round a number down to the nearest integer.' },\n            { formulaName: 'CEILING', category: 'Math & Trig', description: 'Returns a number rounded up to a multiple of another number.' },\n            {\n                formulaName: 'SUMIF', category: 'Math & Trig',\n                description: 'It will sum up cells that meet the given criteria.'\n            },\n            {\n                formulaName: 'PRODUCT', category: 'Math & Trig',\n                description: 'Multiplies all the numbers given as arguments and returns the product.'\n            },\n            {\n                formulaName: 'AVERAGE', category: 'Statistical',\n                description: 'The sum of the numbers divided by how many numbers are being averaged.'\n            },\n            {\n                formulaName: 'AVERAGEIF', category: 'Statistical',\n                description: 'Computes the average of the numbers in a range that meet the supplied criteria.'\n            },\n            {\n                formulaName: 'COUNT', category: 'Statistical',\n                description: 'Counts the numbers in the list of arguments, exclude text entries.'\n            },\n            { formulaName: 'COUNTA', category: 'Statistical', description: 'Counts the non-empty values in the list of arguments.' },\n            {\n                formulaName: 'COUNTIF', category: 'Statistical',\n                description: 'Counts the number of cells in a range that meet a specified condition.'\n            },\n            {\n                formulaName: 'COUNTIFS', category: 'Statistical',\n                description: 'Counts the number of times each cells in all the ranges that meet the specific conditions.'\n            },\n            {\n                formulaName: 'AVERAGEA', category: 'Statistical',\n                description: 'Calculates the average of values in the list of arguments.Arguments can be numbers, names, arrays or references.'\n            },\n            {\n                formulaName: 'AVERAGEIFS', category: 'Statistical',\n                description: 'Conditionally returns the average of the contents of cells for the set of ranges.'\n            },\n            {\n                formulaName: 'MIN', category: 'Statistical',\n                description: 'Returns the smaller number in set of arguments.'\n            },\n            { formulaName: 'MAX', category: 'Statistical', description: 'Returns the largest number in set of arguments.' },\n            { formulaName: 'DATE', category: 'Date', description: 'Returns the date, given the year, month and day of the month.' },\n            { formulaName: 'DAY', category: 'Date', description: 'Returns the day of a given date.' },\n            { formulaName: 'TODAY', category: 'Date', description: 'Returns the current date as date value.' },\n            { formulaName: 'DAYS', category: 'Date', description: 'Returns the number of days between two dates.' },\n            { formulaName: 'WEEKDAY', category: 'Date', description: 'Returns the day of the week corresponding to a date.' },\n            {\n                formulaName: 'IF', category: 'Logical',\n                description: 'Returns one value if a logical expression is TRUE and another if it is FALSE'\n            },\n            {\n                formulaName: 'AND', category: 'Logical',\n                description: 'Returns TRUE if all the arguments are considered TRUE, and FALSE otherwise.'\n            },\n            {\n                formulaName: 'IFS', category: 'Logical',\n                description: 'Checks multiple conditions and returns a value corresponding to the first TRUE result.'\n            },\n            {\n                formulaName: 'IFERROR', category: 'Logical',\n                description: 'Returns a value you specify if a formula evaluates to an error; otherwise, it returns the result of the formula.'\n            },\n            {\n                formulaName: 'CHOOSE', category: 'Lookup & Reference',\n                description: 'Returns a value from a list, given an index number.'\n            },\n            {\n                formulaName: 'INDEX', category: 'Lookup & Reference',\n                description: 'Returns a value from a table, given a row and column number.'\n            },\n            { formulaName: 'FIND', category: 'Text', description: 'Returns the position of a string of text within another string.' },\n            { formulaName: 'CONCATENATE', category: 'Text', description: ' Used to join two or more strings together.' },\n            { formulaName: 'CONCAT', category: 'Text', description: 'Concatenates a list or range of text strings.' },\n            { formulaName: 'SUBTOTAL', category: 'Lookup & Reference', description: 'Returns a subtotal in a list or database.' },\n            { formulaName: 'RADIANS', category: 'Math & Trig', description: 'Converts degrees to radians.' },\n            {\n                formulaName: 'OR', category: 'Logical',\n                description: 'Returns TRUE if any arguments considered TRUE, and all the arguments are FALSE it will return FALSE.'\n            },\n            { formulaName: 'NOT', category: 'Logical', description: 'Returns the inverse of a given logical expression.' },\n            {\n                formulaName: 'MATCH', category: 'Lookup & Reference',\n                description: 'Returns the relative position of an checked item in range that matches a specified value in a specified order'\n            },\n            {\n                formulaName: 'RANDBETWEEN', category: 'Math & Trig', description: 'Returns an integer random number in a specified range.'\n            },\n            {\n                formulaName: 'SLOPE', category: 'Statistical',\n                description: 'Returns the slope of the line from linear regression of the data points.'\n            },\n            {\n                formulaName: 'INTERCEPT', category: 'Statistical',\n                description: 'Calculates the point of the Y-intercept line via linear regression.'\n            },\n            {\n                formulaName: 'RSQ', category: 'Statistical',\n                description: 'Returns the square of the Pearson product moment correlation coefficient based on data points in known_ys and known_xs'\n            },\n            {\n                formulaName: 'UNIQUE', category: 'Lookup & Reference',\n                description: 'Returns a unique values from a range or array.'\n            },\n            {\n                formulaName: 'ROUNDUP', category: 'Math & Trig', description: 'Rounds a number away from zero.'\n            },\n            {\n                formulaName: 'ROUNDDOWN', category: 'Math & Trig', description: 'Rounds a number down, toward zero.'\n            },\n            {\n                formulaName: 'INT', category: 'Math & Trig', description: 'Returns a number to the nearest integer.'\n            },\n            {\n                formulaName: 'LN', category: 'Math & Trig', description: 'Returns the natural logarithm of a number.'\n            },\n            {\n                formulaName: 'ISNUMBER', category: 'Information', description: 'Returns TRUE, if the argument is number and FALSE otherwise.'\n            },\n            {\n                formulaName: 'ROUND', category: 'Math & Trig', description: 'Rounds a number to a specified number of digits.'\n            },\n            {\n                formulaName: 'LOG', category: 'Math & Trig', description: 'Returns the logarithm of a number to the base that you specify.'\n            },\n            {\n                formulaName: 'POWER', category: 'Math & Trig', description: 'Returns the result of a number raised to power.'\n            },\n            {\n                formulaName: 'SQRT', category: 'Math & Trig', description: 'Returns the square root of a positive number.'\n            },\n            {\n                formulaName: 'TRUNC', category: 'Math & Trig',\n                description: 'Returns the truncated value of a number to a specified number of decimal places.'\n            },\n            {\n                formulaName: 'EXP', category: 'Math & Trig', description: 'Returns e raised to the power of the given number.'\n            },\n            {\n                formulaName: 'GEOMEAN', category: 'Statistical',\n                description: 'Returns the geometric mean of an array or range of positive data.'\n            },\n            { formulaName: 'TEXT', category: 'Lookup & Reference', description: 'Converts a value to text in specified number format.' },\n            { formulaName: 'SORT', category: 'Lookup & Reference', description: 'Sorts a range of an array.' },\n            { formulaName: 'LOOKUP', category: 'Lookup & Reference', description: 'Looks for a value in a one-row or one-column range, then returns a value from the same position in a second one-row or one-column range.' },\n            { formulaName: 'VLOOKUP', category: 'Lookup & Reference', description: 'Looks for a specific value in the first column of a lookup range and returns a corresponding value from a different column within the same row.' },\n            { formulaName: 'HLOOKUP', category: 'Lookup & Reference', description: 'Looks for a value in the top row of the array of values and then returns a value in the same column from a row in the array that you specify.' },\n            { formulaName: 'T', category: 'Text', description: 'Checks whether a value is text or not and returns the text.' },\n            { formulaName: 'EXACT', category: 'Text', description: 'Checks whether a two text strings are exactly same and returns TRUE or FALSE.' },\n            { formulaName: 'LEN', category: 'Text', description: 'Returns a number of characters in a given string.' },\n            { formulaName: 'MOD', category: 'Math & Trig', description: 'Returns a remainder after a number is divided by divisor.' },\n            { formulaName: 'ODD', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest odd integer.' },\n            { formulaName: 'PI', category: 'Math & Trig', description: 'Returns the value of pi.' },\n            { formulaName: 'COUNTBLANK', category: 'Statistical', description: 'Returns the number of empty cells in a specified range of cells.' },\n            { formulaName: 'EVEN', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest even integer.' },\n            { formulaName: 'FACT', category: 'Math & Trig', description: 'Returns the factorial of a number.' },\n            { formulaName: 'DECIMAL', category: 'Math & Trig', description: 'Converts a text representation of a number in a given base into a decimal number.' },\n            { formulaName: 'DEGREES', category: 'Math & Trig', description: 'Converts radians to degrees.' },\n            { formulaName: 'ADDRESS', category: 'Lookup & Reference', description: 'Returns a cell reference as text, given specified row and column numbers.' },\n            { formulaName: 'TIME', category: 'Date & Time', description: 'Converts hours, minutes, seconds to the time formatted text.' },\n            { formulaName: 'CHAR', category: 'Text', description: 'Returns the character from the specified number.' },\n            { formulaName: 'CODE', category: 'Text', description: 'Returns the numeric code for the first character in a given string.' },\n            { formulaName: 'DOLLAR', category: 'Text', description: 'Converts the number to currency formatted text.' },\n            { formulaName: 'SMALL', category: 'Statistical', description: 'Returns the k-th smallest value in a given array.' },\n            { formulaName: 'LARGE', category: 'Statistical', description: 'Returns the k-th largest value in a given array.' },\n            { formulaName: 'MEDIAN', category: 'Statistical', description: 'Returns the median of the given set of numbers.' },\n            { formulaName: 'EDATE', category: 'Date & Time', description: 'Returns a date with given number of months before or after the specified date.' },\n            { formulaName: 'EOMONTH', category: 'Date & Time', description: 'Returns the last day of the month that is a specified number of months before or after an initially supplied start date.' },\n            { formulaName: 'DATEVALUE', category: 'Date & Time', description: 'Converts a date string into date value.' },\n            { formulaName: 'HOUR', category: 'Date & Time', description: 'Returns the number of hours in a specified time string.' },\n            { formulaName: 'MINUTE', category: 'Date & Time', description: 'Returns the number of minutes in a specified time string.' },\n            { formulaName: 'SECOND', category: 'Date & Time', description: 'Returns the number of seconds in a specified time string.' },\n            { formulaName: 'NOW', category: 'Date & Time', description: 'Returns the current date and time.' },\n            { formulaName: 'MONTH', category: 'Date & Time', description: 'Returns the number of months in a specified date string.' },\n            { formulaName: 'PROPER', category: 'Text', description: 'Converts a text to proper case; first letter to uppercase and other letters to lowercase.' }\n        ];\n        this.isConcat = false;\n        this.parent = parent;\n        this.init();\n    }\n    BasicFormulas.prototype.init = function () {\n        var fn;\n        for (var i = 0; i < this.formulas.length; i++) {\n            fn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.getValue)('Compute' + this.formulas[i].formulaName, this).bind(this);\n            this.addFormulaCollection(this.formulas[i].formulaName.toUpperCase(), fn, this.formulas[i].category, this.formulas[i].description);\n        }\n    };\n    BasicFormulas.prototype.addFormulaCollection = function (formulaName, functionName, formulaCategory, description) {\n        this.parent.libraryFormulas = {\n            fName: formulaName, handler: functionName, category: formulaCategory,\n            description: description\n        };\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args\n     * @returns {string | number} - Comput sum value\n     */\n    BasicFormulas.prototype.ComputeSUM = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var isSubtotalFormula = false;\n        var isAggregateComputation;\n        var sheet;\n        if (args.length) {\n            var lastArgument = args[args.length - 1];\n            if (lastArgument === 'isSubtotal') {\n                isSubtotalFormula = true;\n                args.pop();\n            }\n            else if (lastArgument === 'isAggregate') {\n                sheet = this.parent.parentObject.getActiveSheet();\n                isAggregateComputation = true;\n                args.pop();\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var sum = 0;\n        var val;\n        var orgValue;\n        var maxDecimalLength = 0;\n        var indexes;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args)) {\n            var argArr = args;\n            var setMaxDecimalLength = function (val) {\n                if (val.toString().indexOf('.') > -1) {\n                    maxDecimalLength = Math.max(maxDecimalLength, val.split('.')[1].length);\n                }\n            };\n            for (var i = 0; i < argArr.length; i++) {\n                var argValue = argArr[i].toString();\n                if (argValue.indexOf(':') > -1 && this.parent.isCellReference(argValue)) {\n                    var cellCollection = this.parent.getCellCollection(argValue.split(this.parent.tic).join(''));\n                    for (var j = 0; j < cellCollection.length; j++) {\n                        if (isAggregateComputation) {\n                            indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(cellCollection[j]);\n                            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isHiddenRow)(sheet, indexes[0]) || (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isHiddenCol)(sheet, indexes[1])) {\n                                continue;\n                            }\n                        }\n                        val = !isSubtotalFormula ? this.parent.getValueFromArg(cellCollection[j]) :\n                            this.parent.getValueFromArg(cellCollection[j], null, null, true);\n                        if (isSubtotalFormula && val.includes('SUBTOTAL(')) {\n                            continue;\n                        }\n                        if (this.parent.getErrorStrings().indexOf(val) > -1) {\n                            return val;\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(val[0]) || isNaN(this.parent.parseFloat(val))) {\n                            continue;\n                        }\n                        setMaxDecimalLength(val);\n                        sum = sum + this.parent.parseFloat(val);\n                    }\n                }\n                else {\n                    if (argArr[i].indexOf(this.parent.tic) > -1) {\n                        if (isNaN(this.parent.parseFloat(argArr[i].split(this.parent.tic).join(''))) ||\n                            argArr[i].split(this.parent.tic).join('').trim() === '') {\n                            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                    if (argArr[i].split(this.parent.tic).join('') === this.parent.trueValue) {\n                        argArr[i] = '1';\n                    }\n                    if (argArr[i].split(this.parent.tic).join('') === this.parent.falseValue) {\n                        argArr[i] = '0';\n                    }\n                    orgValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join('')) :\n                        this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''), null, null, true);\n                    if (isSubtotalFormula && orgValue.includes('SUBTOTAL(')) {\n                        continue;\n                    }\n                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {\n                        return orgValue;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(orgValue) || isNaN(this.parent.parseFloat(orgValue))) {\n                        continue;\n                    }\n                    if (orgValue.length > 0) {\n                        setMaxDecimalLength(orgValue);\n                        sum = sum + this.parent.parseFloat(orgValue + '');\n                    }\n                }\n            }\n        }\n        return sum.toString().indexOf('.') > -1 ? sum.toFixed(maxDecimalLength) : sum;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the Integer.\n     */\n    BasicFormulas.prototype.ComputeINT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argsValue;\n        var errCollection = this.parent.getErrorStrings();\n        if (args[0] === '' && args.length === 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        argsValue = this.parent.getValueFromArg(args[0]);\n        if (errCollection.indexOf(argsValue) > -1) {\n            return argsValue;\n        }\n        if (argsValue.toUpperCase() === this.parent.trueValue) {\n            argsValue = '1';\n        }\n        else if (argsValue.toUpperCase() === this.parent.falseValue) {\n            argsValue = '0';\n        }\n        if (!this.parent.isCellReference(args[0])) {\n            if (args[0].indexOf(this.parent.tic + this.parent.tic) === -1) {\n                argsValue = argsValue.split(this.parent.tic).join('');\n            }\n            if (argsValue.trim() === '') {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (argsValue.indexOf('%') > -1) {\n            argsValue = (Number(argsValue.split('%')[0]) * 0.01).toString();\n        }\n        if (isNaN(this.parent.parseFloat(argsValue))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        argsValue = this.parent.parseFloat(argsValue);\n        argsValue = Math.floor(argsValue);\n        return argsValue;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {Date | string} - Compute the Today.\n     */\n    BasicFormulas.prototype.ComputeTODAY = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var str;\n        if (args.length !== 1 || args[0] !== '') {\n            str = this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else {\n            var dt = new Date(Date.now());\n            if (this.parent.parentObject.getModuleName() === 'spreadsheet') {\n                str = this.parent.parentObject.dateToInt(dt);\n                if (this.parent.parser.storedStringText.toUpperCase().indexOf('TODAY') === 0 &&\n                    this.parent.cell !== '') {\n                    this.parent.parentObject.setDateFormat(this.parent.getSheetId(this.parent.grid), this.parent.rowIndex(this.parent.cell) - 1, this.parent.colIndex(this.parent.cell) - 1);\n                }\n            }\n            else {\n                str = dt.getFullYear() + '/' + this.parent.calculateDate((dt.getMonth() + 1).toString()) + '/'\n                    + this.parent.calculateDate(dt.getDate().toString());\n            }\n        }\n        return str;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number} - Compute the day from the date.\n     */\n    BasicFormulas.prototype.ComputeWEEKDAY = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((args[0] === '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[1])) || args.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if ((args[0] === '' && args[1] === '') || args[1] === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n        }\n        if (args.length === 1) {\n            args.push('1');\n        }\n        if ((args[0].indexOf(this.parent.tic) > -1 && args[0].split(this.parent.tic).join('').trim() === '') || (args[1].split(this.parent.tic).join('').trim() === '') || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var date;\n        var value;\n        var day;\n        if (this.parent.isCellReference(args[0])) {\n            date = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (date.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if ((args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[0].split(this.parent.tic).join(''))))) {\n                date = this.parent.getValueFromArg(args[0]);\n            }\n            else {\n                date = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            }\n        }\n        if (this.parent.isCellReference(args[1])) {\n            value = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';\n        }\n        else {\n            value = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));\n        }\n        if (this.parent.getErrorStrings().indexOf(date) > -1) {\n            return date;\n        }\n        if (this.parent.getErrorStrings().indexOf(value) > -1) {\n            return value;\n        }\n        date = date === this.parent.trueValue ? '1' : (date === this.parent.falseValue ? '0' : date);\n        value = value === this.parent.trueValue ? '1' : (value === this.parent.falseValue ? '0' : value);\n        day = this.parent.parseFloat(date);\n        value = this.parent.parseFloat(value);\n        if (isNaN(value) || isNaN(day)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (day < 0 || day > 2958465) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n        }\n        value = parseInt(value.toString(), 10);\n        day = day < 1 ? 0 : Math.floor(day) % 7;\n        switch (value) {\n            case 1:\n            case 17:\n                day = day <= 0 ? day + 7 : day;\n                break;\n            case 2:\n            case 11:\n                day = day - 1;\n                day = day <= 0 ? day + 7 : day;\n                break;\n            case 3:\n                day = day - 2;\n                day = day < 0 ? day + 7 : day;\n                break;\n            case 12:\n                day = day + 5;\n                day = day > 7 ? day - 7 : day;\n                break;\n            case 13:\n                day = day + 4;\n                day = day > 7 ? day - 7 : day;\n                break;\n            case 14:\n                day = day + 3;\n                day = day > 7 ? day - 7 : day;\n                break;\n            case 15:\n                day = day + 2;\n                day = day > 7 ? day - 7 : day;\n                break;\n            case 16:\n                day = day + 1;\n                day = day > 7 ? day - 7 : day;\n                break;\n            default:\n                day = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n                break;\n        }\n        return day;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute to the Proper casing.\n     */\n    BasicFormulas.prototype.ComputePROPER = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var str;\n        var nestedFormula;\n        var errCollection = this.parent.getErrorStrings();\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args[0].trim() === '' && args.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        str = this.parent.getValueFromArg(args[0]).trim();\n        if (errCollection.indexOf(str) > -1) {\n            return str;\n        }\n        if (args[0].indexOf(this.parent.tic) > -1) {\n            if (args[0] !== str && args[0].startsWith('n')) {\n                str = this.parent.removeTics(str.trim());\n            }\n            else {\n                str = this.parent.removeTics(args[0].trim());\n                if (str.indexOf(this.parent.tic + this.parent.tic) > -1) {\n                    str = str.replace(/\"\"/g, this.parent.tic);\n                }\n            }\n        }\n        else if (!args[0].startsWith('n') && str.split('%').length === 2 && this.parent.isNumber(str.split('%')[0])) {\n            str = (Number(str.split('%')[0]) / 100).toString();\n        }\n        str = str.toLowerCase().replace(/\\b\\w/g, function (char) {\n            return char.toUpperCase();\n        }).replace(/(\\d)([a-z])/g, function (match, number, char) {\n            return number + char.toUpperCase();\n        });\n        if (nestedFormula) {\n            str = this.parent.tic + str + this.parent.tic;\n        }\n        return str;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the Sum product.\n     */\n    BasicFormulas.prototype.ComputeSUMPRODUCT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a, _b;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var sum = 0;\n        var count = 0;\n        var index;\n        var mulValues = null;\n        var ranges = args;\n        var len = [];\n        for (var i = 0; i < ranges.length; i++) {\n            len.push(this.parent.getCellCollection(ranges[i]).length);\n        }\n        for (var j = 0; j < len.length; j++) {\n            if (len[j] && len[j + 1] && len[j] !== len[j + 1]) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        for (var k = 0; k < ranges.length; ++k) {\n            var range = ranges[k];\n            if (!range.startsWith(this.parent.tic) && this.parent.isCellReference(range)) {\n                var i = range.indexOf(':');\n                var startRow = this.parent.rowIndex(range.substr(0, i));\n                var endRow = this.parent.rowIndex(range.substr(i + 1));\n                if (!(startRow !== -1 || endRow === -1) === (startRow === -1 || endRow !== -1)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                }\n                if (startRow > endRow) {\n                    _a = [endRow, startRow], startRow = _a[0], endRow = _a[1];\n                }\n                var col1 = this.parent.colIndex(range.substr(0, i));\n                var col2 = this.parent.colIndex(range.substr(i + 1));\n                if (col1 > col2) {\n                    _b = [col2, col1], col1 = _b[0], col2 = _b[1];\n                }\n                if (mulValues === null) {\n                    count = (endRow - startRow + 1) * (col2 - col1 + 1);\n                    mulValues = [];\n                    for (i = 0; i < count; ++i) {\n                        mulValues[i] = 1; //To create required index.\n                    }\n                }\n                i = 0;\n                for (var row = startRow; row <= endRow; ++row) {\n                    for (var col = col1; col <= col2; ++col) {\n                        var cellRef = this.getSheetReference(range) + this.parent.convertAlpha(col) + (row);\n                        var result = this.parent.getValueFromArg(cellRef);\n                        if (this.parent.getErrorStrings().indexOf(result) > -1) {\n                            return result;\n                        }\n                        if (!isNaN(this.parent.parseFloat(result))) {\n                            //To return #VALUE! error when array dimensions are mismatched.\n                            if (isNaN(mulValues[i])) {\n                                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                            }\n                            mulValues[i] = mulValues[i] * this.parent.parseFloat(result);\n                        }\n                        else {\n                            mulValues[i] = 0;\n                        }\n                        i++;\n                    }\n                }\n            }\n            else {\n                var s1 = this.parent.getValueFromArg(range);\n                index = s1.indexOf('\"');\n                if (this.parent.getErrorStrings().indexOf(s1) > -1) {\n                    return s1;\n                }\n                else if (index > -1) {\n                    return 0;\n                }\n                else {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        for (var i = 0; i < count; ++i) {\n            sum += mulValues[i];\n        }\n        return sum;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the Roundup.\n     */\n    BasicFormulas.prototype.ComputeROUNDUP = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var str;\n        var arg1;\n        var arg2;\n        var index;\n        var num;\n        var len = args.length;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) && len > 2) {\n            str = this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (len === 1 && args[0] !== '') {\n            index = args[0].indexOf('\"');\n            arg1 = args[0].indexOf('\"') > -1 ? args[0].replace('\"', '') : args[0];\n            arg1 = arg1.indexOf('\"') > -1 ? arg1.replace('\"', '') : arg1;\n            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);\n            arg1 = this.parent.getValueFromArg(arg1);\n            num = this.parent.parseFloat(arg1);\n            if (num > 0) {\n                num += .4999999999; // To round the number, we using this value.\n            }\n            else if (num < 0) {\n                num -= .4999999999;\n            }\n            num = this.parent.parseFloat(num.toFixed(0));\n            str = num.toString();\n        }\n        else if (len === 2) {\n            index = args[0].indexOf('\"') > -1 ? args[0].indexOf('\"') : (args[1].indexOf('\"') > -1 ? args[1].indexOf('\"') : -1);\n            if (this.parent.isCellReference(args[0])) {\n                arg1 = this.parent.getValueFromArg(args[0]) || '0';\n            }\n            else {\n                if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue ||\n                    args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                arg1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n            }\n            if (this.parent.getErrorStrings().indexOf(arg1) > -1) {\n                return arg1;\n            }\n            if (this.parent.isCellReference(args[1])) {\n                arg2 = this.parent.getValueFromArg(args[1]) || '0';\n            }\n            else {\n                if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue ||\n                    args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                arg2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n            }\n            if (this.parent.getErrorStrings().indexOf(arg2) > -1) {\n                return arg2;\n            }\n            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);\n            arg2 = arg2.toUpperCase() === 'TRUE' ? '1' : (arg2 === 'FALSE' ? '0' : arg2);\n            var isInvalidNumStr = isNaN(Number(arg1)) || arg1.trim() === '';\n            var isInvalidDigStr = isNaN(Number(arg2)) || arg2.trim() === '';\n            if (((args[0].indexOf('\"') > -1 || this.parent.isCellReference(args[0])) && isInvalidNumStr)\n                || ((args[1].indexOf('\"') > -1 || this.parent.isCellReference(args[1])) && isInvalidDigStr)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            var digits = Math.ceil(this.parent.parseFloat(arg2));\n            num = this.parent.parseFloat(arg1);\n            if (digits > 0) {\n                var decimalArr = arg1.split('.');\n                var decimalCount = decimalArr.length === 2 ? (decimalArr[1].length >= digits ? digits : decimalArr[1].length) : 0;\n                num = this.parent.parseFloat(this.preciseRound(num, decimalCount, 'ROUNDUP'));\n                str = num.toString();\n                if (isNaN(num)) {\n                    if (digits.toString().indexOf('\"') > -1) {\n                        str = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                    else {\n                        str = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                    }\n                }\n            }\n            else {\n                if (num > 0) {\n                    num = (num / Math.pow(10, -digits)) + .49999;\n                }\n                else if (num < 0) {\n                    num = (num / Math.pow(10, -digits)) - .49999;\n                }\n                if (num > 0 && digits < -9) {\n                    num = 1 * Math.pow(10, -digits);\n                }\n                else {\n                    num = this.parent.parseFloat(num.toFixed(0)) * Math.pow(10, -digits);\n                }\n                str = num.toString();\n                if (isNaN(num)) {\n                    str = (digits.toString().indexOf('\"') > -1) ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] :\n                        str = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                }\n            }\n        }\n        else {\n            str = index > -1 ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] :\n                this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        return str;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the Rounddown.\n     */\n    BasicFormulas.prototype.ComputeROUNDDOWN = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result;\n        var arg1;\n        var arg2;\n        var index;\n        var num;\n        var len = args.length;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) && len > 2) {\n            result = this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (len === 1 && args[0] !== '') {\n            index = args[0].indexOf('\"');\n            arg1 = args[0].indexOf('\"') > -1 ? args[0].replace('\"', '') : args[0];\n            arg1 = arg1.indexOf('\"') > -1 ? arg1.replace('\"', '') : arg1;\n            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);\n            arg1 = this.parent.getValueFromArg(arg1);\n            num = this.parent.parseFloat(arg1);\n            if (num > 0) {\n                num -= .4999999999; // To round the number, we are using this value.\n            }\n            else if (num < 0) {\n                num += .4999999999;\n            }\n            num = this.parent.parseFloat(num.toFixed(0));\n            result = num.toString();\n        }\n        else if (len === 2) {\n            index = args[0].indexOf('\"') > -1 ? args[0].indexOf('\"') : (args[1].indexOf('\"') > -1 ? args[1].indexOf('\"') : -1);\n            if (this.parent.isCellReference(args[0])) {\n                arg1 = this.parent.getValueFromArg(args[0]) || '0';\n            }\n            else {\n                if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue ||\n                    args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                arg1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n            }\n            if (this.parent.getErrorStrings().indexOf(arg1) > -1) {\n                return arg1;\n            }\n            if (this.parent.isCellReference(args[1])) {\n                arg2 = this.parent.getValueFromArg(args[1]) || '0';\n            }\n            else {\n                if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue ||\n                    args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                arg2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n            }\n            if (this.parent.getErrorStrings().indexOf(arg2) > -1) {\n                return arg2;\n            }\n            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);\n            arg2 = arg2.toUpperCase() === 'TRUE' ? '1' : (arg2 === 'FALSE' ? '0' : arg2);\n            var isInvalidNumStr = isNaN(Number(arg1)) || arg1.trim() === '';\n            var isInvalidDigStr = isNaN(Number(arg2)) || arg2.trim() === '';\n            if (((args[0].indexOf('\"') > -1 || this.parent.isCellReference(args[0])) && isInvalidNumStr)\n                || ((args[1].indexOf('\"') > -1 || this.parent.isCellReference(args[1])) && isInvalidDigStr)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            var digits = Math.ceil(this.parent.parseFloat(arg2));\n            num = this.parent.parseFloat(arg1);\n            if (digits > 0) {\n                var decimalIndex = arg1.indexOf('.');\n                var decimalCount = 0;\n                if (decimalIndex !== -1) {\n                    decimalCount = arg1.length - decimalIndex - 1;\n                    decimalCount = decimalCount >= digits ? digits : decimalCount;\n                }\n                num = this.parent.parseFloat(this.preciseRound(num, decimalCount, 'ROUNDDOWN'));\n                result = num.toString();\n                if (isNaN(num)) {\n                    if (digits.toString().indexOf('\"') > -1) {\n                        result = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                    else {\n                        result = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                    }\n                }\n            }\n            else {\n                if (num > 0) {\n                    num = (num / Math.pow(10, -digits)) - .49999;\n                }\n                else if (num < 0) {\n                    num = (num / Math.pow(10, -digits)) + .49999;\n                }\n                if (num > 0 && digits < -9) {\n                    num = 1 * Math.pow(10, -digits);\n                }\n                else {\n                    num = this.parent.parseFloat(num.toFixed(0)) * Math.pow(10, -digits);\n                }\n                result = num.toString();\n                if (isNaN(num)) {\n                    result = (digits.toString().indexOf('\"') > -1) ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] :\n                        result = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                }\n            }\n        }\n        else {\n            result = index > -1 ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] :\n                this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number | string} - Compute the count.\n     */\n    BasicFormulas.prototype.ComputeCOUNT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var isSubtotalFormula = false;\n        if (args.length && args[args.length - 1] === 'isSubtotal') {\n            isSubtotalFormula = true;\n            args.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var argArr = args;\n        var argVal;\n        var cellColl;\n        var result = 0;\n        var cellValue;\n        var value;\n        for (var i = 0; i < argArr.length; i++) {\n            argVal = argArr[i];\n            if (this.parent.isCellReference(argVal)) {\n                if (argVal.indexOf(':') > -1) {\n                    cellColl = this.parent.getCellCollection(argVal.split(this.parent.tic).join(''));\n                    for (var j = 0; j < cellColl.length; j++) {\n                        cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(cellColl[j]) :\n                            this.parent.getValueFromArg(cellColl[j], null, null, true);\n                        if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {\n                            continue;\n                        }\n                        if (!isNaN(this.parent.parseFloat(cellValue))) {\n                            if (argVal.length > 0 && cellValue.trim() !== '') {\n                                result++;\n                            }\n                        }\n                    }\n                }\n                else {\n                    cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(argVal) :\n                        this.parent.getValueFromArg(argVal, null, null, true);\n                    if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {\n                        continue;\n                    }\n                    if (!isNaN(this.parent.parseFloat(cellValue))) {\n                        if (argVal.length > 0 && cellValue.trim() !== '') {\n                            result++;\n                        }\n                    }\n                }\n            }\n            else {\n                value = this.parent.getValueFromArg(argVal).split(this.parent.tic).join('');\n                if (argVal.length === 0 && value.trim() === '') {\n                    result++;\n                }\n                else if (!isNaN(this.parent.parseFloat(value)) || argVal === this.parent.trueValue || argVal === this.parent.falseValue) {\n                    if (argVal.length > 0 && argVal.trim() !== '' && value.trim() !== '') {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {Date | string} - Compute the Date.\n     */\n    BasicFormulas.prototype.ComputeDATE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var nestedFormula;\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (args.length !== 3) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var argArr = [];\n        for (var i = 0; i < args.length; ++i) {\n            argArr[i] = this.parent.getValueFromArg(args[i]);\n        }\n        argArr[0] = (argArr[0] === this.parent.trueValue) ? '1' : (argArr[0] === this.parent.falseValue) ? '0' : argArr[0];\n        argArr[1] = (argArr[1] === this.parent.trueValue) ? '1' : (argArr[1] === this.parent.falseValue) ? '0' : argArr[1];\n        argArr[2] = (argArr[2] === this.parent.trueValue) ? '1' : (argArr[2] === this.parent.falseValue) ? '0' : argArr[2];\n        for (var idx = 0; idx < argArr.length; idx++) {\n            var argsValue = argArr[idx];\n            if (this.parent.getErrorStrings().indexOf(argsValue) > -1) {\n                return argsValue;\n            }\n            else if ((argsValue === '\"\"') || (argsValue === '\"0\"' && args[idx] !== '\"0\"') || (argsValue === '\"TRUE\"' || argsValue === '\"FALSE\"')) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value].toString();\n            }\n        }\n        var year = Math.floor(this.parent.parseFloat(argArr[0].split(this.parent.tic).join('')));\n        var month = Math.floor(this.parent.parseFloat(argArr[1].split(this.parent.tic).join('')));\n        var day = Math.floor(this.parent.parseFloat(argArr[2].split(this.parent.tic).join('')));\n        var days = 0;\n        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {\n            if ((year < 0 && month <= 12) || (year >= 10000 && month > 0)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n            }\n            while (month > 12) {\n                month -= 12;\n                year++;\n            }\n            days = this.parent.getSerialDateFromDate(year, month, day);\n        }\n        else {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value].toString();\n        }\n        if (days === 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n        }\n        var date = this.parent.fromOADate(days);\n        if (date.toString() !== 'Invalid Date') {\n            if ((date.getFullYear() < 1900) || (10000 <= date.getFullYear())) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num].toString();\n            }\n            if (!nestedFormula) {\n                return new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization(this.parent.parentObject.locale || 'en-US').formatDate(date, { type: 'date', skeleton: 'yMd' });\n            }\n        }\n        return days.toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number | string} - Compute the ceiling.\n     */\n    BasicFormulas.prototype.ComputeFLOOR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argArr = args;\n        var argCount = argArr.length;\n        var value;\n        if (argCount !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if ((argArr[0] === '' && argArr[1] === '') || (argArr[0] === '' && !argArr[1].includes('\"'))) {\n            return 0;\n        }\n        else if (argArr[1] === '' && !argArr[0].includes('\"')) {\n            argArr[1] = '0';\n        }\n        for (var i = 0; i < argArr.length; i++) {\n            var argVal = argArr[i].split(this.parent.tic).join('').trim();\n            if (argVal === '' || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(argArr[i])) {\n                value = this.parent.getValueFromArg(argArr[i]) || '0';\n                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;\n                if (value.toUpperCase().match(/[A-Z]/) || value.includes('\"') || !this.parent.isNumber(value)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            else {\n                value = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));\n                value = value === this.parent.trueValue ? '1' : (value === this.parent.falseValue ? '0' : value);\n                if (value.toUpperCase().match(/[A-Z]/) || value.includes('\"') || !this.parent.isNumber(value)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            argArr[i] = value;\n        }\n        var fnum = this.parent.parseFloat(argArr[0]);\n        var significance = this.parent.parseFloat(argArr[1]);\n        if (fnum > 0 && significance < 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        if ((fnum > 0 || fnum < 0) && significance === 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        if (isNaN(fnum)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        if (fnum === 0 && significance === 0) {\n            return 0;\n        }\n        return Math.floor(fnum / significance) * significance;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number | string} - Compute the ceiling.\n     */\n    BasicFormulas.prototype.ComputeCEILING = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argArr = args;\n        var argCount = argArr.length;\n        var value;\n        if (argCount !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if ((argArr[0] === '' && argArr[1] === '') || (argArr[0] === '' && !argArr[1].includes('\"'))) {\n            return 0;\n        }\n        else if (argArr[1] === '' && !argArr[0].includes('\"')) {\n            argArr[1] = '0';\n        }\n        for (var i = 0; i < argArr.length; i++) {\n            var argVal = argArr[i].split(this.parent.tic).join('').trim();\n            if (argVal === '' || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(argArr[i])) {\n                value = this.parent.getValueFromArg(argArr[i]) || '0';\n                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;\n                if (value.toUpperCase().match(/[A-Z]/) || value.includes('\"') || !this.parent.isNumber(value)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            else {\n                value = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));\n                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;\n                if (value.toUpperCase().match(/[A-Z]/) || value.includes('\"') || !this.parent.isNumber(value)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            argArr[i] = value;\n        }\n        var cnum = this.parent.parseFloat(argArr[0]);\n        var significance = this.parent.parseFloat(argArr[1]);\n        if (cnum > 0 && significance < 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        if (isNaN(cnum)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        if ((cnum > 0 || cnum === 0) && significance === 0) {\n            return 0;\n        }\n        return Math.ceil(cnum / significance) * significance;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the serialNumber.\n     * @returns {number | string} - Compute the DAY.\n     */\n    BasicFormulas.prototype.ComputeDAY = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result;\n        var dateVal;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (args[0].startsWith(this.parent.tic)) {\n            dateVal = args[0].split(this.parent.tic).join('');\n            if (dateVal === '' || dateVal === this.parent.trueValue || dateVal === this.parent.falseValue) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            dateVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));\n            if (this.parent.isCellReference(args[0]) && (dateVal.indexOf(this.parent.tic) > -1)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (errCollection.indexOf(dateVal) > -1) {\n            return dateVal;\n        }\n        else if (Number(dateVal) < 0) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (Math.floor(Number(dateVal)) === 0 || dateVal === this.parent.falseValue) {\n            return 0;\n        }\n        else if (dateVal === this.parent.trueValue) {\n            return 1;\n        }\n        result = this.parent.isNaN(Number(dateVal)) ? this.parent.parseDate(dateVal) : this.parent.intToDate(dateVal);\n        if (Object.prototype.toString.call(result) === '[object Date]') { /* eslint-disable-next-line */\n            result = ((new Date(result).getFullYear() < 1900) || (new Date(result).getFullYear()) > 9999) ? this.parent.isNumber(dateVal) ? 'Num' : 'NaN' : result.getDate();\n        }\n        if (result.toString() === 'NaN') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (result.toString() === 'Num') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the IF value.\n     */\n    BasicFormulas.prototype.ComputeIF = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var nestedFormula;\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (this.parent.getErrorStrings().indexOf(args[0]) > 0) {\n            return args[0];\n        }\n        var argArr = args;\n        var skipTick;\n        if (argArr.length === 4 && argArr[3] === 'nestedFormulaTrue') {\n            skipTick = true;\n            argArr.pop();\n        }\n        var condition;\n        var result;\n        if (argArr.length > 3 || argArr.length === 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argArr.length <= 3) {\n            var cellValues = void 0;\n            var cellVal = void 0;\n            var val = '';\n            condition = this.parent.getValueFromArg(argArr[0]);\n            if (this.parent.getErrorStrings().indexOf(condition) > -1) {\n                return condition;\n            }\n            var condUpper = condition.toUpperCase();\n            var parsedVal = this.parent.parseFloat(condition);\n            if (condUpper === this.parent.trueValue || (parsedVal < 0 || parsedVal > 0)) {\n                if (nestedFormula && argArr[1].includes(':')) {\n                    cellValues = this.parent.getCellCollection(argArr[1]);\n                    for (var i = 0; i < cellValues.length; i++) {\n                        cellVal = this.parent.getValueFromArg(cellValues[i]);\n                        if (!isNaN(this.parent.parseFloat(cellVal))) {\n                            val += cellVal + ',';\n                        }\n                    }\n                    return val.slice(0, val.length - 1);\n                }\n                result = argArr[1] === '' ? '0' : this.parent.getValueFromArg(argArr[1]);\n            }\n            else if (condUpper === this.parent.falseValue || parsedVal === 0) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[2])) {\n                    return this.parent.falseValue;\n                }\n                if (nestedFormula && argArr[2].includes(':')) {\n                    cellValues = this.parent.getCellCollection(argArr[2]);\n                    for (var i = 0; i < cellValues.length; i++) {\n                        cellVal = this.parent.getValueFromArg(cellValues[i]);\n                        if (!isNaN(this.parent.parseFloat(cellVal))) {\n                            val += cellVal + ',';\n                        }\n                    }\n                    return val.slice(0, val.length - 1);\n                }\n                result = argArr[2] === '' ? '0' : this.parent.getValueFromArg(argArr[2]);\n            }\n            else {\n                return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Requires3Args];\n            }\n        }\n        if (!skipTick && result.indexOf(this.parent.tic) > -1) {\n            return result.split(this.parent.tic).join('');\n        }\n        else {\n            return result === '' ? '0' : result;\n        }\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number | string} - Compute the IFERROR value.\n     */\n    BasicFormulas.prototype.ComputeIFERROR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argArr = args;\n        var condition;\n        if (argArr.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (this.parent.isCellReference(argArr[0])) {\n            condition = this.parent.getValueFromArg(argArr[0]) || '0';\n            if (this.parent.getErrorStrings().indexOf(condition) === -1 && condition !== 'NaN') {\n                return condition;\n            }\n        }\n        else {\n            condition = this.parent.getValueFromArg(argArr[0], null, true) || '0';\n            if (this.parent.getErrorStrings().indexOf(condition) === -1 && condition !== 'NaN') {\n                condition = condition.split(this.parent.tic).join('').trim();\n                return condition;\n            }\n        }\n        if (this.parent.isCellReference(argArr[1])) {\n            condition = this.parent.getValueFromArg(argArr[1]) || '0';\n        }\n        else {\n            condition = this.parent.getValueFromArg(argArr[1]) || '0';\n            condition = condition.split(this.parent.tic).join('').trim();\n        }\n        return condition;\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the PRODUCT value.\n     */\n    BasicFormulas.prototype.ComputePRODUCT = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var isSubtotalFormula = false;\n        if (range.length && range[range.length - 1] === 'isSubtotal') {\n            isSubtotalFormula = true;\n            range.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(range) || (range.length === 1 && range[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var product = 1;\n        var val;\n        var orgValue;\n        var argsHit = true;\n        var parseVal;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(range)) {\n            var argArr = range;\n            for (var i = 0; i < argArr.length; i++) {\n                var rangevalue = argArr[i];\n                if (rangevalue.indexOf(':') > -1 && this.parent.isCellReference(rangevalue)) {\n                    var cellCollection = this.parent.getCellCollection(rangevalue);\n                    for (var j = 0; j < cellCollection.length; j++) {\n                        val = !isSubtotalFormula ? this.parent.getValueFromArg(cellCollection[j]) :\n                            this.parent.getValueFromArg(cellCollection[j], null, null, true);\n                        if (isSubtotalFormula && val.includes('SUBTOTAL(')) {\n                            continue;\n                        }\n                        if (!(0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(val)) {\n                            continue;\n                        }\n                        if (this.parent.getErrorStrings().indexOf(val) > -1) {\n                            return val;\n                        }\n                        parseVal = this.parent.parseFloat(val);\n                        if (!isNaN(parseVal)) {\n                            if (val.length > 0) {\n                                product = product * parseVal;\n                                argsHit = false;\n                            }\n                        }\n                    }\n                }\n                else if (rangevalue.indexOf(':') === -1 && this.parent.isCellReference(rangevalue)) {\n                    orgValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i]) :\n                        this.parent.getValueFromArg(argArr[i], null, null, true);\n                    if (isSubtotalFormula && orgValue.includes('SUBTOTAL(')) {\n                        continue;\n                    }\n                    if (!(0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(orgValue)) {\n                        continue;\n                    }\n                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {\n                        return orgValue;\n                    }\n                }\n                else {\n                    orgValue = argArr[i];\n                    var isEmptyStr = orgValue.indexOf(this.parent.tic) > -1 && orgValue.split(this.parent.tic).join('').trim() === '';\n                    if (isEmptyStr || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(orgValue.split(this.parent.tic).join(''))))) {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                    orgValue = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));\n                    orgValue = (orgValue === this.parent.trueValue) ? '1' : (orgValue === this.parent.falseValue) ? '0' : orgValue.split(this.parent.tic).join('');\n                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {\n                        return orgValue;\n                    }\n                }\n                parseVal = this.parent.parseFloat(orgValue);\n                if (!isNaN(parseVal)) {\n                    if (orgValue.length > 0) {\n                        product = product * parseVal;\n                        argsHit = false;\n                    }\n                }\n            }\n        }\n        return argsHit ? '0' : product.toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string | number} - Compute the Choose value.\n     */\n    BasicFormulas.prototype.ComputeDAYS = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) && (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var processArgs = function (actuaValue) {\n            var value = _this.parent.getValueFromArg(actuaValue).trim();\n            if (value.indexOf(_this.parent.tic) > -1) {\n                value = value.split(_this.parent.tic).join('').trim();\n                if (value === '' || _this.parent.isCellReference(actuaValue) || value.toUpperCase() === _this.parent.trueValue ||\n                    value.toUpperCase() === _this.parent.falseValue) {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            value = value.split(_this.parent.tic).join('');\n            if (value.toUpperCase() === _this.parent.trueValue) {\n                value = '1';\n            }\n            else if (value === '' || value.toUpperCase() === _this.parent.falseValue) {\n                value = '0';\n            }\n            else if (Number(value) < 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            var dateCheck = { value: value.toString() };\n            _this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, dateCheck);\n            if (dateCheck.isDate || dateCheck.isTime) {\n                value = (_this.parent.parseDate(value).getTime() / (1000 * 3600 * 24)).toString();\n            }\n            return value;\n        };\n        var endDate = processArgs(args[0]);\n        if (errCollection.indexOf(endDate) > -1) {\n            return endDate;\n        }\n        var startDate = processArgs(args[1]);\n        if (errCollection.indexOf(startDate) > -1) {\n            return startDate;\n        }\n        var result = Math.floor(Number(endDate)) - Math.floor(Number(startDate));\n        if (isNaN(result)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} argArr - specify the range.\n     * @returns {number | string | number[] | string[]} - Compute the unique.\n     */\n    BasicFormulas.prototype.ComputeUNIQUE = function () {\n        var _this = this;\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        var result;\n        var isComputeExp;\n        var errCollection = this.parent.getErrorStrings();\n        if (argArr[argArr.length - 1] === 'isComputeExp') {\n            isComputeExp = true;\n            argArr.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr[0] === '' && argArr.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length > 3) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var processArgs = function (actualValue) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(actualValue)) {\n                return _this.parent.falseValue;\n            }\n            var value = _this.parent.getValueFromArg(actualValue);\n            if (errCollection.indexOf(value) > -1) {\n                return value;\n            }\n            if (Number(value) === 0) {\n                return _this.parent.falseValue;\n            }\n            else if (Number(value) < 0 || Number(value) > 0) {\n                return _this.parent.trueValue;\n            }\n            if (!_this.parent.isCellReference(actualValue)) {\n                value = _this.parent.removeTics(value);\n            }\n            if (value.toUpperCase() === _this.parent.trueValue || value.toUpperCase() === _this.parent.falseValue) {\n                return value.toUpperCase();\n            }\n            else if (value.indexOf(_this.parent.tic) > -1 || actualValue.indexOf(_this.parent.tic) > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n            }\n        };\n        var byColumn = processArgs(argArr[1]);\n        if (errCollection.indexOf(byColumn) > -1) {\n            return byColumn;\n        }\n        var exactlyOne = processArgs(argArr[2]);\n        if (errCollection.indexOf(exactlyOne) > -1) {\n            return exactlyOne;\n        }\n        var valueCollection = [];\n        if (argArr[0].indexOf(':') > -1) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[0].match(/[0-9]/))) {\n                var splitArray = argArr[0].split(':');\n                argArr[0] = splitArray[0] + '1' + ':' + splitArray[1] + (this.parent.spreadSheetUsedRange[0] + 1);\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[0].toUpperCase().match(/[A-Z]/))) {\n                var splitArray = argArr[0].split(':');\n                argArr[0] = 'A' + splitArray[0] + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(this.parent.spreadSheetUsedRange[1] + 1) + splitArray[1];\n            }\n            var rangeSplit = argArr[0].split(':');\n            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {\n                var collection = this.parent.dependencyCollection;\n                for (var i = 0; i < collection.length && !isComputeExp; i++) {\n                    if (collection[i].split(':')[0] === argArr[0].split(':')[0]) {\n                        this.clearDependency(collection[i]);\n                    }\n                }\n                if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {\n                    if (!isComputeExp) {\n                        this.parent.dependencyCollection.push(argArr[0]);\n                    }\n                }\n                else {\n                    this.clearDependency(argArr[0]);\n                }\n                var j = argArr[0].indexOf(':');\n                var swap = void 0;\n                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));\n                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));\n                var endRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));\n                var endColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));\n                if (rowIdx > endRowIdx) {\n                    swap = endRowIdx;\n                    endRowIdx = rowIdx;\n                    rowIdx = swap;\n                }\n                if (colIdx > endColIdx) {\n                    swap = endColIdx;\n                    endColIdx = colIdx;\n                    colIdx = swap;\n                }\n                var sheetIndex = '';\n                if (argArr[0].indexOf('!') === 0) {\n                    sheetIndex = argArr[0].substring(0, argArr[0].replace('!', '').indexOf('!') + 2);\n                }\n                argArr[0] = sheetIndex + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(colIdx) + rowIdx + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(endColIdx) + endRowIdx;\n                var colDiff = endColIdx - colIdx;\n                var cellValues = this.parent.getCellCollection(argArr[0]);\n                var actCell = void 0;\n                var uniqueActCell = void 0;\n                actCell = uniqueActCell = this.parent.actCell;\n                if (byColumn === this.parent.falseValue) {\n                    if (colDiff === 0) {\n                        for (var i = 0; i < cellValues.length; i++) {\n                            var val = this.parent.getValueFromArg(cellValues[i]);\n                            val = val === '' ? '0' : val;\n                            valueCollection.push(val);\n                        }\n                    }\n                    else {\n                        var temp = '';\n                        var diff = colDiff;\n                        for (var i = 0; i < cellValues.length; i++) {\n                            if (i === cellValues.length - 1) {\n                                var val = this.parent.getValueFromArg(cellValues[i]);\n                                val = val === '' ? '0' : val;\n                                temp = temp + val + '++';\n                                valueCollection.push(temp.substring(0, temp.length - 2));\n                            }\n                            if (i <= diff) {\n                                var val = this.parent.getValueFromArg(cellValues[i]);\n                                val = val === '' ? '0' : val;\n                                temp = temp + val + '++';\n                            }\n                            else {\n                                valueCollection.push(temp.substring(0, temp.length - 2));\n                                diff = colDiff + i;\n                                var val = this.parent.getValueFromArg(cellValues[i]);\n                                val = val === '' ? '0' : val;\n                                temp = val + '++';\n                            }\n                        }\n                    }\n                }\n                else {\n                    var temp = '';\n                    var diff = colDiff + 1;\n                    var rowDiff = endRowIdx - rowIdx;\n                    for (var i = 0; i < diff; i++) {\n                        for (var j_1 = 0; j_1 <= rowDiff; j_1++) {\n                            var val = this.parent.getValueFromArg(cellValues[j_1 * diff + i]);\n                            val = val === '' ? '0' : val;\n                            temp = temp + val + '++';\n                        }\n                        valueCollection.push(temp.substring(0, temp.length - 2));\n                        temp = '';\n                    }\n                }\n                var uniqueCollection = [];\n                var duplicateCollection = [];\n                var tmp = [];\n                var tmp2 = [];\n                for (var i = 0; i < valueCollection.length; i++) {\n                    if (uniqueCollection.indexOf(valueCollection[i].toLowerCase()) === -1) {\n                        uniqueCollection.push(valueCollection[i].toLowerCase());\n                        tmp.push(valueCollection[i]);\n                    }\n                    else {\n                        if (duplicateCollection.indexOf(valueCollection[i].toLowerCase()) === -1) {\n                            duplicateCollection.push(valueCollection[i].toLowerCase());\n                        }\n                        tmp2.push(valueCollection[i]);\n                    }\n                }\n                if (exactlyOne === this.parent.trueValue) {\n                    var exactOne = [];\n                    for (var i = 0; i < tmp.length; i++) {\n                        if (duplicateCollection.indexOf(tmp[i].toLowerCase()) === -1) {\n                            exactOne.push(tmp[i]);\n                        }\n                    }\n                    tmp = exactOne;\n                    if (tmp.length === 0) {\n                        return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Calc];\n                    }\n                }\n                if (isComputeExp) {\n                    var computeExpResult_1;\n                    if (colDiff !== 0) {\n                        computeExpResult_1 = [];\n                        (tmp).forEach(function (item) {\n                            computeExpResult_1 = computeExpResult_1.concat(item.split('++'));\n                        });\n                    }\n                    else {\n                        computeExpResult_1 = byColumn === this.parent.falseValue ? tmp : tmp[0].split('++');\n                    }\n                    return computeExpResult_1;\n                }\n                if (actCell.indexOf('!') > -1) {\n                    actCell = actCell.substring(actCell.lastIndexOf('!') + 1);\n                }\n                var actRowIdx = this.parent.rowIndex(actCell);\n                var actColIdx = this.parent.colIndex(actCell);\n                if (this.parent.dependencyLevel === 0) {\n                    var isSpill = false;\n                    if (byColumn === this.parent.falseValue) {\n                        for (var i = actRowIdx, diff = tmp.length + actRowIdx; i < diff; i++) {\n                            var splitValue = tmp[0].split('++');\n                            for (var j_2 = actColIdx, diff2 = splitValue.length + actColIdx; j_2 < diff2; j_2++) {\n                                if (i === diff - 1 && j_2 === diff2 - 1 &&\n                                    this.parent.uniqueRange.indexOf(uniqueActCell + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(j_2) + i) === -1) {\n                                    this.parent.uniqueRange.push(uniqueActCell + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(j_2) + i);\n                                }\n                                if (this.checkSpill(j_2, i)) {\n                                    isSpill = true;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        for (var i = actColIdx, diff = tmp.length + actColIdx; i < diff; i++) {\n                            var splitValue = tmp[0].split('++');\n                            for (var j_3 = actRowIdx, diff2 = splitValue.length + actRowIdx; j_3 < diff2; j_3++) {\n                                if (i === diff - 1 && j_3 === diff2 - 1 &&\n                                    this.parent.uniqueRange.indexOf(this.parent.actCell + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(i) + j_3) === -1) {\n                                    this.parent.uniqueRange.push(this.parent.actCell + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(i) + j_3);\n                                }\n                                if (this.checkSpill(i, j_3)) {\n                                    isSpill = true;\n                                }\n                            }\n                        }\n                    }\n                    if (isSpill) {\n                        return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Spill];\n                    }\n                }\n                else if (this.parent.dependencyLevel > 0 &&\n                    this.parent.getValueFromArg((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {\n                    return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Spill];\n                }\n                if (byColumn === this.parent.falseValue) {\n                    var calcFamily = this.parent.getSheetFamilyItem(this.parent.grid);\n                    var token = '';\n                    var cellTxt = void 0;\n                    if (calcFamily.sheetNameToParentObject !== null && calcFamily.sheetNameToParentObject.size > 0) {\n                        token = calcFamily.parentObjectToToken.get(this.parent.grid);\n                        cellTxt = token + actCell;\n                    }\n                    for (var i = 0; i < tmp.length; i++) {\n                        var splitValue = tmp[i].split('++');\n                        if (i > 0) {\n                            actRowIdx++;\n                            actColIdx = this.parent.colIndex(actCell);\n                        }\n                        for (var j_4 = 0; j_4 < splitValue.length; j_4++) {\n                            this.setValueRefresh(splitValue[j_4], actRowIdx, actColIdx);\n                            if (i > 0 || j_4 > 0) {\n                                this.parent.refresh(token + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(actColIdx) + actRowIdx.toString(), cellTxt);\n                            }\n                            if (splitValue[j_4 + 1]) {\n                                actColIdx++;\n                            }\n                        }\n                    }\n                    result = tmp[0].split('++')[0];\n                }\n                else {\n                    for (var i = 0; i < tmp.length; i++) {\n                        var splitValue = tmp[i].split('++');\n                        for (var i_1 = 0; i_1 < splitValue.length; i_1++) {\n                            this.setValueRefresh(splitValue[i_1], actRowIdx, actColIdx);\n                            if (splitValue[i_1 + 1]) {\n                                actRowIdx++;\n                            }\n                            else {\n                                actColIdx++;\n                                actRowIdx = this.parent.rowIndex(actCell);\n                            }\n                        }\n                    }\n                    result = tmp[0].split('++')[0];\n                }\n            }\n        }\n        else if (this.parent.isCellReference(argArr[0])) {\n            if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {\n                if (!isComputeExp) {\n                    this.parent.dependencyCollection.push(argArr[0]);\n                }\n            }\n            else {\n                this.clearDependency(argArr[0]);\n            }\n            result = this.parent.getValueFromArg(argArr[0]);\n        }\n        else {\n            result = this.parent.getValueFromArg(argArr[0].trim());\n            if (errCollection.indexOf(result) > -1) {\n                return result;\n            }\n            result = this.parent.removeTics(result);\n        }\n        return result;\n    };\n    BasicFormulas.prototype.setValueRefresh = function (splitValue, rowIdx, colIdx) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.parent.parentObject.setValueRowCol(this.parent.getSheetId(this.parent.grid), splitValue, rowIdx, colIdx);\n    };\n    BasicFormulas.prototype.checkSpill = function (i, j) {\n        var spill = false;\n        var value = this.parent.getValueFromArg((0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(i) + j, true);\n        var formulaAddress = '!' + this.parent.getSheetID(this.parent.grid) + '!' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(i) + j;\n        var formulaString;\n        if (this.parent.getFormulaInfoTable().get(formulaAddress)) {\n            formulaString = this.parent.getFormulaInfoTable().get(formulaAddress).formulaText;\n        }\n        if (value && (value.toUpperCase().indexOf('UNIQUE') < 0 ||\n            (formulaString && !formulaString.toUpperCase().includes('UNIQUE'))) &&\n            value !== this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments]) {\n            spill = true;\n        }\n        return spill;\n    };\n    BasicFormulas.prototype.clearDependency = function (value) {\n        var actCell = this.parent.actCell;\n        var actCellSheetName = '';\n        if (actCell.lastIndexOf('!') > -1) {\n            var actCellAddr = actCell;\n            actCell = actCellAddr.substring(actCellAddr.lastIndexOf('!') + 1);\n            actCellSheetName = actCellAddr.substring(0, actCellAddr.lastIndexOf('!')) + '!';\n        }\n        var actRowIdx = this.parent.rowIndex(actCell);\n        var actColIdx = this.parent.colIndex(actCell);\n        var j = value.indexOf(':');\n        var rowIndex = this.parent.rowIndex(this.parent.substring(value, 0, j));\n        var colIndex = this.parent.colIndex(this.parent.substring(value, 0, j));\n        var eRowIdx = this.parent.rowIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));\n        var eColIdx = this.parent.colIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));\n        var rowDiff = eRowIdx - rowIndex + actRowIdx;\n        var colDiff = eColIdx - colIndex + actColIdx;\n        var formulaText = this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell) ?\n            this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell).getFormulaText() : '';\n        for (var i = actRowIdx; i <= rowDiff; i++) {\n            for (var j_5 = actColIdx; j_5 <= colDiff; j_5++) {\n                if (this.parent.dependencyLevel > 0 || formulaText.indexOf('UNIQUE') > -1) {\n                    if (this.parent.getValueFromArg('!' + this.parent.getSheetID(this.parent.grid) + '!' +\n                        (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {\n                        return;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, '', i, j_5);\n                    this.parent.refresh('!' + this.parent.getSheetID(this.parent.grid) + '!' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(j_5) + i, actCell);\n                    this.parent.actCell = actCellSheetName + actCell;\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string} - Compute the text or null value.\n     */\n    BasicFormulas.prototype.ComputeT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var nestedFormula;\n        var errCollection = this.parent.getErrorStrings();\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        value = this.parent.getValueFromArg(args[0]).trim();\n        if (errCollection.indexOf(value) > -1) {\n            return value;\n        }\n        if (args[0].indexOf(this.parent.tic) > -1) {\n            value = this.parent.removeTics(args[0].trim());\n            if (value.indexOf(this.parent.tic + this.parent.tic) > -1) {\n                value = value.replace(/\"\"/g, this.parent.tic);\n            }\n        }\n        else {\n            if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {\n                value = (Number(value.split('%')[0]) / 100).toString();\n            }\n            if (this.parent.isNumber(value) ||\n                value.toUpperCase() === this.parent.trueValue || value.toUpperCase() === this.parent.falseValue) {\n                return '';\n            }\n        }\n        if (nestedFormula) {\n            value = this.parent.tic + value + this.parent.tic;\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the hours.\n     */\n    BasicFormulas.prototype.ComputeHOUR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length !== 1 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[0].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellVal;\n        if (this.parent.isCellReference(args[0])) {\n            cellVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (cellVal.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n        }\n        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n            return cellVal;\n        }\n        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);\n        var date;\n        if (this.parent.isNumber(cellVal)) {\n            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            date = this.parent.intToTime(cellVal);\n        }\n        else {\n            var dateCheck = { value: cellVal.toString() };\n            this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, dateCheck);\n            if (dateCheck.isDate || dateCheck.isTime) {\n                date = dateCheck.dateObj;\n            }\n            else {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (date.toString() === 'Invalid Date') {\n            date = new Date(Date.parse(cellVal));\n        }\n        if (date.toString() === 'Invalid Date') {\n            var argVal = new Date(Date.now()).toLocaleDateString() + ' ' + cellVal;\n            date = new Date(Date.parse(argVal));\n        }\n        if (date.toString() === 'Invalid Date') {\n            date = this.parent.fromOADate(this.parent.parseFloat(cellVal));\n        }\n        if (date.toString() === 'Invalid Date') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (date.getFullYear() < 1900 || date.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return date.getHours();\n    };\n    /**\n     * @hidden\n     * @param {string} argArr - specify the args.\n     * @returns {string | boolean} - Compute the hours.\n     */\n    BasicFormulas.prototype.ComputeMINUTE = function () {\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        if (argArr.length !== 1 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || argArr[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (argArr[0].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellVal;\n        if (this.parent.isCellReference(argArr[0])) {\n            cellVal = this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join('')) || '0';\n            if (cellVal.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (argArr[0].indexOf(this.parent.tic) > -1 && (argArr[0].split(this.parent.tic).join('') === this.parent.trueValue || argArr[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            cellVal = this.parent.getValueFromArg(argArr[0]).split(this.parent.tic).join('');\n        }\n        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n            return cellVal;\n        }\n        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);\n        var dateVal;\n        if (this.parent.isNumber(cellVal)) {\n            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            dateVal = this.parent.intToTime(cellVal);\n        }\n        else {\n            var dateCheck = { value: cellVal.toString() };\n            this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, dateCheck);\n            if (dateCheck.isDate || dateCheck.isTime) {\n                dateVal = dateCheck.dateObj;\n            }\n            else {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (dateVal.toString() === 'Invalid Date') {\n            dateVal = new Date(Date.parse(cellVal));\n        }\n        if (dateVal.toString() === 'Invalid Date') {\n            var argVal = new Date(Date.now()).toLocaleDateString() + ' ' + cellVal;\n            dateVal = new Date(Date.parse(argVal));\n        }\n        if (dateVal.toString() === 'Invalid Date') {\n            dateVal = this.parent.fromOADate(this.parent.parseFloat(cellVal));\n        }\n        if (dateVal.toString() === 'Invalid Date') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (dateVal.getFullYear() < 1900 || dateVal.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return dateVal.getMinutes();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the hours.\n     */\n    BasicFormulas.prototype.ComputeSECOND = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length !== 1 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[0].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellVal;\n        if (this.parent.isCellReference(args[0])) {\n            cellVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (cellVal.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n        }\n        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n            return cellVal;\n        }\n        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);\n        var dateValue;\n        if (this.parent.isNumber(cellVal)) {\n            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            dateValue = this.parent.intToTime(cellVal);\n        }\n        else {\n            var dateCheck = { value: cellVal.toString() };\n            this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, dateCheck);\n            if (dateCheck.isDate || dateCheck.isTime) {\n                dateValue = dateCheck.dateObj;\n            }\n            else {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (dateValue.toString() === 'Invalid Date') {\n            dateValue = new Date(Date.parse(cellVal));\n        }\n        if (dateValue.toString() === 'Invalid Date') {\n            var argVal = (new Date(Date.now())).toLocaleDateString() + ' ' + cellVal;\n            dateValue = new Date(Date.parse(argVal));\n        }\n        if (dateValue.toString() === 'Invalid Date') {\n            dateValue = this.parent.fromOADate(this.parent.parseFloat(cellVal));\n        }\n        if (dateValue.toString() === 'Invalid Date') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (dateValue.getFullYear() < 1900 || dateValue.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return dateValue.getSeconds();\n    };\n    /**\n     * @hidden\n     * @param {string} argsVal - specify the args.\n     * @returns {string | boolean} - Compute the months.\n     */\n    BasicFormulas.prototype.ComputeMONTH = function () {\n        var argsVal = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argsVal[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if (argsVal.length === 1 && argsVal[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argsVal.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var value = this.parent.getValueFromArg(argsVal[0]).trim();\n        if (errCollection.indexOf(value) > -1) {\n            return value;\n        }\n        if (this.parent.isCellReference(argsVal[0])) {\n            if (value.indexOf(this.parent.tic) > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else if (value === '') {\n                return 1;\n            }\n        }\n        else {\n            if (value.toUpperCase() === '\"TRUE\"' || value.toUpperCase() === '\"FALSE\"') {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            value = value.split(this.parent.tic).join('');\n        }\n        if (value === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (value === this.parent.trueValue || value === this.parent.falseValue ||\n            (Number(value) > -1 && Number(value) < 32)) {\n            return 1;\n        }\n        else if (Number(value) < 0) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (value.indexOf('%') > -1) {\n            value = (Number(value.split('%')[0]) * 0.01).toString();\n        }\n        if (this.parent.isNumber(value)) {\n            value = parseInt((Math.floor(Number(value)).toString()), 10);\n        }\n        var date = this.parent.parseDate(value);\n        if (date.toString() === 'Invalid Date') {\n            if (this.parent.isNumber(value)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else if ((date.getFullYear() < 1900) || (10000 <= date.getFullYear())) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return (date.getMonth() + 1).toString();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string } - Compute the time and date value.\n     */\n    BasicFormulas.prototype.ComputeNOW = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length !== 1 || args[0] !== '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var date = new Date(Date.now());\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n        var dFormatter = intl.getDateFormat({ format: 'M/d/yyyy h:mm:ss a' });\n        var dt = this.parent.parentObject.dateToInt(dFormatter(date), true);\n        return dt.toString();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the exact value or not.\n     */\n    BasicFormulas.prototype.ComputeEXACT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result = false;\n        var nestedFormula = args.length && args[args.length - 1] === 'nestedFormulaTrue';\n        var errCollection = this.parent.getErrorStrings();\n        if (nestedFormula) {\n            args.pop();\n        }\n        if (!args || (!args[0] && args.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var value1;\n        var value2;\n        var isCellRef;\n        if (args[0]) {\n            value1 = this.parent.getValueFromArg(args[0]);\n            if (errCollection.indexOf(value1) > -1) {\n                return value1;\n            }\n            if (value1.indexOf(this.parent.tic) === -1 && value1.includes('%')) {\n                value1 = (Number(value1.split('%')[0]) / 100).toString();\n            }\n            if (this.parent.isCellReference(args[0])) {\n                isCellRef = true;\n            }\n            else {\n                value1 = value1.split(this.parent.tic).join('');\n            }\n        }\n        if (args[1]) {\n            value2 = this.parent.getValueFromArg(args[1]);\n            if (errCollection.indexOf(value2) > -1) {\n                return value2;\n            }\n            if (value2.indexOf(this.parent.tic) === -1 && value2.includes('%')) {\n                value2 = (Number(value2.split('%')[0]) / 100).toString();\n            }\n            if (this.parent.isCellReference(args[1])) {\n                if (!isCellRef && ((value1.trim().length === 0) && (value2.trim().length === 0))) {\n                    result = false;\n                }\n            }\n            else {\n                value2 = value2.split(this.parent.tic).join('');\n                if (isCellRef && ((value1.trim().length === 0) && (value2.trim().length === 0))) {\n                    result = false;\n                }\n            }\n        }\n        if (value1 === value2) {\n            result = true;\n            if (nestedFormula) {\n                result = this.parent.tic + result + this.parent.tic;\n            }\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the exact value or not.\n     */\n    BasicFormulas.prototype.ComputeLEN = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var errorStrings = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args[0].trim() === '' && args.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        value = this.parent.getValueFromArg(args[0]).trim();\n        if (errorStrings.indexOf(value) > -1) {\n            return value;\n        }\n        if (args[0].indexOf(this.parent.tic) > -1) {\n            if (args[0] !== value && args[0].startsWith('n')) {\n                value = this.parent.removeTics(value.trim());\n            }\n            else {\n                value = this.parent.removeTics(args[0].trim());\n                if (value.indexOf(this.parent.tic + this.parent.tic) > -1) {\n                    value = value.replace(/\"\"/g, this.parent.tic);\n                }\n            }\n        }\n        else if (!args[0].startsWith('n') && value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {\n            value = (Number(value.split('%')[0]) / 100).toString();\n        }\n        return value.length;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the remainder from the given numbers.\n     */\n    BasicFormulas.prototype.ComputeMOD = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[1] === '' && !args[0].includes('\"')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Div];\n        }\n        else if (args[0] === '' && !args[1].includes('\"')) {\n            return 0;\n        }\n        for (var i = 0; i < args.length; i++) {\n            var argVal = args[i].split(this.parent.tic).join('').trim();\n            if (argVal === '' || (args[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(args[i])) {\n                value = this.parent.getValueFromArg(args[i]) || '0';\n                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;\n                if (value.toUpperCase().match(/[A-Z]/) || value.includes('\"') || !this.parent.isNumber(value)) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            else {\n                value = this.parent.getValueFromArg(args[i].split(this.parent.tic).join(''));\n                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;\n                if (this.parent.getErrorStrings().indexOf(value) > -1) {\n                    return value;\n                }\n            }\n            args[i] = value;\n        }\n        var value1 = args[0];\n        var value2 = args[1];\n        if (value2 === '0' || value2 === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Div];\n        }\n        else if (value1 === '0' || value1 === '') {\n            return 0;\n        }\n        value1 = parseFloat(value1);\n        value2 = parseFloat(value2);\n        var result = ((value1 % value2) + value2) % value2;\n        if (isNaN(result)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the next odd number.\n     */\n    BasicFormulas.prototype.ComputeODD = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 1 || args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argVal = args[0].split(this.parent.tic).join('').trim();\n        if (argVal === '' || (args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var val;\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(args[0])) {\n            val = this.parent.getValueFromArg(args[0]);\n            if (val === this.parent.trueValue) {\n                val = '1';\n            }\n            else if (val === '' || val === this.parent.falseValue) {\n                val = '0';\n            }\n            else if (val.toUpperCase().match(/[A-Z]/) || val.includes('\"') || !this.parent.isNumber(val)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            val = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));\n            if (val === '#NAME?') {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n            }\n            if (val === this.parent.trueValue) {\n                val = '1';\n            }\n            else if (val === '' || val === this.parent.falseValue) {\n                val = '0';\n            }\n            else if (val.toUpperCase().match(/[A-Z]/) || !this.parent.isNumber(val)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        var result = Math.ceil(parseInt(val, 10));\n        var isOne = result === 0;\n        result = result % 2 === 0 ? (result > 0 ? result + 1 : result - 1) : result;\n        if (Math.ceil(parseInt(val, 10)) % 2 !== 0) {\n            if (parseInt(val, 10) > 0 && parseFloat(val) > parseInt(val, 10)) {\n                result = result + 2;\n            }\n            else if (parseInt(val, 10) < 0 && parseFloat(val) < parseInt(val, 10)) {\n                result = result - 2;\n            }\n        }\n        if (isNaN(result)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        return isOne ? 1 : result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the next even number.\n     */\n    BasicFormulas.prototype.ComputeEVEN = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 1 || args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argVal = args[0].split(this.parent.tic).join('').trim();\n        if (argVal === '' || (args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var value1;\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(args[0])) {\n            value1 = this.parent.getValueFromArg(args[0]);\n            if (value1 === this.parent.trueValue) {\n                value1 = '1';\n            }\n            else if (value1 === '' || value1 === this.parent.falseValue) {\n                value1 = '0';\n            }\n            else if (value1.toUpperCase().match(/[A-Z]/) || value1.includes('\"') || !this.parent.isNumber(value1)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            value1 = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));\n            if (value1 === '#NAME?') {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n            }\n            if (value1 === this.parent.trueValue) {\n                value1 = '1';\n            }\n            else if (value1 === '' || value1 === this.parent.falseValue) {\n                value1 = '0';\n            }\n            else if (value1.toUpperCase().match(/[A-Z]/) || !this.parent.isNumber(value1)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        var result = Math.ceil(parseInt(value1, 10));\n        result = result % 2 === 0 ? result : (result > 0 ? result + 1 : result - 1);\n        if (Math.ceil(parseInt(value1, 10)) % 2 === 0) {\n            if (parseInt(value1, 10) > 0 && parseFloat(value1) > parseInt(value1, 10)) {\n                result = result + 2;\n            }\n            else if (parseInt(value1, 10) < 0 && parseFloat(value1) < parseInt(value1, 10)) {\n                result = result - 2;\n            }\n        }\n        if (isNaN(result)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the value of pi.\n     */\n    BasicFormulas.prototype.ComputePI = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result;\n        if (args && args[0] !== '') {\n            result = this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else {\n            result = Math.PI;\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the median value.\n     */\n    BasicFormulas.prototype.ComputeMEDIAN = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value1;\n        var num = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '' && args.length === 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        for (var i = 0; i < args.length; i++) {\n            if (this.parent.isCellReference(args[i])) {\n                if (args[i].indexOf(':') > -1) {\n                    var cellCollection = this.parent.getCellCollection(args[i]);\n                    for (var a = 0; a < cellCollection.length; a++) {\n                        var cellValue = this.parent.getValueFromArg(cellCollection[a]);\n                        if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {\n                            return cellValue;\n                        }\n                        else if (cellValue.trim() !== '') {\n                            num.push(this.parent.parseFloat(cellValue));\n                        }\n                    }\n                }\n                else {\n                    var cellVal = this.parent.getValueFromArg(args[i]);\n                    if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n                        return cellVal;\n                    }\n                    else if (cellVal.trim() !== '') {\n                        num.push(this.parent.parseFloat(cellVal));\n                    }\n                }\n            }\n            else if (args[i] === '' || args[i] === this.parent.falseValue && !this.parent.isCellReference(args[i])) {\n                num.push(0);\n            }\n            else if (args[i] === this.parent.trueValue && !this.parent.isCellReference(args[i])) {\n                num.push(1);\n            }\n            else if (args[i].indexOf(this.parent.tic) > -1 && isNaN(parseFloat(args[i].split(this.parent.tic).join('')))) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else {\n                var cValue = this.parent.getValueFromArg(args[i]).split(this.parent.tic).join('');\n                if (this.parent.getErrorStrings().indexOf(cValue) > -1) {\n                    return cValue;\n                }\n                else {\n                    num.push(this.parent.parseFloat(cValue));\n                }\n            }\n        }\n        num = num.sort(function (n1, n2) { return n1 - n2; });\n        var len = num.length;\n        for (var j = 0; j < len; j++) {\n            if (isNaN(num[j])) {\n                num.splice(j, 1);\n                len = num.length;\n                j--;\n                if (num.length === 0) {\n                    break;\n                }\n            }\n        }\n        if (num.length % 2 !== 0 && !isNaN(num[parseInt((num.length / 2).toString(), 10)])) {\n            value1 = num[parseInt((num.length / 2).toString(), 10)];\n        }\n        else if (!isNaN(num[num.length / 2]) && !isNaN(num[num.length / 2 - 1])) {\n            value1 = (num[num.length / 2] + num[num.length / 2 - 1]) / 2;\n        }\n        else {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return value1;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the edate value.\n     */\n    BasicFormulas.prototype.ComputeEDATE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length !== 2 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[0] === '' || args[1] === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        if (args[0].split(this.parent.tic).join('') === '' || args[1].split(this.parent.tic).join('') === ''\n            || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var dValue;\n        var mValue;\n        if (this.parent.isCellReference(args[0])) {\n            if (args[0].indexOf(':') > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            dValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (dValue.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            dValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));\n        }\n        if (this.parent.isCellReference(args[1])) {\n            if (args[1].indexOf(':') > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            mValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';\n        }\n        else {\n            mValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));\n        }\n        if (this.parent.getErrorStrings().indexOf(mValue) > -1) {\n            return mValue;\n        }\n        mValue = parseInt(mValue, 10);\n        var date;\n        if (this.parent.isNumber(dValue)) {\n            dValue = parseInt(dValue, 10);\n            if (dValue < 0 || dValue > 2958465) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            date = this.parent.fromOADate(dValue);\n        }\n        else {\n            date = this.parent.checkDateFormat(dValue);\n        }\n        if (isNaN(mValue) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.isDate(date)) || date.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var checkDate = date.getDate();\n        date.setMonth(date.getMonth() + mValue);\n        if (checkDate !== date.getDate()) {\n            date.setDate(0);\n            //For the date like 31st of January and mValue as 1, the setMonth returns 3rd of March, so we using setDate(0) to return 28th of February.\n        }\n        var result = this.parent.parentObject.dateToInt(date);\n        // For 0 and 1 values we are considering the same starting date as 1/1/1900, so for 0 we are decrementing the value with 1.\n        if (dValue.toString() === '0') {\n            result -= 1;\n        }\n        if (result < 0 || result > 2958465) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return result.toString();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the number of months value.\n     */\n    BasicFormulas.prototype.ComputeEOMONTH = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length !== 2 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[0] === '' || args[1] === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        if (args[0].split(this.parent.tic).join('') === '' || args[1].split(this.parent.tic).join('') === ''\n            || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var dateValue;\n        var monthValue;\n        if (this.parent.isCellReference(args[0])) {\n            if (args[0].indexOf(':') > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            dateValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (dateValue.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            dateValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n        }\n        if (this.parent.getErrorStrings().indexOf(dateValue) > -1) {\n            return dateValue;\n        }\n        if (this.parent.isCellReference(args[1])) {\n            if (args[1].indexOf(':') > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            monthValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';\n        }\n        else {\n            monthValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));\n        }\n        if (this.parent.getErrorStrings().indexOf(monthValue) > -1) {\n            return monthValue;\n        }\n        monthValue = parseInt(monthValue, 10);\n        var date;\n        if (this.parent.isNumber(dateValue)) {\n            dateValue = parseInt(dateValue, 10);\n            if (dateValue < 0 || dateValue > 2958465) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            date = this.parent.fromOADate(dateValue);\n        }\n        else {\n            date = this.parent.checkDateFormat(dateValue);\n        }\n        if (isNaN(monthValue) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.isDate(date)) || date.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        date = new Date(date.getFullYear(), date.getMonth() + (monthValue + 1), 0);\n        var result = this.parent.parentObject.dateToInt(date);\n        if (result < 0 || result > 2958465 || date.getFullYear() < 1900) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return result.toString();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the date value.\n     */\n    BasicFormulas.prototype.ComputeDATEVALUE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var dValue;\n        var errCollection = this.parent.getErrorStrings();\n        if (args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        dValue = this.parent.getValueFromArg(args[0]) || '0';\n        if (errCollection.indexOf(dValue) > -1) {\n            return dValue;\n        }\n        if (this.parent.isCellReference(args[0])) {\n            if ((args[0].indexOf(':') > -1) || dValue.startsWith(this.parent.tic)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            dValue = (args[0]).split(this.parent.tic).join('') || '0';\n        }\n        if (!(!(this.parent.isNumber(dValue)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.isDate(dValue)))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var date = this.parent.parseDate(dValue);\n        if (errCollection.indexOf(dValue) > -1) {\n            return dValue;\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(date) || date.toString() === 'Invalid Date' ||\n            date.getFullYear() < 1900 || date.getFullYear() > 9999) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else {\n            dValue = this.parent.toOADate(date).toString();\n        }\n        return parseFloat(dValue).toFixed(0).toString();\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the count blank value.\n     */\n    BasicFormulas.prototype.ComputeCOUNTBLANK = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result = 0;\n        if (args.length !== 1 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || !this.parent.isCellReference(args[0])) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args[0] === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else {\n            var cellRange = this.parent.getCellCollection(args[0]);\n            for (var i = 0; i < cellRange.length; i++) {\n                if (this.parent.getValueFromArg(cellRange[i]) === '') {\n                    result++;\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the factorial value.\n     */\n    BasicFormulas.prototype.ComputeFACT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var fact = 1;\n        var errCollection = this.parent.getErrorStrings();\n        if (args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var getValue = args[0];\n        if (this.parent.isCellReference(args[0]) || isNaN(Number(getValue.split(this.parent.tic).join('')))) {\n            getValue = this.parent.getValueFromArg(args[0]);\n            if (errCollection.indexOf(getValue) > -1) {\n                return getValue;\n            }\n            if (getValue.startsWith(this.parent.tic) ||\n                getValue.match(/^(\\d*\\.\\d+|\\d+)\\s*[+\\-*/]\\s*(\\d*\\.\\d+|\\d+)$/)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else if (getValue === '') {\n                return 1;\n            }\n        }\n        getValue = getValue.split(this.parent.tic).join('').trim();\n        if (errCollection.indexOf(getValue) > -1) {\n            return getValue;\n        }\n        if (getValue.toUpperCase() === this.parent.trueValue || getValue.toUpperCase() === this.parent.falseValue) {\n            return 1;\n        }\n        if (getValue.indexOf('%') > -1) {\n            getValue = (Number(getValue.split('%')[0]) / 100).toString();\n        }\n        var value = parseInt(getValue, 10);\n        if ((value < 0) || (value > 170)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (getValue.toUpperCase().match(/[A-Z]/) || getValue === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (getValue.indexOf(':') > -1) {\n            return 0;\n        }\n        for (var i = 1; i <= value; i++) {\n            fact = fact * i;\n        }\n        return fact;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the decimal value.\n     */\n    BasicFormulas.prototype.ComputeDECIMAL = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var specialChars = /[@#$%^&*()?:{}|<>+-]/g;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args[0].match(specialChars)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join('')))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else {\n            var val = void 0;\n            var val1 = void 0;\n            if (this.parent.isCellReference(args[0].toString())) {\n                val = this.parent.getValueFromArg(args[0]);\n            }\n            else {\n                val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n            }\n            if (this.parent.isCellReference(args[1].toString())) {\n                val1 = this.parent.getValueFromArg(args[1]);\n            }\n            else {\n                val1 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n            }\n            var num = parseInt(val, 10);\n            var radix = parseInt(val1, 10);\n            if (this.parent.getErrorStrings().indexOf(val) > -1) {\n                return val;\n            }\n            else if (this.parent.getErrorStrings().indexOf(val1) > -1) {\n                return val1;\n            }\n            else if (val === '' && val1 !== '') {\n                return 0;\n            }\n            else if (val === '' || (num < 0) || (!isNaN(num) && !Number.isInteger(parseFloat(val)))) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else if (val1 === '' || (radix < 2 || radix > 36) || isNaN(radix)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else if (isNaN(this.parent.parseFloat(val)) && this.parent.parseFloat(val1) <= 10) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            value = parseInt(val, parseInt(val1, 10));\n        }\n        return isNaN(value) ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num] : value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the degrees value.\n     */\n    BasicFormulas.prototype.ComputeDEGREES = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args[0] === '' && args.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var val = this.parent.getValueFromArg(args[0]).trim();\n        if (errCollection.indexOf(val) > -1) {\n            return val;\n        }\n        if (this.parent.isCellReference(args[0])) {\n            if (val === '' || val.indexOf(':') > -1) {\n                return 0;\n            }\n            else if (val.indexOf(this.parent.tic) > -1 || (isNaN(Number(val)) && !isNaN(parseInt(val, 10)))) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else if (val.indexOf('\"TRUE\"') > -1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        val = val.split(this.parent.tic).join('');\n        if (val.toUpperCase() === this.parent.trueValue) {\n            val = '1';\n        }\n        else if (val.toUpperCase() === this.parent.falseValue) {\n            val = '0';\n        }\n        else if (val.indexOf('%') > -1) {\n            val = (Number(val.split('%')[0]) / 100).toString();\n        }\n        else if (val.toUpperCase().match(/[A-Z]/) || isNaN(parseInt(val, 10))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return parseFloat(val) * (180 / (Math.PI));\n    };\n    /**\n     * @hidden\n     * @param {string} argArr - specify the args.\n     * @returns {string | boolean} - Compute the cell address.\n     */\n    BasicFormulas.prototype.ComputeADDRESS = function () {\n        var _this = this;\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length < 2 || argArr.length > 5) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argArr[0].split(this.parent.tic).join('').trim() === '' || argArr[1].split(this.parent.tic).join('').trim() === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var processArgs = function (actualValue) {\n            var value = _this.parent.getValueFromArg(actualValue).trim();\n            if (errCollection.indexOf(value) > 0) {\n                return value;\n            }\n            if (value.toUpperCase() === _this.parent.trueValue) {\n                value = '1';\n            }\n            else if (value.toUpperCase() === _this.parent.falseValue) {\n                value = '0';\n            }\n            if (_this.parent.isCellReference(actualValue) && value.indexOf(_this.parent.tic) > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            value = _this.parent.removeTics(value);\n            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {\n                value = (Number(value.split('%')[0]) / 100).toString();\n            }\n            return value;\n        };\n        /* For argArr[0] */\n        var rowIndex = processArgs(argArr[0], 0);\n        if (errCollection.indexOf(rowIndex) > 0) {\n            return rowIndex;\n        }\n        rowIndex = Number(rowIndex);\n        if (isNaN(rowIndex) || rowIndex < 1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else {\n            rowIndex = rowIndex.toString();\n        }\n        /* For argArr[1] */\n        var colIndex = processArgs(argArr[1], 1);\n        if (errCollection.indexOf(colIndex) > 0) {\n            return colIndex;\n        }\n        colIndex = Number(colIndex);\n        if (isNaN(colIndex) || colIndex < 1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else {\n            colIndex = colIndex.toString();\n        }\n        /* For argArr[2] */\n        var absIndex;\n        var refStyle;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[2]) || argArr[2].trim() === '') {\n            absIndex = '1';\n        }\n        else {\n            absIndex = processArgs(argArr[2], 2);\n            if (errCollection.indexOf(absIndex) > 0) {\n                return absIndex;\n            }\n            absIndex = Number(absIndex);\n            if (isNaN(absIndex) || absIndex < 1 || absIndex > 4) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else {\n                absIndex = absIndex.toString();\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[3]) || argArr[3].trim() === '') {\n            refStyle = '1';\n        }\n        else {\n            refStyle = processArgs(argArr[3], 3);\n            if (errCollection.indexOf(refStyle) > 0) {\n                return refStyle;\n            }\n            if (refStyle.toUpperCase() === this.parent.trueValue || Number(refStyle) > 1) {\n                refStyle = '1';\n            }\n            else if (refStyle === '' || refStyle.toUpperCase() === this.parent.falseValue) {\n                refStyle = '0';\n            }\n        }\n        if (refStyle === '1') {\n            if (absIndex === '1') {\n                value = '$' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);\n            }\n            else if (absIndex === '2') {\n                value = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);\n            }\n            else if (absIndex === '3') {\n                value = '$' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);\n            }\n            else if (absIndex === '4') {\n                value = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);\n            }\n        }\n        else if (refStyle === '0') {\n            if (absIndex === '1') {\n                value = 'R' + parseInt(rowIndex, 10) + 'C' + parseInt(colIndex, 10);\n            }\n            else if (absIndex === '2') {\n                value = 'R' + parseInt(rowIndex, 10) + 'C[' + parseInt(colIndex, 10) + ']';\n            }\n            else if (absIndex === '3') {\n                value = 'R[' + parseInt(rowIndex, 10) + ']C' + parseInt(colIndex, 10);\n            }\n            else if (absIndex === '4') {\n                value = 'R[' + parseInt(rowIndex, 10) + ']C[' + parseInt(colIndex, 10) + ']';\n            }\n        }\n        else {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        var val;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr[4]) && argArr[4] !== '') {\n            val = this.parent.getValueFromArg(argArr[4]).split(this.parent.tic).join('');\n            if (errCollection.indexOf(val) > 0) {\n                return val;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(val)) {\n            value = val + '!' + value;\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the time.\n     */\n    BasicFormulas.prototype.ComputeTIME = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var result;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 3) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        if (args[0].indexOf(this.parent.tic) > -1 && args[0].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (args[1].indexOf(this.parent.tic) > -1 && args[1].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (args[2].indexOf(this.parent.tic) > -1 && args[2].split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var hours;\n        var minutes;\n        var seconds;\n        if (this.parent.isCellReference(args[0])) {\n            hours = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';\n            if (hours.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            hours = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('') || '0';\n        }\n        if (this.parent.getErrorStrings().indexOf(hours) > -1) {\n            return hours;\n        }\n        if (isNaN(this.parent.parseFloat(hours)) && !(hours === this.parent.trueValue || hours === this.parent.falseValue)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (this.parent.isCellReference(args[1])) {\n            minutes = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';\n            if (minutes.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue || args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            minutes = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('') || '0';\n        }\n        if (this.parent.getErrorStrings().indexOf(minutes) > -1) {\n            return minutes;\n        }\n        if (isNaN(this.parent.parseFloat(minutes)) && !(minutes === this.parent.trueValue || minutes === this.parent.falseValue)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (this.parent.isCellReference(args[2])) {\n            seconds = this.parent.getValueFromArg(args[2].split(this.parent.tic).join('')) || '0';\n            if (seconds.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (args[2].indexOf(this.parent.tic) > -1 && (args[2].split(this.parent.tic).join('') === this.parent.trueValue || args[2].split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            seconds = this.parent.getValueFromArg(args[2]).split(this.parent.tic).join('') || '0';\n        }\n        if (this.parent.getErrorStrings().indexOf(seconds) > -1) {\n            return seconds;\n        }\n        if (isNaN(this.parent.parseFloat(seconds)) && !(seconds === this.parent.trueValue || seconds === this.parent.falseValue)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        hours = hours === this.parent.trueValue ? '1' : (hours === this.parent.falseValue ? '0' : hours);\n        minutes = minutes === this.parent.trueValue ? '1' : (minutes === this.parent.falseValue ? '0' : minutes);\n        seconds = seconds === this.parent.trueValue ? '1' : (seconds === this.parent.falseValue ? '0' : seconds);\n        hours = parseInt(this.parent.parseFloat(hours).toString(), 10);\n        minutes = parseInt(this.parent.parseFloat(minutes).toString(), 10);\n        seconds = parseInt(this.parent.parseFloat(seconds).toString(), 10);\n        if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (hours > 32767 || minutes > 32767 || seconds > 32767) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        var value = new Date(1900, 0, 1, hours, minutes, seconds);\n        if (value.getFullYear() < 1900) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        var hh = value.getHours();\n        var m = value.getMinutes();\n        var s = value.getSeconds();\n        var dd = 'AM';\n        var h = hh;\n        if (h >= 12) {\n            h = hh - 12;\n            dd = 'PM';\n        }\n        if (h === 0) {\n            h = 12;\n        }\n        m = m < 10 ? '0' + m : m;\n        s = s < 10 ? '0' + s : s;\n        h = h < 10 ? '0' + h : h;\n        result = h + ':' + m + ':' + s + ' ' + dd;\n        var timeCheck = { value: result.toString() };\n        this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, timeCheck);\n        if (timeCheck.isTime) {\n            result = timeCheck.updatedVal;\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the char value.\n     */\n    BasicFormulas.prototype.ComputeCHAR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var val = this.parent.getValueFromArg(args[0]).trim();\n        if (errCollection.indexOf(val) > -1) {\n            return val;\n        }\n        else if (val.indexOf('\"TRUE\"') > -1 || (this.parent.isCellReference(args[0]) &&\n            val.startsWith(this.parent.tic))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        val = val.split(this.parent.tic).join('');\n        if (this.parent.isNumber(val)) {\n            val = Math.floor(Number(val)).toString();\n        }\n        else if (val.indexOf('%') > -1) {\n            val = Math.floor(Number(val.split('%')[0]) / 100).toString();\n        }\n        else if (val === this.parent.trueValue) {\n            val = '1';\n        }\n        if (val.toUpperCase().match(/^[0-9]+$/)) {\n            var char = parseInt(val, 10);\n            if (char > 255 || char <= 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            value = String.fromCharCode(char);\n        }\n        else {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the code value.\n     */\n    BasicFormulas.prototype.ComputeCODE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        value = this.parent.getValueFromArg(args[0]).trim();\n        if (errCollection.indexOf(value) > -1) {\n            return value;\n        }\n        if (args[0].indexOf(this.parent.tic) > -1) {\n            if (args[0] !== value && args[0].startsWith('n')) {\n                value = this.parent.removeTics(value.trim());\n            }\n            else {\n                value = this.parent.removeTics(args[0].trim());\n            }\n        }\n        else if (!args[0].startsWith('n') && value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {\n            value = (Number(value.split('%')[0]) / 100).toString();\n        }\n        if (value !== '') {\n            value = value.charCodeAt(0);\n        }\n        else {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the currency value.\n     */\n    BasicFormulas.prototype.ComputeDOLLAR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var isEmpty;\n        var nestedFormula;\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        if (args.length === 1) {\n            if (args[0] === '') {\n                isEmpty = true;\n            }\n            args.push('2');\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length !== 2 || isEmpty) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].indexOf(this.parent.tic) > -1) {\n                if (isNaN(this.parent.parseFloat(args[i]))) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n        var val2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n        val = val === '' || val === this.parent.falseValue ? '0' : val === this.parent.trueValue ? '1' : val;\n        val2 = val2 === '' || val2 === this.parent.falseValue ? '0' : val2 === this.parent.trueValue ? '1' : val2;\n        if (val === '#NAME?' || val2 === '#NAME?') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        if (val.toUpperCase().match(/^[-]?[0-9.]+$/) && val2.toUpperCase().match(/^[-]?[0-9.]+$/)) {\n            var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n            var decimalCount = parseInt(val2, 10);\n            var divisor = Math.pow(10, -1 * decimalCount);\n            var decimalValue = '';\n            for (var decimalIdx = 1; decimalIdx <= decimalCount; decimalIdx++) {\n                decimalValue += '0';\n            }\n            var roundedNumber = Math.round(this.parent.parseFloat(val) / divisor) * divisor;\n            if (!isNaN(roundedNumber)) {\n                value = intl.formatNumber(roundedNumber, { format: '$#,##0.' + decimalValue + ';($#,##0.' + decimalValue + ');$0.' + decimalValue });\n            }\n            else {\n                value = this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (nestedFormula) {\n            value = this.parent.tic + value + this.parent.tic;\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the k-th smallest value.\n     */\n    BasicFormulas.prototype.ComputeSMALL = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length === 1 || args[0] === '') {\n            if ((args[0] === '') && (args[1] === '')) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else {\n                return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n            }\n        }\n        else if (args.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var cellCollection = [];\n        var valueCollection = [];\n        var numArr = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[0])) {\n            var originalValue = void 0;\n            if (this.parent.isCellReference(args[0])) {\n                cellCollection = this.parent.getCellCollection(args[0]);\n                for (var i = 0; i < cellCollection.length; i++) {\n                    originalValue = this.parent.getValueFromArg(cellCollection[i]);\n                    if (errCollection.indexOf(originalValue) > -1) {\n                        return originalValue;\n                    }\n                    valueCollection.push(originalValue);\n                }\n            }\n            else {\n                originalValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n                if (errCollection.indexOf(originalValue) > -1) {\n                    return originalValue;\n                }\n                valueCollection.push(originalValue);\n            }\n            for (var i = 0; i < valueCollection.length; i++) {\n                if (valueCollection[i] !== '' && !isNaN(this.parent.parseFloat(valueCollection[i]))) {\n                    numArr.push(this.parent.parseFloat(valueCollection[i]));\n                }\n            }\n            if (numArr.length === 0) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(valueCollection[0]) || args[0].indexOf(this.parent.tic) > -1) {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        numArr = numArr.sort(function (n1, n2) { return n1 - n2; });\n        var smallIndex;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[1])) {\n            if (this.parent.isCellReference(args[1])) {\n                smallIndex = this.parent.getValueFromArg(args[1]);\n                if (smallIndex === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n                }\n                else if (smallIndex.trim() === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                if (smallIndex.toUpperCase() === this.parent.trueValue) {\n                    smallIndex = '1';\n                }\n                else if (smallIndex.toUpperCase() === this.parent.falseValue) {\n                    smallIndex = '0';\n                }\n            }\n            else {\n                smallIndex = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n            }\n            if (errCollection.indexOf(smallIndex) > -1) {\n                return smallIndex;\n            }\n            else if (smallIndex.trim() === '') {\n                return args[1].length > 0 ? errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] : errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else if (isNaN(this.parent.parseFloat(smallIndex))) {\n                if (args[1].toUpperCase() === this.parent.trueValue) {\n                    smallIndex = '1';\n                }\n                else if (args[1].toUpperCase() === this.parent.falseValue) {\n                    smallIndex = '0';\n                }\n                else {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        var finalIndex = (Number(smallIndex) < 1 ? 0 : Math.floor(Number(smallIndex)));\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(numArr[finalIndex - 1]) && !isNaN(Number(finalIndex))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else {\n            value = numArr[finalIndex - 1];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} args - specify the args.\n     * @returns {string | boolean} - Compute the k-th largest value.\n     */\n    BasicFormulas.prototype.ComputeLARGE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length === 1 || args[0] === '') {\n            if ((args[0] === '') && (args[1] === '')) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else {\n                return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n            }\n        }\n        else if (args.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var cellCollection = [];\n        var valueCollection = [];\n        var numArr = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[0])) {\n            var originalValue = void 0;\n            if (this.parent.isCellReference(args[0])) {\n                cellCollection = this.parent.getCellCollection(args[0]);\n                for (var i = 0; i < cellCollection.length; i++) {\n                    originalValue = this.parent.getValueFromArg(cellCollection[i]);\n                    if (errCollection.indexOf(originalValue) > -1) {\n                        return originalValue;\n                    }\n                    valueCollection.push(originalValue);\n                }\n            }\n            else {\n                originalValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');\n                if (errCollection.indexOf(originalValue) > -1) {\n                    return originalValue;\n                }\n                valueCollection.push(originalValue);\n            }\n            for (var i = 0; i < valueCollection.length; i++) {\n                if (valueCollection[i] !== '' && !isNaN(this.parent.parseFloat(valueCollection[i]))) {\n                    numArr.push(this.parent.parseFloat(valueCollection[i]));\n                }\n            }\n            if (numArr.length === 0) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(valueCollection[0]) || args[0].indexOf(this.parent.tic) > -1) {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        numArr = numArr.sort(function (n1, n2) { return n2 - n1; });\n        var largeIndex;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[1])) {\n            if (this.parent.isCellReference(args[1])) {\n                largeIndex = this.parent.getValueFromArg(args[1]);\n                if (largeIndex === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n                }\n                else if (largeIndex.trim() === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                if (largeIndex.toUpperCase() === this.parent.trueValue) {\n                    largeIndex = '1';\n                }\n                else if (largeIndex.toUpperCase() === this.parent.falseValue) {\n                    largeIndex = '0';\n                }\n            }\n            else {\n                largeIndex = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');\n            }\n            if (errCollection.indexOf(largeIndex) > -1) {\n                return largeIndex;\n            }\n            else if (largeIndex.trim() === '') {\n                return args[1].length > 0 ? errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value] : errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            else if (isNaN(this.parent.parseFloat(largeIndex))) {\n                if (args[1].toUpperCase() === this.parent.trueValue) {\n                    largeIndex = '1';\n                }\n                else if (args[1].toUpperCase() === this.parent.falseValue) {\n                    largeIndex = '0';\n                }\n                else {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        var finalIndex = (Number(largeIndex) < 1 ? 0 : Math.ceil(Number(largeIndex)));\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(numArr[finalIndex - 1]) && !isNaN(Number(finalIndex))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else {\n            value = numArr[finalIndex - 1];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the Choose value.\n     */\n    BasicFormulas.prototype.ComputeCHOOSE = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args[0] === '' && args.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length < 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        var processArgs = function (actuaValue) {\n            actuaValue = _this.parent.getValueFromArg(actuaValue);\n            if (actuaValue.toUpperCase() === _this.parent.trueValue) {\n                actuaValue = '1';\n            }\n            else if (actuaValue.toUpperCase() === _this.parent.falseValue) {\n                actuaValue = '0';\n            }\n            return actuaValue;\n        };\n        var getIndexValue;\n        getIndexValue = processArgs(args[0]);\n        if (errCollection.indexOf(getIndexValue) > -1) {\n            return getIndexValue;\n        }\n        if (this.parent.isCellReference(args[0])) {\n            if (args[0].indexOf(':') > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            getIndexValue = this.parent.removeTics(getIndexValue);\n            if (getIndexValue.split('%').length === 2 && this.parent.isNumber(getIndexValue.split('%')[0])) {\n                getIndexValue = (Number(getIndexValue.split('%')[0]) * 0.01).toString();\n            }\n        }\n        getIndexValue = Math.floor(this.parent.parseFloat(getIndexValue));\n        if (getIndexValue < 1 || isNaN(getIndexValue) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[getIndexValue])) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        getIndexValue = args[getIndexValue];\n        if (getIndexValue === '') {\n            getIndexValue = '0';\n        }\n        if (this.parent.isCellReference(getIndexValue)) {\n            if (getIndexValue.indexOf(':') > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            return this.parent.getValueFromArg(getIndexValue);\n        }\n        else {\n            if (getIndexValue.indexOf(this.parent.tic) > -1 && (errCollection.indexOf(getIndexValue.split(this.parent.tic).join('')) > -1 ||\n                (this.parent.removeTics(getIndexValue).match(/^(\\d*\\.\\d+|\\d+)\\s*[-*/]\\s*(\\d*\\.\\d+|\\d+)$/)))) {\n                getIndexValue = this.parent.removeTics(getIndexValue);\n            }\n            getIndexValue = this.parent.removeTics(this.parent.getValueFromArg(getIndexValue));\n            if (getIndexValue.indexOf(this.parent.tic + this.parent.tic) > -1) {\n                return getIndexValue.replace(/\"\"/g, this.parent.tic);\n            }\n            if (getIndexValue.split('%').length === 2 && this.parent.isNumber(getIndexValue.split('%')[0])) {\n                getIndexValue = (Number(getIndexValue.split('%')[0]) * 0.01).toString();\n            }\n            return getIndexValue;\n        }\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the SUMIF value.\n     */\n    BasicFormulas.prototype.ComputeSUMIF = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argArr = range;\n        if (argArr[0].indexOf(':') < 0 && !this.parent.isCellReference(argArr[0]) ||\n            (argArr[2] && argArr[2].indexOf(':') < 0 && !this.parent.isCellReference(argArr[2]))) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.ImproperFormula];\n        }\n        if (argArr.length > 3 || argArr.length < 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var result = this.parent.computeSumIfAndAvgIf(range, false);\n        if (typeof result === 'string' && (this.parent.formulaErrorStrings.indexOf(result)\n            || this.parent.getErrorStrings().indexOf(result))) {\n            return result;\n        }\n        return result[0];\n    };\n    /**\n     * @hidden\n     * @param {string[]} absValue - specify the absValue.\n     * @returns {string | number} - Compute the AVERAGE value.\n     */\n    BasicFormulas.prototype.ComputeABS = function () {\n        var absValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            absValue[_i] = arguments[_i];\n        }\n        var argArr = absValue;\n        var cellvalue = '';\n        var absVal;\n        if (absValue.length === 0 || absValue.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (argArr[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argVal = argArr[0].split(this.parent.tic).join('').trim();\n        if (argVal === '' || (argArr[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (this.parent.isCellReference(argArr[0])) {\n            cellvalue = this.parent.getValueFromArg(argArr[0]);\n            if (this.parent.getErrorStrings().indexOf(cellvalue) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if (cellvalue === this.parent.trueValue) {\n                cellvalue = '1';\n            }\n            if (cellvalue === '' || cellvalue === this.parent.falseValue) {\n                cellvalue = '0';\n            }\n            absVal = this.parent.parseFloat(cellvalue);\n            if (isNaN(absVal) && !this.parent.isNumber(cellvalue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            cellvalue = this.parent.getValueFromArg(argArr[0]).split(this.parent.tic).join();\n            if (cellvalue === this.parent.trueValue) {\n                cellvalue = '1';\n            }\n            if (cellvalue === this.parent.falseValue) {\n                cellvalue = '0';\n            }\n            if (this.parent.getErrorStrings().indexOf(cellvalue) > -1) {\n                return cellvalue;\n            }\n            absVal = this.parent.parseFloat(cellvalue);\n            if (isNaN(absVal) && !this.parent.isNumber(cellvalue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        return Math.abs(absVal);\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string} - Compute the AVERAGE value.\n     */\n    BasicFormulas.prototype.ComputeAVERAGE = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var isSubtotalFormula = false;\n        var isAggregateComputation;\n        if (args.length) {\n            var lastArgument = args[args.length - 1];\n            if (lastArgument === 'isSubtotal') {\n                isSubtotalFormula = true;\n                args.pop();\n            }\n            else if (lastArgument === 'isAggregate') {\n                isAggregateComputation = true;\n                args.pop();\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argArr = args;\n        for (var i = 0; i < argArr.length; i++) {\n            if (argArr[i].indexOf(':') > -1) {\n                if (argArr[i].indexOf(this.parent.tic) > -1) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n        }\n        return this.parent.calculateAvg(argArr, isSubtotalFormula, isAggregateComputation);\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the AVERAGEIF value.\n     */\n    BasicFormulas.prototype.ComputeAVERAGEIF = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argList = range;\n        if (argList[0].indexOf(':') < 0 && !this.parent.isCellReference(argList[0])) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.ImproperFormula];\n        }\n        var resultVal = this.parent.computeSumIfAndAvgIf(range, true);\n        if (resultVal[1] === 0 || resultVal[0].toString() === 'NaN') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.Div];\n        }\n        if (typeof resultVal === 'string' && (this.parent.formulaErrorStrings.indexOf(resultVal)\n            || this.parent.getErrorStrings().indexOf(resultVal))) {\n            return resultVal;\n        }\n        return this.parent.parseFloat(resultVal[0]) / this.parent.parseFloat(resultVal[1]);\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string} - Compute the CONCATENATE value.\n     */\n    BasicFormulas.prototype.ComputeCONCATENATE = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(range) || (range.length === 1 && range[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        var argsList = range;\n        var result = '';\n        var tempStr = '';\n        for (var i = 0; i < argsList.length; i++) {\n            var val = argsList[i];\n            if (this.parent.isCellReference(val)) {\n                if (val.indexOf(':') > -1) {\n                    if (this.isConcat) {\n                        var cells = this.parent.getCellCollection(val);\n                        for (var i_2 = 0; i_2 < cells.length; i_2++) {\n                            var tempString = this.parent.getValueFromArg(cells[i_2]);\n                            result = result + tempString;\n                        }\n                    }\n                    else {\n                        return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                }\n                else {\n                    if (argsList.length === 1 && argsList[0].indexOf(this.parent.tic) < 0 &&\n                        !(0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isValidCellReference)(argsList[0])) {\n                        return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                    }\n                    else {\n                        tempStr = this.parent.getValueFromArg(val);\n                    }\n                }\n                if (errCollection.indexOf(tempStr) > -1) {\n                    return tempStr;\n                }\n            }\n            else {\n                if (val.startsWith(this.parent.tic) && val.endsWith(this.parent.tic) && val.indexOf('\"\"') > -1) {\n                    tempStr = val.substring(1, val.length - 1);\n                    tempStr = tempStr.replace(/\"\"/g, '\"');\n                }\n                else {\n                    tempStr = val.split(this.parent.tic).join('');\n                    if (!(!(this.parent.isNumber(tempStr)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.parent.isDate(tempStr))) || val.startsWith(' n')) {\n                        tempStr = this.parent.getValueFromArg(val).split(this.parent.tic).join('');\n                    }\n                }\n                if (errCollection.indexOf(tempStr) > -1) {\n                    return tempStr;\n                }\n            }\n            result += tempStr;\n        }\n        this.isConcat = false;\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string} - Compute the CONCAT value.\n     */\n    BasicFormulas.prototype.ComputeCONCAT = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        this.isConcat = true;\n        return this.ComputeCONCATENATE.apply(this, range);\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string | number} - Compute the MAX value.\n     */\n    BasicFormulas.prototype.ComputeMAX = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.parent.computeMinMax(args, 'max');\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute the MIN value.\n     */\n    BasicFormulas.prototype.ComputeMIN = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.parent.computeMinMax(args, 'min');\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute the RAND value.\n     */\n    BasicFormulas.prototype.ComputeRAND = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length === 1 && args[0] === '') {\n            args.length = 0;\n        }\n        if (args.length > 0) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        return Math.random().toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute the AND value.\n     */\n    BasicFormulas.prototype.ComputeAND = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argArr = args;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        return this.parent.computeAndOrNot(argArr, 'and');\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute the OR value.\n     */\n    BasicFormulas.prototype.ComputeOR = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argArr = args;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        return this.parent.computeAndOrNot(argArr, 'or');\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {string} - Compute the NOT value.\n     */\n    BasicFormulas.prototype.ComputeNOT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argArr = args;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length > 1 || args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        return this.parent.computeAndOrNot(argArr, 'not');\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string | number} - Compute the find value.\n     */\n    BasicFormulas.prototype.ComputeFIND = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args.length === 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length > 3) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var processArgs = function (actuaValue) {\n            var value = _this.parent.getValueFromArg(actuaValue);\n            if (errCollection.indexOf(value) > -1) {\n                return value;\n            }\n            if (!_this.parent.isCellReference(actuaValue)) {\n                if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {\n                    value = (Number(value.split('%')[0]) * 0.01).toString();\n                }\n                else if (actuaValue.indexOf(_this.parent.tic) > -1) {\n                    if (_this.parent.removeTics(actuaValue).match(/^(\\d*\\.\\d+|\\d+)\\s*[-*/]\\s*(\\d*\\.\\d+|\\d+)$/)) {\n                        value = _this.parent.getValueFromArg(_this.parent.removeTics(actuaValue));\n                    }\n                    else if (value.indexOf(_this.parent.tic + _this.parent.tic) > -1) {\n                        value = value.replace(/\"\"/g, _this.parent.tic);\n                    }\n                }\n            }\n            return value;\n        };\n        var findText;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[0])) {\n            findText = processArgs(args[0]);\n            if (errCollection.indexOf(findText) > -1) {\n                return findText;\n            }\n            else if (!this.parent.isCellReference(args[0])) {\n                findText = this.parent.removeTics(findText);\n            }\n        }\n        var withinText;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[1])) {\n            withinText = processArgs(args[1]);\n            if (errCollection.indexOf(withinText) > -1) {\n                return withinText;\n            }\n            else if (!this.parent.isCellReference(args[1])) {\n                withinText = this.parent.removeTics(withinText);\n            }\n        }\n        var startNum = 1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[2])) {\n            startNum = processArgs(args[2]);\n            if (errCollection.indexOf(startNum) > -1) {\n                return startNum;\n            }\n            else if (startNum.toUpperCase() === this.parent.trueValue) {\n                startNum = '1';\n            }\n            else if (startNum.toUpperCase() === this.parent.falseValue) {\n                startNum = '0';\n            }\n            if (!this.parent.isCellReference(args[2])) {\n                startNum = this.parent.removeTics(startNum);\n            }\n            startNum = this.parent.parseFloat(startNum);\n            if (isNaN(startNum) || startNum <= 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        startNum = withinText.indexOf(findText, startNum - 1);\n        if (startNum < 0) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return (Number(startNum) + Number(1)).toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} argArr - specify the range.\n     * @returns {string | number} - Compute the index.\n     */\n    BasicFormulas.prototype.ComputeINDEX = function () {\n        var _this = this;\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        var nestedFormula;\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if (argArr.length && argArr[argArr.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            argArr.pop();\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length < 2 || argArr.length > 4) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argArr[0] === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (argArr[0].indexOf(':') === -1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Ref];\n        }\n        var row;\n        var col;\n        var processArgs = function (actualValue) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(actualValue) || actualValue === '') {\n                return 1;\n            }\n            var value = _this.parent.getValueFromArg(actualValue);\n            if (errCollection.indexOf(value) > -1) {\n                return value;\n            }\n            if (value.toUpperCase() === _this.parent.trueValue) {\n                value = '1';\n            }\n            else if (value.toUpperCase() === _this.parent.falseValue) {\n                value = '0';\n            }\n            if (value.indexOf(_this.parent.tic) > -1) {\n                value = _this.parent.removeTics(value);\n                if (actualValue.indexOf(_this.parent.tic) === -1 || value.trim() === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {\n                value = (Number(value.split('%')[0]) / 100).toString();\n            }\n            value = parseInt(Number(value).toString(), 10);\n            if (isNaN(value) || value < 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else if (value === 0) {\n                value = 1;\n            }\n            return value;\n        };\n        value = argArr[0];\n        row = processArgs(argArr[1]);\n        if (errCollection.indexOf(row.toString()) > -1) {\n            return row.toString();\n        }\n        col = processArgs(argArr[2]);\n        if (errCollection.indexOf(col.toString()) > -1) {\n            return col.toString();\n        }\n        var i = value.indexOf(':');\n        var startRow = this.parent.rowIndex(value.substring(0, i));\n        var endRow = this.parent.rowIndex(value.substring(i + 1));\n        var startCol = this.parent.colIndex(value.substring(0, i));\n        var endCol = this.parent.colIndex(value.substring(i + 1));\n        if (row > endRow - startRow + 1 || col > endCol - startCol + 1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Ref];\n        }\n        row = startRow + row - 1;\n        col = startCol + col - 1;\n        value = this.parent.getValueFromArg(this.getSheetReference(value) + this.parent.convertAlpha(col) + row);\n        if (value === '') {\n            return 0;\n        }\n        if (nestedFormula && errCollection.indexOf(value) === -1 &&\n            !this.parent.isNumber(value) && value !== this.parent.trueValue && value !== this.parent.falseValue) {\n            return this.parent.tic + value + this.parent.tic;\n        }\n        return value;\n    };\n    BasicFormulas.prototype.getSheetReference = function (range) {\n        return range.indexOf(this.parent.sheetToken) === 0 && range.lastIndexOf(this.parent.sheetToken) > range.indexOf(this.parent.sheetToken) ? range.substring(0, range.lastIndexOf(this.parent.sheetToken) + 1) : '';\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the if.\n     */\n    BasicFormulas.prototype.ComputeIFS = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argArr = range;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(range) || (argArr.length === 1 && argArr[0] === '') || argArr.length % 2 !== 0) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var condition = '';\n        var result = '';\n        for (var i = 0; i < argArr.length; i++) {\n            condition = this.parent.getValueFromArg(argArr[i]);\n            if (argArr[i] === '') {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n            }\n            if (this.parent.getErrorStrings().indexOf(condition) > -1) {\n                return condition;\n            }\n            if (condition !== this.parent.trueValue && condition !== this.parent.falseValue) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if (condition === this.parent.trueValue) {\n                if (this.parent.isCellReference(argArr[i + 1].split(this.parent.tic).join('')) || argArr[i + 1].includes(this.parent.arithMarker)) {\n                    result = this.parent.getValueFromArg(argArr[i + 1]);\n                    result = result === '' ? '0' : result;\n                }\n                else {\n                    result = argArr[i + 1] === '' ? '0' : this.parent.getValueFromArg(argArr[i + 1]);\n                    if (result.indexOf(this.parent.tic) > -1) {\n                        result = result.split(this.parent.tic).join('');\n                    }\n                }\n                i = i + 1;\n                return result;\n            }\n            else if (condition === this.parent.falseValue) {\n                i = i + 1;\n            }\n        }\n        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the count.\n     */\n    BasicFormulas.prototype.ComputeCOUNTA = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var isSubtotalFormula = false;\n        var isAggregateComputation;\n        var sheet;\n        if (args.length) {\n            var lastArgument = args[args.length - 1];\n            if (lastArgument === 'isSubtotal') {\n                isSubtotalFormula = true;\n                args.pop();\n            }\n            else if (lastArgument === 'isAggregate') {\n                sheet = this.parent.parentObject.getActiveSheet();\n                isAggregateComputation = true;\n                args.pop();\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var argArr = args;\n        var cellColl;\n        var result = 0;\n        var cellValue;\n        var value;\n        var indexes;\n        for (var i = 0; i < argArr.length; i++) {\n            if (this.parent.isCellReference(argArr[i])) {\n                if (argArr[i].indexOf(':') > -1) {\n                    cellColl = this.parent.getCellCollection(argArr[i].split(this.parent.tic).join(''));\n                    for (var j = 0; j < cellColl.length; j++) {\n                        if (isAggregateComputation) {\n                            indexes = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(cellColl[j]);\n                            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isHiddenRow)(sheet, indexes[0]) || (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isHiddenCol)(sheet, indexes[1])) {\n                                continue;\n                            }\n                        }\n                        cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(cellColl[j]) :\n                            this.parent.getValueFromArg(cellColl[j], null, null, true);\n                        if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {\n                            continue;\n                        }\n                        if (cellValue.length > 0) {\n                            result++;\n                        }\n                    }\n                }\n                else {\n                    cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i]) :\n                        this.parent.getValueFromArg(argArr[i], null, null, true);\n                    if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {\n                        continue;\n                    }\n                    if (cellValue.length > 0) {\n                        result++;\n                    }\n                }\n            }\n            else {\n                value = this.parent.getValueFromArg(argArr[i]).split(this.parent.tic).join('');\n                if (value.length > 0) {\n                    result++;\n                }\n                else if (value.length === 0 && value.trim() === '') {\n                    result++;\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the average.\n     */\n    BasicFormulas.prototype.ComputeAVERAGEA = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || (args.length === 1 && args[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var argArrs = args;\n        var cellCol;\n        var result = 0;\n        var cellValue;\n        var value;\n        var length = 0;\n        var parseValue;\n        for (var k = 0; k < argArrs.length; k++) {\n            if (this.parent.isCellReference(argArrs[k])) {\n                if (argArrs[k].indexOf(':') > -1) {\n                    cellCol = this.parent.getCellCollection(argArrs[k].split(this.parent.tic).join(''));\n                    for (var j = 0; j < cellCol.length; j++) {\n                        cellValue = this.parent.getValueFromArg(cellCol[j]);\n                        cellValue = this.processLogicalCellValue(cellValue);\n                        if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {\n                            return cellValue;\n                        }\n                        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(cellValue) || cellValue === '') {\n                            continue;\n                        }\n                        parseValue = this.parent.parseFloat(cellValue);\n                        cellValue = !isNaN(parseValue) ? parseValue : 0;\n                        result += cellValue;\n                        length = length + 1;\n                    }\n                }\n                else {\n                    cellValue = this.parent.getValueFromArg(argArrs[k]);\n                    cellValue = this.processLogicalCellValue(cellValue);\n                    if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {\n                        return cellValue;\n                    }\n                    else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(cellValue) || cellValue === '') {\n                        continue;\n                    }\n                    parseValue = this.parent.parseFloat(cellValue);\n                    cellValue = !isNaN(parseValue) ? parseValue : 0;\n                    result += cellValue;\n                    length = length + 1;\n                }\n            }\n            else {\n                if (argArrs[k].indexOf(this.parent.tic) > -1) {\n                    if (isNaN(this.parent.parseFloat(argArrs[k].split(this.parent.tic).join(''))) ||\n                        argArrs[k].split(this.parent.tic).join('').trim() === '') {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                }\n                argArrs[k] = this.processLogicalCellValue(argArrs[k]);\n                value = this.parent.getValueFromArg(argArrs[k].split(this.parent.tic).join(''));\n                if (this.parent.getErrorStrings().indexOf(value) > -1) {\n                    return value;\n                }\n                result += this.parent.parseFloat(value);\n                length = length + 1;\n            }\n        }\n        if (length === 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        return result / length;\n    };\n    BasicFormulas.prototype.processLogicalCellValue = function (cellValue) {\n        var value = cellValue;\n        if (value.toUpperCase() === this.parent.trueValue) {\n            value = '1';\n        }\n        else if (value.toUpperCase() === this.parent.falseValue) {\n            value = '0';\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the count if.\n     */\n    BasicFormulas.prototype.ComputeSORT = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var nestedFormula;\n        var isStringVal;\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        var argArr = args;\n        var result;\n        var values = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '' || argArr.length > 4) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        argArr[1] = argArr[1] ? argArr[1] : '1';\n        argArr[2] = argArr[2] ? argArr[2] : '1'; // 1 = Ascending, -1 = Descending. Default is ascending order.\n        argArr[3] = argArr[3] ? argArr[3] : 'FALSE'; // Default is FALSE = sort by column or row\n        argArr[0] = argArr[0].split('$').join('');\n        var cellCollection;\n        var valueCollection = [];\n        if (argArr[0].indexOf(':') > -1) {\n            var rangeSplit = argArr[0].split(':');\n            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {\n                var j = argArr[0].indexOf(':');\n                var swap = void 0;\n                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));\n                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));\n                var eRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));\n                var eColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));\n                if (rowIdx > eRowIdx) {\n                    swap = eRowIdx;\n                    eRowIdx = rowIdx;\n                    rowIdx = swap;\n                }\n                if (colIdx > eColIdx) {\n                    swap = eColIdx;\n                    eColIdx = colIdx;\n                    colIdx = swap;\n                }\n                if (this.parent.isCellReference(argArr[3])) {\n                    argArr[3] = this.parent.getValueFromArg(argArr[3]).toUpperCase();\n                    if (argArr[3] !== this.parent.trueValue && argArr[3] !== this.parent.falseValue) {\n                        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(argArr[3])) {\n                            argArr[3] = Number(argArr[3]) === 0 ? this.parent.falseValue : this.parent.trueValue;\n                        }\n                        else if (argArr[3] === '') {\n                            argArr[3] = this.parent.falseValue;\n                        }\n                        else {\n                            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                }\n                else {\n                    isStringVal = argArr[3].startsWith(this.parent.tic) && argArr[3].endsWith(this.parent.tic);\n                    argArr[3] = this.parent.getValueFromArg(argArr[3]);\n                    argArr[3] = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(argArr[3]) ? (Number(argArr[3]) === 0 ? this.parent.falseValue : this.parent.trueValue) :\n                        argArr[3].split(this.parent.tic).join('').toUpperCase();\n                    if (argArr[3] !== this.parent.trueValue && argArr[3] !== this.parent.falseValue) {\n                        return this.parent.getErrorStrings()[isStringVal ? _common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value : _common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n                    }\n                }\n                if (this.parent.isCellReference(argArr[2])) {\n                    argArr[2] = this.parent.getValueFromArg(argArr[2]);\n                    argArr[2] = argArr[2] === this.parent.trueValue ? '1' : argArr[2];\n                }\n                else {\n                    argArr[2] = this.parent.getValueFromArg(argArr[2]);\n                    argArr[2] = argArr[2] === this.parent.trueValue ? '1' : argArr[2].split(this.parent.tic).join('');\n                }\n                argArr[2] = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(argArr[2]) ? Math.floor(Number(argArr[2])).toString() : argArr[2];\n                if (argArr[2] !== '1' && argArr[2] !== '-1') {\n                    return this.parent.getErrorStrings().indexOf(argArr[2]) > -1 ? this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name] :\n                        this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                var order = argArr[2] === '1' ? 'Ascending' : 'Descending';\n                if (this.parent.isCellReference(argArr[1])) {\n                    argArr[1] = this.parent.getValueFromArg(argArr[1]);\n                    argArr[1] = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(argArr[1]) ? Math.floor(Number(argArr[1])).toString() : (argArr[1] === this.parent.trueValue ? '1'\n                        : (argArr[1] === this.parent.falseValue ? '0' : argArr[1]));\n                    if (!isNaN(this.parseDouble(argArr[1])) ? (this.parseDouble(argArr[1]) < 1 || (argArr[3] === this.parent.trueValue ?\n                        (eRowIdx - rowIdx) + 1 < this.parseDouble(argArr[1]) : (eColIdx - colIdx) + 1 < this.parseDouble(argArr[1])))\n                        : true) {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                }\n                else {\n                    isStringVal = argArr[1].startsWith(this.parent.tic) && argArr[1].endsWith(this.parent.tic);\n                    argArr[1] = this.parent.getValueFromArg(argArr[1]);\n                    argArr[1] = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(argArr[1]) ? Math.floor(Number(argArr[1])).toString() : (argArr[1] === this.parent.trueValue ?\n                        '1' : (argArr[1] === this.parent.falseValue ? '0' : argArr[1].split(this.parent.tic).join('')));\n                    if (!isNaN(this.parseDouble(argArr[1])) ? (this.parseDouble(argArr[1]) < 1 || (argArr[3] === this.parent.trueValue ?\n                        (eRowIdx - rowIdx) + 1 < this.parseDouble(argArr[1]) : (eColIdx - colIdx) + 1 < this.parseDouble(argArr[1])))\n                        : isStringVal) {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                }\n                var sheetIdx = '';\n                if (argArr[0].indexOf('!') === 0) {\n                    sheetIdx = argArr[0];\n                    sheetIdx = sheetIdx.replace('!', '');\n                    sheetIdx = sheetIdx.indexOf('!');\n                    sheetIdx = argArr[0].substring(0, sheetIdx + 2);\n                }\n                argArr[0] = sheetIdx + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(colIdx) + rowIdx + ':' + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(eColIdx) + eRowIdx;\n                cellCollection = this.parent.getCellCollection(argArr[0]);\n                for (var i = 0; i < cellCollection.length; i++) {\n                    valueCollection.push(this.parent.getValueFromArg(cellCollection[i]));\n                }\n                var colSort_1 = [];\n                var numColl_1 = [];\n                var strColl_1 = [];\n                var booleanColl_1 = [];\n                var emptyCellColl_1 = [];\n                var totalColumn = eColIdx - colIdx + 1;\n                var sortRangeValuesHandler = function (value) {\n                    if (value) {\n                        if (value.toUpperCase() === 'TRUE' || value.toUpperCase() === 'FALSE') {\n                            booleanColl_1.push(value);\n                            colSort_1.push(value);\n                        }\n                        else if (isNaN(_this.parseDouble(value))) {\n                            strColl_1.push(value);\n                            colSort_1.push(value);\n                        }\n                        else {\n                            numColl_1.push(_this.parseDouble(value));\n                            colSort_1.push(_this.parseDouble(value));\n                        }\n                    }\n                    else if (value === '') {\n                        emptyCellColl_1.push(_this.parseDouble(value).toString());\n                        colSort_1.push(_this.parseDouble(value).toString());\n                    }\n                };\n                if (argArr[3] === 'TRUE') {\n                    for (var i = 0; i < totalColumn; i++) {\n                        sortRangeValuesHandler(valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)]);\n                    }\n                }\n                if (argArr[3] === 'FALSE') {\n                    for (var i = 0; i < valueCollection.length; i++) {\n                        sortRangeValuesHandler(valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1]);\n                    }\n                }\n                var sortedNumColl = numColl_1.length > 0 ? _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.sort(numColl_1, null, _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.fnSort(order)) : [];\n                var sortedStrColl = strColl_1.length > 0 ? _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.sort(strColl_1, null, _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.fnSort(order)) : [];\n                var sortedBooleanColl = booleanColl_1.length > 0 ? _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.sort(booleanColl_1, null, _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_3__.DataUtil.fnSort(order)) : [];\n                var sortedVal = order === 'Ascending' ? sortedNumColl.concat(sortedStrColl, sortedBooleanColl, emptyCellColl_1) : sortedBooleanColl.concat(sortedStrColl, sortedNumColl, emptyCellColl_1);\n                var id = [];\n                for (var a = 0; a < sortedVal.length; a++) {\n                    for (var b = 0; b < colSort_1.length; b++) {\n                        if (JSON.stringify(sortedVal[a]) === JSON.stringify(colSort_1[b])) {\n                            if (id.indexOf(b) === -1) {\n                                id.push(b);\n                            }\n                        }\n                    }\n                }\n                if (argArr[3] === 'TRUE') {\n                    for (var startRow = rowIdx, rowInc = 0; startRow <= eRowIdx; startRow++, rowInc++) {\n                        for (var a = 0, colInc = 0; a < id.length; a++, colInc++) {\n                            var cellValue = this.parent.getValueFromArg(sheetIdx + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(id[a] + colIdx) + startRow);\n                            if (nestedFormula && cellValue !== '') {\n                                values.push(cellValue);\n                                continue;\n                            }\n                            cellValue = cellValue === '' ? '0' : cellValue;\n                            var activeCell = this.parent.actCell;\n                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.substring(activeCell.lastIndexOf('!') + 1) :\n                                activeCell;\n                            var actRowIdx = this.parent.rowIndex(activeCell);\n                            var actColIdx = this.parent.colIndex(activeCell);\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, cellValue, actRowIdx + rowInc, actColIdx + colInc);\n                        }\n                    }\n                    result = this.parent.getValueFromArg(sheetIdx + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(id[0] + colIdx) + rowIdx);\n                }\n                if (argArr[3] === 'FALSE') {\n                    for (var a = 0, rowInc = 0; a < id.length; a++, rowInc++) {\n                        for (var startCol = colIdx, colInc = 0; startCol <= eColIdx; startCol++, colInc++) {\n                            var value = this.parent.getValueFromArg(sheetIdx + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(startCol) + (id[a] + rowIdx));\n                            if (nestedFormula && value !== '') {\n                                values.push(value);\n                                continue;\n                            }\n                            value = value === '' ? '0' : value;\n                            var activeCell = this.parent.actCell;\n                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.substring(activeCell.lastIndexOf('!') + 1) :\n                                activeCell;\n                            var actColIdx = this.parent.colIndex(activeCell);\n                            var actRowIdx = this.parent.rowIndex(activeCell);\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, value, actRowIdx + rowInc, actColIdx + colInc);\n                        }\n                    }\n                    result = this.parent.getValueFromArg(sheetIdx + (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getAlphalabel)(colIdx) + (id[0] + rowIdx));\n                }\n            }\n        }\n        if (nestedFormula) {\n            return values.join(',');\n        }\n        return result === '' ? '0' : result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the count if.\n     */\n    BasicFormulas.prototype.ComputeCOUNTIF = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argArr = args;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args) || args[0] === '' || argArr.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (argArr[0].indexOf(':') < 0 && !this.parent.isCellReference(argArr[0])) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n        }\n        var cellColl;\n        var result = 0;\n        var cellValue;\n        var stack = [];\n        var op = 'equal';\n        if (argArr[1] === '') {\n            return 0;\n        }\n        var isStringVal = argArr[1].startsWith(this.parent.tic) && argArr[1].endsWith(this.parent.tic);\n        var condition = argArr[1].split(this.parent.tic).join('');\n        var isAsterisk = condition.includes('*');\n        var isAsteriskOnly = condition === '*' || condition === '<>*';\n        var criteriaValue = isAsterisk && !isAsteriskOnly ? condition.replace(/\\*/g, '').trim() : condition;\n        var isCellReferenceValue = false;\n        if (!isStringVal && this.parent.isCellReference(criteriaValue)) {\n            criteriaValue = this.parent.getValueFromArg(criteriaValue);\n            isCellReferenceValue = true;\n        }\n        if (isAsterisk && !isAsteriskOnly) {\n            var asteriskIndex = condition.indexOf('*');\n            if (condition[0] === '*') {\n                criteriaValue = '*' + criteriaValue;\n            }\n            if (condition[condition.length - 1] === '*') {\n                criteriaValue += '*';\n            }\n            if (asteriskIndex > 0 && asteriskIndex < condition.length - 1) {\n                criteriaValue = condition.substring(0, asteriskIndex) + '*' + condition.substring(asteriskIndex + 1);\n            }\n        }\n        condition = criteriaValue;\n        if (condition.startsWith('<=')) {\n            op = 'lessEq';\n            condition = condition.substring(2);\n        }\n        else if (condition.startsWith('>=')) {\n            op = 'greaterEq';\n            condition = condition.substring(2);\n        }\n        else if (condition.startsWith('<>')) {\n            op = 'notEq';\n            condition = condition.substring(2);\n        }\n        else if (condition.startsWith('<')) {\n            op = 'less';\n            condition = condition.substring(1);\n        }\n        else if (condition.startsWith('>')) {\n            op = 'greater';\n            condition = condition.substring(1);\n        }\n        else if (condition.startsWith('=')) {\n            op = 'equal';\n            condition = condition.substring(1);\n        }\n        var isWildCardCondition = condition.indexOf('*') > -1 || condition.indexOf('?') > -1;\n        if ((!isStringVal && this.parent.isCellReference(condition) && !isCellReferenceValue) || condition.includes(this.parent.arithMarker)\n            || (condition.includes(this.parent.getParseDecimalSeparator()) && !isWildCardCondition)) {\n            condition = this.parent.getValueFromArg(condition);\n        }\n        if (argArr[0].indexOf(':') > -1 && this.parent.isCellReference(argArr[0])) {\n            cellColl = this.parent.getCellCollection(argArr[0].split(this.parent.tic).join(''));\n            for (var j = 0; j < cellColl.length; j++) {\n                cellValue = this.parent.getValueFromArg(cellColl[j]);\n                if (isWildCardCondition) {\n                    cellValue = this.parent.findWildCardValue(condition.toLowerCase(), cellValue.toLowerCase());\n                }\n                stack.push(cellValue);\n                stack.push(condition);\n                if (this.parent.processLogical(stack, op) === this.parent.trueValue) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the sum if.\n     */\n    BasicFormulas.prototype.ComputeSUMIFS = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var sum = this.calculateIFS(range);\n        return sum;\n    };\n    BasicFormulas.prototype.calculateIFS = function (ranges, isAvgIfs) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(ranges) || ranges[0] === '' || ranges.length < 2 || ranges.length > 127) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (ranges.length === 3) { // SUMIFS and AVERAGEIFS OR operation will contains only 3 arguments.\n            if (ranges[2].includes(this.parent.tic + this.parent.tic)) {\n                var result_1 = '';\n                var sumVal_1;\n                var separator_1 = this.parent.getParseArgumentSeparator();\n                var criterias = ranges[2].split(this.parent.tic + this.parent.tic);\n                criterias.forEach(function (criteria) {\n                    criteria = criteria.trim().split(_this.parent.tic).join('');\n                    if (criteria) {\n                        sumVal_1 = _this.parent.computeIfsFormulas([ranges[0], ranges[1], criteria], _this.parent.falseValue, isAvgIfs).toString();\n                        result_1 += (result_1 ? separator_1 : '') + sumVal_1;\n                    }\n                });\n                return result_1;\n            }\n        }\n        return this.parent.computeIfsFormulas(ranges, this.parent.falseValue, isAvgIfs);\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string | number} - Compute the Text.\n     */\n    BasicFormulas.prototype.ComputeTEXT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var nestedFormula;\n        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {\n            nestedFormula = true;\n            args.pop();\n        }\n        var argsLength = args.length;\n        var firstArg = args[0];\n        var secondArg = args[1];\n        if (argsLength !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var s1 = firstArg;\n        var s2 = secondArg;\n        if (secondArg === '') {\n            return this.parent.getValueFromArg(s1);\n        }\n        var dTime = new Date(1900, 0, 1, 0, 0, 0);\n        var checkString = s1 + ',' + s2;\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Internationalization();\n        if (this.parent.getErrorStrings().indexOf(checkString) > -1) {\n            return checkString;\n        }\n        s1 = this.parent.getValueFromArg(s1);\n        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(s1.split(this.parent.tic).join(''))) {\n            s1 = s1.split(this.parent.tic).join('');\n        }\n        if (secondArg.startsWith('\"') && secondArg.endsWith('\"')) {\n            s2 = s2.split(this.parent.tic).join('');\n        }\n        else {\n            s2 = this.parent.getValueFromArg(s2);\n        }\n        if (s2 === '') {\n            return '';\n        }\n        if (s1 === '' && (s2.length > 0 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1\n            || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)\n            || s2.toUpperCase().indexOf('H') > -1)) {\n            s1 = dTime.toString();\n        }\n        var d = this.parseDouble(s1);\n        if (isNaN(d) && this.parent.isDate(new Date(s1)) !== null) {\n            d = this.parent.toOADate(new Date(s1));\n        }\n        dTime = Date.parse(s1.split(this.parent.tic).join(''));\n        if (!isNaN(d) || !isNaN(dTime)) {\n            if (s2.length > 0 && s2.indexOf('#') === -1 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1\n                || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)\n                || s2.toUpperCase().indexOf('H') > -1) {\n                s2 = s2.split('Y').join('y').split('D').join('d').split('H').join('h');\n                s2 = s2.split('S').join('s').split('m').join('M').split('AM/PM').join('tt');\n                var formatChar = s2.split('');\n                var isH = false;\n                var isMFound = false;\n                var i = 0;\n                // let mcount: number = 0;\n                var lastCharIndex = 0;\n                var totalCharforM = 0;\n                for (i = 0; i < formatChar.length;) {\n                    var c = formatChar[i];\n                    if (c === 's' && formatChar[lastCharIndex] === 'M') {\n                        formatChar[lastCharIndex] = 'm';\n                        if (formatChar[lastCharIndex - 1] === 'M') {\n                            formatChar[lastCharIndex - 1] = 'm';\n                        }\n                    }\n                    if (this.parent.isChar(c)) {\n                        lastCharIndex = i;\n                        if (c === 'M') {\n                            // mcount++;\n                            totalCharforM++;\n                        }\n                    }\n                    else if (totalCharforM > 1) {\n                        totalCharforM++;\n                    }\n                    if (c === 'M' && isH) {\n                        formatChar[i] = 'm';\n                        isMFound = true;\n                    }\n                    if (c === 'h') {\n                        isH = true;\n                    }\n                    else if (this.parent.isChar(c) && c !== 'M' && c !== 'h' && !isMFound) {\n                        isH = false;\n                        isMFound = false;\n                    }\n                    i++;\n                }\n                s2 = String(formatChar);\n                s2 = s2.split(',').join('').split('\\n').join(' ');\n                var dt = this.parent.fromOADate(d);\n                if (d === 0) {\n                    dt = dTime;\n                }\n                var getSkeleton = (0,_common_index__WEBPACK_IMPORTED_MODULE_0__.getSkeletonVal)(s2);\n                if (getSkeleton === '') {\n                    var date = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.dateToInt)(dt);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var dateString = this.parent.parentObject.getDisplayText({ format: s2, value: date });\n                    return dateString;\n                }\n                var dFormatter = intl.getDateFormat({ skeleton: getSkeleton, type: 'date' });\n                var formattedString = dFormatter(new Date(dt.toString()));\n                s1 = formattedString;\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                s1 = this.parent.parentObject.getDisplayText({ format: s2, value: d });\n            }\n        }\n        return nestedFormula ? this.parent.tic + s1 + this.parent.tic : s1;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the count if.\n     */\n    BasicFormulas.prototype.ComputeCOUNTIFS = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var sum = this.parent.computeIfsFormulas(args, this.parent.trueValue);\n        return sum;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {number | string} - Compute the Average if.\n     */\n    BasicFormulas.prototype.ComputeAVERAGEIFS = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var sum = this.calculateIFS(args, this.parent.trueValue);\n        return sum;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string | number} - Compute the Match.\n     */\n    BasicFormulas.prototype.ComputeMATCH = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var argArr = args.slice();\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length < 2 || argArr.length > 3) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        // args[0] codes\n        argArr[0] = this.parent.getValueFromArg(args[0]);\n        var isStringValue = argArr[0].indexOf(this.parent.tic) > -1;\n        argArr[0] = argArr[0].split(this.parent.tic).join('');\n        if (errCollection.indexOf(argArr[0]) > -1) {\n            return argArr[0];\n        }\n        if (argArr[0] === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        if (isNaN(Number(argArr[0]))) {\n            isStringValue = true;\n        }\n        // args[2] codes\n        var matchType;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(args[2])) {\n            argArr[2] = '1';\n        }\n        else {\n            argArr[2] = this.parent.getValueFromArg(argArr[2]);\n            if ((argArr[2].indexOf(this.parent.tic) > -1) && isNaN(Number(argArr[2].split(this.parent.tic).join('')))) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            if (argArr[2].toUpperCase() === this.parent.trueValue) {\n                argArr[2] = '1';\n            }\n            else if (argArr[2].toUpperCase() === this.parent.falseValue) {\n                argArr[2] = '0';\n            }\n        }\n        matchType = parseFloat(argArr[2]);\n        if ([-1, 0, 1].indexOf(matchType) === -1) {\n            matchType = 0;\n        }\n        // args[1] codes\n        var valueCollection = [];\n        var cellCollection;\n        var isStringCollection = false;\n        if (argArr[1].indexOf(':') > -1 || this.parent.isCellReference(argArr[1])) {\n            cellCollection = this.parent.getCellCollection(argArr[1]);\n            for (var j = 0; j < cellCollection.length; j++) {\n                var cellValue = this.parent.getValueFromArg(cellCollection[j]);\n                if (cellValue.indexOf(this.parent.tic) > -1 || isNaN(Number(cellValue))) {\n                    isStringCollection = true;\n                }\n                valueCollection[j] = cellValue.split(this.parent.tic).join('');\n            }\n            if ((isStringValue && !isStringCollection) || (!isStringValue && isStringCollection)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n            }\n        }\n        var index = 0;\n        var indexVal = '';\n        var isIndexFound = false;\n        var matchValue = !isNaN(Number(argArr[0])) ? Number(argArr[0]) : argArr[0];\n        for (var i = 0; i < valueCollection.length; i++) {\n            if (valueCollection[i] === '') {\n                if (i === (valueCollection.length - 1)) {\n                    valueCollection.pop();\n                }\n                continue;\n            }\n            else if (matchType === -1 && (isStringValue || isStringCollection)) {\n                break;\n            }\n            var matchCollectionValue = !isNaN(Number(valueCollection[i])) ?\n                Number(valueCollection[i]) : valueCollection[i];\n            if (matchType === 1) {\n                if (matchValue === matchCollectionValue) {\n                    index = i + 1;\n                    isIndexFound = true;\n                    if (isNaN(Number(argArr[0]))) {\n                        isStringValue = false;\n                    }\n                }\n                else if ((matchValue > matchCollectionValue) && !isStringValue && !isIndexFound) {\n                    if (!indexVal || (matchCollectionValue > (!isNaN(Number(indexVal)) ? Number(indexVal) : indexVal))) {\n                        index = i + 1;\n                        indexVal = valueCollection[i];\n                    }\n                }\n            }\n            else if (matchType === 0) {\n                if (argArr[0].indexOf('*') > -1 || argArr[0].indexOf('?') > -1) {\n                    valueCollection[i] = this.parent.findWildCardValue(argArr[0], valueCollection[i]);\n                }\n                if (argArr[0] === valueCollection[i]) {\n                    return i + 1;\n                }\n            }\n            else if (matchType === -1) {\n                if ((Number(valueCollection[i]) > Number(valueCollection[i + 1]))\n                    || i === valueCollection.length - 1) {\n                    if (matchValue === matchCollectionValue) {\n                        index = i + 1;\n                        matchValue = undefined;\n                    }\n                    else if (matchValue < matchCollectionValue) {\n                        if (!indexVal || (matchCollectionValue < (!isNaN(Number(indexVal)) ? Number(indexVal) : indexVal))) {\n                            index = i + 1;\n                            indexVal = valueCollection[i];\n                        }\n                    }\n                }\n                else {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n                }\n            }\n        }\n        if (isStringValue && isStringCollection && matchType === 1) {\n            return valueCollection.length;\n        }\n        return index ? index : errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the lookup value.\n     */\n    BasicFormulas.prototype.ComputeLOOKUP = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argArr = range;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        return this.parent.computeLookup(argArr);\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the vlookup value.\n     */\n    BasicFormulas.prototype.ComputeVLOOKUP = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argArr = range;\n        return this.parent.computeVHLookup(argArr, true);\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the range.\n     * @returns {string | number} - Compute the hlookup value.\n     */\n    BasicFormulas.prototype.ComputeHLOOKUP = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var argArr = range;\n        return this.parent.computeVHLookup(argArr);\n    };\n    /**\n     * @hidden\n     * @param {string[]} argArr - specify the range.\n     * @returns {string | number} - Compute the sub total value.\n     */\n    BasicFormulas.prototype.ComputeSUBTOTAL = function () {\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length < 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        value = this.parent.getValueFromArg(argArr[0]).trim();\n        if (errCollection.indexOf(value) > -1) {\n            return value;\n        }\n        if (value.split(this.parent.tic).join('').trim() === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (!this.parent.isCellReference(argArr[0])) {\n            value = this.parent.removeTics(value);\n        }\n        if (value.toUpperCase() === this.parent.trueValue) {\n            value = '1';\n        }\n        else if (value.toUpperCase() === this.parent.falseValue) {\n            value = '0';\n        }\n        else if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {\n            value = (Number(value.split('%')[0]) / 100).toString();\n        }\n        value = this.parent.parseFloat(value);\n        if (isNaN(value) || ((1 > value || value > 11) && (101 > value || value > 111))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellRef = argArr.slice(1, argArr.length);\n        switch (value) {\n            case 1:\n            case 101:\n                value = this.ComputeAVERAGE.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 2:\n            case 102:\n                value = this.ComputeCOUNT.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 3:\n            case 103:\n                value = this.ComputeCOUNTA.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 4:\n            case 104:\n                value = this.ComputeMAX.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 5:\n            case 105:\n                value = this.ComputeMIN.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 6:\n            case 106:\n                value = this.ComputePRODUCT.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 7:\n            case 107:\n                value = this.ComputeDAY.apply(this, cellRef);\n                break;\n            case 8:\n            case 108:\n                value = this.ComputeCONCAT.apply(this, cellRef);\n                break;\n            case 9:\n            case 109:\n                value = this.ComputeSUM.apply(this, cellRef.concat(['isSubtotal']));\n                break;\n            case 10:\n            case 110:\n                value = this.ComputeAVERAGEA.apply(this, cellRef);\n                break;\n            case 11:\n            case 111:\n                value = this.ComputeABS.apply(this, cellRef);\n                break;\n            default:\n                value = errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                break;\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} argValue - specify the range.\n     * @returns {string | number} - Compute the Radians value.\n     */\n    BasicFormulas.prototype.ComputeRADIANS = function () {\n        var argValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argValue[_i] = arguments[_i];\n        }\n        var value;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argValue) || (argValue[0] === '' && argValue.length === 1) ||\n            (argValue[0].split('!').length === 2 && argValue[0].indexOf(this.parent.tic) === -1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argValue.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argValue[0].indexOf(':') > -1 || argValue[0].split(this.parent.tic).join('').trim() === '' ||\n            argValue[0].split(this.parent.tic).join('').trim() === '!' || argValue[0].split('!').length === 2) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        value = this.parent.getValueFromArg(argValue[0]).trim();\n        if (errCollection.indexOf(value) > -1) {\n            return value;\n        }\n        if ((value.indexOf(this.parent.tic) > -1 && argValue[0].indexOf(this.parent.tic) === -1) ||\n            value.split(this.parent.tic).length > 3) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (value.toUpperCase() === this.parent.trueValue) {\n            value = '1';\n        }\n        else if (value.toUpperCase() === this.parent.falseValue) {\n            value = '0';\n        }\n        else if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {\n            value = (Number(value.split('%')[0]) / 100).toString();\n        }\n        value = this.parent.parseFloat(value.split(this.parent.tic).join(''));\n        if (!isNaN(value)) {\n            value = Math.PI * (value) / 180;\n        }\n        else {\n            if (this.parent.isCellReference(argValue[0]) || argValue[0].indexOf(this.parent.tic) > -1) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            else {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Name];\n            }\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the range.\n     * @returns {string | number} - Compute the random between value.\n     */\n    BasicFormulas.prototype.ComputeRANDBETWEEN = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var min;\n        var max;\n        if (args.length === 1 && args[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (args.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        var processArgs = function (orgValue) {\n            var actualValue;\n            actualValue = _this.parent.getValueFromArg(orgValue);\n            if (errCollection.indexOf(actualValue) > -1) {\n                return actualValue;\n            }\n            if (_this.parent.isCellReference(orgValue)) {\n                if (actualValue === '') {\n                    actualValue = '0';\n                }\n                else if (orgValue.indexOf(':') > -1 || actualValue.match(/^(\\d*\\.\\d+|\\d+)\\s*[+\\-*/]\\s*(\\d*\\.\\d+|\\d+)$/)) {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            else {\n                if (actualValue === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n                }\n                else if (orgValue.indexOf(_this.parent.tic) > -1 && _this.parent.removeTics(orgValue).match(/^(\\d*\\.\\d+|\\d+)\\s*[+*]\\s*(\\d*\\.\\d+|\\d+)$/)) {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                else if (actualValue.indexOf(_this.parent.tic) > -1) {\n                    actualValue = _this.parent.removeTics(actualValue);\n                    if (actualValue.indexOf(':') > -1) {\n                        var values = actualValue.split(':');\n                        if (values.length <= 3) {\n                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {\n                                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                            }\n                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));\n                            if (values.length === 3) {\n                                if (!_this.parent.isNumber(values[2])) {\n                                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                                }\n                                hours += Number(Number(values[2]) / 3600);\n                            }\n                            actualValue = (hours / 24).toString();\n                        }\n                        else {\n                            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                }\n                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {\n                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();\n                }\n            }\n            actualValue = parseFloat(actualValue);\n            if (isNaN(actualValue)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            return actualValue;\n        };\n        max = processArgs(args[1]);\n        if (errCollection.indexOf(max) > -1) {\n            return max;\n        }\n        min = processArgs(args[0]);\n        if (errCollection.indexOf(min) > -1) {\n            return min;\n        }\n        if (min === 0 && max === 0) {\n            return '0';\n        }\n        else if (max < min) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else {\n            min = Math.ceil(min);\n            max = Math.floor(max);\n            return Math.floor((Math.random() * ((max - min) + 1)) + min);\n        }\n    };\n    /**\n     * @hidden\n     * @param {string[]} argValue - specify the range.\n     * @returns {string | number} - Compute the slope value.\n     */\n    BasicFormulas.prototype.ComputeSLOPE = function () {\n        var _this = this;\n        var argValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argValue[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argValue) || (argValue.length === 1 && argValue[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argValue.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argValue[0] === '' || argValue[1] === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellCollection = function (actuaValue) {\n            if (actuaValue.indexOf(_this.parent.tic) === -1) {\n                actuaValue = _this.parent.getCellCollection(actuaValue.split(_this.parent.tic).join(''));\n            }\n            else {\n                actuaValue = undefined;\n            }\n            return actuaValue;\n        };\n        var yPoints = cellCollection(argValue[0].trim());\n        var xPoints = cellCollection(argValue[1].trim());\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(yPoints) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(xPoints) || (yPoints.length < 2 && xPoints.length < 2)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        else if (yPoints.length !== xPoints.length) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        var dataCollection = function (actuaValue) {\n            actuaValue = _this.getDataCollection(actuaValue);\n            for (var b = 0; b < actuaValue.length; b++) {\n                if (errCollection.indexOf(actuaValue[b]) > -1) {\n                    return actuaValue[b].toString();\n                }\n            }\n            return actuaValue;\n        };\n        yPoints = dataCollection(yPoints);\n        if (errCollection.indexOf(yPoints.toString()) > -1) {\n            return yPoints.toString();\n        }\n        xPoints = dataCollection(xPoints);\n        if (errCollection.indexOf(xPoints.toString()) > -1) {\n            return xPoints.toString();\n        }\n        var sumXY = 0;\n        var sumX2 = 0;\n        var sumX = 0;\n        var sumY = 0;\n        var length = 0;\n        for (var i = 0, len = xPoints.length; i < len; ++i) {\n            if ((xPoints[i] !== '' && Number(xPoints[i]).toString() !== 'NaN') &&\n                (yPoints[i] !== '' && Number(yPoints[i]).toString() !== 'NaN')) {\n                sumXY += Number(xPoints[i]) * Number(yPoints[i]);\n                sumX += Number(xPoints[i]);\n                sumY += Number(yPoints[i]);\n                sumX2 += Number(xPoints[i]) * Number(xPoints[i]);\n                length++;\n            }\n        }\n        var value = ((sumXY - (sumX * sumY) / length) / (sumX2 - (sumX * sumX) / length)).toString();\n        if (value === 'NaN') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} argValue - specify the range.\n     * @returns {string | number} - Compute the intercept.\n     */\n    BasicFormulas.prototype.ComputeINTERCEPT = function () {\n        var _this = this;\n        var argValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argValue[_i] = arguments[_i];\n        }\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argValue) || (argValue.length === 1 && argValue[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argValue.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argValue[0] === '' || argValue[1] === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        var cellCollection = function (actuaValue) {\n            if (actuaValue.indexOf(_this.parent.tic) === -1) {\n                actuaValue = _this.parent.getCellCollection(actuaValue.split(_this.parent.tic).join(''));\n            }\n            else {\n                actuaValue = undefined;\n            }\n            return actuaValue;\n        };\n        var yValues = cellCollection(argValue[0].trim());\n        var xValues = cellCollection(argValue[1].trim());\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(yValues) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(xValues) || (yValues.length < 2 && xValues.length < 2)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        else if (yValues.length !== xValues.length) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        var dataCollection = function (actuaValue) {\n            actuaValue = _this.getDataCollection(actuaValue);\n            for (var b = 0; b < actuaValue.length; b++) {\n                if (errCollection.indexOf(actuaValue[b]) > -1) {\n                    return actuaValue[b];\n                }\n            }\n            return actuaValue;\n        };\n        yValues = dataCollection(yValues);\n        if (errCollection.indexOf(yValues.toString()) > -1) {\n            return yValues.toString();\n        }\n        xValues = dataCollection(xValues);\n        if (errCollection.indexOf(xValues.toString()) > -1) {\n            return xValues.toString();\n        }\n        var sumY = 0;\n        var sumX = 0;\n        var length = 0;\n        var sumXY = 0;\n        var sumX2 = 0;\n        var diff;\n        var calculation = function (isSum) {\n            for (var i = 0, len = xValues.length; i < len; ++i) {\n                if ((yValues[i] !== '' && Number(yValues[i]).toString() !== 'NaN') &&\n                    (xValues[i] !== '' && Number(xValues[i]).toString() !== 'NaN')) {\n                    if (isSum) {\n                        sumY += Number(yValues[i]);\n                        sumX += Number(xValues[i]);\n                        length++;\n                    }\n                    else {\n                        diff = Number(xValues[i]) - sumX;\n                        sumXY += diff * (Number(yValues[i]) - sumY);\n                        sumX2 += diff * diff;\n                    }\n                }\n            }\n        };\n        calculation(true);\n        sumY = sumY / length;\n        sumX = sumX / length;\n        calculation(false);\n        var value = (sumY - sumXY / sumX2 * sumX).toString();\n        if (value === 'NaN') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {string | number} - Compute the value.\n     */\n    BasicFormulas.prototype.ComputeLN = function () {\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var cellvalue;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue) || (logValue[0] === '' && logValue.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (logValue.length === 0 || logValue.length > 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        cellvalue = this.parent.getValueFromArg(logValue[0]);\n        if (errCollection.indexOf(cellvalue) > -1) {\n            return cellvalue;\n        }\n        if (cellvalue.toUpperCase() === this.parent.trueValue) {\n            cellvalue = '1';\n        }\n        else if (cellvalue.toUpperCase() === this.parent.falseValue) {\n            cellvalue = '0';\n        }\n        if (!this.parent.isCellReference(logValue[0])) {\n            cellvalue = this.parent.removeTics(cellvalue);\n            if (cellvalue.trim() === '') {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (cellvalue.split('%').length === 2 && this.parent.isNumber(cellvalue.split('%')[0])) {\n            cellvalue = (Number(cellvalue.split('%')[0]) * 0.01).toString();\n        }\n        cellvalue = this.parent.parseFloat(cellvalue);\n        if (cellvalue <= 0) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (isNaN(cellvalue)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return Math.log(cellvalue);\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {boolean | string} - Compute the Isnumber value.\n     */\n    BasicFormulas.prototype.ComputeISNUMBER = function () {\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var argArr = logValue;\n        if (logValue.length === 1 && logValue[0] === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (logValue.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var orgValue = (this.parent.isCellReference(argArr[0])) ? this.parent.getValueFromArg(argArr[0]) :\n            this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''));\n        if (orgValue.toString() === '' || logValue.toString().startsWith(this.parent.tic)) {\n            return false;\n        }\n        var logVal = this.parent.parseFloat(orgValue);\n        return !isNaN(logVal) ? true : false;\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {number | string} - Compute the round value.\n     */\n    BasicFormulas.prototype.ComputeROUND = function () {\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        if (!logValue.length || logValue.length === 1 || logValue.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var argArr = logValue;\n        if (logValue.length === 1) {\n            var orgValue = (argArr[0].split(this.parent.tic).join('') === 'TRUE')\n                ? '1'\n                : (argArr[0].split(this.parent.tic).join('') === 'FALSE')\n                    ? '0'\n                    : argArr[0];\n            if (isNaN(this.parent.parseFloat(orgValue))) {\n                return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n            }\n            return Math.round(this.parent.parseFloat(orgValue)).toString();\n        }\n        var numStr = this.parent.getValueFromArg(argArr[0]);\n        if (this.parent.getErrorStrings().indexOf(numStr) > -1) {\n            return numStr;\n        }\n        var digStr = this.parent.getValueFromArg(argArr[1]);\n        if (this.parent.getErrorStrings().indexOf(digStr) > -1) {\n            return digStr;\n        }\n        numStr = numStr === 'TRUE' ? '1' : numStr === 'FALSE' ? '0' : numStr;\n        digStr = digStr === 'TRUE' ? '1' : digStr === 'FALSE' ? '0' : digStr;\n        numStr = numStr.split(this.parent.tic).join('');\n        digStr = digStr.split(this.parent.tic).join('');\n        var isInvalidNumStr = isNaN(Number(numStr)) || numStr.trim() === '';\n        var isInvalidDigStr = isNaN(Number(digStr)) || digStr.trim() === '';\n        if (((argArr[0].indexOf('\"') > -1 || this.parent.isCellReference(argArr[0])) && isInvalidNumStr)\n            || ((argArr[1].indexOf('\"') > -1 || this.parent.isCellReference(argArr[1])) && isInvalidDigStr)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if ((numStr === '' && digStr === '') || numStr === '') {\n            return 0;\n        }\n        var x = this.parent.parseFloat(numStr);\n        var digits = this.parent.parseFloat(digStr);\n        var round;\n        if (!isNaN(digits) && !isNaN(x) && digits > 0) {\n            round = this.parent.parseFloat(this.preciseRound(x, digits, 'ROUND'));\n        }\n        else {\n            var mult = Math.pow(10, -digits);\n            round = Math.round(x / mult) * mult;\n        }\n        return round.toString();\n    };\n    BasicFormulas.prototype.preciseRound = function (numValue, decimalValue, formula) {\n        var factor = Math.pow(10, decimalValue);\n        var absValue = Math.abs(numValue) * factor;\n        var sign = numValue >= 0 ? 1 : -1;\n        var result = formula === 'ROUND' ? Math.round(absValue) : formula === 'ROUNDDOWN' ?\n            Math.floor(absValue) : Math.ceil(absValue);\n        return (sign * (result / factor)).toFixed(decimalValue);\n    };\n    /**\n     * @hidden\n     * @param {string[]} argArr - specify the log value.\n     * @returns {boolean | string} - Compute the power value.\n     */\n    BasicFormulas.prototype.ComputePOWER = function () {\n        var _this = this;\n        var argArr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            argArr[_i] = arguments[_i];\n        }\n        var power;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(argArr) || (argArr.length === 1 && argArr[0].trim() === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (argArr.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (argArr[0].trim() === '' && argArr[1].trim() === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        var processArgs = function (actualValue) {\n            var value = _this.parent.getValueFromArg(actualValue);\n            if (errCollection.indexOf(value) > -1) {\n                return value;\n            }\n            if (value.toUpperCase() === _this.parent.trueValue) {\n                value = '1';\n            }\n            else if (value.toUpperCase() === _this.parent.falseValue) {\n                value = '0';\n            }\n            if (value.indexOf(_this.parent.tic) > -1) {\n                value = _this.parent.removeTics(value);\n                if (actualValue.indexOf(_this.parent.tic) === -1 || value.trim() === '') {\n                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n            }\n            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {\n                value = (Number(value.split('%')[0]) / 100).toString();\n            }\n            else if (value.indexOf('/') > -1 && _this.parent.isNumber(value.split('/').join(''))) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            value = _this.parent.parseFloat(value);\n            if (isNaN(value)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            return value;\n        };\n        var numValue = processArgs(argArr[0]);\n        if (errCollection.indexOf(numValue) > -1) {\n            return numValue;\n        }\n        var powValue = processArgs(argArr[1]);\n        if (errCollection.indexOf(powValue) > -1) {\n            return powValue;\n        }\n        if (!isNaN(numValue) && !isNaN(powValue)) {\n            if (numValue === 0 && powValue < 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n            }\n            if (numValue === 0 && powValue === 0) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n            power = Math.pow(numValue, powValue);\n            if (isNaN(power) || power === Infinity) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n            }\n        }\n        else {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        return power.toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} args - specify the args.\n     * @returns {number | string} - Computes a positive square root of the given number.\n     */\n    BasicFormulas.prototype.ComputeSQRT = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var sqrtValue;\n        var arrValue = args[0];\n        if (args.length === 0 || args.length > 1 || arrValue === '') {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (arrValue.split(this.parent.tic).join('').trim() === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (this.parent.isCellReference(arrValue)) {\n            sqrtValue = this.parent.getValueFromArg(arrValue) || '0';\n            if (sqrtValue.indexOf(this.parent.tic) > -1) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        else {\n            if (arrValue.indexOf(this.parent.tic) > -1 && (arrValue.split(this.parent.tic).join('') === this.parent.trueValue ||\n                arrValue.split(this.parent.tic).join('') === this.parent.falseValue)) {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n            sqrtValue = this.parent.getValueFromArg(arrValue).split(this.parent.tic).join('');\n        }\n        if (this.parent.getErrorStrings().indexOf(sqrtValue) > -1) {\n            return sqrtValue;\n        }\n        sqrtValue = sqrtValue === this.parent.trueValue ? '1' : sqrtValue === this.parent.falseValue ? '0' : sqrtValue;\n        if (this.parent.parseFloat(sqrtValue) < 0) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (isNaN(this.parent.parseFloat(sqrtValue))) {\n            var dateTimeCheck = { value: sqrtValue };\n            this.parent.parentObject.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_4__.checkDateFormat, dateTimeCheck);\n            if (dateTimeCheck.isDate || dateTimeCheck.isTime) {\n                sqrtValue = dateTimeCheck.updatedVal;\n            }\n            else {\n                return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        return Math.sqrt(this.parent.parseFloat(sqrtValue));\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {number | string} - Compute the log value.\n     */\n    BasicFormulas.prototype.ComputeLOG = function () {\n        var _this = this;\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var orgNumValue;\n        var orgBaseValue;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue) || (logValue.length === 1 && logValue[0] === '')) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (logValue.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var processArgs = function (orgValue) {\n            var actualValue = _this.parent.getValueFromArg(orgValue);\n            if (actualValue === _this.parent.trueValue) {\n                actualValue = '1';\n            }\n            else if (actualValue === _this.parent.falseValue) {\n                actualValue = '0';\n            }\n            if (!_this.parent.isCellReference(orgValue) && actualValue !== '') {\n                if (actualValue.indexOf(_this.parent.tic) > -1 && errCollection.indexOf(actualValue.split(_this.parent.tic).join('')) === -1) {\n                    actualValue = _this.parent.removeTics(actualValue);\n                    if (actualValue.trim() === '') {\n                        return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                    else if (actualValue.indexOf(':') > -1) {\n                        var values = actualValue.split(':');\n                        if (values.length <= 3) {\n                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {\n                                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                            }\n                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));\n                            if (values.length === 3) {\n                                if (!_this.parent.isNumber(values[2])) {\n                                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                                }\n                                hours += Number(Number(values[2]) / 3600);\n                            }\n                            actualValue = (hours / 24).toString();\n                        }\n                        else {\n                            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                }\n                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {\n                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();\n                }\n            }\n            return actualValue;\n        };\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue[0])) {\n            orgNumValue = processArgs(logValue[0]);\n            if (errCollection.indexOf(orgNumValue) > -1) {\n                return orgNumValue;\n            }\n            orgNumValue = this.parent.parseFloat(orgNumValue);\n        }\n        orgBaseValue = 10;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue[1])) {\n            orgBaseValue = processArgs(logValue[1]);\n            if (errCollection.indexOf(orgBaseValue) > -1) {\n                return orgBaseValue;\n            }\n            orgBaseValue = this.parent.parseFloat(orgBaseValue);\n        }\n        orgNumValue = Number(orgNumValue);\n        if (isNaN(orgNumValue) || isNaN(orgBaseValue)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (orgNumValue <= 0 || orgBaseValue <= 0) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        else if (orgBaseValue === 1) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        return ((Math.log(orgNumValue) / Math.LN10) / (Math.log(orgBaseValue) / Math.LN10)).toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {boolean | string} - Compute the trunc value.\n     */\n    BasicFormulas.prototype.ComputeTRUNC = function () {\n        var _this = this;\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var orgNumValue;\n        var orgDigitValue = 0;\n        var errCollection = this.parent.getErrorStrings();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue) || (logValue[0] === '' && logValue.length === 1)) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (logValue.length === 0 || logValue.length > 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        var processArgs = function (orgValue) {\n            var actualValue = _this.parent.getValueFromArg(orgValue);\n            if (errCollection.indexOf(actualValue) > -1) {\n                return actualValue;\n            }\n            if (actualValue === _this.parent.trueValue) {\n                actualValue = '1';\n            }\n            else if (actualValue === _this.parent.falseValue) {\n                actualValue = '0';\n            }\n            else if (!_this.parent.isCellReference(orgValue)) {\n                if (orgValue.indexOf(_this.parent.tic) > -1 && _this.parent.removeTics(orgValue).match(/^(\\d*\\.\\d+|\\d+)\\s*[*]\\s*(\\d*\\.\\d+|\\d+)$/)) {\n                    actualValue = _this.parent.getValueFromArg(_this.parent.removeTics(orgValue));\n                }\n                else if (actualValue.indexOf(_this.parent.tic) > -1) {\n                    actualValue = _this.parent.removeTics(actualValue);\n                    if (actualValue.trim() === '') {\n                        return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                    }\n                    else if (actualValue.indexOf(':') > -1) {\n                        var values = actualValue.split(':');\n                        if (values.length <= 3) {\n                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {\n                                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                            }\n                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));\n                            if (values.length === 3) {\n                                if (!_this.parent.isNumber(values[2])) {\n                                    return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                                }\n                                hours += Number(Number(values[2]) / 3600);\n                            }\n                            actualValue = (hours / 24).toString();\n                        }\n                        else {\n                            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                }\n                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {\n                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();\n                }\n            }\n            return actualValue;\n        };\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue[0])) {\n            orgNumValue = processArgs(logValue[0]);\n            if (errCollection.indexOf(orgNumValue) > -1) {\n                return orgNumValue;\n            }\n            orgNumValue = this.parent.parseFloat(orgNumValue);\n            if (isNaN(orgNumValue)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(logValue[1])) {\n            orgDigitValue = processArgs(logValue[1]);\n            if (errCollection.indexOf(orgDigitValue) > -1) {\n                return orgDigitValue;\n            }\n            orgDigitValue = this.parent.parseFloat(orgDigitValue);\n            if (isNaN(orgDigitValue)) {\n                return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n            }\n        }\n        orgDigitValue = Math.pow(10, Math.floor(orgDigitValue));\n        orgNumValue = Number(orgNumValue);\n        return ((orgNumValue < 0 ? -1 : 1) * Math.floor(orgDigitValue * Math.abs(orgNumValue)) / orgDigitValue).toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value.\n     * @returns {boolean | string} - Compute the expression.\n     */\n    BasicFormulas.prototype.ComputeEXP = function () {\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var orgNumValue;\n        var errCollection = this.parent.getErrorStrings();\n        if (logValue[0] === '' && logValue.length === 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.InvalidArguments];\n        }\n        else if (logValue.length !== 1) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        else if (logValue[0].split(this.parent.tic).join('').trim() === '') {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        orgNumValue = this.parent.getValueFromArg(logValue[0]);\n        if (errCollection.indexOf(orgNumValue) > -1) {\n            return orgNumValue;\n        }\n        if (orgNumValue.indexOf(this.parent.tic) > -1 && (this.parent.isCellReference(logValue[0]) ||\n            isNaN(Number(orgNumValue.split(this.parent.tic).join(''))))) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        orgNumValue = orgNumValue.split(this.parent.tic).join('');\n        if (orgNumValue === this.parent.trueValue) {\n            orgNumValue = '1';\n        }\n        else if ((orgNumValue === this.parent.falseValue) || (orgNumValue === '')) {\n            orgNumValue = '0';\n        }\n        else if (orgNumValue.indexOf('%') > -1) {\n            orgNumValue = (Number(orgNumValue.split('%')[0]) / 100).toString();\n        }\n        else if (orgNumValue.indexOf(':') > -1) {\n            return '0';\n        }\n        var logNumValue = this.parent.parseFloat(orgNumValue);\n        if (isNaN(logNumValue)) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        else if (logNumValue > 709) {\n            return errCollection[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n        }\n        return Math.exp(logNumValue).toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} logValue - specify the log value\n     * @returns {boolean | string} - compute the value.\n     */\n    BasicFormulas.prototype.ComputeGEOMEAN = function () {\n        var logValue = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            logValue[_i] = arguments[_i];\n        }\n        var argArr = logValue;\n        var sum = 1;\n        var count = 0;\n        var cellVal = 0;\n        var cellStr = 0;\n        var dev;\n        var r;\n        var s;\n        var cell;\n        if (logValue.length === 0) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (argArr.length === 1 && argArr[0] === '') {\n            return sum.toString();\n        }\n        var isBoolean;\n        for (r = 0; r < argArr.length; r++) {\n            if (argArr[r].indexOf(':') > -1) {\n                if (argArr[0] === this.parent.tic) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                cell = this.parent.getCellCollection(argArr[r].split(this.parent.tic).join(''));\n                for (s = 0; s < cell.length; s++) {\n                    cellVal = this.parent.getValueFromArg(cell[s]);\n                    cellStr = cellVal.split(this.parent.tic).join('');\n                    isBoolean = cellStr === this.parent.trueValue || cellStr === this.parent.falseValue;\n                    dev = this.parent.parseFloat(cellVal);\n                    if (dev <= 0) {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n                    }\n                    if (isBoolean || this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n                        continue;\n                    }\n                    else if (!isNaN(dev)) {\n                        count++;\n                        sum = sum * dev;\n                    }\n                }\n            }\n            else {\n                cellVal = this.parent.getValueFromArg(argArr[r]);\n                if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {\n                    return cellVal;\n                }\n                var cellStr_1 = cellVal.split(this.parent.tic).join('');\n                if (cellVal.indexOf('\"') > -1 && isNaN(this.parent.parseFloat(cellStr_1))) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                }\n                argArr[r] = argArr[r].startsWith('n') ? argArr[r].slice(1) : argArr[r];\n                if ((cellVal === '' && argArr[r] === '')) {\n                    return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n                }\n                if ((cellStr_1 === 'TRUE' || cellStr_1 === 'FALSE') && this.parent.isCellReference(argArr[r])) {\n                    continue;\n                }\n                if (cellVal.length > 0) {\n                    cellVal = cellVal.indexOf('\"') > -1 ? cellStr_1 : cellVal;\n                    cellVal = (cellVal.split(this.parent.tic).join('') === 'TRUE') ? '1' :\n                        (cellVal.split(this.parent.tic).join('') === 'FALSE') ? '0' : cellVal;\n                    if (!this.parent.isCellReference(argArr[r])) {\n                        if (isNaN(this.parent.parseFloat(cellVal))) {\n                            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n                        }\n                    }\n                    dev = this.parent.parseFloat(cellVal);\n                    if (dev <= 0) {\n                        return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Num];\n                    }\n                    else if (!isNaN(dev)) {\n                        count++;\n                        sum = sum * dev;\n                    }\n                }\n            }\n        }\n        if (count > 0) {\n            sum = Math.pow(sum, 1 / count);\n        }\n        return sum.toString();\n    };\n    /**\n     * @hidden\n     * @param {string[]} range - specify the args.\n     * @returns {number | string} - Returns the square of the Pearson product moment correlation coefficient based on data points in known_y's and known_x's.\n     */\n    BasicFormulas.prototype.ComputeRSQ = function () {\n        var range = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            range[_i] = arguments[_i];\n        }\n        var validCount = 0;\n        var argArr = range;\n        if (argArr.length !== 2) {\n            return this.parent.formulaErrorStrings[_common_index__WEBPACK_IMPORTED_MODULE_0__.FormulasErrorsStrings.WrongNumberArguments];\n        }\n        if (argArr[0] === '' || argArr[1] === '') {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.Value];\n        }\n        if (argArr[0].includes('\"') || argArr[1].includes('\"')) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        if ((argArr[0].indexOf(':') === -1 && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(argArr[0])) && (argArr[1].indexOf(':') === -1 && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isCellReference)(argArr[1]))) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        var yValuesRange = this.parent.getCellCollection(argArr[0]);\n        var xValuesRange = this.parent.getCellCollection(argArr[1]);\n        if ((yValuesRange.length !== xValuesRange.length)) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.NA];\n        }\n        var xValues = this.getDataCollection(xValuesRange);\n        for (var a = 0; a < xValues.length; a++) {\n            if (this.parent.getErrorStrings().indexOf(xValues[a]) > -1) {\n                return xValues[a];\n            }\n        }\n        var yValues = this.getDataCollection(yValuesRange);\n        for (var b = 0; b < yValues.length; b++) {\n            if (this.parent.getErrorStrings().indexOf(yValues[b]) > -1) {\n                return yValues[b];\n            }\n        }\n        var xValue;\n        var yValue;\n        for (var i = 0; i < xValues.length; i++) {\n            xValue = Number(xValues[i]);\n            yValue = Number(yValues[i]);\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(xValue) && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(yValue)) {\n                validCount++;\n            }\n        }\n        if (validCount <= 1) {\n            return this.parent.getErrorStrings()[_common_index__WEBPACK_IMPORTED_MODULE_0__.CommonErrors.DivZero];\n        }\n        if (validCount === 2) {\n            return 1;\n        }\n        var meanArray = this.getMeanArray(xValues, yValues);\n        var meanX = meanArray[0];\n        var meanY = meanArray[1];\n        var correlation = this.getCorrelation(xValues, yValues, meanX, meanY);\n        return Math.pow(correlation, 2);\n    };\n    /**\n     * @hidden\n     * @param {string[]} xValues - specify the x values\n     * @param {string[]} yValues - specify the y values\n     * @param {number} meanX - specify the mean of x values\n     * @param {number} meanY - specify the mean of y values\n     * @returns {number} - Returns correlation value\n     */\n    BasicFormulas.prototype.getCorrelation = function (xValues, yValues, meanX, meanY) {\n        var numerator = 0;\n        var denominatorX = 0;\n        var denominatorY = 0;\n        var diffY;\n        var diffX;\n        for (var i = 0; i < xValues.length; i++) {\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(xValues[i]) && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(yValues[i])) {\n                diffX = Number(xValues[i]) - meanX;\n                diffY = Number(yValues[i]) - meanY;\n                numerator += diffX * diffY;\n                denominatorX += Math.pow(diffX, 2);\n                denominatorY += Math.pow(diffY, 2);\n            }\n        }\n        var correlation = numerator / Math.sqrt(denominatorX * denominatorY);\n        return correlation;\n    };\n    /**\n     * @hidden\n     * @param {string[]} xValues - specify the x values\n     * @param {string[]} yValues - specify the y values\n     * @returns {number[]} meanX - returns array of mean values of x and y values\n     */\n    BasicFormulas.prototype.getMeanArray = function (xValues, yValues) {\n        var count = 0;\n        var sumX = 0;\n        var sumY = 0;\n        var meanX = 0;\n        var meanY = 0;\n        for (var i = 0; i < xValues.length; i++) {\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(xValues[i]) && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(yValues[i])) {\n                sumX += Number(xValues[i]);\n                sumY += Number(yValues[i]);\n                count++;\n            }\n        }\n        meanX = sumX / count;\n        meanY = sumY / count;\n        return [meanX, meanY];\n    };\n    BasicFormulas.prototype.getDataCollection = function (cells) {\n        var cellsData = [];\n        for (var i = 0, len = cells.length; i < len; i++) {\n            cellsData.push(this.parent.getValueFromArg(cells[i]));\n        }\n        return cellsData;\n    };\n    /**\n     * @hidden\n     * @param {string} value - specify the value\n     * @returns {number} - Returns parse double value.\n     */\n    BasicFormulas.prototype.parseDouble = function (value) {\n        var val = this.parent.parseFloat(value.toString());\n        return !isNaN(val) ? val : NaN;\n    };\n    /**\n     * @hidden\n     * @param {string} value - specify the value\n     * @returns {string} - Returns spreadsheet display text.\n     */\n    BasicFormulas.prototype.spreadsheetDisplayText = function (value) {\n        // eslint-disable-next-line\n        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var indexes = this.parent.parentObject.getIndexes(value);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            value = this.parent.parentObject.getDisplayText(this.parent.parentObject.\n                getActiveSheet().rows[indexes.startIdx].cells[indexes.endIdx]);\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @param {string} value - specify the value\n     * @returns {string} - Returns spreadsheet format.\n     */\n    BasicFormulas.prototype.spreadsheetFormat = function (value) {\n        // eslint-disable-next-line\n        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var index = this.parent.parentObject.getIndexes(value);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            value = this.parent.parentObject.getActiveSheet().rows[index.startIdx].cells[index.endIdx].format;\n        }\n        return value;\n    };\n    return BasicFormulas;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/calculate/formulas/basic.js?");

/***/ })

}]);