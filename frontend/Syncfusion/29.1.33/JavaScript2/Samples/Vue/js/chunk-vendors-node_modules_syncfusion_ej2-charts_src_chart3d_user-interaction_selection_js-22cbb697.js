"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_user-interaction_selection_js-22cbb697"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/selection.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/selection.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Selection3D: () => (/* binding */ Selection3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/user-interaction/selection */ \"./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Selection source file\n */\n\n\n\n\n\n\n/**\n * The `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection3D = /** @class */ (function (_super) {\n    __extends(Selection3D, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @param {Chart3D} chart - Chart3D instance.\n     * @private\n     */\n    function Selection3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.seriesIndex = 0;\n        _this.chart = chart;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        var cancelEvent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.mouseLeave, this);\n        this.chart.on('click', this.mouseClick, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseLeave, this);\n    };\n    /**\n     * Handles the mouse down event.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.mousedown = function () {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'Point') {\n            return;\n        }\n    };\n    /**\n     * Unbinding events for selection module.\n     *\n     * @returns {void}\n     */\n    Selection3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 0, this.mouseLeave);\n        this.chart.off('click', this.mouseClick);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mousedown);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseLeave);\n    };\n    /**\n     * To find private variable values\n     *\n     * @param {Chart3D} chart - Chart3D instance.\n     * @returns {void}\n     */\n    Selection3D.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @param {Chart3D} chart - Chart3D instance\n     * @returns {void}\n     */\n    Selection3D.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    };\n    /**\n     * Generates the style for the series.\n     *\n     * @param {Chart3DSeriesModel} series - The series for which the style is generated.\n     * @returns {string} - The generated style string.\n     */\n    Selection3D.prototype.generateStyle = function (series) {\n        if (series) {\n            return (this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     * Selects the specified data indexes in the Chart3D.\n     * This method is responsible for handling the selection of specific data indexes in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance in which the data indexes are selected.\n     * @param {Index[]} indexes - An array of Index objects representing the data indexes to be selected.\n     * @returns {void}\n     */\n    Selection3D.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     * Retrieves the elements in the Chart3D associated with the specified data index.\n     *\n     * This method is responsible for obtaining the elements in the Chart3D related to the specified data index.\n     *\n     * @param {Chart3D} chart - The Chart3D instance containing the elements.\n     * @param {Index} index - An Index object representing the data index.\n     * @returns {Element[]} An array of Element objects representing the elements associated with the specified data index.\n     */\n    Selection3D.prototype.getElementByIndex = function (chart, index) {\n        var pointElements = [];\n        var elements = document.querySelectorAll('[id*=\"-region-series-' + index.series + '-point-' + index.point + '\"]');\n        elements.forEach(function (pointElement) {\n            pointElements.push(pointElement);\n        });\n        return pointElements;\n    };\n    /**\n     * This method is responsible for obtaining the clustered elements in the Chart3D related to the specified data index.\n     * Clustering typically involves obtaining a group of related elements for a specific data index.\n     *\n     * @param {Chart3D} chart - The Chart3D instance containing the clustered elements.\n     * @param {Index} index - An Index object representing the data index.\n     * @returns {Element[]} An array of Element objects representing the clustered elements associated with the specified data index.\n     */\n    Selection3D.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(series.index, index.point);\n                var pointElements = this.getElementByIndex(chart, index);\n                for (var i = 0; i < pointElements.length; i++) {\n                    clusters.push(pointElements[i]);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     * Method to get the selected element.\n     *\n     * @param {Chart3D} chart - The Chart3D instance to which the series belongs.\n     * @param {Chart3DSeriesModel} series - The series in which the data point is located.\n     * @param {Index} index - The index or position of the data point within the series.\n     * @returns {Element[]} An array of elements associated with the specified data point in the Chart3D.\n     * @private\n     */\n    Selection3D.prototype.findElements = function (chart, series, index) {\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index);\n        }\n    };\n    /**\n     * Checks whether the specified element is already selected in the Chart3D.\n     *\n     * @param {Element} targetElem - The target element to check for selection status.\n     * @param {string} eventType - The type of event triggering the selection check (e.g., 'click', 'hover').\n     * @param {Index} [index] - Optional. The index or position of the data point within the series.\n     * @returns {boolean} A boolean indicating whether the specified element is already selected.\n     */\n    Selection3D.prototype.isAlreadySelected = function (targetElem, eventType, index) {\n        if (eventType === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (eventType === 'mousemove' || eventType === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var isElement = void 0;\n            var nodeName = targetElem.nodeName;\n            if (targetElem.parentNode) {\n                isElement = ((nodeName === 'path' || nodeName === 'shape') && targetElem.id.indexOf('region') > 1) ? true : false;\n            }\n            var _loop_1 = function (i) {\n                if (this_1.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click')) {\n                        var selectionClass_1;\n                        this_1.previousSelectedEle[i].classList.forEach(function (className) {\n                            if (className.indexOf('selection') > -1) {\n                                selectionClass_1 = className;\n                            }\n                        });\n                        this_1.previousSelectedEle[i].removeAttribute('class');\n                        if (selectionClass_1) {\n                            this_1.addSvgClass(this_1.previousSelectedEle[i], selectionClass_1);\n                        }\n                        this_1.previousSelectedEle[i].classList.remove(this_1.styleId + '_series_' + index.series);\n                        if (this_1.chart.highlightColor !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this_1.chart.highlightColor) && this_1.chart.highlightPattern === 'None') {\n                            this_1.previousSelectedEle[i].setAttribute('fill', this_1.control.visibleSeries[this_1.indexFinder(this_1.previousSelectedEle[i].id).series].interior);\n                        }\n                        this_1.addOrRemoveIndex(this_1.highlightDataIndexes, this_1.indexFinder(this_1.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this_1.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this_1.performSelection(this_1.indexFinder(this_1.previousSelectedEle[i].id), this_1.chart, this_1.previousSelectedEle[i]);\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                _loop_1(i);\n            }\n        }\n        return true;\n    };\n    /**\n     * Handles the mouse click event in the Chart3D, triggering the calculation of selected elements.\n     *\n     * @param {Event} event - The mouse click event object.\n     * @returns {void}\n     */\n    Selection3D.prototype.mouseClick = function (event) {\n        if (!this.chart.rotateActivate) {\n            this.calculateSelectedElements(event.target, event.type);\n        }\n    };\n    /**\n     * Calculates the selected elements based on the provided target element and event type.\n     *\n     * @param {HTMLElement} targetElement - The target HTML element that triggered the selection.\n     * @param {string} eventType - The type of the event that triggered the selection (e.g., mouse click).\n     * @returns {void}\n     */\n    Selection3D.prototype.calculateSelectedElements = function (targetElement, eventType) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n            return;\n        }\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(this.chart.element.id + '-') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove' || eventType === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(targetElement, eventType, this.indexFinder(targetElement.id));\n        if (targetElement.id && targetElement.id.indexOf('-series-') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n            var element = void 0;\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     * Performs selection based on the provided index, chart, and optional element.\n     *\n     * @param {Index} index - The index or indices specifying the data points or elements to be selected.\n     * @param {Chart3D} chart - The Chart3D instance where the selection is being performed.\n     * @param {Element} [element] - Optional. The specific HTML element that triggered the selection.\n     * @returns {void}\n     */\n    Selection3D.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    this.selection(chart, index, this.getElementByIndex(chart, index));\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     * Handles the completion of a selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the selection process is completed.\n     * @param {Index} index - The selected index or indices representing the data points or elements.\n     * @param {Chart3DSelectionMode  | HighlightMode} selectionMode - The mode of selection, either SelectionMode or HighlightMode.\n     * @returns {void}\n     */\n    Selection3D.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = points[pointIndex].yValue;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            selectedPointValues.push({\n                                x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                pointIndex: pointIndex\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    if (this.selectedDataIndexes.length > 0) {\n                        selectedPointValues.push({\n                            seriesIndex: seriesIndex\n                        });\n                    }\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series :\n                    (this.highlightDataIndexes && this.highlightDataIndexes.length > 0) ? this.highlightDataIndexes[0].series : 0;\n                if (this.selectedDataIndexes.length > 0 || (this.highlightDataIndexes && this.highlightDataIndexes.length > 0)) {\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n        }\n        else if (selectionMode === 'Point') {\n            var selectedData = [];\n            if (this.styleId.indexOf('highlight') > -1) {\n                selectedData = this.highlightDataIndexes;\n            }\n            else {\n                selectedData = this.selectedDataIndexes;\n            }\n            for (var i = 0; i < selectedData.length; i++) {\n                pointIndex = selectedData[i].point;\n                seriesIndex = selectedData[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = points[pointIndex].yValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            selectedDataValues: selectedPointValues,\n            cancel: false,\n            chart: chart\n        };\n        chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.selectionComplete, args);\n    };\n    /**\n     * Handles the selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the selection is taking place.\n     * @param {Index} index - The selected index or indices representing the data points or elements.\n     * @param {Element[]} selectedElements - The corresponding elements that are selected during the process.\n     * @returns {void}\n     */\n    Selection3D.prototype.selection = function (chart, index, selectedElements) {\n        if (!chart.isMultiSelect && (this.styleId.indexOf('highlight') === -1 &&\n            chart.selectionMode !== 'None')) {\n            this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n        }\n        var indexValue = index.series;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedElements[0])) {\n            if (chart.visibleSeries[indexValue].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(selectedElements[0].id + '_Symbol'));\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else {\n                this.previousSelectedEle = (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) ? selectedElements : [];\n                if (this.chart.selection3DModule) {\n                    this.chart.selection3DModule.previousSelectedEle = selectedElements;\n                }\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     * Handles the cluster selection process in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the cluster selection is taking place.\n     * @param {Index} index - The selected index or indices representing the cluster.\n     * @returns {void}\n     */\n    Selection3D.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(index.series, index.point)));\n    };\n    /**\n     * Removes the selected elements during a multi-select operation in the Chart3D.\n     *\n     * @param {Chart3D} chart - The Chart3D instance where the multi-select operation is taking place.\n     * @param {Index[]} index - An array of selected indices to be removed.\n     * @param {Index} currentIndex - The current index representing the selection.\n     * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series in the Chart3D.\n     * @returns {void}\n     */\n    Selection3D.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) &&\n                    !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Applies a blur effect to the specified chart elements for visual emphasis.\n     *\n     * @param {string} chartId - The unique identifier of the target chart where the blur effect is applied.\n     * @param {Chart3DSeries[]} visibleSeries - An array of visible series in the chart.\n     * @returns {void}\n     */\n    Selection3D.prototype.blurEffect = function (chartId, visibleSeries) {\n        var visibility = (this.checkVisibility(this.highlightDataIndexes, this.chart) ||\n            this.checkVisibility(this.selectedDataIndexes, this.chart));\n        var _loop_2 = function (series) {\n            var legendIndex = series.index;\n            var legendStrokeColor = this_2.chart.visibleSeries[series.index].interior;\n            var pointElements = [];\n            if (series.visible) {\n                var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n                elements.forEach(function (el) {\n                    pointElements.push(el);\n                });\n                this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, legendIndex, legendStrokeColor);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(chartId + 'SymbolGroup' + series.index))) {\n                    this_2.checkSelectionElements(pointElements, this_2.generateStyle(series), visibility, legendIndex, legendStrokeColor);\n                }\n            }\n        };\n        var this_2 = this;\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            _loop_2(series);\n        }\n    };\n    /**\n     * Checks the selection status of specified chart elements and updates their appearance.\n     *\n     * @param {Element[] | Element} element - The chart elements or a single element to be checked for selection.\n     * @param {string} className - The CSS class name used to identify selected elements.\n     * @param {boolean} visibility - A boolean indicating whether the elements should be visible or hidden based on selection.\n     * @param {number} [series=0] - The index of the series if the specified elements are series.\n     * @param {string} [legendStrokeColor='#D3D3D3'] - The stroke color used for legends when they are selected.\n     * @returns {void}\n     */\n    Selection3D.prototype.checkSelectionElements = function (element, className, visibility, series, legendStrokeColor) {\n        if (series === void 0) { series = 0; }\n        if (legendStrokeColor === void 0) { legendStrokeColor = '#D3D3D3'; }\n        var children = (this.isSeriesMode ? element || [element] : element);\n        if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            children = element;\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                if (elementClassName.indexOf(this.unselected) !== -1 && this.chart.tooltip3DModule && className.indexOf('highlight') > 0) {\n                    this.chart.highlightAnimation(children[i], series, 700, 0.3);\n                }\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n        }\n        if (this.control.legend3DModule && this.control.legendSettings.visible) {\n            legendShape = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n                        legendShape.setAttribute('stroke', legendStrokeColor);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', legendStrokeColor);\n                        }\n                    }\n                }\n                if (selectElement.length > 0) {\n                    elementClassName = selectElement[0].getAttribute('class');\n                    parentClassName = selectElement[0].parentNode.getAttribute('class') || '';\n                }\n                else if (selectElement) {\n                    elementClassName = selectElement.getAttribute('class') || '';\n                    parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                }\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, (this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight) ? className : this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Applies custom styles to the specified chart elements.\n     *\n     * @param {Element[]} elements - An array of chart elements to which custom styles will be applied.\n     * @returns {void}\n     */\n    Selection3D.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                if (this.chart.series[0].pointColorMapping === 'fill') {\n                    var className = this.getSelectionClass(element.id);\n                    var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n                    var pattern = void 0;\n                    if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n                        pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n                    }\n                    if (element.id.indexOf('legend') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n                        for (var i = 1; i < pattern.children.length; i++) {\n                            pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n                            pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n                        }\n                    }\n                }\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.tooltip3DModule && this.getSelectionClass(element.id).indexOf('highlight') > 0) {\n                    var index = parseFloat(element.id.split('-series-')[1].split('-point-')[0]);\n                    this.chart.stopElementAnimation(element, index);\n                }\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n                    element.setAttribute('fill', this.chart.highlightColor);\n                }\n            }\n        }\n    };\n    /**\n     * Gets the CSS class name associated with the selection for a specific chart element.\n     *\n     * @param {string} id - A unique identifier for the selected element.\n     * @returns {string} The CSS class name associated with the selection for the selected element.\n     */\n    Selection3D.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n    };\n    /**\n     * Removes styles associated with the selection from the selected elements.\n     *\n     *\n     * @param {Element[]} elements - An array of chart elements from which selection styles should be removed.\n     * @returns {void}\n     */\n    Selection3D.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n                    var color = this.control.visibleSeries[this.indexFinder(element.id).series].interior;\n                    if (element.getAttribute('name') === 'ZLight') {\n                        color = this.chart.polygon.applyZLight(color, this.control);\n                    }\n                    if (element.getAttribute('name') === 'XLight') {\n                        color = this.chart.polygon.applyXLight(color, this.control);\n                    }\n                    element.setAttribute('fill', color);\n                }\n            }\n        }\n    };\n    /**\n     * Adds or removes an index from the specified array based on the provided condition.\n     *\n     * @param {Index[]} indexes - The array of indexes to be modified.\n     * @param {Index} index - The index to be added or removed.\n     * @param {boolean} [isAdd=true] - A boolean flag indicating whether to add or remove the index.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * Compares two Index objects for equality.\n     *\n     * @param {Index} first - The first Index object to compare.\n     * @param {Index} second - The second Index object to compare.\n     * @param {boolean} [checkSeriesOnly=false] - A boolean flag indicating whether to\n     * @returns {boolean} - True if the Index objects are equal; otherwise, false.\n     */\n    Selection3D.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * Redraws the selection in the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance where the selection needs to be redrawn.\n     * @param {Chart3DSelectionMode | HighlightMode} oldMode - The previous selection mode ('Series', 'Point', etc.).\n     * @param {boolean} [chartRedraw=false] - A boolean flag indicating whether to trigger a chart redraw.\n     * @returns {void}\n     */\n    Selection3D.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(oldMode)) {\n            if (chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /**\n     * Handles the selection in the legend for the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance associated with the legend.\n     * @param {number} series - The index of the series in the legend.\n     * @param {Element} targetElement - The HTML element that triggered the selection event.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {void}\n     */\n    Selection3D.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        else if (eventType === 'click') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetElement.id.replace('_g_', '_shape_'));\n            }\n        }\n        var index = this.indexFinder(targetElement.id);\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType, index);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = [];\n                if (this.chart.legendSettings.mode === 'Point') {\n                    seriesElements = this.getElementByIndex(chart, index);\n                }\n                else {\n                    seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                }\n                if (seriesElements.length > 0) {\n                    this.checkSelectionElements(seriesElements, seriesStyle, false, series, '');\n                    this.isSeriesMode = true;\n                    this.selection(chart, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(index.series, NaN), seriesElements);\n                    this.isSeriesMode = chart.selectionMode === 'Series';\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n            }\n        }\n    };\n    /**\n     * Handles the removal of selection in the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart instance where the selection needs to be removed.\n     * @param {number} series - The index of the series for which the selection is being removed.\n     * @param {NodeListOf<HTMLElement>} selectedElements - The HTML elements representing the selected items.\n     * @param {string} seriesStyle - The style to be applied to the series after the removal of selection.\n     * @param {boolean} isBlurEffectNeeded - A flag indicating whether a blur effect is needed after the removal of selection.\n     * @returns {void}\n     */\n    Selection3D.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, series, '');\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /**\n     * Retrieves the HTML elements associated with a specific 3D chart series.\n     *\n     * @param {Chart3DSeriesModel | Chart3DSeries} series - The 3D chart series for which HTML elements are to be retrieved.\n     * @returns {Element[]} An array of HTML elements representing the graphical elements of the specified 3D chart series.\n     * @private\n     */\n    Selection3D.prototype.getSeriesElements = function (series) {\n        var seriesElements = [];\n        if (series.visible) {\n            var elements = document.querySelectorAll(\"[id*=\\\"region-series-\" + series.index + \"\\\"]\");\n            elements.forEach(function (seriesElement) {\n                seriesElements.push(seriesElement);\n            });\n        }\n        return seriesElements;\n    };\n    /**\n     * Finds and returns the index associated with the specified identifier.\n     *\n     * @param {string} id - The identifier used to find the associated index.\n     * @returns {Index} The index associated with the specified identifier.\n     * @private\n     */\n    Selection3D.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('-point-') > -1) {\n            ids = id.split('-series-')[1].split('-point-');\n        }\n        else if (id.indexOf('-border-') > -1) {\n            ids[0] = id.split('-border-')[1];\n        }\n        else if (id.indexOf('-series-') > -1) {\n            ids[0] = id.split('-series-')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Removes the selected elements from the chart based on the specified indices.\n     *\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @param {Index[]} index - The array of indices representing the selected elements to be removed.\n     * @param {Chart3DSeriesModel[]} seriesCollection - The collection of series models.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length);\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            if (series.visible) {\n                seriesElements = this.getSeriesElements(series);\n                this.removeStyles(seriesElements);\n                for (var _a = 0, seriesElements_1 = seriesElements; _a < seriesElements_1.length; _a++) {\n                    var seriesElement = seriesElements_1[_a];\n                    this.removeStyles(this.getChildren(seriesElement));\n                }\n            }\n        }\n    };\n    /**\n     * Handles the mouse leave event for the 3D chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.mouseLeave = function () {\n        this.completeSelection();\n    };\n    /**\n     * Completes the selection process based on the specified target element and event type.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.completeSelection = function () {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n    };\n    /**\n     * Handles the mouse move event, typically used for tracking the movement of the mouse pointer.\n     * This method is marked as private to indicate that it should not be used externally.\n     *\n     * @param {PointerEvent | TouchEvent} event - The event object representing the mouse move or touch event.\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        var eventType = event.type;\n        this.highlightChart(target, eventType);\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (eventType === 'touchmove' && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos7) && event.preventDefault) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * Highlights the series elements based on the specified target element and event type.\n     *\n     * @param {Element} target - The target element on which the highlight action is performed.\n     * @param {string} eventType - The type of the event.\n     * @returns {void}\n     */\n    Selection3D.prototype.highlightChart = function (target, eventType) {\n        if (!this.chart.rotateActivate && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target)) {\n                if (target.id.indexOf('_legend_text') > 1) {\n                    target = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(target, eventType);\n                if (this.chart.highlight3DModule.highlightDataIndexes && this.chart.highlight3DModule.highlightDataIndexes.length > 0 &&\n                    target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('-series-') === -1) {\n                    this.removeLegendHighlightStyles();\n                }\n            }\n            return;\n        }\n    };\n    /**\n     * remove highlighted legend when not focused.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.removeLegendHighlightStyles = function () {\n        this.chart.highlight3DModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n                            var color = this.control.visibleSeries[i].interior;\n                            if (element.getAttribute('name') === 'ZLight') {\n                                color = this.chart.polygon.applyZLight(color, this.control);\n                            }\n                            if (element.getAttribute('name') === 'XLight') {\n                                color = this.chart.polygon.applyXLight(color, this.control);\n                            }\n                            if (element.id.indexOf('_chart_legend_shape') !== -1 && element.getAttribute('stroke')) {\n                                element.setAttribute('stroke', color);\n                            }\n                            element.setAttribute('fill', color);\n                        }\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (this.chart.tooltip3DModule && this.generateStyle(this.chart.visibleSeries[i]).indexOf('highlight') > -1) {\n                            this.chart.highlightAnimation(element, i, 700, 0.3);\n                        }\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     * @private\n     */\n    Selection3D.prototype.getModuleName = function () {\n        return 'Selection3D';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection3D.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection3D;\n}(_common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_4__.BaseSelection));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/selection.js?");

/***/ })

}]);