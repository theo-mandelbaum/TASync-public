"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-vue-gantt_src_gantt_gantt_component_js-9d216e78"],{

/***/ "./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/gantt.component.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/gantt.component.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GanttComponent: () => (/* binding */ GanttComponent),\n/* harmony export */   GanttPlugin: () => (/* binding */ GanttPlugin),\n/* harmony export */   emitProbs: () => (/* binding */ emitProbs),\n/* harmony export */   modelProps: () => (/* binding */ modelProps),\n/* harmony export */   properties: () => (/* binding */ properties),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   testProp: () => (/* binding */ testProp),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-vue-base */ \"./node_modules/@syncfusion/ej2-vue-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_gantt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-gantt */ \"./node_modules/@syncfusion/ej2-gantt/index.js\");\n/* harmony import */ var _columns_directive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./columns.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/columns.directive.js\");\n/* harmony import */ var _adddialogfields_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adddialogfields.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/adddialogfields.directive.js\");\n/* harmony import */ var _editdialogfields_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./editdialogfields.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/editdialogfields.directive.js\");\n/* harmony import */ var _dayworkingtime_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dayworkingtime.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/dayworkingtime.directive.js\");\n/* harmony import */ var _weekworkingtime_directive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./weekworkingtime.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/weekworkingtime.directive.js\");\n/* harmony import */ var _holidays_directive__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./holidays.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/holidays.directive.js\");\n/* harmony import */ var _eventmarkers_directive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./eventmarkers.directive */ \"./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/eventmarkers.directive.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar properties = ['isLazyUpdate', 'plugins', 'UpdateOffsetOnTaskbarEdit', 'addDialogFields', 'allowExcelExport', 'allowFiltering', 'allowKeyboard', 'allowParentDependency', 'allowPdfExport', 'allowReordering', 'allowResizing', 'allowRowDragAndDrop', 'allowSelection', 'allowSorting', 'allowTaskbarDragAndDrop', 'allowTaskbarOverlap', 'allowUnscheduledTasks', 'autoCalculateDateScheduling', 'autoFocusTasks', 'baselineColor', 'collapseAllParentTasks', 'columnMenuItems', 'columns', 'connectorLineBackground', 'connectorLineWidth', 'contextMenuItems', 'dataSource', 'dateFormat', 'dayWorkingTime', 'disableHtmlEncode', 'durationUnit', 'editDialogFields', 'editSettings', 'enableAdaptiveUI', 'enableContextMenu', 'enableCriticalPath', 'enableHtmlSanitizer', 'enableImmutableMode', 'enableMultiTaskbar', 'enablePersistence', 'enablePredecessorValidation', 'enableRtl', 'enableTimelineVirtualization', 'enableUndoRedo', 'enableVirtualMaskRow', 'enableVirtualization', 'eventMarkers', 'filterSettings', 'gridLines', 'height', 'highlightWeekends', 'holidays', 'includeWeekend', 'labelSettings', 'loadChildOnDemand', 'loadingIndicator', 'locale', 'milestoneTemplate', 'parentTaskbarTemplate', 'projectEndDate', 'projectStartDate', 'query', 'readOnly', 'renderBaseline', 'resourceFields', 'resourceIDMapping', 'resourceNameMapping', 'resources', 'rowHeight', 'searchSettings', 'segmentData', 'selectedRowIndex', 'selectionSettings', 'showColumnMenu', 'showInlineNotes', 'showOverAllocation', 'sortSettings', 'splitterSettings', 'taskFields', 'taskMode', 'taskType', 'taskbarHeight', 'taskbarTemplate', 'timelineSettings', 'timelineTemplate', 'timezone', 'toolbar', 'tooltipSettings', 'treeColumnIndex', 'undoRedoActions', 'undoRedoStepsCount', 'updateOffsetOnTaskbarEdit', 'validateManualTasksOnLinking', 'viewType', 'weekWorkingTime', 'width', 'workUnit', 'workWeek', 'zoomingLevels', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeExcelExport', 'beforePdfExport', 'beforeTooltipRender', 'cellDeselected', 'cellDeselecting', 'cellEdit', 'cellSelected', 'cellSelecting', 'collapsed', 'collapsing', 'columnDrag', 'columnDragStart', 'columnDrop', 'columnMenuClick', 'columnMenuOpen', 'contextMenuClick', 'contextMenuOpen', 'created', 'dataBound', 'dataStateChange', 'destroyed', 'endEdit', 'excelExportComplete', 'excelHeaderQueryCellInfo', 'excelQueryCellInfo', 'expanded', 'expanding', 'headerCellInfo', 'load', 'onMouseMove', 'onTaskbarClick', 'pdfColumnHeaderQueryCellInfo', 'pdfExportComplete', 'pdfQueryCellInfo', 'pdfQueryTaskbarInfo', 'pdfQueryTimelineCellInfo', 'queryCellInfo', 'queryTaskbarInfo', 'recordDoubleClick', 'resizeStart', 'resizeStop', 'resizing', 'rowDataBound', 'rowDeselected', 'rowDeselecting', 'rowDrag', 'rowDragStart', 'rowDragStartHelper', 'rowDrop', 'rowSelected', 'rowSelecting', 'splitterResizeStart', 'splitterResized', 'splitterResizing', 'taskbarEdited', 'taskbarEditing', 'toolbarClick'];\nvar modelProps = ['dataSource'];\nvar testProp = (0,_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.getProps)({ props: properties });\nvar props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * `ejs-gantt` represents the VueJS Gantt Component.\n * ```vue\n * <ejs-gantt :dataSource='data' allowSelection='true' allowSorting='true'></ejs-gantt>\n * ```\n */\nvar GanttComponent = (0,_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.vueDefineComponent)({\n    name: 'GanttComponent',\n    mixins: [_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new _syncfusion_ej2_gantt__WEBPACK_IMPORTED_MODULE_2__.Gantt({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: true,\n            hasInjectedModules: true,\n            tagMapper: { \"e-columns\": \"e-column\", \"e-add-dialog-fields\": \"e-add-dialog-field\", \"e-edit-dialog-fields\": \"e-edit-dialog-field\", \"e-day-working-time-collection\": \"e-day-working-time\", \"e-week-working-times\": \"e-week-working-time\", \"e-holidays\": \"e-holidays\", \"e-event-markers\": \"e-event-marker\" },\n            tagNameMapper: { \"e-add-dialog-fields\": \"e-addDialogFields\", \"e-edit-dialog-fields\": \"e-editDialogFields\", \"e-day-working-time-collection\": \"e-dayWorkingTime\", \"e-week-working-times\": \"e-weekWorkingTime\", \"e-event-markers\": \"e-eventMarkers\" },\n            isVue3: !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute ? _syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.gh : createElement;\n        var slots = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.$slots.default)) {\n            slots = !_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('div', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            this.destroyPortals(ele);\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(eventProp[propKey])) {\n                    if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(eventProp[propKey])) {\n                    if (!_syncfusion_ej2_vue_base__WEBPACK_IMPORTED_MODULE_0__.isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addPredecessor: function (id, predecessorString) {\n            return this.ej2Instances.addPredecessor(id, predecessorString);\n        },\n        addRecord: function (data, rowPosition, rowIndex) {\n            return this.ej2Instances.addRecord(data, rowPosition, rowIndex);\n        },\n        cancelEdit: function () {\n            return this.ej2Instances.cancelEdit();\n        },\n        changeTaskMode: function (data) {\n            return this.ej2Instances.changeTaskMode(data);\n        },\n        clearFiltering: function (fields) {\n            return this.ej2Instances.clearFiltering(fields);\n        },\n        clearRedoCollection: function () {\n            return this.ej2Instances.clearRedoCollection();\n        },\n        clearSelection: function () {\n            return this.ej2Instances.clearSelection();\n        },\n        clearSorting: function () {\n            return this.ej2Instances.clearSorting();\n        },\n        clearUndoCollection: function () {\n            return this.ej2Instances.clearUndoCollection();\n        },\n        collapseAll: function () {\n            return this.ej2Instances.collapseAll();\n        },\n        collapseByID: function (id) {\n            return this.ej2Instances.collapseByID(id);\n        },\n        collapseByIndex: function (index) {\n            return this.ej2Instances.collapseByIndex(index);\n        },\n        convertToMilestone: function (id) {\n            return this.ej2Instances.convertToMilestone(id);\n        },\n        csvExport: function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n            return this.ej2Instances.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n        },\n        deleteRecord: function (taskDetail) {\n            return this.ej2Instances.deleteRecord(taskDetail);\n        },\n        enableItems: function (items, isEnable) {\n            return this.ej2Instances.enableItems(items, isEnable);\n        },\n        excelExport: function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n            return this.ej2Instances.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);\n        },\n        expandAll: function () {\n            return this.ej2Instances.expandAll();\n        },\n        expandByID: function (id) {\n            return this.ej2Instances.expandByID(id);\n        },\n        expandByIndex: function (index) {\n            return this.ej2Instances.expandByIndex(index);\n        },\n        filterByColumn: function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent) {\n            return this.ej2Instances.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent);\n        },\n        fitToProject: function () {\n            return this.ej2Instances.fitToProject();\n        },\n        getCriticalTasks: function () {\n            return this.ej2Instances.getCriticalTasks();\n        },\n        getDurationString: function (duration, durationUnit) {\n            return this.ej2Instances.getDurationString(duration, durationUnit);\n        },\n        getExpandedRecords: function (records) {\n            return this.ej2Instances.getExpandedRecords(records);\n        },\n        getFormatedDate: function (date, format) {\n            return this.ej2Instances.getFormatedDate(date, format);\n        },\n        getGanttColumns: function () {\n            return this.ej2Instances.getGanttColumns();\n        },\n        getGridColumns: function () {\n            return this.ej2Instances.getGridColumns();\n        },\n        getRecordByID: function (id) {\n            return this.ej2Instances.getRecordByID(id);\n        },\n        getRedoActions: function () {\n            return this.ej2Instances.getRedoActions();\n        },\n        getRowByID: function (id) {\n            return this.ej2Instances.getRowByID(id);\n        },\n        getRowByIndex: function (index) {\n            return this.ej2Instances.getRowByIndex(index);\n        },\n        getTaskByUniqueID: function (id) {\n            return this.ej2Instances.getTaskByUniqueID(id);\n        },\n        getTaskbarHeight: function () {\n            return this.ej2Instances.getTaskbarHeight();\n        },\n        getUndoActions: function () {\n            return this.ej2Instances.getUndoActions();\n        },\n        getWorkString: function (work, workUnit) {\n            return this.ej2Instances.getWorkString(work, workUnit);\n        },\n        hideColumn: function (keys, hideBy) {\n            return this.ej2Instances.hideColumn(keys, hideBy);\n        },\n        hideMaskRow: function () {\n            return this.ej2Instances.hideMaskRow();\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        indent: function () {\n            return this.ej2Instances.indent();\n        },\n        keyActionHandler: function (e) {\n            return this.ej2Instances.keyActionHandler(e);\n        },\n        mergeTask: function (taskId, segmentIndexes) {\n            return this.ej2Instances.mergeTask(taskId, segmentIndexes);\n        },\n        nextTimeSpan: function (mode) {\n            return this.ej2Instances.nextTimeSpan(mode);\n        },\n        openAddDialog: function () {\n            return this.ej2Instances.openAddDialog();\n        },\n        openEditDialog: function (taskId) {\n            return this.ej2Instances.openEditDialog(taskId);\n        },\n        outdent: function () {\n            return this.ej2Instances.outdent();\n        },\n        pdfExport: function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n            return this.ej2Instances.pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n        },\n        previousTimeSpan: function (mode) {\n            return this.ej2Instances.previousTimeSpan(mode);\n        },\n        redo: function () {\n            return this.ej2Instances.redo();\n        },\n        removeCriticalPathStyles: function () {\n            return this.ej2Instances.removeCriticalPathStyles();\n        },\n        removePredecessor: function (id) {\n            return this.ej2Instances.removePredecessor(id);\n        },\n        removeSortColumn: function (columnName) {\n            return this.ej2Instances.removeSortColumn(columnName);\n        },\n        reorderColumns: function (fromFName, toFName) {\n            return this.ej2Instances.reorderColumns(fromFName, toFName);\n        },\n        reorderRows: function (fromIndexes, toIndex, position) {\n            return this.ej2Instances.reorderRows(fromIndexes, toIndex, position);\n        },\n        scrollToDate: function (date) {\n            return this.ej2Instances.scrollToDate(date);\n        },\n        scrollToTask: function (taskId) {\n            return this.ej2Instances.scrollToTask(taskId);\n        },\n        search: function (keyVal) {\n            return this.ej2Instances.search(keyVal);\n        },\n        selectCell: function (cellIndex, isToggle) {\n            return this.ej2Instances.selectCell(cellIndex, isToggle);\n        },\n        selectCells: function (rowCellIndexes) {\n            return this.ej2Instances.selectCells(rowCellIndexes);\n        },\n        selectRow: function (index, isToggle) {\n            return this.ej2Instances.selectRow(index, isToggle);\n        },\n        selectRows: function (records) {\n            return this.ej2Instances.selectRows(records);\n        },\n        setScrollTop: function (scrollTop) {\n            return this.ej2Instances.setScrollTop(scrollTop);\n        },\n        setSplitterPosition: function (value, type) {\n            return this.ej2Instances.setSplitterPosition(value, type);\n        },\n        showColumn: function (keys, showBy) {\n            return this.ej2Instances.showColumn(keys, showBy);\n        },\n        showCriticalPath: function (isCritical) {\n            return this.ej2Instances.showCriticalPath(isCritical);\n        },\n        showMaskRow: function () {\n            return this.ej2Instances.showMaskRow();\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n        sortColumn: function (columnName, direction, isMultiSort) {\n            return this.ej2Instances.sortColumn(columnName, direction, isMultiSort);\n        },\n        splitTask: function (taskId, splitDate) {\n            return this.ej2Instances.splitTask(taskId, splitDate);\n        },\n        undo: function () {\n            return this.ej2Instances.undo();\n        },\n        updateChartScrollOffset: function (left, top) {\n            return this.ej2Instances.updateChartScrollOffset(left, top);\n        },\n        updateDataSource: function (dataSource, args) {\n            return this.ej2Instances.updateDataSource(dataSource, args);\n        },\n        updatePredecessor: function (id, predecessorString) {\n            return this.ej2Instances.updatePredecessor(id, predecessorString);\n        },\n        updateProjectDates: function (startDate, endDate, isTimelineRoundOff, isFrom) {\n            return this.ej2Instances.updateProjectDates(startDate, endDate, isTimelineRoundOff, isFrom);\n        },\n        updateRecordByID: function (data) {\n            return this.ej2Instances.updateRecordByID(data);\n        },\n        updateRecordByIndex: function (index, data) {\n            return this.ej2Instances.updateRecordByIndex(index, data);\n        },\n        updateTaskId: function (currentId, newId) {\n            return this.ej2Instances.updateTaskId(currentId, newId);\n        },\n        zoomIn: function () {\n            return this.ej2Instances.zoomIn();\n        },\n        zoomOut: function () {\n            return this.ej2Instances.zoomOut();\n        },\n    }\n});\nvar GanttPlugin = {\n    name: 'ejs-gantt',\n    install: function (Vue) {\n        Vue.component(GanttPlugin.name, GanttComponent);\n        Vue.component(_columns_directive__WEBPACK_IMPORTED_MODULE_3__.ColumnPlugin.name, _columns_directive__WEBPACK_IMPORTED_MODULE_3__.ColumnDirective);\n        Vue.component(_columns_directive__WEBPACK_IMPORTED_MODULE_3__.ColumnsPlugin.name, _columns_directive__WEBPACK_IMPORTED_MODULE_3__.ColumnsDirective);\n        Vue.component(_adddialogfields_directive__WEBPACK_IMPORTED_MODULE_4__.AddDialogFieldPlugin.name, _adddialogfields_directive__WEBPACK_IMPORTED_MODULE_4__.AddDialogFieldDirective);\n        Vue.component(_adddialogfields_directive__WEBPACK_IMPORTED_MODULE_4__.AddDialogFieldsPlugin.name, _adddialogfields_directive__WEBPACK_IMPORTED_MODULE_4__.AddDialogFieldsDirective);\n        Vue.component(_editdialogfields_directive__WEBPACK_IMPORTED_MODULE_5__.EditDialogFieldPlugin.name, _editdialogfields_directive__WEBPACK_IMPORTED_MODULE_5__.EditDialogFieldDirective);\n        Vue.component(_editdialogfields_directive__WEBPACK_IMPORTED_MODULE_5__.EditDialogFieldsPlugin.name, _editdialogfields_directive__WEBPACK_IMPORTED_MODULE_5__.EditDialogFieldsDirective);\n        Vue.component(_dayworkingtime_directive__WEBPACK_IMPORTED_MODULE_6__.DayWorkingTimePlugin.name, _dayworkingtime_directive__WEBPACK_IMPORTED_MODULE_6__.DayWorkingTimeDirective);\n        Vue.component(_dayworkingtime_directive__WEBPACK_IMPORTED_MODULE_6__.DayWorkingTimeCollectionPlugin.name, _dayworkingtime_directive__WEBPACK_IMPORTED_MODULE_6__.DayWorkingTimeCollectionDirective);\n        Vue.component(_weekworkingtime_directive__WEBPACK_IMPORTED_MODULE_7__.WeekWorkingTimePlugin.name, _weekworkingtime_directive__WEBPACK_IMPORTED_MODULE_7__.WeekWorkingTimeDirective);\n        Vue.component(_weekworkingtime_directive__WEBPACK_IMPORTED_MODULE_7__.WeekWorkingTimesPlugin.name, _weekworkingtime_directive__WEBPACK_IMPORTED_MODULE_7__.WeekWorkingTimesDirective);\n        Vue.component(_holidays_directive__WEBPACK_IMPORTED_MODULE_8__.HolidayPlugin.name, _holidays_directive__WEBPACK_IMPORTED_MODULE_8__.HolidayDirective);\n        Vue.component(_holidays_directive__WEBPACK_IMPORTED_MODULE_8__.HolidaysPlugin.name, _holidays_directive__WEBPACK_IMPORTED_MODULE_8__.HolidaysDirective);\n        Vue.component(_eventmarkers_directive__WEBPACK_IMPORTED_MODULE_9__.EventMarkerPlugin.name, _eventmarkers_directive__WEBPACK_IMPORTED_MODULE_9__.EventMarkerDirective);\n        Vue.component(_eventmarkers_directive__WEBPACK_IMPORTED_MODULE_9__.EventMarkersPlugin.name, _eventmarkers_directive__WEBPACK_IMPORTED_MODULE_9__.EventMarkersDirective);\n    }\n};\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-vue-gantt/src/gantt/gantt.component.js?");

/***/ })

}]);