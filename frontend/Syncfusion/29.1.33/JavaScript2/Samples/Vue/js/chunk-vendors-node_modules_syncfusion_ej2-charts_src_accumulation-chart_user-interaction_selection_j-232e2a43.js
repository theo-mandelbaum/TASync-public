"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_accumulation-chart_user-interaction_selection_j-232e2a43"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/selection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/selection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccumulationSelection: () => (/* binding */ AccumulationSelection)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/user-interaction/selection */ \"./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * AccumulationChart Selection src file\n */\n\n\n\n\n\n/**\n * The `AccumulationSelection` module handles selection for the accumulation chart.\n *\n * @private\n */\nvar AccumulationSelection = /** @class */ (function (_super) {\n    __extends(AccumulationSelection, _super);\n    function AccumulationSelection(accumulation) {\n        var _this = _super.call(this, accumulation) || this;\n        _this.accumulation = accumulation;\n        _this.renderer = accumulation.renderer;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.addEventListener = function () {\n        if (this.accumulation.isDestroyed) {\n            return;\n        }\n        //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.accumulation.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        this.accumulation.on('click', this.mouseClick, this);\n    };\n    /**\n     * UnBinding events for selection module.\n     *\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeEventListener = function () {\n        if (this.accumulation.isDestroyed) {\n            return;\n        }\n        this.accumulation.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        this.accumulation.off('click', this.mouseClick);\n    };\n    /**\n     * To initialize the private variables.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.initPrivateVariables = function (accumulation) {\n        this.styleId = accumulation.element.id + '_ej2_chart_selection';\n        this.unselected = accumulation.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n    };\n    /**\n     * Invoke selection for rendered chart.\n     *\n     * @param {AccumulationChart} accumulation - Define the chart to invoke the selection.\n     * @returns {void}\n     * @private\n     */\n    AccumulationSelection.prototype.invokeSelection = function (accumulation) {\n        this.initPrivateVariables(accumulation);\n        this.series = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, accumulation.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = accumulation.selectionMode;\n        this.selectDataIndex(this.concatIndexes(accumulation.selectedDataIndexes, this.selectedDataIndexes), accumulation);\n    };\n    /**\n     * To get series selection style by series.\n     *\n     * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n     * @param {number} point - The index of the point within the series.\n     * @returns {string} - The selection style for the specified series.\n     */\n    AccumulationSelection.prototype.generateStyle = function (series, point) {\n        return (series.selectionStyle || this.styleId + '_series_' + series.index + '_point_' + point);\n    };\n    // /**\n    //  * To get series selection style while hovering legend.\n    //  *\n    //  * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n    //  * @param {string} eventType - The event type indicating the legend interaction (e.g., hover).\n    //  * @returns {string} - The selection style for the specified series.\n    //  */\n    // private generateLegendClickStyle(series: AccumulationSeriesModel, eventType: string): string {\n    //     if (eventType === 'mousemove') {\n    //         this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n    //     } else if (eventType === 'click') {\n    //         this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n    //     }\n    //     return (series.selectionStyle || this.styleId + '_series_' + (<AccumulationSeries>series).index);\n    // }\n    /**\n     * To get elements by index, series.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {AccumulationSeriesModel} series - The series for which to get the elements.\n     * @param {Index} index - The index of the element within the series.\n     * @returns {Element[]} - The elements corresponding to the specified index and series.\n     */\n    AccumulationSelection.prototype.findElements = function (accumulation, series, index) {\n        return [this.getElementByIndex(index)];\n    };\n    /**\n     * To get series point element by index.\n     *\n     * @param {Index} index - The index of the element within the series.\n     * @returns {Element} - The elements corresponding to the specified index.\n     */\n    AccumulationSelection.prototype.getElementByIndex = function (index) {\n        var elementId = this.control.element.id + '_Series_' + index.series + '_Point_' + index.point;\n        return document.getElementById(elementId);\n    };\n    /**\n     * To find the selected element.\n     *\n     * @param {Element} targetElement - The target element to check for selection.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {boolean} - Indicates whether the element is selected.\n     * @private\n     */\n    AccumulationSelection.prototype.isAlreadySelected = function (targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            this.currentMode = this.accumulation.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n        }\n        else if (eventType === 'click') {\n            this.currentMode = this.accumulation.selectionMode;\n            this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n        }\n        if (this.accumulation.highlightMode !== 'None' && this.accumulation.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if ((this.accumulation.highlightMode !== 'None' && this.previousSelectedElement && this.previousSelectedElement[0])) {\n            var parentNodeId = targetElement.parentNode.id;\n            var isValidElement = void 0;\n            if (targetElement.parentNode) {\n                isValidElement = (parentNodeId.indexOf('SeriesGroup') > 0 ||\n                    parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedElement.length; i++) {\n                if (this.previousSelectedElement[i].hasAttribute('class')) {\n                    if (this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 && (isValidElement || eventType === 'click')) {\n                        this.previousSelectedElement[i].removeAttribute('class');\n                        this.addOrRemoveIndex(this.highlightDataIndexes, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.indexFinder)(this.previousSelectedElement[i].id));\n                    }\n                    else if (!isValidElement && this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.indexFinder)(this.previousSelectedElement[i].id), this.accumulation, this.previousSelectedElement[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To calculate selected elements on mouse click or touch.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Event} event - The event object representing the mouse click or touch event.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.mouseClick = function (accumulation, event) {\n        this.calculateSelectedElements(accumulation, event.target, event.type);\n    };\n    /**\n     * To calculate selected elements on mouse click or touch.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Element} targetEle - The target element that triggered the event.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.calculateSelectedElements = function (accumulation, targetEle, eventType) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetEle)) {\n            return;\n        }\n        if ((accumulation.highlightMode === 'None' && accumulation.selectionMode === 'None') ||\n            targetEle.id.indexOf(accumulation.element.id + '_') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetEle.parentNode) && targetEle.parentNode.hasAttribute('class') &&\n                (targetEle.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetEle.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        if (targetEle.getAttribute('id').indexOf('_connector_') > -1) {\n            return;\n        }\n        else {\n            this.isAlreadySelected(targetEle, eventType);\n            if (this.accumulation.selectionMode === 'Point' && eventType === 'mousemove' && this.accumulation.accumulationLegendModule\n                && this.accumulation.accumulationHighlightModule.highlightDataIndexes\n                && this.accumulation.accumulationHighlightModule.highlightDataIndexes.length > 0 &&\n                targetEle.id.indexOf('_chart_legend_') === -1 && targetEle.id.indexOf('_Series_') === -1) {\n                for (var i = 0; i < this.accumulation.accumulationHighlightModule.previousSelectedElement.length; i++) {\n                    this.removeStyles(this.accumulation.accumulationHighlightModule.previousSelectedElement, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.indexFinder)(this.accumulation.accumulationHighlightModule.previousSelectedElement[i].id));\n                    this.blurEffect(this.accumulation.element.id, this.accumulation.visibleSeries);\n                }\n            }\n            if (targetEle.id.indexOf('_Series_') > -1 || targetEle.id.indexOf('_datalabel_') > -1) {\n                this.performSelection((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.indexFinder)(targetEle.id), accumulation, targetEle);\n            }\n        }\n    };\n    /**\n     * To perform the selection process based on index and element.\n     *\n     * @param {Index} index - The index of the data to select.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Element} element - The element representing the selected data.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.performSelection = function (index, accumulation, element) {\n        element = element.id.indexOf('datalabel') > -1 ?\n            accumulation.getSeriesElement().childNodes[index.series].childNodes[index.point]\n            : element;\n        switch (this.currentMode) {\n            case 'Point':\n                if (!isNaN(index.point)) {\n                    var dataLabelElement = document.getElementById(accumulation.element.id + '_datalabel_Series_' + index.series + '_g_' + index.point);\n                    if (this.series[0].dataLabel.visible && dataLabelElement) {\n                        dataLabelElement.setAttribute('class', element && element.hasAttribute('class') ? element.getAttribute('class') : dataLabelElement.hasAttribute('class') ? dataLabelElement.getAttribute('class') : '');\n                        this.selection(accumulation, index, [dataLabelElement]);\n                    }\n                    this.selection(accumulation, index, [element]);\n                    this.selectionComplete(accumulation, accumulation.series[0]);\n                    this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     * Method to get the selected data index.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {AccumulationSeries} series - The series to retrieve the selected data from index.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selectionComplete = function (accumulation, series) {\n        var pointIndex;\n        var selectedPointValues = [];\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = this.selectedDataIndexes[i].point;\n            if (!isNaN(pointIndex)) {\n                selectedPointValues.push({\n                    x: series.dataSource[pointIndex][series.xName], y: series.points[pointIndex].y,\n                    seriesIndex: this.selectedDataIndexes[i].series, pointIndex: pointIndex\n                });\n            }\n        }\n        var args = {\n            name: _common_model_constants__WEBPACK_IMPORTED_MODULE_4__.selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        accumulation.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_4__.selectionComplete, args);\n    };\n    /**\n     * To select the element by index. Adding or removing selection style class name.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Index} index - The index of the element to select or deselect.\n     * @param {Element[]} selectedElements - The array of selected elements.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selection = function (accumulation, index, selectedElements) {\n        if (!accumulation.isMultiSelect && this.styleId.indexOf('highlight') === -1 &&\n            accumulation.selectionMode !== 'None') {\n            this.removeMultiSelectEelments(accumulation, this.selectedDataIndexes, index, accumulation.series);\n        }\n        var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n        if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id, index.point)) > -1) {\n            this.removeStyles(selectedElements, index);\n            if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index);\n            }\n            if (accumulation.enableBorderOnMouseMove && selectedElements[0].id.indexOf('datalabel') === -1) {\n                var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderElement)) {\n                    this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n                }\n            }\n        }\n        else {\n            this.previousSelectedElement = accumulation.highlightMode !== 'None' ? selectedElements : [];\n            if (selectedElements[0] && className.indexOf('selection') < 0) {\n                this.applyStyles(selectedElements, index);\n            }\n            if (accumulation.enableBorderOnMouseMove && selectedElements[0].id.indexOf('datalabel') === -1) {\n                var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderElement)) {\n                    this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n                    this.addSvgClass(borderElement, selectedElements[0].getAttribute('class'));\n                }\n            }\n            if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n            }\n        }\n    };\n    /**\n     * To redraw the selection process on accumulation chart refresh.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.redrawSelection = function (accumulation) {\n        var selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(accumulation, this.highlightDataIndexes);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(accumulation, this.selectedDataIndexes);\n        }\n        this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n        this.selectDataIndex(selectedDataIndexes, accumulation);\n    };\n    /**\n     * To remove the selected elements style classes by indexes.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Index[]} indexes - The array of indexes representing elements to remove selection styles.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeSelectedElements = function (accumulation, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.removeStyles([this.getElementByIndex(index)], index);\n        }\n        var points = accumulation.visibleSeries[0].points;\n        for (var i = 0; i < points.length; i++) {\n            var index = new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(0, points[i].index);\n            this.removeStyles([this.getElementByIndex(index)], index);\n            if (accumulation.visibleSeries[0].dataLabel.visible) {\n                this.removeStyles([document.getElementById(accumulation.element.id + '_datalabel_Series_0_g_' + points[i].index)], index);\n            }\n        }\n    };\n    /**\n     * To perform the selection for legend elements.\n     *\n     * @private\n     */\n    AccumulationSelection.prototype.legendSelection = function (accumulation, series, pointIndex, targetEle, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetEle.id.indexOf('text') > 1) {\n                targetEle = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(targetEle.id.replace('text', 'shape'));\n            }\n            if (targetEle.hasAttribute('class') && (targetEle.getAttribute('class').indexOf('highlight') > -1 ||\n                targetEle.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.accumulation.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(targetEle, eventType);\n        if (isPreSelected) {\n            //let element: Element = <Element>accumulation.getSeriesElement().childNodes[series as number].childNodes[pointIndex as number];\n            //let seriesStyle: string = this.generateLegendClickStyle(accumulation.visibleSeries[series as number], eventType);\n            var seriesElements = accumulation.getSeriesElement().\n                childNodes[series].childNodes[pointIndex];\n            var dataLabelElement = document.getElementById(accumulation.element.id + '_datalabel_Series_' + series + '_g_' + pointIndex);\n            if (this.series[0].dataLabel.visible && dataLabelElement) {\n                this.selection(accumulation, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(series, pointIndex), [dataLabelElement]);\n            }\n            this.selection(accumulation, new _common_model_base__WEBPACK_IMPORTED_MODULE_2__.Index(series, pointIndex), [seriesElements]);\n            this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n        }\n    };\n    /**\n     * To select the element by selected data indexes.\n     *\n     * @param {Index[]} indexes - The array of indexes representing elements to select.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selectDataIndex = function (indexes, accumulation) {\n        var element;\n        for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n            var index = indexes_2[_i];\n            element = this.getElementByIndex(index);\n            if (element) {\n                this.performSelection(index, accumulation, element);\n            }\n        }\n    };\n    /**\n     * To remove the selection styles for multi selection process.\n     *\n     * @param {AccumulationChart} accumulation - The Accumulation Chart control.\n     * @param {Index[]} index - The array of indexes representing elements to remove selection styles for multi selection process.\n     * @param {Index} currentIndex - The current index to remove from selection.\n     * @param {AccumulationSeriesModel[]} seriesCollection - The array of visible series in the accumulation chart.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeMultiSelectEelments = function (accumulation, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if (!this.checkEquals(index[i], currentIndex)) {\n                this.removeStyles(this.findElements(accumulation, series, index[i]), index[i]);\n                if (series.dataLabel.visible) {\n                    this.removeStyles([document.getElementById(accumulation.element.id + '_datalabel_Series_0_g_' + index[i].point)], index[i]);\n                }\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * To apply the opacity effect for accumulation chart series elements.\n     *\n     * @param  {string} pieId - The id of the pie element.\n     * @param  {AccumulationSeries[]} visibleSeries - The array of visible series in the accumulation chart.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.blurEffect = function (pieId, visibleSeries) {\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(document.getElementById(pieId + '_SeriesCollection'), this.generateStyle(series), visibility);\n            }\n        }\n    };\n    /**\n     * To check selection elements by style class name.\n     *\n     * @param  {Element} element - The element to check selection elements by style class name.\n     * @param  {string} className - The class name to check.\n     * @param  {boolean} visibility - Indicates whether the element should be visible.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.checkSelectionElements = function (element, className, visibility) {\n        var selectionElements = [];\n        var children = element.childNodes[0].childNodes;\n        children.forEach(function (child) { return selectionElements.push(child); });\n        var dataLabelElement = document.getElementById(this.control.element.id + '_datalabel_Series_0');\n        if (dataLabelElement) {\n            var dataLabelChildren = dataLabelElement.childNodes;\n            dataLabelChildren.forEach(function (child) { return selectionElements.push(child); });\n        }\n        var legendShape;\n        var elementClass;\n        var parentClass;\n        //let selectElement: Element = element;\n        for (var i = 0; i < selectionElements.length; i++) {\n            elementClass = selectionElements[i].getAttribute('class') || '';\n            parentClass = selectionElements[i].parentNode.getAttribute('class') || '';\n            if (this.accumulation.selectionMode !== 'None' || this.accumulation.highlightMode !== 'None') {\n                className = elementClass.indexOf('selection') > 0 ||\n                    elementClass.indexOf('highlight') > 0 ? elementClass : className;\n                className = (parentClass.indexOf('selection') > 0 ||\n                    parentClass.indexOf('highlight') > 0) ? parentClass : className;\n            }\n            if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(selectionElements[i], this.unselected);\n            }\n            else {\n                this.removeSvgClass(selectionElements[i], this.unselected);\n            }\n            if (elementClass.indexOf(className) === -1 &&\n                parentClass.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(selectionElements[i], this.unselected);\n            }\n            else {\n                // selectElement = children[i as number] as HTMLElement;\n                this.removeSvgClass(selectionElements[i], this.unselected);\n                this.removeSvgClass(selectionElements[i].parentNode, this.unselected);\n            }\n            if (this.control.accumulationLegendModule &&\n                this.control.legendSettings.visible) {\n                legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + i);\n                if (legendShape) {\n                    if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n                        this.addSvgClass(legendShape, this.unselected);\n                    }\n                    else {\n                        this.removeSvgClass(legendShape, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To apply selection style for elements.\n     *\n     * @param  {Element[]} elements - The array of elements to apply the selection style.\n     * @param  {Index} index - The index to apply the selection style.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.applyStyles = function (elements, index) {\n        var accumulationTooltip = this.control.accumulationTooltipModule;\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            var legendShape = void 0;\n            if (element) {\n                if (this.control.accumulationLegendModule &&\n                    this.control.legendSettings.visible) {\n                    legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n                }\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                var opacity = accumulationTooltip && (accumulationTooltip.previousPoints.length > 0 &&\n                    accumulationTooltip.previousPoints[0].point.index !== index.point) ?\n                    accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                this.addSvgClass(element, this.getSelectionClass(element.id, index.point));\n            }\n        }\n    };\n    /**\n     * To get selection style class name by id.\n     *\n     * @param  {string} id - The id of the element to retrieve the selection style class name.\n     * @param  {number} point - The point for the selection.\n     * @returns {string} - The selection style class name.\n     */\n    AccumulationSelection.prototype.getSelectionClass = function (id, point) {\n        return this.generateStyle(this.control.series[(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.indexFinder)(id).series], point);\n    };\n    /**\n     * To remove selection style for elements.\n     *\n     * @param  {Element[]} elements - The array of elements from which to remove the selection style.\n     * @param  {Index} index - The index to remove from the selection.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeStyles = function (elements, index) {\n        var accumulationTooltip = this.control.accumulationTooltipModule;\n        var legendShape;\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                if (this.control.accumulationLegendModule &&\n                    this.control.legendSettings.visible) {\n                    legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n                    this.removeSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n                }\n                var opacity = accumulationTooltip && accumulationTooltip.previousPoints.length > 0\n                    && (accumulationTooltip.previousPoints[0].point.index === index.point) ?\n                    accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                this.removeSvgClass(element, this.getSelectionClass(element.id, index.point));\n            }\n        }\n    };\n    /**\n     * To apply or remove selected elements index.\n     *\n     * @param  {Index[]} indexes - The array of indexes representing elements to apply or remove selection.\n     * @param  {Index} index - The index to add or remove from the selection.\n     * @param  {boolean} add - Indicates whether to add or remove the index.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.addOrRemoveIndex = function (indexes, index, add) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.checkEquals(indexes[i], index)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (add) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * To check two index, point and series are equal.\n     *\n     * @param  {Index} first - The first index.\n     * @param  {Index} second - The second index.\n     * @returns {boolean} - Indicates whether the two indexes are equal.\n     */\n    AccumulationSelection.prototype.checkEquals = function (first, second) {\n        return ((first.point === second.point) && (first.series === second.series));\n    };\n    /**\n     *The mouse move event.\n     *\n     * @private\n     * @param  {PointerEvent | TouchEvent} event - The mouse move event or touch event.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.mouseMove = function (event) {\n        var accumulation = this.accumulation;\n        var targetElement = event.target;\n        if (accumulation.highlightMode !== 'None') {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(event.target.id.replace('text', 'shape'));\n                }\n                if ((targetElement).hasAttribute('class') && (targetElement).getAttribute('class').indexOf('highlight') > -1) {\n                    return;\n                }\n                this.calculateSelectedElements(accumulation, event.target, event.type);\n                return;\n            }\n        }\n        if (accumulation.selectionMode === 'None') {\n            return;\n        }\n    };\n    // /**\n    //  * To check selected points are visibility.\n    //  *\n    //  * @param  {Indexes[]} selectedDataIndexes - The array of indexes representing selected points.\n    //  * @returns {boolean} - Indicates whether the selected points are visible.\n    //  */\n    // private checkPointVisibility(selectedDataIndexes: Indexes[]): boolean {\n    //     let visible: boolean = false;\n    //     for (const data of selectedDataIndexes) {\n    //         if (pointByIndex(data.point, <AccPoints[]>this.control.visibleSeries[0].points).visible) {\n    //             visible = true;\n    //             break;\n    //         }\n    //     }\n    //     return visible;\n    // }\n    /**\n     * Get module name.\n     *\n     * @private\n     * @returns {string} - Returns the module name.\n     */\n    AccumulationSelection.prototype.getModuleName = function () {\n        return 'AccumulationSelection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationSelection.prototype.destroy = function () {\n        // Destroy method performed here\n        this.removeEventListener();\n    };\n    return AccumulationSelection;\n}(_common_user_interaction_selection__WEBPACK_IMPORTED_MODULE_3__.BaseSelection));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/selection.js?");

/***/ })

}]);