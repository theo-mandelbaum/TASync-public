"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_pdfviewer-utlis_js-6625a0b7"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfViewerSessionStorage: () => (/* binding */ PdfViewerSessionStorage),\n/* harmony export */   PdfViewerUtils: () => (/* binding */ PdfViewerUtils),\n/* harmony export */   PdfiumTaskScheduler: () => (/* binding */ PdfiumTaskScheduler),\n/* harmony export */   TaskPriorityLevel: () => (/* binding */ TaskPriorityLevel)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-pdf */ \"./node_modules/@syncfusion/ej2-pdf/index.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n/**\n *\n * @hidden\n */\nvar PdfViewerUtils = /** @class */ (function () {\n    function PdfViewerUtils() {\n    }\n    /**\n     * It returns a boolean value.\n     *\n     * @param {string} text - It get the fontcollection.\n     * @param {PdfTrueTypeFont} font - Get the font.\n     * @private\n     * @returns {boolean} - Return the boolean.\n     */\n    PdfViewerUtils.isSupportedFont = function (text, font) {\n        try {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(font)) {\n                for (var i = 0; i < text.length; i++) {\n                    var ch = text[parseInt(i.toString(), 10)];\n                    font._fontInternal._ttfReader._getGlyph(ch);\n                    if (!font._fontInternal._ttfReader._isFontPresent && (ch !== ' ') && !this.hasEscapeSequences(ch)) {\n                        return font._fontInternal._ttfReader._isFontPresent;\n                    }\n                }\n                return true;\n            }\n        }\n        catch (e) {\n            return false;\n        }\n        return false;\n    };\n    /**\n     * Checks if the given character is an escape sequence.\n     *\n     * @param {string} char - The character to be checked.\n     * @private\n     * @returns {boolean} - Returns true if the character is an escape sequence, otherwise false.\n     */\n    PdfViewerUtils.hasEscapeSequences = function (char) {\n        var escapeRegex = /[\\0\\b\\t\\n\\v\\f\\r'\"\\\\]/;\n        return escapeRegex.test(char);\n    };\n    /**\n     * It convert byte array to base64 string.\n     *\n     * @param {any} fontStream - It get the byte array.\n     * @private\n     * @returns {any} - Return the base64 string.\n     */\n    PdfViewerUtils.processFontStream = function (fontStream) {\n        return fontStream instanceof Uint8Array ? this.convertByteArrayToBase64(fontStream) : fontStream;\n    };\n    /**\n     * @param {string} customFonts - Get the custom fonts.\n     * @param {string} url - Get the url.\n     * @returns {any} - It's return fontCollection\n     * @private\n     */\n    PdfViewerUtils.fetchCustomFonts = function (customFonts, url) {\n        var _this = this;\n        var fontCollection = {};\n        var fontPromises = customFonts.map(function (font) {\n            var fontPath;\n            if (font.startsWith('http://') || font.startsWith('https://')) {\n                fontPath = font;\n            }\n            else {\n                fontPath = url + \"/\" + font;\n            }\n            var parts = fontPath.split('/');\n            var fileName = parts.pop() || '';\n            if (Object.keys(fontCollection).indexOf(fileName) === -1) {\n                return _this.fetchData(fontPath).then(function (fontData) { return __awaiter(_this, void 0, void 0, function () {\n                    var fallbackFontPath;\n                    return __generator(this, function (_a) {\n                        if (fontData) {\n                            fontCollection[parts.indexOf('fallbackfonts') !== -1 ?\n                                'fallbackfonts_' + fileName.toLowerCase() : fileName.toLowerCase()] = fontData;\n                        }\n                        else {\n                            fallbackFontPath = url + \"/fallbackfonts/\" + font;\n                            return [2 /*return*/, this.fetchData(fallbackFontPath).then(function (fallbackData) {\n                                    if (fallbackData) {\n                                        fontCollection['fallbackfonts_' + fileName.toLowerCase()] = fallbackData;\n                                    }\n                                })];\n                        }\n                        return [2 /*return*/];\n                    });\n                }); });\n            }\n            return null;\n        });\n        return Promise.all(fontPromises).then(function () { return fontCollection; });\n    };\n    /**\n     * @param {any} fontCollection - Get the custom fonts collection.\n     * @param {string} text - Get the font family.\n     * @param {number} fontSize - Get the font size.\n     * @param {PdfFontStyle} fontStyle - Get the font style.\n     * @returns {any} - It's return fontCollection\n     * @private\n     */\n    PdfViewerUtils.tryGetFontFromKeys = function (fontCollection, text, fontSize, fontStyle) {\n        var keys = Object.keys(fontCollection);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            var fontStream = this.processFontStream(fontCollection[\"\" + key]);\n            var font = new _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfTrueTypeFont(fontStream, this.convertPixelToPoint(fontSize), fontStyle ? fontStyle : _syncfusion_ej2_pdf__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle.regular);\n            var glyphPresent = this.isSupportedFont(text, font);\n            if (glyphPresent) {\n                return font;\n            }\n            font = null;\n            fontStream = null;\n        }\n        return null;\n    };\n    /**\n     * @param {any} fallbackFontCollection - Get the custom fonts collection.\n     * @param {string} fontFamily - Get the font family.\n     * @returns {any} - It's return fontCollection\n     * @private\n     */\n    PdfViewerUtils.getFontKey = function (fallbackFontCollection, fontFamily) {\n        if (fallbackFontCollection[\"\" + fontFamily] || fallbackFontCollection[fontFamily + '.ttf']) {\n            return fallbackFontCollection[\"\" + fontFamily] ? fontFamily : fontFamily + '.ttf';\n        }\n        var font = fontFamily.endsWith('.ttf') ? fontFamily : fontFamily + '.ttf';\n        for (var key in fallbackFontCollection) {\n            if (key.toLowerCase().endsWith(font.toLowerCase())) {\n                return key;\n            }\n        }\n        return undefined;\n    };\n    /**\n     * @param {string} color - Gets the color in hex RGBA pattern.\n     * @returns {boolean} - It's return boolean\n     * @private\n     */\n    PdfViewerUtils.isHexRGBAAndTransparent = function (color) {\n        // Check if the string matches the #RRGGBBAA pattern\n        var hexRGBARegex = /^#([A-Fa-f0-9]{8})$/;\n        if (!hexRGBARegex.test(color)) {\n            return false; // Not a valid hex RGBA\n        }\n        // Extract the alpha value (last two characters)\n        var alphaHex = color.slice(-2); // Last two characters\n        var alphaDecimal = parseInt(alphaHex, 16); // Convert to decimal\n        // Check if alpha is zero (transparent)\n        return alphaDecimal === 0;\n    };\n    /**\n     * @param {string} color - Gets the background color with transparency.\n     * @returns {string} - It's return background color with transparency.\n     * @private\n     */\n    PdfViewerUtils.setTransparencyToHex = function (color) {\n        if (color.includes('#')) {\n            if (color.length > 8 && color !== '#00000000') {\n                color = color.slice(0, -2) + '60';\n            }\n            else {\n                color += '60';\n            }\n        }\n        return color;\n    };\n    /**\n     * @param {string} color - Gets the background color without transparency.\n     * @returns {string} - It's return background color without transparency.\n     * @private\n     */\n    PdfViewerUtils.removeAlphaValueFromHex = function (color) {\n        if (color.includes('#')) {\n            if (color.length > 8) {\n                color = color.slice(0, -2);\n            }\n        }\n        return color;\n    };\n    PdfViewerUtils.fetchData = function (filePath) {\n        return fetch(filePath)\n            .then(function (response) {\n            if (!response.ok) {\n                return null;\n            }\n            return response.arrayBuffer().then(function (buffer) { return new Uint8Array(buffer); });\n        })\n            .catch(function () { return null; });\n    };\n    PdfViewerUtils.convertByteArrayToBase64 = function (byteArray) {\n        var binaryString = '';\n        var byteArrayLength = byteArray.byteLength;\n        for (var i = 0; i < byteArrayLength; i++) {\n            binaryString += String.fromCharCode(byteArray[parseInt(i.toString(), 10)]);\n        }\n        return btoa(binaryString);\n    };\n    /**\n     * @private\n     * @param {number} value - It describes about the value\n     * @returns {number} - number\n     */\n    PdfViewerUtils.convertPixelToPoint = function (value) {\n        return (value * 72 / 96);\n    };\n    /**\n     * Method to deep-shallow copy an object, only if it is a Proxy\n     *\n     * @private\n     * @param {any} obj - Get the data of the next queued task.\n     * @returns {any} - The copied object if it was a Proxy; otherwise, returns the original object.\n     */\n    PdfViewerUtils.cloneProxy = function (obj) {\n        if (this.isProxy(obj)) {\n            var copy = Object.assign({}, obj);\n            for (var key in copy) {\n                // eslint-disable-next-line security/detect-object-injection\n                if (this.isProxy(copy[key])) {\n                    // eslint-disable-next-line security/detect-object-injection\n                    copy[key] = this.cloneProxy(copy[key]); // Recursively process each property\n                }\n            }\n            return copy;\n        }\n        return obj;\n    };\n    /**\n     * Method to check if a value is a plain object (Proxy detection)\n     *\n     * @private\n     * @param {any} value - Get the data of the next queued task.\n     * @returns {boolean} - Returns true if the value is a Proxy; otherwise, false.\n     */\n    PdfViewerUtils.isProxy = function (value) {\n        return Object.prototype.toString.call(value) === '[object Object]';\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerUtils.createGUID = function () {\n        return this.getRandomNumber();\n    };\n    PdfViewerUtils.getRandomNumber = function () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var random = Math.random() * 16 | 0;\n            var v = c === 'x' ? random : (random & 0x3 | 0x8);\n            return random.toString(16);\n        });\n    };\n    return PdfViewerUtils;\n}());\n\n/**\n *\n * @hidden\n */\nvar PdfViewerSessionStorage = /** @class */ (function () {\n    // Constructor\n    function PdfViewerSessionStorage(enableLocalStorage) {\n        // Fields\n        this.localStorage = {};\n        /**\n         * @private\n         */\n        this.enableLocalStorage = true;\n        /**\n         * @private\n         */\n        this.documentId = '';\n        // eslint-disable-next-line camelcase\n        this.enableLocalStorage = enableLocalStorage;\n    }\n    /**\n     * Method to set an item in either session or local storage\n     *\n     * @param {string} key - Get the key.\n     * @param {string} value - Get the value.\n     * @private\n     * @returns {void}\n     */\n    PdfViewerSessionStorage.prototype.setItem = function (key, value) {\n        if (this.enableLocalStorage) {\n            this.localStorage[\"\" + key] = value;\n        }\n        else {\n            window.sessionStorage.setItem(key, value);\n        }\n    };\n    /**\n     * Method to get an item from either session or local storage\n     *\n     * @param {string} key - Get the key.\n     * @private\n     * @returns {any} - It's return the value.\n     */\n    PdfViewerSessionStorage.prototype.getItem = function (key) {\n        if (this.enableLocalStorage) {\n            return (key in this.localStorage) ? this.localStorage[\"\" + key] : null;\n        }\n        else {\n            return window.sessionStorage.getItem(key);\n        }\n    };\n    /**\n     * Method to remove an item from either session or local storage\n     *\n     * @param {string} key - Get the key.\n     * @private\n     * @returns {void}\n     */\n    PdfViewerSessionStorage.prototype.removeItem = function (key) {\n        if (this.enableLocalStorage) {\n            delete this.localStorage[\"\" + key];\n        }\n        else {\n            window.sessionStorage.removeItem(key);\n        }\n    };\n    /**\n     * Method to return the length of the storage\n     *\n     * @private\n     * @returns {number} - return the length of the session.\n     */\n    PdfViewerSessionStorage.prototype.getSessionLength = function () {\n        if (this.enableLocalStorage) {\n            return Object.keys(this.localStorage).length;\n        }\n        else {\n            return window.sessionStorage.length;\n        }\n    };\n    /**\n     * Method to return the key at the specified index\n     *\n     * @param {number} index - Get the index.\n     * @private\n     * @returns {any} - It's return the key value.\n     */\n    PdfViewerSessionStorage.prototype.getKey = function (index) {\n        if (this.enableLocalStorage) {\n            var keys = Object.keys(this.localStorage);\n            return keys[parseInt(index.toString(), 10)] || null;\n        }\n        else {\n            return window.sessionStorage.key(index);\n        }\n    };\n    /**\n     * Method to return the window session storage size.\n     *\n     * @private\n     * @returns {any} - It's return the key value.\n     */\n    PdfViewerSessionStorage.prototype.getWindowSessionStorageSize = function () {\n        return Math.round(JSON.stringify(window.sessionStorage).length / 1024);\n    };\n    /**\n     * Method to move all items from sessionStorage to localStorage\n     *\n     * @param {boolean} enableLocalStorage - Get the enableLocalStorage value.\n     * @private\n     * @returns {void}\n     */\n    PdfViewerSessionStorage.prototype.migrateToLocalStorage = function (enableLocalStorage) {\n        // eslint-disable-next-line camelcase\n        this.enableLocalStorage = enableLocalStorage;\n        if (this.enableLocalStorage) {\n            // Move all session storage items to local storage\n            var removingItems = this.getRemovingItems();\n            for (var i = 0; i < removingItems.length; i++) {\n                var key = removingItems[parseInt(i.toString(), 10)];\n                if (key) {\n                    var value = window.sessionStorage.getItem(key);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value) && this.documentId !== '' && key.indexOf(this.documentId) !== -1) {\n                        this.localStorage[\"\" + key] = value;\n                        window.sessionStorage.removeItem(key);\n                    }\n                }\n            }\n            removingItems = null;\n        }\n    };\n    /**\n     * Method to clear all viewer items from sessionStorage and localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    PdfViewerSessionStorage.prototype.clear = function () {\n        if (this.enableLocalStorage) {\n            this.localStorage = {};\n        }\n        else {\n            var removingItems = this.getRemovingItems();\n            for (var i = 0; i < removingItems.length; i++) {\n                var key = removingItems[parseInt(i.toString(), 10)];\n                if (key.indexOf('Sync_PdfViewer_') !== -1) {\n                    window.sessionStorage.removeItem(key);\n                }\n            }\n            removingItems = null;\n        }\n    };\n    PdfViewerSessionStorage.prototype.getRemovingItems = function () {\n        var keysToProcess = [];\n        for (var i = 0; i < window.sessionStorage.length; i++) {\n            var key = window.sessionStorage.key(i);\n            if (key) {\n                keysToProcess.push(key);\n            }\n        }\n        return keysToProcess;\n    };\n    return PdfViewerSessionStorage;\n}());\n\n/**\n *\n * @hidden\n */\nvar TaskPriorityLevel;\n(function (TaskPriorityLevel) {\n    TaskPriorityLevel[TaskPriorityLevel[\"High\"] = 1] = \"High\";\n    TaskPriorityLevel[TaskPriorityLevel[\"Medium\"] = 2] = \"Medium\";\n    TaskPriorityLevel[TaskPriorityLevel[\"Low\"] = 3] = \"Low\";\n})(TaskPriorityLevel || (TaskPriorityLevel = {}));\n/**\n *\n * @hidden\n */\nvar PdfiumTaskScheduler = /** @class */ (function () {\n    // Constructor\n    function PdfiumTaskScheduler(workerScript, pdfViewer) {\n        this.taskQueue = [];\n        this.isProcessing = false;\n        this.functionManager = {};\n        this.worker = new Worker(workerScript);\n        this.taskQueue = [];\n        this.isProcessing = false;\n        this.pdfViewer = pdfViewer;\n        this.functionManager = {};\n    }\n    /**\n     * Method to add the given task into request for the worker\n     *\n     * @param {any} taskData - Get the task data.\n     * @param {TaskPriorityLevel} priority - Get the priority level for the task.\n     * @private\n     * @returns {void}\n     */\n    PdfiumTaskScheduler.prototype.addTask = function (taskData, priority) {\n        if (taskData.message === 'unloadFPDF') {\n            this.taskQueue = [];\n            this.functionManager = {};\n        }\n        this.taskQueue.push({ taskData: taskData, priority: priority });\n        this.taskQueue.sort(function (a, b) { return a.priority - b.priority; }); // Sort by priority\n        this.processQueue(); // Start processing if idle\n    };\n    /**\n     * Method to request posted for the queue task\n     *\n     * @returns {void}\n     */\n    PdfiumTaskScheduler.prototype.processQueue = function () {\n        if (this.isProcessing || this.taskQueue.length === 0) {\n            return;\n        }\n        var nextTask = this.taskQueue.shift();\n        this.isProcessing = true;\n        var isVue3 = this.pdfViewer.isVue3 || (this.pdfViewer.parent && this.pdfViewer.parent.isVue3);\n        var taskData = isVue3 ? PdfViewerUtils.cloneProxy(nextTask.taskData) : nextTask.taskData;\n        this.worker.postMessage(taskData);\n    };\n    /**\n     * Method to call on message for the worker\n     *\n     * @param {string} key - Get the key value for the method function.\n     * @param {any} method - Get the method for the onmessage.\n     * @private\n     * @returns {void}\n     */\n    PdfiumTaskScheduler.prototype.onMessage = function (key, method) {\n        var _this = this;\n        if (!Object.prototype.hasOwnProperty.call(this.functionManager, key)) {\n            this.functionManager[\"\" + key] = method;\n        }\n        this.worker.onmessage = function (event) {\n            if (event.data.message !== '') {\n                for (var handlerKey in _this.functionManager) {\n                    if (Object.prototype.hasOwnProperty.call(_this.functionManager, handlerKey) &&\n                        handlerKey.includes(event.data.message)) {\n                        _this.functionManager[\"\" + handlerKey](event);\n                        break;\n                    }\n                }\n            }\n            _this.isProcessing = false;\n            _this.processQueue();\n        };\n    };\n    /**\n     * Method to terminate the worker\n     *\n     * @private\n     * @returns {void}\n     */\n    PdfiumTaskScheduler.prototype.terminate = function () {\n        this.worker.terminate();\n        this.functionManager = {};\n    };\n    return PdfiumTaskScheduler;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js?");

/***/ })

}]);