"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_i"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AxisRenderer: () => (/* reexport safe */ _utils_renderer__WEBPACK_IMPORTED_MODULE_2__.AxisRenderer),\n/* harmony export */   BarSeries3D: () => (/* reexport safe */ _series_bar_series__WEBPACK_IMPORTED_MODULE_15__.BarSeries3D),\n/* harmony export */   BinaryTreeBuilder: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.BinaryTreeBuilder),\n/* harmony export */   CartesianAxisLayoutPanel: () => (/* reexport safe */ _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__.CartesianAxisLayoutPanel),\n/* harmony export */   Category3D: () => (/* reexport safe */ _axis_category_axis__WEBPACK_IMPORTED_MODULE_6__.Category3D),\n/* harmony export */   Chart3D: () => (/* reexport safe */ _chart3D__WEBPACK_IMPORTED_MODULE_0__.Chart3D),\n/* harmony export */   Chart3DAxis: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DAxis),\n/* harmony export */   Chart3DColumn: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DColumn),\n/* harmony export */   Chart3DDataLabelSettings: () => (/* reexport safe */ _series_chart_series__WEBPACK_IMPORTED_MODULE_11__.Chart3DDataLabelSettings),\n/* harmony export */   Chart3DEmptyPointSettings: () => (/* reexport safe */ _series_chart_series__WEBPACK_IMPORTED_MODULE_11__.Chart3DEmptyPointSettings),\n/* harmony export */   Chart3DLegendSettings: () => (/* reexport safe */ _legend_legend__WEBPACK_IMPORTED_MODULE_17__.Chart3DLegendSettings),\n/* harmony export */   Chart3DMajorGridLines: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DMajorGridLines),\n/* harmony export */   Chart3DMajorTickLines: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DMajorTickLines),\n/* harmony export */   Chart3DMinorGridLines: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DMinorGridLines),\n/* harmony export */   Chart3DMinorTickLines: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DMinorTickLines),\n/* harmony export */   Chart3DPoint: () => (/* reexport safe */ _series_chart_series__WEBPACK_IMPORTED_MODULE_11__.Chart3DPoint),\n/* harmony export */   Chart3DRender: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Chart3DRender),\n/* harmony export */   Chart3DRow: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Chart3DRow),\n/* harmony export */   Chart3DSeries: () => (/* reexport safe */ _series_chart_series__WEBPACK_IMPORTED_MODULE_11__.Chart3DSeries),\n/* harmony export */   Chart3DTextFont: () => (/* reexport safe */ _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_22__.Chart3DTextFont),\n/* harmony export */   Chart3DTooltipSettings: () => (/* reexport safe */ _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_18__.Chart3DTooltipSettings),\n/* harmony export */   ChartTransform3D: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.ChartTransform3D),\n/* harmony export */   ColumnSeries3D: () => (/* reexport safe */ _series_column_series__WEBPACK_IMPORTED_MODULE_12__.ColumnSeries3D),\n/* harmony export */   DataLabel3D: () => (/* reexport safe */ _series_data_label__WEBPACK_IMPORTED_MODULE_16__.DataLabel3D),\n/* harmony export */   DateTime3D: () => (/* reexport safe */ _axis_date_time_axis__WEBPACK_IMPORTED_MODULE_7__.DateTime3D),\n/* harmony export */   DateTimeCategory3D: () => (/* reexport safe */ _axis_date_time_category_axis__WEBPACK_IMPORTED_MODULE_8__.DateTimeCategory3D),\n/* harmony export */   Double3D: () => (/* reexport safe */ _axis_double_axis__WEBPACK_IMPORTED_MODULE_9__.Double3D),\n/* harmony export */   Export3D: () => (/* reexport safe */ _print_export_export__WEBPACK_IMPORTED_MODULE_21__.Export3D),\n/* harmony export */   Graphics3D: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Graphics3D),\n/* harmony export */   Highlight3D: () => (/* reexport safe */ _user_interaction_high_light__WEBPACK_IMPORTED_MODULE_20__.Highlight3D),\n/* harmony export */   Legend3D: () => (/* reexport safe */ _legend_legend__WEBPACK_IMPORTED_MODULE_17__.Legend3D),\n/* harmony export */   Logarithmic3D: () => (/* reexport safe */ _axis_logarithmic_axis__WEBPACK_IMPORTED_MODULE_10__.Logarithmic3D),\n/* harmony export */   Matrix3D: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Matrix3D),\n/* harmony export */   NiceIntervals: () => (/* reexport safe */ _axis_axis_helper__WEBPACK_IMPORTED_MODULE_4__.NiceIntervals),\n/* harmony export */   Polygon3D: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Polygon3D),\n/* harmony export */   Selection3D: () => (/* reexport safe */ _user_interaction_selection__WEBPACK_IMPORTED_MODULE_19__.Selection3D),\n/* harmony export */   StackingBarSeries3D: () => (/* reexport safe */ _series_stacking_bar_series__WEBPACK_IMPORTED_MODULE_14__.StackingBarSeries3D),\n/* harmony export */   StackingColumnSeries3D: () => (/* reexport safe */ _series_stacking_column_series__WEBPACK_IMPORTED_MODULE_13__.StackingColumnSeries3D),\n/* harmony export */   Svg3DRenderer: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Svg3DRenderer),\n/* harmony export */   TitleBorder: () => (/* reexport safe */ _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_22__.TitleBorder),\n/* harmony export */   TitleSettings: () => (/* reexport safe */ _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_22__.TitleSettings),\n/* harmony export */   Tooltip3D: () => (/* reexport safe */ _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_18__.Tooltip3D),\n/* harmony export */   Vector3D: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.Vector3D),\n/* harmony export */   Visible3DLabels: () => (/* reexport safe */ _axis_axis__WEBPACK_IMPORTED_MODULE_3__.Visible3DLabels),\n/* harmony export */   WallRenderer: () => (/* reexport safe */ _utils_renderer__WEBPACK_IMPORTED_MODULE_2__.WallRenderer),\n/* harmony export */   get3DSeriesColor: () => (/* reexport safe */ _model_theme__WEBPACK_IMPORTED_MODULE_23__.get3DSeriesColor),\n/* harmony export */   get3DThemeColor: () => (/* reexport safe */ _model_theme__WEBPACK_IMPORTED_MODULE_23__.get3DThemeColor),\n/* harmony export */   getMinPointsDeltaValue: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.getMinPointsDeltaValue),\n/* harmony export */   valueToCoefficients: () => (/* reexport safe */ _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__.valueToCoefficients)\n/* harmony export */ });\n/* harmony import */ var _chart3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart3D */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/chart3D.js\");\n/* harmony import */ var _utils_chart3dRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/chart3dRender */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/chart3dRender.js\");\n/* harmony import */ var _utils_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/renderer */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/utils/renderer.js\");\n/* harmony import */ var _axis_axis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./axis/axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis.js\");\n/* harmony import */ var _axis_axis_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axis/axis-helper */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis-helper.js\");\n/* harmony import */ var _axis_cartesian_panel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./axis/cartesian-panel */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/cartesian-panel.js\");\n/* harmony import */ var _axis_category_axis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./axis/category-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/category-axis.js\");\n/* harmony import */ var _axis_date_time_axis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./axis/date-time-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/date-time-axis.js\");\n/* harmony import */ var _axis_date_time_category_axis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./axis/date-time-category-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/date-time-category-axis.js\");\n/* harmony import */ var _axis_double_axis__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./axis/double-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/double-axis.js\");\n/* harmony import */ var _axis_logarithmic_axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./axis/logarithmic-axis */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/axis/logarithmic-axis.js\");\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/chart-series.js\");\n/* harmony import */ var _series_column_series__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./series/column-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/column-series.js\");\n/* harmony import */ var _series_stacking_column_series__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./series/stacking-column-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/stacking-column-series.js\");\n/* harmony import */ var _series_stacking_bar_series__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./series/stacking-bar-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/stacking-bar-series.js\");\n/* harmony import */ var _series_bar_series__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./series/bar-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/bar-series.js\");\n/* harmony import */ var _series_data_label__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./series/data-label */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/series/data-label.js\");\n/* harmony import */ var _legend_legend__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js\");\n/* harmony import */ var _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./user-interaction/tooltip */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/tooltip.js\");\n/* harmony import */ var _user_interaction_selection__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./user-interaction/selection */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/selection.js\");\n/* harmony import */ var _user_interaction_high_light__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./user-interaction/high-light */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/user-interaction/high-light.js\");\n/* harmony import */ var _print_export_export__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./print-export/export */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/print-export/export.js\");\n/* harmony import */ var _model_chart3d_Interface__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./model/chart3d-Interface */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-charts/src/chart3d/model/theme.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/index.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart3DTextFont: () => (/* binding */ Chart3DTextFont),\n/* harmony export */   TitleBorder: () => (/* binding */ TitleBorder),\n/* harmony export */   TitleSettings: () => (/* binding */ TitleSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/**\n * Configures the fonts in charts.\n */\nvar Chart3DTextFont = /** @class */ (function (_super) {\n    __extends(Chart3DTextFont, _super);\n    function Chart3DTextFont() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], Chart3DTextFont.prototype, \"fontStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('16px')\n    ], Chart3DTextFont.prototype, \"size\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], Chart3DTextFont.prototype, \"fontWeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Chart3DTextFont.prototype, \"color\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Segoe UI')\n    ], Chart3DTextFont.prototype, \"fontFamily\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Chart3DTextFont.prototype, \"opacity\", void 0);\n    return Chart3DTextFont;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the borders in the 3D chart title.\n */\nvar TitleBorder = /** @class */ (function (_super) {\n    __extends(TitleBorder, _super);\n    function TitleBorder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('transparent')\n    ], TitleBorder.prototype, \"color\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], TitleBorder.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0.8)\n    ], TitleBorder.prototype, \"cornerRadius\", void 0);\n    return TitleBorder;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the title settings in 3D chart.\n */\nvar TitleSettings = /** @class */ (function (_super) {\n    __extends(TitleSettings, _super);\n    function TitleSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], TitleSettings.prototype, \"fontStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('15px')\n    ], TitleSettings.prototype, \"size\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('500')\n    ], TitleSettings.prototype, \"fontWeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TitleSettings.prototype, \"color\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Center')\n    ], TitleSettings.prototype, \"textAlignment\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Segoe UI')\n    ], TitleSettings.prototype, \"fontFamily\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], TitleSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Wrap')\n    ], TitleSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Top')\n    ], TitleSettings.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], TitleSettings.prototype, \"x\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], TitleSettings.prototype, \"y\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('transparent')\n    ], TitleSettings.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, TitleBorder)\n    ], TitleSettings.prototype, \"border\", void 0);\n    return TitleSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/model/chart3d-Interface.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/print-export/export.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/print-export/export.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Export3D: () => (/* binding */ Export3D)\n/* harmony export */ });\n/* harmony import */ var _common_utils_export__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/export */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/export.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n\n\n/**\n * The `Export3DModule` module is used to print and export the rendered chart.\n */\nvar Export3D = /** @class */ (function () {\n    /**\n     * Constructor for export module.\n     *\n     * @private\n     */\n    function Export3D(chart) {\n        this.chart = chart;\n    }\n    /**\n     * Export the chart on the page to PNG, JPEG, or SVG format.\n     *\n     * @param {number} type - The format in which the chart will be exported.\n     * @param {string} fileName - The name of the exported file.\n     * @returns {void}\n     */\n    Export3D.prototype.export = function (type, fileName) {\n        var exportChart = new _common_utils_export__WEBPACK_IMPORTED_MODULE_0__.ExportUtils(this.chart);\n        var argsData = {\n            cancel: false, width: null, height: null\n        };\n        this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_1__.beforeExport, argsData);\n        if (!argsData.cancel) {\n            exportChart.export(type, fileName, undefined, [this.chart]);\n        }\n    };\n    /**\n     * Export the chart on the page to a PDF document.\n     *\n     * @param {string} fileName - The name of the exported file.\n     * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\n     * @param {Chart3D[]} controls - Array of controls to be exported.\n     * @param {number} width - The width of the exported chart.\n     * @param {number} height - The height of the exported chart.\n     * @param {boolean} isVertical - Export the chart vertically or horizontally.\n     * @param {string} header - Text to appear at the top of the exported PDF document.\n     * @param {string} footer - Text to appear at the bottom of the exported PDF document.\n     * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\n     * @returns {void}\n     */\n    Export3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n        var exportChart = new _common_utils_export__WEBPACK_IMPORTED_MODULE_0__.ExportUtils(this.chart);\n        controls = controls ? controls : [this.chart];\n        var argsData = {\n            cancel: false, width: width, height: height\n        };\n        this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_1__.beforeExport, argsData);\n        if (!argsData.cancel) {\n            exportChart.export('PDF', fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n        }\n    };\n    /**\n     * Gets a data URL for the rendered 3D chart as an HTML canvas element, including data URL and blob URL if available.\n     *\n     * @param {Chart3D} chart - The 3D chart for which the data URL is requested.\n     * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string }} An object containing the HTML canvas element, data URL, and blob URL.\n     */\n    Export3D.prototype.getDataUrl = function (chart) {\n        var exportUtil = new _common_utils_export__WEBPACK_IMPORTED_MODULE_0__.ExportUtils(chart);\n        return exportUtil.getDataUrl(chart);\n    };\n    /**\n     * Gets the module name for the current component.\n     *\n     * @returns {string} The module name.\n     */\n    Export3D.prototype.getModuleName = function () {\n        // Returns the module name\n        return 'Export3D';\n    };\n    /**\n     * To destroy the export modules.\n     *\n     * @returns {void}\n     * @private\n     */\n    Export3D.prototype.destroy = function () {\n        // Destroy method performed here\n    };\n    return Export3D;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/print-export/export.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/series/bar-series.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/series/bar-series.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BarSeries3D: () => (/* binding */ BarSeries3D)\n/* harmony export */ });\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n\n/**\n * `BarSeries` module is used to render the bar series.\n */\nvar BarSeries3D = /** @class */ (function () {\n    function BarSeries3D() {\n    }\n    /**\n     * Draws the Bar series on a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to be drawn.\n     * @param {Chart3D} chart - The 3D chart on which the series will be drawn.\n     * @returns {void}\n     */\n    BarSeries3D.prototype.draw = function (series, chart) {\n        this.createSegments(series);\n        for (var i = 0; i < series.visiblePoints.length; i++) {\n            var point = series.visiblePoints[i];\n            if (point.visible) {\n                var argsData = {\n                    cancel: false, series: series, point: point,\n                    fill: series.setPointColor(point, series.interior)\n                };\n                chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_0__.pointRender, argsData);\n                point.color = argsData.fill;\n                point.plans = null;\n                if (!argsData.cancel) {\n                    this.update(argsData.series, argsData.point, i, chart);\n                }\n                else {\n                    point.symbolLocations = null;\n                }\n            }\n        }\n    };\n    /**\n     * Updates a specific point in a bar series on a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to which the point belongs.\n     * @param {Chart3DPoint} point - The point to be updated.\n     * @param {number} pointIndex - The index of the point within the series.\n     * @param {Chart3D} chart - The 3D chart to which the series and point belong.\n     * @returns {void}\n     */\n    BarSeries3D.prototype.update = function (series, point, pointIndex, chart) {\n        var seriesIndex = chart.visibleSeries.indexOf(series);\n        var left = point.left;\n        var right = point.right;\n        var bottom = series.yAxis.valueType === 'Logarithmic' ? Math.pow(series.yAxis.logBase, series.yAxis.visibleRange.min) : series.yAxis.visibleRange.min;\n        var top = series.yAxis.valueType === 'Logarithmic' ? Math.pow(series.yAxis.logBase, series.yAxis.visibleRange.max) : series.yAxis.visibleRange.max;\n        var xStart = series.xAxis.visibleRange.min;\n        var xEnd = series.xAxis.visibleRange.max;\n        if (!((left >= xStart && left <= xEnd) || (right >= xStart && right <= xEnd))) {\n            return;\n        }\n        var topValue;\n        if (point.top < 0) {\n            topValue = point.top > bottom ? point.top : bottom;\n        }\n        else {\n            topValue = (series.yAxis.valueType && series.yAxis.valueType.toLowerCase() === 'logarithmic') ? point.top : point.top < top ? point.top : top;\n        }\n        var tlpoint = chart.svg3DRenderer.transform3DToVisible(series, point.left > xStart ?\n            point.left : xStart, topValue, chart);\n        var rbpoint = chart.svg3DRenderer.transform3DToVisible(series, xEnd > point.right ? point.right : xEnd, bottom > point.bottom ? bottom : point.bottom, chart);\n        var tlfVector = chart.vector.vector3D(Math.min(tlpoint.x, rbpoint.x), Math.min(tlpoint.y, rbpoint.y), point.startDepth);\n        var brbVector = chart.vector.vector3D(Math.max(tlpoint.x, rbpoint.x), Math.max(tlpoint.y, rbpoint.y), point.endDepth);\n        var styleOptions = series.setStyle(series);\n        var name = 'region' + '-series-' + seriesIndex + '-point-' + pointIndex;\n        if (series.columnFacet === 'Cylinder') {\n            chart.polygon.createCylinder(tlfVector, brbVector, chart, pointIndex, series.type, '', point.color, null, styleOptions.opacity, name, chart.chart3D);\n        }\n        else {\n            chart.polygon.createBox(tlfVector, brbVector, chart, pointIndex, '', point.color, null, styleOptions.opacity, chart.requireInvertedAxis, name, chart.chart3D);\n        }\n    };\n    /**\n     * Creates segments for a bar series within a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series for which segments will be created.\n     * @returns {void}\n     */\n    BarSeries3D.prototype.createSegments = function (series) {\n        var xValues = series.getXValues(series.visiblePoints);\n        var YValues = series.getYValues(series.visiblePoints);\n        if (xValues == null) {\n            return;\n        }\n        series.isRectSeries = true;\n        var sbsInfo = series.getSideBySideInfo(series);\n        var depthInfo = series.getSegmentDepth(series);\n        var crossValue = 0;\n        var median = sbsInfo.delta / 2;\n        var visiblePoints = series.visiblePoints;\n        var cons = 0.2;\n        for (var i = 0; i < visiblePoints.length; i++) {\n            var x1 = xValues[i] + sbsInfo.start;\n            var x2 = xValues[i] + sbsInfo.end;\n            var y1 = YValues[i];\n            var y2 = crossValue;\n            this.setData(x1, y1, x2, y2, depthInfo.start, depthInfo.end, series, visiblePoints[i]);\n            if (!series.dataLabel.visible) {\n                continue;\n            }\n            visiblePoints[i].symbolLocations = { x: 0, y: 0, z: 0 };\n            switch (series.dataLabel.position) {\n                case 'Top':\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = y1;\n                    visiblePoints[i].symbolLocations.z = depthInfo.start;\n                    break;\n                case 'Bottom':\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = y2 - cons + series.yAxis.visibleRange.min;\n                    visiblePoints[i].symbolLocations.z = depthInfo.start + (depthInfo.end - depthInfo.start) / 2;\n                    break;\n                default:\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = Math.abs(y2 - y1) / 2 + (series.yAxis.visibleRange.min / 2);\n                    visiblePoints[i].symbolLocations.z = depthInfo.start;\n                    break;\n            }\n        }\n    };\n    /**\n     * Sets data for a bar series in a 3D chart.\n     *\n     * @param {number} x1 - The x-coordinate of the starting point of the segment.\n     * @param {number} y1 - The y-coordinate of the starting point of the segment.\n     * @param {number} x2 - The x-coordinate of the ending point of the segment.\n     * @param {number} y2 - The y-coordinate of the ending point of the segment.\n     * @param {number} start - The starting value of the segment on the axis.\n     * @param {number} end - The ending value of the segment on the axis.\n     * @param {Chart3DSeries} series - The 3D series to which the segment belongs.\n     * @param {Chart3DPoint} point - The point associated with the segment.\n     * @returns {void}\n     */\n    BarSeries3D.prototype.setData = function (x1, y1, x2, y2, start, end, series, point) {\n        point.left = x1;\n        point.bottom = y2;\n        point.top = y1;\n        point.right = x2;\n        point.startDepth = start;\n        point.endDepth = end;\n        point.xRange = series.getDoubleRange(point.left, point.right);\n        if (!isNaN(point.top) && !isNaN(point.bottom)) {\n            point.yRange = series.getDoubleRange(point.top, point.bottom);\n        }\n    };\n    /**\n     * To destroy the bar series.\n     *\n     * @returns {void}\n     * @private\n     */\n    BarSeries3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    /**\n     * Gets the module name for the Bar 3D series.\n     *\n     * @returns {string} - Returns module name.\n     */\n    BarSeries3D.prototype.getModuleName = function () {\n        return 'BarSeries3D';\n        /**\n         * return the module name.\n         */\n    };\n    return BarSeries3D;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/series/bar-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/series/column-series.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/series/column-series.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnSeries3D: () => (/* binding */ ColumnSeries3D)\n/* harmony export */ });\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n\nvar ColumnSeries3D = /** @class */ (function () {\n    function ColumnSeries3D() {\n    }\n    /**\n     * Draws the column 3D series on a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to be drawn.\n     * @param {Chart3D} chart - The 3D chart on which the series will be drawn.\n     * @returns {void}\n     */\n    ColumnSeries3D.prototype.draw = function (series, chart) {\n        this.createSegments(series);\n        for (var i = 0; i < series.visiblePoints.length; i++) {\n            var point = series.visiblePoints[i];\n            if (point.visible) {\n                var argsData = {\n                    cancel: false, series: series, point: point,\n                    fill: series.setPointColor(point, series.interior)\n                };\n                chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_0__.pointRender, argsData);\n                point.color = argsData.fill;\n                point.plans = null;\n                if (!argsData.cancel) {\n                    this.update(argsData.series, argsData.point, i, chart);\n                }\n                else {\n                    point.symbolLocations = null;\n                }\n            }\n        }\n    };\n    /**\n     * Updates a specific point in a column series on a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to which the point belongs.\n     * @param {Chart3DPoint} point - The point to be updated.\n     * @param {number} pointIndex - The index of the point within the series.\n     * @param {Chart3D} chart - The 3D chart to which the series and point belong.\n     * @returns {void}\n     */\n    ColumnSeries3D.prototype.update = function (series, point, pointIndex, chart) {\n        var seriesIndex = series.index;\n        var left = point.left;\n        var right = point.right;\n        var bottom = series.yAxis.valueType === 'Logarithmic' ? Math.pow(series.yAxis.logBase, series.yAxis.visibleRange.min) : series.yAxis.visibleRange.min;\n        var top = series.yAxis.valueType === 'Logarithmic' ? Math.pow(series.yAxis.logBase, series.yAxis.visibleRange.max) : series.yAxis.visibleRange.max;\n        var xStart = series.xAxis.visibleRange.min;\n        var xEnd = series.xAxis.visibleRange.max;\n        if (!((left >= xStart) && (left <= xEnd)) || !((right >= xStart) && (right <= xEnd))) {\n            return;\n        }\n        var topValue;\n        if (point.top < 0) {\n            topValue = (point.top > bottom) ? point.top : bottom;\n        }\n        else {\n            topValue = (series.yAxis.valueType && series.yAxis.valueType.toLowerCase() === 'logarithmic') ? point.top : (point.top < top) ? point.top : top;\n        }\n        var tlpoint = chart.svg3DRenderer.transform3DToVisible(series, (point.left > xStart)\n            ? point.left : xStart, topValue, chart);\n        var rbpoint = chart.svg3DRenderer.transform3DToVisible(series, (xEnd > point.right) ? point.right : xEnd, (bottom > point.bottom) ? bottom : point.bottom, chart);\n        var tlfVector = chart.vector.vector3D(Math.min(tlpoint.x, rbpoint.x), Math.min(tlpoint.y, rbpoint.y), point.startDepth);\n        var brbVector = chart.vector.vector3D(Math.max(tlpoint.x, rbpoint.x), Math.max(tlpoint.y, rbpoint.y), point.endDepth);\n        var styleOptions = series.setStyle(series);\n        var name = 'region' + '-series-' + seriesIndex + '-point-' + pointIndex;\n        var accessibilityText = point.x + ':' + point.yValue + ', ' + series.name;\n        if (series.columnFacet === 'Cylinder') {\n            chart.polygon.createCylinder(tlfVector, brbVector, chart, pointIndex, series.type, '', point.color, null, styleOptions.opacity, name, chart.chart3D);\n        }\n        else if (series.columnFacet === 'Rectangle') {\n            chart.polygon.createBox(tlfVector, brbVector, chart, pointIndex, '', point.color, null, styleOptions.opacity, chart.requireInvertedAxis, name, chart.chart3D, accessibilityText);\n        }\n    };\n    /**\n     * Creates segments for a column series within a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series for which segments will be created.\n     * @returns {void}\n     */\n    ColumnSeries3D.prototype.createSegments = function (series) {\n        var xValues = series.getXValues(series.visiblePoints);\n        var YValues = series.getYValues(series.visiblePoints);\n        if (xValues == null || YValues == null) {\n            return;\n        }\n        var sbsInfo = series.getSideBySideInfo(series);\n        var depthInfo = series.getSegmentDepth(series);\n        var crossValue = 0;\n        var median = sbsInfo.delta / 2;\n        var visiblePoints = series.visiblePoints;\n        var cons = 0.2;\n        for (var i = 0; i < visiblePoints.length; i++) {\n            var x1 = xValues[i] + sbsInfo.start;\n            var x2 = xValues[i] + sbsInfo.end;\n            var y1 = YValues[i];\n            var y2 = crossValue;\n            this.setData(x1, y1, x2, y2, depthInfo.start, depthInfo.end, series, visiblePoints[i]);\n            if (!series.dataLabel.visible) {\n                continue;\n            }\n            visiblePoints[i].symbolLocations = { x: 0, y: 0, z: 0 };\n            switch (series.dataLabel.position) {\n                case 'Top':\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = y1;\n                    visiblePoints[i].symbolLocations.z = depthInfo.start;\n                    break;\n                case 'Bottom':\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = y2 - cons + series.yAxis.visibleRange.min;\n                    visiblePoints[i].symbolLocations.z = depthInfo.start + (depthInfo.end - depthInfo.start) / 2;\n                    break;\n                default:\n                    visiblePoints[i].symbolLocations.x = x1 + median;\n                    visiblePoints[i].symbolLocations.y = Math.abs(y2 - y1) / 2 + (series.yAxis.visibleRange.min / 2);\n                    visiblePoints[i].symbolLocations.z = depthInfo.start;\n                    break;\n            }\n        }\n    };\n    /**\n     * Sets data for a column series in a 3D chart.\n     *\n     * @param {number} x1 - The x-coordinate of the starting point of the segment.\n     * @param {number} y1 - The y-coordinate of the starting point of the segment.\n     * @param {number} x2 - The x-coordinate of the ending point of the segment.\n     * @param {number} y2 - The y-coordinate of the ending point of the segment.\n     * @param {number} start - The starting value of the segment on the axis.\n     * @param {number} end - The ending value of the segment on the axis.\n     * @param {Chart3DSeries} series - The 3D series to which the segment belongs.\n     * @param {Chart3DPoint} point - The point associated with the segment.\n     * @returns {void}\n     */\n    ColumnSeries3D.prototype.setData = function (x1, y1, x2, y2, start, end, series, point) {\n        point.left = x1;\n        point.bottom = y2;\n        point.top = y1;\n        point.right = x2;\n        point.startDepth = start;\n        point.endDepth = end;\n        point.xRange = series.getDoubleRange(point.left, point.right);\n        if (!isNaN(point.top) && !isNaN(point.bottom)) {\n            point.yRange = series.getDoubleRange(point.top, point.bottom);\n        }\n    };\n    /**\n     * To destroy the column series.\n     *\n     * @returns {void}\n     * @private\n     */\n    ColumnSeries3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    /**\n     * Gets the module name for the Column3D series.\n     *\n     * @returns {string} - Returns the module name for the Column3D series.\n     */\n    ColumnSeries3D.prototype.getModuleName = function () {\n        return 'ColumnSeries3D';\n        /**\n         * return the module name\n         */\n    };\n    return ColumnSeries3D;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/series/column-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/series/data-label.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/series/data-label.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataLabel3D: () => (/* binding */ DataLabel3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n\n\n\n\n/**\n * The `DataLabel` module is used to render data label for the data point.\n */\nvar DataLabel3D = /** @class */ (function () {\n    /**\n     * Constructor for the data label module.\n     *\n     * @param {Chart3D} chart - Chart3D instance.\n     * @private\n     */\n    function DataLabel3D(chart) {\n        this.chart = chart;\n    }\n    /**\n     * Renders a 3D series on a 3D chart with data labels.\n     *\n     * @param {Chart3DSeries} series - The 3D series to be rendered.\n     * @param {Chart3D} chart - The 3D chart on which the series is rendered.\n     * @param {Chart3DDataLabelSettingsModel} dataLabel - The data label style for the series.\n     * @returns {void}\n     */\n    DataLabel3D.prototype.render = function (series, chart, dataLabel) {\n        var point;\n        var templateId = chart.element.id + '-series-' + series.index + '-data-label-collections';\n        series.dataLabelElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.createElement)('div', { id: templateId });\n        for (var i = 0; i < series.visiblePoints.length; i++) {\n            point = series.visiblePoints[i];\n            if (point.visible) {\n                this.draw3DDataLabel(series, point.index, point, chart, dataLabel);\n            }\n        }\n        if (series.dataLabel.template) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.appendChildElement)(false, document.getElementById(this.chart.element.id + '_Secondary_Element'), series.dataLabelElement, chart.redraw, false, 'x', 'y', null, '', false, false, null);\n        }\n    };\n    /**\n     * Draws data labels for a specific data point in a 3D series on a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {number} pointIndex - The index of the data point within the series.\n     * @param {Chart3DPoint} point - The data point for which data labels are drawn.\n     * @param {Chart3D} chart - The 3D chart that contains the series and data point.\n     * @param {Chart3DDataLabelSettingsModel} dataLabel - The style for data labels.\n     * @returns {void}\n     */\n    DataLabel3D.prototype.draw3DDataLabel = function (series, pointIndex, point, chart, dataLabel) {\n        var pointX;\n        var pointY;\n        var xOffset = 0;\n        var yOffset = 0;\n        var commonEventArgs = { data: null };\n        var pointText = this.getLabelText(point, series, this.chart)[0];\n        var size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_0__.measureText)(pointText, dataLabel.font, this.chart.themeStyle.datalabelFont);\n        var location = chart.svg3DRenderer.transform3DToVisible(series, point.symbolLocations.x, point.symbolLocations.y, chart);\n        pointY = location.y;\n        pointX = location.x;\n        if (series.dataLabel.position === 'Bottom') {\n            pointY = location.y + yOffset;\n        }\n        else {\n            pointY = location.y - yOffset;\n        }\n        pointX = location.x + xOffset;\n        commonEventArgs.data = {\n            text: pointText,\n            location: { x: pointX, y: pointY },\n            series: series,\n            pointIndex: pointIndex\n        };\n        commonEventArgs.data.Text = commonEventArgs.data.text;\n        var argsData = {\n            cancel: false, series: series,\n            point: point, text: pointText, border: dataLabel.border,\n            color: dataLabel.fill, template: dataLabel.template, textStyle: dataLabel.font\n        };\n        chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_1__.textRender, argsData);\n        this.fontBackground = series.dataLabel.position === 'Middle' ? argsData.color === 'transparent' ? point.color : argsData.color : argsData.color;\n        commonEventArgs.data.text = argsData.text;\n        if (!series.dataLabel.template && commonEventArgs.data.Text !== '' && !argsData.cancel) {\n            /**\n             * The element object for data label.\n             */\n            var element_1 = {\n                tag: 'dataLabel',\n                series: series,\n                point: point,\n                pointIndex: pointIndex,\n                id: chart.svgObject.id + series.index + '-data-label' + pointIndex,\n                child: chart.chart3D\n            };\n            chart.graphics.addVisual(chart.polygon.createTextElement(chart.vector.vector3D(pointX, pointY, point.symbolLocations.z), element_1, 0, -size.height), chart);\n        }\n        var tag = !(series.dataLabel && series.dataLabel.template) ? 'text' : 'template';\n        var backgroundColor = this.fontBackground === 'transparent' ? ((this.chart.theme.indexOf('Dark') > -1 || this.chart.theme === 'HighContrast') ? '#000000' : '#FFFFFF') : this.fontBackground;\n        var rgbValue = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.convertHexToColor)((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.colorNameToHex)(backgroundColor));\n        var contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);\n        var font = {\n            size: argsData.textStyle.size || this.chart.themeStyle.datalabelFont.size,\n            fontWeight: argsData.textStyle.fontWeight || this.chart.themeStyle.datalabelFont.fontWeight,\n            fontStyle: argsData.textStyle.fontStyle || chart.themeStyle.datalabelFont.fontStyle,\n            fontFamily: argsData.textStyle.fontFamily || this.chart.themeStyle.datalabelFont.fontFamily,\n            color: argsData.textStyle.color || (this.chart.theme === 'Bootstrap5' ? '#212529' : this.chart.theme === 'Bootstrap5Dark' ? '#DEE2E6' : argsData.textStyle.color),\n            opacity: argsData.textStyle.opacity\n        };\n        var element = {\n            width: size.width,\n            height: size.height,\n            label: commonEventArgs.data,\n            textAnchor: 'middle',\n            tag: tag,\n            font: font,\n            angle: series.dataLabel.angle,\n            id: chart.element.id + '-svg' + '-series-' + series.index + '-point-' + pointIndex + '-data-label',\n            child: chart.chart3D,\n            argsData: argsData,\n            fill: (contrast >= 128) ? (this.chart.theme.indexOf('Tailwind3') > -1 ? '#111827' : '#000000') : '#FFFFFF'\n        };\n        if (!argsData.cancel) {\n            chart.graphics.addVisual(chart.polygon.createTextElement(chart.vector.vector3D(pointX, pointY, point.symbolLocations.z), element, 0, -size.height), chart);\n        }\n    };\n    /**\n     * Gets the text for data labels associated with a specific data point in a 3D series.\n     *\n     * @param {Chart3DPoint} currentPoint - The data point for which data label text is generated.\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {Chart3D} chart - The 3D chart containing the series and data point.\n     * @returns {string[]} An array of text for data labels.\n     */\n    DataLabel3D.prototype.getLabelText = function (currentPoint, series, chart) {\n        var labelFormat = series.dataLabel.format ? series.dataLabel.format : series.yAxis.labelFormat;\n        var text = [];\n        var customLabelFormat = labelFormat.match('{value}') !== null;\n        text.push(currentPoint.text || currentPoint.yValue.toString());\n        if ((labelFormat || chart.useGroupingSeparator) && !currentPoint.text) {\n            series.yAxis.format = chart.intl.getNumberFormat({\n                format: customLabelFormat ? '' : labelFormat,\n                useGrouping: chart.useGroupingSeparator\n            });\n            for (var i = 0; i < text.length; i++) {\n                text[i] = customLabelFormat ? labelFormat.replace('{value}', series.yAxis.format(parseFloat(text[i]))) :\n                    series.yAxis.format(parseFloat(text[i]));\n            }\n        }\n        return text;\n    };\n    /**\n     * Creates a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element to which the data label template is attached.\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {Chart3DDataLabelSettingsModel} dataLabel - The style settings for data labels.\n     * @param {Chart3DPoint} point - The data point for which the data label template is created.\n     * @param {Chart3DTextRenderEventArgs} data - The text render event arguments.\n     * @param {number} labelIndex - The index of the data label.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {Chart3DLocation} location - The location values for the data label.\n     * @returns {void}\n     */\n    DataLabel3D.prototype.createDataLabelTemplate = function (parentElement, series, dataLabel, point, data, labelIndex, redraw, location) {\n        this.margin = { left: 0, right: 0, bottom: 0, top: 0 };\n        var clip = series.clipRect;\n        var childElement = this.createTemplate((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.createElement)('div', {\n            id: this.chart.element.id + '-series-' + series.index + '-data-label-' + labelIndex,\n            styles: 'position: absolute;background-color:' + data.color + ';' +\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getFontStyle)(dataLabel.font, this.chart.themeStyle.datalabelFont) + ';border:' + data.border.width + 'px solid ' + data.border.color + ';'\n        }), data.template, this.chart, point, series, this.chart.element.id + '-data-label-', labelIndex, location);\n        this.calculateTemplateLabelSize(parentElement, childElement, point, series, dataLabel, clip, redraw, location);\n    };\n    /**\n     * Calculates the size of a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element containing the data label template.\n     * @param {HTMLElement} childElement - The child HTML element representing the data label template.\n     * @param {Chart3DPoint} point - The data point for which the data label template size is calculated.\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {Chart3DDataLabelSettingsModel} dataLabel - The style for data labels.\n     * @param {Rect} clip - The rectangular clipping area.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {Chart3DLocation} location - The location values for the data label.\n     * @param {boolean} isReactCallback - Indicates whether the callback is associated with React.\n     * @returns {void}\n     */\n    DataLabel3D.prototype.calculateTemplateLabelSize = function (parentElement, childElement, point, series, dataLabel, clip, redraw, location, isReactCallback) {\n        var elementRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.measureElementRect)(childElement, redraw, isReactCallback);\n        var rect = { x: 0, y: 0, width: 0, height: 0 };\n        var rectPosition = this.calculateTextPosition(series, point, elementRect, location);\n        var clipWidth = 0;\n        var clipHeight = 0;\n        var isOverlap = false;\n        if (isReactCallback) {\n            isOverlap = (elementRect.width === 0 || elementRect.height === 0); // To check the data label already overlap before react callback call\n        }\n        childElement.style.left = (rectPosition.left - clipWidth) + 'px';\n        childElement.style.top = (rectPosition.top + clipHeight) + 'px';\n        var backgroundColor = this.fontBackground === 'transparent' ? (this.chart.theme.indexOf('Dark') > -1 ? 'black' : 'white') : this.fontBackground;\n        var rgbValue = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.convertHexToColor)((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.colorNameToHex)(backgroundColor));\n        var vAxis = series.chart.requireInvertedAxis ? series.xAxis : series.yAxis;\n        var hAxis = series.chart.requireInvertedAxis ? series.yAxis : series.xAxis;\n        childElement.style.color = dataLabel.font.color || this.chart.theme === 'Bootstrap5' ? '#212529' : this.chart.theme === 'Bootstrap5Dark' ? '#DEE2E6' :\n            ((Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000)) >= 128 ? this.chart.theme.indexOf('Tailwind3') > -1 ? '#111827' : 'black' : this.chart.theme.indexOf('Tailwind3') > -1 ? '#FFFFFF' : 'white');\n        if (childElement.childElementCount && !isOverlap && (!(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.isCollide)(rect, this.chart.dataLabelCollections, clip))\n            && (point.yValue === undefined ||\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.withIn)(point.yValue, series.yAxis.visibleRange) || (series.type.indexOf('Stacking') > -1) ||\n                (series.type.indexOf('100') > -1 && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.withIn)(series.stackedValues.endValues[point.index], series.yAxis.visibleRange))) &&\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.withIn)(point.xValue, series.xAxis.visibleRange) && parseFloat(childElement.style.top) >= vAxis.rect.y &&\n            parseFloat(childElement.style.left) >= hAxis.rect.x &&\n            parseFloat(childElement.style.top) <= vAxis.rect.y + vAxis.rect.height &&\n            parseFloat(childElement.style.left) <= hAxis.rect.x + hAxis.rect.width) {\n            this.chart.dataLabelCollections.push(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_0__.Rect(rect.x + clip.x, rect.y + clip.y, rect.width, rect.height));\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.appendChildElement)(false, parentElement, childElement, redraw, true, 'left', 'top');\n        }\n    };\n    /**\n     * Calculates the text position for a data label associated with a specific data point in a 3D series.\n     *\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {Chart3DPoint} point - The data point for which the text position is calculated.\n     * @param {ClientRect} elementSize - The size of the data label element.\n     * @param {Chart3DLocation} location - The location values for the data label.\n     * @returns {{ left: number, top: number, right: number }} An object representing the left, top, and right positions of the text.\n     */\n    DataLabel3D.prototype.calculateTextPosition = function (series, point, elementSize, location) {\n        var width = elementSize.width / 2;\n        var height = elementSize.height;\n        var left;\n        var top;\n        var right;\n        if (series.type.indexOf('Bar') !== -1) {\n            left = location.x - width;\n            top = location.y - height + series.xAxis.plotOffset;\n            right = location.x + width;\n        }\n        else {\n            left = location.x - width;\n            top = location.y - height;\n            right = location.x + width;\n        }\n        return { left: left, top: top, right: right };\n    };\n    /**\n     * Renders a React template for a data label associated with a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} childElement - The child HTML element for the React template.\n     * @param {Chart3D} chart - The 3D chart that contains the series and data point.\n     * @param {Chart3DPoint} point - The data point for which the React template is rendered.\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {number} labelIndex - The index of the data label.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {Chart3DLocation} location - The location values for the data label.\n     * @returns {void}\n     */\n    DataLabel3D.prototype.chartReactTemplate = function (childElement, chart, point, series, labelIndex, redraw, location) {\n        var parentElement = document.getElementById(chart.element.id + '-series-' + series.index + '-data-label-collections');\n        if (parentElement) {\n            if (point.index === 0) {\n                chart.dataLabelCollections = []; // clear old datalabel bounds for react callback\n            }\n            chart.dataLabel3DModule.calculateTemplateLabelSize(parentElement, childElement, point, series, series.dataLabel, series.clipRect, redraw, location, true);\n        }\n    };\n    /**\n     * Creates a template element for rendering data labels associated with a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} childElement - The child HTML element to contain the template content.\n     * @param {string | Function} content - The content or function for the data label template.\n     * @param {Chart3D} chart - The 3D chart containing the series and data point.\n     * @param {Chart3DPoint} point - The data point for which the template is created (optional).\n     * @param {Chart3DSeries} series - The 3D series to which the data point belongs (optional).\n     * @param {string} dataLabelId - The ID for the data label element (optional).\n     * @param {number} labelIndex - The index of the data label (optional).\n     * @param {Chart3DLocation} location - The location values for the data label (optional).\n     * @param {boolean} redraw - Indicates whether the template should be redrawn (optional).\n     * @returns {HTMLElement} The created template element.\n     */\n    DataLabel3D.prototype.createTemplate = function (childElement, content, chart, point, series, dataLabelId, labelIndex, location, redraw) {\n        var templateFn = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getTemplateFunction)(content);\n        var templateElement;\n        try {\n            var tempObject = { chart: chart, series: series, point: point };\n            var templateId = dataLabelId + '-template';\n            var elementData = templateFn ? templateFn(tempObject, chart, templateId, dataLabelId) : [];\n            if (elementData.length) {\n                templateElement = Array.prototype.slice.call(elementData);\n                var len = templateElement.length;\n                for (var i = 0; i < len; i++) {\n                    childElement.appendChild(templateElement[i]);\n                }\n            }\n            var reactCallback = void 0;\n            if (chart.getModuleName() === 'chart3d') {\n                reactCallback = (point && series) ? this.chartReactTemplate.bind(this, childElement, chart, point, series, labelIndex, redraw, location) : reactCallback;\n                if (chart.isReact) {\n                    chart.renderReactTemplates(reactCallback);\n                }\n            }\n        }\n        catch (e) {\n            return childElement;\n        }\n        return childElement;\n    };\n    /**\n     * Gets the name of the data label module.\n     *\n     * @returns {string} The name of the data label module.\n     */\n    DataLabel3D.prototype.getModuleName = function () {\n        // Returns the module name\n        return 'DataLabel3D';\n    };\n    /**\n     * To destroy the dataLabel for series.\n     *\n     * @returns {void}\n     * @private\n     */\n    DataLabel3D.prototype.destroy = function () {\n        // Destroy method performed here\n    };\n    return DataLabel3D;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/series/data-label.js?");

/***/ })

}]);