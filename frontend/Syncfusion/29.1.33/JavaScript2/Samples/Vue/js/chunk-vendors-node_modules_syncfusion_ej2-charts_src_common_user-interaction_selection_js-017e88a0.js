"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_common_user-interaction_selection_js-017e88a0"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSelection: () => (/* binding */ BaseSelection)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/**\n * Selection src file\n */\n\n/**\n * Selection Module handles the selection for chart.\n *\n * @private\n */\nvar BaseSelection = /** @class */ (function () {\n    function BaseSelection(control) {\n        this.selectionStyle = [];\n        this.control = control;\n    }\n    /**\n     * To create selection styles for series\n     *\n     * @returns {void}\n     */\n    BaseSelection.prototype.seriesStyles = function () {\n        var seriesclass;\n        var style = document.getElementById(this.styleId);\n        var pattern = '{}';\n        var fill;\n        var opacity;\n        var selectionPattern = this.control.selectionPattern;\n        var highlightPattern = this.control.highlightPattern;\n        if ((this.styleId.indexOf('highlight') > 0 && this.control.highlightColor !== '') || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(style) || selectionPattern !== 'None' || highlightPattern !== 'None') {\n            if (document.getElementById(this.styleId)) {\n                document.getElementById(this.styleId).remove();\n            }\n            style = this.control.createElement('div');\n            style.setAttribute('id', this.styleId);\n            for (var _i = 0, _a = this.control.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                var visibleSeries = this.control.visibleSeries[series.index] ||\n                    this.control.visibleSeries[series.index];\n                if ((this.styleId.indexOf('highlight') > 0 && this.control.highlightColor !== '') || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectionPattern) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(highlightPattern)) &&\n                    (selectionPattern !== 'None' || highlightPattern !== 'None')) {\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? highlightPattern : selectionPattern;\n                    if (((visibleSeries.type === 'Pie' || visibleSeries.type === 'Funnel' ||\n                        visibleSeries.type === 'Pyramid') || this.control.getModuleName() === 'circularchart3d') && this.control.highlightColor !== 'transparent') {\n                        for (var i = 0; i < visibleSeries.points.length; i++) {\n                            opacity = visibleSeries.opacity;\n                            fill = this.pattern(this.control, (this.styleId.indexOf('highlight') > 0 && this.control.highlightColor !== '') ? this.control.highlightColor : (visibleSeries.points[i]).color, series.points[i].index, patternName, opacity);\n                            pattern = '{ fill:' + fill + '}';\n                            seriesclass = series.selectionStyle || this.styleId + '_series_' + series.index + '_point_' + series.points[i].index + ',' + '.' +\n                                this.styleId + '_series_' + series.index + '_point_' + series.points[i].index + '> *';\n                            if (this.control.highlightMode === 'None' && this.control.legendSettings.enableHighlight && !series.isRectSeries) {\n                                style.innerText += '.' + this.styleId + '_series_' + series.index + '> *' + ' { stroke-width:' + (3) + ';} ';\n                                this.selectionStyle.push([this.styleId + '_series_' + series.index, 'stroke-width', '3']);\n                            }\n                            pattern = (pattern.indexOf('None') > -1) ? '{fill:' + ((this.styleId.indexOf('highlight') > 0 && this.control.highlightColor !== '') ? this.control.highlightColor : (visibleSeries.points[i]).color) + '!important}' : pattern;\n                            this.selectionStyle.push([this.styleId + '_series_' + series.index + '_point_' + series.points[i].index, 'fill', fill ? ((fill.indexOf('None') > -1) ? (this.styleId.indexOf('highlight') > -1 ? this.control.highlightColor : '') : fill) : '']);\n                        }\n                    }\n                    else if (visibleSeries.type && this.control.highlightColor !== 'transparent') {\n                        opacity = visibleSeries.opacity;\n                        fill = this.pattern(this.control, (this.styleId.indexOf('highlight') > 0 && this.control.highlightColor !== '') ? this.control.highlightColor :\n                            (visibleSeries.pointColorMapping !== '' || (this.control.rangeColorSettings && this.control.rangeColorSettings.length > 1)) ? (visibleSeries.points[0]).color\n                                : visibleSeries.interior, series.index, patternName, opacity);\n                        pattern = '{ fill:' + fill + '}';\n                    }\n                }\n                seriesclass = series.selectionStyle || this.styleId + '_series_' + series.index + ',' + '.' +\n                    this.styleId + '_series_' + series.index + '> *';\n                if (this.control.highlightMode === 'None' && this.control.legendSettings.enableHighlight && !series.isRectSeries) {\n                    this.selectionStyle.push([this.styleId + '_series_' + series.index, 'stroke-width', (parseFloat((series.width ? series.width.toString() : '0')) + 1).toString()]);\n                }\n                pattern = (pattern.indexOf('None') > -1) ? '{}' : pattern;\n                this.selectionStyle.push([this.styleId + '_series_' + series.index, 'fill', fill ? ((fill.indexOf('None') > -1) ? (this.styleId.indexOf('highlight') > -1 ? this.control.highlightColor : '') : fill) : '']);\n            }\n            var unSelectOpacity = (this.control).highlightColor !== 'transparent' ? (this.control.getModuleName() === 'circularchart3d' ? 0.2 : 0.3) : opacity;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.control.selectionModule) && this.control.selectionMode === 'None' && this.control.highlightColor !== '') {\n                unSelectOpacity = 1;\n            }\n            this.selectionStyle.push([this.unselected, 'opacity', unSelectOpacity.toString()]);\n            var secondaryElement = document.getElementById(this.control.element.id + '_Secondary_Element');\n            if (secondaryElement) {\n                secondaryElement.appendChild(style);\n            }\n        }\n    };\n    /**\n     * To create the pattern for series/points.\n     *\n     * @param chart\n     * @param color\n     * @param index\n     * @param patternName\n     * @param opacity\n     * @param chart\n     * @param color\n     * @param index\n     * @param patternName\n     * @param opacity\n     * @param chart\n     * @param color\n     * @param index\n     * @param patternName\n     * @param opacity\n     * @param chart\n     * @param color\n     * @param index\n     * @param patternName\n     * @param opacity\n     * @param chart\n     * @param color\n     * @param index\n     * @param patternName\n     * @param opacity\n     */\n    BaseSelection.prototype.pattern = function (chart, color, index, patternName, opacity) {\n        var backgroundColor = '#ffffff';\n        var svg = chart.svgObject;\n        var pathOptions = [];\n        var patternGroup = {\n            'id': chart.element.id + '_' + patternName + '_Selection' + '_' + index, 'patternUnits': 'userSpaceOnUse'\n        };\n        var heightStr = 'height';\n        var widthStr = 'width';\n        var width = 10;\n        var height = 12;\n        var patternNum = 6;\n        var turquoiseNum = 17;\n        var turstrokewidth = 1;\n        var starNum = 21;\n        var circleNum = 9;\n        var tileNum = 18;\n        var strokeWidth = 1;\n        var bubNum = 20;\n        switch (patternName) {\n            case 'Dots':\n                patternGroup[heightStr] = patternGroup[widthStr] = patternNum;\n                patternGroup[widthStr] = patternNum;\n                pathOptions[0] = {\n                    'x': 0, 'y': 0, 'width': 7, 'height': 7, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity, 'name': 'rect'\n                };\n                pathOptions[1] = {\n                    'cx': 3,\n                    'cy': 3,\n                    'r': 2,\n                    'stroke-width': 1,\n                    'fill': color,\n                    'name': 'circle'\n                };\n                break;\n            case 'Pacman':\n                patternGroup[heightStr] = '18.384';\n                patternGroup[widthStr] = '17.917';\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': 17.917, 'height': 18.384,\n                    'transform': 'translate(0,0)', 'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M9.081,9.194l5.806-3.08c-0.812-1.496-2.403-3.052-4.291-3.052H8.835C6.138,3.063,3,6.151,3,8.723v1.679   c0,2.572,3.138,5.661,5.835,5.661h1.761c2.085,0,3.835-1.76,4.535-3.514L9.081,9.194z', 'stroke-width': 1, 'stroke': color, 'fill': color\n                };\n                break;\n            case 'Chessboard':\n                patternGroup[heightStr] = patternGroup[widthStr] = width;\n                pathOptions[0] = {\n                    'x': 0, 'y': 0, 'width': width, 'height': width, 'fill': backgroundColor, 'opacity': opacity,\n                    'name': 'rect'\n                };\n                pathOptions[1] = { 'x': 0, 'y': 0, 'width': 5, 'height': 5, 'fill': color, 'opacity': opacity, 'name': 'rect' };\n                pathOptions[2] = { 'x': 5, 'y': 5, 'width': 5, 'height': 5, 'fill': color, 'opacity': opacity, 'name': 'rect' };\n                break;\n            case 'Crosshatch':\n                patternGroup[heightStr] = patternGroup[widthStr] = '8';\n                pathOptions[0] = {\n                    'x': 0, 'y': 0, 'width': 8, 'height': 8, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity, 'name': 'rect'\n                };\n                pathOptions[1] = {\n                    'd': 'M0 0L8 8ZM8 0L0 8Z',\n                    'stroke-width': 1,\n                    'stroke': color,\n                    'name': 'path'\n                };\n                break;\n            case 'DiagonalForward':\n                patternGroup[heightStr] = patternGroup[widthStr] = patternNum;\n                pathOptions[0] = {\n                    'x': 0, 'y': 0, 'width': patternNum, 'height': patternNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity, 'name': 'rect'\n                };\n                pathOptions[1] = {\n                    'd': 'M 3 -3 L 9 3 M 6 6 L 0 0 M 3 9 L -3 3',\n                    'stroke-width': 2,\n                    'stroke': color,\n                    'name': 'path'\n                };\n                break;\n            case 'DiagonalBackward':\n                patternGroup[heightStr] = patternGroup[widthStr] = patternNum;\n                pathOptions[0] = {\n                    'x': 0, 'y': 0, 'width': patternNum, 'height': patternNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity, 'name': 'rect'\n                };\n                pathOptions[1] = {\n                    'd': 'M 3 -3 L -3 3 M 0 6 L 6 0 M 9 3 L 3 9',\n                    'stroke-width': 2,\n                    'stroke': color,\n                    'name': 'path'\n                };\n                break;\n            case 'Grid':\n                patternGroup[heightStr] = patternGroup[widthStr] = patternNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': patternNum, 'height': patternNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path',\n                    'd': 'M1 3.5L11 3.5 M0 3.5L11 3.5 M0 7.5L11 7.5 M0 11.5L11 11.5 M5.5 0L5.5 12 M11.5 0L11.5 12Z',\n                    'stroke-width': 1,\n                    'stroke': color\n                };\n                break;\n            case 'Turquoise':\n                patternGroup[heightStr] = patternGroup[widthStr] = turquoiseNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': turquoiseNum, 'height': turquoiseNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M0.5739999999999998,2.643a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[2] = {\n                    'name': 'path', 'd': 'M11.805,2.643a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[3] = {\n                    'name': 'path', 'd': 'M6.19,2.643a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[4] = {\n                    'name': 'path', 'd': 'M11.805,8.217a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[5] = {\n                    'name': 'path', 'd': 'M6.19,8.217a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[6] = {\n                    'name': 'path', 'd': 'M11.805,13.899a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                pathOptions[7] = {\n                    'name': 'path', 'd': 'M6.19,13.899a2.123,2.111 0 1,0 4.246,0a2.123,2.111 0 1,0 -4.246,0',\n                    'stroke-width': turstrokewidth, 'stroke-miterlimit': width, 'stroke': color, 'fill': color\n                };\n                break;\n            case 'Star':\n                patternGroup[heightStr] = patternGroup[widthStr] = starNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': starNum, 'height': starNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path',\n                    'd': 'M15.913,18.59L10.762 12.842 5.613 18.75 8.291 11.422 0.325 9.91 8.154 8.33 5.337 0.91 10.488 6.658 15.637 0.75 12.959 8.078 20.925 9.59 13.096 11.17 z',\n                    'stroke-width': 1,\n                    'stroke': color,\n                    'fill': color\n                };\n                break;\n            case 'Triangle':\n                patternGroup[heightStr] = patternGroup[widthStr] = width;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': width, 'height': width, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path',\n                    'd': 'M4.987,0L7.48 4.847 9.974 9.694 4.987 9.694 0 9.694 2.493 4.847 z',\n                    'stroke-width': 1,\n                    'stroke': color,\n                    'fill': color\n                };\n                break;\n            case 'Circle':\n                patternGroup[heightStr] = patternGroup[widthStr] = circleNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': circleNum, 'height': circleNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'circle',\n                    'cx': 5.125,\n                    'cy': 3.875,\n                    'r': 3.625,\n                    'stroke-width': 1,\n                    'fill': color\n                };\n                break;\n            case 'Tile':\n                patternGroup[heightStr] = patternGroup[widthStr] = tileNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': tileNum, 'height': tileNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = { 'name': 'path', 'd': 'M0,9L0 0 9 0 z', 'stroke-width': strokeWidth, 'stroke': color, 'fill': color };\n                pathOptions[2] = { 'name': 'path', 'd': 'M9,9L9 0 18 0 z', 'stroke-width': strokeWidth, 'stroke': color, 'fill': color };\n                pathOptions[3] = { 'name': 'path', 'd': 'M0,18L0 9 9 9 z', 'stroke-width': strokeWidth, 'stroke': color, 'fill': color };\n                pathOptions[4] = { 'name': 'path', 'd': 'M9,18L9 9 18 9 z', 'stroke-width': strokeWidth, 'stroke': color, 'fill': color };\n                break;\n            case 'HorizontalDash':\n                patternGroup[heightStr] = patternGroup[widthStr] = height;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': height, 'height': height, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M0,1.5 L10 1.5 M0,5.5 L10 5.5 M0,9.5 L10 9.5 z', 'stroke-width': 1,\n                    'stroke': color, 'fill': color\n                };\n                break;\n            case 'VerticalDash':\n                patternGroup[heightStr] = patternGroup[widthStr] = height;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': height, 'height': height, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M1.5,0 L1.5 10 M5.5,0 L5.5 10 M9.5,0 L9.5 10 z', 'stroke-width': 1,\n                    'stroke': color, 'fill': color\n                };\n                break;\n            case 'Rectangle':\n                patternGroup[heightStr] = patternGroup[widthStr] = height;\n                pathOptions[0] = { 'name': 'rect', 'width': height, 'height': height, 'fill': backgroundColor, 'opacity': opacity };\n                pathOptions[1] = { 'name': 'rect', 'x': 1, 'y': 2, 'width': 4, 'height': 9, 'fill': color, 'opacity': opacity };\n                pathOptions[2] = { 'name': 'rect', 'x': 7, 'y': 2, 'width': 4, 'height': 9, 'fill': color, 'opacity': opacity };\n                break;\n            case 'Box':\n                patternGroup[heightStr] = patternGroup[widthStr] = width;\n                pathOptions[0] = { 'name': 'rect', 'width': 13, 'height': 13, 'fill': backgroundColor, 'opacity': opacity };\n                pathOptions[1] = {\n                    'name': 'rect', 'x': 1.5, 'y': 1.5, 'width': width, 'height': 9, 'fill': color,\n                    'opacity': opacity\n                };\n                break;\n            case 'HorizontalStripe':\n                patternGroup[heightStr] = height;\n                patternGroup[widthStr] = width;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': width, 'height': height,\n                    'transform': 'translate(0,0)', 'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M0,0.5 L10 0.5 M0,4.5 L10 4.5 M0,8.5 L10 8.5 z', 'stroke-width': 1,\n                    'stroke': color, 'fill': color\n                };\n                break;\n            case 'VerticalStripe':\n                patternGroup[heightStr] = width;\n                patternGroup[widthStr] = height;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': height, 'height': width, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = {\n                    'name': 'path', 'd': 'M0.5,0 L0.5 10 M4.5,0 L4.5 10 M8.5,0 L8.5 10 z', 'stroke-width': 1,\n                    'stroke': color, 'fill': color\n                };\n                break;\n            case 'Bubble':\n                patternGroup[heightStr] = patternGroup[widthStr] = bubNum;\n                pathOptions[0] = {\n                    'name': 'rect', 'x': 0, 'y': 0, 'width': bubNum, 'height': bubNum, 'transform': 'translate(0,0)',\n                    'fill': backgroundColor, 'opacity': opacity\n                };\n                pathOptions[1] = { 'name': 'circle', 'cx': 5.217, 'cy': 11.325, 'r': 3.429, 'stroke-width': 1, 'fill': '#D0A6D1' };\n                pathOptions[2] = { 'name': 'circle', 'cx': 13.328, 'cy': 6.24, 'r': 4.884, 'stroke-width': 1, 'fill': color };\n                pathOptions[3] = {\n                    'name': 'circle', 'cx': 13.277, 'cy': 14.66, 'r': 3.018, 'stroke-width': 1,\n                    'fill': '#D0A6D1'\n                };\n                break;\n        }\n        var svgRenderer = (chart.svgRenderer || chart.renderer);\n        var pattern = svgRenderer.createPattern(patternGroup, 'pattern');\n        this.loadPattern(chart, pathOptions, pattern, svgRenderer);\n        svg.appendChild(pattern);\n        return 'url(#' + chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index + ')';\n    };\n    /**\n     * To load the pattern into svg\n     *\n     * @param chart\n     * @param options\n     * @param pattern\n     * @param svgRenderer\n     * @param chart\n     * @param options\n     * @param pattern\n     * @param svgRenderer\n     * @param chart\n     * @param options\n     * @param pattern\n     * @param svgRenderer\n     * @param chart\n     * @param options\n     * @param pattern\n     * @param svgRenderer\n     */\n    BaseSelection.prototype.loadPattern = function (chart, options, pattern, svgRenderer) {\n        var i;\n        for (i = 0; i < options.length; i++) {\n            var path = svgRenderer.createPattern(options[i], options[i].name);\n            pattern.appendChild(path);\n        }\n    };\n    /**\n     * To concat indexes\n     *\n     * @param userIndexes\n     * @param localIndexes\n     * @param userIndexes\n     * @param localIndexes\n     */\n    BaseSelection.prototype.concatIndexes = function (userIndexes, localIndexes) {\n        return userIndexes.concat(localIndexes);\n    };\n    /**\n     * Selected points series visibility checking on legend click\n     *\n     * @param selectedIndexes\n     */\n    BaseSelection.prototype.checkVisibility = function (selectedIndexes, chart) {\n        if (chart === void 0) { chart = null; }\n        if (!selectedIndexes) {\n            return false;\n        }\n        var visible = false;\n        var uniqueSeries = [];\n        for (var _i = 0, selectedIndexes_1 = selectedIndexes; _i < selectedIndexes_1.length; _i++) {\n            var index = selectedIndexes_1[_i];\n            if (uniqueSeries.indexOf(index.series) === -1) {\n                uniqueSeries.push(index.series);\n            }\n        }\n        for (var _a = 0, uniqueSeries_1 = uniqueSeries; _a < uniqueSeries_1.length; _a++) {\n            var index = uniqueSeries_1[_a];\n            if (chart != null && chart.rangeColorSettings && chart.rangeColorSettings.length > 0 &&\n                chart.rangeColorSettings[0].colors.length > 0) {\n                if (this.control.series[0].visible) {\n                    visible = true;\n                    break;\n                }\n            }\n            else {\n                if (this.control.visibleSeries[index].visible) {\n                    visible = true;\n                    break;\n                }\n            }\n        }\n        return visible;\n    };\n    /**\n     * To add svg element style class\n     *\n     * @param element\n     * @param className\n     * @param element\n     * @param className\n     * @private\n     */\n    BaseSelection.prototype.addSvgClass = function (element, className) {\n        var elementClassName = element.getAttribute('class') || '';\n        elementClassName += ((elementClassName !== '') ? ' ' : '');\n        var isDataLabel = element.id.indexOf('datalabel') > -1 || (element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1);\n        if (elementClassName.indexOf(className) === -1) {\n            element.setAttribute('class', elementClassName + className);\n            var selectionStyles_1 = this.selectionStyle;\n            if (className && className.indexOf('highlight') !== -1) {\n                if (this.control.getModuleName() === 'chart' && this.control.highlightModule) {\n                    selectionStyles_1 = this.control.highlightModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'accumulationchart' && this.control.accumulationHighlightModule) {\n                    selectionStyles_1 = this.control.accumulationHighlightModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'chart3d' && this.control.highlight3DModule) {\n                    selectionStyles_1 = this.control.highlight3DModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'circularchart3d' && this.control.circularChartHighlight3DModule) {\n                    selectionStyles_1 = this.control.circularChartHighlight3DModule.selectionStyle;\n                }\n            }\n            if (element.tagName.toLowerCase() === 'g') {\n                element.querySelectorAll('*').forEach(function (child) {\n                    for (var i = 0; i < selectionStyles_1.length; i++) {\n                        var key = selectionStyles_1[i];\n                        var classValue = key[0];\n                        var childClass = child.getAttribute('class') ? child.getAttribute('class') : '';\n                        if ((classValue === className || classValue.indexOf(className) !== -1) && childClass.indexOf('selection') === -1) {\n                            if (key[1] === 'fill' && key[2] && !isDataLabel) {\n                                child.style.fill = key[2];\n                            }\n                            if (key[1] === 'opacity' && key[2]) {\n                                child.style.opacity = key[2];\n                                child.style.fill = '';\n                            }\n                            if (key[1] === 'stroke-width' && key[2]) {\n                                child.style.strokeWidth = key[2];\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                for (var i = 0; i < selectionStyles_1.length; i++) {\n                    var key = selectionStyles_1[i];\n                    var classValue = key[0];\n                    var childClass = element.getAttribute('class') ? element.getAttribute('class') : '';\n                    if ((classValue === className || classValue.indexOf(className) !== -1) && (className.indexOf('highlight') === -1 || childClass.indexOf('selection') === -1)) {\n                        if (key[1] === 'fill' && key[2] && !isDataLabel) {\n                            element.style.fill = key[2];\n                        }\n                        if (key[1] === 'opacity' && key[2]) {\n                            element.style.opacity = key[2];\n                            element.style.fill = '';\n                        }\n                        if (key[1] === 'stroke-width' && key[2] && element.id.indexOf('legend_shape') === -1) {\n                            element.style.strokeWidth = key[2];\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To remove svg element style class\n     *\n     * @param element\n     * @param className\n     * @param element\n     * @param className\n     * @private\n     */\n    BaseSelection.prototype.removeSvgClass = function (element, className) {\n        var elementClassName = element.getAttribute('class') || '';\n        if (elementClassName.indexOf(className) > -1) {\n            element.setAttribute('class', elementClassName.replace(className, '').trim());\n            var selectionStyles_2 = this.selectionStyle;\n            if (className && className.indexOf('highlight') !== -1) {\n                if (this.control.getModuleName() === 'chart' && this.control.highlightModule) {\n                    selectionStyles_2 = this.control.highlightModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'accumulationchart' && this.control.accumulationHighlightModule) {\n                    selectionStyles_2 = this.control.accumulationHighlightModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'chart3d' && this.control.highlight3DModule) {\n                    selectionStyles_2 = this.control.highlight3DModule.selectionStyle;\n                }\n                else if (this.control.getModuleName() === 'circularchart3d' && this.control.circularChartHighlight3DModule) {\n                    selectionStyles_2 = this.control.circularChartHighlight3DModule.selectionStyle;\n                }\n            }\n            if (element.tagName.toLowerCase() === 'g') {\n                element.querySelectorAll('*').forEach(function (child) {\n                    for (var i = 0; i < selectionStyles_2.length; i++) {\n                        var key = selectionStyles_2[i];\n                        var classValue = key[0];\n                        var childClass = child.getAttribute('class') ? child.getAttribute('class') : '';\n                        if ((classValue === className || classValue.indexOf(className) !== -1) && childClass.indexOf('selection') === -1) {\n                            if (key[1] === 'fill' && key[2]) {\n                                child.style.fill = '';\n                            }\n                            if (key[1] === 'opacity' && key[2]) {\n                                child.style.opacity = '';\n                            }\n                            if (key[1] === 'stroke-width' && key[2]) {\n                                child.style.strokeWidth = '';\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                for (var i = 0; i < selectionStyles_2.length; i++) {\n                    var key = selectionStyles_2[i];\n                    var classValue = key[0];\n                    var childClass = element.getAttribute('class') ? element.getAttribute('class') : '';\n                    if ((classValue === className || classValue.indexOf(className) !== -1) && (className.indexOf('highlight') === -1 || childClass.indexOf('selection') === -1)) {\n                        if (key[1] === 'fill' && key[2]) {\n                            element.style.fill = '';\n                        }\n                        if (key[1] === 'opacity' && key[2]) {\n                            element.style.opacity = '';\n                        }\n                        if (key[1] === 'stroke-width' && key[2]) {\n                            element.style.strokeWidth = '';\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To get children from parent element\n     *\n     * @param parent\n     */\n    BaseSelection.prototype.getChildren = function (parent) {\n        var children = [];\n        for (var i = 0; i < parent.childNodes.length; i++) {\n            if (parent.childNodes[i].tagName !== 'defs') {\n                children.push(parent.childNodes[i]);\n            }\n        }\n        return children;\n    };\n    return BaseSelection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/common/user-interaction/selection.js?");

/***/ })

}]);