"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-schedule_src_schedule_base_schedule_js-378bf9c2"],{

/***/ "./node_modules/@syncfusion/ej2-schedule/src/schedule/base/schedule.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-schedule/src/schedule/base/schedule.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Schedule: () => (/* binding */ Schedule)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _renderer_header_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renderer/header-renderer */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/header-renderer.js\");\n/* harmony import */ var _actions_scroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../actions/scroll */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/scroll.js\");\n/* harmony import */ var _actions_touch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../actions/touch */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/touch.js\");\n/* harmony import */ var _actions_keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../actions/keyboard */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/keyboard.js\");\n/* harmony import */ var _actions_data__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../actions/data */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/data.js\");\n/* harmony import */ var _event_renderer_event_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../event-renderer/event-base */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/event-base.js\");\n/* harmony import */ var _event_renderer_inline_edit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../event-renderer/inline-edit */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/event-renderer/inline-edit.js\");\n/* harmony import */ var _popups_quick_popups__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../popups/quick-popups */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/popups/quick-popups.js\");\n/* harmony import */ var _popups_event_tooltip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../popups/event-tooltip */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-tooltip.js\");\n/* harmony import */ var _popups_event_window__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../popups/event-window */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/popups/event-window.js\");\n/* harmony import */ var _renderer_renderer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../renderer/renderer */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/renderer/renderer.js\");\n/* harmony import */ var _models_work_hours__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/work-hours */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/work-hours.js\");\n/* harmony import */ var _models_time_scale__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/time-scale */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/time-scale.js\");\n/* harmony import */ var _models_quick_info_templates__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/quick-info-templates */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/quick-info-templates.js\");\n/* harmony import */ var _models_header_rows__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/header-rows */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/header-rows.js\");\n/* harmony import */ var _actions_crud__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../actions/crud */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js\");\n/* harmony import */ var _actions_work_cells__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../actions/work-cells */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/actions/work-cells.js\");\n/* harmony import */ var _models_event_settings__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/event-settings */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/event-settings.js\");\n/* harmony import */ var _models_group__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/group */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/group.js\");\n/* harmony import */ var _models_resources__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/resources */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/resources.js\");\n/* harmony import */ var _common_calendar_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../common/calendar-util */ \"./node_modules/@syncfusion/ej2-schedule/src/common/calendar-util.js\");\n/* harmony import */ var _base_resource__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../base/resource */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/resource.js\");\n/* harmony import */ var _timezone_timezone__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../timezone/timezone */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/timezone/timezone.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/constant.js\");\n/* harmony import */ var _base_css_constant__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../base/css-constant */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/css-constant.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../base/util */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/base/util.js\");\n/* harmony import */ var _models_toolbar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../models/toolbar */ \"./node_modules/@syncfusion/ej2-schedule/src/schedule/models/toolbar.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the Schedule component that displays a list of events scheduled against specific date and timings,\n * thus helping us to plan and manage it properly.\n * ```html\n * <div id=\"schedule\"></div>\n * ```\n * ```typescript\n * <script>\n *   var scheduleObj = new Schedule();\n *   scheduleObj.appendTo(\"#schedule\");\n * </script>\n * ```\n */\nvar Schedule = /** @class */ (function (_super) {\n    __extends(Schedule, _super);\n    /**\n     * Constructor for creating the Schedule widget\n     *\n     * @param {ScheduleModel} options Accepts the schedule model properties to initiate the rendering\n     * @param {string | HTMLElement} element Accepts the DOM element reference\n     */\n    function Schedule(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.adaptiveGroupIndex = 0;\n        return _this;\n    }\n    /**\n     * Core method that initializes the control rendering.\n     *\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.render = function () {\n        var addClasses = [];\n        var removeClasses = [];\n        addClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ROOT);\n        if (this.enableRtl) {\n            addClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.RTL);\n        }\n        else {\n            removeClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.RTL);\n        }\n        if (this.isAdaptive) {\n            addClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.DEVICE_CLASS);\n        }\n        else {\n            removeClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.DEVICE_CLASS);\n        }\n        if (this.enableAdaptiveUI) {\n            addClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ADAPTIVE_CLASS);\n        }\n        else {\n            removeClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ADAPTIVE_CLASS);\n        }\n        if (this.allowMultiDrag) {\n            addClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.MULTI_DRAG);\n        }\n        else {\n            removeClasses.push(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.MULTI_DRAG);\n        }\n        if (this.cssClass) {\n            var cssClass = this.cssClass.split(' ');\n            for (var _i = 0, cssClass_1 = cssClass; _i < cssClass_1.length; _i++) {\n                var cls_1 = cssClass_1[_i];\n                addClasses.push(cls_1);\n            }\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(this.element, addClasses, removeClasses);\n        this.validateDate();\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.createSpinner)({ target: this.element });\n        this.scrollModule = new _actions_scroll__WEBPACK_IMPORTED_MODULE_3__.Scroll(this);\n        this.scrollModule.setWidth();\n        this.scrollModule.setHeight();\n        this.renderModule = new _renderer_renderer__WEBPACK_IMPORTED_MODULE_12__.Render(this);\n        this.eventBase = new _event_renderer_event_base__WEBPACK_IMPORTED_MODULE_7__.EventBase(this);\n        this.workCellAction = new _actions_work_cells__WEBPACK_IMPORTED_MODULE_18__.WorkCellInteraction(this);\n        if (this.allowKeyboardInteraction) {\n            this.keyboardInteractionModule = new _actions_keyboard__WEBPACK_IMPORTED_MODULE_5__.KeyboardInteraction(this);\n        }\n        this.inlineModule = new _event_renderer_inline_edit__WEBPACK_IMPORTED_MODULE_8__.InlineEdit(this);\n        this.initializeDataModule();\n        this.renderTableContainer();\n        this.activeViewOptions = this.getActiveViewOptions();\n        this.initializeResources();\n        this.wireEvents();\n    };\n    Schedule.prototype.renderTableContainer = function () {\n        if (!this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.TABLE_CONTAINER_CLASS)) {\n            this.element.appendChild(this.createElement('div', { className: _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.TABLE_CONTAINER_CLASS }));\n        }\n    };\n    Schedule.prototype.getEventTemplateName = function (resIndex) {\n        var templateName = 'eventTemplate_' + resIndex;\n        if (this.activeEventTemplates.indexOf(templateName) < 0) {\n            this.activeEventTemplates.push(templateName);\n        }\n        return templateName;\n    };\n    /**\n     * Method to get element width\n     *\n     * @param {HTMLElement} element Accepts the DOM element\n     * @returns {number} Returns the width of the given element\n     * @private\n     */\n    Schedule.prototype.getElementWidth = function (element) {\n        return _base_util__WEBPACK_IMPORTED_MODULE_27__.getElementWidth(element, this.uiStateValues.isTransformed);\n    };\n    /**\n     * Method to get element height\n     *\n     * @param {HTMLElement} element Accepts the DOM element\n     * @returns {number} Returns the Height of the given element\n     * @private\n     */\n    Schedule.prototype.getElementHeight = function (element) {\n        return _base_util__WEBPACK_IMPORTED_MODULE_27__.getElementHeight(element, this.uiStateValues.isTransformed);\n    };\n    /**\n     * Method to get height from element\n     *\n     * @param {Element} element Accepts the DOM element\n     * @param {string} elementClass Accepts the element class\n     * @returns {number} Returns the height of the element\n     * @private\n     */\n    Schedule.prototype.getElementHeightFromClass = function (element, elementClass) {\n        return _base_util__WEBPACK_IMPORTED_MODULE_27__.getElementHeightFromClass(element, elementClass, this.uiStateValues.isTransformed);\n    };\n    /**\n     * Method to render react templates\n     *\n     * @param {Function} callback - Specifies the callBack method\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.renderTemplates = function (callback) {\n        if (this.isReact) {\n            this.renderReactTemplates(callback);\n        }\n        else if (callback) {\n            callback();\n        }\n    };\n    /**\n     * Method to reset react templates\n     *\n     * @param {string[]} templates Accepts the template ID\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.resetTemplates = function (templates) {\n        if (this.isAngular || this.isReact) {\n            this.clearTemplate(templates);\n        }\n    };\n    /**\n     * This method renders untrusted strings and scripts securely by sanitizing them first.\n     *\n     * @param {string} value - A string value representing the HTML string value to be sanitized.\n     * @param {HTMLElement} element - An HTML element to which the sanitized or unsanitized HTML string will be assigned.\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.sanitize = function (value, element) {\n        if (this.enableHtmlSanitizer) {\n            element.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(value);\n        }\n        else {\n            element.innerHTML = value;\n        }\n    };\n    Schedule.prototype.initializeResources = function (isSetModel) {\n        if (isSetModel === void 0) { isSetModel = false; }\n        if (this.resources.length > 0) {\n            this.resourceBase = new _base_resource__WEBPACK_IMPORTED_MODULE_23__.ResourceBase(this);\n            this.resourceBase.bindResourcesData(isSetModel);\n        }\n        else {\n            this.resourceBase = null;\n            this.resourceCollection = [];\n            this.renderElements(isSetModel);\n        }\n    };\n    Schedule.prototype.destroyEditorWindow = function () {\n        if (this.eventWindow) {\n            this.eventWindow.destroy();\n            this.eventWindow = null;\n        }\n        this.eventWindow = new _popups_event_window__WEBPACK_IMPORTED_MODULE_11__.EventWindow(this);\n    };\n    /**\n     * Method to render the layout elements\n     *\n     * @param {boolean} isLayoutOnly Accepts the boolean value to render layout or not\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.renderElements = function (isLayoutOnly) {\n        if (isLayoutOnly) {\n            this.initializeView(this.currentView);\n            this.eventWindow.refresh();\n            return;\n        }\n        this.destroyHeaderModule();\n        if (this.showHeaderBar) {\n            this.headerModule = new _renderer_header_renderer__WEBPACK_IMPORTED_MODULE_2__.HeaderRenderer(this);\n        }\n        this.renderTableContainer();\n        this.uiStateValues.isTransformed = Math.round(this.element.getBoundingClientRect().width) !== this.element.offsetWidth;\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch) {\n            this.scheduleTouchModule = new _actions_touch__WEBPACK_IMPORTED_MODULE_4__.ScheduleTouch(this);\n        }\n        this.initializeView(this.currentView);\n        this.destroyPopups();\n        if (!this.isPrinting) {\n            this.initializePopups();\n        }\n    };\n    Schedule.prototype.validateDate = function (selectedDate) {\n        if (selectedDate === void 0) { selectedDate = this.selectedDate; }\n        // persist the selected date value\n        var date = selectedDate instanceof Date ? new Date(selectedDate.getTime()) : new Date(selectedDate);\n        var minDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.minDate) ? new Date(1900, 0, 1) :\n            this.minDate instanceof Date ? new Date(this.minDate.getTime()) : new Date(this.minDate);\n        var maxDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.maxDate) ? new Date(2099, 11, 31) :\n            this.maxDate instanceof Date ? new Date(this.maxDate.getTime()) : new Date(this.maxDate);\n        if (minDate <= maxDate) {\n            if (date < minDate) {\n                date = minDate;\n            }\n            if (date > maxDate) {\n                date = maxDate;\n            }\n            this.setProperties({ selectedDate: new Date('' + date), minDate: new Date('' + minDate), maxDate: new Date('' + maxDate) }, true);\n            if (this.eventWindow) {\n                this.eventWindow.updateMinMaxDateToEditor();\n            }\n        }\n        else {\n            throw Error('minDate should be equal or less than maxDate');\n        }\n    };\n    Schedule.prototype.getViewIndex = function (viewName) {\n        for (var item = 0; item < this.viewCollections.length; item++) {\n            var checkIndex = this.viewCollections[parseInt(item.toString(), 10)].option;\n            if (checkIndex === viewName) {\n                return item;\n            }\n        }\n        return -1;\n    };\n    Schedule.prototype.setViewOptions = function (isModuleLoad) {\n        if (isModuleLoad === void 0) { isModuleLoad = false; }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.views) || this.views.length === 0) {\n            return;\n        }\n        this.viewOptions = {};\n        this.viewCollections = [];\n        var viewName;\n        var selectedView;\n        var prevIndex = this.viewIndex;\n        var count = 0;\n        this.viewIndex = -1;\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            var isOptions = (typeof view === 'string') ? false : true;\n            if (typeof view === 'string') {\n                viewName = view;\n                if (this.currentView === viewName) {\n                    selectedView = viewName;\n                    this.viewIndex = count;\n                }\n            }\n            else {\n                viewName = view.option;\n                if (view.isSelected) {\n                    selectedView = viewName;\n                    this.viewIndex = count;\n                }\n            }\n            var obj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({ option: viewName }, isOptions ? view : {});\n            var fieldViewName = viewName.charAt(0).toLowerCase() + viewName.slice(1);\n            obj.cellHeaderTemplateName = obj.cellHeaderTemplate ? obj.option : '';\n            obj.dateHeaderTemplateName = obj.dateHeaderTemplate ? obj.option : '';\n            obj.dateRangeTemplateName = obj.dateRangeTemplate ? obj.option : '';\n            obj.cellTemplateName = obj.cellTemplate ? obj.option : '';\n            obj.dayHeaderTemplateName = obj.dayHeaderTemplate ? obj.option : '';\n            obj.monthHeaderTemplateName = obj.monthHeaderTemplate ? obj.option : '';\n            obj.resourceHeaderTemplateName = obj.resourceHeaderTemplate ? obj.option : '';\n            obj.headerIndentTemplateName = obj.headerIndentTemplate ? obj.option : '';\n            obj.eventTemplateName = obj.eventTemplate ? obj.option : '';\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.firstDayOfWeek) && obj.firstDayOfWeek === 0) {\n                delete obj.firstDayOfWeek;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj.interval) && obj.interval === 1) {\n                delete obj.interval;\n            }\n            this.viewCollections.push(obj);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.viewOptions[\"\" + fieldViewName])) {\n                this.viewOptions[\"\" + fieldViewName] = [obj];\n            }\n            else {\n                this.viewOptions[\"\" + fieldViewName].push(obj);\n            }\n            count++;\n        }\n        if (!isModuleLoad && selectedView) {\n            this.setProperties({ currentView: selectedView }, true);\n        }\n        if (this.viewIndex === -1) {\n            var currentIndex = this.getViewIndex(this.currentView);\n            this.viewIndex = ((typeof this.views[0] !== 'string') && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevIndex) && prevIndex !== -1)) ? prevIndex :\n                (currentIndex === -1) ? 0 : currentIndex;\n        }\n    };\n    Schedule.prototype.getActiveViewOptions = function () {\n        var timeScale = {\n            enable: this.timeScale.enable,\n            interval: this.timeScale.interval,\n            slotCount: this.timeScale.slotCount,\n            majorSlotTemplate: this.timeScale.majorSlotTemplate,\n            minorSlotTemplate: this.timeScale.minorSlotTemplate\n        };\n        var isYearView = this.viewCollections[this.viewIndex].option.indexOf('Year') > -1;\n        var group = {\n            byDate: isYearView ? false : this.group.byDate,\n            byGroupID: this.group.byGroupID,\n            allowGroupEdit: this.group.allowGroupEdit,\n            resources: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.group.resources) ? [] : this.group.resources,\n            headerTooltipTemplate: this.group.headerTooltipTemplate,\n            enableCompactView: this.group.enableCompactView,\n            hideNonWorkingDays: ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.currentView) > -1 ? this.group.hideNonWorkingDays : false\n        };\n        var workDays = this.viewCollections[this.viewIndex].workDays ? [] : this.workDays;\n        var scheduleOptions = {\n            dateFormat: this.dateFormat,\n            endHour: this.endHour,\n            isSelected: false,\n            option: null,\n            readonly: this.readonly,\n            startHour: this.startHour,\n            allowVirtualScrolling: false,\n            allowOverlap: this.allowOverlap,\n            overscanCount: this.overscanCount,\n            cellHeaderTemplate: this.cellHeaderTemplate,\n            dayHeaderTemplate: this.dayHeaderTemplate,\n            monthHeaderTemplate: this.monthHeaderTemplate,\n            cellTemplate: this.cellTemplate,\n            eventTemplate: this.eventSettings.template,\n            dateHeaderTemplate: this.dateHeaderTemplate,\n            dateRangeTemplate: this.dateRangeTemplate,\n            resourceHeaderTemplate: this.resourceHeaderTemplate,\n            headerIndentTemplate: this.headerIndentTemplate,\n            firstMonthOfYear: this.firstMonthOfYear,\n            firstDayOfWeek: this.firstDayOfWeek,\n            workDays: workDays,\n            monthsCount: this.monthsCount,\n            showWeekend: this.showWeekend,\n            showWeekNumber: this.showWeekNumber,\n            displayName: null,\n            interval: 1,\n            timeScale: timeScale,\n            timeFormat: this.internalTimeFormat,\n            group: group,\n            headerRows: this.headerRows,\n            orientation: 'Horizontal',\n            numberOfWeeks: 0,\n            displayDate: null,\n            enableLazyLoading: false\n        };\n        var viewOptions = this.viewCollections[this.viewIndex];\n        var viewsData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(scheduleOptions, viewOptions, undefined, true);\n        if (this.firstDayOfWeek !== 0 && viewOptions.firstDayOfWeek && this.firstDayOfWeek !== viewOptions.firstDayOfWeek) {\n            viewsData.firstDayOfWeek = this.firstDayOfWeek;\n        }\n        if (viewsData.displayDate) {\n            viewsData.displayDate = viewsData.displayDate instanceof Date ? new Date(viewsData.displayDate.getTime()) :\n                new Date(viewsData.displayDate);\n        }\n        if (viewsData.enableLazyLoading && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(viewsData.group.resources) && viewsData.group.resources.length > 0 &&\n            (['Agenda', 'MonthAgenda', 'Year', 'TimelineYear'].indexOf(viewsData.option) === -1 ||\n                (viewsData.option === 'TimelineYear' && viewsData.orientation === 'Vertical'))) {\n            viewsData.allowVirtualScrolling = true;\n        }\n        return viewsData;\n    };\n    Schedule.prototype.initializeDataModule = function () {\n        this.eventFields = {\n            id: this.eventSettings.fields.id,\n            isBlock: this.eventSettings.fields.isBlock,\n            subject: this.eventSettings.fields.subject.name,\n            startTime: this.eventSettings.fields.startTime.name,\n            endTime: this.eventSettings.fields.endTime.name,\n            startTimezone: this.eventSettings.fields.startTimezone.name,\n            endTimezone: this.eventSettings.fields.endTimezone.name,\n            location: this.eventSettings.fields.location.name,\n            description: this.eventSettings.fields.description.name,\n            isAllDay: this.eventSettings.fields.isAllDay.name,\n            recurrenceID: this.eventSettings.fields.recurrenceID.name,\n            recurrenceRule: this.eventSettings.fields.recurrenceRule.name,\n            recurrenceException: this.eventSettings.fields.recurrenceException.name,\n            isReadonly: this.eventSettings.fields.isReadonly,\n            followingID: this.eventSettings.fields.followingID\n        };\n        this.setEditorTitles();\n        this.dataModule = new _actions_data__WEBPACK_IMPORTED_MODULE_6__.Data(this, this.eventSettings.dataSource, this.eventSettings.query);\n        this.crudModule = new _actions_crud__WEBPACK_IMPORTED_MODULE_17__.Crud(this);\n    };\n    Schedule.prototype.setEditorTitles = function () {\n        this.editorTitles = {\n            subject: this.eventSettings.fields.subject.title || this.localeObj.getConstant('title'),\n            startTime: this.eventSettings.fields.startTime.title || this.localeObj.getConstant('start'),\n            endTime: this.eventSettings.fields.endTime.title || this.localeObj.getConstant('end'),\n            isAllDay: this.eventSettings.fields.isAllDay.title || this.localeObj.getConstant('allDay'),\n            startTimezone: this.eventSettings.fields.startTimezone.title || this.localeObj.getConstant('startTimezone'),\n            endTimezone: this.eventSettings.fields.endTimezone.title || this.localeObj.getConstant('endTimezone'),\n            location: this.eventSettings.fields.location.title || this.localeObj.getConstant('location'),\n            description: this.eventSettings.fields.description.title || this.localeObj.getConstant('description'),\n            recurrenceRule: this.eventSettings.fields.recurrenceRule.title || this.localeObj.getConstant('repeat')\n        };\n    };\n    Schedule.prototype.initializeView = function (viewName) {\n        this.showSpinner();\n        this.activeViewOptions = this.getActiveViewOptions();\n        if (this.resourceBase) {\n            this.resourceBase.setResourceCollection();\n        }\n        this.initializeTemplates();\n        this.renderModule.render(viewName);\n    };\n    Schedule.prototype.initializeTemplates = function () {\n        this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);\n        this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);\n        this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);\n        this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n        this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n        this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n        this.majorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.majorSlotTemplate);\n        this.minorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.minorSlotTemplate);\n        this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n        this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n        this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);\n        this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);\n        this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n        this.editorTemplateFn = this.templateParser(this.editorTemplate);\n        this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);\n        this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);\n        this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n        this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n        this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n    };\n    Schedule.prototype.initializePopups = function () {\n        this.eventWindow = new _popups_event_window__WEBPACK_IMPORTED_MODULE_11__.EventWindow(this);\n        this.quickPopup = new _popups_quick_popups__WEBPACK_IMPORTED_MODULE_9__.QuickPopups(this);\n    };\n    /**\n     * Method to get day names\n     *\n     * @param {string} type Accepts the day name\n     * @returns {string[]} Returns the collection of day names\n     * @private\n     */\n    Schedule.prototype.getDayNames = function (type) {\n        var culShortNames = [];\n        var cldrObj;\n        var nameSpace = '';\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.locale) || this.locale === 'en' || this.locale === 'en-US') {\n            nameSpace = 'days.stand-alone.';\n            cldrObj = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace + type, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getDefaultDateObject)(this.getCalendarMode())));\n        }\n        else {\n            nameSpace = 'main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.days.format.' + type;\n            cldrObj = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nameSpace, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.cldrData));\n        }\n        for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {\n            var obj = _a[_i];\n            culShortNames.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(obj, cldrObj));\n        }\n        return culShortNames;\n    };\n    Schedule.prototype.setCldrTimeFormat = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.timeFormat)) {\n            this.internalTimeFormat = this.timeFormat;\n            return;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.locale) || this.locale === 'en' || this.locale === 'en-US') {\n            this.internalTimeFormat = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('timeFormats.short', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getDefaultDateObject)(this.getCalendarMode())));\n        }\n        else {\n            this.internalTimeFormat = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.timeFormats.short', _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.cldrData));\n        }\n    };\n    /**\n     * Method to get calendar mode\n     *\n     * @returns {string} Returns the calendar mode\n     * @private\n     */\n    Schedule.prototype.getCalendarMode = function () {\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.calendarMode) ? this.calendarMode.toLowerCase() : 'gregorian';\n    };\n    /**\n     * Method to get time in string\n     *\n     * @param {Date} date Accepts the date object\n     * @returns {string} Returns the time in string\n     * @private\n     */\n    Schedule.prototype.getTimeString = function (date) {\n        var time = this.globalize.formatDate(date, {\n            format: this.activeViewOptions.timeFormat,\n            type: 'time', calendar: this.getCalendarMode()\n        });\n        return time.toLocaleUpperCase();\n    };\n    /**\n     * Method to get  date object\n     *\n     * @param {Date} date Accepts the date object\n     * @returns {Date} Returns the date object\n     * @private\n     */\n    Schedule.prototype.getDateTime = function (date) {\n        return date instanceof Date ? new Date(date.getTime()) : new Date(date);\n    };\n    Schedule.prototype.setCalendarMode = function () {\n        if (this.calendarMode === 'Islamic') {\n            this.calendarUtil = new _common_calendar_util__WEBPACK_IMPORTED_MODULE_22__.Islamic();\n        }\n        else {\n            this.calendarUtil = new _common_calendar_util__WEBPACK_IMPORTED_MODULE_22__.Gregorian();\n        }\n    };\n    /**\n     * Method to change the current view\n     *\n     * @param {View} view Accepts the view name\n     * @param {Event} event Accepts the event object\n     * @param {boolean} muteOnChange Accepts the value to enable or disable mute on change\n     * @param {number} index Accepts the index value\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.changeView = function (view, event, muteOnChange, index) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n            index = this.getViewIndex(view);\n        }\n        if (!muteOnChange && index === this.viewIndex && this.currentView === view || index < 0) {\n            return;\n        }\n        var previousView = this.activeViewOptions ? this.activeViewOptions.option : this.currentView;\n        var args = { requestType: 'viewNavigate', cancel: false, event: event };\n        this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.actionBegin, args, function (actionArgs) {\n            if (!actionArgs.cancel) {\n                var navArgs = {\n                    action: 'view', cancel: false, currentDate: _this.selectedDate, previousView: previousView, currentView: view, viewIndex: index\n                };\n                _this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.navigating, navArgs, function (navigationArgs) {\n                    if (!navigationArgs.cancel) {\n                        var isVertical = ['Day', 'Week', 'WorkWeek'].indexOf(view) > -1 && ['Day', 'Week', 'WorkWeek'].indexOf(previousView) < 0;\n                        _this.uiStateValues.isInitial = isVertical || view.indexOf('Timeline') > -1 || view.indexOf('Year') > -1;\n                        _this.uiStateValues.top = view.indexOf('Timeline') > -1 && previousView.indexOf('Timeline') < 0 ? 0 : _this.uiStateValues.top;\n                        _this.viewIndex = navigationArgs.viewIndex;\n                        _this.setProperties({ currentView: view }, true);\n                        if (_this.headerModule) {\n                            _this.headerModule.updateActiveView();\n                            _this.headerModule.setCalendarDate(_this.selectedDate);\n                            _this.headerModule.setCalendarView();\n                        }\n                        _this.initializeView(_this.currentView);\n                        _this.animateLayout();\n                        args = { requestType: 'viewNavigate', cancel: false, event: event };\n                        _this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.actionComplete, args);\n                    }\n                    else {\n                        _this.currentView = previousView;\n                    }\n                });\n            }\n            else {\n                _this.currentView = previousView;\n            }\n        });\n    };\n    /**\n     * Method to change the view date\n     *\n     * @param {Date} selectedDate Accepts the selected date\n     * @param {Event} event Accepts the event object\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.changeDate = function (selectedDate, event) {\n        var _this = this;\n        var args = { requestType: 'dateNavigate', cancel: false, event: event };\n        this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.actionBegin, args, function (actionArgs) {\n            if (!actionArgs.cancel) {\n                var navArgs = {\n                    action: 'date', cancel: false, previousDate: _this.selectedDate, currentDate: selectedDate\n                };\n                _this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.navigating, navArgs, function (navigationArgs) {\n                    if (!navigationArgs.cancel) {\n                        _this.uiStateValues.isInitial = _this.activeView.isTimelineView() && _this.currentView !== 'TimelineYear';\n                        _this.validateDate(navigationArgs.currentDate);\n                        if (_this.headerModule) {\n                            _this.headerModule.setCalendarDate(navigationArgs.currentDate);\n                        }\n                        if (_this.currentView === 'MonthAgenda' && _this.monthAgendaModule) {\n                            _this.monthAgendaModule.monthAgendaDate = new Date('' + _this.selectedDate);\n                        }\n                        _this.initializeView(_this.currentView);\n                        _this.animateLayout();\n                        args = { requestType: 'dateNavigate', cancel: false, event: event };\n                        _this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.actionComplete, args);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Method to validate min and max date\n     *\n     * @param {Date} date Accepts the date object\n     * @returns {boolean} Returns the boolean result to validate the min and max date\n     * @private\n     */\n    Schedule.prototype.isMinMaxDate = function (date) {\n        if (date === void 0) { date = this.selectedDate; }\n        var maxDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.maxDate) ? new Date(2099, 11, 31) : this.maxDate;\n        var minDate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.minDate) ? new Date(1900, 0, 1) : this.minDate;\n        return ((date.getTime() >= minDate.getTime()) && (date.getTime() <= maxDate.getTime()));\n    };\n    /**\n     * Method to validate the selected date\n     *\n     * @param {Date} date Accepts the date object\n     * @returns {boolean} Returns the boolean value for given date is selected date or not\n     * @private\n     */\n    Schedule.prototype.isSelectedDate = function (date) {\n        return date.setHours(0, 0, 0, 0) === new Date('' + this.selectedDate).setHours(0, 0, 0, 0);\n    };\n    /**\n     * Method to get the current time\n     *\n     * @param {Date} date Accepts the date object\n     * @returns {Date} Returns the date object after performing the timezone conversion\n     * @private\n     */\n    Schedule.prototype.getCurrentTime = function (date) {\n        if (date === void 0) { date = new Date(); }\n        if (this.timezone) {\n            return this.tzModule.convert(date, this.tzModule.getLocalTimezoneName(), this.timezone);\n        }\n        return date;\n    };\n    /** Method to get navigate view\n     *\n     * @returns {View} Return the navigate view name\n     * @private\n     */\n    Schedule.prototype.getNavigateView = function () {\n        if (this.activeView.isTimelineView()) {\n            return this.currentView === 'TimelineMonth' || this.currentView === 'TimelineYear' ? 'TimelineDay' : 'Agenda';\n        }\n        return 'Day';\n    };\n    Schedule.prototype.animateLayout = function () {\n        if (!this.activeView.element) {\n            return;\n        }\n        new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({ duration: 600, name: 'FadeIn', timingFunction: 'easeIn' }).animate(this.activeView.element);\n    };\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} Returns the declared modules\n     * @private\n     */\n    Schedule.prototype.requiredModules = function () {\n        var modules = [];\n        this.setViewOptions(true);\n        for (var _i = 0, _a = Object.keys(this.viewOptions); _i < _a.length; _i++) {\n            var view = _a[_i];\n            view = (view === 'timelineDay' || view === 'timelineWeek' || view === 'timelineWorkWeek') ? 'timelineViews' : view;\n            modules.push({ member: view, args: [this] });\n        }\n        if (this.allowDragAndDrop) {\n            modules.push({ member: 'dragAndDrop', args: [this] });\n        }\n        if (this.allowResizing) {\n            modules.push({ member: 'resize', args: [this] });\n        }\n        modules.push({ member: 'excelExport', args: [this] });\n        modules.push({ member: 'iCalendarExport', args: [this] });\n        modules.push({ member: 'iCalendarImport', args: [this] });\n        modules.push({ member: 'print', args: [this] });\n        return modules;\n    };\n    /**\n     * Initializes the values of private members.\n     *\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.preRender = function () {\n        this.isAdaptive = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _base_util__WEBPACK_IMPORTED_MODULE_27__.isIPadDevice();\n        this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.locale);\n        this.tzModule = new _timezone_timezone__WEBPACK_IMPORTED_MODULE_24__.Timezone();\n        if (this && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.uiStateValues) || !(this.enablePersistence)) {\n            this.uiStateValues = {\n                expand: false, isInitial: true, left: 0, top: 0, isGroupAdaptive: false,\n                isIgnoreOccurrence: false, groupIndex: this.adaptiveGroupIndex, action: false,\n                isBlock: false, isCustomMonth: true, isPreventTimezone: false, isTransformed: false\n            };\n        }\n        this.currentTimezoneDate = this.getCurrentTime();\n        this.activeCellsData = {\n            startTime: new Date(this.currentTimezoneDate),\n            endTime: new Date(this.currentTimezoneDate),\n            isAllDay: false\n        };\n        this.activeEventData = { event: undefined, element: undefined };\n        this.getDefaultLocale();\n        this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocale, this.locale);\n        this.setCldrTimeFormat();\n        this.setCalendarMode();\n        this.eventsData = [];\n        this.eventsProcessed = [];\n        this.blockData = [];\n        this.blockProcessed = [];\n        this.resourceCollection = [];\n        this.currentAction = null;\n        this.selectedElements = [];\n        this.activeEventTemplates = [];\n        this.setViewOptions();\n    };\n    Schedule.prototype.getDefaultLocale = function () {\n        this.defaultLocale = {\n            day: 'Day',\n            week: 'Week',\n            workWeek: 'Work Week',\n            month: 'Month',\n            year: 'Year',\n            agenda: 'Agenda',\n            weekAgenda: 'Week Agenda',\n            workWeekAgenda: 'Work Week Agenda',\n            monthAgenda: 'Month Agenda',\n            today: 'Today',\n            noEvents: 'No events',\n            emptyContainer: 'There are no events scheduled on this day.',\n            allDay: 'All day',\n            start: 'Start',\n            end: 'End',\n            more: 'more',\n            close: 'Close',\n            cancel: 'Cancel',\n            noTitle: '(No Title)',\n            delete: 'Delete',\n            deleteEvent: 'Delete Event',\n            deleteMultipleEvent: 'Delete Multiple Events',\n            selectedItems: 'Items selected',\n            deleteSeries: 'Entire Series',\n            edit: 'Edit',\n            editSeries: 'Entire Series',\n            editEvent: 'Edit Event',\n            createEvent: 'Create',\n            subject: 'Subject',\n            addTitle: 'Add title',\n            moreDetails: 'More Details',\n            moreEvents: 'More Events',\n            save: 'Save',\n            editContent: 'How would you like to change the appointment in the series?',\n            deleteContent: 'Are you sure you want to delete this event?',\n            deleteMultipleContent: 'Are you sure you want to delete the selected events?',\n            newEvent: 'New Event',\n            title: 'Title',\n            location: 'Location',\n            description: 'Description',\n            timezone: 'Timezone',\n            startTimezone: 'Start Timezone',\n            endTimezone: 'End Timezone',\n            repeat: 'Repeat',\n            saveButton: 'Save',\n            cancelButton: 'Cancel',\n            deleteButton: 'Delete',\n            recurrence: 'Recurrence',\n            wrongPattern: 'The recurrence pattern is not valid.',\n            seriesChangeAlert: 'Do you want to cancel the changes made to specific ' +\n                'instances of this series and match it to the whole series again?',\n            createError: 'The duration of the event must be shorter than how frequently it occurs. ' +\n                'Shorten the duration, or change the recurrence pattern in the recurrence event editor.',\n            sameDayAlert: 'Two occurrences of the same event cannot occur on the same day.',\n            occurenceAlert: 'Cannot reschedule an occurrence of the recurring appointment if it skips over ' +\n                'a later occurrence of the same appointment.',\n            editRecurrence: 'Edit Recurrence',\n            recurringEvent: 'Recurring Event',\n            repeats: 'Repeats',\n            alert: 'Alert',\n            startEndError: 'The selected end date occurs before the start date.',\n            invalidDateError: 'The entered date value is invalid.',\n            blockAlert: 'Events cannot be scheduled within the blocked time range.',\n            overlapAlert: 'Events cannot be scheduled during the chosen time as it overlaps with another event.',\n            ok: 'Ok',\n            yes: 'Yes',\n            no: 'No',\n            of: 'of',\n            occurrence: 'Occurrence',\n            series: 'Series',\n            previous: 'Previous',\n            next: 'Next',\n            timelineDay: 'Timeline Day',\n            timelineWeek: 'Timeline Week',\n            timelineWorkWeek: 'Timeline Work Week',\n            timelineMonth: 'Timeline Month',\n            timelineYear: 'Timeline Year',\n            editFollowingEvent: 'Following Events',\n            deleteTitle: 'Delete Event',\n            editTitle: 'Edit Event',\n            beginFrom: 'Begin From',\n            endAt: 'Ends At',\n            expandAllDaySection: 'Expand-all-day-section',\n            collapseAllDaySection: 'Collapse-all-day-section',\n            searchTimezone: 'Search Timezone',\n            noRecords: 'No records found'\n        };\n    };\n    Schedule.prototype.wireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'resize', this.onScheduleResize, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'orientationchange', this.onScheduleResize, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.onDocumentClick, this);\n        if (this.allowClipboard) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'paste', this.onDocumentPaste, this);\n        }\n    };\n    /**\n     * Method to remove selected class\n     *\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.removeSelectedClass = function () {\n        var selectedCells = this.getSelectedCells();\n        for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {\n            var cell = selectedCells_1[_i];\n            cell.removeAttribute('tabindex');\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(selectedCells, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.SELECTED_CELL_CLASS);\n        if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {\n            this.keyboardInteractionModule.selectedCells = [];\n        }\n    };\n    /**\n     * Method to add selected class\n     *\n     * @param {HTMLTableCellElement[]} cells Accepts the collection of elements\n     * @param {HTMLTableCellElement} focusCell Accepts the focus element\n     * @param {boolean} isPreventScroll Accepts the boolean value to prevent scroll\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.addSelectedClass = function (cells, focusCell, isPreventScroll) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(cells, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.SELECTED_CELL_CLASS);\n        if (focusCell) {\n            focusCell.setAttribute('tabindex', '0');\n            focusCell.focus({ preventScroll: isPreventScroll || false });\n        }\n    };\n    /**\n     * Method to select cell\n     *\n     * @param {HTMLElement | HTMLTableCellElement} element Accepts the select element\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.selectCell = function (element) {\n        this.removeSelectedClass();\n        this.addSelectedClass([element], element);\n    };\n    /**\n     * Method to get all day row element\n     *\n     * @returns {Element} Returns the all day row element\n     * @private\n     */\n    Schedule.prototype.getAllDayRow = function () {\n        return this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_ROW_CLASS);\n    };\n    /**\n     * Method to get content table element\n     *\n     * @returns {HTMLElement} Returns the content table element\n     * @private\n     */\n    Schedule.prototype.getContentTable = function () {\n        return this.activeView.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.CONTENT_TABLE_CLASS + ' tbody');\n    };\n    /**\n     * Method to get all content table rows\n     *\n     * @returns {HTMLElement[]} Returns the content table rows\n     * @private\n     */\n    Schedule.prototype.getTableRows = function () {\n        return [].slice.call(this.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.CONTENT_TABLE_CLASS + ' tbody tr:not(.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.HIDDEN_CLASS + ')'));\n    };\n    /**\n     * Method to get work cell elements\n     *\n     * @returns {Element[]} Returns the all work cell elements\n     * @private\n     */\n    Schedule.prototype.getWorkCellElements = function () {\n        return [].slice.call(this.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_CELLS_CLASS));\n    };\n    /**\n     * Method to get the index from date collection\n     *\n     * @param {Date[]} collection Accepts the collections of date\n     * @param {Date} date Accepts the date object\n     * @returns {number} Returns the index compared date with date collections\n     * @private\n     */\n    Schedule.prototype.getIndexOfDate = function (collection, date) {\n        return collection.map(Number).indexOf(+date);\n    };\n    /**\n     * Method to find all day cell\n     *\n     * @param {Element} td Accepts the DOM Element\n     * @returns {boolean} Returns the boolean value\n     * @private\n     */\n    Schedule.prototype.isAllDayCell = function (td) {\n        if (['Month', 'TimelineMonth', 'TimelineYear', 'MonthAgenda'].indexOf(this.currentView) > -1 ||\n            td.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_CELLS_CLASS) ||\n            td.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {\n            return true;\n        }\n        if (this.activeView.isTimelineView() && this.activeViewOptions.headerRows.length > 0 &&\n            this.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Method to get date from element\n     *\n     * @param {Element} td Accepts the DOM element\n     * @returns {Date} Returns the date object\n     * @private\n     */\n    Schedule.prototype.getDateFromElement = function (td) {\n        var dateString;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(td)) {\n            dateString = td.getAttribute('data-date');\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dateString)) {\n            var dateInMS = parseInt(dateString, 10);\n            var date = new Date(dateInMS);\n            return date;\n        }\n        return undefined;\n    };\n    /**\n     * Method to get target element from given selector\n     *\n     * @param {string} selector Accepts the element selector\n     * @param {number} left Accepts the pageX value\n     * @param {number} top Accepts the pageY value\n     * @returns {Element[]} Returns the collection of elements based on the given selector\n     * @private\n     */\n    Schedule.prototype.getTargetElement = function (selector, left, top) {\n        var element = document.elementFromPoint(left, top);\n        var targetElement;\n        if (element) {\n            targetElement = element.closest(selector);\n        }\n        return (targetElement) ? [targetElement] : null;\n    };\n    /**\n     * Method to process cell header template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getCellHeaderTemplate = function () {\n        return this.cellHeaderTemplateFn;\n    };\n    /**\n     * Method to process cell header template in year view.\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getDayHeaderTemplate = function () {\n        return this.dayHeaderTemplateFn;\n    };\n    /**\n     * Method to process cell header template in year view.\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getMonthHeaderTemplate = function () {\n        return this.monthHeaderTemplateFn;\n    };\n    /**\n     * Method to process cell template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getCellTemplate = function () {\n        return this.cellTemplateFn;\n    };\n    /**\n     * Method to process date header template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getDateHeaderTemplate = function () {\n        return this.dateHeaderTemplateFn;\n    };\n    /**\n     * Method to process date range template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getDateRangeTemplate = function () {\n        return this.dateRangeTemplateFn;\n    };\n    /**\n     * Method to process major slot template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getMajorSlotTemplate = function () {\n        return this.majorSlotTemplateFn;\n    };\n    /**\n     * Method to process minor slot template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getMinorSlotTemplate = function () {\n        return this.minorSlotTemplateFn;\n    };\n    /**\n     * Method to process appointment template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getAppointmentTemplate = function () {\n        return this.appointmentTemplateFn;\n    };\n    /**\n     * Method to process appointment tooltip template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getEventTooltipTemplate = function () {\n        return this.eventTooltipTemplateFn;\n    };\n    /**\n     * Method to process header tooltip template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getHeaderTooltipTemplate = function () {\n        return this.headerTooltipTemplateFn;\n    };\n    /**\n     * Method to process editor template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getEditorTemplate = function () {\n        return this.editorTemplateFn;\n    };\n    /**\n     * Method to process editor header template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getEditorHeaderTemplate = function () {\n        return this.editorHeaderTemplateFn;\n    };\n    /**\n     * Method to process editor footer template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getEditorFooterTemplate = function () {\n        return this.editorFooterTemplateFn;\n    };\n    /**\n     * Method to process quick info header template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getQuickInfoTemplatesHeader = function () {\n        return this.quickInfoTemplatesHeaderFn;\n    };\n    /**\n     * Method to process quick info content template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getQuickInfoTemplatesContent = function () {\n        return this.quickInfoTemplatesContentFn;\n    };\n    /**\n     * Method to process quick info footer template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getQuickInfoTemplatesFooter = function () {\n        return this.quickInfoTemplatesFooterFn;\n    };\n    /**\n     * Method to process resource header template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getResourceHeaderTemplate = function () {\n        return this.resourceHeaderTemplateFn;\n    };\n    /**\n     * Method to process indent template\n     *\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.getHeaderIndentTemplate = function () {\n        return this.headerIndentTemplateFn;\n    };\n    /**\n     * Method to get dynamic CSS properties\n     *\n     * @returns {ScrollCss} Returns the CSS properties dynamically\n     * @private\n     */\n    Schedule.prototype.getCssProperties = function () {\n        var cssProps = {\n            border: this.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',\n            padding: this.enableRtl ? 'paddingLeft' : 'paddingRight',\n            rtlBorder: this.enableRtl ? 'borderRightWidth' : 'borderLeftWidth',\n            rtlPadding: this.enableRtl ? 'paddingRight' : 'paddingLeft'\n        };\n        return cssProps;\n    };\n    /**\n     * Method to remove new event element in adaptive mode\n     *\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.removeNewEventElement = function () {\n        var eventClone = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.NEW_EVENT_CLASS);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eventClone)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(eventClone);\n        }\n    };\n    /**\n     * Method to get start end time from string\n     *\n     * @param {string} startEndTime Accepts the start end time string value\n     * @returns {Date} Returns the date object\n     * @private\n     */\n    Schedule.prototype.getStartEndTime = function (startEndTime) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startEndTime) && startEndTime !== '') {\n            var startEndDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.resetTime(new Date(this.currentTimezoneDate) || this.getCurrentTime());\n            var timeString = startEndTime.split(':');\n            if (timeString.length === 2) {\n                startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);\n            }\n            return startEndDate;\n        }\n        return null;\n    };\n    Schedule.prototype.onDocumentClick = function (args) {\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.documentClick, { event: args });\n    };\n    Schedule.prototype.onDocumentPaste = function (args) {\n        this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.documentPaste, { event: args });\n    };\n    Schedule.prototype.onScheduleResize = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeView) || ((this.isAdaptive || _base_util__WEBPACK_IMPORTED_MODULE_27__.isMobile()) && document.activeElement\n            && (document.activeElement.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.SUBJECT_CLASS) ||\n                document.activeElement.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.INLINE_SUBJECT_CLASS))) || this.uiStateValues.isTapHold) {\n            return;\n        }\n        if (this.virtualScrollModule && this.activeView.isTimelineView()) {\n            this.virtualScrollModule.refreshLayout();\n        }\n        if (this.activeViewOptions.timeScale.enable && this.activeView) {\n            this.activeView.highlightCurrentTime();\n        }\n        if (this.quickPopup) {\n            this.quickPopup.onClosePopup();\n        }\n        _base_util__WEBPACK_IMPORTED_MODULE_27__.resetScrollbarWidth();\n        if (this.currentView === 'Month' || ((this.currentView !== 'Agenda' && this.currentView !== 'MonthAgenda')\n            && !this.activeViewOptions.timeScale.enable) || this.activeView.isTimelineView()) {\n            this.activeView.resetColWidth();\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.scrollUiUpdate, { cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });\n            var isRemoteRefresh = false;\n            if (this.activeViewOptions.enableLazyLoading && this.virtualScrollModule && this.virtualScrollModule.isRemoteRefresh) {\n                isRemoteRefresh = this.virtualScrollModule.isRemoteRefresh;\n                this.virtualScrollModule.isRemoteRefresh = false;\n            }\n            this.refreshEvents(isRemoteRefresh);\n            if (this.virtualScrollModule && !this.virtualScrollModule.enableTransition) {\n                var resWrap = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.RESOURCE_COLUMN_WRAP_CLASS);\n                var conWrap = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.CONTENT_WRAP_CLASS);\n                this.virtualScrollModule.enableTransition = true;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([conWrap, resWrap], 'e-transition');\n            }\n        }\n        else {\n            this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.contentReady, {});\n        }\n    };\n    /**\n     * Method to process the templates\n     *\n     * @param {string | Function} template Accepts the template in string\n     * @returns {CallbackFunction} Returns the callback function\n     * @private\n     */\n    Schedule.prototype.templateParser = function (template) {\n        if (template) {\n            try {\n                if (typeof template === 'function') {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                }\n                else {\n                    if (document.querySelectorAll(template).length) {\n                        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n                    }\n                    else {\n                        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                    }\n                }\n            }\n            catch (error) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves the selected cells.\n     *\n     * @returns {Element[]} The elements of currently selected cells will be returned.\n     * @private\n     */\n    Schedule.prototype.getSelectedCells = function () {\n        return [].slice.call(this.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.SELECTED_CELL_CLASS));\n    };\n    /**\n     * Method to generate the announcement string\n     *\n     * @param {Object} event Accepts the event object\n     * @param {string} subject Accepts the subject text\n     * @returns {string} Returns the announcement string\n     * @private\n     */\n    Schedule.prototype.getAnnouncementString = function (event, subject) {\n        var resourceName;\n        if (this.quickPopup && this.activeViewOptions.group.resources.length > 0) {\n            var constantText = '\"s event - ';\n            resourceName = this.quickPopup.getResourceText({ event: event }, 'event') + constantText;\n        }\n        var recordSubject = (subject || (event[this.eventFields.subject] || this.eventSettings.fields.subject.default));\n        var recordLocation = (event[this.eventFields.location] || this.eventSettings.fields.location.default);\n        var skeleton = 'full';\n        var startDateText = this.globalize.formatDate(event[this.eventFields.startTime], {\n            type: 'dateTime', skeleton: skeleton, calendar: this.getCalendarMode()\n        });\n        var endDateText = this.globalize.formatDate(event[this.eventFields.endTime], {\n            type: 'dateTime', skeleton: skeleton, calendar: this.getCalendarMode()\n        });\n        var announcementString = recordSubject + ' ' + this.localeObj.getConstant('beginFrom') + ' '\n            + startDateText + ' ' + this.localeObj.getConstant('endAt') + ' ' + endDateText;\n        if (resourceName) {\n            announcementString = resourceName + ' ' + announcementString;\n        }\n        if (recordLocation && recordLocation !== '') {\n            announcementString = announcementString + ' ' + this.localeObj.getConstant('location') + ' ' + recordLocation;\n        }\n        if (event[this.eventFields.recurrenceRule] && event[this.eventFields.recurrenceRule] !== ''\n            && event[this.eventFields.id] === event[this.eventFields.recurrenceID]) {\n            announcementString = announcementString + ' ' + this.localeObj.getConstant('recurringEvent');\n        }\n        return announcementString;\n    };\n    /**\n     * Method to process the element boundary validation\n     *\n     * @param {number} pageY Accepts the pageY value\n     * @param {number} pageX Accepts the pageX value\n     * @returns {ResizeEdges} Returns the boundary validation object\n     * @private\n     */\n    Schedule.prototype.boundaryValidation = function (pageY, pageX) {\n        var autoScrollDistance = 30;\n        var scrollEdges = { left: false, right: false, top: false, bottom: false };\n        var viewBoundaries = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.CONTENT_WRAP_CLASS).getBoundingClientRect();\n        if ((pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset) &&\n            (pageY > viewBoundaries.top + window.pageYOffset)) {\n            scrollEdges.top = true;\n        }\n        if ((pageY > (viewBoundaries.bottom - autoScrollDistance) + window.pageYOffset) &&\n            (pageY < viewBoundaries.bottom + window.pageYOffset)) {\n            scrollEdges.bottom = true;\n        }\n        if ((pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset) &&\n            (pageX > viewBoundaries.left + window.pageXOffset)) {\n            scrollEdges.left = true;\n        }\n        if ((pageX > (viewBoundaries.right - autoScrollDistance) + window.pageXOffset) &&\n            (pageX < viewBoundaries.right + window.pageXOffset)) {\n            scrollEdges.right = true;\n        }\n        return scrollEdges;\n    };\n    /**\n     * Method to get the week number.\n     *\n     * @param {Date[]} dates Accepts the date collections\n     * @returns {number} Returns the week number\n     * @private\n     */\n    Schedule.prototype.getWeekNumberContent = function (dates) {\n        var weekNumber;\n        if (this.weekRule === 'FirstDay') {\n            var weekNumberDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);\n            weekNumber = this.globalize.formatNumber(_base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekNumber(weekNumberDate));\n        }\n        else if (this.weekRule === 'FirstFourDayWeek') {\n            var weekFirstDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);\n            var weekLastDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);\n            var weekMidDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekMiddleDate(weekFirstDate, weekLastDate);\n            weekNumber = this.globalize.formatNumber(_base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekNumber(weekMidDate));\n        }\n        else if (this.weekRule === 'FirstFullWeek') {\n            var weekFirstDate = _base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);\n            weekNumber = this.globalize.formatNumber(_base_util__WEBPACK_IMPORTED_MODULE_27__.getWeekNumber(weekFirstDate));\n        }\n        return weekNumber;\n    };\n    /**\n     * Method to render the header indent template.\n     *\n     * @param {TdData} data Accepts the td data\n     * @param {Element} td Accepts the td element\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.renderHeaderIndentTemplate = function (data, td) {\n        if (this.activeViewOptions.headerIndentTemplate) {\n            var scheduleId = this.element.id + '_';\n            var viewName = this.activeViewOptions.headerIndentTemplateName;\n            var templateId = scheduleId + viewName + 'headerIndentTemplate';\n            var indentTemplate = [].slice.call(this.getHeaderIndentTemplate()(data, this, 'headerIndentTemplate', templateId, false, undefined, undefined, this.root));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(indentTemplate, td);\n        }\n    };\n    /**\n     * Method to check for refreshing the targeted resource row events.\n     *\n     * @returns {boolean} Returns the boolean value\n     * @private\n     */\n    Schedule.prototype.isSpecificResourceEvents = function () {\n        return this.activeViewOptions.group.resources.length > 0 && !this.activeViewOptions.group.allowGroupEdit &&\n            !this.rowAutoHeight && !this.virtualScrollModule && this.activeViewOptions.group.byGroupID;\n    };\n    Schedule.prototype.unWireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'resize', this.onScheduleResize);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'orientationchange', this.onScheduleResize);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.onDocumentClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'paste', this.onDocumentPaste);\n    };\n    /**\n     * Core method to return the component name.\n     *\n     * @returns {string} Returns the module name\n     * @private\n     */\n    Schedule.prototype.getModuleName = function () {\n        return 'schedule';\n    };\n    /**\n     * Returns the properties to be maintained in the persisted state.\n     *\n     * @returns {string} Returns the persistance data\n     * @private\n     */\n    Schedule.prototype.getPersistData = function () {\n        return this.addOnPersist(['currentView', 'selectedDate', 'scrollTop', 'scrollLeft', 'adaptiveGroupIndex']);\n    };\n    /**\n     * Called internally, if any of the property value changed.\n     *\n     * @returns {void}\n     * @private\n     */\n    Schedule.prototype.onPropertyChanged = function (newProp, oldProp) {\n        if (this.isReact && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeView)) {\n            return;\n        }\n        var state = {\n            isRefresh: false, isResource: false, isDate: false, isView: false, isLayout: false, isDataManager: false\n        };\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'views':\n                    this.setViewOptions();\n                    if (this.headerModule) {\n                        this.headerModule.updateItems();\n                    }\n                    state.isView = true;\n                    break;\n                case 'currentView':\n                    state.isView = true;\n                    break;\n                case 'minDate':\n                case 'maxDate':\n                case 'selectedDate':\n                    state.isDate = true;\n                    break;\n                case 'dateFormat':\n                    this.activeViewOptions = this.getActiveViewOptions();\n                    if (this.headerModule) {\n                        this.headerModule.updateDateRange();\n                    }\n                    break;\n                case 'showHeaderBar':\n                case 'toolbarItems':\n                    this.destroyHeaderModule();\n                    if (newProp.showHeaderBar) {\n                        this.headerModule = new _renderer_header_renderer__WEBPACK_IMPORTED_MODULE_2__.HeaderRenderer(this);\n                        this.headerModule.updateDateRange();\n                    }\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.scrollUiUpdate, { cssProperties: this.getCssProperties() });\n                    if (this.activeView.isTimelineView()) {\n                        this.refreshEvents(false);\n                    }\n                    break;\n                case 'workDays':\n                    if (JSON.stringify(oldProp.workDays) !== JSON.stringify(newProp.workDays)) {\n                        state.isLayout = true;\n                    }\n                    break;\n                case 'showWeekend':\n                case 'startHour':\n                case 'endHour':\n                case 'workHours':\n                case 'readonly':\n                case 'headerRows':\n                case 'showWeekNumber':\n                case 'rowAutoHeight':\n                    state.isLayout = true;\n                    break;\n                case 'locale':\n                case 'calendarMode':\n                    this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.locale);\n                    this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), this.defaultLocale, this.locale);\n                    this.setCldrTimeFormat();\n                    this.setCalendarMode();\n                    state.isRefresh = true;\n                    break;\n                case 'firstDayOfWeek':\n                    this.activeViewOptions.firstDayOfWeek = newProp.firstDayOfWeek;\n                    if (this.eventWindow) {\n                        this.eventWindow.refreshRecurrenceEditor();\n                    }\n                    state.isLayout = true;\n                    break;\n                case 'showTimeIndicator':\n                    if (this.activeViewOptions.timeScale.enable && this.activeView) {\n                        this.activeView.highlightCurrentTime();\n                    }\n                    break;\n                case 'cellHeaderTemplate':\n                    this.activeViewOptions.cellHeaderTemplate = newProp.cellHeaderTemplate;\n                    this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'cellTemplate':\n                    this.activeViewOptions.cellTemplate = newProp.cellTemplate;\n                    this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'dateHeaderTemplate':\n                    this.activeViewOptions.dateHeaderTemplate = newProp.dateHeaderTemplate;\n                    this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'dateRangeTemplate':\n                    this.activeViewOptions.dateRangeTemplate = newProp.dateRangeTemplate;\n                    this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n                    if (this.headerModule) {\n                        this.headerModule.updateDateRange();\n                    }\n                    break;\n                case 'dayHeaderTemplate':\n                    this.activeViewOptions.dayHeaderTemplate = newProp.dayHeaderTemplate;\n                    this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'monthHeaderTemplate':\n                    this.activeViewOptions.monthHeaderTemplate = newProp.monthHeaderTemplate;\n                    this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'resourceHeaderTemplate':\n                    this.activeViewOptions.resourceHeaderTemplate = newProp.resourceHeaderTemplate;\n                    this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n                    state.isLayout = true;\n                    break;\n                case 'timezone':\n                    this.eventBase.timezonePropertyChange(oldProp.timezone);\n                    if (this.headerModule) {\n                        this.headerModule.setCalendarTimezone();\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtlClass();\n                    state.isRefresh = true;\n                    break;\n                default:\n                    this.extendedPropertyChange(prop, newProp, oldProp, state);\n                    break;\n            }\n        }\n        this.propertyChangeAction(state);\n    };\n    Schedule.prototype.propertyChangeAction = function (state) {\n        if (state.isRefresh) {\n            this.refresh();\n        }\n        else if (state.isResource) {\n            this.initializeResources(true);\n        }\n        else if (state.isView) {\n            this.changeView(this.currentView, null, true);\n        }\n        else if (state.isDate) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectedDate)) {\n                this.setProperties({ selectedDate: this.getCurrentTime() }, true);\n            }\n            this.changeDate(this.selectedDate);\n        }\n        else if (state.isLayout) {\n            this.activeCellsData = null;\n            this.initializeView(this.currentView);\n        }\n        else if (state.isDataManager && this.crudModule) {\n            if (this.dragAndDropModule) {\n                this.dragAndDropModule.actionObj.action = '';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.EVENT_ACTION_CLASS);\n            }\n            this.crudModule.refreshDataManager();\n        }\n    };\n    Schedule.prototype.allDayRowScrollUpdate = function () {\n        var dateHeader = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.DATE_HEADER_WRAP_CLASS);\n        var allDayRow = this.element.querySelector('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_ROW_CLASS);\n        if (this.height === 'auto' || !this.enableAllDayScroll) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([dateHeader], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_APPOINTMENT_AUTO);\n            if (dateHeader.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_APPOINTMENT_SCROLL)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([dateHeader], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_APPOINTMENT_SCROLL);\n            }\n            if (this.uiStateValues.expand) {\n                var allDayCells = [].slice.call(this.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_CELLS_CLASS));\n                allDayCells[0].style.height = (allDayRow.style.height) ? allDayRow.style.height : allDayCells[1].style.height;\n            }\n        }\n        else {\n            if (dateHeader.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_APPOINTMENT_AUTO)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([dateHeader], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_APPOINTMENT_AUTO);\n            }\n            this.eventBase.allDayExpandScroll(dateHeader);\n        }\n        if (!this.uiStateValues.expand) {\n            allDayRow.style.height = '';\n        }\n    };\n    Schedule.prototype.extendedPropertyChange = function (prop, newProp, oldProp, state) {\n        switch (prop) {\n            case 'width':\n            case 'height':\n            case 'enableAllDayScroll':\n                if (['Day', 'Week', 'WorkWeek'].indexOf(this.currentView) > -1) {\n                    this.allDayRowScrollUpdate();\n                }\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.uiUpdate, { module: 'scroll', properties: { width: newProp.width, height: newProp.height } });\n                break;\n            case 'cssClass':\n                if (oldProp.cssClass) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldProp.cssClass.split(' '));\n                }\n                if (newProp.cssClass) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], newProp.cssClass.split(' '));\n                }\n                break;\n            case 'hideEmptyAgendaDays':\n            case 'agendaDaysCount':\n                this.activeViewOptions = this.getActiveViewOptions();\n                state.isView = true;\n                break;\n            case 'eventSettings':\n                this.onEventSettingsPropertyChanged(newProp.eventSettings, oldProp.eventSettings, state);\n                break;\n            case 'allowKeyboardInteraction':\n            case 'allowClipboard':\n                if (this.keyboardInteractionModule) {\n                    this.keyboardInteractionModule.destroy();\n                    this.keyboardInteractionModule = null;\n                }\n                if (newProp.allowKeyboardInteraction || newProp.allowClipboard) {\n                    this.keyboardInteractionModule = new _actions_keyboard__WEBPACK_IMPORTED_MODULE_5__.KeyboardInteraction(this);\n                }\n                break;\n            case 'timezoneDataSource':\n                if (this.eventWindow) {\n                    this.eventWindow.refresh();\n                }\n                break;\n            case 'editorTemplate':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editorTemplate)) {\n                    this.editorTemplateFn = this.templateParser(this.editorTemplate);\n                }\n                if (this.eventWindow) {\n                    this.eventWindow.setDialogContent();\n                }\n                break;\n            case 'editorHeaderTemplate':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editorHeaderTemplate)) {\n                    this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);\n                }\n                if (this.eventWindow) {\n                    this.eventWindow.setDialogHeader();\n                }\n                break;\n            case 'editorFooterTemplate':\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editorFooterTemplate)) {\n                    this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);\n                }\n                if (this.eventWindow) {\n                    this.eventWindow.setDialogFooter();\n                }\n                break;\n            case 'quickInfoTemplates':\n                if (this.quickInfoTemplates.header) {\n                    this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n                }\n                if (this.quickInfoTemplates.content) {\n                    this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n                }\n                if (this.quickInfoTemplates.footer) {\n                    this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n                }\n                break;\n            case 'group':\n                this.onGroupSettingsPropertyChanged(newProp.group, oldProp.group, state);\n                break;\n            case 'resources':\n                state.isResource = true;\n                break;\n            case 'timeScale':\n                this.activeViewOptions.timeScale.interval = newProp.timeScale.interval || this.activeViewOptions.timeScale.interval;\n                this.activeViewOptions.timeScale.slotCount = newProp.timeScale.slotCount || this.activeViewOptions.timeScale.slotCount;\n                if (this.eventWindow) {\n                    this.eventWindow.refreshDateTimePicker();\n                }\n                state.isLayout = true;\n                break;\n            case 'allowDragAndDrop':\n            case 'allowResizing':\n            case 'eventDragArea':\n            case 'allowOverlap':\n                this.refreshEvents(false);\n                break;\n            case 'weekRule':\n                state.isLayout = true;\n                break;\n            case 'firstMonthOfYear':\n                this.activeViewOptions.firstMonthOfYear = newProp.firstMonthOfYear;\n                this.viewIndex = this.activeView.viewIndex;\n                state.isLayout = true;\n                break;\n            case 'monthsCount':\n                this.activeViewOptions.monthsCount = newProp.monthsCount;\n                this.viewIndex = this.activeView.viewIndex;\n                state.isLayout = true;\n                break;\n            case 'timeFormat':\n                this.internalTimeFormat = newProp.timeFormat || this.activeViewOptions.timeFormat;\n                if (this.eventWindow) {\n                    this.eventWindow.refreshDateTimePicker();\n                }\n                state.isLayout = true;\n                break;\n            case 'enableAdaptiveUI':\n                if (this.showHeaderBar && this.headerModule) {\n                    this.destroyHeaderModule();\n                    this.headerModule = new _renderer_header_renderer__WEBPACK_IMPORTED_MODULE_2__.HeaderRenderer(this);\n                    this.headerModule.updateDateRange();\n                }\n                state.isLayout = true;\n                break;\n            case 'headerIndentTemplate':\n                this.activeViewOptions.headerIndentTemplate = newProp.headerIndentTemplate;\n                this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);\n                state.isLayout = true;\n                break;\n        }\n    };\n    Schedule.prototype.setRtlClass = function () {\n        if (this.enableRtl) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], 'e-rtl');\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], 'e-rtl');\n        }\n    };\n    Schedule.prototype.onGroupSettingsPropertyChanged = function (newProp, oldProp, state) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            if (prop === 'headerTooltipTemplate') {\n                this.headerTooltipTemplateFn = this.templateParser(newProp.headerTooltipTemplate);\n            }\n            else {\n                state.isLayout = true;\n                if (this.eventWindow) {\n                    this.eventWindow.refresh();\n                }\n            }\n        }\n    };\n    Schedule.prototype.onEventSettingsPropertyChanged = function (newProp, oldProp, state) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'dataSource':\n                case 'query':\n                case 'fields':\n                case 'includeFiltersInQuery':\n                    this.initializeDataModule();\n                    state.isDataManager = true;\n                    break;\n                case 'template':\n                    this.activeViewOptions.eventTemplate = newProp.template;\n                    this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n                    state.isDataManager = true;\n                    break;\n                case 'enableTooltip':\n                    if (this.eventTooltip) {\n                        this.eventTooltip.destroy();\n                        this.eventTooltip = null;\n                    }\n                    if (newProp.enableTooltip) {\n                        this.eventTooltip = new _popups_event_tooltip__WEBPACK_IMPORTED_MODULE_10__.EventTooltip(this);\n                    }\n                    break;\n                case 'tooltipTemplate':\n                    this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n                    break;\n                case 'resourceColorField':\n                    if (this.resourceBase) {\n                        this.resourceBase.setResourceCollection();\n                    }\n                    state.isDataManager = true;\n                    break;\n                case 'editFollowingEvents':\n                    if (this.quickPopup) {\n                        this.quickPopup.refreshQuickDialog();\n                    }\n                    break;\n                case 'allowAdding':\n                case 'allowEditing':\n                case 'allowDeleting':\n                    if (this.showHeaderBar && this.headerModule) {\n                        this.headerModule.updateAddIcon();\n                    }\n                    if (this.eventWindow) {\n                        this.eventWindow.refresh();\n                    }\n                    break;\n                case 'spannedEventPlacement':\n                case 'minimumEventDuration':\n                case 'enableMaxHeight':\n                case 'enableIndicator':\n                    this.refreshEvents(false);\n                    break;\n                case 'ignoreWhitespace':\n                    state.isLayout = true;\n                    break;\n            }\n        }\n    };\n    Schedule.prototype.destroyHeaderModule = function () {\n        if (this.headerModule) {\n            this.headerModule.destroy();\n            this.headerModule = null;\n        }\n    };\n    Schedule.prototype.destroyPopups = function () {\n        if (this.quickPopup) {\n            this.quickPopup.destroy();\n            this.quickPopup = null;\n        }\n        if (this.eventWindow) {\n            this.eventWindow.destroy();\n            this.eventWindow = null;\n        }\n    };\n    /**\n     * Allows to show the spinner on schedule at the required scenarios.\n     *\n     * @function showSpinner\n     * @returns {void}\n     */\n    Schedule.prototype.showSpinner = function () {\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.showSpinner)(this.element);\n    };\n    /**\n     * When the spinner is shown manually using `showSpinner` method, it can be hidden using this `hideSpinner` method.\n     *\n     * @function hideSpinner\n     * @returns {void}\n     */\n    Schedule.prototype.hideSpinner = function () {\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.hideSpinner)(this.element);\n    };\n    /**\n     * Sets different working hours on the required working days by accepting the required start and end time as well as the date collection\n     *  as its parameters.\n     *\n     * @function setWorkHours\n     * @param {Date} dates Collection of dates on which the given start and end hour range needs to be applied.\n     * @param {string} start Defines the work start hour.\n     * @param {string} end Defines the work end hour.\n     * @param {number} groupIndex Defines the resource index from last level.\n     * @returns {void}\n     */\n    Schedule.prototype.setWorkHours = function (dates, start, end, groupIndex) {\n        var cells = [];\n        cells = this.getWorkHourCells(dates, start, end, groupIndex);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)(cells, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_HOURS_CLASS);\n    };\n    /**\n     * Removes or resets different working hours on the required working days by accepting the required start and end time as well as the\n     * date collection as its parameters.\n     * if no parameters has been passed to this function, it will remove all the work hours.\n     *\n     * @param {Date} dates Collection of dates on which the given start and end hour range need to be applied.\n     * @param {string} start Defines the work start hour.\n     * @param {string} end Defines the work end hour.\n     * @param {number} groupIndex Defines the resource index from last level.\n     * @returns {void}\n     */\n    Schedule.prototype.resetWorkHours = function (dates, start, end, groupIndex) {\n        if (dates === void 0) { dates = this.activeView.renderDates; }\n        if (dates && start && end) {\n            var cells = this.getWorkHourCells(dates, start, end, groupIndex);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(cells, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_HOURS_CLASS);\n        }\n        else {\n            var workHourCells = [].slice.call(this.element.querySelectorAll('.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_HOURS_CLASS));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(workHourCells, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_HOURS_CLASS);\n        }\n    };\n    Schedule.prototype.getWorkHourCells = function (dates, start, end, groupIndex) {\n        if (['Agenda', 'MonthAgenda', 'Month', 'TimelineMonth'].indexOf(this.currentView) > -1) {\n            return [];\n        }\n        var startHour = this.getStartEndTime(start);\n        var endHour = this.getStartEndTime(end);\n        var tableEle = this.getContentTable();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startHour) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endHour) || !tableEle) {\n            return [];\n        }\n        startHour.setMilliseconds(0);\n        endHour.setMilliseconds(0);\n        var viewStartHour = this.activeView.getStartHour();\n        if (startHour < viewStartHour) {\n            startHour = viewStartHour;\n        }\n        var viewEndHour = this.activeView.getEndHour();\n        if (endHour > viewEndHour) {\n            endHour = viewEndHour;\n        }\n        var msMajorInterval = this.activeViewOptions.timeScale.interval * _base_util__WEBPACK_IMPORTED_MODULE_27__.MS_PER_MINUTE;\n        var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;\n        var offsetDiff = ((viewStartHour.getTimezoneOffset() - startHour.getTimezoneOffset()) * _base_util__WEBPACK_IMPORTED_MODULE_27__.MS_PER_MINUTE);\n        var endOffsetDiff = Math.abs((viewStartHour.getTimezoneOffset() - endHour.getTimezoneOffset()) * _base_util__WEBPACK_IMPORTED_MODULE_27__.MS_PER_MINUTE);\n        var startIndex = Math.round((startHour.getTime() - viewStartHour.getTime() + offsetDiff) / msInterval);\n        var endIndex = Math.ceil((endHour.getTime() - viewStartHour.getTime() - endOffsetDiff) / msInterval);\n        var tempStartIndex = startIndex;\n        var tempEndIndex = endIndex;\n        var cells = [];\n        for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n            var date = dates_1[_i];\n            date = this.getDateTime(date);\n            _base_util__WEBPACK_IMPORTED_MODULE_27__.resetTime(date);\n            var renderDates = this.activeView.renderDates;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupIndex) && this.resourceBase && !this.activeView.isTimelineView()) {\n                renderDates = this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)].renderDates;\n            }\n            var colIndex = this.getIndexOfDate(renderDates, date);\n            if (colIndex >= 0) {\n                if (this.activeView.isTimelineView()) {\n                    var slotsPerDay = Math.round((viewEndHour.getTime() - viewStartHour.getTime()) / msInterval);\n                    startIndex = tempStartIndex + (colIndex * slotsPerDay);\n                    endIndex = tempEndIndex + (colIndex * slotsPerDay);\n                }\n                for (var i = startIndex; i < endIndex; i++) {\n                    if (this.activeView.isTimelineView()) {\n                        var rowIndex = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupIndex)) ? groupIndex : 0;\n                        cells.push(tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(i.toString(), 10)]);\n                    }\n                    else {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupIndex)) {\n                            var selector = '.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_CELLS_CLASS + '[data-group-index=\"' + groupIndex + '\"]';\n                            var tds = [].slice.call(tableEle.rows[parseInt(i.toString(), 10)].querySelectorAll(selector));\n                            cells.push(tds[parseInt(colIndex.toString(), 10)]);\n                        }\n                        else {\n                            cells.push(tableEle.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)]);\n                        }\n                    }\n                }\n            }\n        }\n        return cells;\n    };\n    /**\n     * Retrieves the start and end time information of the specific cell element.\n     *\n     * @function getCellDetails\n     * @param {Element | Element[]} tdCol Accepts the single or collection of elements.\n     * @returns {CellClickEventArgs} Object An object holding the startTime, endTime and all-day information along with the target HTML element will be returned.\n     */\n    Schedule.prototype.getCellDetails = function (tdCol) {\n        var td = (tdCol instanceof Array) ? tdCol : [tdCol];\n        var firstTd = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(td[0]);\n        var lastTd = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(td.slice(-1)[0]);\n        var startTime = this.getDateFromElement(firstTd);\n        var endTime = this.getDateFromElement(lastTd);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startTime) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endTime)) {\n            return undefined;\n        }\n        var endDateFromColSpan = this.activeView.isTimelineView() && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastTd.getAttribute('colSpan')) &&\n            this.headerRows.length > 0;\n        var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute('colSpan'), 10) : 1;\n        if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ALLDAY_CELLS_CLASS) ||\n            lastTd.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.HEADER_CELLS_CLASS)) {\n            endTime = _base_util__WEBPACK_IMPORTED_MODULE_27__.addDays(new Date(endTime.getTime()), duration);\n        }\n        else {\n            endTime = this.activeView.getEndDateFromStartDate(endTime);\n        }\n        var data = {\n            startTime: startTime,\n            endTime: endTime,\n            isAllDay: this.isAllDayCell(firstTd),\n            element: tdCol\n        };\n        var groupIndex = firstTd.getAttribute('data-group-index');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupIndex)) {\n            data.groupIndex = parseInt(groupIndex, 10);\n        }\n        return data;\n    };\n    /**\n     * Retrieves the selected cell elements.\n     *\n     * @function getSelectedElements\n     * @returns {Element[]} The elements of currently selected cells will be returned.\n     */\n    Schedule.prototype.getSelectedElements = function () {\n        if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {\n            return this.keyboardInteractionModule.selectedCells;\n        }\n        return this.getSelectedCells();\n    };\n    /**\n     * To get the resource collection\n     *\n     * @function getResourceCollections\n     * @returns {ResourcesModel[]} Returns the resource collections\n     */\n    Schedule.prototype.getResourceCollections = function () {\n        return this.resourceCollection;\n    };\n    /**\n     * To set the resource collection\n     *\n     * @function setResourceCollections\n     * @param {ResourcesModel[]} resourceCol Accepts the resource collections in ResourcesModel type\n     * @param {boolean} isEventDataRefresh Accepts the boolean to refresh the appointment data source from remote or local\n     * @returns {void}\n     */\n    Schedule.prototype.setResourceCollections = function (resourceCol, isEventDataRefresh) {\n        if (isEventDataRefresh === void 0) { isEventDataRefresh = true; }\n        if (!isEventDataRefresh && this.uiStateValues) {\n            this.uiStateValues.isPreventEventRefresh = true;\n        }\n        this.setProperties({ resources: resourceCol }, false);\n    };\n    /**\n     * Current View could be change based on the provided parameters.\n     *\n     * @function changeCurrentView\n     * @param {View} viewName Accept the view in the viewCollections.\n     * @param {number} viewIndex Accept the viewIndex in the viewCollections.\n     * @returns {void}\n     */\n    Schedule.prototype.changeCurrentView = function (viewName, viewIndex) {\n        var index = this.getViewIndex(viewName);\n        var view = viewName.charAt(0).toLowerCase() + viewName.slice(1);\n        var viewOptions = this.viewOptions[\"\" + view];\n        if (viewOptions) {\n            index = this.viewCollections.indexOf(viewOptions[viewIndex || 0]);\n        }\n        if (index === -1 || index === this.viewIndex) {\n            return;\n        }\n        this.changeView(viewName, null, null, index);\n    };\n    /**\n     * Return the current view Index.\n     *\n     * @function getCurrentViewIndex\n     * @returns {number} Returns the view index\n     */\n    Schedule.prototype.getCurrentViewIndex = function () {\n        return this.viewIndex;\n    };\n    /**\n     * Retrieves the resource details based on the provided resource index.\n     *\n     * @param {number} index index of the resources at the last level.\n     * @returns {ResourceDetails} Object An object holding the details of resource and resourceData.\n     */\n    Schedule.prototype.getResourcesByIndex = function (index) {\n        if (this.resourceBase && this.resourceBase.lastResourceLevel) {\n            if (index < 0 || index >= this.resourceBase.lastResourceLevel.length) {\n                return undefined;\n            }\n            var data = this.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];\n            var groupData = {};\n            this.resourceBase.setResourceValues(groupData, index);\n            return { resource: data.resource, resourceData: data.resourceData, groupData: groupData };\n        }\n        return undefined;\n    };\n    /**\n     * This method allows to expand the resource that available on the scheduler.\n     *\n     * @function expandResource\n     * @param {string | number} resourceId Accepts the resource id in either string or number type\n     * @param {string} name Accepts the name of the resource collection\n     * @returns {void}\n     */\n    Schedule.prototype.expandResource = function (resourceId, name) {\n        if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {\n            this.resourceBase.resourceExpand(resourceId, name, false);\n        }\n    };\n    /**\n     * This method allows to collapse the resource that available on the scheduler.\n     *\n     * @function collapseResource\n     * @param {string | number} resourceId Accepts the resource id in either string or number type\n     * @param {string} name Accepts the name of the resource collection\n     * @returns {void}\n     */\n    Schedule.prototype.collapseResource = function (resourceId, name) {\n        if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {\n            this.resourceBase.resourceExpand(resourceId, name, true);\n        }\n    };\n    /**\n     * Scrolls the Schedule content area to the specified time.\n     *\n     * @function scrollTo\n     * @param {string} hour Accepts the time value in the skeleton format of 'Hm'.\n     * @param {Date} scrollDate Accepts the date object value.\n     * @returns {void}\n     */\n    Schedule.prototype.scrollTo = function (hour, scrollDate) {\n        if (this.currentView.indexOf('Agenda') < 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.e-work-cells'))) {\n            return;\n        }\n        if (this.activeView.scrollToDate && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(hour) && scrollDate) {\n            this.activeView.scrollToDate(scrollDate);\n        }\n        else if (this.activeView.scrollToHour) {\n            this.activeView.scrollToHour(hour, scrollDate);\n        }\n    };\n    /**\n     * This method allows scroll to the position of the any resources that available on the scheduler.\n     * This method is applicable for without Agenda and Month agenda views of the schedule.\n     *\n     * @function scrollToResource\n     * @param {string | number} resourceId Accepts the resource id in either string or number type\n     * @param {string} groupName Accepts the name of the resource collection\n     * @returns {void}\n     */\n    Schedule.prototype.scrollToResource = function (resourceId, groupName) {\n        if (this.resourceBase && this.resourceBase.lastResourceLevel) {\n            this.resourceBase.resourceScroll(resourceId, groupName);\n        }\n    };\n    /**\n     * Exports the Scheduler events to a calendar (.ics) file. By default, the calendar is exported with a file name `Calendar.ics`.\n     * To change this file name on export, pass the custom string value as `fileName` to get the file downloaded with this provided name.\n     *\n     * @function exportToICalendar\n     * @param {string} fileName Accepts the string value.\n     * @param {Object[]} customData Accepts the collection of objects.\n     * @returns {void}\n     */\n    Schedule.prototype.exportToICalendar = function (fileName, customData) {\n        if (this.iCalendarExportModule) {\n            this.iCalendarExportModule.initializeCalendarExport(fileName, customData);\n        }\n        else {\n            console.warn('[WARNING] :: Module \"ICalendarExport\" is not available in Schedule component!' +\n                ' You either misspelled the module name or forgot to load it.');\n            throw Error('Inject ICalendarExport module');\n        }\n    };\n    /**\n     * Imports the events from an .ics file downloaded from any of the calendars like Google or Outlook into the Scheduler.\n     * This method accepts the blob object or string format of an .ics file to be imported as a mandatory argument.\n     *\n     * @function importICalendar\n     * @param {Blob | string} fileContent Accepts the file object or string format of an .ics file.\n     * @returns {void}\n     */\n    Schedule.prototype.importICalendar = function (fileContent) {\n        if (this.iCalendarImportModule) {\n            this.iCalendarImportModule.initializeCalendarImport(fileContent);\n        }\n        else {\n            console.warn('[WARNING] :: Module \"ICalendarImport\" is not available in Schedule component!' +\n                ' You either misspelled the module name or forgot to load it.');\n            throw Error('Inject ICalendarImport module');\n        }\n    };\n    /**\n     * Adds the newly created event into the Schedule dataSource.\n     *\n     * @function addEvent\n     * @param {Object | Object[]} data Single or collection of event objects to be added into Schedule.\n     * @returns {void}\n     */\n    Schedule.prototype.addEvent = function (data) {\n        this.crudModule.addEvent(data);\n    };\n    /**\n     * Generates the occurrences of a single recurrence event based on the provided event.\n     *\n     * @function generateEventOccurrences\n     * @param {Object} event Accepts the parent recurrence event from which the occurrences are generated.\n     * @param {Date} startDate Accepts the start date for the event occurrences. If not provided, the event's start date will be used.\n     * @returns {Object[]} Returns the collection of occurrence event objects.\n     */\n    Schedule.prototype.generateEventOccurrences = function (event, startDate) {\n        return (this.eventBase) ? this.eventBase.generateOccurrence(event, startDate) : [];\n    };\n    /**\n     * Allows the Scheduler events data to be exported as an Excel file either in .xlsx or .csv file formats.\n     * By default, the whole event collection bound to the Scheduler gets exported as an Excel file.\n     * To export only the specific events of Scheduler, you need to pass the custom data collection as\n     * a parameter to this `exportToExcel` method. This method accepts the export options as arguments such as fileName,\n     * exportType, fields, customData, and includeOccurrences. The `fileName` denotes the name to be given for the exported\n     * file and the `exportType` allows you to set the format of an Excel file to be exported either as .xlsx or .csv.\n     * The custom or specific field collection of event dataSource to be exported can be provided through `fields` option\n     * and the custom data collection can be exported by passing them through the `customData` option. There also exists\n     * option to export each individual instances of the recurring events to an Excel file, by setting true or false to the\n     * `includeOccurrences` option, denoting either to include or exclude the occurrences as separate instances on an exported Excel file.\n     *\n     * @function exportToExcel\n     * @param {ExportOptions} excelExportOptions The export options to be set before start with exporting the Scheduler events to an Excel file.\n     * @returns {void}\n     */\n    Schedule.prototype.exportToExcel = function (excelExportOptions) {\n        if (this.excelExportModule) {\n            this.excelExportModule.initializeExcelExport(excelExportOptions);\n        }\n        else {\n            console.warn('[WARNING] :: Module \"ExcelExport\" is not available in Schedule component!' +\n                ' You either misspelled the module name or forgot to load it.');\n            throw Error('Inject ExcelExport module');\n        }\n    };\n    /**\n     * Method allows to print the scheduler.\n     *\n     * @function print\n     * @param {ScheduleModel} printOptions The export options to be set before start with exporting\n     * the Scheduler events to the print window.\n     * @returns {void}\n     */\n    Schedule.prototype.print = function (printOptions) {\n        if (this.printModule) {\n            this.printModule.print(printOptions);\n        }\n        else {\n            console.warn('[WARNING] :: Module \"Print\" is not available in Schedule component!' +\n                ' You either misspelled the module name or forgot to load it.');\n            throw Error('Inject Print module');\n        }\n    };\n    /**\n     * Updates the changes made in the event object by passing it as an parameter into the dataSource.\n     *\n     * @function saveEvent\n     * @param {Object | Object[]} data Single or collection of event objects to be saved into Schedule.\n     * @param {CurrentAction} currentAction Denotes the action that takes place either for editing occurrence or series.\n     *  The valid current action names are `EditOccurrence` or `EditSeries`.\n     * @returns {void}\n     */\n    Schedule.prototype.saveEvent = function (data, currentAction) {\n        this.crudModule.saveEvent(data, currentAction);\n    };\n    /**\n     * Deletes the events based on the provided ID or event collection in the argument list.\n     *\n     * @function deleteEvent\n     * @param {string | number | Object | Object[]} id Accepts the ID as string or number type or single or collection of the event object which needs to be removed from the Schedule.\n     * @param {CurrentAction} currentAction Denotes the delete action that takes place either on occurrence or series events.\n     *  The valid current action names are `Delete`, `DeleteOccurrence` or `DeleteSeries`.\n     * @returns {void}\n     */\n    Schedule.prototype.deleteEvent = function (id, currentAction) {\n        this.crudModule.deleteEvent(id, currentAction);\n    };\n    /**\n     * Retrieves the entire collection of events bound to the Schedule.\n     *\n     * @function getEvents\n     * @param {Date} startDate Accepts the start date.\n     * @param {Date} endDate Accepts te end date.\n     * @param {boolean} includeOccurrences Accepts the boolean value to process the occurrence from recurrence series.\n     * @returns {Object[]} Returns the collection of event objects from the Schedule.\n     */\n    Schedule.prototype.getEvents = function (startDate, endDate, includeOccurrences) {\n        var eventCollections = [];\n        if (includeOccurrences) {\n            eventCollections = this.eventBase.getProcessedEvents();\n        }\n        else {\n            eventCollections = this.eventsData;\n        }\n        if (startDate) {\n            startDate = this.getDateTime(startDate);\n        }\n        if (endDate) {\n            endDate = this.getDateTime(endDate);\n        }\n        eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);\n        return eventCollections;\n    };\n    /**\n     * Retrieves the entire collection of block events bound to the Schedule.\n     *\n     * @function getBlockEvents\n     * @param {Date} startDate Accepts the start date.\n     * @param {Date} endDate Accepts te end date.\n     * @param {boolean} includeOccurrences Accepts the boolean value to process the occurrence from recurrence series.\n     * @returns {Object[]} Returns the collection of block event objects from the Schedule.\n     */\n    Schedule.prototype.getBlockEvents = function (startDate, endDate, includeOccurrences) {\n        var eventCollections = [];\n        if (includeOccurrences) {\n            eventCollections = this.eventBase.getProcessedEvents(this.blockData);\n        }\n        else {\n            eventCollections = this.blockData;\n        }\n        if (startDate) {\n            startDate = this.getDateTime(startDate);\n        }\n        if (endDate) {\n            endDate = this.getDateTime(endDate);\n        }\n        eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);\n        return eventCollections;\n    };\n    /**\n     * Retrieves the occurrences of a single recurrence event based on the provided parent ID.\n     *\n     * @function getOccurrencesByID\n     * @param {number} eventID ID of the parent recurrence data from which the occurrences are fetched.\n     * @returns {Object[]} Returns the collection of occurrence event objects.\n     */\n    Schedule.prototype.getOccurrencesByID = function (eventID) {\n        return this.eventBase.getOccurrencesByID(eventID);\n    };\n    /**\n     * Retrieves all the occurrences that lies between the specific start and end time range.\n     *\n     * @function getOccurrencesByRange\n     * @param {Date} startTime Denotes the start time range.\n     * @param {Date} endTime Denotes the end time range.\n     * @returns {Object[]} Returns the collection of occurrence event objects that lies between the provided start and end time.\n     */\n    Schedule.prototype.getOccurrencesByRange = function (startTime, endTime) {\n        startTime = this.getDateTime(startTime);\n        endTime = this.getDateTime(endTime);\n        return this.eventBase.getOccurrencesByRange(startTime, endTime);\n    };\n    /**\n     * Retrieves the dates that lies on active view of Schedule.\n     *\n     * @function getCurrentViewDates\n     * @returns {Date[]} Returns the collection of dates.\n     */\n    Schedule.prototype.getCurrentViewDates = function () {\n        return this.activeView ? this.activeView.renderDates : [];\n    };\n    /**\n     * Set the recurrence editor instance from custom editor template.\n     *\n     * @function setRecurrenceEditor\n     * @param {RecurrenceEditor} recurrenceEditor instance has passed to fetch the instance in event window.\n     * @returns {void}\n     */\n    Schedule.prototype.setRecurrenceEditor = function (recurrenceEditor) {\n        this.eventWindow.setRecurrenceEditor(recurrenceEditor);\n    };\n    /**\n     * Get the maximum id of an event.\n     *\n     * @function getEventMaxID\n     * @returns {number | string} Returns the maximum ID from scheduler data collections.\n     */\n    Schedule.prototype.getEventMaxID = function () {\n        return this.eventBase.getEventMaxID();\n    };\n    /**\n     * Get deleted occurrences from given recurrence series.\n     *\n     * @function getDeletedOccurrences\n     * @param {string | number | Object} recurrenceData Accepts the parent ID of the event object or parent event object\n     * @returns {Object[]} Returns the collection of deleted occurrence events.\n     */\n    Schedule.prototype.getDeletedOccurrences = function (recurrenceData) {\n        return this.eventBase.getDeletedOccurrences(recurrenceData);\n    };\n    /**\n     * Retrieves the events that lies on the current date range of the active view of Schedule.\n     *\n     * @function getCurrentViewEvents\n     * @returns {Object[]} Returns the collection of events.\n     */\n    Schedule.prototype.getCurrentViewEvents = function () {\n        return this.eventsProcessed;\n    };\n    /**\n     * Refreshes the event dataSource. This method may be useful when the events alone in the schedule needs to be re-rendered.\n     *\n     * @function refreshEvents\n     * @param {boolean} isRemoteRefresh Accepts the boolean to refresh data from remote or local\n     * @returns {void}\n     */\n    Schedule.prototype.refreshEvents = function (isRemoteRefresh) {\n        if (isRemoteRefresh === void 0) { isRemoteRefresh = true; }\n        if (isRemoteRefresh) {\n            if (this.dragAndDropModule) {\n                this.dragAndDropModule.actionObj.action = '';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.EVENT_ACTION_CLASS);\n            }\n            this.crudModule.refreshDataManager();\n        }\n        else {\n            if (this.uiStateValues) {\n                this.uiStateValues.isPreventTimezone = true;\n            }\n            if (this.crudModule) {\n                this.crudModule.refreshProcessedData();\n            }\n            if (this.uiStateValues) {\n                this.uiStateValues.isPreventTimezone = false;\n            }\n        }\n    };\n    /**\n     * Method to refresh the given Schedule templates\n     *\n     * @param {string} templateName Accepts the template name\n     * @returns {void}\n     */\n    Schedule.prototype.refreshTemplates = function (templateName) {\n        if (templateName) {\n            this.resetTemplates([templateName]);\n        }\n        else {\n            this.resetTemplates();\n        }\n        switch (templateName) {\n            case 'eventTemplate':\n                this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n                this.refreshEvents(false);\n                break;\n            case 'dateHeaderTemplate':\n                this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n                this.activeView.refreshHeader();\n                break;\n            case 'dateRangeTemplate':\n                this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n                if (this.headerModule) {\n                    this.headerModule.refresh();\n                }\n                break;\n            case 'resourceHeaderTemplate':\n                this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n                if (this.activeView.isTimelineView()) {\n                    this.activeView.refreshResourceHeader();\n                }\n                else {\n                    this.activeView.refreshHeader();\n                }\n                break;\n            case 'quickInfoTemplates':\n                if (this.quickPopup) {\n                    this.quickPopup.destroy();\n                    this.quickPopup = null;\n                }\n                this.quickPopup = new _popups_quick_popups__WEBPACK_IMPORTED_MODULE_9__.QuickPopups(this);\n                this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n                this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n                this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n                break;\n            case 'editorTemplate':\n                this.destroyEditorWindow();\n                this.editorTemplateFn = this.templateParser(this.editorTemplate);\n                break;\n            case 'editorHeaderTemplate':\n                this.destroyEditorWindow();\n                this.editorHeaderTemplateFn = this.templateParser(this.editorHeaderTemplate);\n                break;\n            case 'editorFooterTemplate':\n                this.destroyEditorWindow();\n                this.editorFooterTemplateFn = this.templateParser(this.editorFooterTemplate);\n                break;\n            case 'tooltipTemplate':\n            case 'headerTooltipTemplate':\n                if (this.eventTooltip) {\n                    this.eventTooltip.destroy();\n                    this.eventTooltip = null;\n                }\n                this.eventTooltip = new _popups_event_tooltip__WEBPACK_IMPORTED_MODULE_10__.EventTooltip(this);\n                this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n                this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);\n                break;\n            default:\n                this.initializeView(this.currentView);\n                break;\n        }\n    };\n    /**\n     * Refreshes the Schedule layout without re-render.\n     *\n     * @function refreshLayout\n     * @returns {void}\n     */\n    Schedule.prototype.refreshLayout = function () {\n        this.onScheduleResize();\n        if (this.headerModule) {\n            this.headerModule.refresh();\n        }\n        if (this.eventWindow) {\n            this.eventWindow.refresh();\n        }\n    };\n    /**\n     * To retrieve the appointment object from element.\n     *\n     * @function getEventDetails\n     * @param {Element} element Denotes the event UI element on the Schedule.\n     * @returns {Object} Returns the event details.\n     */\n    Schedule.prototype.getEventDetails = function (element) {\n        element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(element);\n        var guid = element.getAttribute('data-guid');\n        if (guid) {\n            return this.eventBase.getEventByGuid(guid);\n        }\n        return {};\n    };\n    /**\n     * To check whether the given time range slots are available for event creation or already occupied by other events.\n     * This method currently focuses on validating appointments within the current view date range.\n     * However, it does not extend this availability check to recurrence occurrences outside of the current date range.\n     *\n     * @function isSlotAvailable\n     * @param {Date | Object} startTime Denotes the start time of the slot.\n     * @param {Date} endTime Denotes the end time of the slot.\n     * @param {number} groupIndex Defines the resource index from last level.\n     * @returns {boolean} Returns true, if the slot that lies in the provided time range does not contain any other events.\n     */\n    Schedule.prototype.isSlotAvailable = function (startTime, endTime, groupIndex) {\n        var _this = this;\n        var eventStart;\n        var eventEnd;\n        var eventObj = this.activeEventData.event;\n        if (startTime instanceof Date || typeof (startTime) === 'string') {\n            eventStart = startTime;\n            eventEnd = endTime;\n        }\n        else {\n            eventObj = startTime;\n            eventStart = startTime[this.eventFields.startTime];\n            eventEnd = startTime[this.eventFields.endTime];\n            if (this.resourceBase) {\n                groupIndex = this.eventBase.getGroupIndexFromEvent(startTime);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eventStart) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eventEnd)) {\n            return true;\n        }\n        eventStart = this.getDateTime(eventStart);\n        eventEnd = this.getDateTime(eventEnd);\n        var eventCollection = this.eventBase.filterEvents(eventStart, eventEnd);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupIndex) && this.resourceBase && this.resourceBase.lastResourceLevel.length > 0) {\n            eventCollection =\n                this.eventBase.filterEventsByResource(this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)], eventCollection);\n        }\n        if (eventObj) {\n            if (eventObj.Guid) {\n                eventCollection = eventCollection.filter(function (event) { return event.Guid !== eventObj.Guid; });\n            }\n            else {\n                eventCollection = eventCollection.filter(function (event) {\n                    return event[_this.eventFields.id] !== eventObj[_this.eventFields.id];\n                });\n            }\n        }\n        return (eventCollection.length > 0) ? false : true;\n    };\n    /**\n     * Method to copy events from an HTMLElement or an array of HTMLElements.\n     *\n     * @param { HTMLElement[] } elements Accepts an array of HTMLElement\n     * @returns {void} This method does not return a value.\n     */\n    Schedule.prototype.copy = function (elements) {\n        this.processCutCopyActions(elements, false);\n    };\n    /**\n     * Method to cut events from an HTMLElement or an array of HTMLElements.\n     *\n     * @param { HTMLElement[] } elements Accepts an array of HTMLElement\n     * @returns {void} This method does not return a value.\n     */\n    Schedule.prototype.cut = function (elements) {\n        this.processCutCopyActions(elements, true);\n    };\n    /**\n     * Method to create a paste event with clipboard data\n     *\n     * @param { HTMLElement } targetElement Accepts HTMLElement\n     * @returns {void}\n     */\n    Schedule.prototype.paste = function (targetElement) {\n        var _this = this;\n        if (!this.allowClipboard || !this.allowKeyboardInteraction) {\n            return;\n        }\n        if (!targetElement.classList.contains('e-work-cells') && !targetElement.classList.contains('e-all-day-cells')) {\n            return;\n        }\n        var clipboardData = new DataTransfer();\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(navigator.clipboard)) {\n            navigator.clipboard.readText()\n                .then(function (text) {\n                clipboardData.setData('text/plain', text);\n                var pasteEvent = new ClipboardEvent('paste', {\n                    bubbles: true,\n                    cancelable: true\n                });\n                Object.defineProperty(pasteEvent, 'clipboardData', {\n                    value: clipboardData\n                });\n                _this.keyboardInteractionModule.pasteHandler(pasteEvent, targetElement);\n            })\n                .catch(function (err) {\n                throw err;\n            });\n        }\n    };\n    Schedule.prototype.processCutCopyActions = function (elements, isCut) {\n        var _this = this;\n        if (!elements || !this.allowClipboard || !this.allowKeyboardInteraction) {\n            return;\n        }\n        var elementArray = elements;\n        var eventDetailsArray = [];\n        elementArray.forEach(function (element) {\n            if (element.classList.contains(_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.APPOINTMENT_CLASS)) {\n                var eventDetail = _this.getEventDetails(element);\n                if (eventDetail) {\n                    eventDetailsArray.push(eventDetail);\n                }\n            }\n        });\n        if (eventDetailsArray.length > 0) {\n            this.keyboardInteractionModule.processClipboardAction(isCut, eventDetailsArray);\n        }\n    };\n    /**\n     * To manually open the event editor on specific time or on certain events.\n     *\n     * @function openEditor\n     * @param {Object} data It can be either cell data or event data.\n     * @param {CurrentAction} action Defines the action for which the editor needs to be opened such as either for new event creation or\n     *  for editing of existing events. The applicable action names that can be used here are `Add`, `Save`, `EditOccurrence`\n     *  and `EditSeries`.\n     * @param {boolean} isEventData It allows to decide whether the editor needs to be opened with the clicked cell details or with the\n     *  passed event details.\n     * @param {number} repeatType It opens the editor with the recurrence options based on the provided repeat type.\n     * @returns {void}\n     */\n    Schedule.prototype.openEditor = function (data, action, isEventData, repeatType) {\n        if (action === 'Add' && !isEventData) {\n            data.startTime = this.getDateTime(data.startTime);\n            data.endTime = this.getDateTime(data.endTime);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.element)) {\n                data.element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(data.element);\n            }\n        }\n        else {\n            data[this.eventFields.startTime] = this.getDateTime(data[this.eventFields.startTime]);\n            data[this.eventFields.endTime] = this.getDateTime(data[this.eventFields.endTime]);\n        }\n        this.currentAction = action;\n        if (action !== 'Add') {\n            this.activeEventData.event = data;\n        }\n        this.eventWindow.openEditor(data, action, isEventData, repeatType);\n    };\n    /**\n     * To manually close the event editor window\n     *\n     * @function closeEditor\n     * @returns {void}\n     */\n    Schedule.prototype.closeEditor = function () {\n        if (this.eventWindow) {\n            this.eventWindow.dialogClose();\n        }\n    };\n    /**\n     * To manually open the quick info popup based on cell or event details.\n     *\n     * @param {object} data Defines the cell or event data. If the data contains valid ID, it will open event quick info popup,\n     * otherwise cell quick info popup displayed.\n     * @returns {void}\n     */\n    Schedule.prototype.openQuickInfoPopup = function (data) {\n        var _this = this;\n        if (this.currentView === 'Year' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {\n            return;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[this.eventFields.id])) {\n            if (this.currentView === 'Agenda' || this.currentView === 'MonthAgenda' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeView)) {\n                return;\n            }\n            var cellData = {\n                startTime: this.activeCellsData.startTime = this.getDateTime(data[this.eventFields.startTime]),\n                endTime: this.activeCellsData.endTime = this.getDateTime(data[this.eventFields.endTime]),\n                isAllDay: this.activeCellsData.isAllDay =\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[this.eventFields.isAllDay]) ? data[this.eventFields.isAllDay] : false\n            };\n            var startTime = this.activeView.getAdjustedDate(new Date(cellData.startTime));\n            if (startTime) {\n                var query = '.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_CELLS_CLASS + '[data-date=\"' + startTime.getTime() + '\"]';\n                if (this.activeViewOptions.group.resources.length > 0 && !this.uiStateValues.isGroupAdaptive\n                    && this.resourceBase && this.eventBase) {\n                    cellData.groupIndex = this.eventBase.getGroupIndexFromEvent(data);\n                    query = '.' + _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.WORK_CELLS_CLASS + '[data-date=\"' + startTime.getTime() + '\"][data-group-index=\"' + cellData.groupIndex + '\"]';\n                }\n                var workCell = this.element.querySelector(query);\n                if (workCell) {\n                    workCell.focus();\n                    cellData.element = workCell;\n                    this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.cellClick, cellData);\n                }\n            }\n        }\n        else {\n            var app = this.getCurrentViewEvents().filter(function (item) {\n                return data[_this.eventFields.id] === item[_this.eventFields.id];\n            });\n            if (app.length <= 0) {\n                return;\n            }\n            var selectEvent = app[0];\n            if (data[this.eventFields.recurrenceRule]) {\n                var occurence = app.filter(function (x) {\n                    return x[_this.eventFields.startTime].getTime() === data[_this.eventFields.startTime].getTime();\n                });\n                if (occurence.length > 0) {\n                    selectEvent = occurence[0];\n                }\n            }\n            var element = this.element.querySelector('div[data-guid=\"' + selectEvent.Guid + '\"]');\n            if (element) {\n                this.eventBase.removeSelectedAppointmentClass();\n                this.eventBase.addSelectedAppointments([element], false);\n                this.activeEventData = { event: selectEvent, element: element };\n                if (this.currentView === 'Agenda' || this.currentView === 'MonthAgenda') {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.activeEventData.element], _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.AGENDA_SELECTED_CELL);\n                }\n                this.notify(_base_constant__WEBPACK_IMPORTED_MODULE_25__.eventClick, this.activeEventData);\n            }\n        }\n    };\n    /**\n     * To manually close the quick info popup\n     *\n     * @function closeQuickInfoPopup\n     * @returns {void}\n     */\n    Schedule.prototype.closeQuickInfoPopup = function () {\n        if (this.quickPopup) {\n            this.quickPopup.quickPopupHide(true);\n        }\n    };\n    /**\n     * To manually open the overlap validation Alert.\n     *\n     * @param {PopupOpenEventArgs} args The arguments for opening the popup.\n     * @param {string} args.type Defines the type of overlap alert (e.g., 'OverlapAlert').\n     * @param {Record<string, any>} args.data The data associated with the popup.\n     * @param {Record<string, any>[]} args.overlapEvents The overlap events.\n     * @returns {void}\n     */\n    Schedule.prototype.openOverlapAlert = function (args) {\n        var _this = this;\n        if (this.quickPopup) {\n            var eventProp = {\n                type: 'OverlapAlert',\n                cancel: false,\n                element: this.quickPopup.quickDialog.element,\n                data: args.data,\n                overlapEvents: args.overlapEvents\n            };\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.popupOpen, eventProp, function (popupArgs) {\n                if (!popupArgs.cancel) {\n                    _this.quickPopup.openValidationError('overlapAlert', args.data);\n                }\n            });\n        }\n    };\n    /**\n     * To manually close the overlap validation Alert.\n     *\n     * @function closeOverlapValidationAlert\n     * @returns {void}\n     */\n    Schedule.prototype.closeOverlapAlert = function () {\n        var _this = this;\n        if (this.quickPopup) {\n            var args = {\n                type: 'OverlapAlert',\n                cancel: false,\n                data: this.activeEventData.event,\n                element: this.quickPopup.quickDialog.element\n            };\n            this.trigger(_base_constant__WEBPACK_IMPORTED_MODULE_25__.popupClose, args, function (popupArgs) {\n                if (!popupArgs.cancel) {\n                    _this.quickPopup.quickDialog.hide();\n                }\n            });\n        }\n    };\n    /**\n     * Closes the tooltip.\n     * For example, when the context menu is opened for an event,\n     * the tooltip can be closed by calling this method.\n     *\n     * @function closeTooltip\n     * @returns {void}\n     */\n    Schedule.prototype.closeTooltip = function () {\n        if (this.eventTooltip) {\n            this.eventTooltip.close();\n        }\n    };\n    /**\n     * Retrieves a formatted string representing the date range of the given date collection.\n     *\n     * @param {Date[]} dates - An array of Date objects representing the date range.\n     * @returns {string} A formatted string describing the date range.\n     *   If the dates is empty, returns an empty string.\n     *   Otherwise, delegates to the active view to generate the appropriate date range text.\n     *\n     * @example\n     * // Assuming dates contains dates from May 1, 2023 to May 7, 2023\n     * const rangeText = schedule.getDateRangeText(schedule.getViewDates());\n     * // rangeText might be \"May 1 - 7, 2023\" (actual format depends on the active view)\n     *\n     * @remarks\n     * The actual format of the returned string depends on the implementation\n     * of the getDateRangeText method in the active view.\n     */\n    Schedule.prototype.getDateRangeText = function (dates) {\n        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dates) && dates.length === 0) || !this.activeView) {\n            return '';\n        }\n        return this.activeView.getDateRangeText(dates[0], dates);\n    };\n    /**\n     * Retrieves an array of dates based on the specified date collection direction.\n     *\n     * @param {NavigationDirection} type - The direction for date collection. Options are:\n     *   - 'Previous': Returns the previous date range collection from the current rendered date.\n     *   - 'Next': Returns the next date range collection from the current rendered date.\n     *   - 'Current': Returns the current rendered date collection.\n     *\n     * @returns {Date[]} An array of Date objects representing the view dates.\n     */\n    Schedule.prototype.getViewDates = function (type) {\n        if (type === void 0) { type = 'Current'; }\n        if (!this.activeView) {\n            return [];\n        }\n        switch (type) {\n            case 'Previous':\n            case 'Next':\n                return this.activeView.getRenderDates(undefined, this.activeView.getNextPreviousDate(type));\n            case 'Current':\n                return this.getCurrentViewDates();\n        }\n    };\n    /**\n     * Select the resource based on group index in mobile mode.\n     *\n     * @param {number} groupIndex Defines the resource index based on last level.\n     * @returns {void}\n     */\n    Schedule.prototype.selectResourceByIndex = function (groupIndex) {\n        if (this.resourceBase && this.uiStateValues.isGroupAdaptive) {\n            this.resourceBase.selectResourceByIndex(groupIndex);\n        }\n    };\n    /**\n     * Select the resources to the based on id.\n     *\n     * @param {string | number} id id of the resource defined in resources collection.\n     * @param {string} name Name of the resource defined in resources collection.\n     * @returns {number} Returns the group index\n     */\n    Schedule.prototype.getIndexFromResourceId = function (id, name) {\n        if (this.resourceBase) {\n            return this.resourceBase.getIndexFromResourceId(id, name);\n        }\n        return null;\n    };\n    /**\n     * Adds the resources to the specified index.\n     *\n     * @param {Object | Object[]} resources Accepts the resource data in single or collection of data.\n     * @param {string} name Name of the resource defined in resources collection.\n     * @param {number} index Index or position where the resource should be added.\n     * @returns {void}\n     */\n    Schedule.prototype.addResource = function (resources, name, index) {\n        this.resourceBase.addResource(resources, name, index);\n    };\n    /**\n     * Removes the specified resource.\n     *\n     * @param {string | string[] | number | number[]} resourceId Specifies the resource id to be removed.\n     * @param {string} name Specifies the resource name from which the id should be referred.\n     * @returns {void}\n     */\n    Schedule.prototype.removeResource = function (resourceId, name) {\n        this.resourceBase.removeResource(resourceId, name);\n    };\n    /**\n     * Destroys the Schedule component.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Schedule.prototype.destroy = function () {\n        if (this.eventTooltip) {\n            this.eventTooltip.destroy();\n            this.eventTooltip = null;\n        }\n        this.destroyPopups();\n        this.hideSpinner();\n        this.unWireEvents();\n        this.destroyHeaderModule();\n        if (this.eventBase) {\n            this.eventBase.destroy();\n            this.eventBase = null;\n        }\n        if (this.workCellAction) {\n            this.workCellAction.destroy();\n            this.workCellAction = null;\n        }\n        if (this.inlineModule) {\n            this.inlineModule.destroy();\n            this.inlineModule = null;\n        }\n        if (this.keyboardInteractionModule) {\n            this.keyboardInteractionModule.destroy();\n            this.keyboardInteractionModule = null;\n        }\n        if (this.scrollModule) {\n            this.scrollModule.destroy();\n            this.scrollModule = null;\n        }\n        if (this.printModule) {\n            this.printModule.destroy();\n        }\n        if (this.activeView) {\n            this.resetTemplates();\n            this.activeView.removeEventListener();\n            this.activeView.destroy();\n            this.activeView = null;\n        }\n        if (this.scheduleTouchModule) {\n            this.scheduleTouchModule.destroy();\n            this.scheduleTouchModule = null;\n        }\n        if (this.crudModule) {\n            this.crudModule.destroy();\n            this.crudModule = null;\n        }\n        if (this.dataModule) {\n            this.dataModule.destroy();\n            this.dataModule = null;\n        }\n        _super.prototype.destroy.call(this);\n        var modules = [\n            'dayModule', 'weekModule', 'workWeekModule', 'monthModule', 'monthAgendaModule', 'yearModule', 'agendaModule',\n            'timelineViewsModule', 'timelineMonthModule', 'timelineYearModule', 'resizeModule', 'dragAndDropModule',\n            'excelExportModule', 'printModule', 'iCalendarExportModule', 'iCalendarImportModule', 'tzModule', 'eventsData',\n            'eventsProcessed', 'blockData', 'blockProcessed', 'uiStateValues', 'viewCollections', 'viewOptions', 'defaultLocale',\n            'localeObj', 'selectedElements', 'resourceCollection', 'editorTitles', 'eventFields', 'activeViewOptions',\n            'activeEventData', 'activeCellsData', 'renderModule'\n        ];\n        for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {\n            var module = modules_1[_i];\n            this[\"\" + module] = null;\n        }\n        _base_util__WEBPACK_IMPORTED_MODULE_27__.removeChildren(this.element);\n        var removeClasses = [_base_css_constant__WEBPACK_IMPORTED_MODULE_26__.ROOT, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.RTL, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.DEVICE_CLASS, _base_css_constant__WEBPACK_IMPORTED_MODULE_26__.MULTI_DRAG];\n        if (this.cssClass) {\n            removeClasses = removeClasses.concat(this.cssClass.split(' '));\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], removeClasses);\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Schedule.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')\n    ], Schedule.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"showHeaderBar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"showTimeIndicator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowSwiping\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowOverlap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], Schedule.prototype, \"overscanCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_toolbar__WEBPACK_IMPORTED_MODULE_28__.ToolbarItem)\n    ], Schedule.prototype, \"toolbarItems\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Week')\n    ], Schedule.prototype, \"currentView\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Day', 'Week', 'WorkWeek', 'Month', 'Agenda'])\n    ], Schedule.prototype, \"views\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(new Date())\n    ], Schedule.prototype, \"selectedDate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(new Date(1900, 0, 1))\n    ], Schedule.prototype, \"minDate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(new Date(2099, 11, 31))\n    ], Schedule.prototype, \"maxDate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"dateFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Gregorian')\n    ], Schedule.prototype, \"calendarMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"showWeekend\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Schedule.prototype, \"firstDayOfWeek\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('FirstDay')\n    ], Schedule.prototype, \"weekRule\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([1, 2, 3, 4, 5])\n    ], Schedule.prototype, \"workDays\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(12)\n    ], Schedule.prototype, \"monthsCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('00:00')\n    ], Schedule.prototype, \"startHour\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('24:00')\n    ], Schedule.prototype, \"endHour\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Schedule.prototype, \"timeFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"enableAllDayScroll\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"enableAdaptiveUI\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowResizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_work_hours__WEBPACK_IMPORTED_MODULE_13__.WorkHours)\n    ], Schedule.prototype, \"workHours\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_time_scale__WEBPACK_IMPORTED_MODULE_14__.TimeScale)\n    ], Schedule.prototype, \"timeScale\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowKeyboardInteraction\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"dateHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"dateRangeTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"cellHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"dayHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"monthHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"cellTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"readonly\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"showQuickInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"allowInline\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowMultiCellSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"allowMultiRowSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"quickInfoOnSelectionEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"showWeekNumber\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"rowAutoHeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"allowMultiDrag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Schedule.prototype, \"firstMonthOfYear\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"editorTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"editorHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"editorFooterTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_quick_info_templates__WEBPACK_IMPORTED_MODULE_15__.QuickInfoTemplates)\n    ], Schedule.prototype, \"quickInfoTemplates\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(7)\n    ], Schedule.prototype, \"agendaDaysCount\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"hideEmptyAgendaDays\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Schedule.prototype, \"enableRecurrenceValidation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"timezone\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_event_settings__WEBPACK_IMPORTED_MODULE_19__.EventSettings)\n    ], Schedule.prototype, \"eventSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(_timezone_timezone__WEBPACK_IMPORTED_MODULE_24__.timezoneData)\n    ], Schedule.prototype, \"timezoneDataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"resourceHeaderTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"headerIndentTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _models_group__WEBPACK_IMPORTED_MODULE_20__.Group)\n    ], Schedule.prototype, \"group\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_resources__WEBPACK_IMPORTED_MODULE_21__.Resources)\n    ], Schedule.prototype, \"resources\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _models_header_rows__WEBPACK_IMPORTED_MODULE_16__.HeaderRows)\n    ], Schedule.prototype, \"headerRows\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Schedule.prototype, \"allowClipboard\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Schedule.prototype, \"eventDragArea\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"cellClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"cellDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"moreEventsClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"hover\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"select\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"actionBegin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"actionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"actionFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"navigating\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"renderCell\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"eventClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"eventDoubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"eventRendered\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"dataBinding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"popupOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"popupClose\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"dragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"drag\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"dragStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"resizeStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"resizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"resizeStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"virtualScrollStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"virtualScrollStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"dataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"beforePaste\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"excelExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Schedule.prototype, \"tooltipOpen\", void 0);\n    Schedule = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Schedule);\n    return Schedule;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-schedule/src/schedule/base/schedule.js?");

/***/ })

}]);