"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_list_pdf-list-item_js-590ae721"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list-item.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list-item.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfListItem: () => (/* binding */ PdfListItem),\n/* harmony export */   PdfListItemCollection: () => (/* binding */ PdfListItemCollection)\n/* harmony export */ });\n/**\n * Represents the items of the list.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Create an instance of list item collection by passing the string array\n * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n * // Create a new list item and add into the collection\n * items.add(new PdfListItem('PDF'));\n * // Create a new PDF ordered list\n * let list: PdfOrderedList = new PdfOrderedList(items);\n * // Draw the list items\n * list.draw(page, 0, 20);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ````\n */\nvar PdfListItem = /** @class */ (function () {\n    /**\n     * Creates a new `PdfListItem` instance with the specified text and optional settings for font, format, pen, and brush.\n     *\n     * @param {string} text The text content for the list item.\n     * @param {object} [settings] Optional settings for the list item.\n     * @param {PdfFont} [settings.font] The font used for rendering the text.\n     * @param {PdfStringFormat} [settings.format] The string format used for text layout.\n     * @param {PdfBrush} [settings.brush] The brush used for filling shapes or text.\n     * @param {PdfPen} [settings.pen] The pen used for drawing outlines.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data);\n     * // Access the first page\n     * let page: PdfPage = document.getPage(0);\n     * // Create an instance of list item collection by passing the string array\n     * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n     * // Create a new list item\n     * let item: PdfListItem = new PdfListItem('PDF', {brush: new PdfBrush([255, 0, 0])});\n     * // Add the list item into the collection\n     * items.add(item);\n     * // Create a new PDF ordered list\n     * let list: PdfOrderedList = new PdfOrderedList(items);\n     * // Draw the list items\n     * list.draw(page, 0, 20);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ````\n     */\n    function PdfListItem(text, settings) {\n        this._textIndent = 0;\n        if (text === null || typeof text === 'undefined') {\n            throw new Error('Text cannot be null or undenfied.');\n        }\n        this._text = text;\n        if (settings) {\n            if (settings.font) {\n                this._font = settings.font;\n            }\n            if (settings.format) {\n                this._stringFormat = settings.format;\n            }\n            if (settings.pen) {\n                this._pen = settings.pen;\n            }\n            if (settings.brush) {\n                this._brush = settings.brush;\n            }\n        }\n    }\n    Object.defineProperty(PdfListItem.prototype, \"brush\", {\n        /**\n         * Gets the brush associated with the list item.\n         *\n         * @returns {PdfBrush} The brush to specify the fill color of the list item.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF', {brush: new PdfBrush([255, 0, 0])});\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Access the brush from the list item\n         * let brush: PdfBrush = item.brush;\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._brush;\n        },\n        /**\n         * Sets the brush associated with the list item.\n         *\n         * @param {PdfBrush} value The brush to specify the fill color of the list item.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF');\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the fill color\n         * item.brush = new PdfBrush([255, 0, 0]);\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._brush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"pen\", {\n        /**\n         * Gets the `PdfPen` object associated with the list item.\n         *\n         * @returns {PdfPen} The `PdfPen` object to specify specify stroke properties.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF', {pen: new PdfPen([255, 0, 0], 1)});\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Access the pen from the list item\n         * let pen: PdfPen = item.pen;\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._pen;\n        },\n        /**\n         * Sets the `Pdfpen` object associated with the list item.\n         *\n         * @param {PdfPen} value `PdfPen` object used to specify stroke properties.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF');\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the stroke color\n         * item.pen = new PdfPen([255, 0, 0], 1);\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._pen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"font\", {\n        /**\n         * Get the `PdfFont` object associated with the list item.\n         *\n         * @returns {PdfFont} The `PdfFont` object used for text rendering.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF', {pen: new PdfStandardFont(PdfFontFamily.timesRoman, 12)});\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Access the font from the list item\n         * let font: PdfFont = item.font;\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._font;\n        },\n        /**\n         * Sets the `PdfFont` object associated with the list item.\n         *\n         * @param {PdfFont} value The `PdfFont` object to be set for text rendering.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF');\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the font\n         * item.font = new PdfStandardFont(PdfFontFamily.timesRoman, 12);\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._font = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"stringFormat\", {\n        /**\n         * Gets the `PdfStringFormat` object associated with the list item.\n         *\n         * @returns {PdfStringFormat} The `PdfStringFormat` object used to specify text formatting.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF', {format: new PdfStringFormat(PdfTextAlignment.right, PdfVerticalAlignment.bottom)});\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Access the string format from the list item\n         * let format: PdfStringFormat = item.stringFormat;\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        get: function () {\n            return this._stringFormat;\n        },\n        /**\n         * Sets the `PdfStringFormat` object associated with the list item.\n         *\n         * @param {PdfStringFormat} value The`PdfStringFormat` object to be set for text formatting.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('PDF');\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the font\n         * item.font = new PdfStandardFont(PdfFontFamily.timesRoman, 12);\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"text\", {\n        /**\n         * Gets the text content of the list item.\n         *\n         * @returns {string} The text content of the list item.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first Page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of an ordered list\n         * let list: OrderedList =  new OrderedList();\n         * // Create a list item with text 'Products'\n         * let item: PdfListItem = new PdfListItem('Products');\n         * // Add the item to the list collection\n         * list.items.add(item1);\n         * // Get the text content of the item\n         * let text: string = item.text;\n         * // Draw the list items on the specified page\n         * list.draw(page, 10, 50. 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._text;\n        },\n        /**\n         * Sets string format of the list item.\n         *\n         * @param {string} value The text content to be set.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data);\n         * // Access the first page\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of list item collection by passing the string array\n         * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point']);\n         * // Create a new list item\n         * let item: PdfListItem = new PdfListItem('Word');\n         * // Add the list item into the collection\n         * items.add(item);\n         * // Create a new PDF ordered list\n         * let list: PdfOrderedList = new PdfOrderedList(items);\n         * // Set the text of the list item\n         * item.text = 'PDF';\n         * // Draw the list items\n         * list.draw(page, 0, 20);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ````\n         */\n        set: function (value) {\n            this._text = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"textIndent\", {\n        /**\n         * Gets the text indent of the list.\n         *\n         * @returns {number} The text indent of the list item.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of an ordered list\n         * let list: OrderedList =  new OrderedList();\n         * // Create a list item with text 'Products'\n         * let item: PdfListItem = new PdfListItem('Products');\n         * // Add the item to the list collection\n         * list.items.add(item);\n         * // Get the text indent of the item\n         * let textIndent: number = item.textIndent;\n         * // Draw the list items on the specified page\n         * list.draw(page, 10, 50. 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._textIndent;\n        },\n        /**\n         * Sets the text indent of the list item.\n         *\n         * @param {number} value he text indent value to be set.\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first Page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of an ordered list\n         * let list: OrderedList =  new OrderedList();\n         * // Create a list item with text 'Products'\n         * let item: PdfListItem = new PdfListItem('Products');\n         * // Set the text indent for the item\n         * item.textIndent = 30;\n         * // Add the item to the list collection\n         * list.items.add(item);\n         * // Draw the list items on the specified page at position (10, 50)\n         * list.draw(page, 10, 50. 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._textIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfListItem.prototype, \"subList\", {\n        /**\n         * Get the sub-list associated with the current list item.\n         *\n         * @returns {PdfList} The `PdfList` object representing the sub-list.\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first Page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of an ordered list\n         * let list: OrderedList =  new OrderedList();\n         * // Create a list item with text 'Products'\n         * let item: PdfListItem = new PdfListItem('Products');\n         * // Add the item to the list collection\n         * list.items.add(item);\n         * // create a sublist for the item\n         * let sublist: OrderedList = new PdfOrderedList();\n         * // Adding items to the sublist\n         * subList.items.add(new PdfListItem('Sub Item 1'));\n         * subList.items.add(new PdfListItem('Sub Item 2'));\n         * // Set the sublist for the main list item\n         * list.items._listItem[0].subList = subList;\n         * // Get the sublist\n         * let sublist: PdfList = list.items._listitem[0].sublist;\n         * // Draw the list items on the specified page\n         * list.draw(page, 10, 50. 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._subList;\n        },\n        /**\n         * Sets the sub-list associated with the current list item.\n         *\n         * @param {PdfList} value The `PdfList` object to be set as the sub-list.\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first Page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of an ordered list\n         * let list: OrderedList =  new OrderedList();\n         * // Create a list item with text 'Products'\n         * let item: PdfListItem = new PdfListItem('Products');\n         * // Add the item to the list collection\n         * list.items.add(item);\n         * // Create a sublist for the item\n         * let sublist: OrderedList = new PdfOrderedList();\n         * // Adding items to the sublist\n         * subList.items.add(new PdfListItem('PDF'));\n         * subList.items.add(new PdfListItem('Word'));\n         * subList.items.add(new PdfListItem('PPT'));\n         * // Set the sublist for the main list item\n         * list.items._listItem[0].subList = subList;\n         * // Draw the list items on the specified page\n         * list.draw(page, 10, 50. 500, 700);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._subList = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfListItem;\n}());\n\n/**\n * Represents a collection of list items that can be drawn on a PDF page.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data);\n * // Access the first page\n * let page: PdfPage = document.getPage(0);\n * // Create an instance of list item collection by passing the string array\n * let items: PdfListItemCollection = new PdfListItemCollection(['Excel', 'Power', 'Point', 'Word']);\n * // Create a new PDF ordered list\n * let list: PdfOrderedList = new PdfOrderedList(items);\n * // Draw the list items\n * list.draw(page, 0, 20);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ````\n */\nvar PdfListItemCollection = /** @class */ (function () {\n    function PdfListItemCollection(items) {\n        var _this = this;\n        if (!this._listItems) {\n            this._listItems = [];\n        }\n        if (items) {\n            items.forEach(function (item) {\n                _this.add(new PdfListItem(item));\n            });\n        }\n    }\n    Object.defineProperty(PdfListItemCollection.prototype, \"count\", {\n        /**\n         * Gets the count of the list item collection.\n         *\n         * @returns {number} The count of the list items.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Access the first page of the document\n         * let page: PdfPage = document.getPage(0);\n         * // Create an instance of ordered list\n         * let list: PdfOrderedList = new PdfOrderedList();\n         * // Initialize an array of string items\n         * let products: string[] = ['Word', 'Excel', 'PDF', 'Power Point'];\n         * // Add the items to list item collection by passing the array of products\n         * list.items = new PdfListCollection(products);\n         * / Draw the list on the page at specified bounds\n         * list.draw(page,0, 10, 500, 700);\n         * // Get the count of items from the list\n         * let count: number = list.items.count;\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._listItems.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfListItemCollection.prototype.add = function (item, itemIndent) {\n        if (item) {\n            this._listItems.push(item);\n            if (itemIndent) {\n                item.textIndent = itemIndent;\n            }\n        }\n        else {\n            throw new Error('item should not be null');\n        }\n    };\n    /**\n     * Retrieves the `PdfListItem` at the specified index in the collection.\n     *\n     * @param {number} index The zero-based index of the item to retrieve.\n     * @returns {PdfListItem} The `PdfListItem` at the specified index.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(data, password);\n     * // Accessing the first page of the document\n     * let page: PdfPage = document.getpage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = ['Excel', 'Power Point', 'Word', 'Windows', 'MAUI'];\n     * // Add the items to list item collection by passing the array of products\n     * let itemCollection: PdfListItemCollection = new PdfListItemCollection(products);\n     * // Retrieve a specific item from the list collection at a particular index\n     * let item: PdflistItem = list.itemCollection.itemAt(1);\n     * // Draw the list items on the page at specified coordinates and dimensions\n     * list.draw(page, 10, 50, 500, 700);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.at = function (index) {\n        if (index === null) {\n            throw new Error('index should not be null');\n        }\n        var item = this._listItems[Number.parseInt(index.toString(), 10)];\n        return item;\n    };\n    /**\n     * Removes a `PdfListItem` from the collection.\n     *\n     * @param {PdfListItem} item The list item to be removed from the collection.\n     * @returns {void}\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('CircleAnnotation-Acrobat.pdf'));\n     * // Access the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = [\n     *   'PDF is a file format designed to present documents consistently across devices and platforms.',\n     *   'Excel is a widely used spreadsheet application developed by Microsoft.',\n     *   'PDF stands for Portable Document Format.',\n     *   'PowerPoint is a presentation program developed by Microsoft for creating slideshows.',\n     *   'PowerPoint is widely used in business settings for creating presentations.'\n     * ];\n     * // Add the items to list item collection by passing the array of products\n     * let item: PdfListItemCollection = new PdfListItemCollection(products);\n     * // Remove a specific item from the collection\n     * let itemToRemove: PdfListItem = list.items.at(0);\n     * list.items.remove(itemToRemove);\n     * // Draw the list on the page at specified coordinates and dimensions\n     * list.draw(page, 10, 40, 300, 500);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.remove = function (item) {\n        if (!item) {\n            throw new Error('item should not be null');\n        }\n        var found = false;\n        for (var i = 0; i < this._listItems.length; i++) {\n            if (this._listItems[Number.parseInt(i.toString(), 10)] === item) {\n                found = true;\n                this._listItems.splice(Number.parseInt(i.toString(), 10), 1);\n                break;\n            }\n        }\n        if (!found) {\n            throw new Error('item collection does not contain the given content');\n        }\n    };\n    /**\n     * Removes a `PdfListItem` at the specified index from the collection.\n     *\n     * @param {number} index The zero-based index of the item to remove.\n     * @returns {void}\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('CircleAnnotation-Acrobat.pdf'));\n     * // Access the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = [\n     *   'PDF is a file format designed to present documents consistently across devices and platforms.',\n     *   'Excel is a widely used spreadsheet application developed by Microsoft.',\n     *   'PDF stands for Portable Document Format.',\n     *   'PowerPoint is a presentation program developed by Microsoft for creating slideshows.',\n     *   'PowerPoint is widely used in business settings for creating presentations.'\n     * ];\n     * // Add the items to list item collection by passing the array of products\n     * let item: PdfListItemCollection = new PdfListItemCollection(products);\n     * // Remove a specific item from the collection by its index\n     * list.items.removeAt(1);\n     * // Draw the modified list on the page at specified bounds\n     * list.draw(page, 10, 40, 300, 500);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.removeAt = function (index) {\n        if (index < 0 || index >= this._listItems.length) {\n            throw new Error('The index should be less than items count or equal to 0');\n        }\n        this._listItems.splice(index, 1);\n    };\n    /**\n     * Clear the list item collection.\n     *\n     * @returns {void}\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('CircleAnnotation-Acrobat.pdf'));\n     * // Access the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = [\n     *   'PDF is a file format designed to present documents consistently across devices and platforms.',\n     *   'Excel is a widely used spreadsheet application developed by Microsoft.',\n     *   'PDF stands for Portable Document Format.',\n     *   'PowerPoint is a presentation program developed by Microsoft for creating slideshows.',\n     *   'PowerPoint is widely used in business settings for creating presentations.'\n     * ];\n     * // Add the items to list item collection by passing the array of products\n     * let item: PdfListItemCollection = new PdfListItemCollection(products);\n     * // Draw the initial list on the page at specified coordinates and dimensions\n     * list.draw(page, 10, 40, 300, 500);\n     * // Clear the list item collection\n     * list.items.clear();\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.clear = function () {\n        this._listItems = [];\n    };\n    /**\n     * Inserts a `PdfListItem` into the collection at the specified index.\n     *\n     * @param {number} index The zero-based index at which the item should be inserted.\n     * @param {PdfListItem} item The list item to be inserted into the collection.\n     * @param {number} itemIndent The indent of the list item.\n     * @returns {void}\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('CircleAnnotation-Acrobat.pdf'));\n     * // Access the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = [\n     *   'PDF is a file format designed to present documents consistently across devices and platforms.',\n     *   'Excel is a widely used spreadsheet application developed by Microsoft.',\n     *   'PDF stands for Portable Document Format.',\n     *   'PowerPoint is a presentation program developed by Microsoft for creating slideshows.',\n     *   'PowerPoint is widely used in business settings for creating presentations.'\n     * ];\n     * // Add the items to list item collection by passing the array of products\n     * list.items = new PdfListItemCollection(products);\n     * // Create a new PdfListItem instance with some text\n     * let item: PdfListItem = new PdfListItem('text');\n     * // Insert the new item into the list at index 1 with an indent of 40\n     * list.items.insert(1, item, 40);\n     * // Draw the updated list on the page at specified coordinates and dimensions\n     * list.draw(page, 10, 40, 300, 500);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.insert = function (index, item, itemIndent) {\n        if (index < 0 || index > this._listItems.length) {\n            throw new Error('Index should be within the range of items count (inclusive).');\n        }\n        if (!item) {\n            throw new Error('Item cannot be null.');\n        }\n        if (itemIndent) {\n            item.textIndent = itemIndent;\n        }\n        this._listItems.splice(index, 0, item);\n    };\n    /**\n     * Finds the index of a `PdfListItem` in the collection.\n     *\n     * @param {PdfListItem} item The list item to find in the collection.\n     * @returns {number} The zero-based index of the item in the collection, or -1 if not found.\n     * ```typescript\n     * // Load an existing PDF document\n     * let document: PdfDocument = new PdfDocument(readFromResources('CircleAnnotation-Acrobat.pdf'));\n     * // Access the first page of the document\n     * let page: PdfPage = document.getPage(0);\n     * // Create a ordered list\n     * let list: PdfOrderedList = new PdfOrderedList();\n     * // Initialize an array of strings\n     * let products: string[] = [\n     *   'PDF is a file format designed to present documents consistently across devices and platforms.',\n     *   'Excel is a widely used spreadsheet application developed by Microsoft.',\n     *   'PDF stands for Portable Document Format.',\n     *   'PowerPoint is a presentation program developed by Microsoft for creating slideshows.',\n     *   'PowerPoint is widely used in business settings for creating presentations.'\n     * ];\n     * // Add the items to list item collection by passing the array of products\n     * list.items = new PdfListItemCollection(products);\n     * // Retrieve the first item from the collection\n     * let item: PdfListItem = item._listItems[0];\n     * // Find the index of the first item in the collection\n     * let index: number = list.items.indexOf(item);\n     * // Draw the list on the page at specified bounds\n     * list.draw(page, 10, 40, 300, 500);\n     * // Save the document\n     * document.save('output.pdf');\n     * // Destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfListItemCollection.prototype.indexOf = function (item) {\n        if (!item) {\n            throw new Error('Item should be defined.');\n        }\n        return this._listItems.indexOf(item);\n    };\n    return PdfListItemCollection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/list/pdf-list-item.js?");

/***/ })

}]);