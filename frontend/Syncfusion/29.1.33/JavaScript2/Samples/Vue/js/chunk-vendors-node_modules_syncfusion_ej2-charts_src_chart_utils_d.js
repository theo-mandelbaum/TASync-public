"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_utils_d"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/utils/double-range.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/utils/double-range.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DoubleRange: () => (/* binding */ DoubleRange)\n/* harmony export */ });\n/**\n * The `DoubleRange` class represents a numeric range with minimum and maximum values.\n *\n * @private\n */\nvar DoubleRange = /** @class */ (function () {\n    function DoubleRange(start, end) {\n        /*\n          if (!isNaN(start) && !isNaN(end)) {\n           this.mIsEmpty = true;\n          } else {\n              this.mIsEmpty = false;\n          }*/\n        if (start < end) {\n            this.mStart = start;\n            this.mEnd = end;\n        }\n        else {\n            this.mStart = end;\n            this.mEnd = start;\n        }\n    }\n    Object.defineProperty(DoubleRange.prototype, \"start\", {\n        //private mIsEmpty: boolean;\n        /**\n         * Gets the start value.\n         *\n         * @returns {number} - The start value.\n         * @private\n         */\n        get: function () {\n            return this.mStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoubleRange.prototype, \"end\", {\n        /**\n         * Gets the end value.\n         *\n         * @returns {number} - The end value.\n         * @private\n         */\n        get: function () {\n            return this.mEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoubleRange.prototype, \"delta\", {\n        /*\n          get isEmpty(): boolean {\n             return this.mIsEmpty;\n         }*/\n        /**\n         * Gets the delta value.\n         *\n         * @returns {number} - The delta value.\n         * @private\n         */\n        get: function () {\n            return (this.mEnd - this.mStart);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DoubleRange.prototype, \"median\", {\n        /**\n         * Gets the median value.\n         *\n         * @returns {number} - The median value.\n         * @private\n         */\n        get: function () {\n            return this.mStart + (this.mEnd - this.mStart) / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DoubleRange;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/utils/double-range.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChartData: () => (/* binding */ ChartData)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n\n\n/**\n * The `ChartData` class is used to retrieve data on mouse move events in a chart.\n *\n * @private\n */\nvar ChartData = /** @class */ (function () {\n    /**\n     * Constructor for the data.\n     *\n     * @private\n     */\n    function ChartData(chart) {\n        /** @private */\n        this.currentPoints = [];\n        /** @private */\n        this.previousPoints = [];\n        this.insideRegion = false;\n        this.commonXvalues = [];\n        this.chart = chart;\n        this.lierIndex = 0;\n    }\n    /**\n     * Method to get the Data.\n     *\n     * @private\n     */\n    ChartData.prototype.getData = function () {\n        var chart = this.chart;\n        var point = null;\n        var series = null;\n        var width;\n        var height;\n        var mouseX;\n        var mouseY;\n        for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {\n            series = chart.visibleSeries[i];\n            width = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.height + 5) / 2 : 0;\n            height = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.width + 5) / 2 : 0;\n            mouseX = chart.mouseX;\n            mouseY = chart.mouseY;\n            if (series.dragSettings.enable && series.isRectSeries) {\n                if (!(series.type === 'Bar' && chart.isTransposed) && (chart.isTransposed || series.type === 'Bar')) {\n                    var markerWidth = series.marker.width / 2;\n                    mouseX = series.yAxis.isAxisInverse ? mouseX + markerWidth : mouseX - markerWidth;\n                }\n                else {\n                    var markerHeight = series.marker.height / 2;\n                    mouseY = series.yAxis.isAxisInverse ? mouseY - markerHeight : mouseY + markerHeight;\n                }\n            }\n            if (series.visible && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInBounds)(mouseX, mouseY, series.clipRect, width, height)) {\n                point = this.getRectPoint(series, series.clipRect, mouseX, mouseY);\n            }\n            if (point) {\n                return new _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.PointData(point, series);\n            }\n        }\n        return new _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.PointData(point, series);\n    };\n    ChartData.prototype.isSelected = function (chart) {\n        return ((chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode.indexOf('Lasso') > -1) && chart.selectionModule &&\n            chart.selectionModule.rectPoints !== null);\n    };\n    ChartData.prototype.getRectPoint = function (series, rect, x, y) {\n        var chart = this.chart;\n        var fromCenterX;\n        var fromCenterY;\n        var clickAngle;\n        var arcAngle = 0;\n        var startAngle;\n        var endAngle;\n        var distanceFromCenter;\n        if (chart.isScrolling) {\n            return null;\n        }\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (!point.regionData) {\n                if (!point.regions || !point.regions.length) {\n                    continue;\n                }\n            }\n            if (point.regionData && this.chart.chartAreaType === 'PolarRadar' && series.drawType.indexOf('Column') > -1) {\n                fromCenterX = x - (series.clipRect.width / 2 + series.clipRect.x);\n                fromCenterY = y - (series.clipRect.height / 2 + series.clipRect.y);\n                arcAngle = 2 * Math.PI * (point.regionData.currentXPosition < 0 ? 1 + point.regionData.currentXPosition\n                    : point.regionData.currentXPosition);\n                clickAngle = (Math.atan2(fromCenterY, fromCenterX) + 0.5 * Math.PI - arcAngle) % (2 * Math.PI);\n                clickAngle = clickAngle < 0 ? 2 * Math.PI + clickAngle : clickAngle;\n                clickAngle = clickAngle + 2 * Math.PI * series.chart.primaryXAxis.startAngle;\n                startAngle = point.regionData.startAngle;\n                startAngle -= arcAngle;\n                startAngle = startAngle < 0 ? 2 * Math.PI + startAngle : startAngle;\n                endAngle = point.regionData.endAngle;\n                endAngle -= arcAngle;\n                endAngle = endAngle < 0 ? 2 * Math.PI + endAngle : endAngle;\n                distanceFromCenter = Math.sqrt(Math.pow(Math.abs(fromCenterX), 2) + Math.pow(Math.abs(fromCenterY), 2));\n                if (clickAngle >= startAngle && clickAngle <= endAngle &&\n                    (((distanceFromCenter >= point.regionData.innerRadius && distanceFromCenter <= point.regionData.radius) ||\n                        (distanceFromCenter <= point.regionData.innerRadius && distanceFromCenter >= point.regionData.radius))\n                        && distanceFromCenter <= series.chart.radius)) {\n                    return point;\n                }\n            }\n            if ((series.dragSettings.enable && series.isRectSeries) || (series.isRectSeries && series.marker.visible && this.chart.chartAreaType !== 'PolarRadar')) {\n                if (this.isPointInThresholdRegion(x, y, point, rect, series)) {\n                    this.insideRegion = true;\n                    return point;\n                }\n            }\n            if (!this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n            else if (this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n        }\n        return null;\n    };\n    /**\n     * Checks if the given point is contained within any of the regions defined by the array of rectangles.\n     *\n     * @param {Rect[]} regionRect - The array of rectangles defining the regions.\n     * @param {Rect} rect - The rectangle to check against the regions.\n     * @param {number} x - The x-coordinate of the point.\n     * @param {number} y - The y-coordinate of the point.\n     * @returns {boolean} - True if the point is contained within any of the regions, otherwise false.\n     */\n    ChartData.prototype.checkRegionContainsPoint = function (regionRect, rect, x, y) {\n        var _this = this;\n        return regionRect.some(function (region, index) {\n            _this.lierIndex = index;\n            return (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInBounds)(x, y, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y, region.width, region.height));\n        });\n    };\n    /**\n     * Checks if the given point is within the threshold region of a data point.\n     *\n     * @param {number} x - The x-coordinate of the point to check.\n     * @param {number} y - The y-coordinate of the point to check.\n     * @param {Points} point - The data point.\n     * @param {Rect} rect - The rectangle representing the threshold region.\n     * @param {Series} series - The series to which the data point belongs.\n     * @returns {boolean} - True if the point is within the threshold region, otherwise false.\n     */\n    ChartData.prototype.isPointInThresholdRegion = function (x, y, point, rect, series) {\n        var _this = this;\n        var isBar = series.type === 'Bar';\n        var isInversed = series.yAxis.isAxisInverse;\n        var isTransposed = series.chart.isTransposed;\n        var heightValue = 10;\n        var yValue = 0;\n        var xValue = 0;\n        var width;\n        var height = width = 2 * heightValue;\n        if (isInversed && isTransposed) {\n            if (isBar) {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else if (isInversed || point.yValue < 0) {\n            if (isBar) {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        else if (isTransposed) {\n            if (isBar) {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else {\n            if (isBar) {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        return point.regions.some(function (region) {\n            return (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInBounds)(x, y, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x + xValue, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y + yValue, width, height));\n        });\n    };\n    /**\n     * Gets the index of the closest data point to the given value in the series.\n     *\n     * @param {Series} series - The series.\n     * @param {number} value - The value to which the closest data point is sought.\n     * @param {number[]} [xvalues] - The x-values of the data points.\n     * @returns {number} - The index of the closest data point.\n     * @private\n     */\n    ChartData.prototype.getClosest = function (series, value, xvalues) {\n        var closest;\n        var data;\n        var xData = xvalues ? xvalues : series.xData;\n        var xLength = xData.length;\n        var leftSideNearest = 0.5;\n        var rightSideNearest = 0.5;\n        if (series.xAxis.valueType === 'DateTime' && series.points.length === 1) {\n            leftSideNearest = series.xAxis.visibleRange.min;\n            rightSideNearest = series.xAxis.visibleRange.max;\n            for (var index = 0; index < series.chart.visibleSeries.length; index++) {\n                var visibleSeries = series.chart.visibleSeries[index];\n                if (visibleSeries.xMin >= leftSideNearest && visibleSeries.xMin < series.xMin) {\n                    leftSideNearest = visibleSeries.xMin + 0.1;\n                }\n                if (visibleSeries.xMax <= rightSideNearest && visibleSeries.xMax > series.xMax) {\n                    rightSideNearest = visibleSeries.xMax - 0.1;\n                }\n                if (visibleSeries.visible && visibleSeries.points.length > 1) {\n                    if (visibleSeries.xMax >= leftSideNearest && visibleSeries.xMax < series.xMin) {\n                        leftSideNearest = visibleSeries.xMax + 0.1;\n                    }\n                    if (visibleSeries.xMin <= rightSideNearest && visibleSeries.xMin > series.xMax) {\n                        rightSideNearest = visibleSeries.xMin - 0.1;\n                    }\n                }\n            }\n            if (leftSideNearest !== series.xAxis.visibleRange.min) {\n                leftSideNearest = Math.abs(series.xMin - leftSideNearest) / 2;\n            }\n            if (rightSideNearest !== series.xAxis.visibleRange.max) {\n                rightSideNearest = Math.abs(series.xMax - rightSideNearest) / 2;\n            }\n        }\n        if (value >= series.xMin - leftSideNearest && value <= series.xMax + rightSideNearest) {\n            for (var i = 0; i < xLength; i++) {\n                data = xData[i];\n                if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {\n                    closest = data;\n                }\n            }\n        }\n        var isDataExist = series.xData.indexOf(closest) !== -1;\n        if (isDataExist) {\n            return closest;\n        }\n        else {\n            return null;\n        }\n    };\n    ChartData.prototype.binarySearch = function (target, list) {\n        var first = 0;\n        var last = list.length;\n        var position = -1;\n        var found = false;\n        var middle;\n        while (found === false && first <= last) {\n            middle = Math.floor((first + last) / 2);\n            if (list[middle].xValue === target) {\n                found = true;\n                position = middle;\n            }\n            else if (list[middle].xValue > target) {\n                last = middle - 1;\n            }\n            else {\n                first = middle + 1;\n            }\n        }\n        return position !== -1 ? list[position] : null;\n    };\n    ChartData.prototype.getClosestX = function (chart, series, xvalues) {\n        var value;\n        var rect = series.clipRect;\n        if (chart.mouseX <= rect.x + rect.width && chart.mouseX >= rect.x) {\n            if (!chart.requireInvertedAxis) {\n                value = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getValueXByPoint)(chart.mouseX - rect.x, rect.width, series.xAxis);\n            }\n            else {\n                value = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getValueYByPoint)(chart.mouseY - rect.y, rect.height, series.xAxis);\n            }\n        }\n        var closest = this.getClosest(series, value, xvalues);\n        var point = ((closest || closest === 0) && series.points.length > 0) ? this.binarySearch(closest, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.sort)(series.points, ['xValue'])) : null;\n        if (point && point.visible) {\n            if (!(this.chart.chartAreaType === 'Cartesian' && ((series.category === 'Indicator' && series.name === 'Histogram') ||\n                (point.symbolLocations && point.symbolLocations.length > 0 && point.symbolLocations[0].x >= 0 &&\n                    point.symbolLocations[0].x <= rect.width)))) {\n                return null;\n            }\n            return new _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.PointData(point, series);\n        }\n        return null;\n    };\n    /**\n     * Merges the x-values of the data points from multiple series into a single array.\n     *\n     * @param {Series[]} visibleSeries - The array of visible series.\n     * @returns {number[]} - The merged array of x-values.\n     * @private\n     */\n    ChartData.prototype.mergeXvalues = function (visibleSeries) {\n        if (visibleSeries.length && (!this.commonXvalues.length || (this.commonXvalues.length !== visibleSeries[0].xData.length))) {\n            this.commonXvalues = visibleSeries[0].xData;\n            for (var index = 1; index < visibleSeries.length; index++) {\n                this.commonXvalues = this.getDistinctValues(this.commonXvalues, visibleSeries[index].xData);\n            }\n        }\n        return this.commonXvalues;\n    };\n    ChartData.prototype.commonXValue = function (visibleSeries) {\n        var commonXValues = [];\n        for (var j = 0; j < visibleSeries.length; j++) {\n            for (var i = 0; (visibleSeries[j].points && i < visibleSeries[j].points.length); i++) {\n                var point = visibleSeries[j].points[i];\n                if (point && (point.index === 0 || point.index === visibleSeries[j].points.length - 1 ||\n                    (point.symbolLocations && point.symbolLocations.length > 0))) {\n                    commonXValues.push(point.xValue);\n                }\n            }\n        }\n        return commonXValues;\n    };\n    ChartData.prototype.getDistinctValues = function (first, second) {\n        if (first === void 0) { first = []; }\n        if (second === void 0) { second = []; }\n        var intial = {};\n        var result = [];\n        var index;\n        for (index = 0; index < first.length; index++) {\n            var temp = first[index];\n            if (!intial[temp]) {\n                intial[temp] = true;\n                result.push(temp);\n            }\n        }\n        for (index = 0; index < second.length; index++) {\n            var temp = second[index];\n            if (!intial[temp]) {\n                intial[temp] = true;\n                result.push(temp);\n            }\n        }\n        return result;\n    };\n    /**\n     * Calculates and sets the X and Y values for mouse interactions based on the data point and chart configuration.\n     *\n     * @param {PointData} data - The data point information containing the x and y values.\n     * @param {Chart} chart - The chart instance for which the mouse values are being calculated.\n     * @param {Tooltip | Crosshair} interactionElement - The interaction element instance to set the calculated mouse values.\n     * @returns {void}\n     * @private\n     */\n    ChartData.prototype.findMouseValues = function (data, chart, interactionElement) {\n        if (!chart.requireInvertedAxis) {\n            if (chart.chartAreaType === 'PolarRadar') {\n                interactionElement.valueX = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.valueToPolarCoefficient)(data.point.xValue, data.series.xAxis) * data.series.xAxis.rect.width\n                    + data.series.xAxis.rect.x;\n            }\n            else {\n                interactionElement.valueX = (data.series.category === 'TrendLine' && chart.tooltip.shared) ? interactionElement.valueX :\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.valueToCoefficient)(data.point.xValue, data.series.xAxis) * data.series.xAxis.rect.width\n                        + data.series.xAxis.rect.x;\n            }\n            interactionElement.valueY = chart.mouseY;\n            if (chart.crosshair.snapToData) {\n                if (data.series.type === 'BoxAndWhisker' && data.point.regions.length) {\n                    interactionElement.valueY = data.point.regions[0].y + data.series.clipRect.y;\n                }\n                else {\n                    interactionElement.valueY = data.point.symbolLocations[0].y + data.series.clipRect.y;\n                }\n            }\n        }\n        else {\n            interactionElement.valueY = (1 - (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.valueToCoefficient)(data.point.xValue, data.series.xAxis)) * data.series.xAxis.rect.height\n                + data.series.xAxis.rect.y;\n            interactionElement.valueX = chart.mouseX;\n            if (chart.crosshair.snapToData) {\n                if (data.series.type === 'BoxAndWhisker' && data.point.regions.length) {\n                    interactionElement.valueX = data.point.regions[0].x + data.series.clipRect.x;\n                }\n                else {\n                    if (!chart.tooltip.shared) {\n                        interactionElement.valueX = data.point.symbolLocations[0].x + data.series.clipRect.x;\n                    }\n                    else {\n                        chart.crosshairModule.valueX = data.point.symbolLocations[0].x + data.series.clipRect.x;\n                    }\n                }\n            }\n        }\n    };\n    return ChartData;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js?");

/***/ })

}]);