"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_core_elements_d"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagramElement: () => (/* binding */ DiagramElement)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n\n\n\n\n/**\n * DiagramElement module defines the basic unit of diagram\n */\nvar DiagramElement = /** @class */ (function () {\n    function DiagramElement() {\n        /**\n         * Sets/Gets the reference point of the element\n         * ```html\n         * <div id='diagram'></div>\n         * ```\n         * ```typescript\n         * let stackPanel: StackPanel = new StackPanel();\n         * stackPanel.offsetX = 300; stackPanel.offsetY = 200;\n         * stackPanel.width = 100; stackPanel.height = 100;\n         * stackPanel.style.fill = 'red';\n         * stackPanel.pivot = { x: 0.5, y: 0.5 };\n         * let diagram: Diagram = new Diagram({\n         * ...\n         * basicElements: [stackPanel],\n         * ...\n         * });\n         * diagram.appendTo('#diagram');\n         * ```\n         */\n        this.pivot = { x: 0.5, y: 0.5 };\n        /**\n         * Sets or gets whether the content of the element needs to be measured\n         */\n        this.isDirt = true;\n        /**\n         * set to true during print and eport\n         */\n        /** @private */\n        this.isExport = false;\n        /**\n         * set scaling value for print and export\n         */\n        /** @private */\n        this.exportScaleValue = { x: 0, y: 0 };\n        /**\n         * set scaling value for print and export\n         */\n        /** @private */\n        this.exportScaleOffset = { x: 0, y: 0 };\n        /**\n         * Check whether style need to be apply or not\n         */\n        /** @private */\n        this.canApplyStyle = true;\n        /**\n         * Sets or gets whether the content of the element to be visible\n         */\n        this.visible = true;\n        /**\n         * Sets/Gets the x-coordinate of the element\n         */\n        this.offsetX = 0;\n        /**\n         * Sets/Gets the y-coordinate of the element\n         */\n        this.offsetY = 0;\n        /**\n         * Set the corner of the element\n         */\n        this.cornerRadius = 0;\n        /**\n         * Sets/Gets the minimum height of the element\n         */\n        this.minHeight = undefined;\n        /**\n         * Sets/Gets the minimum width of the element\n         */\n        this.minWidth = undefined;\n        /**\n         * Sets/Gets the maximum width of the element\n         */\n        this.maxWidth = undefined;\n        /**\n         * Sets/Gets the maximum height of the element\n         */\n        this.maxHeight = undefined;\n        /**\n         * Sets/Gets the width of the element\n         */\n        this.width = undefined;\n        /**\n         * Sets/Gets the height of the element\n         */\n        this.height = undefined;\n        /**\n         * Sets/Gets the rotate angle of the element\n         */\n        this.rotateAngle = 0;\n        /**\n         * Sets/Gets the margin of the element\n         */\n        this.margin = { left: 0, right: 0, top: 0, bottom: 0 };\n        /**\n         * Sets/Gets the allowed direction for connections to the port\n         */\n        this.connectionDirection = 'Auto';\n        /**\n         * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Left - Aligns the diagram element at the left of its immediate parent\n         * * Right - Aligns the diagram element at the right of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.horizontalAlignment = 'Auto';\n        /**\n         * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Top - Aligns the diagram element at the top of its immediate parent\n         * * Bottom - Aligns the diagram element at the bottom of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.verticalAlignment = 'Auto';\n        /**\n         * Sets/Gets the mirror image of diagram element in both horizontal and vertical directions\n         * * FlipHorizontal - Translate the diagram element throughout its immediate parent\n         * * FlipVertical - Rotate the diagram element throughout its immediate parent\n         */\n        this.flip = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.FlipDirection.None;\n        /**\n         * Sets/Gets the element that is to be flipped in assigned flip direction along with the node\n         */\n        this.flipMode = 'All';\n        /**\n         * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent\n         * * Point - Diagram elements will be aligned with respect to a point\n         * * Object - Diagram elements will be aligned with respect to its immediate parent\n         */\n        this.relativeMode = 'Point';\n        /**\n         * Sets whether the element has to be transformed based on its parent or not\n         * * Self - Sets the transform type as Self\n         * * Parent - Sets the transform type as Parent\n         */\n        this.transform = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.Transform.Self | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.Transform.Parent;\n        /**\n         * Sets the style of the element\n         */\n        this.style = { fill: 'white', strokeColor: 'black', opacity: 1, strokeWidth: 1 };\n        /**\n         * Gets the minimum size that is required by the element\n         */\n        this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_1__.Size();\n        /**\n         * Gets the size that the element will be rendered\n         */\n        this.actualSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_1__.Size();\n        /**\n         * Gets the rotate angle that is set to the immediate parent of the element\n         */\n        this.parentTransform = 0;\n        /** @private */\n        this.preventContainer = false;\n        /**\n         * Gets/Set the boolean value for the element\n         */\n        this.isSvgRender = false;\n        /**\n         * Gets/Sets the boundary of the element\n         */\n        this.bounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_2__.Rect(0, 0, 0, 0);\n        /**\n         * Defines the appearance of the shadow of the element\n         */\n        this.shadow = null;\n        /**\n         * Defines the description of the diagram element\n         */\n        this.description = '';\n        /**\n         * Defines whether the element has to be measured or not\n         */\n        this.staticSize = false;\n        /**\n         * Defines the shape of the diagram element\n         */\n        this.shapeType = '';\n        /**\n         * check whether the element is rect or not\n         */\n        this.isRectElement = false;\n        /** @private */\n        this.isCalculateDesiredSize = true;\n        /**\n         * Set the offset values for container in flipping\n         */\n        /** @private */\n        this.flipOffset = { x: 0, y: 0 };\n        /**\n         * Defines whether the element is group or port\n         */\n        /** @private */\n        this.elementActions = _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ElementAction.None;\n        /** @private */\n        this.inversedAlignment = true;\n        //private variables\n        this.position = undefined;\n        this.unitMode = undefined;\n        /**   @private  */\n        this.float = false;\n        this.floatingBounds = undefined;\n    }\n    // public constructor() {\n    //     this.id = randomId();\n    // }\n    /**\n     * Sets the offset of the element with respect to its parent \\\n     *\n     * @returns { void }Sets the offset of the element with respect to its parent\\\n     * @param {number} x - provide the x value.\n     * @param {number} y - provide the y value.\n     * @param {UnitMode} mode - provide the id value.\n     *\n     * @private\n     */\n    DiagramElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {\n        this.unitMode = mode;\n        this.position = { x: x, y: y };\n    };\n    /**\n     * Gets the position of the element with respect to its parent \\\n     *\n     * @returns { PointModel } Gets the position of the element with respect to its parent\\\n     * @param {Size} size - provide the x value.\n     *\n     * @private\n     */\n    DiagramElement.prototype.getAbsolutePosition = function (size) {\n        if (this.position !== undefined) {\n            if (this.unitMode === 'Absolute') {\n                return this.position;\n            }\n            else {\n                return {\n                    x: this.position.x * size.width, y: this.position.y * size.height\n                };\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DiagramElement.prototype, \"outerBounds\", {\n        get: function () {\n            return this.floatingBounds || this.bounds;\n        },\n        /**\n         * used to set the outer bounds value \\\n         *\n         * @returns { void } used to set the outer bounds value.\\\n         * @param {Rect} bounds - provide the id value.\n         *\n         * @private\n         */\n        set: function (bounds) {\n            this.floatingBounds = bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Measures the minimum space that the element requires \\\n     *\n     * @returns { void } Measures the minimum space that the element requires.\\\n     * @param {Size} availableSize - provide the id value.\n     * @param {Object} obj - provide the id value.\n     * @param {Function} callback - provide the id value.\n     *\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    DiagramElement.prototype.measure = function (availableSize, obj, callback) {\n        var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;\n        var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;\n        if (this.id) {\n            if (height === 0 && (this.elementActions & _enum_enum__WEBPACK_IMPORTED_MODULE_0__.ElementAction.HorizontalLaneHeader)) {\n                height = this.actualSize.height;\n            }\n        }\n        this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_1__.Size(width, height);\n        if (this.isCalculateDesiredSize) {\n            this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        }\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the element \\\n     *\n     * @returns { PointModel } Arranges the element\\\n     * @param {Size} desiredSize - provide the x value.\n     *\n     * @private\n     */\n    DiagramElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        return this.actualSize;\n    };\n    /**\n     * Updates the bounds of the element \\\n     *\n     * @returns { void } Updates the bounds of the element\\\n     *\n     * @private\n     */\n    DiagramElement.prototype.updateBounds = function () {\n        this.bounds = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_3__.getBounds)(this);\n    };\n    /**\n     * Validates the size of the element with respect to its minimum and maximum size \\\n     *\n     * @returns { Size } Validates the size of the element with respect to its minimum and maximum size.\\\n     * @param {Size} desiredSize - provide the id value.\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    DiagramElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {\n        //Empty canvas\n        if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {\n            desiredSize.width = 50;\n        }\n        if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {\n            desiredSize.height = 50;\n        }\n        if (desiredSize === undefined || this.width !== undefined &&\n            this.height !== undefined) {\n            desiredSize = desiredSize || new _primitives_size__WEBPACK_IMPORTED_MODULE_1__.Size();\n            desiredSize.width = this.width === undefined ? (availableSize.width || 0)\n                - this.margin.left - this.margin.right : this.width;\n            desiredSize.height = this.height === undefined ? (availableSize.height || 0)\n                - this.margin.top - this.margin.bottom : this.height;\n        }\n        //Considering min values\n        if (this.minWidth !== undefined) {\n            desiredSize.width = Math.max(desiredSize.width, this.minWidth);\n        }\n        if (this.minHeight !== undefined) {\n            desiredSize.height = Math.max(desiredSize.height, this.minHeight);\n        }\n        //Considering max values\n        if (this.maxWidth !== undefined && this.maxWidth !== 0) {\n            desiredSize.width = Math.min(desiredSize.width, this.maxWidth);\n        }\n        if (this.maxHeight !== undefined && this.maxHeight !== 0) {\n            desiredSize.height = Math.min(desiredSize.height, this.maxHeight);\n        }\n        return desiredSize;\n    };\n    return DiagramElement;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/html-element.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/html-element.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagramHtmlElement: () => (/* binding */ DiagramHtmlElement)\n/* harmony export */ });\n/* harmony import */ var _diagram_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * HTMLElement defines the basic html elements\n */\nvar DiagramHtmlElement = /** @class */ (function (_super) {\n    __extends(DiagramHtmlElement, _super);\n    /**\n     * set the id for each element \\\n     *\n     * @returns { void }set the id for each element\\\n     * @param {string} nodeId - provide the x value.\n     * @param {string} diagramId - provide the y value.\n     * @param {string} annotationId - provide the id value.\n     * @param {string} nodeTemplate - provide the id value.\n     *\n     * @private\n     */\n    function DiagramHtmlElement(nodeId, diagramId, annotationId, nodeTemplate) {\n        var _this = _super.call(this) || this;\n        _this.data = '';\n        /**\n         * Gets the node id for the element\n         */\n        _this.nodeId = '';\n        /**\n         * defines the id of the annotation on rendering template on label.\n         * @private\n         */\n        _this.annotationId = '';\n        /**\n         * Gets the diagram id for the html element\n         */\n        _this.diagramId = '';\n        _this.diagramId = diagramId;\n        _this.nodeId = nodeId;\n        _this.annotationId = annotationId;\n        _this.templateFn = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.templateCompiler)(nodeTemplate);\n        return _this;\n    }\n    /**\n     * getNodeTemplate method \\\n     *\n     * @returns { Function } getNodeTemplate method .\\\n     *\n     * @private\n     */\n    DiagramHtmlElement.prototype.getNodeTemplate = function () {\n        return this.templateFn;\n    };\n    Object.defineProperty(DiagramHtmlElement.prototype, \"content\", {\n        /**\n         * Gets or sets the geometry of the html element \\\n         *\n         * @returns { string | HTMLElement } Gets or sets the geometry of the html element \\\n         *\n         * @private\n         */\n        get: function () {\n            return this.data;\n        },\n        /**\n         * Gets or sets the value of the html element \\\n         *\n         * @returns { void }Gets or sets the value of the html element\\\n         * @param {string | HTMLElement} value - provide the value value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.data = value;\n            if (!this.canReset) {\n                this.canReset = true;\n                if (!this.isTemplate) {\n                    this.template = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_1__.getContent)(this, true);\n                }\n                this.canReset = false;\n                this.isDirt = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DiagramHtmlElement;\n}(_diagram_element__WEBPACK_IMPORTED_MODULE_0__.DiagramElement));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/html-element.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/image-element.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/image-element.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageElement: () => (/* binding */ ImageElement)\n/* harmony export */ });\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _diagram_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * ImageElement defines a basic image elements\n */\nvar ImageElement = /** @class */ (function (_super) {\n    __extends(ImageElement, _super);\n    /**\n     * set the id for each element\n     */\n    function ImageElement() {\n        var _this = _super.call(this) || this;\n        /**\n         * sets or gets the image source\n         */\n        _this.imageSource = '';\n        /**\n         * sets scaling factor of the image\n         */\n        _this.imageScale = 'None';\n        /**\n         * sets the alignment of the image\n         */\n        _this.imageAlign = 'None';\n        /**\n         * Sets how to stretch the image\n         */\n        _this.stretch = 'Stretch';\n        return _this;\n    }\n    Object.defineProperty(ImageElement.prototype, \"source\", {\n        /**\n         * Gets the source for the image element\n         */\n        /**\n         * Gets the source for the image element \\\n         *\n         * @returns { void }Gets the source for the image element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.imageSource;\n        },\n        /**\n         * Sets the source for the image element \\\n         *\n         * @returns { void }Sets the source for the image element.\\\n         * @param {string} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.imageSource = value;\n            this.isDirt = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Measures minimum space that is required to render the image \\\n     *\n     * @returns { Size }Measures minimum space that is required to render the image.\\\n     * @param {Size} availableSize - provide the id value.\n     * @param {Object} id - provide the id value.\n     * @param {Function} callback - provide the id value.\n     *\n     * @private\n     */\n    ImageElement.prototype.measure = function (availableSize, id, callback) {\n        if (this.isDirt && (this.stretch !== 'Stretch' || this.width === undefined && this.height === undefined)) {\n            this.contentSize = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_2__.measureImage)(this.source, this.contentSize, id, callback);\n            this.isDirt = false;\n        }\n        if (this.width !== undefined && this.height !== undefined) {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.width, this.height);\n            this.contentSize = this.desiredSize;\n        }\n        else {\n            this.desiredSize = this.contentSize;\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the image\n     * @param {Size} desiredSize\n     */\n    /**\n     * Arranges the image \\\n     *\n     * @returns { Size }Arranges the image.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    ImageElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.desiredSize.width, this.desiredSize.height);\n        this.updateBounds();\n        return this.actualSize;\n    };\n    return ImageElement;\n}(_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/image-element.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagramNativeElement: () => (/* binding */ DiagramNativeElement)\n/* harmony export */ });\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _diagram_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * NativeElement defines the basic native elements\n */\nvar DiagramNativeElement = /** @class */ (function (_super) {\n    __extends(DiagramNativeElement, _super);\n    /**\n     *  set the id for each element \\\n     *\n     * @returns { void } set the id for each element.\\\n     * @param {string} nodeId - provide the id value.\n     * @param {string} diagramId - provide the id value.\n     *\n     * @private\n     */\n    function DiagramNativeElement(nodeId, diagramId) {\n        var _this = _super.call(this) || this;\n        _this.data = '';\n        /**\n         * set the node id\n         */\n        _this.nodeId = '';\n        /**\n         * set the diagram id\n         */\n        _this.diagramId = '';\n        /**\n         * sets scaling factor of the Native Element\n         */\n        _this.scale = 'Stretch';\n        _this.diagramId = diagramId;\n        _this.nodeId = nodeId;\n        return _this;\n    }\n    Object.defineProperty(DiagramNativeElement.prototype, \"content\", {\n        /**\n         *  get the id for each element \\\n         *\n         * @returns { string | SVGElement } get the id for each element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.data;\n        },\n        /**\n         *  sets the geometry of the native element \\\n         *\n         * @returns { void } sets the geometry of the native element.\\\n         * @param {string | SVGElement} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.data = value;\n            if (!this.canReset) {\n                this.canReset = true;\n                this.template = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_2__.getContent)(this, false);\n                this.canReset = false;\n                this.isDirt = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *Measures minimum space that is required to render the Native Element \\\n     *\n     * @returns { Size }Measures minimum space that is required to render the Native Element.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    DiagramNativeElement.prototype.measure = function (availableSize) {\n        if (this.isDirt) {\n            var rect = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_2__.measureNativeContent)(this.template);\n            this.contentSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size();\n            this.contentSize.width = rect.width;\n            this.contentSize.height = rect.height;\n            var x = rect.x;\n            var y = rect.y;\n            this.templatePosition = { x: x, y: y };\n            this.isDirt = false;\n        }\n        if (this.width === undefined || this.height === undefined) {\n            var getAvailableSize = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_2__.measureNativeSvg)(this.template);\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(getAvailableSize.width, getAvailableSize.height);\n        }\n        else {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     *Arranges the Native Element \\\n     *\n     * @returns { Size }Arranges the Native Element.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    DiagramNativeElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.desiredSize.width, this.desiredSize.height);\n        this.updateBounds();\n        return this.actualSize;\n    };\n    return DiagramNativeElement;\n}(_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/native-element.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/path-element.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/path-element.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PathElement: () => (/* binding */ PathElement)\n/* harmony export */ });\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _diagram_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n/* harmony import */ var _utility_path_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utility/path-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/path-util.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * PathElement takes care of how to align the path based on offsetX and offsetY\n */\nvar PathElement = /** @class */ (function (_super) {\n    __extends(PathElement, _super);\n    /**\n     * set the id for each element\n     */\n    function PathElement() {\n        var _this = _super.call(this) || this;\n        /**\n         * Gets or sets the geometry of the path element\n         */\n        _this.pathData = '';\n        /**\n         * Gets/Sets whether the path has to be transformed to fit the given x,y, width, height\n         */\n        _this.transformPath = true;\n        /**\n         * Gets/Sets the equivalent path, that will have the origin as 0,0\n         */\n        _this.absolutePath = '';\n        /**   @private  */\n        _this.canMeasurePath = false;\n        //Private variables\n        /**   @private  */\n        _this.absoluteBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_2__.Rect();\n        return _this;\n    }\n    Object.defineProperty(PathElement.prototype, \"data\", {\n        /**\n         *   Gets the geometry of the path element\\\n         *\n         * @returns { string | SVGElement }  Gets the geometry of the path element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.pathData;\n        },\n        /**\n         *  Sets the geometry of the path element \\\n         *\n         * @returns { void } Sets the geometry of the path element.\\\n         * @param {string} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            if (this.pathData !== value) {\n                this.pathData = value;\n                this.isDirt = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * getPoints methods  \\\n     *\n     * @returns { PointModel[] } Sets the geometry of the path element.\\\n     *\n     * @private\n     */\n    PathElement.prototype.getPoints = function () {\n        var _this = this;\n        if (!this.pointTimer) {\n            this.pointTimer = setTimeout(function () {\n                _this.points = null;\n                _this.pointTimer = null;\n            }, 200);\n        }\n        this.points = this.points || (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.findSegmentPoints)(this);\n        return (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.translatePoints)(this, this.points);\n    };\n    /**\n     * Measures the minimum space that is required to render the element  \\\n     *\n     * @returns { Size } Measures the minimum space that is required to render the element.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    PathElement.prototype.measure = function (availableSize) {\n        //Performance issue - Avoiding measuring the connector path\n        if (this.staticSize && this.width !== undefined && this.height !== undefined) {\n            this.absoluteBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_2__.Rect(this.offsetX - this.width * this.pivot.x, this.offsetY - this.height * this.pivot.y, this.width, this.height);\n        }\n        else if (this.isDirt && (this.transformPath || (this.width === undefined || this.height === undefined))\n            && (!this.absoluteBounds || this.absoluteBounds.height === 0) || this.canMeasurePath) {\n            //Measure the element only whent the path data is changed/ size is not specified\n            this.absoluteBounds = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_3__.measurePath)(this.data ? this.data : '');\n        }\n        if (this.width === undefined) {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.absoluteBounds.width, this.height || this.absoluteBounds.height);\n        }\n        else if (this.height === undefined) {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.width || this.absoluteBounds.width, this.absoluteBounds.height);\n        }\n        else {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        this.canMeasurePath = false;\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the path element  \\\n     *\n     * @returns { Size } Arranges the path element.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    PathElement.prototype.arrange = function (desiredSize) {\n        if (this.isDirt || this.actualSize.width !== desiredSize.width || this.actualSize.height !== desiredSize.height) {\n            this.isDirt = true;\n            this.absolutePath = this.updatePath(this.data, this.absoluteBounds, desiredSize);\n            if (!this.staticSize) {\n                this.points = null;\n            }\n        }\n        this.actualSize = this.desiredSize;\n        this.updateBounds();\n        this.isDirt = false;\n        return this.actualSize;\n    };\n    /**\n     *  Translates the path to 0,0 and scales the path based on the actual size  \\\n     *\n     * @returns { Size } Arranges the path element.\\\n     * @param {string} pathData - provide the id value.\n     * @param {Rect} bounds - provide the id value.\n     * @param {Size} actualSize - provide the id value.\n     *\n     * @private\n     */\n    PathElement.prototype.updatePath = function (pathData, bounds, actualSize) {\n        var isScale = false;\n        var newPathString = '';\n        var scaleX = -bounds.x;\n        var scaleY = -bounds.y;\n        var arrayCollection = [];\n        if (actualSize.width !== bounds.width || actualSize.height !== bounds.height) {\n            scaleX = actualSize.width / Number(bounds.width ? bounds.width : 1);\n            scaleY = actualSize.height / Number(bounds.height ? bounds.height : 1);\n            isScale = true;\n        }\n        arrayCollection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_4__.processPathData)(pathData);\n        arrayCollection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_4__.splitArrayCollection)(arrayCollection);\n        if ((isScale || this.isDirt) && this.transformPath) {\n            newPathString = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_4__.transformPath)(arrayCollection, scaleX, scaleY, isScale, bounds.x, bounds.y, 0, 0);\n        }\n        else {\n            newPathString = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_4__.getPathString)(arrayCollection);\n        }\n        isScale = false;\n        return newPathString;\n    };\n    return PathElement;\n}(_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/path-element.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextElement: () => (/* binding */ TextElement)\n/* harmony export */ });\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _diagram_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * TextElement is used to display text/annotations\n */\nvar TextElement = /** @class */ (function (_super) {\n    __extends(TextElement, _super);\n    /**\n     * set the id for each element\n     */\n    function TextElement() {\n        var _this = _super.call(this) || this;\n        /**\n         * sets or gets the image source\n         */\n        _this.textContent = '';\n        /** @private */\n        _this.canMeasure = true;\n        /**Gets or sets the reference mode for annotation rotation. */\n        /** @private */\n        _this.rotationReference = 'Parent';\n        /** @private */\n        _this.isLaneOrientation = false;\n        /** @private */\n        _this.canConsiderBounds = true;\n        /** @private */\n        _this.annotationVisibility = 'Visible';\n        /**\n         * sets the hyperlink color to blue\n         */\n        _this.hyperlink = {\n            color: 'blue'\n        };\n        /** @private */\n        _this.doWrap = true;\n        _this.textNodes = [];\n        /**\n         * Defines the appearance of the text element\n         */\n        _this.style = {\n            color: 'black', fill: 'transparent', strokeColor: 'black',\n            strokeWidth: 1, fontFamily: 'Arial', fontSize: 12, whiteSpace: 'CollapseSpace',\n            textWrapping: 'WrapWithOverflow', textAlign: 'Center', italic: false, bold: false,\n            textDecoration: 'None', strokeDashArray: '', opacity: 5, gradient: null,\n            textOverflow: 'Wrap'\n        };\n        _this.style.fill = 'transparent';\n        _this.style.strokeColor = 'transparent';\n        return _this;\n    }\n    Object.defineProperty(TextElement.prototype, \"content\", {\n        /**\n         *   gets the content for the text element \\\n         *\n         * @returns { string | SVGElement }  gets the content for the text element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textContent;\n        },\n        /**\n         *   sets the content for the text element \\\n         *\n         * @returns { void }  sets the content for the text element.\\\n         * @param {string} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            if (this.textContent !== value) {\n                this.textContent = value;\n                this.isDirt = true;\n                this.doWrap = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"childNodes\", {\n        /**\n         *   gets the content for the text element \\\n         *\n         * @returns { string | SVGElement }  gets the content for the text element.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textNodes;\n        },\n        /**\n         *   sets the content for the text element \\\n         *\n         * @returns { void }  sets the content for the text element.\\\n         * @param {SubTextElement[]} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.textNodes = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"wrapBounds\", {\n        /**\n         *   gets the wrapBounds for the text \\\n         *\n         * @returns { string | SVGElement }  gets the wrapBounds for the text.\\\n         *\n         * @private\n         */\n        get: function () {\n            return this.textWrapBounds;\n        },\n        /**\n         *    sets the wrapBounds for the text \\\n         *\n         * @returns { void }   sets the wrapBounds for the text.\\\n         * @param {TextBounds} value - provide the id value.\n         *\n         * @private\n         */\n        set: function (value) {\n            this.textWrapBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *    sets the wrapBounds for the text \\\n     *\n     * @returns { void }   sets the wrapBounds for the text.\\\n     *\n     * @private\n     */\n    TextElement.prototype.refreshTextElement = function () {\n        this.isDirt = true;\n    };\n    /**\n     *Measures the minimum size that is required for the text element\\\n     *\n     * @returns { Size }  Measures the minimum size that is required for the text element.\\\n     * @param {Size} availableSize - provide the id value.\n     *\n     * @private\n     */\n    TextElement.prototype.measure = function (availableSize) {\n        var size;\n        if (this.isDirt && this.canMeasure) {\n            size = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_2__.measureText)(this, this.style, this.content, this.isLaneOrientation ?\n                availableSize.height : (this.width || availableSize.width));\n        }\n        else {\n            size = this.desiredSize;\n        }\n        if (this.width === undefined || this.height === undefined) {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(size.width, size.height);\n        }\n        else {\n            this.desiredSize = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the text element\\\n     *\n     * @returns { Size }   Arranges the text element.\\\n     * @param {Size} desiredSize - provide the id value.\n     *\n     * @private\n     */\n    TextElement.prototype.arrange = function (desiredSize) {\n        if (desiredSize.width !== this.actualSize.width || desiredSize.height !== this.actualSize.height || this.isDirt) {\n            this.doWrap = true;\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        this.isDirt = false;\n        return this.actualSize;\n    };\n    return TextElement;\n}(_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js?");

/***/ })

}]);