"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_text-selection_text-selection_js-2-3a82cc01"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-selection/text-selection.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-selection/text-selection.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextSelection: () => (/* binding */ TextSelection)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n/**\n * The `TextSelection` module is used to handle the text selection of PDF viewer.\n *\n * @param {Event} event - event\n * @returns {void}\n */\nvar TextSelection = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - It describes about the pdfviewer\n     * @param {PdfViewerBase} pdfViewerBase - It describes about the pdfviewer base\n     * @private\n     * @returns {void}\n     */\n    function TextSelection(pdfViewer, pdfViewerBase) {\n        var _this = this;\n        /**\n         * @private\n         */\n        this.isTextSelection = false;\n        /**\n         * @private\n         */\n        this.selectionStartPage = null;\n        this.isBackwardPropagatedSelection = false;\n        this.contextMenuHeight = 144;\n        this.backwardStart = 0;\n        /**\n         * @private\n         */\n        this.selectionRangeArray = [];\n        this.selectionAnchorTouch = null;\n        this.selectionFocusTouch = null;\n        this.scrollMoveTimer = 0;\n        this.isMouseLeaveSelection = false;\n        /**\n         * @private\n         */\n        this.isTouchSelection = false;\n        this.previousScrollDifference = 0;\n        this.topStoreLeft = null;\n        this.topStoreRight = null;\n        this.isTextSearched = false;\n        this.isSelectionStartTriggered = false;\n        this.allTextContent = '';\n        this.onLeftTouchSelectElementTouchStart = function (event) {\n            _this.initiateSelectionByTouch();\n        };\n        this.onRightTouchSelectElementTouchStart = function (event) {\n            _this.initiateSelectionByTouch();\n        };\n        this.onLeftTouchSelectElementTouchEnd = function (event) {\n            _this.terminateSelectionByTouch(event);\n        };\n        this.onRightTouchSelectElementTouchEnd = function (event) {\n            _this.terminateSelectionByTouch(event);\n        };\n        this.onLeftTouchSelectElementTouchMove = function (event) {\n            var range;\n            var nodeElement;\n            var zoomFactorabovehundard = 15;\n            var zoomFactorAboveSeventy = 10;\n            var zoomFactoraboveFifty = 8;\n            var zoomFactorbelowFifty = 4;\n            event.preventDefault();\n            event.target.style.zIndex = '0';\n            var rightElement = _this.dropDivElementRight;\n            var isTouchedWithinViewerContainer = _this.isTouchedWithinContainer(event);\n            if (rightElement && isTouchedWithinViewerContainer) {\n                var dropBounds = rightElement.getBoundingClientRect();\n                var xTouch = event.changedTouches[0].clientX;\n                var yTouch = event.changedTouches[0].clientY;\n                event.target.style.zIndex = '1000';\n                nodeElement = _this.getNodeElement(range, xTouch, yTouch, event, nodeElement);\n                if (nodeElement) {\n                    var currentDifference = Math.sqrt((yTouch - dropBounds.top) * (yTouch - dropBounds.top) +\n                        (xTouch - dropBounds.left) * (xTouch - dropBounds.left));\n                    var isCloserMovement = _this.isCloserTouchScroll(currentDifference);\n                    var isTextSelected = false;\n                    var zoomFactor = _this.pdfViewerBase.getZoomFactor();\n                    var topDifference = Math.abs(yTouch - dropBounds.top);\n                    var textHeight = zoomFactor > 1 ? zoomFactorabovehundard : zoomFactor > 0.7 ?\n                        zoomFactorAboveSeventy : zoomFactor > 0.5 ? zoomFactoraboveFifty : zoomFactorbelowFifty;\n                    if (parseInt(yTouch.toString(), 10) <= parseInt(dropBounds.top.toString(), 10) &&\n                        (parseInt(topDifference.toString(), 10) >= textHeight) ||\n                        parseInt(xTouch.toString(), 10) <= parseInt(dropBounds.left.toString(), 10) &&\n                            (parseInt(topDifference.toString(), 10) <= textHeight)) {\n                        _this.dropElementLeft.style.transform = 'rotate(0deg)';\n                        _this.dropElementRight.style.transform = 'rotate(-90deg)';\n                        isTextSelected = _this.selectTextByTouch(nodeElement.parentElement, xTouch, yTouch, false, 'left', isCloserMovement);\n                    }\n                    else {\n                        _this.dropElementLeft.style.transform = 'rotate(-90deg)';\n                        _this.dropElementRight.style.transform = 'rotate(0deg)';\n                        isTextSelected = _this.selectTextByTouch(nodeElement.parentElement, xTouch, yTouch, true, 'left', isCloserMovement);\n                    }\n                    if (isTextSelected) {\n                        var elementClientRect = _this.dropDivElementLeft.getBoundingClientRect();\n                        var pageTopValue = _this.pdfViewerBase.pageSize[_this.pdfViewerBase.currentPageNumber - 1].top;\n                        var topClientValue = _this.getClientValueTop(yTouch, _this.pdfViewerBase.currentPageNumber - 1);\n                        var currentPageLeft = _this.pdfViewerBase.getElement('_pageDiv_' + (_this.pdfViewerBase.currentPageNumber - 1)).getBoundingClientRect().left;\n                        var currentRangeLeft = xTouch - currentPageLeft;\n                        _this.dropDivElementLeft.style.top = pageTopValue * _this.pdfViewerBase.getZoomFactor() + topClientValue + 'px';\n                        _this.topStoreLeft = { pageTop: pageTopValue, topClientValue: _this.getMagnifiedValue(topClientValue),\n                            pageNumber: _this.pdfViewerBase.currentPageNumber - 1, left: _this.getMagnifiedValue(currentRangeLeft),\n                            isHeightNeeded: false };\n                        _this.dropDivElementLeft.style.left = xTouch - _this.pdfViewerBase.viewerContainer.getBoundingClientRect().left - (elementClientRect.width / 2) + _this.pdfViewerBase.viewerContainer.scrollLeft + 'px';\n                        _this.previousScrollDifference = currentDifference;\n                    }\n                }\n            }\n        };\n        this.onRightTouchSelectElementTouchMove = function (event) {\n            var range;\n            var nodeElement;\n            var zoomFactorabovehundard = 25;\n            var zoomFactorAboveSeventy = 15;\n            var zoomFactoraboveFifty = 8;\n            var zoomFactorbelowFifty = 7;\n            event.preventDefault();\n            event.target.style.zIndex = '0';\n            var leftElement = _this.dropDivElementLeft;\n            var isTouchedWithinViewerContainer = _this.isTouchedWithinContainer(event);\n            if (leftElement && isTouchedWithinViewerContainer) {\n                var dropPosition = leftElement.getBoundingClientRect();\n                var touchX = event.changedTouches[0].clientX;\n                var touchY = event.changedTouches[0].clientY;\n                event.target.style.zIndex = '1000';\n                nodeElement = _this.getNodeElement(range, touchX, touchY, event, nodeElement);\n                if (nodeElement) {\n                    var currentDifference = Math.sqrt((touchY - dropPosition.top) * (touchY - dropPosition.top) +\n                        (touchX - dropPosition.left) * (touchX - dropPosition.left));\n                    var isCloserMovement = _this.isCloserTouchScroll(currentDifference);\n                    var isTextSelected = false;\n                    var zoomFactor = _this.pdfViewerBase.getZoomFactor();\n                    var topDifference = Math.abs(touchY - dropPosition.top);\n                    var textHeight = zoomFactor > 1 ? (zoomFactor * zoomFactorabovehundard) :\n                        (zoomFactor > 0.7 ? zoomFactorAboveSeventy : (zoomFactor > 0.5 ? zoomFactoraboveFifty : zoomFactorbelowFifty));\n                    if ((parseInt(touchY.toString(), 10) >= parseInt(dropPosition.top.toString(), 10) &&\n                        parseInt(topDifference.toString(), 10) >= textHeight) || (parseInt(topDifference.toString(), 10) <= textHeight &&\n                        parseInt(touchX.toString(), 10) >= parseInt(dropPosition.left.toString(), 10))) {\n                        _this.dropElementRight.style.transform = 'rotate(-90deg)';\n                        _this.dropElementLeft.style.transform = 'rotate(0deg)';\n                        isTextSelected = _this.selectTextByTouch(nodeElement.parentElement, touchX, touchY, true, 'right', isCloserMovement);\n                    }\n                    else {\n                        _this.dropElementRight.style.transform = 'rotate(0deg)';\n                        _this.dropElementLeft.style.transform = 'rotate(-90deg)';\n                        isTextSelected = _this.selectTextByTouch(nodeElement.parentElement, touchX, touchY, false, 'right', isCloserMovement);\n                    }\n                    if (isTextSelected) {\n                        var pageTopValue = _this.pdfViewerBase.pageSize[_this.pdfViewerBase.currentPageNumber - 1].top;\n                        var topClientValue = _this.getClientValueTop(touchY, _this.pdfViewerBase.currentPageNumber - 1);\n                        var elementClientRect = _this.dropDivElementRight.getBoundingClientRect();\n                        _this.dropDivElementRight.style.top = pageTopValue * _this.pdfViewerBase.getZoomFactor() + topClientValue + 'px';\n                        var currentPageLeft = _this.pdfViewerBase.getElement('_pageDiv_' + (_this.pdfViewerBase.currentPageNumber - 1)).getBoundingClientRect().left;\n                        var currentRangeLeft = touchX - currentPageLeft;\n                        _this.topStoreRight = { pageTop: pageTopValue, topClientValue: _this.getMagnifiedValue(topClientValue),\n                            pageNumber: _this.pdfViewerBase.currentPageNumber - 1, left: _this.getMagnifiedValue(currentRangeLeft),\n                            isHeightNeeded: false };\n                        _this.dropDivElementRight.style.left = touchX - _this.pdfViewerBase.viewerContainer.getBoundingClientRect().left - (elementClientRect.width / 2) + _this.pdfViewerBase.viewerContainer.scrollLeft + 'px';\n                        _this.previousScrollDifference = currentDifference;\n                    }\n                }\n            }\n        };\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @param {EventTarget} target - It describes about the target\n     * @param {number} x - It describes about the X value\n     * @param {number} y - It describes about the Y value\n     * @param {boolean} isExtended - It describes about the isExtended boolean value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.textSelectionOnMouseMove = function (target, x, y, isExtended) {\n        var targetElement = target;\n        this.isTextSearched = true;\n        if (targetElement.nodeType === targetElement.TEXT_NODE) {\n            if (!this.isSelectionStartTriggered && !this.pdfViewerBase.getTextMarkupAnnotationMode()) {\n                this.pdfViewer.fireTextSelectionStart(this.pdfViewerBase.currentPageNumber);\n                this.isSelectionStartTriggered = true;\n            }\n            this.isBackwardPropagatedSelection = false;\n            var range = targetElement.ownerDocument.createRange();\n            var selection = window.getSelection();\n            if (selection.anchorNode !== null) {\n                var position = selection.anchorNode.compareDocumentPosition(selection.focusNode);\n                if (!position && selection.anchorOffset > selection.focusOffset || position === Node.DOCUMENT_POSITION_PRECEDING) {\n                    this.isBackwardPropagatedSelection = true;\n                }\n            }\n            range.selectNodeContents(targetElement);\n            var currentPosition = 0;\n            var endPosition = range.endOffset;\n            while (currentPosition < endPosition) {\n                range.setStart(targetElement, currentPosition);\n                range.setEnd(targetElement, currentPosition + 1);\n                var rangeBounds = range.getBoundingClientRect();\n                var rightBounds = rangeBounds.right;\n                if (isExtended) {\n                    rightBounds = parseInt(rangeBounds.right.toString(), 10);\n                }\n                if (rangeBounds.left <= x && rightBounds >= x && parseInt(rangeBounds.top.toString(), 10) <= y && rangeBounds.bottom >= y) {\n                    if (selection.anchorNode !== null && selection.anchorNode.parentNode.classList.contains('e-pv-text')) {\n                        if (selection.anchorOffset > currentPosition) {\n                            if (this.backwardStart !== 0) {\n                                range.setStart(selection.anchorNode, this.backwardStart);\n                            }\n                            else {\n                                range.setStart(selection.anchorNode, selection.anchorOffset + 1);\n                            }\n                        }\n                        else {\n                            range.setStart(selection.anchorNode, selection.anchorOffset);\n                        }\n                    }\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                    if (!this.isTextSelection) {\n                        this.selectionStartPage = this.pdfViewerBase.currentPageNumber - 1;\n                    }\n                    this.isTextSelection = true;\n                    var isIE = !!document.documentMode;\n                    if (!isIE) {\n                        if (this.isBackwardPropagatedSelection || range.endOffset > currentPosition) {\n                            if (this.backwardStart !== range.startOffset && range.startOffset >= currentPosition) {\n                                this.backwardStart = range.endOffset;\n                            }\n                            if (currentPosition === 0 && range.endOffset !== 1) {\n                                selection.extend(targetElement, currentPosition);\n                            }\n                            else {\n                                selection.extend(targetElement, currentPosition + 1);\n                            }\n                        }\n                        else if (isExtended) {\n                            selection.extend(targetElement, currentPosition);\n                        }\n                        else {\n                            selection.extend(targetElement, currentPosition + 1);\n                        }\n                    }\n                    range.detach();\n                }\n                currentPosition += 1;\n            }\n            var annotationModule = this.pdfViewer.annotationModule;\n            if (annotationModule && annotationModule.textMarkupAnnotationModule &&\n                annotationModule.textMarkupAnnotationModule.\n                    isEnableTextMarkupResizer(annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode)) {\n                var leftDivElement = document.getElementById(this.pdfViewer.element.id + '_droplet_left');\n                if (this.pdfViewerBase.isSelection && selection && selection.rangeCount > 0) {\n                    var currentrange = selection.getRangeAt(0);\n                    var rect = currentrange.getBoundingClientRect();\n                    var left = rect.left;\n                    var top_1 = rect.top;\n                    this.pdfViewer.annotation.textMarkupAnnotationModule.updateLeftposition(left, top_1);\n                    this.pdfViewerBase.isSelection = false;\n                }\n                else if ((leftDivElement && leftDivElement.style.display === 'none')) {\n                    this.pdfViewer.annotation.textMarkupAnnotationModule.updateLeftposition(x, y);\n                }\n                this.pdfViewer.annotation.textMarkupAnnotationModule.updatePosition(x, y);\n            }\n        }\n        else {\n            for (var i = 0; i < targetElement.childNodes.length; i++) {\n                if (targetElement.childNodes[parseInt(i.toString(), 10)].nodeType === targetElement.TEXT_NODE) {\n                    var range = this.getSelectionRange(i, targetElement);\n                    var rangeBounds = range.getBoundingClientRect();\n                    if (rangeBounds.left <= x && rangeBounds.right >= parseInt(x.toString(), 10) &&\n                        parseInt(rangeBounds.top.toString(), 10) <= y && rangeBounds.bottom >= y) {\n                        range.detach();\n                        this.textSelectionOnMouseMove(targetElement.childNodes[parseInt(i.toString(), 10)], x, y, isExtended);\n                    }\n                    else {\n                        range.detach();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {EventTarget} target - It describes about the target\n     * @param {number} x - It describes about the X value\n     * @param {number} y - It describes about the Y value\n     * @param {boolean} isforward - It describes about the isforward boolean value\n     * @private\n     * @returns {boolean} - boolean\n     */\n    TextSelection.prototype.textSelectionOnDrag = function (target, x, y, isforward) {\n        var targetElement = target;\n        this.isTextSearched = true;\n        if (targetElement.nodeType === targetElement.TEXT_NODE) {\n            this.isBackwardPropagatedSelection = false;\n            var range = targetElement.ownerDocument.createRange();\n            var selection = window.getSelection();\n            if (selection.anchorNode !== null) {\n                var position = selection.anchorNode.compareDocumentPosition(selection.focusNode);\n                if (!position && selection.anchorOffset > selection.focusOffset || position === Node.DOCUMENT_POSITION_PRECEDING) {\n                    this.isBackwardPropagatedSelection = true;\n                }\n            }\n            range.selectNodeContents(targetElement);\n            var currentPosition = 0;\n            var endPosition = range.endOffset;\n            while (currentPosition < endPosition) {\n                range.setStart(targetElement, currentPosition);\n                range.setEnd(targetElement, currentPosition + 1);\n                var rangeBounds = range.getBoundingClientRect();\n                if (rangeBounds.left <= x && rangeBounds.right >= x && parseInt(rangeBounds.top.toString(), 10) <= y &&\n                    rangeBounds.bottom >= y) {\n                    if (isforward) {\n                        if (selection.anchorNode !== null && selection.anchorNode.parentNode.classList.contains('e-pv-text')) {\n                            range.setStart(selection.anchorNode, selection.anchorOffset);\n                        }\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                        selection.extend(targetElement, currentPosition);\n                    }\n                    else if (selection.focusNode) {\n                        range.setEnd(selection.focusNode, selection.focusOffset);\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                    }\n                    if (!this.isTextSelection) {\n                        this.selectionStartPage = this.pdfViewerBase.currentPageNumber - 1;\n                    }\n                    this.isTextSelection = true;\n                    range.detach();\n                    return true;\n                }\n                currentPosition += 1;\n            }\n            if (this.pdfViewerBase.isSelection) {\n                var currentrange = selection.getRangeAt(0);\n                var rect = currentrange.getBoundingClientRect();\n                var left = rect.left;\n                var top_2 = rect.top;\n                this.pdfViewer.annotation.textMarkupAnnotationModule.updateLeftposition(left, top_2);\n                this.pdfViewerBase.isSelection = false;\n            }\n            this.pdfViewer.annotation.textMarkupAnnotationModule.updatePosition(x, y);\n        }\n        else {\n            for (var i = 0; i < targetElement.childNodes.length; i++) {\n                if (targetElement.childNodes[parseInt(i.toString(), 10)].nodeType === targetElement.TEXT_NODE) {\n                    var range = this.getSelectionRange(i, targetElement);\n                    var rangeBounds = range.getBoundingClientRect();\n                    if (rangeBounds.left <= x && rangeBounds.right >= x && parseInt(rangeBounds.top.toString(), 10) <= y &&\n                        rangeBounds.bottom >= y) {\n                        range.detach();\n                        this.textSelectionOnDrag(targetElement.childNodes[parseInt(i.toString(), 10)], x, y, isforward);\n                    }\n                    else {\n                        range.detach();\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Select the target text region in the PDF document of the given bounds.\n     *\n     * @param  {number} pageNumbers - Specifies the page number\n     * @param  {IRectangle[]} bounds -  Specifies the bounds of the texts.\n     * @returns {void}\n     */\n    TextSelection.prototype.selectTextRegion = function (pageNumbers, bounds) {\n        var element = null;\n        var pageNumber = (pageNumbers - 1);\n        for (var k = 0; k < bounds.length; k++) {\n            var bound = bounds[parseInt(k.toString(), 10)];\n            var x = (bound.left ? bound.left : bound.Left) * this.pdfViewerBase.getZoomFactor();\n            var y = (bound.top ? bound.top : bound.Top) * this.pdfViewerBase.getZoomFactor();\n            var width = (bound.width ? bound.width : bound.Width) * this.pdfViewerBase.getZoomFactor();\n            var textLayer = this.pdfViewerBase.getElement('_textLayer_' + pageNumber);\n            if (textLayer) {\n                var textDivs = textLayer.childNodes;\n                for (var n = 0; n < textDivs.length; n++) {\n                    if (textDivs[parseInt(n.toString(), 10)]) {\n                        var rangebounds = textDivs[parseInt(n.toString(), 10)].getBoundingClientRect();\n                        var top_3 = this.getClientValueTop(rangebounds.top, pageNumber);\n                        var currentLeft = rangebounds.left - this.pdfViewerBase.getElement('_pageDiv_' + pageNumber).getBoundingClientRect().left;\n                        var totalLeft = currentLeft + rangebounds.width;\n                        var textDiVLeft = parseInt(textDivs[parseInt(n.toString(), 10)].style.left, 10);\n                        var currentTop = parseInt(textDivs[parseInt(n.toString(), 10)].style.top, 10);\n                        var isLeftBounds = this.checkLeftBounds(currentLeft, textDiVLeft, totalLeft, x);\n                        var isTopBounds = this.checkTopBounds(top_3, currentTop, y);\n                        if (isLeftBounds && isTopBounds) {\n                            element = textDivs[parseInt(n.toString(), 10)];\n                            break;\n                        }\n                    }\n                }\n                if (element != null) {\n                    var boundingRect = this.pdfViewerBase.getElement('_textLayer_' + pageNumber).getBoundingClientRect();\n                    this.textSelectionOnMouseMove(element, x + boundingRect.left, y + boundingRect.top, false);\n                    if ((bounds.length - 1) === k) {\n                        this.textSelectionOnMouseMove(element, x + boundingRect.left + width, y + boundingRect.top, false);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {number} left - It describes about the left value\n     * @param {number} textDiVLeft - It describes about the text div left value\n     * @param {number} totalLeft - It describes about the total left value\n     * @param {number} x - It describes about the x value\n     * @private\n     * @returns {boolean} - boolean\n     */\n    TextSelection.prototype.checkLeftBounds = function (left, textDiVLeft, totalLeft, x) {\n        var isExists = false;\n        if (left === parseInt(x.toString(), 10) || parseInt(left.toString(), 10) === parseInt(x.toString(), 10) ||\n            (left + 1) === parseInt(x.toString(), 10) || (left - 1) === parseInt(x.toString(), 10)\n            || textDiVLeft === parseInt(x.toString(), 10) || textDiVLeft === x || (totalLeft >= x && left <= x)) {\n            isExists = true;\n        }\n        return isExists;\n    };\n    /**\n     * @param {number} top - It describes about the top value\n     * @param {number} currentTop - It describes about the current top value\n     * @param {number} y - It describes about the Y value\n     * @private\n     * @returns {boolean} - boolean\n     */\n    TextSelection.prototype.checkTopBounds = function (top, currentTop, y) {\n        var isExists = false;\n        if ((top === parseInt(y.toString(), 10) || parseInt(top.toString(), 10) === parseInt(y.toString(), 10) ||\n            parseInt((top + 1).toString(), 10) === parseInt(y.toString(), 10) ||\n            parseInt((top - 1).toString(), 10) === parseInt(y.toString(), 10)\n            || currentTop === parseInt(y.toString(), 10) || currentTop === y)) {\n            isExists = true;\n        }\n        return isExists;\n    };\n    /**\n     * @param {MouseEvent} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.textSelectionOnMouseLeave = function (event) {\n        var _this = this;\n        event.preventDefault();\n        var viewerTop = this.pdfViewerBase.viewerContainer.offsetTop;\n        if (this.pdfViewer.magnificationModule) {\n            if (this.pdfViewer.magnificationModule.fitType === 'fitToPage') {\n                return;\n            }\n        }\n        if (event.clientY > viewerTop) {\n            this.scrollMoveTimer = setInterval(function () {\n                _this.scrollForwardOnSelection();\n            }, 500);\n        }\n        else {\n            this.scrollMoveTimer = setInterval(function () {\n                _this.scrollBackwardOnSelection();\n            }, 500);\n        }\n    };\n    TextSelection.prototype.scrollForwardOnSelection = function () {\n        if (!this.pdfViewerBase.isSignInitialClick) {\n            this.isMouseLeaveSelection = true;\n            this.pdfViewerBase.viewerContainer.scrollTop = this.pdfViewerBase.viewerContainer.scrollTop + 200;\n            this.stichSelectionOnScroll(this.pdfViewerBase.currentPageNumber - 1);\n        }\n    };\n    TextSelection.prototype.scrollBackwardOnSelection = function () {\n        this.isMouseLeaveSelection = true;\n        this.pdfViewerBase.viewerContainer.scrollTop = this.pdfViewerBase.viewerContainer.scrollTop - 200;\n        this.stichSelectionOnScroll(this.pdfViewerBase.currentPageNumber - 1);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.clear = function () {\n        if (this.scrollMoveTimer) {\n            this.isMouseLeaveSelection = false;\n            clearInterval(this.scrollMoveTimer);\n        }\n    };\n    /**\n     * @param {any} element - It describes about the element\n     * @param {number} x - It describes about the X value\n     * @param {number} y - It describes about the Y value\n     * @param {boolean} isStoreSelection - It describes about the isStoreSelection value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.selectAWord = function (element, x, y, isStoreSelection) {\n        var padding = 0;\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            padding = 3;\n        }\n        if (element.nodeType === element.TEXT_NODE) {\n            var selection = window.getSelection();\n            var range = element.ownerDocument.createRange();\n            range.selectNodeContents(element);\n            var currentPosition = 0;\n            var endPosition = range.endOffset;\n            while (currentPosition < endPosition) {\n                range.setStart(element, currentPosition);\n                range.setEnd(element, currentPosition + 1);\n                var rangeBounds = range.getBoundingClientRect();\n                if (rangeBounds.left <= x + padding && rangeBounds.right >= x - padding &&\n                    rangeBounds.top <= y + padding && rangeBounds.bottom >= y - padding) {\n                    var textContent = element.textContent;\n                    var indices = [];\n                    var startPosition = void 0;\n                    var endPos = void 0;\n                    for (var i = 0; i < textContent.length; i++) {\n                        if (textContent[parseInt(i.toString(), 10)] === ' ') {\n                            indices.push(i);\n                        }\n                    }\n                    for (var j = 0; j < indices.length; j++) {\n                        if (currentPosition === indices[parseInt(j.toString(), 10)]) {\n                            startPosition = indices[parseInt(j.toString(), 10)];\n                            endPos = indices[parseInt(j.toString(), 10)];\n                        }\n                        if (indices[0] > currentPosition) {\n                            startPosition = 0;\n                            endPos = indices[parseInt(j.toString(), 10)];\n                            break;\n                        }\n                        if (currentPosition > indices[parseInt(j.toString(), 10)] && currentPosition < indices[j + 1]) {\n                            startPosition = indices[parseInt(j.toString(), 10)];\n                            endPos = indices[j + 1];\n                        }\n                        else if (currentPosition > indices[parseInt(j.toString(), 10)]) {\n                            if (!indices[j + 1]) {\n                                startPosition = indices[parseInt(j.toString(), 10)];\n                            }\n                        }\n                    }\n                    if (!endPos) {\n                        endPos = textContent.length;\n                    }\n                    if (startPosition === 0) {\n                        range.setStart(element, startPosition);\n                    }\n                    else {\n                        range.setStart(element, startPosition + 1);\n                    }\n                    range.setEnd(element, endPos);\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                    this.isTextSelection = true;\n                    var startParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.parentElement) ?\n                        range.startContainer.parentNode : range.startContainer.parentElement;\n                    this.selectionStartPage = parseInt(startParent.id.split('_text_')[1], 10);\n                    if (isStoreSelection) {\n                        this.selectionAnchorTouch = { anchorNode: selection.anchorNode.parentElement.id,\n                            anchorOffset: selection.anchorOffset };\n                        this.selectionFocusTouch = { focusNode: selection.focusNode.parentElement.id, focusOffset: selection.focusOffset };\n                    }\n                    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n                        range.detach();\n                    }\n                    break;\n                }\n                currentPosition += 1;\n            }\n        }\n        else {\n            for (var i = 0; i < element.childNodes.length; i++) {\n                var range = this.getSelectionRange(i, element);\n                var rangeBounds = range.getBoundingClientRect();\n                if (rangeBounds.left <= x + padding && rangeBounds.right >= x - padding &&\n                    rangeBounds.top <= y + padding && rangeBounds.bottom >= y - padding) {\n                    range.detach();\n                    this.selectAWord(element.childNodes[parseInt(i.toString(), 10)], x, y, isStoreSelection);\n                }\n                else {\n                    range.detach();\n                }\n            }\n        }\n    };\n    TextSelection.prototype.getSelectionRange = function (index, element) {\n        var range = element.childNodes[parseInt(index.toString(), 10)].ownerDocument.createRange();\n        range.selectNodeContents(element.childNodes[parseInt(index.toString(), 10)]);\n        return range;\n    };\n    /**\n     * @param {MouseEvent} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.selectEntireLine = function (event) {\n        var textIds = [];\n        var targetElement = event.target;\n        var targetRect = targetElement.getBoundingClientRect();\n        var targetcentre = parseInt((targetRect.top + (targetRect.height / 2)).toString(), 10);\n        var pageNumber = parseInt(event.target.id.split('_text_')[1], 10);\n        var textDivs = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_text_' + pageNumber + '\"]');\n        if (targetElement.classList.contains('e-pv-text')) {\n            this.pdfViewer.fireTextSelectionStart(pageNumber + 1);\n            for (var i = 0; i < textDivs.length; i++) {\n                var rect = textDivs[parseInt(i.toString(), 10)].getBoundingClientRect();\n                var topValue = parseInt(rect.top.toString(), 10);\n                var bottomValue = parseInt(rect.bottom.toString(), 10);\n                if ((topValue <= targetcentre && bottomValue > targetcentre) && (targetRect.bottom + 10 > bottomValue)) {\n                    var textId = textDivs[parseInt(i.toString(), 10)].id;\n                    if (textId !== '') {\n                        textIds.push(textId);\n                    }\n                }\n            }\n            var selection = window.getSelection();\n            selection.removeAllRanges();\n            var range = document.createRange();\n            var lengths = (textIds.length - 1);\n            var d1 = document.getElementById(textIds[0]);\n            var d2 = document.getElementById(textIds[parseInt(lengths.toString(), 10)]);\n            var childNodes = d2.childNodes.length;\n            if (childNodes > 0) {\n                range.setStart(d1.childNodes[0], 0);\n                range.setEnd(d2.childNodes[0], d2.textContent.length);\n            }\n            else {\n                range.setStart(d1.childNodes[0], 0);\n                range.setEnd(d2, 1);\n            }\n            this.selectionStartPage = parseInt(range.startContainer.parentElement.id.split('_text_')[1], 10);\n            selection.addRange(range);\n            this.isTextSelection = true;\n            if (selection != null && this.pdfViewer.contextMenuSettings.contextMenuAction === 'MouseUp') {\n                this.calculateContextMenuPosition(event.clientY, event.clientY);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.enableTextSelectionMode = function () {\n        this.pdfViewerBase.isTextSelectionDisabled = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewerBase.viewerContainer)) {\n            this.pdfViewerBase.viewerContainer.classList.remove('e-disable-text-selection');\n            this.pdfViewerBase.viewerContainer.classList.add('e-enable-text-selection');\n            this.pdfViewerBase.viewerContainer.addEventListener('selectstart', function (e) {\n                e.preventDefault();\n                return true;\n            });\n        }\n    };\n    TextSelection.prototype.clearTextSelection = function () {\n        if (this.isTextSelection) {\n            this.pdfViewerBase.textLayer.clearDivSelection();\n            if (window.getSelection) {\n                if (window.getSelection().removeAllRanges) {\n                    window.getSelection().removeAllRanges();\n                }\n            }\n            if (this.pdfViewer.linkAnnotationModule) {\n                var lowerPageIndex = this.pdfViewerBase.currentPageNumber - 3;\n                lowerPageIndex = (lowerPageIndex < 0) ? 0 : lowerPageIndex;\n                var higherPageIndex = this.pdfViewer.currentPageNumber + 1;\n                higherPageIndex = (higherPageIndex < (this.pdfViewerBase.pageCount - 1)) ? higherPageIndex :\n                    (this.pdfViewerBase.pageCount - 1);\n                for (var i = lowerPageIndex; i <= higherPageIndex; i++) {\n                    this.pdfViewer.linkAnnotationModule.modifyZindexForTextSelection(i, false);\n                }\n            }\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.textMarkupAnnotationModule) {\n                this.pdfViewer.annotation.textMarkupAnnotationModule.showHideDropletDiv(true);\n            }\n            this.selectionRangeArray = [];\n            this.isTextSelection = false;\n            this.isTouchSelection = false;\n            if (this.pdfViewer.textSearchModule) {\n                this.pdfViewer.textSearchModule.searchAfterSelection();\n            }\n            this.pdfViewerBase.contextMenuModule.close();\n            this.removeTouchElements();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.removeTouchElements = function () {\n        if (this.dropDivElementLeft) {\n            this.dropDivElementLeft.parentElement.removeChild(this.dropDivElementLeft);\n            this.dropDivElementLeft = null;\n            this.dropElementLeft.style.transform = 'rotate(0deg)';\n        }\n        if (this.dropDivElementRight) {\n            this.dropDivElementRight.parentElement.removeChild(this.dropDivElementRight);\n            this.dropDivElementRight = null;\n            this.dropElementRight.style.transform = 'rotate(-90deg)';\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.resizeTouchElements = function () {\n        var viewerContainerLeft = this.pdfViewerBase.viewerContainer.getBoundingClientRect().left;\n        if (this.dropDivElementLeft) {\n            var elementClientRect = this.dropDivElementLeft.getBoundingClientRect();\n            var dropElementHeight = 0;\n            var leftCurrentPagePosition = this.pdfViewerBase.getElement('_pageDiv_' + this.topStoreLeft.pageNumber).getBoundingClientRect();\n            this.dropDivElementLeft.style.left = parseFloat(this.topStoreLeft.left.toString()) * this.pdfViewerBase.getZoomFactor() + leftCurrentPagePosition.left - viewerContainerLeft - (elementClientRect.width / 2) + 'px';\n            if (this.topStoreLeft.isHeightNeeded) {\n                dropElementHeight = (elementClientRect.height / 2) * this.pdfViewerBase.getZoomFactor();\n            }\n            this.dropDivElementLeft.style.top = parseFloat(this.topStoreLeft.pageTop.toString()) * this.pdfViewerBase.getZoomFactor() + parseFloat(this.topStoreLeft.topClientValue.toString()) * this.pdfViewerBase.getZoomFactor() + dropElementHeight + 'px';\n        }\n        if (this.dropDivElementRight) {\n            var elementClientRect = this.dropDivElementRight.getBoundingClientRect();\n            var dropElementHeight = 0;\n            var rightCurrentPagePosition = this.pdfViewerBase.getElement('_pageDiv_' + this.topStoreRight.pageNumber).getBoundingClientRect();\n            this.dropDivElementRight.style.left = parseFloat(this.topStoreRight.left.toString()) * this.pdfViewerBase.getZoomFactor() + rightCurrentPagePosition.left - viewerContainerLeft - (elementClientRect.width / 2) + 'px';\n            if (this.topStoreRight.isHeightNeeded) {\n                dropElementHeight = (elementClientRect.height / 2) * this.pdfViewerBase.getZoomFactor();\n            }\n            this.dropDivElementRight.style.top = parseFloat(this.topStoreRight.pageTop.toString()) * this.pdfViewerBase.getZoomFactor() + parseFloat(this.topStoreRight.topClientValue.toString()) * this.pdfViewerBase.getZoomFactor() + dropElementHeight + 'px';\n        }\n    };\n    /**\n     * @param {MouseEvent} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.textSelectionOnMouseup = function (event) {\n        this.clear();\n        if (window.getSelection().anchorNode !== null) {\n            this.isMouseLeaveSelection = false;\n            this.isSelectionStartTriggered = false;\n            this.maintainSelectionOnZoom(true, false);\n            this.fireTextSelectEnd();\n            var isTextSearch = this.pdfViewerBase.textLayer.getTextSearchStatus();\n            if (isTextSearch) {\n                this.pdfViewerBase.textLayer.clearDivSelection();\n                var indexes = this.pdfViewer.textSearchModule.getIndexes();\n                var lowerPageValue = parseFloat(indexes.lowerPageValue.toString());\n                var higherPageValue = parseFloat(indexes.higherPageValue.toString());\n                for (var i = lowerPageValue; i < higherPageValue; i++) {\n                    this.applySelectionRangeOnScroll(i);\n                }\n                this.pdfViewer.textSearchModule.searchAfterSelection();\n            }\n            else {\n                this.applySpanForSelection();\n            }\n            if (this.pdfViewer.linkAnnotationModule) {\n                this.pdfViewer.linkAnnotationModule.modifyZindexForTextSelection(this.pdfViewerBase.currentPageNumber - 1, false);\n            }\n            if (this.isTextSearched && this.pdfViewer.contextMenuSettings.contextMenuAction === 'MouseUp') {\n                this.calculateContextMenuPosition(event.clientY, event.clientX);\n                this.isTextSearched = false;\n            }\n        }\n        else {\n            this.pdfViewerBase.textLayer.clearDivSelection();\n            if (this.pdfViewer.textSearchModule) {\n                this.pdfViewer.textSearchModule.searchAfterSelection();\n            }\n            this.pdfViewerBase.contextMenuModule.close();\n            this.removeTouchElements();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.fireTextSelectEnd = function () {\n        if (this.selectionRangeArray.length !== 0) {\n            var selectEndPageIndex = 0;\n            var selectedText = '';\n            var selectedBounds = [];\n            for (var k = 0; k < this.selectionRangeArray.length; k++) {\n                selectedText += this.selectionRangeArray[parseInt(k.toString(), 10)].textContent;\n                for (var j = 0; j < this.selectionRangeArray[parseInt(k.toString(), 10)].rectangleBounds.length; j++) {\n                    var currentBound = this.selectionRangeArray[parseInt(k.toString(), 10)].rectangleBounds[parseInt(j.toString(), 10)];\n                    selectedBounds.push({ left: currentBound.left, right: currentBound.right, top: currentBound.top,\n                        bottom: currentBound.bottom, width: currentBound.width, height: currentBound.height,\n                        pageIndex: this.selectionRangeArray[parseInt(k.toString(), 10)].pageNumber + 1 });\n                }\n                if (this.selectionRangeArray[parseInt(k.toString(), 10)].isBackward && k === 0) {\n                    selectEndPageIndex = this.selectionRangeArray[parseInt(k.toString(), 10)].pageNumber + 1;\n                }\n                else if (!this.selectionRangeArray[parseInt(k.toString(), 10)].isBackward && k === this.selectionRangeArray.length - 1) {\n                    selectEndPageIndex = this.selectionRangeArray[parseInt(k.toString(), 10)].pageNumber + 1;\n                }\n            }\n            this.pdfViewer.fireTextSelectionEnd(selectEndPageIndex, selectedText, selectedBounds);\n        }\n    };\n    /**\n     * @param {boolean}  isMaintainSelection - It describes about the isMaintainSelection value\n     * @param {boolean} isStich - It describes about the isStich value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.maintainSelectionOnZoom = function (isMaintainSelection, isStich) {\n        var selection = window.getSelection();\n        if (selection.type === 'Range' || (!selection.type && !selection.isCollapsed)) {\n            var isBackward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n            if (selection.anchorNode != null) {\n                var anchorPageId = parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10);\n                var focusPageId = parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10);\n                if (this.isTouchSelection && isNaN(focusPageId)) {\n                    var focusElement = selection.focusNode;\n                    if (focusElement === this.pdfViewerBase.pageContainer) {\n                        var lastChildNode = this.pdfViewerBase.pageContainer.lastChild;\n                        if (lastChildNode.classList.contains('e-pv-touch-select-drop')) {\n                            focusPageId = parseInt(lastChildNode.previousSibling.previousSibling.id.split('_pageDiv_')[1], 10);\n                        }\n                        else if (lastChildNode.classList.contains('e-pv-page-div')) {\n                            focusPageId = parseInt(lastChildNode.id.split('_pageDiv_')[1], 10);\n                        }\n                    }\n                }\n                if (!isBackward) {\n                    for (var i = anchorPageId; i <= focusPageId; i++) {\n                        this.maintainSelectionOnScroll(i, isStich);\n                    }\n                }\n                else {\n                    for (var i = anchorPageId; i >= focusPageId; i--) {\n                        this.maintainSelectionOnScroll(i, isStich);\n                    }\n                }\n            }\n            if (!isMaintainSelection) {\n                selection.removeAllRanges();\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number value\n     * @private\n     * @returns {boolean} - boolean\n     */\n    TextSelection.prototype.isSelectionAvailableOnScroll = function (pageNumber) {\n        var isSelectionAvailable = false;\n        var ranges = this.selectionRangeArray;\n        for (var i = 0; i < ranges.length; i++) {\n            if (ranges[parseInt(i.toString(), 10)] !== null) {\n                if (pageNumber === ranges[parseInt(i.toString(), 10)].pageNumber) {\n                    isSelectionAvailable = true;\n                    if (this.isTouchSelection && !this.pdfViewerBase.getMagnified()) {\n                        isSelectionAvailable = false;\n                    }\n                    break;\n                }\n            }\n        }\n        return isSelectionAvailable;\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.applySelectionRangeOnScroll = function (pageNumber) {\n        if (this.isMouseLeaveSelection) {\n            this.applySelectionMouseScroll(pageNumber);\n        }\n        else {\n            this.applySelectionRange(pageNumber);\n        }\n    };\n    TextSelection.prototype.getSelectionRangeFromArray = function (pageNumber) {\n        var isSelectionAvailable = false;\n        var selectionRange = null;\n        var ranges = this.selectionRangeArray;\n        for (var i = 0; i < ranges.length; i++) {\n            if (ranges[parseInt(i.toString(), 10)] !== null) {\n                if (pageNumber === ranges[parseInt(i.toString(), 10)].pageNumber) {\n                    selectionRange = ranges[parseInt(i.toString(), 10)];\n                    isSelectionAvailable = true;\n                    break;\n                }\n            }\n        }\n        return { isSelectionAvailable: isSelectionAvailable, selectionRange: selectionRange };\n    };\n    TextSelection.prototype.applySelectionRange = function (pageNumber) {\n        var selectionObject = this.getSelectionRangeFromArray(pageNumber);\n        var isSelectionAvailable = selectionObject.isSelectionAvailable;\n        var textLayer = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageNumber);\n        if (textLayer) {\n            if (isSelectionAvailable && textLayer.childNodes.length !== 0) {\n                var selectionRange = selectionObject.selectionRange;\n                var anchorOffsetDiv = void 0;\n                var focusOffsetDiv = void 0;\n                var anchorOffset = void 0;\n                var focusOffset = void 0;\n                if (selectionRange.isBackward) {\n                    var startId = parseInt(selectionRange.endNode.split('_text_')[1].split('_')[1], 10);\n                    var endId = parseInt(selectionRange.startNode.split('_text_')[1].split('_')[1], 10);\n                    if (startId < endId) {\n                        anchorOffsetDiv = startId;\n                        anchorOffset = selectionRange.endOffset;\n                        focusOffset = selectionRange.startOffset;\n                        focusOffsetDiv = endId;\n                    }\n                    else {\n                        anchorOffsetDiv = endId;\n                        anchorOffset = selectionRange.endOffset;\n                        focusOffsetDiv = startId;\n                        focusOffset = selectionRange.startOffset;\n                    }\n                }\n                else {\n                    anchorOffsetDiv = parseInt(selectionRange.startNode.split('text_')[1].split('_')[1], 10);\n                    focusOffsetDiv = parseInt(selectionRange.endNode.split('text_')[1].split('_')[1], 10);\n                    anchorOffset = selectionRange.startOffset;\n                    focusOffset = selectionRange.endOffset;\n                }\n                window.getSelection().removeAllRanges();\n                this.pdfViewerBase.textLayer.applySpanForSelection(pageNumber, pageNumber, anchorOffsetDiv, focusOffsetDiv, anchorOffset, focusOffset);\n                if (this.pdfViewer.textSearchModule) {\n                    this.pdfViewer.textSearchModule.searchAfterSelection();\n                }\n            }\n        }\n    };\n    TextSelection.prototype.applySelectionMouseScroll = function (pageNumber) {\n        var selectionObject = this.getSelectionRangeFromArray(pageNumber);\n        var isSelectionAvailable = selectionObject.isSelectionAvailable;\n        if (isSelectionAvailable) {\n            var selectionRange = selectionObject.selectionRange;\n            var selection = window.getSelection();\n            var anchorNode = document.getElementById(selectionRange.startNode).childNodes[0];\n            var focusNode = document.getElementById(selectionRange.endNode).childNodes[0];\n            var range = document.createRange();\n            if (selection.anchorNode === null) {\n                if (!selectionRange.isBackward) {\n                    range.setStart(anchorNode, selectionRange.startOffset);\n                    range.setEnd(focusNode, selectionRange.endOffset);\n                }\n                else {\n                    range.setStart(focusNode, selectionRange.endOffset);\n                    range.setEnd(anchorNode, selectionRange.startOffset);\n                }\n            }\n            else {\n                var anchorPageIndex = isNaN(parseInt(selection.anchorNode.parentElement.id.split('_text_')[1], 10)) ? parseInt(selection.anchorNode.id.split('_pageDiv_')[1], 10) : parseInt(selection.anchorNode.parentElement.id.split('_text_')[1], 10);\n                if (isNaN(anchorPageIndex)) {\n                    anchorPageIndex = parseInt(selection.anchorNode.id.split('_text_')[1], 10);\n                }\n                var focusPageIndex = isNaN(parseInt(selection.focusNode.parentElement.id.split('_text_')[1], 10)) ? parseInt(selection.focusNode.id.split('_pageDiv_')[1], 10) : parseInt(selection.focusNode.parentElement.id.split('_text_')[1], 10);\n                var currentAnchorIndex = parseInt(selectionRange.startNode.split('_text_')[1], 10);\n                if ((anchorPageIndex === focusPageIndex) && (anchorPageIndex === currentAnchorIndex)) {\n                    if (!selectionRange.isBackward) {\n                        range.setStart(anchorNode, selectionRange.startOffset);\n                        range.setEnd(focusNode, selectionRange.endOffset);\n                    }\n                    else {\n                        range.setStart(focusNode, selectionRange.endOffset);\n                        range.setEnd(anchorNode, selectionRange.startOffset);\n                    }\n                }\n                else if (!isNaN(anchorPageIndex)) {\n                    if (!isNaN(anchorPageIndex) && !selectionRange.isBackward) {\n                        if (anchorPageIndex < currentAnchorIndex && currentAnchorIndex < focusPageIndex &&\n                            anchorPageIndex !== focusPageIndex) {\n                            range.setStart(selection.anchorNode, selection.anchorOffset);\n                            range.setEnd(selection.focusNode, selection.focusOffset);\n                        }\n                        else if (anchorPageIndex < currentAnchorIndex) {\n                            range.setStart(selection.anchorNode, selection.anchorOffset);\n                            range.setEnd(focusNode, selectionRange.endOffset);\n                        }\n                        else {\n                            range.setStart(anchorNode, selectionRange.startOffset);\n                            range.setEnd(selection.focusNode, selection.focusOffset);\n                        }\n                    }\n                    else {\n                        var isBackward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n                        if (anchorPageIndex > currentAnchorIndex && currentAnchorIndex > focusPageIndex &&\n                            anchorPageIndex !== focusPageIndex) {\n                            if (!isBackward) {\n                                range.setStart(selection.anchorNode, selection.anchorOffset);\n                                range.setEnd(selection.focusNode, selection.focusOffset);\n                            }\n                            else {\n                                selection.extend(selection.focusNode, selection.focusOffset);\n                            }\n                        }\n                        else if (anchorPageIndex < currentAnchorIndex && currentAnchorIndex < focusPageIndex &&\n                            anchorPageIndex !== focusPageIndex) {\n                            if (!isBackward) {\n                                range.setStart(selection.anchorNode, selection.anchorOffset);\n                                range.setEnd(selection.focusNode, selection.focusOffset);\n                            }\n                            else {\n                                selection.extend(selection.focusNode, selection.focusOffset);\n                            }\n                        }\n                        else if (anchorPageIndex < currentAnchorIndex) {\n                            if (!isBackward) {\n                                if (currentAnchorIndex !== this.selectionRangeArray[0].pageNumber) {\n                                    range.setStart(selection.anchorNode, selection.anchorOffset);\n                                    range.setEnd(focusNode, selectionRange.endOffset);\n                                }\n                                else {\n                                    range.setStart(selection.anchorNode, selection.anchorOffset);\n                                    range.setEnd(anchorNode, selectionRange.startOffset);\n                                }\n                            }\n                            else {\n                                if (currentAnchorIndex !== this.selectionRangeArray[0].pageNumber) {\n                                    this.extendCurrentSelection(focusNode.parentElement, selectionRange.endOffset, selection, range);\n                                }\n                                else {\n                                    this.extendCurrentSelection(anchorNode.parentElement, selectionRange.startOffset, selection, range);\n                                }\n                            }\n                        }\n                        else if (anchorPageIndex === currentAnchorIndex) {\n                            if (currentAnchorIndex === focusPageIndex) {\n                                range.setStart(anchorNode, selectionRange.startOffset);\n                                range.setEnd(anchorNode, selectionRange.startOffset);\n                                selection.removeAllRanges();\n                                selection.addRange(range);\n                                range = document.createRange();\n                                selection.extend(focusNode, selectionRange.endOffset);\n                            }\n                            else {\n                                if (isBackward) {\n                                    this.extendCurrentSelection(focusNode.parentElement, selectionRange.endOffset, selection, range);\n                                }\n                                else {\n                                    range.setStart(focusNode, selectionRange.endOffset);\n                                    range.setEnd(selection.focusNode, selection.focusOffset);\n                                }\n                            }\n                        }\n                        else if (focusPageIndex === currentAnchorIndex) {\n                            if (isBackward) {\n                                selection.extend(selection.focusNode, selection.focusOffset);\n                            }\n                            else {\n                                range.setStart(selection.anchorNode, selection.anchorOffset);\n                                range.setEnd(selection.focusNode, selection.focusOffset);\n                            }\n                        }\n                        else if (anchorPageIndex > currentAnchorIndex) {\n                            var currentAnchorOffset = parseInt(selectionRange.startNode.split('_' + currentAnchorIndex + '_')[1], 10);\n                            var currentFocusOffset = parseInt(selectionRange.endNode.split('_' + currentAnchorIndex + '_')[1], 10);\n                            if (isBackward) {\n                                if (currentAnchorIndex !== this.selectionRangeArray[0].pageNumber) {\n                                    if (currentAnchorOffset < currentFocusOffset) {\n                                        this.extendCurrentSelection(anchorNode.parentElement, selectionRange.startOffset, selection, range);\n                                    }\n                                    else {\n                                        range.setStart(focusNode.parentElement, selectionRange.endOffset);\n                                        range.setEnd(selection.anchorNode, selection.anchorOffset);\n                                    }\n                                }\n                                else {\n                                    this.extendCurrentSelection(focusNode.parentElement, selectionRange.endOffset, selection, range);\n                                }\n                            }\n                            else {\n                                if (currentAnchorOffset < currentFocusOffset) {\n                                    range.setStart(anchorNode, selectionRange.startOffset);\n                                    range.setEnd(selection.focusNode, selection.focusOffset);\n                                }\n                                else {\n                                    range.setStart(focusNode, selectionRange.endOffset);\n                                    range.setEnd(selection.focusNode, selection.focusOffset);\n                                }\n                            }\n                        }\n                    }\n                }\n                else if (isNaN(anchorPageIndex)) {\n                    if (!selectionRange.isBackward) {\n                        range.setStart(anchorNode, selectionRange.startOffset);\n                        range.setEnd(focusNode, selectionRange.endOffset);\n                    }\n                    else {\n                        range.setStart(focusNode, selectionRange.endOffset);\n                        range.setEnd(anchorNode, selectionRange.startOffset);\n                    }\n                }\n            }\n            if (range.toString() !== '') {\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {boolean} isStich - It describes about the isStich value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.maintainSelectionOnScroll = function (pageNumber, isStich) {\n        var isSelectionAvailable = this.isSelectionAvailableOnScroll(pageNumber);\n        if (this.isTextSelection && !isSelectionAvailable) {\n            this.maintainSelection(pageNumber, isStich);\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {boolean} isStich - It describes about the isStich value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.maintainSelection = function (pageNumber, isStich) {\n        var selection = window.getSelection();\n        if (this.isTextSelection && (selection.type === 'Range' || (!selection.type && !selection.isCollapsed))) {\n            var anchorPageId = parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10);\n            var focusPageId = parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10);\n            if (isNaN(focusPageId) && selection.anchorNode !== null) {\n                var backward_1 = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n                if (!backward_1) {\n                    var lastChildNode = this.pdfViewerBase.pageContainer.lastChild;\n                    if (lastChildNode.classList.contains('e-pv-touch-select-drop')) {\n                        focusPageId = parseInt(lastChildNode.previousSibling.previousSibling.id.split('_pageDiv_')[1], 10);\n                    }\n                    else {\n                        focusPageId = parseInt(lastChildNode.id.split('_pageDiv_')[1], 10);\n                    }\n                }\n                else {\n                    focusPageId = parseInt(this.pdfViewerBase.pageContainer.firstChild.id.split('_pageDiv_')[1], 10);\n                }\n            }\n            var backward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n            if (this.isTouchSelection && pageNumber > focusPageId && pageNumber > anchorPageId) {\n                return;\n            }\n            if (anchorPageId === focusPageId) {\n                var selectionObject = null;\n                var selectionBounds = this.getSelectionBounds(selection.getRangeAt(0), pageNumber);\n                var selectionRectBounds = this.getSelectionRectangleBounds(selection.getRangeAt(0), pageNumber);\n                var anchorOffsetValue = (this.getNodeElementFromNode(selection.anchorNode).childNodes.length === 1) ?\n                    selection.anchorOffset : this.getCorrectOffset(selection.anchorNode, selection.anchorOffset);\n                var focusOffsetValue = (this.getNodeElementFromNode(selection.focusNode).childNodes.length === 1) ?\n                    selection.focusOffset : this.getCorrectOffset(selection.focusNode, selection.focusOffset);\n                selectionObject = {\n                    isBackward: backward, startNode: this.getNodeElementFromNode(selection.anchorNode).id,\n                    startOffset: anchorOffsetValue, endNode: this.getNodeElementFromNode(selection.focusNode).id,\n                    endOffset: focusOffsetValue, textContent: this.allTextContent, pageNumber: pageNumber, bound: selectionBounds,\n                    rectangleBounds: selectionRectBounds\n                };\n                this.pushSelectionRangeObject(selectionObject, pageNumber);\n            }\n            else {\n                var selectionObject = this.createRangeObjectOnScroll(pageNumber, anchorPageId, focusPageId);\n                if (selectionObject) {\n                    this.pushSelectionRangeObject(selectionObject, pageNumber);\n                    if (isStich) {\n                        this.stichSelection(backward, selection, pageNumber);\n                    }\n                }\n            }\n        }\n    };\n    TextSelection.prototype.getCorrectOffset = function (node, offset) {\n        var offsetValue = 0;\n        var parentElement = this.getNodeElementFromNode(node);\n        for (var i = 0; i < parentElement.childNodes.length; i++) {\n            if (parentElement.childNodes[parseInt(i.toString(), 10)] === node) {\n                offsetValue = offsetValue + offset;\n                break;\n            }\n            else {\n                offsetValue = offsetValue + parentElement.childNodes[parseInt(i.toString(), 10)].textContent.length;\n            }\n        }\n        return offsetValue;\n    };\n    TextSelection.prototype.pushSelectionRangeObject = function (selectionObject, pageNumber) {\n        if (this.isTouchSelection) {\n            var currentObject = this.selectionRangeArray.filter(function (obj) {\n                return (obj.pageNumber === pageNumber);\n            });\n            if (currentObject.length > 0) {\n                var currentObjectIndex = this.selectionRangeArray.indexOf(currentObject[0]);\n                this.selectionRangeArray.splice(currentObjectIndex, 1, selectionObject);\n                return;\n            }\n        }\n        var nextPageObject = this.selectionRangeArray.filter(function (obj) {\n            return (obj.pageNumber === (pageNumber + 1));\n        });\n        if (nextPageObject.length === 0) {\n            if (this.isTouchSelection && this.selectionRangeArray.length !== 0) {\n                var prevPageObject = this.selectionRangeArray.filter(function (obj) {\n                    return (obj.pageNumber === (pageNumber - 1));\n                });\n                if (prevPageObject.length !== 0) {\n                    var prevIndex = this.selectionRangeArray.indexOf(prevPageObject[0]);\n                    this.selectionRangeArray.splice(prevIndex + 1, 0, selectionObject);\n                }\n                else {\n                    var firstObject = this.selectionRangeArray[0];\n                    if (pageNumber < firstObject.pageNumber) {\n                        this.selectionRangeArray.splice(0, 0, selectionObject);\n                    }\n                    else {\n                        this.selectionRangeArray.push(selectionObject);\n                    }\n                }\n            }\n            else {\n                this.selectionRangeArray.push(selectionObject);\n            }\n        }\n        else {\n            var index = this.selectionRangeArray.indexOf(nextPageObject[0]);\n            this.selectionRangeArray.splice(index, 0, selectionObject);\n        }\n    };\n    TextSelection.prototype.extendCurrentSelection = function (element, offset, selection, range) {\n        var currentFocusOffset = selection.focusOffset;\n        var currentFocusElement = selection.focusNode.parentElement.id;\n        var focusPageId = isNaN(parseInt(currentFocusElement.split('_text_')[1], 10)) ? parseInt(selection.focusNode.id.split('_pageDiv_')[1], 10) : parseInt(currentFocusElement.split('_text_')[1], 10);\n        if (isNaN(parseInt(currentFocusElement.split('_text_')[1], 10))) {\n            currentFocusElement = this.pdfViewerBase.getElement('_textLayer_' + (focusPageId + 1)).firstChild.id;\n        }\n        range.setStart(element.childNodes[0], offset);\n        range.setEnd(element.childNodes[0], offset);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        selection.extend(document.getElementById(currentFocusElement).childNodes[0], currentFocusOffset);\n    };\n    TextSelection.prototype.stichSelection = function (backward, selection, pageNumber) {\n        var range = document.createRange();\n        var nextPageElement;\n        if (backward) {\n            nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber - 1));\n            if (nextPageElement) {\n                var lastElement = nextPageElement.lastChild;\n                if (lastElement) {\n                    this.extendCurrentSelection(lastElement, this.getTextLastLength(lastElement), selection, range);\n                }\n                else {\n                    nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber - 2));\n                    lastElement = nextPageElement.lastChild;\n                    this.extendCurrentSelection(lastElement, this.getTextLastLength(lastElement), selection, range);\n                }\n            }\n            else {\n                nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber + 1));\n                var lastElement = nextPageElement.firstChild;\n                this.extendCurrentSelection(lastElement, 0, selection, range);\n            }\n        }\n        else {\n            nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber + 1));\n            if (nextPageElement) {\n                var firstElement = nextPageElement.firstChild;\n                if (!firstElement) {\n                    nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (pageNumber + 2));\n                    firstElement = nextPageElement.firstChild;\n                    range.setStart(firstElement.childNodes[0], 0);\n                }\n                else {\n                    range.setStart(firstElement.childNodes[0], 0);\n                }\n                range.setEnd(selection.focusNode, selection.focusOffset);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n    };\n    /**\n     * @param {number} currentPageNumber - It describes about the current page number\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.textSelectionOnMouseWheel = function (currentPageNumber) {\n        this.isMouseLeaveSelection = true;\n        this.stichSelectionOnScroll(currentPageNumber);\n    };\n    /**\n     * @param {number} currentPageNumber - It describes about the current page number\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.stichSelectionOnScroll = function (currentPageNumber) {\n        var selection = window.getSelection();\n        if (this.isTextSelection) {\n            var anchorPageId = parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10);\n            var focusPageId = parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10);\n            var nextPageElement = void 0;\n            if (anchorPageId !== currentPageNumber && focusPageId !== currentPageNumber) {\n                var backward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n                if (!backward) {\n                    nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (currentPageNumber - 1));\n                    if (nextPageElement) {\n                        var lastElement = nextPageElement.lastChild;\n                        if (lastElement) {\n                            if (lastElement.childNodes[0]) {\n                                this.extendSelectionStich(lastElement.childNodes[0], this.getTextLastLength(lastElement), selection);\n                            }\n                            else {\n                                this.extendSelectionStich(lastElement, this.getTextLastLength(lastElement), selection);\n                            }\n                        }\n                        else {\n                            nextPageElement = this.pdfViewerBase.getElement('_textLayer_' + currentPageNumber);\n                            var lastElement_1 = nextPageElement.firstChild;\n                            this.extendSelectionStich(lastElement_1.childNodes[0], 0, selection);\n                        }\n                    }\n                }\n                else {\n                    nextPageElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + (currentPageNumber - 1));\n                    if (nextPageElement) {\n                        var lastElement = nextPageElement.firstChild;\n                        if (lastElement) {\n                            this.extendSelectionStich(lastElement.childNodes[0], 0, selection);\n                        }\n                    }\n                }\n            }\n            this.maintainSelectionArray();\n        }\n    };\n    TextSelection.prototype.extendSelectionStich = function (node, offset, selection) {\n        if (selection.extend) {\n            selection.extend(node, offset);\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {number} anchorPageId - It describes about the anchor page id\n     * @param {number} focusPageId - It describes about the focus page id\n     * @private\n     * @returns {ISelection} - ISelection\n     */\n    TextSelection.prototype.createRangeObjectOnScroll = function (pageNumber, anchorPageId, focusPageId) {\n        var selectionObject = null;\n        var selection = window.getSelection();\n        if (selection.anchorNode !== null) {\n            var backward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n            var firstElement = void 0;\n            var lastElement = void 0;\n            var startOffset = void 0;\n            var endOffset = void 0;\n            var element = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + pageNumber);\n            if (element.childNodes) {\n                if (!backward) {\n                    if (pageNumber === anchorPageId) {\n                        firstElement = this.getNodeElementFromNode(selection.anchorNode);\n                        lastElement = element.lastChild;\n                        startOffset = this.getCorrectOffset(selection.anchorNode, selection.anchorOffset);\n                        endOffset = this.getTextLastLength(lastElement);\n                    }\n                    else if (pageNumber > anchorPageId && pageNumber < focusPageId) {\n                        firstElement = element.firstChild;\n                        lastElement = element.lastChild;\n                        startOffset = 0;\n                        endOffset = this.getTextLastLength(lastElement);\n                    }\n                    else if (pageNumber === focusPageId) {\n                        firstElement = element.firstChild;\n                        var pageNumberIndex = this.getNodeElementFromNode(selection.focusNode).id.indexOf(focusPageId.toString());\n                        if (pageNumberIndex !== -1) {\n                            lastElement = this.getNodeElementFromNode(selection.focusNode);\n                            endOffset = this.getCorrectOffset(selection.focusNode, selection.focusOffset);\n                        }\n                        else {\n                            lastElement = document.getElementById(this.pdfViewer.element.id + '_textLayer_' + focusPageId).lastChild;\n                            endOffset = this.getTextLastLength(lastElement);\n                        }\n                        startOffset = 0;\n                    }\n                }\n                else {\n                    if (pageNumber === anchorPageId) {\n                        firstElement = this.getNodeElementFromNode(selection.anchorNode);\n                        lastElement = element.firstChild;\n                        startOffset = this.getCorrectOffset(selection.anchorNode, selection.anchorOffset);\n                        endOffset = 0;\n                    }\n                    else if (pageNumber < anchorPageId && pageNumber > focusPageId) {\n                        firstElement = element.firstChild;\n                        lastElement = element.lastChild;\n                        startOffset = 0;\n                        endOffset = this.getTextLastLength(lastElement);\n                    }\n                    else if (pageNumber === focusPageId) {\n                        firstElement = this.getNodeElementFromNode(selection.focusNode);\n                        lastElement = element.lastChild;\n                        startOffset = this.getCorrectOffset(selection.focusNode, selection.focusOffset);\n                        endOffset = this.getTextLastLength(lastElement);\n                    }\n                }\n                if (firstElement && lastElement) {\n                    var selectionRangeObject = this.getSelectionRangeObject(firstElement.id, startOffset, lastElement.id, endOffset, pageNumber);\n                    var selectionBound = this.getSelectionBounds(selectionRangeObject, pageNumber);\n                    var selectionRectBounds = this.getSelectionRectangleBounds(selectionRangeObject, pageNumber);\n                    return selectionObject = { isBackward: backward, startNode: firstElement.id, startOffset: startOffset,\n                        endNode: lastElement.id, endOffset: endOffset, textContent: this.allTextContent, pageNumber: pageNumber,\n                        bound: selectionBound, rectangleBounds: selectionRectBounds };\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return null;\n    };\n    TextSelection.prototype.getSelectionRangeObject = function (startNode, startOffset, endNode, endOffset, pageNumber) {\n        var startElement = document.getElementById(startNode);\n        var endElement = document.getElementById(endNode);\n        if (startElement.childNodes[0]) {\n            startElement = startElement.childNodes[0];\n        }\n        if (endElement.childNodes[0]) {\n            endElement = endElement.childNodes[0];\n        }\n        var currentAnchorOffset = parseInt(startNode.split('_' + pageNumber + '_')[1], 10);\n        var currentFocusOffset = parseInt(endNode.split('_' + pageNumber + '_')[1], 10);\n        var range = document.createRange();\n        if (currentAnchorOffset <= currentFocusOffset) {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n        }\n        else {\n            range.setStart(endElement, endOffset);\n            range.setEnd(startElement, startOffset);\n        }\n        return range;\n    };\n    TextSelection.prototype.getSelectionBounds = function (range, pageNumber) {\n        var startElement = this.getNodeElementFromNode(range.startContainer);\n        var endElement = this.getNodeElementFromNode(range.endContainer);\n        var bounds = null;\n        if (startElement !== endElement) {\n            var newStartRange = document.createRange();\n            var startRange = this.createRangeForSelection(range.startContainer, range.endContainer, range.startOffset, range.endOffset, newStartRange);\n            bounds = this.normalizeBounds(startRange.getBoundingClientRect(), pageNumber);\n        }\n        else {\n            bounds = this.normalizeBounds(range.getBoundingClientRect(), pageNumber);\n        }\n        return bounds;\n    };\n    TextSelection.prototype.getSelectionRectangleBounds = function (range, pageNumber) {\n        var selectionBounds = [];\n        var startElement = this.getNodeElementFromNode(range.startContainer);\n        var endElement = this.getNodeElementFromNode(range.endContainer);\n        var bounds = null;\n        var selectionTexts = [];\n        this.allTextContent = '';\n        if (startElement !== endElement) {\n            var startOffset = 0;\n            var endOffset = 0;\n            var currentId = 0;\n            var anchorPageId = this.pdfViewerBase.textLayer.getPageIndex(range.startContainer);\n            var anchorTextId = this.pdfViewerBase.textLayer.getTextIndex(range.startContainer, anchorPageId);\n            var focusPageId = this.pdfViewerBase.textLayer.getPageIndex(range.endContainer);\n            var focusTextId = this.pdfViewerBase.textLayer.getTextIndex(range.endContainer, focusPageId);\n            var textDivs = this.pdfViewerBase.getElement('_textLayer_' + focusPageId).childNodes;\n            if (pageNumber === anchorPageId) {\n                currentId = anchorTextId;\n            }\n            else {\n                currentId = 0;\n            }\n            for (var j = currentId; j < textDivs.length; j++) {\n                var textElement = textDivs[parseInt(j.toString(), 10)];\n                if (j > focusTextId) {\n                    break;\n                }\n                if (j === anchorTextId) {\n                    startOffset = range.startOffset;\n                }\n                else {\n                    startOffset = 0;\n                }\n                if (j === focusTextId) {\n                    endOffset = range.endOffset;\n                }\n                else {\n                    endOffset = textElement.textContent.length;\n                }\n                if (startOffset !== 0 || endOffset !== 0) {\n                    var newRange = document.createRange();\n                    for (var k = 0; k < textElement.childNodes.length; k++) {\n                        var node = textElement.childNodes[parseInt(k.toString(), 10)];\n                        newRange.setStart(node, startOffset);\n                        newRange.setEnd(node, endOffset);\n                    }\n                    var boundingRect = void 0;\n                    if (this.pdfViewerBase.clientSideRendering) {\n                        boundingRect = this.normalizeBounds(newRange.getBoundingClientRect(), pageNumber);\n                        var textRotate = 0;\n                        if (textElement && textElement.style.transform !== '') {\n                            if (textElement.style.transform.startsWith('rotate(90deg)')) {\n                                textRotate = 90;\n                            }\n                            else if (textElement.style.transform.startsWith('rotate(180deg)')) {\n                                textRotate = 180;\n                            }\n                            else if (textElement.style.transform.startsWith('rotate(-90deg)') || textElement.style.transform.startsWith('rotate(270deg)')) {\n                                textRotate = 270;\n                            }\n                            else {\n                                textRotate = 0;\n                            }\n                        }\n                        boundingRect.rotation = textRotate;\n                    }\n                    else {\n                        boundingRect = this.normalizeBounds(newRange.getBoundingClientRect(), pageNumber);\n                    }\n                    selectionBounds.push(boundingRect);\n                    var textselection = newRange.toString();\n                    selectionTexts.push(textselection);\n                    newRange.detach();\n                    if (textselection === '\\r\\n' || textselection === ' ') {\n                        if (j === focusTextId + 1) {\n                            break;\n                        }\n                    }\n                    else if (j === focusTextId) {\n                        break;\n                    }\n                }\n            }\n            for (var i = 0; i < selectionTexts.length; i++) {\n                var text = selectionTexts[parseInt(i.toString(), 10)];\n                // While copy and paste for space construct new line\n                if ((i !== 0 && text === ' ' && selectionTexts[i - 1].includes('\\r\\n')) || (i !== selectionTexts.length - 1 && selectionTexts[parseInt(i.toString(), 10)] === ' ' && selectionTexts[i + 1] === '\\r\\n')) {\n                    text = '';\n                }\n                if (text.slice(text.length - 2) !== '\\r\\n' || i === selectionTexts.length - 1) {\n                    this.allTextContent += text;\n                }\n                else {\n                    this.allTextContent += text;\n                }\n            }\n        }\n        else {\n            bounds = this.normalizeBounds(range.getBoundingClientRect(), pageNumber);\n            if (this.pdfViewerBase.clientSideRendering) {\n                var textRotate = 0;\n                if (startElement && startElement.style.transform !== '') {\n                    if (startElement.style.transform.startsWith('rotate(90deg)')) {\n                        textRotate = 90;\n                    }\n                    else if (startElement.style.transform.startsWith('rotate(180deg)')) {\n                        textRotate = 180;\n                    }\n                    else if (startElement.style.transform.startsWith('rotate(-90deg)') || startElement.style.transform.startsWith('rotate(270deg)')) {\n                        textRotate = 270;\n                    }\n                    else {\n                        textRotate = 0;\n                    }\n                }\n                bounds.rotation = textRotate;\n            }\n            this.allTextContent = range.toString();\n            selectionBounds.push(bounds);\n        }\n        return selectionBounds;\n    };\n    TextSelection.prototype.getAngle = function (rotation) {\n        var angle = 0;\n        if (rotation) {\n            switch (rotation) {\n                case 0:\n                    angle = 0;\n                    break;\n                case 1:\n                    angle = 90;\n                    break;\n                case 2:\n                    angle = 180;\n                    break;\n                case 3:\n                    angle = 270;\n                    break;\n            }\n        }\n        return angle;\n    };\n    TextSelection.prototype.getTextId = function (elementId) {\n        var index = elementId.lastIndexOf('_');\n        var divId = elementId.substring(index + 1, elementId.length);\n        return parseInt(divId, 10);\n    };\n    TextSelection.prototype.normalizeBounds = function (bound, pageNumber) {\n        var newBounds = null;\n        var currentPageElement = this.pdfViewerBase.getElement('_pageDiv_' + pageNumber);\n        if (this.pdfViewerBase.isMixedSizeDocument) {\n            var currentTextElement = this.pdfViewerBase.getElement('_textLayer_' + pageNumber);\n            if (currentTextElement) {\n                currentPageElement = currentTextElement;\n            }\n        }\n        var currentPageRect = currentPageElement.getBoundingClientRect();\n        newBounds = {\n            bottom: this.getMagnifiedValue(bound.bottom - currentPageRect.top), height: this.getMagnifiedValue(bound.height),\n            left: this.getMagnifiedValue(bound.left - currentPageRect.left), top: this.getMagnifiedValue(bound.top - currentPageRect.top),\n            right: this.getMagnifiedValue(bound.right - currentPageRect.left), width: this.getMagnifiedValue(bound.width)\n        };\n        return newBounds;\n    };\n    TextSelection.prototype.getMagnifiedValue = function (value) {\n        return value / this.pdfViewerBase.getZoomFactor();\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {IRectangle} - IRectangle\n     */\n    TextSelection.prototype.getCurrentSelectionBounds = function (pageNumber) {\n        var bound = null;\n        var ranges = this.selectionRangeArray;\n        for (var i = 0; i < ranges.length; i++) {\n            if (ranges[parseInt(i.toString(), 10)] !== null) {\n                if (pageNumber === ranges[parseInt(i.toString(), 10)].pageNumber) {\n                    bound = ranges[parseInt(i.toString(), 10)].bound;\n                }\n            }\n        }\n        return bound;\n    };\n    TextSelection.prototype.createRangeForSelection = function (start, end, startOffset, endOffset, range) {\n        range.setStart(start, startOffset);\n        range.setEnd(end, endOffset);\n        return range;\n    };\n    TextSelection.prototype.maintainSelectionArray = function () {\n        var _this = this;\n        if (this.selectionRangeArray.length !== 0) {\n            var selection = window.getSelection();\n            var isBackward = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n            var anchorPage = isNaN(parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10)) ? parseInt(selection.anchorNode.id.split('_pageDiv_')[1], 10) : parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10);\n            if (isNaN(anchorPage)) {\n                anchorPage = parseInt(selection.anchorNode.id.split('_text_')[1], 10);\n            }\n            var focusPage_1 = isNaN(parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10)) ? parseInt(selection.focusNode.id.split('_pageDiv_')[1], 10) : parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10);\n            if (isNaN(focusPage_1)) {\n                focusPage_1 = isNaN(parseInt(selection.focusNode.id.split('_text_')[1], 10)) ? parseInt(selection.focusNode.id.split('_textLayer_')[1], 10) : parseInt(selection.focusNode.id.split('_text_')[1], 10);\n            }\n            var arrayObject = [];\n            if (!isBackward) {\n                arrayObject = this.selectionRangeArray.filter(function (obj) {\n                    return (!((_this.selectionStartPage <= obj.pageNumber) && (obj.pageNumber < focusPage_1)));\n                });\n            }\n            else {\n                arrayObject = this.selectionRangeArray.filter(function (obj) {\n                    return (!((focusPage_1 < obj.pageNumber) && (obj.pageNumber <= _this.selectionStartPage)));\n                });\n            }\n            if (arrayObject.length > 0) {\n                for (var i = 0; i < arrayObject.length; i++) {\n                    var indexInArray = this.selectionRangeArray.indexOf(arrayObject[parseInt(i.toString(), 10)]);\n                    if (indexInArray !== -1) {\n                        this.selectionRangeArray.splice(indexInArray, 1);\n                    }\n                }\n                if (this.selectionRangeArray.length === 1) {\n                    if (this.selectionRangeArray[0].pageNumber === anchorPage || this.selectionRangeArray[0].pageNumber === focusPage_1) {\n                        arrayObject = [];\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.applySpanForSelection = function () {\n        var selection = window.getSelection();\n        if (selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset && !selection.isCollapsed) {\n            selection.removeAllRanges();\n        }\n        if (selection.anchorNode !== null &&\n            this.pdfViewerBase.viewerContainer.contains(this.getNodeElementFromNode(selection.anchorNode))) {\n            var isBackWardSelection = this.pdfViewerBase.textLayer.isBackWardSelection(selection);\n            var anchorPageId = void 0;\n            var focusPageId = void 0;\n            var anchorOffsetDiv = void 0;\n            var focusOffsetDiv = void 0;\n            var anchorOffset = void 0;\n            var focusOffset = void 0;\n            if (isBackWardSelection) {\n                anchorPageId = parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1], 10);\n                focusPageId = parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1], 10);\n                anchorOffsetDiv = parseInt(this.getNodeElementFromNode(selection.focusNode).id.split('_text_')[1].split('_')[1], 10);\n                focusOffsetDiv = parseInt(this.getNodeElementFromNode(selection.anchorNode).id.split('_text_')[1].split('_')[1], 10);\n                anchorOffset = selection.focusOffset;\n                focusOffset = selection.anchorOffset;\n            }\n            else {\n                var anchorElement = this.getNodeElementFromNode(selection.anchorNode);\n                var focusElement = this.getNodeElementFromNode(selection.focusNode);\n                anchorPageId = (anchorElement.id.indexOf('text_') !== -1) ? parseInt(anchorElement.id.split('text_')[1], 10) : parseInt(anchorElement.id.split('_textLayer_')[1], 10);\n                focusPageId = (focusElement.id.indexOf('text_') !== -1) ? parseInt(focusElement.id.split('text_')[1], 10) : parseInt(focusElement.id.split('_textLayer_')[1], 10);\n                var isFocusChanged = false;\n                if (this.isTouchSelection) {\n                    if (selection.focusNode === this.pdfViewerBase.pageContainer) {\n                        var lastChildNode = this.pdfViewerBase.pageContainer.lastChild;\n                        if (lastChildNode.classList.contains('e-pv-touch-select-drop')) {\n                            var lastPageDiv = lastChildNode.previousSibling.previousSibling;\n                            focusPageId = parseInt(lastPageDiv.id.split('_pageDiv_')[1], 10);\n                            focusElement = this.pdfViewerBase.getElement('_textLayer_' + focusPageId).lastChild;\n                            isFocusChanged = true;\n                        }\n                        else if (lastChildNode.classList.contains('e-pv-page-div')) {\n                            var lastPageDiv = lastChildNode;\n                            focusPageId = parseInt(lastPageDiv.id.split('_pageDiv_')[1], 10);\n                            focusElement = this.pdfViewerBase.getElement('_textLayer_' + focusPageId).lastChild;\n                            isFocusChanged = true;\n                        }\n                    }\n                }\n                if (anchorElement.classList.contains('e-pv-maintaincontent')) {\n                    anchorElement = this.getNodeElementFromNode(anchorElement);\n                    anchorPageId = parseInt(anchorElement.id.split('text_')[1], 10);\n                }\n                if (focusElement.classList.contains('e-pv-maintaincontent')) {\n                    focusElement = this.getNodeElementFromNode(focusElement);\n                    focusPageId = parseInt(focusElement.id.split('text_')[1], 10);\n                }\n                if (anchorPageId === focusPageId) {\n                    if (anchorElement.contains(focusElement)) {\n                        anchorElement = focusElement;\n                    }\n                    if (focusElement.contains(anchorElement)) {\n                        focusElement = anchorElement;\n                    }\n                }\n                anchorOffsetDiv = (anchorElement.id.split('text_')[1]) ? parseInt(anchorElement.id.split('text_')[1].split('_')[1], 10) : null;\n                focusOffsetDiv = (focusElement.id.split('text_')[1]) ? parseInt(focusElement.id.split('text_')[1].split('_')[1], 10) : null;\n                anchorOffsetDiv = isNaN(anchorOffsetDiv) ? focusOffsetDiv : anchorOffsetDiv;\n                focusOffsetDiv = isNaN(focusOffsetDiv) ? anchorOffsetDiv : focusOffsetDiv;\n                anchorOffset = selection.anchorOffset;\n                focusOffset = !isFocusChanged ? selection.focusOffset : focusElement.textContent.length;\n            }\n            if (this.pdfViewerBase.checkIsNormalText()) {\n                selection.removeAllRanges();\n                this.pdfViewerBase.textLayer.clearDivSelection();\n                this.pdfViewerBase.textLayer.applySpanForSelection(anchorPageId, focusPageId, anchorOffsetDiv, focusOffsetDiv, anchorOffset, focusOffset);\n            }\n            if (this.pdfViewer.textSearchModule) {\n                this.pdfViewer.textSearchModule.searchAfterSelection();\n            }\n        }\n    };\n    /**\n     * @param {TouchEvent} event - It describes about the event\n     * @param {number} x - It describes about the X value\n     * @param {number} y - It describes about the Y value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.initiateTouchSelection = function (event, x, y) {\n        if (this.pdfViewerBase.isShapeBasedAnnotationsEnabled()) {\n            if (this.pdfViewer.selectedItems.annotations.length > 0) {\n                this.pdfViewer.clearSelection(this.pdfViewer.selectedItems.annotations[0].pageIndex);\n            }\n        }\n        var element = event.target;\n        var belowElements = document.elementsFromPoint(event.touches[0].clientX, event.touches[0].clientY);\n        if (belowElements.length !== 0) {\n            if (belowElements[0].classList.contains('e-pv-hyperlink') && belowElements[1].classList.contains('e-pv-text')) {\n                element = belowElements[1];\n            }\n        }\n        var pageNumber = parseFloat(element.id.split('_')[2]);\n        this.pdfViewer.fireTextSelectionStart(pageNumber + 1);\n        this.selectAWord(element, x, y, true);\n        this.createTouchSelectElement(event);\n        this.maintainSelectionOnZoom(true, false);\n        this.fireTextSelectEnd();\n        this.applySpanForSelection();\n    };\n    TextSelection.prototype.selectTextByTouch = function (element, x, y, isForwardSelection, target, isCloserMovement) {\n        var isTextSelected = false;\n        if (element.nodeType === element.TEXT_NODE) {\n            var rangeObject = element.ownerDocument.createRange();\n            var selection = window.getSelection();\n            rangeObject.selectNodeContents(element);\n            var currentPosition = 0;\n            var endPosition = rangeObject.endOffset;\n            while (currentPosition < endPosition) {\n                rangeObject.setStart(element, currentPosition);\n                rangeObject.setEnd(element, currentPosition + 1);\n                var rangeBounds = rangeObject.getBoundingClientRect();\n                if (rangeBounds.left <= x && rangeBounds.right >= x && rangeBounds.top <= y && rangeBounds.bottom >= y) {\n                    if (selection.anchorNode !== null) {\n                        if (isForwardSelection) {\n                            rangeObject.setStart(selection.anchorNode, selection.anchorOffset);\n                        }\n                        rangeObject = this.setTouchSelectionStartPosition(selection, rangeObject, isForwardSelection, target, element, currentPosition, isCloserMovement);\n                        if (isForwardSelection) {\n                            selection.extend(element, currentPosition);\n                        }\n                        isTextSelected = true;\n                    }\n                    rangeObject.detach();\n                    return isTextSelected;\n                }\n                currentPosition += 1;\n            }\n        }\n        else {\n            for (var i = 0; i < element.childNodes.length; i++) {\n                var range = element.childNodes[parseInt(i.toString(), 10)].ownerDocument.createRange();\n                range.selectNodeContents(element.childNodes[parseInt(i.toString(), 10)]);\n                var rangeBounds = range.getBoundingClientRect();\n                if (rangeBounds.left <= x && rangeBounds.right >= x && rangeBounds.top <= y && rangeBounds.bottom >= y) {\n                    range.detach();\n                    return (this.selectTextByTouch(element.childNodes[parseInt(i.toString(), 10)], x, y, isForwardSelection, target, isCloserMovement));\n                }\n                else {\n                    range.detach();\n                }\n            }\n        }\n        return isTextSelected;\n    };\n    TextSelection.prototype.setTouchSelectionStartPosition = function (selection, range, isForwardSelection, target, element, currentPosition, isCloserMovement) {\n        if (isForwardSelection) {\n            if (target === 'left') {\n                var startNode = this.getTouchFocusElement(selection, true);\n                range.setStart(startNode.focusNode, startNode.focusOffset);\n                range.setEnd(element, currentPosition);\n                this.selectionAnchorTouch = { anchorNode: range.endContainer.parentElement.id, anchorOffset: range.endOffset };\n            }\n            else if (target === 'right') {\n                var startNode = this.getTouchAnchorElement(selection, false);\n                range.setStart(startNode.anchorNode, startNode.anchorOffset);\n                range.setEnd(element, currentPosition);\n                this.selectionFocusTouch = { focusNode: range.endContainer.parentElement.id, focusOffset: range.endOffset };\n            }\n        }\n        else {\n            if (target === 'left') {\n                if (!isCloserMovement) {\n                    var startNode = this.getTouchFocusElement(selection, false);\n                    range.setStart(element, currentPosition);\n                    range.setEnd(startNode.focusNode, startNode.focusOffset);\n                    if (range.toString() === '') {\n                        range.setStart(element, currentPosition);\n                        range.setEnd(selection.focusNode, selection.focusOffset);\n                    }\n                    this.selectionAnchorTouch = { anchorNode: range.startContainer.parentElement.id, anchorOffset: range.startOffset };\n                }\n                else {\n                    range.setStart(element, currentPosition);\n                    range.setEnd(selection.focusNode, selection.focusOffset);\n                    this.selectionAnchorTouch = { anchorNode: range.startContainer.parentElement.id, anchorOffset: range.startOffset };\n                }\n            }\n            else if (target === 'right') {\n                var startNode = this.getTouchAnchorElement(selection, true);\n                range.setStart(element, currentPosition);\n                range.setEnd(startNode.anchorNode, startNode.anchorOffset);\n                if (range.toString() === '') {\n                    range.setStart(startNode.anchorNode, startNode.anchorOffset);\n                    range.setEnd(element, currentPosition);\n                }\n                this.selectionFocusTouch = { focusNode: range.startContainer.parentElement.id, focusOffset: range.startOffset };\n            }\n        }\n        selection.removeAllRanges();\n        selection.addRange(range);\n        return range;\n    };\n    TextSelection.prototype.getTouchAnchorElement = function (selection, isCurrentFocus) {\n        var element = document.getElementById(this.selectionAnchorTouch.anchorNode.toString());\n        var startNode = null;\n        var offset = 0;\n        if (element) {\n            startNode = element.childNodes[0];\n            offset = parseInt(this.selectionAnchorTouch.anchorOffset.toString(), 10);\n        }\n        else {\n            if (isCurrentFocus) {\n                startNode = selection.focusNode;\n                offset = selection.focusOffset;\n            }\n            else {\n                startNode = selection.anchorNode;\n                offset = selection.anchorOffset;\n            }\n        }\n        return { anchorNode: startNode, anchorOffset: offset };\n    };\n    TextSelection.prototype.getTouchFocusElement = function (selection, isCurrentAnchor) {\n        var element = document.getElementById(this.selectionFocusTouch.focusNode.toString());\n        var startNode = null;\n        var offset = 0;\n        if (element) {\n            startNode = element.childNodes[0];\n            offset = parseInt(this.selectionFocusTouch.focusOffset.toString(), 10);\n        }\n        else {\n            if (isCurrentAnchor) {\n                startNode = selection.anchorNode;\n                offset = selection.anchorOffset;\n            }\n            else {\n                startNode = selection.focusNode;\n                offset = selection.focusOffset;\n            }\n        }\n        return { focusNode: startNode, focusOffset: offset };\n    };\n    TextSelection.prototype.createTouchSelectElement = function (event) {\n        var topMargin = 10;\n        var dropTopAboveTwoHundred = 8;\n        var dropTopAboveHundard = 4;\n        this.isTouchSelection = true;\n        var selection = window.getSelection();\n        if (selection.type === 'Range') {\n            this.dropDivElementLeft = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_touchSelect_droplet_left', className: 'e-pv-touch-select-drop' });\n            this.dropDivElementRight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_touchSelect_droplet_right', className: 'e-pv-touch-select-drop' });\n            this.dropElementLeft = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-touch-ellipse' });\n            this.dropElementLeft.style.transform = 'rotate(0deg)';\n            this.dropDivElementLeft.appendChild(this.dropElementLeft);\n            this.dropElementRight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-pv-touch-ellipse' });\n            this.dropElementRight.style.transform = 'rotate(-90deg)';\n            this.dropElementRight.style.margin = '0 9px 0 0';\n            this.dropDivElementRight.appendChild(this.dropElementRight);\n            this.pdfViewerBase.pageContainer.appendChild(this.dropDivElementLeft);\n            this.pdfViewerBase.pageContainer.appendChild(this.dropDivElementRight);\n            var range = selection.getRangeAt(0);\n            var rangePosition = range.getBoundingClientRect();\n            var dropElementRect = this.dropDivElementLeft.getBoundingClientRect();\n            var pageTopValue = this.pdfViewerBase.pageSize[this.pdfViewerBase.currentPageNumber - 1].top;\n            var viewerLeftPosition = this.pdfViewerBase.viewerContainer.getBoundingClientRect().left;\n            var topClientValue = this.getClientValueTop(rangePosition.top, this.pdfViewerBase.currentPageNumber - 1);\n            var dropElementTop = this.pdfViewerBase.getZoomFactor() > 2 ?\n                dropTopAboveTwoHundred : this.pdfViewerBase.getZoomFactor() > 1 ? dropTopAboveHundard : 0;\n            var topPositionValue = (topClientValue - dropElementTop) + pageTopValue * this.pdfViewerBase.getZoomFactor() + (dropElementRect.height / 2) * this.pdfViewerBase.getZoomFactor() + 'px';\n            this.dropDivElementLeft.style.top = topPositionValue;\n            this.dropDivElementLeft.style.left = rangePosition.left - (viewerLeftPosition + (dropElementRect.width)) + this.pdfViewerBase.viewerContainer.scrollLeft + 'px';\n            this.dropDivElementRight.style.top = topPositionValue;\n            this.dropDivElementRight.style.left = rangePosition.left + rangePosition.width - viewerLeftPosition + this.pdfViewerBase.viewerContainer.scrollLeft + 'px';\n            var currentPageLeft = this.pdfViewerBase.getElement('_pageDiv_' + (this.pdfViewerBase.currentPageNumber - 1)).getBoundingClientRect().left;\n            var currentRangeLeft = rangePosition.left - currentPageLeft;\n            this.topStoreLeft = { pageTop: pageTopValue, topClientValue: this.getMagnifiedValue(topClientValue),\n                pageNumber: this.pdfViewerBase.currentPageNumber - 1, left: this.getMagnifiedValue(currentRangeLeft),\n                isHeightNeeded: true };\n            this.topStoreRight = { pageTop: pageTopValue, topClientValue: this.getMagnifiedValue(topClientValue),\n                pageNumber: this.pdfViewerBase.currentPageNumber - 1, left: this.getMagnifiedValue(currentRangeLeft +\n                    rangePosition.width), isHeightNeeded: true };\n            this.dropDivElementLeft.addEventListener('touchstart', this.onLeftTouchSelectElementTouchStart);\n            this.dropDivElementLeft.addEventListener('touchmove', this.onLeftTouchSelectElementTouchMove);\n            this.dropDivElementLeft.addEventListener('touchend', this.onLeftTouchSelectElementTouchEnd);\n            this.dropDivElementRight.addEventListener('touchstart', this.onRightTouchSelectElementTouchStart);\n            this.dropDivElementRight.addEventListener('touchmove', this.onRightTouchSelectElementTouchMove);\n            this.dropDivElementRight.addEventListener('touchend', this.onRightTouchSelectElementTouchEnd);\n            this.calculateContextMenuPosition((event.touches[0].clientY + this.dropDivElementLeft.clientHeight + topMargin), (parseInt(this.dropDivElementLeft.style.left, 10) - topMargin));\n        }\n    };\n    /**\n     * @param {any} top - It describes about the top value\n     * @param {any} left - It describes about the left value\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.calculateContextMenuPosition = function (top, left) {\n        var _this = this;\n        var topMargin = 10;\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            var contextTop = top - this.contextMenuHeight;\n            if (contextTop < this.pdfViewerBase.toolbarHeight) {\n                top = top + this.contextMenuHeight;\n            }\n            else {\n                top = contextTop;\n            }\n            if ((top + this.contextMenuHeight) > window.innerHeight) {\n                top = top - this.contextMenuHeight;\n            }\n        }\n        if (this.pdfViewer.contextMenuSettings.contextMenuAction === 'MouseUp') {\n            left = left - 50;\n        }\n        // eslint-disable-next-line\n        var proxy = this;\n        setTimeout(function () {\n            var length = document.getElementsByClassName('e-pv-maintaincontent').length;\n            var selectedContent = document.getElementsByClassName('e-pv-maintaincontent')[length - 1] ? document.getElementsByClassName('e-pv-maintaincontent')[length - 1].getBoundingClientRect() : null;\n            if (selectedContent) {\n                if ((selectedContent.bottom + proxy.contextMenuHeight + proxy.pdfViewerBase.toolbarHeight) > window.innerHeight) {\n                    top = selectedContent.top - (proxy.contextMenuHeight + proxy.pdfViewerBase.toolbarHeight - topMargin);\n                }\n                else {\n                    top = proxy.dropDivElementRight ? (selectedContent.bottom + proxy.dropDivElementRight.clientHeight) :\n                        selectedContent.bottom;\n                }\n                left = selectedContent.right;\n                var toolbarModule = _this.pdfViewer.toolbarModule ? _this.pdfViewer.toolbarModule.annotationToolbarModule : 'null';\n                if (!toolbarModule || !toolbarModule.textMarkupToolbarElement ||\n                    toolbarModule.textMarkupToolbarElement.children.length === 0) {\n                    proxy.pdfViewerBase.contextMenuModule.open(top, left, proxy.pdfViewerBase.viewerContainer);\n                }\n            }\n        });\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.initiateSelectionByTouch = function () {\n        this.pdfViewerBase.textLayer.clearDivSelection();\n        this.pdfViewerBase.contextMenuModule.close();\n        var lowerPageIndex = this.pdfViewerBase.currentPageNumber - 3;\n        lowerPageIndex = (lowerPageIndex < 0) ? 0 : lowerPageIndex;\n        var higherPageIndex = this.pdfViewer.currentPageNumber + 1;\n        higherPageIndex = (higherPageIndex < (this.pdfViewerBase.pageCount - 1)) ? higherPageIndex : (this.pdfViewerBase.pageCount - 1);\n        for (var i = lowerPageIndex; i <= higherPageIndex; i++) {\n            var textLayer = this.pdfViewerBase.getElement('_textLayer_' + i);\n            if (textLayer) {\n                if (textLayer.childNodes !== null) {\n                    this.applySelectionMouseScroll(i);\n                }\n            }\n        }\n        if (this.selectionRangeArray.length > 0) {\n            this.pdfViewer.fireTextSelectionStart(this.selectionRangeArray[0].pageNumber + 1);\n        }\n    };\n    TextSelection.prototype.terminateSelectionByTouch = function (event) {\n        var topMargin = 10;\n        this.maintainSelectionOnZoom(true, false);\n        this.applySpanForSelection();\n        if (this.pdfViewerBase.getTextMarkupAnnotationMode()) {\n            this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                drawTextMarkupAnnotations(this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode);\n        }\n        else {\n            this.fireTextSelectEnd();\n            var top_4 = event.changedTouches[0].clientY;\n            var spanBounds = this.getSpanBounds();\n            if (spanBounds) {\n                if ((spanBounds.bottom + this.contextMenuHeight + this.pdfViewerBase.toolbarHeight) > window.innerHeight) {\n                    top_4 = spanBounds.top - (this.contextMenuHeight + this.pdfViewerBase.toolbarHeight);\n                }\n                this.pdfViewerBase.contextMenuModule.open(top_4, event.changedTouches[0].clientX, this.pdfViewerBase.viewerContainer);\n            }\n        }\n    };\n    TextSelection.prototype.getSpanBounds = function () {\n        var spanWidth = [];\n        var spanRight = [];\n        var spanLeft = [];\n        var spanHeight = 0;\n        var selectedContent = document.getElementsByClassName('e-pv-maintaincontent');\n        if (selectedContent.length > 0) {\n            for (var i = 0; i < selectedContent.length; i++) {\n                var spanElement = selectedContent[parseInt(i.toString(), 10)].getBoundingClientRect();\n                spanHeight = spanHeight + spanElement.height;\n                spanWidth.push(spanElement.width);\n                spanRight.push(spanElement.right);\n                spanLeft.push(spanElement.left);\n            }\n            return { top: selectedContent[0].getBoundingClientRect().top,\n                bottom: selectedContent[selectedContent.length - 1].getBoundingClientRect().bottom,\n                left: Math.min.apply(null, spanLeft), right: Math.max.apply(null, spanRight),\n                width: Math.max.apply(null, spanWidth), height: spanHeight };\n        }\n    };\n    TextSelection.prototype.getNodeElement = function (range, touchX, touchY, event, nodeElement) {\n        if (document.caretRangeFromPoint) {\n            range = document.caretRangeFromPoint(touchX, touchY);\n            nodeElement = this.onTouchElementScroll(range, nodeElement, touchY, event);\n        }\n        else if (document.caretPositionFromPoint) {\n            var start = document.caretPositionFromPoint(touchX, touchY);\n            var end = document.caretPositionFromPoint(touchX, touchY);\n            range = document.createRange();\n            range.setStart(start.offsetNode, start.offset);\n            range.setEnd(end.offsetNode, end.offset);\n            nodeElement = this.onTouchElementScroll(range, nodeElement, touchY, event);\n        }\n        return nodeElement;\n    };\n    TextSelection.prototype.isTouchedWithinContainer = function (event) {\n        var elements = document.elementsFromPoint(event.touches[0].clientX, event.touches[0].clientY);\n        var isTouchedWithinContainer = false;\n        if (elements.length !== 0) {\n            isTouchedWithinContainer = true;\n        }\n        return isTouchedWithinContainer;\n    };\n    TextSelection.prototype.onTouchElementScroll = function (range, nodeElement, touchY, event) {\n        var viewerScrollTop = this.pdfViewerBase.viewerContainer.scrollTop;\n        if (range != null) {\n            nodeElement = range.startContainer;\n            var isScrollBar = this.isScrolledOnScrollBar(event);\n            if (!this.pdfViewerBase.viewerContainer.contains(nodeElement.parentElement) || isScrollBar) {\n                if (touchY < this.pdfViewerBase.viewerContainer.clientHeight) {\n                    this.pdfViewerBase.viewerContainer.scrollTop = viewerScrollTop - 30;\n                }\n                else {\n                    this.pdfViewerBase.viewerContainer.scrollTop = viewerScrollTop + 30;\n                }\n            }\n        }\n        else {\n            if (touchY < this.pdfViewerBase.viewerContainer.clientHeight) {\n                this.pdfViewerBase.viewerContainer.scrollTop = viewerScrollTop - 30;\n            }\n            else {\n                this.pdfViewerBase.viewerContainer.scrollTop = viewerScrollTop + 30;\n            }\n        }\n        return nodeElement;\n    };\n    TextSelection.prototype.isCloserTouchScroll = function (currentDifference) {\n        var isForwardMovement = false;\n        if (this.previousScrollDifference > currentDifference) {\n            isForwardMovement = true;\n        }\n        return isForwardMovement;\n    };\n    TextSelection.prototype.getClientValueTop = function (clientValue, pageNumber) {\n        if (this.pdfViewerBase.getElement('_pageDiv_' + pageNumber)) {\n            return clientValue - this.pdfViewerBase.getElement('_pageDiv_' + pageNumber).getBoundingClientRect().top;\n        }\n        else {\n            return clientValue;\n        }\n    };\n    TextSelection.prototype.isScrolledOnScrollBar = function (event) {\n        var isScrollBar = false;\n        if (event.touches && (this.pdfViewerBase.viewerContainer.clientHeight + this.pdfViewerBase.viewerContainer.offsetTop) <\n            event.touches[0].clientY && event.touches[0].clientY < (this.pdfViewerBase.viewerContainer.offsetHeight +\n            this.pdfViewerBase.viewerContainer.offsetTop)) {\n            isScrollBar = true;\n        }\n        return isScrollBar;\n    };\n    TextSelection.prototype.getTextLastLength = function (element) {\n        if (element) {\n            return element.textContent.length;\n        }\n        else {\n            return 0;\n        }\n    };\n    TextSelection.prototype.getNodeElementFromNode = function (node) {\n        if (node.parentElement) {\n            return node.parentElement;\n        }\n        else {\n            return node.parentNode;\n        }\n    };\n    /**\n     * Copy the selected text in the PDF Document.\n     *\n     * @returns {void}\n     */\n    TextSelection.prototype.copyText = function () {\n        var selectionText = '';\n        this.maintainSelectionOnZoom(true, false);\n        if (this.selectionRangeArray.length > 0) {\n            for (var i = 0; i < this.selectionRangeArray.length; i++) {\n                selectionText += this.selectionRangeArray[parseInt(i.toString(), 10)].textContent;\n            }\n        }\n        if (selectionText.length > 0) {\n            if (this.pdfViewer.annotation) {\n                this.pdfViewer.annotation.isShapeCopied = false;\n            }\n            var textArea = document.createElement('textarea');\n            textArea.contentEditable = 'true';\n            textArea.textContent = selectionText;\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.freeTextAnnotationModule) {\n                this.pdfViewer.annotation.freeTextAnnotationModule.selectedText = selectionText;\n            }\n            textArea.style.position = 'fixed';\n            document.body.appendChild(textArea);\n            textArea.select();\n            try {\n                document.execCommand('copy');\n            }\n            catch (ex) {\n                console.warn('Copy to clipboard failed.', ex);\n            }\n            finally {\n                if (textArea) {\n                    document.body.removeChild(textArea);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSelection.prototype.destroy = function () {\n        this.clear();\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    TextSelection.prototype.getModuleName = function () {\n        return 'TextSelection';\n    };\n    return TextSelection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-selection/text-selection.js?");

/***/ })

}]);