"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_base_data_js-7382a57c"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/data.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getData: () => (/* binding */ getData),\n/* harmony export */   getModel: () => (/* binding */ getModel),\n/* harmony export */   getValueFromFormat: () => (/* binding */ getValueFromFormat),\n/* harmony export */   processIdx: () => (/* binding */ processIdx)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n\n\n/**\n * Update data source to Sheet and returns Sheet\n *\n * @param {Workbook} context - Specifies the context.\n * @param {string} address - Specifies the address.\n * @param {boolean} columnWiseData - Specifies the bool value.\n * @param {boolean} valueOnly - Specifies the valueOnly.\n * @param {number[]} frozenIndexes - Specifies the freeze row and column start indexes, if it is scrolled.\n * @param {boolean} filterDialog - Specifies the bool value.\n * @param {string} formulaCellRef - Specifies the formulaCellRef.\n * @param {number} idx - Specifies the idx.\n * @param {boolean} skipHiddenRows - Specifies the skipHiddenRows.\n * @param {string} commonAddr - Specifies the common address for the address parameter specified with list of range separated by ','.\n * @param {number} dateValueForSpecificColIdx - Specify the dateValueForSpecificColIdx.\n * @param {Object} dateColData - Specify the dateColData.\n * @returns {Promise<Map<string, CellModel> | Object[]>} - To get the data\n * @hidden\n */\nfunction getData(context, address, columnWiseData, valueOnly, frozenIndexes, filterDialog, formulaCellRef, idx, skipHiddenRows, commonAddr, dateValueForSpecificColIdx, dateColData) {\n    if (skipHiddenRows === void 0) { skipHiddenRows = true; }\n    return new Promise(function (resolve) {\n        resolve((function () {\n            var sheetIdx;\n            var lastIndex = address.lastIndexOf('!');\n            if (lastIndex > -1) {\n                sheetIdx = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(context, address.substring(0, lastIndex));\n                address = address.substring(lastIndex + 1);\n            }\n            else {\n                sheetIdx = context.activeSheetIndex;\n            }\n            var sheet = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(context, sheetIdx);\n            var indexes = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getIndexesFromAddress)(commonAddr || address);\n            var args = {\n                sheet: sheet, indexes: indexes, formulaCellRef: formulaCellRef, sheetIndex: idx,\n                promise: new Promise(function (resolve) { resolve((function () { })()); })\n            };\n            context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.updateSheetFromDataSource, args);\n            return args.promise.then(function () {\n                var i;\n                var row;\n                var data;\n                var sRow = indexes[0];\n                var frozenRow = context.frozenRowCount(sheet);\n                var frozenCol = context.frozenColCount(sheet);\n                var isDateCol = !!dateColData;\n                if (columnWiseData) {\n                    data = [];\n                    var index_1;\n                    var cells_1;\n                    var parsedNumVal_1;\n                    var key_1;\n                    var cellProp_1;\n                    var localeObj_1;\n                    var intl_1;\n                    var autoDetectFormatFn_1;\n                    if (valueOnly) {\n                        localeObj_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getNumericObject)(context.locale);\n                        intl_1 = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.Internationalization(context.locale);\n                    }\n                    else {\n                        autoDetectFormatFn_1 = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getAutoDetectFormatParser)(context);\n                    }\n                    address.split(',').forEach(function (addr, addrIdx) {\n                        indexes = (0,_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(addr);\n                        index_1 = 0;\n                        sRow = indexes[0];\n                        while (sRow <= indexes[2]) {\n                            cells_1 = data[index_1] || {};\n                            row = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getRow)(sheet, sRow);\n                            i = indexes[1];\n                            while (i <= indexes[3]) {\n                                if (skipHiddenRows && (0,_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenRow)(sheet, sRow) && !(filterDialog && (0,_index__WEBPACK_IMPORTED_MODULE_0__.isFilterHidden)(sheet, sRow))) {\n                                    sRow++;\n                                    continue;\n                                }\n                                key_1 = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getColumnHeaderText)(i + 1);\n                                var cell = row ? (0,_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(sRow, i, sheet) : null;\n                                if (valueOnly) {\n                                    if (cell && (cell.value || cell.value === 0)) {\n                                        if (cell.formattedText && cell.format && !cell.format.includes('*')) {\n                                            if ((0,_index__WEBPACK_IMPORTED_MODULE_0__.isCustomDateTime)(cell.format, false)) {\n                                                cells_1[key_1] = (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.intToDate)(cell.value);\n                                            }\n                                            else {\n                                                cells_1[key_1] = cell.formattedText.toString().trim();\n                                            }\n                                        }\n                                        else {\n                                            cells_1[key_1] = getValueFromFormat(context, cell, sRow, i, false, intl_1);\n                                        }\n                                        cellProp_1 = cell.value;\n                                        if (typeof cellProp_1 === 'string') {\n                                            if (localeObj_1.decimal !== '.' && cellProp_1.includes(localeObj_1.decimal)) {\n                                                parsedNumVal_1 = cellProp_1.replace(localeObj_1.decimal, '.');\n                                                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(parsedNumVal_1)) {\n                                                    cellProp_1 = parseFloat(parsedNumVal_1);\n                                                }\n                                            }\n                                            else if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cellProp_1)) {\n                                                cellProp_1 = parseFloat(cellProp_1);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        cells_1[key_1] = '';\n                                        cellProp_1 = null;\n                                    }\n                                    cells_1[key_1 + \"_value\"] = cellProp_1;\n                                }\n                                else {\n                                    if ((cell && (cell.formula || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cell.value))) || Object.keys(cells_1).length) {\n                                        if (i === dateValueForSpecificColIdx) {\n                                            cellProp_1 = { value: getValueFromFormat(context, cell, sRow, i, true) };\n                                            if (cellProp_1.value && typeof cellProp_1.value === 'string') {\n                                                if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cellProp_1.value) && !cell.value.toString().includes('\\n')) {\n                                                    if (!cell.format || cell.format !== '@') {\n                                                        cellProp_1.value = parseFloat(cellProp_1.value);\n                                                    }\n                                                }\n                                                else if (!cell.format) {\n                                                    autoDetectFormatFn_1(cell);\n                                                    if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cell.value) && !cell.value.toString().includes('\\n')) {\n                                                        cellProp_1.value = parseFloat(cell.value);\n                                                    }\n                                                }\n                                            }\n                                            cells_1[key_1] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.extend)({}, cell, cellProp_1);\n                                        }\n                                        else {\n                                            cells_1[key_1] = cell;\n                                        }\n                                    }\n                                    if (cell && ((!!cell.rowSpan && cell.rowSpan !== 1) || (!!cell.colSpan && cell.colSpan !== 1))) {\n                                        data = [{ throwMergeAlert: true }];\n                                        return;\n                                    }\n                                }\n                                if (i === indexes[3] && Object.keys(cells_1).length) {\n                                    cells_1['__rowIndex'] = (sRow + 1).toString();\n                                    data[index_1] = cells_1;\n                                    if (isDateCol && addrIdx === 0 && !(0,_index__WEBPACK_IMPORTED_MODULE_0__.isFilterHidden)(sheet, sRow)) {\n                                        dateColData.push(cells_1);\n                                    }\n                                    index_1++;\n                                }\n                                i++;\n                            }\n                            sRow++;\n                        }\n                    });\n                }\n                else {\n                    data = new Map();\n                    var checkFrozenIdx = !!(!valueOnly && frozenIndexes && frozenIndexes.length);\n                    while (sRow <= indexes[2]) {\n                        if (checkFrozenIdx && sRow >= frozenRow && sRow < frozenIndexes[0]) {\n                            sRow = frozenIndexes[0];\n                            continue;\n                        }\n                        if (!valueOnly && (0,_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenRow)(sheet, sRow)) {\n                            sRow++;\n                            continue;\n                        }\n                        row = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getRow)(sheet, sRow);\n                        i = indexes[1];\n                        while (i <= indexes[3]) {\n                            var eventArgs = { cell: (0,_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(sRow, i, sheet), address: (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getCellAddress)(sRow, i),\n                                rowIndex: sRow, colIndex: i };\n                            context.trigger(_common_index__WEBPACK_IMPORTED_MODULE_1__.queryCellInfo, eventArgs);\n                            var cellObj = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getCell)(sRow, i, sheet, false, true);\n                            if (cellObj.formula && cellObj.formula.toUpperCase().includes('UNIQUE')) {\n                                context.notify(_index__WEBPACK_IMPORTED_MODULE_0__.calculateFormula, { cell: cellObj, rowIdx: sRow, colIdx: i, sheetIndex: context.activeSheetIndex,\n                                    address: eventArgs.address });\n                            }\n                            if (cellObj.colSpan > 1 && cellObj.rowSpan > 1) {\n                                var cell = void 0;\n                                for (var j = sRow, len = sRow + cellObj.rowSpan; j < len; j++) {\n                                    for (var k = i, len_1 = i + cellObj.colSpan; k < len_1; k++) {\n                                        if (j === sRow && k === i) {\n                                            continue;\n                                        }\n                                        cell = new Object();\n                                        if (j !== sRow) {\n                                            cell.rowSpan = sRow - j;\n                                        }\n                                        if (k !== i) {\n                                            cell.colSpan = i - k;\n                                        }\n                                        if (sheet.rows[j] && sheet.rows[j].cells &&\n                                            sheet.rows[j].cells[k]) {\n                                            delete sheet.rows[j].cells[k].value;\n                                            delete sheet.rows[j].cells[k].formula;\n                                        }\n                                        (0,_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(j, k, sheet, cell, true);\n                                    }\n                                }\n                            }\n                            else if (cellObj.colSpan > 1) {\n                                for (var j = i + 1, len = i + cellObj.colSpan; j < len; j++) {\n                                    (0,_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(sRow, j, sheet, { colSpan: i - j }, true);\n                                    if (sheet.rows[sRow] && sheet.rows[sRow].cells &&\n                                        sheet.rows[sRow].cells[j]) {\n                                        delete sheet.rows[sRow].cells[j].value;\n                                        delete sheet.rows[sRow].cells[j].formula;\n                                    }\n                                }\n                            }\n                            else if (cellObj.rowSpan > 1) {\n                                for (var j = sRow + 1, len = sRow + cellObj.rowSpan; j < len; j++) {\n                                    (0,_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(j, i, sheet, { rowSpan: sRow - j }, true);\n                                    if (sheet.rows[j] && sheet.rows[j].cells &&\n                                        sheet.rows[j].cells[i]) {\n                                        delete sheet.rows[j].cells[i].value;\n                                        delete sheet.rows[j].cells[i].formula;\n                                    }\n                                }\n                            }\n                            if (!valueOnly && (0,_index__WEBPACK_IMPORTED_MODULE_2__.isHiddenCol)(sheet, i)) {\n                                i++;\n                                continue;\n                            }\n                            if (checkFrozenIdx && i >= frozenCol && i < frozenIndexes[1]) {\n                                i = frozenIndexes[1];\n                                continue;\n                            }\n                            if (cellObj.style) {\n                                var style = {};\n                                Object.assign(style, cellObj.style);\n                                cellObj.style = style;\n                            }\n                            data.set(eventArgs.address, cellObj);\n                            i++;\n                        }\n                        sRow++;\n                    }\n                }\n                return data;\n            });\n        })());\n    });\n}\n/**\n * Used to get the formatted value of the cell.\n *\n * @param {Workbook} context - Specifies the context.\n * @param {CellModel} cell - Specifies the cell model.\n * @param {number} rowIdx - Specifies the row index.\n * @param {number} colIdx - Specifies the column index.\n * @param {boolean} getIntValueFromDate - Specify the getIntValueFromDate.\n * @param {Internationalization} intl - Specifies the internationalization object.\n * @returns {string | Date | number} - Returns the formatted cell value.\n * @hidden\n */\nfunction getValueFromFormat(context, cell, rowIdx, colIdx, getIntValueFromDate, intl) {\n    if (cell) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cell.value)) {\n            return '';\n        }\n        if (cell.format) {\n            var args = { value: cell.value, formattedText: cell.value, cell: cell, format: cell.format,\n                checkDate: !getIntValueFromDate, rowIndex: rowIdx, colIndex: colIdx, dataUpdate: true };\n            context.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getFormattedCellObject, args);\n            return args.dateObj && args.dateObj.toString() !== 'Invalid Date' ? args.dateObj : (getIntValueFromDate ? args.value :\n                args.formattedText.toString().trim());\n        }\n        else if (getIntValueFromDate) {\n            return cell.value;\n        }\n        else {\n            var cellVal = cell.value;\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.isNumber)(cellVal)) {\n                cellVal = Number(cell.value).toString();\n                if (cellVal.includes('.') || cellVal.length > 11) {\n                    var options = { args: { value: cellVal, updateValue: true }, fResult: cellVal,\n                        cellVal: cellVal, intl: intl };\n                    context.notify(_index__WEBPACK_IMPORTED_MODULE_0__.parseDecimalNumber, options);\n                    cellVal = options.fResult;\n                }\n            }\n            return cellVal;\n        }\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @hidden\n * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.\n * @param {number} idx - Specifies the index value.\n * @returns {SheetModel | RowModel | CellModel} - To process the index\n */\nfunction getModel(model, idx) {\n    var diff;\n    var j;\n    var prevIdx;\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(model[idx]) || !(model[idx] && model[idx].index === idx)) {\n        for (var i = 0; i <= idx; i++) {\n            if (model && model[i]) {\n                diff = model[i].index - i;\n                if (diff > 0) {\n                    model.forEach(function (value, index) {\n                        if (value && value.index) {\n                            prevIdx = value.index;\n                            j = 1;\n                        }\n                        if (value && !value.index && index !== 0) {\n                            value.index = prevIdx + j;\n                        }\n                        j++;\n                    });\n                    while (diff--) {\n                        model.splice(i, 0, null);\n                    }\n                    i += diff;\n                }\n            }\n            else if (model) {\n                model[i] = null;\n            }\n            else {\n                model = [];\n            }\n        }\n    }\n    return model[idx];\n}\n/**\n * @hidden\n * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.\n * @param {boolean} isSheet - Specifies the bool value.\n * @param {Workbook} context - Specifies the Workbook.\n * @param {boolean} isSort - Specifies whether to sort the unordered cell/row model in ascending order.\n * @returns {void} - To process the index\n */\nfunction processIdx(model, isSheet, context, isSort) {\n    var j;\n    var diff = 0;\n    var cnt;\n    var len = model.length;\n    if (isSort && model.length > 0) {\n        // Sort the model based on the index value in ascending order\n        model.sort(function (a, b) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(a) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(a.index) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(b) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(b.index)) {\n                return a.index - b.index; // Ascending order\n            }\n            return 0;\n        });\n    }\n    var _loop_1 = function (i) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(model[i]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(model[i].index)) {\n            cnt = diff = model[i].index - i;\n            delete model[i].index;\n        }\n        if (diff > 0) {\n            j = 0;\n            while (diff--) {\n                if (isSheet) {\n                    context.createSheet(i + j);\n                    j++;\n                }\n                else {\n                    model.splice(i, 0, null);\n                }\n            }\n            i += cnt;\n            len += cnt;\n        }\n        if (isSheet) {\n            if (model[i].id < 1) {\n                model[i].id = (0,_index__WEBPACK_IMPORTED_MODULE_2__.getMaxSheetId)(context.sheets);\n                if (model[i].properties) {\n                    model[i].properties.id = model[i].id;\n                }\n            }\n            if (!model[i].name) {\n                context.setSheetPropertyOnMute(model[i], 'name', 'Sheet' + (0,_index__WEBPACK_IMPORTED_MODULE_2__.getSheetNameCount)(context));\n            }\n            var cellCnt_1 = 0;\n            model[i].rows.forEach(function (row) {\n                cellCnt_1 = Math.max(cellCnt_1, (row && row.cells && row.cells.length - 1) || 0);\n            });\n            context.setSheetPropertyOnMute(model[i], 'usedRange', { rowIndex: model[i].rows.length ? model[i].rows.length - 1 : 0,\n                colIndex: cellCnt_1 });\n        }\n        out_i_1 = i;\n    };\n    var out_i_1;\n    for (var i = 0; i < len; i++) {\n        _loop_1(i);\n        i = out_i_1;\n    }\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/data.js?");

/***/ })

}]);