"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_text-search_text-search_js-fef2b24-6f9acd12"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-search/text-search.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-search/text-search.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextSearch: () => (/* binding */ TextSearch)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base/pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n\n\n\n\nvar searchTextCollection = [];\n/**\n * TextSearch module\n *\n * @param {Event} event - event\n * @returns {void}\n */\nvar TextSearch = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - It describes about the pdf viewer\n     * @param {PdfViewerBase} pdfViewerBase - It describes about the pdfviewer base\n     * @private\n     * @returns {void}\n     */\n    function TextSearch(pdfViewer, pdfViewerBase) {\n        var _this = this;\n        /**\n         * @private\n         */\n        this.isTextSearch = false;\n        /**\n         * @private\n         */\n        this.searchCount = 0;\n        /**\n         * @private\n         */\n        this.currentOccurrence = 0;\n        this.searchIndex = 0;\n        this.currentSearchIndex = 0;\n        this.startIndex = null;\n        /**\n         * @private\n         */\n        this.searchPageIndex = null;\n        this.startSearchPageIndex = null;\n        this.searchString = null;\n        this.isMatchCase = false;\n        this.isMultiSearch = false;\n        this.isSingleSearch = false;\n        this.findTextDocumentCollection = [];\n        this.searchRequestHandler = null;\n        this.textSearchHandleRequest = null;\n        /**\n         * @private\n         */\n        this.isTextSearchHandled = false;\n        this.textSearchOpen = false;\n        /**\n         * @private\n         */\n        this.programaticalSearch = false;\n        /**\n         * @private\n         */\n        this.isFiltering = false;\n        this.textContents = [];\n        /**\n         * @private\n         */\n        this.searchMatches = [];\n        this.multiSearchCounts = {};\n        this.getSearchTextDetails = {};\n        this.searchedPages = [];\n        this.isPrevSearch = false;\n        this.isExactMatch = false;\n        this.autompleteDataSource = [];\n        this.searchedOccurrences = [];\n        this.isSelectedFromPopup = false;\n        /**\n         * @private\n         */\n        this.isDocumentTextCollectionReady = false;\n        this.intervalId = null;\n        /**\n         * @private\n         */\n        this.searchTextDivzIndex = '-1';\n        this.tempElementStorage = [];\n        /**\n         * @private\n         */\n        this.isMessagePopupOpened = false;\n        /**\n         * @private\n         */\n        this.isTextRetrieved = false;\n        this.isTextSearched = false;\n        this.isTextSearchEventTriggered = false;\n        this.isSearchText = false;\n        this.isLastOccurrenceCompleted = false;\n        this.checkBoxOnChange = function (event) {\n            if (event.checked) {\n                _this.isMatchCase = true;\n                _this.searchString = '';\n                if (_this.searchInput.value && _this.searchInput.value !== '') {\n                    _this.isTextSearch = true;\n                }\n            }\n            else {\n                _this.isMatchCase = false;\n                _this.searchString = '';\n                if (_this.searchInput.value && _this.searchInput.value !== '') {\n                    _this.isTextSearch = true;\n                }\n            }\n            if (_this.isTextSearch && _this.isDocumentTextCollectionReady) {\n                _this.resetVariables();\n                _this.clearAllOccurrences();\n                var inputString = _this.searchInput.value;\n                _this.searchIndex = 0;\n                _this.initiateTextSearch(inputString);\n                if (_this.searchCount === 0 && !_this.isMessagePopupOpened) {\n                    _this.onMessageBoxOpen();\n                }\n            }\n        };\n        this.searchKeypressHandler = function (event) {\n            var char = String.fromCharCode(event.which || event.keyCode);\n            var isAlphanumeric = /[a-zA-Z0-9]/.test(char);\n            var isSpecialCharacter = function (char) { return /[!@#$%^&*(),.?\":{}|<>]/.test(char); };\n            if ((isAlphanumeric || isSpecialCharacter) && !(event.ctrlKey || event.altKey)) {\n                _this.initiateTextSearch(_this.searchInput.value);\n                _this.updateSearchInputIcon(false);\n            }\n            else {\n                _this.resetVariables();\n            }\n        };\n        this.searchClickHandler = function (event) {\n            _this.searchButtonClick(_this.searchBtn, _this.searchAutocompleteObj);\n        };\n        this.nextButtonOnClick = function (event) {\n            _this.searchString = _this.searchInput.value;\n            _this.nextSearch();\n        };\n        this.prevButtonOnClick = function (event) {\n            _this.searchString = _this.searchInput.value;\n            _this.prevSearch();\n        };\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.createTextSearchBox = function () {\n        var _this = this;\n        this.searchBox = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_search_box', className: 'e-pv-text-search-bar' });\n        var toolbarElement;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            toolbarElement = document.getElementById('toolbarContainer');\n        }\n        else {\n            toolbarElement = this.pdfViewerBase.getElement('_toolbarContainer');\n        }\n        if (toolbarElement) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                this.searchBox.style.top = toolbarElement.clientHeight + 'px';\n            }\n            else {\n                this.searchBox.style.top = toolbarElement.clientHeight + 'px';\n            }\n        }\n        var searchElementsContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_search_box_elements', className: 'e-pv-text-search-bar-elements' });\n        this.searchInputContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_search_input_container', className: 'e-input-group e-pv-text-search-input' });\n        this.searchInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: this.pdfViewer.element.id + '_search_input', className: 'e-input e-pv-search-input-ele' });\n        var tempData = {\n            matches: [\n                { 'SearchString': '', 'Count': '' }\n            ]\n        };\n        var isFirst = false;\n        this.searchAutocompleteObj = new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_4__.AutoComplete({\n            dataSource: tempData.matches,\n            fields: { value: 'SearchString' },\n            headerTemplate: \"<div class=\\\"e-pv-automplete-header\\\"><span class=\\\"e-pv-search-exact-matches\\\">\" + this.pdfViewer.localeObj.getConstant('Exact Matches') + \"</span><span class=\\\"e-pv-total-exact-matches\\\"></span></div>\",\n            itemTemplate: '<div class=\"e-pv-autocomplete-item\">' +\n                '<span class=\"e-pv-autocomplete-word\"> ${SearchString} </span><span class=\"e-pv-autocomplete-count\">${Count}</span></div>',\n            placeholder: this.pdfViewer.localeObj.getConstant('Find in document'),\n            popupHeight: '200px',\n            beforeOpen: function (event) {\n                if (Array.isArray(_this.autompleteDataSource) && (_this.autompleteDataSource.length === 0)) {\n                    event.cancel = true;\n                }\n            },\n            select: function (event) {\n                _this.isSelectedFromPopup = true;\n                _this.isSingleSearch = true;\n                _this.isMultiSearch = false;\n                _this.isExactMatch = true;\n                _this.initiateSearch(event.itemData.SearchString);\n            },\n            filtering: function (event) {\n                if (!_this.isDocumentTextCollectionReady) {\n                    _this.resetVariablesTextSearch();\n                    _this.clearAllOccurrences();\n                }\n                _this.isSelectedFromPopup = false;\n                if (_this.searchCountEle) {\n                    _this.searchCountEle.innerHTML = '';\n                    _this.adjustInputContainerWidth();\n                }\n                _this.isSingleSearch = false;\n                _this.isExactMatch = false;\n                _this.isMultiSearch = _this.matchAnyWordCheckBox.checked;\n                _this.initiateTextSearch(event.text);\n                if (event.text === '') {\n                    clearInterval(_this.intervalId);\n                    _this.showLoadingIndicator(false);\n                }\n                _this.searchString = '';\n                if (_this.documentTextCollection.length === _this.pdfViewerBase.pageCount) {\n                    _this.isDocumentTextCollectionReady = true;\n                }\n                var updateInterval = setInterval(function () {\n                    if (_this.documentTextCollection.length === _this.pdfViewerBase.pageCount) {\n                        event.updateData(_this.autompleteDataSource, null);\n                        if (Array.isArray(_this.autompleteDataSource) && (_this.autompleteDataSource.length !== 0)) {\n                            var dataSourceInfo = _this.autompleteDataSource;\n                            var totalCount = dataSourceInfo.reduce(function (acc, obj) {\n                                return acc + parseInt(obj.Count, 10);\n                            }, 0);\n                            document.querySelector('.e-pv-total-exact-matches').innerHTML = totalCount;\n                            if (_this.isMultiSearch) {\n                                document.querySelector('.e-pv-search-exact-matches').innerHTML = _this.pdfViewer.localeObj.getConstant('Total Matches');\n                            }\n                            else {\n                                document.querySelector('.e-pv-search-exact-matches').innerHTML = _this.pdfViewer.localeObj.getConstant('Exact Matches');\n                            }\n                        }\n                        else if (_this.autompleteDataSource.length === 0) {\n                            var element = document.querySelector('.e-pv-total-exact-matches');\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n                                element.innerHTML = '0';\n                            }\n                            _this.searchAutocompleteObj.hidePopup();\n                        }\n                        clearInterval(updateInterval);\n                        _this.isDocumentTextCollectionReady = true;\n                    }\n                }, 1000);\n            },\n            created: function (event) {\n                _this.searchAutocompleteObj.element.addEventListener('keydown', function (args) {\n                    if (args.key === 'Enter') {\n                        _this.isSingleSearch = true;\n                        _this.isExactMatch = _this.isSelectedFromPopup;\n                        _this.isMultiSearch = false;\n                        if (!_this.isDocumentTextCollectionReady && _this.pdfViewerBase.clientSideRendering) {\n                            if (_this.searchInput.value !== '' && _this.searchInput.value !== _this.searchString) {\n                                _this.isTextSearchHandled = false;\n                                _this.searchCount = 0;\n                                _this.searchIndex = 0;\n                                _this.searchPageIndex = 0;\n                                _this.textSearchWhileLoading(_this.searchInput.value, _this.isMatchCase);\n                                _this.searchString = _this.searchInput.value;\n                            }\n                            if (_this.isTextSearchHandled) {\n                                _this.nextSearch();\n                            }\n                        }\n                        else {\n                            _this.initiateTextSearch(_this.searchInput.value);\n                        }\n                        if (_this.searchCount === 0 && !_this.isMessagePopupOpened &&\n                            _this.documentTextCollection.length === _this.pdfViewerBase.pageCount) {\n                            _this.onMessageBoxOpen();\n                        }\n                    }\n                });\n                _this.searchAutocompleteObj.element.parentElement.querySelector('.e-clear-icon').addEventListener('mousedown', function (args) {\n                    _this.showLoadingIndicator(false);\n                    clearInterval(_this.intervalId);\n                    _this.searchInput.value = '';\n                    _this.resetTextSearch();\n                    if (_this.searchCountEle) {\n                        _this.searchCountEle.innerHTML = '';\n                        _this.adjustInputContainerWidth();\n                    }\n                    _this.searchInput.focus();\n                    _this.searchString = '';\n                });\n            }\n        });\n        this.searchBtn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_search_box-icon', className: 'e-input-group-icon e-input-search-group-icon e-pv-search-icon' });\n        this.searchBtn.setAttribute('tabindex', '0');\n        this.searchInputContainer.appendChild(this.searchInput);\n        this.searchAutocompleteObj.appendTo(this.searchInput);\n        searchElementsContainer.appendChild(this.searchInputContainer);\n        this.searchCountEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_search_count', className: 'e-pv-search-count', innerHTML: '' });\n        searchElementsContainer.appendChild(this.searchCountEle);\n        if (this.pdfViewer.enableRtl) {\n            this.prevSearchBtn = this.createSearchBoxButtons('prev_occurrence', 'e-pv-next-search');\n        }\n        else {\n            this.prevSearchBtn = this.createSearchBoxButtons('prev_occurrence', 'e-pv-prev-search');\n        }\n        this.prevSearchBtn.setAttribute('aria-label', 'Previous Search text');\n        searchElementsContainer.appendChild(this.prevSearchBtn);\n        if (this.pdfViewer.enableRtl) {\n            this.nextSearchBtn = this.createSearchBoxButtons('next_occurrence', 'e-pv-prev-search');\n        }\n        else {\n            this.nextSearchBtn = this.createSearchBoxButtons('next_occurrence', 'e-pv-next-search');\n        }\n        this.nextSearchBtn.setAttribute('aria-label', 'Next Search text');\n        searchElementsContainer.appendChild(this.nextSearchBtn);\n        var matchCaseContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_match_case_container', className: 'e-pv-textsearch-match-case-container' });\n        var matchCaseInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: this.pdfViewer.element.id + '_match_case' });\n        matchCaseInput.type = 'checkbox';\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            matchCaseInput.style.height = '17px';\n            matchCaseInput.style.width = '17px';\n            matchCaseInput.addEventListener('change', this.checkBoxOnChange.bind(this));\n        }\n        matchCaseContainer.appendChild(matchCaseInput);\n        var matchAnyWordInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: this.pdfViewer.element.id + '_match_any_word' });\n        matchAnyWordInput.type = 'checkbox';\n        matchCaseContainer.appendChild(matchAnyWordInput);\n        this.searchBox.appendChild(searchElementsContainer);\n        this.searchBox.appendChild(matchCaseContainer);\n        this.pdfViewerBase.mainContainer.appendChild(this.searchBox);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            var matchCaseText_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_search_box_text', styles: 'position: absolute; padding-top: 3px; padding-left: 8px; padding-right: 8px; font-size: 13px' });\n            var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_Matchcase');\n            promise.then(function (value) {\n                matchCaseText_1.textContent = value;\n            });\n            matchCaseContainer.appendChild(matchCaseText_1);\n        }\n        else {\n            var checkBox = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__.CheckBox({ cssClass: 'e-pv-match-case', label: this.pdfViewer.localeObj.getConstant('Match case'), htmlAttributes: { 'tabindex': '0' }, change: this.checkBoxOnChange.bind(this) });\n            checkBox.appendTo(matchCaseInput);\n            this.matchAnyWordCheckBox = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_1__.CheckBox({\n                cssClass: 'e-pv-match-any-word', label: this.pdfViewer.localeObj.getConstant('Match any word'), htmlAttributes: { 'tabindex': '0' }, change: function () {\n                    _this.isMultiSearch = _this.matchAnyWordCheckBox.checked;\n                }\n            });\n            this.matchAnyWordCheckBox.appendTo(matchAnyWordInput);\n        }\n        matchCaseContainer.firstElementChild.addEventListener('keydown', function (event) {\n            if (event.key === 'Enter' || event.key === ' ') {\n                event.target.click();\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        });\n        matchAnyWordInput.addEventListener('keydown', function (event) {\n            if (event.key === 'Enter' || event.key === ' ') {\n                event.target.click();\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        });\n        var waitingPopup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_textSearchLoadingIndicator' });\n        this.searchInputContainer.appendChild(waitingPopup);\n        waitingPopup.style.position = 'absolute';\n        waitingPopup.style.top = '15px';\n        waitingPopup.style.left = this.searchInputContainer.clientWidth - 46 + 'px';\n        (0,_index__WEBPACK_IMPORTED_MODULE_2__.createSpinner)({ target: waitingPopup, cssClass: 'e-spin-center' });\n        this.setLoaderProperties(waitingPopup);\n        this.showSearchBox(false);\n        if (this.pdfViewer.enableRtl) {\n            this.searchBox.classList.add('e-rtl');\n            this.searchBox.style.left = '88.3px';\n        }\n        else {\n            this.searchBox.classList.remove('e-rtl');\n            this.searchBox.style.right = '88.3px';\n        }\n        this.searchBtn.addEventListener('click', this.searchClickHandler.bind(this));\n        this.searchBtn.addEventListener('keydown', function (event) {\n            if (event.key === 'Enter' || event.key === ' ') {\n                _this.searchClickHandler(event);\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        });\n        this.nextSearchBtn.addEventListener('click', this.nextButtonOnClick.bind(this));\n        this.prevSearchBtn.addEventListener('click', this.prevButtonOnClick.bind(this));\n    };\n    TextSearch.prototype.setLoaderProperties = function (element) {\n        var spinnerElement = element.firstChild.firstChild.firstChild;\n        if (spinnerElement) {\n            spinnerElement.style.height = '18px';\n            spinnerElement.style.width = '18px';\n            spinnerElement.style.transformOrigin = '9px 9px 9px';\n        }\n    };\n    TextSearch.prototype.showLoadingIndicator = function (isShow) {\n        var waitingPopup = document.getElementById(this.pdfViewer.element.id + '_textSearchLoadingIndicator');\n        if (waitingPopup) {\n            if (isShow) {\n                (0,_index__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(waitingPopup);\n            }\n            else {\n                (0,_index__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(waitingPopup);\n            }\n        }\n    };\n    TextSearch.prototype.textSearchWhileLoading = function (searchWord, isMatchCase, startIndex, endIndex, isFirstResult, isCompleted) {\n        var endPage = endIndex ? endIndex : 100;\n        var isPagesCompleted = isCompleted ? isCompleted : false;\n        if (endPage >= this.pdfViewerBase.pageCount) {\n            endPage = this.pdfViewerBase.pageCount;\n            isPagesCompleted = true;\n        }\n        if (!this.pdfViewerBase.clientSideRendering) {\n            // eslint-disable-next-line\n            var proxy_1 = this;\n            var jsonObject = { text: searchWord, matchCase: isMatchCase, documentId: this.pdfViewerBase.getDocumentId(), hashId: this.pdfViewerBase.hashId, action: 'SearchTextPdf', elementId: this.pdfViewer.element.id, uniqueId: this.pdfViewerBase.documentId, startIndex: startIndex ? startIndex : 0, endIndex: endPage, isCompleted: isPagesCompleted, isRequestsend: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isFirstResult) ? isFirstResult : true };\n            this.textSearchHandleRequest = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n            this.textSearchHandleRequest.url = this.pdfViewer.serviceUrl + '/' + 'SearchTextPdf';\n            this.textSearchHandleRequest.responseType = 'json';\n            this.textSearchHandleRequest.send(jsonObject);\n            this.textSearchHandleRequest.onSuccess = function (result) {\n                var data = result.data;\n                if (data) {\n                    try {\n                        proxy_1.searchTextAfteresult(data.resultPages, data.totalSearchCount, data.searchWord, data.matchCase, (data.isRequestsend.toLowerCase() === 'true'), (data.isCompleted.toLowerCase() === 'true'), data.endIndex);\n                    }\n                    catch (error) {\n                        data = null;\n                    }\n                }\n            };\n        }\n        if (this.pdfViewerBase.clientSideRendering) {\n            this.pdfViewerBase.pdfViewerRunner.addTask({\n                message: 'searchText',\n                zoomFactor: this.pdfViewerBase.getZoomFactor(),\n                searchWord: searchWord,\n                matchCase: isMatchCase,\n                startIndex: startIndex ? startIndex : 0,\n                endIndex: endPage,\n                isCompleted: isPagesCompleted,\n                isRequestsend: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isFirstResult) ? isFirstResult : false\n            }, _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__.TaskPriorityLevel.Medium);\n        }\n    };\n    /**\n     * @param {any} resultPages - Result of the text search word\n     * @param {number} totalSearchCount - Search count of the word\n     * @param {string} searchWord - Word that given for the text search\n     * @param {boolean} matchCase - It gives about the match case\n     * @param {boolean} isFirstResult - It gives first result from the request\n     * @param {boolean} isCompleted - It gives the search complete indication\n     * @param {number} endIndex - It describes end pageindex of the result\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.searchTextAfteresult = function (resultPages, totalSearchCount, searchWord, matchCase, isFirstResult, isCompleted, endIndex) {\n        if (totalSearchCount === 0 && this.searchCount === 0) {\n            if (isCompleted) {\n                this.isTextSearchHandled = true;\n                this.pdfViewerBase.createNotificationPopup(this.pdfViewer.localeObj.getConstant('No Matches'));\n                this.showLoadingIndicator(false);\n            }\n        }\n        else {\n            if (this.isSingleSearch && this.searchString === searchWord && this.isMatchCase === matchCase && (this.textSearchOpen ||\n                this.programaticalSearch)) {\n                this.isTextSearchHandled = true;\n                var details = this.getSearchTextDetails;\n                this.getSearchTextDetails = __assign({}, details, resultPages);\n                this.hightlightSearchedTexts(this.searchPageIndex, isFirstResult);\n                if (isCompleted) {\n                    this.showLoadingIndicator(false);\n                }\n                else {\n                    this.showLoadingIndicator(true);\n                }\n                this.searchCount = this.searchCount + totalSearchCount;\n                if (!isFirstResult) {\n                    this.currentOccurrence = 1;\n                    this.searchedOccurrences.push(this.currentOccurrence);\n                    if (this.searchedOccurrences.length === 1) {\n                        this.pdfViewer.fireTextSearchStart(this.searchString, this.isMatchCase);\n                    }\n                }\n                this.searchCountEle.style.display = 'inline-block';\n                this.getSearchCountText();\n                this.updateLoadingIndicator();\n            }\n        }\n        if (!isCompleted && this.searchString === searchWord && (this.textSearchOpen || this.programaticalSearch)) {\n            this.textSearchWhileLoading(searchWord, matchCase, endIndex, endIndex + 100, (this.searchCount !== 0) ? true : false, isCompleted);\n        }\n    };\n    TextSearch.prototype.updateLoadingIndicator = function () {\n        var loadingIndicator = document.getElementById(this.pdfViewer.element.id + '_textSearchLoadingIndicator');\n        loadingIndicator.style.left = this.searchInputContainer.clientWidth - 46 + 'px';\n    };\n    /**\n     * @param {number} pageNumber - It decribes the search pageIndex value\n     * @param {boolean} isPageChange - It describes the first result highlight\n     * @param {boolean} isSearchCompleted - It describes the text search has been completed or not.\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.hightlightSearchedTexts = function (pageNumber, isPageChange, isSearchCompleted) {\n        this.clearAllOccurrences();\n        var elementIdCount;\n        var keys = [];\n        for (var key in this.getSearchTextDetails) {\n            if (Object.prototype.hasOwnProperty.call(this.getSearchTextDetails, key)) {\n                keys.push(parseInt(key, 10));\n            }\n        }\n        keys.sort(function (a, b) { return a - b; });\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageNumber)) {\n            var previous = keys[keys.length - 1];\n            var next = keys[0];\n            for (var i = 0; i < keys.length; i++) {\n                if (keys[parseInt(i.toString(), 10)] < pageNumber) {\n                    previous = keys[parseInt(i.toString(), 10)];\n                }\n                else if (keys[parseInt(i.toString(), 10)] > pageNumber) {\n                    next = keys[parseInt(i.toString(), 10)];\n                    break;\n                }\n            }\n            if (!this.getSearchTextDetails[parseInt(pageNumber.toString(), 10)]) {\n                pageNumber = next;\n            }\n            if ((this.searchIndex + 1) > this.getSearchTextDetails[parseInt(pageNumber.toString(), 10)].pageOccurrence ||\n                this.searchIndex < 0) {\n                if ((this.searchIndex + 1) > this.getSearchTextDetails[parseInt(pageNumber.toString(), 10)].pageOccurrence) {\n                    pageNumber = ((pageNumber + 1) === keys[keys.length - 1]) ? 0 : next;\n                    this.searchIndex = 0;\n                }\n                if (this.searchIndex < 0) {\n                    pageNumber = ((pageNumber - 1) === -1) ? keys[keys.length - 1] : previous;\n                    this.searchIndex = (this.getSearchTextDetails[parseInt(pageNumber.toString(), 10)].pageOccurrence - 1);\n                }\n            }\n        }\n        for (var key in this.getSearchTextDetails) {\n            if (Object.prototype.hasOwnProperty.call(this.getSearchTextDetails, key)) {\n                var value = this.getSearchTextDetails[parseInt(key.toString(), 10)];\n                var idSearchIndexCount = 0;\n                // eslint-disable-next-line guard-for-in\n                for (var boundsKey in value.Bounds) {\n                    if (Object.prototype.hasOwnProperty.call(value.Bounds, boundsKey)) {\n                        var bounds = value.Bounds[parseInt(boundsKey.toString(), 10)];\n                        for (var i = 0; i < bounds.length; i++) {\n                            var leftValue = (this.pdfViewerBase.clientSideRendering === true) ?\n                                bounds[parseInt(i.toString(), 10)].Left :\n                                this.pdfViewerBase.ConvertPointToPixel(bounds[parseInt(i.toString(), 10)].Left);\n                            var topValue = (this.pdfViewerBase.clientSideRendering === true) ?\n                                bounds[parseInt(i.toString(), 10)].Top :\n                                this.pdfViewerBase.ConvertPointToPixel(bounds[parseInt(i.toString(), 10)].Top);\n                            var heightValue = (this.pdfViewerBase.clientSideRendering === true) ?\n                                bounds[parseInt(i.toString(), 10)].Height :\n                                this.pdfViewerBase.ConvertPointToPixel(bounds[parseInt(i.toString(), 10)].Height);\n                            var widthValue = (this.pdfViewerBase.clientSideRendering === true) ?\n                                bounds[parseInt(i.toString(), 10)].Width :\n                                this.pdfViewerBase.ConvertPointToPixel(bounds[parseInt(i.toString(), 10)].Width);\n                            var pageIndex = null;\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isSearchCompleted)) {\n                                pageIndex = pageNumber ? pageNumber : keys[0];\n                            }\n                            else {\n                                if (isSearchCompleted) {\n                                    pageIndex = null;\n                                }\n                            }\n                            if ((this.searchIndex === idSearchIndexCount) && pageIndex === Number(key)) {\n                                elementIdCount = idSearchIndexCount;\n                                if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPageChange) && !isPageChange) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPageChange)) {\n                                    this.pdfViewerBase.updateScrollTop(Number(key));\n                                }\n                                var idString = '_searchtext_' + Number(key) + '_' + idSearchIndexCount;\n                                var element = void 0;\n                                if (bounds.length <= 1 || i === 0) {\n                                    element = document.getElementById(this.pdfViewer.element.id + idString);\n                                }\n                                else {\n                                    element = document.getElementById(this.pdfViewer.element.id + idString + '_' + i);\n                                }\n                                if (element) {\n                                    element.parentElement.removeChild(element);\n                                }\n                                this.searchPageIndex = Number(key);\n                                this.createSearchTextDiv(idSearchIndexCount, Number(key), heightValue, widthValue, topValue, leftValue, 'e-pv-search-text-highlight', false, 0, i);\n                            }\n                            else {\n                                this.createSearchTextDiv(idSearchIndexCount, Number(key), heightValue, widthValue, topValue, leftValue, 'e-pv-search-text-highlightother', false, 0, i);\n                            }\n                        }\n                    }\n                    idSearchIndexCount++;\n                }\n            }\n        }\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPageChange) && !isPageChange) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPageChange)) {\n            var element = this.pdfViewerBase.getElement('_searchtext_' + this.searchPageIndex + '_' + elementIdCount);\n            var scrollPoint = { y: -100, x: -100 };\n            this.scrollToSearchStr(element, scrollPoint);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.textSearchBoxOnResize = function () {\n        if (this.pdfViewer.toolbarModule && this.pdfViewer.enableToolbar) {\n            var secondaryToolbar = this.pdfViewerBase.getElement('_toolbarContainer_popup');\n            if (secondaryToolbar) {\n                if (secondaryToolbar.contains(this.pdfViewerBase.getElement('_search').parentElement)) {\n                    this.searchBox.style.right = '0px';\n                }\n            }\n        }\n        else {\n            if (this.pdfViewerBase.viewerContainer.clientWidth + this.pdfViewerBase.viewerContainer.offsetLeft <\n                this.searchBox.offsetLeft + this.searchBox.clientWidth) {\n                this.searchBox.style.right = '0px';\n                this.searchBox.style.width = parseInt(this.searchBox.style.width, 10) - ((this.searchBox.offsetLeft + this.searchBox.clientWidth) - (this.pdfViewerBase.viewerContainer.clientWidth)) + 'px';\n                this.searchInput.style.width = parseInt(this.searchInput.style.width, 10) - ((this.searchBox.offsetLeft + this.searchBox.clientWidth) - (this.pdfViewerBase.viewerContainer.clientWidth)) + 'px';\n            }\n            else {\n                this.searchBox.style.right = '88.3px';\n                this.searchBox.style.width = '';\n                this.searchInput.style.width = '';\n            }\n        }\n    };\n    /**\n     * @param {boolean} isShow - It describes about the isShow\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.showSearchBox = function (isShow) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.searchBox)) {\n            if (isShow) {\n                this.searchBox.style.display = 'block';\n                this.textSearchOpen = true;\n            }\n            else {\n                this.searchBox.style.display = 'none';\n                this.searchInput.value = '';\n                this.searchCountEle.style.display = 'none';\n                if (this.pdfViewer.toolbarModule) {\n                    this.pdfViewer.toolbarModule.isTextSearchBoxDisplayed = false;\n                }\n                this.textSearchOpen = false;\n            }\n            this.onTextSearchClose();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.searchAfterSelection = function () {\n        if (this.currentOccurrence === 0) {\n            this.searchPageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            this.startSearchPageIndex = this.searchPageIndex;\n        }\n        if (this.isTextSearch) {\n            if (this.currentOccurrence !== 0) {\n                this.initSearch(this.searchPageIndex, true);\n                this.highlightOthers();\n            }\n        }\n    };\n    TextSearch.prototype.calculateSearchCount = function (inputString, documentTextCollection) {\n        var _this = this;\n        this.searchCount = 0;\n        if (!this.isTextSearchHandled) {\n            this.currentOccurrence = 0;\n            this.resetVariables();\n            this.searchIndex = 0;\n        }\n        if (!inputString || inputString.trim() === '') {\n            if (this.searchCountEle) {\n                this.searchCountEle.innerHTML = '';\n                this.adjustInputContainerWidth();\n            }\n            return;\n        }\n        if (this.isMultiSearch) {\n            if (this.searchCountEle) {\n                this.searchCountEle.innerHTML = '';\n                this.adjustInputContainerWidth();\n            }\n            var wordsToSearch = inputString.split(' ');\n            this.multiSearchCounts = {};\n            for (var _i = 0, wordsToSearch_1 = wordsToSearch; _i < wordsToSearch_1.length; _i++) {\n                var word = wordsToSearch_1[_i];\n                word = word.trim();\n                if (word === '') {\n                    continue;\n                }\n                var wordCount = 0;\n                for (var i = 0; i < documentTextCollection.length; i++) {\n                    var pageIndex = parseInt(Object.keys(documentTextCollection[parseInt(i.toString(), 10)])[0], 10);\n                    var documentIndex = documentTextCollection[parseInt(i.toString(), 10)][parseInt(pageIndex.toString(), 10)];\n                    var pageTextData = documentIndex.pageText ? documentIndex.pageText : documentIndex.PageText;\n                    if (!this.isMatchCase) {\n                        pageTextData = pageTextData.toLowerCase();\n                        word = word.toLowerCase();\n                    }\n                    var matchIndex = pageTextData.indexOf(word);\n                    while (matchIndex !== -1) {\n                        wordCount++;\n                        matchIndex = pageTextData.indexOf(word, matchIndex + 1);\n                    }\n                }\n                this.multiSearchCounts[\"\" + word] = wordCount;\n            }\n            var transformedData_1 = Object.keys(this.multiSearchCounts).map(function (key) { return ({\n                SearchString: key,\n                Count: _this.multiSearchCounts[\"\" + key].toString()\n            }); });\n            this.autompleteDataSource = transformedData_1;\n            return;\n        }\n        var wordCounts = {};\n        for (var i = 0; i < documentTextCollection.length; i++) {\n            var pageIndex = parseInt(Object.keys(documentTextCollection[parseInt(i.toString(), 10)])[0], 10);\n            var documentIndex = documentTextCollection[parseInt(i.toString(), 10)][parseInt(pageIndex.toString(), 10)];\n            var pageTextData = documentIndex.pageText ? documentIndex.pageText : documentIndex.PageText;\n            var multiSearch = (pageTextData.replace((/(\\s\\r\\n)/gm), ' ')).replace((/(\\r\\n)/gm), ' ');\n            var Multiline = (pageTextData.replace((/(\\s\\r\\n)/gm), '  ')).replace((/(\\r\\n)/gm), ' ');\n            var specialCharcterSearch = multiSearch.replace(/[^a-zA-Z0-9]+/g, ' ');\n            var arrayReturns = void 0;\n            var queryLength = inputString.length;\n            var matches = [];\n            var matchedArray = [];\n            var matchIndex = -queryLength;\n            var newIndex = -queryLength;\n            var multiSearchIndex = -queryLength;\n            var MultilineIndex = -queryLength;\n            var specialcharcterIndex = -queryLength;\n            if (!this.isMatchCase) {\n                inputString = inputString.toLowerCase();\n                pageTextData = pageTextData.toLowerCase();\n                multiSearch = multiSearch.toLowerCase();\n                Multiline = Multiline.toLowerCase();\n                specialCharcterSearch = specialCharcterSearch.toLowerCase();\n            }\n            while (matchIndex !== 0 || (matchIndex === 0 && matches.length > 0 && matches[0] === 0)) {\n                if (!inputString || inputString === ' ') {\n                    break;\n                }\n                if (this.isExactMatch) {\n                    var match = void 0;\n                    // eslint-disable-next-line\n                    var escapedInputString = inputString.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                    // eslint-disable-next-line\n                    var regex_1 = new RegExp(\"(?<!\\\\w)\" + escapedInputString + \"(?!\\\\w)\", 'g');\n                    match = regex_1.exec(pageTextData);\n                    while (match !== null) {\n                        matches.push(match.index);\n                        match = regex_1.exec(pageTextData);\n                    }\n                    break;\n                }\n                matchIndex = pageTextData.indexOf(inputString, matchIndex + queryLength);\n                if (inputString.indexOf(' ') !== -1) {\n                    var newString = inputString.replace(' ', '\\r\\n');\n                    newIndex = pageTextData.indexOf(newString, newIndex + queryLength);\n                    if (!(newIndex <= -1)) {\n                        if (newIndex < matchIndex) {\n                            matches.push(newIndex);\n                        }\n                    }\n                }\n                if (matchIndex <= -1 && newIndex <= -1) {\n                    break;\n                }\n                if (!(matchIndex <= -1)) {\n                    matches.push(matchIndex);\n                }\n                if (newIndex > matchIndex && !(newIndex <= -1)) {\n                    matches.push(newIndex);\n                }\n            }\n            if (matches.length === 0) {\n                multiSearchIndex = multiSearch.indexOf(inputString, multiSearchIndex + queryLength);\n                MultilineIndex = Multiline.indexOf(inputString, MultilineIndex + queryLength);\n                specialcharcterIndex = specialCharcterSearch.indexOf(inputString, specialcharcterIndex + queryLength);\n                if (multiSearchIndex !== -1) {\n                    arrayReturns = this.correctLinetext(inputString, matchIndex, pageTextData);\n                    matchIndex = -arrayReturns[0].length;\n                    for (var i_1 = 0; i_1 < arrayReturns.length; i_1++) {\n                        matchIndex = pageTextData.indexOf(arrayReturns[parseInt(i_1.toString(), 10)].trim(), matchIndex + (arrayReturns[i_1 - 1] === undefined ||\n                            null ? arrayReturns[0].length : arrayReturns[i_1 - 1].length));\n                        matchedArray.push(matchIndex);\n                        if (matchedArray.length > 1) {\n                            if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                                matches.push(matchedArray);\n                                this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                            }\n                            else {\n                                i_1 = -1;\n                                matchIndex = matchedArray[0] + arrayReturns[0].length;\n                                matchedArray.splice(0, matchedArray.length);\n                            }\n                        }\n                    }\n                }\n                else if (specialcharcterIndex !== -1) {\n                    arrayReturns = this.correctLinetext(inputString, matchIndex, pageTextData);\n                    matchIndex = -arrayReturns[0].length;\n                    for (var i_2 = 0; i_2 < arrayReturns.length; i_2++) {\n                        matchIndex = pageTextData.indexOf(arrayReturns[parseInt(i_2.toString(), 10)].trim(), matchIndex + (arrayReturns[i_2 - 1] === undefined ||\n                            null ? arrayReturns[0].length : arrayReturns[i_2 - 1].length));\n                        matchedArray.push(matchIndex);\n                        if (matchedArray.length > 1) {\n                            if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                                matches.push(matchedArray);\n                                this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                            }\n                            else {\n                                i_2 = -1;\n                                matchIndex = matchedArray[0] + arrayReturns[0].length;\n                                matchedArray.splice(0, matchedArray.length);\n                            }\n                        }\n                    }\n                }\n                else if (MultilineIndex !== -1) {\n                    arrayReturns = this.correctLinetext(inputString, matchIndex, pageTextData);\n                    matchIndex = -arrayReturns[0].length;\n                    for (var i_3 = 0; i_3 < arrayReturns.length; i_3++) {\n                        matchIndex = pageTextData.indexOf(arrayReturns[parseInt(i_3.toString(), 10)].trim(), matchIndex + (arrayReturns[i_3 - 1] === undefined ||\n                            null ? arrayReturns[0].length : arrayReturns[i_3 - 1].length));\n                        matchedArray.push(matchIndex);\n                        if (matchedArray.length > 1) {\n                            if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                                matches.push(matchedArray);\n                                this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                            }\n                            else {\n                                i_3 = -1;\n                                matchIndex = matchedArray[0] + arrayReturns[0].length;\n                                matchedArray.splice(0, matchedArray.length);\n                            }\n                        }\n                    }\n                }\n                if (matches.length > 1) {\n                    matches.splice(1, matches.length);\n                }\n            }\n            var words = pageTextData.match(/[a-zA-Z]+|\\d+/g);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(words)) {\n                words.forEach(function (word) {\n                    if (word.startsWith(inputString)) {\n                        if (wordCounts[\"\" + word]) {\n                            wordCounts[\"\" + word]++;\n                        }\n                        else {\n                            wordCounts[\"\" + word] = 1;\n                        }\n                    }\n                });\n            }\n            if (matches.length > 0) {\n                this.searchCount = this.searchCount + matches.length;\n            }\n            if (this.searchMatches && matches.length > 0) {\n                this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n            }\n        }\n        var transformedData = Object.keys(wordCounts).map(function (key) { return ({\n            SearchString: key,\n            Count: wordCounts[\"\" + key].toString()\n        }); });\n        if (this.isSingleSearch) {\n            if (this.searchCountEle) {\n                if (this.searchedOccurrences.indexOf(this.currentOccurrence + 1) === -1) {\n                    if (!this.isTextSearchHandled) {\n                        this.searchedOccurrences.push(this.currentOccurrence + 1);\n                    }\n                }\n                this.adjustInputContainerWidth();\n            }\n            if (this.searchedOccurrences.length === 1) {\n                this.pdfViewer.fireTextSearchStart(this.searchString, this.isMatchCase);\n            }\n            if (!this.isTextSearchHandled) {\n                this.currentOccurrence += 1;\n            }\n        }\n        else {\n            if (this.searchAutocompleteObj) {\n                this.autompleteDataSource = transformedData;\n            }\n        }\n    };\n    TextSearch.prototype.getSearchCountText = function () {\n        if (this.pdfViewer.enableRtl) {\n            this.searchCountEle.innerHTML = this.searchCount + \" \" + this.pdfViewer.localeObj.getConstant('of') + \" \" + this.currentOccurrence;\n        }\n        else {\n            this.searchCountEle.innerHTML = this.currentOccurrence + \" \" + this.pdfViewer.localeObj.getConstant('of') + \" \" + this.searchCount;\n        }\n    };\n    TextSearch.prototype.adjustInputContainerWidth = function () {\n        var parentContainer = this.searchCountEle.parentElement;\n        if (this.searchCount > 0) {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                if (parentContainer) {\n                    parentContainer.style.display = 'block';\n                }\n            }\n            this.searchCountEle.style.display = 'inline-block';\n        }\n        else {\n            this.searchCountEle.style.display = 'none';\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                if (parentContainer) {\n                    parentContainer.style.display = 'none';\n                }\n            }\n        }\n    };\n    TextSearch.prototype.initiateTextSearch = function (inputString, isMobileSearch) {\n        this.enableNextButton(true);\n        this.enablePrevButton(true);\n        this.autompleteDataSource = [];\n        if (this.pdfViewer.enableHtmlSanitizer && typeof inputString === 'string') {\n            inputString = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(inputString);\n        }\n        if (inputString && inputString.length > 0 && inputString[inputString.length - 1] === ' ') {\n            inputString = inputString.slice(0, inputString.length - 1);\n        }\n        this.initiateSearch(inputString, isMobileSearch);\n    };\n    TextSearch.prototype.handleSearchAfterTextCollectionReady = function (inputString, isMobileSearch) {\n        if (isMobileSearch) {\n            var searchCountElement = document.getElementById(this.pdfViewer.element.id + '_search_count');\n            this.searchCountEle = searchCountElement;\n        }\n        this.isSingleSearch = isMobileSearch ? isMobileSearch : this.isSingleSearch;\n        if (inputString !== this.searchString || this.isLastOccurrenceCompleted) {\n            this.isTextSearchHandled = false;\n            this.calculateSearchCount(inputString, this.documentTextCollection);\n            this.isInitialSearch = true;\n            this.isLastOccurrenceCompleted = false;\n            if (this.currentOccurrence === 0) {\n                this.startSearchPageIndex = this.searchPageIndex;\n            }\n        }\n        if (inputString !== this.searchString || this.searchPageIndex === null || this.startSearchPageIndex === null) {\n            this.isTextSearch = false;\n            if (!this.isTextSearchHandled) {\n                this.searchPageIndex = this.pdfViewerBase.currentPageNumber - 1;\n                this.startSearchPageIndex = this.searchPageIndex;\n            }\n        }\n        if (!this.isTextSearchHandled) {\n            this.clearAllOccurrences();\n        }\n        if (inputString !== '' && !this.isMultiSearch && this.isSingleSearch && this.searchCount > 0) {\n            if (this.searchMatches[this.searchPageIndex] && inputString === this.searchString) {\n                if (this.searchMatches[this.searchPageIndex].length === 0) {\n                    this.initSearch(this.searchPageIndex, false);\n                }\n                else {\n                    this.nextSearch();\n                }\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.searchMatches[this.searchPageIndex]) && inputString === this.searchString) {\n                this.initSearch(this.searchPageIndex, false);\n            }\n            else {\n                this.textSearch(inputString);\n            }\n        }\n        if (inputString === '') {\n            this.searchString = '';\n        }\n    };\n    /**\n     * @param {string} inputString - It describes about the input string\n     * @param {boolean} isMobileSearch - Indicates is mobile search or not\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.initiateSearch = function (inputString, isMobileSearch) {\n        var _this = this;\n        var pageCount = this.pdfViewerBase.pageCount;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.intervalId)) {\n            clearInterval(this.intervalId);\n        }\n        var checkDocumentTextCollection = function () {\n            if (!_this.isTextSearchHandled) {\n                _this.showLoadingIndicator(true);\n            }\n            if (_this.documentTextCollection.length === pageCount) {\n                clearInterval(_this.intervalId);\n                _this.isDocumentTextCollectionReady = true;\n                _this.calculateSearchCount(_this.searchInput.value, _this.documentTextCollection);\n                _this.getSearchTextDetails = {};\n                _this.showLoadingIndicator(false);\n                _this.intervalId = null;\n                if (!_this.isTextSearchHandled) {\n                    _this.handleSearchAfterTextCollectionReady(inputString, isMobileSearch);\n                }\n            }\n            if (isMobileSearch) {\n                if (_this.pdfViewerBase.navigationPane) {\n                    _this.pdfViewerBase.navigationPane.setSearchInputWidth();\n                }\n            }\n        };\n        if (!this.isDocumentTextCollectionReady) {\n            this.intervalId = setInterval(checkDocumentTextCollection, 1000);\n        }\n        else {\n            this.handleSearchAfterTextCollectionReady(inputString, isMobileSearch);\n        }\n    };\n    TextSearch.prototype.textSearch = function (inputString) {\n        if (inputString !== '' || inputString) {\n            this.searchString = inputString;\n            this.isTextSearch = true;\n            this.isSearchText = true;\n            this.searchPageIndex = this.pdfViewerBase.currentPageNumber - 1;\n            this.isTextSearchEventTriggered = false;\n            if (!this.isTextSearchHandled) {\n                this.showLoadingIndicator(true);\n            }\n            if (this.pdfViewer.isExtractText) {\n                if (this.isTextRetrieved) {\n                    for (var i = 0; i < this.pdfViewerBase.pageCount; i++) {\n                        this.initSearch(i, false, true);\n                    }\n                }\n                else {\n                    this.isTextSearched = true;\n                    for (var i = 0; i < this.documentTextCollection.length; i++) {\n                        this.initSearch(i, false, true);\n                    }\n                }\n            }\n            if (!this.isTextSearchHandled) {\n                this.searchPageIndex = this.findNextPageWithText(this.searchPageIndex, true);\n                this.initSearch(this.searchPageIndex, false);\n                this.highlightOthers();\n            }\n        }\n    };\n    TextSearch.prototype.nextSearch = function () {\n        this.isPrevSearch = false;\n        this.isTextSearch = true;\n        this.isSearchText = false;\n        var isCountIncreased = false;\n        if (this.isDocumentTextCollectionReady) {\n            if (this.searchString) {\n                this.clearAllOccurrences();\n                if (this.currentOccurrence !== 0) {\n                    this.searchIndex = this.searchIndex + 1;\n                    if (this.areAllOccurencesSearched() && !this.isMessagePopupOpened) {\n                        this.onMessageBoxOpen();\n                    }\n                }\n                else {\n                    this.searchIndex = 0;\n                    this.currentOccurrence += 1;\n                    isCountIncreased = true;\n                    this.getSearchCountText();\n                    if (this.searchedOccurrences.indexOf(this.currentOccurrence) === -1) {\n                        this.searchedOccurrences.push(this.currentOccurrence);\n                    }\n                    if (this.searchedOccurrences.length === 1) {\n                        this.pdfViewer.fireTextSearchStart(this.searchString, this.isMatchCase);\n                    }\n                }\n                if (this.searchMatches[this.searchPageIndex]) {\n                    if (this.searchIndex >= this.searchMatches[this.searchPageIndex].length) {\n                        this.searchIndex = 0;\n                        this.searchPageIndex = this.findNextPageWithText(this.searchPageIndex);\n                        if (this.pdfViewerBase.pageCount > 0) {\n                            this.initSearch(this.searchPageIndex, false);\n                        }\n                        else {\n                            this.initSearch(this.searchPageIndex, true);\n                            if (!this.isMessagePopupOpened) {\n                                this.onMessageBoxOpen();\n                            }\n                            this.pdfViewerBase.updateScrollTop(this.searchPageIndex);\n                        }\n                        this.showLoadingIndicator(true);\n                    }\n                    else {\n                        this.highlightSearchedTexts(this.searchPageIndex, false, undefined);\n                        var element_1 = this.pdfViewerBase.getElement('_searchtext_' + this.searchPageIndex + '_' + this.searchIndex);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element_1)) {\n                            var isScroll = this.isScrollPages(element_1);\n                            if (isScroll) {\n                                this.pdfViewerBase.updateScrollTop(this.searchPageIndex);\n                            }\n                        }\n                        this.showLoadingIndicator(false);\n                    }\n                    this.highlightOthers(true);\n                    if (this.currentOccurrence <= this.searchCount && !this.isMessagePopupOpened) {\n                        if (this.currentOccurrence === this.searchCount) {\n                            this.currentOccurrence = 1;\n                        }\n                        else {\n                            if (!isCountIncreased) {\n                                this.currentOccurrence = (this.currentOccurrence + 1);\n                            }\n                        }\n                        if (this.searchCountEle && this.isSingleSearch) {\n                            this.getSearchCountText();\n                            if (this.searchedOccurrences.indexOf(this.currentOccurrence) === -1) {\n                                this.searchedOccurrences.push(this.currentOccurrence);\n                            }\n                            this.adjustInputContainerWidth();\n                        }\n                    }\n                }\n                else if (!this.searchMatches[this.searchPageIndex] && !this.isMessagePopupOpened) {\n                    if (this.pdfViewerBase.pageCount > 1) {\n                        this.initSearch(this.searchPageIndex, false);\n                    }\n                }\n                else {\n                    if (!this.isMessagePopupOpened) {\n                        this.initiateTextSearch(this.searchInput.value);\n                    }\n                }\n            }\n            else {\n                this.initiateTextSearch(this.searchInput.value);\n            }\n            var element = this.pdfViewerBase.getElement('_searchtext_' + this.searchPageIndex + '_' + this.searchIndex);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n                this.scrollToSearch(element);\n            }\n        }\n        else {\n            this.clearAllOccurrences();\n            if (this.areAllOccurencesSearched()) {\n                this.onMessageBoxOpen();\n            }\n            if (!this.isMessagePopupOpened) {\n                if (this.currentOccurrence !== 0) {\n                    this.searchIndex = this.searchIndex + 1;\n                }\n                if (this.currentOccurrence + 1 > this.searchCount) {\n                    this.currentOccurrence = 1;\n                }\n                else {\n                    this.currentOccurrence = this.currentOccurrence + 1;\n                }\n                if (this.searchedOccurrences.indexOf(this.currentOccurrence) === -1) {\n                    this.searchedOccurrences.push(this.currentOccurrence);\n                }\n                this.getSearchCountText();\n                this.hightlightSearchedTexts(this.searchPageIndex);\n            }\n        }\n    };\n    TextSearch.prototype.findNextPageWithText = function (currentPageIndex, isInitialSearch) {\n        if (isInitialSearch) {\n            this.isInitialSearch = false;\n            if (this.searchMatches[parseInt(currentPageIndex.toString(), 10)] &&\n                this.searchMatches[parseInt(currentPageIndex.toString(), 10)].length > 0) {\n                return currentPageIndex;\n            }\n        }\n        for (var i = 1; i < this.pdfViewerBase.pageCount; i++) {\n            var nextPageIndex = (currentPageIndex + i) % this.pdfViewerBase.pageCount;\n            if (this.searchMatches[parseInt(nextPageIndex.toString(), 10)] &&\n                this.searchMatches[parseInt(nextPageIndex.toString(), 10)].length > 0) {\n                if (this.searchedOccurrences.length === this.searchCount && !isInitialSearch) {\n                    nextPageIndex = this.startSearchPageIndex;\n                    return nextPageIndex;\n                }\n                return nextPageIndex;\n            }\n        }\n        return currentPageIndex;\n    };\n    TextSearch.prototype.findFirstNonEmptyPage = function () {\n        for (var j = 0; j < this.pdfViewerBase.pageCount; j++) {\n            if (this.searchMatches[parseInt(j.toString(), 10)] && this.searchMatches[parseInt(j.toString(), 10)].length > 0) {\n                return j;\n            }\n        }\n        return null;\n    };\n    TextSearch.prototype.prevSearch = function () {\n        searchTextCollection.push(this.searchPageIndex);\n        this.isPrevSearch = true;\n        this.isTextSearch = true;\n        this.isSearchText = false;\n        if (this.isDocumentTextCollectionReady) {\n            if (this.searchString) {\n                this.clearAllOccurrences();\n                this.searchIndex = this.searchIndex - 1;\n                if (this.currentOccurrence === 0) {\n                    this.currentOccurrence = this.searchCount + 1;\n                }\n                if (this.areAllOccurencesSearched() && !this.isMessagePopupOpened) {\n                    this.onMessageBoxOpen();\n                }\n                if (!this.isMessagePopupOpened) {\n                    if (this.searchIndex < 0) {\n                        this.searchPageIndex = this.findPreviousPageWithText();\n                        this.initSearch(this.searchPageIndex, false);\n                        this.showLoadingIndicator(true);\n                    }\n                    else {\n                        this.highlightSearchedTexts(this.searchPageIndex, false, undefined);\n                        this.showLoadingIndicator(false);\n                    }\n                    this.highlightOthers(true);\n                }\n                if (this.currentOccurrence - 1 >= 0 && !this.isMessagePopupOpened) {\n                    if (this.currentOccurrence - 1 === 0) {\n                        this.currentOccurrence = this.searchCount;\n                    }\n                    else {\n                        this.currentOccurrence = this.currentOccurrence - 1;\n                    }\n                    if (this.searchCountEle && this.isSingleSearch) {\n                        this.getSearchCountText();\n                        if (this.searchedOccurrences.indexOf(this.currentOccurrence) === -1) {\n                            this.searchedOccurrences.push(this.currentOccurrence);\n                        }\n                        if (this.searchedOccurrences.length === 1) {\n                            this.pdfViewer.fireTextSearchStart(this.searchString, this.isMatchCase);\n                        }\n                        this.adjustInputContainerWidth();\n                    }\n                }\n            }\n            else {\n                this.searchIndex = this.searchIndex - 1;\n                this.searchPageIndex = ((this.searchPageIndex - 1) < 0) ? (this.pdfViewerBase.pageCount - 1) : this.searchPageIndex - 1;\n                var inputString = this.searchInput.value;\n                this.textSearch(inputString);\n            }\n        }\n        else {\n            this.clearAllOccurrences();\n            if (this.areAllOccurencesSearched()) {\n                this.onMessageBoxOpen();\n            }\n            if (!this.isMessagePopupOpened) {\n                if (this.currentOccurrence !== 0) {\n                    this.searchIndex = this.searchIndex - 1;\n                }\n                if ((this.currentOccurrence - 1) <= 0) {\n                    this.currentOccurrence = this.searchCount;\n                    var pageNum = Object.keys(this.getSearchTextDetails).pop();\n                    this.pdfViewerBase.updateScrollTop(Number(pageNum));\n                }\n                else {\n                    this.currentOccurrence = this.currentOccurrence - 1;\n                }\n                if (this.searchedOccurrences.indexOf(this.currentOccurrence) === -1) {\n                    this.searchedOccurrences.push(this.currentOccurrence);\n                }\n                this.getSearchCountText();\n                this.hightlightSearchedTexts(this.searchPageIndex);\n            }\n        }\n        var element = this.pdfViewerBase.getElement('_searchtext_' + this.searchPageIndex + '_' + this.searchIndex);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            this.scrollToSearch(element);\n        }\n    };\n    TextSearch.prototype.scrollToSearch = function (element) {\n        var scrollPoint = { y: -100, x: -100 };\n        var isScroll = this.isScrollPages(element);\n        if (isScroll) {\n            this.scrollToSearchStr(element, scrollPoint);\n        }\n    };\n    TextSearch.prototype.isScrollPages = function (childEle) {\n        var parentRect = this.pdfViewer.element.getBoundingClientRect();\n        var childRect = childEle.getBoundingClientRect();\n        var toolbarHeight = (this.pdfViewer.enableToolbar && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbarModule))\n            ? this.pdfViewer.toolbar.toolbarElement.getBoundingClientRect().height : 0;\n        var isScroll = childRect.top >= (parentRect.top + toolbarHeight) &&\n            childRect.left >= parentRect.left && childRect.bottom <= parentRect.bottom &&\n            (childRect.bottom <= (window.innerHeight || document.documentElement.clientHeight)) &&\n            childRect.right <= parentRect.right;\n        return !isScroll;\n    };\n    TextSearch.prototype.findPreviousPageWithText = function () {\n        var currentPageIndex = this.searchPageIndex;\n        for (var i = 1; i < this.pdfViewerBase.pageCount; i++) {\n            var prevPageIndex = (currentPageIndex - i + this.pdfViewerBase.pageCount) % this.pdfViewerBase.pageCount;\n            if (this.searchMatches[parseInt(prevPageIndex.toString(), 10)] &&\n                this.searchMatches[parseInt(prevPageIndex.toString(), 10)].length > 0) {\n                if (this.searchedOccurrences.length === this.searchCount) {\n                    prevPageIndex = 0;\n                    return prevPageIndex;\n                }\n                return prevPageIndex;\n            }\n        }\n        return currentPageIndex;\n    };\n    TextSearch.prototype.initSearch = function (pageIndex, isSinglePageSearch, isCount) {\n        var storedData = this.pdfViewerBase.getStoredData(pageIndex, true);\n        var pageText = null;\n        var textContents = null;\n        var characterBounds = null;\n        if (isCount) {\n            if (this.documentTextCollection.length !== 0) {\n                var documentIndex = this.\n                    documentTextCollection[parseInt(pageIndex.toString(), 10)][parseInt(pageIndex.toString(), 10)];\n                var pageTextData = documentIndex.pageText ? documentIndex.pageText : documentIndex.PageText;\n                if (this.documentTextCollection[parseInt(pageIndex.toString(), 10)] && documentIndex) {\n                    this.getSearchTextContent(pageIndex, this.searchString, pageTextData, textContents, isSinglePageSearch, this.documentTextCollection[parseInt(pageIndex.toString(), 10)]);\n                }\n            }\n        }\n        else {\n            if (storedData) {\n                pageText = storedData['pageText'];\n                textContents = storedData['textContent'];\n                characterBounds = this.pdfViewerBase.textLayer.characterBound[parseInt(pageIndex.toString(), 10)];\n                this.textContents[parseInt(pageIndex.toString(), 10)] = textContents;\n                this.getPossibleMatches(pageIndex, this.searchString, pageText, textContents, isSinglePageSearch, characterBounds);\n                this.getSearchCountText();\n            }\n            else {\n                if (!isSinglePageSearch && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageIndex)) {\n                    this.createRequestForSearch(pageIndex);\n                }\n            }\n        }\n    };\n    TextSearch.prototype.getPossibleMatches = function (pageIndex, searchString, pageString, textContents, isSinglePageSearch, characterBounds) {\n        var arrayReturns;\n        var pageText = pageString;\n        var searchText = searchString;\n        var multiSearch = (pageText.replace((/(\\s\\r\\n)/gm), ' ')).replace((/(\\r\\n)/gm), ' ');\n        var Multiline = (pageString.replace((/(\\s\\r\\n)/gm), '  ')).replace((/(\\r\\n)/gm), ' ');\n        var specialCharcterSearch = multiSearch.replace(/[^a-zA-Z0-9]+/g, ' ');\n        var queryLength = searchString.length;\n        if (!this.isMatchCase) {\n            searchText = searchString.toLowerCase();\n            pageText = pageString.toLowerCase();\n            multiSearch = multiSearch.toLowerCase();\n            Multiline = Multiline.toLowerCase();\n            specialCharcterSearch = specialCharcterSearch.toLowerCase();\n        }\n        var matches = [];\n        var matchedArray = [];\n        var matchIndex = -queryLength;\n        var newIndex = -queryLength;\n        var multiSearchIndex = -queryLength;\n        var MultilineIndex = -queryLength;\n        var specialcharcterIndex = -queryLength;\n        while (matchIndex !== 0 || matchIndex === 0) {\n            if (searchText === '' || searchText === ' ' || !searchText) {\n                break;\n            }\n            if (this.isExactMatch) {\n                var match = void 0;\n                // eslint-disable-next-line\n                var escapedInputString = searchString.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                // eslint-disable-next-line\n                var regex_2 = new RegExp(\"(?<!\\\\w)\" + escapedInputString + \"(?!\\\\w)\", 'g');\n                match = regex_2.exec(pageText);\n                while (match !== null) {\n                    matches.push(match.index);\n                    match = regex_2.exec(pageText);\n                }\n                break;\n            }\n            matchIndex = pageText.indexOf(searchText, matchIndex + queryLength);\n            var textSearch = pageString.substring(0, matchIndex);\n            var unicodeLength = 0;\n            // eslint-disable-next-line\n            if (!this.isMatchCase && (/[^\\u0000-\\u007F]/.test(pageString)) && matchIndex !== -1) {\n                var textLength = pageText.substring(0, matchIndex + queryLength).length;\n                var unicodeSplitLength = pageText.substring(0, matchIndex + queryLength).\n                    replace(/[\\u0300-\\u036f]/g, '').length;\n                unicodeLength = textLength - unicodeSplitLength;\n                matchIndex = matchIndex - unicodeLength;\n            }\n            if (searchText.indexOf(' ') !== -1) {\n                var newString = searchString.replace(' ', '\\r\\n');\n                newIndex = pageText.indexOf(newString, newIndex + queryLength);\n                newIndex = -1;\n                if (!(newIndex <= -1)) {\n                    if (newIndex < matchIndex) {\n                        matches.push(newIndex);\n                    }\n                }\n            }\n            if (matchIndex <= -1 && newIndex <= -1) {\n                break;\n            }\n            if (!(matchIndex <= -1)) {\n                matches.push(matchIndex);\n            }\n            if (newIndex > matchIndex && !(newIndex <= -1)) {\n                matches.push(newIndex);\n            }\n            if (unicodeLength > 0) {\n                matchIndex = matchIndex + unicodeLength;\n            }\n        }\n        if (matches.length === 0) {\n            multiSearchIndex = multiSearch.indexOf(searchText, multiSearchIndex + queryLength);\n            MultilineIndex = Multiline.indexOf(searchText, MultilineIndex + queryLength);\n            specialcharcterIndex = specialCharcterSearch.indexOf(searchText, specialcharcterIndex + queryLength);\n            if (multiSearchIndex !== -1) {\n                arrayReturns = this.correctLinetext(searchString, matchIndex, pageText);\n                matchIndex = -arrayReturns[0].length;\n                for (var i = 0; i < arrayReturns.length; i++) {\n                    matchIndex = pageText.indexOf(arrayReturns[parseInt(i.toString(), 10)].trim(), matchIndex + (arrayReturns[i - 1] === undefined ||\n                        null ? arrayReturns[0].length : arrayReturns[i - 1].length));\n                    matchedArray.push(matchIndex);\n                    if (matchedArray.length > 1) {\n                        if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                            matches.push(matchedArray);\n                            this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                        }\n                        else {\n                            i = -1;\n                            matchIndex = matchedArray[0] + arrayReturns[0].length;\n                            matchedArray.splice(0, matchedArray.length);\n                        }\n                    }\n                }\n            }\n            else if (specialcharcterIndex !== -1) {\n                arrayReturns = this.correctLinetext(searchString, matchIndex, pageText);\n                matchIndex = -arrayReturns[0].length;\n                for (var i = 0; i < arrayReturns.length; i++) {\n                    matchIndex = pageText.indexOf(arrayReturns[parseInt(i.toString(), 10)].trim(), matchIndex + (arrayReturns[i - 1] === undefined ||\n                        null ? arrayReturns[0].length : arrayReturns[i - 1].length));\n                    matchedArray.push(matchIndex);\n                    if (matchedArray.length > 1) {\n                        if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                            matches.push(matchedArray);\n                            this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                        }\n                        else {\n                            i = -1;\n                            matchIndex = matchedArray[0] + arrayReturns[0].length;\n                            matchedArray.splice(0, matchedArray.length);\n                        }\n                    }\n                }\n            }\n            else if (MultilineIndex !== -1) {\n                arrayReturns = this.correctLinetext(searchString, matchIndex, pageText);\n                matchIndex = -arrayReturns[0].length;\n                for (var i = 0; i < arrayReturns.length; i++) {\n                    matchIndex = pageText.indexOf(arrayReturns[parseInt(i.toString(), 10)].trim(), matchIndex + (arrayReturns[i - 1] === undefined ||\n                        null ? arrayReturns[0].length : arrayReturns[i - 1].length));\n                    matchedArray.push(matchIndex);\n                    if (matchedArray.length > 1) {\n                        if ((matchedArray[1] - (matchedArray[0] + arrayReturns[0].length)) <= 3) {\n                            matches.push(matchedArray);\n                            this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n                        }\n                        else {\n                            i = -1;\n                            matchIndex = matchedArray[0] + arrayReturns[0].length;\n                            matchedArray.splice(0, matchedArray.length);\n                        }\n                    }\n                }\n            }\n            if (matches.length > 1) {\n                matches.splice(1, matches.length);\n            }\n        }\n        if (this.searchMatches && matches.length > 0) {\n            this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n        }\n        if (!isSinglePageSearch) {\n            if (this.searchedPages.indexOf(pageIndex) === -1) {\n                this.searchedPages.push(pageIndex);\n                this.startIndex = this.searchedPages[0];\n            }\n            this.updateSearchInputIcon(false);\n        }\n        if (this.searchMatches && this.searchMatches[parseInt(pageIndex.toString(), 10)] &&\n            this.searchMatches[parseInt(pageIndex.toString(), 10)].length !== 0) {\n            if (!isSinglePageSearch) {\n                if (this.isPrevSearch) {\n                    this.searchIndex = this.searchMatches[parseInt(pageIndex.toString(), 10)].length - 1;\n                }\n                if ((this.pdfViewerBase.currentPageNumber - 1) !== this.searchPageIndex) {\n                    if (this.searchMatches.length > 0 && (this.searchIndex === -1) &&\n                        (this.searchPageIndex) === this.currentSearchIndex) {\n                        if (!this.isMessagePopupOpened && !this.isSearchText) {\n                            this.onMessageBoxOpen();\n                        }\n                        this.searchPageIndex = this.getSearchPage(this.pdfViewerBase.currentPageNumber - 1);\n                        this.searchedPages = [this.searchPageIndex];\n                    }\n                    else if (this.isPrevSearch && this.searchMatches && this.searchMatches.length > 0 &&\n                        (this.searchMatches[this.searchPageIndex] && this.searchMatches[this.searchPageIndex].length > 0) &&\n                        this.searchedPages.length === this.pdfViewerBase.pageCount && this.startIndex - 1 === this.searchPageIndex) {\n                        if (!this.isMessagePopupOpened) {\n                            this.onMessageBoxOpen();\n                        }\n                        this.searchedPages = [this.startIndex];\n                    }\n                    else if (searchTextCollection[0] === this.searchPageIndex && this.areAllOccurencesSearched()) {\n                        if (!this.isMessagePopupOpened) {\n                            this.onMessageBoxOpen();\n                        }\n                    }\n                }\n                else if (this.searchMatches && (this.searchMatches[this.searchPageIndex] &&\n                    this.searchMatches[this.searchPageIndex].length > 0) &&\n                    this.searchedPages.length === this.pdfViewerBase.pageCount &&\n                    this.startIndex === this.searchPageIndex && this.pdfViewerBase.pageCount > 1) {\n                    if (!this.isMessagePopupOpened) {\n                        this.onMessageBoxOpen();\n                    }\n                    this.searchedPages = [this.startIndex];\n                }\n            }\n            this.highlightSearchedTexts(pageIndex, isSinglePageSearch, arrayReturns);\n        }\n        else {\n            if (!isSinglePageSearch) {\n                if (this.isPrevSearch) {\n                    this.searchPageIndex = ((this.searchPageIndex - 1) < 0) ? (this.pdfViewerBase.pageCount - 1) : this.searchPageIndex - 1;\n                }\n                else {\n                    this.searchPageIndex = ((this.searchPageIndex + 1) < this.pdfViewerBase.pageCount) ? (this.searchPageIndex + 1) : 0;\n                }\n                if (this.searchedPages.indexOf(this.searchPageIndex) === -1 && this.searchedPages.length !== this.pdfViewerBase.pageCount) {\n                    this.showLoadingIndicator(true);\n                    this.searchPageIndex = this.findNextPageWithText(this.searchPageIndex, true);\n                    this.initSearch(this.searchPageIndex, false);\n                }\n                else {\n                    var searchPageIndex = this.getSearchPage(pageIndex);\n                    if (this.searchMatches && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.searchMatches[this.searchPageIndex]) &&\n                        this.searchedPages.length === this.pdfViewerBase.pageCount) {\n                        if (!this.isMessagePopupOpened) {\n                            this.onMessageBoxOpen();\n                        }\n                        this.pdfViewerBase.updateScrollTop(this.startIndex);\n                    }\n                    else if (this.searchMatches && this.searchMatches.length > 0 && (this.searchIndex === 0 ||\n                        this.searchIndex === -1) && (searchPageIndex) === this.currentSearchIndex) {\n                        if (this.isPrevSearch) {\n                            if (!this.isMessagePopupOpened) {\n                                this.onMessageBoxOpen();\n                            }\n                            this.searchPageIndex = searchPageIndex;\n                            this.searchedPages = [searchPageIndex];\n                            this.searchIndex = -1;\n                        }\n                        else {\n                            if (!this.isMessagePopupOpened && this.pdfViewerBase.currentPageNumber !== 0 && !this.isSearchText) {\n                                this.onMessageBoxOpen();\n                            }\n                            this.searchPageIndex = searchPageIndex;\n                            this.searchedPages = [searchPageIndex];\n                            this.searchIndex = 0;\n                        }\n                        this.highlightSearchedTexts(this.searchPageIndex, isSinglePageSearch, undefined);\n                    }\n                    else if (this.searchMatches && (this.searchMatches[this.searchPageIndex] &&\n                        this.searchMatches[this.searchPageIndex].length > 0) &&\n                        this.searchedPages.length === this.pdfViewerBase.pageCount) {\n                        if (!this.isMessagePopupOpened) {\n                            this.onMessageBoxOpen();\n                        }\n                        this.searchPageIndex = this.startIndex;\n                        this.searchedPages = [this.searchPageIndex];\n                        this.searchIndex = 0;\n                        this.pdfViewerBase.updateScrollTop(this.startIndex);\n                        this.highlightSearchedTexts(this.searchPageIndex, isSinglePageSearch, undefined);\n                    }\n                }\n            }\n        }\n    };\n    TextSearch.prototype.correctLinetext = function (searchString, matchIndex, pageText) {\n        var indiuvalLineArray = [];\n        var searchArray = searchString.split(/[\" \"]+/);\n        if (!this.isMatchCase) {\n            searchArray = searchString.toLowerCase().split(/\\s+/);\n        }\n        matchIndex = 0;\n        var linestring = '';\n        var mergedText = pageText.replace(/ \\r\\n/g, ' ');\n        mergedText = mergedText.replace(/\\r\\n/g, ' ');\n        if (/[\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/.test(mergedText)) {\n            mergedText = mergedText.replace(/[\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/g, ' ');\n        }\n        mergedText = mergedText.replace(/[^a-zA-Z0-9 ]/g, '');\n        searchString = searchString.replace(/[^a-zA-Z0-9 ]/g, '');\n        var result = mergedText.match(searchString);\n        if (!this.isMatchCase) {\n            result = mergedText.match(searchString.toLowerCase());\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result)) {\n            return indiuvalLineArray;\n        }\n        else {\n            result = pageText.slice(result.index, pageText.length);\n        }\n        var pageCheck = result;\n        for (var i = 0; i < searchArray.length; i++) {\n            var searchArrayText = linestring + searchArray[parseInt(i.toString(), 10)];\n            matchIndex = pageText.indexOf(searchArrayText, matchIndex);\n            pageCheck = pageCheck ? pageCheck.replace(searchArray[i - 1], '') : pageText.replace(searchArray[i - 1], '');\n            if ((pageCheck[pageCheck.indexOf(searchArray[parseInt(i.toString(), 10)]) - 1] === '\\n' && (pageCheck[pageCheck.indexOf(searchArray[i + 1]) - 1]) === '\\n') || (pageCheck[pageCheck.indexOf(searchArray[parseInt(i.toString(), 10)]) - 1] === '\\n' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((pageCheck[pageCheck.indexOf(searchArray[i + 1]) - 1])))) {\n                matchIndex = -1;\n                if (linestring === '') {\n                    linestring = searchArray[parseInt(i.toString(), 10)];\n                    i = i + 1;\n                }\n            }\n            if (matchIndex !== -1) {\n                linestring += searchArray[parseInt(i.toString(), 10)] + ' ';\n                if (i === (searchArray.length - 1)) {\n                    indiuvalLineArray.push(linestring);\n                }\n            }\n            else {\n                indiuvalLineArray.push(linestring);\n                linestring = searchArray[parseInt(i.toString(), 10)] + ' ';\n                if (pageCheck[pageCheck.indexOf(searchArray[parseInt(i.toString(), 10)]) - 1] === '\\n' && pageCheck[pageCheck.indexOf(searchArray[i + 1]) - 1] === '\\n') {\n                    indiuvalLineArray.push(linestring);\n                    linestring = searchArray[i + 1] + ' ';\n                    pageCheck = pageCheck ? pageCheck.replace(searchArray[i - 1], '') : pageText.replace(searchArray[i - 1], '');\n                    i = i + 1;\n                }\n                if (i === (searchArray.length - 1)) {\n                    indiuvalLineArray.push(linestring);\n                }\n            }\n        }\n        return indiuvalLineArray;\n    };\n    TextSearch.prototype.getSearchTextContent = function (pageIndex, searchString, pageString, textContents, isSinglePageSearch, characterBounds) {\n        var pageText = pageString;\n        var searchText = searchString;\n        var queryLength = searchString.length;\n        if (!this.isMatchCase) {\n            searchText = searchString.toLowerCase();\n            pageText = pageString.toLowerCase();\n        }\n        var matches = [];\n        var matchIndex = -queryLength;\n        var newIndex = -queryLength;\n        while (matchIndex !== 0) {\n            if (searchText === '' || searchText === ' ' || !searchText) {\n                break;\n            }\n            matchIndex = pageText.indexOf(searchText, matchIndex + queryLength);\n            if (searchText.indexOf(' ') !== -1) {\n                var newString = searchString.replace(' ', '\\r\\n');\n                newIndex = pageText.indexOf(newString, newIndex + queryLength);\n                if (!(newIndex <= -1)) {\n                    if (newIndex < matchIndex) {\n                        matches.push(newIndex);\n                    }\n                }\n            }\n            if (matchIndex <= -1 && newIndex <= -1) {\n                break;\n            }\n            if (!(matchIndex <= -1)) {\n                matches.push(matchIndex);\n            }\n            if (newIndex > matchIndex && !(newIndex <= -1)) {\n                matches.push(newIndex);\n            }\n        }\n        if (matches.length !== 0) {\n            this.searchCount = this.searchCount + matches.length;\n        }\n        if (this.searchMatches && matches.length > 0) {\n            this.searchMatches[parseInt(pageIndex.toString(), 10)] = matches;\n        }\n    };\n    TextSearch.prototype.getSearchPage = function (pageIndex) {\n        var pageNumber = null;\n        if (this.isPrevSearch) {\n            for (var i = pageIndex; i >= 0; i--) {\n                if (i !== pageIndex && this.searchMatches[parseInt(i.toString(), 10)]) {\n                    pageNumber = i;\n                    break;\n                }\n            }\n            if (!pageNumber) {\n                for (var j = this.pdfViewerBase.pageCount - 1; j > pageIndex; j--) {\n                    if (this.searchMatches[parseInt(j.toString(), 10)]) {\n                        pageNumber = j;\n                        break;\n                    }\n                }\n            }\n        }\n        else {\n            for (var i = pageIndex; i < this.pdfViewerBase.pageCount; i++) {\n                if (i !== pageIndex && this.searchMatches[parseInt(i.toString(), 10)]) {\n                    pageNumber = i;\n                    break;\n                }\n            }\n            if (!pageNumber) {\n                if (pageIndex === 0) {\n                    pageNumber = pageIndex;\n                }\n                else {\n                    for (var j = 0; j < pageIndex; j++) {\n                        if (this.searchMatches[parseInt(j.toString(), 10)]) {\n                            pageNumber = j;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return pageNumber;\n    };\n    TextSearch.prototype.areAllNonEmptyPagesSearched = function () {\n        var nonEmptyPages = [];\n        for (var i = 0; i < this.searchMatches.length; i++) {\n            if (this.searchMatches[parseInt(i.toString(), 10)] && this.searchMatches[parseInt(i.toString(), 10)].length > 0) {\n                nonEmptyPages.push(i);\n            }\n        }\n        for (var _i = 0, nonEmptyPages_1 = nonEmptyPages; _i < nonEmptyPages_1.length; _i++) {\n            var pageIndex = nonEmptyPages_1[_i];\n            if (this.searchedPages.indexOf(pageIndex) === -1) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TextSearch.prototype.areAllOccurencesSearched = function () {\n        return this.searchedOccurrences.length === this.searchCount;\n    };\n    TextSearch.prototype.highlightSearchedTexts = function (pageIndex, isSinglePageSearch, ArrayReturns) {\n        var matches = this.searchMatches[parseInt(pageIndex.toString(), 10)];\n        var scrollPoint = { y: -100, x: -100 };\n        var className;\n        var searchingText = this.searchString;\n        var characterBounds = this.pdfViewerBase.textLayer.characterBound[parseInt(pageIndex.toString(), 10)];\n        var isHighlight = false;\n        if (isSinglePageSearch && (this.pdfViewerBase.currentPageNumber - 1) !== this.searchPageIndex) {\n            if (this.searchMatches.length > 0) {\n                if (pageIndex === this.getSearchPage(this.pdfViewerBase.currentPageNumber - 1)) {\n                    isHighlight = true;\n                }\n            }\n        }\n        if (characterBounds && matches !== undefined) {\n            for (var i = 0; i < matches.length; i++) {\n                if (matches[parseInt(i.toString(), 10)].length !== undefined && ArrayReturns !== undefined) {\n                    if (i === this.searchIndex && pageIndex === this.searchPageIndex) {\n                        for (var j = 0; j < ArrayReturns.length; j++) {\n                            className = 'e-pv-search-text-highlight';\n                            this.addDivForSearch(i, pageIndex, characterBounds, (ArrayReturns[parseInt(j.toString(), 10)].trim()).length, className, j);\n                        }\n                    }\n                    else {\n                        for (var j = 0; j < ArrayReturns.length; j++) {\n                            className = 'e-pv-search-text-highlightother';\n                            this.addDivForSearch(i, pageIndex, characterBounds, (ArrayReturns[parseInt(j.toString(), 10)].trim()).length, className, j);\n                        }\n                    }\n                }\n                else if (i === this.searchIndex && pageIndex === this.searchPageIndex) {\n                    className = 'e-pv-search-text-highlight';\n                }\n                else {\n                    className = 'e-pv-search-text-highlightother';\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(matches[parseInt(i.toString(), 10)].length)) {\n                    this.addDivForSearch(i, pageIndex, characterBounds, this.searchString.length, className, undefined);\n                }\n            }\n            this.searchString = searchingText;\n            if (pageIndex === this.searchPageIndex && !isSinglePageSearch) {\n                var element = this.pdfViewerBase.getElement('_searchtext_' + pageIndex + '_' + this.searchIndex);\n                if (element) {\n                    var targetScrollElement = this.getScrollElement(element);\n                    var isScroll = this.isScrollPages(targetScrollElement);\n                    if (isScroll) {\n                        this.scrollToSearchStr(element, scrollPoint);\n                    }\n                }\n                else {\n                    this.pdfViewerBase.updateScrollTop(pageIndex);\n                    var element_2 = this.pdfViewerBase.getElement('_searchtext_' + pageIndex + '_' + this.searchIndex);\n                    if (element_2) {\n                        var targetScrollElement = this.getScrollElement(element_2);\n                        this.scrollToSearchStr(targetScrollElement, scrollPoint);\n                    }\n                }\n            }\n        }\n    };\n    TextSearch.prototype.addDivForSearch = function (index, pageIndex, characterBounds, queryLength, className, nestedIndex) {\n        var textLayer = this.pdfViewerBase.getElement('_textLayer_' + pageIndex);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textLayer) && className === 'e-pv-search-text-highlight') {\n            if (this.pdfViewer.navigation) {\n                this.pdfViewer.navigation.goToPage(pageIndex + 1);\n            }\n        }\n        var count;\n        if (this.searchMatches[parseInt(pageIndex.toString(), 10)][parseInt(index.toString(), 10)].length !== undefined) {\n            count = this.searchMatches[parseInt(pageIndex.toString(), 10)][parseInt(index.toString(), 10)][\"\" + nestedIndex];\n        }\n        else {\n            count = this.searchMatches[parseInt(pageIndex.toString(), 10)][parseInt(index.toString(), 10)];\n        }\n        var initial = count;\n        var divCount = 0;\n        while (count < initial + queryLength) {\n            count = this.addDivElement(count, characterBounds, queryLength, className, index, pageIndex, initial, divCount, nestedIndex);\n            divCount++;\n        }\n        if (className === 'e-pv-search-text-highlight') {\n            this.showLoadingIndicator(false);\n        }\n    };\n    TextSearch.prototype.addDivElement = function (count, characterBounds, queryLength, className, index, pageIndex, initial, divCount, nestedIndex) {\n        var height = 0;\n        var width = 0;\n        var top = 0;\n        var left = 0;\n        var isRTL = false;\n        if (characterBounds[parseInt(count.toString(), 10)]) {\n            left = characterBounds[parseInt(count.toString(), 10)].X;\n            top = characterBounds[parseInt(count.toString(), 10)].Y;\n        }\n        var v = 0;\n        if ((count - initial) !== 0) {\n            v = count - initial;\n            queryLength += 1;\n        }\n        // eslint-disable-next-line\n        for (v = v; v < queryLength; v++) {\n            if (characterBounds[parseInt(count.toString(), 10)]) {\n                var charBound = characterBounds[parseInt(count.toString(), 10)];\n                if (left > charBound.X + charBound.Width) {\n                    isRTL = true;\n                }\n                top = (top < charBound.Y) ? top : charBound.Y;\n                var topDifference = (top < charBound.Y) ? (charBound.Y - top) : (top - charBound.Y);\n                height = (height > (topDifference + charBound.Height)) ? height : (topDifference + charBound.Height);\n                count++;\n            }\n        }\n        var isContinuation = false;\n        if (!isRTL) {\n            if (initial + queryLength !== count) {\n                isContinuation = true;\n                if (characterBounds[count - 1]) {\n                    width = (characterBounds[count - 1].X - left);\n                }\n            }\n            else {\n                isContinuation = false;\n                var storedData = this.pdfViewerBase.clientSideRendering ?\n                    this.pdfViewerBase.getLinkInformation(pageIndex, true) : this.pdfViewerBase.getStoredData(pageIndex, true);\n                var pageText = null;\n                if (storedData) {\n                    pageText = storedData['pageText'];\n                }\n                else if (this.pdfViewer.isExtractText && this.documentTextCollection.length !== 0) {\n                    var documentIndex = this.documentTextCollection[parseInt(pageIndex.toString(), 10)][parseInt(pageIndex.toString(), 10)];\n                    pageText = documentIndex.pageText ? documentIndex.pageText : documentIndex.PageText;\n                }\n                if (characterBounds[parseInt(count.toString(), 10)]) {\n                    if (pageText && (pageText[parseInt(count.toString(), 10)] === '' || pageText[parseInt(count.toString(), 10)] === ' ' || pageText[parseInt(count.toString(), 10)] === '\\r' || pageText[parseInt(count.toString(), 10)] === '\\n') && (characterBounds[parseInt(count.toString(), 10)].Width) === 0) {\n                        width = (characterBounds[count - 1].X - left) + characterBounds[count - 1].Width;\n                    }\n                    else {\n                        width = (characterBounds[parseInt(count.toString(), 10)].X - left);\n                    }\n                }\n                else {\n                    if (characterBounds[count - 1]) {\n                        width = (characterBounds[count - 1].X - left) + characterBounds[count - 1].Width;\n                    }\n                }\n            }\n        }\n        else {\n            var charBound = characterBounds[(initial + queryLength) - 1];\n            left = charBound.X;\n            width = characterBounds[parseInt(initial.toString(), 10)].X - characterBounds[(initial + queryLength) - 1].X;\n            top = (top < charBound.Y) ? top : charBound.Y;\n            var topDifference = (top < charBound.Y) ? (charBound.Y - top) : (top - charBound.Y);\n            height = (height > (topDifference + charBound.Height)) ? height : (topDifference + charBound.Height);\n            //some RTL character calculated width is zero and width difference value calculated from Y possition difference in the same line.\n            var widthDifference = initial > 0 ? characterBounds[initial - 1].Y\n                - characterBounds[parseInt(initial.toString(), 10)].Y : 0;\n            for (var j = (initial + queryLength) - 1; j >= initial; j--) {\n                charBound = characterBounds[parseInt(j.toString(), 10)];\n                if (charBound.Width === 0) {\n                    widthDifference = charBound.Y - characterBounds[j - 1].Y;\n                }\n            }\n            width = width + widthDifference;\n        }\n        this.createSearchTextDiv(index, pageIndex, height, width, top, left, className, isContinuation, divCount, nestedIndex);\n        return count;\n    };\n    TextSearch.prototype.createSearchTextDiv = function (index, pageIndex, height, width, top, left, className, isContinuation, divCount, nestedIndex) {\n        var idString = '_searchtext_' + pageIndex + '_' + index;\n        if (isContinuation) {\n            idString += '_' + divCount;\n        }\n        var nestedElement = document.getElementsByClassName('e-pv-search-text-highlight');\n        if (nestedIndex !== undefined && this.pdfViewerBase.getElement(idString) && !nestedElement[parseInt(nestedIndex.toString(), 10)]) {\n            var textDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + idString + '_' + nestedIndex });\n            var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n            this.calculateBounds(textDiv, height, width, top, left, pageDetails);\n            textDiv.classList.add(className);\n            if (className === 'e-pv-search-text-highlight') {\n                textDiv.style.backgroundColor = (this.pdfViewer.textSearchColorSettings.searchHighlightColor === '') ? '#fdd835' : this.pdfViewer.textSearchColorSettings.searchHighlightColor;\n                var bounds = { left: left, top: top, width: width, height: height };\n                this.pdfViewer.fireTextSearchHighlight(this.searchString, this.isMatchCase, bounds, (pageIndex + 1));\n            }\n            else if (className === 'e-pv-search-text-highlightother') {\n                textDiv.style.backgroundColor = (this.pdfViewer.textSearchColorSettings.searchColor === '') ? '#8b4c12' : this.pdfViewer.textSearchColorSettings.searchColor;\n            }\n            var textLayer = this.pdfViewerBase.getElement('_textLayer_' + pageIndex);\n            textDiv.style.zIndex = this.searchTextDivzIndex;\n            if (textLayer) {\n                textLayer.appendChild(textDiv);\n            }\n        }\n        if (!this.pdfViewerBase.getElement(idString)) {\n            var textDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + idString });\n            var pageDetails = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)];\n            this.calculateBounds(textDiv, height, width, top, left, pageDetails);\n            textDiv.classList.add(className);\n            if (className === 'e-pv-search-text-highlight') {\n                textDiv.style.backgroundColor = (this.pdfViewer.textSearchColorSettings.searchHighlightColor === '') ? '#fdd835' : this.pdfViewer.textSearchColorSettings.searchHighlightColor;\n                var bounds = { left: left, top: top, width: width, height: height };\n                this.pdfViewer.fireTextSearchHighlight(this.searchString, this.isMatchCase, bounds, (pageIndex + 1));\n            }\n            else if (className === 'e-pv-search-text-highlightother') {\n                textDiv.style.backgroundColor = (this.pdfViewer.textSearchColorSettings.searchColor === '') ? '#8b4c12' : this.pdfViewer.textSearchColorSettings.searchColor;\n            }\n            var textLayer = this.pdfViewerBase.getElement('_textLayer_' + pageIndex);\n            textDiv.style.zIndex = this.searchTextDivzIndex;\n            if (textLayer) {\n                textLayer.appendChild(textDiv);\n            }\n        }\n    };\n    TextSearch.prototype.calculateBounds = function (textDiv, height, width, top, left, pageDetails) {\n        if (pageDetails.rotation === 0 || pageDetails.rotation === 2) {\n            textDiv.style.height = Math.ceil(height) * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.width = width * this.pdfViewerBase.getZoomFactor() + 'px';\n            if (pageDetails.rotation === 2) {\n                textDiv.style.top = (pageDetails.height - top - height) * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.style.left = Math.ceil(pageDetails.width - left - width) * this.pdfViewerBase.getZoomFactor() + 'px';\n            }\n            else {\n                textDiv.style.top = top * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.style.left = left * this.pdfViewerBase.getZoomFactor() + 'px';\n            }\n        }\n        else if (pageDetails.rotation === 1) {\n            textDiv.style.height = width * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.width = height * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.top = left * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.left = (pageDetails.height - top - height) * this.pdfViewerBase.getZoomFactor() + 'px';\n        }\n        else if (pageDetails.rotation === 3) {\n            textDiv.style.height = width * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.width = height * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.left = ((pageDetails.width - pageDetails.height) + top) * this.pdfViewerBase.getZoomFactor() + 'px';\n            textDiv.style.top = (pageDetails.height - left - width) * this.pdfViewerBase.getZoomFactor() + 'px';\n        }\n    };\n    TextSearch.prototype.isClassAvailable = function () {\n        var isClass = false;\n        for (var j = 0; j < this.tempElementStorage.length; j++) {\n            if (this.tempElementStorage[parseInt(j.toString(), 10)].classString) {\n                if (this.tempElementStorage[parseInt(j.toString(), 10)].classString === 'e-pv-search-text-highlight' || this.tempElementStorage[parseInt(j.toString(), 10)].classString === 'e-pv-search-text-highlightother') {\n                    isClass = true;\n                    break;\n                }\n            }\n        }\n        return isClass;\n    };\n    TextSearch.prototype.getScrollElement = function (element) {\n        var targetElement = element;\n        if (element.childNodes.length > 0) {\n            for (var i = 0; i < element.childNodes.length; i++) {\n                if (element.childNodes[parseInt(i.toString(), 10)].classList) {\n                    if (element.childNodes[parseInt(i.toString(), 10)].classList.contains('e-pv-search-text-highlight')) {\n                        targetElement = element.childNodes[parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n        }\n        return targetElement;\n    };\n    TextSearch.prototype.scrollToSearchStr = function (element, scrollPoint) {\n        var parent = element.offsetParent;\n        var offsetY = element.offsetTop + element.clientTop;\n        var offsetX = element.offsetLeft + element.clientLeft;\n        while (parent.id !== this.pdfViewerBase.viewerContainer.id) {\n            offsetY += parent.offsetTop;\n            offsetX += parent.offsetLeft;\n            parent = parent.offsetParent;\n        }\n        if (scrollPoint) {\n            offsetY += scrollPoint.y;\n            offsetX += scrollPoint.x;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                parent.scrollLeft = offsetX;\n            }\n            else {\n                if (this.pdfViewerBase.getZoomFactor() > 1.5) {\n                    parent.scrollLeft = offsetX;\n                }\n            }\n        }\n        parent.scrollTop = offsetY;\n        this.pdfViewerBase.updateMobileScrollerPosition();\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.resizeSearchElements = function (pageIndex) {\n        var searchDivs = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_searchtext_' + pageIndex + '\"]');\n        for (var i = 0; i < searchDivs.length; i++) {\n            var textDiv = searchDivs[parseInt(i.toString(), 10)];\n            var previousZoomFactor = 1;\n            if (this.pdfViewer.magnificationModule) {\n                previousZoomFactor = this.pdfViewer.magnificationModule.previousZoomFactor;\n            }\n            var outputdata = pageIndex + '_' + previousZoomFactor + '_' + this.pdfViewerBase.getZoomFactor();\n            if (textDiv.getAttribute('name') !== outputdata) {\n                textDiv.style.width = (parseFloat(textDiv.style.width) / previousZoomFactor) * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.style.height = (parseFloat(textDiv.style.height) / previousZoomFactor) * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.style.top = (parseFloat(textDiv.style.top) / previousZoomFactor) * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.style.left = (parseFloat(textDiv.style.left) / previousZoomFactor) * this.pdfViewerBase.getZoomFactor() + 'px';\n                textDiv.setAttribute('name', outputdata);\n            }\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.highlightOtherOccurrences = function (pageNumber) {\n        this.initSearch(pageNumber, true);\n    };\n    TextSearch.prototype.highlightOthers = function (isSearched) {\n        var indexes = this.getIndexes();\n        var lowerPageValue = parseFloat(indexes.lowerPageValue.toString());\n        var higherPageValue = parseFloat(indexes.higherPageValue.toString());\n        for (var i = lowerPageValue; i <= higherPageValue; i++) {\n            if (this.searchMatches[parseInt(i.toString(), 10)] &&\n                this.searchMatches[parseInt(i.toString(), 10)].length > 0) {\n                this.highlightOtherOccurrences(i);\n            }\n        }\n        if (isSearched) {\n            this.showLoadingIndicator(false);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.clearAllOccurrences = function () {\n        var searchTextDivs = document.querySelectorAll('div[id*=\"' + this.pdfViewer.element.id + '_searchtext_\"]');\n        for (var i = 0; i < searchTextDivs.length; i++) {\n            searchTextDivs[parseInt(i.toString(), 10)].parentElement.removeChild(searchTextDivs[parseInt(i.toString(), 10)]);\n        }\n    };\n    /**\n     * @private\n     * @returns {any} - any\n     */\n    TextSearch.prototype.getIndexes = function () {\n        var lowerPageValue = this.pdfViewerBase.currentPageNumber - 3;\n        lowerPageValue = (lowerPageValue > 0) ? lowerPageValue : 0;\n        var higherPageValue = this.pdfViewerBase.currentPageNumber + 1;\n        higherPageValue = (higherPageValue < this.pdfViewerBase.pageCount) ? higherPageValue : (this.pdfViewerBase.pageCount - 1);\n        return { lowerPageValue: lowerPageValue, higherPageValue: higherPageValue };\n    };\n    TextSearch.prototype.applyTextSelection = function () {\n        if (this.pdfViewer.textSelectionModule && !this.pdfViewerBase.isTextSelectionDisabled) {\n            var indexes = this.getIndexes();\n            var lowerPageValue = parseFloat(indexes.lowerPageValue.toString());\n            var higherPageValue = parseFloat(indexes.higherPageValue.toString());\n            for (var i = lowerPageValue; i <= higherPageValue; i++) {\n                this.pdfViewer.textSelectionModule.applySelectionRangeOnScroll(i);\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {boolean} [cleardocumentCollection=false] - If true, clears the document text collection.\n     * @returns {void}\n     */\n    TextSearch.prototype.resetTextSearch = function (cleardocumentCollection) {\n        if (cleardocumentCollection === void 0) { cleardocumentCollection = false; }\n        this.resetVariables();\n        this.onTextSearchClose();\n        this.searchPageIndex = null;\n        this.searchIndex = 0;\n        this.updateSearchInputIcon(true);\n        this.enableNextButton(false);\n        this.enablePrevButton(false);\n        if (cleardocumentCollection) {\n            this.documentTextCollection = [];\n        }\n        this.isTextRetrieved = false;\n        this.isTextSearched = false;\n        this.isSearchText = false;\n        if (this.searchRequestHandler) {\n            this.searchRequestHandler.clear();\n        }\n        this.searchCount = 0;\n        this.searchString = '';\n    };\n    TextSearch.prototype.onTextSearchClose = function () {\n        this.isPrevSearch = false;\n        this.isTextSearch = false;\n        if (this.pdfViewerBase.pageCount > 0) {\n            this.clearAllOccurrences();\n        }\n    };\n    TextSearch.prototype.createRequestForSearch = function (pageIndex) {\n        // eslint-disable-next-line\n        var proxy = this;\n        var viewPortWidth = 816;\n        var viewPortHeight = this.pdfViewer.element.clientHeight;\n        var pageWidth = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].width;\n        var pageHeight = this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].height;\n        var tileCount = this.pdfViewerBase.getTileCount(pageWidth, pageHeight);\n        var noTileX = viewPortWidth >= pageWidth ? 1 : tileCount;\n        var noTileY = viewPortWidth >= pageWidth ? 1 : tileCount;\n        var isTileRendering = false;\n        var tileSettings = this.pdfViewer.tileRenderingSettings;\n        if (tileSettings.enableTileRendering && tileSettings.x > 0 && tileSettings.y > 0) {\n            noTileX = viewPortWidth >= pageWidth ? 1 : tileSettings.x;\n            noTileY = viewPortWidth >= pageWidth ? 1 : tileSettings.y;\n        }\n        if (noTileX > 1 && noTileY > 1) {\n            isTileRendering = true;\n        }\n        var _loop_1 = function (x) {\n            var _loop_2 = function (y) {\n                var _a, _b;\n                var jsonObject = {\n                    xCoordinate: x, yCoordinate: y, pageNumber: pageIndex, viewPortWidth: viewPortWidth, viewPortHeight: viewPortHeight, documentId: proxy.pdfViewerBase.getDocumentId(), hashId: proxy.pdfViewerBase.hashId, zoomFactor: proxy.pdfViewerBase.getZoomFactor(), tilecount: tileCount, action: 'Search', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.pdfViewerBase.documentId,\n                    tileXCount: noTileX, tileYCount: noTileY\n                };\n                if (this_1.pdfViewerBase.jsonDocumentId) {\n                    jsonObject.documentId = this_1.pdfViewerBase.jsonDocumentId;\n                }\n                var zoomFactor = this_1.pdfViewerBase.retrieveCurrentZoomFactor();\n                this_1.searchRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this_1.pdfViewer);\n                this_1.searchRequestHandler.url = this_1.pdfViewer.serviceUrl + '/' + this_1.pdfViewer.serverActionSettings.renderPages;\n                this_1.searchRequestHandler.responseType = 'json';\n                if (!this_1.pdfViewerBase.clientSideRendering) {\n                    this_1.searchRequestHandler.send(jsonObject);\n                }\n                this_1.searchRequestHandler.onSuccess = function (result) {\n                    var data = result.data;\n                    if (data) {\n                        if (typeof data !== 'object') {\n                            try {\n                                data = JSON.parse(data);\n                            }\n                            catch (error) {\n                                proxy.pdfViewerBase.onControlError(500, data, this.pdfViewer.serverActionSettings.renderPages);\n                                data = null;\n                            }\n                        }\n                        if (data) {\n                            proxy.searchRequestOnSuccess(data, proxy, viewPortWidth, pageWidth, isTileRendering, pageIndex, x, y, noTileX, noTileY);\n                        }\n                    }\n                };\n                this_1.searchRequestHandler.onFailure = function (result) {\n                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, this.pdfViewer.serverActionSettings.renderPages);\n                };\n                this_1.searchRequestHandler.onError = function (result) {\n                    proxy.pdfViewerBase.openNotificationPopup();\n                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, this.pdfViewer.serverActionSettings.renderPages);\n                };\n                if (this_1.pdfViewerBase.clientSideRendering) {\n                    var textDetailsId = this_1.pdfViewerBase.documentId + '_' + pageIndex + '_textDetails';\n                    var isTextNeed = this_1.pdfViewerBase.pageTextDetails ? this_1.pdfViewerBase.pageTextDetails[\"\" + textDetailsId] ? false : true : true;\n                    var cropBoxRect = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.Rect(0, 0, 0, 0);\n                    var mediaBoxRect = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_3__.Rect(0, 0, 0, 0);\n                    var currentPage = this_1.pdfViewer.pdfRenderer.loadedDocument.getPage(pageIndex);\n                    if (currentPage && currentPage._pageDictionary && currentPage._pageDictionary._map &&\n                        currentPage._pageDictionary._map.CropBox) {\n                        _a = currentPage._pageDictionary._map.CropBox, cropBoxRect.x = _a[0], cropBoxRect.y = _a[1], cropBoxRect.width = _a[2], cropBoxRect.height = _a[3];\n                    }\n                    if (currentPage && currentPage._pageDictionary && currentPage._pageDictionary._map &&\n                        currentPage._pageDictionary._map.MediaBox) {\n                        _b = currentPage._pageDictionary._map.MediaBox, mediaBoxRect.x = _b[0], mediaBoxRect.y = _b[1], mediaBoxRect.width = _b[2], mediaBoxRect.height = _b[3];\n                    }\n                    if (viewPortWidth >= pageWidth || !this_1.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                        this_1.pdfViewerBase.pdfViewerRunner.addTask({\n                            pageIndex: pageIndex,\n                            message: 'renderPageSearch',\n                            zoomFactor: proxy.pdfViewerBase.getZoomFactor(),\n                            isTextNeed: isTextNeed,\n                            textDetailsId: textDetailsId,\n                            cropBoxRect: cropBoxRect,\n                            mediaBoxRect: mediaBoxRect\n                        }, _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__.TaskPriorityLevel.High);\n                    }\n                    else {\n                        this_1.pdfViewerBase.pdfViewerRunner.addTask({\n                            pageIndex: pageIndex,\n                            message: 'renderImageAsTileSearch',\n                            zoomFactor: zoomFactor,\n                            tileX: x,\n                            tileY: y,\n                            tileXCount: noTileX,\n                            tileYCount: noTileY,\n                            isTextNeed: isTextNeed,\n                            textDetailsId: textDetailsId,\n                            cropBoxRect: cropBoxRect,\n                            mediaBoxRect: mediaBoxRect\n                        }, _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__.TaskPriorityLevel.High);\n                    }\n                    this_1.pdfViewerBase.pdfViewerRunner.onMessage('imageRenderedSearch,renderTileImageSearch', function (event) {\n                        switch (event.data.message) {\n                            case 'imageRenderedSearch':\n                                if (event.data.message === 'imageRenderedSearch') {\n                                    var canvas = document.createElement('canvas');\n                                    var _a = event.data, value = _a.value, width = _a.width, height = _a.height, pageIndex_1 = _a.pageIndex;\n                                    canvas.width = width;\n                                    canvas.height = height;\n                                    var canvasContext = canvas.getContext('2d');\n                                    var imageData = canvasContext.createImageData(width, height);\n                                    imageData.data.set(value);\n                                    canvasContext.putImageData(imageData, 0, 0);\n                                    var imageUrl = canvas.toDataURL();\n                                    proxy.pdfViewerBase.releaseCanvas(canvas);\n                                    var textBounds = event.data.textBounds;\n                                    var textContent = event.data.textContent;\n                                    var pageText = event.data.pageText;\n                                    var rotation = event.data.rotation;\n                                    var characterBounds = event.data.characterBounds;\n                                    var hyperlinksDetails = proxy.pdfViewer.pdfRendererModule.getHyperlinks(pageIndex_1);\n                                    var data = ({\n                                        image: imageUrl, pageNumber: pageIndex_1, uniqueId: proxy.pdfViewerBase.documentId,\n                                        pageWidth: width, zoomFactor: event.data.zoomFactor, hyperlinks: hyperlinksDetails.hyperlinks,\n                                        hyperlinkBounds: hyperlinksDetails.hyperlinkBounds,\n                                        linkAnnotation: hyperlinksDetails.linkAnnotation, linkPage: hyperlinksDetails.linkPage,\n                                        annotationLocation: hyperlinksDetails.annotationLocation, characterBounds: characterBounds\n                                    });\n                                    if (event.data.isTextNeed) {\n                                        data.textBounds = textBounds;\n                                        data.textContent = textContent;\n                                        data.rotation = rotation;\n                                        data.pageText = pageText;\n                                        proxy.pdfViewerBase.storeTextDetails(pageIndex_1, textBounds, textContent, pageText, rotation, characterBounds);\n                                    }\n                                    else {\n                                        var textDetails = JSON.parse(proxy.pdfViewerBase.pageTextDetails[\"\" + event.data.textDetailsId]);\n                                        data.textBounds = textDetails.textBounds;\n                                        data.textContent = textDetails.textContent;\n                                        data.rotation = textDetails.rotation;\n                                        data.pageText = textDetails.pageText;\n                                        data.characterBounds = textDetails.characterBounds;\n                                    }\n                                    if (data && data.image && data.uniqueId === proxy.pdfViewerBase.documentId) {\n                                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderPages, data);\n                                        var pageNumber = (data.pageNumber !== undefined) ? data.pageNumber : pageIndex_1;\n                                        var blobObj = proxy.pdfViewerBase.createBlobUrl(data.image.split('base64,')[1], 'image/png');\n                                        var Url = URL || webkitURL;\n                                        var blobUrl = Url.createObjectURL(blobObj);\n                                        var storeObject = {\n                                            image: blobUrl, width: data.pageWidth, uniqueId: data.uniqueId, zoomFactor: data.zoomFactor\n                                        };\n                                        proxy.pdfViewerBase.storeImageData(pageNumber, storeObject);\n                                        proxy.searchRequestOnSuccess(data, proxy, viewPortWidth, pageWidth, isTileRendering, pageIndex_1, x, y, noTileX, noTileY);\n                                    }\n                                }\n                                break;\n                            case 'renderTileImageSearch':\n                                if (event.data.message === 'renderTileImageSearch') {\n                                    var canvas = document.createElement('canvas');\n                                    var _b = event.data, value = _b.value, w = _b.w, h = _b.h, noTileX_1 = _b.noTileX, noTileY_1 = _b.noTileY, x_1 = _b.x, y_1 = _b.y, pageIndex_2 = _b.pageIndex;\n                                    canvas.setAttribute('height', h);\n                                    canvas.setAttribute('width', w);\n                                    canvas.width = w;\n                                    canvas.height = h;\n                                    var canvasContext = canvas.getContext('2d');\n                                    var imageData = canvasContext.createImageData(w, h);\n                                    imageData.data.set(value);\n                                    canvasContext.putImageData(imageData, 0, 0);\n                                    var imageUrl = canvas.toDataURL();\n                                    proxy.pdfViewerBase.releaseCanvas(canvas);\n                                    var tileWidth = w;\n                                    var tileHeight = h;\n                                    var textBounds = event.data.textBounds;\n                                    var textContent = event.data.textContent;\n                                    var pageText = event.data.pageText;\n                                    var rotation = event.data.rotation;\n                                    var characterBounds = event.data.characterBounds;\n                                    var tileData = {\n                                        image: imageUrl,\n                                        noTileX: noTileX_1,\n                                        noTileY: noTileY_1,\n                                        pageNumber: pageIndex_2,\n                                        tileX: x_1,\n                                        tileY: y_1,\n                                        uniqueId: proxy.pdfViewerBase.documentId,\n                                        pageWidth: pageWidth,\n                                        width: tileWidth,\n                                        transformationMatrix: {\n                                            Values: [1, 0, 0, 1, tileWidth * x_1, tileHeight * y_1, 0, 0, 0]\n                                        },\n                                        zoomFactor: event.data.zoomFactor,\n                                        characterBounds: characterBounds,\n                                        isTextNeed: event.data.isTextNeed,\n                                        textDetailsId: event.data.textDetailsId\n                                    };\n                                    if (tileData && tileData.image && tileData.uniqueId === proxy.pdfViewerBase.documentId) {\n                                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderPages, tileData);\n                                        var pageNumber = (tileData.pageNumber !== undefined) ? tileData.pageNumber : pageIndex_2;\n                                        if (x_1 === 0 && y_1 === 0) {\n                                            var blobObj = proxy.pdfViewerBase.createBlobUrl(tileData.image.split('base64,')[1], 'image/png');\n                                            var Url = URL || webkitURL;\n                                            var blobUrl = Url.createObjectURL(blobObj);\n                                            var storeObject = {\n                                                image: blobUrl, width: tileData.pageWidth, uniqueId: tileData.uniqueId,\n                                                tileX: tileData.tileX, tileY: tileData.tileY,\n                                                zoomFactor: tileData.zoomFactor,\n                                                transformationMatrix: tileData.transformationMatrix\n                                            };\n                                            if (tileData.isTextNeed) {\n                                                tileData.textBounds = textBounds;\n                                                tileData.textContent = textContent;\n                                                tileData.rotation = rotation;\n                                                tileData.pageText = pageText;\n                                                proxy.pdfViewerBase.storeTextDetails(pageIndex_2, textBounds, textContent, pageText, rotation, characterBounds);\n                                            }\n                                            else {\n                                                var textDetails = JSON.parse(proxy.pdfViewerBase.pageTextDetails[\"\" + tileData.textDetailsId]);\n                                                tileData.textBounds = textDetails.textBounds;\n                                                tileData.textContent = textDetails.textContent;\n                                                tileData.rotation = textDetails.rotation;\n                                                tileData.pageText = textDetails.pageText;\n                                                tileData.characterBounds = textDetails.characterBounds;\n                                            }\n                                            proxy.pdfViewerBase.storeImageData(pageNumber, storeObject, tileData.tileX, tileData.tileY);\n                                        }\n                                        else {\n                                            var blobObj = proxy.pdfViewerBase.createBlobUrl(tileData.image.split('base64,')[1], 'image/png');\n                                            var Url = URL || webkitURL;\n                                            var blobUrl = Url.createObjectURL(blobObj);\n                                            var storeObject = {\n                                                image: blobUrl, width: tileData.width, uniqueId: tileData.uniqueId,\n                                                tileX: tileData.tileX, tileY: tileData.tileY, zoomFactor: tileData.zoomFactor,\n                                                transformationMatrix: tileData.transformationMatrix\n                                            };\n                                            proxy.pdfViewerBase.storeImageData(pageNumber, storeObject, tileData.tileX, tileData.tileY);\n                                        }\n                                        proxy.searchRequestOnSuccess(tileData, proxy, viewPortWidth, pageWidth, isTileRendering, pageIndex_2, x_1, y_1, noTileX_1, noTileY_1);\n                                    }\n                                }\n                                break;\n                        }\n                    });\n                }\n            };\n            for (var y = 0; y < noTileY; y++) {\n                _loop_2(y);\n            }\n        };\n        var this_1 = this;\n        for (var x = 0; x < noTileX; x++) {\n            _loop_1(x);\n        }\n    };\n    TextSearch.prototype.searchRequestOnSuccess = function (data, proxy, viewPortWidth, pageWidth, isTileRendering, pageIndex, x, y, noTileX, noTileY) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.pageText) && data.uniqueId === proxy.pdfViewerBase.documentId) {\n            this.getSearchCountText();\n            proxy.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.renderPages, data);\n            var pageNumber = (data.pageNumber !== undefined) ? data.pageNumber : pageIndex;\n            if (viewPortWidth >= pageWidth) {\n                proxy.pdfViewerBase.storeWinData(data, pageNumber);\n            }\n            else {\n                proxy.pdfViewerBase.storeWinData(data, pageNumber, data.tileX, data.tileY);\n            }\n            if (!isTileRendering) {\n                if (!this.isMessagePopupOpened) {\n                    proxy.initSearch(pageIndex, false);\n                }\n            }\n            else {\n                if (x === (noTileX - 1) && y === (noTileY - 1)) {\n                    if (!this.isMessagePopupOpened) {\n                        proxy.initSearch(pageIndex, false);\n                    }\n                }\n            }\n        }\n        else if (isTileRendering && data.uniqueId === proxy.pdfViewerBase.documentId) {\n            proxy.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.renderPages, data);\n            var pageNumber = (data.pageNumber !== undefined) ? data.pageNumber : pageIndex;\n            proxy.pdfViewerBase.storeWinData(data, pageNumber, data.tileX, data.tileY);\n            if (x === (noTileX - 1) && y === (noTileY - 1)) {\n                proxy.initSearch(pageIndex, false);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.getPDFDocumentTexts = function () {\n        var startIndex = 0;\n        var endIndex = 50;\n        var pageCount = this.pdfViewerBase.pageCount;\n        if (endIndex >= pageCount) {\n            endIndex = pageCount;\n        }\n        this.createRequestForGetPdfTexts(startIndex, endIndex);\n    };\n    /**\n     * @param {number} startIndex - It describes about the start index\n     * @param {number} endIndex - It describes about the end index\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.createRequestForGetPdfTexts = function (startIndex, endIndex) {\n        // eslint-disable-next-line\n        var proxy = this;\n        var jsonObject = { pageStartIndex: startIndex, pageEndIndex: endIndex, documentId: proxy.pdfViewerBase.getDocumentId(), hashId: proxy.pdfViewerBase.hashId, action: 'RenderPdfTexts', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.pdfViewerBase.documentId };\n        if (this.pdfViewerBase.jsonDocumentId) {\n            jsonObject.documentId = this.pdfViewerBase.jsonDocumentId;\n        }\n        this.searchRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        this.searchRequestHandler.url = this.pdfViewer.serviceUrl + '/' + this.pdfViewer.serverActionSettings.renderTexts;\n        this.searchRequestHandler.responseType = 'json';\n        if (!this.pdfViewerBase.clientSideRendering) {\n            this.searchRequestHandler.send(jsonObject);\n        }\n        this.searchRequestHandler.onSuccess = function (result) {\n            var data = result.data;\n            if (data) {\n                if (typeof data !== 'object') {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (error) {\n                        proxy.pdfViewerBase.onControlError(500, data, this.pdfViewer.serverActionSettings.renderTexts);\n                        data = null;\n                    }\n                }\n                if (data) {\n                    proxy.pdfTextSearchRequestOnSuccess(data, proxy, startIndex, endIndex);\n                }\n            }\n        };\n        this.searchRequestHandler.onFailure = function (result) {\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, this.pdfViewer.serverActionSettings.renderTexts);\n        };\n        this.searchRequestHandler.onError = function (result) {\n            proxy.pdfViewerBase.openNotificationPopup();\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, this.pdfViewer.serverActionSettings.renderTexts);\n        };\n        if (this.pdfViewerBase.clientSideRendering) {\n            var requestType = 'pdfTextSearchRequest';\n            this.pdfViewer.pdfRendererModule.getDocumentText(jsonObject, requestType);\n        }\n    };\n    /**\n     * @private\n     * @param {any} data - It gets the data\n     * @param {number} startIndex - It gets the starting index\n     * @param {number} endIndex - It gets the ending index\n     * @returns {void}\n     */\n    TextSearch.prototype.pdfTextSearchRequestSuccess = function (data, startIndex, endIndex) {\n        this.pdfTextSearchRequestOnSuccess(data, this, startIndex, endIndex);\n    };\n    TextSearch.prototype.pdfTextSearchRequestOnSuccess = function (data, proxy, startIndex, endIndex) {\n        if (data.documentTextCollection && data.uniqueId === proxy.pdfViewerBase.documentId) {\n            if (!data.isNeedToRender) {\n                proxy.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.renderTexts, data);\n                proxy.documentTextCollection = this.updateDocumentCollection(proxy.documentTextCollection, data.documentTextCollection);\n                var pageCount = proxy.pdfViewerBase.pageCount;\n                if (endIndex !== pageCount) {\n                    startIndex = endIndex;\n                    endIndex = endIndex + 50;\n                    if (endIndex >= pageCount) {\n                        endIndex = pageCount;\n                    }\n                    proxy.createRequestForGetPdfTexts(startIndex, endIndex);\n                }\n                else {\n                    proxy.isTextRetrieved = true;\n                    proxy.pdfViewer.pdfRendererModule.documentTextCollection = [];\n                    proxy.pdfViewer.fireTextExtractionCompleted(proxy.documentTextCollection);\n                    if (proxy.isTextSearched && proxy.searchString.length > 0) {\n                        proxy.textSearch(proxy.searchString);\n                        proxy.isTextSearched = false;\n                    }\n                }\n            }\n            else {\n                proxy.findTextDocumentCollection = this.updateDocumentCollection(proxy.findTextDocumentCollection, data.documentTextCollection);\n                proxy.pdfViewer.pdfRendererModule.documentTextCollection = [];\n            }\n        }\n    };\n    TextSearch.prototype.updateDocumentCollection = function (textCollection, eventDataCollection) {\n        if (textCollection && textCollection.length > 0) {\n            if ((this.pdfViewer.isVue) && !(this.pdfViewer.isVue3)) {\n                textCollection = this.orderPdfTextCollections(JSON.parse(\"[\" + JSON.stringify(textCollection).slice(1, -1) + \",\" + JSON.stringify(eventDataCollection).slice(1, -1) + \"]\"));\n            }\n            else {\n                textCollection = eventDataCollection.concat(textCollection);\n                textCollection = this.orderPdfTextCollections(textCollection);\n            }\n        }\n        else {\n            if ((this.pdfViewer.isVue) && !(this.pdfViewer.isVue3)) {\n                textCollection = JSON.parse(\"[\" + JSON.stringify(eventDataCollection).slice(1, -1) + \"]\");\n            }\n            else {\n                textCollection = eventDataCollection;\n            }\n        }\n        return textCollection;\n    };\n    TextSearch.prototype.orderPdfTextCollections = function (oldCollection) {\n        var annotationCollectionList = [];\n        for (var i = 0; i < oldCollection.length; i++) {\n            if (annotationCollectionList.length === 0) {\n                annotationCollectionList.push(oldCollection[parseInt(i.toString(), 10)]);\n            }\n            else {\n                if (parseInt(Object.keys(oldCollection[parseInt(i.toString(), 10)])[0], 10) >\n                    parseInt(Object.keys(annotationCollectionList[annotationCollectionList.length - 1])[0], 10)) {\n                    annotationCollectionList.push(oldCollection[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    for (var j = 0; j < annotationCollectionList.length; j++) {\n                        if ((parseInt(Object.keys(oldCollection[parseInt(i.toString(), 10)])[0], 10) <\n                            parseInt(Object.keys(annotationCollectionList[parseInt(j.toString(), 10)])[0], 10))) {\n                            annotationCollectionList.splice(j, 0, oldCollection[parseInt(i.toString(), 10)]);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return annotationCollectionList;\n    };\n    TextSearch.prototype.createSearchBoxButtons = function (id, className) {\n        var button = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', { id: this.pdfViewer.element.id + '_' + id, className: 'e-btn e-icon-btn e-pv-text-search-btn ' + className });\n        button.setAttribute('type', 'button');\n        var iconSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_' + id + 'Icon', className: 'e-pv-icon-search ' + className + '-icon' });\n        button.disabled = true;\n        button.appendChild(iconSpan);\n        return button;\n    };\n    TextSearch.prototype.enablePrevButton = function (isEnable) {\n        if ((!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode)) {\n            if (isEnable) {\n                this.prevSearchBtn.removeAttribute('disabled');\n            }\n            else {\n                if (this.prevSearchBtn) {\n                    this.prevSearchBtn.disabled = true;\n                }\n            }\n        }\n    };\n    TextSearch.prototype.enableNextButton = function (isEnable) {\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n            if (isEnable) {\n                this.nextSearchBtn.removeAttribute('disabled');\n            }\n            else {\n                if (this.nextSearchBtn) {\n                    this.nextSearchBtn.disabled = true;\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.resetVariables = function () {\n        this.searchedPages = [];\n        this.searchMatches = [];\n        this.searchedOccurrences = [];\n    };\n    TextSearch.prototype.resetVariablesTextSearch = function () {\n        this.getSearchTextDetails = {};\n        this.isTextSearchHandled = false;\n    };\n    /**\n     * @param {HTMLElement} element - It describes about the element\n     * @param {HTMLElement} inputElement - It describes about the input element\n     * @param {boolean} isMobileSearch - It indicates is mobile search or not\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.searchButtonClick = function (element, inputElement, isMobileSearch) {\n        this.isMessagePopupOpened = false;\n        if (element.classList.contains('e-pv-search-icon')) {\n            this.initiateTextSearch(inputElement.value, isMobileSearch);\n        }\n        else if (element.classList.contains('e-pv-search-close')) {\n            this.showLoadingIndicator(false);\n            inputElement.value = '';\n            this.resetTextSearch();\n            if (this.searchCountEle) {\n                this.searchCountEle.innerHTML = '';\n                this.adjustInputContainerWidth();\n            }\n            inputElement.focus();\n        }\n    };\n    TextSearch.prototype.updateSearchInputIcon = function (isEnable) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            if (this.searchBtn && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode)) {\n                this.searchBtn = this.pdfViewerBase.getElement('_search_box-icon').children[0].children[0];\n            }\n        }\n        if (this.searchBtn) {\n            if (isEnable) {\n                this.searchBtn.classList.remove('e-pv-search-close');\n                this.searchBtn.classList.add('e-pv-search-icon');\n            }\n            else {\n                this.searchBtn.classList.remove('e-pv-search-icon');\n                this.searchBtn.classList.add('e-pv-search-close');\n            }\n        }\n    };\n    TextSearch.prototype.onMessageBoxOpen = function () {\n        var _this = this;\n        this.pdfViewer.fireTextSearchComplete(this.searchString, this.isMatchCase);\n        this.showLoadingIndicator(false);\n        this.isMessagePopupOpened = true;\n        if (this.pdfViewer.showNotificationDialog) {\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_Nomatches');\n                    promise.then(function (value) {\n                        _this.pdfViewerBase.createNotificationPopup(value);\n                    });\n                }\n                else {\n                    if (this.searchMatches.length > 0) {\n                        this.pdfViewerBase.createNotificationPopup(this.pdfViewer.localeObj.getConstant('No More Matches'));\n                    }\n                    else {\n                        this.pdfViewerBase.createNotificationPopup(this.pdfViewer.localeObj.getConstant('No Matches'));\n                    }\n                }\n            }\n            else {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_NoTextFound');\n                    promise.then(function (value) {\n                        _this.pdfViewerBase.navigationPane.createTooltipMobile(value);\n                    });\n                }\n                else {\n                    if (this.searchMatches.length > 0) {\n                        this.pdfViewerBase.navigationPane.createTooltipMobile(this.pdfViewer.localeObj.getConstant('No More Search Matches'));\n                    }\n                    else {\n                        this.pdfViewerBase.navigationPane.createTooltipMobile(this.pdfViewer.localeObj.getConstant('No Search Matches'));\n                    }\n                }\n            }\n        }\n        else {\n            setTimeout(function () {\n                _this.isMessagePopupOpened = false;\n            }, 100);\n        }\n        this.currentOccurrence = this.searchCount;\n        this.isLastOccurrenceCompleted = true;\n        if (this.currentOccurrence === this.searchCount) {\n            this.currentOccurrence = 0;\n        }\n        if (this.searchCountEle && this.isSingleSearch) {\n            this.getSearchCountText();\n            this.adjustInputContainerWidth();\n        }\n        this.searchedPages = [];\n        this.searchedOccurrences = [];\n        this.searchIndex = 0;\n        if (!this.programaticalSearch) {\n            if (!this.isDocumentTextCollectionReady) {\n                this.hightlightSearchedTexts(undefined, true, true);\n            }\n            else {\n                this.highlightAfterComplete();\n            }\n        }\n        this.searchString = '';\n        this.searchPageIndex = this.startSearchPageIndex;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.searchPageIndex)) {\n            this.pdfViewerBase.updateScrollTop(0);\n        }\n        else {\n            this.pdfViewerBase.updateScrollTop(this.searchPageIndex);\n        }\n        this.showLoadingIndicator(false);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.highlightAfterComplete = function () {\n        for (var k = 0; k < this.searchMatches.length; k++) {\n            if (this.searchMatches[parseInt(k.toString(), 10)] && this.searchMatches[parseInt(k.toString(), 10)].length > 0) {\n                var matches = this.searchMatches[parseInt(k.toString(), 10)];\n                var className = 'e-pv-search-text-highlightother';\n                var characterBounds = this.pdfViewerBase.textLayer.characterBound[parseInt(k.toString(), 10)];\n                if (characterBounds && matches !== undefined) {\n                    for (var i = 0; i < matches.length; i++) {\n                        if ((matches[parseInt(i.toString(), 10)].length)) {\n                            var documentIndex = this.documentTextCollection[parseInt(k.toString(), 10)][parseInt(k.toString(), 10)];\n                            var pageTextData = documentIndex.pageText ? documentIndex.pageText : documentIndex.PageText;\n                            var searchString = this.searchInput.value;\n                            if (!this.isMatchCase) {\n                                searchString = searchString.toLowerCase();\n                                pageTextData = pageTextData.toLowerCase();\n                            }\n                            var arrayReturns = this.correctLinetext(searchString, null, pageTextData);\n                            for (var j = 0; j < arrayReturns.length; j++) {\n                                var idString = void 0;\n                                if (j === 0) {\n                                    idString = '_searchtext_' + k + '_' + i;\n                                }\n                                else {\n                                    idString = '_searchtext_' + k + '_' + i + '_' + j;\n                                }\n                                if (!this.pdfViewerBase.getElement(idString)) {\n                                    this.addDivForSearch(i, k, characterBounds, (arrayReturns[parseInt(j.toString(), 10)].trim()).length, className, j);\n                                }\n                            }\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(matches[parseInt(i.toString(), 10)].length)) {\n                            this.addDivForSearch(i, k, characterBounds, this.searchInput.value.length, className, undefined);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Searches the target text in the PDF document and highlights the occurrences in the pages\n     *\n     * @param  {string} searchText - Specifies the searchText content\n     * @param  {boolean} isMatchCase - If set true , its highlights the MatchCase content\n     * @returns {void}\n     */\n    TextSearch.prototype.searchText = function (searchText, isMatchCase) {\n        var _this = this;\n        if (this.documentTextCollection.length === this.pdfViewerBase.pageCount) {\n            this.isDocumentTextCollectionReady = true;\n        }\n        else {\n            var updateInterval_1 = setInterval(function () {\n                if (_this.documentTextCollection.length === _this.pdfViewerBase.pageCount) {\n                    clearInterval(updateInterval_1);\n                    _this.calculateSearchCount(searchText, _this.documentTextCollection);\n                    _this.getSearchTextDetails = {};\n                    _this.isDocumentTextCollectionReady = true;\n                }\n            }, 1000);\n        }\n        if (this.isDocumentTextCollectionReady || !this.pdfViewerBase.clientSideRendering) {\n            if (searchText && searchText.length > 0 && searchText[searchText.length - 1] === ' ') {\n                searchText = searchText.slice(0, searchText.length - 1);\n            }\n            if (this.pdfViewer.enableHtmlSanitizer && searchText) {\n                searchText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(searchText);\n            }\n            this.searchString = searchText;\n            this.isMatchCase = isMatchCase;\n            this.searchIndex = 0;\n            this.programaticalSearch = true;\n            this.isSingleSearch = true;\n            this.isTextSearchHandled = false;\n            this.calculateSearchCount(searchText, this.documentTextCollection);\n            this.textSearch(searchText);\n        }\n        else {\n            if (this.searchString !== searchText) {\n                this.isSingleSearch = true;\n                this.searchString = searchText;\n                this.isMatchCase = isMatchCase;\n                this.searchIndex = 0;\n                this.searchCount = 0;\n                this.searchPageIndex = 0;\n                this.programaticalSearch = true;\n                this.textSearchWhileLoading(searchText, isMatchCase);\n            }\n        }\n    };\n    /**\n     * Searches the next occurrence of the searched text from the current occurrence of the PdfViewer.\n     *\n     * @returns {void}\n     */\n    TextSearch.prototype.searchNext = function () {\n        this.nextSearch();\n    };\n    /**\n     * Searches the previous occurrence of the searched text from the current occurrence of the PdfViewer.\n     *\n     * @returns {void}\n     */\n    TextSearch.prototype.searchPrevious = function () {\n        this.prevSearch();\n    };\n    /**\n     * Cancels the text search of the PdfViewer.\n     *\n     * @returns {void}\n     */\n    TextSearch.prototype.cancelTextSearch = function () {\n        this.resetTextSearch();\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.destroy = function () {\n        this.searchMatches = undefined;\n    };\n    /**\n     * Searches for the specified text or an array of strings within the document and returns the bounding rectangles for each occurrence. The search can be case-sensitive based on the provided parameters. If a specific page index is provided, it returns the bounding rectangles for these search strings on that page; otherwise, it returns the bounding rectangles for all pages in the document where the strings were found.\n     *\n     * @param  {string | string[]} searchText - Specifies the search text content. If an array is passed, it will search for multiple texts.\n     * @param  {boolean} isMatchCase - If set to true, it will consider match case during the search.\n     * @param  {number} [pageIndex] - Optional parameter to specify a particular page to search in the document.\n     * @returns { Record<string, SearchResultModel[]> | SearchResultModel[]} - If `searchText` is a string, it returns an array of `SearchResult` objects, where each object contains the page index and an array of bounds representing the locations of the search text found on that page. If `searchText` is an array of strings, it returns an object where each key is a search text string, and each value is an array of `SearchResult` objects. Each `SearchResult` object contains the page index and an array of bounds representing the locations of that search text on the corresponding page.\n     */\n    TextSearch.prototype.findText = function (searchText, isMatchCase, pageIndex) {\n        var _this = this;\n        this.isMatchCase = isMatchCase;\n        var searchTerms = Array.isArray(searchText) ? searchText : [searchText];\n        var searchResults = {};\n        var startIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageIndex) ? pageIndex : 0;\n        var endIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageIndex) ? pageIndex + 1 : this.documentTextCollection.length;\n        var fetchTextCollection = function (endIndex) {\n            return _this.documentTextCollection[parseInt(endIndex.toString(), 10)] ?\n                _this.documentTextCollection[parseInt(endIndex.toString(), 10)][parseInt(endIndex.toString(), 10)] : null;\n        };\n        var documentTextCollection = fetchTextCollection(endIndex - 1);\n        var findTextResult = [];\n        if (documentTextCollection && documentTextCollection.TextData.length > 0) {\n            findTextResult = this.getSearchResults(searchText, searchTerms, searchResults, startIndex, endIndex, this.documentTextCollection);\n        }\n        return findTextResult;\n    };\n    /**\n     * Searches for the specified text or an array of strings within the document and returns the bounding rectangles for each occurrence. The search can be case-sensitive based on the provided parameters. If a specific page index is provided, it returns the bounding rectangles for these search strings on that page; otherwise, it returns the bounding rectangles for all pages in the document where the strings were found.\n     *\n     * @param  {string | string[]} searchText - Specifies the search text content. If an array is passed, it will search for multiple texts.\n     * @param  {boolean} isMatchCase - If set to true, it will consider match case during the search.\n     * @param  {number} [pageIndex] - Optional parameter to specify a particular page to search in the document.\n     * @returns {Promise<SearchResultModel[] | Record<string, SearchResultModel[]>>} - If `searchText` is a string, the method returns a Promise that resolves to an array of `SearchResult` objects, where each object contains the page index and an array of bounds representing the locations of the search text found on that page. If `searchText` is an array of strings, it returns a Promise that resolves to an object, where each key is a search text string, and each value is an array of `SearchResult` objects. Each `SearchResult` object contains the page index and an array of bounds representing the locations of that search text on the corresponding page.\n     */\n    TextSearch.prototype.findTextAsync = function (searchText, isMatchCase, pageIndex) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var proxy = this;\n        this.isMatchCase = isMatchCase;\n        this.pdfViewer.pdfRenderer.searchResults = {};\n        var searchTerms = Array.isArray(searchText) ? searchText : [searchText];\n        var searchResults = {};\n        var startIndex = pageIndex ? pageIndex : 0;\n        var endIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageIndex) ? pageIndex + 1 : this.pdfViewerBase.pageCount;\n        var jsonObject = { pageStartIndex: startIndex, pageEndIndex: endIndex, documentId: proxy.pdfViewerBase.getDocumentId(), hashId: proxy.pdfViewerBase.hashId, action: 'RenderPdfTexts', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.pdfViewerBase.documentId };\n        if (this.pdfViewerBase.jsonDocumentId) {\n            jsonObject.documentId = this.pdfViewerBase.jsonDocumentId;\n        }\n        var requestType = 'pdfTextSearchRequest';\n        if (this.pdfViewer.extractTextOption === _index__WEBPACK_IMPORTED_MODULE_2__.ExtractTextOption.None ||\n            this.pdfViewer.extractTextOption === _index__WEBPACK_IMPORTED_MODULE_2__.ExtractTextOption.TextOnly) {\n            return new Promise(function (resolve, reject) {\n                var processPage = function (i, msg) {\n                    proxy.pdfViewerBase.pdfViewerRunner.addTask({\n                        pageIndex: i,\n                        message: msg,\n                        zoomFactor: proxy.pdfViewer.magnificationModule.zoomFactor,\n                        isTextNeed: true,\n                        isLayout: true,\n                        isSkipCharacterBounds: false,\n                        isNeedToRender: true,\n                        jsonObject: jsonObject,\n                        isRenderText: true,\n                        requestType: requestType\n                    }, _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__.TaskPriorityLevel.Medium);\n                    proxy.pdfViewerBase.pdfViewerRunner.onMessage(msg, function (event) {\n                        if ((event.data.message.indexOf('extractText') !== -1)) {\n                            proxy.pdfViewer.pdfRendererModule.textExtractionOnmessage(event, null, null);\n                            if (event.data.pageIndex + 1 === endIndex) {\n                                resolve(_this.getSearchResults(searchText, searchTerms, searchResults, startIndex, endIndex, proxy.findTextDocumentCollection));\n                                proxy.findTextDocumentCollection = [];\n                            }\n                        }\n                    });\n                };\n                var msg = 'extractText_' + _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_5__.PdfViewerUtils.createGUID();\n                for (var i = startIndex; i < endIndex; i++) {\n                    processPage(i, msg);\n                }\n            });\n        }\n        else {\n            return Promise.resolve(this.getSearchResults(searchText, searchTerms, searchResults, startIndex, endIndex, proxy.documentTextCollection));\n        }\n    };\n    TextSearch.prototype.getSearchResults = function (searchText, searchTerms, searchResults, startIndex, endIndex, documentCollection) {\n        for (var _i = 0, searchTerms_1 = searchTerms; _i < searchTerms_1.length; _i++) {\n            var term = searchTerms_1[_i];\n            this.calculateSearchCount(term, documentCollection);\n            searchResults[\"\" + term] = [];\n            for (var i = startIndex; i < endIndex; i++) {\n                var matches = this.searchMatches[parseInt(i.toString(), 10)];\n                if (!matches) {\n                    continue;\n                }\n                var pageIndex = parseInt(Object.keys(documentCollection[parseInt(i.toString(), 10)])[0], 10);\n                var documentIndex = documentCollection[parseInt(i.toString(), 10)][parseInt(pageIndex.toString(), 10)];\n                var characterBounds = documentIndex.textData ? documentIndex.textData : documentIndex.TextData;\n                if (!characterBounds) {\n                    continue;\n                }\n                var pageResult = { pageIndex: i, bounds: [] };\n                for (var _a = 0, matches_1 = matches; _a < matches_1.length; _a++) {\n                    var matchIndex = matches_1[_a];\n                    var rect = this.calculateTextBounds(term, matchIndex, characterBounds);\n                    pageResult.bounds.push(rect);\n                }\n                if (pageResult.bounds.length > 0) {\n                    searchResults[\"\" + term].push(pageResult);\n                }\n            }\n        }\n        return Array.isArray(searchText) ? searchResults : searchResults[searchText];\n    };\n    /**\n     * Calculates the bounding rectangle for a given search text within the PDF based on character bounds.\n     *\n     * @param {string} searchText - The text string for which to calculate the bounding rectangle.\n     * @param {any} matchIndex - The starting index of the match within the character bounds array.\n     * @param {any} characterBounds - An array containing the bounds of each character on the page.\n     * @private\n     * @returns {IPdfRectBounds} - The calculated bounding rectangle, specifying the position and dimensions\n     *                             (x, y, width, height) of the highlighted text area on the PDF page.\n     */\n    TextSearch.prototype.calculateTextBounds = function (searchText, matchIndex, characterBounds) {\n        var startBound = characterBounds[parseInt(matchIndex.toString(), 10)].Bounds;\n        var left = startBound.X;\n        var top = startBound.Y;\n        var width = 0;\n        var height = startBound.Height;\n        var lastRight = 0;\n        for (var k = 0; k < searchText.length; k++) {\n            var index = matchIndex && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(matchIndex.length) && matchIndex.length > 1 ?\n                matchIndex[0] : matchIndex;\n            var currentBound = characterBounds[parseInt((index + k).toString(), 10)].Bounds;\n            height = Math.max(height, currentBound.Height);\n            if (k === searchText.length - 1) {\n                lastRight = currentBound.Right;\n            }\n        }\n        width = lastRight - left;\n        return {\n            x: left,\n            y: top,\n            width: width,\n            height: height\n        };\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    TextSearch.prototype.getModuleName = function () {\n        return 'TextSearch';\n    };\n    return TextSearch;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/text-search/text-search.js?");

/***/ })

}]);