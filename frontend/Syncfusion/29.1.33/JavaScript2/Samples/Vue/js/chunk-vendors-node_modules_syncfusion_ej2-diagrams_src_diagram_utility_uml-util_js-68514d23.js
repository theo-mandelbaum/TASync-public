"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_utility_uml-util_js-68514d23"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/uml-util.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/uml-util.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSeparator: () => (/* binding */ addSeparator),\n/* harmony export */   addSeparatorChild: () => (/* binding */ addSeparatorChild),\n/* harmony export */   getClassAttributesChild: () => (/* binding */ getClassAttributesChild),\n/* harmony export */   getClassMembers: () => (/* binding */ getClassMembers),\n/* harmony export */   getClassMembersChild: () => (/* binding */ getClassMembersChild),\n/* harmony export */   getClassNodes: () => (/* binding */ getClassNodes),\n/* harmony export */   getClassNodesChild: () => (/* binding */ getClassNodesChild),\n/* harmony export */   getStyle: () => (/* binding */ getStyle),\n/* harmony export */   getULMClassifierShapes: () => (/* binding */ getULMClassifierShapes)\n/* harmony export */ });\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _objects_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../objects/node */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n\n\n\n/**\n * These utility methods help to process the data and to convert it to desired dimensions\n */\n/**\n * getULMClassifierShapes method \\\n *\n * @returns {DiagramElement} getULMClassifierShapes method .\\\n * @param { DiagramElement} content - provide the content  value.\n * @param {NodeModel} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\nfunction getULMClassifierShapes(content, node, diagram) {\n    var classifier;\n    var textWrap = 'NoWrap';\n    if (node.shape.classifier === 'Class') {\n        classifier = node.shape.classShape;\n    }\n    else if (node.shape.classifier === 'Enumeration') {\n        classifier = node.shape.enumerationShape;\n    }\n    else if (node.shape.classifier === 'Interface') {\n        classifier = node.shape.interfaceShape;\n    }\n    //let attributeText: string = '';\n    node.container = { type: 'Stack', orientation: 'Vertical' };\n    node.constraints = (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) &\n        ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize);\n    node.style = {\n        fill: node.style.fill, strokeColor: node.style.strokeColor,\n        strokeWidth: 1.5\n    };\n    node.children = [];\n    if (node.maxWidth) {\n        textWrap = 'Wrap';\n    }\n    var newObj = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n        id: node.id + '_umlClass_header',\n        annotations: [\n            {\n                id: 'name', content: classifier.name,\n                offset: { x: 0.5, y: 0.65 }, margin: { left: 10, right: 10 },\n                style: {\n                    bold: true, fontSize: 14, color: classifier.style.color, fill: classifier.style.fill,\n                    textWrapping: textWrap\n                }\n            }, {\n                content: '<<' + node.shape.classifier + '>>', margin: { left: 10, right: 10 },\n                id: 'class', style: {\n                    fontSize: classifier.style.fontSize,\n                    color: classifier.style.color, fill: classifier.style.fill,\n                    textWrapping: textWrap\n                }, offset: { x: 0.5, y: 0.3 }, constraints: _enum_enum__WEBPACK_IMPORTED_MODULE_0__.AnnotationConstraints.ReadOnly\n            }\n        ],\n        constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize),\n        verticalAlignment: 'Stretch',\n        horizontalAlignment: 'Stretch',\n        style: { fill: node.style.fill, strokeColor: (node.style.strokeColor === 'black') ? '#ffffff00' : node.style.strokeColor }\n    }, true);\n    diagram.initObject(newObj);\n    diagram.nodes.push(newObj);\n    diagram.UpdateBlazorDiagramModel(newObj, 'Node');\n    node.children.push(newObj.id);\n    getClassNodes(node, diagram, classifier, textWrap);\n    getClassMembers(node, diagram, classifier, textWrap);\n    /* eslint-disable */\n    node.offsetX = node.offsetX;\n    node.offsetY = node.offsetY;\n    node.style.fill = node.style.fill;\n    node.borderColor = node.borderColor;\n    diagram.initObject(node);\n    /* eslint-enable */\n    return content;\n}\n/**\n * getClassNodes method \\\n *\n * @returns {void} getClassNodes method .\\\n * @param { Node} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {UmlClassModel} classifier - provide the classifier  value.\n * @param {TextWrap} textWrap - provide the textWrap  value.\n * @private\n */\nfunction getClassNodes(node, diagram, classifier, textWrap) {\n    if (node.shape.classifier === 'Enumeration') {\n        var member = classifier.members;\n        if (member && member.length) {\n            addSeparator(node, diagram);\n            var memberText = '';\n            for (var i = 0; i < member.length; i++) {\n                var members = member[parseInt(i.toString(), 10)];\n                if (members.name !== '') {\n                    memberText += members.name;\n                }\n                if (i !== member.length) {\n                    var style = getStyle(node, members);\n                    var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                        id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlMember',\n                        annotations: [\n                            {\n                                id: 'name', content: memberText, offset: { x: 0, y: 0.5 },\n                                style: {\n                                    bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                    textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                    whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                    textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                                },\n                                margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                            }\n                        ], verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                        style: {\n                            fill: node.style.fill, strokeColor: (node.style.strokeColor === 'black') ?\n                                '#ffffff00' : node.style.strokeColor, textWrapping: textWrap\n                        },\n                        constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize),\n                        minHeight: 25\n                    }, true);\n                    diagram.initObject(temp);\n                    diagram.nodes.push(temp);\n                    diagram.UpdateBlazorDiagramModel(temp, 'Node');\n                    node.children.push(temp.id);\n                    memberText = '';\n                    if (members.isSeparator && (i !== member.length - 1)) {\n                        addSeparator(node, diagram, members.separatorStyle);\n                    }\n                    //isSeperator boolean set as false whether it is set as true for last element\n                    if (members.isSeparator && (i === member.length - 1)) {\n                        members.isSeparator = false;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        var attributes = classifier.attributes;\n        if (attributes.length) {\n            var attributeText = '';\n            addSeparator(node, diagram);\n            for (var i = 0; i < attributes.length; i++) {\n                var text = void 0;\n                var attribute = attributes[parseInt(i.toString(), 10)];\n                if (attribute.scope && (attribute).scope === 'Public') {\n                    text = ' +';\n                }\n                else if (attribute.scope && attribute.scope === 'Private') {\n                    text = '-';\n                }\n                else if (attribute.scope && attribute.scope === 'Protected') {\n                    text = '#';\n                }\n                else {\n                    text = '~';\n                }\n                if (attribute.name !== '') {\n                    if (text) {\n                        attributeText += text + ' ' + attribute.name + ' ' + ': ' + attribute.type;\n                    }\n                }\n                if (i !== attributes.length) {\n                    var style = getStyle(node, attribute);\n                    var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                        id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlProperty', style: { fill: node.style.fill,\n                            strokeColor: (node.style.strokeColor === 'black') ? '#ffffff00' : node.style.strokeColor },\n                        annotations: [\n                            {\n                                id: 'name', content: attributeText, offset: { x: 0, y: 0.5 },\n                                style: {\n                                    bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                    textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                    whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                    textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                                },\n                                margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                            }\n                        ], verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                        constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize),\n                        minHeight: 25\n                    }, true);\n                    diagram.initObject(temp);\n                    diagram.nodes.push(temp);\n                    diagram.UpdateBlazorDiagramModel(temp, 'Node');\n                    node.children.push(temp.id);\n                    attributeText = '';\n                    if (attribute.isSeparator && (i !== attributes.length - 1)) {\n                        addSeparator(node, diagram, attribute.separatorStyle);\n                    }\n                    //isSeperator boolean set as false whether it is set as true for last element\n                    if (attribute.isSeparator && (i === attributes.length - 1)) {\n                        attribute.isSeparator = false;\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * getClassNodesChild method - This method is utilized to dynamically add members to a UML node at runtime. \\\n *\n * @returns {void} getClassNodesChild method .\\\n * @param { Node} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {UmlClassModel} classifier - provide the classifier  value.\n * @param {TextWrap} textWrap - provide the textWrap  value.\n * @private\n */\nfunction getClassNodesChild(node, diagram, classifier, textWrap) {\n    if (node.shape.classifier === 'Enumeration') {\n        var member = classifier.members;\n        var memberText = '';\n        // if there is no members in existing array, then the separator need to be added for new member\n        if (member.length === 1) {\n            var newIndex = member.length;\n            addSeparatorChild(node, diagram, newIndex);\n        }\n        var count = 0;\n        // Need to indentify the index value for newly added member\n        for (var i = 0; i < member.length - 1; i++) {\n            if (member[parseInt(i.toString(), 10)].isSeparator === true) {\n                count++;\n            }\n        }\n        var index = member.length + count + 1;\n        //Iterate through an array of members and create each member as a child node to the UML node\n        for (var i = 0; i < member.length; i++) {\n            var members = member[member.length - 1];\n            if (members.name !== '') {\n                memberText += members.name;\n            }\n            if (i !== member.length) {\n                var style = getStyle(node, members);\n                var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                    id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlMember',\n                    annotations: [\n                        {\n                            id: 'name', content: memberText, offset: { x: 0, y: 0.5 },\n                            style: {\n                                bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                            },\n                            margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                        }\n                    ], verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                    style: {\n                        fill: node.style.fill, strokeColor: (node.style.strokeColor === 'black') ?\n                            '#ffffff00' : node.style.strokeColor, textWrapping: textWrap\n                    },\n                    constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize),\n                    minHeight: 25\n                }, true);\n                temp.parentId = node.id;\n                temp.umlIndex = index;\n                diagram.add(temp);\n                memberText = '';\n            }\n            break;\n        }\n    }\n}\n/**\n * getClassAttributesChild method - This method is utilized to dynamically add attributes to a UML node at runtime.\\\n *\n * @returns {void} getClassAttributesChild method .\\\n * @param { Node} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {UmlClassModel} classifier - provide the classifier  value.\n * @param {TextWrap} textWrap - provide the textWrap  value.\n * @private\n */\nfunction getClassAttributesChild(node, diagram, classifier, textWrap) {\n    if (classifier.attributes && classifier.attributes.length) {\n        var attributes = classifier.attributes;\n        var attributeText = '';\n        var text = void 0;\n        // if there is no attributes in existing array, then the separator need to be added for new attribute\n        if (attributes.length === 1) {\n            var newIndex = attributes.length;\n            addSeparatorChild(node, diagram, newIndex);\n        }\n        var count = 0;\n        // Need to indentify the index value for newly added attribute\n        for (var i = 0; i < attributes.length - 1; i++) {\n            if (attributes[parseInt(i.toString(), 10)].isSeparator === true) {\n                count++;\n            }\n        }\n        var index = attributes.length + count + 1;\n        //Iterate through an array of attributes and create each attribute as a child node to the UML node\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[attributes.length - 1];\n            if (attribute.scope && (attribute).scope === 'Public') {\n                text = ' +';\n            }\n            else if (attribute.scope && attribute.scope === 'Private') {\n                text = '-';\n            }\n            else if (attribute.scope && attribute.scope === 'Protected') {\n                text = '#';\n            }\n            else {\n                text = '~';\n            }\n            if (attribute.name !== '') {\n                if (text) {\n                    attributeText += text + ' ' + attribute.name + ' ' + ': ' + attribute.type;\n                }\n            }\n            if (i !== attributes.length) {\n                var style = getStyle(node, attribute);\n                var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                    id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlProperty', style: {\n                        fill: node.style.fill,\n                        strokeColor: (node.style.strokeColor === 'black') ? '#ffffff00' : node.style.strokeColor\n                    },\n                    annotations: [\n                        {\n                            id: 'name', content: attributeText, offset: { x: 0, y: 0.5 },\n                            style: {\n                                bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                            },\n                            margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                        }\n                    ], verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                    constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize),\n                    minHeight: 25\n                }, true);\n                temp.parentId = node.id;\n                temp.umlIndex = index;\n                diagram.add(temp);\n                attributeText = '';\n            }\n            break;\n        }\n    }\n}\n/**\n * getClassMembers method \\\n *\n * @returns {void} getClassMembers method .\\\n * @param { Node} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {UmlClassModel} classifier - provide the classifier  value.\n * @param {TextWrap} textWrap - provide the textWrap  value.\n * @private\n */\nfunction getClassMembers(node, diagram, classifier, textWrap) {\n    if (classifier.methods && classifier.methods.length) {\n        var methods = classifier.methods;\n        addSeparator(node, diagram);\n        var argumentText = '';\n        var methodText = '';\n        var text = void 0;\n        for (var i = 0; i < methods.length; i++) {\n            var method = methods[parseInt(i.toString(), 10)];\n            if (method.scope && method.scope === 'Public') {\n                text = ' +';\n            }\n            else if (method.scope && method.scope === 'Private') {\n                text = '-';\n            }\n            else if (method.scope && method.scope === 'Protected') {\n                text = '#';\n            }\n            else {\n                text = '~';\n            }\n            if (method.parameters) {\n                for (var j = 0; j < method.parameters.length; j++) {\n                    if (method.parameters[parseInt(j.toString(), 10)].type) {\n                        argumentText += method.parameters[parseInt(j.toString(), 10)].name + ':' + method.parameters[parseInt(j.toString(), 10)].type;\n                    }\n                    else {\n                        argumentText += method.parameters[parseInt(j.toString(), 10)].name;\n                    }\n                    if (j !== method.parameters.length - 1) {\n                        argumentText += ',';\n                    }\n                }\n            }\n            if (method.name !== '') {\n                if (text) {\n                    methodText += text + ' ' + method.name + '(' + argumentText + ')' + ' ' + ':' + ' ' + method.type;\n                }\n                //893885: Parameter Name in UMLClass with multiple Methods are updated wrongly\n                //clear the value stored in parameter variable after each method initiaization\n                argumentText = '';\n            }\n            if (i !== methods.length) {\n                var style = getStyle(node, method);\n                var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                    id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlMethods', verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                    annotations: [\n                        {\n                            id: 'name', content: methodText, offset: { x: 0, y: 0.5 },\n                            style: {\n                                bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                            },\n                            margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                        }\n                    ],\n                    style: {\n                        fill: node.style.fill, strokeColor: (node.style.strokeColor === 'black') ?\n                            '#ffffff00' : node.style.strokeColor\n                    }, minHeight: 25,\n                    constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize)\n                }, true);\n                diagram.initObject(temp);\n                diagram.nodes.push(temp);\n                diagram.UpdateBlazorDiagramModel(temp, 'Node');\n                node.children.push(temp.id);\n                methodText = '';\n                if (method.isSeparator && (i !== methods.length - 1)) {\n                    addSeparator(node, diagram, method.separatorStyle);\n                }\n                //isSeperator boolean set as false whether it is set as true for last element\n                if (method.isSeparator && (i === methods.length - 1)) {\n                    method.isSeparator = false;\n                }\n            }\n        }\n    }\n}\n/**\n * getClassMembersChild method - This method is utilized to dynamically add methods to a UML node at runtime. \\\n *\n * @returns {void} getClassMembersChild method .\\\n * @param { Node} node - provide the node  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {UmlClassModel} classifier - provide the classifier  value.\n * @param {TextWrap} textWrap - provide the textWrap  value.\n * @private\n */\nfunction getClassMembersChild(node, diagram, classifier, textWrap) {\n    if (classifier.methods && classifier.methods.length) {\n        var methods = classifier.methods;\n        var argumentText = '';\n        var methodText = '';\n        var text = void 0;\n        var initialIndex = 1;\n        var index = void 0;\n        var attributeCount = 0;\n        var methodCount = 0;\n        var shapeModel = node.shape;\n        var isClass = shapeModel.classifier === 'Class';\n        var isInterface = shapeModel.classifier === 'Interface';\n        var umlShape = isClass ? shapeModel.classShape : shapeModel.interfaceShape;\n        // Need to indentify the index value for newly added method\n        if (methods.length === 1) {\n            if (umlShape.attributes.length > 0) {\n                attributeCount = umlShape.attributes.filter(function (attr) { return attr.isSeparator; }).length;\n                initialIndex = 1 + 1 + umlShape.attributes.length + attributeCount;\n                index = initialIndex + 1;\n                addSeparatorChild(node, diagram, initialIndex);\n            }\n            else {\n                index = initialIndex + 1;\n            }\n        }\n        // To determine the index value for adding methods, it is essential to take into account the existing attributes\n        else {\n            attributeCount = umlShape.attributes.filter(function (attr) { return attr.isSeparator; }).length;\n            methodCount = umlShape.methods.filter(function (method) { return method.isSeparator; }).length;\n            initialIndex = 1 + 1 + umlShape.attributes.length + attributeCount + umlShape.methods.length + methodCount;\n            index = initialIndex + 1;\n        }\n        //Iterate through an array of methods and create each method as a child node to the UML node\n        for (var i = 0; i < methods.length; i++) {\n            var method = methods[methods.length - 1];\n            if (method.scope && method.scope === 'Public') {\n                text = ' +';\n            }\n            else if (method.scope && method.scope === 'Private') {\n                text = '-';\n            }\n            else if (method.scope && method.scope === 'Protected') {\n                text = '#';\n            }\n            else {\n                text = '~';\n            }\n            if (method.parameters) {\n                for (var j = 0; j < method.parameters.length; j++) {\n                    if (method.parameters[parseInt(j.toString(), 10)].type) {\n                        argumentText += method.parameters[parseInt(j.toString(), 10)].name + ':' + method.parameters[parseInt(j.toString(), 10)].type;\n                    }\n                    else {\n                        argumentText += method.parameters[parseInt(j.toString(), 10)].name;\n                    }\n                    if (j !== method.parameters.length - 1) {\n                        argumentText += ',';\n                    }\n                }\n            }\n            if (method.name !== '') {\n                if (text) {\n                    methodText += text + ' ' + method.name + '(' + argumentText + ')' + ' ' + ':' + ' ' + method.type;\n                }\n            }\n            if (i !== methods.length) {\n                var style = getStyle(node, method);\n                var temp = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n                    id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_umlMethods', verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n                    annotations: [\n                        {\n                            id: 'name', content: methodText, offset: { x: 0, y: 0.5 },\n                            style: {\n                                bold: true, fontSize: style.fontSize, color: style.color, fill: style.fill,\n                                textWrapping: textWrap, italic: style.italic, fontFamily: style.fontFamily,\n                                whiteSpace: style.whiteSpace, textAlign: style.textAlign,\n                                textDecoration: style.textDecoration, textOverflow: style.textOverflow\n                            },\n                            margin: { left: 14, right: 5 }, horizontalAlignment: 'Left'\n                        }\n                    ],\n                    style: {\n                        fill: node.style.fill, strokeColor: (node.style.strokeColor === 'black') ?\n                            '#ffffff00' : node.style.strokeColor\n                    }, minHeight: 25,\n                    constraints: (_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.HideThumbs) & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Rotate | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Drag | _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Resize)\n                }, true);\n                temp.parentId = node.id;\n                temp.umlIndex = index;\n                diagram.add(temp);\n                methodText = '';\n            }\n            break;\n        }\n    }\n}\n/**\n * addSeparator method \\\n *\n * @returns {void} addSeparator method .\\\n * @param { Node} stack - provide the stack  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {SeperatorStyle} SeperatorStyle - provide the Seperator color.\n * @private\n */\nfunction addSeparator(stack, diagram, SeperatorStyle) {\n    var lineObject = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n        id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_path', height: 1, constraints: _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Select),\n        verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n        style: {\n            strokeColor: (stack.style.strokeColor === 'black') ? '#ffffff00' : stack.style.strokeColor,\n            fill: SeperatorStyle ? SeperatorStyle.fill : 'white'\n        }\n    }, true);\n    diagram.initObject(lineObject);\n    diagram.nodes.push(lineObject);\n    stack.children.push(lineObject.id);\n}\n/**\n * addSeparatorChild method -This method is designed to add a separator for the newly added child type to the UML node. \\\n *\n * @returns {void} addSeparator method .\\\n * @param { Node} stack - provide the stack  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {number} newIndex - provide the index value.\n * @private\n */\nfunction addSeparatorChild(stack, diagram, newIndex) {\n    var lineObject = new _objects_node__WEBPACK_IMPORTED_MODULE_1__.Node(diagram, 'nodes', {\n        id: (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_2__.randomId)() + '_path', height: 1, constraints: _enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Default & ~(_enum_enum__WEBPACK_IMPORTED_MODULE_0__.NodeConstraints.Select),\n        verticalAlignment: 'Stretch', horizontalAlignment: 'Stretch',\n        style: { strokeColor: (stack.style.strokeColor === 'black') ? '#ffffff00' : stack.style.strokeColor, fill: 'white' }\n    }, true);\n    lineObject.parentId = stack.id;\n    lineObject.umlIndex = newIndex;\n    diagram.add(lineObject);\n}\n/**\n * getStyle method \\\n *\n * @returns {TextStyleModel} addSeparator method .\\\n * @param { Node} stack - provide the stack  value.\n * @param {UmlClassModel} node - provide the node  value.\n * @private\n */\nfunction getStyle(stack, node) {\n    var newStyle = {};\n    var style = node.style;\n    newStyle.fill = (style.fill !== 'transparent') ? style.fill : stack.style.fill;\n    newStyle.color = style.color;\n    newStyle.fontFamily = (style.fontFamily !== 'Arial') ? style.fontFamily : stack.style.fontFamily;\n    newStyle.italic = style.italic;\n    newStyle.bold = style.bold;\n    newStyle.whiteSpace = style.whiteSpace;\n    newStyle.textAlign = style.textAlign;\n    newStyle.textWrapping = style.textWrapping;\n    newStyle.textDecoration = style.textDecoration;\n    newStyle.textOverflow = style.textOverflow;\n    // newStyle.margin = style.mar\n    newStyle.fontSize = (style.fontSize !== 12) ? style.fontSize : stack.style.fontSize;\n    newStyle.strokeColor = (style.strokeColor !== 'black') ? style.strokeColor : stack.style.strokeColor;\n    newStyle.strokeWidth = (style.strokeWidth !== 1) ? style.strokeWidth : stack.style.strokeWidth;\n    return newStyle;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/uml-util.js?");

/***/ })

}]);