"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-maps_src_maps_layers_legend_js-4d99e23c"],{

/***/ "./node_modules/@syncfusion/ej2-maps/src/maps/layers/legend.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-maps/src/maps/layers/legend.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Legend: () => (/* binding */ Legend)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-maps/src/maps/index.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-maps/src/maps/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/theme */ \"./node_modules/@syncfusion/ej2-maps/src/maps/model/theme.js\");\n\n\n\n\n\n/**\n * Legend module is used to render legend for the maps\n */\nvar Legend = /** @class */ (function () {\n    function Legend(maps) {\n        /**\n         * @private\n         */\n        this.legendBorderRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        /**\n         * @private\n         */\n        this.initialMapAreaRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        /**\n         * @private\n         */\n        this.legendTotalRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        /**\n         * @private\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.totalPages = [];\n        this.page = 0;\n        /**\n         * @private\n         */\n        this.currentPage = 0;\n        this.legendItemRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        this.heightIncrement = 0;\n        this.widthIncrement = 0;\n        this.textMaxWidth = 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.shapeHighlightCollection = [];\n        /**\n         * @private\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.legendHighlightCollection = [];\n        /**\n         * @private\n         */\n        this.shapePreviousColor = [];\n        /**\n         * @private\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.selectedNonLegendShapes = [];\n        /**\n         * @private\n         */\n        this.shapeToggled = true;\n        /**\n         * @private\n         */\n        this.legendElement = null;\n        this.maps = maps;\n        this.addEventListener();\n    }\n    /**\n     * To calculate legend bounds and draw the legend shape and text.\n     *\n     * @returns {void}\n     * @private\n     */\n    Legend.prototype.renderLegend = function () {\n        this.legendRenderingCollections = [];\n        this.legendCollection = [];\n        this.totalPages = [];\n        this.widthIncrement = 0;\n        this.heightIncrement = 0;\n        this.defsElement = this.maps.renderer.createDefs();\n        this.maps.svgObject.appendChild(this.defsElement);\n        this.initialMapAreaRect = this.maps.mapAreaRect;\n        this.calculateLegendBounds();\n        this.drawLegend();\n    };\n    Legend.prototype.calculateLegendBounds = function () {\n        var _this = this;\n        var map = this.maps;\n        var legend = map.legendSettings;\n        this.legendCollection = [];\n        var spacing = 10;\n        var leftPadding = 10;\n        var topPadding = map.mapAreaRect.y;\n        this.legendRenderingCollections = [];\n        Array.prototype.forEach.call(map.layersCollection, function (layer, layerIndex) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(layer.shapeData)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var layerData = layer.shapeData['features'];\n                var dataPath = layer.shapeDataPath;\n                var propertyPath = layer.shapePropertyPath;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var dataSource = layer.dataSource;\n                var colorValuePath = void 0;\n                var colorMapping = void 0;\n                if (legend.type === 'Layers' && layer.visible) {\n                    colorValuePath = layer.shapeSettings.colorValuePath;\n                    colorMapping = layer.shapeSettings.colorMapping;\n                    _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n                }\n                else if (legend.type === 'Bubbles') {\n                    for (var _i = 0, _a = layer.bubbleSettings; _i < _a.length; _i++) {\n                        var bubble = _a[_i];\n                        if (bubble.visible) {\n                            colorValuePath = bubble.colorValuePath;\n                            colorMapping = bubble.colorMapping;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            dataSource = bubble.dataSource;\n                            _this.getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n                        }\n                    }\n                }\n            }\n            if (legend.type === 'Markers') {\n                _this.getMarkersLegendCollections(layerIndex, layer.markerSettings);\n            }\n        });\n        if (this.legendCollection.length > 0) {\n            for (var i = 0; i < this.legendCollection.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var legendItem = this.legendCollection[i];\n                var eventArgs = {\n                    name: _index__WEBPACK_IMPORTED_MODULE_0__.legendRendering, cancel: false, fill: legendItem['fill'], shape: legend.shape,\n                    shapeBorder: legend.shapeBorder,\n                    text: typeof legendItem['text'] === 'number' ? legendItem['text'].toString() : legendItem['text']\n                };\n                map.trigger('legendRendering', eventArgs);\n                legendItem['fill'] = eventArgs.fill;\n                legendItem['shape'] = eventArgs.shape;\n                legendItem['shapeBorder'] = eventArgs.shapeBorder;\n                legendItem['text'] = eventArgs.text;\n                if (eventArgs.cancel) {\n                    this.legendCollection.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        var defaultSize = 25;\n        var legendTitle = map.legendSettings.title.text;\n        var titleTextStyle = map.legendSettings.titleStyle;\n        if (this.legendCollection.length > 0) {\n            var legendMode = legend.mode;\n            var shapeX = 0;\n            var shapeY = 0;\n            var textX = 0;\n            var textY = 0;\n            var shapePadding = legend.shapePadding;\n            var textPadding = 10;\n            var shapeHeight = legend.shapeHeight;\n            var shapeWidth = legend.shapeWidth;\n            var shapeLocation = [];\n            var textLocation = [];\n            var position = legend.position;\n            var labelAction = legend.labelDisplayMode;\n            var arrangement = (legend.orientation === 'None') ? ((position === 'Top' || position === 'Bottom')\n                ? 'Horizontal' : 'Vertical') : legend.orientation;\n            var legendWidth = (legend.width.length > 1) ? (legend.width.indexOf('%') > -1) ? (map.availableSize.width / 100)\n                * parseInt(legend.width, 10) : parseInt(legend.width, 10) : null;\n            var legendHeight = (legend.height.length > 1) ? (legend.height.indexOf('%') > -1) ? (map.availableSize.height / 100) *\n                parseInt(legend.height, 10) : parseInt(legend.height, 10) : null;\n            var legendItemStartX_1;\n            var legendItemStartY_1;\n            var startX = 0;\n            var startY = 0;\n            var legendtitleSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendTitle, titleTextStyle);\n            if (legendMode === 'Interactive') {\n                var itemTextStyle = legend.textStyle;\n                var legendLength = this.legendCollection.length;\n                var rectWidth = (arrangement === 'Horizontal') ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendWidth)) ? (map.mapAreaRect.width / legendLength) :\n                    (legendWidth / legendLength) : ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendWidth)) ? defaultSize : legendWidth;\n                var rectHeight = (arrangement === 'Horizontal') ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendHeight)) ? defaultSize : legendHeight :\n                    ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendHeight)) ? (map.mapAreaRect.height / legendLength) : (legendHeight / legendLength);\n                startX = 0;\n                startY = legendtitleSize.height + spacing;\n                var position_1 = legend.labelPosition;\n                var textX_1 = 0;\n                var textY_1 = 0;\n                var textPadding_1 = 10;\n                var itemStartX = 0;\n                var itemStartY = 0;\n                var maxTextHeight = 0;\n                var maxTextWidth = 0;\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    startX = (arrangement === 'Horizontal') ? (startX + rectWidth) : startX;\n                    startY = (arrangement === 'Horizontal') ? startY : (startY + rectHeight);\n                    var legendText = this.legendCollection[i]['text'];\n                    var itemTextSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Size(0, 0);\n                    if (labelAction === 'None') {\n                        itemTextSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendText, itemTextStyle);\n                    }\n                    else if (labelAction === 'Trim') {\n                        legendText = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textTrim)((arrangement === 'Horizontal' ? rectWidth : rectHeight), legendText, itemTextStyle);\n                        itemTextSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendText, itemTextStyle);\n                    }\n                    else {\n                        legendText = '';\n                    }\n                    if (legend.position === 'Left' || legend.position === 'Right' || legend.position === 'Float') {\n                        for (var i_1 = 0; i_1 < this.legendCollection.length; i_1++) {\n                            var legendItem = this.legendCollection[i_1];\n                            var legendTextSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendItem['text'], legend.textStyle);\n                            this.textMaxWidth = Math.max(this.textMaxWidth, legendTextSize.width);\n                        }\n                    }\n                    maxTextHeight = Math.max(maxTextHeight, itemTextSize.height);\n                    maxTextWidth = Math.max(maxTextWidth, itemTextSize.width);\n                    if (itemTextSize.width > 0 && itemTextSize.height > 0) {\n                        if (arrangement === 'Horizontal') {\n                            textX_1 = startX + (rectWidth / 2);\n                            textY_1 = (position_1 === 'After') ? (startY + rectHeight + (itemTextSize.height / 2)) + textPadding_1 :\n                                (startY - textPadding_1);\n                        }\n                        else {\n                            textX_1 = (position_1 === 'After') ? startX - (this.textMaxWidth / 2) - textPadding_1\n                                : (startX + rectWidth + this.textMaxWidth / 2) + textPadding_1;\n                            textY_1 = startY + (rectHeight / 2) + (itemTextSize.height / 4);\n                        }\n                    }\n                    if (i === 0) {\n                        itemStartX = (arrangement === 'Horizontal') ? startX : (position_1 === 'After') ?\n                            textX_1 - (this.textMaxWidth / 2) : startX;\n                        itemStartY = (arrangement === 'Horizontal') ? (position_1 === 'After') ? startY :\n                            textY_1 - (itemTextSize.height / 2) : startY;\n                        if (this.legendCollection.length === 1) {\n                            legendWidth = (arrangement === 'Horizontal') ? Math.abs((startX + rectWidth) - itemStartX) :\n                                (rectWidth + this.textMaxWidth + textPadding_1);\n                            legendHeight = (arrangement === 'Horizontal') ? (rectHeight + (maxTextHeight / 2) + textPadding_1) :\n                                Math.abs((startY + rectHeight) - itemStartY);\n                        }\n                    }\n                    else if (i === this.legendCollection.length - 1) {\n                        legendWidth = (arrangement === 'Horizontal') ? Math.abs((startX + rectWidth) - itemStartX) :\n                            (rectWidth + this.textMaxWidth + textPadding_1);\n                        legendHeight = (arrangement === 'Horizontal') ? (rectHeight + (maxTextHeight / 2) + textPadding_1) :\n                            Math.abs((startY + rectHeight) - itemStartY);\n                    }\n                    this.legendRenderingCollections.push({\n                        fill: this.legendCollection[i]['fill'], x: startX, y: startY,\n                        width: rectWidth, height: rectHeight,\n                        text: legendText, textX: textX_1, textY: textY_1,\n                        textWidth: itemTextSize.width, textHeight: itemTextSize.height,\n                        shapeBorder: this.legendCollection[i]['shapeBorder']\n                    });\n                }\n                if (this.legendCollection.length === 1) {\n                    legendHeight = maxTextHeight + textPadding_1;\n                    legendWidth = rectWidth;\n                }\n                this.legendItemRect = { x: itemStartX, y: itemStartY, width: legendWidth, height: legendHeight };\n            }\n            else {\n                legendWidth = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendWidth)) ? map.mapAreaRect.width : legendWidth;\n                legendHeight = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendHeight)) ? map.mapAreaRect.height : legendHeight;\n                var j = 0;\n                this.page = 0;\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var legendItem = this.legendCollection[i];\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.totalPages[this.page])) {\n                        this.totalPages[this.page] = { Page: (this.page + 1), Collection: [] };\n                    }\n                    var legendTextSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendItem['text'], legend.textStyle);\n                    this.textMaxWidth = Math.max(this.textMaxWidth, legendTextSize.width);\n                    if (i === 0) {\n                        startX = shapeX = (leftPadding + (shapeWidth / 2));\n                        startY = shapeY = topPadding + legendtitleSize.height + (shapeHeight > legendTextSize.height ? shapeHeight / 2\n                            : (legendTextSize.height / 4));\n                    }\n                    else {\n                        var maxSize = (legendTextSize.height > shapeHeight) ? legendTextSize.height : shapeHeight;\n                        if (arrangement === 'Horizontal') {\n                            var prvePositionX = (textLocation[j - 1].x + textLocation[j - 1].width) + textPadding + shapeWidth;\n                            if ((prvePositionX + shapePadding + legendTextSize.width) > legendWidth) {\n                                var nextPositionY = (textLocation[j - 1].y > (shapeLocation[j - 1].y + (shapeHeight / 2)) ?\n                                    textLocation[j - 1].y : (shapeLocation[j - 1].y + (shapeHeight / 2))) + topPadding;\n                                if ((nextPositionY + maxSize) > legendHeight) {\n                                    this.getPageChanged();\n                                    j = 0;\n                                    shapeLocation = [];\n                                    textLocation = [];\n                                    shapeX = startX;\n                                    shapeY = startY;\n                                }\n                                else {\n                                    shapeX = (shapeLocation[0].x);\n                                    shapeY = (nextPositionY + (maxSize / 2));\n                                }\n                            }\n                            else {\n                                shapeX = (prvePositionX - (shapeWidth / 2));\n                                shapeY = (shapeLocation[j - 1]).y;\n                            }\n                        }\n                        else {\n                            var prevPositionY = textLocation[j - 1].y > shapeLocation[j - 1].y + (shapeHeight / 2) ?\n                                textLocation[j - 1].y : shapeLocation[j - 1].y + (shapeHeight / 2);\n                            if ((prevPositionY + topPadding + maxSize) > legendHeight) {\n                                var nextPositionX = (textLocation[j - 1].x + this.textMaxWidth + textPadding);\n                                if ((nextPositionX + shapePadding + legendTextSize.width) > legendWidth) {\n                                    shapeX = startX;\n                                    shapeY = startY;\n                                    textLocation = [];\n                                    shapeLocation = [];\n                                    this.getPageChanged();\n                                    j = 0;\n                                }\n                                else {\n                                    shapeX = nextPositionX + (shapeWidth / 2);\n                                    shapeY = (shapeLocation[0].y);\n                                }\n                            }\n                            else {\n                                var padding = 10;\n                                shapeX = shapeLocation[j - 1].x;\n                                shapeY = prevPositionY + padding + (shapeHeight / 2);\n                            }\n                        }\n                    }\n                    textX = shapeX + (shapeWidth / 2) + shapePadding;\n                    textY = shapeY + (legendTextSize.height / 4);\n                    shapeLocation.push({ x: shapeX, y: shapeY });\n                    textLocation.push({ x: textX, y: textY, width: legendTextSize.width, height: (legendTextSize.height / 2) });\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this.totalPages[this.page]['Collection'].push({\n                        DisplayText: legendItem['text'],\n                        ImageSrc: legendItem['imageSrc'],\n                        Shape: { x: shapeX, y: shapeY },\n                        Text: { x: textX, y: textY },\n                        Fill: legendItem['fill'],\n                        legendShape: legendItem['shape'],\n                        shapeBorder: legendItem['shapeBorder'],\n                        idIndex: i,\n                        Rect: {\n                            x: shapeLocation[j].x - (shapeWidth / 2),\n                            y: (shapeLocation[j].y - (shapeHeight / 2)) < (textY - legendTextSize.height) ?\n                                (shapeLocation[j].y - (shapeHeight / 2)) : (textY - legendTextSize.height),\n                            width: Math.abs((shapeLocation[j].x - (shapeWidth / 2)) - (textX + legendTextSize.width)),\n                            height: ((shapeHeight > legendTextSize.height) ? shapeHeight : legendTextSize.height)\n                        }\n                    });\n                    j++;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var collection = this.totalPages[0]['Collection'];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                Array.prototype.forEach.call(collection, function (legendObj, index) {\n                    var legendRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(legendObj['Rect']['x'], legendObj['Rect']['y'], legendObj['Rect']['width'], legendObj['Rect']['height']);\n                    if (index === 0) {\n                        legendItemStartX_1 = legendRect.x;\n                        legendItemStartY_1 = legendRect.y;\n                    }\n                    _this.widthIncrement = Math.max(_this.widthIncrement, Math.abs(legendItemStartX_1 - (legendRect.x + legendRect.width)));\n                    _this.heightIncrement = Math.max(_this.heightIncrement, Math.abs(legendItemStartY_1 - (legendRect.y + legendRect.height)));\n                });\n                legendWidth = ((this.widthIncrement < legendWidth) ? this.widthIncrement : legendWidth);\n                legendHeight = ((this.heightIncrement < legendHeight) ? this.heightIncrement : legendHeight);\n                this.legendItemRect = {\n                    x: collection[0]['Rect']['x'], y: collection[0]['Rect']['y'],\n                    width: legendWidth, height: legendHeight\n                };\n            }\n        }\n    };\n    /**\n     * Get the legend collections\n     *\n     * @param {number} layerIndex - Specifies the layer index\n     * @param {any[]} layerData - Specifies the layer data\n     * @param {ColorMappingSettings[]} colorMapping - Specifies the color mapping\n     * @param {any[]} dataSource - Specifies the data source\n     * @param {string} dataPath - Specifies the data path\n     * @param {string} colorValuePath - Specifies the color value path\n     * @param {string | string[]} propertyPath - Specifies the property path\n     * @returns {void}\n     */\n    Legend.prototype.getLegends = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        this.getRangeLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n        this.getEqualLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n        this.getDataLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);\n    };\n    Legend.prototype.getPageChanged = function () {\n        this.page++;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.totalPages[this.page])) {\n            this.totalPages[this.page] = { Page: (this.page + 1), Collection: [] };\n        }\n    };\n    Legend.prototype.legendTextTrim = function (maxWidth, text, font, legendRectSize) {\n        var label = text;\n        var size = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(text, font).width;\n        var legendWithoutTextSize = legendRectSize - size;\n        if (legendRectSize > maxWidth) {\n            var textLength = text.length;\n            for (var i = textLength - 1; i >= 0; --i) {\n                label = text.substring(0, i) + '...';\n                size = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(label, font).width;\n                var totalSize = legendWithoutTextSize + size;\n                if (totalSize <= maxWidth || label.length < 4) {\n                    if (label.length < 4) {\n                        label = ' ';\n                    }\n                    return label;\n                }\n            }\n        }\n        return label;\n    };\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * To draw the legend shape and text.\n     *\n     * @private\n     */\n    Legend.prototype.drawLegend = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var render = map.renderer;\n        var textOptions;\n        var textFont = {\n            size: legend.textStyle.size,\n            color: legend.textStyle.color,\n            fontFamily: legend.textStyle.fontFamily,\n            fontWeight: legend.textStyle.fontWeight,\n            fontStyle: legend.textStyle.fontStyle,\n            opacity: legend.textStyle.opacity\n        };\n        this.legendGroup = render.createGroup({ id: map.element.id + '_Legend_Group' });\n        if (legend.mode === 'Interactive') {\n            for (var i = 0; i < this.legendRenderingCollections.length; i++) {\n                var itemId = map.element.id + '_Legend_Index_' + i;\n                var textId = map.element.id + '_Legend_Index_' + i + '_Text';\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var item = this.legendRenderingCollections[i];\n                var bounds = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(item['x'], item['y'], item['width'], item['height']);\n                if (i === 0) {\n                    this.renderLegendBorder();\n                }\n                var textLocation = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(item['textX'], item['textY']);\n                textFont.color = (textFont.color !== null) ? textFont.color : this.maps.themeStyle.legendTextColor;\n                var rectOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(itemId, item['fill'], item['shapeBorder'], legend.opacity, bounds);\n                textOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.TextOption(textId, textLocation.x, textLocation.y, 'middle', item['text'], '', '');\n                textFont.fontFamily = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(textFont.fontFamily) ? textFont.fontFamily : this.maps.themeStyle.fontFamily;\n                textFont.size = textFont.size || map.themeStyle.legendFontSize;\n                var textElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.renderTextElement)(textOptions, textFont, textFont.color, this.legendGroup);\n                textElement.setAttribute('aria-label', item['text']);\n                textElement.setAttribute('role', 'region');\n                var rectElement = render.drawRectangle(rectOptions);\n                this.legendGroup.appendChild(rectElement);\n                if (map.legendSettings.toggleLegendSettings.enable && (legend.type === 'Layers' || legend.type === 'Markers')) {\n                    this.maintainLegendToggle(i, rectElement, textElement);\n                }\n                this.legendToggle();\n            }\n        }\n        else {\n            this.drawLegendItem(this.currentPage);\n        }\n    };\n    /**\n     * @param {number} page - Specifies the legend page.\n     * @returns {void}\n     * @private\n     */\n    Legend.prototype.drawLegendItem = function (page) {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var spacing = 10;\n        var shapeSize = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Size(legend.shapeWidth, legend.shapeHeight);\n        var textOptions;\n        var render = map.renderer;\n        var legendShape = legend.shape;\n        if (page >= 0 && page < this.totalPages.length) {\n            if ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.legendGroup.id, this.maps.element.id)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.remove)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.legendGroup.id, this.maps.element.id));\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            for (var i = 0; i < this.totalPages[page]['Collection'].length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var collection = this.totalPages[page]['Collection'][i];\n                var shapeBorder = collection['shapeBorder'];\n                var legendElement = render.createGroup({ id: map.element.id + '_Legend_Index_' + collection['idIndex'] });\n                var legendText = collection['DisplayText'];\n                var pagingArrowPadding = 4;\n                var strokeColor = (legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine'\n                    || legend.shape === 'Cross') ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legend.fill) ? '#000000' : legend.fill : shapeBorder.color;\n                var strokeWidth = (legend.shape === 'HorizontalLine' || legend.shape === 'VerticalLine'\n                    || legend.shape === 'Cross') ? (shapeBorder.width === 0) ?\n                    1 : shapeBorder.width : shapeBorder.width;\n                var shapeId = map.element.id + '_Legend_Shape_Index_' + collection['idIndex'];\n                var textId = map.element.id + '_Legend_Text_Index_' + collection['idIndex'];\n                var shapeLocation = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(collection['Shape']['x'], (collection['Shape']['y'] - pagingArrowPadding));\n                var textLocation = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(collection['Text']['x'], (collection['Text']['y'] - pagingArrowPadding));\n                var renderOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.PathOption(shapeId, collection['Fill'], strokeWidth, strokeColor, legend.opacity, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(shapeBorder.opacity) ? legend.opacity : shapeBorder.opacity, '');\n                var legendTextStyle = {\n                    fontFamily: legend.textStyle.fontFamily, fontStyle: legend.textStyle.fontStyle,\n                    fontWeight: legend.textStyle.fontWeight, size: legend.textStyle.size, color: legend.textStyle.color,\n                    opacity: legend.textStyle.opacity\n                };\n                legendTextStyle.color = (legendTextStyle.color !== null) ? legendTextStyle.color :\n                    this.maps.themeStyle.legendTextColor;\n                legendTextStyle.fontFamily = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendTextStyle.fontFamily) ? legendTextStyle.fontFamily :\n                    this.maps.themeStyle.fontFamily;\n                legendTextStyle.size = legendTextStyle.size || map.themeStyle.legendFontSize;\n                legendTextStyle.fontWeight = legendTextStyle.fontWeight || map.themeStyle.fontWeight;\n                if (i === 0) {\n                    this.renderLegendBorder();\n                }\n                if (legend.type === 'Markers' && legend.useMarkerShape) {\n                    var legendShapeData = this.legendCollection[collection['idIndex']].data[0];\n                    var marker = map.layers[legendShapeData['layerIndex']].markerSettings[legendShapeData['markerIndex']];\n                    legendShape = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(marker.dataSource[legendShapeData['dataIndex']][marker['shapeValuePath']]) && marker.dataSource[legendShapeData['dataIndex']][marker['shapeValuePath']] !== '' ? marker.dataSource[legendShapeData['dataIndex']][marker['shapeValuePath']] : marker.shape;\n                }\n                if (legendShape === 'Balloon') {\n                    legendElement.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.drawBalloon)(map, renderOptions, shapeSize, { x: shapeLocation.x, y: (shapeLocation.y + 5) }, 'Legend'));\n                }\n                else {\n                    legendElement.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.drawSymbol)(shapeLocation, legendShape, shapeSize, collection['ImageSrc'], renderOptions));\n                }\n                var legendRectSize = collection['Rect']['x'] + collection['Rect']['width'];\n                if (legendRectSize > this.legendBorderRect.width) {\n                    var trimmedText = this.legendTextTrim(this.legendBorderRect.width, legendText, legendTextStyle, legendRectSize);\n                    legendText = trimmedText;\n                }\n                textOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.TextOption(textId, textLocation.x, textLocation.y, 'start', legendText, '', '');\n                var textElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.renderTextElement)(textOptions, legendTextStyle, legendTextStyle.color, legendElement);\n                textElement.setAttribute('aria-label', legendText);\n                textElement.setAttribute('role', 'region');\n                this.legendGroup.appendChild(legendElement);\n                if (map.legendSettings.toggleLegendSettings.enable && (legend.type === 'Layers' || legend.type === 'Markers')) {\n                    var legendShapeElement = legendElement.childNodes[0];\n                    this.maintainLegendToggle(collection['idIndex'], legendShapeElement, textElement);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (i === (this.totalPages[page]['Collection'].length - 1)) {\n                    var pagingGroup = void 0;\n                    var width = spacing;\n                    var height = (spacing / 2);\n                    if (this.page !== 0) {\n                        var pagingText = (page + 1) + '/' + this.totalPages.length;\n                        var pagingFont = legend.textStyle;\n                        var pagingTextSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(pagingText, pagingFont);\n                        var leftPageX = (this.legendItemRect.x + this.legendItemRect.width) - pagingTextSize.width -\n                            (width * 2) - (spacing * 2) + (pagingArrowPadding / 2);\n                        var rightPageX = (this.legendItemRect.x + this.legendItemRect.width);\n                        var pageTextX = rightPageX - width - (pagingTextSize.width / 2) - (spacing / 2) - pagingArrowPadding;\n                        var locY = (this.legendItemRect.y + this.legendItemRect.height) + (height / 2) + spacing;\n                        pagingGroup = render.createGroup({ id: map.element.id + '_Legend_Paging_Group' });\n                        var leftPageElement = render.createGroup({ id: map.element.id + '_Legend_Left_Paging_Group' });\n                        var rightPageElement = render.createGroup({ id: map.element.id + '_Legend_Right_Paging_Group' });\n                        var rightPath = ' M ' + rightPageX + ' ' + locY + ' L ' + (rightPageX - width) + ' ' + (locY - height) +\n                            ' L ' + (rightPageX - width) + ' ' + (locY + height) + ' z ';\n                        var leftPath = ' M ' + leftPageX + ' ' + locY + ' L ' + (leftPageX + width) + ' ' + (locY - height) +\n                            ' L ' + (leftPageX + width) + ' ' + (locY + height) + ' z ';\n                        var leftPageOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.PathOption(map.element.id + '_Left_Page', this.maps.themeStyle.legendTextColor, 0, this.maps.themeStyle.legendTextColor, ((page + 1) === 1 ? 0.5 : 1), 1, '', leftPath);\n                        leftPageElement.appendChild(render.drawPath(leftPageOptions));\n                        var leftRectPageOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(map.element.id + '_Left_Page_Rect', 'transparent', {}, 1, new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(leftPageX - (width / 2), (locY - (height * 2)), width * 2, spacing * 2), null, null, '', '');\n                        var pathEle = render.drawRectangle(leftRectPageOptions);\n                        pathEle.setAttribute('aria-label', 'Navigate to the previous legend items');\n                        pathEle.setAttribute('role', 'button');\n                        pathEle.tabIndex = (page + 1) === 1 ? -1 : map.tabIndex;\n                        if ((page + 1) === 1) {\n                            pathEle.style.cursor = 'default';\n                            pathEle.style.setProperty('outline', 'none');\n                        }\n                        else {\n                            pathEle.style.cursor = 'pointer';\n                            pathEle.style.removeProperty('outline');\n                        }\n                        leftPageElement.appendChild(pathEle);\n                        this.wireEvents(leftPageElement);\n                        var rightPageOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.PathOption(map.element.id + '_Right_Page', this.maps.themeStyle.legendTextColor, 0, this.maps.themeStyle.legendTextColor, ((page + 1) === this.totalPages.length ? 0.5 : 1), 1, '', rightPath);\n                        rightPageElement.appendChild(render.drawPath(rightPageOptions));\n                        var rightRectPageOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(map.element.id + '_Right_Page_Rect', 'transparent', {}, 1, new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(rightPageX - spacing - (width / 2), (locY - (height * 2)), width * 2, spacing * 2), null, null, '', '');\n                        pathEle = render.drawRectangle(rightRectPageOptions);\n                        pathEle.setAttribute('aria-label', 'Navigate to the next legend items');\n                        pathEle.setAttribute('role', 'button');\n                        pathEle.tabIndex = (page + 1) === this.totalPages.length ? -1 : map.tabIndex;\n                        if ((page + 1) === this.totalPages.length) {\n                            pathEle.style.cursor = 'default';\n                            pathEle.style.setProperty('outline', 'none');\n                        }\n                        else {\n                            pathEle.style.cursor = 'pointer';\n                            pathEle.style.removeProperty('outline');\n                        }\n                        rightPageElement.appendChild(pathEle);\n                        this.wireEvents(rightPageElement);\n                        pagingGroup.appendChild(leftPageElement);\n                        pagingGroup.appendChild(rightPageElement);\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var pageTextOptions = {\n                            'id': map.element.id + '_Paging_Text',\n                            'x': pageTextX,\n                            'y': locY + (pagingTextSize.height / 4),\n                            'fill': this.maps.themeStyle.legendTextColor,\n                            'font-size': '14px',\n                            'font-style': pagingFont.fontStyle,\n                            'font-family': pagingFont.fontFamily,\n                            'font-weight': pagingFont.fontWeight,\n                            'text-anchor': 'middle',\n                            'transform': '',\n                            'opacity': 1,\n                            'dominant-baseline': ''\n                        };\n                        var pagingTextElement = render.createText(pageTextOptions, pagingText);\n                        pagingTextElement.style.cssText = 'user-select: none;';\n                        pagingTextElement.setAttribute('aria-label', pagingText);\n                        pagingTextElement.setAttribute('role', 'region');\n                        pagingGroup.appendChild(pagingTextElement);\n                        this.legendGroup.appendChild(pagingGroup);\n                    }\n                    this.legendToggle();\n                }\n            }\n        }\n    };\n    /**\n     * @param {number} legendIndex - Specifies the legend index.\n     * @param {Element} legendShapeElement - Specifies the legend shape element.\n     * @param {Element} legendTextElement - Specifies the legend text element.\n     * @returns {void}\n     * @private\n     */\n    Legend.prototype.maintainLegendToggle = function (legendIndex, legendShapeElement, legendTextElement) {\n        if (this.maps.legendSettings.toggleLegendSettings.enable &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.toggledLegendId) && this.maps.toggledLegendId.indexOf(legendIndex) > -1 &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.toggledElementId) && this.maps.toggledElementId.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var currentItem = this.legendCollection[legendIndex]['data'];\n            if (!this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                this.setToggleAttributes(legendTextElement, legendShapeElement, this.maps.legendSettings.toggleLegendSettings.fill, this.maps.legendSettings.toggleLegendSettings.opacity, this.maps.legendSettings.toggleLegendSettings.border.color, this.maps.legendSettings.toggleLegendSettings.border.width, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.legendSettings.toggleLegendSettings.border.opacity) ?\n                    this.maps.legendSettings.toggleLegendSettings.opacity :\n                    this.maps.legendSettings.toggleLegendSettings.border.opacity, this.maps.legendSettings.toggleLegendSettings.fill);\n            }\n            else {\n                var layerIndex = currentItem[currentItem.length - 1].layerIndex;\n                this.setToggleAttributes(legendTextElement, legendShapeElement, this.maps.layers[layerIndex].shapeSettings.fill, this.maps.layers[layerIndex].shapeSettings.opacity, \n                /* eslint-disable-next-line max-len */\n                this.maps.layers[layerIndex].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[layerIndex].shapeSettings.border.width)\n                    ? 0 : this.maps.layers[layerIndex].shapeSettings.border.width, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[layerIndex].shapeSettings.border.opacity)\n                    ? this.maps.layers[layerIndex].shapeSettings.opacity\n                    : this.maps.layers[layerIndex].shapeSettings.border.opacity, this.maps.layers[layerIndex].shapeSettings.fill);\n            }\n            currentItem['_isVisible'] = false;\n        }\n    };\n    Legend.prototype.legendHighLightAndSelection = function (targetElement, value) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var pointIndex;\n        var legend = this.maps.legendSettings;\n        var textEle = legend.mode === 'Default' ? document.getElementById(targetElement.id.replace('Shape', 'Text')) :\n            document.getElementById(targetElement.id + '_Text');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var collection = this.maps.legendModule.legendCollection;\n        var length;\n        var multiSelectEnable = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(collection[0]['data'][0]['layerIndex']) ? this.maps.layers[collection[0]['data'][0]['layerIndex']].selectionSettings.enableMultiSelect : false;\n        var selectLength = 0;\n        var interactProcess = true;\n        var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n        this.updateLegendElement();\n        var toggleLegendCheck = this.maps.toggledLegendId.indexOf(idIndex);\n        if (this.maps.legendSettings.toggleLegendSettings.enable && value === 'highlight' && toggleLegendCheck !== -1) {\n            var collectionIndex = this.getIndexofLegend(this.legendHighlightCollection, targetElement);\n            if (collectionIndex !== -1) {\n                this.legendHighlightCollection.splice(collectionIndex, 1);\n            }\n            this.removeLegendHighlightCollection();\n            return null;\n        }\n        if (value === 'selection') {\n            this.shapeHighlightCollection = [];\n            if (!this.maps.shapeSelections && !multiSelectEnable) {\n                this.removeAllSelections();\n                this.maps.shapeSelections = true;\n            }\n            if (this.maps.legendSelectionCollection.length > 0 && (!multiSelectEnable ? this.maps.shapeSelections : true)) {\n                for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n                    if (targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n                        this.maps.legendSelectionCollection[k]['legendElement'] = targetElement;\n                        interactProcess = false;\n                        this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n                        this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(idIndex), 1);\n                        this.maps.legendSelectionCollection.splice(k, 1);\n                        this.maps.legendSelection = this.maps.legendSelectionCollection.length > 0 ? false : true;\n                        break;\n                    }\n                    else if (!multiSelectEnable) {\n                        if (this.maps.legendSelectionCollection.length > 1) {\n                            for (var z = 0; z < this.maps.legendSelectionCollection.length; z++) {\n                                this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[z]['legendElement']);\n                            }\n                            this.maps.legendSelectionCollection = [];\n                        }\n                        else {\n                            this.removeLegendSelectionCollection(this.maps.legendSelectionCollection[k]['legendElement']);\n                            this.maps.legendSelectionCollection.splice(k, 1);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (this.maps.legendSelectionCollection.length > 0) {\n                for (var k = 0; k < this.maps.legendSelectionCollection.length; k++) {\n                    if ((targetElement.id.indexOf('_Legend_Shape') > -1 || targetElement.id.indexOf('_Legend_Index')) &&\n                        targetElement === this.maps.legendSelectionCollection[k]['legendElement']) {\n                        interactProcess = false;\n                        break;\n                    }\n                    else {\n                        this.removeLegendHighlightCollection();\n                    }\n                }\n            }\n            this.removeLegendHighlightCollection();\n        }\n        if (interactProcess) {\n            for (var i = 0; i < collection.length; i++) {\n                var idIndex_1 = this.maps.legendSettings.mode === 'Interactive' ?\n                    parseFloat(targetElement.id.split('_Legend_Index_')[1]) :\n                    parseFloat(targetElement.id.split('_Legend_Shape_Index_')[1]);\n                if (textEle.textContent === collection[i]['text'] && collection[i]['data'].length > 0\n                    && idIndex_1 === i) {\n                    var layer = this.maps.layers[collection[i]['data'][0]['layerIndex']];\n                    var enable = void 0;\n                    var legendModule = void 0;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var data = void 0;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(layer)) {\n                        enable = (value === 'selection') ? layer.selectionSettings.enable : layer.highlightSettings.enable;\n                        legendModule = void 0;\n                        legendModule = (value === 'selection') ? layer.selectionSettings : layer.highlightSettings;\n                        data = collection[i]['data'];\n                    }\n                    if (enable) {\n                        for (var j = 0; j < data.length; j++) {\n                            var shapeElement = void 0;\n                            shapeIndex = data[j]['shapeIndex'];\n                            layerIndex = data[j]['layerIndex'];\n                            dataIndex = data[j]['dataIndex'];\n                            pointIndex = data[j]['pointIndex'];\n                            if (pointIndex === -1) {\n                                shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                                    layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n                            }\n                            else {\n                                shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                                    layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex + '_multiLine_' + pointIndex);\n                            }\n                            if (shapeElement !== null) {\n                                var shapeMatch = true;\n                                if (this.maps.legendSelectionCollection !== null) {\n                                    for (var i_2 = 0; i_2 < this.maps.legendSelectionCollection.length; i_2++) {\n                                        if (this.maps.legendSelectionCollection[i_2]['legendElement'] === targetElement) {\n                                            shapeMatch = false;\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (value === 'highlight' && shapeMatch) {\n                                    if (j === 0) {\n                                        this.legendHighlightCollection = [];\n                                        this.pushCollection(targetElement, this.legendHighlightCollection, collection[i], layer.shapeSettings);\n                                    }\n                                    length = this.legendHighlightCollection.length;\n                                    var legendHighlightColor = this.legendHighlightCollection[length - 1]['legendOldFill'];\n                                    this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].push(shapeElement);\n                                    var shapeItemCount = this.legendHighlightCollection[length - 1]['MapShapeCollection']['Elements'].length - 1;\n                                    var shapeOldFillColor = shapeElement.getAttribute('fill');\n                                    var shapeOldOpacity = shapeElement.getAttribute('fill-opacity');\n                                    this.legendHighlightCollection[length - 1]['shapeOldFillColor'].push(shapeOldFillColor);\n                                    this.legendHighlightCollection[length - 1]['shapeOldOpacity'] = shapeOldOpacity;\n                                    var shapeOldColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'][shapeItemCount];\n                                    var shapeOldFillOpacity = this.legendHighlightCollection[length - 1]['shapeOldOpacity'];\n                                    this.shapePreviousColor = this.legendHighlightCollection[length - 1]['shapeOldFillColor'];\n                                    this.setColor(shapeElement, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : shapeOldColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.opacity) ? shapeOldFillOpacity : legendModule.opacity.toString(), legendModule.border.color, legendModule.border.width.toString(), 'highlight');\n                                    this.setColor(targetElement, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendHighlightColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.opacity) ? shapeOldFillOpacity : legendModule.opacity.toString(), legendModule.border.color, legendModule.border.width.toString(), 'highlight');\n                                }\n                                else if (value === 'selection') {\n                                    this.legendHighlightCollection = [];\n                                    this.maps.legendSelectionClass = legendModule;\n                                    if (j === 0) {\n                                        this.pushCollection(targetElement, this.maps.legendSelectionCollection, collection[i], layer.shapeSettings);\n                                        if (multiSelectEnable) {\n                                            this.maps.selectedLegendElementId.push(i);\n                                        }\n                                        else {\n                                            if (this.maps.selectedLegendElementId.length === 0) {\n                                                this.maps.selectedLegendElementId.push(i);\n                                            }\n                                            else {\n                                                this.maps.selectedLegendElementId = [];\n                                                this.maps.selectedLegendElementId.push(i);\n                                            }\n                                        }\n                                    }\n                                    selectLength = this.maps.legendSelectionCollection.length;\n                                    var legendSelectionColor = this.maps.legendSelectionCollection[selectLength - 1]['legendOldFill'];\n                                    this.maps.legendSelectionCollection[selectLength - 1]['MapShapeCollection']['Elements'].push(shapeElement);\n                                    this.maps.legendSelectionCollection[selectLength - 1]['shapeOldFillColor'] = this.shapePreviousColor;\n                                    this.setColor(targetElement, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendSelectionColor, legendModule.opacity.toString(), legendModule.border.color, legendModule.border.width.toString(), 'selection');\n                                    this.setColor(shapeElement, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendSelectionColor, legendModule.opacity.toString(), legendModule.border.color, legendModule.border.width.toString(), 'selection');\n                                    if (this.maps.selectedElementId.indexOf(shapeElement.getAttribute('id')) === -1) {\n                                        this.maps.selectedElementId.push(shapeElement.getAttribute('id'));\n                                    }\n                                    if (j === data.length - 1) {\n                                        this.maps.legendSelection = false;\n                                        this.removeLegend(this.maps.legendSelectionCollection);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Legend.prototype.setColor = function (element, fill, opacity, borderColor, borderWidth, type) {\n        var isLineStringShape = (element.parentElement.id.indexOf('LineString') > -1);\n        if (type === 'selection') {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.maintainStyleClass)((isLineStringShape ? 'LineselectionMap' : 'ShapeselectionMap'), (isLineStringShape ? 'LineselectionMapStyle' : 'ShapeselectionMapStyle'), (isLineStringShape ? 'transparent' : fill), opacity, (isLineStringShape ? fill : borderColor), borderWidth, this.maps);\n            element.setAttribute('class', isLineStringShape ? 'LineselectionMapStyle' : 'ShapeselectionMapStyle');\n        }\n        else {\n            element.setAttribute('fill', isLineStringShape ? 'transparent' : fill);\n            element.setAttribute('fill-opacity', opacity);\n            element.setAttribute('stroke', isLineStringShape ? fill : borderColor);\n            element.setAttribute('stroke-width', (Number(borderWidth) / this.maps.scale).toString());\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.pushCollection = function (targetElement, collection, oldElement, shapeSettings) {\n        collection.push({\n            legendElement: targetElement, legendOldFill: oldElement['fill'], legendOldOpacity: oldElement['opacity'],\n            legendOldBorderColor: oldElement['borderColor'], legendOldBorderWidth: oldElement['borderWidth'],\n            shapeOpacity: shapeSettings.opacity, shapeOldBorderColor: shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor,\n            shapeOldBorderWidth: shapeSettings.border.width\n        });\n        var length = collection.length;\n        collection[length - 1]['MapShapeCollection'] = { Elements: [] };\n        collection[length - 1]['shapeOldFillColor'] = [];\n        collection[length - 1]['shapeOldOpacity'] = null;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.removeLegend = function (collection) {\n        for (var i = 0; i < collection.length; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var item = collection[i];\n            this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n            var dataCount = item['MapShapeCollection']['Elements'].length;\n            for (var j = 0; j < dataCount; j++) {\n                var shapeFillColor = item['legendOldFill'].indexOf('url') !== -1\n                    ? item['shapeOldFillColor'][j] : item['legendOldFill'];\n                var shapeOpacity = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(item['shapeOldOpacity']) ? item['shapeOldOpacity'] : item['shapeOpacity'];\n                this.setColor(item['MapShapeCollection']['Elements'][j], shapeFillColor, shapeOpacity, item['shapeOldBorderColor'], item['shapeOldBorderWidth'], 'highlight');\n            }\n        }\n    };\n    Legend.prototype.removeLegendHighlightCollection = function () {\n        if (this.legendHighlightCollection.length > 0) {\n            this.removeLegend(this.legendHighlightCollection);\n            this.legendHighlightCollection = [];\n        }\n    };\n    Legend.prototype.removeLegendSelectionCollection = function (targetElement) {\n        if (this.maps.legendSelectionCollection.length > 0) {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(targetElement);\n            var shapeElements = this.shapesOfLegend(targetElement);\n            var dataCount = shapeElements.length;\n            for (var j = 0; j < dataCount; j++) {\n                var shapeElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getElement)(shapeElements[j]);\n                if (shapeElement.getAttribute('class') === 'ShapeselectionMapStyle' ||\n                    shapeElement.getAttribute('class') === 'LineselectionMapStyle') {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(shapeElement);\n                    var selectedElementIdIndex = this.maps.selectedElementId.indexOf(shapeElement.id);\n                    if (selectedElementIdIndex !== -1) {\n                        this.maps.selectedElementId.splice(selectedElementIdIndex, 1);\n                    }\n                }\n            }\n        }\n    };\n    Legend.prototype.removeShapeHighlightCollection = function () {\n        if (this.shapeHighlightCollection.length > 0) {\n            for (var i = 0; i < this.shapeHighlightCollection.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var item = this.shapeHighlightCollection[i];\n                var removeFill = true;\n                for (var j = 0; j < this.maps.legendSelectionCollection.length; j++) {\n                    if (this.maps.legendSelectionCollection[j]['legendElement'] === item['legendElement']) {\n                        removeFill = false;\n                    }\n                }\n                if (removeFill) {\n                    this.setColor(item['legendElement'], item['legendOldFill'], item['legendOldOpacity'], item['legendOldBorderColor'], item['legendOldBorderWidth'], 'highlight');\n                }\n            }\n        }\n    };\n    Legend.prototype.shapeHighLightAndSelection = function (targetElement, data, legendModule, getValue, layerIndex) {\n        if (data !== undefined) {\n            this.updateLegendElement();\n            this.shapeToggled = true;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var collection = this.maps.legendModule.legendCollection;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var indexes = this.legendIndexOnShape(data, layerIndex);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var shapeElement = this.shapeDataOnLegend(targetElement);\n            var toggleLegendCheck = this.maps.toggledLegendId.indexOf(indexes['actualIndex']);\n            if (this.maps.legendSettings.toggleLegendSettings.enable && toggleLegendCheck !== -1) {\n                this.shapeToggled = false;\n                this.legendHighlightCollection = [];\n                var collectionIndex = this.getIndexofLegend(this.shapeHighlightCollection, shapeElement['LegendEle']);\n                if (collectionIndex !== -1) {\n                    this.shapeHighlightCollection.splice(collectionIndex, 1);\n                }\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            if (indexes['currentIndex'] === undefined && indexes['actualIndex'] === undefined) {\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            if (indexes['currentIndex'] === undefined && getValue === 'selection'\n                && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect &&\n                targetElement.getAttribute('class') !== 'ShapeselectionMapStyle') {\n                this.maps.legendSelection = false;\n            }\n            if (getValue === 'selection' && !this.maps.layers[layerIndex].selectionSettings.enableMultiSelect &&\n                !this.maps.legendSelection) {\n                this.removeAllSelections();\n                this.maps.legendSelection = true;\n            }\n            if (indexes['currentIndex'] === undefined) {\n                if (getValue === 'selection' && indexes['actualIndex'] !== undefined) {\n                    var checkSelection = 0;\n                    for (var i = 0; i < shapeElement['Elements'].length; i++) {\n                        if (shapeElement['Elements'][i].getAttribute('class') === 'ShapeselectionMapStyle') {\n                            checkSelection++;\n                        }\n                    }\n                    var selectionIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n                    if (selectionIndex === -1) {\n                        this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n                        this.maps.legendSelectionClass = legendModule;\n                    }\n                    else {\n                        if ((checkSelection <= 1) && (targetElement.getAttribute('class') === 'ShapeselectionMapStyle'\n                            || targetElement.getAttribute('class') === 'LineselectionMapStyle')) {\n                            if (!this.maps.layers[layerIndex].selectionSettings.enableMultiSelect) {\n                                this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n                            }\n                            else {\n                                if (checkSelection <= 1 && (targetElement.getAttribute('class') === 'ShapeselectionMapStyle'\n                                    || targetElement.getAttribute('class') === 'LineselectionMapStyle')) {\n                                    this.maps.selectedLegendElementId.splice(selectionIndex, 1);\n                                }\n                            }\n                        }\n                    }\n                }\n                this.removeShapeHighlightCollection();\n                return null;\n            }\n            var text = collection[indexes['actualIndex']]['text'];\n            var content = void 0;\n            var legendShape = void 0;\n            if (this.maps.legendSettings.mode === 'Default') {\n                if (indexes['currentIndex'] !== undefined) {\n                    content = document.getElementById(this.maps.element.id + '_Legend_Text_Index_' + indexes['actualIndex']).textContent;\n                    legendShape = document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + indexes['actualIndex']);\n                }\n            }\n            else {\n                content = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex']\n                    + '_Text').textContent;\n                legendShape = document.getElementById(this.maps.element.id + '_Legend_Index_' + indexes['actualIndex']);\n            }\n            this.oldShapeElement = shapeElement['LegendEle'];\n            var length_1 = this.maps.legendSelectionCollection.length;\n            if (text === content) {\n                var shapeMatched = true;\n                if (this.maps.legendSelectionCollection) {\n                    for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n                        if (this.maps.legendSelectionCollection[i]['legendElement'] === shapeElement['LegendEle']) {\n                            shapeMatched = false;\n                            break;\n                        }\n                    }\n                }\n                if (getValue === 'highlight' && shapeMatched) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var selectionEle = this.isTargetSelected(shapeElement, this.shapeHighlightCollection);\n                    if (selectionEle === undefined || (selectionEle && !selectionEle['IsSelected'])) {\n                        this.pushCollection(legendShape, this.shapeHighlightCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n                    }\n                    for (var j = 0; j < this.shapeHighlightCollection.length; j++) {\n                        if (shapeElement['LegendEle'].id === this.shapeHighlightCollection[j]['legendElement'].id) {\n                            this.shapeHighlightCollection[j]['legendElement'] = shapeElement['LegendEle'];\n                        }\n                    }\n                    if (length_1 > 0) {\n                        for (var j = 0; j < length_1; j++) {\n                            if (shapeElement['LegendEle'] === this.maps.legendSelectionCollection[j]['legendElement']) {\n                                this.maps.legendSelectionCollection[j]['legendElement'] = shapeElement['LegendEle'];\n                                this.removeShapeHighlightCollection();\n                                break;\n                            }\n                            else if (j === length_1 - 1) {\n                                this.removeShapeHighlightCollection();\n                                this.setColor(legendShape, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendShape.getAttribute('fill'), legendModule.opacity.toString(), legendModule.border.color, legendModule.border.width.toString(), 'highlight');\n                            }\n                        }\n                    }\n                    else {\n                        this.removeShapeHighlightCollection();\n                        this.setColor(legendShape, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendShape.getAttribute('fill'), !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.opacity) ? legendModule.opacity.toString() : '1', legendModule.border.color, legendModule.border.width.toString(), 'highlight');\n                    }\n                }\n                else if (getValue === 'selection') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var selectionEle = this.isTargetSelected(shapeElement, this.maps.legendSelectionCollection);\n                    if (length_1 > 0) {\n                        var j = 0;\n                        while (j < this.maps.legendSelectionCollection.length) {\n                            if (shapeElement['LegendEle'] !== this.maps.legendSelectionCollection[j]['legendElement'] &&\n                                !legendModule.enableMultiSelect) {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                var element = this.maps.legendSelectionCollection[j];\n                                var selectedLegendIndex = this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']);\n                                this.maps.selectedLegendElementId.splice(selectedLegendIndex, 1);\n                                this.maps.legendSelectionCollection.splice(j, 1);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(element['legendElement']);\n                                this.maps.shapeSelections = true;\n                                j = 0;\n                            }\n                            else {\n                                j++;\n                            }\n                        }\n                    }\n                    if (selectionEle && (selectionEle['IsSelected'] && (targetElement.getAttribute('class') === 'ShapeselectionMapStyle'\n                        || targetElement.getAttribute('class') === 'LineselectionMapStyle'))) {\n                        var multiSelection = 0;\n                        if (legendModule.enableMultiSelect) {\n                            for (var i = 0; i < shapeElement['Elements'].length; i++) {\n                                if (targetElement.getAttribute('class') === shapeElement['Elements'][i].getAttribute('class')) {\n                                    multiSelection++;\n                                }\n                            }\n                        }\n                        if (multiSelection <= 1 && (!legendModule.enableMultiSelect ?\n                            this.maps.legendSelection : true)) {\n                            this.maps.selectedLegendElementId.splice(this.maps.selectedLegendElementId.indexOf(indexes['actualIndex']), 1);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(shapeElement['LegendEle'])) {\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(shapeElement['LegendEle']);\n                            }\n                            this.maps.legendSelectionCollection.splice(selectionEle['SelectionIndex'], 1);\n                            this.maps.shapeSelections = true;\n                        }\n                    }\n                    else {\n                        if ((selectionEle === undefined || (selectionEle && !selectionEle['IsSelected'])) &&\n                            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendShape)) {\n                            var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n                            if (legendSelectionIndex === -1) {\n                                this.pushCollection(legendShape, this.maps.legendSelectionCollection, collection[indexes['actualIndex']], this.maps.layers[layerIndex].shapeSettings);\n                            }\n                        }\n                        var addId = true;\n                        for (var i = 0; i < this.maps.selectedLegendElementId.length; i++) {\n                            if (indexes['actualIndex'] === this.maps.selectedLegendElementId[i]) {\n                                addId = false;\n                            }\n                        }\n                        if (addId) {\n                            this.maps.selectedLegendElementId.push(indexes['actualIndex']);\n                        }\n                        this.maps.legendSelectionClass = legendModule;\n                        this.removeLegend(this.shapeHighlightCollection);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendShape)) {\n                            this.setColor(legendShape, !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.fill) ? legendModule.fill : legendShape.getAttribute('fill'), !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendModule.opacity) ? legendModule.opacity.toString() : '1', legendModule.border.color, legendModule.border.width.toString(), 'selection');\n                            var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, legendShape);\n                            this.maps.legendSelectionCollection[legendSelectionIndex]['MapShapeCollection']['Elements'].push(targetElement);\n                        }\n                        this.maps.shapeSelections = false;\n                    }\n                }\n                else if (document.getElementsByClassName('highlightMapStyle').length > 0) {\n                    this.removeShapeHighlightCollection();\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(document.getElementsByClassName('highlightMapStyle')[0]);\n                }\n            }\n        }\n        else {\n            this.removeShapeHighlightCollection();\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.isTargetSelected = function (target, collection) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var selectEle;\n        for (var i = 0; i < collection.length; i++) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(target['LegendEle'].getAttribute('id')) &&\n                (target['LegendEle'].getAttribute('id') === collection[i]['legendElement'].getAttribute('id'))) {\n                selectEle = { IsSelected: true, SelectionIndex: i };\n            }\n        }\n        return selectEle;\n    };\n    Legend.prototype.updateLegendElement = function () {\n        for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n            if (document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id)) {\n                this.maps.legendSelectionCollection[i]['legendElement'] =\n                    document.getElementById(this.maps.legendSelectionCollection[i]['legendElement'].id);\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.getIndexofLegend = function (targetCollection, targetElement) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var legendIndex = targetCollection.map(function (e) { return e['legendElement']; }).indexOf(targetElement);\n        return legendIndex;\n    };\n    Legend.prototype.removeAllSelections = function () {\n        for (var i = 0; i < this.maps.selectedElementId.length; i++) {\n            var selectedElement = document.getElementById(this.maps.selectedElementId[i]);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(selectedElement);\n        }\n        for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n            var idIndex = this.maps.legendSettings.mode === 'Interactive' ?\n                this.maps.element.id + '_Legend_Index_' : this.maps.element.id + '_Legend_Shape_Index_';\n            var selectedElement = idIndex + this.maps.selectedLegendElementId[j];\n            var legendElement = document.getElementById(selectedElement);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendElement)) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeClass)(document.getElementById(selectedElement));\n            }\n        }\n        this.maps.legendSelectionCollection = [];\n        this.maps.selectedLegendElementId = [];\n        this.maps.selectedElementId = [];\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.legendIndexOnShape = function (data, index) {\n        var legendIndex;\n        var actualIndex;\n        var path = this.maps.layers[index].shapeDataPath;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var value = data[path];\n        var legendType = this.maps.legendSettings.mode;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var collection = this.maps.legendModule.legendCollection;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var currentCollection;\n        if (legendType === 'Default' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.legendModule.totalPages) && (this.maps.legendModule.totalPages.length > 0)) {\n            currentCollection = this.maps.legendModule.totalPages[this.maps.legendModule.currentPage]['Collection'];\n        }\n        var currentCollectionLength = (legendType === 'Default' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(currentCollection)) ? currentCollection['length'] : 1;\n        for (var i = 0; i < collection.length; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var dataValue = collection[i]['data'];\n            for (var k = 0; k < currentCollectionLength; k++) {\n                if (legendType !== 'Default' || collection[i]['text'] === currentCollection[k]['DisplayText']) {\n                    for (var j = 0; j < dataValue.length; j++) {\n                        if (value === dataValue[j]['name']) {\n                            legendIndex = k;\n                        }\n                    }\n                }\n            }\n            for (var j = 0; j < dataValue.length; j++) {\n                if (value === dataValue[j]['name']) {\n                    actualIndex = i;\n                }\n            }\n        }\n        return { currentIndex: legendIndex, actualIndex: actualIndex };\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.shapeDataOnLegend = function (targetElement) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var pointIndex;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var collection = this.maps.legendModule.legendCollection;\n        var legend = this.maps.legendSettings;\n        for (var i = 0; i < collection.length; i++) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var data = collection[i]['data'];\n            var process = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var elements = [];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var currentElement = { Elements: [] };\n            for (var j = 0; j < data.length; j++) {\n                var shapeElement = void 0;\n                shapeIndex = data[j]['shapeIndex'];\n                layerIndex = data[j]['layerIndex'];\n                dataIndex = data[j]['dataIndex'];\n                pointIndex = data[j]['pointIndex'];\n                if (pointIndex === -1) {\n                    shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                        layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n                }\n                else {\n                    shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                        layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex + '_multiLine_' + pointIndex);\n                }\n                if (targetElement === shapeElement) {\n                    process = true;\n                }\n                elements.push(shapeElement);\n            }\n            if (process) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(currentElement['LegendEle'])) {\n                    currentElement['LegendEle'] = legend.mode === 'Default' ?\n                        document.getElementById(this.maps.element.id + '_Legend_Shape_Index_' + i) :\n                        document.getElementById(this.maps.element.id + '_Legend_Index_' + i);\n                }\n                currentElement['Elements'] = elements;\n                return currentElement;\n            }\n        }\n        return null;\n    };\n    Legend.prototype.shapesOfLegend = function (targetElement) {\n        var shapeIndex;\n        var layerIndex;\n        var dataIndex;\n        var pointIndex;\n        var idIndex = parseFloat(targetElement.id.charAt(targetElement.id.length - 1));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var data = this.maps.legendModule.legendCollection[idIndex]['data'];\n        var legendShapeElements = [];\n        for (var i = 0; i < data.length; i++) {\n            var shapeElement = void 0;\n            shapeIndex = data[i]['shapeIndex'];\n            layerIndex = data[i]['layerIndex'];\n            dataIndex = data[i]['dataIndex'];\n            pointIndex = data[i]['pointIndex'];\n            if (pointIndex === -1) {\n                shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                    layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex);\n            }\n            else {\n                shapeElement = document.getElementById(this.maps.element.id + '_LayerIndex_' +\n                    layerIndex + '_shapeIndex_' + shapeIndex + '_dataIndex_' + dataIndex + '_multiLine_' + pointIndex);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(shapeElement)) {\n                legendShapeElements.push(shapeElement.id);\n            }\n        }\n        return legendShapeElements;\n    };\n    Legend.prototype.legendToggle = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        if (this.maps.selectedLegendElementId) {\n            // To maintain the state of legend selection during page resize.\n            for (var j = 0; j < this.maps.selectedLegendElementId.length; j++) {\n                var idIndex = legend.mode === 'Interactive' ? this.maps.element.id + '_Legend_Index_' : this.maps.element.id + '_Legend_Shape_Index_';\n                var selectedElement = map.svgObject.querySelector('#' + idIndex + this.maps.selectedLegendElementId[j]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(selectedElement)) {\n                    var fill = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.legendSelectionClass.fill) ?\n                        this.maps.legendSelectionClass.fill : selectedElement.getAttribute('fill');\n                    this.setColor(selectedElement, fill, this.maps.legendSelectionClass.opacity.toString(), this.maps.legendSelectionClass.border.color, this.maps.legendSelectionClass.border.width.toString(), 'selection');\n                    for (var i = 0; i < this.maps.legendSelectionCollection.length; i++) {\n                        if (this.maps.legendSelectionCollection[i]['legendElement'].id === selectedElement.id) {\n                            this.maps.legendSelectionCollection[i]['legendElement'] = selectedElement;\n                        }\n                    }\n                    var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, selectedElement);\n                    if (legendSelectionIndex === -1) {\n                        var layerIndex = this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]]['data'][j]['layerIndex'];\n                        this.pushCollection(selectedElement, this.maps.legendSelectionCollection, this.maps.legendModule.legendCollection[this.maps.selectedLegendElementId[j]], this.maps.layers[layerIndex].shapeSettings);\n                    }\n                }\n            }\n        }\n        if (this.maps.toggledLegendId) {\n            for (var j = 0; j < this.maps.toggledLegendId.length; j++) {\n                var legendTextId = legend.mode === 'Interactive' ? ('#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j] + '_Text') : ('#' + this.maps.element.id + '_Legend_Text_Index_' + this.maps.toggledLegendId[j]);\n                var textElement = map.svgObject.querySelector(legendTextId);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(textElement)) {\n                    textElement.setAttribute('fill', '#E5E5E5');\n                }\n                var legendShapeId = legend.mode === 'Interactive' ? ('#' + this.maps.element.id + '_Legend_Index_' + this.maps.toggledLegendId[j]) : ('#' + this.maps.element.id + '_Legend_Shape_Index_' + this.maps.toggledLegendId[j]);\n                var legendElement = map.svgObject.querySelector(legendShapeId);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendElement)) {\n                    legendElement.setAttribute('fill', '#E5E5E5');\n                }\n            }\n        }\n    };\n    Legend.prototype.renderLegendBorder = function () {\n        var map = this.maps;\n        var legend = map.legendSettings;\n        var legendTitle = legend.title.text;\n        var textStyle = {\n            fontFamily: legend.titleStyle.fontFamily, fontStyle: legend.titleStyle.fontStyle,\n            fontWeight: legend.titleStyle.fontWeight, size: legend.titleStyle.size, color: legend.titleStyle.color,\n            opacity: legend.titleStyle.opacity\n        };\n        var textOptions;\n        var spacing = 10;\n        var trimTitle = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.textTrim)((this.legendItemRect.width + (spacing * 2)), legendTitle, textStyle);\n        var textSize = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.measureText)(trimTitle, textStyle);\n        this.legendBorderRect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect((this.legendItemRect.x - spacing), (this.legendItemRect.y - spacing - textSize.height), (this.legendItemRect.width) + (spacing * 2), (this.legendItemRect.height) + (spacing * 2) + textSize.height +\n            (legend.mode === 'Interactive' ? 0 : (this.page !== 0) ? spacing : 0));\n        var legendBorder = {\n            color: legend.border.color || this.maps.themeStyle.legendBorderColor, opacity: legend.border.opacity,\n            width: legend.border.width || this.maps.themeStyle.legendBorderWidth\n        };\n        legendBorder.opacity = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legendBorder.opacity) ? 1 : legendBorder.opacity;\n        var renderOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.RectOption(map.element.id + '_Legend_Border', legend.background, legendBorder, 1, this.legendBorderRect, null, null, '', '');\n        this.legendGroup.appendChild(map.renderer.drawRectangle(renderOptions));\n        this.getLegendAlignment(map, this.legendBorderRect.width, this.legendBorderRect.height, legend);\n        this.legendGroup.setAttribute('transform', 'translate( ' + (this.translate.x + (-this.legendBorderRect.x)) + ' ' +\n            (this.translate.y + (-(this.legendBorderRect.y))) + ' )');\n        if (legend.position !== 'Float') {\n            map.svgObject.appendChild(this.legendGroup);\n        }\n        if (legendTitle) {\n            textStyle.color = (textStyle.color !== null) ? textStyle.color : this.maps.themeStyle.legendTitleFontColor;\n            textStyle.fontFamily = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(textStyle.fontFamily) ? textStyle.fontFamily\n                : this.maps.themeStyle.fontFamily;\n            textStyle.size = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(textStyle.size) ? textStyle.size\n                : this.maps.themeStyle.subTitleFontSize || _model_theme__WEBPACK_IMPORTED_MODULE_3__.Theme.legendTitleFont.size;\n            textStyle.fontWeight = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(textStyle.fontWeight) ? textStyle.fontWeight\n                : this.maps.themeStyle.titleFontWeight || _model_theme__WEBPACK_IMPORTED_MODULE_3__.Theme.legendTitleFont.fontWeight;\n            textOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.TextOption(map.element.id + '_LegendTitle', (this.legendItemRect.x) + (this.legendItemRect.width / 2), this.legendItemRect.y - (textSize.height / 2) - spacing / 2, 'middle', trimTitle, '');\n            var element = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.renderTextElement)(textOptions, textStyle, textStyle.color, this.legendGroup);\n            element.setAttribute('aria-label', legendTitle);\n            element.setAttribute('role', 'region');\n        }\n    };\n    Legend.prototype.changeNextPage = function (e) {\n        this.currentPage = (e.target.id.indexOf('_Left_Page_') > -1) ? (this.currentPage - 1) :\n            (this.currentPage + 1);\n        this.legendGroup = this.maps.renderer.createGroup({ id: this.maps.element.id + '_Legend_Group' });\n        this.maps.mapAreaRect = this.initialMapAreaRect;\n        this.drawLegendItem(this.currentPage);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.legendModule) && this.maps.legendSettings.position === 'Float') {\n            if (this.maps.isTileMap) {\n                this.maps.mapLayerPanel.layerGroup.appendChild(this.maps.legendModule.legendGroup);\n            }\n            else {\n                this.maps.svgObject.appendChild(this.maps.legendModule.legendGroup);\n            }\n        }\n        if ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Border', this.maps.element.id)) {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Border', this.maps.element.id).style.pointerEvents = 'none';\n        }\n    };\n    Legend.prototype.getLegendAlignment = function (map, width, height, legend) {\n        var x;\n        var y;\n        var spacing = 10;\n        var totalRect;\n        // eslint-disable-next-line prefer-const\n        totalRect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.extend)({}, map.mapAreaRect, totalRect, true);\n        var areaX = totalRect.x;\n        var areaY = totalRect.y;\n        var areaHeight = totalRect.height;\n        var areaWidth = totalRect.width;\n        var totalWidth = map.availableSize.width;\n        var totalHeight = map.availableSize.height;\n        var locationX = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legend.location.x) ? (typeof (legend.location.x) === 'string' &&\n            legend.location.x.indexOf('%') > -1 ? (map.availableSize.width / 100) * parseFloat(legend.location.x) :\n            typeof (legend.location.x) === 'string' ? parseFloat(legend.location.x) : legend.location.x) : 0;\n        var locationY = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(legend.location.y) ? (typeof (legend.location.y) === 'string' &&\n            legend.location.y.indexOf('%') > -1 ? (map.availableSize.height / 100) * parseFloat(legend.location.y) :\n            typeof (legend.location.y) === 'string' ? parseFloat(legend.location.y) : legend.location.y) : 0;\n        if (legend.position === 'Float') {\n            this.translate = map.isTileMap ? new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(locationX, locationY + (spacing / 4)) :\n                new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(locationX + map.mapAreaRect.x, locationY + map.mapAreaRect.y);\n            this.legendTotalRect = map.mapAreaRect;\n        }\n        else {\n            switch (legend.position) {\n                case 'Top':\n                case 'Bottom':\n                    totalRect.height = (legend.position === 'Top') ? (areaHeight - height) : (areaHeight - height - (spacing * 2));\n                    x = (totalWidth / 2) - (width / 2);\n                    y = (legend.position === 'Top') ? areaY : (areaY + totalRect.height);\n                    totalRect.y = (legend.position === 'Top') ? areaY + height + (map.isTileMap ? (spacing / 2) : spacing) : areaY - (spacing / 2);\n                    break;\n                case 'Left':\n                case 'Right':\n                    totalRect.width = (areaWidth - width - map.mapAreaRect.x);\n                    x = (legend.position === 'Left') ? areaX + (spacing / 2) : (areaX + totalRect.width + spacing);\n                    y = (totalHeight / 2) - (height / 2);\n                    totalRect.x = (legend.position === 'Left') ? areaX + width + spacing : areaX;\n                    break;\n            }\n            switch (legend.alignment) {\n                case 'Near':\n                    if (legend.position === 'Top' || legend.position === 'Bottom') {\n                        x = totalRect.x - (legend.mode === 'Interactive' ? spacing : 0);\n                    }\n                    else {\n                        y = totalRect.y - (!(legend.height && legend.width) && legend.mode === 'Interactive' ? map.mapAreaRect.x : 0);\n                    }\n                    break;\n                case 'Far':\n                    if (legend.position === 'Top' || legend.position === 'Bottom') {\n                        x = (totalWidth - width) - (legend.mode === 'Interactive' ? 0 : spacing);\n                    }\n                    else {\n                        y = totalHeight - height - (legend.mode === 'Default' ? spacing : 0);\n                    }\n                    break;\n            }\n            if ((legend.height || legend.width) && legend.mode !== 'Interactive') {\n                this.legendTotalRect = map.mapAreaRect = map.totalRect = totalRect;\n            }\n            else {\n                map.totalRect = null;\n                if ((legend.height || legend.width) && legend.mode === 'Interactive') {\n                    map.totalRect = totalRect;\n                }\n                this.legendTotalRect = map.mapAreaRect = totalRect;\n            }\n            if (legend.position === 'Left') {\n                map.mapAreaRect.width = totalRect.width;\n            }\n            this.translate = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Point(x, y);\n        }\n    };\n    Legend.prototype.getMarkersLegendCollections = function (layerIndex, markers) {\n        var _this = this;\n        Array.prototype.forEach.call(markers, function (marker, markerIndex) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var dataSource = marker.dataSource;\n            var field = marker.legendText;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var templateFn;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                var imageSrc = null;\n                var showLegend = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[_this.maps.legendSettings.showLegendPath]) ? true :\n                    data[_this.maps.legendSettings.showLegendPath];\n                var latitude = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data['latitude']) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data['Latitude']) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[marker.latitudeValuePath]);\n                var longitude = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data['longitude']) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data['Longitude']) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[marker.longitudeValuePath]);\n                if (marker.visible && showLegend && latitude && longitude) {\n                    if (marker.template) {\n                        templateFn = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getTemplateFunction)(marker.template, _this.maps);\n                        var templateElement = templateFn(_this.maps);\n                        var markerEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(templateElement.childElementCount) ? templateElement[0] :\n                            templateElement;\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                        imageSrc = markerEle.querySelector('img').src;\n                    }\n                    var text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[field]) ? '' : data[field];\n                    var legendFill = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(marker.colorValuePath) ? data[marker.colorValuePath] : marker.fill;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var newData = [];\n                    if (_this.maps.legendSettings.removeDuplicateLegend) {\n                        newData.push(_this.getMarkerLegendData(layerIndex, text, legendFill));\n                        _this.getOverallLegendItemsCollection(text, legendFill, newData, showLegend);\n                    }\n                    else {\n                        newData.push({ layerIndex: layerIndex, markerIndex: markerIndex, dataIndex: dataIndex, value: legendFill,\n                            name: text,\n                            shape: (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(marker.shapeValuePath) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[marker.shapeValuePath]) && data[marker.shapeValuePath] !== '') ? data[marker.shapeValuePath] : (_this.maps.legendSettings.useMarkerShape ? marker.shape : _this.maps.legendSettings.shape) });\n                        _this.getOverallLegendItemsCollection(text, legendFill, newData, showLegend);\n                    }\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.getMarkerLegendData = function (layerIndex, text, legendFill) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var legendData = [];\n        this.maps.layers[layerIndex].markerSettings.map(function (markerSettings, markerIndex) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var markerData = markerSettings.dataSource;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            Array.prototype.forEach.call(markerData, function (data, dataIndex) {\n                var marker = _this.maps.layers[layerIndex].markerSettings[markerIndex];\n                if ((text === data[marker.legendText] || text === '') && legendFill === (data[marker.colorValuePath] || marker.fill)) {\n                    legendData.push({ layerIndex: layerIndex, markerIndex: markerIndex, dataIndex: dataIndex, value: legendFill, name: text,\n                        shape: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(marker.shapeValuePath) ? data[marker.shapeValuePath] : marker.shape });\n                }\n            });\n        });\n        return legendData;\n    };\n    Legend.prototype.getRangeLegendCollection = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        var legendText;\n        var legendIndex = 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var fill = this.maps.legendSettings.fill;\n        var rangeData = [];\n        var _loop_1 = function (colorMap) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.from) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.to)) {\n                legendText = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.label) ? colorMap.label : colorMap.from + ' - ' + colorMap.to;\n                rangeData = [];\n                var colorMapProcess_1 = false;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataSource) && dataSource.length > 0) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                        var colorValue = (colorValuePath.indexOf('.') > -1) ? Number((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, colorValuePath)) :\n                            parseFloat(data[colorValuePath]);\n                        if (colorValue >= colorMap.from && colorValue <= colorMap.to) {\n                            colorMapProcess_1 = true;\n                            rangeData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, colorValue));\n                        }\n                    });\n                }\n                if (!colorMapProcess_1) {\n                    rangeData.push({\n                        layerIndex: layerIndex, shapeIndex: null, dataIndex: null,\n                        name: null, value: null\n                    });\n                }\n                var legendFill = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(fill)) ? Object.prototype.toString.call(colorMap.color) === '[object Array]' ?\n                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.value) ? colorMap.color[0] : this_1.legendGradientColor(colorMap, legendIndex) :\n                    colorMap.color : fill;\n                legendIndex++;\n                this_1.getOverallLegendItemsCollection(legendText, legendFill, rangeData, colorMap.showLegend);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, colorMapping_1 = colorMapping; _i < colorMapping_1.length; _i++) {\n            var colorMap = colorMapping_1[_i];\n            _loop_1(colorMap);\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.getOverallLegendItemsCollection = function (legendText, legendFill, legendData, showLegend) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var newColllection = [];\n        var legend = this.maps.legendSettings;\n        if (legendData.length > 0 && showLegend) {\n            for (var i = 0; i < legendData.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var collection = legendData[i];\n                if (collection.length > 0) {\n                    for (var j = 0; j < collection.length; j++) {\n                        newColllection.push(collection[j]);\n                    }\n                }\n                else {\n                    newColllection.push(legendData[i]);\n                }\n                newColllection['_isVisible'] = true;\n            }\n            var isDuplicate = this.maps.legendSettings.removeDuplicateLegend ?\n                this.removeDuplicates(this.legendCollection, legendText, legendFill) : false;\n            if (!isDuplicate) {\n                this.legendCollection.push({\n                    text: legendText, fill: legendFill, data: newColllection, opacity: legend.opacity,\n                    borderColor: legend.shapeBorder.color, borderWidth: legend.shapeBorder.width\n                });\n            }\n            else {\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    if (this.legendCollection[i]['text'] === legendText && this.legendCollection[i]['fill'] === legendFill) {\n                        this.legendCollection[i].data.push(newColllection[0]);\n                    }\n                }\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Legend.prototype.removeDuplicates = function (legendCollection, text, legendFill) {\n        var isDuplicate = false;\n        for (var i = 0; i < legendCollection.length; i++) {\n            if ((legendCollection[i]['text'] === text || legendCollection[i]['text'] === '') && legendCollection[i]['fill'] === legendFill) {\n                isDuplicate = true;\n                break;\n            }\n            else {\n                continue;\n            }\n        }\n        return isDuplicate;\n    };\n    Legend.prototype.getEqualLegendCollection = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var fill = this.maps.legendSettings.fill;\n        var equalValues = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var legendText;\n        var equalData = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var outOfRangeValues = [];\n        var outOfRange = [];\n        var _loop_2 = function (colorMap) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.value)) {\n                legendText = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.label) ? colorMap.label : colorMap.value;\n                equalData = [];\n                var eqaulColorProcess_1 = false;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataSource) && dataSource.length > 0) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                        var equalValue = ((colorValuePath && colorValuePath.indexOf('.') > -1) ? ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, colorValuePath)) :\n                            (data[colorValuePath]));\n                        if (equalValue === colorMap.value) {\n                            eqaulColorProcess_1 = true;\n                            if (equalValues.indexOf(equalValue) === -1) {\n                                equalValues.push(equalValue);\n                            }\n                            equalData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n                        }\n                        else {\n                            if (outOfRangeValues.indexOf(equalValue) === -1) {\n                                outOfRangeValues.push(equalValue);\n                            }\n                        }\n                    });\n                }\n                for (var x = 0; x < equalValues.length; x++) {\n                    for (var y = 0; y < outOfRangeValues.length; y++) {\n                        if (equalValues[x] === outOfRangeValues[y]) {\n                            var equalIndex = outOfRangeValues.indexOf(equalValues[x]);\n                            outOfRangeValues.splice(equalIndex, 1);\n                        }\n                    }\n                }\n                if (!eqaulColorProcess_1) {\n                    equalData.push({\n                        layerIndex: layerIndex, shapeIndex: null, dataIndex: null,\n                        name: null, value: null\n                    });\n                }\n                var legendFill = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(fill)) ? Object.prototype.toString.call(colorMap.color) === '[object Array]'\n                    ? colorMap.color[0] : colorMap.color : fill;\n                this_2.getOverallLegendItemsCollection(legendText, legendFill, equalData, colorMap.showLegend);\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.minOpacity) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.maxOpacity) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.value)\n                && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.from) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.to) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.color)) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                    var equalValue = ((colorValuePath.indexOf('.') > -1) ? ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, colorValuePath)) :\n                        (data[colorValuePath]));\n                    for (var k = 0; k < outOfRangeValues.length; k++) {\n                        if (equalValue === outOfRangeValues[k]) {\n                            outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, equalValue));\n                        }\n                    }\n                });\n                if (outOfRangeValues.length === 0) {\n                    var range_1 = false;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                        range_1 = false;\n                        var rangeValue = data[colorValuePath];\n                        for (var z = 0; z < colorMapping.length; z++) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(rangeValue) && !isNaN(rangeValue)) {\n                                if (rangeValue >= colorMapping[z].from && rangeValue <= colorMapping[z].to) {\n                                    range_1 = true;\n                                }\n                            }\n                            else if (!range_1) {\n                                range_1 = false;\n                            }\n                        }\n                        if (!range_1) {\n                            outOfRange.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, rangeValue));\n                        }\n                    });\n                }\n                legendText = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.label) ? colorMap.label : 'Others';\n                var outfill = ((Object.prototype.toString.call(colorMap.color) === '[object Array]'))\n                    ? colorMap.color[0] : colorMap.color;\n                var legendOutFill = outfill;\n                this_2.getOverallLegendItemsCollection(legendText, legendOutFill, outOfRange, colorMap.showLegend);\n            }\n        };\n        var this_2 = this;\n        for (var _i = 0, colorMapping_2 = colorMapping; _i < colorMapping_2.length; _i++) {\n            var colorMap = colorMapping_2[_i];\n            _loop_2(colorMap);\n        }\n    };\n    Legend.prototype.getDataLegendCollection = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath) {\n        var _this = this;\n        var legendText;\n        var fill = this.maps.legendSettings.fill;\n        var valuePath = this.maps.legendSettings.valuePath;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorValuePath) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataSource)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            Array.prototype.forEach.call(dataSource, function (data, dataIndex) {\n                var showLegend = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.maps.legendSettings.showLegendPath) ?\n                    true : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[_this.maps.legendSettings.showLegendPath]) ?\n                    false : data[_this.maps.legendSettings.showLegendPath];\n                var dataValue = ((colorValuePath.indexOf('.') > -1) ? ((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, colorValuePath)) :\n                    (data[colorValuePath]));\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var newData = [];\n                var legendFill = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(fill)) ? dataValue : fill;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataValue) && colorMapping.length === 0 &&\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(valuePath) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataPath))) {\n                    legendText = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(data[valuePath]) ? ((valuePath.indexOf('.') > -1) ?\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, valuePath) : data[valuePath]) : ((dataPath.indexOf('.') > -1) ?\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, dataPath) : data[dataPath]);\n                    newData.push(_this.getLegendData(layerIndex, dataIndex, data, dataPath, layerData, propertyPath, dataValue));\n                }\n                _this.getOverallLegendItemsCollection(legendText, legendFill, newData, showLegend);\n            });\n        }\n    };\n    Legend.prototype.interactiveHandler = function (e) {\n        var target = e.target;\n        var legend = this.maps.legendSettings;\n        var id = this.maps.element.id + '_Interactive_Legend';\n        var hoverId = legend.type === 'Layers' ? '_shapeIndex_' : (legend.type === 'Markers') ? '_MarkerIndex_' :\n            '_BubbleIndex_';\n        if (target.id.indexOf(hoverId) > 1) {\n            var layerIndex = parseFloat(target.id.split('_LayerIndex_')[1].split('_')[0]);\n            var dataIndex = parseFloat(target.id.split(/_dataIndex_/i)[1].split('_')[0]);\n            var fill = void 0;\n            var stroke = void 0;\n            var strokeWidth = void 0;\n            if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(id, this.maps.element.id)))) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.remove)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(id, this.maps.element.id));\n            }\n            var layer = this.maps.layersCollection[layerIndex];\n            var markerVisible = (legend.type === 'Layers' ? layer.visible :\n                legend.type === 'Markers' ? layer.markerSettings[parseFloat(target.id.split('_MarkerIndex_')[1].split('_')[0])].visible :\n                    (this.maps.getBubbleVisible(this.maps.layersCollection[layerIndex])));\n            if (legend.visible && this.legendRenderingCollections.length > 0\n                && legend.mode === 'Interactive' && markerVisible) {\n                var svgRect = this.maps.svgObject.getBoundingClientRect();\n                for (var i = 0; i < this.legendCollection.length; i++) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var currentData = this.legendCollection[i];\n                    var legendElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + i, this.maps.element.id);\n                    var legendRect = legendElement.getBoundingClientRect();\n                    var rect = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.Rect(Math.abs(legendRect.left - svgRect.left), Math.abs(legendRect.top - svgRect.top), legendRect.width, legendRect.height);\n                    fill = legendElement.getAttribute('fill');\n                    stroke = legend.shapeBorder.color;\n                    strokeWidth = legend.shapeBorder.width;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(currentData['data'])) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var data = currentData['data'];\n                        var _loop_3 = function (j) {\n                            if (dataIndex === data[j]['dataIndex'] && layerIndex === data[j]['layerIndex']) {\n                                this_3.renderInteractivePointer(legend, fill, stroke, id, strokeWidth, rect);\n                                var arrowElement_1 = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(id, this_3.maps.element.id);\n                                if (this_3.maps.isDevice && !((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(arrowElement_1))) {\n                                    clearTimeout(this_3.arrowTimer);\n                                    this_3.arrowTimer = setTimeout(function () {\n                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(arrowElement_1.parentNode)) {\n                                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.remove)(arrowElement_1);\n                                        }\n                                    }, 2000);\n                                }\n                                return \"break\";\n                            }\n                        };\n                        var this_3 = this;\n                        for (var j = 0; j < data.length; j++) {\n                            var state_1 = _loop_3(j);\n                            if (state_1 === \"break\")\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(id, this.maps.element.id)))) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.remove)((0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(id, this.maps.element.id));\n            }\n        }\n    };\n    Legend.prototype.renderInteractivePointer = function (legend, fill, stroke, id, strokeWidth, rect) {\n        var path;\n        var locX;\n        var locY;\n        var height = 10;\n        var width = 10;\n        var direction = (legend.orientation === 'None') ? (legend.position === 'Top' || legend.position === 'Bottom')\n            ? 'Horizontal' : 'Vertical' : legend.orientation;\n        rect.y = legend.position === 'Float' && this.maps.isTileMap ? rect.y - this.maps.mapAreaRect.y : rect.y;\n        if (direction === 'Horizontal') {\n            if (!legend.invertedPointer) {\n                locX = rect.x + (rect.width / 2) - (legend.position === 'Float' && this.maps.isTileMap ? this.maps.mapAreaRect.x : 0);\n                locY = rect.y;\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) +\n                    ' L ' + (locX + width) + ' ' + (locY - height) + ' Z ';\n            }\n            else {\n                locX = rect.x + (rect.width / 2) - (legend.position === 'Float' && this.maps.isTileMap ? this.maps.mapAreaRect.x : 0);\n                locY = rect.y + (rect.height);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY + height) +\n                    ' L ' + (locX + width) + ' ' + (locY + height) + ' Z ';\n            }\n        }\n        else {\n            if (!legend.invertedPointer) {\n                locX = rect.x + rect.width - (legend.position === 'Float' && this.maps.isTileMap ? this.maps.mapAreaRect.x : 0);\n                locY = rect.y + (rect.height / 2);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX + width) + ' ' + (locY - height) +\n                    ' L ' + (locX + width) + ' ' + (locY + height) + ' z ';\n            }\n            else {\n                locX = rect.x - (legend.position === 'Float' && this.maps.isTileMap ? this.maps.mapAreaRect.x : 0);\n                locY = rect.y + (rect.height / 2);\n                path = ' M ' + locX + ' ' + locY + ' L ' + (locX - width) + ' ' + (locY - height) +\n                    ' L ' + (locX - width) + ' ' + (locY + height) + ' z ';\n            }\n        }\n        var pathOptions = new _utils_helper__WEBPACK_IMPORTED_MODULE_1__.PathOption(id, fill, strokeWidth, stroke, 1, 1, '', path);\n        if (legend.position === 'Float' && this.maps.isTileMap) {\n            this.maps.mapLayerPanel.layerGroup.appendChild(this.maps.renderer.drawPath(pathOptions));\n        }\n        else {\n            this.maps.svgObject.appendChild(this.maps.renderer.drawPath(pathOptions));\n        }\n    };\n    Legend.prototype.wireEvents = function (element) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.EventHandler.add(element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchStartEvent, this.changeNextPage, this);\n    };\n    Legend.prototype.addEventListener = function () {\n        if (this.maps.isDestroyed) {\n            return;\n        }\n        this.maps.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchMoveEvent, this.interactiveHandler, this);\n        this.maps.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchEndEvent, this.interactiveHandler, this);\n        this.maps.on(_index__WEBPACK_IMPORTED_MODULE_0__.click, this.legendClick, this);\n    };\n    Legend.prototype.markerToggleSelection = function (mapElement, layerIndex, markerIndex, legendIndex) {\n        mapElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n        mapElement.setAttribute('stroke', this.maps.layers[layerIndex].markerSettings[markerIndex].border.color);\n        mapElement.setAttribute('fill-opacity', (this.maps.layers[layerIndex].markerSettings[markerIndex].opacity).toString());\n        mapElement.setAttribute('stroke-width', (this.maps.layers[layerIndex].markerSettings[markerIndex].border.width).toString());\n        mapElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[layerIndex].markerSettings[markerIndex].border.opacity) ?\n            this.maps.layers[layerIndex].markerSettings[markerIndex].opacity :\n            this.maps.layers[layerIndex].markerSettings[markerIndex].border.opacity).toString());\n        var indexToRemoveSelectedElement = this.maps.toggledElementId.indexOf(mapElement.id);\n        if (indexToRemoveSelectedElement !== -1) {\n            this.maps.toggledElementId.splice(indexToRemoveSelectedElement, 1);\n        }\n    };\n    Legend.prototype.bubbleToggleSelection = function (mapElement, layerIndex, bubbleIndex, legendIndex) {\n        mapElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n        mapElement.setAttribute('stroke', this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].border.color);\n        mapElement.setAttribute('fill-opacity', (this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].opacity).toString());\n        mapElement.setAttribute('stroke-width', (this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].border.width).toString());\n        mapElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].border.opacity) ?\n            this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].opacity :\n            this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].border.opacity).toString());\n    };\n    Legend.prototype.legendClick = function (targetEle) {\n        var legendShapeId;\n        var legendTextId;\n        var legendToggleFill = this.maps.legendSettings.toggleLegendSettings.fill;\n        var legendToggleOpacity = this.maps.legendSettings.toggleLegendSettings.opacity;\n        var legendToggleBorderColor = this.maps.legendSettings.toggleLegendSettings.border.color;\n        var legendToggleBorderWidth = this.maps.legendSettings.toggleLegendSettings.border.width;\n        var legendToggleBorderOpacity = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.legendSettings.toggleLegendSettings.border.opacity) ?\n            this.maps.legendSettings.toggleLegendSettings.opacity : this.maps.legendSettings.toggleLegendSettings.border.opacity;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(targetEle.parentNode) && targetEle.parentNode['id'].indexOf(this.maps.element.id + '_Legend_Index_') > -1) {\n            var mapElement = void 0;\n            var legendIndex = parseFloat(targetEle.parentElement.id.substr((this.maps.element.id + '_Legend_Index_').length));\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var selectedItem = this.legendCollection[legendIndex]['data'];\n            var isVisible = selectedItem['_isVisible'];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var shape = void 0;\n            if (this.maps.legendSettings.toggleLegendSettings.enable && (this.maps.legendSettings.type === 'Bubbles' || this.maps.legendSettings.type === 'Markers')) {\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var j = 0; j < (this.maps.legendSettings.type === 'Bubbles' ? this.maps.layers[k].bubbleSettings.length : this.maps.layers[k].markerSettings.length); j++) {\n                        for (var i = 0; i < selectedItem.length; i++) {\n                            shape = this.legendCollection[legendIndex]['data'][i];\n                            mapElement = this.maps.legendSettings.type === 'Bubbles' ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                                '_BubbleIndex_' + j + '_dataIndex_' + shape['dataIndex'], this.maps.element.id) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                                '_MarkerIndex_' + shape['markerIndex'] + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(shape['shape']) && shape['shape'] === 'Balloon') {\n                                mapElement = this.maps.legendSettings.type === 'Bubbles' ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                                    '_BubbleIndex_' + j + '_dataIndex_' + shape['dataIndex'] + '_Group', this.maps.element.id) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                                    '_MarkerIndex_' + shape['markerIndex'] + '_dataIndex_' + shape['dataIndex'] + '_Group', this.maps.element.id);\n                                mapElement = mapElement.children[0];\n                            }\n                            var toggledLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                            if (isVisible && mapElement !== null) {\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    mapElement.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                                    mapElement.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                    mapElement.setAttribute('fill-opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                    mapElement.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width) ? 0 : this.maps.layers[k].shapeSettings.border.width).toString());\n                                    mapElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity) ?\n                                        this.maps.layers[k].shapeSettings.opacity :\n                                        this.maps.layers[k].shapeSettings.border.opacity).toString());\n                                }\n                                else {\n                                    mapElement.setAttribute('fill', legendToggleFill);\n                                    mapElement.setAttribute('fill-opacity', (legendToggleOpacity).toString());\n                                    mapElement.setAttribute('stroke', legendToggleBorderColor);\n                                    mapElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                    mapElement.setAttribute('stroke-opacity', (legendToggleBorderOpacity).toString());\n                                }\n                                if (this.maps.legendSettings.type === 'Markers') {\n                                    if (toggledLegendIdIndex === -1) {\n                                        this.maps.toggledLegendId.push(legendIndex);\n                                    }\n                                    var index = this.maps.toggledElementId.indexOf(mapElement.id);\n                                    if (index === -1) {\n                                        this.maps.toggledElementId.push(mapElement.id);\n                                    }\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    if (!this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, legendToggleFill, legendToggleOpacity, legendToggleBorderColor, legendToggleBorderWidth, legendToggleBorderOpacity, legendToggleFill);\n                                    }\n                                    else {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, this.maps.layers[k].shapeSettings.fill, this.maps.layers[k].shapeSettings.opacity, \n                                        /* eslint-disable-next-line max-len */\n                                        this.maps.layers[k].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width)\n                                            ? 0 : this.maps.layers[k].shapeSettings.border.width, \n                                        /* eslint-disable-next-line max-len */\n                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity)\n                                            ? this.maps.layers[k].shapeSettings.opacity\n                                            : this.maps.layers[k].shapeSettings.border.opacity, this.maps.layers[k].shapeSettings.fill);\n                                    }\n                                }\n                            }\n                            else {\n                                if (this.maps.legendSettings.type === 'Markers') {\n                                    if (toggledLegendIdIndex !== -1 && i === 0) {\n                                        this.maps.toggledLegendId.splice(toggledLegendIdIndex, 1);\n                                    }\n                                    this.markerToggleSelection(mapElement, k, j, legendIndex);\n                                }\n                                else {\n                                    this.bubbleToggleSelection(mapElement, k, j, legendIndex);\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    this.setToggleAttributes(legendTextId, legendShapeId, this.legendCollection[legendIndex]['fill'], this.legendCollection[legendIndex]['opacity'], this.legendCollection[legendIndex]['shapeBorder']['color'], this.legendCollection[legendIndex]['shapeBorder']['width'], this.legendCollection[legendIndex]['shapeBorder']['opacity'], this.maps.legendSettings.textStyle.color);\n                                    if (this.maps.legendSettings.shape === 'HorizontalLine' || this.maps.legendSettings.shape === 'VerticalLine' || this.maps.legendSettings.shape === 'Cross') {\n                                        legendShapeId.setAttribute('stroke', this.legendCollection[legendIndex]['fill']);\n                                    }\n                                }\n                            }\n                        }\n                        selectedItem['_isVisible'] = isVisible ? false : true;\n                    }\n                }\n            }\n            if (this.maps.legendSettings.type === 'Layers' && this.maps.legendSettings.toggleLegendSettings.enable) {\n                var layerElement = void 0;\n                this.removeCollections(targetEle, legendIndex);\n                var toggledLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                if (toggledLegendIdIndex !== -1) {\n                    isVisible = false;\n                }\n                for (var j = 0; j < this.maps.layers.length; j++) {\n                    for (var i = 0; i < selectedItem.length; i++) {\n                        shape = this.legendCollection[legendIndex]['data'][i];\n                        layerElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + shape['layerIndex'] +\n                            '_shapeIndex_' + shape['shapeIndex'] + '_dataIndex_' + shape['dataIndex'], this.maps.element.id);\n                        if (layerElement !== null) {\n                            var toggledShapeIdIndex = this.maps.toggledElementId.indexOf(layerElement.id);\n                            if (isVisible) {\n                                if (i === 0) {\n                                    this.maps.toggledLegendId.push(legendIndex);\n                                }\n                                if (toggledShapeIdIndex === -1) {\n                                    this.maps.toggledElementId.push(layerElement.id);\n                                }\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    layerElement.setAttribute('fill', this.maps.layers[j].shapeSettings.fill);\n                                    layerElement.setAttribute('fill-opacity', (this.maps.layers[j].shapeSettings.opacity).toString());\n                                    layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                    layerElement.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.width) ? 0 : this.maps.layers[j].shapeSettings.border.width).toString());\n                                    layerElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.opacity) ?\n                                        this.maps.layers[j].shapeSettings.opacity :\n                                        this.maps.layers[j].shapeSettings.border.opacity).toString());\n                                }\n                                else {\n                                    layerElement.setAttribute('fill', legendToggleFill);\n                                    layerElement.setAttribute('fill-opacity', (legendToggleOpacity).toString());\n                                    layerElement.setAttribute('stroke', legendToggleBorderColor);\n                                    layerElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                    layerElement.setAttribute('stroke-opacity', (legendToggleBorderOpacity).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    if (!this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, legendToggleFill, legendToggleOpacity, legendToggleBorderColor, legendToggleBorderWidth, legendToggleBorderOpacity, legendToggleFill);\n                                    }\n                                    else {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, this.maps.layers[j].shapeSettings.fill, this.maps.layers[j].shapeSettings.opacity, \n                                        /* eslint-disable-next-line max-len */\n                                        this.maps.layers[j].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.width)\n                                            ? 0 : this.maps.layers[j].shapeSettings.border.width, \n                                        /* eslint-disable-next-line max-len */\n                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.opacity)\n                                            ? this.maps.layers[j].shapeSettings.opacity\n                                            : this.maps.layers[j].shapeSettings.border.opacity, this.maps.layers[j].shapeSettings.fill);\n                                    }\n                                }\n                            }\n                            else {\n                                if (toggledLegendIdIndex !== -1 && i === 0) {\n                                    this.maps.toggledLegendId.splice(toggledLegendIdIndex, 1);\n                                }\n                                if (toggledShapeIdIndex !== -1) {\n                                    this.maps.toggledElementId.splice(toggledShapeIdIndex, 1);\n                                }\n                                layerElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                layerElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.opacity) ?\n                                    this.maps.layers[j].shapeSettings.opacity :\n                                    this.maps.layers[j].shapeSettings.border.opacity).toString());\n                                layerElement.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[j].shapeSettings.border.width) ? 0 : this.maps.layers[j].shapeSettings.border.width).toString());\n                                layerElement.setAttribute('fill-opacity', (this.maps.layers[j].shapeSettings.opacity).toString());\n                                layerElement.setAttribute('stroke', this.maps.layers[j].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                if (targetEle !== null) {\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Text_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Shape_Index_' + legendIndex, this.maps.element.id);\n                                    this.setToggleAttributes(legendTextId, legendShapeId, this.legendCollection[legendIndex]['fill'], this.legendCollection[legendIndex]['opacity'], this.legendCollection[legendIndex]['shapeBorder']['color'], this.legendCollection[legendIndex]['shapeBorder']['width'], this.legendCollection[legendIndex]['shapeBorder']['opacity'], '#757575');\n                                }\n                            }\n                        }\n                    }\n                }\n                selectedItem['_isVisible'] = isVisible ? false : true;\n            }\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(targetEle.id) && (targetEle.id.indexOf(this.maps.element.id + '_Legend_Shape_Index') > -1 ||\n            targetEle.id.indexOf(this.maps.element.id + '_Legend_Index') !== -1) && this.maps.legendSettings.visible &&\n            targetEle.id.indexOf('_Text') === -1) {\n            var LegendInteractive = void 0;\n            var legendIndex = parseFloat(targetEle.id.split(this.maps.element.id + '_Legend_Index_')[1]);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var mapdata = void 0;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var selectedItem = this.legendCollection[legendIndex]['data'];\n            var isVisible = selectedItem['_isVisible'];\n            if ((this.maps.legendSettings.type === 'Bubbles' || this.maps.legendSettings.type === 'Markers') && this.maps.legendSettings.toggleLegendSettings.enable) {\n                var toggledLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var j = 0; j < (this.maps.legendSettings.type === 'Bubbles' ? this.maps.layers[k].bubbleSettings.length : this.maps.layers[k].markerSettings.length); j++) {\n                        for (var i = 0; i < selectedItem.length; i++) {\n                            mapdata = this.legendCollection[legendIndex]['data'][i];\n                            LegendInteractive = this.maps.legendSettings.type === 'Bubbles' ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                                '_BubbleIndex_' + j + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                                '_MarkerIndex_' + j + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(mapdata['shape']) && mapdata['shape'] === 'Balloon') {\n                                LegendInteractive = this.maps.legendSettings.type === 'Bubbles' ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                                    '_BubbleIndex_' + j + '_dataIndex_' + mapdata['dataIndex'] + '_Group', this.maps.element.id) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                                    '_MarkerIndex_' + j + '_dataIndex_' + mapdata['dataIndex'] + '_Group', this.maps.element.id);\n                                LegendInteractive = LegendInteractive.children[0];\n                            }\n                            if (isVisible && LegendInteractive !== null) {\n                                if (this.maps.legendSettings.type === 'Markers') {\n                                    if (toggledLegendIdIndex === -1) {\n                                        this.maps.toggledLegendId.push(legendIndex);\n                                    }\n                                    var index = this.maps.toggledElementId.indexOf(LegendInteractive.id);\n                                    if (index === -1) {\n                                        this.maps.toggledElementId.push(LegendInteractive.id);\n                                    }\n                                }\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    LegendInteractive.setAttribute('fill', this.maps.layers[k].shapeSettings.fill);\n                                    LegendInteractive.setAttribute('stroke', this.maps.layers[k].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                    LegendInteractive.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width) ? 0 : this.maps.layers[k].shapeSettings.border.width).toString());\n                                    LegendInteractive.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity) ?\n                                        this.maps.layers[k].shapeSettings.opacity :\n                                        this.maps.layers[k].shapeSettings.border.opacity).toString());\n                                    LegendInteractive.setAttribute('fill-opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                }\n                                else {\n                                    LegendInteractive.setAttribute('fill', legendToggleFill);\n                                    LegendInteractive.setAttribute('fill-opacity', (legendToggleOpacity).toString());\n                                    LegendInteractive.setAttribute('stroke', legendToggleBorderColor);\n                                    LegendInteractive.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                    LegendInteractive.setAttribute('stroke-opacity', (legendToggleBorderOpacity).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    if (!this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, legendToggleFill, legendToggleOpacity, legendToggleBorderColor, legendToggleBorderWidth, legendToggleBorderOpacity, legendToggleFill);\n                                    }\n                                    else {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, this.maps.layers[k].shapeSettings.fill, this.maps.layers[k].shapeSettings.opacity, \n                                        /* eslint-disable-next-line max-len */\n                                        this.maps.layers[k].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor, \n                                        /* eslint-disable-next-line max-len */\n                                        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width)\n                                            ? 0\n                                            : this.maps.layers[k].shapeSettings.border.width), \n                                        /* eslint-disable-next-line max-len */\n                                        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity)\n                                            ? this.maps.layers[k].shapeSettings.opacity\n                                            : this.maps.layers[k].shapeSettings.border.opacity), this.maps.layers[k].shapeSettings.fill);\n                                    }\n                                }\n                            }\n                            else {\n                                if (this.maps.legendSettings.type === 'Markers') {\n                                    if (toggledLegendIdIndex !== -1 && i === 0) {\n                                        this.maps.toggledLegendId.splice(toggledLegendIdIndex, 1);\n                                    }\n                                    this.markerToggleSelection(LegendInteractive, k, j, legendIndex);\n                                }\n                                else {\n                                    this.bubbleToggleSelection(LegendInteractive, k, j, legendIndex);\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendShapeId.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                    legendShapeId.setAttribute('fill-opacity', this.legendCollection[legendIndex]['opacity']);\n                                    legendShapeId.setAttribute('stroke', this.legendCollection[legendIndex]['shapeBorder']['color']);\n                                    legendShapeId.setAttribute('stroke-width', this.legendCollection[legendIndex]['shapeBorder']['width']);\n                                    legendShapeId.setAttribute('stroke-opacity', this.legendCollection[legendIndex]['shapeBorder']['opacity']);\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendTextId.setAttribute('fill', this.maps.legendSettings.textStyle.color);\n                                }\n                            }\n                        }\n                        selectedItem['_isVisible'] = isVisible ? false : true;\n                    }\n                }\n            }\n            if (this.maps.legendSettings.type === 'Layers' && this.maps.legendSettings.toggleLegendSettings.enable) {\n                var mapLegendElement = void 0;\n                this.removeCollections(targetEle, legendIndex);\n                var toggleLegendIdIndex = this.maps.toggledLegendId.indexOf(legendIndex);\n                if (toggleLegendIdIndex !== -1) {\n                    isVisible = false;\n                }\n                for (var k = 0; k < this.maps.layers.length; k++) {\n                    for (var i = 0; i < selectedItem.length; i++) {\n                        mapdata = this.legendCollection[legendIndex]['data'][i];\n                        mapLegendElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_LayerIndex_' + mapdata['layerIndex'] +\n                            '_shapeIndex_' + mapdata['shapeIndex'] + '_dataIndex_' + mapdata['dataIndex'], this.maps.element.id);\n                        if (mapLegendElement !== null) {\n                            var toggledShapeIdIndex = this.maps.toggledElementId.indexOf(mapLegendElement.id);\n                            if (isVisible) {\n                                if (i === 0) {\n                                    this.maps.toggledLegendId.push(legendIndex);\n                                }\n                                if (toggledShapeIdIndex === -1) {\n                                    this.maps.toggledElementId.push(mapLegendElement.id);\n                                }\n                                if (this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                    mapLegendElement.setAttribute('fill', this.maps.layers[0].shapeSettings.fill);\n                                    mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                    mapLegendElement.setAttribute('fill-opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                    mapLegendElement.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width) ? 0 : this.maps.layers[k].shapeSettings.border.width).toString());\n                                    mapLegendElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity) ?\n                                        this.maps.layers[k].shapeSettings.opacity :\n                                        this.maps.layers[k].shapeSettings.border.opacity).toString());\n                                }\n                                else {\n                                    mapLegendElement.setAttribute('fill', legendToggleFill);\n                                    mapLegendElement.setAttribute('fill-opacity', (legendToggleOpacity).toString());\n                                    mapLegendElement.setAttribute('stroke', legendToggleBorderColor);\n                                    mapLegendElement.setAttribute('stroke-width', (legendToggleBorderWidth).toString());\n                                    mapLegendElement.setAttribute('stroke-opacity', (legendToggleBorderOpacity).toString());\n                                }\n                                if (targetEle !== null) {\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    if (!this.maps.legendSettings.toggleLegendSettings.applyShapeSettings) {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, legendToggleFill, legendToggleOpacity, legendToggleBorderColor, legendToggleBorderWidth, legendToggleBorderOpacity, legendToggleFill);\n                                    }\n                                    else {\n                                        this.setToggleAttributes(legendTextId, legendShapeId, this.maps.layers[0].shapeSettings.fill, this.maps.layers[k].shapeSettings.opacity, \n                                        /* eslint-disable-next-line max-len */\n                                        this.maps.layers[0].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width)\n                                            ? 0\n                                            : this.maps.layers[k].shapeSettings.border.width, \n                                        /* eslint-disable-next-line max-len */\n                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity)\n                                            ? this.maps.layers[k].shapeSettings.opacity\n                                            : this.maps.layers[k].shapeSettings.border.opacity, this.maps.layers[0].shapeSettings.fill);\n                                    }\n                                }\n                            }\n                            else {\n                                if (toggleLegendIdIndex !== -1 && i === 0) {\n                                    this.maps.toggledLegendId.splice(toggleLegendIdIndex, 1);\n                                }\n                                if (toggledShapeIdIndex !== -1) {\n                                    this.maps.toggledElementId.splice(toggledShapeIdIndex, 1);\n                                }\n                                mapLegendElement.setAttribute('fill-opacity', (this.maps.layers[k].shapeSettings.opacity).toString());\n                                mapLegendElement.setAttribute('stroke-width', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.width) ? 0 :\n                                    this.maps.layers[k].shapeSettings.border.width).toString());\n                                mapLegendElement.setAttribute('stroke', this.maps.layers[0].shapeSettings.border.color || this.maps.themeStyle.shapeBorderColor);\n                                mapLegendElement.setAttribute('stroke-opacity', ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.maps.layers[k].shapeSettings.border.opacity) ?\n                                    this.maps.layers[k].shapeSettings.opacity :\n                                    this.maps.layers[k].shapeSettings.border.opacity).toString());\n                                mapLegendElement.setAttribute('fill', this.legendCollection[legendIndex]['fill']);\n                                if (targetEle !== null) {\n                                    legendTextId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex + '_Text', this.maps.element.id);\n                                    legendShapeId = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.querySelector)(this.maps.element.id + '_Legend_Index_' + legendIndex, this.maps.element.id);\n                                    this.setToggleAttributes(legendTextId, legendShapeId, this.legendCollection[legendIndex]['fill'], this.legendCollection[legendIndex]['opacity'], this.legendCollection[legendIndex]['shapeBorder']['color'], this.legendCollection[legendIndex]['shapeBorder']['width'], this.legendCollection[legendIndex]['shapeBorder']['opacity'], '#757575');\n                                }\n                            }\n                        }\n                    }\n                }\n                selectedItem['_isVisible'] = isVisible ? false : true;\n            }\n        }\n    };\n    Legend.prototype.removeCollections = function (targetEle, legendIndex) {\n        this.removeLegendSelectionCollection(targetEle);\n        var legendSelectionIndex = this.getIndexofLegend(this.maps.legendSelectionCollection, targetEle);\n        if (legendSelectionIndex !== -1) {\n            this.maps.legendSelectionCollection.splice(legendSelectionIndex, 1);\n        }\n        var legendHighlightIndex = this.getIndexofLegend(this.legendHighlightCollection, targetEle);\n        if (legendHighlightIndex !== -1) {\n            this.legendHighlightCollection.splice(legendSelectionIndex, 1);\n        }\n        var shapeHighlightIndex = this.getIndexofLegend(this.shapeHighlightCollection, targetEle);\n        if (shapeHighlightIndex !== -1) {\n            this.shapeHighlightCollection.splice(shapeHighlightIndex, 1);\n        }\n        var selectedIndex = this.maps.selectedLegendElementId.indexOf(legendIndex);\n        if (selectedIndex !== -1) {\n            this.maps.selectedLegendElementId.splice(selectedIndex, 1);\n        }\n    };\n    Legend.prototype.removeEventListener = function () {\n        if (this.maps.isDestroyed) {\n            return;\n        }\n        this.maps.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchMoveEvent, this.interactiveHandler);\n        this.maps.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchEndEvent, this.interactiveHandler);\n        this.maps.off(_index__WEBPACK_IMPORTED_MODULE_0__.click, this.legendClick);\n        var pagingElement = document.getElementById(this.maps.element.id + '_Legend_Paging_Group');\n        if (pagingElement) {\n            for (var i = 0; i < pagingElement.childElementCount; i++) {\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.EventHandler.remove(pagingElement.childNodes[i], _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Browser.touchStartEvent, this.changeNextPage);\n            }\n        }\n    };\n    Legend.prototype.getLegendData = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerIndex, dataIndex, data, dataPath, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    layerData, shapePropertyPath, value\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var legendData = [];\n        if (Object.prototype.toString.call(layerData) === '[object Array]') {\n            for (var i = 0; i < layerData.length; i++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var shapeData = layerData[i];\n                var dataPathValue = (dataPath.indexOf('.') > -1) ? (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getValueFromObject)(data, dataPath) : data[dataPath];\n                var shapePath = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.checkPropertyPath)(data[dataPath], shapePropertyPath, shapeData['properties']);\n                var dataPathValueCase = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(dataPathValue) &&\n                    typeof dataPathValue === 'string' ? dataPathValue.toLowerCase() : dataPathValue;\n                var shapeDataValueCase = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(shapeData['properties'][shapePath])\n                    && isNaN(shapeData['properties'][shapePath]) ?\n                    shapeData['properties'][shapePath].toLowerCase() : shapeData['properties'][shapePath];\n                if (shapeDataValueCase === dataPathValueCase) {\n                    if (shapeData['geometry']['type'] !== 'MultiPoint') {\n                        legendData.push({\n                            layerIndex: layerIndex, shapeIndex: i, dataIndex: dataIndex,\n                            name: data[dataPath], value: value, pointIndex: -1\n                        });\n                    }\n                    else {\n                        for (var j = 0; j < shapeData['geometry'].coordinates.length; j++) {\n                            legendData.push({\n                                layerIndex: layerIndex, shapeIndex: i, dataIndex: dataIndex,\n                                name: data[dataPath], value: value, pointIndex: j\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return legendData;\n    };\n    Legend.prototype.setToggleAttributes = function (textElement, shapeElement, fillColor, fillOpacity, borderColor, borderWidth, borderOpacity, textColor) {\n        textElement.setAttribute('fill', textColor);\n        shapeElement.setAttribute('fill', fillColor);\n        shapeElement.setAttribute('fill-opacity', (fillOpacity).toString());\n        shapeElement.setAttribute('stroke', borderColor);\n        shapeElement.setAttribute('stroke-width', (borderWidth).toString());\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(borderOpacity)) {\n            shapeElement.setAttribute('stroke-opacity', (borderOpacity).toString());\n        }\n    };\n    Legend.prototype.legendGradientColor = function (colorMap, legendIndex) {\n        var legendFillColor;\n        var xmlns = 'http://www.w3.org/2000/svg';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(colorMap.color) && typeof (colorMap.color) === 'object') {\n            var linerGradientEle = document.createElementNS(xmlns, 'linearGradient');\n            var opacity = 1;\n            var position = this.maps.legendSettings.position;\n            var x2 = position === 'Top' || position === 'Bottom' ? '100' : '0';\n            var y2 = position === 'Top' || position === 'Bottom' ? '0' : '100';\n            linerGradientEle.setAttribute('id', 'linear_' + legendIndex + '_' + this.maps.element.id);\n            linerGradientEle.setAttribute('x1', 0 + '%');\n            linerGradientEle.setAttribute('y1', 0 + '%');\n            linerGradientEle.setAttribute('x2', x2 + '%');\n            linerGradientEle.setAttribute('y2', y2 + '%');\n            for (var b = 0; b < colorMap.color.length; b++) {\n                var offsetColor = 100 / (colorMap.color.length - 1);\n                var stopEle = document.createElementNS(xmlns, 'stop');\n                stopEle.setAttribute('offset', b * offsetColor + '%');\n                stopEle.setAttribute('stop-color', colorMap.color[b]);\n                stopEle.setAttribute('stop-opacity', opacity.toString());\n                linerGradientEle.appendChild(stopEle);\n            }\n            this.legendLinearGradient = linerGradientEle;\n            var color = 'url(' + '#linear_' + legendIndex + '_' + this.maps.element.id + ')';\n            this.defsElement.appendChild(linerGradientEle);\n            legendFillColor = color;\n        }\n        return legendFillColor;\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name\n     */\n    Legend.prototype.getModuleName = function () {\n        return 'Legend';\n    };\n    /**\n     * To destroy the legend.\n     *\n     * @returns {void}\n     * @private\n     */\n    Legend.prototype.destroy = function () {\n        this.legendCollection = [];\n        this.legendRenderingCollections = [];\n        this.translate = null;\n        this.legendBorderRect = null;\n        this.initialMapAreaRect = null;\n        this.legendTotalRect = null;\n        this.totalPages = [];\n        this.legendItemRect = null;\n        this.legendGroup = null;\n        this.shapeHighlightCollection = [];\n        this.legendHighlightCollection = [];\n        this.shapePreviousColor = [];\n        this.selectedNonLegendShapes = [];\n        this.legendLinearGradient = null;\n        this.currentLayer = null;\n        this.defsElement = null;\n        this.legendElement = [];\n        this.oldShapeElement = null;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (!this.maps.refreshing) {\n            this.maps = null;\n        }\n    };\n    return Legend;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-maps/src/maps/layers/legend.js?");

/***/ })

}]);