"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-office-chart_src_office-chart_chart_js-c9a627b2"],{

/***/ "./node_modules/@syncfusion/ej2-office-chart/src/office-chart/chart.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-office-chart/src/office-chart/chart.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChartComponent: () => (/* binding */ ChartComponent)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-office-chart/src/index.js\");\n/* eslint-disable */\n/* tslint:disable:no-any */\n\n_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Chart.Inject(_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AreaSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.StackingAreaSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.BarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.PieSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.StackingBarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.PolarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.ScatterSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.BubbleSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.RadarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.DateTime, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.ColumnSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.StackingColumnSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.LineSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.StackingLineSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.ErrorBar, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Trendlines, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.SplineSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.DataLabel, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Category, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Legend, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Tooltip, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Export);\n_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AccumulationChart.Inject(_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AccumulationLegend, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.PieSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AccumulationTooltip, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AccumulationDataLabel);\n\n\n\n/**\n * Chart component is used to convert office charts to ej2-charts.\n */\nvar ChartComponent = /** @class */ (function () {\n    function ChartComponent() {\n        /**\n         * @private\n         */\n        this.keywordIndex = undefined;\n        /**\n         * @private\n         */\n        this.chartYValues = [];\n    }\n    /**\n     * @private\n     */\n    ChartComponent.prototype.chartRender = function (chart, keywordIndex) {\n        this.keywordIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(keywordIndex) ? keywordIndex : 0;\n        this.chartType = chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]];\n        this.isPieType = (this.chartType === 'Pie' || this.chartType === 'Doughnut');\n        var chartData = this.chartData(chart, this.chartType);\n        var chartModel = {\n            enableAnimation: false,\n            width: chart[_index__WEBPACK_IMPORTED_MODULE_3__.widthProperty[this.keywordIndex]] * (96 / 72) + 'px',\n            height: chart[_index__WEBPACK_IMPORTED_MODULE_3__.heightProperty[this.keywordIndex]] * (96 / 72) + 'px'\n        };\n        if (this.isPieType) {\n            this.chart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.AccumulationChart(chartModel);\n        }\n        else {\n            this.chart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_0__.Chart(chartModel);\n            this.chart.primaryXAxis = this.chartPrimaryXAxis(chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartPrimaryCategoryAxisProperty[this.keywordIndex]], this.chartType);\n            this.chart.primaryYAxis = this.chartPrimaryYAxis(chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartPrimaryValueAxisProperty[this.keywordIndex]]);\n        }\n        this.chart.series = this.chartSeries(chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartSeriesProperty[this.keywordIndex]], chartData, this.chartType);\n        for (var i = 0; i < this.chart.series.length; i++) {\n            this.chart.series[parseInt(i.toString(), 10)].animation.enable = false;\n        }\n        this.chart.title = chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTitleProperty[this.keywordIndex]];\n        this.chart.legendSettings = this.parseChartLegend(chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartLegendProperty[this.keywordIndex]]);\n    };\n    /**\n     * @private\n     */\n    ChartComponent.prototype.convertChartToImage = function (chart, elementWidth, elementHeight) {\n        var _this = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var width = 0;\n            var height = 0;\n            var dataInfo = _this.getControlsValue([chart], elementWidth, elementHeight);\n            width = width ? width : dataInfo.width;\n            height = height ? height : dataInfo.height;\n            var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.createElement)('canvas');\n            var displayPixelRatio = Math.max(1, window.devicePixelRatio || 1);\n            element.width = width * (displayPixelRatio);\n            element.height = height * (displayPixelRatio);\n            element.style.width = width + 'px';\n            element.style.height = height + 'px';\n            // tslint:disable-next-line:max-line-length\n            var url = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(dataInfo.svg)], { type: 'image/svg+xml' }));\n            var image = new Image();\n            var canvasContext = element.getContext('2d');\n            canvasContext.scale(displayPixelRatio, displayPixelRatio);\n            image.onload = (function () {\n                canvasContext.drawImage(image, 0, 0);\n                window.URL.revokeObjectURL(url);\n                var dataURL = element.toDataURL('image/png');\n                resolve(dataURL);\n            });\n            image.onerror = (function () {\n                reject('Invalid data');\n            });\n            image.src = url;\n        });\n    };\n    ChartComponent.prototype.getControlsValue = function (controls, elementWidth, elementHeight) {\n        var width = 0;\n        var height = 0;\n        var content = '';\n        var svgRenderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer('').createSvg({\n            id: 'Image_Export',\n            width: 200, height: 200\n        });\n        controls.map(function (control) {\n            if (control) {\n                var svgElement = control.svgObject.cloneNode(true);\n                var groupElement = control.renderer.createGroup({\n                    style: 'transform: translateY(' + height + 'px)'\n                });\n                groupElement.appendChild(svgElement);\n                width = Math.max(control.availableSize.width, elementWidth);\n                height += control.availableSize.height;\n                content += control.svgObject.outerHTML;\n                svgRenderer.appendChild(groupElement);\n            }\n        });\n        svgRenderer.setAttribute('width', width + '');\n        svgRenderer.setAttribute('height', height + '');\n        return {\n            'width': width,\n            'height': height,\n            'svg': svgRenderer\n        };\n    };\n    ChartComponent.prototype.officeChartType = function (type) {\n        var chartType = '';\n        switch (type) {\n            case 'Area_Stacked':\n                chartType = 'StackingArea';\n                break;\n            case 'Area':\n                chartType = 'Area';\n                break;\n            case 'Area_Stacked_100':\n                chartType = 'StackingArea100';\n                break;\n            case 'Bar_Clustered':\n                chartType = 'Bar';\n                break;\n            case 'Bar_Stacked':\n                chartType = 'StackingBar';\n                break;\n            case 'Bar_Stacked_100':\n                chartType = 'StackingBar100';\n                break;\n            case 'Column_Clustered':\n                chartType = 'Column';\n                break;\n            case 'Column_Stacked':\n                chartType = 'StackingColumn';\n                break;\n            case 'Column_Stacked_100':\n                chartType = 'StackingColumn100';\n                break;\n            case 'Scatter_Markers':\n                chartType = 'Scatter';\n                break;\n            case 'Bubble':\n                chartType = 'Bubble';\n                break;\n            case 'Doughnut':\n            case 'Pie':\n                chartType = 'Pie';\n                break;\n            case 'Line_Stacked_100':\n            case 'Line_Markers_Stacked_100':\n                chartType = 'StackingLine100';\n                break;\n            case 'Line':\n            case 'Line_Markers':\n                chartType = 'Line';\n                break;\n            case 'Line_Stacked':\n            case 'Line_Markers_Stacked':\n                chartType = 'StackingLine';\n                break;\n        }\n        return chartType;\n    };\n    ChartComponent.prototype.chartSeries = function (series, data, type) {\n        // json data\n        var chartSeries = [];\n        for (var i = 0; i < series.length; i++) {\n            var seriesData = series[parseInt(i.toString(), 10)];\n            var seriesValue = this.writeChartSeries(seriesData, data, type, i);\n            chartSeries.push(seriesValue);\n        }\n        return chartSeries;\n    };\n    ChartComponent.prototype.writeChartSeries = function (seriesData, data, type, count) {\n        var chartType = this.officeChartType(type);\n        // let isAreaType: boolean = (type === 'Area_Stacked_100' || type === 'Area' || type === 'Area_Stacked');\n        var seriesFormat = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)];\n        var series = {};\n        var fill;\n        series.type = chartType;\n        series.dataSource = data;\n        series.name = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.seriesNameProperty[this.keywordIndex]];\n        series.xName = 'x';\n        series.yName = 'y' + count;\n        if (type === 'Bubble') {\n            series.size = 'size' + count;\n        }\n        if (this.isPieType) {\n            series.pointColorMapping = 'color';\n            if (type === 'Doughnut') {\n                series.innerRadius = '75%';\n                series.radius = '70%';\n            }\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(seriesFormat)) {\n                seriesFormat = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]][0];\n            }\n            fill = this.chartFormat(seriesFormat, chartType);\n            series.fill = fill;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(seriesFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fillProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.foreColorProperty[this.keywordIndex]])) {\n                series.pointColorMapping = 'color';\n            }\n        }\n        if (type === 'Line_Markers' || type === 'Line_Markers_Stacked' || type === 'Line_Markers_Stacked_100') {\n            series.marker = { visible: true };\n        }\n        if (seriesData.hasOwnProperty(_index__WEBPACK_IMPORTED_MODULE_3__.dataLabelProperty[this.keywordIndex])) {\n            if (this.isPieType) {\n                series.dataLabel = this.parseDataLabels(seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataLabelProperty[this.keywordIndex]]);\n            }\n            else {\n                var data_1 = {};\n                data_1.dataLabel = this.parseDataLabels(seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataLabelProperty[this.keywordIndex]]);\n                series.marker = data_1;\n            }\n        }\n        if (seriesData.hasOwnProperty(_index__WEBPACK_IMPORTED_MODULE_3__.errorBarProperty[this.keywordIndex])) {\n            var errorBarData = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.errorBarProperty[this.keywordIndex]];\n            series.errorBar = this.parseErrorBars(errorBarData);\n        }\n        if (seriesData.hasOwnProperty(_index__WEBPACK_IMPORTED_MODULE_3__.trendLinesProperty[this.keywordIndex])) {\n            var trendLines = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.trendLinesProperty[this.keywordIndex]];\n            var trendLinesData = [];\n            for (var count_1 = 0; count_1 < trendLines.length; count_1++) {\n                var trendLine = trendLines[parseInt(count_1.toString(), 10)];\n                var data_2 = {};\n                data_2 = this.parseTrendLines(trendLine, fill);\n                trendLinesData.push(data_2);\n                series.trendlines = trendLinesData;\n            }\n        }\n        return series;\n    };\n    ChartComponent.prototype.parseDataLabels = function (label) {\n        var dataLabel = {};\n        dataLabel.visible = true;\n        if (this.isPieType) {\n            if (label[_index__WEBPACK_IMPORTED_MODULE_3__.positionProperty[this.keywordIndex]] === 'BestFit' || label[_index__WEBPACK_IMPORTED_MODULE_3__.positionProperty[this.keywordIndex]] === 'Inside') {\n                dataLabel.position = 'Inside';\n            }\n            else {\n                dataLabel.position = 'Outside';\n            }\n        }\n        else {\n            dataLabel.position = this.dataLabelPosition(label[_index__WEBPACK_IMPORTED_MODULE_3__.positionProperty[this.keywordIndex]]);\n        }\n        return dataLabel;\n    };\n    ChartComponent.prototype.parseErrorBars = function (errorBarData) {\n        var errorBar = {};\n        errorBar.visible = true;\n        errorBar.type = errorBarData[_index__WEBPACK_IMPORTED_MODULE_3__.typeProperty[this.keywordIndex]];\n        errorBar.direction = errorBarData[_index__WEBPACK_IMPORTED_MODULE_3__.directionProperty[this.keywordIndex]];\n        if (errorBarData[_index__WEBPACK_IMPORTED_MODULE_3__.endStyleProperty[this.keywordIndex]] === 'Cap') {\n            errorBar.errorBarCap = { width: 1 };\n        }\n        else {\n            errorBar.errorBarCap = { width: 0 };\n        }\n        return errorBar;\n    };\n    ChartComponent.prototype.parseTrendLines = function (trendLines, fill) {\n        var trendLine = {};\n        trendLine.type = trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.typeProperty[this.keywordIndex]];\n        trendLine.name = trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.nameProperty[this.keywordIndex]];\n        trendLine.forwardForecast = trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.forwardProperty[this.keywordIndex]];\n        trendLine.backwardForecast = trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.backwardProperty[this.keywordIndex]];\n        if (trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.interceptProperty[this.keywordIndex]] === 'NaN') {\n            trendLine.intercept = 0;\n        }\n        else {\n            trendLine.intercept = trendLines[_index__WEBPACK_IMPORTED_MODULE_3__.interceptProperty[this.keywordIndex]];\n        }\n        trendLine.fill = fill;\n        return trendLine;\n    };\n    ChartComponent.prototype.dataLabelPosition = function (position) {\n        var labelPosition = 'Auto';\n        switch (position) {\n            case 'Outside':\n                labelPosition = 'Outer';\n                break;\n            case 'Center':\n                labelPosition = 'Middle';\n                break;\n            case 'Inside':\n                labelPosition = 'Top';\n                break;\n            case 'OutsideBase':\n                labelPosition = 'Bottom';\n                break;\n        }\n        return labelPosition;\n    };\n    ChartComponent.prototype.chartFormat = function (dataPoints, type) {\n        var format = dataPoints;\n        if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {\n            return format[_index__WEBPACK_IMPORTED_MODULE_3__.lineProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.rgbProperty[this.keywordIndex]];\n        }\n        else {\n            return format[_index__WEBPACK_IMPORTED_MODULE_3__.fillProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.rgbProperty[this.keywordIndex]];\n        }\n    };\n    ChartComponent.prototype.chartPrimaryXAxis = function (data, type) {\n        // json data\n        var primaryXAxis = {};\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.chartTitleProperty[this.keywordIndex]]) {\n            primaryXAxis.title = data[_index__WEBPACK_IMPORTED_MODULE_3__.chartTitleProperty[this.keywordIndex]];\n        }\n        var categoryType = this.chartCategoryType(data[_index__WEBPACK_IMPORTED_MODULE_3__.categoryTypeProperty[this.keywordIndex]]);\n        primaryXAxis.valueType = categoryType;\n        if (categoryType === 'DateTime') {\n            primaryXAxis.intervalType = 'Days';\n            primaryXAxis.labelFormat = 'M/d/yyyy';\n            primaryXAxis.edgeLabelPlacement = 'Shift';\n        }\n        if (type === 'Scatter_Markers' || type === 'Bubble') {\n            this.checkAndSetAxisValue(primaryXAxis, data);\n        }\n        if (this.parseBoolValue(data[_index__WEBPACK_IMPORTED_MODULE_3__.hasMajorGridLinesProperty[this.keywordIndex]])) {\n            primaryXAxis.majorGridLines = { width: 1 };\n        }\n        if (this.parseBoolValue(data[_index__WEBPACK_IMPORTED_MODULE_3__.hasMinorGridLinesProperty[this.keywordIndex]])) {\n            primaryXAxis.minorTicksPerInterval = 4;\n        }\n        return primaryXAxis;\n    };\n    ChartComponent.prototype.chartCategoryType = function (categoryType) {\n        var type = '';\n        switch (categoryType) {\n            case 'Time':\n                type = 'DateTime';\n                break;\n            case 'Automatic':\n                type = 'Category';\n                break;\n        }\n        return type;\n    };\n    ChartComponent.prototype.chartPrimaryYAxis = function (data) {\n        // json data\n        var primaryYAxis = {};\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.chartTitleProperty[this.keywordIndex]]) {\n            primaryYAxis.title = data[_index__WEBPACK_IMPORTED_MODULE_3__.chartTitleProperty[this.keywordIndex]];\n        }\n        this.checkAndSetAxisValue(primaryYAxis, data);\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.hasMajorGridLinesProperty[this.keywordIndex]]) {\n            primaryYAxis.majorGridLines = { width: 1 };\n        }\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.hasMinorGridLinesProperty[this.keywordIndex]]) {\n            primaryYAxis.minorTicksPerInterval = 4;\n        }\n        return primaryYAxis;\n    };\n    ChartComponent.prototype.checkAndSetAxisValue = function (primaryYAxis, data) {\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.minimumValueProperty[this.keywordIndex]] !== 0) {\n            primaryYAxis.minimum = data[_index__WEBPACK_IMPORTED_MODULE_3__.minimumValueProperty[this.keywordIndex]];\n        }\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.maximumValueProperty[this.keywordIndex]] !== 0) {\n            primaryYAxis.maximum = data[_index__WEBPACK_IMPORTED_MODULE_3__.maximumValueProperty[this.keywordIndex]];\n        }\n        if (data[_index__WEBPACK_IMPORTED_MODULE_3__.majorUnitProperty[this.keywordIndex]] !== 0) {\n            var isAutoMajor = data[_index__WEBPACK_IMPORTED_MODULE_3__.isAutoMajorProperty[this.keywordIndex]];\n            if (isAutoMajor && this.parseBoolValue(isAutoMajor)) {\n                var majorUnit = this.calculateMajorUnit(this.chartYValues);\n                if (majorUnit < 10 && (this.chartType === \"Bar_Stacked_100\" || this.chartType === \"Line_Stacked_100\" || this.chartType === \"Column_Stacked_100\" || this.chartType === \"Line_Markers_Stacked_100\" || this.chartType === \"Area_Stacked_100\")) {\n                    primaryYAxis.interval = 10;\n                }\n                else {\n                    primaryYAxis.interval = majorUnit;\n                }\n            }\n            else {\n                primaryYAxis.interval = data[_index__WEBPACK_IMPORTED_MODULE_3__.majorUnitProperty[this.keywordIndex]];\n            }\n        }\n    };\n    ChartComponent.prototype.calculateMajorUnit = function (chartYValues) {\n        if (chartYValues && chartYValues.length > 0) {\n            var maxValue = Number.MIN_VALUE;\n            var minValue = Number.MAX_VALUE;\n            for (var i = 0; i < chartYValues.length; i++) {\n                var yValue = chartYValues[parseInt(i.toString(), 10)];\n                if (yValue > maxValue) {\n                    maxValue = yValue;\n                }\n                if (yValue < minValue) {\n                    minValue = yValue;\n                }\n            }\n            var range = maxValue - minValue;\n            var intervalSize = range / 1.5;\n            return this.roundToNiceNumber(intervalSize);\n        }\n        return 1;\n    };\n    ChartComponent.prototype.roundToNiceNumber = function (range) {\n        var log10 = Math.floor(Math.log(range) / Math.log(10));\n        var pow10 = Math.pow(10, log10);\n        var frac = range / pow10;\n        if (frac < 1.5) {\n            return 1 * pow10;\n        }\n        else if (frac < 3) {\n            return 2 * pow10;\n        }\n        else if (frac < 7) {\n            return 5 * pow10;\n        }\n        else {\n            return 10 * pow10;\n        }\n    };\n    ChartComponent.prototype.chartData = function (chart, type) {\n        // json data\n        var data = chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartCategoryProperty[this.keywordIndex]];\n        var chartData = [];\n        for (var i = 0; i < data.length; i++) {\n            var xData = data[parseInt(i.toString(), 10)];\n            var plotValue = this.chartPlotData(xData, chart, type, i);\n            chartData.push(plotValue);\n        }\n        return chartData;\n    };\n    ChartComponent.prototype.chartPlotData = function (data, chart, type, count) {\n        var _this = this;\n        var plotValue = {};\n        var series = chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartSeriesProperty[this.keywordIndex]];\n        if (chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartPrimaryCategoryAxisProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.numberFormatProperty[this.keywordIndex]] === 'm/d/yyyy') {\n            var date = data[_index__WEBPACK_IMPORTED_MODULE_3__.categoryXNameProperty[this.keywordIndex]];\n            var array = date.split('/');\n            var month = Number(array[0]);\n            var day = Number(array[1]);\n            var year = Number(array[2]);\n            plotValue.x = new Date(year, month - 1, day);\n        }\n        else {\n            plotValue.x = data[_index__WEBPACK_IMPORTED_MODULE_3__.categoryXNameProperty[this.keywordIndex]];\n        }\n        for (var j = 0; j < series.length; j++) {\n            var yData = data[_index__WEBPACK_IMPORTED_MODULE_3__.chartDataProperty[this.keywordIndex]][parseInt(j.toString(), 10)];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(yData)) {\n                var yValue = yData[_index__WEBPACK_IMPORTED_MODULE_3__.yValueProperty[this.keywordIndex]];\n                this.chartYValues.push(yValue);\n                plotValue['y' + j] = yValue;\n                if (type === 'Bubble') {\n                    plotValue['size' + j] = yData[_index__WEBPACK_IMPORTED_MODULE_3__.sizeProperty[this.keywordIndex]];\n                }\n            }\n            if (chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] === 'Pie' || chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] === 'Doughnut' || chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] === 'Column_Stacked') {\n                var seriesData = series[parseInt(j.toString(), 10)];\n                var seriesDataPoints = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]].find(function (obj) {\n                    return obj[_index__WEBPACK_IMPORTED_MODULE_3__.idProperty[_this.keywordIndex]] === count;\n                });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(seriesDataPoints)) {\n                    var color = this.chartFormat(seriesDataPoints, type);\n                    if (chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                        plotValue.color = color;\n                    }\n                    else {\n                        plotValue['color' + j] = color;\n                    }\n                }\n                else {\n                    if (seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]].length > 1 && seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)][_index__WEBPACK_IMPORTED_MODULE_3__.idProperty[this.keywordIndex]] === 0) {\n                        seriesDataPoints = seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)];\n                        var color = this.chartFormat(seriesDataPoints, type);\n                        if (chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                            plotValue.color = color;\n                        }\n                        else {\n                            plotValue['color' + j] = color;\n                        }\n                    }\n                    else {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.seriesFormatProperty[this.keywordIndex]]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.seriesFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.fillProperty[this.keywordIndex]])) {\n                            if (seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.seriesFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.fillProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.rgbProperty[this.keywordIndex]].length > 7) {\n                                var color = this.getColor(seriesData[_index__WEBPACK_IMPORTED_MODULE_3__.seriesFormatProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.fillProperty[this.keywordIndex]][_index__WEBPACK_IMPORTED_MODULE_3__.rgbProperty[this.keywordIndex]]);\n                                if (chart[_index__WEBPACK_IMPORTED_MODULE_3__.chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                                    plotValue.color = color;\n                                }\n                                else {\n                                    plotValue['color' + j] = color;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return plotValue;\n    };\n    ChartComponent.prototype.getColor = function (color) {\n        if (color.length > 0) {\n            if (color[0] === '#') {\n                if (color.length > 7) {\n                    return color.substr(0, 7);\n                }\n            }\n        }\n        return color;\n    };\n    ChartComponent.prototype.parseChartLegend = function (data) {\n        var legendSettings = {};\n        var position = data[_index__WEBPACK_IMPORTED_MODULE_3__.positionProperty[this.keywordIndex]];\n        if (position === 'Corner') {\n            position = 'right';\n        }\n        if (position) {\n            legendSettings.visible = true;\n            legendSettings.position = position.charAt(0).toUpperCase() + position.slice(1);\n        }\n        else {\n            legendSettings.visible = false;\n        }\n        return legendSettings;\n    };\n    ChartComponent.prototype.parseBoolValue = function (value) {\n        if (typeof value === 'string' || value instanceof String) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(value) || value === 'f' || value === '0' || value === 'off' || value === 'false') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (value === 1 || value === true) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    /**\n     * Destroys the internal objects which is maintained.\n     */\n    ChartComponent.prototype.destroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        this.chart = undefined;\n        if (this.chartYValues) {\n            this.chartYValues = [];\n        }\n        this.chartYValues = undefined;\n    };\n    return ChartComponent;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-office-chart/src/office-chart/chart.js?");

/***/ })

}]);