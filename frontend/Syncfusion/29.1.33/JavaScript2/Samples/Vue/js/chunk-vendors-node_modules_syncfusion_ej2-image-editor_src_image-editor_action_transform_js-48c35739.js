"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-image-editor_src_image-editor_action_transform_js-48c35739"],{

/***/ "./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/transform.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/transform.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transform: () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-image-editor/src/image-editor/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* eslint-disable prefer-const */\n\n\n\nvar Transform = /** @class */ (function () {\n    function Transform(parent) {\n        this.isReverseFlip = false; // True when rotate method is called from iteration\n        this.disablePan = false; // auto enable / disable pan while zooming\n        this.isReverseRotate = false; // True when rotate method is called from iteration\n        this.flipColl = []; // To store flip order\n        this.prevZoomValue = 1;\n        this.cropDimension = { width: 0, height: 0 };\n        this.isPreventSelect = false;\n        this.preventDownScale = false;\n        this.resizedImgAngle = null;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    Transform.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.removeEventListener();\n    };\n    Transform.prototype.addEventListener = function () {\n        this.parent.on('transform', this.transform, this);\n        this.parent.on('destroyed', this.destroy, this);\n    };\n    Transform.prototype.removeEventListener = function () {\n        this.parent.off('transform', this.transform);\n        this.parent.off('destroyed', this.destroy);\n    };\n    Transform.prototype.transform = function (args) {\n        this.initTransformPvtVar();\n        switch (args.prop) {\n            case 'flipImage':\n                this.flipImage(args.value['direction']);\n                break;\n            case 'setDestPointsForFlipState':\n                this.setDestPointsForFlipState();\n                break;\n            case 'zoomAction':\n                this.zoomAction(args.value['zoomFactor'], args.value['zoomPoint'], args.value['isResize']);\n                break;\n            case 'disableZoomOutBtn':\n                this.disableZoomOutBtn(args.value['isZoomOut']);\n                break;\n            case 'rotatedFlip':\n                this.rotatedFlip();\n                break;\n            case 'drawPannedImage':\n                this.drawPannedImage(args.value['xDiff'], args.value['yDiff']);\n                break;\n            case 'drawPannImage':\n                this.drawPannImage(args.value['point']);\n                break;\n            case 'performTransformation':\n                this.performTransformation(args.value['text']);\n                break;\n            case 'updateTransform':\n                this.updateTransform(args.value['text']);\n                break;\n            case 'rotatePan':\n                this.rotatePan(args.value['isCropSelection'], args.value['isDefaultZoom']);\n                break;\n            case 'resetZoom':\n                this.resetZoom();\n                break;\n            case 'pan':\n                this.pan(args.value['value'], args.value['x'], args.value['y']);\n                break;\n            case 'zoom':\n                this.zoom(args.value['zoomFactor'], args.value['zoomPoint']);\n                break;\n            case 'setCurrPanRegion':\n                this.setCurrPanRegion(args.value['region'], args.value['type'], args.value['obj']);\n                break;\n            case 'rotate':\n                this.rotate(args.value['degree'], args.value['obj']);\n                break;\n            case 'flip':\n                this.flip(args.value['direction']);\n                break;\n            case 'update':\n                this.update();\n                break;\n            case 'calcMaxDimension':\n                this.calcMaxDimension(args.value['width'], args.value['height'], args.value['obj'], args.value['isImgShape']);\n                break;\n            case 'getPanMove':\n                args.value['obj']['panMove'] = this.panMove;\n                break;\n            case 'setPanMove':\n                this.panMove = args.value['point'];\n                break;\n            case 'getTempPanMove':\n                args.value['obj']['tempPanMove'] = this.tempPanMove;\n                break;\n            case 'setTempPanMove':\n                this.tempPanMove = args.value['point'];\n                break;\n            case 'setReverseFlip':\n                this.isReverseFlip = args.value['isReverseFlip'];\n                break;\n            case 'setDisablePan':\n                this.disablePan = args.value['bool'];\n                break;\n            case 'setCurrDestinationPoint':\n                this.currDestPoint = args.value['point'];\n                this.currDestPoint.startX -= this.parent.cropObj.totalPannedPoint.x;\n                this.currDestPoint.startY -= this.parent.cropObj.totalPannedPoint.y;\n                break;\n            case 'setReverseRotate':\n                this.isReverseRotate = args.value['bool'];\n                break;\n            case 'getFlipColl':\n                args.value['obj']['flipColl'] = this.flipColl;\n                break;\n            case 'setFlipColl':\n                this.flipColl = args.value['flipColl'];\n                break;\n            case 'getPreviousZoomValue':\n                args.value['obj']['previousZoomValue'] = this.prevZoomValue;\n                break;\n            case 'setPreviousZoomValue':\n                this.prevZoomValue = args.value['previousZoomValue'];\n                break;\n            case 'getCropDimension':\n                args.value['obj']['cropDimension'] = this.cropDimension;\n                break;\n            case 'setCropDimension':\n                this.cropDimension.width = args.value['width'];\n                this.cropDimension.height = args.value['height'];\n                break;\n            case 'getPreventSelect':\n                args.value['obj']['bool'] = this.isPreventSelect;\n                break;\n            case 'setPreventSelect':\n                this.isPreventSelect = args.value['bool'];\n                break;\n            case 'resizeImage':\n                this.resizeImage(args.value['width'], args.value['height']);\n                break;\n            case 'resizeCrop':\n                this.resizeCrop(args.value['width'], args.value['height']);\n                break;\n            case 'updateResize':\n                this.updateResize();\n                break;\n            case 'resize':\n                this.resize(args.value['width'], args.value['height'], args.value['isAspectRatio']);\n                break;\n            case 'straightenImage':\n                this.straightenImage(args.value['degree']);\n                break;\n            case 'reset':\n                this.reset();\n                break;\n            case 'cropZoom':\n                args.value['obj']['maxDimension'] = this.cropZoom(args.value['value'], args.value['selectionObj']);\n                break;\n            case 'setResizedImgAngle':\n                this.resizedImgAngle = args.value['angle'];\n                break;\n        }\n    };\n    Transform.prototype.getModuleName = function () {\n        return 'transform';\n    };\n    Transform.prototype.initTransformPvtVar = function () {\n        if (this.parent.lowerCanvas) {\n            this.lowerContext = this.parent.lowerCanvas.getContext('2d');\n        }\n        if (this.parent.upperCanvas) {\n            this.upperContext = this.parent.upperCanvas.getContext('2d');\n        }\n    };\n    Transform.prototype.reset = function () {\n        this.zoomBtnHold = null;\n        this.tempPanMove = null;\n        this.panMove = null;\n        this.disablePan = false;\n        this.currDestPoint = null;\n        this.isReverseRotate = false;\n        this.flipColl = [];\n        this.resizedImgAngle = null;\n        this.transCurrObj = null;\n        this.prevZoomValue = 1;\n        this.isPreventSelect = this.preventDownScale = false;\n    };\n    Transform.prototype.rotateImage = function (degree) {\n        var parent = this.parent;\n        var transitionArgs = { cancel: false, previousDegree: parent.transform.degree,\n            currentDegree: Math.abs(parent.transform.degree + degree) === 360 ? 0 : parent.transform.degree + degree };\n        if (!this.isPreventSelect) {\n            parent.trigger('rotating', transitionArgs);\n            parent.editCompleteArgs = transitionArgs;\n        }\n        this.rotateEvent(transitionArgs, degree);\n    };\n    Transform.prototype.rotateEvent = function (transitionArgs, degree) {\n        var parent = this.parent;\n        if (!transitionArgs.cancel) {\n            var prevObj = void 0;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.transCurrObj)) {\n                var object = { currObj: {} };\n                parent.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n                prevObj = object['currObj'];\n                prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, null, true);\n                prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.pointColl, null, true);\n                prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n                var selPointCollObj = { selPointColl: null };\n                parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false, value: { obj: selPointCollObj } });\n                prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            }\n            parent.afterCropActions.push(degree === 90 ? 'rotateRight' : 'rotateLeft');\n            var splitWords = [];\n            var activeObjShape = void 0;\n            if (parent.activeObj.activePoint && parent.activeObj.shape) {\n                if (parent.activeObj.shape !== undefined) {\n                    splitWords = parent.activeObj.shape.split('-');\n                }\n                if (parent.currObjType.isCustomCrop || splitWords[0] === 'crop') {\n                    activeObjShape = parent.currObjType.isCustomCrop ? 'custom' : splitWords[1];\n                    parent.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n                    parent.objColl.push(parent.activeObj);\n                    parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n                }\n            }\n            parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n                value: { x: null, y: null, isMouseDown: true } });\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n            this.drawRotatedImage(degree);\n            parent.notify('draw', { prop: 'setImageEdited', onPropertyChange: false });\n            parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n            parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.upperContext } });\n            if (parent.isCircleCrop) {\n                parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                    value: { context: this.lowerContext, isSave: null, isFlip: null } });\n            }\n            if (activeObjShape) {\n                this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n                parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[parent.objColl.length - 1], {}, true);\n                parent.objColl.pop();\n                parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n            }\n            parent.isUndoRedo = false;\n            var obj = { collection: parent.rotateFlipColl };\n            parent.notify('shape', { prop: 'alignRotateFlipColl', onPropertyChange: false,\n                value: { collection: parent.rotateFlipColl, isRotateFlipCollection: true, obj: obj } });\n            parent.rotateFlipColl = obj['collection'];\n            if (parent.cropObj.activeObj.shape && !this.isPreventSelect) {\n                parent.notify('draw', { prop: 'setIsCropSelect', value: { bool: true } });\n                this.isPreventSelect = true;\n                parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                    value: { type: 'custom', startX: null, startY: null, width: null, height: null } });\n                this.isPreventSelect = false;\n                parent.setProperties({ zoomSettings: { zoomFactor: 1 } }, true);\n                this.prevZoomValue = parent.zoomSettings.zoomFactor;\n            }\n        }\n        else {\n            parent.notify('draw', { prop: 'setCurrentObj', onPropertyChange: false, value: { obj: parent.prevEventObjPoint } });\n            parent.activeObj = parent.prevEventSelectionPoint;\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n        }\n    };\n    Transform.prototype.drawRotatedImage = function (degree) {\n        var parent = this.parent;\n        if (degree === 0) {\n            parent.transform.degree = 0;\n        }\n        else {\n            parent.transform.degree += degree;\n        }\n        if (Math.abs(parent.transform.degree) === 360) {\n            parent.transform.degree = 0;\n        }\n        parent.notify('draw', { prop: 'setDestPoints', onPropertyChange: false });\n        var tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        var tempActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        parent.objColl = [];\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        if (!this.isReverseRotate) {\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n        }\n        this.rotateDegree(degree);\n        if (!this.isReverseRotate) {\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n            parent.rotateFlipColl.push(degree);\n        }\n        parent.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], tempObjColl, [], true);\n        parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, tempActiveObj, {}, true);\n        if (parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: null } });\n        }\n        parent.notify('shape', { prop: 'redrawObj', onPropertyChange: false, value: { degree: degree } });\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        if (degree > 0) {\n            parent.notify('freehand-draw', { prop: 'rotateFhdColl', onPropertyChange: false });\n        }\n        else {\n            for (var i = 0; i < 3; i++) {\n                parent.notify('freehand-draw', { prop: 'rotateFhdColl', onPropertyChange: false });\n            }\n        }\n        parent.notify('freehand-draw', { prop: 'freehandRedraw', onPropertyChange: false,\n            value: { context: this.lowerContext, points: null } });\n        this.updateCurrSelectionPoint(degree);\n    };\n    Transform.prototype.rotateDegree = function (degree) {\n        var parent = this.parent;\n        this.lowerContext.save();\n        this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n        this.lowerContext.translate(parent.lowerCanvas.width / 2, parent.lowerCanvas.height / 2);\n        this.lowerContext.rotate(Math.PI / 180 * degree);\n        this.lowerContext.translate(-parent.lowerCanvas.width / 2, -parent.lowerCanvas.height / 2);\n        var temp = this.lowerContext.filter;\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        this.lowerContext.filter = temp;\n        this.lowerContext.translate(parent.lowerCanvas.width / 2, parent.lowerCanvas.height / 2);\n        this.lowerContext.rotate(Math.PI / 180 * -degree);\n        this.lowerContext.translate(-parent.lowerCanvas.width / 2, -parent.lowerCanvas.height / 2);\n        this.lowerContext.restore();\n    };\n    Transform.prototype.updateCurrSelectionPoint = function (degree) {\n        var parent = this.parent;\n        if (parent.currSelectionPoint && this.currDestPoint) {\n            var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n            var objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n            var srcPoints = { startX: parent.img.srcLeft, startY: parent.img.srcTop, width: parent.img.srcWidth,\n                height: parent.img.srcHeight };\n            var destPoints = { startX: parent.img.destLeft, startY: parent.img.destTop, width: parent.img.destWidth,\n                height: parent.img.destHeight };\n            parent.objColl = [];\n            parent.objColl.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.currSelectionPoint, {}, true));\n            parent.img = { srcLeft: 0, srcTop: 0, srcWidth: parent.baseImgCanvas.width, srcHeight: parent.baseImgCanvas.height,\n                destLeft: this.currDestPoint.startX, destTop: this.currDestPoint.startY, destWidth: this.currDestPoint.width,\n                destHeight: this.currDestPoint.height };\n            if (typeof (degree) === 'number') {\n                parent.notify('draw', { prop: 'setDestPoints', onPropertyChange: false });\n                parent.notify('draw', { prop: 'setClientTransDim', onPropertyChange: false,\n                    value: { isPreventDimension: null } });\n            }\n            parent.notify('shape', { prop: 'redrawObj', onPropertyChange: false, value: { degree: degree } });\n            parent.currSelectionPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[0], {}, true);\n            this.currDestPoint = { startX: parent.img.destLeft, startY: parent.img.destTop, width: parent.img.destWidth,\n                height: parent.img.destHeight };\n            parent.objColl = objColl;\n            parent.activeObj = activeObj;\n            parent.img = { srcLeft: srcPoints.startX, srcTop: srcPoints.startY, srcWidth: srcPoints.width, srcHeight: srcPoints.height,\n                destLeft: destPoints.startX, destTop: destPoints.startY, destWidth: destPoints.width, destHeight: destPoints.height };\n        }\n    };\n    Transform.prototype.flipImage = function (direction) {\n        var parent = this.parent;\n        var transitionArgs = { direction: direction, cancel: false,\n            previousDirection: parent.toPascalCase(parent.transform.currFlipState || direction) };\n        if (!this.isPreventSelect) {\n            parent.trigger('flipping', transitionArgs);\n            parent.editCompleteArgs = transitionArgs;\n        }\n        this.flipEvent(transitionArgs, direction);\n    };\n    Transform.prototype.flipEvent = function (transitionArgs, direction) {\n        var parent = this.parent;\n        if (transitionArgs.cancel) {\n            parent.notify('draw', { prop: 'setCurrentObj', onPropertyChange: false, value: { obj: parent.prevEventObjPoint } });\n            parent.activeObj = parent.prevEventSelectionPoint;\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n            return;\n        }\n        var prevObj;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.transCurrObj)) {\n            var object = { currObj: {} };\n            parent.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, null, true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.pointColl, null, true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        }\n        parent.afterCropActions.push(direction.toLowerCase() === 'horizontal' ? 'horizontalflip' : 'verticalflip');\n        var splitWords = [];\n        var activeObjShape;\n        if (parent.activeObj.activePoint) {\n            if (parent.activeObj.shape !== undefined) {\n                splitWords = parent.activeObj.shape.split('-');\n            }\n            if (parent.currObjType.isCustomCrop || splitWords[0] === 'crop') {\n                activeObjShape = parent.currObjType.isCustomCrop ? 'custom' : splitWords[1];\n                parent.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n                parent.objColl.push(parent.activeObj);\n                parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            }\n        }\n        parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n            value: { x: null, y: null, isMouseDown: true } });\n        parent.clearContext(this.lowerContext);\n        parent.clearContext(this.upperContext);\n        var tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        var tempActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        parent.objColl = [];\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        if (!this.isReverseFlip) {\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n        }\n        var lowercaseDirection = direction.toLowerCase();\n        this.updateFlipState(lowercaseDirection);\n        var flipState = parent.transform.currFlipState.toLowerCase();\n        parent.transform.currFlipState = (lowercaseDirection === 'horizontal' && flipState === 'horizontal') ||\n            (lowercaseDirection === 'vertical' && flipState === 'vertical') ? '' : lowercaseDirection;\n        var selObj = { isSelected: null };\n        parent.notify('draw', { prop: 'getRotatedFlipCropSelection', onPropertyChange: false, value: { bool: selObj } });\n        if (selObj['isSelected']) {\n            parent.img.destLeft += parent.panPoint.totalPannedInternalPoint.x;\n            parent.img.destTop += parent.panPoint.totalPannedInternalPoint.y;\n        }\n        var temp = this.lowerContext.filter;\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        this.lowerContext.filter = temp;\n        parent.notify('draw', { prop: 'setImageEdited', onPropertyChange: false });\n        this.updateFlipState(direction.toLowerCase());\n        if (!this.isReverseFlip) {\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n            this.updateFlipColl(direction.toLocaleLowerCase());\n            parent.rotateFlipColl.push(direction.toLowerCase());\n        }\n        if (parent.rotateFlipColl.length === 1) {\n            var panObj = { panRegion: '' };\n            parent.notify('crop', { prop: 'getCurrFlipState', onPropertyChange: false,\n                value: { panObj: panObj } });\n            if (panObj['panRegion'] === '') {\n                parent.notify('draw', { prop: 'setClientTransDim', onPropertyChange: false,\n                    value: { isPreventDimension: null } });\n            }\n            else {\n                this.setDestPointsForFlipState();\n            }\n        }\n        if (parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: null } });\n        }\n        parent.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], tempObjColl, [], true);\n        parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, tempActiveObj, {}, true);\n        for (var i = 0, len = parent.objColl.length; i < len; i++) {\n            var flipObjColl = parent.objColl[i].flipObjColl;\n            if (flipObjColl.length === 0) {\n                flipObjColl.push(direction);\n            }\n            else if (flipObjColl[flipObjColl.length - 1] === direction) {\n                flipObjColl.pop();\n            }\n            else {\n                flipObjColl.push(direction);\n            }\n        }\n        parent.notify('shape', { prop: 'redrawObj', onPropertyChange: false, value: { degree: direction.toLowerCase() } });\n        var tempFilter = this.lowerContext.filter;\n        this.lowerContext.filter = 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +\n            'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';\n        parent.notify('shape', { prop: 'iterateObjColl', onPropertyChange: false });\n        var dir = direction.toLowerCase();\n        if (dir === 'horizontal' || dir === 'vertical') {\n            parent.notify('freehand-draw', { prop: 'flipFHDColl', onPropertyChange: false,\n                value: { value: dir } });\n            parent.notify('freehand-draw', { prop: 'freehandRedraw', onPropertyChange: false,\n                value: { context: this.lowerContext, points: null } });\n        }\n        else {\n            parent.notify('freehand-draw', { prop: 'freehandRedraw', onPropertyChange: false,\n                value: { context: this.lowerContext, points: null } });\n        }\n        this.lowerContext.filter = tempFilter;\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        this.updateCurrSelectionPoint(dir);\n        parent.isUndoRedo = false;\n        parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n        parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.upperContext } });\n        if (parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: null } });\n        }\n        if (activeObjShape) {\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n            parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[parent.objColl.length - 1], {}, true);\n            parent.objColl.pop();\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n        }\n        var obj = { collection: parent.rotateFlipColl };\n        parent.notify('shape', { prop: 'alignRotateFlipColl', onPropertyChange: false,\n            value: { collection: parent.rotateFlipColl, isRotateFlipCollection: true, obj: obj } });\n        parent.rotateFlipColl = obj['collection'];\n        if (parent.cropObj.activeObj.shape && !this.isPreventSelect) {\n            parent.notify('draw', { prop: 'setIsCropSelect', value: { bool: true } });\n            this.isPreventSelect = true;\n            parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: 'custom', startX: null, startY: null, width: null, height: null } });\n            this.isPreventSelect = false;\n            parent.setProperties({ zoomSettings: { zoomFactor: 1 } }, true);\n            this.prevZoomValue = parent.zoomSettings.zoomFactor;\n        }\n    };\n    Transform.prototype.updateFlipState = function (direction) {\n        var degree = this.parent.transform.degree;\n        if (direction === 'horizontal') {\n            if (degree % 90 === 0 && degree % 180 !== 0) {\n                this.verticalFlip();\n            }\n            else {\n                this.horizontalFlip();\n            }\n        }\n        else if (direction === 'vertical') {\n            if (degree % 90 === 0 && degree % 180 !== 0) {\n                this.horizontalFlip();\n            }\n            else {\n                this.verticalFlip();\n            }\n        }\n    };\n    Transform.prototype.horizontalFlip = function () {\n        this.lowerContext.translate(this.lowerContext.canvas.width, 0);\n        this.lowerContext.scale(-1, 1);\n        this.upperContext.translate(this.upperContext.canvas.width, 0);\n        this.upperContext.scale(-1, 1);\n    };\n    Transform.prototype.verticalFlip = function () {\n        this.lowerContext.translate(0, this.lowerContext.canvas.height);\n        this.lowerContext.scale(1, -1);\n        this.upperContext.translate(0, this.upperContext.canvas.height);\n        this.upperContext.scale(1, -1);\n    };\n    Transform.prototype.updateFlipColl = function (direction) {\n        if (this.isPreventSelect) {\n            return;\n        }\n        if (this.flipColl.length === 0 || this.flipColl[this.flipColl.length - 1] !== direction) {\n            this.flipColl.push(direction);\n        }\n        else {\n            this.flipColl.pop();\n        }\n        if (this.flipColl.length >= 4) {\n            var lastFourItems = this.flipColl.slice(-4);\n            if ((lastFourItems[0] === 'horizontal' && lastFourItems[1] === 'vertical' &&\n                lastFourItems[2] === 'horizontal' && lastFourItems[3] === 'vertical') ||\n                (lastFourItems[0] === 'vertical' && lastFourItems[1] === 'horizontal' &&\n                    lastFourItems[2] === 'vertical' && lastFourItems[3] === 'horizontal')) {\n                this.flipColl.splice(-4);\n            }\n        }\n    };\n    Transform.prototype.setDestPointsForFlipState = function () {\n        var parent = this.parent;\n        var panObj = { panRegion: '' };\n        var _a = parent.img, destLeft = _a.destLeft, destTop = _a.destTop, destWidth = _a.destWidth, destHeight = _a.destHeight;\n        var _b = parent.lowerCanvas, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight;\n        parent.notify('crop', { prop: 'getCurrFlipState', onPropertyChange: false,\n            value: { panObj: panObj } });\n        if (panObj['panRegion'] !== '') {\n            if (panObj['panRegion'] === 'horizontal') {\n                parent.img.destLeft = clientWidth - (destWidth + destLeft);\n            }\n            else if (panObj['panRegion'] === 'vertical') {\n                parent.img.destTop = clientHeight - (destHeight + destTop);\n            }\n            else {\n                parent.img.destLeft = clientWidth - (destWidth + destLeft);\n                parent.img.destTop = clientHeight - (destHeight + destTop);\n            }\n        }\n    };\n    Transform.prototype.zoomAction = function (zoomFactor, zoomPoint, isResize, isPreventApply) {\n        var parent = this.parent;\n        if (!parent.disabled && parent.isImageLoaded) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isResize) && (parent.zoomSettings.zoomFactor >= parent.zoomSettings.maxZoomFactor && zoomFactor > 0 ||\n                (parent.zoomSettings.zoomFactor > parent.zoomSettings.minZoomFactor && zoomFactor < 0 && this.disableZoomOutBtn(true)) ||\n                (parent.zoomSettings.zoomFactor <= parent.zoomSettings.minZoomFactor && zoomFactor < 0))) {\n                parent.notify('toolbar', { prop: 'zoom-up-handler', onPropertyChange: false });\n                return;\n            }\n            parent.notify('draw', { prop: 'setImageEdited', onPropertyChange: false });\n            var tempZoomFactor = zoomFactor;\n            zoomFactor = tempZoomFactor > 0 ? 0.1 : -0.1;\n            for (var i = 0; i < Math.round(Math.abs(tempZoomFactor / 0.1)); i++) {\n                if (this.prevZoomValue === 1) {\n                    this.prevZoomValue += zoomFactor > 0 ? zoomFactor * 10 : (zoomFactor * 10) / 10;\n                }\n                else if (this.prevZoomValue > 1) {\n                    this.prevZoomValue += (zoomFactor * 10);\n                }\n                else if (this.prevZoomValue < 1) {\n                    this.prevZoomValue += (zoomFactor * 10) / 10;\n                    var powerOften = Math.pow(10, 1);\n                    this.prevZoomValue = (Math.round(this.prevZoomValue * powerOften) / powerOften);\n                }\n            }\n            zoomFactor = tempZoomFactor;\n            parent.setProperties({ zoomSettings: { zoomFactor: this.prevZoomValue } }, true);\n            var splitWords = void 0;\n            this.tempActiveObj = null;\n            this.isShape = false;\n            if (parent.activeObj.shape !== undefined) {\n                if (parent.activeObj.shape === 'shape') {\n                    parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n                }\n                else {\n                    splitWords = parent.activeObj.shape.split('-');\n                }\n            }\n            if (splitWords !== undefined && splitWords[0] === 'crop') {\n                this.tempActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n                parent.isCropTab = true;\n            }\n            else if (parent.activeObj.shape && splitWords[0] !== 'crop' &&\n                (parent.activeObj.activePoint.width !== 0 || parent.activeObj.activePoint.height !== 0) ||\n                (parent.activeObj.shape === 'path' && parent.activeObj.pointColl.length > 0)) {\n                this.isShape = true;\n            }\n            var obj = { zoomType: null };\n            parent.notify('selection', { prop: 'getZoomType', onPropertyChange: false, value: { obj: obj } });\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(zoomPoint)) {\n                if (parent.isCropTab && this.tempActiveObj) {\n                    zoomPoint = { x: parent.activeObj.activePoint.startX + (parent.activeObj.activePoint.width / 2),\n                        y: parent.activeObj.activePoint.startY + (parent.activeObj.activePoint.height / 2) };\n                }\n                else {\n                    zoomPoint = { x: parent.lowerCanvas.clientWidth / 2, y: parent.lowerCanvas.clientHeight / 2 };\n                }\n                if (obj['zoomType'] === 'MouseWheel' || obj['zoomType'] === 'Pinch') {\n                    zoomPoint = { x: parent.zoomSettings.zoomPoint.x, y: parent.zoomSettings.zoomPoint.y };\n                }\n            }\n            var previousZoomFactor = parent.zoomSettings.zoomFactor - (zoomFactor * 10);\n            var zoomEventArgs = { zoomPoint: zoomPoint, cancel: false, previousZoomFactor: previousZoomFactor,\n                currentZoomFactor: parent.zoomSettings.zoomFactor, zoomTrigger: obj['zoomType'] };\n            if (!parent.isCropToolbar && parent.isZoomBtnClick) {\n                parent.trigger('zooming', zoomEventArgs);\n                parent.editCompleteArgs = zoomEventArgs;\n            }\n            this.zoomEvent(zoomEventArgs, zoomFactor, isPreventApply);\n        }\n    };\n    Transform.prototype.zoomEvent = function (zoomEventArgs, zoomFact, isPreventApply) {\n        var parent = this.parent;\n        var shapeId;\n        var _a = parent.zoomSettings, zoomFactor = _a.zoomFactor, minZoomFactor = _a.minZoomFactor;\n        if (zoomEventArgs.cancel) {\n            parent.isZoomBtnClick = false;\n            return;\n        }\n        if (this.parent.activeObj.redactType !== 'blur' && this.parent.activeObj.redactType !== 'pixelate') {\n            parent.notify('toolbar', { prop: 'close-contextual-toolbar', onPropertyChange: false });\n        }\n        if (!parent.isCropTab && parent.activeObj.shape) {\n            shapeId = parent.activeObj.currIndex;\n        }\n        parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n            value: { x: null, y: null, isMouseDown: true } });\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        this.upperContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n        var object = { canvasFilter: parent.canvasFilter };\n        this.lowerContext.filter = object['canvasFilter'];\n        parent.upperCanvas.style.cursor = parent.cursor = 'default';\n        var objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        if (!parent.isCropTab) {\n            if (parent.transform.degree !== 0) {\n                parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false, value: { x: null, y: null, isMouseDown: null } });\n                parent.panPoint.currentPannedPoint = { x: 0, y: 0 };\n                var temp = parent.allowDownScale;\n                parent.allowDownScale = false;\n                this.rotatePan(true, true);\n                parent.allowDownScale = temp;\n            }\n            else if (parent.transform.currFlipState !== '') {\n                parent.panPoint.totalPannedPoint = { x: 0, y: 0 };\n            }\n            if (parent.transform.straighten === 0 && !this.isPreventSelect) {\n                parent.notify('freehand-draw', { prop: 'updateFHDColl', onPropertyChange: false, value: { isPreventApply: isPreventApply } });\n            }\n        }\n        if (parent.transform.degree === 0) {\n            this.drawZoomImgToCanvas(zoomFact, this.tempActiveObj);\n            var panObj_1 = { panRegion: '' };\n            parent.notify('crop', { prop: 'getCurrFlipState', onPropertyChange: false, value: { panObj: panObj_1 } });\n            if (panObj_1['panRegion'] !== '') {\n                parent.notify('crop', { prop: 'setTempFlipPanPoint', onPropertyChange: false, value: { point: parent.panPoint.totalPannedPoint, isAdd: true } });\n                objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n                parent.objColl = [];\n                var destLeft = parent.img.destLeft;\n                var destTop = parent.img.destTop;\n                this.setDestPointsForFlipState();\n                this.rotatedFlip();\n                parent.img.destLeft = destLeft;\n                parent.img.destTop = destTop;\n                parent.objColl = objColl;\n                parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                    value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: isPreventApply } });\n                if (parent.transform.straighten === 0 && !this.isPreventSelect) {\n                    parent.notify('freehand-draw', { prop: 'updateFHDColl', onPropertyChange: false, value: { isPreventApply: isPreventApply } });\n                }\n            }\n            if (zoomFactor <= minZoomFactor && !parent.isCropTab) {\n                parent.panPoint.totalPannedPoint = { x: 0, y: 0 };\n            }\n        }\n        else {\n            if (parent.transform.straighten === 0 && !this.isPreventSelect) {\n                parent.notify('freehand-draw', { prop: 'updateFHDColl', onPropertyChange: false, value: { isPreventApply: isPreventApply } });\n            }\n            parent.panPoint.totalPannedClientPoint = { x: 0, y: 0 };\n            parent.panPoint.totalPannedInternalPoint = { x: 0, y: 0 };\n            this.rotateZoom(zoomFact);\n            var panObj_2 = { panRegion: '' };\n            parent.notify('crop', { prop: 'getCurrFlipState', onPropertyChange: false, value: { panObj: panObj_2 } });\n            if (panObj_2['panRegion'] !== '') {\n                var temp = this.lowerContext.filter;\n                this.lowerContext.filter = 'none';\n                parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                    value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: isPreventApply } });\n                this.lowerContext.filter = temp;\n            }\n        }\n        var powerOften = Math.pow(10, 1);\n        if (zoomFactor <= minZoomFactor ||\n            (Math.round(parent.transform.zoomFactor * powerOften) / powerOften) === 2) {\n            clearInterval(this.zoomBtnHold);\n            this.zoomBtnHold = 0;\n        }\n        var panObj = { panRegion: '' };\n        parent.notify('crop', { prop: 'getCurrFlipState', onPropertyChange: false, value: { panObj: panObj } });\n        if (panObj['panRegion'] === '') {\n            var temp = this.lowerContext.filter;\n            this.lowerContext.filter = 'none';\n            parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: isPreventApply } });\n            this.lowerContext.filter = temp;\n        }\n        if ((parent.currSelectionPoint && parent.currSelectionPoint.shape === 'crop-circle') || parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: null } });\n        }\n        parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        if (this.tempActiveObj) {\n            parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.tempActiveObj, {}, true);\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n            if (zoomFactor <= minZoomFactor) {\n                parent.currSelectionPoint = null;\n            }\n        }\n        parent.isUndoRedo = false;\n        var zoomOut;\n        zoomOut = document.querySelector('#' + parent.element.id + '_zoomOut');\n        if (zoomOut && zoomFactor <= minZoomFactor) {\n            zoomOut.classList.add('e-disabled');\n            zoomOut.parentElement.classList.add('e-overlay');\n        }\n        else if (zoomOut) {\n            zoomOut.classList.remove('e-disabled');\n            zoomOut.parentElement.classList.remove('e-overlay');\n        }\n        var drawingShape = parent.drawingShape;\n        this.autoEnablePan();\n        parent.drawingShape = drawingShape;\n        if (this.tempActiveObj) {\n            parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.tempActiveObj, {}, true);\n        }\n        if (parent.activeObj.shape === 'crop-custom') {\n            parent.currObjType.isCustomCrop = true;\n        }\n        if (this.isShape) {\n            if (shapeId) {\n                for (var i = 0, len = parent.objColl.length; i < len; i++) {\n                    if (parent.objColl[i].currIndex === shapeId) {\n                        parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[i], {}, true);\n                        parent.objColl.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n            else {\n                parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[parent.objColl.length - 1], {}, true);\n                parent.objColl.pop();\n            }\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj, isCropRatio: null,\n                    points: null, isPreventDrag: true, saveContext: null, isPreventSelection: null } });\n            parent.notify('toolbar', { prop: 'update-toolbar-items', onPropertyChange: false });\n            parent.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n        }\n        parent.notify('toolbar', { prop: 'enable-disable-btns', onPropertyChange: false });\n        parent.notify('selection', { prop: 'setZoomType', onPropertyChange: false, value: { zoomType: 'Toolbar' } });\n        // eslint-disable-next-line max-len\n        zoomEventArgs = { zoomPoint: zoomEventArgs.zoomPoint, previousZoomFactor: zoomEventArgs.previousZoomFactor, currentZoomFactor: zoomEventArgs.currentZoomFactor, zoomTrigger: zoomEventArgs.zoomTrigger };\n        if (!parent.isCropToolbar && parent.isZoomBtnClick) {\n            parent.isZoomBtnClick = false;\n        }\n        if (parent.drawingShape) {\n            var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n            parent.enableShapeDrawing(parent.toPascalCase(parent.drawingShape), true);\n            parent.activeObj = activeObj;\n            if (activeObj.activePoint.width > 0 || activeObj.activePoint.height > 0 ||\n                (activeObj.pointColl && activeObj.pointColl.length > 0)) {\n                if (activeObj.shape === 'redact') {\n                    parent.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n                }\n                var zOrderElem = parent.element.querySelector('#' + parent.element.id + '_zOrderBtn');\n                var dupElem = parent.element.querySelector('#' + parent.element.id + '_duplicate');\n                var removeElem = parent.element.querySelector('#' + parent.element.id + '_remove');\n                var editTextElem = parent.element.querySelector('#' + parent.element.id + '_editText');\n                if (zOrderElem) {\n                    zOrderElem.classList.remove('e-overlay');\n                }\n                if (dupElem) {\n                    dupElem.classList.remove('e-overlay');\n                }\n                if (removeElem) {\n                    removeElem.classList.remove('e-overlay');\n                }\n                if (editTextElem) {\n                    editTextElem.classList.remove('e-overlay');\n                }\n            }\n        }\n        else if (parent.activeObj.shape && parent.activeObj.shape === 'redact') {\n            parent.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'redact',\n                    isApplyBtn: false, isCropping: false } });\n            parent.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n        }\n    };\n    Transform.prototype.disableZoomOutBtn = function (isZoomOut) {\n        var parent = this.parent;\n        var _a = parent.zoomSettings, zoomFactor = _a.zoomFactor, minZoomFactor = _a.minZoomFactor;\n        var isDisabled = false;\n        var zoomOut;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isZoomOut)) {\n            parent.transform.zoomFactor -= 0.1;\n        }\n        zoomOut = parent.element.querySelector('#' + parent.element.id + '_zoomOut');\n        var destPoints = { destLeft: parent.img.destLeft, destTop: parent.img.destTop,\n            destWidth: parent.img.destWidth, destHeight: parent.img.destHeight };\n        if (parent.activeObj.shape) {\n            var maxDimension = this.setZoomDimension(-0.1, parent.activeObj);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(zoomOut)) {\n                var actPoint = parent.activeObj.activePoint;\n                if (parent.transform.straighten === 0) {\n                    if (parent.img.destLeft > actPoint.startX || parent.img.destTop >\n                        actPoint.startY || parent.img.destLeft + parent.img.destWidth <\n                        actPoint.endX || parent.img.destTop + parent.img.destHeight < actPoint.endY\n                        || zoomFactor === minZoomFactor) {\n                        zoomOut.classList.add('e-disabled');\n                        zoomOut.parentElement.classList.add('e-overlay');\n                        isDisabled = true;\n                    }\n                    else {\n                        zoomOut.classList.remove('e-disabled');\n                        zoomOut.parentElement.classList.remove('e-overlay');\n                        isDisabled = false;\n                    }\n                }\n                else {\n                    parent.img.destWidth = maxDimension.width;\n                    parent.img.destHeight = maxDimension.height;\n                    var obj = { isIntersect: null };\n                    parent.notify('draw', { prop: 'updateImgCanvasPoints', onPropertyChange: false });\n                    parent.notify('draw', { prop: 'isLinesIntersect', onPropertyChange: false, value: { obj: obj } });\n                    if (obj['isIntersect'] ||\n                        zoomFactor === minZoomFactor) {\n                        zoomOut.classList.add('e-disabled');\n                        zoomOut.parentElement.classList.add('e-overlay');\n                        isDisabled = true;\n                    }\n                    else {\n                        zoomOut.classList.remove('e-disabled');\n                        zoomOut.parentElement.classList.remove('e-overlay');\n                        isDisabled = false;\n                    }\n                }\n            }\n        }\n        else {\n            this.setZoomDimension(-0.1, null);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isZoomOut)) {\n            parent.transform.zoomFactor += 0.1;\n        }\n        parent.img.destLeft = destPoints['destLeft'];\n        parent.img.destTop = destPoints['destTop'];\n        parent.img.destWidth = destPoints['destWidth'];\n        parent.img.destHeight = destPoints['destHeight'];\n        return isDisabled;\n    };\n    Transform.prototype.drawZoomImgToCanvas = function (value, selectionObj) {\n        var parent = this.parent;\n        var powerOften = Math.pow(10, 1);\n        var zmFactor = Math.round(parent.transform.zoomFactor * powerOften) / powerOften;\n        if ((zmFactor === 0.1 && value === -0.1) || zmFactor === 0 && value === -0.025) {\n            parent.transform.zoomFactor = 0;\n        }\n        else {\n            parent.transform.zoomFactor += value;\n        }\n        parent.transform[parent.isCropTab ? 'cropZoomFactor' : 'defaultZoomFactor'] = parent.transform.zoomFactor;\n        var maxDimension = { width: 0, height: 0 };\n        if (parent.isCropTab) {\n            maxDimension = this.cropZoom(value, selectionObj);\n        }\n        else {\n            maxDimension = this.calcMaxDimension(parent.img.srcWidth, parent.img.srcHeight);\n            maxDimension.width += (maxDimension.width * parent.transform.zoomFactor);\n            maxDimension.height += (maxDimension.height * parent.transform.zoomFactor);\n            parent.img.destLeft = (parent.lowerCanvas.clientWidth - maxDimension.width) / 2;\n            parent.img.destTop = (parent.lowerCanvas.clientHeight - maxDimension.height + 1) / 2;\n        }\n        parent.notify('draw', { prop: 'draw-image-to-canvas', value: { dimension: maxDimension } });\n        maxDimension.width = this.cropDimension.width;\n        maxDimension.height = this.cropDimension.height;\n        maxDimension.width += (maxDimension.width * parent.transform.zoomFactor);\n        maxDimension.height += (maxDimension.height * parent.transform.zoomFactor);\n        parent.notify('draw', { prop: 'setZoomCropWidth', value: { width: maxDimension.width, height: maxDimension.height } });\n    };\n    Transform.prototype.rotatedFlip = function () {\n        var parent = this.parent;\n        this.isReverseFlip = true;\n        var tempCurrFlipState = parent.transform.currFlipState;\n        var tempFlipColl = this.flipColl;\n        var tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        var tempActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        this.flipColl = [];\n        parent.objColl = [];\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        parent.notify('draw', { prop: 'currTransState', onPropertyChange: false,\n            value: { type: 'initial', isPreventDestination: null, context: null, isPreventCircleCrop: null } });\n        var temp = this.lowerContext.filter;\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        this.lowerContext.filter = temp;\n        parent.notify('draw', { prop: 'currTransState', onPropertyChange: false,\n            value: { type: 'reverse', isPreventDestination: true, context: null, isPreventCircleCrop: null } });\n        if (tempCurrFlipState === '' && parent.transform.currFlipState !== '') {\n            tempCurrFlipState = parent.transform.currFlipState;\n        }\n        parent.transform.currFlipState = tempCurrFlipState;\n        this.flipColl = tempFlipColl;\n        parent.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], tempObjColl, [], true);\n        this.lowerContext.filter = 'none';\n        parent.notify('shape', { prop: 'iterateObjColl', onPropertyChange: false });\n        this.lowerContext.filter = temp;\n        if (tempActiveObj.activePoint.width !== 0) {\n            parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, tempActiveObj, {}, true);\n        }\n        this.isReverseFlip = false;\n    };\n    Transform.prototype.rotateZoom = function (value) {\n        var parent = this.parent;\n        var powerOften = Math.pow(10, 1);\n        var zmFactor = Math.round(parent.transform.zoomFactor * powerOften) / powerOften;\n        if ((zmFactor === 0.1 && value === -0.1) || zmFactor === 0 && value === -0.025) {\n            parent.transform.zoomFactor = 0;\n        }\n        else {\n            parent.transform.zoomFactor += value;\n        }\n        if (parent.isCropTab) {\n            parent.transform.cropZoomFactor = parent.transform.zoomFactor;\n        }\n        else {\n            parent.transform.defaultZoomFactor = parent.transform.zoomFactor;\n        }\n        var tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        var tempActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        parent.objColl = [];\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n        parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: true } });\n        parent.notify('draw', { prop: 'setDestPoints', onPropertyChange: false });\n        var temp = this.lowerContext.filter;\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        this.lowerContext.filter = temp;\n        parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: false } });\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n        parent.objColl = tempObjColl;\n        parent.activeObj = tempActiveObj;\n        var maxDimension = { width: this.cropDimension.width, height: this.cropDimension.height };\n        maxDimension.width += (maxDimension.width * parent.transform.zoomFactor);\n        maxDimension.height += (maxDimension.height * parent.transform.zoomFactor);\n        parent.notify('draw', { prop: 'setZoomCropWidth', value: { width: maxDimension.width, height: maxDimension.height } });\n    };\n    Transform.prototype.autoEnablePan = function () {\n        var parent = this.parent;\n        if (parent.transform.zoomFactor <= 0) {\n            parent.togglePan = false;\n            parent.notify('selection', { prop: 'setDragCanvas', value: { bool: false } });\n            parent.pan(false);\n            this.disablePan = false;\n        }\n        else {\n            parent.pan(!this.disablePan);\n        }\n    };\n    Transform.prototype.cropZoom = function (value, selectionObj) {\n        var parent = this.parent;\n        var destLeft = parent.img.destLeft;\n        var destTop = parent.img.destTop;\n        var maxDimension = { width: 0, height: 0 };\n        if (parent.transform.degree % 90 === 0 && parent.transform.degree % 180 !== 0) {\n            maxDimension = this.calcMaxDimension(parent.img.srcHeight, parent.img.srcWidth);\n        }\n        else {\n            maxDimension = this.calcMaxDimension(parent.img.srcWidth, parent.img.srcHeight);\n        }\n        maxDimension.width += (maxDimension.width * parent.transform.zoomFactor);\n        maxDimension.height += (maxDimension.height * parent.transform.zoomFactor);\n        parent.img.destLeft = destLeft - ((maxDimension.width - parent.img.destWidth) / 2);\n        parent.img.destTop = destTop - ((maxDimension.height - parent.img.destHeight) / 2);\n        destLeft = parent.img.destLeft;\n        destTop = parent.img.destTop;\n        if (selectionObj && parent.transform.straighten === 0) {\n            if (parent.img.destLeft > selectionObj.activePoint.startX) {\n                parent.img.destLeft = selectionObj.activePoint.startX;\n                if (parent.transform.degree === 0) {\n                    parent.panPoint.totalPannedPoint.x -= (destLeft - parent.img.destLeft);\n                }\n            }\n            if (parent.img.destTop > selectionObj.activePoint.startY) {\n                parent.img.destTop = selectionObj.activePoint.startY;\n                if (parent.transform.degree === 0) {\n                    parent.panPoint.totalPannedPoint.y -= (destTop - parent.img.destTop);\n                }\n            }\n            if (parent.img.destLeft + maxDimension.width < selectionObj.activePoint.endX) {\n                parent.img.destLeft = selectionObj.activePoint.endX - maxDimension.width;\n                if (parent.transform.degree === 0) {\n                    parent.panPoint.totalPannedPoint.x -= (destLeft - parent.img.destLeft);\n                }\n            }\n            if (parent.img.destTop + maxDimension.height < selectionObj.activePoint.endY) {\n                parent.img.destTop = selectionObj.activePoint.endY - maxDimension.height;\n                if (parent.transform.degree === 0) {\n                    parent.panPoint.totalPannedPoint.y -= (destTop - parent.img.destTop);\n                }\n            }\n        }\n        return maxDimension;\n    };\n    Transform.prototype.setZoomDimension = function (value, selectionObj) {\n        var parent = this.parent;\n        var degree = parent.transform.degree;\n        var maxDimension = { width: 0, height: 0 };\n        if (degree % 90 === 0 && degree % 180 !== 0) {\n            maxDimension = this.calcMaxDimension(parent.img.srcHeight, parent.img.srcWidth);\n        }\n        else {\n            maxDimension = this.calcMaxDimension(parent.img.srcWidth, parent.img.srcHeight);\n        }\n        maxDimension.width += (maxDimension.width * parent.transform.zoomFactor);\n        maxDimension.height += (maxDimension.height * parent.transform.zoomFactor);\n        parent.img.destLeft += ((parent.img.destWidth - maxDimension.width) / 2);\n        parent.img.destTop += ((parent.img.destHeight - maxDimension.height) / 2);\n        // While zoom out limit image to draw inside the selection range\n        if (value < 0 && selectionObj) {\n            var startX = selectionObj.activePoint.startX;\n            var startY = selectionObj.activePoint.startY;\n            var width = selectionObj.activePoint.width;\n            var height = selectionObj.activePoint.height;\n            var maxDestLeft = parent.img.destLeft + maxDimension.width;\n            var maxDestTop = parent.img.destTop + maxDimension.height;\n            if (parent.img.destLeft > startX) {\n                parent.img.destLeft = startX;\n            }\n            if (parent.img.destTop > startY) {\n                parent.img.destTop = startY;\n            }\n            if (maxDestLeft < startX + width) {\n                parent.img.destLeft = startX + width - maxDimension.width;\n            }\n            if (maxDestTop < startY + height) {\n                parent.img.destTop = startY + height - maxDimension.height;\n            }\n        }\n        else if (value < 0 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectionObj)) {\n            if (parent.img.destLeft > 0) {\n                parent.img.destLeft = 0;\n            }\n            if (parent.img.destTop > 0) {\n                parent.img.destTop = 0;\n            }\n            if (parent.img.destLeft + maxDimension.width < parent.lowerCanvas.clientWidth) {\n                parent.img.destLeft = parent.lowerCanvas.clientWidth - parent.img.destWidth;\n            }\n            if (parent.img.destTop + maxDimension.height < parent.lowerCanvas.clientHeight) {\n                parent.img.destTop = parent.lowerCanvas.clientHeight - parent.img.destHeight;\n            }\n        }\n        return maxDimension;\n    };\n    Transform.prototype.drawPannedImage = function (xDiff, yDiff) {\n        var parent = this.parent;\n        var obj = { panDown: null };\n        parent.notify('selection', { prop: 'getPanDown', onPropertyChange: false, value: { obj: obj } });\n        var panEventArgs = { startPoint: obj['panDown'], endPoint: this.panMove, cancel: false };\n        parent.trigger('panning', panEventArgs);\n        if (panEventArgs.cancel) {\n            return;\n        }\n        this.panEvent(xDiff, yDiff);\n    };\n    Transform.prototype.panEvent = function (xDiff, yDiff, isPanMethod) {\n        var parent = this.parent;\n        var isObjCreated = false;\n        if (parent.activeObj.shape && parent.activeObj.shape === 'shape') {\n            parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.activeObj.shape)) {\n            isObjCreated = true;\n            var actPoint = parent.activeObj.activePoint = { startX: parent.img.destLeft, startY: parent.img.destTop,\n                endX: parent.img.destLeft + parent.img.destWidth, endY: parent.img.destTop + parent.img.destHeight };\n            var startX = actPoint.startX;\n            var startY = actPoint.startY;\n            var endX = actPoint.endX;\n            var endY = actPoint.endY;\n            if (startX < 0) {\n                actPoint.startX = 0;\n            }\n            if (startY < 0) {\n                actPoint.startY = 0;\n            }\n            if (endX > parent.lowerCanvas.width) {\n                actPoint.endX = parent.lowerCanvas.width;\n            }\n            if (endY > parent.lowerCanvas.height) {\n                actPoint.endY = parent.lowerCanvas.height;\n            }\n            actPoint.width = actPoint.endX - actPoint.startX;\n            actPoint.height = actPoint.endY - actPoint.startY;\n            parent.activeObj.shape = 'crop-custom';\n            var obj = { strokeSettings: {} };\n            parent.notify('shape', { prop: 'getStrokeSettings', onPropertyChange: false, value: { obj: obj } });\n            parent.activeObj.strokeSettings = obj['strokeSettings'];\n            parent.notify('draw', { prop: 'updateActiveObject', onPropertyChange: false, value: { actPoint: actPoint, obj: parent.activeObj,\n                    isMouseMove: null, x: null, y: null } });\n            parent.isCropTab = true;\n        }\n        if (parent.transform.degree === 0) {\n            var point = void 0;\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(xDiff) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(yDiff)) || isPanMethod) {\n                if (isPanMethod) {\n                    point = this.updatePanPoints(xDiff, yDiff);\n                }\n                else {\n                    point = this.updatePanPoints();\n                }\n            }\n            else {\n                point = { x: xDiff, y: yDiff };\n            }\n            parent.panPoint.totalPannedPoint.x += point.x;\n            parent.panPoint.totalPannedPoint.y += point.y;\n            var tempSelectionObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n            var temp = this.lowerContext.filter;\n            this.drawPannImage(point, isObjCreated);\n            this.lowerContext.filter = temp;\n            this.tempPanMove = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.panMove, {}, true);\n            parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, tempSelectionObj, {}, true);\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n            if (parent.activeObj.shape) {\n                parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj } });\n            }\n        }\n        else {\n            var tempFlipState = parent.transform.currFlipState;\n            parent.isCropTab = true;\n            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(xDiff) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(yDiff)) || isPanMethod) {\n                if (isPanMethod) {\n                    parent.panPoint.currentPannedPoint = this.updatePanPoints(xDiff, yDiff);\n                }\n                else {\n                    parent.panPoint.currentPannedPoint = this.updatePanPoints();\n                }\n            }\n            else {\n                parent.panPoint.currentPannedPoint = { x: xDiff, y: yDiff };\n            }\n            parent.transform.currFlipState = tempFlipState;\n            this.rotatePan(null, null, isObjCreated);\n            parent.isCropTab = false;\n            this.tempPanMove = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.panMove, {}, true);\n        }\n        if (isObjCreated) {\n            parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            parent.isCropTab = false;\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n        }\n    };\n    Transform.prototype.drawPannImage = function (point, isObjCreated) {\n        var parent = this.parent;\n        var filter = this.lowerContext.filter;\n        var destPoints = { startX: parent.img.destLeft, startY: parent.img.destTop, width: parent.img.destWidth,\n            height: parent.img.destHeight };\n        this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n        parent.img.destLeft = destPoints.startX;\n        parent.img.destTop = destPoints.startY;\n        parent.img.destWidth = destPoints.width;\n        parent.img.destHeight = destPoints.height;\n        this.setDestPointsForFlipState();\n        if (isObjCreated) {\n            parent.isCropTab = false;\n        }\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        if (isObjCreated) {\n            parent.isCropTab = true;\n        }\n        if ((parent.currSelectionPoint && parent.currSelectionPoint.shape === 'crop-circle') || parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: true } });\n        }\n        this.lowerContext.filter = filter;\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n        parent.img.destLeft = destPoints.startX;\n        parent.img.destTop = destPoints.startY;\n        parent.img.destWidth = destPoints.width;\n        parent.img.destHeight = destPoints.height;\n        var temp = this.lowerContext.filter;\n        this.lowerContext.filter = 'none';\n        if (isObjCreated) {\n            parent.isCropTab = false;\n        }\n        parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n            value: { ctx: this.lowerContext, shape: 'pan', pen: 'pan', x: point.x,\n                y: point.y, panRegion: '' } });\n        if (isObjCreated) {\n            parent.isCropTab = true;\n        }\n        this.lowerContext.filter = temp;\n        parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n        if (parent.isCircleCrop) {\n            parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                value: { context: this.lowerContext, isSave: null, isFlip: true } });\n        }\n    };\n    Transform.prototype.resetZoom = function () {\n        var parent = this.parent;\n        if (parent.transform.defaultZoomFactor !== 0) {\n            var isUndoRedo = parent.isUndoRedo;\n            var object = { currObj: {} };\n            parent.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            this.transCurrObj = object['currObj'];\n            this.transCurrObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, null, true);\n            this.transCurrObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.pointColl, null, true);\n            this.transCurrObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            this.transCurrObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            parent.isUndoRedo = parent.isCropToolbar = true;\n            var zmFactor = parent.transform.defaultZoomFactor;\n            if (zmFactor > 0) {\n                this.zoomAction(-zmFactor);\n            }\n            else {\n                this.zoomAction(Math.abs(zmFactor));\n            }\n            parent.isCropToolbar = false;\n            parent.isUndoRedo = isUndoRedo;\n        }\n    };\n    Transform.prototype.performTransformation = function (text) {\n        var parent = this.parent;\n        this.resetZoom();\n        this.updateTransform(text);\n        for (var i = 0, len = parent.objColl.length; i < len; i++) {\n            if (parent.objColl[i].flipObjColl.length > 0) {\n                var flipObjColl = { collection: parent.objColl[i].flipObjColl };\n                parent.notify('shape', { prop: 'alignRotateFlipColl', onPropertyChange: false,\n                    value: { collection: flipObjColl['collection'], isRotateFlipCollection: null, obj: flipObjColl } });\n                parent.objColl[i].flipObjColl = flipObjColl['collection'];\n                if (parent.objColl[i].flipObjColl.length === 0) {\n                    parent.objColl[i].shapeFlip = '';\n                }\n            }\n        }\n    };\n    Transform.prototype.updateTransform = function (text) {\n        switch (text.toLowerCase()) {\n            case 'rotateleft':\n                this.rotateImage(-90);\n                break;\n            case 'rotateright':\n                this.rotateImage(90);\n                break;\n            case 'horizontalflip':\n                this.flipImage(_index__WEBPACK_IMPORTED_MODULE_1__.Direction.Horizontal);\n                break;\n            case 'verticalflip':\n                this.flipImage(_index__WEBPACK_IMPORTED_MODULE_1__.Direction.Vertical);\n                break;\n        }\n    };\n    Transform.prototype.rotatePan = function (isCropSelection, isDefaultZoom, isObjCreated) {\n        var parent = this.parent;\n        this.isReverseRotate = true;\n        var tempDegree = parent.transform.degree;\n        var rotatePanActiveObj;\n        var object = { selPointColl: null };\n        if (parent.activeObj.activePoint && parent.activeObj.shape) {\n            rotatePanActiveObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        }\n        var tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        var tempPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.pointColl, [], true);\n        parent.objColl = [];\n        parent.pointColl = [];\n        parent.freehandCounter = 0;\n        parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false, value: { obj: object } });\n        var cropSelPointColl = object['selPointColl'];\n        parent.notify('freehand-draw', { prop: 'setSelPointColl', onPropertyChange: false, value: { obj: { selPointColl: [] } } });\n        parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: true } });\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n        var initialDestLeft = parent.img.destLeft;\n        var initialDestTop = parent.img.destTop;\n        var intPan = parent.panPoint.totalPannedInternalPoint;\n        if (parent.isCropTab) {\n            parent.img.destLeft += intPan.x;\n            parent.img.destTop += intPan.y;\n        }\n        parent.notify('crop', { prop: 'updateRotatePan', onPropertyChange: false });\n        if (parent.isCropTab) {\n            parent.panPoint.totalPannedInternalPoint.x = parent.img.destLeft - initialDestLeft;\n            parent.panPoint.totalPannedInternalPoint.y = parent.img.destTop - initialDestTop;\n        }\n        var temp = this.lowerContext.filter;\n        if (isObjCreated) {\n            parent.isCropTab = false;\n        }\n        parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n        if (isObjCreated) {\n            parent.isCropTab = true;\n        }\n        parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: false } });\n        parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n            value: { type: 'reverse', isPreventDestination: true, isRotatePan: true } });\n        var destLeft = parent.img.destLeft;\n        var destTop = parent.img.destTop;\n        parent.img.destLeft += parent.panPoint.totalPannedClientPoint.x;\n        parent.img.destTop += parent.panPoint.totalPannedClientPoint.y;\n        parent.img.destLeft += parent.panPoint.currentPannedPoint.x;\n        parent.img.destTop += parent.panPoint.currentPannedPoint.y;\n        parent.panPoint.totalPannedClientPoint.x = parent.img.destLeft - destLeft;\n        parent.panPoint.totalPannedClientPoint.y = parent.img.destTop - destTop;\n        parent.objColl = tempObjColl;\n        parent.pointColl = tempPointColl;\n        parent.freehandCounter = parent.pointColl.length;\n        parent.notify('freehand-draw', { prop: 'setSelPointColl', onPropertyChange: false,\n            value: { obj: { selPointColl: cropSelPointColl } } });\n        parent.transform.degree = tempDegree;\n        this.lowerContext.filter = 'none';\n        if (isCropSelection) {\n            if (isDefaultZoom) {\n                parent.panPoint.totalPannedClientPoint.x = -parent.panPoint.totalPannedClientPoint.x;\n                parent.panPoint.totalPannedClientPoint.y = -parent.panPoint.totalPannedClientPoint.y;\n                parent.panPoint.currentPannedPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedClientPoint, {}, true);\n                parent.panPoint.totalPannedClientPoint = { x: 0, y: 0 };\n                parent.img.destLeft += parent.panPoint.currentPannedPoint.x;\n                parent.img.destTop += parent.panPoint.currentPannedPoint.y;\n            }\n            else {\n                parent.panPoint.currentPannedPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedClientPoint, {}, true);\n            }\n        }\n        if (isObjCreated) {\n            parent.isCropTab = false;\n        }\n        parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n            value: { ctx: this.lowerContext, shape: 'pan', pen: 'pan', x: parent.panPoint.currentPannedPoint.x,\n                y: parent.panPoint.currentPannedPoint.y, panRegion: '' } });\n        if (isObjCreated) {\n            parent.isCropTab = true;\n        }\n        this.lowerContext.filter = temp;\n        parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n        this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n        parent.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, rotatePanActiveObj, {}, true);\n        if (parent.activeObj.activePoint) {\n            parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: parent.activeObj, isCropRatio: null,\n                    points: null, isPreventDrag: true, saveContext: null, isPreventSelection: null } });\n        }\n        this.isReverseRotate = false;\n    };\n    Transform.prototype.limitPan = function () {\n        var parent = this.parent;\n        var _a = parent.activeObj.activePoint, startX = _a.startX, startY = _a.startY, endX = _a.endX, endY = _a.endY;\n        var img = parent.img;\n        if (parent.activeObj.activePoint) {\n            if (img.destLeft > startX) {\n                parent.img.destLeft = startX;\n            }\n            if (img.destTop > startY) {\n                parent.img.destTop = startY;\n            }\n            if (img.destLeft + img.destWidth < endX) {\n                parent.img.destLeft = endX - img.destWidth;\n            }\n            if (img.destTop + img.destHeight < endY) {\n                parent.img.destTop = endY - img.destHeight;\n            }\n        }\n    };\n    Transform.prototype.pan = function (value, x, y) {\n        var parent = this.parent;\n        if (!parent.disabled && parent.isImageLoaded) {\n            if (value) {\n                parent.togglePan = true;\n                parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n                    value: { x: null, y: null, isMouseDown: null } });\n                parent.notify('selection', { prop: 'setDragCanvas', value: { bool: true } });\n                parent.lowerCanvas.style.cursor = parent.upperCanvas.style.cursor = parent.cursor = 'grab';\n                parent.notify('selection', { prop: 'setPanDown', onPropertyChange: false, value: { panDown: null } });\n                if (x || y) {\n                    x = x ? x : 0;\n                    y = y ? y : 0;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.panMove)) {\n                        this.panMove = { x: x, y: y };\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tempPanMove)) {\n                        this.tempPanMove = { x: this.panMove.x, y: this.panMove.y };\n                    }\n                    this.panEvent(x, y, true);\n                    this.tempPanMove = null;\n                }\n            }\n            else {\n                parent.togglePan = parent.currObjType.isCustomCrop = false;\n                parent.notify('selection', { prop: 'setDragCanvas', value: { bool: false } });\n                parent.lowerCanvas.style.cursor = parent.upperCanvas.style.cursor = parent.cursor = 'default';\n            }\n        }\n    };\n    Transform.prototype.zoom = function (zoomFactor, zoomPoint) {\n        var parent = this.parent;\n        if (!parent.disabled && parent.isImageLoaded) {\n            var value = this.getCurrentZoomFactor(zoomFactor);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(zoomPoint)) {\n                this.zoomAction(value, zoomPoint);\n            }\n            else {\n                var type = value > 0 ? 'zoomIn' : 'zoomOut';\n                var absValue = Math.abs(value) * 10;\n                for (var i = 0; i < absValue; i++) {\n                    parent.notify('draw', { prop: 'performPointZoom', onPropertyChange: false,\n                        value: { x: zoomPoint.x, y: zoomPoint.y, type: type, isResize: null } });\n                }\n            }\n            var actionArgs = { action: value > 0 ? 'zoom-in' : 'zoom-out',\n                actionEventArgs: parent.editCompleteArgs };\n            parent.triggerEditCompleteEvent(actionArgs);\n        }\n    };\n    Transform.prototype.getCurrentZoomFactor = function (zoomFactor) {\n        return zoomFactor >= 1 ? (this.prevZoomValue < 1 ? (zoomFactor - this.prevZoomValue) : (zoomFactor - this.prevZoomValue) * 0.1) :\n            (zoomFactor - this.prevZoomValue);\n    };\n    Transform.prototype.setCurrPanRegion = function (region, type, obj) {\n        var panRegion = region;\n        if (region === '') {\n            panRegion = type === 'horizontal' ? 'horizontal' : type === 'vertical' ? 'vertical' : region;\n        }\n        else if (region === 'horizontal') {\n            panRegion = type === 'horizontal' ? 'horizontalVertical' : type === 'vertical' ? 'verticalHorizontal' : type === 90 ?\n                'vertical' : type === -90 ? 'horizontal' : region;\n        }\n        else if (region === 'vertical') {\n            panRegion = type === 'horizontal' ? 'horizontalVertical' : type === 'vertical' ? 'verticalHorizontal' : type === 90 ?\n                'horizontal' : type === -90 ? 'vertical' : region;\n        }\n        else {\n            panRegion = type === 'horizontal' ? 'vertical' : type === 'vertical' ? 'horizontal' : region;\n        }\n        obj['panRegion'] = panRegion;\n    };\n    Transform.prototype.rotate = function (degree, obj) {\n        var parent = this.parent;\n        var isRotate = false;\n        if (!parent.disabled && parent.isImageLoaded && (degree % 90 === 0)) {\n            this.rotateImage(degree);\n        }\n        obj['isRotate'] = isRotate;\n    };\n    Transform.prototype.flip = function (direction) {\n        var parent = this.parent;\n        if (!parent.disabled && parent.isImageLoaded) {\n            this.flipImage(direction);\n        }\n    };\n    Transform.prototype.update = function () {\n        var parent = this.parent;\n        var toolbarHeight = 0;\n        var isActiveObj = false;\n        var freehandObj = { bool: false };\n        var straightenObj = { bool: parent.isStraightening };\n        var cxtTbarHeight = 0;\n        var ctToolbar = parent.element.querySelector('#' + parent.element.id + '_contextualToolbar');\n        var ctWrapper = parent.element.querySelector('.e-contextual-toolbar-wrapper');\n        var hdWrapper = parent.element.querySelector('#' + parent.element.id + '_headWrapper');\n        if (parent.isImageLoaded) {\n            var isCropSelection = false;\n            var splitWords = void 0;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                if (parent.activeObj.shape) {\n                    splitWords = parent.activeObj.shape.split('-');\n                }\n                if (parent.currObjType.isCustomCrop) {\n                    isCropSelection = true;\n                }\n                else if (splitWords && splitWords[0] === 'crop') {\n                    isCropSelection = true;\n                }\n            }\n            var frameObj = { bool: null };\n            parent.notify('toolbar', { prop: 'getFrameToolbar', onPropertyChange: false, value: { obj: frameObj } });\n            if (!straightenObj['bool'] && ((ctToolbar && !ctToolbar.parentElement.classList.contains('e-hide')) ||\n                (hdWrapper && !hdWrapper.parentElement.classList.contains('e-hide')))) {\n                ctWrapper.classList.add('e-hide');\n                if (!isCropSelection) {\n                    parent.okBtn(null, true);\n                }\n                parent.notify('toolbar', { prop: 'refresh-main-toolbar', onPropertyChange: false });\n                parent.notify('toolbar', { prop: 'destroy-qa-toolbar', onPropertyChange: false });\n            }\n            parent.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: freehandObj } });\n            if (freehandObj['bool']) {\n                parent.notify('toolbar', { prop: 'destroy-qa-toolbar', onPropertyChange: false });\n            }\n            var actPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj.activePoint, {}, true);\n            if (parent.activeObj.shape && (actPoint.width !== 0 || actPoint.height !== 0)) {\n                isActiveObj = true;\n                if (parent.textArea.style.display === 'block' || parent.textArea.style.display === 'inline-block') {\n                    parent.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n                        value: { x: null, y: null, isMouseDown: null } });\n                    parent.notify('toolbar', { prop: 'destroy-qa-toolbar', onPropertyChange: false });\n                }\n                else {\n                    parent.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n                    parent.objColl.push(parent.activeObj);\n                }\n                parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            }\n        }\n        parent.updateDropInfoContent(parent.element.querySelector('.e-ie-drop-info'));\n        var tempFilter = this.lowerContext.filter;\n        var canvasWrapper = parent.element.querySelector('#' + parent.element.id + '_canvasWrapper');\n        if (canvasWrapper) {\n            canvasWrapper.style.width = parent.element.offsetWidth - 2 + 'px';\n        }\n        parent.lowerCanvas.width = parent.upperCanvas.width = parent.maskCanvas.width = parent.element.offsetWidth - 2;\n        if (parent.toolbarTemplate) {\n            toolbarHeight = parent.element.querySelector('#' + parent.element.id + '_toolbarArea').clientHeight;\n        }\n        else if (parent.element.querySelector('#' + parent.element.id + '_toolbar')) {\n            toolbarHeight = parent.element.querySelector('#' + parent.element.id + '_toolbar').clientHeight;\n            if (toolbarHeight === 0 && parent.toolbar && parent.toolbar.length > 0 && parent.toolbar.indexOf('Open') === -1) {\n                var obj = { toolbarHeight: 0 };\n                parent.notify('toolbar', { prop: 'getToolbarHeight', value: { obj: obj } });\n                toolbarHeight = obj['toolbarHeight'];\n            }\n        }\n        var ctxTbarArea = parent.element.querySelector('#' + parent.element.id + '_contextualToolbarArea');\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && straightenObj['bool'] && ctxTbarArea) {\n            cxtTbarHeight = ctxTbarArea.clientHeight;\n        }\n        parent.notify('toolbar', { prop: 'setToolbarHeight', value: { height: toolbarHeight } });\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            if (canvasWrapper) {\n                canvasWrapper.style.height = parent.element.offsetHeight - ((2 * toolbarHeight) + cxtTbarHeight) - 4 + 'px';\n            }\n        }\n        else {\n            if (canvasWrapper) {\n                canvasWrapper.style.height = parent.element.offsetHeight - toolbarHeight - 2 + 'px';\n            }\n        }\n        parent.lowerCanvas.height = parent.upperCanvas.height = parseFloat(canvasWrapper.style.height);\n        this.lowerContext.filter =\n            'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +\n                'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';\n        parent.notify('filter', { prop: 'setAdjustmentValue', onPropertyChange: false, value: { adjustmentValue: this.lowerContext.filter } });\n        parent.canvasFilter = this.lowerContext.filter;\n        parent.initialAdjustmentValue = this.lowerContext.filter;\n        parent.clearContext(this.lowerContext);\n        parent.clearContext(this.upperContext);\n        if (parent.isImageLoaded) {\n            parent.notify('shape', { prop: 'applyActObj', onPropertyChange: false, value: { isMouseDown: null } });\n            parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            this.lowerContext.filter = tempFilter;\n            parent.initialAdjustmentValue = tempFilter;\n            parent.canvasFilter = this.lowerContext.filter;\n            if (parent.isImageLoaded) {\n                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(parent.element);\n                parent.element.style.opacity = '0.5';\n            }\n            this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n            if (canvasWrapper) {\n                canvasWrapper.style.width = parent.element.offsetWidth - 2 + 'px';\n                canvasWrapper.style.height = parent.element.offsetHeight + 'px';\n                var obj_1 = { toolbarHeight: 0 };\n                parent.notify('toolbar', { prop: 'getToolbarHeight', value: { obj: obj_1 } });\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                    canvasWrapper.style.height = (parseFloat(canvasWrapper.style.height) - (2 * obj_1['toolbarHeight']) - cxtTbarHeight) - 4 + 'px';\n                }\n                else {\n                    canvasWrapper.style.height = (parseFloat(canvasWrapper.style.height) - obj_1['toolbarHeight']) - 2 + 'px';\n                }\n            }\n            parent.lowerCanvas.width = parent.upperCanvas.width = parent.maskCanvas.width =\n                parseFloat(canvasWrapper.style.width);\n            parent.lowerCanvas.height = parent.upperCanvas.height = parent.maskCanvas.height =\n                parseFloat(canvasWrapper.style.height);\n            this.lowerContext.filter = tempFilter;\n            var obj = { width: 0, height: 0 };\n            this.calcMaxDimension(parent.img.srcWidth, parent.img.srcHeight, obj);\n            var maxDimension = obj;\n            if (straightenObj['bool'] && parent.transform.cropZoomFactor !== 0) {\n                maxDimension.width += (maxDimension.width * parent.transform.cropZoomFactor);\n                maxDimension.height += (maxDimension.height * parent.transform.cropZoomFactor);\n            }\n            else if (parent.transform.defaultZoomFactor > 0) {\n                maxDimension.width += (maxDimension.width * parent.transform.defaultZoomFactor);\n                maxDimension.height += (maxDimension.height * parent.transform.defaultZoomFactor);\n            }\n            parent.img.destLeft = (parent.lowerCanvas.clientWidth - maxDimension.width) / 2;\n            parent.img.destTop = (parent.lowerCanvas.clientHeight - maxDimension.height + 1) / 2;\n            if (parent.transform.degree === 0 && parent.transform.currFlipState === '') {\n                if (parent.transform.defaultZoomFactor > 0) {\n                    parent.img.destLeft += parent.panPoint.totalPannedPoint.x;\n                    parent.img.destTop += parent.panPoint.totalPannedPoint.y;\n                }\n                parent.notify('draw', { prop: 'draw-image-to-canvas', value: { dimension: maxDimension } });\n            }\n            else {\n                parent.notify('draw', { prop: 'draw-image-to-canvas', value: { dimension: maxDimension } });\n                parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                    value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n                var temp = this.lowerContext.filter;\n                parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n                this.lowerContext.filter = temp;\n                parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                    value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n            }\n            parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: null } });\n            parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n            parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.upperContext } });\n            if (parent.isCircleCrop) {\n                parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                    value: { context: this.lowerContext, isSave: null, isFlip: null } });\n            }\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(parent.element);\n            parent.element.style.opacity = '1';\n            var obj1 = { defToolbarItems: null };\n            parent.notify('toolbar', { prop: 'getDefToolbarItems', value: { obj: obj1 } });\n            if (obj1['defToolbarItems'] && obj1['defToolbarItems'].length > 0 && document.getElementById(parent.element.id + '_toolbar')) {\n                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                var toolbar_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(parent.element.id + '_toolbar', 'toolbar');\n                if (toolbar_1) {\n                    toolbar_1.refreshOverflow();\n                }\n                if (ctWrapper && !straightenObj['bool']) {\n                    ctWrapper.classList.add('e-hide');\n                }\n            }\n            parent.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            this.upperContext.clearRect(0, 0, parent.upperCanvas.width, parent.upperCanvas.height);\n            if (isActiveObj) {\n                var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[parent.objColl.length - 1], null, true);\n                parent.objColl.pop();\n                if (activeObj.activePoint.width !== 0 && activeObj.activePoint.height !== 0) {\n                    this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n                    parent.notify('draw', { prop: 'render-image', value: { isMouseWheel: null } });\n                    parent.objColl.push(activeObj);\n                    parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                        value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: null } });\n                    activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.objColl[parent.objColl.length - 1], null, true);\n                    parent.objColl.pop();\n                    this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n                    parent.notify('draw', { prop: 'render-image', value: { isMouseWheel: null } });\n                    parent.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: activeObj } });\n                    if (straightenObj['bool']) {\n                        parent.notify('draw', { prop: 'setStraightenActObj', value: { activeObj: activeObj } });\n                    }\n                    if (parent.activeObj.shape === 'rectangle' || parent.activeObj.shape === 'ellipse' || parent.activeObj.shape === 'text' ||\n                        parent.activeObj.shape === 'line' || parent.activeObj.shape === 'arrow' || parent.activeObj.shape === 'path' ||\n                        parent.activeObj.shape === 'image') {\n                        parent.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n                    }\n                }\n            }\n            if (freehandObj['bool']) {\n                parent.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: true } });\n            }\n            if (parent.isResize) {\n                parent.aspectWidth = Math.ceil(parent.img.destWidth);\n                parent.aspectHeight = Math.ceil(parent.img.destHeight);\n                parent.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: false, isCropping: false } });\n                parent.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: false, isCropping: false } });\n            }\n            if ((parent.transform.degree !== 0 || parent.transform.currFlipState !== '') && parent.transform.defaultZoomFactor > 0) {\n                var totalPannedPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedPoint, null, true);\n                var totalPannedInternalPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedInternalPoint, null, true);\n                var totalPannedClientPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedClientPoint, null, true);\n                this.zoomAction(.1);\n                this.zoomAction(-.1);\n                if (parent.transform.degree === 0) {\n                    parent.img.destLeft += totalPannedPoint.x;\n                    parent.img.destTop += totalPannedPoint.y;\n                    parent.panPoint.totalPannedPoint = totalPannedPoint;\n                    parent.notify('draw', { prop: 'updateFlipPan', value: { tempSelectionObj: null } });\n                }\n                else {\n                    parent.panPoint.totalPannedInternalPoint = totalPannedInternalPoint;\n                    parent.panPoint.totalPannedClientPoint = totalPannedClientPoint;\n                    parent.panPoint.currentPannedPoint = { x: 0, y: 0 };\n                    parent.isCropTab = true;\n                    this.rotatePan();\n                    parent.isCropTab = false;\n                }\n            }\n            else if (parent.transform.degree !== 0 && parent.transform.cropZoomFactor > 0) {\n                parent.transform.zoomFactor = 0;\n                parent.transform.cropZoomFactor = null;\n                parent.notify('toolbar', { prop: 'enable-disable-btns', onPropertyChange: false });\n            }\n        }\n    };\n    Transform.prototype.calcMaxDimension = function (width, height, obj, isImgShape) {\n        var object = { toolbarHeight: 0 };\n        var parent = this.parent;\n        parent.notify('toolbar', { prop: 'getToolbarHeight', value: { obj: object } });\n        var canvasMaxWidth = isImgShape ? parent.element.clientWidth / 3 :\n            parent.element.clientWidth;\n        var canvasMaxHeight = isImgShape ? (parent.element.clientHeight - object['toolbarHeight']) / 3 :\n            parent.element.clientHeight - (object['toolbarHeight']); // 1px border\n        canvasMaxHeight = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? canvasMaxHeight - (object['toolbarHeight']) : canvasMaxHeight; // 1px border\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && parent.isStraightening) {\n            var cxtTbar = parent.element.querySelector('#' + parent.element.id + '_contextualToolbarArea');\n            canvasMaxHeight -= cxtTbar ? cxtTbar.clientHeight : 0;\n        }\n        if (!isImgShape && parent.element.clientHeight === 0) {\n            canvasMaxHeight = 0;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isImgShape)) {\n            if (canvasMaxWidth > 30) {\n                canvasMaxWidth -= 30;\n            }\n            if (canvasMaxHeight > 30) {\n                canvasMaxHeight -= 30;\n            }\n        }\n        var widthScale = canvasMaxWidth / width;\n        var heightScale = canvasMaxHeight / height;\n        var cssMaxWidth = Math.min(width, canvasMaxWidth);\n        var cssMaxHeight = Math.min(height, canvasMaxHeight);\n        if (widthScale < 1 && widthScale < heightScale) {\n            cssMaxWidth = width * widthScale;\n            cssMaxHeight = height * widthScale;\n        }\n        else if (heightScale < 1 && heightScale < widthScale) {\n            cssMaxWidth = width * heightScale;\n            cssMaxHeight = height * heightScale;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isImgShape)) {\n            var cropObj = { bool: null };\n            parent.notify('crop', { prop: 'getPreventScaling', onPropertyChange: false,\n                value: { obj: cropObj } });\n            if (cropObj['bool'] && parent.cropObj.activeObj.activePoint &&\n                parent.cropObj.activeObj.activePoint.width !== 0 && parent.cropObj.activeObj.activePoint.height !== 0) {\n                cssMaxWidth = parent.cropObj.activeObj.activePoint.width;\n                cssMaxHeight = parent.cropObj.activeObj.activePoint.height;\n            }\n        }\n        if (obj) {\n            obj['width'] = cssMaxWidth;\n            obj['height'] = cssMaxHeight;\n        }\n        return { width: cssMaxWidth, height: cssMaxHeight };\n    };\n    Transform.prototype.updatePanPoints = function (x, y) {\n        var parent = this.parent;\n        var tempActObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        var tempDestLeft = parent.img.destLeft;\n        var tempDestTop = parent.img.destTop;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tempPanMove)) {\n            this.tempPanMove = { x: this.panMove.x, y: this.panMove.y };\n        }\n        var xDiff = this.panMove.x - this.tempPanMove.x;\n        var yDiff = this.panMove.y - this.tempPanMove.y;\n        if (x || y) {\n            xDiff = x;\n            yDiff = y;\n        }\n        parent.img.destLeft += xDiff;\n        parent.img.destTop += yDiff;\n        this.limitPan();\n        var obj = { bool: null };\n        var object = { isIntersect: null };\n        parent.notify('draw', { prop: 'updateImgCanvasPoints', onPropertyChange: false });\n        parent.notify('draw', { prop: 'isLinesIntersect', onPropertyChange: false, value: { obj: object } });\n        parent.notify('draw', { prop: 'isSelOutsideImg', onPropertyChange: false, value: { obj: obj } });\n        var count = 0;\n        while (parent.transform.straighten !== 0 && (object['isIntersect'] || obj['bool'])) {\n            count++;\n            parent.img.destLeft = tempDestLeft;\n            parent.img.destTop = tempDestTop;\n            if (xDiff !== 0 && xDiff > 0) {\n                xDiff -= 1;\n            }\n            else if (xDiff !== 0 && xDiff < 0) {\n                xDiff += 1;\n            }\n            if (yDiff !== 0 && yDiff > 0) {\n                yDiff -= 1;\n            }\n            else if (yDiff !== 0 && yDiff < 0) {\n                yDiff += 1;\n            }\n            if ((xDiff === 0 && yDiff === 0) || count === 200) {\n                break;\n            }\n            parent.img.destLeft += xDiff;\n            parent.img.destTop += yDiff;\n            this.limitPan();\n            parent.notify('draw', { prop: 'updateImgCanvasPoints', onPropertyChange: false });\n            parent.notify('draw', { prop: 'isLinesIntersect', onPropertyChange: false, value: { obj: object } });\n            parent.notify('draw', { prop: 'isSelOutsideImg', onPropertyChange: false, value: { obj: obj } });\n        }\n        parent.activeObj = tempActObj;\n        return { x: parent.img.destLeft - tempDestLeft, y: parent.img.destTop - tempDestTop };\n    };\n    Transform.prototype.resizeImage = function (width, height) {\n        var parent = this.parent;\n        var temp = true;\n        var temp1 = true;\n        parent.allowDownScale = false;\n        parent.img.srcLeft = 0;\n        parent.img.srcTop = 0;\n        parent.isAspectRatio = true;\n        var minimum = [];\n        parent.img.srcWidth = parent.baseImgCanvas.width;\n        parent.img.srcHeight = parent.baseImgCanvas.height;\n        if (parent.resizeSrc && parent.resizeSrc.width !== 0 && parent.resizeSrc.height !== 0) {\n            parent.img.srcLeft = parent.resizeSrc.startX;\n            parent.img.srcTop = parent.resizeSrc.startY;\n            parent.img.srcWidth = parent.resizeSrc.width;\n            parent.img.srcHeight = parent.resizeSrc.height;\n        }\n        while ((width < parent.img.destWidth || height < parent.img.destHeight) && temp1) {\n            this.zoomAction(-.1, null, true, true);\n            if (width > parent.img.destWidth || height > parent.img.destHeight) {\n                while (width > parent.img.destWidth || height > parent.img.destHeight) {\n                    this.zoomAction(0.0125, null, true, true);\n                    temp1 = false;\n                    minimum.push(parent.img.destWidth);\n                }\n            }\n        }\n        while ((width > parent.img.destWidth || height > parent.img.destHeight) && temp1 && temp) {\n            this.zoomAction(.1, null, true, true);\n            if (width < parent.img.destWidth || height < parent.img.destHeight) {\n                while (width < parent.img.destWidth) {\n                    this.zoomAction(-.0125, null, true, true);\n                    temp = false;\n                    minimum.push(parent.img.destWidth);\n                }\n            }\n        }\n        var nearestNumber = minimum[0];\n        var smallestDifference = Math.abs(parent.img.destWidth - nearestNumber);\n        for (var _i = 0, minimum_1 = minimum; _i < minimum_1.length; _i++) {\n            var num = minimum_1[_i];\n            var difference = Math.abs(width - num);\n            if (difference < smallestDifference) {\n                nearestNumber = num;\n                smallestDifference = difference;\n            }\n        }\n        if (nearestNumber < width && temp) {\n            this.zoomAction(-.0125, null, true, true);\n            temp = false;\n        }\n        if (nearestNumber > width && !temp) {\n            this.zoomAction(.0125, null, true, true);\n            temp = false;\n        }\n        this.zoomAction(.0125, null, true);\n        parent.allowDownScale = true;\n        this.zoomAction(-.0125, null, true);\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.cropObj, {}, true);\n        var prevObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.prevResizeCurrObj, {}, true);\n        parent.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'resize',\n                previousObj: prevObj, previousObjColl: prevObj.objColl, previousPointColl: prevObj.pointColl,\n                previousSelPointColl: prevObj.selPointColl, previousCropObj: prevCropObj, previousText: null, currentText: null,\n                previousFilter: null, isCircleCrop: parent.isCircleCrop } });\n        parent.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n    };\n    Transform.prototype.resizeCrop = function (width, height) {\n        var parent = this.parent;\n        var temp = true;\n        var obj1 = { prevObj: parent.prevObj };\n        parent.cropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.prevCropObj, {}, true);\n        parent.allowDownScale = false;\n        parent.notify('toolbar', { prop: 'getPrevObj', onPropertyChange: false, value: { obj: obj1 } });\n        var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, obj1['prevObj']['activeObj'], {}, true);\n        obj1['prevObj']['activeObj'] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        parent.notify('draw', { prop: 'setCurrentObj', onPropertyChange: false, value: { obj: obj1['prevObj'] } });\n        parent.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], obj1['prevObj']['objColl'], [], true);\n        parent.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], obj1['prevObj']['pointColl'], [], true);\n        parent.transform.straighten = 0;\n        parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n            value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: null } });\n        if (parent.transform.straighten === 0 && !this.isPreventSelect) {\n            parent.notify('freehand-draw', { prop: 'updateFHDColl', onPropertyChange: false });\n        }\n        var tempwidth = width;\n        var tempheight = height;\n        var tempZoom = false;\n        if (height >= width && height <= Math.ceil(parent.img.destHeight)) {\n            while ((height <= Math.ceil(parent.img.destHeight)) && temp) {\n                this.zoomAction(-.1, null, true, true);\n                if (width > parent.img.destWidth || height > parent.img.destHeight) {\n                    while (width > parent.img.destWidth || height > parent.img.destHeight) {\n                        this.zoomAction(.0125, null, true, true);\n                        temp = false;\n                    }\n                }\n            }\n        }\n        else if (height <= width && width < parent.img.destWidth) {\n            while ((width < parent.img.destWidth) && temp) {\n                this.zoomAction(-.1, null, true, true);\n                if (width > parent.img.destWidth || height > parent.img.destHeight) {\n                    while (width > parent.img.destWidth || height > parent.img.destHeight) {\n                        this.zoomAction(.0125, null, true, true);\n                        temp = false;\n                    }\n                }\n            }\n        }\n        else if (height >= width && height >= parent.img.destHeight) {\n            while ((height >= parent.img.destHeight) && temp) {\n                this.zoomAction(.1, null, true, true);\n            }\n        }\n        else if (width >= height && width >= parent.img.destWidth) {\n            while ((width >= parent.img.destWidth) && temp) {\n                this.zoomAction(.1, null, true, true);\n            }\n            if (width < parent.img.destWidth && height < parent.img.destHeight) {\n                while (width < parent.img.destWidth && height < parent.img.destHeight) {\n                    this.zoomAction(-.0125, null, true, true);\n                    temp = false;\n                }\n                this.zoomAction(.0125, null, true, true);\n            }\n        }\n        else if (height > parent.img.destHeight && width > parent.img.destWidth) {\n            while ((height > parent.img.destHeight) && (width > parent.img.destWidth) && temp) {\n                this.zoomAction(.1, null, true, true);\n            }\n            if (width < parent.img.destWidth && height < parent.img.destHeight) {\n                while (width < parent.img.destWidth && height < parent.img.destHeight) {\n                    this.zoomAction(-.0125, null, true, true);\n                    temp = false;\n                }\n                this.zoomAction(.0125, null, true, true);\n            }\n        }\n        this.resizeImg(activeObj, width, height);\n        width = tempwidth;\n        height = tempheight;\n        if ((height !== parent.img.destHeight || width !== parent.img.destWidth)) {\n            while ((height > parent.img.destHeight || width > parent.img.destWidth)) {\n                this.zoomAction(.0125, null, true, true);\n                tempZoom = true;\n            }\n            if (tempZoom) {\n                this.zoomAction(-.0125, null, true, true);\n                tempZoom = false;\n            }\n        }\n        if ((height !== parent.img.destHeight || width !== parent.img.destWidth)) {\n            while ((height < parent.img.destHeight || width < parent.img.destWidth)) {\n                this.zoomAction(-.0125, null, true, true);\n                tempZoom = true;\n            }\n            if (tempZoom) {\n                this.zoomAction(-.0125, null, true, true);\n                tempZoom = false;\n            }\n        }\n        obj1['prevObj']['activeObj'] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, activeObj, {}, true);\n        this.zoomAction(.0125, null, true);\n        parent.allowDownScale = this.preventDownScale ? false : true;\n        parent.isCropTab = false;\n        this.zoomAction(-.0125, null, true);\n        parent.aspectWidth = width;\n        parent.aspectHeight = height;\n    };\n    Transform.prototype.resizeImg = function (activeObj, width, height) {\n        var parent = this.parent;\n        var widthRatio = width / parent.img.destWidth;\n        var heightRatio = height / parent.img.destHeight;\n        if (activeObj.shape) {\n            parent.currSelectionPoint = activeObj;\n            parent.notify('crop', { prop: 'setInitCrop', onPropertyChange: false, value: { bool: true } });\n        }\n        else if (parent.img.srcWidth === parent.baseImgCanvas.width && parent.img.srcHeight === parent.baseImgCanvas.height) {\n            parent.currSelectionPoint = null;\n            parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: 'custom', startX: null, startY: null, width: null, height: null } });\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.currSelectionPoint)) {\n            parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: 'custom', startX: parent.img.destLeft, startY: parent.img.destTop,\n                    width: parent.img.destWidth, height: parent.img.destHeight } });\n        }\n        else {\n            parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: 'custom', startX: null, startY: null, width: null, height: null } });\n        }\n        width = parent.activeObj.activePoint.width * widthRatio;\n        height = parent.activeObj.activePoint.height * heightRatio;\n        var sx = (parent.activeObj.activePoint.startX + (parent.activeObj.activePoint.width / 2)) - (width / 2);\n        var sy = (parent.activeObj.activePoint.startY + (parent.activeObj.activePoint.height / 2)) - (height / 2);\n        var count = 0;\n        while (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && count < 500 && (sx < 0 || sy < 0 || (sx + width) > parent.img.destWidth\n            || (sy + height) > parent.img.destHeight)) {\n            count++;\n            width -= 1;\n            height -= 1;\n            sx = (parent.activeObj.activePoint.startX + (parent.activeObj.activePoint.width / 2)) - (width / 2);\n            sy = (parent.activeObj.activePoint.startY + (parent.activeObj.activePoint.height / 2)) - (height / 2);\n        }\n        parent.transform.defaultZoomFactor = 0;\n        parent.notify('draw', { prop: 'setResizeSelect', value: { bool: true } });\n        parent.notify('draw', { prop: 'setIsCropSelect', value: { bool: true } });\n        parent.notify('draw', { prop: 'select', onPropertyChange: false,\n            value: { type: 'custom', startX: sx, startY: sy, width: width, height: height } });\n        parent.notify('draw', { prop: 'setResizeSelect', value: { bool: false } });\n        if (parent.transform.straighten !== 0) {\n            var obj = { isIntersect: null, arr: null };\n            parent.notify('draw', { prop: 'updateImgCanvasPoints', onPropertyChange: false });\n            parent.notify('draw', { prop: 'isLinesIntersect', onPropertyChange: false, value: { obj: obj } });\n            while (obj['arr'][0] || obj['arr'][1] || obj['arr'][2] || obj['arr'][3]) {\n                this.zoomAction(.0125, null, true);\n                parent.notify('draw', { prop: 'updateImgCanvasPoints', onPropertyChange: false });\n                parent.notify('draw', { prop: 'isLinesIntersect', onPropertyChange: false, value: { obj: obj } });\n            }\n        }\n        parent.isCropToolbar = true;\n        parent.crop();\n        parent.isCropToolbar = false;\n    };\n    Transform.prototype.updateResize = function () {\n        var parent = this.parent;\n        parent.prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.cropObj, {}, true);\n        var currObject = { currObj: {} };\n        parent.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: currObject } });\n        parent.prevObj = currObject['currObj'];\n        if (parent.currSelectionPoint && parent.prevCropObj.activeObj.shape) {\n            parent.prevObj.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.prevCropObj.activeObj, {}, true);\n        }\n        parent.prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        parent.prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.pointColl, [], true);\n        parent.prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        parent.prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        parent.resizeSrc = { startX: parent.img.srcLeft, startY: parent.img.srcTop, width: parent.img.srcWidth,\n            height: parent.img.srcHeight };\n    };\n    Transform.prototype.resize = function (width, height, isAspectRatio) {\n        var parent = this.parent;\n        var aspectHeight;\n        parent.isResize = true;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.prevCropObj) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.prevObj)) {\n            parent.notify('transform', { prop: 'updateResize', value: { bool: false } });\n        }\n        var aspectIcon = parent.element.querySelector('#' + parent.element.id + '_aspectratio');\n        var nonAspectIcon = parent.element.querySelector('#' + parent.element.id + '_nonaspectratio');\n        if (aspectIcon && nonAspectIcon) {\n            parent.notify('toolbar', { prop: 'initResizeToolbar' });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                parent.notify('toolbar', { prop: 'init-main-toolbar', value: { isApplyBtn: false, isDevice: true, isOkBtn: true, isResize: true } });\n            }\n        }\n        var aspectRatioHeight = parent.element.querySelector('#' + parent.element.id + '_resizeHeight');\n        if (aspectRatioHeight) {\n            aspectHeight = aspectRatioHeight.value === '' ? aspectRatioHeight.placeholder : aspectRatioHeight.value;\n        }\n        else {\n            aspectHeight = height + 'px';\n        }\n        var resizeEventArgs = { cancel: false, previousWidth: Math.ceil(parent.img.destWidth),\n            previousHeight: Math.ceil(parent.img.destHeight), width: Math.ceil(width), height: height && height !== 0 ? Math.ceil(height) :\n                (isAspectRatio ? Math.ceil(parseFloat(aspectHeight)) : Math.ceil(parent.img.destHeight)),\n            isAspectRatio: isAspectRatio ? isAspectRatio : false };\n        parent.trigger('resizing', resizeEventArgs);\n        parent.editCompleteArgs = resizeEventArgs;\n        if (!resizeEventArgs.cancel) {\n            this.resizeEventHandler(resizeEventArgs);\n        }\n        else if (parent.aspectHeight && parent.aspectWidth) {\n            parent.aspectHeight = resizeEventArgs.previousHeight;\n            parent.aspectWidth = resizeEventArgs.previousWidth;\n        }\n    };\n    Transform.prototype.resizeEventHandler = function (args) {\n        var parent = this.parent;\n        var isRotate;\n        var aspectRatioWidth = parent.element.querySelector('#' + parent.element.id + '_resizeWidth');\n        var aspectRatioHeight = parent.element.querySelector('#' + parent.element.id + '_resizeHeight');\n        if (args.isAspectRatio) {\n            if (this.resizedImgAngle == null || this.resizedImgAngle !== parent.transform.degree) {\n                this.resizedImgAngle = parent.transform.degree;\n                isRotate = true;\n            }\n            if (isRotate) {\n                parent.notify('transform', { prop: 'resizeImage', value: { width: args.width, height: 0 } });\n                var originalWidth = parent.img.destWidth;\n                var originalHeight = parent.img.destHeight;\n                var aspectRatioWidthValue = void 0;\n                if (aspectRatioHeight) {\n                    aspectRatioWidthValue = parseFloat(aspectRatioWidth.value === '' ? aspectRatioWidth.placeholder : aspectRatioWidth.value);\n                    var value = aspectRatioWidthValue / (originalWidth / originalHeight);\n                    // eslint-disable-next-line max-len\n                    var height = value % 1 >= 0.5 || value % 1 <= -0.5 ? Math.round(value) : (value < 0) ? Math.ceil(value) : Math.floor(value);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(aspectRatioHeight, 'numerictextbox').value = height;\n                    aspectRatioHeight.value = height.toString() + ' px';\n                    parent.aspectHeight = height;\n                    if (aspectRatioWidth && aspectRatioWidth.value === '') {\n                        var aspectRatioHeightValue = parseFloat(aspectRatioHeight.value === '' ? aspectRatioHeight.placeholder :\n                            aspectRatioHeight.value);\n                        value = aspectRatioHeightValue / (originalHeight / originalWidth);\n                        // eslint-disable-next-line max-len\n                        var width = value % 1 >= 0.5 || value % 1 <= -0.5 ? Math.round(value) : (value < 0) ? Math.ceil(value) : Math.floor(value);\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(aspectRatioWidth, 'numerictextbox').value = width;\n                        aspectRatioWidth.value = width.toString() + ' px';\n                        parent.aspectWidth = width;\n                    }\n                }\n            }\n            else {\n                parent.notify('transform', { prop: 'resizeImage', value: { width: args.width, height: null } });\n            }\n        }\n        else {\n            if (this.resizedImgAngle !== null && this.resizedImgAngle !== parent.transform.degree) {\n                this.resizedImgAngle = parent.transform.degree;\n                isRotate = true;\n            }\n            if (isRotate) {\n                parent.notify('transform', { prop: 'setPreventDownScale', value: { bool: true } });\n                parent.notify('transform', { prop: 'resizeCrop', value: { width: args.width, height: args.height } });\n                parent.notify('undo-redo', { prop: 'setPreventUR', value: { bool: true } });\n                parent.okBtn(null, true);\n                parent.notify('undo-redo', { prop: 'setPreventUR', value: { bool: false } });\n                parent.resizeSrc = { startX: parent.img.srcLeft, startY: parent.img.srcTop, width: parent.img.srcWidth,\n                    height: parent.img.srcHeight };\n                parent.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                parent.notify('transform', { prop: 'setPreventDownScale', value: { bool: false } });\n                parent.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n            }\n            else {\n                parent.notify('transform', { prop: 'resizeCrop', value: { width: args.width, height: args.height } });\n            }\n        }\n        this.resizedImgAngle = parent.transform.degree;\n    };\n    Transform.prototype.straightenImage = function (degree) {\n        var parent = this.parent;\n        var isSelection = parent.activeObj.shape && parent.activeObj.shape.indexOf('crop-') > -1;\n        if (parent.toolbar && parent.toolbar.length === 0) {\n            parent.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: 'custom', startX: null, startY: null, width: null, height: null } });\n        }\n        parent.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: null } });\n        parent.setStraighten(degree);\n        if (!isSelection) {\n            parent.okBtn();\n        }\n    };\n    return Transform;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/transform.js?");

/***/ })

}]);