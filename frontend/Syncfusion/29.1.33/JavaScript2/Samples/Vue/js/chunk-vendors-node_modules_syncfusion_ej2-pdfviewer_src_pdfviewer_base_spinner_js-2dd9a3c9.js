"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_spinner_js-2dd9a3c9"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/spinner.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/spinner.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Spinner: () => (/* binding */ Spinner),\n/* harmony export */   createSpinner: () => (/* binding */ createSpinner),\n/* harmony export */   hideSpinner: () => (/* binding */ hideSpinner),\n/* harmony export */   setSpinner: () => (/* binding */ setSpinner),\n/* harmony export */   showSpinner: () => (/* binding */ showSpinner)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\nvar globalTimeOut = {};\nvar spinTemplate = null;\nvar spinCSSClass = null;\nvar DEFT_MAT_WIDTH = 30;\nvar DEFT_MAT3_WIDTH = 30;\nvar DEFT_FAB_WIDTH = 30;\nvar DEFT_BOOT_WIDTH = 30;\nvar DEFT_BOOT4_WIDTH = 36;\nvar DEFT_FLUENT2_WIDTH = 30;\nvar DEFT_TAILWIND3_WIDTH = 30;\nvar CLS_SHOWSPIN = 'e-spin-show';\nvar CLS_HIDESPIN = 'e-spin-hide';\nvar CLS_MATERIALSPIN = 'e-spin-material';\nvar CLS_MATERIAL3SPIN = 'e-spin-material3';\nvar CLS_FABRICSPIN = 'e-spin-fabric';\nvar CLS_BOOTSPIN = 'e-spin-bootstrap';\nvar CLS_BOOT4SPIN = 'e-spin-bootstrap4';\nvar CLS_BOOT5SPIN = 'e-spin-bootstrap5';\nvar CLS_TAILWIND = 'e-spin-tailwind';\nvar CLS_FLUENT = 'e-spin-fluent';\nvar CLS_FLUENT2 = 'e-spin-fluent2';\nvar CLS_TAILWIND3 = 'e-spin-tailwind3';\nvar CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';\nvar CLS_SPINWRAP = 'e-spinner-pane';\nvar CLS_SPININWRAP = 'e-spinner-inner';\nvar CLS_SPINCIRCLE = 'e-path-circle';\nvar CLS_SPINARC = 'e-path-arc';\nvar CLS_SPINLABEL = 'e-spin-label';\nvar CLS_SPINTEMPLATE = 'e-spin-template';\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : blazorSpinner({ action: \"Create\", options: {target: targetElement}, type: \"\" });\n * ```\n *\n * @private\n * @param {string} action - The action.\n * @param {CreateArgs} options - The options\n * @param {string} target - The target\n * @param {string} type - the type\n * @returns {void}\n */\nfunction Spinner(action, options, target, type) {\n    switch (action) {\n        case 'Create': {\n            var element = document.querySelector(options.target);\n            var args = {\n                type: type, target: element, cssClass: options.cssClass,\n                label: options.label, width: options.width\n            };\n            createSpinner(args);\n            break;\n        }\n        case 'Show':\n            showSpinner(document.querySelector(target));\n            break;\n        case 'Hide':\n            hideSpinner(document.querySelector(target));\n            break;\n        case 'Set': {\n            var setArgs = { cssClass: options.cssClass, type: type };\n            setSpinner(setArgs);\n            break;\n        }\n    }\n}\n/**\n * Create a spinner for the specified target element.\n * ```\n * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });\n * ```\n *\n * @private\n * @param  {SpinnerArgs} args - The SpinnerArgs.\n * @param {createElementParams} internalCreateElement - The internalCreateElement\n * @returns {void}\n */\nfunction createSpinner(args, internalCreateElement) {\n    if (!args.target) {\n        return;\n    }\n    var radius;\n    var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n    var container = createSpinnerContainer(args.target, makeElement);\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.cssClass)) {\n        container.wrap.classList.add(args.cssClass);\n    }\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.template) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(spinTemplate)) {\n        var template = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.template) ? args.template : spinTemplate;\n        container.wrap.classList.add(CLS_SPINTEMPLATE);\n        replaceContent(container.wrap, template, spinCSSClass);\n    }\n    else {\n        var theme = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.type) ? args.type : getTheme(container.wrap);\n        var width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.width) ? args.width : undefined;\n        radius = calculateRadius(width, theme);\n        setTheme(theme, container.wrap, radius, makeElement);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.label)) {\n            createLabel(container.innerWrap, args.label, makeElement);\n        }\n    }\n    container.wrap.classList.add(CLS_HIDESPIN);\n    container = null;\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} label - The label.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {HTMLElement} - Returns HTMLElement.\n */\nfunction createLabel(container, label, makeElement) {\n    var labelEle = makeElement('div', {});\n    labelEle.classList.add(CLS_SPINLABEL);\n    labelEle.textContent = label;\n    container.appendChild(labelEle);\n    return labelEle;\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createMaterialSpinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Material', radius: radius };\n    createMaterialElement(container, uniqueID, makeElement, CLS_MATERIALSPIN);\n    matCalculateAttributes(radius, container, 'Material', CLS_MATERIALSPIN);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createFluent2Spinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Fluent2', radius: radius };\n    createFabricElement(container, uniqueID, CLS_FLUENT2, makeElement);\n    fbCalculateAttributes(radius, container, CLS_FLUENT2);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createMaterial3Spinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Material3', radius: radius };\n    createMaterialElement(container, uniqueID, makeElement, CLS_MATERIAL3SPIN);\n    matCalculateAttributes(radius, container, 'Material3', CLS_MATERIAL3SPIN);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createTailwind3Spinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Tailwind3', radius: radius };\n    createMaterialElement(container, uniqueID, makeElement, CLS_TAILWIND3);\n    matCalculateAttributes(radius, container, 'Tailwind3', CLS_TAILWIND3);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createBootstrap4Spinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Bootstrap4', radius: radius };\n    createMaterialElement(container, uniqueID, makeElement, CLS_BOOT4SPIN);\n    matCalculateAttributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createBootstrap5Spinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Bootstrap5', radius: radius };\n    createMaterialElement(container, uniqueID, makeElement, CLS_BOOT5SPIN);\n    matCalculateAttributes(radius, container, 'Bootstrap5', CLS_BOOT5SPIN);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createTailwindSpinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Tailwind', radius: radius };\n    createFabricElement(container, uniqueID, CLS_TAILWIND, makeElement);\n    fbCalculateAttributes(radius, container, CLS_TAILWIND);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createFluentSpinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Fluent', radius: radius };\n    createFabricElement(container, uniqueID, CLS_FLUENT, makeElement);\n    fbCalculateAttributes(radius, container, CLS_FLUENT);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {string} uniqueID - The uniqueID.\n * @param {number} radius - The radius.\n * @returns {void}\n */\nfunction startMatAnimate(container, uniqueID, radius) {\n    var globalObject = {};\n    var timeOutVar = 0;\n    globalTimeOut[\"\" + uniqueID].timeOut = 0;\n    globalObject[\"\" + uniqueID] = globalVariables(uniqueID, radius, 0, 0);\n    var spinnerInfo = { uniqueID: uniqueID, container: container, globalInfo: globalObject, timeOutVar: timeOutVar };\n    animateMaterial(spinnerInfo);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createFabricSpinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Fabric', radius: radius };\n    createFabricElement(container, uniqueID, CLS_FABRICSPIN, makeElement);\n    fbCalculateAttributes(radius, container, CLS_FABRICSPIN);\n}\n/**\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createHighContrastSpinner(container, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'HighContrast', radius: radius };\n    createFabricElement(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);\n    fbCalculateAttributes(radius, container, CLS_HIGHCONTRASTSPIN);\n}\n/**\n * @param {HTMLElement} container - The container\n * @returns {string} - Returns the string\n */\nfunction getTheme(container) {\n    var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n}\n/**\n * @param {string} theme - The theme.\n * @param {HTMLElement} container - The HTMLElement.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction setTheme(theme, container, radius, makeElement) {\n    var innerContainer = container.querySelector('.' + CLS_SPININWRAP);\n    var svg = innerContainer.querySelector('svg');\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(svg)) {\n        innerContainer.removeChild(svg);\n    }\n    switch (theme) {\n        case 'Material':\n            createMaterialSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Material3':\n            createMaterial3Spinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fabric':\n            createFabricSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap':\n            createBootstrapSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'HighContrast':\n            createHighContrastSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap4':\n            createBootstrap4Spinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap5':\n            createBootstrap5Spinner(innerContainer, radius, makeElement);\n            break;\n        case 'Tailwind':\n            createTailwindSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fluent':\n            createFluentSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fluent2':\n            createFluent2Spinner(innerContainer, radius, makeElement);\n            break;\n        case 'Tailwind3':\n            createTailwind3Spinner(innerContainer, radius, makeElement);\n            break;\n    }\n}\n/**\n * @param {HTMLElement} innerContainer - The innerContainer.\n * @param {number} radius - The radius.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createBootstrapSpinner(innerContainer, radius, makeElement) {\n    var uniqueID = randomGenerator();\n    globalTimeOut[\"\" + uniqueID] = { timeOut: 0, type: 'Bootstrap', radius: radius };\n    createBootstrapElement(innerContainer, uniqueID, makeElement);\n    bootCalculateAttributes(innerContainer, radius);\n}\n/**\n * @param {HTMLElement} innerContainer - The HTMLElement.\n * @param {string} uniqueID - The uniqueID.\n * @param {createElementParams} makeElement - The createElementParams.\n * @returns {void}\n */\nfunction createBootstrapElement(innerContainer, uniqueID, makeElement) {\n    var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    var viewBoxValue = 64;\n    var trans = 32;\n    var defaultRadius = 2;\n    svgBoot.setAttribute('id', uniqueID);\n    svgBoot.setAttribute('class', CLS_BOOTSPIN);\n    svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);\n    innerContainer.insertBefore(svgBoot, innerContainer.firstChild);\n    for (var item = 0; item <= 7; item++) {\n        var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);\n        bootCircle.setAttribute('r', defaultRadius + '');\n        bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');\n        svgBoot.appendChild(bootCircle);\n    }\n}\n/**\n * @param {HTMLElement} innerContainer - The innerContainer.\n * @param {number} radius - The radius.\n * @returns {void}\n */\nfunction bootCalculateAttributes(innerContainer, radius) {\n    var svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    svg.style.width = svg.style.height = radius + 'px';\n    var x = 0;\n    var y = 0;\n    var rad = 24;\n    var startArc = 90;\n    for (var item = 0; item <= 7; item++) {\n        var start = defineArcPoints(x, y, rad, startArc);\n        var circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);\n        circleEle.setAttribute('cx', start.x + '');\n        circleEle.setAttribute('cy', start.y + '');\n        startArc = startArc >= 360 ? 0 : startArc;\n        startArc = startArc + 45;\n    }\n}\n/**\n * @param {number} begin - The begin.\n * @param {number} stop - The stop.\n * @returns {number[]} - Returns the number.\n */\nfunction generateSeries(begin, stop) {\n    var series = [];\n    var start = begin;\n    var end = stop;\n    var increment = false;\n    var count = 1;\n    formSeries(start);\n    /**\n     * @param {number} i - The number\n     * @returns {void}\n     */\n    function formSeries(i) {\n        series.push(i);\n        if (i !== end || count === 1) {\n            if (i <= start && i > 1 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            else if (i === 1) {\n                i = 7;\n                i = parseFloat((i + 0.2).toFixed(2));\n                increment = true;\n            }\n            else if (i < 8 && increment) {\n                i = parseFloat((i + 0.2).toFixed(2));\n                if (i === 8) {\n                    increment = false;\n                }\n            }\n            else if (i <= 8 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            ++count;\n            formSeries(i);\n        }\n    }\n    return series;\n}\n/**\n * @param {HTMLElement} innerContainer - The innerContainer.\n * @returns {void}\n */\nfunction animateBootstrap(innerContainer) {\n    var svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    var id = svg.getAttribute('id');\n    for (var i = 1; i <= 8; i++) {\n        var circleEle = (innerContainer.getElementsByClassName('e-path-circle_' +\n            (i === 8 ? 0 : i))[0]);\n        rotation(circleEle, i, i, generateSeries(i, i), id);\n    }\n    /**\n     * @param {SVGCircleElement} circle - The circle.\n     * @param {number} start - The start.\n     * @param {number} end - The end.\n     * @param {number[]} series - The series\n     * @param {string} id - The id.\n     * @returns {void}\n     */\n    function rotation(circle, start, end, series, id) {\n        var count = 0;\n        bootAnimate(start);\n        /**\n         * @param {number} radius - The radisu.\n         * @returns {void}\n         */\n        function bootAnimate(radius) {\n            if (globalTimeOut[\"\" + id].isAnimate) {\n                ++count;\n                circle.setAttribute('r', radius + '');\n                if (count >= series.length) {\n                    count = 0;\n                }\n                globalTimeOut[\"\" + id].timeOut = setTimeout(bootAnimate.bind(null, series[parseInt(count.toString(), 10)]), 18);\n            }\n        }\n    }\n}\n/**\n * @param {HTMLElement} container - The container.\n * @param {string} template - The template.\n * @param {string} cssClass - The cssClass.\n * @returns {void}\n */\nfunction replaceContent(container, template, cssClass) {\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    var inner = container.querySelector('.e-spinner-inner');\n    inner.innerHTML = template;\n}\n/**\n * @param {string | number} width - The width\n * @param {string} theme - The theme.\n * @returns {number} - Returns the number.\n */\nfunction calculateRadius(width, theme) {\n    var defaultSize;\n    switch (theme) {\n        case 'Material':\n            defaultSize = DEFT_MAT_WIDTH;\n            break;\n        case 'Material3':\n            defaultSize = DEFT_MAT3_WIDTH;\n            break;\n        case 'Fabric':\n            defaultSize = DEFT_FAB_WIDTH;\n            break;\n        case 'Fluent2':\n            defaultSize = DEFT_FLUENT2_WIDTH;\n            break;\n        case 'Tailwind3':\n            defaultSize = DEFT_TAILWIND3_WIDTH;\n            break;\n        case 'Bootstrap4':\n            defaultSize = DEFT_BOOT4_WIDTH;\n            break;\n        default:\n            defaultSize = DEFT_BOOT_WIDTH;\n    }\n    width = width ? parseFloat(width + '') : defaultSize;\n    return theme === 'Bootstrap' ? width : width / 2;\n}\n/**\n * @param {string} id - The id.\n * @param {number} radius - The radius.\n * @param {number} count - The count.\n * @param {number} previousId - The previousId.\n * @returns {GlobalVariables} - Returns GlobalVariables.\n */\nfunction globalVariables(id, radius, count, previousId) {\n    return {\n        radius: radius,\n        count: count,\n        previousId: previousId\n    };\n}\n/**\n * @returns {string} - Returns string.\n */\nfunction randomGenerator() {\n    var random = '';\n    var combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (var i = 0; i < 5; i++) {\n        random += combine.charAt(Math.floor(Math.random() * combine.length));\n    }\n    return random;\n}\n/**\n * @param {HTMLElement} innerCon - The innerContainer.\n * @param {string} uniqueID - The uniqueID.\n * @param {string} themeClass - The themeClass\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {void}\n */\nfunction createFabricElement(innerCon, uniqueID, themeClass, makeElement) {\n    var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgFabric.setAttribute('id', uniqueID);\n    svgFabric.setAttribute('class', themeClass);\n    var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCircleArc.setAttribute('class', CLS_SPINARC);\n    innerCon.insertBefore(svgFabric, innerCon.firstChild);\n    svgFabric.appendChild(fabricCirclePath);\n    svgFabric.appendChild(fabricCircleArc);\n}\n/**\n * @param {HTMLElement} innerContainer - The innerContainer.\n * @param {string} uniqueID - The uniqueID.\n * @param {createElementParams} makeElement - The makeElement.\n * @param {string} cls - The class\n * @returns {void}\n */\nfunction createMaterialElement(innerContainer, uniqueID, makeElement, cls) {\n    var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgMaterial.setAttribute('class', cls);\n    svgMaterial.setAttribute('id', uniqueID);\n    var matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    matCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);\n    svgMaterial.appendChild(matCirclePath);\n}\n/**\n * @param {HTMLElement} target - The target.\n * @param {createElementParams} makeElement - The makeElement.\n * @returns {HTMLElement} - Retruns the HTMLElement.\n */\nfunction createSpinnerContainer(target, makeElement) {\n    var spinnerContainer = makeElement('div', {});\n    spinnerContainer.classList.add(CLS_SPINWRAP);\n    var spinnerInnerContainer = makeElement('div', {});\n    spinnerInnerContainer.classList.add(CLS_SPININWRAP);\n    target.appendChild(spinnerContainer);\n    spinnerContainer.appendChild(spinnerInnerContainer);\n    return { wrap: spinnerContainer, innerWrap: spinnerInnerContainer };\n}\n/**\n * @param {SpinnerInfo} spinnerInfo - The SpinnerInfo.\n * @returns {void}\n */\nfunction animateMaterial(spinnerInfo) {\n    var start = 1;\n    var end = 149;\n    var duration = 1333;\n    var max = 75;\n    createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);\n    spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;\n}\n/**\n * @param {number} start - The start.\n * @param {number} end - The end.\n * @param {Function} easing - The easing.\n * @param {number} duration - The duration.\n * @param {number} count - The count.\n * @param {number} max - The max.\n * @param {SpinnerInfo} spinnerInfo - The SpinnerInfo.\n * @returns {void}\n */\nfunction createCircle(start, end, easing, duration, count, max, spinnerInfo) {\n    var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;\n    var startTime = new Date().getTime();\n    var change = end - start;\n    var diameter = getSize((spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2) + '');\n    var strokeSize = getStrokeSize(diameter);\n    var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(globalTimeOut[spinnerInfo.uniqueID]) && globalTimeOut[spinnerInfo.uniqueID].timeOut) {\n        clearTimeout(globalTimeOut[spinnerInfo.uniqueID].timeOut);\n        globalTimeOut[spinnerInfo.uniqueID].timeOut = null;\n    }\n    matAnimation(spinnerInfo);\n    /**\n     * @param {SpinnerInfo} spinnerInfo - The SpinnerInfo.\n     * @returns {void}\n     */\n    function matAnimation(spinnerInfo) {\n        var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(globalTimeOut[spinnerInfo.uniqueID]) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(globalTimeOut[spinnerInfo.uniqueID].timeOut)) {\n            return;\n        }\n        updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);\n        if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {\n            globalTimeOut[spinnerInfo.uniqueID].timeOut = requestAnimationFrame(function () { return matAnimation(spinnerInfo); });\n        }\n        else {\n            clearTimeout(globalTimeOut[spinnerInfo.uniqueID].timeOut);\n            globalTimeOut[spinnerInfo.uniqueID].timeOut = null;\n            animateMaterial(spinnerInfo);\n        }\n    }\n    /**\n     * @param {number} value - The value.\n     * @param {HTMLElement} container - The container.\n     * @returns {void}\n     */\n    function updatePath(value, container) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material3'))) {\n            var svg = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {\n                svg = container.querySelector('svg.e-spin-material');\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-fluent2')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-fluent2').querySelector('path.e-path-circle'))) {\n                svg = container.querySelector('svg.e-spin-fluent2');\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material3')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-material3').querySelector('path.e-path-circle'))) {\n                svg = container.querySelector('svg.e-spin-material3');\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-tailwind3')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(container.querySelector('svg.e-spin-tailwind3').querySelector('path.e-path-circle'))) {\n                svg = container.querySelector('svg.e-spin-tailwind3');\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(svg)) {\n                var path = svg.querySelector('path.e-path-circle');\n                path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');\n                path.setAttribute('transform', 'rotate(' + (rotate) + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');\n            }\n        }\n    }\n}\n/**\n * @param {number} radius - The radius.\n * @param {HTMLElement} container - The container.\n * @param {string} type - The type.\n * @param {string} cls - The class\n * @returns {void}\n */\nfunction matCalculateAttributes(radius, container, type, cls) {\n    var diameter = radius * 2;\n    var svg = container.querySelector('svg.' + cls);\n    var path = svg.querySelector('path.e-path-circle');\n    var strokeSize = getStrokeSize(diameter);\n    var transformOrigin = (diameter / 2) + 'px';\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.width = svg.style.height = diameter + 'px';\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    path.setAttribute('d', drawArc(diameter, strokeSize));\n    if (type === 'Material' || type === 'Material3') {\n        path.setAttribute('stroke-width', strokeSize + '');\n        path.setAttribute('stroke-dasharray', ((diameter - strokeSize) * Math.PI * 0.75) + '');\n        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');\n    }\n    if (type === 'Tailwind3') {\n        path.setAttribute('stroke-width', strokeSize + '');\n    }\n}\n/**\n * @param {string} value - The value.\n * @returns {number} - Returns number.\n */\nfunction getSize(value) {\n    var parsed = parseFloat(value);\n    return parsed;\n}\n/**\n * @param {number} diameter - The diameter.\n * @param {number} strokeSize - The strokeSize.\n * @returns {string} - Returns string.\n */\nfunction drawArc(diameter, strokeSize) {\n    var radius = diameter / 2;\n    var offset = strokeSize / 2;\n    return 'M' + radius + ',' + offset\n        + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;\n}\n/**\n * @param {number} diameter - The diameter.\n * @returns {number} - Returns number.\n */\nfunction getStrokeSize(diameter) {\n    return 10 / 100 * diameter;\n}\n/**\n * @param {number} diameter - The diameter.\n * @param {number} strokeSize - The strokeSize.\n * @param {number} value - The value.\n * @param {number} max - The max.\n * @returns {number} - Returns number.\n */\nfunction getDashOffset(diameter, strokeSize, value, max) {\n    return (diameter - strokeSize) * Math.PI * ((3 * (max) / 100) - (value / 100));\n}\n/**\n * @param {number} current - The current.\n * @param {number} start - The start.\n * @param {number} change - The change.\n * @param {number} duration - The duration\n * @returns {number} - Returns number.\n */\nfunction easeAnimation(current, start, change, duration) {\n    var timestamp = (current /= duration) * current;\n    var timecount = timestamp * current;\n    return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);\n}\n/**\n * @param {number} radius - The radius.\n * @param {HTMLElement} innerConainer - The innerConainer.\n * @param {string} trgClass - The trgClass.\n * @returns {void}\n */\nfunction fbCalculateAttributes(radius, innerConainer, trgClass) {\n    var centerX = radius;\n    var centerY = radius;\n    var diameter = radius * 2;\n    var startArc = 315;\n    var endArc = 45;\n    var svg = innerConainer.querySelector('.' + trgClass);\n    var circle = svg.querySelector('.e-path-circle');\n    var path = svg.querySelector('.e-path-arc');\n    var transformOrigin = (diameter / 2) + 'px';\n    circle.setAttribute('d', defineCircle(centerX, centerY, radius));\n    path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    svg.style.width = svg.style.height = diameter + 'px';\n}\n/**\n * @param {number} centerX - The centerX.\n * @param {number} centerY - The centerY.\n * @param {number} radius - The radius.\n * @param {number} angle - The angle.\n * @returns {number} - Returns number.\n */\nfunction defineArcPoints(centerX, centerY, radius, angle) {\n    var radians = (angle - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(radians)),\n        y: centerY + (radius * Math.sin(radians))\n    };\n}\n/**\n * @param {number} x - The x.\n * @param {number} y - The y.\n * @param {number} radius - The radius.\n * @param {number} startArc - The startArc.\n * @param {number} endArc - The endArc.\n * @returns {string} - Returns string.\n */\nfunction defineArc(x, y, radius, startArc, endArc) {\n    var start = defineArcPoints(x, y, radius, endArc);\n    var end = defineArcPoints(x, y, radius, startArc);\n    var d = [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, 0, 0, end.x, end.y\n    ].join(' ');\n    return d;\n}\n/**\n * @param {number} x - The x.\n * @param {number} y - The y.\n * @param {number} radius - The radius.\n * @returns {void}\n */\nfunction defineCircle(x, y, radius) {\n    var d = [\n        'M', x, y,\n        'm', -radius, 0,\n        'a', radius, radius, 0, 1, 0, radius * 2, 0,\n        'a', radius, radius, 0, 1, 0, -radius * 2, 0\n    ].join(' ');\n    return d;\n}\n/**\n * Function to show the Spinner.\n *\n * @private\n * @param {HTMLElement} container - The container.\n * @returns {void}\n */\nfunction showSpinner(container) {\n    showHideSpinner(container, false);\n    container = null;\n}\n/**\n * @param {HTMLElement} container - The container.\n * @param {boolean} isHide - To show or hide.\n * @returns {void}\n */\nfunction showHideSpinner(container, isHide) {\n    var spinnerWrap;\n    if (container) {\n        spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container :\n            container.querySelector('.' + CLS_SPINWRAP);\n    }\n    if (container && spinnerWrap) {\n        var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);\n        var spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) &&\n            !spinnerWrap.classList.contains(CLS_HIDESPIN) :\n            !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);\n        if (spinCheck) {\n            var svgEle = spinnerWrap.querySelector('svg');\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(svgEle)) {\n                return;\n            }\n            var id = svgEle.getAttribute('id');\n            globalTimeOut[\"\" + id].isAnimate = !isHide;\n            switch (globalTimeOut[\"\" + id].type) {\n                case 'Material':\n                case 'Material3':\n                case 'Fluent2':\n                case 'Tailwind3':\n                    if (isHide) {\n                        clearTimeout(globalTimeOut[\"\" + id].timeOut);\n                    }\n                    else {\n                        startMatAnimate(inner, id, globalTimeOut[\"\" + id].radius);\n                    }\n                    break;\n                case 'Bootstrap':\n                    if (isHide) {\n                        clearTimeout(globalTimeOut[\"\" + id].timeOut);\n                    }\n                    else {\n                        animateBootstrap(inner);\n                    }\n                    break;\n            }\n        }\n        if (isHide) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]);\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.classList)(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);\n        }\n        container = null;\n    }\n}\n/**\n * Function to hide the Spinner.\n *\n * @private\n * @param {HTMLElement} container - Specify the target of the Spinner.\n * @returns {void}\n */\nfunction hideSpinner(container) {\n    showHideSpinner(container, true);\n    container = null;\n}\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });\n * ```\n *\n * @private\n * @param {SetSpinnerArgs} args - The args.\n * @param {createElementParams} internalCreateElement - The internalCreateElement.\n * @returns {void}\n */\nfunction setSpinner(args, internalCreateElement) {\n    var makeElement = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(internalCreateElement) ? internalCreateElement : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement;\n    if (args.template !== undefined) {\n        spinTemplate = args.template;\n        if (args.template !== undefined) {\n            spinCSSClass = args.cssClass;\n        }\n    }\n    var container = document.querySelectorAll('.' + CLS_SPINWRAP);\n    for (var index = 0; index < container.length; index++) {\n        ensureTemplate(args.template, container[parseInt(index.toString(), 10)], args.type, args.cssClass, makeElement);\n    }\n}\n/**\n * @param {string} template - The template.\n * @param {HTMLElement} container - The container.\n * @param {string} theme - The theme.\n * @param {string} cssClass - The cssClass.\n * @param {createElementParams} makeEle - The makeEle.\n * @returns {void}\n */\nfunction ensureTemplate(template, container, theme, cssClass, makeEle) {\n    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {\n        replaceTheme(container, theme, cssClass, makeEle);\n        if (container.classList.contains(CLS_SHOWSPIN)) {\n            container.classList.remove(CLS_SHOWSPIN);\n            showSpinner(container);\n        }\n        else {\n            container.classList.remove(CLS_HIDESPIN);\n            hideSpinner(container);\n        }\n    }\n    else {\n        spinTemplate = template;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass)) {\n            spinCSSClass = cssClass;\n        }\n    }\n}\n/**\n * @param {HTMLElement} container - The container.\n * @param {string} theme - The theme.\n * @param {string} cssClass - The cssClass.\n * @param {createElementParams} makeEle - The makeEle.\n * @returns {void}\n */\nfunction replaceTheme(container, theme, cssClass, makeEle) {\n    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    var svgElement = container.querySelector('svg');\n    var radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;\n    var classNames = svgElement.getAttribute('class');\n    var svgClassList = classNames.split(/\\s/);\n    if (svgClassList.indexOf('e-spin-material') >= 0) {\n        var id = svgElement.getAttribute('id');\n        clearTimeout(globalTimeOut[\"\" + id].timeOut);\n    }\n    setTheme(theme, container, radius, makeEle);\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/spinner.js?");

/***/ })

}]);