"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_circularchart3d_user-interaction_tooltip_js-c64-1e358e87"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/tooltip.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/tooltip.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircularChart3DPointData: () => (/* binding */ CircularChart3DPointData),\n/* harmony export */   CircularChart3DTooltipSettings: () => (/* binding */ CircularChart3DTooltipSettings),\n/* harmony export */   CircularChartTooltip3D: () => (/* binding */ CircularChartTooltip3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/**\n * Circular 3D chart tooltip.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/**\n * Represents data for a 3D point in a circular 3D series.\n *\n * @private\n */\nvar CircularChart3DPointData = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the CircularChart3DPointData class.\n     *\n     * @param {CircularChart3DPoints} point - The 3D point in the circular series.\n     * @param {CircularChart3DSeries} series - The circular series to which the point belongs.\n     * @param {number} index - The index of the point in the series. Default is 0.\n     */\n    function CircularChart3DPointData(point, series, index) {\n        if (index === void 0) { index = 0; }\n        this.point = point;\n        this.series = series;\n        this.index = index;\n    }\n    return CircularChart3DPointData;\n}());\n\n/**\n * Represents the tooltip settings for a circular 3D chart.\n *\n */\nvar CircularChart3DTooltipSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DTooltipSettings, _super);\n    function CircularChart3DTooltipSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CircularChart3DTooltipSettings.prototype, \"enableMarker\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DTooltipSettings.prototype, \"fill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DTooltipSettings.prototype, \"header\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DTooltipSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], CircularChart3DTooltipSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DTooltipSettings.prototype, \"format\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DTooltipSettings.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(300)\n    ], CircularChart3DTooltipSettings.prototype, \"duration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(700)\n    ], CircularChart3DTooltipSettings.prototype, \"fadeOutDuration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3DTooltipSettings.prototype, \"enableTextWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: null, width: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], CircularChart3DTooltipSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ x: null, y: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Location)\n    ], CircularChart3DTooltipSettings.prototype, \"location\", void 0);\n    return CircularChart3DTooltipSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The `CircularChart3DTooltip` module is used to render tooltips for a circular 3D chart.\n */\nvar CircularChartTooltip3D = /** @class */ (function (_super) {\n    __extends(CircularChartTooltip3D, _super);\n    function CircularChartTooltip3D() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.currentPoints = [];\n        /** @private */\n        _this.previousPoints = [];\n        /** @private */\n        _this.tooltipRendered = false;\n        return _this;\n    }\n    /**\n     * Handles the mouse leave event for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseLeaveHandler = function () {\n        this.removeTooltip(this.control.tooltip.fadeOutDuration);\n    };\n    /**\n     * Handles the mouse up event for the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseUpHandler = function (event, chart) {\n        this.control = chart;\n        this.element = chart.element;\n        var swipeThreshold = 10;\n        var isWithinSwipeThreshold = Math.abs(chart.mouseX - chart.cachedX) < swipeThreshold &&\n            Math.abs(chart.mouseY - chart.cachedY) < swipeThreshold;\n        if (this.control.tooltip.enable && !chart.rotateActivate && isWithinSwipeThreshold\n            && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.withInBounds)(this.control.mouseX, this.control.mouseY, this.control.initialClipRect) && this.control.isTouch) {\n            this.tooltip(event);\n            this.removeTooltip(2000);\n            this.tooltipRendered = true;\n        }\n        else if (this.control.isTouch) {\n            this.removeTooltip(0);\n        }\n    };\n    /**\n     * Handles the mouse move event for the circular 3D chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The mouse or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.mouseMoveHandler = function (event, chart) {\n        this.control = chart;\n        this.element = chart.element;\n        if (!this.tooltipRendered) {\n            if (this.control.tooltip.enable && !chart.rotateActivate &&\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.withInBounds)(this.control.mouseX, this.control.mouseY, this.control.initialClipRect)) {\n                this.tooltip(event);\n            }\n            else {\n                this.removeTooltip(0);\n            }\n        }\n        this.tooltipRendered = false;\n    };\n    /**\n     * Displays the tooltip for the circular 3D pie chart on pointer events or touch events.\n     *\n     * @param  {PointerEvent} event - The event triggering the tooltip display (pointer event or touch event).\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.tooltip = function (event) {\n        this.renderSeriesTooltip(this.control, this.getPieData(event, this.control));\n    };\n    /**\n     * Gets the HTML element with the specified ID from the document.\n     *\n     * @param {string} id - The ID of the HTML element to retrieve.\n     * @returns {HTMLElement} - The HTML element with the specified ID, or null if not found.\n     */\n    CircularChartTooltip3D.prototype.getElement = function (id) {\n        return document.getElementById(id);\n    };\n    /**\n     * Gets the tooltip element based on the visibility of the tooltip.\n     *\n     * @param {boolean} isTooltip - A flag indicating whether the tooltip is currently visible.\n     * @returns {HTMLDivElement} - The tooltip element is returned, or null if the tooltip is not visible.\n     */\n    CircularChartTooltip3D.prototype.getTooltipElement = function (isTooltip) {\n        this.header = (this.control.tooltip.header === null) ? '${series.name}' : (this.control.tooltip.header);\n        this.formattedText = [];\n        var tooltipDiv = document.getElementById(this.control.element.id + '_tooltip');\n        if (!isTooltip && !tooltipDiv) {\n            return this.createElement();\n        }\n        return null;\n    };\n    /**\n     * Creates and returns an HTMLDivElement for the tooltip.\n     *\n     * @returns {HTMLDivElement} - The created HTMLDivElement for the tooltip.\n     */\n    CircularChartTooltip3D.prototype.createElement = function () {\n        var tooltipDiv = document.createElement('div');\n        tooltipDiv.id = this.element.id + '_tooltip';\n        tooltipDiv.className = 'ejSVGTooltip';\n        tooltipDiv.style.pointerEvents = 'none';\n        tooltipDiv.style.position = 'absolute';\n        tooltipDiv.style.zIndex = '1';\n        return tooltipDiv;\n    };\n    /**\n     * Renders the tooltip for a circular 3D series based on the provided point data.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DPointData} data - The CircularChart3D point data for which the tooltip will be rendered.\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.renderSeriesTooltip = function (chart, data) {\n        var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n        var isTooltip = svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0;\n        var tooltipDiv = this.getTooltipElement(isTooltip);\n        var isFirst = !isTooltip;\n        this.template = chart.tooltip.template;\n        this.currentPoints = [];\n        if (data.point) {\n            if (this.pushData(data, tooltipDiv)) {\n                this.triggerTooltipRender(data, isFirst, this.getTooltipText(data, chart.tooltip), this.findHeader(data));\n            }\n        }\n        else {\n            if (!data.point && this.isRemove) {\n                this.removeTooltip(this.control.tooltip.fadeOutDuration);\n                this.isRemove = false;\n            }\n        }\n    };\n    /**\n     * Removes the tooltip with a specified duration.\n     *\n     * @param {number} duration - The duration for the tooltip removal animation.\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.removeTooltip = function (duration) {\n        var _this = this;\n        var tooltipElement = this.getElement(this.element.id + '_tooltip');\n        this.stopAnimation();\n        if (tooltipElement && this.previousPoints.length > 0) {\n            this.tooltipInterval = +setTimeout(function () {\n                if (_this.svgTooltip) {\n                    _this.svgTooltip.fadeOut();\n                }\n            }, duration);\n        }\n    };\n    /**\n     * Stops the animation by clearing the tooltip interval.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.stopAnimation = function () {\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.stopTimer)(this.tooltipInterval);\n    };\n    /**\n     * Pushes CircularChart3D point data to the currentPoints array and updates the tooltip div if tooltip are enabled for the series.\n     *\n     * @param {CircularChart3DPointData} data - The CircularChart3D point data to be pushed.\n     * @param {HTMLDivElement} tooltipDiv - The tooltip div element to be updated if tooltip are enabled.\n     * @returns {boolean} - A flag indicating whether the data was successfully pushed.\n     */\n    CircularChartTooltip3D.prototype.pushData = function (data, tooltipDiv) {\n        if (data.series.enableTooltip) {\n            this.currentPoints.push(data);\n            this.stopAnimation();\n            if (tooltipDiv && !document.getElementById(tooltipDiv.id)) {\n                document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Triggers the rendering of a tooltip for a CircularChart3D point data.\n     *\n     * @param {CircularChart3DPointData} point - The CircularChart3D point data for which the tooltip will be rendered.\n     * @param {boolean} isFirst - A flag indicating whether it is the first rendering of the tooltip.\n     * @param {string} textCollection - The collection of text to be included in the tooltip.\n     * @param {string} headerText - The header text for the tooltip.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.triggerTooltipRender = function (point, isFirst, textCollection, headerText) {\n        var _this = this;\n        var tooltip = this.control.tooltip;\n        var argsData = {\n            cancel: false, text: textCollection, point: point.point, textStyle: tooltip.textStyle,\n            series: point.series, headerText: headerText, template: this.template,\n            data: {\n                pointX: point.point.x, pointY: point.point.y, seriesIndex: point.series.index,\n                pointIndex: point.point.index, pointText: point.point.text, seriesName: point.series.name\n            }\n        };\n        var padding = 10;\n        var tooltipSuccess = function (argsData) {\n            if (!argsData.cancel) {\n                _this.formattedText = _this.formattedText.concat(argsData.text);\n                _this.text = _this.formattedText;\n                _this.headerText = argsData.headerText;\n                var location_1 = {\n                    x: (tooltip.location.x !== null) ? tooltip.location.x : _this.control.mouseX,\n                    y: (tooltip.location.y !== null) ? tooltip.location.y : _this.control.mouseY - padding\n                };\n                _this.createTooltip(_this.control, isFirst, location_1, point.series.clipRect, point.point, 0, _this.control.initialClipRect, null, point.point, _this.template ? argsData.template : '');\n            }\n            else {\n                _this.removeHighlight();\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(_this.getElement(_this.element.id + '_tooltip'));\n            }\n            _this.isRemove = true;\n        };\n        tooltipSuccess.bind(this, point);\n        this.control.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_4__.tooltipRender, argsData, tooltipSuccess);\n    };\n    /**\n     * Gets the CircularChart3D point data associated with a pointer or touch event on the chart.\n     *\n     * @param {PointerEvent | TouchEvent} event - The pointer or touch event.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {CircularChart3DPointData} - The CircularChart3D point data corresponding to the event.\n     */\n    CircularChartTooltip3D.prototype.getPieData = function (event, chart) {\n        var point;\n        var series = chart.visibleSeries[0];\n        var element = event.target;\n        if (element.id.indexOf('point') > -1 && element.id.indexOf('series') > -1) {\n            var pointIndex = parseInt(element.id.split('point-')[1], 10);\n            point = series.points[pointIndex];\n        }\n        else if (element.id.indexOf('-data-label-text') > -1 && series.dataLabel.position === 'Inside') {\n            var index = parseInt(element.id.split('data-label-text-')[1], 10);\n            point = series.points[index];\n        }\n        else if (element.id.indexOf('data-label-series') > -1 && series.dataLabel.position === 'Inside') {\n            var index = parseInt(element.id.split('data-label-series-0-shape-')[1], 10);\n            point = series.points[index];\n        }\n        if (point) {\n            var pointData = { point: point, series: series, index: point.index };\n            return pointData;\n        }\n        return new CircularChart3DPointData(null, null);\n    };\n    /**\n     * Gets the tooltip text for a circular 3D point data based on the specified tooltip settings.\n     *\n     * @param {CircularChart3DPointData} data - The circularChart3D point data for which the tooltip text will be generated.\n     * @param {CircularChart3DTooltipSettingsModel} tooltip - The tooltip settings to determine the format of the text.\n     * @returns {string} - The generated tooltip text.\n     */\n    CircularChartTooltip3D.prototype.getTooltipText = function (data, tooltip) {\n        var series = data.series;\n        var format = tooltip.format ? tooltip.format : this.control.theme.indexOf('Tailwind3') > -1 ? '${point.x} : ${point.y}' : '${point.x} : <b>${point.y}</b>';\n        format = this.control.useGroupingSeparator ? format.replace('${point.y}', '${point.separatorY}') : format;\n        return this.parseTemplate(data.point, series, format);\n    };\n    /**\n     * Finds the header for circular 3D point data.\n     *\n     * @param {CircularChart3DPointData} data - The circular 3D point data for which the header will be found.\n     * @returns {string} - The found header string.\n     */\n    CircularChartTooltip3D.prototype.findHeader = function (data) {\n        if (this.header === '') {\n            return '';\n        }\n        this.header = this.parseTemplate(data.point, data.series, this.header);\n        if (this.header.replace(/<b>/g, '').replace(/<\\/b>/g, '').trim() !== '') {\n            return this.header;\n        }\n        return '';\n    };\n    /**\n     * Parses a template for a circular 3D chart.\n     *\n     * @param {CircularChart3DPoints} point - The circular 3D series point associated with the template.\n     * @param {CircularChart3DSeries} series - The circular 3D series associated with the template.\n     * @param {string} format - The format for parsing the template.\n     * @returns {string} - The parsed template string.\n     */\n    CircularChartTooltip3D.prototype.parseTemplate = function (point, series, format) {\n        var value;\n        var textValue;\n        var regExp = RegExp;\n        for (var _i = 0, _a = Object.keys(point); _i < _a.length; _i++) {\n            var dataValue = _a[_i];\n            value = new regExp('${point' + '.' + dataValue + '}', 'gm');\n            format = format.replace(value.source, point[dataValue]);\n        }\n        for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(series)); _b < _c.length; _b++) {\n            var dataValue = _c[_b];\n            value = new regExp('${series' + '.' + dataValue + '}', 'gm');\n            textValue = series[dataValue];\n            format = format.replace(value.source, textValue);\n        }\n        return format;\n    };\n    /**\n     * Creates a tooltip for a circularChart3D chart.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {boolean} isFirst - A flag indicating whether it is the first tooltip.\n     * @param {CircularChart3DLocation} location - The location where the tooltip will be positioned.\n     * @param {CircularChart3DLocation} clipLocation - The clipping location for the tooltip.\n     * @param {CircularChart3DPoints} point - The circular 3D point associated with the tooltip.\n     * @param {number} offset - The offset for the tooltip.\n     * @param {Rect} bounds - The bounds of the tooltip.\n     * @param {CircularChart3DPointData[]} extraPoints - An array of additional CircularChart3DPointData for the tooltip.\n     * @param {CircularChart3DPoints | CircularChart3DPoints[]} templatePoint - The template point or points for the tooltip.\n     * @param {string | Function} customTemplate - A custom template for the tooltip, specified as a string or a function.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.createTooltip = function (chart, isFirst, location, clipLocation, point, offset, bounds, extraPoints, templatePoint, customTemplate) {\n        if (extraPoints === void 0) { extraPoints = null; }\n        if (templatePoint === void 0) { templatePoint = null; }\n        var tooltipModule = chart.circularChartTooltip3DModule;\n        if (!tooltipModule || location === null) { // For the tooltip enable is false.\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeElement)(this.control.element.id + '_tooltip');\n            return;\n        }\n        if (isFirst) {\n            this.svgTooltip = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_3__.Tooltip({\n                opacity: chart.tooltip.opacity ? chart.tooltip.opacity : ((this.control.theme === 'Material3' || this.control.theme === 'Material3Dark' || this.control.theme.indexOf('Bootstrap5') > -1) ? 1 : 0.75),\n                header: this.headerText,\n                content: this.text,\n                fill: chart.tooltip.fill,\n                border: chart.tooltip.border,\n                enableAnimation: chart.tooltip.enableAnimation,\n                location: location,\n                shared: false,\n                crosshair: false,\n                shapes: !chart.tooltip.enableMarker ? [] : ['Circle'],\n                clipBounds: clipLocation,\n                areaBounds: bounds,\n                palette: this.findPalette(),\n                template: customTemplate || this.template,\n                data: templatePoint,\n                theme: chart.theme,\n                offset: offset,\n                textStyle: chart.tooltip.textStyle,\n                isNegative: false,\n                inverted: false,\n                arrowPadding: 0,\n                availableSize: chart.availableSize,\n                duration: this.control.tooltip.duration,\n                isCanvas: false,\n                isFixed: (this.control.tooltip.location.x !== null || this.control.tooltip.location.y !== null),\n                isTextWrap: chart.tooltip.enableTextWrap,\n                blazorTemplate: { name: 'Template', parent: this.control.tooltip },\n                controlInstance: this.control,\n                enableRTL: chart.enableRtl,\n                controlName: 'Chart',\n                allowHighlight: false,\n                tooltipRender: function () {\n                    tooltipModule.removeHighlight();\n                    tooltipModule.highlightPoints();\n                    tooltipModule.updatePreviousPoint(extraPoints);\n                },\n                animationComplete: function (args) {\n                    if (args.tooltip.fadeOuted) {\n                        tooltipModule.fadeOut();\n                    }\n                }\n            });\n            this.svgTooltip.appendTo(this.getElement(this.element.id + '_tooltip'));\n        }\n        else {\n            if (this.svgTooltip) {\n                this.svgTooltip.location = location;\n                this.svgTooltip.content = this.text;\n                this.svgTooltip.header = this.headerText;\n                this.svgTooltip.offset = offset;\n                this.svgTooltip.palette = this.findPalette();\n                this.svgTooltip.shapes = !chart.tooltip.enableMarker ? [] : ['Circle'];\n                this.svgTooltip.data = templatePoint;\n                this.svgTooltip.template = this.template;\n                this.svgTooltip.controlName = 'Chart';\n                this.svgTooltip.crosshair = false;\n                this.svgTooltip.textStyle = chart.tooltip.textStyle;\n                this.svgTooltip.isNegative = false;\n                this.svgTooltip.clipBounds = clipLocation;\n                this.svgTooltip.arrowPadding = 0;\n                this.svgTooltip.allowHighlight = false;\n                this.svgTooltip.dataBind();\n            }\n        }\n        if (this.control.isReact) {\n            this.control.renderReactTemplates();\n        }\n    };\n    /**\n     * Highlights multiple points in a circular 3D chart series.\n     * This method iterates through a collection of points (assuming they are represented by 'i') and applies the highlight effect to each point.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.highlightPoints = function () {\n        for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.series.isRectSeries && item.series.category === 'Series') {\n                this.highlightPoint(item.series, item.point.index, true);\n            }\n        }\n    };\n    /**\n     * Removes the highlight from a previously highlighted point in a circular 3D chart series.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.removeHighlight = function () {\n        var item;\n        for (var i = 0, len = this.previousPoints.length; i < len; i++) {\n            item = this.previousPoints[i];\n            if (item.series.isRectSeries) {\n                if (item.series.visible) {\n                    this.highlightPoint(item.series, item.point.index, false);\n                }\n                continue;\n            }\n        }\n    };\n    /**\n     * Highlights or un highlights a specific point in a circular 3D chart series.\n     *\n     * @param {CircularChart3DSeries} series - The circular 3D series to which the point belongs.\n     * @param {number} pointIndex - The index of the point to be highlighted or un highlighted.\n     * @param {boolean} highlight - A flag indicating whether to highlight (true) or un highlight (false) the point.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.highlightPoint = function (series, pointIndex, highlight) {\n        var _this = this;\n        if ((this.control.circularChartHighlight3DModule && this.control.highlightMode === 'None') || !this.control.circularChartHighlight3DModule) {\n            var elements = document.querySelectorAll(\"[id*=\\\"region-series-0-point-\" + pointIndex + \"\\\"]\");\n            var pointElements_1 = [];\n            elements.forEach(function (pointElement) {\n                var elementIndex = parseInt(pointElement.id.split('point-')[1], 10);\n                if (elementIndex === pointIndex) {\n                    pointElements_1.push(pointElement);\n                }\n            });\n            var datalabelElement = document.getElementById(this.control.element.id + '-svg-data-label-text-' + pointIndex);\n            var connectorElement = document.getElementById(this.control.element.id + '-datalabel-series-0-connector-' + pointIndex);\n            var shapeElement = document.getElementById(this.control.element.id + '-svg-data-label-series-0-shape-' + pointIndex);\n            if (datalabelElement) {\n                pointElements_1.push(datalabelElement);\n            }\n            if (connectorElement) {\n                pointElements_1.push(connectorElement);\n            }\n            if (shapeElement) {\n                pointElements_1.push(shapeElement);\n            }\n            var seriesElements = document.getElementById(this.element.id + '-svg-chart-3d').children;\n            if (seriesElements) {\n                for (var _i = 0, seriesElements_1 = seriesElements; _i < seriesElements_1.length; _i++) {\n                    var seriesElement = seriesElements_1[_i];\n                    if (seriesElement.parentElement.id === this.control.groupElement.id) {\n                        var selection = seriesElement.hasAttribute('class') ? seriesElement.getAttribute('class').indexOf('_selection_') === -1 : true;\n                        seriesElement.setAttribute('opacity', (highlight && this.control.highlightColor !== 'transparent' && selection ? 0.2 : series.opacity).toString());\n                    }\n                }\n            }\n            if (pointElements_1) {\n                pointElements_1.forEach(function (element) {\n                    if (element.parentElement.id === _this.control.groupElement.id) {\n                        element.setAttribute('opacity', (series.opacity).toString());\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * Fades out the tooltip associated with the provided CircularChart3DPointData.\n     *\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.fadeOut = function () {\n        var svgElement = this.getElement(this.element.id + '_tooltip_svg');\n        var isTooltip = (svgElement && parseInt(svgElement.getAttribute('opacity'), 10) > 0);\n        if (!isTooltip) {\n            this.currentPoints = [];\n            this.removeHighlight();\n            this.previousPoints = [];\n            this.svgTooltip = null;\n            this.control.trigger('animationComplete', {});\n        }\n    };\n    /**\n     * Updates the previous point with additional CircularChart3DPointData.\n     *\n     * @param {CircularChart3DPointData} extraPoints - An array of additional CircularChart3DPointData to update the previous point.\n     * @returns {void}\n     */\n    CircularChartTooltip3D.prototype.updatePreviousPoint = function (extraPoints) {\n        if (extraPoints) {\n            this.currentPoints = this.currentPoints.concat(extraPoints);\n        }\n        this.previousPoints = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.currentPoints, null, true);\n    };\n    /**\n     * Finds and returns an array of colors from the current points.\n     *\n     * @returns {string[]} - An array of color strings.\n     */\n    CircularChartTooltip3D.prototype.findPalette = function () {\n        var colors = [];\n        for (var _i = 0, _a = this.currentPoints; _i < _a.length; _i++) {\n            var data = _a[_i];\n            colors.push(data.point.color);\n        }\n        return colors;\n    };\n    /**\n     * Gets the module name for the circular 3D tooltip.\n     *\n     * @returns {string} - The module name.\n     */\n    CircularChartTooltip3D.prototype.getModuleName = function () {\n        return 'CircularChartTooltip3D';\n    };\n    /**\n     * Destroys the circular 3D tooltip module.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartTooltip3D.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return CircularChartTooltip3D;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/tooltip.js?");

/***/ })

}]);