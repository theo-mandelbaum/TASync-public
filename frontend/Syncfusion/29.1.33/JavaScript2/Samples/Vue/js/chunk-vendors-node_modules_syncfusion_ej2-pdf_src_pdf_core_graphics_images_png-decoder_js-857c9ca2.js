"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_graphics_images_png-decoder_js-857c9ca2"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/png-decoder.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/png-decoder.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _PngDecoder: () => (/* binding */ _PngDecoder)\n/* harmony export */ });\n/* harmony import */ var _image_decoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image-decoder */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/image-decoder.js\");\n/* harmony import */ var _base_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../base-stream */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/base-stream.js\");\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _compression_deflate_stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../compression/deflate-stream */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/compression/deflate-stream.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n/* eslint-disable */\nvar _PngDecoder = /** @class */ (function (_super) {\n    __extends(_PngDecoder, _super);\n    /**\n     * Initializes a new instance of the `_PngDecoder` class.\n     *\n     * @private\n     * @param {Uint8Array} stream byte array.\n     */\n    function _PngDecoder(stream) {\n        var _this = _super.call(this) || this;\n        _this._stream = stream;\n        _this._format = _enumerator__WEBPACK_IMPORTED_MODULE_3__._ImageFormat.png;\n        _this._isRedGreenBlue = false;\n        _this._isDecode = false;\n        _this._shades = false;\n        _this._ideateDecode = true;\n        _this._colors = 0;\n        _this._bitsPerPixel = 0;\n        _this._idatLength = 0;\n        _this._inputBands = 0;\n        _this._position = 8;\n        _this._initialize();\n        return _this;\n    }\n    _PngDecoder.prototype._initialize = function () {\n        var header;\n        var result = this._hasValidChunkType(header);\n        while (result.hasValidChunk) {\n            header = result.type;\n            switch (header) {\n                case _PngChunkTypes.iHDR:\n                    this._readHeader();\n                    break;\n                case _PngChunkTypes.iDAT:\n                    this._readImageData();\n                    break;\n                case _PngChunkTypes.sRGB:\n                    this._isRedGreenBlue = true;\n                    this._ignoreChunk();\n                    break;\n                case _PngChunkTypes.pLTE:\n                    this._readPhotoPlate();\n                    break;\n                case _PngChunkTypes.iEND:\n                    this._decodeImageData();\n                    break;\n                case _PngChunkTypes.tRNS:\n                    this._readTransparency();\n                    break;\n                case _PngChunkTypes.tEXt:\n                case _PngChunkTypes.iTXt:\n                case _PngChunkTypes.zTXt:\n                case _PngChunkTypes.hIST:\n                case _PngChunkTypes.sBIT:\n                case _PngChunkTypes.iCCP:\n                case _PngChunkTypes.pHYs:\n                case _PngChunkTypes.tIME:\n                case _PngChunkTypes.bKGD:\n                case _PngChunkTypes.gAMA:\n                case _PngChunkTypes.cHRM:\n                case _PngChunkTypes.unknown:\n                    this._ignoreChunk();\n                    break;\n                default:\n                    break;\n            }\n            result = this._hasValidChunkType(header);\n        }\n    };\n    _PngDecoder.prototype._hasValidChunkType = function (type) {\n        type = _PngChunkTypes.unknown;\n        if (this._position + 8 <= this._stream.byteLength) {\n            this._currentChunkLength = this._readUnsigned32(this._position);\n            this._seek(4);\n            var chunk = this._readString(4);\n            var header = this._getChunkType(chunk);\n            if (typeof header !== 'undefined' && header !== null) {\n                type = header;\n                return { 'type': type, 'hasValidChunk': true };\n            }\n            if (this._stream.byteLength === this._position) {\n                return { 'type': type, 'hasValidChunk': false };\n            }\n            else {\n                return { 'type': type, 'hasValidChunk': true };\n            }\n        }\n        else {\n            return { 'type': type, 'hasValidChunk': false };\n        }\n    };\n    _PngDecoder.prototype._ignoreChunk = function () {\n        if (this._currentChunkLength > 0) {\n            this._seek(this._currentChunkLength + 4);\n        }\n    };\n    _PngDecoder.prototype._readHeader = function () {\n        this._header = new _PngHeader();\n        this._header._width = this._readUnsigned32(this._position);\n        this._seek(4);\n        this._header._height = this._readUnsigned32(this._position);\n        this._seek(4);\n        this._header._bitDepth = this._readByte();\n        this._header._colorType = this._readByte();\n        this._header._compression = this._readByte();\n        this._header._filter = this._getFilterType(this._readByte());\n        this._header._interlace = this._readByte();\n        this._colors = (this._header._colorType === 3 || (this._header._colorType & 2) === 0) ? 1 : 3;\n        this._width = this._header._width;\n        this._height = this._header._height;\n        this._bitsPerComponent = this._header._bitDepth;\n        this._setBitsPerPixel();\n        this._seek(4);\n    };\n    _PngDecoder.prototype._setBitsPerPixel = function () {\n        this._bitsPerPixel = this._header._bitDepth === 16 ? 2 : 1;\n        if (this._header._colorType === 0) {\n            this._idatLength = Number.parseInt(((this._bitsPerComponent * this._width + 7) / 8).toString(), 10) * this._height;\n            this._inputBands = 1;\n        }\n        else if (this._header._colorType === 2) {\n            this._idatLength = this._width * this._height * 3;\n            this._inputBands = 3;\n            this._bitsPerPixel *= 3;\n        }\n        else if (this._header._colorType === 3) {\n            if (this._header._interlace === 1 || this._header._interlace === 0) {\n                this._idatLength = Number.parseInt(((this._header._bitDepth * this._width + 7) / 8).toString(), 10) * this._height;\n            }\n            this._inputBands = 1;\n            this._bitsPerPixel = 1;\n        }\n        else if (this._header._colorType === 4) {\n            this._idatLength = this._width * this._height;\n            this._inputBands = 2;\n            this._bitsPerPixel *= 2;\n        }\n        else if (this._header._colorType === 6) {\n            this._idatLength = this._width * 3 * this._height;\n            this._inputBands = 4;\n            this._bitsPerPixel *= 4;\n        }\n    };\n    _PngDecoder.prototype._readImageData = function () {\n        if (!this._encodedStream || this._encodedStream.length === 0) {\n            this._encodedStream = [];\n        }\n        if (this._currentChunkLength <= this._stream.byteLength && this._stream.byteLength - this._position >= this._currentChunkLength) {\n            for (var i = 0; i < this._currentChunkLength; i++) {\n                this._encodedStream.push(this._readByte());\n            }\n        }\n        this._seek(4);\n    };\n    _PngDecoder.prototype._readPhotoPlate = function () {\n        if (this._header._colorType === 3) {\n            this._colorSpace = [];\n            this._colorSpace.push(_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('Indexed'));\n            this._colorSpace.push(this._getPngColorSpace());\n            this._colorSpace.push(this._currentChunkLength / 3 - 1);\n            var buffer = new Uint8Array(this._currentChunkLength);\n            this._read(buffer, 0, this._currentChunkLength);\n            this._colorSpace.push((0,_utils__WEBPACK_IMPORTED_MODULE_4__._bytesToString)(buffer));\n            this._seek(4);\n        }\n        else {\n            this._ignoreChunk();\n        }\n    };\n    _PngDecoder.prototype._readTransparency = function () {\n        if (this._header._colorType === 3) {\n            var alpha = new Uint8Array(this._currentChunkLength);\n            this._read(alpha, 0, this._currentChunkLength);\n            this._seek(4);\n            this._alpha = [];\n            for (var i = 0; i < alpha.length; i++) {\n                this._alpha.push(alpha[Number.parseInt(i.toString(), 10)]);\n                var sh = alpha[Number.parseInt(i.toString(), 10)] & 0xff;\n                if (sh !== 0 && sh !== 255) {\n                    this._shades = true;\n                }\n            }\n        }\n        else {\n            this._ignoreChunk();\n        }\n    };\n    _PngDecoder.prototype._getPngColorSpace = function () {\n        if (!this._isRedGreenBlue) {\n            if ((this._header._colorType & 2) === 0) {\n                return _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('DeviceGray');\n            }\n            else {\n                return _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('DeviceRGB');\n            }\n        }\n        else {\n            var colorspace = [];\n            var calRGB = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n            var whitePoint = [1, 1, 1];\n            var gammaArray = [2.2, 2.2, 2.2];\n            calRGB.set('Gamma', gammaArray);\n            if (this._isRedGreenBlue) {\n                var wpX = 0.3127;\n                var wpY = 0.329;\n                var redX = 0.64;\n                var redY = 0.33;\n                var greenX = 0.3;\n                var greenY = 0.6;\n                var bX = 0.15;\n                var bY = 0.06;\n                var t = wpY * ((greenX - bX) * redY - (redX - bX) * greenY + (redX - greenX) * bY);\n                var alphaY = redY * ((greenX - bX) * wpY - (wpX - bX) * greenY + (wpX - greenX) * bY) / t;\n                var alphaX = alphaY * redX / redY;\n                var alphaZ = alphaY * ((1 - redX) / redY - 1);\n                var blueY = -greenY * ((redX - bX) * wpY - (wpX - bX) * redY + (wpX - redX) * bY) / t;\n                var blueX = blueY * greenX / greenY;\n                var blueZ = blueY * ((1 - greenX) / greenY - 1);\n                var colorY = bY * ((redX - greenX) * wpY - (wpX - greenX) * wpY + (wpX - redX) * greenY) / t;\n                var colorX = colorY * bX / bY;\n                var colorZ = colorY * ((1 - bX) / bY - 1);\n                var whiteX = alphaX + blueX + colorX;\n                var whiteY = 1;\n                var whiteZ = alphaZ + blueZ + colorZ;\n                whitePoint = [whiteX, whiteY, whiteZ];\n                calRGB.set('Matrix', [alphaX, alphaY, alphaZ, blueX, blueY, blueZ, colorX, colorY, colorZ]);\n            }\n            calRGB.set('WhitePoint', whitePoint);\n            colorspace.push(_pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('CalRGB'));\n            colorspace.push(calRGB);\n            return colorspace;\n        }\n    };\n    _PngDecoder.prototype._decodeImageData = function () {\n        var header = this._header;\n        this._isDecode = (header._interlace === 1) || (header._bitDepth === 16) || ((header._colorType & 4) !== 0) || this._shades;\n        if (this._isDecode) {\n            if ((header._colorType & 4) !== 0 || this._shades) {\n                this._maskData = Array(this._width * this._height).fill(0);\n            }\n            if (this._encodedStream) {\n                this._dataStream = this._getDeflatedData(this._encodedStream);\n                this._dataStreamOffset = 0;\n            }\n            if (this._idatLength > 0) {\n                this._decodedImageData = Array(this._idatLength).fill(0);\n            }\n            this._readDecodeData();\n            if (this._decodedImageData && this._decodedImageData.length === 0 && this._shades) {\n                this._ideateDecode = false;\n                this._decodedImageData = this._encodedStream;\n            }\n        }\n        else {\n            this._ideateDecode = false;\n            this._decodedImageData = this._encodedStream;\n        }\n    };\n    _PngDecoder.prototype._getDeflatedData = function (data) {\n        var idatData = data.slice(2, data.length - 4);\n        var deflateStream = new _compression_deflate_stream__WEBPACK_IMPORTED_MODULE_5__._DeflateStream(idatData, 0, true);\n        var buffer = Array(4096).fill(0);\n        var numRead = 0;\n        var outputData = [];\n        do {\n            var result = deflateStream._read(buffer, 0, buffer.length);\n            numRead = result.count;\n            buffer = result.data;\n            for (var i = 0; i < numRead; i++) {\n                outputData.push(buffer[Number.parseInt(i.toString(), 10)]);\n            }\n        } while (numRead > 0);\n        return outputData;\n    };\n    _PngDecoder.prototype._readDecodeData = function () {\n        if (this._header._interlace !== 1) {\n            this._decodeData(0, 0, 1, 1, this._width, this._height);\n        }\n        else {\n            this._decodeData(0, 0, 8, 8, Math.floor((this._width + 7) / 8), Math.floor((this._height + 7) / 8));\n            this._decodeData(4, 0, 8, 8, Math.floor((this._width + 3) / 8), Math.floor((this._height + 7) / 8));\n            this._decodeData(0, 4, 4, 8, Math.floor((this._width + 3) / 4), Math.floor((this._height + 3) / 8));\n            this._decodeData(2, 0, 4, 4, Math.floor((this._width + 1) / 4), Math.floor((this._height + 3) / 4));\n            this._decodeData(0, 2, 2, 4, Math.floor((this._width + 1) / 2), Math.floor((this._height + 1) / 4));\n            this._decodeData(1, 0, 2, 2, Math.floor(this._width / 2), Math.floor((this._height + 1) / 2));\n            this._decodeData(0, 1, 1, 2, this._width, Math.floor(this._height / 2));\n        }\n    };\n    _PngDecoder.prototype._decodeData = function (xOffset, yOffset, xStep, yStep, width, height) {\n        if ((width === 0) || (height === 0)) {\n            return;\n        }\n        else {\n            var bytesPerRow = Math.floor((this._inputBands * width * this._header._bitDepth + 7) / 8);\n            var current = Array(bytesPerRow).fill(0);\n            var prior = Array(bytesPerRow).fill(0);\n            for (var sourceY = 0, destinationY = yOffset; sourceY < height; sourceY++, destinationY += yStep) {\n                var filter = this._dataStream[this._dataStreamOffset];\n                this._dataStreamOffset = this._dataStreamOffset + 1;\n                this._dataStreamOffset = this._readStream(this._dataStream, this._dataStreamOffset, current, bytesPerRow);\n                switch (this._getFilterType(filter)) {\n                    case _PngFilterTypes.none:\n                        break;\n                    case _PngFilterTypes.sub:\n                        this._decompressSub(current, bytesPerRow, this._bitsPerPixel);\n                        break;\n                    case _PngFilterTypes.up:\n                        this._decompressUp(current, prior, bytesPerRow);\n                        break;\n                    case _PngFilterTypes.average:\n                        this._decompressAverage(current, prior, bytesPerRow, this._bitsPerPixel);\n                        break;\n                    case _PngFilterTypes.paeth:\n                        this._decompressPaeth(current, prior, bytesPerRow, this._bitsPerPixel);\n                        break;\n                    default:\n                        throw new Error('Unknown PNG filter');\n                }\n                this._processPixels(current, xOffset, xStep, destinationY, width);\n                var tmp = prior;\n                prior = current;\n                current = tmp;\n            }\n        }\n    };\n    _PngDecoder.prototype._readStream = function (stream, streamOffset, data, count) {\n        var result = this._read(data, streamOffset, count, stream);\n        data = result.outputBuffer;\n        streamOffset = result.offset;\n        var n = result.length;\n        if (n <= 0) {\n            throw new Error('Insufficient data');\n        }\n        return streamOffset;\n    };\n    _PngDecoder.prototype._decompressSub = function (data, count, bitsPerPixel) {\n        for (var i = bitsPerPixel; i < count; i++) {\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)((data[Number.parseInt(i.toString(), 10)] & 0xff)\n                + (data[i - bitsPerPixel] & 0xff), 8);\n        }\n    };\n    _PngDecoder.prototype._decompressUp = function (data, pData, count) {\n        for (var i = 0; i < count; i++) {\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)((data[Number.parseInt(i.toString(), 10)] & 0xff)\n                + (pData[Number.parseInt(i.toString(), 10)] & 0xff), 8);\n        }\n    };\n    _PngDecoder.prototype._decompressAverage = function (data, pData, count, bitsPerPixel) {\n        var val;\n        var pp;\n        var pr;\n        for (var i = 0; i < bitsPerPixel; i++) {\n            val = data[Number.parseInt(i.toString(), 10)] & 0xff;\n            pr = pData[Number.parseInt(i.toString(), 10)] & 0xff;\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(Math.floor((val) + pr / 2), 8);\n        }\n        for (var i = bitsPerPixel; i < count; i++) {\n            val = data[Number.parseInt(i.toString(), 10)] & 0xff;\n            pp = data[i - bitsPerPixel] & 0xff;\n            pr = pData[Number.parseInt(i.toString(), 10)] & 0xff;\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(Math.floor((val + Math.floor((pp + pr) / 2))), 8);\n        }\n    };\n    _PngDecoder.prototype._decompressPaeth = function (data, pData, count, bitsPerPixel) {\n        var val;\n        var pp;\n        var pr;\n        var prp;\n        for (var i = 0; i < bitsPerPixel; i++) {\n            val = data[Number.parseInt(i.toString(), 10)] & 0xff;\n            pr = pData[Number.parseInt(i.toString(), 10)] & 0xff;\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(val + pr, 8);\n        }\n        for (var i = bitsPerPixel; i < count; i++) {\n            val = data[Number.parseInt(i.toString(), 10)] & 0xff;\n            pp = data[i - bitsPerPixel] & 0xff;\n            pr = pData[Number.parseInt(i.toString(), 10)] & 0xff;\n            prp = pData[i - bitsPerPixel] & 0xff;\n            data[Number.parseInt(i.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)((val + this._paethPredictor(pp, pr, prp)), 8);\n        }\n    };\n    _PngDecoder.prototype._paethPredictor = function (a, b, c) {\n        var p = a + b - c;\n        var pa = Math.abs(p - a);\n        var pb = Math.abs(p - b);\n        var pc = Math.abs(p - c);\n        if ((pa <= pb) && (pa <= pc)) {\n            return a;\n        }\n        else if (pb <= pc) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    };\n    _PngDecoder.prototype._processPixels = function (data, x, step, y, width) {\n        var sourceX = 0;\n        var destX = 0;\n        var size = 0;\n        var pixel = this._getPixel(data);\n        if (this._header._colorType === 0 || this._header._colorType === 3 || this._header._colorType === 4) {\n            size = 1;\n        }\n        else if (this._header._colorType === 2 || this._header._colorType === 6) {\n            size = 3;\n        }\n        if (this._decodedImageData && this._decodedImageData.length > 0) {\n            destX = x;\n            var depth = (this._header._bitDepth === 16) ? 8 : this._header._bitDepth;\n            var yStep = Math.floor((size * width * depth + 7) / 8);\n            for (sourceX = 0; sourceX < width; sourceX++) {\n                this._decodedImageData = this._setPixel(this._decodedImageData, pixel, this._inputBands * sourceX, size, destX, y, this._header._bitDepth, yStep);\n                destX += step;\n            }\n        }\n        var shades = (this._header._colorType & 4) !== 0 || this._shades;\n        if (shades) {\n            if ((this._header._colorType & 4) !== 0) {\n                if (this._header._bitDepth === 16) {\n                    for (var i = 0; i < width; ++i) {\n                        var temp = i * this._inputBands + size;\n                        var unsigned = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(pixel[Number.parseInt(temp.toString(), 10)], 32);\n                        pixel[Number.parseInt(temp.toString(), 10)] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toSigned32)(unsigned >> 8);\n                    }\n                }\n                var yStep = width;\n                destX = x;\n                for (sourceX = 0; sourceX < width; sourceX++) {\n                    this._maskData = this._setPixel(this._maskData, pixel, this._inputBands * sourceX + size, 1, destX, y, 8, yStep);\n                    destX += step;\n                }\n            }\n            else {\n                var yStep = width;\n                var dt = [0];\n                destX = x;\n                for (sourceX = 0; sourceX < width; sourceX++) {\n                    var index = pixel[Number.parseInt(sourceX.toString(), 10)];\n                    if (index < this._alpha.length) {\n                        dt[0] = this._alpha[Number.parseInt(index.toString(), 10)];\n                    }\n                    else {\n                        dt[0] = 255;\n                    }\n                    this._maskData = this._setPixel(this._maskData, dt, 0, 1, destX, y, 8, yStep);\n                    destX += step;\n                }\n            }\n        }\n    };\n    _PngDecoder.prototype._getPixel = function (data) {\n        if (this._header._bitDepth === 8) {\n            var pixel = Array(data.length).fill(0);\n            for (var i = 0; i < pixel.length; ++i) {\n                pixel[Number.parseInt(i.toString(), 10)] = data[Number.parseInt(i.toString(), 10)] & 0xff;\n            }\n            return pixel;\n        }\n        else if (this._header._bitDepth === 16) {\n            var pixel = Array(Math.floor(data.length / 2)).fill(0);\n            for (var i = 0; i < pixel.length; ++i) {\n                pixel[Number.parseInt(i.toString(), 10)] = ((data[i * 2] & 0xff) << 8) + (data[i * 2 + 1] & 0xff);\n            }\n            return pixel;\n        }\n        else {\n            var pixel = Array(Math.floor((data.length * 8) / this._header._bitDepth)).fill(0);\n            var index = 0;\n            var p = Math.floor(8 / this._header._bitDepth);\n            var mask = (1 << this._header._bitDepth) - 1;\n            for (var n = 0; n < data.length; ++n) {\n                for (var i = p - 1; i >= 0; --i) {\n                    var hb = this._header._bitDepth * i;\n                    var d = data[Number.parseInt(n.toString(), 10)];\n                    pixel[index++] = ((hb < 1) ? d : (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toSigned32)((0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(d, 32) >> hb)) & mask;\n                }\n            }\n            return pixel;\n        }\n    };\n    _PngDecoder.prototype._setPixel = function (imageData, data, offset, size, x, y, bitDepth, bpr) {\n        if (bitDepth === 8) {\n            var position = bpr * y + size * x;\n            for (var i = 0; i < size; ++i) {\n                imageData[position + i] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(data[i + offset], 8);\n            }\n        }\n        else if (bitDepth === 16) {\n            var position = bpr * y + size * x;\n            for (var i = 0; i < size; ++i) {\n                imageData[position + i] = (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)((data[i + offset] >> 8), 8);\n            }\n        }\n        else {\n            var position = Math.floor((bpr * y + x) / (8 / bitDepth));\n            var t = data[Number.parseInt(offset.toString(), 10)]\n                << Number.parseInt((8 - bitDepth * (x % (8 / bitDepth)) - bitDepth).toString(), 10);\n            imageData[Number.parseInt(position.toString(), 10)] = imageData[Number.parseInt(position.toString(), 10)] | (0,_utils__WEBPACK_IMPORTED_MODULE_4__._toUnsigned)(t, 8);\n        }\n        return imageData;\n    };\n    _PngDecoder.prototype._getImageDictionary = function () {\n        var data = [];\n        this._imageStream = new _base_stream__WEBPACK_IMPORTED_MODULE_1__._PdfStream(data, new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary());\n        this._imageStream.isImageStream = true;\n        var decodedString = '';\n        for (var i = 0; i < this._decodedImageData.length; i++) {\n            decodedString += String.fromCharCode(this._decodedImageData[Number.parseInt(i.toString(), 10)]);\n        }\n        this._imageStream.data = [decodedString];\n        this._imageStream._isCompress = this._isDecode && this._ideateDecode;\n        var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n        dictionary.set('Type', new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName('XObject'));\n        dictionary.set('Subtype', new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName('Image'));\n        dictionary.set('Width', this._width);\n        dictionary.set('Height', this._height);\n        if (this._bitsPerComponent === 16) {\n            dictionary.set('BitsPerComponent', 8);\n        }\n        else {\n            dictionary.set('BitsPerComponent', this._bitsPerComponent);\n        }\n        if (!this._isDecode || !this._ideateDecode) {\n            dictionary.set('Filter', new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName('FlateDecode'));\n        }\n        if ((this._header._colorType & 2) === 0) {\n            dictionary.set('ColorSpace', _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('DeviceGray'));\n        }\n        else {\n            dictionary.set('ColorSpace', _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('DeviceRGB'));\n        }\n        if (!this._isDecode || this._shades && !this._ideateDecode) {\n            dictionary.set('DecodeParms', this._getDecodeParams());\n        }\n        this._imageStream.dictionary = dictionary;\n        this._imageStream.bytes = new Uint8Array(this._imageStream.data[0].length);\n        for (var i = 0; i < this._imageStream.data[0].length; i++) {\n            this._imageStream.bytes[Number.parseInt(i.toString(), 10)] = this._imageStream.data[0].charCodeAt(i);\n        }\n        this._imageStream.end = this._imageStream.bytes.length;\n        this._imageStream.dictionary._updated = true;\n        this._setMask();\n        return this._imageStream;\n    };\n    _PngDecoder.prototype._setMask = function () {\n        if (this._maskData && this._maskData.length > 0) {\n            this._maskStream = new _base_stream__WEBPACK_IMPORTED_MODULE_1__._PdfStream(this._maskData, new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary());\n            this._maskStream._isCompress = this._isDecode && this._ideateDecode;\n            var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n            dictionary.set('Type', new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName('XObject'));\n            dictionary.set('Subtype', new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName('Image'));\n            dictionary.set('Width', this._width);\n            dictionary.set('Height', this._height);\n            if (this._bitsPerComponent === 16) {\n                dictionary.set('BitsPerComponent', 8);\n            }\n            else {\n                dictionary.set('BitsPerComponent', this._bitsPerComponent);\n            }\n            dictionary.set('ColorSpace', _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfName.get('DeviceGray'));\n            this._maskStream.dictionary = dictionary;\n            this._maskStream.bytes = new Uint8Array(this._maskData);\n            this._maskStream.end = this._maskStream.bytes.length;\n            this._maskStream.dictionary._updated = true;\n        }\n    };\n    _PngDecoder.prototype._getDecodeParams = function () {\n        var decodeParams = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_2__._PdfDictionary();\n        decodeParams.set('Columns', this._width);\n        decodeParams.set('Colors', this._colors);\n        decodeParams.set('Predictor', 15);\n        decodeParams.set('BitsPerComponent', this._bitsPerComponent);\n        return decodeParams;\n    };\n    _PngDecoder.prototype._getChunkType = function (chunk) {\n        switch (chunk) {\n            case 'IHDR':\n                return _PngChunkTypes.iHDR;\n            case 'PLTE':\n                return _PngChunkTypes.pLTE;\n            case 'IDAT':\n                return _PngChunkTypes.iDAT;\n            case 'IEND':\n                return _PngChunkTypes.iEND;\n            case 'bKGD':\n                return _PngChunkTypes.bKGD;\n            case 'cHRM':\n                return _PngChunkTypes.cHRM;\n            case 'gAMA':\n                return _PngChunkTypes.gAMA;\n            case 'hIST':\n                return _PngChunkTypes.hIST;\n            case 'pHYs':\n                return _PngChunkTypes.pHYs;\n            case 'sBIT':\n                return _PngChunkTypes.sBIT;\n            case 'tEXt':\n                return _PngChunkTypes.tEXt;\n            case 'tIME':\n                return _PngChunkTypes.tIME;\n            case 'tRNS':\n                return _PngChunkTypes.tRNS;\n            case 'zTXt':\n                return _PngChunkTypes.zTXt;\n            case 'sRGB':\n                return _PngChunkTypes.sRGB;\n            case 'iCCP':\n                return _PngChunkTypes.iCCP;\n            case 'iTXt':\n                return _PngChunkTypes.iTXt;\n            case 'Unknown':\n                return _PngChunkTypes.unknown;\n            default:\n                return null;\n        }\n    };\n    _PngDecoder.prototype._getFilterType = function (type) {\n        switch (type) {\n            case 1:\n                return _PngFilterTypes.sub;\n            case 2:\n                return _PngFilterTypes.up;\n            case 3:\n                return _PngFilterTypes.average;\n            case 4:\n                return _PngFilterTypes.paeth;\n            default:\n                return _PngFilterTypes.none;\n        }\n    };\n    return _PngDecoder;\n}(_image_decoder__WEBPACK_IMPORTED_MODULE_0__._ImageDecoder));\n\nvar _PngHeader = /** @class */ (function () {\n    function _PngHeader() {\n        this._width = 0;\n        this._height = 0;\n        this._colorType = 0;\n        this._compression = 0;\n        this._bitDepth = 0;\n        this._interlace = 0;\n        this._filter = _PngFilterTypes.none;\n    }\n    return _PngHeader;\n}());\nvar _PngChunkTypes;\n(function (_PngChunkTypes) {\n    _PngChunkTypes[_PngChunkTypes[\"iHDR\"] = 0] = \"iHDR\";\n    _PngChunkTypes[_PngChunkTypes[\"pLTE\"] = 1] = \"pLTE\";\n    _PngChunkTypes[_PngChunkTypes[\"iDAT\"] = 2] = \"iDAT\";\n    _PngChunkTypes[_PngChunkTypes[\"iEND\"] = 3] = \"iEND\";\n    _PngChunkTypes[_PngChunkTypes[\"bKGD\"] = 4] = \"bKGD\";\n    _PngChunkTypes[_PngChunkTypes[\"cHRM\"] = 5] = \"cHRM\";\n    _PngChunkTypes[_PngChunkTypes[\"gAMA\"] = 6] = \"gAMA\";\n    _PngChunkTypes[_PngChunkTypes[\"hIST\"] = 7] = \"hIST\";\n    _PngChunkTypes[_PngChunkTypes[\"pHYs\"] = 8] = \"pHYs\";\n    _PngChunkTypes[_PngChunkTypes[\"sBIT\"] = 9] = \"sBIT\";\n    _PngChunkTypes[_PngChunkTypes[\"tEXt\"] = 10] = \"tEXt\";\n    _PngChunkTypes[_PngChunkTypes[\"tIME\"] = 11] = \"tIME\";\n    _PngChunkTypes[_PngChunkTypes[\"tRNS\"] = 12] = \"tRNS\";\n    _PngChunkTypes[_PngChunkTypes[\"zTXt\"] = 13] = \"zTXt\";\n    _PngChunkTypes[_PngChunkTypes[\"sRGB\"] = 14] = \"sRGB\";\n    _PngChunkTypes[_PngChunkTypes[\"iCCP\"] = 15] = \"iCCP\";\n    _PngChunkTypes[_PngChunkTypes[\"iTXt\"] = 16] = \"iTXt\";\n    _PngChunkTypes[_PngChunkTypes[\"unknown\"] = 17] = \"unknown\";\n})(_PngChunkTypes || (_PngChunkTypes = {}));\nvar _PngFilterTypes;\n(function (_PngFilterTypes) {\n    _PngFilterTypes[_PngFilterTypes[\"none\"] = 0] = \"none\";\n    _PngFilterTypes[_PngFilterTypes[\"sub\"] = 1] = \"sub\";\n    _PngFilterTypes[_PngFilterTypes[\"up\"] = 2] = \"up\";\n    _PngFilterTypes[_PngFilterTypes[\"average\"] = 3] = \"average\";\n    _PngFilterTypes[_PngFilterTypes[\"paeth\"] = 4] = \"paeth\";\n})(_PngFilterTypes || (_PngFilterTypes = {}));\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/graphics/images/png-decoder.js?");

/***/ })

}]);