"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_integrations_data-bind_js-d97398b-38139f07"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/data-bind.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/data-bind.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataBind: () => (/* binding */ DataBind)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n\n\n/**\n * Data binding module\n */\nvar DataBind = /** @class */ (function () {\n    function DataBind(parent) {\n        this.parent = parent;\n        this.requestedInfo = [];\n        this.addEventListener();\n    }\n    DataBind.prototype.addEventListener = function () {\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.updateSheetFromDataSource, this.updateSheetFromDataSourceHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.dataSourceChanged, this.dataSourceChangedHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_2__.dataChanged, this.dataChangedHandler, this);\n        this.parent.on(_index__WEBPACK_IMPORTED_MODULE_3__.triggerDataChange, this.triggerDataChangeHandler, this);\n    };\n    DataBind.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.updateSheetFromDataSource, this.updateSheetFromDataSourceHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.dataSourceChanged, this.dataSourceChangedHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_2__.dataChanged, this.dataChangedHandler);\n            this.parent.off(_index__WEBPACK_IMPORTED_MODULE_3__.triggerDataChange, this.triggerDataChangeHandler);\n        }\n    };\n    /**\n     * Update given data source to sheet.\n     *\n     * @param {Object} args - Specify the args.\n     * @param {ExtendedSheet} args.sheet - Specify the sheet.\n     * @param {number[]} args.indexes - Specify the indexes.\n     * @param {Promise<CellModel>} args.promise - Specify the promise.\n     * @param {number} args.rangeSettingCount - Specify the rangeSettingCount.\n     * @param {string} args.formulaCellRef - Specify the formulaCellRef.\n     * @param {number} args.sheetIndex - Specify the sheetIndex.\n     * @param {boolean} args.loadFullData - Specify whether to load full data or not.\n     * @param {boolean} args.resolveAfterFullDataLoaded - Specify the resolveAfterFullDataLoaded.\n     * @param {Function} args.loadComplete - Specify the callback function that will be invoked once all the data are updated.\n     * @param {boolean} args.loadFromStartCell - Specify the whether to load the data from the range startCell address.\n     * @param {boolean} args.autoDetectFormat - Specify whether to auto detect format based on the cell value.\n     * @param {Function} args.updateDependentCellsCallback - Specify a callback function to update the dependent cells address to refresh\n     * after the data binding.\n     * @returns {void} - Update given data source to sheet.\n     */\n    DataBind.prototype.updateSheetFromDataSourceHandler = function (args) {\n        var _this = this;\n        var cell;\n        var flds;\n        var sCellIdx;\n        var result;\n        var remoteUrl;\n        var isLocal;\n        var dataManager;\n        var requestedRange = [];\n        var sRanges = [];\n        var rowIdx;\n        var colIdx;\n        var deferred = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        var sRowIdx;\n        var sColIdx;\n        var loadedInfo;\n        args.promise = deferred.promise;\n        var startCellIndexes;\n        var autoDetectFormat = args.autoDetectFormat;\n        var autoDetectFormatFn = autoDetectFormat && (0,_index__WEBPACK_IMPORTED_MODULE_3__.getAutoDetectFormatParser)(this.parent);\n        if (args.sheet && args.sheet.ranges.length) {\n            var prevVal_1;\n            var _loop_1 = function (k) {\n                var range = args.sheet.ranges[k];\n                startCellIndexes = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(range.startCell);\n                if (args.loadFromStartCell) {\n                    args.indexes = startCellIndexes;\n                }\n                var sRange = args.indexes[0];\n                var eRange = args.indexes[2];\n                sRowIdx = startCellIndexes[0];\n                dataManager = range.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__.DataManager ? range.dataSource\n                    : range.dataSource ? new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__.DataManager(range.dataSource) : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__.DataManager();\n                remoteUrl = remoteUrl || dataManager.dataSource.url;\n                args.sheet.isLocalData = isLocal || !dataManager.dataSource.url;\n                if (sRowIdx <= sRange) {\n                    sRange = sRange - sRowIdx;\n                }\n                else {\n                    if (sRowIdx <= eRange) {\n                        eRange = eRange - sRowIdx;\n                        sRange = 0;\n                    }\n                    else {\n                        sRange = -1;\n                    }\n                }\n                if (range.showFieldAsHeader && sRange !== 0) {\n                    sRange -= 1;\n                }\n                var isEndReached = false;\n                var insertRowCount = 0;\n                this_1.initRangeInfo(range);\n                var count = this_1.getMaxCount(range);\n                loadedInfo = this_1.getLoadedInfo(sRange, eRange, range);\n                sRange = loadedInfo.unloadedRange[0];\n                eRange = loadedInfo.unloadedRange[1];\n                if (range.info.insertRowRange) {\n                    range.info.insertRowRange.forEach(function (range) {\n                        insertRowCount += ((range[1] - range[0]) + 1);\n                    });\n                    sRange -= insertRowCount;\n                    eRange -= insertRowCount;\n                }\n                if (sRange >= count) {\n                    isEndReached = true;\n                }\n                else if (eRange > count) {\n                    eRange = count;\n                }\n                if (!args.loadComplete) {\n                    this_1.requestedInfo.push({ deferred: deferred, indexes: args.indexes, isNotLoaded: loadedInfo.isNotLoaded });\n                }\n                if (sRange >= 0 && loadedInfo.isNotLoaded && !isEndReached) {\n                    sRanges[k] = sRange;\n                    requestedRange[k] = false;\n                    var fieldsOrder_1;\n                    if (range.fieldsOrder) {\n                        fieldsOrder_1 = [].slice.call(range.fieldsOrder);\n                    }\n                    var query = (range.query ? range.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_0__.Query()).clone();\n                    if (!args.loadFullData) {\n                        query = query.range(sRange, eRange >= count ? eRange : eRange + 1);\n                    }\n                    dataManager.executeQuery(query.requiresCount()).then(function (e) {\n                        if (!_this.parent || _this.parent.isDestroyed) {\n                            return;\n                        }\n                        result = (e.result && e.result.result ? e.result.result : e.result);\n                        sCellIdx = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(range.startCell);\n                        sRowIdx = sCellIdx[0];\n                        sColIdx = sCellIdx[1];\n                        if (result && result.length) {\n                            if (!range.info.count) {\n                                count = e.count;\n                                range.info.count = e.count;\n                            }\n                            flds = range.info.flds || fieldsOrder_1 || Object.keys(result[0]);\n                            if (!range.info.fldLen) {\n                                range.info.fldLen = flds.length;\n                                range.info.flds = flds;\n                            }\n                            if (range.info.insertColumnRange) {\n                                var insertCount_1 = 0;\n                                range.info.insertColumnRange.forEach(function (insertRange) {\n                                    for (var i = insertRange[0]; i <= insertRange[1]; i++) {\n                                        if (i <= sColIdx) {\n                                            flds.splice(0, 0, \"emptyCell\" + insertCount_1);\n                                        }\n                                        else {\n                                            flds.splice(i - sColIdx, 0, \"emptyCell\" + insertCount_1);\n                                        }\n                                        insertCount_1++;\n                                    }\n                                });\n                            }\n                            if (sRanges[k] === 0 && range.showFieldAsHeader) {\n                                rowIdx = sRowIdx + sRanges[k] + insertRowCount;\n                                flds.forEach(function (field, i) {\n                                    cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, sColIdx + i, args.sheet, true);\n                                    if (!cell) {\n                                        args.sheet.rows[sRowIdx + sRanges[k]].cells[sColIdx + i] = field.includes('emptyCell') ? {}\n                                            : { value: field };\n                                    }\n                                    else if (!field.includes('emptyCell')) {\n                                        cell.value = field;\n                                    }\n                                });\n                            }\n                            result.forEach(function (item, i) {\n                                rowIdx = sRowIdx + sRanges[k] + i + (range.showFieldAsHeader ? 1 : 0) + insertRowCount;\n                                flds.forEach(function (field, idx) {\n                                    colIdx = sColIdx + idx;\n                                    cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(rowIdx, colIdx, args.sheet, true);\n                                    if (cell) {\n                                        prevVal_1 = cell.value;\n                                        if (!field.includes('emptyCell')) {\n                                            (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.setCell)(rowIdx, colIdx, args.sheet, _this.getCellDataFromProp(item[field]), true);\n                                        }\n                                    }\n                                    else {\n                                        prevVal_1 = undefined;\n                                        cell = args.sheet.rows[rowIdx].cells[colIdx] =\n                                            field.includes('emptyCell') ? {} : _this.getCellDataFromProp(item[field]);\n                                    }\n                                    if (autoDetectFormat) {\n                                        autoDetectFormatFn(cell);\n                                    }\n                                    if (args.updateDependentCellsCallback && prevVal_1 !== cell.value) {\n                                        args.updateDependentCellsCallback(rowIdx, colIdx);\n                                    }\n                                });\n                            });\n                        }\n                        else {\n                            flds = [];\n                        }\n                        var totalRows;\n                        if ((sRowIdx + (count || e.count)) > 0) {\n                            totalRows = (sRowIdx + (count || e.count) + (range.showFieldAsHeader ? 1 : 0) + insertRowCount) - 1;\n                        }\n                        else {\n                            totalRows = args.sheet.usedRange.rowIndex;\n                        }\n                        var totalCols = sColIdx + flds.length - 1 < 0 ? args.sheet.usedRange.colIndex : sColIdx + flds.length - 1;\n                        if (args.loadFullData) {\n                            eRange = totalRows;\n                        }\n                        var usedRange = { rowIndex: totalRows, colIndex: totalCols };\n                        if (_this.parent.scrollSettings && _this.parent.scrollSettings.isFinite) {\n                            usedRange.rowIndex = totalRows < args.sheet.rowCount ? totalRows : args.sheet.rowCount - 1;\n                            usedRange.colIndex = totalCols < args.sheet.colCount ? totalCols : args.sheet.colCount - 1;\n                        }\n                        if (args.sheet.usedRange.rowIndex < usedRange.rowIndex) {\n                            _this.parent.setSheetPropertyOnMute(args.sheet, 'usedRange', { rowIndex: usedRange.rowIndex, colIndex: args.sheet.usedRange.colIndex });\n                        }\n                        if (args.sheet.usedRange.colIndex < usedRange.colIndex) {\n                            _this.parent.setSheetPropertyOnMute(args.sheet, 'usedRange', { rowIndex: args.sheet.usedRange.rowIndex, colIndex: usedRange.colIndex });\n                        }\n                        if (insertRowCount) {\n                            loadedInfo = _this.getLoadedInfo(sRange, eRange, range);\n                            sRange = loadedInfo.unloadedRange[0];\n                            eRange = loadedInfo.unloadedRange[1];\n                            if (sRange > count) {\n                                loadedInfo.isNotLoaded = false;\n                            }\n                            if (loadedInfo.isNotLoaded) {\n                                if (eRange > count) {\n                                    eRange = count;\n                                }\n                                range.info.loadedRange.push([sRange, eRange]);\n                            }\n                        }\n                        else {\n                            range.info.loadedRange.push([sRange, eRange]);\n                        }\n                        requestedRange[k] = true;\n                        if (requestedRange.indexOf(false) === -1) {\n                            var dataLoading = void 0;\n                            if (eRange + sRowIdx < sRowIdx + range.info.count) {\n                                if (!args.rangeSettingCount) {\n                                    args.rangeSettingCount = [];\n                                }\n                                args.rangeSettingCount.push(k);\n                                dataLoading = true;\n                                //if (remoteUrl) {\n                                var unloadedArgs = {\n                                    sheet: args.sheet, indexes: [0, 0, totalRows, totalCols],\n                                    promise: new Promise(function (resolve) { resolve((function () { })()); }),\n                                    rangeSettingCount: args.rangeSettingCount, loadComplete: args.loadComplete,\n                                    autoDetectFormat: args.autoDetectFormat, resolveAfterFullDataLoaded: args.resolveAfterFullDataLoaded\n                                };\n                                _this.updateSheetFromDataSourceHandler(unloadedArgs);\n                                unloadedArgs.promise.then(function () {\n                                    if (_this.parent.getModuleName() === 'workbook') {\n                                        return;\n                                    }\n                                    args.rangeSettingCount.pop();\n                                    if (!args.rangeSettingCount.length) {\n                                        _this.parent.notify('created', null);\n                                    }\n                                    if (args.formulaCellRef) {\n                                        _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);\n                                    }\n                                    else if (args.loadComplete) {\n                                        args.loadComplete();\n                                    }\n                                });\n                                //}\n                            }\n                            else if (args.formulaCellRef) {\n                                _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);\n                            }\n                            else if (args.loadComplete) {\n                                args.loadComplete();\n                            }\n                            if (!(dataLoading && args.resolveAfterFullDataLoaded)) {\n                                _this.checkResolve(args.indexes);\n                                if (args.resolveAfterFullDataLoaded) {\n                                    _this.checkResolve([0, 0, 0, 0]);\n                                }\n                            }\n                        }\n                    });\n                }\n                else if (k === 0 && requestedRange.indexOf(false) === -1) {\n                    if (args.loadComplete) {\n                        args.loadComplete();\n                    }\n                    this_1.checkResolve(args.indexes);\n                }\n            };\n            var this_1 = this;\n            for (var k = args.sheet.ranges.length - 1; k >= 0; k--) {\n                _loop_1(k);\n            }\n        }\n        else {\n            deferred.resolve();\n        }\n    };\n    DataBind.prototype.notfyFormulaCellRefresh = function (formulaCellRef, sheetIndex) {\n        this.parent.formulaRefCell = null;\n        this.parent.notify(_index__WEBPACK_IMPORTED_MODULE_3__.updateView, { indexes: (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(formulaCellRef), sheetIndex: sheetIndex, refreshing: true });\n    };\n    DataBind.prototype.checkResolve = function (indexes) {\n        var resolved;\n        var isSameRng;\n        var cnt = 0;\n        this.requestedInfo.forEach(function (info, idx) {\n            isSameRng = JSON.stringify(info.indexes) === JSON.stringify(indexes);\n            if (isSameRng || resolved) {\n                if (idx === 0) {\n                    info.deferred.resolve();\n                    cnt++;\n                    resolved = true;\n                }\n                else {\n                    if (resolved && (info.isLoaded || !info.isNotLoaded)) {\n                        info.deferred.resolve();\n                        cnt++;\n                    }\n                    else if (isSameRng && resolved) {\n                        info.deferred.resolve();\n                        cnt++;\n                    }\n                    else if (isSameRng) {\n                        info.isLoaded = true;\n                    }\n                    else {\n                        resolved = false;\n                    }\n                }\n            }\n        });\n        this.requestedInfo.splice(0, cnt);\n    };\n    DataBind.prototype.getCellDataFromProp = function (prop) {\n        var data = {};\n        if (Object.prototype.toString.call(prop) === '[object Object]') {\n            if (prop.formula) {\n                data.formula = prop.formula;\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.isNullOrUndefined)(prop.value)) {\n                if (typeof (prop.value) === 'string') {\n                    if (prop.value.indexOf('http://') === 0 || prop.value.indexOf('https://') === 0 ||\n                        prop.value.indexOf('ftp://') === 0 || prop.value.indexOf('www.') === 0) {\n                        data.hyperlink = prop.value;\n                        data.style = { textDecoration: 'underline', color: '#00e' };\n                    }\n                    else {\n                        data.value = prop.value;\n                    }\n                }\n                else {\n                    data.value = prop.value;\n                }\n            }\n        }\n        else {\n            if ((0,_common_index__WEBPACK_IMPORTED_MODULE_2__.checkIsFormula)(prop)) {\n                data.formula = prop;\n            }\n            else {\n                if (typeof (prop) === 'string') {\n                    if (prop.indexOf('http://') === 0 || prop.indexOf('https://') === 0 ||\n                        prop.indexOf('ftp://') === 0 || prop.indexOf('www.') === 0) {\n                        data.hyperlink = prop;\n                        data.style = { textDecoration: 'underline', color: '#00e' };\n                    }\n                    else {\n                        data.value = prop;\n                    }\n                }\n                else {\n                    data.value = prop;\n                }\n            }\n        }\n        return data;\n    };\n    DataBind.prototype.getLoadedInfo = function (sRange, eRange, range) {\n        var isNotLoaded = true;\n        range.info.loadedRange.forEach(function (range) {\n            if (range[0] <= sRange && sRange <= range[1]) {\n                if (range[0] <= eRange && eRange <= range[1]) {\n                    isNotLoaded = false;\n                }\n                else {\n                    sRange = range[1] + 1;\n                }\n            }\n            else if (range[0] <= eRange && eRange <= range[1]) {\n                eRange = range[0] - 1;\n            }\n        });\n        return { isNotLoaded: isNotLoaded, unloadedRange: [sRange, eRange] };\n    };\n    DataBind.prototype.getMaxCount = function (range) {\n        if (range.query) {\n            var query = range.query.queries;\n            for (var i = 0; i < query.length; i++) {\n                if (query[i].fn === 'onTake') {\n                    return Math.min(query[i].e.nos, range.info.count || query[i].e.nos);\n                }\n            }\n        }\n        return range.info.count;\n    };\n    DataBind.prototype.initRangeInfo = function (range) {\n        if (!range.info) {\n            range.info = { loadedRange: [] };\n        }\n    };\n    /**\n     * Remove old data from sheet.\n     *\n     * @param {Object} args - Specify the args.\n     * @param {number} args.sheetIdx - Specify the sheetIdx.\n     * @param {number} args.rangeIdx - Specify the rangeIdx.\n     * @param {Object[]} args.changedData - Specify the changedData.\n     * @returns {void} - Remove old data from sheet.\n     */\n    DataBind.prototype.dataSourceChangedHandler = function (args) {\n        var _this = this;\n        var row;\n        var sheet = this.parent.sheets[args.sheetIdx];\n        var range = sheet.ranges[args.rangeIdx];\n        if (range && (this.checkRangeHasChanges(sheet, args.rangeIdx) || !range.info)) {\n            var showFieldAsHeader_1 = range.showFieldAsHeader;\n            var indexes_1 = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getCellIndexes)(range.startCell);\n            if (range.info) {\n                range.info.loadedRange.forEach(function (loadedRange) {\n                    for (var i = loadedRange[0]; i <= loadedRange[1] && (i < range.info.count + (showFieldAsHeader_1 ? 1 : 0)); i++) {\n                        row = sheet.rows[i + indexes_1[0]];\n                        if (row) {\n                            for (var j = indexes_1[1]; j < indexes_1[1] + range.info.fldLen; j++) {\n                                if (row.cells && row.cells[j]) {\n                                    delete row.cells[j];\n                                }\n                            }\n                        }\n                    }\n                });\n                range.info = null;\n            }\n            var evtArgs = {\n                sheet: sheet, indexes: [0, 0, sheet.rowCount - 1, sheet.colCount - 1], loadFullData: true,\n                promise: new Promise(function (resolve) { resolve((function () { })()); })\n            };\n            this.updateSheetFromDataSourceHandler(evtArgs);\n            evtArgs.promise.then(function () {\n                _this.parent.trigger('dataSourceChanged', { data: args.changedData, action: 'dataSourceChanged', rangeIndex: args.rangeIdx,\n                    sheetIndex: args.sheetIdx });\n                _this.parent.notify(_index__WEBPACK_IMPORTED_MODULE_3__.updateView, { sheetIndex: args.sheetIdx, checkWrap: true, checkCF: true });\n            });\n        }\n    };\n    DataBind.prototype.checkRangeHasChanges = function (sheet, rangeIdx) {\n        if (this.parent.isAngular) {\n            if (sheet['changedRangeIdx'] === rangeIdx) {\n                delete sheet['changedRangeIdx'];\n                return true;\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Triggers dataSourceChange event when cell data changes\n     *\n     * @param {Object} args - Specify the args.\n     * @param {number} args.sheetIdx - Specify the sheetIdx.\n     * @param {number} args.activeSheetIndex - Specify the activeSheetIndex.\n     * @param {string} args.address - Specify the address.\n     * @param {number} args.startIndex - Specify the startIndex.\n     * @param {number} args.endIndex - Specify the endIndex.\n     * @param {string} args.modelType - Specify the modelType.\n     * @param {RowModel[]} args.deletedModel - Specify the deletedModel.\n     * @param {RowModel[]} args.model - Specify the model.\n     * @param {string} args.insertType - Specify the insertType.\n     * @param {number} args.index - Specify the index.\n     * @param {string} args.type - Specify the type.\n     * @param {boolean} args.isMethod - Specify the isMethod.\n     * @param {string} args.fillRange - Specify the fill range.\n     * @param {string} args.range - Specify the range.\n     * @param {string} args.requestType - Specify the requestType.\n     * @param {Object[]} args.data - Specify the data.\n     * @param {boolean}  args.isDataRequest - Specify the isDataRequest.\n     * @param {string} args.pastedRange - Specify the pasted range.\n     * @param {boolean} args.skipFilterCheck - Specify the skip filter check.\n     * @returns {void} - Triggers dataSourceChange event when cell data changes\n     */\n    DataBind.prototype.dataChangedHandler = function (args) {\n        var _this = this;\n        var changedData = [{}];\n        var action;\n        var cell;\n        var dataRange;\n        var startCell;\n        var inRange;\n        var inRangeCut;\n        var deleteRowDetails;\n        var sheetIdx = args.sheetIdx === undefined ? this.parent.activeSheetIndex : args.sheetIdx;\n        var sheet = this.parent.sheets[sheetIdx];\n        var cellIndices;\n        var cutIndices;\n        sheet.ranges.forEach(function (range, idx) {\n            if (range.dataSource) {\n                var isNewRow = void 0;\n                startCell = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getCellIndexes)(range.startCell);\n                dataRange = startCell.concat([startCell[0] + range.info.count + (range.showFieldAsHeader ? 0 : -1),\n                    startCell[1] + range.info.fldLen - 1]);\n                if (args.modelType === 'Row' || args.modelType === 'Column') {\n                    if (args.modelType === 'Column') {\n                        if (args.insertType) {\n                            inRange = dataRange[1] < args.index && dataRange[3] >= args.index;\n                            cellIndices = [args.index];\n                            if (!inRange) {\n                                if ((dataRange[3] + 1 === args.index && args.insertType === 'after')) {\n                                    args.model.forEach(function () {\n                                        range.info.flds.splice(args.index - startCell[1], 0, '');\n                                    });\n                                    range.info.fldLen += args.model.length;\n                                }\n                                else if (dataRange[1] >= args.index) {\n                                    range.startCell = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getCellAddress)(startCell[0], startCell[1] + args.model.length);\n                                }\n                            }\n                            else {\n                                args.model.forEach(function () {\n                                    range.info.flds.splice(args.index - startCell[1], 0, '');\n                                });\n                                range.info.fldLen += args.model.length;\n                            }\n                        }\n                        else {\n                            inRange = dataRange[1] <= args.startIndex && dataRange[3] >= args.startIndex;\n                            if (inRange) {\n                                for (var i = args.startIndex; i <= args.endIndex; i++) {\n                                    if (i <= dataRange[3]) {\n                                        range.info.flds.splice(args.startIndex, 1);\n                                        range.info.fldLen -= 1;\n                                    }\n                                }\n                            }\n                        }\n                        return;\n                    }\n                    else {\n                        if (args.insertType) {\n                            inRange = ((!range.showFieldAsHeader && (args.insertType === 'above' || args.isMethod)) ? dataRange[0] <=\n                                args.index : dataRange[0] < args.index) && dataRange[2] >= args.index;\n                            cellIndices = [args.index];\n                            if (!inRange) {\n                                if ((dataRange[2] + 1 === args.index && args.insertType === 'below')) {\n                                    isNewRow = true;\n                                    range.info.count += args.model.length;\n                                }\n                                else if (dataRange[0] >= args.index) {\n                                    range.startCell = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getCellAddress)(startCell[0] + args.model.length, startCell[1]);\n                                }\n                            }\n                            else {\n                                isNewRow = true;\n                                range.info.count += args.model.length;\n                            }\n                            if (args.isMethod) {\n                                return;\n                            }\n                        }\n                        else {\n                            inRange = dataRange[0] <= args.startIndex && dataRange[2] >= args.startIndex;\n                            if (args.isDataRequest) {\n                                cellIndices = [args.startIndex, dataRange[1], args.startIndex, dataRange[1]];\n                            }\n                            else {\n                                action = 'delete';\n                            }\n                        }\n                    }\n                }\n                else {\n                    var argsAddress = args.address || args.range || args.fillRange;\n                    cellIndices = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getRangeIndexes)(args.requestType && args.requestType.toLowerCase().includes('paste') ? args.pastedRange.substring(args.pastedRange.lastIndexOf('!') + 1) :\n                        args.sheetIdx > -1 ? args.address : argsAddress.substring(argsAddress.lastIndexOf('!') + 1));\n                    var dataRangeIndices = [range.showFieldAsHeader ? dataRange[0] + 1 : dataRange[0]].concat(dataRange.slice(1, 4));\n                    if (range.showFieldAsHeader && cellIndices[0] === startCell[0]) {\n                        for (var i = cellIndices[1]; i <= cellIndices[3]; i++) {\n                            if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {\n                                range.info.flds[i - startCell[1]] = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(startCell[0], i, sheet, false, true).value || '';\n                            }\n                        }\n                    }\n                    inRange = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isInRange)(dataRangeIndices, cellIndices, true);\n                    if (args.requestType === 'paste' && args.copiedInfo.isCut) {\n                        cutIndices = [].slice.call(args.copiedInfo.range);\n                        if (range.showFieldAsHeader && cutIndices[0] === startCell[0]) {\n                            for (var i = cutIndices[1]; i <= cutIndices[3]; i++) {\n                                if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {\n                                    range.info.flds[i - startCell[1]] = '';\n                                }\n                            }\n                            inRange = false;\n                        }\n                        inRangeCut = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.isInRange)(dataRangeIndices, cutIndices, true);\n                    }\n                }\n                if (inRange || isNewRow || inRangeCut) {\n                    if (args.modelType === 'Row' && !args.insertType && !args.isDataRequest) {\n                        args.deletedModel.forEach(function (row, rowIdx) {\n                            changedData[rowIdx] = {};\n                            range.info.flds.forEach(function (fld, idx) {\n                                if (row.cells) {\n                                    cell = row.cells[startCell[1] + idx];\n                                    changedData[rowIdx][\"\" + fld] = _this.getFormattedValue(cell);\n                                }\n                                else {\n                                    changedData[rowIdx][\"\" + fld] = null;\n                                }\n                            });\n                            range.info.count -= 1;\n                        });\n                        if (args.isMethod) {\n                            return;\n                        }\n                        deleteRowDetails = { count: args.deletedModel.length, index: args.endIndex };\n                    }\n                    else {\n                        action = isNewRow ? 'add' : 'edit';\n                        var addedCutData_1 = 0;\n                        if (inRangeCut) {\n                            addedCutData_1 = cutIndices[2] - cutIndices[0] + 1;\n                            var _loop_2 = function (i) {\n                                changedData[i] = {};\n                                range.info.flds.forEach(function (fld, idx) {\n                                    if (fld) {\n                                        cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(cutIndices[0] + i, startCell[1] + idx, sheet);\n                                        changedData[i][\"\" + fld] = _this.getFormattedValue(cell);\n                                    }\n                                });\n                            };\n                            for (var i = 0; i < addedCutData_1; i++) {\n                                _loop_2(i);\n                            }\n                        }\n                        if (inRange || isNewRow) {\n                            var filterCheck = !args.isDataRequest && !inRangeCut && !isNewRow && !args.skipFilterCheck;\n                            var _loop_3 = function (i, count) {\n                                if (filterCheck && (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.isFilterHidden)(sheet, cellIndices[0] + i)) {\n                                    return out_count_1 = count, \"continue\";\n                                }\n                                changedData[count + addedCutData_1] = {};\n                                range.info.flds.forEach(function (fld, idx) {\n                                    if (fld) {\n                                        cell = (0,_base_index__WEBPACK_IMPORTED_MODULE_1__.getCell)(cellIndices[0] + i, startCell[1] + idx, sheet);\n                                        changedData[count + addedCutData_1][\"\" + fld] = _this.getFormattedValue(cell);\n                                    }\n                                });\n                                count++;\n                                out_count_1 = count;\n                            };\n                            var out_count_1;\n                            for (var i = 0, count = 0; i < (isNewRow ? args.model.length : (cellIndices[2] - cellIndices[0])\n                                + 1 || 1); i++) {\n                                _loop_3(i, count);\n                                count = out_count_1;\n                            }\n                        }\n                    }\n                    if (args.isDataRequest) {\n                        args.data = changedData;\n                    }\n                    else {\n                        _this.parent.trigger('dataSourceChanged', { data: changedData, action: action, rangeIndex: idx, sheetIndex: sheetIdx });\n                    }\n                }\n                else if (deleteRowDetails && deleteRowDetails.count && dataRange[0] > deleteRowDetails.index) {\n                    range.startCell = (0,_common_index__WEBPACK_IMPORTED_MODULE_2__.getCellAddress)(startCell[0] - deleteRowDetails.count, startCell[1]);\n                }\n            }\n        });\n    };\n    DataBind.prototype.getFormattedValue = function (cell) {\n        var value = this.parent.getDisplayText(cell);\n        if (value === '') {\n            return null;\n        }\n        else if (cell && !cell.format && typeof cell.value === 'number') {\n            return cell.value;\n        }\n        return value;\n    };\n    DataBind.prototype.triggerDataChangeHandler = function (args) {\n        var dataChangingActions = ['insert', 'delete', 'edit', 'cellDelete', 'cellSave', 'autofill', 'clipboard', 'clear'];\n        var triggerDataChange = true;\n        if ((args.action === 'delete' || args.action === 'insert') && ['Sheet'].indexOf(args.eventArgs.modelType) > -1) {\n            triggerDataChange = false;\n        }\n        else if (args.action === 'clear' && ['Clear Formats', 'Clear Hyperlinks'].indexOf(args.eventArgs.type) > -1) {\n            triggerDataChange = false;\n        }\n        else if (args.action === 'clipboard' && args.eventArgs.requestType === 'Formats') {\n            triggerDataChange = false;\n        }\n        if (triggerDataChange && dataChangingActions.indexOf(args.action) > -1) {\n            var evtArgs = void 0;\n            if (args.isUndo && (args.action === 'delete' || args.action === 'insert')) {\n                evtArgs = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_4__.extend)({}, args.eventArgs);\n                if (args.action === 'delete') {\n                    evtArgs.index = evtArgs.startIndex;\n                    evtArgs.model = evtArgs.deletedModel;\n                    evtArgs.insertType = 'below';\n                }\n                else {\n                    evtArgs.startIndex = evtArgs.index;\n                    evtArgs.endIndex = args.eventArgs.index + args.eventArgs.model.length - 1;\n                    evtArgs.deletedModel = evtArgs.model;\n                    delete evtArgs.insertType;\n                }\n            }\n            else {\n                evtArgs = args.eventArgs;\n            }\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_2__.dataChanged, evtArgs);\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} - Get the module name.\n     * @private\n     */\n    DataBind.prototype.getModuleName = function () {\n        return 'dataBind';\n    };\n    /**\n     * Destroys the Data binding module.\n     *\n     * @returns {void} - Destroys the Data binding module.\n     */\n    DataBind.prototype.destroy = function () {\n        this.removeEventListener();\n        this.parent = null;\n        this.requestedInfo = [];\n    };\n    return DataBind;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/data-bind.js?");

/***/ })

}]);