"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_base_pdfviewer-base_js-d7402b22"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-base.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-base.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfViewerBase: () => (/* binding */ PdfViewerBase)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _navigation_pane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation-pane */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/navigation-pane.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-drawings */ \"./node_modules/@syncfusion/ej2-drawings/index.js\");\n/* harmony import */ var _drawing_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../drawing/tools */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/tools.js\");\n/* harmony import */ var _drawing_selector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../drawing/selector */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/selector.js\");\n/* harmony import */ var _drawing_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../drawing/action */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/action.js\");\n/* harmony import */ var _drawing_dom_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../drawing/dom-util */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/dom-util.js\");\n/* harmony import */ var _drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../drawing/drawing-util */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/drawing/drawing-util.js\");\n/* harmony import */ var _blazor_context_menu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./blazor-context-menu */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/blazor-context-menu.js\");\n/* harmony import */ var _spinner__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./spinner */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/spinner.js\");\n/* harmony import */ var _blazor_ui_adaptor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./blazor-ui-adaptor */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/blazor-ui-adaptor.js\");\n/* harmony import */ var _pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar PdfViewerBase = /** @class */ (function () {\n    /**\n     * Initialize the constructor of PDFViewerBase\n     *\n     * @param { PdfViewer } viewer - Specified PdfViewer class.\n     */\n    function PdfViewerBase(viewer) {\n        var _this = this;\n        /**\n         * @private\n         */\n        this.hyperlinkAndLinkAnnotation = {};\n        /**\n         * @private\n         */\n        this.pageTextDetails = {};\n        /**\n         * @private\n         */\n        this.pageImageDetails = {};\n        /**\n         * @private\n         */\n        this.pageSize = [];\n        /**\n         * @private\n         */\n        this.existingFieldImport = true;\n        /**\n         * @private\n         */\n        this.pageCount = 0;\n        /**\n         * @private\n         */\n        this.customZoomValues = [];\n        /**\n         * @private\n         */\n        this.isReRenderRequired = true;\n        /**\n         * @private\n         */\n        this.currentPageNumber = 0;\n        this.initialZoomValue = {};\n        /**\n         * @private\n         */\n        this.activeElements = new _drawing_action__WEBPACK_IMPORTED_MODULE_8__.ActiveElements();\n        /**\n         * @private\n         */\n        this.mouseDownEvent = null;\n        /**\n         *\n         * @private\n         */\n        this.pngData = [];\n        /**\n         * @private\n         */\n        this.isDocumentLoaded = false;\n        /**\n         * @private\n         */\n        this.renderedPagesList = [];\n        /**\n         * @private\n         */\n        this.pageGap = 8;\n        /**\n         * @private\n         */\n        this.signatureAdded = false;\n        /**\n         * @private\n         */\n        this.isSignInitialClick = false;\n        /**\n         * @private\n         */\n        this.isFreeTextSelected = false;\n        this.pageLeft = 5;\n        this.sessionLimit = 1000;\n        this.pageStopValue = 300;\n        /**\n         * @private\n         */\n        this.toolbarHeight = 56;\n        this.pageLimit = 0;\n        this.previousPage = 0;\n        this.isViewerMouseDown = false;\n        this.isViewerMouseWheel = false;\n        this.scrollPosition = 0;\n        this.sessionStorage = [];\n        /**\n         * @private\n         */\n        this.isLoadedFormFieldAdded = false;\n        this.isInkAnnot = false;\n        this.modifiedPageIndex = [];\n        this.pointerCount = 0;\n        this.pointersForTouch = [];\n        /**\n         * @private\n         */\n        this.isPasswordAvailable = false;\n        /**\n         * @private\n         */\n        this.isBounds = false;\n        /**\n         * @private\n         */\n        this.isImportDoc = false;\n        /**\n         * @private\n         */\n        this.passwordData = '';\n        /**\n         * @private\n         */\n        this.reRenderedCount = 0;\n        this.mouseX = 0;\n        this.mouseY = 0;\n        /**\n         * @private\n         */\n        this.mouseLeft = 0;\n        /**\n         * @private\n         */\n        this.mouseTop = 0;\n        this.touchClientX = 0;\n        this.touchClientY = 0;\n        this.previousTime = 0;\n        this.currentTime = 0;\n        this.isTouchScrolled = false;\n        this.isgetFocused = false;\n        this.isLongTouchPropagated = false;\n        this.longTouchTimer = null;\n        this.isViewerContainerDoubleClick = false;\n        this.dblClickTimer = null;\n        /**\n         * @private\n         */\n        this.pinchZoomStorage = [];\n        /**\n         * @private\n         */\n        this.isTextSelectionDisabled = false;\n        /**\n         * @private\n         */\n        this.isPanMode = false;\n        this.dragX = 0;\n        this.dragY = 0;\n        this.isScrollbarMouseDown = false;\n        this.scrollX = 0;\n        this.scrollY = 0;\n        this.ispageMoved = false;\n        this.isThumb = false;\n        this.isTapHidden = false;\n        this.singleTapTimer = null;\n        this.tapCount = 0;\n        this.inputTapCount = 0;\n        /**\n         * @private\n         */\n        this.isInitialLoaded = false;\n        this.annotationPageList = [];\n        this.importPageList = [];\n        /**\n         * @private\n         */\n        this.isImportAction = false;\n        this.isImportedAnnotation = false;\n        /**\n         * @private\n         */\n        this.isAnnotationCollectionRemoved = false;\n        /**\n         * @private\n         */\n        this.tool = null;\n        this.action = 'Select';\n        /**\n         * @private\n         */\n        this.eventArgs = null;\n        /**\n         * @private\n         */\n        this.inAction = false;\n        /**\n         * @private\n         */\n        this.isMouseDown = false;\n        /**\n         * @private\n         */\n        this.isStampMouseDown = false;\n        /**\n         * @private\n         */\n        this.stampAdded = false;\n        /**\n         * @private\n         */\n        this.customStampCount = 0;\n        /**\n         * @private\n         */\n        this.isDynamicStamp = false;\n        /**\n         * @private\n         */\n        this.isMixedSizeDocument = false;\n        /**\n         * @private\n         */\n        this.highestWidth = 0;\n        /**\n         * @private\n         */\n        this.highestHeight = 0;\n        /**\n         * @private\n         */\n        this.customStampCollection = [];\n        /**\n         * @private\n         */\n        this.isAlreadyAdded = false;\n        /**\n         * @private\n         */\n        this.isWebkitMobile = false;\n        /**\n         * @private\n         */\n        this.isFreeTextContextMenu = false;\n        /**\n         * @private\n         */\n        this.isSelection = false;\n        /**\n         * @private\n         */\n        this.isAddAnnotation = false;\n        /**\n         * @private\n         */\n        this.annotationComments = null;\n        /**\n         * @private\n         */\n        this.isToolbarSignClicked = false;\n        /**\n         * @private\n         */\n        this.signatureCount = 0;\n        /**\n         * @private\n         */\n        this.isSignatureAdded = false;\n        /**\n         * @private\n         */\n        this.isNewSignatureAdded = false;\n        /**\n         * @private\n         */\n        this.isInitialPageMode = false;\n        /**\n         * @private\n         */\n        this.documentAnnotationCollections = null;\n        /**\n         * @private\n         */\n        this.annotationRenderredList = [];\n        /**\n         * @private\n         */\n        this.annotationStorage = {};\n        /**\n         * @private\n         */\n        this.formFieldStorage = {};\n        /**\n         * @private\n         */\n        this.isStorageExceed = false;\n        /**\n         * @private\n         */\n        this.isFormStorageExceed = false;\n        /**\n         * @private\n         */\n        this.isNewStamp = false;\n        /**\n         * @private\n         */\n        this.downloadCollections = {};\n        /**\n         * @private\n         */\n        this.isAnnotationAdded = false;\n        /**\n         * @private\n         */\n        this.annotationEvent = null;\n        /**\n         * @private\n         */\n        this.isAnnotationDrawn = false;\n        /**\n         * @private\n         */\n        this.isAnnotationSelect = false;\n        /**\n         * @private\n         */\n        this.isAnnotationMouseDown = false;\n        /**\n         * @private\n         */\n        this.isAnnotationMouseMove = false;\n        /**\n         * @private\n         */\n        this.validateForm = false;\n        /**\n         * @private\n         */\n        this.isMinimumZoom = false;\n        /**\n         * @private\n         */\n        this.documentLoaded = false;\n        this.tileRenderCount = 0;\n        this.tileRequestCount = 0;\n        /**\n         * @private\n         */\n        this.isTileImageRendered = false;\n        this.isDataExits = false;\n        this.requestLists = [];\n        this.tilerequestLists = [];\n        this.textrequestLists = [];\n        this.renderThumbnailImages = false;\n        /**\n         * @private\n         */\n        this.pageRenderCount = 2;\n        /**\n         * @private\n         */\n        this.isInkAdded = false;\n        /**\n         * @private\n         */\n        this.inkCount = 0;\n        /**\n         * @private\n         */\n        this.isAddedSignClicked = false;\n        /**\n         * @private\n         */\n        this.imageCount = 0;\n        /**\n         * @private\n         */\n        this.isMousedOver = false;\n        /**\n         * @private\n         */\n        this.isFormFieldSelect = false;\n        /**\n         * @private\n         */\n        this.isFormFieldMouseDown = false;\n        /**\n         * @private\n         */\n        this.isFormFieldMouseMove = false;\n        /**\n         * @private\n         */\n        this.isFormFieldMousedOver = false;\n        /**\n         * @private\n         */\n        this.isPassword = false;\n        /**\n         * @private\n         */\n        this.digitalSignaturePages = [];\n        this.isDigitalSignaturePresent = false;\n        this.isDrawnCompletely = false;\n        /**\n         * @private\n         */\n        this.isAddComment = false;\n        /**\n         * @private\n         */\n        this.drawSignatureWithTool = false;\n        /**\n         * @private\n         */\n        this.formFieldCollection = [];\n        /**\n         * @private\n         */\n        this.requestCollection = [];\n        /**\n         * @private\n         */\n        this.nonFillableFields = {};\n        /**\n         * @private\n         */\n        this.isInitialField = false;\n        /**\n         * @private\n         */\n        this.isTouchDesignerMode = false;\n        /**\n         * @private\n         */\n        this.isPrint = false;\n        /**\n         * @private\n         */\n        this.isPDFViewerJson = false;\n        /**\n         * @private\n         */\n        this.isJsonImported = false;\n        /**\n         * @private\n         */\n        this.isJsonExported = false;\n        /**\n         * @private\n         */\n        this.isPageRotated = false;\n        this.downloadFileName = '';\n        /**\n         * @private\n         */\n        this.isFocusField = false;\n        /**\n         * @private\n         */\n        this.isTouchPad = false;\n        /**\n         * @private\n         */\n        this.isMacGestureActive = false;\n        /**\n         * @private\n         */\n        this.macGestureStartScale = 0;\n        /**\n         * @private\n         */\n        this.zoomInterval = 5;\n        /**\n         * @private\n         */\n        this.isTaggedPdf = false;\n        this.accessibilityTagsHandler = null;\n        this.accessibilityTagsCollection = [];\n        this.pageRequestListForAccessibilityTags = [];\n        this.enableAccessibilityMultiPageRequest = true;\n        /**\n         * @private\n         */\n        this.clientSideRendering = false;\n        /**\n         * @private\n         */\n        this.focusField = [];\n        /**\n         * @private\n         */\n        this.isSkipDocumentPath = false;\n        this.isScrollerMoving = false;\n        this.isScrollerMovingTimer = null;\n        /**\n         * @private\n         */\n        this.previousScrollbarWidth = 0;\n        /**\n         * @returns {void}\n         */\n        this.closeNotification = function () {\n            _this.notifyDialog.hide();\n        };\n        /**\n         * @returns {void}\n         */\n        this.clearSessionStorage = function () {\n            if (!_this.clientSideRendering) {\n                var documentId = '';\n                var hashId = PdfViewerBase.sessionStorageManager.getItem(_this.documentId + '_hashId');\n                var documentLiveCount = PdfViewerBase.sessionStorageManager.getItem(_this.documentId + '_documentLiveCount');\n                var serviceURL = PdfViewerBase.sessionStorageManager.getItem(_this.documentId + '_serviceURL');\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                    documentId = decodeURI(hashId);\n                }\n                else {\n                    documentId = hashId;\n                }\n                if (documentId != null) {\n                    var jsonObject = { hashId: documentId, documentLiveCount: documentLiveCount, action: 'Unload', elementId: _this.pdfViewer.element.id };\n                    var actionName = PdfViewerBase.sessionStorageManager.getItem(_this.documentId + '_unload');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(serviceURL)) {\n                        var browserSupportsKeepalive = 'keepalive' in new Request('');\n                        if (browserSupportsKeepalive) {\n                            var headerValue = _this.setUnloadRequestHeaders();\n                            var credentialsData = _this.pdfViewer.ajaxRequestSettings.withCredentials ? 'include' : 'omit';\n                            fetch(serviceURL + '/' + actionName, {\n                                method: 'POST',\n                                credentials: credentialsData,\n                                headers: headerValue,\n                                body: JSON.stringify(jsonObject)\n                            });\n                        }\n                    }\n                    else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                        _this.clearCache(actionName, jsonObject, _this);\n                    }\n                }\n            }\n            PdfViewerBase.sessionStorageManager.clear();\n        };\n        /**\n         * @private\n         * @param {MouseEvent} event - Mouse event.\n         * @returns {void}\n         */\n        this.onWindowResize = function (event) {\n            var proxy = null;\n            // eslint-disable-next-line\n            proxy = _this;\n            if (_this.pdfViewer.enableRtl) {\n                proxy.viewerContainer.style.right = (proxy.navigationPane.sideBarToolbar ? proxy.navigationPane.getViewerContainerLeft() : 0) + 'px';\n                proxy.viewerContainer.style.left = (proxy.navigationPane.commentPanelContainer ? proxy.navigationPane.commentPanelContainer.offsetWidth : 0) + 'px';\n            }\n            else {\n                proxy.viewerContainer.style.left = (proxy.navigationPane.sideBarToolbar ? proxy.navigationPane.getViewerContainerLeft() : 0) + 'px';\n                proxy.viewerContainer.style.right = (proxy.navigationPane.commentPanelContainer ? proxy.navigationPane.commentPanelContainer.offsetWidth : 0) + 'px';\n            }\n            var viewerElementWidth = (proxy.pdfViewer.element.clientWidth > 0 ?\n                proxy.pdfViewer.element.clientWidth : proxy.pdfViewer.element.style.width);\n            var viewerWidth = (viewerElementWidth - (proxy.navigationPane.sideBarToolbar ?\n                proxy.navigationPane.getViewerContainerLeft() : 0) - (proxy.navigationPane.commentPanelContainer ?\n                proxy.navigationPane.getViewerContainerRight() : 0));\n            proxy.viewerContainer.style.width = viewerWidth + 'px';\n            if (proxy.pdfViewer.toolbarModule) {\n                var toolbarContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? proxy.pdfViewer.element.querySelector('.e-pv-toolbar') : proxy.getElement('_toolbarContainer');\n                var toolbarHeight = 0;\n                var formDesignerToolbarHeight = 0;\n                if (toolbarContainer) {\n                    toolbarHeight = toolbarContainer.getBoundingClientRect().height;\n                }\n                if (proxy.isAnnotationToolbarHidden() || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode)) {\n                    if (toolbarHeight === 0) {\n                        if (_this.navigationPane.isNavigationToolbarVisible) {\n                            var navigationToolbar = proxy.getElement('_navigationToolbar');\n                            toolbarHeight = navigationToolbar.getBoundingClientRect().height;\n                        }\n                    }\n                    if (!proxy.isFormDesignerToolbarHidded()) {\n                        var formDesignerToolbar = proxy.getElement('_formdesigner_toolbar');\n                        formDesignerToolbarHeight = formDesignerToolbar ? formDesignerToolbar.getBoundingClientRect().height : 0;\n                    }\n                    proxy.viewerContainer.style.height =\n                        proxy.updatePageHeight(proxy.pdfViewer.element.getBoundingClientRect().height, toolbarHeight + formDesignerToolbarHeight);\n                }\n                else {\n                    var annotationToolbarContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? proxy.pdfViewer.element.querySelector('.e-pv-annotation-toolbar') : proxy.getElement('_annotation_toolbar');\n                    var annotationToolbarHeight = 0;\n                    if (annotationToolbarContainer) {\n                        annotationToolbarHeight = annotationToolbarContainer.getBoundingClientRect().height;\n                    }\n                    proxy.viewerContainer.style.height =\n                        proxy.updatePageHeight(proxy.pdfViewer.element.getBoundingClientRect().height, toolbarHeight + annotationToolbarHeight);\n                }\n            }\n            else {\n                proxy.viewerContainer.style.height = proxy.updatePageHeight(proxy.pdfViewer.element.getBoundingClientRect().height, 0);\n            }\n            if (proxy.pdfViewer.bookmarkViewModule && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode)) {\n                var bookmarkContainer = proxy.getElement('_bookmarks_container');\n                if (bookmarkContainer) {\n                    bookmarkContainer.style.height = proxy.updatePageHeight(proxy.pdfViewer.element.getBoundingClientRect().height, 0);\n                }\n            }\n            if (proxy.viewerContainer.style.height === '0px') {\n                if (proxy.pdfViewer.height.toString() === 'auto') {\n                    proxy.pdfViewer.height = 500;\n                    proxy.viewerContainer.style.height = proxy.pdfViewer.height + 'px';\n                }\n                else {\n                    proxy.viewerContainer.style.height = proxy.pdfViewer.element.style.height;\n                }\n            }\n            if (proxy.viewerContainer.style.width === '0px') {\n                if (proxy.pdfViewer.width.toString() === 'auto') {\n                    proxy.pdfViewer.width = 500;\n                    proxy.viewerContainer.style.width = proxy.pdfViewer.width + 'px';\n                }\n                else {\n                    proxy.viewerContainer.style.width = proxy.pdfViewer.element.style.width;\n                }\n            }\n            proxy.pageContainer.style.width = proxy.viewerContainer.clientWidth + 'px';\n            if (proxy.viewerContainer.clientWidth === 0) {\n                proxy.pageContainer.style.width = proxy.pdfViewer.element.style.width;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                if (proxy.pdfViewer.toolbarModule) {\n                    proxy.pdfViewer.toolbarModule.onToolbarResize((proxy.navigationPane.sideBarToolbar ?\n                        proxy.navigationPane.getViewerMainContainerWidth() : proxy.pdfViewer.element.clientWidth));\n                }\n            }\n            if (_this.pdfViewer.enableToolbar && _this.pdfViewer.thumbnailViewModule) {\n                proxy.pdfViewer.thumbnailViewModule.gotoThumbnailImage(proxy.currentPageNumber - 1);\n                if (proxy.navigationPane.sideBarToolbar && proxy.navigationPane.sideBarContentContainer) {\n                    proxy.navigationPane.sideBarContentContainer.style.height = proxy.viewerContainer.style.height;\n                }\n            }\n            if (proxy.pdfViewer.textSearchModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _this.pdfViewer.enableDesktopMode)) {\n                proxy.pdfViewer.textSearchModule.textSearchBoxOnResize();\n            }\n            if (viewerWidth !== 0) {\n                if (!proxy.navigationPane.isBookmarkListOpen) {\n                    proxy.updateZoomValue();\n                }\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                proxy.mobileScrollerContainer.style.left = (viewerWidth - parseFloat(proxy.mobileScrollerContainer.style.width)) + 'px';\n                proxy.mobilePageNoContainer.style.left = (viewerWidth / 2) - (parseFloat(proxy.mobilePageNoContainer.style.width) / 2) + 'px';\n                proxy.mobilePageNoContainer.style.top = (proxy.pdfViewer.element.clientHeight / 2) + 'px';\n                proxy.updateMobileScrollerPosition();\n            }\n            else {\n                proxy.navigationPane.setResizeIconTop();\n                proxy.navigationPane.setCommentPanelResizeIconTop();\n                if (event && event.type === 'resize') {\n                    proxy.signatureModule.updateCanvasSize();\n                }\n            }\n            if (proxy.navigationPane.sideBarToolbar) {\n                proxy.navigationPane.sideBarToolbar.style.height = proxy.viewerContainer.style.height;\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMousedown = function (event) {\n            _this.isFreeTextContextMenu = false;\n            var isUpdate = false;\n            _this.isSelection = true;\n            var target = event.target;\n            if (event.button === 0 && !_this.getPopupNoteVisibleStatus() && !_this.isClickedOnScrollBar(event, false)) {\n                _this.isViewerMouseDown = true;\n                if (event.detail === 1 && target.className !== 'e-pdfviewer-formFields' && target.className !== 'free-text-input') {\n                    isUpdate = true;\n                    _this.focusViewerContainer(true);\n                }\n                _this.scrollPosition = _this.viewerContainer.scrollTop / _this.getZoomFactor();\n                _this.mouseX = event.clientX;\n                _this.mouseY = event.clientY;\n                _this.mouseLeft = event.clientX;\n                _this.mouseTop = event.clientY;\n                var isIE = !!document.documentMode;\n                if (_this.pdfViewer.textSelectionModule && !_this.isClickedOnScrollBar(event, true) && !_this.isTextSelectionDisabled) {\n                    if (!isIE && target.className !== 'e-pdfviewer-formFields' && target.className !== 'e-pdfviewer-ListBox' && target.className.indexOf('e-pv-formfield-dropdown') === -1 && target.className !== 'e-pv-formfield-listbox' && target.className !== 'e-pv-formfield-input' && target.className !== 'e-pv-formfield-textarea') {\n                        event.preventDefault();\n                    }\n                    if (target.className !== 'e-pv-droplet') {\n                        _this.pdfViewer.textSelectionModule.clearTextSelection();\n                    }\n                }\n            }\n            if (_this.isClickedOnScrollBar(event, false)) {\n                _this.isViewerMouseDown = true;\n            }\n            if (_this.isPanMode) {\n                _this.dragX = event.pageX;\n                _this.dragY = event.pageY;\n                if (_this.viewerContainer.contains(event.target) && (event.target !==\n                    _this.viewerContainer) && (event.target !== _this.pageContainer) && _this.isPanMode) {\n                    _this.viewerContainer.style.cursor = 'grabbing';\n                }\n            }\n            if (_this.isShapeBasedAnnotationsEnabled() && (_this.isAnnotationDrawn || !(target.className === 'e-pv-page-container' || (target.className === 'foreign-object' && isNaN(_this.activeElements.activePageID))))) {\n                _this.diagramMouseDown(event);\n            }\n            if (_this.pdfViewer.annotation && _this.pdfViewer.annotation.stickyNotesAnnotationModule.accordionContainer) {\n                if (!isUpdate) {\n                    _this.pdfViewer.annotationModule.stickyNotesAnnotationModule.isEditableElement = false;\n                    _this.updateCommentPanel();\n                    isUpdate = true;\n                }\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                _this.mouseDownHandler(event);\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMouseup = function (event) {\n            if (!_this.getPopupNoteVisibleStatus()) {\n                if (_this.isViewerMouseDown) {\n                    if (_this.scrollHoldTimer) {\n                        clearTimeout(_this.scrollHoldTimer);\n                        _this.scrollHoldTimer = null;\n                    }\n                    if ((_this.scrollPosition * _this.getZoomFactor()) !== _this.viewerContainer.scrollTop) {\n                        _this.pageViewScrollChanged(_this.currentPageNumber);\n                    }\n                }\n                var isSignatureFieldReadOnly = false;\n                if (event.target) {\n                    if (event.target.className === 'e-pv-show-designer-name' && event.target.id.split('_', 1) !== '') {\n                        isSignatureFieldReadOnly = document.getElementById(event.target.id.split('_', 1)).disabled;\n                    }\n                    if (event.target.className === 'foreign-object' && event.target.children[0]) {\n                        isSignatureFieldReadOnly = event.target.children[0].disabled;\n                    }\n                }\n                if (isSignatureFieldReadOnly && _this.pdfViewer.annotation) {\n                    _this.pdfViewer.annotation.clearSelection();\n                }\n                if (_this.isShapeBasedAnnotationsEnabled() && !isSignatureFieldReadOnly && (_this.isAnnotationDrawn || _this.action !== 'DrawTool')) {\n                    _this.diagramMouseUp(event);\n                    if (_this.pdfViewer.annotation) {\n                        _this.pdfViewer.annotation.onAnnotationMouseUp();\n                    }\n                }\n                if (_this.pdfViewer.selectedItems.formFields.length > 0) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.toolbar) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.toolbar.formDesignerToolbarModule) && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                        _this.pdfViewer.toolbar.formDesignerToolbarModule.showHideDeleteIcon(true);\n                    }\n                }\n                else {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.toolbar) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.toolbar.formDesignerToolbarModule) && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                        _this.pdfViewer.toolbar.formDesignerToolbarModule.showHideDeleteIcon(false);\n                    }\n                }\n                _this.isSelection = false;\n                var commentElement = document.getElementById(_this.pdfViewer.element.id + '_commantPanel');\n                if (commentElement && commentElement.style.display === 'block') {\n                    if (_this.pdfViewer.selectedItems) {\n                        if (_this.pdfViewer.selectedItems.annotations.length !== 0) {\n                            var accordionExpand = document.getElementById(_this.pdfViewer.element.id + '_accordionContainer' + _this.pdfViewer.currentPageNumber);\n                            if (accordionExpand) {\n                                accordionExpand.ej2_instances[0].expandItem(true);\n                            }\n                            var commentsDiv = document.getElementById(_this.pdfViewer.selectedItems.annotations[0].annotName);\n                            if (commentsDiv) {\n                                if (!commentsDiv.classList.contains('e-pv-comments-border')) {\n                                    commentsDiv.firstChild.click();\n                                }\n                            }\n                        }\n                    }\n                }\n                if (event.button === 0 && !_this.isClickedOnScrollBar(event, false)) {\n                    // 0 is for left button.\n                    var eventTarget_1 = event.target;\n                    var offsetX = event.clientX;\n                    var offsetY = event.clientY;\n                    var zoomFactor = _this.getZoomFactor();\n                    var pageIndex = _this.currentPageNumber;\n                    if (eventTarget_1) {\n                        var pageString = eventTarget_1.id.split('_text_')[1] || eventTarget_1.id.split('_textLayer_')[1] || eventTarget_1.id.split('_annotationCanvas_')[1] || eventTarget_1.id.split('_pageDiv_')[1] || eventTarget_1.id.split('_freeText_')[1] || eventTarget_1.id.split('_')[1];\n                        pageIndex = parseInt(pageString, 10);\n                        if (isNaN(pageIndex) && _this.pdfViewer.formFieldCollection) {\n                            var formFieldsTargetId = _this.pdfViewer.formFieldCollection.filter(function (targetFormField) { return (targetFormField.id === eventTarget_1.id) || (targetFormField.id === eventTarget_1.id.split('_')[0]); });\n                            if (formFieldsTargetId.length > 0) {\n                                pageIndex = formFieldsTargetId[0].pageIndex;\n                            }\n                        }\n                    }\n                    var pageDiv = _this.getElement('_pageDiv_' + pageIndex);\n                    if (pageDiv) {\n                        var pageCurrentRect = pageDiv.getBoundingClientRect();\n                        offsetX = (event.clientX - pageCurrentRect.left) / zoomFactor;\n                        offsetY = (event.clientY - pageCurrentRect.top) / zoomFactor;\n                    }\n                    if (eventTarget_1 && eventTarget_1.classList && !eventTarget_1.classList.contains('e-pv-hyperlink') && !eventTarget_1.classList.contains('e-pv-page-container')) {\n                        _this.pdfViewer.firePageClick(offsetX, offsetY, pageIndex + 1);\n                        if (_this.pdfViewer.formFieldsModule && !_this.pdfViewer.formDesignerModule) {\n                            _this.signatureModule.removeFocus();\n                        }\n                    }\n                    if (_this.isTextMarkupAnnotationModule() && !_this.isToolbarInkClicked) {\n                        _this.pdfViewer.annotationModule.textMarkupAnnotationModule.onTextMarkupAnnotationMouseUp(event);\n                    }\n                    if (_this.pdfViewer.formDesignerModule && !_this.pdfViewer.annotationModule) {\n                        _this.pdfViewer.formDesignerModule.updateCanvas(pageIndex);\n                    }\n                    if (_this.viewerContainer.contains(event.target) &&\n                        (event.target !== _this.viewerContainer) &&\n                        (event.target !== _this.pageContainer) && _this.isPanMode) {\n                        _this.viewerContainer.style.cursor = 'move';\n                        _this.viewerContainer.style.cursor = '-webkit-grab';\n                        _this.viewerContainer.style.cursor = '-moz-grab';\n                        _this.viewerContainer.style.cursor = 'grab';\n                    }\n                }\n                _this.isViewerMouseDown = false;\n            }\n        };\n        /**\n         * @param {any} event - The Wheel event.\n         * @returns {void}\n         */\n        this.detectTouchPad = function (event) {\n            _this.isTouchPad = event.wheelDeltaY ? (event.wheelDeltaY === (event.deltaY * -3) ?\n                true : Math.abs(event.deltaY) < 60) : (event.deltaMode === 0);\n        };\n        /**\n         * @param {any} event - The Wheel event.\n         * @returns {void}\n         */\n        this.handleMacGestureStart = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            _this.macGestureStartScale = _this.pdfViewer.magnification.zoomFactor;\n        };\n        /**\n         * @param {any} event - The Wheel event.\n         * @returns {void}\n         */\n        this.handleMacGestureChange = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n            var macX = event.clientX;\n            var macY = event.clientY;\n            var scale = Number((_this.macGestureStartScale * event.scale).toFixed(2));\n            if (!_this.isMacGestureActive) {\n                _this.isMacGestureActive = true;\n                _this.pdfViewer.magnification.initiateMouseZoom(macX, macY, scale * 100);\n                setTimeout(function () {\n                    _this.isMacGestureActive = false;\n                }, 50);\n            }\n        };\n        /**\n         * @param {any} event - The Wheel event.\n         * @returns {void}\n         */\n        this.handleMacGestureEnd = function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n        /**\n         * @param {WheelEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMouseWheel = function (event) {\n            _this.isViewerMouseWheel = true;\n            if (_this.getRerenderCanvasCreated()) {\n                event.preventDefault();\n            }\n            if (event.ctrlKey) {\n                var zoomDifference = 25;\n                if (_this.pdfViewer.magnificationModule ? _this.pdfViewer.magnification.zoomFactor : _this.pdfViewer.zoomValue < 1) {\n                    zoomDifference = 10;\n                }\n                if (_this.pdfViewer.magnificationModule ? _this.pdfViewer.magnification.zoomFactor : _this.pdfViewer.zoomValue >= 2) {\n                    zoomDifference = 50;\n                }\n                if (_this.isTouchPad && !_this.isMacSafari) {\n                    zoomDifference = zoomDifference / _this.zoomInterval;\n                }\n                if (_this.pdfViewer.magnificationModule) {\n                    if (event.wheelDelta > 0) {\n                        _this.pdfViewer.magnification.initiateMouseZoom(event.x, event.y, (_this.pdfViewer.magnification.zoomFactor * 100)\n                            + zoomDifference);\n                    }\n                    else {\n                        _this.pdfViewer.magnification.initiateMouseZoom(event.x, event.y, (_this.pdfViewer.magnification.zoomFactor * 100)\n                            - zoomDifference);\n                    }\n                }\n                _this.isTouchPad = false;\n            }\n            if (_this.pdfViewer.magnificationModule) {\n                _this.pdfViewer.magnificationModule.pageRerenderOnMouseWheel();\n                if (event.ctrlKey) {\n                    event.preventDefault();\n                }\n                _this.pdfViewer.magnificationModule.fitPageScrollMouseWheel(event);\n            }\n            if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled) {\n                if (_this.isViewerMouseDown) {\n                    if (!event.target.classList.contains('e-pv-text')) {\n                        _this.pdfViewer.textSelectionModule.textSelectionOnMouseWheel(_this.currentPageNumber - 1);\n                    }\n                }\n            }\n        };\n        /**\n         * @param {KeyboardEvent} event - The KeyboardEvent.\n         * @returns {void}\n         */\n        this.onWindowKeyDown = function (event) {\n            var isMac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;\n            var isCommandKey = isMac ? event.metaKey : false;\n            if ((_this.isFreeTextAnnotationModule() && _this.pdfViewer.annotationModule\n                && (_this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus === true\n                    || _this.pdfViewer.annotationModule.inputElementModule.isInFocus === true))) {\n                return;\n            }\n            if (!event.ctrlKey || !isCommandKey) {\n                switch (event.keyCode) {\n                    case 46: {\n                        var activeElement = document.activeElement;\n                        if (activeElement.tagName !== 'INPUT' && activeElement.tagName !== 'TEXTAREA' && !activeElement.isContentEditable) {\n                            _this.DeleteKeyPressed(event);\n                        }\n                        break;\n                    }\n                    case 27:\n                        if (_this.pdfViewer.toolbar) {\n                            _this.pdfViewer.toolbar.addInkAnnotation();\n                            _this.pdfViewer.toolbar.deSelectCommentAnnotation();\n                            _this.pdfViewer.toolbar.updateStampItems();\n                            if (_this.pdfViewer.toolbar.annotationToolbarModule) {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    _this.pdfViewer.toolbar.annotationToolbarModule.deselectAllItemsInBlazor();\n                                }\n                                else {\n                                    _this.pdfViewer.toolbar.annotationToolbarModule.deselectAllItems();\n                                }\n                            }\n                            if (_this.pdfViewer.isFormDesignerToolbarVisible && document.getElementById('FormField_helper_html_element')) {\n                                var formFieldElement = document.getElementById('FormField_helper_html_element');\n                                if (formFieldElement) {\n                                    formFieldElement.remove();\n                                }\n                            }\n                            _this.pdfViewer.tool = '';\n                            _this.focusViewerContainer();\n                        }\n                        break;\n                    case 13:\n                        if (_this.pdfViewer.formDesignerModule) {\n                            if ((event.type === 'keydown' && event.keyCode === 13)) {\n                                if (event.target && (event.target.id || event.target.tabIndex) &&\n                                    _this.pdfViewer.formFieldCollections) {\n                                    var fieldId = void 0;\n                                    var currentTarget = event.target;\n                                    if ((event.target.tabIndex && !event.target.id)) {\n                                        currentTarget = event.target.parentElement;\n                                        fieldId = currentTarget.id.split('_content_html_element')[0];\n                                    }\n                                    else {\n                                        currentTarget = event.target;\n                                        fieldId = currentTarget.id.split('_')[0];\n                                    }\n                                    for (var i = 0; i < _this.pdfViewer.formFieldCollections.length; i++) {\n                                        var formfield = _this.pdfViewer.formFieldCollections[parseInt(i.toString(), 10)];\n                                        if (fieldId === formfield.id && (formfield.type === 'SignatureField' || formfield.type === 'InitialField')) {\n                                            _this.pdfViewer.fireFormFieldClickEvent('formFieldClicked', _this.pdfViewer.formFieldCollections[parseInt(i.toString(), 10)]);\n                                            event.preventDefault();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case 32:\n                        if (_this.pdfViewer.formDesignerModule) {\n                            if ((event.type === 'keydown' && event.keyCode === 32)) {\n                                if (event.target && event.target.id && _this.pdfViewer.formFields) {\n                                    for (var i = 0; i < _this.pdfViewer.formFields.length; i++) {\n                                        var formField = _this.pdfViewer.formFields[parseInt(i.toString(), 10)];\n                                        if (event.target.id.split('_')[0] === formField.id && (formField.formFieldAnnotationType === 'Checkbox')) {\n                                            _this.pdfViewer.formDesignerModule.setCheckBoxState(event);\n                                            event.preventDefault();\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case 9:\n                        if (event.target && (event.target.id || event.target.tabIndex) && _this.pdfViewer.formFieldCollections) {\n                            {\n                                if (event.target.className === 'e-pv-formfield-input' || event.target.className === 'foreign-object' || event.target.id === _this.pdfViewer.element.id + '_viewerContainer') {\n                                    var nextField = void 0;\n                                    var fieldIndex = void 0;\n                                    var currentTarget_1 = event.target;\n                                    var id_1;\n                                    if ((event.target.tabIndex && !event.target.id)) {\n                                        currentTarget_1 = event.target.parentElement;\n                                        id_1 = currentTarget_1.id.split('_content_html_element')[0];\n                                    }\n                                    else {\n                                        currentTarget_1 = event.target;\n                                        id_1 = currentTarget_1.id.split('_input')[0];\n                                    }\n                                    if (_this.pdfViewer.formDesignerModule) {\n                                        if ((event.shiftKey && event.key === 'Tab')) {\n                                            fieldIndex = _this.pdfViewer.formFieldCollections.findIndex(function (field) { return field.id === id_1; });\n                                            nextField = fieldIndex > 0 ? _this.pdfViewer.formFieldCollections[fieldIndex - 1] :\n                                                _this.pdfViewer.formFieldCollections[_this.pdfViewer.formFieldCollections.length - 1];\n                                        }\n                                        else {\n                                            fieldIndex = _this.pdfViewer.formFieldCollections.findIndex(function (field) { return field.id === id_1; });\n                                            nextField = fieldIndex + 1 < _this.pdfViewer.formFieldCollections.length ?\n                                                _this.pdfViewer.formFieldCollections[fieldIndex + 1] : _this.pdfViewer.formFieldCollections[0];\n                                        }\n                                        _this.pdfViewer.focusFormField(nextField);\n                                        event.preventDefault();\n                                    }\n                                    if (!_this.pdfViewer.formDesigner) {\n                                        if (!(currentTarget_1.className === 'e-pdfviewer-formFields')) {\n                                            if ((event.shiftKey && event.key === 'Tab')) {\n                                                fieldIndex = _this.pdfViewer.formFieldCollections.findIndex(function (field) { return field.id === currentTarget_1.id; });\n                                                nextField = fieldIndex > 0 ? _this.pdfViewer.formFieldCollections[fieldIndex - 1] :\n                                                    _this.pdfViewer.formFieldCollections[_this.pdfViewer.formFieldCollections.length - 1];\n                                            }\n                                            else {\n                                                fieldIndex = _this.pdfViewer.formFieldCollections.\n                                                    findIndex(function (field) { return field.id === currentTarget_1.id; });\n                                                nextField = fieldIndex + 1 < _this.pdfViewer.formFieldCollections.length ?\n                                                    _this.pdfViewer.formFieldCollections[fieldIndex + 1] : _this.pdfViewer.formFieldCollections[0];\n                                            }\n                                            _this.pdfViewer.focusFormField(nextField);\n                                            event.preventDefault();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (event.target && event.target.id && _this.pdfViewer.formFields) {\n                            for (var i = 0; i < _this.pdfViewer.formFields.length; i++) {\n                                var formField = _this.pdfViewer.formFields[parseInt(i.toString(), 10)];\n                                if (event.target.id === formField.id) {\n                                    var field = {\n                                        value: formField.value, fontFamily: formField.fontFamily,\n                                        fontSize: formField.fontSize, fontStyle: formField.fontStyle,\n                                        color: formField.color, backgroundColor: formField.backgroundColor,\n                                        alignment: formField.alignment, isReadonly: formField.isReadonly,\n                                        visibility: formField.visibility,\n                                        maxLength: formField.maxLength, isRequired: formField.isRequired,\n                                        isPrint: formField.isPrint, rotation: formField.rotateAngle, tooltip: formField.tooltip,\n                                        options: formField.options, isChecked: formField.isChecked,\n                                        isSelected: formField.isSelected\n                                    };\n                                    _this.pdfViewer.fireFocusOutFormField(field, formField.pageIndex);\n                                }\n                            }\n                        }\n                        break;\n                }\n            }\n        };\n        /**\n         * @param {KeyboardEvent} event - The KeyboardEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnKeyDown = function (event) {\n            var isMac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;\n            var isCommandKey = isMac ? event.metaKey : false;\n            var commands = _this.pdfViewer.commandManager;\n            if (Object.keys(commands).length !== 0) {\n                _this.fireCustomCommands(event);\n            }\n            if ((!_this.pdfViewer.pageOrganizerModule) ||\n                (_this.pdfViewer.pageOrganizerModule && (!_this.pdfViewer.pageOrganizerModule.isOrganizeWindowOpen\n                    || ((event.ctrlKey || event.metaKey) && event.altKey && event.keyCode === 51 && !event.shiftKey)))) {\n                if ((_this.isFreeTextAnnotationModule() && _this.pdfViewer.annotationModule\n                    && (_this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus === true\n                        || _this.pdfViewer.annotationModule.inputElementModule.isInFocus === true))) {\n                    return;\n                }\n                if (event.shiftKey) {\n                    if (!event.target.classList.contains('e-pv-formfield-input') &&\n                        (!event.target.classList.contains('e-textbox')) &&\n                        (!event.target.classList.contains('e-pdfviewer-formFields')) &&\n                        (!event.target.classList.contains('e-pv-formfield-textarea')) &&\n                        event.target.id !== _this.pdfViewer.element.id + '_search_input') {\n                        switch (event.keyCode) {\n                            case 72:\n                                { //h key\n                                    event.preventDefault();\n                                    if (_this.pdfViewer.toolbarModule && _this.pdfViewer.enableToolbar &&\n                                        _this.pdfViewer.toolbarSettings.toolbarItems.indexOf('PanTool') !== -1) {\n                                        //this used to select pan mode\n                                        _this.pdfViewer.interactionMode = 'Pan';\n                                        _this.focusViewerContainer();\n                                    }\n                                }\n                                break;\n                            case 86:\n                                { //v key\n                                    event.preventDefault();\n                                    if (_this.pdfViewer.toolbarModule && _this.pdfViewer.enableToolbar &&\n                                        _this.pdfViewer.toolbarSettings.toolbarItems.indexOf('SelectionTool') !== -1) {\n                                        //this used to select text selection mode\n                                        _this.pdfViewer.interactionMode = 'TextSelection';\n                                        _this.focusViewerContainer();\n                                    }\n                                }\n                                break;\n                        }\n                    }\n                }\n                if (event.ctrlKey || isCommandKey) {\n                    // add keycodes if shift key is used.\n                    if ((event.shiftKey && !isMac) || (isMac && !event.shiftKey)) {\n                        switch (event.keyCode) {\n                            case 38: // up arrow\n                            case 33: // page up\n                                event.preventDefault();\n                                if (_this.currentPageNumber !== 1) {\n                                    _this.updateScrollTop(0);\n                                }\n                                break;\n                            case 40: // down arrow\n                            case 34: // page down\n                                event.preventDefault();\n                                if (_this.currentPageNumber !== _this.pageCount) {\n                                    _this.updateScrollTop(_this.pageCount - 1);\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    switch (event.keyCode) {\n                        case 79: // o key\n                            if (_this.pdfViewer.toolbarModule && _this.pdfViewer.enableToolbar &&\n                                _this.pdfViewer.toolbarSettings.toolbarItems.indexOf('OpenOption') !== -1) {\n                                _this.pdfViewer.toolbarModule.openFileDialogBox(event);\n                            }\n                            else {\n                                event.preventDefault();\n                            }\n                            break;\n                        case 67: // c key\n                            if (_this.pdfViewer.textSelectionModule &&\n                                _this.pdfViewer.enableTextSelection &&\n                                !_this.isTextSelectionDisabled && _this.isTargetClassNameValid(event)) {\n                                event.preventDefault();\n                                _this.pdfViewer.textSelectionModule.copyText();\n                            }\n                            if (_this.pdfViewer.selectedItems.annotations.length || _this.pdfViewer.selectedItems.formFields.length) {\n                                _this.pdfViewer.copy();\n                                _this.contextMenuModule.previousAction = 'Copy';\n                            }\n                            break;\n                        case 70: // f key\n                            if (_this.pdfViewer.textSearchModule && _this.pdfViewer.enableTextSearch) {\n                                event.preventDefault();\n                                _this.pdfViewer.toolbarModule.textSearchButtonHandler();\n                            }\n                            break;\n                        case 80: // p key\n                            if (_this.pdfViewer.printModule && _this.pdfViewer.enablePrint) {\n                                event.preventDefault();\n                                _this.pdfViewer.firePrintStart();\n                            }\n                            break;\n                        case 83:\n                            { //s key\n                                event.preventDefault();\n                                _this.pdfViewer.download();\n                            }\n                            break;\n                        case 90: //z key\n                            if (!(_this.pdfViewer.textSearchModule && _this.isTextSearchBoxOpen())) {\n                                if (_this.pdfViewer.annotationModule && _this.focusOnViewerContainer()) {\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.annotationModule) &&\n                                        _this.pdfViewer.toolbarModule.annotationToolbarModule.inkAnnotationSelected) {\n                                        _this.pdfViewer.annotationModule.setAnnotationMode('None');\n                                    }\n                                    _this.pdfViewer.annotationModule.undo();\n                                }\n                            }\n                            break;\n                        case 88: //x key\n                            if (_this.pdfViewer.selectedItems.annotations.length || _this.pdfViewer.selectedItems.formFields.length) {\n                                _this.pdfViewer.cut();\n                                _this.contextMenuModule.previousAction = 'Cut';\n                            }\n                            break;\n                        case 89: //y key\n                            if (!(_this.pdfViewer.textSearchModule && _this.isTextSearchBoxOpen())) {\n                                if (_this.pdfViewer.annotationModule && _this.focusOnViewerContainer()) {\n                                    _this.pdfViewer.annotationModule.redo();\n                                }\n                            }\n                            break;\n                        case 86: //v key\n                            if ((_this.pdfViewer.annotation && _this.pdfViewer.annotation.isShapeCopied) ||\n                                (_this.pdfViewer.formFields && _this.pdfViewer.formDesigner && _this.pdfViewer.formDesigner.isShapeCopied)) {\n                                var isSearchboxDialogOpen = void 0;\n                                var searchBoxId = document.getElementById(_this.pdfViewer.element.id + '_search_box');\n                                if (searchBoxId) {\n                                    isSearchboxDialogOpen = searchBoxId.style.display !== 'none';\n                                }\n                                if (!isSearchboxDialogOpen && _this.pdfViewer.formDesigner && _this.isTargetClassNameValid(event) && event.target.className !== 'e-pv-properties-tooltip-prop-input e-input e-lib e-textbox e-control') {\n                                    _this.pdfViewer.paste();\n                                    _this.contextMenuModule.previousAction = 'Paste';\n                                }\n                            }\n                            break;\n                        case 71: // 'g' key\n                            {\n                                // this is used to focus the Go to Page Input textbox\n                                event.preventDefault();\n                                var gotoPageInput = document.querySelector('.e-control.e-numerictextbox.e-lib.e-input');\n                                if (_this.pdfViewer.toolbarModule &&\n                                    _this.pdfViewer.enableToolbar &&\n                                    gotoPageInput != null &&\n                                    gotoPageInput.style.display !== 'none') {\n                                    gotoPageInput.blur();\n                                    gotoPageInput.focus();\n                                }\n                            }\n                            break;\n                        case 48: //0 key\n                            {\n                                //this is used to open the comment panel\n                                if (event.altKey) {\n                                    event.preventDefault();\n                                    var commentPanel = document.getElementById(_this.pdfViewer.element.id + '_commantPanel');\n                                    if (_this.pageCount > 0 && commentPanel.style.display === 'none') {\n                                        _this.pdfViewer.annotationModule.showCommentsPanel();\n                                    }\n                                    else {\n                                        _this.navigationPane.closeCommentPanelContainer();\n                                    }\n                                }\n                            }\n                            break;\n                        case 49: //1 key\n                            {\n                                //this is used to open the thumbnail pane\n                                if (event.altKey) {\n                                    event.preventDefault();\n                                    if (_this.pageCount > 0 && _this.pdfViewer.enableThumbnail) {\n                                        event.preventDefault();\n                                        _this.navigationPane.sideToolbarOnClick(event);\n                                        _this.focusViewerContainer();\n                                    }\n                                }\n                            }\n                            break;\n                        case 50: //2 key\n                            {\n                                //this is used to open the bookmark panel\n                                if (event.altKey) {\n                                    event.preventDefault();\n                                    if (_this.pageCount > 0 && _this.pdfViewer.enableBookmark) {\n                                        _this.navigationPane.bookmarkButtonOnClick(event);\n                                        _this.focusViewerContainer();\n                                    }\n                                }\n                            }\n                            break;\n                        case 51:\n                            {\n                                if (event.altKey) {\n                                    event.preventDefault();\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.pageOrganizer) && _this.pageCount > 0\n                                        && _this.pdfViewer.enablePageOrganizer) {\n                                        _this.pdfViewer.pageOrganizer.switchPageOrganizer();\n                                        _this.focusViewerContainer();\n                                    }\n                                }\n                            }\n                            break;\n                        case 65: //\"a\" key\n                            if (event.shiftKey) {\n                                //this is used to open annoatation bar\n                                event.preventDefault();\n                                if (_this.pageCount > 0 && _this.pdfViewer.enableAnnotationToolbar &&\n                                    _this.pdfViewer.toolbarModule && _this.pdfViewer.toolbarModule.annotationToolbarModule) {\n                                    _this.pdfViewer.toolbarModule.initiateAnnotationMode(null, true);\n                                    _this.focusViewerContainer();\n                                }\n                                var hightLightButton = document.getElementById(_this.pdfViewer.toolbarModule.annotationToolbarModule.toolbar.items[0].id);\n                                if (hightLightButton) {\n                                    hightLightButton.focus();\n                                }\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                else {\n                    if (_this.pdfViewer.annotationModule && !_this.pdfViewer.textSearchModule) {\n                        if (event.key === 'Delete') {\n                            var activeElement = document.activeElement;\n                            if (event.target.className !== 'e-pdfviewer-formFields' && activeElement.tagName !== 'INPUT' && activeElement.tagName !== 'TEXTAREA' && !activeElement.isContentEditable) {\n                                _this.DeleteKeyPressed(event);\n                            }\n                        }\n                    }\n                }\n                if (_this.pdfViewer.magnificationModule) {\n                    _this.pdfViewer.magnificationModule.magnifyBehaviorKeyDown(event);\n                }\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMousemove = function (event) {\n            _this.mouseX = event.clientX;\n            _this.mouseY = event.clientY;\n            var isIE = !!document.documentMode;\n            var target = event.target;\n            if (_this.action === 'Drag') {\n                event.preventDefault();\n            }\n            if (_this.isViewerMouseDown && !(_this.action === 'Perimeter' || _this.action === 'Polygon' || _this.action === 'Line' || _this.action === 'DrawTool' || _this.action === 'Distance')) {\n                if (_this.pdfViewer.textSelectionModule && _this.pdfViewer.enableTextSelection &&\n                    !_this.isTextSelectionDisabled && !_this.getPopupNoteVisibleStatus()) {\n                    // text selection won't perform if we start the selection from hyperlink content by commenting this line.\n                    // this region block the toc/hyperlink navigation on sometimes.\n                    // if ((event.target as HTMLElement).classList.contains('e-pv-hyperlink') && this.pdfViewer.linkAnnotationModule) {\n                    // this.pdfViewer.linkAnnotationModule.modifyZindexForHyperlink((event.target as HTMLElement), true);\n                    // }\n                    if (!isIE) {\n                        if (event.target.className !== 'e-pdfviewer-formFields') {\n                            event.preventDefault();\n                        }\n                        _this.mouseX = event.clientX;\n                        _this.mouseY = event.clientY;\n                        var annotationModule = _this.pdfViewer.annotationModule;\n                        if (annotationModule && annotationModule.textMarkupAnnotationModule &&\n                            annotationModule.textMarkupAnnotationModule.isDropletClicked &&\n                            annotationModule.textMarkupAnnotationModule.\n                                isEnableTextMarkupResizer(annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode)) {\n                            annotationModule.textMarkupAnnotationModule.textSelect(event.target, _this.mouseX, _this.mouseY);\n                        }\n                        else {\n                            _this.pdfViewer.textSelectionModule.textSelectionOnMouseMove(event.target, _this.mouseX, _this.mouseY);\n                        }\n                    }\n                    else {\n                        var selection = window.getSelection();\n                        if (!selection.type && !selection.isCollapsed && selection.anchorNode !== null) {\n                            _this.pdfViewer.textSelectionModule.isTextSelection = true;\n                        }\n                    }\n                }\n                else if (_this.skipPreventDefault(target)) {\n                    event.preventDefault();\n                }\n            }\n            if (_this.isTextMarkupAnnotationModule() && !_this.getPopupNoteVisibleStatus()) {\n                _this.pdfViewer.annotationModule.textMarkupAnnotationModule.onTextMarkupAnnotationMouseMove(event);\n            }\n            if (_this.isPanMode) {\n                _this.panOnMouseMove(event);\n            }\n            if (_this.isShapeBasedAnnotationsEnabled()) {\n                var canvas = void 0;\n                if (event.target && (event.target.id.indexOf('_text') > -1 || (event.target.parentElement.classList.contains('foreign-object')) || event.target.id.indexOf('_annotationCanvas') > -1 || event.target.classList.contains('e-pv-hyperlink')) && _this.pdfViewer.annotation || event.target.classList.contains('e-pdfviewer-formFields') || event.target.classList.contains('e-pv-text-layer')) {\n                    var pageIndex = void 0;\n                    if (_this.pdfViewer.annotation) {\n                        pageIndex = _this.pdfViewer.annotation.getEventPageNumber(event);\n                    }\n                    else {\n                        var pageId = event.target.id;\n                        var match = pageId.match(/\\d+/);\n                        pageIndex = match ? parseInt(match[0], 10) : _this.pdfViewer.currentPageNumber - 1;\n                    }\n                    var diagram = document.getElementById(_this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n                    if (diagram) {\n                        var canvas1 = diagram.getBoundingClientRect();\n                        var left = canvas1.x ? canvas1.x : canvas1.left;\n                        var top_1 = canvas1.y ? canvas1.y : canvas1.top;\n                        if (_this.pdfViewer.annotationModule && _this.pdfViewer.annotationModule.stampAnnotationModule.currentStampAnnotation && _this.pdfViewer.annotationModule.stampAnnotationModule.currentStampAnnotation.shapeAnnotationType === 'Image') {\n                            canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left, top_1, canvas1.width - 10, canvas1.height - 10);\n                        }\n                        else {\n                            canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left + 1, top_1 + 1, canvas1.width - 3, canvas1.height - 3);\n                        }\n                    }\n                }\n                else if (!_this.pdfViewer.annotationModule && _this.pdfViewer.formDesignerModule) {\n                    var pageIndex = _this.pdfViewer.formDesignerModule.getEventPageNumber(event);\n                    var diagram = _this.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n                    if (diagram) {\n                        var canvas1 = diagram.getBoundingClientRect();\n                        var left = canvas1.x ? canvas1.x : canvas1.left;\n                        var top_2 = canvas1.y ? canvas1.y : canvas1.top;\n                        canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left + 10, top_2 + 10, canvas1.width - 10, canvas1.height - 10);\n                    }\n                }\n                var stampModule = _this.pdfViewer.annotationModule ?\n                    _this.pdfViewer.annotationModule.stampAnnotationModule : null;\n                if (canvas && canvas.containsPoint({ x: _this.mouseX, y: _this.mouseY }) && !(stampModule && stampModule.isStampAnnotSelected)) {\n                    _this.diagramMouseMove(event);\n                    _this.annotationEvent = event;\n                }\n                else {\n                    _this.diagramMouseLeave(event);\n                    if (_this.isAnnotationDrawn && !_this.pdfViewer.isFormDesignerToolbarVisible) {\n                        _this.diagramMouseUp(event);\n                        _this.isAnnotationAdded = true;\n                    }\n                }\n                if (_this.pdfViewer.enableStampAnnotations) {\n                    if (stampModule && stampModule.isStampAnnotSelected) {\n                        _this.pdfViewer.tool = 'Stamp';\n                        _this.tool = new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.StampTool(_this.pdfViewer, _this);\n                        _this.isMouseDown = true;\n                        stampModule.isStampAnnotSelected = false;\n                        stampModule.isNewStampAnnot = true;\n                    }\n                }\n                if (_this.isSignatureAdded && _this.pdfViewer.enableHandwrittenSignature) {\n                    _this.pdfViewer.tool = 'Stamp';\n                    _this.tool = new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.StampTool(_this.pdfViewer, _this);\n                    _this.isMouseDown = true;\n                    _this.isSignatureAdded = false;\n                    _this.isNewSignatureAdded = true;\n                }\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.panOnMouseMove = function (event) {\n            var isStampMode = false;\n            if (_this.action === 'Ink' || _this.action === 'Line' || _this.action === 'Perimeter' || _this.action === 'Polygon' || _this.action === 'DrawTool' || _this.action === 'Drag' || _this.action.indexOf('Rotate') !== -1 || _this.action.indexOf('Resize') !== -1) {\n                isStampMode = true;\n            }\n            if (_this.viewerContainer.contains(event.target) && (event.target !==\n                _this.viewerContainer) && (event.target !== _this.pageContainer) && !isStampMode) {\n                if (_this.isViewerMouseDown) {\n                    var deltaX = _this.dragX - event.pageX;\n                    var deltaY = _this.dragY - event.pageY;\n                    _this.viewerContainer.scrollTop = _this.viewerContainer.scrollTop + deltaY;\n                    _this.viewerContainer.scrollLeft = _this.viewerContainer.scrollLeft + deltaX;\n                    _this.viewerContainer.style.cursor = 'move';\n                    _this.viewerContainer.style.cursor = '-webkit-grabbing';\n                    _this.viewerContainer.style.cursor = '-moz-grabbing';\n                    _this.viewerContainer.style.cursor = 'grabbing';\n                    _this.dragX = event.pageX;\n                    _this.dragY = event.pageY;\n                }\n                else {\n                    if (!_this.navigationPane.isNavigationPaneResized) {\n                        _this.viewerContainer.style.cursor = 'move';\n                        _this.viewerContainer.style.cursor = '-webkit-grab';\n                        _this.viewerContainer.style.cursor = '-moz-grab';\n                        _this.viewerContainer.style.cursor = 'grab';\n                    }\n                }\n            }\n            else {\n                if (!_this.navigationPane.isNavigationPaneResized) {\n                    _this.viewerContainer.style.cursor = 'auto';\n                }\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMouseLeave = function (event) {\n            if (_this.isViewerMouseDown) {\n                if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled) {\n                    _this.pdfViewer.textSelectionModule.textSelectionOnMouseLeave(event);\n                }\n            }\n            if (_this.pdfViewer.textSelectionModule && _this.pdfViewer.textSelectionModule.isTextSelection) {\n                event.preventDefault();\n            }\n            if (_this.action === 'Ink') {\n                _this.diagramMouseUp(event);\n                _this.isAnnotationAdded = true;\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMouseEnter = function (event) {\n            if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled) {\n                _this.pdfViewer.textSelectionModule.clear();\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnMouseOver = function (event) {\n            var isIE = !!document.documentMode;\n            if (_this.isViewerMouseDown) {\n                if (!isIE) {\n                    event.preventDefault();\n                }\n            }\n        };\n        /**\n         * @param {MouseEvent} event - The MouseEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnClick = function (event) {\n            if (event.type === 'dblclick') {\n                if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled && !_this.getCurrentTextMarkupAnnotation()) {\n                    if (event.target.classList.contains('e-pv-text')) {\n                        _this.isViewerContainerDoubleClick = true;\n                        if (!_this.getTextMarkupAnnotationMode()) {\n                            var pageNumber = parseFloat(event.target.id.split('_')[2]);\n                            _this.pdfViewer.fireTextSelectionStart(pageNumber + 1);\n                        }\n                        _this.pdfViewer.textSelectionModule.selectAWord(event.target, event.clientX, event.clientY, false);\n                        if (_this.pdfViewer.contextMenuSettings.contextMenuAction === 'MouseUp') {\n                            _this.pdfViewer.textSelectionModule.calculateContextMenuPosition(event.clientY, event.clientX);\n                        }\n                        if (!_this.getTextMarkupAnnotationMode()) {\n                            _this.pdfViewer.textSelectionModule.maintainSelectionOnZoom(true, false);\n                            _this.dblClickTimer = setTimeout(function () {\n                                _this.applySelection();\n                            }, 100);\n                            _this.pdfViewer.textSelectionModule.fireTextSelectEnd();\n                        }\n                        else if (_this.isTextMarkupAnnotationModule() && _this.getTextMarkupAnnotationMode()) {\n                            _this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                drawTextMarkupAnnotations(_this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode);\n                        }\n                    }\n                }\n                else if (_this.getCurrentTextMarkupAnnotation()) {\n                    // this.pdfViewer.annotationModule.showAnnotationPopup(event);\n                }\n                if (_this.action && (_this.action === 'Perimeter' || _this.action === 'Polygon') && _this.tool) {\n                    _this.eventArgs.position = _this.currentPosition;\n                    _this.getMouseEventArgs(_this.currentPosition, _this.eventArgs, event, _this.eventArgs.source);\n                    var ctrlKey = _this.isMetaKey(event);\n                    var info = { ctrlKey: event.ctrlKey, shiftKey: event.shiftKey };\n                    _this.eventArgs.info = info;\n                    _this.eventArgs.clickCount = event.detail;\n                    _this.eventArgs.isTouchMode = false;\n                    _this.tool.mouseUp(_this.eventArgs, true);\n                }\n                if ((_this.pdfViewer.selectedItems ||\n                    (_this.pdfViewer.annotation &&\n                        _this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation)) &&\n                    !_this.pdfViewer.annotationSettings.isLock) {\n                    var currentAnnotation = _this.pdfViewer.selectedItems.annotations[0];\n                    if (_this.pdfViewer.selectedItems.annotations.length !== 0 &&\n                        !(currentAnnotation.annotationSettings.isLock || currentAnnotation.isLock)) {\n                        if (_this.pdfViewer.annotationModule && !currentAnnotation.formFieldAnnotationType) {\n                            _this.pdfViewer.annotationModule.annotationSelect(currentAnnotation.annotName, currentAnnotation.pageIndex, currentAnnotation, null, true);\n                            if (_this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus === false) {\n                                if (_this.isFreeTextAnnotation(_this.pdfViewer.selectedItems.annotations) === true &&\n                                    !_this.pdfViewer.selectedItems.annotations[0].isLock) {\n                                    var elmtPosition = {};\n                                    elmtPosition.x = _this.pdfViewer.selectedItems.annotations[0].bounds.x;\n                                    elmtPosition.y = _this.pdfViewer.selectedItems.annotations[0].bounds.y;\n                                    _this.pdfViewer.annotation.freeTextAnnotationModule.\n                                        addInuptElemet(elmtPosition, _this.pdfViewer.selectedItems.annotations[0]);\n                                }\n                                else if (_this.pdfViewer.selectedItems.annotations[0].enableShapeLabel === true) {\n                                    var elmtPosition = {};\n                                    elmtPosition.x = _this.pdfViewer.selectedItems.annotations[0].bounds.x;\n                                    elmtPosition.y = _this.pdfViewer.selectedItems.annotations[0].bounds.y;\n                                    _this.pdfViewer.annotation.inputElementModule.\n                                        editLabel(elmtPosition, _this.pdfViewer.selectedItems.annotations[0]);\n                                }\n                                else {\n                                    var accordionExpand = document.getElementById(_this.pdfViewer.element.id + '_accordionContainer' + _this.pdfViewer.currentPageNumber);\n                                    if (accordionExpand) {\n                                        accordionExpand.ej2_instances[0].expandItem(true);\n                                    }\n                                    if (_this.pdfViewer.toolbarModule && _this.pdfViewer.isFormDesignerToolbarVisible &&\n                                        _this.pdfViewer.enableAnnotationToolbar && !_this.pdfViewer.isAnnotationToolbarVisible &&\n                                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.toolbarModule.annotationToolbarModule)) {\n                                        _this.pdfViewer.toolbarModule.annotationToolbarModule.\n                                            showAnnotationToolbar(_this.pdfViewer.toolbarModule.annotationItem);\n                                    }\n                                    var commentsDiv = document.getElementById(_this.pdfViewer.selectedItems.annotations[0].annotName);\n                                    if (commentsDiv) {\n                                        if (!commentsDiv.classList.contains('e-pv-comments-border')) {\n                                            commentsDiv.firstChild.click();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        var annotation = _this.pdfViewer.annotation;\n                        var annotationModule = _this.pdfViewer.annotationModule;\n                        if (annotation && annotationModule.textMarkupAnnotationModule &&\n                            annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                            var annotation_1 = _this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation;\n                            _this.pdfViewer.annotationModule.\n                                annotationSelect(annotation_1.annotName, _this.pdfViewer.annotationModule.textMarkupAnnotationModule.selectTextMarkupCurrentPage, annotation_1, null, true);\n                            var accordionExpand = document.getElementById(_this.pdfViewer.element.id + '_accordionContainer' + _this.currentPageNumber);\n                            if (accordionExpand) {\n                                accordionExpand.ej2_instances[0].expandItem(true);\n                            }\n                            var comments = document.getElementById(annotation_1.annotName);\n                            if (comments) {\n                                comments.firstChild.click();\n                            }\n                        }\n                    }\n                }\n                if (_this.pdfViewer.designerMode && _this.pdfViewer.selectedItems.formFields.length > 0) {\n                    var eventArgs = { name: 'formFieldDoubleClick', field: _this.pdfViewer.selectedItems.formFields[0], cancel: false };\n                    _this.pdfViewer.fireFormFieldDoubleClickEvent(eventArgs);\n                    if (!eventArgs.cancel) {\n                        _this.pdfViewer.formDesigner.createPropertiesWindow();\n                    }\n                }\n            }\n            else {\n                if (event.detail === 3) {\n                    if (_this.isViewerContainerDoubleClick) {\n                        clearTimeout(_this.dblClickTimer);\n                        _this.isViewerContainerDoubleClick = false;\n                    }\n                    if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled && !_this.getTextMarkupAnnotationMode()) {\n                        _this.pdfViewer.textSelectionModule.selectEntireLine(event);\n                        _this.pdfViewer.textSelectionModule.maintainSelectionOnZoom(true, false);\n                        _this.pdfViewer.textSelectionModule.fireTextSelectEnd();\n                        _this.applySelection();\n                    }\n                }\n            }\n        };\n        /**\n         * @param {DragEvent} event - The DragEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnDragStart = function (event) {\n            var isIE = !!document.documentMode;\n            if (!isIE) {\n                event.preventDefault();\n            }\n        };\n        this.viewerContainerOnContextMenuClick = function (event) {\n            _this.isViewerMouseDown = false;\n        };\n        this.onWindowMouseUp = function (event) {\n            _this.isFreeTextContextMenu = false;\n            _this.isNewStamp = false;\n            _this.signatureAdded = false;\n            var annotationModule = _this.pdfViewer.annotationModule;\n            if (annotationModule && annotationModule.textMarkupAnnotationModule &&\n                annotationModule.textMarkupAnnotationModule.\n                    isEnableTextMarkupResizer(annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode)) {\n                var modules = annotationModule.textMarkupAnnotationModule;\n                modules.isLeftDropletClicked = false;\n                modules.isDropletClicked = false;\n                modules.isRightDropletClicked = false;\n                if (!modules.currentTextMarkupAnnotation && window.getSelection().anchorNode === null) {\n                    modules.showHideDropletDiv(true);\n                }\n                else if (!modules.currentTextMarkupAnnotation && modules.currentTextMarkupAddMode === '') {\n                    modules.isTextMarkupAnnotationMode = false;\n                }\n            }\n            if (!_this.getPopupNoteVisibleStatus()) {\n                if (event.button === 0) {\n                    if (_this.isNewFreeTextAnnotation()) {\n                        if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled && !_this.getTextMarkupAnnotationMode()) {\n                            if (event.detail === 1 && !_this.viewerContainer.contains(event.target) &&\n                                !_this.contextMenuModule.contextMenuElement.contains(event.target)) {\n                                if (window.getSelection().anchorNode !== null) {\n                                    _this.pdfViewer.textSelectionModule.textSelectionOnMouseup(event);\n                                }\n                            }\n                            var target = event.target;\n                            if (_this.viewerContainer.contains(event.target) && target.className !== 'e-pdfviewer-formFields' && target.className !== 'e-pv-formfield-input' && target.className !== 'e-pv-formfield-textarea') {\n                                if (!_this.isClickedOnScrollBar(event, true) && !_this.isScrollbarMouseDown) {\n                                    _this.pdfViewer.textSelectionModule.textSelectionOnMouseup(event);\n                                }\n                                else {\n                                    if (window.getSelection().anchorNode !== null) {\n                                        _this.pdfViewer.textSelectionModule.applySpanForSelection();\n                                    }\n                                }\n                            }\n                        }\n                        else if (_this.getTextMarkupAnnotationMode()) {\n                            var viewerElement = _this.pdfViewer.element;\n                            var targetElement = event.target;\n                            if (viewerElement && targetElement) {\n                                if (viewerElement.id.split('_')[0] === targetElement.id.split('_')[0] && targetElement.id.split('_')[1] !== 'commenttextbox') {\n                                    _this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                        drawTextMarkupAnnotations(_this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                        currentTextMarkupAddMode);\n                                }\n                            }\n                        }\n                    }\n                }\n                else if (event.button === 2) {\n                    if (_this.viewerContainer.contains(event.target) && _this.skipPreventDefault(event.target)) {\n                        if (_this.checkIsNormalText()) {\n                            window.getSelection().removeAllRanges();\n                        }\n                    }\n                }\n                if (_this.isViewerMouseDown) {\n                    _this.isViewerMouseDown = false;\n                    if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled) {\n                        _this.pdfViewer.textSelectionModule.clear();\n                        _this.pdfViewer.textSelectionModule.selectionStartPage = null;\n                    }\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            }\n        };\n        /**\n         * @param {TouchEvent} event - The DragEvent.\n         * @returns {void}\n         */\n        this.onWindowTouchEnd = function (event) {\n            _this.signatureAdded = false;\n            if (!_this.pdfViewer.element.contains(event.target) &&\n                !_this.contextMenuModule.contextMenuElement.contains(event.target)) {\n                if (_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled) {\n                    _this.pdfViewer.textSelectionModule.clearTextSelection();\n                }\n            }\n        };\n        /**\n         * @param {TouchEvent} event - The TouchEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnTouchStart = function (event) {\n            var touchPoints = event.touches;\n            if (_this.pdfViewer.magnificationModule) {\n                _this.pdfViewer.magnificationModule.setTouchPoints(touchPoints[0].clientX, touchPoints[0].clientY);\n            }\n            var target = event.target;\n            if (touchPoints.length === 1 && !(target.classList.contains('e-pv-hyperlink')) && _this.skipPreventDefault(target)) {\n                _this.preventTouchEvent(event);\n            }\n            if (event.touches.length === 1 && _this.isTextMarkupAnnotationModule() && !_this.getPopupNoteVisibleStatus()) {\n                if (!_this.isToolbarInkClicked) {\n                    _this.pdfViewer.annotationModule.textMarkupAnnotationModule.onTextMarkupAnnotationTouchEnd(event);\n                }\n            }\n            _this.touchClientX = touchPoints[0].clientX;\n            _this.touchClientY = touchPoints[0].clientY;\n            _this.scrollY = touchPoints[0].clientY;\n            _this.previousTime = new Date().getTime();\n            _this.diagramMouseDown(event);\n            if (touchPoints.length === 1 && !(event.target.classList.contains('e-pv-touch-select-drop') || event.target.classList.contains('e-pv-touch-ellipse'))) {\n                if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) && _this.pageCount > 0 && !_this.isThumb && !(event.target.classList.contains('e-pv-hyperlink'))) {\n                    _this.handleTaps(touchPoints, event);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _this.pdfViewer.enableDesktopMode) {\n                    _this.handleTextBoxTaps(touchPoints);\n                }\n                var designerMode = _this.isDesignerMode(target);\n                if (designerMode) {\n                    _this.contextMenuModule.close();\n                    // event.preventDefault();\n                    if (!_this.isLongTouchPropagated) {\n                        _this.longTouchTimer = setTimeout(function () {\n                            if (!_this.isMoving) {\n                                _this.isTouchDesignerMode = true;\n                                _this.contextMenuModule.open(_this.touchClientY, _this.touchClientX, _this.viewerContainer);\n                            }\n                        }, 1000);\n                    }\n                    _this.isLongTouchPropagated = true;\n                    _this.isMoving = false;\n                }\n                else if ((_this.pdfViewer.textSelectionModule && !_this.isTextSelectionDisabled)) {\n                    _this.pdfViewer.textSelectionModule.clearTextSelection();\n                    _this.contextMenuModule.close();\n                    // event.preventDefault();\n                    if (!_this.isLongTouchPropagated) {\n                        _this.longTouchTimer = setTimeout(function () {\n                            _this.viewerContainerOnLongTouch(event);\n                        }, 1000);\n                    }\n                    _this.isLongTouchPropagated = true;\n                }\n                else {\n                    _this.contextMenuModule.close();\n                }\n            }\n            var toolbarModule = _this.pdfViewer.toolbarModule ? _this.pdfViewer.toolbarModule.annotationToolbarModule : 'null';\n            if (target.classList.contains('e-pv-text') && (!toolbarModule || !toolbarModule.textMarkupToolbarElement || toolbarModule.textMarkupToolbarElement.children.length === 0)) {\n                target.classList.add('e-pv-text-selection-none');\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                target.classList.remove('e-enable-text-selection');\n            }\n            if (_this.action === 'Perimeter' || _this.action === 'Distance' || _this.action === 'Line' || _this.action === 'Polygon' || _this.action === 'DrawTool' || _this.action === 'Drag' || _this.action.indexOf('Rotate') !== -1 || _this.action.indexOf('Resize') !== -1) {\n                event.preventDefault();\n            }\n        };\n        /**\n         * @param {TouchEvent} event - The TouchEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnLongTouch = function (event) {\n            _this.touchClientX = event.touches[0].clientX;\n            _this.touchClientY = event.touches[0].clientY;\n            event.preventDefault();\n            if (_this.pdfViewer.textSelectionModule) {\n                var target = event.target;\n                if (target.classList.contains('e-pv-text-selection-none') && target.classList.contains('e-pv-text')) {\n                    target.classList.remove('e-pv-text-selection-none');\n                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                        target.classList.add('e-enable-text-selection');\n                    }\n                }\n                _this.pdfViewer.textSelectionModule.initiateTouchSelection(event, _this.touchClientX, _this.touchClientY);\n                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                    clearTimeout(_this.singleTapTimer);\n                    _this.tapCount = 0;\n                }\n            }\n        };\n        /**\n         * @param {PointerEvent} event - The PointerEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnPointerDown = function (event) {\n            if (event.pointerType === 'touch') {\n                _this.pointerCount++;\n                if (_this.pointerCount <= 2) {\n                    event.preventDefault();\n                    _this.pointersForTouch.push(event);\n                    if (_this.pointerCount === 2) {\n                        _this.pointerCount = 0;\n                    }\n                    if (_this.pdfViewer.magnificationModule) {\n                        _this.pdfViewer.magnificationModule.setTouchPoints(event.clientX, event.clientY);\n                    }\n                }\n            }\n        };\n        /**\n         * @param {TouchEvent} event - The TouchEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnTouchMove = function (event) {\n            if (_this.action === 'Drag') {\n                _this.isMoving = true;\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                clearTimeout(_this.singleTapTimer);\n                _this.singleTapTimer = null;\n                _this.tapCount = 0;\n            }\n            _this.preventTouchEvent(event);\n            if (_this.isToolbarInkClicked) {\n                event.preventDefault();\n            }\n            var touchPoints = event.touches;\n            if (_this.pdfViewer.magnificationModule) {\n                _this.isTouchScrolled = true;\n                if (touchPoints.length > 1 && _this.pageCount > 0) {\n                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                        _this.isTouchScrolled = false;\n                    }\n                    if (_this.pdfViewer.enablePinchZoom) {\n                        _this.pdfViewer.magnificationModule.initiatePinchMove(touchPoints[0].clientX, touchPoints[0].clientY, touchPoints[1].clientX, touchPoints[1].clientY);\n                    }\n                }\n                else if (touchPoints.length === 1 && _this.getPagesPinchZoomed()) {\n                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                        _this.isTouchScrolled = false;\n                    }\n                    _this.pdfViewer.magnificationModule.pinchMoveScroll();\n                }\n            }\n            _this.mouseX = touchPoints[0].clientX;\n            _this.mouseY = touchPoints[0].clientY;\n            var canvas;\n            if (event.target && (event.target.id.indexOf('_text') > -1 || event.target.id.indexOf('_annotationCanvas') > -1 || event.target.classList.contains('e-pv-hyperlink')) && _this.pdfViewer.annotation) {\n                var pageIndex = _this.pdfViewer.annotation.getEventPageNumber(event);\n                var diagram = _this.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n                if (diagram) {\n                    var canvas1 = diagram.getBoundingClientRect();\n                    var left = canvas1.x ? canvas1.x : canvas1.left;\n                    var top_3 = canvas1.y ? canvas1.y : canvas1.top;\n                    canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left + 10, top_3 + 10, canvas1.width - 10, canvas1.height - 10);\n                }\n            }\n            if (canvas && canvas.containsPoint({ x: _this.mouseX, y: _this.mouseY }) || _this.action === 'Ink') {\n                _this.diagramMouseMove(event);\n                _this.annotationEvent = event;\n            }\n            else {\n                _this.diagramMouseLeave(event);\n                if (_this.isAnnotationDrawn) {\n                    _this.diagramMouseUp(event);\n                    _this.isAnnotationAdded = true;\n                }\n            }\n            touchPoints = null;\n        };\n        /**\n         * @param {PointerEvent} event - The TouchEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnPointerMove = function (event) {\n            if (event.pointerType === 'touch' && _this.pageCount > 0) {\n                event.preventDefault();\n                if (_this.pointersForTouch.length === 2) {\n                    for (var i = 0; i < _this.pointersForTouch.length; i++) {\n                        if (event.pointerId === _this.pointersForTouch[parseInt(i.toString(), 10)].pointerId) {\n                            _this.pointersForTouch[parseInt(i.toString(), 10)] = event;\n                            break;\n                        }\n                    }\n                    if (_this.pdfViewer.magnificationModule && _this.pdfViewer.enablePinchZoom) {\n                        _this.pdfViewer.magnificationModule.initiatePinchMove(_this.pointersForTouch[0].clientX, _this.pointersForTouch[0].clientY, _this.pointersForTouch[1].clientX, _this.pointersForTouch[1].clientY);\n                    }\n                }\n            }\n        };\n        /**\n         * @param {TouchEvent} event - The TouchEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnTouchEnd = function (event) {\n            if (_this.pdfViewer.magnificationModule) {\n                _this.pdfViewer.magnificationModule.pinchMoveEnd();\n            }\n            if (event.cancelable && !event.target.classList.contains('e-pv-touch-ellipse') && _this.pdfViewer.textSelectionModule && _this.pdfViewer.textSelectionModule.isTextSelection) {\n                event.preventDefault();\n            }\n            _this.isLongTouchPropagated = false;\n            clearInterval(_this.longTouchTimer);\n            _this.longTouchTimer = null;\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.isDeviceiOS && !_this.pdfViewer.enableDesktopMode) && _this.isTouchScrolled) {\n                _this.currentTime = new Date().getTime();\n                var duration = _this.currentTime - _this.previousTime;\n                var difference = _this.scrollY - event.changedTouches[0].pageY;\n                var speed = (difference) / (duration);\n                if (Math.abs(speed) > 1.5) {\n                    var scrollTop = (difference) + ((duration) * speed);\n                    if (scrollTop > 0) {\n                        _this.viewerContainer.scrollTop += scrollTop;\n                        _this.updateMobileScrollerPosition();\n                    }\n                }\n            }\n            _this.diagramMouseUp(event);\n            if (_this.pdfViewer.selectedItems.annotations.length !== 0) {\n                _this.disableTextSelectionMode();\n            }\n            else {\n                if (_this.pdfViewer.textSelectionModule) {\n                    _this.pdfViewer.textSelectionModule.enableTextSelectionMode();\n                }\n            }\n            _this.renderStampAnnotation(event);\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n                _this.isgetFocused = true;\n                _this.focusViewerContainer();\n            }\n        };\n        /**\n         * @param {PointerEvent} event - The PointerEvent.\n         * @returns {void}\n         */\n        this.viewerContainerOnPointerEnd = function (event) {\n            if (event.pointerType === 'touch') {\n                event.preventDefault();\n                if (_this.pdfViewer.magnificationModule) {\n                    _this.pdfViewer.magnificationModule.pinchMoveEnd();\n                }\n                _this.pointersForTouch = [];\n                _this.pointerCount = 0;\n            }\n        };\n        this.viewerContainerOnScroll = function (event) {\n            var proxy = null;\n            // eslint-disable-next-line\n            proxy = _this;\n            var allowServerDataBind = proxy.pdfViewer.allowServerDataBinding;\n            proxy.pdfViewer.enableServerDataBinding(false);\n            var scrollposX = 0;\n            var scrollposY = 0;\n            if (event.touches && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode)) {\n                var ratio = (_this.viewerContainer.scrollHeight - _this.viewerContainer.clientHeight) /\n                    (_this.viewerContainer.clientHeight - _this.toolbarHeight);\n                if (_this.isThumb) {\n                    _this.ispageMoved = true;\n                    event.preventDefault();\n                    _this.isScrollerMoving = true;\n                    _this.mobilePageNoContainer.style.display = 'block';\n                    scrollposX = event.touches[0].pageX - _this.scrollX;\n                    scrollposY = event.touches[0].pageY - _this.viewerContainer.offsetTop;\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.isScrollerMovingTimer)) {\n                        _this.isScrollerMovingTimer = setTimeout(function () {\n                            _this.isScrollerMoving = false;\n                            _this.pageViewScrollChanged(_this.currentPageNumber);\n                        }, 300);\n                    }\n                    var differenceY = Math.abs(_this.viewerContainer.scrollTop - (scrollposY * ratio));\n                    if (differenceY > 10) {\n                        clearTimeout(_this.isScrollerMovingTimer);\n                        _this.isScrollerMovingTimer = null;\n                    }\n                    _this.viewerContainer.scrollTop = scrollposY * ratio;\n                    var containerValue = event.touches[0].pageY;\n                    var toolbarHeight = _this.pdfViewer.toolbarModule ? 0 : 50;\n                    if (_this.viewerContainer.scrollTop !== 0 && ((containerValue) <= (_this.viewerContainer.clientHeight - toolbarHeight))) {\n                        _this.mobileScrollerContainer.style.top = containerValue + 'px';\n                    }\n                }\n                else if (event.touches[0].target.className !== 'e-pv-touch-ellipse') {\n                    if (!(_this.isWebkitMobile && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode))) {\n                        _this.mobilePageNoContainer.style.display = 'none';\n                        scrollposY = _this.touchClientY - event.touches[0].pageY;\n                        scrollposX = _this.touchClientX - event.touches[0].pageX;\n                        _this.viewerContainer.scrollTop = _this.viewerContainer.scrollTop + (scrollposY);\n                        _this.viewerContainer.scrollLeft = _this.viewerContainer.scrollLeft + (scrollposX);\n                    }\n                    _this.updateMobileScrollerPosition();\n                    _this.touchClientY = event.touches[0].pageY;\n                    _this.touchClientX = event.touches[0].pageX;\n                }\n            }\n            if (_this.scrollHoldTimer) {\n                clearTimeout(_this.scrollHoldTimer);\n            }\n            var pageIndex = _this.currentPageNumber;\n            _this.scrollHoldTimer = null;\n            _this.contextMenuModule.close();\n            var verticalScrollValue = _this.viewerContainer.scrollTop;\n            for (var i = 0; i < _this.pageCount; i++) {\n                if (_this.pageSize[parseInt(i.toString(), 10)] != null) {\n                    var pageHeight = _this.getPageHeight(i);\n                    if (pageHeight < 150) {\n                        _this.pageStopValue = 75;\n                    }\n                    else if (pageHeight >= 150 && pageHeight < 300) {\n                        _this.pageStopValue = 125;\n                    }\n                    else if (pageHeight >= 300 && pageHeight < 500) {\n                        _this.pageStopValue = 200;\n                    }\n                    else {\n                        _this.pageStopValue = 300;\n                    }\n                    if ((verticalScrollValue + _this.pageStopValue) <= (_this.getPageTop(i) + pageHeight)) {\n                        _this.currentPageNumber = i + 1;\n                        _this.pdfViewer.currentPageNumber = i + 1;\n                        break;\n                    }\n                }\n            }\n            if (_this.pdfViewer.magnificationModule && _this.pdfViewer.magnificationModule.fitType === 'fitToPage' && _this.currentPageNumber > 0) {\n                if (_this.pageSize[_this.currentPageNumber - 1]) {\n                    if (!_this.isPanMode && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && _this.pdfViewer.enableDesktopMode)) {\n                        _this.viewerContainer.scrollTop = _this.pageSize[_this.currentPageNumber - 1].top * _this.getZoomFactor();\n                    }\n                }\n            }\n            _this.renderElementsVirtualScroll(_this.currentPageNumber);\n            if (_this.pdfViewer.toolbarModule) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    _this.pdfViewer.toolbarModule.updateCurrentPage(_this.currentPageNumber);\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _this.pdfViewer.enableDesktopMode) {\n                        _this.pdfViewer.toolbarModule.updateNavigationButtons();\n                    }\n                }\n            }\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) {\n                _this.mobileSpanContainer.innerHTML = _this.currentPageNumber.toString();\n                _this.mobilecurrentPageContainer.innerHTML = _this.currentPageNumber.toString();\n            }\n            if (pageIndex !== _this.currentPageNumber) {\n                if (proxy.pdfViewer.thumbnailViewModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || _this.pdfViewer.enableDesktopMode)) {\n                    proxy.pdfViewer.thumbnailViewModule.gotoThumbnailImage(proxy.currentPageNumber - 1);\n                    proxy.pdfViewer.thumbnailViewModule.isThumbnailClicked = false;\n                }\n                _this.pdfViewer.firePageChange(pageIndex);\n            }\n            if (_this.pdfViewer.magnificationModule) {\n                if (!_this.isPanMode && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && _this.pdfViewer.enableDesktopMode)) {\n                    _this.pdfViewer.magnificationModule.updatePagesForFitPage(_this.currentPageNumber - 1);\n                }\n            }\n            var currentPage = _this.getElement('_pageDiv_' + (_this.currentPageNumber - 1));\n            if (currentPage) {\n                currentPage.style.visibility = 'visible';\n            }\n            if (_this.isViewerMouseDown || (!_this.isViewerMouseDown &&\n                !_this.getPinchZoomed() && !_this.getPinchScrolled() &&\n                !_this.getPagesPinchZoomed() || _this.isViewerMouseWheel)) {\n                if (_this.getRerenderCanvasCreated() && !_this.isPanMode) {\n                    _this.pdfViewer.magnificationModule.clearIntervalTimer();\n                }\n                var data = _this.clientSideRendering ? _this.getLinkInformation(_this.currentPageNumber) :\n                    _this.getStoredData(_this.currentPageNumber);\n                if (data) {\n                    _this.isDataExits = true;\n                    _this.initiatePageViewScrollChanged();\n                    _this.isDataExits = false;\n                }\n                else {\n                    var timer = _this.pdfViewer.scrollSettings.delayPageRequestTimeOnScroll ?\n                        _this.pdfViewer.scrollSettings.delayPageRequestTimeOnScroll : 100;\n                    _this.scrollHoldTimer = setTimeout(function () {\n                        _this.initiatePageViewScrollChanged();\n                    }, timer);\n                }\n            }\n            if (_this.pdfViewer.annotation && _this.navigationPane.commentPanelContainer) {\n                _this.pdfViewer.annotation.stickyNotesAnnotationModule.updateCommentPanelScrollTop(_this.currentPageNumber);\n            }\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !_this.pdfViewer.enableDesktopMode) && event.touches && event.touches[0].target.className !== 'e-pv-touch-ellipse') {\n                setTimeout(function () {\n                    _this.updateMobileScrollerPosition();\n                }, 500);\n            }\n            proxy.pdfViewer.enableServerDataBinding(allowServerDataBind, true);\n        };\n        this.pdfViewer = viewer;\n        this.navigationPane = new _navigation_pane__WEBPACK_IMPORTED_MODULE_3__.NavigationPane(this.pdfViewer, this);\n        this.textLayer = new _index__WEBPACK_IMPORTED_MODULE_2__.TextLayer(this.pdfViewer, this);\n        this.accessibilityTags = new _index__WEBPACK_IMPORTED_MODULE_2__.AccessibilityTags(this.pdfViewer, this);\n        this.signatureModule = new _index__WEBPACK_IMPORTED_MODULE_2__.Signature(this.pdfViewer, this);\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initializeComponent = function () {\n        var element = document.getElementById(this.pdfViewer.element.id);\n        if (element) {\n            this.blazorUIAdaptor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? new _blazor_ui_adaptor__WEBPACK_IMPORTED_MODULE_13__.BlazorUiAdaptor(this.pdfViewer, this) : null;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.pdfViewer.element.classList.add('e-pv-mobile-view');\n            }\n            var controlWidth = '100%';\n            var toolbarDiv = void 0;\n            this.viewerMainContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? element.querySelector('.e-pv-viewer-main-container') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_viewerMainContainer', className: 'e-pv-viewer-main-container' });\n            this.viewerContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? element.querySelector('.e-pv-viewer-container') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_viewerContainer', className: 'e-pv-viewer-container' });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.createMobilePageNumberContainer();\n            }\n            this.viewerContainer.tabIndex = -1;\n            if (this.pdfViewer.enableRtl) {\n                this.viewerContainer.style.direction = 'rtl';\n            }\n            element.style.touchAction = 'pan-x pan-y';\n            this.setMaximumHeight(element);\n            this.mainContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() ? element.querySelector('.e-pv-main-container') : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_mainContainer', className: 'e-pv-main-container' });\n            this.mainContainer.appendChild(this.viewerMainContainer);\n            element.appendChild(this.mainContainer);\n            this.applyViewerHeight(this.mainContainer);\n            if (this.pdfViewer.toolbarModule) {\n                this.navigationPane.initializeNavigationPane();\n                toolbarDiv = this.pdfViewer.toolbarModule.intializeToolbar(controlWidth);\n            }\n            else {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    this.navigationPane.initializeNavigationPane();\n                    toolbarDiv = this.pdfViewer.element.querySelector('.e-pv-toolbar');\n                    if (!this.pdfViewer.enableToolbar) {\n                        this.toolbarHeight = 0;\n                        toolbarDiv.style.display = 'none';\n                    }\n                    if (!this.pdfViewer.enableNavigationToolbar && ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice &&\n                        this.pdfViewer.enableDesktopMode) || (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice))) {\n                        this.navigationPane.sideBarToolbar.style.display = 'none';\n                        this.navigationPane.sideBarToolbarSplitter.style.display = 'none';\n                        if (this.navigationPane.isBookmarkOpen || this.navigationPane.isThumbnailOpen) {\n                            this.navigationPane.updateViewerContainerOnClose();\n                        }\n                    }\n                }\n            }\n            if (toolbarDiv) {\n                this.viewerContainer.style.height = this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, 56);\n            }\n            else {\n                this.viewerContainer.style.height = this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, 0);\n            }\n            var viewerWidth = this.pdfViewer.element.clientWidth;\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n                viewerWidth = viewerWidth - (this.navigationPane.sideBarToolbar ? this.navigationPane.getViewerContainerLeft() : 0) -\n                    (this.navigationPane.commentPanelContainer ? this.navigationPane.getViewerContainerRight() : 0);\n            }\n            this.viewerContainer.style.width = viewerWidth + 'px';\n            this.viewerMainContainer.appendChild(this.viewerContainer);\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.mobileScrollerContainer.style.left = (viewerWidth - parseFloat(this.mobileScrollerContainer.style.width)) + 'px';\n                this.mobilePageNoContainer.style.left = (viewerWidth / 2) - (parseFloat(this.mobilePageNoContainer.style.width) / 2) + 'px';\n                this.mobilePageNoContainer.style.top = (this.pdfViewer.element.clientHeight / 2) + 'px';\n                this.mobilePageNoContainer.style.display = 'none';\n                this.mobilePageNoContainer.appendChild(this.mobilecurrentPageContainer);\n                this.mobilePageNoContainer.appendChild(this.mobilenumberContainer);\n                this.mobilePageNoContainer.appendChild(this.mobiletotalPageContainer);\n                this.viewerContainer.appendChild(this.mobilePageNoContainer);\n                this.viewerMainContainer.appendChild(this.mobileScrollerContainer);\n                this.mobileScrollerContainer.appendChild(this.mobileSpanContainer);\n                if (this.pdfViewer.isAnnotationToolbarVisible && this.pdfViewer.toolbarModule) {\n                    this.pdfViewer.toolbar.showAnnotationToolbar(true);\n                }\n            }\n            this.pageContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_pageViewContainer', className: 'e-pv-page-container', attrs: { 'role': 'document' } });\n            if (this.pdfViewer.enableRtl) {\n                this.pageContainer.style.direction = 'ltr';\n            }\n            this.viewerContainer.appendChild(this.pageContainer);\n            this.pageContainer.style.width = this.viewerContainer.clientWidth + 'px';\n            if (toolbarDiv && this.pdfViewer.thumbnailViewModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode)) {\n                this.pdfViewer.thumbnailViewModule.createThumbnailContainer();\n            }\n            this.createPrintPopup();\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.createGoToPagePopup();\n            }\n            var waitingPopup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_loadingIndicator' });\n            this.viewerContainer.appendChild(waitingPopup);\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.createSpinner)({ target: waitingPopup, cssClass: 'e-spin-center' });\n            this.setLoaderProperties(waitingPopup);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                this.contextMenuModule = new _blazor_context_menu__WEBPACK_IMPORTED_MODULE_11__.BlazorContextMenu(this.pdfViewer, this);\n                var spinnerElement = document.getElementsByClassName(this.pdfViewer.element.id + '_spinner');\n                if (spinnerElement && spinnerElement[0] && (!spinnerElement[0].classList.contains('e-spin-hide'))) {\n                    spinnerElement[0].classList.remove('e-spin-show');\n                    spinnerElement[0].classList.add('e-spin-hide');\n                }\n            }\n            else {\n                this.contextMenuModule = new _index__WEBPACK_IMPORTED_MODULE_2__.ContextMenu(this.pdfViewer, this);\n            }\n            this.contextMenuModule.createContextMenu();\n            this.createFileInputElement();\n            this.wireEvents();\n            if (this.pdfViewer.textSearchModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode)) {\n                this.pdfViewer.textSearchModule.createTextSearchBox();\n            }\n            if (this.pdfViewer.documentPath) {\n                if (this.pdfViewer.enableHtmlSanitizer) {\n                    this.pdfViewer.documentPath = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(this.pdfViewer.documentPath);\n                }\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    this.pdfViewer._dotnetInstance.invokeMethodAsync('LoadDocumentFromClient', this.pdfViewer.documentPath);\n                }\n                else {\n                    this.pdfViewer.load(this.pdfViewer.documentPath, null);\n                }\n            }\n            if (this.pdfViewer.annotationModule) {\n                this.pdfViewer.annotationModule.initializeCollection();\n            }\n        }\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.pdfViewer.enableDesktopMode && this.pdfViewer.toolbarModule) {\n            this.pdfViewer.interactionMode = 'Pan';\n        }\n    };\n    PdfViewerBase.prototype.createMobilePageNumberContainer = function () {\n        this.mobilePageNoContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_mobilepagenoContainer', className: 'e-pv-mobilepagenoscroll-container' });\n        this.mobilecurrentPageContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_mobilecurrentpageContainer', className: 'e-pv-mobilecurrentpage-container' });\n        this.mobilenumberContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_mobiledashedlineContainer', className: 'e-pv-mobiledashedline-container' });\n        this.mobiletotalPageContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_mobiletotalpageContainer', className: 'e-pv-mobiletotalpage-container' });\n        this.mobileScrollerContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_mobilescrollContainer', className: 'e-pv-mobilescroll-container' });\n        this.mobileSpanContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_mobilespanContainer', className: 'e-pv-mobilespanscroll-container' });\n        this.mobileSpanContainer.innerHTML = '1';\n        this.mobilecurrentPageContainer.innerHTML = '1';\n        this.mobilenumberContainer.innerHTML = '&#x2015;&#x2015;&#x2015;&#x2015;&#x2015;';\n        this.mobileScrollerContainer.style.cssFloat = 'right';\n        this.mobileScrollerContainer.style.width = '40px';\n        this.mobileScrollerContainer.style.height = '32px';\n        this.mobileScrollerContainer.style.zIndex = '100';\n        this.mobilePageNoContainer.style.width = '120px';\n        this.mobilePageNoContainer.style.height = '100px';\n        this.mobilePageNoContainer.style.zIndex = '100';\n        this.mobilePageNoContainer.style.position = 'fixed';\n        this.mobileScrollerContainer.addEventListener('touchstart', this.mobileScrollContainerDown.bind(this));\n        this.mobileScrollerContainer.addEventListener('touchend', this.mobileScrollContainerEnd.bind(this));\n        this.mobileScrollerContainer.style.display = 'none';\n    };\n    /**\n     * @private\n     * @param  {string} documentData - file name or base64 string.\n     * @param {string} password - password of the PDF document.\n     * @param  {boolean} isSkipDocumentId - It indicates whether we need to skip removing the jsonDocumentId\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initiatePageRender = function (documentData, password, isSkipDocumentId) {\n        var _this = this;\n        if (isSkipDocumentId === void 0) { isSkipDocumentId = true; }\n        this.isPasswordProtected = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(password) && password !== '') ? true : false;\n        if (this.clientSideRendering) {\n            this.pdfViewer.unload();\n        }\n        this.loadedData = documentData;\n        this.documentId = this.createGUID();\n        PdfViewerBase.sessionStorageManager.documentId = this.documentId;\n        if (this.viewerContainer) {\n            this.viewerContainer.scrollTop = 0;\n        }\n        this.showLoadingIndicator(true);\n        this.hashId = ' ';\n        this.isFileName = false;\n        this.saveDocumentInfo();\n        if (this.pdfViewer.interactionMode === 'Pan') {\n            this.initiatePanning();\n        }\n        if (documentData instanceof Uint8Array) {\n            this.pdfViewer.fileByteArray = documentData;\n            if (this.pdfViewer.toolbarModule && this.pdfViewer.toolbarModule.uploadedDocumentName) {\n                this.setFileName();\n            }\n            if (this.clientSideRendering) {\n                if (this.pdfViewer.fileName === null && typeof this.loadedData === 'string') {\n                    this.setDocumentName(this.loadedData);\n                }\n            }\n            if (this.pdfViewer.downloadFileName) {\n                this.downloadFileName = this.pdfViewer.downloadFileName;\n            }\n            else {\n                this.downloadFileName = this.pdfViewer.fileName;\n            }\n            var jsonObject = this.constructJsonObject(documentData, password, false);\n            this.createAjaxRequest(jsonObject, documentData, password);\n        }\n        else {\n            this.getPdfByteArray(documentData).then(function (pdfbytearray) {\n                var isUrlLoaded = false;\n                var isValidData = true;\n                var isDataLoaded = false;\n                if (typeof documentData == 'string' && (documentData.startsWith('http://') || documentData.startsWith('https://'))) {\n                    isUrlLoaded = true;\n                }\n                if (typeof documentData == 'string' && (documentData.includes('pdf;base64,') || documentData.startsWith('blob:'))) {\n                    isDataLoaded = true;\n                }\n                var isbase64 = false;\n                if (typeof _this.loadedData === 'string') {\n                    isbase64 = _this.loadedData.includes('pdf;base64,');\n                }\n                if ((isUrlLoaded || isDataLoaded) && _this.clientSideRendering) {\n                    _this.pdfViewer.fileByteArray = pdfbytearray;\n                    _this.pdfViewer.uploadedFileByteArray = pdfbytearray;\n                    documentData = pdfbytearray;\n                }\n                else if (!isUrlLoaded && !documentData.includes('pdf;base64,') && _this.clientSideRendering) {\n                    var dataType = _this.identifyDataType(documentData);\n                    var isDataType = dataType === 'URL';\n                    isValidData = _this.isValidPDFBase64(documentData) || isDataType;\n                    if (isValidData) {\n                        documentData = _this.convertBase64(pdfbytearray);\n                        _this.pdfViewer.fileByteArray = documentData;\n                        isDataLoaded = true;\n                    }\n                    else {\n                        _this.invalidFilePopup();\n                    }\n                }\n                else {\n                    documentData = _this.checkDocumentData(_this.loadedData, isSkipDocumentId);\n                }\n                if (isValidData) {\n                    if (_this.pdfViewer.toolbarModule && _this.pdfViewer.toolbarModule.uploadedDocumentName || isDataLoaded ||\n                        (!isDataLoaded && !isUrlLoaded && !documentData.includes('pdf;base64,'))) {\n                        _this.setFileName();\n                    }\n                    if (isUrlLoaded && _this.clientSideRendering) {\n                        if (_this.pdfViewer.fileName === null) {\n                            _this.setDocumentName(_this.loadedData);\n                        }\n                    }\n                    if (_this.pdfViewer.downloadFileName) {\n                        _this.downloadFileName = _this.pdfViewer.downloadFileName;\n                    }\n                    else {\n                        _this.downloadFileName = _this.pdfViewer.fileName;\n                    }\n                    var jsonObject = _this.constructJsonObject(documentData, password, isbase64);\n                    _this.createAjaxRequest(jsonObject, documentData, password);\n                }\n            });\n        }\n    };\n    /**\n     * @param {string} documentId - It describes about the document id\n     * @param {boolean} isFileName - It describes about the whether isFileName is true or not\n     * @param {string} fileName - It describes about the file name\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initiateLoadDocument = function (documentId, isFileName, fileName) {\n        if (documentId) {\n            this.documentId = documentId;\n            PdfViewerBase.sessionStorageManager.documentId = this.documentId;\n        }\n        if (this.viewerContainer) {\n            this.viewerContainer.scrollTop = 0;\n        }\n        this.showLoadingIndicator(true);\n        this.hashId = ' ';\n        this.isFileName = isFileName;\n        this.saveDocumentInfo();\n        if (this.pdfViewer.interactionMode === 'Pan') {\n            this.initiatePanning();\n        }\n        this.setFileName();\n        if (this.pdfViewer.fileName === null) {\n            if (isFileName && fileName) {\n                this.pdfViewer.fileName = fileName;\n                this.jsonDocumentId = this.pdfViewer.fileName;\n            }\n            else {\n                this.pdfViewer.fileName = 'undefined.pdf';\n                this.jsonDocumentId = null;\n            }\n        }\n        if (this.pdfViewer.downloadFileName) {\n            this.downloadFileName = this.pdfViewer.downloadFileName;\n        }\n        else {\n            this.downloadFileName = this.pdfViewer.fileName;\n        }\n    };\n    /**\n     * @param {string} base64 - It describes about the base64\n     * @private\n     * @returns {Uint8Array} - Uint8Array\n     */\n    PdfViewerBase.prototype.convertBase64 = function (base64) {\n        return new Uint8Array(atob(base64).split('').map(function (char) { return char.charCodeAt(0); }));\n    };\n    /**\n     * @param {any} documentDetails - It describes about the document details\n     * @param {string} password - It describes about the password\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.loadSuccess = function (documentDetails, password) {\n        var data = documentDetails;\n        if (data) {\n            if (typeof data !== 'object') {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    this.onControlError(500, data, this.pdfViewer.serverActionSettings.load);\n                    data = null;\n                }\n            }\n            if (data) {\n                while (typeof data !== 'object') {\n                    data = JSON.parse(data);\n                    if (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10))) {\n                        data = parseInt(data, 10);\n                        break;\n                    }\n                }\n                if (data.StatusText && (data.StatusText === 'File Does not Exist')) {\n                    this.showLoadingIndicator(false);\n                }\n                if (data.uniqueId === this.documentId || (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10)))) {\n                    this.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.load, data);\n                    this.requestSuccess(data, null, password);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.mobileScrollContainerDown = function (event) {\n        this.ispageMoved = false;\n        this.isThumb = true;\n        this.isScrollerMoving = false;\n        if (this.isTextMarkupAnnotationModule()) {\n            if (this.pdfViewer.annotationModule.textMarkupAnnotationModule.selectTextMarkupCurrentPage != null &&\n                (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode)) {\n                var pageNumber = this.pdfViewer.annotationModule.textMarkupAnnotationModule.selectTextMarkupCurrentPage;\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.selectTextMarkupCurrentPage = null;\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.clearAnnotationSelection(pageNumber);\n                this.pdfViewer.toolbar.showToolbar(true);\n            }\n        }\n        this.mobileScrollerContainer.addEventListener('touchmove', this.viewerContainerOnScroll.bind(this), true);\n    };\n    /**\n     * @private\n     * @param {MouseEvent} e - default mouse event.\n     * @returns {PointModel} - retuns the bounds.\n     */\n    PdfViewerBase.prototype.relativePosition = function (e) {\n        var currentRect = this.viewerContainer.getBoundingClientRect();\n        var left = e.clientX - currentRect.left;\n        var top = e.clientY - currentRect.top;\n        return { x: left, y: top };\n    };\n    /**\n     * Gets the annotation canvas for a given annotation ID and page index.\n     *\n     * @param {string} id - The unique identifier of the annotation.\n     * @param {number} pageIndex - The index of the page containing the annotation.\n     * @private\n     * @returns {HTMLElement} - The HTML canvas element for the annotation. If the canvas is not found, a new annotation layer is created and returned.\n     */\n    PdfViewerBase.prototype.getAnnotationCanvas = function (id, pageIndex) {\n        var canvas = this.getElement(id + pageIndex);\n        if (canvas || this.isPrint) {\n            return canvas;\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageIndex)) {\n                var pageDiv = this.getElement('_pageDiv_' + pageIndex);\n                var pageWidth = this.pageSize[parseInt(pageIndex.toString(), 10)].width;\n                var pageHeight = this.pageSize[parseInt(pageIndex.toString(), 10)].height;\n                if (pageDiv) {\n                    canvas = this.createAnnotationLayer(pageDiv, pageWidth, pageHeight, pageIndex);\n                    if (this.isShapeBasedAnnotationsEnabled()) {\n                        var commonStyle = 'position:absolute;top:0px;left:0px;overflow:hidden;pointer-events:none;z-index:1000';\n                        if (canvas) {\n                            var bounds = canvas.getBoundingClientRect();\n                            (0,_drawing_dom_util__WEBPACK_IMPORTED_MODULE_9__.renderAdornerLayer)(bounds, commonStyle, canvas, pageIndex, this.pdfViewer);\n                            this.pdfViewer.renderSelector(pageIndex, this.pdfViewer.annotationSelectorSettings);\n                        }\n                    }\n                }\n            }\n            return canvas;\n        }\n    };\n    /**\n     * @param {HTMLElement} pageDiv - pageDiv\n     * @param {number} pageWidth - pageWidth\n     * @param {number} pageHeight - pageHeight\n     * @param {number} pageNumber - pageNumber\n     * @param {string} displayMode - displayMode\n     * @private\n     * @returns {HTMLElement} - htmlelement\n     */\n    PdfViewerBase.prototype.createAnnotationLayer = function (pageDiv, pageWidth, pageHeight, pageNumber, displayMode) {\n        var canvas = this.getElement('_annotationCanvas_' + pageNumber);\n        if (canvas) {\n            this.updateCanvas(canvas, pageWidth, pageHeight, pageNumber);\n            return canvas;\n        }\n        else {\n            var annotationCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas', { id: this.pdfViewer.element.id + '_annotationCanvas_' + pageNumber, className: 'e-pv-annotation-canvas' });\n            this.updateCanvas(annotationCanvas, pageWidth, pageHeight, pageNumber);\n            pageDiv.appendChild(annotationCanvas);\n            return annotationCanvas;\n        }\n    };\n    PdfViewerBase.prototype.setMaximumHeight = function (element) {\n        var currentRect = element.getBoundingClientRect();\n        if ((!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) || (currentRect && currentRect.height === 0)) {\n            element.style.minHeight = '500px';\n        }\n        this.updateWidth();\n        this.updateHeight();\n    };\n    PdfViewerBase.prototype.applyViewerHeight = function (element) {\n        var currentRect = element.getBoundingClientRect();\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && currentRect && currentRect.height === 0) {\n            element.style.minHeight = '500px';\n        }\n    };\n    /**\n     * @param {HTMLElement} canvas - canvas\n     * @param {number} pageWidth - pageWidth\n     * @param {number} pageHeight - pageHeight\n     * @param {number} pageNumber - pageNumber\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateCanvas = function (canvas, pageWidth, pageHeight, pageNumber) {\n        var zoom = this.getZoomFactor();\n        var ratio = this.getZoomRatio(zoom);\n        canvas.width = pageWidth * ratio;\n        canvas.height = pageHeight * ratio;\n        canvas.style.width = (pageWidth * zoom) + 'px';\n        canvas.style.height = (pageHeight * zoom) + 'px';\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = '1';\n        this.applyElementStyles(canvas, pageNumber);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateWidth = function () {\n        if (this.pdfViewer.width.toString() !== 'auto') {\n            this.pdfViewer.element.style.width = this.pdfViewer.width;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateHeight = function () {\n        if (this.pdfViewer.height.toString() !== 'auto') {\n            this.pdfViewer.element.style.height = this.pdfViewer.height;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateViewerContainer = function () {\n        var sideBarContentContainer = this.getElement('_sideBarContentContainer');\n        if (sideBarContentContainer && sideBarContentContainer.style.display === 'none') {\n            this.navigationPane.updateViewerContainerOnClose();\n        }\n        else if (sideBarContentContainer && sideBarContentContainer.style.display === 'block') {\n            this.navigationPane.updateViewerContainerOnExpand();\n        }\n        else {\n            this.updateViewerContainerSize();\n        }\n        var toolbarModule = this.pdfViewer.toolbarModule;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.viewerContainer) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toolbarModule) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toolbarModule.toolbarElement)) {\n            // eslint-disable-next-line\n            if (toolbarModule.toolbarElement.style.display == 'none') {\n                this.viewerContainer.style.height = this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, 0);\n            } // eslint-disable-next-line\n            else if (toolbarModule.toolbarElement.style.display == 'block') {\n                var toolbarContainer = document.getElementById(this.pdfViewer.element.id + '_toolbarContainer');\n                if (toolbarContainer) {\n                    var toolbarHeight = toolbarContainer.getBoundingClientRect().height;\n                    this.viewerContainer.style.height =\n                        this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, toolbarHeight);\n                }\n            }\n            if (this.navigationPane.sideBarToolbar) {\n                this.navigationPane.sideBarToolbar.style.height =\n                    this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, 0);\n            }\n        }\n        if (toolbarModule) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                if (this.pdfViewer.enableToolbar || this.pdfViewer.enableAnnotationToolbar) {\n                    this.pdfViewer._dotnetInstance.invokeMethodAsync('RefreshToolbarItems');\n                }\n            }\n            else {\n                if (this.pdfViewer.enableToolbar) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toolbarModule.toolbar)) {\n                        toolbarModule.toolbar.refreshOverflow();\n                    }\n                }\n                if (this.pdfViewer.enableAnnotationToolbar && toolbarModule.annotationToolbarModule) {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toolbarModule.annotationToolbarModule) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(toolbarModule.annotationToolbarModule.toolbar)) {\n                        toolbarModule.annotationToolbarModule.toolbar.refreshOverflow();\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.updateViewerContainerSize = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.viewerContainer)) {\n            this.viewerContainer.style.width = this.pdfViewer.element.clientWidth + 'px';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pageContainer)) {\n            this.pageContainer.style.width = this.viewerContainer.offsetWidth + 'px';\n        }\n        this.updateZoomValue();\n    };\n    PdfViewerBase.prototype.mobileScrollContainerEnd = function (event) {\n        if (!this.ispageMoved) {\n            this.goToPagePopup.show();\n        }\n        this.isThumb = false;\n        this.ispageMoved = false;\n        this.isScrollerMoving = false;\n        this.pageViewScrollChanged(this.currentPageNumber);\n        this.mobileScrollerContainer.removeEventListener('touchmove', this.viewerContainerOnScroll.bind(this), true);\n        this.mobilePageNoContainer.style.display = 'none';\n    };\n    /**\n     * @private\n     * @param {any} data - data.\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.checkRedirection = function (data) {\n        var redirect = false;\n        if (data && typeof (data) === 'object' && (data.redirectUrl || data.redirectUri || data.redirectUrl === '' || data.redirectUri === '')) {\n            if (data.redirectUrl === '' || data.redirectUri === '') {\n                redirect = true;\n            }\n            else {\n                if (data.redirectUrl) {\n                    window.location.href = data.redirectUrl;\n                }\n                else {\n                    window.location.href = data.redirectUri;\n                }\n            }\n        }\n        else if (data && typeof (data) === 'string' && (data.includes('redirectUrl') || data.includes('redirectUri'))) {\n            if (JSON.parse(data).redirectUrl === '' || JSON.parse(data).redirectUri === '') {\n                redirect = true;\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(JSON.parse(data).redirectUrl) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(JSON.parse(data).redirectUri)) {\n                    if (data.includes('redirectUrl')) {\n                        window.location.href = JSON.parse(data).redirectUrl;\n                    }\n                    else {\n                        window.location.href = JSON.parse(data).redirectUri;\n                    }\n                }\n            }\n        }\n        return redirect;\n    };\n    /**\n     * @param {string} input - Gets the input\n     * @private\n     * @returns {Promise<string | null>} - promise\n     */\n    PdfViewerBase.prototype.getPdfByteArray = function (input) {\n        if (typeof input == 'string' && this.clientSideRendering && (input.startsWith('http://') || input.startsWith('https://') || input.includes('pdf;base64,') || input.startsWith('blob:'))) {\n            return fetch(input)\n                .then(function (response) {\n                if (response.ok) {\n                    return response.arrayBuffer();\n                }\n                else {\n                    console.error('Error fetching PDF:', response.statusText);\n                    throw new Error(response.statusText);\n                }\n            })\n                .then(function (pdfData) {\n                return new Uint8Array(pdfData);\n            })\n                .catch(function (error) {\n                console.error('Error fetching PDF:', error.message);\n                throw error;\n            });\n        }\n        else {\n            // eslint-disable-next-line\n            return Promise.resolve(input);\n        }\n    };\n    /**\n     * @param {string} input - Gets the input\n     * @private\n     * @returns {Promise<string | null>} - promise\n     */\n    PdfViewerBase.prototype.getPdfBase64 = function (input) {\n        if (input.startsWith('http://') || input.startsWith('https://') || input.startsWith('blob:')) {\n            return fetch(input)\n                .then(function (response) {\n                if (response.ok) {\n                    return response.arrayBuffer();\n                }\n                else {\n                    console.error('Error fetching PDF:', response.statusText);\n                    throw new Error(response.statusText);\n                }\n            })\n                .then(function (pdfData) {\n                var binary = new Uint8Array(pdfData).reduce(function (str, byte) { return str + String.fromCharCode(byte); }, '');\n                var base64String = btoa(binary);\n                return base64String;\n            })\n                .catch(function (error) {\n                console.error('Error fetching PDF:', error.message);\n                throw error;\n            });\n        }\n        else {\n            // eslint-disable-next-line\n            return Promise.resolve(input);\n        }\n    };\n    PdfViewerBase.prototype.isValidPDFBase64 = function (str) {\n        if (str.length % 4 !== 0 || !/^[A-Za-z0-9+/]+={0,2}$/.test(str.replace(/\\s/g, ''))) {\n            return false;\n        }\n        try {\n            return atob(str).indexOf('%PDF-') > -1;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.isUrl = function (str) {\n        try {\n            new URL(str);\n            return true;\n        }\n        catch (_) {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.isBase64 = function (str) {\n        var base64Regex = /^[A-Za-z0-9+/=]+$/;\n        return base64Regex.test(str);\n    };\n    PdfViewerBase.prototype.identifyDataType = function (input) {\n        if (this.isUrl(input)) {\n            return 'URL';\n        }\n        else if (this.isBase64(input)) {\n            return 'Base64';\n        }\n        else {\n            return 'Unknown';\n        }\n    };\n    PdfViewerBase.prototype.createAjaxRequest = function (jsonObject, documentData, password) {\n        if (this.corruptPopup) {\n            this.closeCorruptPopup();\n        }\n        if (this.notifyDialog) {\n            this.closeNotification();\n        }\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        if (this.pdfViewer.serverActionSettings) {\n            this.loadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n            this.loadRequestHandler.url = this.pdfViewer.serviceUrl + '/' + this.pdfViewer.serverActionSettings.load;\n            this.loadRequestHandler.responseType = 'json';\n            this.loadRequestHandler.mode = true;\n            jsonObject['action'] = 'Load';\n            jsonObject['elementId'] = this.pdfViewer.element.id;\n            if (this.clientSideRendering) {\n                var data = this.pdfViewer.pdfRendererModule.load(documentData, this.documentId, password, jsonObject);\n                if (data) {\n                    if (typeof data !== 'object') {\n                        try {\n                            data = JSON.parse(data);\n                        }\n                        catch (error) {\n                            proxy.onControlError(500, data, this.pdfViewer.serverActionSettings.load);\n                            data = null;\n                        }\n                    }\n                    if (data) {\n                        while (typeof data !== 'object') {\n                            data = JSON.parse(data);\n                            if (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10))) {\n                                data = parseInt(data, 10);\n                                break;\n                            }\n                        }\n                        if (data.uniqueId === proxy.documentId || (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10)))) {\n                            proxy.updateFormFieldName(data);\n                            proxy.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.load, data);\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data['isTaggedPdf']) && data['isTaggedPdf']) {\n                                proxy.isTaggedPdf = true;\n                            }\n                            proxy.requestSuccess(data, documentData, password);\n                        }\n                    }\n                }\n                else {\n                    proxy.invalidFilePopup();\n                }\n            }\n            else {\n                if (documentData.startsWith('blob:')) {\n                    proxy.getPdfBase64(documentData)\n                        .then(function (pdfBase64) {\n                        if (pdfBase64) {\n                            jsonObject.document = pdfBase64;\n                            jsonObject.isFileName = false;\n                        }\n                        proxy.loadRequestHandler.send(jsonObject);\n                    })\n                        .catch(function (error) {\n                        proxy.invalidFilePopup();\n                    });\n                }\n                else {\n                    proxy.loadRequestHandler.send(jsonObject);\n                }\n                this.loadRequestHandler.onSuccess = function (result) {\n                    var data = result.data;\n                    var redirect = proxy.checkRedirection(data);\n                    if (redirect) {\n                        proxy.showLoadingIndicator(false);\n                    }\n                    else {\n                        if (data) {\n                            if (typeof data !== 'object') {\n                                try {\n                                    data = JSON.parse(data);\n                                }\n                                catch (error) {\n                                    proxy.onControlError(500, data, this.pdfViewer.serverActionSettings.load);\n                                    data = null;\n                                }\n                            }\n                            if (data) {\n                                while (typeof data !== 'object') {\n                                    data = JSON.parse(data);\n                                    if (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10))) {\n                                        data = parseInt(data, 10);\n                                        break;\n                                    }\n                                }\n                                if (data.uniqueId === proxy.documentId || (typeof parseInt(data, 10) === 'number' && !isNaN(parseInt(data, 10)))) {\n                                    proxy.updateFormFieldName(data);\n                                    proxy.pdfViewer.fireAjaxRequestSuccess(this.pdfViewer.serverActionSettings.load, data);\n                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data['isTaggedPdf']) && data['isTaggedPdf']) {\n                                        proxy.isTaggedPdf = true;\n                                    }\n                                    proxy.requestSuccess(data, documentData, password);\n                                }\n                            }\n                        }\n                        else {\n                            proxy.showLoadingIndicator(false);\n                            proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('Import PDF Failed'));\n                        }\n                    }\n                };\n                this.loadRequestHandler.onFailure = function (result) {\n                    var statusString = result.status.toString().split('')[0];\n                    if (statusString === '4') {\n                        proxy.openNotificationPopup('Client error');\n                    }\n                    else {\n                        proxy.openNotificationPopup();\n                    }\n                    proxy.showLoadingIndicator(false);\n                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.load);\n                };\n                this.loadRequestHandler.onError = function (result) {\n                    proxy.openNotificationPopup();\n                    proxy.showLoadingIndicator(false);\n                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.load);\n                };\n            }\n        }\n    };\n    PdfViewerBase.prototype.invalidFilePopup = function () {\n        this.showLoadingIndicator(false);\n        this.openImportExportNotificationPopup(this.pdfViewer.localeObj.getConstant('Import PDF Failed'));\n    };\n    // EJ2-60380 - As of now, in form designer the element name is taken fromfield.ActualFieldName (with hypen) but for\n    // Form fields it is taken from field.FieldName (without hypen).\n    // For this reason when user taken the form feilds on button click, name of the form feilds are different with and without form designer module\n    PdfViewerBase.prototype.updateFormFieldName = function (data) {\n        if (data && data.PdfRenderedFormFields && data.PdfRenderedFormFields.length > 0) {\n            var field = void 0;\n            for (var i = 0; i < data.PdfRenderedFormFields.length; i++) {\n                field = data.PdfRenderedFormFields[parseInt(i.toString(), 10)];\n                if (field) {\n                    if (field.ActualFieldName) {\n                        field.FieldName = field.ActualFieldName;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(field.Value)) {\n                        field.Value = '';\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} text - The text.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.createNotificationPopup = function (text) {\n        var _this = this;\n        if (!this.isMessageBoxOpen) {\n            var popupElement_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_notify', className: 'e-pv-notification-popup' });\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.pageOrganizer) && this.pdfViewer.pageOrganizer.dialogDivElement) {\n                this.pdfViewer.pageOrganizer.dialogDivElement.appendChild(popupElement_1);\n            }\n            else {\n                this.viewerContainer.appendChild(popupElement_1);\n            }\n            this.notifyDialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.Dialog({\n                showCloseIcon: true, closeOnEscape: false, isModal: true, header: this.pdfViewer.localeObj.getConstant('PdfViewer'),\n                buttons: [{\n                        buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true },\n                        click: this.closeNotification.bind(this)\n                    }],\n                content: '<div class=\"e-pv-notification-popup-content\" tabindex = \"0\">' + text + '</div>', target: this.pdfViewer.element,\n                beforeClose: function () {\n                    _this.notifyDialog.destroy();\n                    if (_this.pdfViewer.pageOrganizerModule) {\n                        _this.pdfViewer.pageOrganizerModule.showOrganizeLoadingIndicator(false);\n                    }\n                    if (_this.pdfViewer.element) {\n                        try {\n                            _this.pdfViewer.element.removeChild(popupElement_1);\n                        }\n                        catch (error) {\n                            popupElement_1.parentElement.removeChild(popupElement_1);\n                        }\n                    }\n                    if (_this.pdfViewer.textSearchModule) {\n                        _this.pdfViewer.textSearch.isMessagePopupOpened = false;\n                    }\n                    _this.isMessageBoxOpen = false;\n                }\n            });\n            if (this.pdfViewer.enableRtl) {\n                this.notifyDialog.enableRtl = true;\n            }\n            this.notifyDialog.appendTo(popupElement_1);\n            this.isMessageBoxOpen = true;\n        }\n    };\n    /**\n     * @private\n     * @param {string} errorString - The message to be displayed.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.openNotificationPopup = function (errorString) {\n        var _this = this;\n        if (this.pdfViewer.showNotificationDialog) {\n            if (errorString === 'Client error') {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_Clienterror');\n                    promise.then(function (value) {\n                        _this.createNotificationPopup(value);\n                    });\n                }\n                else {\n                    this.createNotificationPopup(this.pdfViewer.localeObj.getConstant('Client error'));\n                }\n            }\n            else {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_Servererror');\n                    promise.then(function (value) {\n                        _this.createNotificationPopup(value);\n                    });\n                }\n                else {\n                    this.createNotificationPopup(this.pdfViewer.localeObj.getConstant('Server error'));\n                }\n            }\n            if (this.getElement('_notify')) {\n                this.getElement('_notify').classList.add('e-pv-notification-large-content');\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {string} errorString - The message to be shown.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.showNotificationPopup = function (errorString) {\n        if (!this.pdfViewer.showNotificationDialog && errorString !== '') {\n            this.createNotificationPopup(errorString);\n            if (this.getElement('_notify')) {\n                this.getElement('_notify').classList.add('e-pv-notification-large-content');\n            }\n        }\n    };\n    PdfViewerBase.prototype.requestSuccess = function (data, documentData, password) {\n        if (this.clientSideRendering) {\n            if (data.isDigitalSignaturePresent && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.digitialSignatureFile) && data.digitialSignatureFile\n                && this.pdfViewer.pdfRenderer.digitialByteArray && this.pdfViewer.pdfRenderer.digitialByteArray.length > 0) {\n                this.pdfViewer.fileByteArray = this.pdfViewer.pdfRenderer.digitialByteArray;\n                this.pdfViewer.pdfRenderer.digitialByteArray = null;\n            }\n            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.fileByteArray) && this.pdfViewer.uploadedFileByteArray) {\n                this.pdfViewer.fileByteArray = this.pdfViewer.uploadedFileByteArray;\n                this.pdfViewer.uploadedFileByteArray = null;\n            }\n            else if (!this.pdfViewer.fileByteArray && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbarModule) &&\n                this.pdfViewer.toolbarModule.uploadedFile) {\n                if (typeof this.pdfViewer.toolbarModule.uploadedFile == 'string') {\n                    this.pdfViewer.fileByteArray = this.convertBase64(this.pdfViewer.toolbarModule.uploadedFile.replace(/^data:+[a-zA-Z]+\\/[a-zA-Z]+;base64,/g, ''));\n                }\n            }\n            else if (!this.pdfViewer.fileByteArray && data.documentData) {\n                this.pdfViewer.fileByteArray = this.convertBase64(data.documentData);\n            }\n        }\n        if (data && data.pageCount !== undefined) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() && this.isPassword) {\n                this.isPassword = false;\n                this.isPasswordAvailable = false;\n                this.pdfViewer._dotnetInstance.invokeMethodAsync('ClosePasswordDialog');\n            }\n            if (password && password !== '') {\n                this.passwordData = password;\n            }\n            this.pdfViewer.allowServerDataBinding = false;\n            this.pageCount = data.pageCount;\n            this.pdfViewer.pageCount = data.pageCount;\n            this.hashId = data.hashId;\n            this.documentLiveCount = data.documentLiveCount;\n            this.isAnnotationCollectionRemoved = false;\n            this.saveDocumentHashData();\n            this.saveFormfieldsData(data);\n            this.pdfViewer.allowServerDataBinding = true;\n            if (this.clientSideRendering) {\n                this.isDigitalSignaturePresent = data.isDigitalSignaturePresent;\n            }\n            else {\n                this.digitalSignaturePages = data.digitalSignaturePages;\n            }\n            this.pageRender(data);\n            var pageData = { pageCount: data.pageCount, pageSizes: data.pageSizes };\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_pagedata', JSON.stringify(pageData));\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.mobileScrollerContainer.style.display = '';\n                var toolbarHeight = this.pdfViewer.toolbarModule ? this.toolbarHeight : 0;\n                this.mobileScrollerContainer.style.top = (toolbarHeight) + 'px';\n            }\n            this.restrictionList = data.RestrictionSummary;\n            this.RestrictionEnabled(this.restrictionList, false);\n        }\n        else {\n            this.pageCount = 0;\n            this.currentPageNumber = 0;\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.mobileScrollerContainer.style.display = 'none';\n            }\n            if (data === 4) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    // 4 is error code for encrypted document.\n                    this.renderPasswordPopup(documentData, password, this.isImportDoc);\n                }\n            }\n            else if (data === 3) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    // 3 is error code for corrupted document.\n                    this.renderCorruptPopup(this.isImportDoc);\n                }\n            }\n            if (this.pdfViewer.toolbarModule) {\n                this.pdfViewer.toolbarModule.updateToolbarItems();\n            }\n        }\n        var annotationModule = this.pdfViewer.annotationModule;\n        if (annotationModule && annotationModule.textMarkupAnnotationModule &&\n            annotationModule.textMarkupAnnotationModule.\n                isEnableTextMarkupResizer(annotationModule.textMarkupAnnotationModule.currentTextMarkupAddMode)) {\n            annotationModule.textMarkupAnnotationModule.createAnnotationSelectElement();\n        }\n    };\n    PdfViewerBase.prototype.RestrictionEnabled = function (restrictionSummary, isEnable) {\n        if (restrictionSummary) {\n            for (var i = 0; i < restrictionSummary.length; i++) {\n                this.EnableRestriction(restrictionSummary[parseInt(i.toString(), 10)], isEnable);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    if (this.pdfViewer.toolbarModule) {\n                        this.pdfViewer.toolbarModule.DisableToolbarItems(restrictionSummary[parseInt(i.toString(), 10)], isEnable);\n                    }\n                }\n                else {\n                    if (this.pdfViewer.toolbarModule) {\n                        this.pdfViewer._dotnetInstance.invokeMethodAsync('RestrictToolbarItems', restrictionSummary, isEnable);\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.EnableRestriction = function (restrictionSummary, isEnable) {\n        switch (restrictionSummary) {\n            case 'Print':\n                this.pdfViewer.enablePrint = isEnable;\n                break;\n            case 'CopyContent':\n                this.pdfViewer.enableTextSelection = isEnable;\n                break;\n            case 'FillFields':\n                this.pdfViewer.enableFormFields = isEnable;\n                this.enableFormFieldButton(isEnable);\n                break;\n            case 'EditAnnotations':\n                this.pdfViewer.annotationSettings.isLock = true;\n                break;\n        }\n    };\n    PdfViewerBase.prototype.pageRender = function (data) {\n        this.document = null;\n        this.passwordDialogReset();\n        if (this.passwordPopup) {\n            this.passwordPopup.hide();\n        }\n        var pageIndex = 0;\n        this.initPageDiv(data);\n        this.currentPageNumber = pageIndex + 1;\n        this.pdfViewer.currentPageNumber = pageIndex + 1;\n        this.previousZoomValue = this.pdfViewer.zoomValue;\n        var isZoomMode = false;\n        if (this.pdfViewer.magnificationModule) {\n            this.pdfViewer.magnificationModule.isAutoZoom = true;\n            if (this.pdfViewer.zoomValue && this.pdfViewer.zoomValue > 0) {\n                if (this.pdfViewer.zoomValue !== 100) {\n                    isZoomMode = true;\n                }\n                this.isInitialPageMode = true;\n                this.pdfViewer.magnification.zoomTo(this.pdfViewer.zoomValue);\n            }\n            if (this.pdfViewer.zoomMode === 'FitToWidth') {\n                this.isInitialPageMode = true;\n                isZoomMode = true;\n                this.pdfViewer.magnificationModule.fitToWidth();\n            }\n            else if (this.pdfViewer.zoomMode === 'FitToPage') {\n                this.isInitialPageMode = true;\n                isZoomMode = true;\n                this.pdfViewer.magnificationModule.fitToPage();\n            }\n            this.documentLoaded = true;\n            this.pdfViewer.magnificationModule.isInitialLoading = true;\n            this.onWindowResize();\n            this.documentLoaded = false;\n            this.pdfViewer.magnificationModule.isInitialLoading = false;\n        }\n        this.isDocumentLoaded = true;\n        var viewPortWidth = 816;\n        viewPortWidth = parseInt(viewPortWidth, 10);\n        if (this.clientSideRendering) {\n            // eslint-disable-next-line\n            var proxy_1 = this;\n            var fileByteArray = this.pdfViewer.fileByteArray;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fileByteArray) && fileByteArray.length > 0) {\n                this.pdfViewerRunner.addTask({ uploadedFile: fileByteArray, message: 'LoadPageCollection', password: this.passwordData, pageIndex: pageIndex, isZoomMode: isZoomMode }, _pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_14__.TaskPriorityLevel.High);\n                fileByteArray = null;\n            }\n            else {\n                this.renderCorruptPopup(false);\n            }\n            this.pdfViewerRunner.onMessage('PageLoaded,LoadedStampForFormFields,LoadedStamp', function (event) {\n                if (event.data.message === 'PageLoaded') {\n                    proxy_1.initialPagesRendered(event.data.pageIndex, event.data.isZoomMode);\n                }\n                else if (event.data.message === 'LoadedStampForFormFields') {\n                    proxy_1.initialPagesRenderedForSign(event.data);\n                }\n                else if (event.data.message === 'LoadedStamp') {\n                    proxy_1.pdfViewer.pdfRendererModule.renderer.initialPagesRendered(event.data);\n                }\n            });\n        }\n        else {\n            this.initialPagesRendered(pageIndex, isZoomMode);\n        }\n        this.showLoadingIndicator(false);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            if (this.pdfViewer.toolbarModule) {\n                this.pdfViewer.toolbarModule.uploadedDocumentName = null;\n                this.pdfViewer.toolbarModule.updateCurrentPage(this.currentPageNumber);\n                this.pdfViewer.toolbarModule.updateToolbarItems();\n                if (this.pdfViewer.toolbar && this.pdfViewer.toolbar.annotationToolbarModule) {\n                    this.pdfViewer.toolbar.annotationToolbarModule.enableAnnotationAddTools(true);\n                }\n            }\n        }\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            this.mobileSpanContainer.innerHTML = this.currentPageNumber.toString();\n            this.mobilecurrentPageContainer.innerHTML = this.currentPageNumber.toString();\n        }\n    };\n    PdfViewerBase.prototype.initialPagesRenderedForSign = function (data) {\n        var canvas = document.createElement('canvas');\n        var value = data.value, width = data.width, height = data.height, formFieldName = data.formFieldName, formFieldList = data.formFieldList, PageIndex = data.PageIndex;\n        var formFieldLists = JSON.parse(formFieldList);\n        canvas.width = width;\n        canvas.height = height;\n        var canvasContext = canvas.getContext('2d');\n        var imageData = canvasContext.createImageData(width, height);\n        imageData.data.set(value);\n        canvasContext.putImageData(imageData, 0, 0);\n        var imageUrl = canvas.toDataURL();\n        var formFieldBaseName = this.removeTrailingNumber(formFieldName);\n        var formField = formFieldLists.find(function (field) { return field.FieldName === formFieldBaseName; });\n        var LineBounds = formField.LineBounds;\n        var padding = Math.min(LineBounds.Height / this.pdfViewer.formFieldsModule.paddingDifferenceValue, LineBounds.Width / this.pdfViewer.formFieldsModule.paddingDifferenceValue);\n        var maxHeight = LineBounds.Height - padding;\n        var maxWidth = LineBounds.Width - padding;\n        var ratio = Math.min(maxWidth / width, maxHeight / height);\n        var adjustedWidth = width * ratio;\n        var adjustedHeight = height * ratio;\n        var x = LineBounds.X + (LineBounds.Width - adjustedWidth) / 2;\n        var y = LineBounds.Y + (LineBounds.Height - adjustedHeight) / 2;\n        var formFieldObject = new _index__WEBPACK_IMPORTED_MODULE_2__.PdfRenderedFields();\n        formFieldObject.LineBounds = {\n            X: x,\n            Y: y,\n            Width: adjustedWidth,\n            Height: adjustedHeight\n        };\n        formFieldObject.Value = imageUrl;\n        formFieldObject.ActualFieldName = null;\n        formFieldObject.Name = 'SignatureImage';\n        formFieldObject.FieldName = formFieldName;\n        formFieldObject.PageIndex = PageIndex;\n        this.pdfViewer.pdfRendererModule.formFieldsBase.PdfRenderedFormFields.push(formFieldObject);\n        var updatedFormData = JSON.stringify(this.pdfViewer.pdfRendererModule.formFieldsBase.PdfRenderedFormFields);\n        this.setItemInSessionStorage(updatedFormData, '_formfields');\n    };\n    PdfViewerBase.prototype.removeTrailingNumber = function (input) {\n        return input.replace(/_\\d+$/, '');\n    };\n    PdfViewerBase.prototype.initialPagesRendered = function (pageIndex, isZoomMode) {\n        if (this.renderedPagesList.indexOf(pageIndex) === -1 && !isZoomMode) {\n            this.createRequestForRender(pageIndex);\n            var pageNumber = pageIndex + 1;\n            var renderLimit = this.pdfViewer.initialRenderPages <= this.pageCount ?\n                (this.pdfViewer.initialRenderPages > this.pageRenderCount) ?\n                    this.pdfViewer.initialRenderPages : 2 : this.pageCount;\n            for (var i = 1; i < renderLimit; i++) {\n                this.createRequestForRender(i);\n                pageNumber = pageNumber + 1;\n            }\n            if (this.pageSize[parseInt(pageNumber.toString(), 10)]) {\n                var pageTop = this.getPageTop(pageNumber);\n                var viewerHeight = this.viewerContainer.clientHeight;\n                while (viewerHeight > pageTop) {\n                    if (this.pageSize[parseInt(pageNumber.toString(), 10)]) {\n                        this.renderPageElement(pageNumber);\n                        this.createRequestForRender(pageNumber);\n                        pageTop = this.getPageTop(pageNumber);\n                        pageNumber = pageNumber + 1;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {string} documentData - It gets the document data\n     * @param {string} password - It gets the password\n     * @param {boolean} isImportDoc - It gets whether the isImportDoc is true or false\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.renderPasswordPopup = function (documentData, password, isImportDoc) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            if (!this.isPasswordAvailable) {\n                if (this.isFileName) {\n                    this.document = documentData;\n                }\n                else {\n                    if (documentData instanceof Uint8Array) {\n                        this.document = documentData;\n                    }\n                    else {\n                        this.document = 'data:application/pdf;base64,' + documentData;\n                    }\n                }\n                this.isPasswordAvailable = true;\n                this.createPasswordPopup(isImportDoc);\n                this.pdfViewer.fireDocumentLoadFailed(true, null);\n                this.passwordPopup.show();\n            }\n            else {\n                this.pdfViewer.fireDocumentLoadFailed(true, password);\n                this.promptElement.classList.add('e-pv-password-error');\n                this.promptElement.textContent = this.pdfViewer.localeObj.getConstant('Invalid Password');\n                this.promptElement.focus();\n                if (this.isFileName) {\n                    this.document = documentData;\n                }\n                else {\n                    if (documentData instanceof Uint8Array) {\n                        this.document = documentData;\n                    }\n                    else {\n                        this.document = 'data:application/pdf;base64,' + documentData;\n                    }\n                }\n                this.passwordPopup.show();\n            }\n        }\n        else {\n            var promptElement_1 = document.getElementById(this.pdfViewer.element.id + '_prompt');\n            var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_EnterPassword');\n            promise.then(function (value) {\n                promptElement_1.textContent = value;\n            });\n            var passwordInput_1 = document.querySelector('#' + this.pdfViewer.element.id + '_password_input');\n            passwordInput_1.addEventListener('keyup', function () {\n                if (passwordInput_1.value === '') {\n                    _this.passwordDialogReset();\n                }\n            });\n            passwordInput_1.addEventListener('focus', function () {\n                passwordInput_1.parentElement.classList.add('e-input-focus');\n            });\n            passwordInput_1.addEventListener('blur', function () {\n                passwordInput_1.parentElement.classList.remove('e-input-focus');\n            });\n            if (!this.isPasswordAvailable) {\n                if (this.isFileName) {\n                    this.document = documentData;\n                }\n                else {\n                    this.document = 'data:application/pdf;base64,' + documentData;\n                }\n                this.isPasswordAvailable = true;\n                this.pdfViewer.fireDocumentLoadFailed(true, null);\n            }\n            else {\n                this.pdfViewer.fireDocumentLoadFailed(true, password);\n                promptElement_1.classList.add('e-pv-password-error');\n                var promise_1 = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_InvalidPassword');\n                promise_1.then(function (value) {\n                    promptElement_1.textContent = value;\n                });\n                promptElement_1.focus();\n                if (this.isFileName) {\n                    this.document = documentData;\n                }\n                else {\n                    this.document = 'data:application/pdf;base64,' + documentData;\n                }\n            }\n            this.pdfViewer._dotnetInstance.invokeMethodAsync('OpenPasswordDialog');\n        }\n    };\n    /**\n     * @param {boolean} isImportDoc - Checks it is imported doc or npt\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.renderCorruptPopup = function (isImportDoc) {\n        this.pdfViewer.fireDocumentLoadFailed(false, null);\n        this.documentId = null;\n        if (this.pdfViewer.showNotificationDialog) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                this.createCorruptedPopup(isImportDoc);\n                this.corruptPopup.show();\n            }\n            else {\n                this.pdfViewer._dotnetInstance.invokeMethodAsync('OpenCorruptedDialog');\n            }\n        }\n    };\n    /**\n     * @param {string} documentData - It gets the document data\n     * @param {string} password - It gets the password\n     * @param {boolean} isBase64String - It gets whether the isBase64String is true or not\n     * @private\n     * @returns {Object} - Object\n     */\n    PdfViewerBase.prototype.constructJsonObject = function (documentData, password, isBase64String) {\n        var jsonObject;\n        if (password) {\n            this.isPasswordAvailable = true;\n            this.passwordData = password;\n            jsonObject = { document: documentData, password: password, isClientsideLoading: isBase64String, zoomFactor: '1', isFileName: this.isFileName.toString(), uniqueId: this.documentId, showDigitalSignatureAppearance: this.pdfViewer.showDigitalSignatureAppearance };\n        }\n        else {\n            this.isPasswordAvailable = false;\n            this.passwordData = '';\n            jsonObject = { document: documentData, zoomFactor: '1', isClientsideLoading: isBase64String, isFileName: this.isFileName.toString(), uniqueId: this.documentId, hideEmptyDigitalSignatureFields: this.pdfViewer.hideEmptyDigitalSignatureFields, showDigitalSignatureAppearance: this.pdfViewer.showDigitalSignatureAppearance };\n        }\n        return jsonObject;\n    };\n    /**\n     * @private\n     * @param {string} documentData - It describes about the document data\n     * @param  {boolean} isSkipDocumentId - It indicates whether we need to skip removing the jsonDocumentId\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.checkDocumentData = function (documentData, isSkipDocumentId) {\n        if (isSkipDocumentId === void 0) { isSkipDocumentId = true; }\n        var base64String;\n        if (this.isValidPDFBase64(documentData)) {\n            base64String = documentData;\n        }\n        else {\n            base64String = documentData.split('base64,')[1];\n        }\n        if (base64String === undefined || !this.isValidPDFBase64(base64String)) {\n            this.isFileName = true;\n            this.jsonDocumentId = documentData;\n            if (this.pdfViewer.fileName === null && (documentData.startsWith('http://') || documentData.startsWith('https://') || documentData.endsWith('.pdf'))) {\n                this.setDocumentName(documentData);\n                base64String = documentData;\n            }\n            else if (documentData.startsWith('blob:')) {\n                this.setFileName();\n                base64String = documentData;\n            }\n        }\n        else if (isSkipDocumentId) {\n            this.jsonDocumentId = null;\n        }\n        return base64String;\n    };\n    PdfViewerBase.prototype.setDocumentName = function (documentData) {\n        var documentStringArray = (documentData.indexOf('\\\\') !== -1) ? documentData.split('\\\\') : documentData.split('/');\n        this.pdfViewer.fileName = documentStringArray[documentStringArray.length - 1];\n        this.jsonDocumentId = this.pdfViewer.fileName;\n    };\n    PdfViewerBase.prototype.setFileName = function () {\n        if (this.pdfViewer.fileName === null) {\n            if (this.pdfViewer.toolbarModule && this.pdfViewer.toolbarModule.uploadedDocumentName) {\n                this.pdfViewer.fileName = this.pdfViewer.toolbarModule.uploadedDocumentName;\n                this.jsonDocumentId = this.pdfViewer.fileName;\n            }\n            else {\n                this.pdfViewer.fileName = 'undefined.pdf';\n                this.jsonDocumentId = null;\n            }\n        }\n    };\n    PdfViewerBase.prototype.saveDocumentInfo = function () {\n        var currentSize = PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n        var newObjectSize = Math.round(JSON.stringify(this.documentId).length / 1024);\n        var sessionSize = currentSize + newObjectSize;\n        var maxSessionSize = 5000;\n        if (sessionSize < maxSessionSize) {\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_currentDocument', this.documentId);\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_serviceURL', this.pdfViewer.serviceUrl);\n            if (this.pdfViewer.serverActionSettings) {\n                PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_unload', this.pdfViewer.serverActionSettings.unload);\n            }\n        }\n        else {\n            this.sessionStorage.push(this.documentId + '_currentDocument', this.documentId);\n            this.sessionStorage.push(this.documentId + '_serviceURL', this.pdfViewer.serviceUrl);\n            if (this.pdfViewer.serverActionSettings) {\n                this.sessionStorage.push(this.documentId + '_unload', this.pdfViewer.serverActionSettings.unload);\n            }\n        }\n    };\n    PdfViewerBase.prototype.saveDocumentHashData = function () {\n        var hashId = '';\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n            hashId = encodeURI(this.hashId);\n        }\n        else {\n            hashId = this.hashId;\n        }\n        PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_hashId', hashId);\n        if (this.documentLiveCount) {\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_documentLiveCount', this.documentLiveCount.toString());\n        }\n    };\n    PdfViewerBase.prototype.saveFormfieldsData = function (data) {\n        // Moved the signature value collection to the bottom.\n        if (!this.clientSideRendering) {\n            var moveToBottom_1 = ['ink', 'SignatureText', 'SignatureImage'];\n            data.PdfRenderedFormFields = data.PdfRenderedFormFields.filter(function (item) { return moveToBottom_1.indexOf(item['Name']) === -1; }).concat(data.PdfRenderedFormFields.filter(function (item) { return moveToBottom_1.indexOf(item['Name']) !== -1; }));\n        }\n        this.pdfViewer.isFormFieldDocument = false;\n        this.enableFormFieldButton(false);\n        if (data && data.PdfRenderedFormFields && data.PdfRenderedFormFields.length > 0) {\n            if (this.formfieldvalue) {\n                if (this.pdfViewer.formFieldsModule) {\n                    this.setItemInSessionStorage(this.formfieldvalue, '_formfields');\n                }\n                this.formfieldvalue = null;\n            }\n            else if (this.pdfViewer.formFieldsModule) {\n                for (var i = 0; i < data.PdfRenderedFormFields.length; i++) {\n                    if (data.PdfRenderedFormFields[parseInt(i.toString(), 10)].FieldName === '') {\n                        data.PdfRenderedFormFields.splice(i, 1);\n                    }\n                }\n                this.setItemInSessionStorage(data.PdfRenderedFormFields, '_formfields');\n            }\n            if (this.pdfViewer.enableFormFields && this.pdfViewer.formFieldsModule) {\n                this.pdfViewer.formFieldsModule.formFieldCollections();\n            }\n            if (this.pdfViewer.formFieldCollections.length > 0) {\n                this.pdfViewer.isFormFieldDocument = true;\n                this.enableFormFieldButton(true);\n            }\n        }\n    };\n    /**\n     * @param {boolean} isEnable - Enable or disable the toolbar itema.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.enableFormFieldButton = function (isEnable) {\n        if (isEnable) {\n            this.pdfViewer.isFormFieldDocument = true;\n        }\n        if (this.pdfViewer.toolbarModule && this.pdfViewer.toolbarModule.submitItem) {\n            this.pdfViewer.toolbarModule.toolbar.enableItems(this.pdfViewer.toolbarModule.submitItem.parentElement, isEnable);\n        }\n    };\n    PdfViewerBase.prototype.updateWaitingPopup = function (pageNumber) {\n        if (this.pageSize[parseInt(pageNumber.toString(), 10)].top != null) {\n            var pageCurrentRect = this.getElement('_pageDiv_' + pageNumber).getBoundingClientRect();\n            var waitingPopup = this.getElement('_pageDiv_' + pageNumber).firstChild.firstChild;\n            if (pageCurrentRect.top < 0) {\n                if (this.toolbarHeight + (this.viewerContainer.clientHeight / 2) - pageCurrentRect.top < pageCurrentRect.height) {\n                    waitingPopup.style.top = ((this.getElement('_pageDiv_' + pageNumber).clientHeight / 2) - this.getElement('_pageDiv_' + pageNumber).clientTop) - this.toolbarHeight + 'px';\n                }\n                else {\n                    if (this.toolbarHeight + (pageCurrentRect.bottom / 2) - pageCurrentRect.top < pageCurrentRect.height) {\n                        waitingPopup.style.top = ((pageCurrentRect.bottom / 2) - this.getElement('_pageDiv_' + pageNumber).clientTop) - this.toolbarHeight + 'px';\n                    }\n                }\n            }\n            else {\n                waitingPopup.style.top = this.getElement('_pageDiv_' + pageNumber).clientHeight / 2 + 'px';\n            }\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && pageCurrentRect.width > this.viewerContainer.clientWidth) {\n                waitingPopup.style.left = (this.getElement('_pageDiv_' + pageNumber).clientWidth / 2) + (this.viewerContainer.scrollLeft) + 'px';\n            }\n            else if (this.getZoomFactor() > 1.25 && pageCurrentRect.width > this.viewerContainer.clientWidth) {\n                waitingPopup.style.left = this.getElement('_pageDiv_' + pageNumber).clientWidth / 2 + 'px';\n            }\n            else {\n                waitingPopup.style.left = this.getElement('_pageDiv_' + pageNumber).clientWidth / 2 + 'px';\n            }\n        }\n    };\n    /**\n     * @param {boolean} isPageNumber - It describes about the whether isPageNumber true or not\n     * @private\n     * @returns {number} - returned the page value.\n     */\n    PdfViewerBase.prototype.getActivePage = function (isPageNumber) {\n        if (this.activeElements && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeElements.activePageID)) {\n            if (isPageNumber) {\n                return this.activeElements.activePageID + 1;\n            }\n            else {\n                return this.activeElements.activePageID;\n            }\n        }\n        else {\n            if (isPageNumber) {\n                return this.currentPageNumber;\n            }\n            else {\n                return this.currentPageNumber - 1;\n            }\n        }\n    };\n    PdfViewerBase.prototype.createWaitingPopup = function (pageNumber) {\n        var waitingPopup = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageNumber);\n        if (waitingPopup) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.createSpinner)({ target: waitingPopup });\n            this.setLoaderProperties(waitingPopup);\n        }\n    };\n    PdfViewerBase.prototype.showLoadingIndicator = function (isShow) {\n        var waitingPopup = this.getElement('_loadingIndicator');\n        if (waitingPopup) {\n            if (isShow) {\n                waitingPopup.style.display = 'block';\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.showSpinner)(waitingPopup);\n            }\n            else {\n                waitingPopup.style.display = 'none';\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n            }\n        }\n    };\n    PdfViewerBase.prototype.spinnerPosition = function (container, pageIndex) {\n        var inner = container.querySelector('.e-spinner-inner');\n        var zoomValue = this.getZoomFactor();\n        var width = this.pageSize[parseInt(pageIndex.toString(), 10)].width * zoomValue;\n        var height = this.pageSize[parseInt(pageIndex.toString(), 10)].height * zoomValue;\n        inner.style.top = (height / 2) + 'px';\n        inner.style.left = (width / 2) + 'px';\n        var circle = inner.children[0];\n        if (zoomValue <= 0.20) {\n            circle.style.width = '20px';\n            circle.style.height = '20px';\n            circle.style.transformOrigin = '10px 10px 10px';\n        }\n        else if (zoomValue <= 0.45) {\n            circle.style.width = '30px';\n            circle.style.height = '30px';\n            circle.style.transformOrigin = '15px 15px 15px';\n        }\n        else {\n            circle.style.width = '48px';\n            circle.style.height = '48px';\n            circle.style.transformOrigin = '24px 24px 24px';\n        }\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isShow - Show or hide page loading indicator.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.showPageLoadingIndicator = function (pageIndex, isShow) {\n        var waitingPopup = this.getElement('_pageDiv_' + pageIndex);\n        if (waitingPopup != null) {\n            this.spinnerPosition(waitingPopup, pageIndex);\n            if (isShow) {\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.showSpinner)(waitingPopup);\n            }\n            else {\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.magnificationModule) && !this.pdfViewer.magnificationModule.isWaitingPopupUpdated) {\n                this.updateWaitingPopup(pageIndex);\n            }\n        }\n    };\n    /**\n     * @param {boolean} isShow - Show or hide print loading indicator.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.showPrintLoadingIndicator = function (isShow) {\n        var printWaitingPopup = this.getElement('_printLoadingIndicator');\n        if (printWaitingPopup != null) {\n            if (isShow) {\n                this.printMainContainer.style.display = 'block';\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.showSpinner)(printWaitingPopup);\n            }\n            else {\n                this.printMainContainer.style.display = 'none';\n                (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(printWaitingPopup);\n            }\n        }\n    };\n    /**\n     * @param {HTMLElement} element - specifies the element.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.setLoaderProperties = function (element) {\n        var spinnerElement = element.firstChild.firstChild.firstChild;\n        if (spinnerElement) {\n            spinnerElement.style.height = '48px';\n            spinnerElement.style.width = '48px';\n            spinnerElement.style.transformOrigin = '24px 24px 24px';\n        }\n    };\n    /**\n     * @param {number} pageNumber - Specify the pageNumber.\n     * @param {boolean} needToScroll - Ensure need to scroll or not\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.updateScrollTop = function (pageNumber, needToScroll) {\n        var _this = this;\n        if (this.pageSize[parseInt(pageNumber.toString(), 10)] != null) {\n            this.renderElementsVirtualScroll(pageNumber);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(needToScroll)) {\n                this.viewerContainer.scrollTop = this.getPageTop(pageNumber);\n            }\n            if (this.renderedPagesList.indexOf(pageNumber) === -1) {\n                this.createRequestForRender(pageNumber);\n            }\n            var pageIndex = pageNumber + 1;\n            if (pageIndex < this.pdfViewer.pageCount) {\n                if (this.renderedPagesList.indexOf(pageIndex) === -1) {\n                    this.createRequestForRender(pageIndex);\n                }\n            }\n            if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                var pageTop = this.getPageTop(pageIndex);\n                var viewerHeight = this.viewerContainer.clientHeight + this.getPageTop(pageIndex - 1);\n                while (viewerHeight > pageTop) {\n                    if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                        this.renderPageElement(pageIndex);\n                        if (this.renderedPagesList.indexOf(pageIndex) === -1) {\n                            this.createRequestForRender(pageIndex);\n                        }\n                        pageTop = this.getPageTop(pageIndex);\n                        pageIndex = pageIndex + 1;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            setTimeout(function () {\n                var currentPageNumber = pageNumber + 1;\n                if (currentPageNumber !== _this.currentPageNumber) {\n                    _this.pdfViewer.currentPageNumber = currentPageNumber;\n                    _this.currentPageNumber = currentPageNumber;\n                    if (_this.pdfViewer.toolbarModule) {\n                        _this.pdfViewer.toolbarModule.updateCurrentPage(currentPageNumber);\n                    }\n                }\n            }, 100);\n        }\n    };\n    /**\n     * @private\n     * @returns {number} - Returns the zoom factor value.\n     */\n    PdfViewerBase.prototype.getZoomFactor = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.zoomFactor;\n        }\n        else {\n            // default value\n            return 1;\n        }\n    };\n    /**\n     * @private\n     * @returns {number} - Get the custom zoom values\n     */\n    PdfViewerBase.prototype.getCustomZoomValues = function () {\n        if (this.pdfViewer.magnificationModule) {\n            this.pdfViewer.magnificationModule.isInitialCustomZoomValues = false;\n        }\n        // eslint-disable-next-line\n        var proxy = this;\n        var minZoom = proxy.pdfViewer.minZoom;\n        var maxZoom = proxy.pdfViewer.maxZoom;\n        var items = [];\n        var zoomValues = [10, 25, 50, 75, 100, 125, 150, 200, 400];\n        if (minZoom != null && maxZoom != null && minZoom > maxZoom) {\n            var tempZoomValue = maxZoom;\n            maxZoom = minZoom;\n            minZoom = tempZoomValue;\n        }\n        if (minZoom != null || maxZoom != null) {\n            var isWithinRange = function (zoom) {\n                return (minZoom == null || zoom >= minZoom) && (maxZoom == null || zoom <= maxZoom);\n            };\n            var idCounter = 0;\n            if (minZoom != null && !items.some(function (item) { return parseInt(item.id, 10) === minZoom; })) {\n                items.push({ percent: minZoom + '%', id: idCounter.toString() });\n                this.customZoomValues.push(minZoom);\n                idCounter++;\n            }\n            for (var i = 0; i < zoomValues.length; i++) {\n                var zoom = zoomValues[parseInt(i.toString(), 10)];\n                if (isWithinRange(zoom) && zoom !== minZoom && zoom !== maxZoom) {\n                    items.push({ percent: zoom + '%', id: idCounter.toString() });\n                    this.customZoomValues.push(zoom);\n                    idCounter++;\n                }\n            }\n            if (maxZoom != null && !items.some(function (item) { return parseInt(item.id, 10) === maxZoom; }) && maxZoom !== minZoom) {\n                items.push({ percent: maxZoom + '%', id: idCounter.toString() });\n                this.customZoomValues.push(maxZoom);\n                idCounter++;\n            }\n            items.sort(function (a, b) { return parseInt(a.id, 10) - parseInt(b.id, 10); });\n            this.customZoomValues.sort(function (a, b) { return parseInt(a.id, 10) - parseInt(b.id, 10); });\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns whether the pinch zoom is performed or not.\n     */\n    PdfViewerBase.prototype.getPinchZoomed = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isPinchZoomed;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} -Returns whether the zoom is performed or not.\n     */\n    PdfViewerBase.prototype.getMagnified = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isMagnified;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.getPinchScrolled = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isPinchScrolled;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.getPagesPinchZoomed = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isPagePinchZoomed;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.getPagesZoomed = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isPagesZoomed;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.getRerenderCanvasCreated = function () {\n        if (this.pdfViewer.magnificationModule) {\n            return this.pdfViewer.magnificationModule.isRerenderCanvasCreated;\n        }\n        else {\n            // default value\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {string} - retrun the docuumentid.\n     */\n    PdfViewerBase.prototype.getDocumentId = function () {\n        return this.documentId;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.download = function () {\n        if (this.pageCount > 0) {\n            this.createRequestForDownload();\n        }\n    };\n    /**\n     * @private\n     * @returns {promise<Blob>} - Returns the blob object.\n     */\n    PdfViewerBase.prototype.saveAsBlob = function () {\n        var _this = this;\n        if (this.pageCount > 0) {\n            return new Promise(function (resolve, reject) {\n                _this.saveAsBlobRequest().then(function (value) {\n                    resolve(value);\n                });\n            });\n        }\n        return null;\n    };\n    PdfViewerBase.prototype.fireCustomCommands = function (event) {\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var commands = proxy.pdfViewer.commandManager;\n        var keyboardCommands = commands.keyboardCommand.map(function (command) { return ({\n            name: command.name,\n            gesture: {\n                pdfKeys: command.gesture.pdfKeys,\n                modifierKeys: command.gesture.modifierKeys\n            }\n        }); });\n        var keyboardCommandJSONString = JSON.stringify(keyboardCommands);\n        if (Object.keys(commands).length !== 0) {\n            var commandsArr = JSON.parse(keyboardCommandJSONString);\n            var modifiers = proxy.getModifiers(event);\n            if (modifiers != null && event.keyCode) {\n                var keyboardCommand_1 = {\n                    name: '',\n                    gesture: {\n                        pdfKeys: event.keyCode,\n                        modifierKeys: modifiers\n                    }\n                };\n                // Find the matched command in the list\n                var matchedCommand = commandsArr.find(function (commandObj) {\n                    return commandObj.gesture &&\n                        commandObj.gesture.pdfKeys === keyboardCommand_1.gesture.pdfKeys &&\n                        commandObj.gesture.modifierKeys === keyboardCommand_1.gesture.modifierKeys;\n                });\n                if (matchedCommand != null) {\n                    keyboardCommand_1.name = matchedCommand.name;\n                    keyboardCommand_1.gesture.modifierKeys = matchedCommand.gesture.modifierKeys;\n                    keyboardCommand_1.gesture.pdfKeys = matchedCommand.gesture.pdfKeys;\n                    proxy.pdfViewer.fireKeyboardCustomCommands(keyboardCommand_1);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.getModifiers = function (event) {\n        var isMac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i)\n            ? true\n            : false;\n        var isCommandKey = isMac ? event.metaKey : false;\n        var modifiers = 0;\n        if (event.ctrlKey || isCommandKey) {\n            modifiers |= 1 << 0;\n        }\n        if (event.altKey) {\n            modifiers |= 1 << 1;\n        }\n        if (event.shiftKey) {\n            modifiers |= 1 << 2;\n        }\n        if (event.metaKey) {\n            modifiers |= 1 << 3;\n        }\n        return modifiers;\n    };\n    PdfViewerBase.prototype.saveAsBlobRequest = function () {\n        var _this = this;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var promise = new Promise(function (resolve, reject) {\n            var jsonObject = proxy.constructJsonDownload();\n            var digitalSignature = proxy.clientSideRendering ? proxy.isDigitalSignaturePresent :\n                (proxy.digitalSignaturePages && proxy.digitalSignaturePages.length !== 0);\n            if (digitalSignature) {\n                if (proxy.pdfViewer.isDocumentEdited) {\n                    jsonObject['digitalSignatureDocumentEdited'] = true;\n                }\n                else {\n                    jsonObject['digitalSignatureDocumentEdited'] = false;\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.pageOrganizer) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.pageOrganizer.organizePagesCollection) && _this.pdfViewer.pageOrganizer.isDocumentModified) {\n                jsonObject['organizePages'] = JSON.stringify(_this.pdfViewer.pageOrganizer.organizePagesCollection);\n            }\n            _this.dowonloadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(_this.pdfViewer);\n            _this.dowonloadRequestHandler.url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.download;\n            _this.dowonloadRequestHandler.responseType = 'text';\n            if (_this.validateForm && _this.pdfViewer.enableFormFieldsValidation) {\n                _this.pdfViewer.fireValidatedFailed(proxy.pdfViewer.serverActionSettings.download);\n                _this.validateForm = false;\n            }\n            else if (_this.clientSideRendering) {\n                var data = _this.pdfViewer.pdfRendererModule.getDocumentAsBase64(jsonObject);\n                var resultdata = proxy.saveAsBlobFile(data, proxy);\n                resolve(resultdata);\n            }\n            else {\n                _this.dowonloadRequestHandler.send(jsonObject);\n            }\n            _this.dowonloadRequestHandler.onSuccess = function (result) {\n                var data = result.data;\n                var resultdata = proxy.saveAsBlobFile(data, proxy);\n                resolve(resultdata);\n            };\n            _this.dowonloadRequestHandler.onFailure = function (result) {\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.download);\n            };\n            _this.dowonloadRequestHandler.onError = function (result) {\n                proxy.openNotificationPopup();\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.download);\n            };\n        });\n        return promise;\n    };\n    PdfViewerBase.prototype.saveAsBlobFile = function (data, proxy) {\n        if (!this.clientSideRendering) {\n            // eslint-disable-next-line\n            return new Promise(function (resolve) {\n                if (data) {\n                    if (typeof data === 'object') {\n                        data = JSON.parse(data);\n                    }\n                    if (typeof data !== 'object' && data.indexOf('data:application/pdf') === -1) {\n                        proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.download);\n                        data = null;\n                    }\n                    if (data) {\n                        if (!proxy.clientSideRendering) {\n                            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.download, data);\n                        }\n                        var blobUrl = proxy.createBlobUrl(data.split('base64,')[1], 'application/pdf');\n                        resolve(blobUrl);\n                    }\n                }\n            });\n        }\n        else {\n            return new Promise(function (resolve) {\n                if (data) {\n                    if (typeof data !== 'object') {\n                        proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.download);\n                        data = null;\n                    }\n                    if (data) {\n                        if (!proxy.clientSideRendering) {\n                            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.download, data);\n                        }\n                        var blobUrl = new Blob([data], { type: 'application/pdf' });\n                        resolve(blobUrl);\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @param {boolean} isTriggerEvent - check to trigger the event.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.clear = function (isTriggerEvent) {\n        // eslint-disable-next-line\n        var proxy = this;\n        var pdfViewer = proxy.pdfViewer;\n        var printModule = pdfViewer.printModule;\n        var textSearchModule = pdfViewer.textSearchModule;\n        var bookmarkViewModule = pdfViewer.bookmarkViewModule;\n        var thumbnailViewModule = pdfViewer.thumbnailView;\n        var annotationModule = pdfViewer.annotation;\n        var magnificationModule = pdfViewer.magnificationModule;\n        var textSelectionModule = pdfViewer.textSelectionModule;\n        var formFieldsModule = pdfViewer.formFieldsModule;\n        var signatureModule = proxy.signatureModule;\n        var pageOrganizerModule = pdfViewer.pageOrganizer;\n        proxy.isPasswordAvailable = false;\n        proxy.isDocumentLoaded = false;\n        proxy.isInitialLoaded = false;\n        proxy.isImportAction = false;\n        proxy.navigationPane.isThumbnailAddedProgrammatically = false;\n        proxy.navigationPane.isThumbnail = false;\n        proxy.annotationPageList = [];\n        proxy.annotationComments = null;\n        pdfViewer.annotationCollection = [];\n        pdfViewer.signatureCollection = [];\n        pdfViewer.formFieldCollection = [];\n        pdfViewer.customContextMenuItems = [];\n        proxy.isAnnotationCollectionRemoved = false;\n        proxy.documentAnnotationCollections = null;\n        proxy.isDrawnCompletely = false;\n        proxy.annotationRenderredList = [];\n        proxy.isImportAction = false;\n        proxy.isImportedAnnotation = false;\n        proxy.importedAnnotation = [];\n        proxy.isStorageExceed = false;\n        proxy.annotationStorage = {};\n        proxy.formFieldStorage = {};\n        proxy.downloadCollections = {};\n        proxy.annotationEvent = null;\n        proxy.highestWidth = 0;\n        proxy.highestHeight = 0;\n        proxy.requestLists = [];\n        proxy.tilerequestLists = [];\n        proxy.isToolbarInkClicked = false;\n        pdfViewer.formFieldCollections = [];\n        proxy.passwordData = '';\n        proxy.isFocusField = false;\n        proxy.focusField = [];\n        proxy.modifiedPageIndex = [];\n        proxy.isInkAnnot = false;\n        proxy.updateDocumentEditedProperty(false);\n        pdfViewer.clipboardData.clipObject = {};\n        if (pdfViewer.pdfRendererModule && proxy.clientSideRendering) {\n            proxy.pdfViewer.pdfRendererModule.pageRotationCollection = [];\n        }\n        if (pdfViewer.toolbar) {\n            pdfViewer.toolbar.uploadedFile = null;\n        }\n        proxy.isTaggedPdf = false;\n        if (pdfViewer.formDesignerModule) {\n            pdfViewer.formDesignerModule.formFieldIndex = 0;\n            if (proxy.activeElements) {\n                pdfViewer.clearSelection(proxy.activeElements.activePageID);\n            }\n            pdfViewer.zIndexTable = [];\n        }\n        proxy.initiateTextSelectMode();\n        proxy.RestrictionEnabled(proxy.restrictionList, true);\n        proxy.restrictionList = null;\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || pdfViewer.enableDesktopMode) {\n            if (proxy.navigationPane.sideBarToolbar) {\n                proxy.navigationPane.clear();\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)() && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || !pdfViewer.enableDesktopMode) {\n            proxy.navigationPane.clear();\n        }\n        if (thumbnailViewModule) {\n            thumbnailViewModule.clear();\n        }\n        if (bookmarkViewModule) {\n            bookmarkViewModule.clear();\n        }\n        if (magnificationModule) {\n            magnificationModule.isMagnified = false;\n            magnificationModule.isFormFieldPageZoomed = false;\n            magnificationModule.clearIntervalTimer();\n        }\n        if (textSelectionModule) {\n            textSelectionModule.clearTextSelection();\n        }\n        if (textSearchModule) {\n            textSearchModule.resetTextSearch(true);\n        }\n        if (annotationModule) {\n            annotationModule.clear();\n            annotationModule.initializeCollection();\n        }\n        if (formFieldsModule) {\n            formFieldsModule.readOnlyCollection = [];\n            formFieldsModule.signatureFieldCollection = [];\n            formFieldsModule.renderedPageList = [];\n            formFieldsModule.currentTarget = null;\n        }\n        if (signatureModule) {\n            signatureModule.signAnnotationIndex = [];\n        }\n        if (pageOrganizerModule) {\n            pageOrganizerModule.clear();\n        }\n        if (proxy.pageSize) {\n            proxy.pageSize = [];\n        }\n        if (proxy.renderedPagesList) {\n            proxy.renderedPagesList = [];\n        }\n        if (proxy.accessibilityTagsCollection) {\n            proxy.accessibilityTagsCollection = [];\n        }\n        if (proxy.pageRequestListForAccessibilityTags) {\n            proxy.pageRequestListForAccessibilityTags = [];\n        }\n        if (proxy.pageContainer) {\n            while (proxy.pageContainer.hasChildNodes()) {\n                proxy.pageContainer.removeChild(proxy.pageContainer.lastChild);\n            }\n        }\n        if (proxy.pageCount > 0) {\n            proxy.unloadDocument(proxy);\n            proxy.textLayer.characterBound = [];\n            if (proxy.loadRequestHandler) {\n                proxy.loadRequestHandler.clear();\n            }\n            if (proxy.requestCollection) {\n                for (var i = 0; i < proxy.requestCollection.length; i++) {\n                    var request = proxy.requestCollection[parseInt(i.toString(), 10)];\n                    request.clear();\n                }\n                proxy.requestCollection = [];\n            }\n            if (proxy.virtualLoadRequestHandler) {\n                proxy.virtualLoadRequestHandler.clear();\n            }\n            if (proxy.pageRequestHandler) {\n                proxy.pageRequestHandler.clear();\n            }\n            if (proxy.dowonloadRequestHandler) {\n                proxy.dowonloadRequestHandler.clear();\n            }\n            if (proxy.importAnnotationRequestHandler) {\n                proxy.importAnnotationRequestHandler.clear();\n            }\n            if (proxy.exportAnnotationRequestHandler) {\n                proxy.exportAnnotationRequestHandler.clear();\n            }\n            if (proxy.importFormFieldsRequestHandler) {\n                proxy.importFormFieldsRequestHandler.clear();\n            }\n            if (proxy.exportFormFieldsRequestHandler) {\n                proxy.exportFormFieldsRequestHandler.clear();\n            }\n            if (printModule && printModule.printRequestHandler) {\n                printModule.printRequestHandler.clear();\n            }\n        }\n        proxy.windowSessionStorageClear();\n        PdfViewerBase.sessionStorageManager.clear();\n        if (proxy.pinchZoomStorage) {\n            proxy.pinchZoomStorage = [];\n        }\n        if ((proxy.previousZoomValue || proxy.previousZoomValue === 0) && proxy.previousZoomValue !== pdfViewer.zoomValue) {\n            pdfViewer.zoomValue = proxy.previousZoomValue;\n        }\n        if (isTriggerEvent && proxy.pageCount > 0) {\n            pdfViewer.fireDocumentUnload(this.pdfViewer.fileName);\n        }\n        this.pdfViewer.fileName = null;\n        if (window.customStampCollection instanceof Map) {\n            window.customStampCollection.clear();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.destroy = function () {\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            this.pdfViewer.element.classList.remove('e-pv-mobile-view');\n        }\n        this.unWireEvents();\n        this.clear(false);\n        if (this.pageContainer) {\n            if (this.pageContainer.parentNode) {\n                this.pageContainer.parentNode.removeChild(this.pageContainer);\n            }\n        }\n        if (this.viewerContainer) {\n            if (this.viewerContainer.parentNode) {\n                this.viewerContainer.parentNode.removeChild(this.viewerContainer);\n            }\n        }\n        if (this.contextMenuModule) {\n            var contextMenuElement = this.contextMenuModule.contextMenuElement;\n            if (contextMenuElement && contextMenuElement.ej2_instances && contextMenuElement.ej2_instances.length > 0) {\n                this.contextMenuModule.destroy();\n            }\n        }\n        if (this.pdfViewer.toolbarModule) {\n            this.navigationPane.destroy();\n        }\n        var measureElement = document.getElementById('measureElement');\n        if (measureElement) {\n            measureElement = undefined;\n        }\n    };\n    /**\n     * @param {PdfViewerBase} proxy - PdfviewerBase class.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.unloadDocument = function (proxy) {\n        if (!this.clientSideRendering) {\n            var documentId = '';\n            var hashId = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_hashId');\n            var documentLiveCount = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_documentLiveCount');\n            var serviceURL = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_serviceURL');\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                documentId = decodeURI(hashId);\n            }\n            else {\n                documentId = proxy.hashId ? proxy.hashId : hashId;\n            }\n            if (documentId !== null) {\n                var jsonObject = { hashId: documentId, documentLiveCount: documentLiveCount, action: 'Unload', elementId: proxy.pdfViewer.element.id };\n                var actionName = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_unload');\n                if (serviceURL !== 'undefined' && serviceURL !== 'null' && serviceURL !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(serviceURL)) {\n                    try {\n                        var browserSupportsKeepalive = 'keepalive' in new Request('');\n                        if (browserSupportsKeepalive) {\n                            var headerValue = this.setUnloadRequestHeaders();\n                            var credentialsData = this.pdfViewer.ajaxRequestSettings.withCredentials ? 'include' : 'omit';\n                            fetch(serviceURL + '/' + actionName, {\n                                method: 'POST',\n                                credentials: credentialsData,\n                                headers: headerValue,\n                                body: JSON.stringify(jsonObject)\n                            });\n                        }\n                    }\n                    catch (error) {\n                        this.unloadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n                        this.unloadRequestHandler.send(jsonObject);\n                    }\n                }\n                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                    this.clearCache(actionName, jsonObject, proxy);\n                }\n            }\n        }\n        if (this.pdfViewer.magnificationModule) {\n            this.pdfViewer.magnificationModule.zoomFactor = 1;\n        }\n        this.formFieldCollection = [];\n        this.textrequestLists = [];\n        if (proxy.pdfViewer.textSearchModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode)) {\n            this.pdfViewer.textSearchModule.showSearchBox(false);\n            this.pdfViewer.textSearchModule.isDocumentTextCollectionReady = false;\n        }\n        PdfViewerBase.sessionStorageManager.clear();\n    };\n    PdfViewerBase.prototype.clearCache = function (actionName, jsonObject, proxy) {\n        this.unloadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        this.unloadRequestHandler.url = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_serviceURL') + '/' + actionName;\n        this.unloadRequestHandler.mode = false;\n        this.unloadRequestHandler.responseType = null;\n        this.unloadRequestHandler.send(jsonObject);\n        this.unloadRequestHandler.onSuccess = function (result) {\n            var data = result.data;\n            if (data) {\n                if (typeof data !== 'object') {\n                    if (data.indexOf('Document') === -1) {\n                        proxy.onControlError(500, data, actionName);\n                        data = null;\n                    }\n                }\n                if (data) {\n                    proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.unload, data);\n                }\n            }\n        };\n        this.unloadRequestHandler.onFailure = function (result) {\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, actionName);\n        };\n        this.unloadRequestHandler.onError = function (result) {\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, actionName);\n        };\n    };\n    PdfViewerBase.prototype.setUnloadRequestHeaders = function () {\n        var myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.ajaxRequestSettings) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.ajaxRequestSettings.ajaxHeaders)) {\n            for (var i = 0; i < this.pdfViewer.ajaxRequestSettings.ajaxHeaders.length; i++) {\n                myHeaders.append(this.pdfViewer.ajaxRequestSettings.ajaxHeaders[parseInt(i.toString(), 10)].headerName, this.pdfViewer.ajaxRequestSettings.ajaxHeaders[parseInt(i.toString(), 10)].headerValue);\n            }\n        }\n        return myHeaders;\n    };\n    PdfViewerBase.prototype.windowSessionStorageClear = function () {\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_currentDocument');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_serviceURL');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_unload');\n        for (var i = 0; i < this.sessionStorage.length; i++) {\n            PdfViewerBase.sessionStorageManager.removeItem(this.sessionStorage[parseInt(i.toString(), 10)]);\n        }\n    };\n    PdfViewerBase.prototype.updateCommentPanel = function () {\n        var moreOptionsButton = document.querySelectorAll('.e-pv-more-options-button');\n        for (var i = 0; i < moreOptionsButton.length; i++) {\n            moreOptionsButton[parseInt(i.toString(), 10)].style.visibility = 'hidden';\n        }\n        var commentTextBox = document.querySelectorAll('.e-pv-new-comments-div');\n        for (var j = 0; j < commentTextBox.length; j++) {\n            commentTextBox[parseInt(j.toString(), 10)].style.display = 'none';\n        }\n        var commentContainer = document.querySelectorAll('.e-pv-comments-border');\n        for (var j = 0; j < commentContainer.length; j++) {\n            commentContainer[parseInt(j.toString(), 10)].classList.remove('e-pv-comments-border');\n        }\n        var editableElement = document.querySelectorAll('.e-editable-inline');\n        for (var j = 0; j < editableElement.length; j++) {\n            editableElement[parseInt(j.toString(), 10)].style.display = 'none';\n        }\n        var commentSelect = document.querySelectorAll('.e-pv-comments-select');\n        for (var z = 0; z < commentSelect.length; z++) {\n            commentSelect[parseInt(z.toString(), 10)].classList.remove('e-pv-comments-select');\n        }\n        var commentsDiv = document.querySelectorAll('.e-pv-comments-div');\n        for (var j = 0; j < commentsDiv.length; j++) {\n            commentsDiv[parseInt(j.toString(), 10)].style.minHeight = 60 + 'px';\n        }\n    };\n    /**\n     * @param {boolean} isMouseDown - check whether the mouse down is triggered.\n     * @returns {void}\n     * @private\n     */\n    PdfViewerBase.prototype.focusViewerContainer = function (isMouseDown) {\n        var scrollX = window.scrollX;\n        var scrollY = window.scrollY;\n        var parentNode = this.getScrollParent(this.viewerContainer);\n        var scrollNodeX = 0;\n        var scrollNodeY = 0;\n        if (parentNode !== null) {\n            scrollNodeX = parentNode.scrollLeft;\n            scrollNodeY = parentNode.scrollTop;\n        }\n        if (!this.isgetFocused) {\n            this.viewerContainer.focus();\n        }\n        this.isgetFocused = false;\n        if (this.pdfViewer.annotation && this.pdfViewer.annotation.stickyNotesAnnotationModule.accordionContainer) {\n            this.updateCommentPanel();\n        }\n        if ((navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > -1 || navigator.userAgent.indexOf('Edge') !== -1) && parentNode !== null) {\n            parentNode.scrollLeft = scrollNodeX;\n            parentNode.scrollTop = scrollNodeY;\n        }\n        else if (parentNode !== null) {\n            parentNode.scrollTo(scrollNodeX, scrollNodeY);\n        }\n        window.scrollTo(scrollX, scrollY);\n    };\n    PdfViewerBase.prototype.getScrollParent = function (node) {\n        if (node === null || node.nodeName === 'HTML') {\n            return null;\n        }\n        var style = getComputedStyle(node);\n        if (this.viewerContainer.id !== node.id && (style.overflowY === 'scroll' || style.overflowY === 'auto')) {\n            return node;\n        }\n        else {\n            return this.getScrollParent(node.parentNode);\n        }\n    };\n    PdfViewerBase.prototype.createCorruptedPopup = function (isImportDoc) {\n        var _this = this;\n        var popupElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_corrupted_popup', className: 'e-pv-corrupted-popup' });\n        if (isImportDoc) {\n            this.pdfViewer.pageOrganizerModule.dialogDivElement.appendChild(popupElement);\n        }\n        else {\n            this.pageContainer.appendChild(popupElement);\n        }\n        this.corruptPopup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.Dialog({\n            showCloseIcon: true, closeOnEscape: true, isModal: true,\n            header: '<div class=\"e-pv-corrupted-popup-header\"> ' + this.pdfViewer.localeObj.getConstant('File Corrupted') + '</div>', visible: false,\n            buttons: [{ buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true }, click: this.closeCorruptPopup.bind(this) }],\n            target: this.pdfViewer.element, beforeClose: function () {\n                _this.corruptPopup.destroy();\n                _this.getElement('_corrupted_popup').remove();\n                _this.corruptPopup = null;\n                var waitingPopup = _this.getElement('_loadingIndicator');\n                if (isImportDoc && _this.pdfViewer.pageOrganizerModule.waitingPopup != null) {\n                    (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(_this.pdfViewer.pageOrganizerModule.waitingPopup);\n                }\n                else if (waitingPopup != null) {\n                    (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n                }\n            }\n        });\n        if (this.pdfViewer.enableRtl) {\n            this.corruptPopup.content = '<div id=\"e-pv-corrupted-templatertl\" class=\"e-pv-notification-icon-rtl\"> <div class=\"e-pv-corrupted-popup-content-rtl\" tabindex=\"0\">' + this.pdfViewer.localeObj.getConstant('File Corrupted Content') + '</div></div>';\n            this.corruptPopup.enableRtl = true;\n        }\n        else {\n            this.corruptPopup.content = '<div id=\"e-pv-corrupted-template\" class=\"e-pv-notification-icon\"> <div class=\"e-pv-corrupted-popup-content\" tabindex=\"0\">' + this.pdfViewer.localeObj.getConstant('File Corrupted Content') + '</div></div>';\n        }\n        this.corruptPopup.appendTo(popupElement);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.hideLoadingIndicator = function () {\n        var waitingPopup = this.getElement('_loadingIndicator');\n        if (waitingPopup !== null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n        }\n    };\n    PdfViewerBase.prototype.closeCorruptPopup = function () {\n        this.corruptPopup.hide();\n        var waitingPopup = this.getElement('_loadingIndicator');\n        if (this.isImportDoc && this.pdfViewer.pageOrganizerModule.waitingPopup != null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(this.pdfViewer.pageOrganizerModule.waitingPopup);\n        }\n        else if (waitingPopup != null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n        }\n    };\n    PdfViewerBase.prototype.createPrintPopup = function () {\n        var element = document.getElementById(this.pdfViewer.element.id);\n        this.printMainContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.pdfViewer.element.id + '_printcontainer',\n            className: 'e-pv-print-popup-container'\n        });\n        element.appendChild(this.printMainContainer);\n        this.printMainContainer.style.display = 'none';\n        var printWaitingPopup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.pdfViewer.element.id + '_printLoadingIndicator',\n            className: 'e-pv-print-loading-container'\n        });\n        this.printMainContainer.appendChild(printWaitingPopup);\n        (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.createSpinner)({ target: printWaitingPopup, cssClass: 'e-spin-center' });\n        this.setLoaderProperties(printWaitingPopup);\n    };\n    PdfViewerBase.prototype.createGoToPagePopup = function () {\n        var _this = this;\n        var popupElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_goTopage_popup', className: 'e-pv-gotopage-popup' });\n        this.goToPageElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_prompt' });\n        this.goToPageElement.textContent = this.pdfViewer.localeObj.getConstant('Enter pagenumber');\n        popupElement.appendChild(this.goToPageElement);\n        var inputContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-pv-text-input' });\n        this.goToPageInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: this.pdfViewer.element.id + '_page_input', className: 'e-input' });\n        this.goToPageInput.type = 'text';\n        this.goToPageInput.style.maxWidth = '80%';\n        this.pageNoContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: '.e-pv-number-ofpages' });\n        inputContainer.appendChild(this.goToPageInput);\n        inputContainer.appendChild(this.pageNoContainer);\n        popupElement.appendChild(inputContainer);\n        this.pageContainer.appendChild(popupElement);\n        this.goToPagePopup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.Dialog({\n            showCloseIcon: true, closeOnEscape: false, isModal: true,\n            header: this.pdfViewer.localeObj.getConstant('GoToPage'), visible: false, buttons: [\n                {\n                    buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel') },\n                    click: this.GoToPageCancelClick.bind(this)\n                },\n                {\n                    buttonModel: { content: this.pdfViewer.localeObj.getConstant('Apply'), disabled: true, cssClass: 'e-pv-gotopage-apply-btn', isPrimary: true },\n                    click: this.GoToPageApplyClick.bind(this)\n                }\n            ], close: this.closeGoToPagePopUp.bind(this)\n        });\n        if (this.pdfViewer.enableRtl) {\n            this.goToPagePopup.enableRtl = true;\n        }\n        this.goToPagePopup.appendTo(popupElement);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            var goToPageTextBox = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.NumericTextBox({ format: '##', showSpinButton: false });\n            goToPageTextBox.appendTo(this.goToPageInput);\n        }\n        this.goToPageInput.addEventListener('keyup', function () {\n            var inputValue = _this.goToPageInput.value;\n            if (inputValue !== '' && parseFloat(inputValue) > 0 && (_this.pdfViewer.pageCount + 1) > parseFloat(inputValue)) {\n                _this.EnableApplyButton();\n            }\n            else {\n                _this.DisableApplyButton();\n            }\n        });\n    };\n    PdfViewerBase.prototype.closeGoToPagePopUp = function () {\n        this.goToPageInput.value = '';\n        this.DisableApplyButton();\n    };\n    PdfViewerBase.prototype.EnableApplyButton = function () {\n        var popupElements = document.getElementsByClassName('e-pv-gotopage-apply-btn')[0];\n        popupElements.removeAttribute('disabled');\n    };\n    PdfViewerBase.prototype.DisableApplyButton = function () {\n        var popupElements = document.getElementsByClassName('e-pv-gotopage-apply-btn')[0];\n        popupElements.setAttribute('disabled', true);\n    };\n    PdfViewerBase.prototype.GoToPageCancelClick = function () {\n        this.goToPagePopup.hide();\n    };\n    PdfViewerBase.prototype.GoToPageApplyClick = function () {\n        this.goToPagePopup.hide();\n        var pageNumber = this.goToPageInput.value;\n        this.pdfViewer.navigation.goToPage(pageNumber);\n        this.updateMobileScrollerPosition();\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateMobileScrollerPosition = function () {\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && this.mobileScrollerContainer) {\n            var ratio = (this.viewerContainer.scrollHeight - this.viewerContainer.clientHeight) /\n                (this.viewerContainer.clientHeight - 56);\n            var differenceRatio = (this.viewerContainer.scrollTop) / ratio;\n            var toolbarHeight = this.pdfViewer.toolbarModule ? this.toolbarHeight : 0;\n            this.mobileScrollerContainer.style.top = (toolbarHeight + differenceRatio) + 'px';\n        }\n    };\n    PdfViewerBase.prototype.createPasswordPopup = function (isImportDoc) {\n        var _this = this;\n        var popupElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_password_popup', className: 'e-pv-password-popup', attrs: { 'tabindex': '-1' } });\n        this.promptElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { id: this.pdfViewer.element.id + '_prompt', attrs: { 'tabindex': '-1' } });\n        this.promptElement.textContent = this.pdfViewer.localeObj.getConstant('Enter Password');\n        popupElement.appendChild(this.promptElement);\n        var inputContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-input-group e-pv-password-input' });\n        this.passwordInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: this.pdfViewer.element.id + '_password_input', className: 'e-input' });\n        this.passwordInput.type = 'password';\n        this.passwordInput.name = 'Required';\n        inputContainer.appendChild(this.passwordInput);\n        popupElement.appendChild(inputContainer);\n        if (isImportDoc) {\n            this.pdfViewer.pageOrganizerModule.dialogDivElement.appendChild(popupElement);\n        }\n        else {\n            this.pageContainer.appendChild(popupElement);\n        }\n        this.passwordPopup = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.Dialog({\n            showCloseIcon: true, closeOnEscape: false, isModal: true,\n            header: this.pdfViewer.localeObj.getConstant('Password Protected'), visible: false,\n            close: this.passwordCancel.bind(this), target: this.pdfViewer.element, beforeClose: function () {\n                _this.passwordPopup.destroy();\n                _this.getElement('_password_popup').remove();\n                _this.passwordPopup = null;\n                var waitingPopup = _this.getElement('_loadingIndicator');\n                if (isImportDoc && _this.pdfViewer.pageOrganizerModule.waitingPopup != null) {\n                    (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(_this.pdfViewer.pageOrganizerModule.waitingPopup);\n                }\n                else if (waitingPopup != null) {\n                    (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n                }\n            }\n        });\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n            this.passwordPopup.buttons = [\n                {\n                    buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true },\n                    click: this.applyPassword.bind(this)\n                },\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel') }, click: this.passwordCancelClick.bind(this) }\n            ];\n        }\n        else {\n            this.passwordPopup.buttons = [\n                { buttonModel: { content: this.pdfViewer.localeObj.getConstant('Cancel') }, click: this.passwordCancelClick.bind(this) },\n                {\n                    buttonModel: { content: this.pdfViewer.localeObj.getConstant('OK'), isPrimary: true },\n                    click: this.applyPassword.bind(this)\n                }\n            ];\n        }\n        if (this.pdfViewer.enableRtl) {\n            this.passwordPopup.enableRtl = true;\n        }\n        this.passwordPopup.appendTo(popupElement);\n        this.passwordInput.addEventListener('keyup', function () {\n            if (_this.passwordInput.value === '') {\n                _this.passwordDialogReset();\n            }\n        });\n        this.passwordInput.addEventListener('focus', function () {\n            _this.passwordInput.parentElement.classList.add('e-input-focus');\n        });\n        this.passwordInput.addEventListener('blur', function () {\n            _this.passwordInput.parentElement.classList.remove('e-input-focus');\n        });\n    };\n    PdfViewerBase.prototype.passwordCancel = function (args) {\n        if (args.isInteraction) {\n            if (!this.isImportDoc && !this.pdfViewer.pageOrganizerModule) {\n                this.clear(false);\n            }\n            this.passwordDialogReset();\n            this.passwordInput.value = '';\n        }\n        var waitingPopup = this.getElement('_loadingIndicator');\n        if (this.isImportDoc && this.pdfViewer.pageOrganizerModule.waitingPopup != null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(this.pdfViewer.pageOrganizerModule.waitingPopup);\n        }\n        else if (waitingPopup !== null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n        }\n    };\n    PdfViewerBase.prototype.passwordCancelClick = function () {\n        if (!this.isImportDoc && !this.pdfViewer.pageOrganizerModule) {\n            this.clear(false);\n        }\n        this.passwordDialogReset();\n        this.passwordPopup.hide();\n        var waitingPopup = this.getElement('_loadingIndicator');\n        if (this.isImportDoc && this.pdfViewer.pageOrganizerModule.waitingPopup != null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(this.pdfViewer.pageOrganizerModule.waitingPopup);\n        }\n        else if (waitingPopup !== null) {\n            (0,_spinner__WEBPACK_IMPORTED_MODULE_12__.hideSpinner)(waitingPopup);\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.passwordDialogReset = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            if (this.promptElement) {\n                this.promptElement.classList.remove('e-pv-password-error');\n                this.promptElement.textContent = this.pdfViewer.localeObj.getConstant('Enter Password');\n                this.passwordInput.value = '';\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.applyPassword = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            var password = this.passwordInput.value;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(password) && password.length > 0) {\n                if (this.isImportDoc && this.pdfViewer.pageOrganizerModule) {\n                    this.pdfViewer.pageOrganizerModule.loadImportDoc(this.pdfViewer.\n                        pageOrganizerModule.importedDocumentData, password, true);\n                }\n                else {\n                    this.pdfViewer.load(this.document, password);\n                    this.focusViewerContainer();\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.createFileInputElement = function () {\n        if (this.pdfViewer.enableAnnotationToolbar && this.pdfViewer.toolbarModule &&\n            this.pdfViewer.toolbarModule.annotationToolbarModule) {\n            this.pdfViewer.toolbarModule.annotationToolbarModule.createCustomStampElement();\n        }\n        if (this.signatureModule) {\n            this.signatureModule.createSignatureFileElement();\n        }\n    };\n    PdfViewerBase.prototype.wireEvents = function () {\n        var _this = this;\n        this.isDeviceiOS = (['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) || (navigator.userAgent.includes('Mac') && 'ontouchend' in document));\n        this.isMacSafari = navigator.userAgent.indexOf('Safari') > -1 && navigator.userAgent.indexOf('Chrome') === -1 && !this.isDeviceiOS;\n        this.isWebkitMobile = /Chrome/.test(navigator.userAgent) || /Google Inc/.test(navigator.vendor) || (navigator.userAgent.indexOf('Safari') !== -1) || (navigator.userAgent.indexOf('WebKit') !== -1);\n        this.viewerContainer.addEventListener('scroll', this.viewerContainerOnScroll, true);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            this.viewerContainer.addEventListener('touchmove', this.viewerContainerOnScroll, true);\n        }\n        this.viewerContainer.addEventListener('mousedown', this.viewerContainerOnMousedown);\n        this.viewerContainer.addEventListener('mouseup', this.viewerContainerOnMouseup);\n        this.viewerContainer.addEventListener('wheel', this.detectTouchPad, false);\n        this.viewerContainer.addEventListener('wheel', this.viewerContainerOnMouseWheel);\n        if (this.isMacSafari) {\n            window.addEventListener('gesturestart', function (e) { return e.preventDefault(); });\n            window.addEventListener('gesturechange', function (e) { return e.preventDefault(); });\n            window.addEventListener('gestureend', function (e) { return e.preventDefault(); });\n            this.viewerContainer.addEventListener('gesturestart', this.handleMacGestureStart, false);\n            this.viewerContainer.addEventListener('gesturechange', this.handleMacGestureChange, false);\n            this.viewerContainer.addEventListener('gestureend', this.handleMacGestureEnd, false);\n        }\n        this.viewerContainer.addEventListener('mousemove', this.viewerContainerOnMousemove);\n        this.viewerContainer.addEventListener('mouseleave', this.viewerContainerOnMouseLeave);\n        this.viewerContainer.addEventListener('mouseenter', this.viewerContainerOnMouseEnter);\n        this.viewerContainer.addEventListener('mouseover', this.viewerContainerOnMouseOver);\n        this.viewerContainer.addEventListener('click', this.viewerContainerOnClick);\n        this.viewerContainer.addEventListener('dblclick', this.viewerContainerOnClick);\n        this.viewerContainer.addEventListener('dragstart', this.viewerContainerOnDragStart);\n        this.pdfViewer.element.addEventListener('keydown', this.viewerContainerOnKeyDown);\n        window.addEventListener('keydown', this.onWindowKeyDown);\n        window.addEventListener('mouseup', this.onWindowMouseUp);\n        window.addEventListener('touchend', this.onWindowTouchEnd);\n        this.unload = function () {\n            if (_this.pdfViewerRunner !== null && _this.pdfViewerRunner !== undefined) {\n                _this.pdfViewerRunner.terminate();\n            }\n        };\n        this.unloadDocument(this);\n        window.addEventListener('unload', this.unload);\n        window.addEventListener('beforeunload', this.clearSessionStorage);\n        window.addEventListener('resize', this.onWindowResize);\n        if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.indexOf('Edge') !== -1 || navigator.userAgent.indexOf('Trident') !== -1) {\n            this.viewerContainer.addEventListener('pointerdown', this.viewerContainerOnPointerDown);\n            this.viewerContainer.addEventListener('pointermove', this.viewerContainerOnPointerMove);\n            this.viewerContainer.addEventListener('pointerup', this.viewerContainerOnPointerEnd);\n            this.viewerContainer.addEventListener('pointerleave', this.viewerContainerOnPointerEnd);\n        }\n        else {\n            this.viewerContainer.addEventListener('touchstart', this.viewerContainerOnTouchStart);\n            if (this.isWebkitMobile && this.isDeviceiOS) {\n                this.viewerContainer.addEventListener('touchmove', function (e) { if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.scale) && (e.scale !== 1)) {\n                    e.preventDefault();\n                } }, { passive: false });\n            }\n            this.viewerContainer.addEventListener('touchmove', this.viewerContainerOnTouchMove);\n            this.viewerContainer.addEventListener('touchend', this.viewerContainerOnTouchEnd);\n            this.viewerContainer.addEventListener('touchleave', this.viewerContainerOnTouchEnd);\n            this.viewerContainer.addEventListener('touchcancel', this.viewerContainerOnTouchEnd);\n        }\n    };\n    PdfViewerBase.prototype.unWireEvents = function () {\n        if (this.viewerContainer) {\n            this.viewerContainer.removeEventListener('scroll', this.viewerContainerOnScroll, true);\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n                this.viewerContainer.removeEventListener('touchmove', this.viewerContainerOnScroll, true);\n            }\n            this.viewerContainer.removeEventListener('mousedown', this.viewerContainerOnMousedown);\n            this.viewerContainer.removeEventListener('mouseup', this.viewerContainerOnMouseup);\n            this.viewerContainer.removeEventListener('wheel', this.detectTouchPad, false);\n            this.viewerContainer.removeEventListener('wheel', this.viewerContainerOnMouseWheel);\n            if (this.isMacSafari) {\n                window.removeEventListener('gesturestart', function (e) { return e.preventDefault(); });\n                window.removeEventListener('gesturechange', function (e) { return e.preventDefault(); });\n                window.removeEventListener('gestureend', function (e) { return e.preventDefault(); });\n                this.viewerContainer.removeEventListener('gesturestart', this.handleMacGestureStart, false);\n                this.viewerContainer.removeEventListener('gesturechange', this.handleMacGestureChange, false);\n                this.viewerContainer.removeEventListener('gestureend', this.handleMacGestureEnd, false);\n            }\n            this.viewerContainer.removeEventListener('mousemove', this.viewerContainerOnMousemove);\n            this.viewerContainer.removeEventListener('mouseleave', this.viewerContainerOnMouseLeave);\n            this.viewerContainer.removeEventListener('mouseenter', this.viewerContainerOnMouseEnter);\n            this.viewerContainer.removeEventListener('mouseover', this.viewerContainerOnMouseOver);\n            this.viewerContainer.removeEventListener('click', this.viewerContainerOnClick);\n            this.viewerContainer.removeEventListener('dragstart', this.viewerContainerOnDragStart);\n            this.viewerContainer.removeEventListener('contextmenu', this.viewerContainerOnContextMenuClick);\n            this.pdfViewer.element.removeEventListener('keydown', this.viewerContainerOnKeyDown);\n            window.addEventListener('keydown', this.onWindowKeyDown);\n            window.removeEventListener('mouseup', this.onWindowMouseUp);\n            window.removeEventListener('unload', this.unload);\n            window.removeEventListener('resize', this.onWindowResize);\n            if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.indexOf('Edge') !== -1 || navigator.userAgent.indexOf('Trident') !== -1) {\n                this.viewerContainer.removeEventListener('pointerdown', this.viewerContainerOnPointerDown);\n                this.viewerContainer.removeEventListener('pointermove', this.viewerContainerOnPointerMove);\n                this.viewerContainer.removeEventListener('pointerup', this.viewerContainerOnPointerEnd);\n                this.viewerContainer.removeEventListener('pointerleave', this.viewerContainerOnPointerEnd);\n            }\n            else {\n                this.viewerContainer.removeEventListener('touchstart', this.viewerContainerOnTouchStart);\n                if (this.isWebkitMobile && this.isDeviceiOS) {\n                    this.viewerContainer.removeEventListener('touchmove', function (e) { if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.scale) && (e.scale !== 1)) {\n                        e.preventDefault();\n                    } }, false);\n                }\n                this.viewerContainer.removeEventListener('touchmove', this.viewerContainerOnTouchMove);\n                this.viewerContainer.removeEventListener('touchend', this.viewerContainerOnTouchEnd);\n                this.viewerContainer.removeEventListener('touchleave', this.viewerContainerOnTouchEnd);\n                this.viewerContainer.removeEventListener('touchcancel', this.viewerContainerOnTouchEnd);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateZoomValue = function () {\n        if (this.pdfViewer.magnificationModule) {\n            if (this.pdfViewer.magnificationModule.isAutoZoom) {\n                this.pdfViewer.magnificationModule.fitToAuto();\n            }\n            else if (this.pdfViewer.zoomMode !== 'FitToWidth' && this.pdfViewer.magnificationModule.fitType === 'fitToWidth') {\n                this.pdfViewer.magnificationModule.fitToWidth();\n            }\n            else if (this.pdfViewer.zoomMode !== 'FitToPage' && this.pdfViewer.magnificationModule.fitType === 'fitToPage') {\n                this.pdfViewer.magnificationModule.fitToPage();\n            }\n        }\n        for (var i = 0; i < this.pageCount; i++) {\n            this.applyLeftPosition(i);\n        }\n    };\n    /**\n     * @private\n     * @param {any} annotation - The annotation type of any.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateFreeTextProperties = function (annotation) {\n        if (this.pdfViewer.enableShapeLabel) {\n            if (this.pdfViewer.shapeLabelSettings.fillColor) {\n                annotation.labelFillColor = this.pdfViewer.shapeLabelSettings.fillColor;\n            }\n            if (this.pdfViewer.shapeLabelSettings.fontColor) {\n                annotation.fontColor = this.pdfViewer.shapeLabelSettings.fontColor;\n            }\n            if (this.pdfViewer.shapeLabelSettings.fontSize) {\n                annotation.fontSize = this.pdfViewer.shapeLabelSettings.fontSize;\n            }\n            if (this.pdfViewer.shapeLabelSettings.fontFamily) {\n                annotation.fontFamily = this.pdfViewer.shapeLabelSettings.fontFamily;\n            }\n            if (this.pdfViewer.shapeLabelSettings.opacity) {\n                annotation.labelOpacity = this.pdfViewer.shapeLabelSettings.opacity;\n            }\n            if (this.pdfViewer.shapeLabelSettings.labelContent) {\n                annotation.labelContent = this.pdfViewer.shapeLabelSettings.labelContent;\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {MouseEvent} event - The mouse event.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.mouseDownHandler = function (event) {\n        var isEnableDelete = false;\n        var isCancel;\n        var hidenItems = [];\n        var disabledItems = [];\n        if (event && event.target) {\n            this.mouseDownEvent = event;\n            this.contextMenuModule.currentTarget = event.target;\n        }\n        if (this.pdfViewer.annotationModule) {\n            isEnableDelete = this.pdfViewer.annotationModule.isEnableDelete();\n        }\n        if (!isEnableDelete) {\n            disabledItems.push('DeleteContext');\n        }\n        if (this.pdfViewer.contextMenuOption === 'None') {\n            isCancel = true;\n        }\n        else if (this.pdfViewer.textSelectionModule || this.isShapeBasedAnnotationsEnabled()) {\n            if (event) {\n                var isClickWithinSelectionBounds = this.isClickWithinSelectionBounds(event);\n                if (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.freeTextAnnotationModule &&\n                    this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus) {\n                    this.isFreeTextContextMenu = true;\n                    if (this.pdfViewer.annotation.freeTextAnnotationModule &&\n                        !this.pdfViewer.annotation.freeTextAnnotationModule.isTextSelected) {\n                        disabledItems.push('Cut');\n                        disabledItems.push('Copy');\n                    }\n                    if (this.pdfViewer.annotation.freeTextAnnotationModule && this.pdfViewer.annotation.freeTextAnnotationModule.selectedText === '') {\n                        disabledItems.push('Paste');\n                    }\n                    hidenItems.push('HighlightContext');\n                    hidenItems.push('UnderlineContext');\n                    hidenItems.push('StrikethroughContext');\n                    hidenItems.push('ScaleRatio');\n                    hidenItems.push('Properties');\n                    hidenItems.push('Comment');\n                    hidenItems.push('DeleteContext');\n                }\n                else if (isClickWithinSelectionBounds && this.pdfViewer.textSelectionModule) {\n                    if ((!event.target.classList.contains('e-pv-maintaincontent') && event.target.classList.contains('e-pv-text') || event.target.classList.contains('e-pv-text-layer'))) {\n                        if (this.checkIsNormalText()) {\n                            isCancel = true;\n                        }\n                    }\n                    else if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') && event.target.classList.contains('e-pv-page-container')) {\n                        isCancel = true;\n                    }\n                    hidenItems.push('Cut');\n                    hidenItems.push('Paste');\n                    hidenItems.push('DeleteContext');\n                    hidenItems.push('ScaleRatio');\n                    hidenItems.push('Comment');\n                    hidenItems.push('Properties');\n                }\n                else if (this.pdfViewer.selectedItems.annotations.length !== 0 && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'HandWrittenSignature' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureImage')) {\n                    this.shapeMenuItems(hidenItems, disabledItems, false, true);\n                }\n                else if (this.pdfViewer.selectedItems.annotations.length !== 0 && this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType !== 'Path') {\n                    this.shapeMenuItems(hidenItems, disabledItems, true);\n                }\n                else {\n                    if (this.pdfViewer.annotation && this.pdfViewer.annotation.isShapeCopied && (event.target.classList.contains('e-pv-text-layer') ||\n                        event.target.classList.contains('e-pv-text')) && !this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                        hidenItems.push('Properties');\n                        this.shapeMenuItems(hidenItems, disabledItems, false);\n                    }\n                    else if (this.isCalibrateAnnotationModule() &&\n                        this.pdfViewer.annotationModule.measureAnnotationModule.currentAnnotationMode) {\n                        hidenItems.push('HighlightContext');\n                        hidenItems.push('UnderlineContext');\n                        hidenItems.push('StrikethroughContext');\n                        hidenItems.push('Properties');\n                        disabledItems.push('Cut');\n                        disabledItems.push('Copy');\n                        disabledItems.push('Paste');\n                        disabledItems.push('DeleteContext');\n                        disabledItems.push('Comment');\n                    }\n                    else if (this.pdfViewer.annotationModule &&\n                        this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                        hidenItems.push('HighlightContext');\n                        hidenItems.push('UnderlineContext');\n                        hidenItems.push('StrikethroughContext');\n                        hidenItems.push('Properties');\n                        hidenItems.push('Cut');\n                        hidenItems.push('Copy');\n                        hidenItems.push('Paste');\n                        hidenItems.push('ScaleRatio');\n                    }\n                    else {\n                        isCancel = true;\n                    }\n                }\n            }\n            else if (this.pdfViewer.textSelectionModule && (this.pdfViewer.contextMenuOption === 'MouseUp')) {\n                hidenItems.push('Cut');\n                hidenItems.push('Paste');\n                hidenItems.push('DeleteContext');\n                hidenItems.push('ScaleRatio');\n                hidenItems.push('Comment');\n                hidenItems.push('Properties');\n            }\n            else if (this.pdfViewer.selectedItems.annotations.length === 0) {\n                hidenItems.push('Cut');\n                hidenItems.push('Paste');\n                hidenItems.push('DeleteContext');\n                hidenItems.push('ScaleRatio');\n                hidenItems.push('Properties');\n            }\n            if (!this.pdfViewer.enableCommentPanel) {\n                disabledItems.push('Comment');\n            }\n        }\n        else {\n            isCancel = true;\n        }\n        var eventArgs = { hidenItems: hidenItems, disabledItems: disabledItems, isCancel: isCancel };\n        this.pdfViewer._dotnetInstance.invokeMethodAsync('MouseDownHandler', eventArgs);\n    };\n    /**\n     * @private\n     * @param {string} selectedMenu - The selected menu.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.OnItemSelected = function (selectedMenu) {\n        var target = this.contextMenuModule.currentTarget;\n        var commentPanel = document.getElementById(this.pdfViewer.element.id + '_commantPanel');\n        var isCommentPanelPanel = commentPanel && commentPanel.style.display === 'block' ? true : false;\n        switch (selectedMenu) {\n            case this.pdfViewer.localeObj.getConstant('Copy'):\n                this.CopyItemSelected();\n                break;\n            case this.pdfViewer.localeObj.getConstant('Highlight context'):\n                this.TextMarkUpSelected('Highlight');\n                if (!isCommentPanelPanel) {\n                    this.focusViewerContainer();\n                }\n                break;\n            case this.pdfViewer.localeObj.getConstant('Underline context'):\n                this.TextMarkUpSelected('Underline');\n                if (!isCommentPanelPanel) {\n                    this.focusViewerContainer();\n                }\n                break;\n            case this.pdfViewer.localeObj.getConstant('Strikethrough context'):\n                this.TextMarkUpSelected('Strikethrough');\n                if (!isCommentPanelPanel) {\n                    this.focusViewerContainer();\n                }\n                break;\n            case this.pdfViewer.localeObj.getConstant('Properties'):\n                this.PropertiesItemSelected();\n                break;\n            case this.pdfViewer.localeObj.getConstant('Cut'):\n                this.CutItemSelected(target);\n                this.focusViewerContainer();\n                break;\n            case this.pdfViewer.localeObj.getConstant('Paste'):\n                this.pasteItemSelected(target);\n                break;\n            case this.pdfViewer.localeObj.getConstant('Delete Context'):\n                this.DeleteItemSelected();\n                this.focusViewerContainer();\n                break;\n            case this.pdfViewer.localeObj.getConstant('Scale Ratio'):\n                this.ScaleRatioSelected();\n                break;\n            case this.pdfViewer.localeObj.getConstant('Comment'):\n                this.CommentItemSelected();\n                break;\n            default:\n                break;\n        }\n    };\n    PdfViewerBase.prototype.CommentItemSelected = function () {\n        if (this.pdfViewer.annotation) {\n            this.pdfViewer.annotation.showCommentsPanel();\n            if (this.pdfViewer.selectedItems.annotations.length !== 0 ||\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                var currentAnnotation = void 0;\n                if (this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                    currentAnnotation = this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation;\n                }\n                else {\n                    currentAnnotation = this.pdfViewer.selectedItems.annotations[0];\n                }\n                var accordionExpand = document.getElementById(this.pdfViewer.element.id + '_accordionContainer' + this.pdfViewer.currentPageNumber);\n                if (accordionExpand) {\n                    accordionExpand.ej2_instances[0].expandItem(true);\n                }\n                var commentsDiv = document.getElementById(currentAnnotation.annotName);\n                if (commentsDiv) {\n                    if (!commentsDiv.classList.contains('e-pv-comments-border')) {\n                        commentsDiv.firstChild.click();\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.ScaleRatioSelected = function () {\n        if (this.isCalibrateAnnotationModule()) {\n            this.pdfViewer.annotation.measureAnnotationModule.createScaleRatioWindow();\n        }\n    };\n    PdfViewerBase.prototype.DeleteItemSelected = function () {\n        if (this.pdfViewer.formDesignerModule && this.pdfViewer.selectedItems.formFields.length !== 0) {\n            this.pdfViewer.formDesignerModule.deleteFormField(this.pdfViewer.selectedItems.formFields[0].id);\n        }\n        else if (this.pdfViewer.annotation) {\n            this.pdfViewer.annotation.deleteAnnotation();\n        }\n    };\n    PdfViewerBase.prototype.pasteItemSelected = function (target) {\n        if (this.isFreeTextContextMenu || (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus) && (target && target.className === 'free-text-input' && target.tagName === 'TEXTAREA')) {\n            this.pdfViewer.annotation.freeTextAnnotationModule.pasteSelectedText(target);\n            this.contextMenuModule.close();\n        }\n        else {\n            this.pdfViewer.paste();\n            this.contextMenuModule.previousAction = 'Paste';\n        }\n    };\n    PdfViewerBase.prototype.CutItemSelected = function (target) {\n        if (this.isFreeTextContextMenu || (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus) && (target && target.className === 'free-text-input' && target.tagName === 'TEXTAREA')) {\n            this.pdfViewer.annotation.freeTextAnnotationModule.cutSelectedText(target);\n            this.contextMenuModule.close();\n        }\n        else if (this.pdfViewer.selectedItems.annotations.length === 1) {\n            var pageIndex = this.pdfViewer.selectedItems.annotations[0].pageIndex;\n            this.pdfViewer.cut();\n            this.contextMenuModule.previousAction = 'Cut';\n        }\n        else if (this.pdfViewer.selectedItems.formFields.length === 1) {\n            this.pdfViewer.cut();\n            this.contextMenuModule.previousAction = 'Cut';\n        }\n    };\n    PdfViewerBase.prototype.CopyItemSelected = function () {\n        var isSkip = false;\n        if (this.isFreeTextContextMenu || (this.pdfViewer.annotationModule &&\n            this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus)) {\n            this.pdfViewer.annotation.freeTextAnnotationModule.copySelectedText();\n            this.contextMenuModule.close();\n            isSkip = true;\n        }\n        else if (this.pdfViewer.textSelectionModule) {\n            this.pdfViewer.textSelectionModule.copyText();\n            this.contextMenuModule.close();\n        }\n        if (this.pdfViewer.selectedItems.annotations.length && !isSkip) {\n            this.pdfViewer.copy();\n            this.contextMenuModule.previousAction = 'Copy';\n        }\n        else if (this.pdfViewer.selectedItems.formFields.length > 0) {\n            this.pdfViewer.copy();\n            this.contextMenuModule.previousAction = 'Copy';\n        }\n    };\n    PdfViewerBase.prototype.PropertiesItemSelected = function () {\n        if (this.pdfViewer.selectedItems.annotations.length !== 0 && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Line' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'LineWidthArrowHead' ||\n            this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Distance')) {\n            this.pdfViewer.annotation.createPropertiesWindow();\n        }\n        else if (this.pdfViewer.selectedItems.formFields.length !== 0 &&\n            this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType) {\n            this.pdfViewer.formDesigner.createPropertiesWindow();\n        }\n    };\n    PdfViewerBase.prototype.TextMarkUpSelected = function (type) {\n        if (this.pdfViewer.annotation && this.pdfViewer.annotation.textMarkupAnnotationModule) {\n            this.pdfViewer.annotation.textMarkupAnnotationModule.isSelectionMaintained = false;\n            this.pdfViewer.annotation.textMarkupAnnotationModule.drawTextMarkupAnnotations(type);\n            this.pdfViewer.annotation.textMarkupAnnotationModule.isTextMarkupAnnotationMode = false;\n            this.pdfViewer.annotation.textMarkupAnnotationModule.currentTextMarkupAddMode = '';\n            this.pdfViewer.annotation.textMarkupAnnotationModule.isSelectionMaintained = true;\n        }\n    };\n    PdfViewerBase.prototype.shapeMenuItems = function (hidenItems, disabledItems, enableProperties, isSignature) {\n        if (this.pdfViewer.annotation && !this.pdfViewer.annotation.isShapeCopied) {\n            disabledItems.push('Paste');\n        }\n        hidenItems.push('HighlightContext');\n        hidenItems.push('UnderlineContext');\n        hidenItems.push('StrikethroughContext');\n        hidenItems.push('ScaleRatio');\n        if (enableProperties) {\n            if (!(this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Line' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'LineWidthArrowHead' ||\n                this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Distance')) {\n                hidenItems.push('Properties');\n            }\n        }\n        else if (isSignature) {\n            hidenItems.push('Properties');\n            hidenItems.push('Comment');\n        }\n        else {\n            hidenItems.push('Cut');\n            hidenItems.push('Copy');\n            hidenItems.push('DeleteContext');\n            hidenItems.push('Comment');\n        }\n    };\n    /**\n     * @param {string} text - It describes about the text\n     * @private\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.checkIsRtlText = function (text) {\n        var ltrChars = 'A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02B8\\\\u0300-\\\\u0590\\\\u0800-\\\\u1FFF' + '\\\\u2C00-\\\\uFB1C\\\\uFDFE-\\\\uFE6F\\\\uFEFD-\\\\uFFFF';\n        var rtlChars = '\\\\u0591-\\\\u07FF\\\\uFB1D-\\\\uFDFD\\\\uFE70-\\\\uFEFC';\n        // eslint-disable-next-line\n        var rtlDirCheck = new RegExp('^[^' + ltrChars + ']*[' + rtlChars + ']');\n        return rtlDirCheck.test(text);\n    };\n    /**\n     * @private\n     * @param {any} event - Specifies the event.\n     * @returns {boolean} - retruned the beolean value.\n     */\n    PdfViewerBase.prototype.isClickWithinSelectionBounds = function (event) {\n        var bounds;\n        var isWithin = false;\n        var diCount = 5;\n        var negativeCount = ((this.currentPageNumber - diCount) < 0) ? 0 : this.currentPageNumber - diCount;\n        var positiveCount = ((this.currentPageNumber - diCount) > this.pageCount) ?\n            this.pageCount : this.currentPageNumber + diCount;\n        if (this.pdfViewer.textSelectionModule) {\n            for (var i = negativeCount; i < positiveCount; i++) {\n                if (i >= 0) {\n                    bounds = this.pdfViewer.textSelectionModule.getCurrentSelectionBounds(i);\n                    if (bounds) {\n                        var currentBound = bounds;\n                        if ((this.getHorizontalValue(currentBound.left, i) < event.clientX &&\n                            this.getHorizontalValue(currentBound.right, i) >\n                                event.clientX && this.getVerticalValue(currentBound.top, i) < event.clientY &&\n                            this.getVerticalValue(currentBound.bottom, i) > event.clientY) ||\n                            (this.pdfViewer.textSelectionModule.selectionRangeArray[0].rectangleBounds.length === 1 &&\n                                event.clientX !== 0) && !this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                isTextMarkupAnnotationMode) {\n                            isWithin = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.pdfViewer.textSelectionModule.selectionRangeArray &&\n                this.pdfViewer.textSelectionModule.selectionRangeArray.length === 1) ||\n                ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') && bounds) || this.pdfViewer.textSelectionModule.isTouchSelection) {\n                if (this.pdfViewer.textSelectionModule.selectionRangeArray.length > 0 &&\n                    !this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                    isWithin = true;\n                }\n            }\n        }\n        return isWithin;\n    };\n    PdfViewerBase.prototype.getHorizontalClientValue = function (value) {\n        var pageDiv = this.getElement('_pageDiv_' + (this.currentPageNumber - 1));\n        var pageBounds = pageDiv.getBoundingClientRect();\n        return (value - pageBounds.left);\n    };\n    PdfViewerBase.prototype.getVerticalClientValue = function (value) {\n        var pageDiv = this.getElement('_pageDiv_' + (this.currentPageNumber - 1));\n        var pageBounds = pageDiv.getBoundingClientRect();\n        return (value - pageBounds.top);\n    };\n    PdfViewerBase.prototype.getHorizontalValue = function (value, pageNumber) {\n        var pageDiv = this.getElement('_pageDiv_' + (pageNumber || this.currentPageNumber - 1));\n        var pageBounds = pageDiv.getBoundingClientRect();\n        return (value * this.getZoomFactor()) + pageBounds.left;\n    };\n    PdfViewerBase.prototype.getVerticalValue = function (value, pageNumber) {\n        var pageDiv = this.getElement('_pageDiv_' + (pageNumber || this.currentPageNumber - 1));\n        var pageBounds = pageDiv.getBoundingClientRect();\n        return (value * this.getZoomFactor()) + pageBounds.top;\n    };\n    /**\n     * @private\n     * @returns {boolean} - retruned the beolean value.\n     */\n    PdfViewerBase.prototype.checkIsNormalText = function () {\n        var isText = true;\n        var currentText = '';\n        var textSelectionModule = this.pdfViewer.textSelectionModule;\n        if (textSelectionModule && textSelectionModule.selectionRangeArray && textSelectionModule.selectionRangeArray.length === 1) {\n            currentText = textSelectionModule.selectionRangeArray[0].textContent;\n        }\n        else if (window.getSelection() && window.getSelection().anchorNode) {\n            currentText = window.getSelection().toString();\n        }\n        if (currentText !== '' && this.checkIsRtlText(currentText)) {\n            isText = false;\n        }\n        return isText;\n    };\n    PdfViewerBase.prototype.isTextSearchBoxOpen = function () {\n        var isSearchboxDialogOpen;\n        var searchBoxId = document.getElementById(this.pdfViewer.element.id + '_search_box');\n        if (searchBoxId) {\n            isSearchboxDialogOpen = searchBoxId.style.display !== 'none';\n        }\n        return isSearchboxDialogOpen;\n    };\n    PdfViewerBase.prototype.isTargetClassNameValid = function (event) {\n        return event.target.className !== 'e-pv-formfield-input' &&\n            event.target.className !== 'e-pv-formfield-textarea' &&\n            event.target.className !== 'e-pv-properties-name-edit-input e-input e-lib e-textbox e-control' &&\n            event.target.className !== 'e-pv-properties-value-input e-input e-lib e-textbox e-control' && event.target.id !== this.pdfViewer.element.id + '_search_input' && event.target.className !== 'e-input-group e-pv-search-input e-input-focus' && event.target.className !== 'e-pdfviewer-formFields';\n    };\n    PdfViewerBase.prototype.DeleteKeyPressed = function (event) {\n        var isSearchboxDialogOpen;\n        var searchBoxId = document.getElementById(this.pdfViewer.element.id + '_search_box');\n        if (searchBoxId) {\n            isSearchboxDialogOpen = searchBoxId.style.display !== 'none';\n        }\n        if (this.pdfViewer.formDesignerModule && !this.pdfViewer.formDesigner.isPropertyDialogOpen &&\n            this.pdfViewer.designerMode && this.pdfViewer.selectedItems.formFields.length !== 0 && !isSearchboxDialogOpen) {\n            this.pdfViewer.formDesignerModule.deleteFormField(this.pdfViewer.selectedItems.formFields[0].id);\n        }\n        else if (this.pdfViewer.annotation && !this.pdfViewer.designerMode && event.srcElement.parentElement.classList && !event.srcElement.parentElement.classList.contains('e-input-focus')) {\n            if (this.isTextMarkupAnnotationModule() && !this.getPopupNoteVisibleStatus() && !isSearchboxDialogOpen) {\n                this.pdfViewer.annotationModule.deleteAnnotation();\n            }\n            if (this.pdfViewer.selectedItems.annotations.length > 0) {\n                var annotation = this.pdfViewer.selectedItems.annotations[0];\n                var isReadOnly = true;\n                var type = annotation.shapeAnnotationType;\n                if (type === 'Path' || annotation.formFieldAnnotationType === 'SignatureField' || annotation.formFieldAnnotationType === 'InitialField' || type === 'HandWrittenSignature' || type === 'SignatureText' || type === 'SignatureImage') {\n                    var inputFields = document.getElementById(annotation.id);\n                    if (inputFields && inputFields.disabled) {\n                        isReadOnly = true;\n                    }\n                }\n                if (!isReadOnly) {\n                    if (annotation.annotationSettings && annotation.annotationSettings.isLock) {\n                        if (this.pdfViewer.annotationModule.checkAllowedInteractions('Delete', annotation)) {\n                            this.pdfViewer.remove(annotation);\n                            this.pdfViewer.renderSelector(this.pdfViewer.annotation.getEventPageNumber(event));\n                        }\n                    }\n                    else {\n                        this.pdfViewer.remove(annotation);\n                        this.pdfViewer.renderSelector(this.pdfViewer.annotation.getEventPageNumber(event));\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initiatePanning = function () {\n        this.isPanMode = true;\n        this.textLayer.modifyTextCursor(false);\n        this.disableTextSelectionMode();\n        if (this.pdfViewer.toolbar && this.pdfViewer.toolbar.annotationToolbarModule) {\n            this.pdfViewer.toolbar.annotationToolbarModule.deselectAllItems();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initiateTextSelectMode = function () {\n        this.isPanMode = false;\n        if (this.viewerContainer) {\n            this.viewerContainer.style.cursor = 'auto';\n            if (this.pdfViewer.textSelectionModule) {\n                this.textLayer.modifyTextCursor(true);\n                this.pdfViewer.textSelectionModule.enableTextSelectionMode();\n            }\n            if ((!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                this.enableAnnotationAddTools(true);\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.initiateTextSelection = function () {\n        if (this.pdfViewer.toolbar && !this.pdfViewer.toolbar.isSelectionToolDisabled) {\n            this.initiateTextSelectMode();\n            this.pdfViewer.toolbar.updateInteractionTools(true);\n        }\n    };\n    PdfViewerBase.prototype.enableAnnotationAddTools = function (isEnable) {\n        if (this.pdfViewer.toolbarModule) {\n            if (this.pdfViewer.toolbarModule.annotationToolbarModule) {\n                this.pdfViewer.toolbarModule.annotationToolbarModule.enableAnnotationAddTools(isEnable);\n            }\n        }\n    };\n    PdfViewerBase.prototype.applySelection = function () {\n        if (window.getSelection().anchorNode !== null) {\n            this.pdfViewer.textSelectionModule.applySpanForSelection();\n        }\n        this.isViewerContainerDoubleClick = false;\n    };\n    PdfViewerBase.prototype.isDesignerMode = function (target) {\n        var isDesignerMode = false;\n        if (this.pdfViewer.selectedItems.annotations.length !== 0 && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'HandWrittenSignature' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureImage')) {\n            isDesignerMode = true;\n        }\n        else if (this.pdfViewer.selectedItems.annotations.length !== 0 && this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType !== 'Path') {\n            isDesignerMode = true;\n        }\n        else if (this.pdfViewer.selectedItems.formFields.length !== 0 &&\n            this.pdfViewer.selectedItems.formFields[0].formFieldAnnotationType && this.pdfViewer.designerMode) {\n            isDesignerMode = true;\n        }\n        else {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.isShapeCopied && (target.classList.contains('e-pv-text-layer') ||\n                target.classList.contains('e-pv-text')) && !this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                isDesignerMode = true;\n            }\n            else if (this.pdfViewer.formDesigner && this.pdfViewer.formDesigner.isShapeCopied && (target.classList.contains('e-pv-text-layer') ||\n                target.classList.contains('e-pv-text'))) {\n                isDesignerMode = true;\n            }\n        }\n        this.designerModetarget = target;\n        return isDesignerMode;\n    };\n    PdfViewerBase.prototype.handleTaps = function (touchPoints, event) {\n        var _this = this;\n        //EJ2CORE-813 - Implemented focus removing logic for iOS devices\n        if (this.isDeviceiOS) {\n            var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(event, this, this.pdfViewer);\n            var isRemoveFocus_1 = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotation) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotation.freeTextAnnotationModule) && !this.pdfViewer.annotation.freeTextAnnotationModule.isNewFreeTextAnnot) && (obj && this.pdfViewer.selectedItems.annotations[0] ? obj.id !== this.pdfViewer.selectedItems.annotations[0].id : true) && document.activeElement.classList.contains('free-text-input') && this.isFreeTextAnnotation(this.pdfViewer.selectedItems.annotations);\n            if (!this.singleTapTimer) {\n                this.singleTapTimer = setTimeout(function () {\n                    if (isRemoveFocus_1 && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.selectedItems) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.pdfViewer.selectedItems.annotations[0]))) {\n                        _this.pdfViewer.clearSelection(_this.pdfViewer.selectedItems.annotations[0].pageIndex);\n                        _this.focusViewerContainer(true);\n                    }\n                    _this.onSingleTap(touchPoints);\n                }, 300);\n                this.tapCount++;\n            }\n            else {\n                if (this.pdfViewer.enablePinchZoom) {\n                    this.tapCount++;\n                    if (this.tapCount > 2) {\n                        this.tapCount = 2;\n                    }\n                    clearTimeout(this.singleTapTimer);\n                    this.singleTapTimer = null;\n                    this.onDoubleTap(touchPoints);\n                }\n            }\n        }\n        else {\n            if (!this.singleTapTimer) {\n                this.singleTapTimer = setTimeout(function () {\n                    _this.onSingleTap(touchPoints);\n                }, 300);\n                this.tapCount++;\n            }\n            else {\n                if (this.pdfViewer.enablePinchZoom) {\n                    this.tapCount++;\n                    if (this.tapCount > 2) {\n                        this.tapCount = 2;\n                    }\n                    clearTimeout(this.singleTapTimer);\n                    this.singleTapTimer = null;\n                    this.onDoubleTap(touchPoints);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.handleTextBoxTaps = function (touchPoints) {\n        var _this = this;\n        setTimeout(function () {\n            _this.inputTapCount = 0;\n        }, 300);\n        this.inputTapCount++;\n        //EJ2CORE-813 - Removing timer function for iOS Devices\n        if (this.isDeviceiOS) {\n            this.onTextBoxDoubleTap(touchPoints);\n        }\n        else {\n            var timer = setTimeout(function () {\n                _this.onTextBoxDoubleTap(touchPoints);\n            }, 200);\n        }\n        if (this.inputTapCount > 2) {\n            this.inputTapCount = 0;\n        }\n    };\n    PdfViewerBase.prototype.onTextBoxDoubleTap = function (touches) {\n        var target = touches[0].target;\n        if (this.inputTapCount === 2) {\n            if (this.pdfViewer.selectedItems.annotations.length !== 0) {\n                if (this.pdfViewer.annotationModule) {\n                    var currentAnnotation = this.pdfViewer.selectedItems.annotations[0];\n                    //EJ2CORE-813 - Removing focus from all active free text elements before focusing on free text annotation on iOS devices\n                    if (this.isDeviceiOS && document.activeElement.classList.contains('free-text-input') && (this.isFreeTextAnnotation(this.pdfViewer.selectedItems.annotations))) {\n                        this.focusViewerContainer(true);\n                    }\n                    this.pdfViewer.annotationModule.annotationSelect(currentAnnotation.annotName, currentAnnotation.pageIndex, currentAnnotation, null, true);\n                }\n                if (this.isFreeTextAnnotation(this.pdfViewer.selectedItems.annotations) &&\n                    !(this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus)) {\n                    var elmtPosition = {};\n                    elmtPosition.x = this.pdfViewer.selectedItems.annotations[0].bounds.x;\n                    elmtPosition.y = this.pdfViewer.selectedItems.annotations[0].bounds.y;\n                    var targetAnnotation = void 0;\n                    if (this.pdfViewer.selectedItems.annotations[0].id === 'diagram_helper') {\n                        targetAnnotation = this.pdfViewer.nameTable[this.eventArgs.source.id];\n                    }\n                    else {\n                        targetAnnotation = this.pdfViewer.selectedItems.annotations[0];\n                    }\n                    this.pdfViewer.annotation.freeTextAnnotationModule.addInuptElemet(elmtPosition, targetAnnotation);\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0] &&\n                    this.pdfViewer.selectedItems.annotations[0].enableShapeLabel &&\n                    !(this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus)) {\n                    var elmtPosition = {};\n                    elmtPosition.x = this.pdfViewer.selectedItems.annotations[0].bounds.x;\n                    elmtPosition.y = this.pdfViewer.selectedItems.annotations[0].bounds.y;\n                    this.pdfViewer.annotation.inputElementModule.editLabel(elmtPosition, this.pdfViewer.selectedItems.annotations[0]);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.onSingleTap = function (touches) {\n        var target = touches[0].target;\n        var isFormfields = false;\n        this.singleTapTimer = null;\n        if (target && (target.classList.contains('e-pdfviewer-formFields')\n            || target.classList.contains('e-pdfviewer-ListBox') || target.classList.contains('e-pdfviewer-signatureformfields'))) {\n            isFormfields = true;\n        }\n        if (!this.isLongTouchPropagated && !this.navigationPane.isNavigationToolbarVisible && !isFormfields) {\n            if (this.pdfViewer.toolbarModule) {\n                if ((this.touchClientX >= touches[0].clientX - 10) && (this.touchClientX <= touches[0].clientX + 10) &&\n                    (this.touchClientY >= touches[0].clientY - 10) && (this.touchClientY <= touches[0].clientY + 10)) {\n                    if (!this.isTapHidden) {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                            this.viewerContainer.scrollTop -= this.pdfViewer.element.querySelector('.e-pv-mobile-toolbar').clientHeight * this.getZoomFactor();\n                        }\n                        if (this.pdfViewer.toolbar.moreDropDown) {\n                            var dropDown = this.getElement('_more_option-popup');\n                            if (dropDown.firstElementChild) {\n                                dropDown.classList.remove('e-popup-open');\n                                dropDown.classList.add('e-popup-close');\n                                dropDown.removeChild(dropDown.firstElementChild);\n                            }\n                        }\n                    }\n                    else {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                            this.viewerContainer.scrollTop += this.pdfViewer.element.querySelector('.e-pv-mobile-toolbar').clientHeight * this.getZoomFactor();\n                        }\n                    }\n                    if (this.isTapHidden && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode)) {\n                        this.mobileScrollerContainer.style.display = '';\n                        this.updateMobileScrollerPosition();\n                    }\n                    else if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && this.getSelectTextMarkupCurrentPage() == null) {\n                        this.mobileScrollerContainer.style.display = 'none';\n                    }\n                    if (this.getSelectTextMarkupCurrentPage() == null) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                            if (this.pdfViewer.enableToolbar) {\n                                this.pdfViewer.toolbarModule.showToolbar(true);\n                            }\n                        }\n                        else {\n                            //this.pdfViewer._dotnetInstance.invokeMethodAsync('TapOnMobileDevice', this.isTapHidden);\n                            this.blazorUIAdaptor.tapOnMobileDevice(this.isTapHidden);\n                        }\n                        this.isTapHidden = !this.isTapHidden;\n                    }\n                }\n                this.tapCount = 0;\n            }\n        }\n    };\n    PdfViewerBase.prototype.onDoubleTap = function (touches) {\n        var target = touches[0].target;\n        var isFormfields = false;\n        if (target && (target.classList.contains('e-pdfviewer-formFields')\n            || target.classList.contains('e-pdfviewer-ListBox') || target.classList.contains('e-pdfviewer-signatureformfields'))) {\n            isFormfields = true;\n        }\n        if (this.tapCount === 2 && !isFormfields) {\n            this.tapCount = 0;\n            /**\n             * Sometimes the values gets differ by some decimal points. So converted the decimal points values to Integer values.\n             */\n            if ((this.touchClientX >= parseInt((touches[0].clientX - 10).toString(), 10)) &&\n                (this.touchClientX <= touches[0].clientX + 10) &&\n                (this.touchClientY >= touches[0].clientY - 10) && (this.touchClientY <= touches[0].clientY + 30)) {\n                if (this.pdfViewer.magnification && this.pdfViewer.selectedItems.annotations.length !== 1) {\n                    this.pdfViewer.magnification.onDoubleTapMagnification();\n                }\n                this.viewerContainer.style.height = this.updatePageHeight(this.pdfViewer.element.getBoundingClientRect().height, this.toolbarHeight);\n                this.isTapHidden = false;\n                clearTimeout(this.singleTapTimer);\n                this.singleTapTimer = null;\n            }\n        }\n    };\n    PdfViewerBase.prototype.preventTouchEvent = function (event) {\n        if (this.pdfViewer.textSelectionModule) {\n            if (!this.isPanMode && this.pdfViewer.enableTextSelection && !this.isTextSelectionDisabled &&\n                this.getSelectTextMarkupCurrentPage() == null) {\n                if (!(this.isWebkitMobile && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode))) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.renderStampAnnotation = function (event) {\n        if (this.pdfViewer.annotation) {\n            var zoomFactor = this.getZoomFactor();\n            var pageIndex = this.pdfViewer.annotation.getEventPageNumber(event);\n            var pageDiv = this.getElement('_pageDiv_' + pageIndex);\n            if (this.pdfViewer.enableStampAnnotations) {\n                var stampModule = this.pdfViewer.annotationModule.stampAnnotationModule;\n                if (stampModule && stampModule.isStampAnnotSelected) {\n                    if (pageDiv) {\n                        var pageCurrentRect = pageDiv.getBoundingClientRect();\n                        if (event.type === 'touchend' && this.pdfViewer.annotationModule.stampAnnotationModule.currentStampAnnotation.shapeAnnotationType === 'Image') {\n                            var currentStampObj = this.pdfViewer.annotationModule.stampAnnotationModule.currentStampAnnotation;\n                            currentStampObj.pageIndex = pageIndex;\n                            currentStampObj.bounds.x = (event.changedTouches[0].clientX - pageCurrentRect.left) / zoomFactor;\n                            currentStampObj.bounds.y = (event.changedTouches[0].clientY - pageCurrentRect.top) / zoomFactor;\n                            stampModule.updateDeleteItems(pageIndex, currentStampObj, currentStampObj.opacity);\n                            this.pdfViewer.add(currentStampObj);\n                            var canvas = this.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n                            this.pdfViewer.renderDrawing(canvas, pageIndex);\n                        }\n                        else {\n                            stampModule.renderStamp((event.changedTouches[0].clientX - pageCurrentRect.left) / zoomFactor, (event.changedTouches[0].clientY - pageCurrentRect.top) / zoomFactor, null, null, pageIndex, null, null, null, null);\n                        }\n                        stampModule.isStampAnnotSelected = false;\n                    }\n                }\n                this.pdfViewer.annotation.onAnnotationMouseDown();\n            }\n            if (this.pdfViewer.enableHandwrittenSignature && this.isSignatureAdded && pageDiv) {\n                var pageCurrentRect = pageDiv.getBoundingClientRect();\n                this.currentSignatureAnnot.pageIndex = pageIndex;\n                this.signatureModule.renderSignature((event.changedTouches[0].clientX - pageCurrentRect.left) / zoomFactor, (event.changedTouches[0].clientY - pageCurrentRect.top) / zoomFactor);\n                this.isSignatureAdded = false;\n            }\n            if (event.touches.length === 1 && this.isTextMarkupAnnotationModule() && !this.getPopupNoteVisibleStatus()) {\n                this.pdfViewer.annotationModule.textMarkupAnnotationModule.onTextMarkupAnnotationTouchEnd(event);\n            }\n        }\n    };\n    PdfViewerBase.prototype.focusOnViewerContainer = function () {\n        var activeElement = document.activeElement;\n        var viewerContainer = document.querySelector('.e-pv-viewer-container');\n        return viewerContainer.contains(activeElement);\n    };\n    PdfViewerBase.prototype.initPageDiv = function (pageValues) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            if (this.pdfViewer.toolbarModule) {\n                this.pdfViewer.toolbarModule.updateTotalPage();\n            }\n        }\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && this.mobiletotalPageContainer) {\n            this.mobiletotalPageContainer.innerHTML = this.pageCount.toString();\n            this.pageNoContainer.innerHTML = '(1-' + this.pageCount.toString() + ')';\n        }\n        if (this.pageCount > 0) {\n            var topValue = 0;\n            var pageLimit = 0;\n            this.isMixedSizeDocument = false;\n            if (this.pageCount > 100) {\n                // to render 100 pages intially.\n                pageLimit = 100;\n                this.pageLimit = pageLimit;\n            }\n            else {\n                pageLimit = this.pageCount;\n            }\n            var isPortrait = false;\n            var isLandscape = false;\n            var differentPageSize = false;\n            for (var i = 0; i < pageLimit; i++) {\n                if (typeof pageValues.pageSizes[parseInt(i.toString(), 10)] !== 'object') {\n                    var pageSize = pageValues.pageSizes[parseInt(i.toString(), 10)].split(',');\n                    if (pageValues.pageSizes[i - 1] !== null && i !== 0) {\n                        var previousPageHeight = pageValues.pageSizes[i - 1].split(',');\n                        topValue = this.pageGap + parseFloat(previousPageHeight[1]) + topValue;\n                    }\n                    else {\n                        topValue = this.pageGap;\n                    }\n                    var size = { width: parseFloat(pageSize[0]), height: parseFloat(pageSize[1]),\n                        top: topValue, rotation: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation) &&\n                            ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation.length) && pageValues.pageRotation.length > 0) ||\n                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(Object.keys(pageValues.pageRotation).length) &&\n                                    Object.keys(pageValues.pageRotation).length > 0)) ? pageValues.pageRotation[parseInt(i.toString(), 10)] : 0 };\n                    this.pageSize.push(size);\n                }\n                else {\n                    if (pageValues.pageSizes[i - 1] !== null && i !== 0) {\n                        var previousPageHeight = pageValues.pageSizes[i - 1];\n                        topValue = this.pageGap + (parseFloat(previousPageHeight.height) ?\n                            parseFloat(previousPageHeight.height) : parseFloat(previousPageHeight.Height)) + topValue;\n                    }\n                    else {\n                        topValue = this.pageGap;\n                    }\n                    var size = { width: (pageValues.pageSizes[parseInt(i.toString(), 10)].width ?\n                            pageValues.pageSizes[parseInt(i.toString(), 10)].width :\n                            pageValues.pageSizes[parseInt(i.toString(), 10)].Width),\n                        height: (pageValues.pageSizes[parseInt(i.toString(), 10)].height ?\n                            pageValues.pageSizes[parseInt(i.toString(), 10)].height :\n                            pageValues.pageSizes[parseInt(i.toString(), 10)].Height),\n                        top: topValue, rotation: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation) &&\n                            ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation.length) && pageValues.pageRotation.length > 0) ||\n                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(Object.keys(pageValues.pageRotation).length) &&\n                                    Object.keys(pageValues.pageRotation).length > 0)) ?\n                            pageValues.pageRotation[parseInt(i.toString(), 10)] : 0 };\n                    this.pageSize.push(size);\n                }\n                if (this.pageSize[parseInt(i.toString(), 10)].height > this.pageSize[parseInt(i.toString(), 10)].width) {\n                    isPortrait = true;\n                }\n                if (this.pageSize[parseInt(i.toString(), 10)].width > this.pageSize[parseInt(i.toString(), 10)].height) {\n                    isLandscape = true;\n                }\n                if (i > 0 && this.pageSize[parseInt(i.toString(), 10)].width !== this.pageSize[i - 1].width) {\n                    differentPageSize = true;\n                }\n                var pageWidth = this.pageSize[parseInt(i.toString(), 10)].width;\n                if (pageWidth > this.highestWidth) {\n                    this.highestWidth = pageWidth;\n                }\n                var pageHeight = this.pageSize[parseInt(i.toString(), 10)].height;\n                if (pageHeight > this.highestHeight) {\n                    this.highestHeight = pageHeight;\n                }\n            }\n            if ((isPortrait && isLandscape) || differentPageSize) {\n                this.isMixedSizeDocument = true;\n            }\n            var limit = void 0;\n            if (this.pdfViewer.initialRenderPages > 10) {\n                if (this.pdfViewer.initialRenderPages > 100) {\n                    limit = pageLimit;\n                }\n                else {\n                    limit = this.pdfViewer.initialRenderPages <= this.pageCount ? this.pdfViewer.initialRenderPages : this.pageCount;\n                }\n            }\n            else {\n                limit = this.pageCount < 10 ? this.pageCount : 10;\n            }\n            for (var i = 0; i < limit; i++) {\n                this.renderPageContainer(i, this.getPageWidth(i), this.getPageHeight(i), this.getPageTop(i));\n            }\n            this.pageContainer.style.height = this.getPageTop(this.pageSize.length - 1) + this.getPageHeight(this.pageSize.length - 1) + 'px';\n            this.pageContainer.style.position = 'relative';\n            if (this.pageLimit === 100) {\n                var pageDiv = this.getElement('_pageDiv_' + this.pageLimit);\n                if (pageDiv === null && this.pageLimit < this.pageCount) {\n                    Promise.all([this.renderPagesVirtually()]);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.renderElementsVirtualScroll = function (pageNumber) {\n        var lowerLimit = 1;\n        var higherLimit = 3;\n        if (this.pageStopValue <= 200) {\n            lowerLimit = 4;\n            higherLimit = 4;\n        }\n        else {\n            lowerLimit = 2;\n            higherLimit = 3;\n        }\n        var pageValue = pageNumber + lowerLimit;\n        if (pageValue > this.pageCount) {\n            pageValue = this.pageCount;\n        }\n        for (var i = pageNumber - 1; i <= pageValue; i++) {\n            if (i !== -1) {\n                this.renderPageElement(i);\n            }\n        }\n        var lowerPageValue = pageNumber - 3;\n        if (lowerPageValue < 0) {\n            lowerPageValue = 0;\n        }\n        for (var i = pageNumber - 1; i >= lowerPageValue; i--) {\n            if (i !== -1) {\n                this.renderPageElement(i);\n            }\n        }\n        for (var j = 0; j < this.pageCount; j++) {\n            if (!((lowerPageValue <= j) && (j <= pageValue))) {\n                var pageDiv = this.getElement('_pageDiv_' + j);\n                var pageCanvas = this.getElement('_pageCanvas_' + j);\n                var textLayer = this.getElement('_textLayer_' + j);\n                var initialLoadedPages = this.pdfViewer.initialRenderPages > this.pageRenderCount ?\n                    (this.pdfViewer.initialRenderPages <= this.pageCount) ? (this.pdfViewer.initialRenderPages - 1) : this.pageCount : -1;\n                if (pageCanvas && j > initialLoadedPages) {\n                    pageCanvas.onload = null;\n                    pageCanvas.onerror = null;\n                    pageCanvas.parentNode.removeChild(pageCanvas);\n                    if (textLayer) {\n                        if (this.pdfViewer.textSelectionModule && textLayer.childNodes.length !== 0 && !this.isTextSelectionDisabled) {\n                            this.pdfViewer.textSelectionModule.maintainSelectionOnScroll(j, true);\n                        }\n                        textLayer.parentNode.removeChild(textLayer);\n                    }\n                    var indexInArray = this.renderedPagesList.indexOf(j);\n                    if (indexInArray !== -1) {\n                        this.renderedPagesList.splice(indexInArray, 1);\n                    }\n                }\n                if (pageDiv && j > initialLoadedPages) {\n                    pageDiv.parentNode.removeChild(pageDiv);\n                    var indexInArray = this.renderedPagesList.indexOf(j);\n                    if (indexInArray !== -1) {\n                        this.renderedPagesList.splice(indexInArray, 1);\n                    }\n                }\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            this.pdfViewer._dotnetInstance.invokeMethodAsync('UpdateCurrentPageNumber', this.currentPageNumber);\n        }\n    };\n    PdfViewerBase.prototype.renderPageElement = function (i) {\n        var pageDiv = this.getElement('_pageDiv_' + i);\n        var canvas = this.getElement('_pageCanvas_' + i);\n        if (canvas == null && pageDiv == null && i < this.pageSize.length) {\n            this.renderPageContainer(i, this.getPageWidth(i), this.getPageHeight(i), this.getPageTop(i));\n        }\n    };\n    PdfViewerBase.prototype.renderPagesVirtually = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var proxy;\n            var _this = this;\n            return __generator(this, function (_a) {\n                proxy = this;\n                setTimeout(function () {\n                    _this.initiateRenderPagesVirtually(proxy);\n                }, 500);\n                return [2 /*return*/];\n            });\n        });\n    };\n    PdfViewerBase.prototype.initiateRenderPagesVirtually = function (proxy) {\n        var jsonObject = { hashId: proxy.hashId, isClientsideLoading: this.clientSideRendering, isCompletePageSizeNotReceived: true, action: 'VirtualLoad', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.documentId, password: proxy.passwordData };\n        if (proxy.jsonDocumentId) {\n            jsonObject.documentId = proxy.jsonDocumentId;\n        }\n        this.virtualLoadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        this.virtualLoadRequestHandler.url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.load;\n        this.virtualLoadRequestHandler.responseType = 'json';\n        this.virtualLoadRequestHandler.mode = true;\n        if (this.clientSideRendering) {\n            var data = this.pdfViewer.pdfRendererModule.load(null, this.documentId, null, jsonObject);\n            this.viritualload(JSON.parse(data), this);\n        }\n        else {\n            this.virtualLoadRequestHandler.send(jsonObject);\n        }\n        this.virtualLoadRequestHandler.onSuccess = function (result) {\n            var data = result.data;\n            if (data) {\n                if (typeof data !== 'object') {\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (error) {\n                        proxy.onControlError(500, data, 'VirtualLoad');\n                    }\n                }\n            }\n            if (data) {\n                while (typeof data !== 'object') {\n                    data = JSON.parse(data);\n                }\n                proxy.viritualload(data, proxy);\n            }\n        };\n        this.virtualLoadRequestHandler.onFailure = function (result) {\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText);\n        };\n        this.virtualLoadRequestHandler.onError = function (result) {\n            proxy.openNotificationPopup();\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText);\n        };\n    };\n    PdfViewerBase.prototype.viritualload = function (data, proxy) {\n        if (proxy.documentId === data.uniqueId) {\n            proxy.pdfViewer.fireAjaxRequestSuccess('VirtualLoad', data);\n            var pageValues = data;\n            if (proxy.pageSize[proxy.pageLimit - 1]) {\n                var topValue = proxy.pageSize[proxy.pageLimit - 1].top;\n                for (var i = proxy.pageLimit; i < proxy.pageCount; i++) {\n                    if (typeof (pageValues.pageSizes[parseInt(i.toString(), 10)]) !== 'object') {\n                        var pageSize = pageValues.pageSizes[parseInt(i.toString(), 10)].split(',');\n                        if (proxy.pageSize[i - 1] !== null && i !== 0) {\n                            var previousPageHeight = proxy.pageSize[i - 1].height;\n                            topValue = proxy.pageGap + parseFloat(previousPageHeight) + topValue;\n                        }\n                        var size = { width: parseFloat(pageSize[0]), height: parseFloat(pageSize[1]),\n                            top: topValue, rotation: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation) &&\n                                ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation.length) && pageValues.pageRotation.length > 0) ||\n                                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(Object.keys(pageValues.pageRotation).length) &&\n                                        Object.keys(pageValues.pageRotation).length > 0)) ?\n                                pageValues.pageRotation[parseInt(i.toString(), 10)] : 0 };\n                        proxy.pageSize.push(size);\n                    }\n                    else {\n                        if (proxy.pageSize[i - 1] !== null && i !== 0) {\n                            var previousPageHeight = proxy.pageSize[i - 1].height;\n                            topValue = proxy.pageGap + parseFloat(previousPageHeight) + topValue;\n                        }\n                        var size = { width: (parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].width) ?\n                                parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].width) :\n                                parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].Width)),\n                            height: (parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].height) ?\n                                parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].height) :\n                                parseFloat(pageValues.pageSizes[parseInt(i.toString(), 10)].Height)),\n                            top: topValue, rotation: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation) &&\n                                ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageValues.pageRotation.length) && pageValues.pageRotation.length > 0) ||\n                                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(Object.keys(pageValues.pageRotation).length) &&\n                                        Object.keys(pageValues.pageRotation).length > 0)) ?\n                                pageValues.pageRotation[parseInt(i.toString(), 10)] : 0 };\n                        proxy.pageSize.push(size);\n                    }\n                }\n                proxy.pageContainer.style.height = proxy.getPageTop(proxy.pageSize.length - 1) + proxy.getPageHeight(proxy.pageSize.length - 1) + 'px';\n                var pageData = PdfViewerBase.sessionStorageManager.getItem(proxy.documentId + '_pagedata');\n                if (proxy.pageCount > 100) {\n                    if (this.pdfViewer.initialRenderPages > 100) {\n                        var limit = this.pdfViewer.initialRenderPages <= proxy.pageCount ?\n                            this.pdfViewer.initialRenderPages : proxy.pageCount;\n                        for (var i = 100; i < limit; i++) {\n                            proxy.renderPageContainer(i, proxy.getPageWidth(i), proxy.getPageHeight(i), proxy.getPageTop(i));\n                            proxy.createRequestForRender(i);\n                        }\n                    }\n                    proxy.pdfViewer.fireDocumentLoad(pageData);\n                    var linkAnnotationModule = proxy.pdfViewer.linkAnnotationModule;\n                    if (linkAnnotationModule && linkAnnotationModule.linkAnnotation &&\n                        linkAnnotationModule.linkAnnotation.length > 0 && linkAnnotationModule.linkPage.length > 0) {\n                        linkAnnotationModule.renderDocumentLink(linkAnnotationModule.linkAnnotation, linkAnnotationModule.linkPage, linkAnnotationModule.annotationY, proxy.currentPageNumber - 1);\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.tileRenderPage = function (data, pageIndex) {\n        var _this = this;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        if (data && this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            var pageWidth = this.getPageWidth(pageIndex);\n            var pageHeight = this.getPageHeight(pageIndex);\n            var canvas_1 = this.getElement('_pageCanvas_' + pageIndex);\n            var pageDiv_1 = this.getElement('_pageDiv_' + pageIndex);\n            var tileX = data.tileX ? data.tileX : 0;\n            var tileY = data.tileY ? data.tileY : 0;\n            if (pageDiv_1) {\n                pageDiv_1.style.width = pageWidth + 'px';\n                pageDiv_1.style.height = pageHeight + 'px';\n                pageDiv_1.style.background = '#fff';\n                pageDiv_1.style.top = this.getPageTop(pageIndex) + 'px';\n                if (this.pdfViewer.enableRtl) {\n                    pageDiv_1.style.right = this.updateLeftPosition(pageIndex) + 'px';\n                }\n                else {\n                    pageDiv_1.style.left = this.updateLeftPosition(pageIndex) + 'px';\n                }\n            }\n            if (canvas_1) {\n                canvas_1.style.background = '#fff';\n            }\n            var imageData = data['image'];\n            var zoomFactor = this.retrieveCurrentZoomFactor();\n            var oldCanvases = document.querySelectorAll('img[id*=\"' + proxy.pdfViewer.element.id + '_tileimg_' + pageIndex + '_\"]');\n            if (oldCanvases.length === 0) {\n                this.isReRenderRequired = true;\n            }\n            if (this.isReRenderRequired) {\n                if (data.zoomFactor) {\n                    zoomFactor = data.zoomFactor;\n                }\n                var currentString = this.documentId + '_' + pageIndex + '_' + zoomFactor + '_' + data.tileX + '_' + data.tileY;\n                this.tilerequestLists.push(currentString);\n                var matrix = data['transformationMatrix'];\n                var width = data['width'];\n                if (imageData) {\n                    var tileX_1 = data.tileX ? data.tileX : 0;\n                    var tileY_1 = data.tileY ? data.tileY : 0;\n                    var scaleFactor = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.scaleFactor)) ? data.scaleFactor : 1.5;\n                    var image_1 = document.getElementById(this.pdfViewer.element.id + '_tileimg_' + pageIndex + '_' + this.getZoomFactor() + '_' + tileX_1 + '_' + tileY_1);\n                    if (!image_1) {\n                        image_1 = new Image();\n                        image_1.id = this.pdfViewer.element.id + '_tileimg_' + pageIndex + '_' + this.getZoomFactor() + '_' + tileX_1 + '_' + tileY_1;\n                        image_1.style.userSelect = 'none';\n                        if (pageDiv_1) {\n                            pageDiv_1.append(image_1);\n                        }\n                    }\n                    if (pageDiv_1) {\n                        image_1.src = imageData;\n                        image_1.setAttribute('alt', '');\n                        image_1.onload = function () {\n                            proxy.showPageLoadingIndicator(pageIndex, false);\n                            proxy.tileRenderCount = proxy.tileRenderCount + 1;\n                            if ((tileX_1 === 0) && (tileY_1 === 0)) {\n                                if (pageIndex === 0 && _this.isDocumentLoaded) {\n                                    proxy.renderPDFInformations();\n                                    proxy.isInitialLoaded = true;\n                                    var pageData = PdfViewerBase.sessionStorageManager.getItem(proxy.documentId + '_pagedata');\n                                    if (proxy.pageCount <= 100) {\n                                        proxy.pdfViewer.fireDocumentLoad(pageData);\n                                    }\n                                    proxy.isDocumentLoaded = false;\n                                    if (proxy.pdfViewer.textSearch && ((proxy.clientSideRendering && !proxy.pdfViewer.thumbnailViewModule\n                                        && !proxy.pdfViewer.pageOrganizer) || !proxy.clientSideRendering)) {\n                                        proxy.pdfViewer.textSearchModule.getPDFDocumentTexts();\n                                    }\n                                }\n                            }\n                            if (proxy.tileRenderCount === proxy.tileRequestCount && data.uniqueId === proxy.documentId) {\n                                if (proxy.isTextMarkupAnnotationModule()) {\n                                    proxy.pdfViewer.annotationModule.textMarkupAnnotationModule.rerenderAnnotations(pageIndex);\n                                }\n                                if (canvas_1) {\n                                    canvas_1.style.display = 'none';\n                                    canvas_1.src = '#';\n                                }\n                                var oldPageDiv = document.querySelectorAll('img[id*=\"' + proxy.pdfViewer.element.id + '_oldCanvas\"]');\n                                for (var i = 0; i < oldPageDiv.length; i++) {\n                                    oldPageDiv[parseInt(i.toString(), 10)].onload = null;\n                                    oldPageDiv[parseInt(i.toString(), 10)].onerror = null;\n                                    pageDiv_1.removeChild(oldPageDiv[parseInt(i.toString(), 10)]);\n                                }\n                                proxy.isTileImageRendered = false;\n                                proxy.tileRenderCount = 0;\n                                if (proxy.pdfViewer.magnificationModule) {\n                                    proxy.pdfViewer.magnificationModule.rerenderCountIncrement();\n                                }\n                                proxy.isDrawnCompletely = true;\n                                proxy.pdfViewer.firePageRenderComplete(data);\n                            }\n                            image_1.setAttribute('alt', 'Page ' + (pageIndex + 1));\n                        };\n                        var currentImageWidth = (((width * this.getZoomFactor()) / zoomFactor) / scaleFactor);\n                        var matrixElements = matrix ? (matrix.Elements ? matrix.Elements : matrix.Values) : [1, 0, 0, 1, 1, 1];\n                        var currentImageTop = (((matrixElements[5] * this.getZoomFactor()) / zoomFactor) / scaleFactor);\n                        var currentImageLeft = (((matrixElements[4] * this.getZoomFactor()) / zoomFactor) / scaleFactor);\n                        image_1.width = currentImageWidth;\n                        image_1.style.width = currentImageWidth + 'px';\n                        image_1.style.top = currentImageTop + 'px';\n                        image_1.style.left = currentImageLeft + 'px';\n                        image_1.style.position = 'absolute';\n                    }\n                }\n                if ((tileX === 0) && (tileY === 0)) {\n                    this.onPageRender(data, pageIndex, pageDiv_1);\n                }\n            }\n            else {\n                var _loop_1 = function (l) {\n                    var tileImgId = oldCanvases[parseInt(l.toString(), 10)].id.split('_');\n                    var zoomFactor_1 = proxy.retrieveCurrentZoomFactor();\n                    var tileData = void 0;\n                    if (this_1.clientSideRendering) {\n                        tileData = JSON.parse(proxy.getStoredTileImageDetails(pageIndex, parseFloat(tileImgId[tileImgId.length - 2]), parseFloat(tileImgId[tileImgId.length - 1]), zoomFactor_1));\n                    }\n                    else {\n                        tileData = JSON.parse(proxy.getWindowSessionStorageTile(pageIndex, parseFloat(tileImgId[tileImgId.length - 2]), parseFloat(tileImgId[tileImgId.length - 1]), zoomFactor_1));\n                    }\n                    if (tileData && tileData.zoomFactor) {\n                        zoomFactor_1 = tileData.zoomFactor;\n                    }\n                    if (parseFloat(tileImgId[tileImgId.length - 4]) === pageIndex) {\n                        var node_1 = oldCanvases[parseInt(l.toString(), 10)];\n                        // Make sure it's really an Element\n                        if (node_1.nodeType === Node.ELEMENT_NODE) {\n                            node_1.onload = function () {\n                                proxy.showPageLoadingIndicator(pageIndex, false);\n                                proxy.tileRenderCount = proxy.tileRenderCount + 1;\n                                if ((tileX_2 === 0) && (tileY_2 === 0)) {\n                                    if (pageIndex === 0 && _this.isDocumentLoaded) {\n                                        _this.renderPDFInformations();\n                                        _this.isInitialLoaded = true;\n                                        var pageData = PdfViewerBase.sessionStorageManager.getItem(proxy.documentId + '_pagedata');\n                                        if (proxy.pageCount <= 100) {\n                                            proxy.pdfViewer.fireDocumentLoad(pageData);\n                                        }\n                                        proxy.isDocumentLoaded = false;\n                                        if (proxy.pdfViewer.textSearch && ((proxy.clientSideRendering &&\n                                            !proxy.pdfViewer.thumbnailViewModule && !proxy.pdfViewer.pageOrganizer) ||\n                                            !proxy.clientSideRendering)) {\n                                            proxy.pdfViewer.textSearchModule.getPDFDocumentTexts();\n                                        }\n                                    }\n                                }\n                                if (proxy.tileRenderCount === proxy.tileRequestCount && data.uniqueId === proxy.documentId) {\n                                    canvas_1.style.display = 'none';\n                                    canvas_1.src = '#';\n                                    if (proxy.isTextMarkupAnnotationModule()) {\n                                        proxy.pdfViewer.annotationModule.textMarkupAnnotationModule.rerenderAnnotations(pageIndex);\n                                    }\n                                    var oldPageDiv = document.querySelectorAll('img[id*=\"' + proxy.pdfViewer.element.id + '_oldCanvas\"]');\n                                    for (var i = 0; i < oldPageDiv.length; i++) {\n                                        oldPageDiv[parseInt(i.toString(), 10)].onload = null;\n                                        oldPageDiv[parseInt(i.toString(), 10)].onerror = null;\n                                        pageDiv_1.removeChild(oldPageDiv[parseInt(i.toString(), 10)]);\n                                    }\n                                    proxy.isTileImageRendered = false;\n                                    proxy.tileRenderCount = 0;\n                                    if (proxy.pdfViewer.magnificationModule) {\n                                        proxy.pdfViewer.magnificationModule.rerenderCountIncrement();\n                                    }\n                                    proxy.isDrawnCompletely = true;\n                                    proxy.pdfViewer.firePageRenderComplete(data);\n                                }\n                                node_1.setAttribute('alt', 'Page ' + (pageIndex + 1));\n                            };\n                            if (tileData) {\n                                node_1.src = tileData.image;\n                            }\n                        }\n                    }\n                };\n                var this_1 = this;\n                for (var l = 0; l < oldCanvases.length; l++) {\n                    _loop_1(l);\n                }\n                var tileX_2 = data.tileX ? data.tileX : 0;\n                var tileY_2 = data.tileY ? data.tileY : 0;\n                if ((tileX_2 === 0) && (tileY_2 === 0)) {\n                    this.onPageRender(data, pageIndex, pageDiv_1);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.renderTileCanvas = function (pageWidth, pageHeight, pageIndex, pageDiv, zoomFactor, scaleFactor) {\n        var pageCanvas = this.getElement('_pageTileCanvas_' + pageIndex);\n        if (!pageCanvas) {\n            pageCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas', { id: this.pdfViewer.element.id + '_pageTileCanvas_' + pageIndex, className: 'e-pv-pageTile-canvas' });\n            pageCanvas.style.width = pageWidth + 'px';\n            pageCanvas.style.height = pageHeight + 'px';\n            pageCanvas.style.display = 'none';\n            pageCanvas.style.backgroundColor = '#fff';\n            if (this.isMixedSizeDocument && this.highestWidth > 0) {\n                pageCanvas.style.marginLeft = 'auto';\n                pageCanvas.style.marginRight = 'auto';\n            }\n            pageDiv.appendChild(pageCanvas);\n        }\n        return pageCanvas;\n    };\n    PdfViewerBase.prototype.calculateImageWidth = function (pageWidth, zoomFactor, scaleFactor, imageWidth) {\n        var width = (pageWidth / this.getZoomFactor()) * zoomFactor * scaleFactor;\n        if ((parseInt(imageWidth.toString(), 10)) === (parseInt(width.toString(), 10))) {\n            imageWidth = width;\n        }\n        imageWidth = ((imageWidth * this.getZoomFactor()) / zoomFactor);\n        return imageWidth;\n    };\n    PdfViewerBase.prototype.renderPage = function (data, pageIndex, imageSource) {\n        var _this = this;\n        // eslint-disable-next-line\n        var proxy = this;\n        if (data && this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            var pageWidth = this.getPageWidth(pageIndex);\n            var pageHeight = this.getPageHeight(pageIndex);\n            var canvas_2 = this.getElement('_pageCanvas_' + pageIndex);\n            var pageDiv_2 = this.getElement('_pageDiv_' + pageIndex);\n            if (pageDiv_2) {\n                pageDiv_2.style.width = pageWidth + 'px';\n                pageDiv_2.style.height = pageHeight + 'px';\n                pageDiv_2.style.top = this.getPageTop(pageIndex) + 'px';\n                if (this.pdfViewer.enableRtl) {\n                    pageDiv_2.style.right = this.updateLeftPosition(pageIndex) + 'px';\n                }\n                else {\n                    pageDiv_2.style.left = this.updateLeftPosition(pageIndex) + 'px';\n                }\n            }\n            if (canvas_2) {\n                canvas_2.style.background = '#fff';\n                canvas_2.style.display = 'block';\n                canvas_2.style.width = pageWidth + 'px';\n                canvas_2.style.height = pageHeight + 'px';\n                if (pageWidth < parseFloat(pageDiv_2.style.width)) {\n                    pageDiv_2.style.boxShadow = 'none';\n                }\n                var imageData = (this.renderThumbnailImages && !this.clientSideRendering) ? imageSource : data['image'];\n                if (imageData) {\n                    canvas_2.onload = function () {\n                        var oldCanvases = document.querySelectorAll('img[id*=\"' + proxy.pdfViewer.element.id + '_tileimg_\"]');\n                        var pageCanvas = proxy.getElement('_pageDiv_' + pageIndex);\n                        for (var i = 0; i < oldCanvases.length; i++) {\n                            var tileImgId = oldCanvases[parseInt(i.toString(), 10)].id.split('_');\n                            if (parseFloat(tileImgId[tileImgId.length - 3]) !== proxy.getZoomFactor()) {\n                                if (pageIndex !== parseInt(tileImgId[tileImgId.length - 4], 10)) {\n                                    oldCanvases[parseInt(i.toString(), 10)].onload = null;\n                                    oldCanvases[parseInt(i.toString(), 10)].onerror = null;\n                                    proxy.getElement('_pageDiv_' + tileImgId[tileImgId.length - 4]).removeChild(oldCanvases[parseInt(i.toString(), 10)]);\n                                }\n                                else {\n                                    oldCanvases[parseInt(i.toString(), 10)].onload = null;\n                                    oldCanvases[parseInt(i.toString(), 10)].onerror = null;\n                                    pageCanvas.removeChild(oldCanvases[parseInt(i.toString(), 10)]);\n                                }\n                            }\n                        }\n                        var oldPageDiv = document.querySelectorAll('img[id*=\"' + proxy.pdfViewer.element.id + '_oldCanvas\"]');\n                        for (var i = 0; i < oldPageDiv.length; i++) {\n                            oldPageDiv[parseInt(i.toString(), 10)].onload = null;\n                            oldPageDiv[parseInt(i.toString(), 10)].onerror = null;\n                            pageDiv_2.removeChild(oldPageDiv[parseInt(i.toString(), 10)]);\n                        }\n                        if (_this.pdfViewer.magnificationModule) {\n                            _this.pdfViewer.magnificationModule.rerenderCountIncrement();\n                        }\n                        _this.showPageLoadingIndicator(pageIndex, false);\n                        if (pageIndex === 0 && _this.isDocumentLoaded) {\n                            _this.renderPDFInformations();\n                            _this.isInitialLoaded = true;\n                            var pageData = PdfViewerBase.sessionStorageManager.getItem(_this.documentId + '_pagedata');\n                            if (_this.pageCount <= 100) {\n                                _this.pdfViewer.fireDocumentLoad(pageData);\n                            }\n                            _this.isDocumentLoaded = false;\n                            if (_this.pdfViewer.textSearch && ((_this.clientSideRendering && !_this.pdfViewer.thumbnailViewModule &&\n                                !_this.pdfViewer.pageOrganizer) || !_this.clientSideRendering)) {\n                                _this.pdfViewer.textSearchModule.getPDFDocumentTexts();\n                            }\n                        }\n                        if (_this.pdfViewer.magnificationModule) {\n                            _this.pdfViewer.magnificationModule.pushImageObjects(canvas_2);\n                        }\n                        canvas_2.setAttribute('alt', 'Page ' + (pageIndex + 1));\n                    };\n                    canvas_2.src = imageData;\n                }\n                this.onPageRender(data, pageIndex, pageDiv_2);\n            }\n        }\n    };\n    PdfViewerBase.prototype.updateAnnotationsAndState = function (data, pageAnnotations, pageIndex, annotationRenderredList) {\n        if (pageAnnotations) {\n            data.shapeAnnotation = pageAnnotations.shapeAnnotation;\n            data.measureShapeAnnotation = pageAnnotations.measureShapeAnnotation;\n            data.textMarkupAnnotation = pageAnnotations.textMarkupAnnotation;\n            data.freeTextAnnotation = pageAnnotations.freeTextAnnotation;\n            data.stampAnnotations = pageAnnotations.stampAnnotations;\n            data.stickyNotesAnnotation = pageAnnotations.stickyNotesAnnotation;\n            data.signatureInkAnnotation = pageAnnotations.signatureInkAnnotation;\n            annotationRenderredList.push(pageIndex);\n            return true;\n        }\n        return false;\n    };\n    PdfViewerBase.prototype.isNeedToRenderAnnotations = function (collection, pageIndex) {\n        var uniquePageIndexes = new Set(collection.map(function (annotation) { return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation.pageNumber) ?\n            annotation.pageNumber : annotation.pageIndex; }));\n        return uniquePageIndexes.has(pageIndex);\n    };\n    PdfViewerBase.prototype.isFormFieldsNeedtoRender = function (collection, pageIndex) {\n        return collection.some(function (item) {\n            var field = item.FormField;\n            return (field.pageNumber === pageIndex + 1);\n        });\n    };\n    PdfViewerBase.prototype.onPageRender = function (data, pageIndex, pageDiv) {\n        var aElement = pageDiv && pageDiv.getElementsByTagName('a');\n        var isAnnotationRendered = false;\n        var isNeedToRender = this.isNeedToRenderAnnotations(this.pdfViewer.annotationCollection, pageIndex);\n        var isSignatureNeedtoRender = this.isNeedToRenderAnnotations(this.pdfViewer.signatureCollection, pageIndex);\n        var isFormFieldsNeedtoRender = this.isFormFieldsNeedtoRender(this.formFieldCollection, pageIndex);\n        if (aElement && aElement.length !== 0) {\n            for (var index = aElement.length - 1; index >= 0; index--) {\n                aElement[parseInt(index.toString(), 10)].parentNode.removeChild(aElement[parseInt(index.toString(), 10)]);\n            }\n        }\n        if (this.pdfViewer.textSearchModule || this.pdfViewer.textSelectionModule || this.pdfViewer.annotationModule) {\n            this.renderTextContent(data, pageIndex);\n        }\n        if (this.pdfViewer.formFieldsModule && !(this.pdfViewer.magnificationModule ?\n            this.pdfViewer.magnificationModule.isFormFieldPageZoomed : false)) {\n            if (this.pdfViewer.viewerBase.existingFieldImport) {\n                this.pdfViewer.formFieldsModule.renderFormFields(pageIndex, false);\n            }\n            else {\n                this.pdfViewer.formFieldsModule.renderFormFields(pageIndex, true);\n            }\n        }\n        if (this.pdfViewer.accessibilityTagsModule && this.pdfViewer.enableAccessibilityTags && this.isTaggedPdf) {\n            if (this.accessibilityTagsCollection[pageIndex.toString()]) {\n                this.renderAccessibilityTags(pageIndex, this.accessibilityTagsCollection[pageIndex.toString()]);\n            }\n            else if (this.pageRequestListForAccessibilityTags.indexOf(pageIndex) === -1) {\n                this.createRequestForAccessibilityTags(pageIndex);\n            }\n        }\n        if (this.pdfViewer.formDesignerModule && !this.isDocumentLoaded) {\n            this.pdfViewer.formDesignerModule.rerenderFormFields(pageIndex);\n        }\n        if (this.pdfViewer.formFieldsModule && !this.isDocumentLoaded && !this.pdfViewer.formDesignerModule) {\n            this.pdfViewer.formFieldsModule.renderFormFields(pageIndex, false);\n        }\n        if (this.pdfViewer.formDesignerModule && this.isDocumentLoaded &&\n            (this.pdfViewer.magnificationModule ? this.pdfViewer.magnificationModule.isFormFieldPageZoomed : true) &&\n            this.pdfViewer.formFieldsModule) {\n            this.pdfViewer.formFieldsModule.renderFormFields(pageIndex, false);\n            if (this.pdfViewer.magnificationModule) {\n                this.pdfViewer.magnificationModule.isFormFieldPageZoomed = false;\n            }\n        }\n        if (this.pdfViewer.enableHyperlink && this.pdfViewer.linkAnnotationModule) {\n            this.pdfViewer.linkAnnotationModule.renderHyperlinkContent(data, pageIndex);\n        }\n        if (this.pdfViewer.textSelectionModule && !this.isTextSelectionDisabled) {\n            this.pdfViewer.textSelectionModule.applySelectionRangeOnScroll(pageIndex);\n        }\n        if (this.documentAnnotationCollections) {\n            var isAnnotationAdded = false;\n            for (var i = 0; i < this.annotationRenderredList.length; i++) {\n                if (this.annotationRenderredList[parseInt(i.toString(), 10)] === pageIndex) {\n                    isAnnotationAdded = true;\n                }\n            }\n            var pageAnnotations = this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)];\n            if (pageAnnotations && !isAnnotationAdded) {\n                data.shapeAnnotation = pageAnnotations.shapeAnnotation;\n                data.measureShapeAnnotation = pageAnnotations.measureShapeAnnotation;\n                data.textMarkupAnnotation = pageAnnotations.textMarkupAnnotation;\n                data.freeTextAnnotation = pageAnnotations.freeTextAnnotation;\n                data.stampAnnotations = pageAnnotations.stampAnnotations;\n                data.stickyNotesAnnotation = pageAnnotations.stickyNotesAnnotation;\n                data.signatureAnnotation = pageAnnotations.signatureAnnotation;\n                data.signatureInkAnnotation = pageAnnotations.signatureInkAnnotation;\n                this.annotationRenderredList.push(pageIndex);\n            }\n        }\n        if (this.isImportAction) {\n            var pageAnnotations = this.checkDocumentCollectionData(pageIndex);\n            this.drawPageAnnotations(this.importedAnnotation[parseInt(pageIndex.toString(), 10)], pageIndex);\n            if (pageAnnotations) {\n                data.shapeAnnotation = pageAnnotations.shapeAnnotation;\n                data.measureShapeAnnotation = pageAnnotations.measureShapeAnnotation;\n                data.textMarkupAnnotation = pageAnnotations.textMarkupAnnotation;\n                data.freeTextAnnotation = pageAnnotations.freeTextAnnotation;\n                data.stampAnnotations = pageAnnotations.stampAnnotations;\n                data.stickyNotesAnnotation = pageAnnotations.stickyNotesAnnotation;\n                data.signatureInkAnnotation = pageAnnotations.signatureInkAnnotation;\n                this.annotationRenderredList.push(pageIndex);\n                isAnnotationRendered = true;\n            }\n        }\n        if (!(this.isImportAction)) {\n            var isAnnotationAdded = false;\n            var pageAnnotations = this.checkDocumentCollectionData(pageIndex);\n            if (pageAnnotations && !isAnnotationAdded) {\n                isAnnotationRendered = this.updateAnnotationsAndState(data, pageAnnotations, pageIndex, this.annotationRenderredList);\n            }\n            if (this.pdfViewer.annotationModule && (this.isTextMarkupAnnotationModule() || this.isShapeBasedAnnotationsEnabled())) {\n                if (this.isStampAnnotationModule()) {\n                    var stampData = data['stampAnnotations'];\n                    if (isAnnotationRendered) {\n                        this.pdfViewer.annotationModule.stampAnnotationModule.renderStampAnnotations(stampData, pageIndex, null, true);\n                    }\n                    else {\n                        this.pdfViewer.annotationModule.stampAnnotationModule.renderStampAnnotations(stampData, pageIndex);\n                    }\n                }\n                if (isAnnotationRendered && ((data.shapeAnnotation.length > 0 || data.measureShapeAnnotation.length > 0 ||\n                    data.textMarkupAnnotation.length > 0) ||\n                    (this.pdfViewer.signatureCollection.length > 0 && isSignatureNeedtoRender)\n                    || (this.formFieldCollection.length > 0 && isFormFieldsNeedtoRender))) {\n                    this.pdfViewer.annotationModule.renderAnnotations(pageIndex, data.shapeAnnotation, data.measureShapeAnnotation, data.textMarkupAnnotation, null, true);\n                }\n                else if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.shapeAnnotation) && data.shapeAnnotation.length > 0) ||\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.measureShapeAnnotation) && data.measureShapeAnnotation.length > 0) ||\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.textMarkupAnnotation) && data.textMarkupAnnotation.length > 0) ||\n                    (this.pdfViewer.annotationCollection.length > 0 && isNeedToRender)) {\n                    this.pdfViewer.annotationModule.renderAnnotations(pageIndex, data.shapeAnnotation, data.measureShapeAnnotation, data.textMarkupAnnotation);\n                }\n                this.pdfViewer.annotationModule.stickyNotesAnnotationModule.\n                    renderStickyNotesAnnotations(data.stickyNotesAnnotation, pageIndex);\n            }\n            if (this.isFreeTextAnnotationModule() && data.freeTextAnnotation && data.freeTextAnnotation.length > 0) {\n                if (isAnnotationRendered) {\n                    this.pdfViewer.annotationModule.freeTextAnnotationModule.\n                        renderFreeTextAnnotations(data.freeTextAnnotation, pageIndex, true);\n                }\n                else {\n                    this.pdfViewer.annotationModule.freeTextAnnotationModule.renderFreeTextAnnotations(data.freeTextAnnotation, pageIndex);\n                }\n            }\n            if (this.isInkAnnotationModule() && data && data.signatureInkAnnotation && data.signatureInkAnnotation.length > 0) {\n                if (!this.pdfViewer.isSignatureEditable) {\n                    data.signatureInkAnnotation = this.canUpdateSignCollection(data.signatureInkAnnotation);\n                }\n                if (data.signatureInkAnnotation) {\n                    this.pdfViewer.annotationModule.inkAnnotationModule.\n                        renderExistingInkSignature(data.signatureInkAnnotation, pageIndex, isAnnotationRendered);\n                }\n            }\n        }\n        if (this.pdfViewer.formDesignerModule && !this.pdfViewer.annotationModule) {\n            this.pdfViewer.formDesignerModule.updateCanvas(pageIndex);\n        }\n        if (this.pdfViewer.textSearchModule) {\n            if (!this.pdfViewer.textSearchModule.isDocumentTextCollectionReady) {\n                if (this.pdfViewer.textSearchModule.isTextSearchHandled && this.pdfViewer.textSearchModule.currentOccurrence !== 0) {\n                    this.pdfViewer.textSearchModule.hightlightSearchedTexts(this.pdfViewer.textSearchModule.searchPageIndex, true);\n                }\n                else {\n                    if (!this.pdfViewer.textSearchModule.programaticalSearch && !this.pdfViewer.textSearchModule.isFiltering) {\n                        this.pdfViewer.textSearchModule.hightlightSearchedTexts(undefined, true, true);\n                    }\n                }\n            }\n            else {\n                if (this.pdfViewer.textSearchModule.isTextSearch && this.pdfViewer.textSearchModule.currentOccurrence !== 0) {\n                    this.pdfViewer.textSearchModule.highlightOtherOccurrences(pageIndex);\n                }\n                else {\n                    if (!this.pdfViewer.textSearchModule.programaticalSearch && !this.pdfViewer.textSearchModule.isFiltering) {\n                        this.pdfViewer.textSearchModule.highlightAfterComplete();\n                    }\n                }\n            }\n        }\n        if (this.pdfViewer.annotationModule) {\n            this.pdfViewer.annotationModule.stickyNotesAnnotationModule.selectCommentsAnnotation(pageIndex);\n        }\n        if (data && data.signatureAnnotation && data.signatureAnnotation.length > 0 && this.signatureModule) {\n            if (!this.pdfViewer.isSignatureEditable) {\n                data.signatureAnnotation = this.canUpdateSignCollection(data.signatureAnnotation);\n            }\n            if (data.signatureAnnotation) {\n                this.signatureModule.renderExistingSignature(data.signatureAnnotation, pageIndex, false);\n            }\n        }\n        if (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.isAnnotationSelected &&\n            this.pdfViewer.annotationModule.annotationPageIndex === pageIndex &&\n            this.pdfViewer.annotationModule.annotationType !== 'image') {\n            this.pdfViewer.annotationModule.selectAnnotationFromCodeBehind();\n        }\n        this.isLoadedFormFieldAdded = false;\n    };\n    PdfViewerBase.prototype.removeInkFromAnnotCollection = function (docAnnotations) {\n        var annotationCollections = this.pdfViewer.annotationCollection;\n        for (var m = 0; m < annotationCollections.length; m++) {\n            var Bounds = docAnnotations.Bounds;\n            if (annotationCollections[parseInt(m.toString(), 10)].shapeAnnotationType === 'Ink' ||\n                annotationCollections[parseInt(m.toString(), 10)].shapeAnnotationType === 'ink') {\n                var inkBounds = annotationCollections[parseInt(m.toString(), 10)].bounds;\n                if (Math.round(Bounds.X) === Math.round(inkBounds.x) && Math.round(Bounds.Y) === Math.round(inkBounds.y) &&\n                    Math.round(Bounds.Width) === Math.round(inkBounds.width) &&\n                    Math.round(Bounds.Height) === Math.round(inkBounds.height)) {\n                    this.pdfViewer.annotationCollection.splice(m, 1);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.canReduse = function (previousLength, currentLength, currentValue) {\n        if (previousLength === currentLength) {\n            return currentValue;\n        }\n        else {\n            return currentValue - 1;\n        }\n    };\n    PdfViewerBase.prototype.isBoundsAreEqual = function (inkBounds, annotBounds) {\n        if (Math.round(annotBounds.X) === Math.round(inkBounds.X) && Math.round(annotBounds.Y) === Math.round(inkBounds.Y) &&\n            Math.round(annotBounds.Width) === Math.round(inkBounds.Width) &&\n            Math.round(annotBounds.Height) === Math.round(inkBounds.Height)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.removeAnnotFromDoc = function (annotations, updatedCollections) {\n        var Bounds = annotations.Bounds;\n        var DocumentAnnot = this.documentAnnotationCollections[parseInt(annotations.PageNumber.toString(), 10)];\n        var signatureInkAnnotation = DocumentAnnot.signatureInkAnnotation;\n        var signatureAnnotation = DocumentAnnot.signatureAnnotation;\n        var documentCollection = signatureInkAnnotation.length !== 0 ? signatureInkAnnotation : signatureAnnotation;\n        if (signatureInkAnnotation.length !== 0 && signatureAnnotation.length) {\n            for (var z = 0; z < signatureInkAnnotation.length; z++) {\n                if (!this.isBoundsAreEqual(signatureInkAnnotation[0].Bounds, Bounds)) {\n                    documentCollection = signatureAnnotation;\n                }\n            }\n        }\n        for (var k = 0; k < documentCollection.length; k++) {\n            var previousLength = documentCollection.length;\n            var inkBounds = documentCollection[parseInt(k.toString(), 10)].Bounds;\n            if (this.isBoundsAreEqual(inkBounds, Bounds)) {\n                this.removeInkFromAnnotCollection(documentCollection[parseInt(k.toString(), 10)]);\n                documentCollection.splice(k, 1);\n                k = this.canReduse(previousLength, documentCollection.length, k);\n                updatedCollections = documentCollection;\n            }\n        }\n        return updatedCollections;\n    };\n    PdfViewerBase.prototype.isGroupedSignatureFields = function (fieldName) {\n        var formFieldsData = this.pdfViewer.retrieveFormFields();\n        var isGroupedFields = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldName)) {\n            isGroupedFields = formFieldsData.filter(function (field) { return field.name === fieldName; }).length > 1;\n        }\n        return isGroupedFields;\n    };\n    /**\n     * @private\n     * @param {any} fieldArray - The form field bounds.\n     * @param {any} signArray - The annotation bounds.\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.isSignatureWithInRect = function (fieldArray, signArray) {\n        fieldArray = fieldArray[0];\n        signArray = signArray[0];\n        var fieldx2 = fieldArray.x + fieldArray.width;\n        var signx2 = signArray.x + signArray.width;\n        var fieldy2 = fieldArray.y + fieldArray.height;\n        var signy2 = signArray.y + signArray.height;\n        if ((fieldArray.x - 10) <= signArray.x && (fieldx2 + 10) >= signx2) {\n            if ((fieldArray.y - 10) <= signArray.y && (fieldy2 + 10) >= signy2) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @param {any} bounds - The form field or annotation bounds.\n     * @returns {any} - Returns bounds.\n     */\n    PdfViewerBase.prototype.canvasRectArray = function (bounds) {\n        var array = [];\n        if (bounds) {\n            var left = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.x) ? bounds.x : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.X) ? bounds.X :\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.left) ? bounds.left : bounds.Left;\n            var top_4 = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.y) ? bounds.y : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.Y) ? bounds.Y :\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.top) ? bounds.top : bounds.Top;\n            var width = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.width) ? bounds.width : bounds.Width;\n            var height = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds.height) ? bounds.height : bounds.Height;\n            var canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left + 10, top_4 + 10, width - 10, height - 10);\n            array.push(canvas);\n        }\n        return array;\n    };\n    PdfViewerBase.prototype.isFormFieldSignature = function (annotation, annotationCollection) {\n        var updatedCollections = annotationCollection;\n        if (!this.pdfViewer.isSignatureEditable) {\n            var formFieldsData = this.pdfViewer.retrieveFormFields();\n            for (var i = 0; i < formFieldsData.length; i++) {\n                if (formFieldsData[parseInt(i.toString(), 10)].type === 'SignatureField' || formFieldsData[parseInt(i.toString(), 10)].type === 'InitialField') {\n                    var fieldBounds = formFieldsData[parseInt(i.toString(), 10)].bounds;\n                    var fieldName = formFieldsData[parseInt(i.toString(), 10)].name;\n                    if (this.isSignatureWithInRect(this.canvasRectArray(fieldBounds), this.canvasRectArray(annotation.Bounds))\n                        && !this.isGroupedSignatureFields(fieldName)) {\n                        if (annotationCollection) {\n                            updatedCollections = this.removeAnnotFromDoc(annotation, annotationCollection);\n                        }\n                        else {\n                            updatedCollections = this.removeAnnotFromDoc(annotation);\n                        }\n                        if (formFieldsData[parseInt(i.toString(), 10)].value === '') {\n                            var currentFieldPageNumber = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation.PageNumber) ?\n                                annotation.PageNumber : annotation.pageNumber;\n                            if (this.modifiedPageIndex.indexOf(currentFieldPageNumber) === -1) {\n                                this.modifiedPageIndex.push(currentFieldPageNumber);\n                            }\n                            formFieldsData[parseInt(i.toString(), 10)].value = annotation.PathData;\n                            formFieldsData[parseInt(i.toString(), 10)].signatureType = 'Draw';\n                            var bounds = {\n                                x: annotation.Bounds.X, y: annotation.Bounds.Y,\n                                width: annotation.Bounds.Width, height: annotation.Bounds.Height\n                            };\n                            formFieldsData[parseInt(i.toString(), 10)].signatureBounds = bounds;\n                            this.pdfViewer.updateFormFieldsValue(formFieldsData[parseInt(i.toString(), 10)]);\n                        }\n                        this.isInkAnnot = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return updatedCollections;\n    };\n    PdfViewerBase.prototype.canUpdateSignCollection = function (SignatureCollections) {\n        for (var i = 0; i < SignatureCollections.length; i++) {\n            var previousLength = SignatureCollections.length;\n            SignatureCollections = this.isFormFieldSignature(SignatureCollections[parseInt(i.toString(), 10)], SignatureCollections);\n            i = this.canReduse(previousLength, SignatureCollections.length, i);\n        }\n        return SignatureCollections;\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - page index for rendering the annotation.\n     * @param {any} annotationsCollection -It describes about the annotations collection\n     * @param {boolean} isAddedProgrammatically - It describes about the whether the isAddedProgrammatically true or not\n     * @returns {Promise<void>} - any\n     */\n    PdfViewerBase.prototype.renderAnnotations = function (pageIndex, annotationsCollection, isAddedProgrammatically) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, isAnnotationAdded, i, pageAnnotations, isAnnotationAdded, i, annotData, collection, l, type, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        data = {};\n                        if (this.documentAnnotationCollections) {\n                            isAnnotationAdded = false;\n                            for (i = 0; i < this.annotationRenderredList.length; i++) {\n                                if (this.annotationRenderredList[parseInt(i.toString(), 10)] === pageIndex) {\n                                    isAnnotationAdded = true;\n                                }\n                            }\n                            pageAnnotations = this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)];\n                            if (pageAnnotations && !isAnnotationAdded) {\n                                data.shapeAnnotation = pageAnnotations.shapeAnnotation;\n                                data.measureShapeAnnotation = pageAnnotations.measureShapeAnnotation;\n                                data.textMarkupAnnotation = pageAnnotations.textMarkupAnnotation;\n                                data.freeTextAnnotation = pageAnnotations.freeTextAnnotation;\n                                data.stampAnnotations = pageAnnotations.stampAnnotations;\n                                data.stickyNotesAnnotation = pageAnnotations.stickyNotesAnnotation;\n                                data.signatureAnnotation = pageAnnotations.signatureAnnotation;\n                                data.signatureInkAnnotation = pageAnnotations.signatureInkAnnotation;\n                                this.annotationRenderredList.push(pageIndex);\n                            }\n                        }\n                        if (this.isAnnotationCollectionRemoved) {\n                            data.shapeAnnotation = [];\n                            data.measureShapeAnnotation = [];\n                            data.textMarkupAnnotation = [];\n                            data.freeTextAnnotation = [];\n                            data.stampAnnotations = [];\n                            data.stickyNotesAnnotation = [];\n                            data.signatureInkAnnotation = [];\n                        }\n                        if (this.isImportAction) {\n                            isAnnotationAdded = false;\n                            for (i = 0; i < this.annotationPageList.length; i++) {\n                                if (this.annotationPageList[parseInt(i.toString(), 10)] === pageIndex) {\n                                    isAnnotationAdded = true;\n                                }\n                            }\n                            if (!isAnnotationAdded) {\n                                if (this.importedAnnotation) {\n                                    this.drawPageAnnotations(this.importedAnnotation, pageIndex, true);\n                                    this.annotationPageList[this.annotationPageList.length] = pageIndex;\n                                }\n                            }\n                        }\n                        annotData = [];\n                        collection = annotationsCollection.annotationOrder;\n                        if (!!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(collection)) return [3 /*break*/, 13];\n                        l = 0;\n                        _b.label = 1;\n                    case 1:\n                        if (!(l < collection.length)) return [3 /*break*/, 13];\n                        this.isInkAnnot = false;\n                        type = collection[parseInt(l.toString(), 10)].AnnotType ?\n                            collection[parseInt(l.toString(), 10)].AnnotType : collection[parseInt(l.toString(), 10)].AnnotationType;\n                        annotData.push(collection[parseInt(l.toString(), 10)]);\n                        _a = type;\n                        switch (_a) {\n                            case 'textMarkup': return [3 /*break*/, 2];\n                            case 'shape_measure': return [3 /*break*/, 3];\n                            case 'shape': return [3 /*break*/, 4];\n                            case 'sticky': return [3 /*break*/, 5];\n                            case 'stamp': return [3 /*break*/, 6];\n                            case 'Ink': return [3 /*break*/, 8];\n                            case 'Text Box': return [3 /*break*/, 9];\n                        }\n                        return [3 /*break*/, 10];\n                    case 2:\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotationModule.textMarkupAnnotationModule)) {\n                            this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                renderTextMarkupAnnotationsInPage(annotData, pageIndex, null, true);\n                        }\n                        return [3 /*break*/, 11];\n                    case 3:\n                        this.pdfViewer.annotationModule.renderAnnotations(pageIndex, null, annotData, null, null, null, true);\n                        return [3 /*break*/, 11];\n                    case 4:\n                        this.pdfViewer.annotationModule.renderAnnotations(pageIndex, annotData, null, null, null, null, true);\n                        return [3 /*break*/, 11];\n                    case 5:\n                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderStickyNotesAnnotations(annotData, pageIndex);\n                        return [3 /*break*/, 11];\n                    case 6: return [4 /*yield*/, this.pdfViewer.annotationModule.stampAnnotationModule.\n                            renderStampAnnotations(annotData, pageIndex, null, null, true)];\n                    case 7:\n                        _b.sent();\n                        return [3 /*break*/, 11];\n                    case 8:\n                        if (!this.pdfViewer.isSignatureEditable) {\n                            this.isFormFieldSignature(annotData[0]);\n                        }\n                        if (!this.isInkAnnot) {\n                            this.pdfViewer.annotationModule.inkAnnotationModule.renderExistingInkSignature(annotData, pageIndex, false, true);\n                        }\n                        return [3 /*break*/, 11];\n                    case 9:\n                        this.pdfViewer.annotationModule.freeTextAnnotationModule.\n                            renderFreeTextAnnotations(annotData, pageIndex, undefined, true);\n                        return [3 /*break*/, 11];\n                    case 10: return [3 /*break*/, 11];\n                    case 11:\n                        annotData = [];\n                        _b.label = 12;\n                    case 12:\n                        l++;\n                        return [3 /*break*/, 1];\n                    case 13:\n                        if (data && data.signatureAnnotation) {\n                            if (!this.pdfViewer.isSignatureEditable) {\n                                data.signatureAnnotation = this.canUpdateSignCollection(data.signatureAnnotation);\n                            }\n                            if (data.signatureAnnotation) {\n                                this.signatureModule.renderExistingSignature(data.signatureAnnotation, pageIndex, false);\n                            }\n                        }\n                        if (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.isAnnotationSelected) {\n                            this.pdfViewer.annotationModule.selectAnnotationFromCodeBehind();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PdfViewerBase.prototype.renderTextContent = function (data, pageIndex) {\n        var texts = data['textContent'];\n        var bounds = data['textBounds'];\n        var rotation = data['rotation'];\n        var rtldoc = data.documentTextCollection ?\n            this.checkIsRtlText(data.documentTextCollection[0][parseInt(pageIndex.toString(), 10)].PageText) :\n            this.checkIsRtlText(data.pageText);\n        var textLayer = this.getElement('_textLayer_' + pageIndex);\n        if (!textLayer) {\n            textLayer = this.textLayer.addTextLayer(pageIndex, this.getPageWidth(pageIndex), this.getPageHeight(pageIndex), this.getElement('_pageDiv_' + pageIndex));\n        }\n        if (textLayer && texts && bounds) {\n            textLayer.style.display = 'block';\n            if (textLayer.childNodes.length === 0) {\n                this.textLayer.renderTextContents(pageIndex, texts, bounds, rotation, rtldoc);\n            }\n            else {\n                this.textLayer.resizeTextContents(pageIndex, texts, bounds, rotation, true);\n            }\n        }\n    };\n    PdfViewerBase.prototype.renderAccessibilityTags = function (pageIndex, taggedTextResponse) {\n        this.accessibilityTags.renderAccessibilityTags(pageIndex, taggedTextResponse);\n    };\n    PdfViewerBase.prototype.returnPageListForAccessibilityTags = function (pageIndex) {\n        var pageList = [];\n        if (!this.enableAccessibilityMultiPageRequest) {\n            return [pageIndex];\n        }\n        var minPage = pageIndex - 2 > 0 ? pageIndex - 2 : 0;\n        var maxPage = pageIndex + 4 < this.pageCount - 1 ? pageIndex + 4 : this.pageCount - 1;\n        for (var i = minPage; i <= maxPage; i++) {\n            if (this.accessibilityTagsCollection[parseInt(i.toString(), 10)] === undefined) {\n                pageList.push(parseInt(i.toString(), 10));\n            }\n            else {\n                maxPage = maxPage + 1 < this.pageCount - 1 ? maxPage + 1 : this.pageCount - 1;\n            }\n        }\n        this.pageRequestListForAccessibilityTags = pageList;\n        return pageList;\n    };\n    PdfViewerBase.prototype.createRequestForAccessibilityTags = function (pageIndex) {\n        // eslint-disable-next-line\n        var proxy = this;\n        var jsonObject = { action: 'RenderTaggedContent', elementId: this.pdfViewer.element.id, hashId: this.hashId, uniqueId: this.documentId, pageList: JSON.stringify(this.returnPageListForAccessibilityTags(pageIndex)) };\n        if (this.jsonDocumentId) {\n            jsonObject.document = this.jsonDocumentId;\n        }\n        var url = this.pdfViewer.serviceUrl + '/' + 'RenderTaggedContent';\n        this.accessibilityTagsHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        this.accessibilityTagsHandler.url = url;\n        this.accessibilityTagsHandler.mode = true;\n        this.accessibilityTagsHandler.responseType = 'text';\n        this.accessibilityTagsHandler.send(jsonObject);\n        this.accessibilityTagsHandler.onSuccess = function (result) {\n            var data = JSON.parse(result.data);\n            var pageData;\n            for (var i = 0; i < data.length; i++) {\n                pageData = data[parseInt(i.toString(), 10)];\n                proxy.accessibilityTagsCollection[pageData[0]] = pageData[1];\n            }\n            proxy.pageRequestListForAccessibilityTags = [];\n            if (proxy.accessibilityTagsCollection[parseInt(pageIndex.toString(), 10)]) {\n                proxy.renderAccessibilityTags(pageIndex, proxy.accessibilityTagsCollection[parseInt(pageIndex.toString(), 10)]);\n            }\n            if (proxy.accessibilityTagsCollection[pageIndex - 1 <= 0 ? parseInt((pageIndex - 1).toString(), 10) : 0]) {\n                proxy.renderAccessibilityTags(pageIndex - 1 <= 0 ? pageIndex - 1 : 0, proxy.accessibilityTagsCollection[pageIndex - 1 <= 0 ?\n                    parseInt((pageIndex - 1).toString(), 10) : 0]);\n            }\n        };\n    };\n    PdfViewerBase.prototype.renderPageContainer = function (pageNumber, pageWidth, pageHeight, topValue) {\n        var pageDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: this.pdfViewer.element.id + '_pageDiv_' + pageNumber, className: 'e-pv-page-div', attrs: { 'tabindex': '-1' } });\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) {\n            pageDiv.classList.add('e-pv-text-selection-none');\n        }\n        pageDiv.style.width = pageWidth + 'px';\n        pageDiv.style.height = pageHeight + 'px';\n        if (this.pdfViewer.enableRtl) {\n            pageDiv.style.right = this.updateLeftPosition(pageNumber) + 'px';\n        }\n        else {\n            pageDiv.style.left = this.updateLeftPosition(pageNumber) + 'px';\n        }\n        pageDiv.style.top = topValue + 'px';\n        this.pageContainer.appendChild(pageDiv);\n        this.pageContainer.style.width = (this.isMixedSizeDocument && (this.highestWidth * this.getZoomFactor()) > this.viewerContainer.clientWidth) ? (this.highestWidth * this.getZoomFactor()) + 'px' : this.viewerContainer.clientWidth + 'px';\n        this.createWaitingPopup(pageNumber);\n        this.orderPageDivElements(pageDiv, pageNumber);\n        this.renderPageCanvas(pageDiv, pageWidth, pageHeight, pageNumber, 'block');\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && !this.isThumb) {\n            this.updateMobileScrollerPosition();\n        }\n    };\n    PdfViewerBase.prototype.renderPDFInformations = function () {\n        if (this.pdfViewer.thumbnailViewModule && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.pdfViewer.enableDesktopMode)) {\n            this.pdfViewer.thumbnailViewModule.createRequestForThumbnails();\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.pageOrganizer) && this.pdfViewer.enablePageOrganizer) {\n            this.pdfViewer.pageOrganizer.createRequestForPreview();\n        }\n        if (this.pdfViewer.bookmarkViewModule) {\n            this.pdfViewer.bookmarkViewModule.createRequestForBookmarks();\n        }\n        if (this.pdfViewer.annotationModule) {\n            if (this.pdfViewer.toolbarModule) {\n                this.pdfViewer.annotationModule.stickyNotesAnnotationModule.initializeAcccordionContainer();\n            }\n            if (this.pdfViewer.isCommandPanelOpen) {\n                this.pdfViewer.annotation.showCommentsPanel();\n            }\n            this.pdfViewer.annotationModule.stickyNotesAnnotationModule.createRequestForComments();\n        }\n    };\n    PdfViewerBase.prototype.orderPageDivElements = function (pageDiv, pageIndex) {\n        var nextElement = this.getElement('_pageDiv_' + (pageIndex + 1));\n        if (this.pageContainer && pageDiv) {\n            if (nextElement) {\n                this.pageContainer.insertBefore(pageDiv, nextElement);\n            }\n            else {\n                this.pageContainer.appendChild(pageDiv);\n            }\n        }\n    };\n    /**\n     * @param {HTMLElement} pageDiv - It describes about the page div\n     * @param {number} pageWidth - It describes about the page width\n     * @param {number} pageHeight - It describes about the page heigght\n     * @param {number} pageNumber - It describes about the page number\n     * @param {string} displayMode - It describes about the display mode\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.renderPageCanvas = function (pageDiv, pageWidth, pageHeight, pageNumber, displayMode) {\n        if (pageDiv) {\n            var pageCanvas = this.getElement('_pageCanvas_' + pageNumber);\n            if (pageCanvas) {\n                pageCanvas.width = pageWidth;\n                pageCanvas.height = pageHeight;\n                pageCanvas.style.display = 'block';\n                if (this.isMixedSizeDocument && this.highestWidth > 0) {\n                    pageCanvas.style.marginLeft = 'auto';\n                    pageCanvas.style.marginRight = 'auto';\n                }\n            }\n            else {\n                pageCanvas = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('img', { id: this.pdfViewer.element.id + '_pageCanvas_' + pageNumber, className: 'e-pv-page-canvas' });\n                pageCanvas.width = pageWidth;\n                pageCanvas.height = pageHeight;\n                pageCanvas.style.display = displayMode;\n                pageCanvas.style.userSelect = 'none';\n                if (this.isMixedSizeDocument && this.highestWidth > 0) {\n                    pageCanvas.style.marginLeft = 'auto';\n                    pageCanvas.style.marginRight = 'auto';\n                }\n                pageDiv.appendChild(pageCanvas);\n            }\n            pageCanvas.setAttribute('alt', '');\n            if (this.pdfViewer.textSearchModule || this.pdfViewer.textSelectionModule ||\n                this.pdfViewer.formFieldsModule || this.pdfViewer.annotationModule) {\n                this.textLayer.addTextLayer(pageNumber, pageWidth, pageHeight, pageDiv);\n            }\n            return pageCanvas;\n        }\n    };\n    /**\n     * @private\n     * @param {any} pageCanvas - The canvas for rendering the page.\n     * @param {any} pageNumber - The page number for adding styles.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.applyElementStyles = function (pageCanvas, pageNumber) {\n        if (this.isMixedSizeDocument && pageCanvas) {\n            var canvasElement = document.getElementById(this.pdfViewer.element.id + '_pageCanvas_' + pageNumber);\n            var oldCanvas = document.getElementById(this.pdfViewer.element.id + '_oldCanvas_' + pageNumber);\n            if (pageCanvas && canvasElement && canvasElement.offsetLeft > 0) {\n                pageCanvas.style.marginLeft = canvasElement.offsetLeft + 'px';\n                pageCanvas.style.marginRight = canvasElement.offsetLeft + 'px';\n            }\n            else if (oldCanvas && oldCanvas.offsetLeft > 0) {\n                pageCanvas.style.marginLeft = oldCanvas.offsetLeft + 'px';\n                pageCanvas.style.marginRight = oldCanvas.offsetLeft + 'px';\n            }\n            else {\n                pageCanvas.style.marginLeft = 'auto';\n                pageCanvas.style.marginRight = 'auto';\n            }\n        }\n    };\n    /**\n     * @private\n     * @param  {number} pageIndex - page index for updating positon.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateLeftPosition = function (pageIndex) {\n        var leftPosition;\n        var width = this.viewerContainer.getBoundingClientRect().width;\n        if (width === 0) {\n            width = parseFloat(this.pdfViewer.width.toString());\n        }\n        if (this.isMixedSizeDocument && this.highestWidth > 0) {\n            if (this.viewerContainer.clientWidth > 0) {\n                leftPosition = (this.viewerContainer.clientWidth - (this.highestWidth * this.getZoomFactor())) / 2;\n            }\n            else {\n                leftPosition = (width - (this.highestWidth * this.getZoomFactor())) / 2;\n            }\n            var pageDiff = (this.highestWidth * this.getZoomFactor() - this.getPageWidth(pageIndex)) / 2;\n            if (leftPosition > 0) {\n                leftPosition += pageDiff;\n            }\n            else {\n                leftPosition = pageDiff;\n            }\n            this.pageContainer.style.width = ((this.highestWidth * this.getZoomFactor()) > this.viewerContainer.clientWidth) ? (this.highestWidth * this.getZoomFactor()) + 'px' : this.viewerContainer.clientWidth + 'px';\n        }\n        else {\n            if (this.viewerContainer.clientWidth > 0) {\n                leftPosition = (this.viewerContainer.clientWidth - this.getPageWidth(pageIndex)) / 2;\n            }\n            else {\n                leftPosition = (width - this.getPageWidth(pageIndex)) / 2;\n            }\n        }\n        var isLandscape = false;\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)].width > this.pageSize[parseInt(pageIndex.toString(), 10)].height) {\n            isLandscape = true;\n        }\n        if (leftPosition < 0 || (this.pdfViewer.magnificationModule ? ((this.pdfViewer.magnificationModule.isAutoZoom && this.getZoomFactor() < 1) || this.pdfViewer.magnificationModule.fitType === 'fitToWidth') : false)) {\n            var leftValue = leftPosition;\n            if (leftPosition > 0 && (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode)) {\n                leftPosition = leftValue;\n            }\n            else {\n                leftPosition = this.pageLeft;\n            }\n            if ((leftPosition > 0) && this.isMixedSizeDocument) {\n                if (leftValue > 0) {\n                    leftPosition = leftValue;\n                }\n            }\n        }\n        if (this.viewerContainer.clientHeight >= this.viewerContainer.scrollHeight && this.previousScrollbarWidth > 0) {\n            var scrollBarWidth = this.navigationPane.getViewerContainerScrollbarWidth();\n            leftPosition = leftPosition - ((this.previousScrollbarWidth - scrollBarWidth) / 2);\n        }\n        return leftPosition;\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - The page index for positon.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.applyLeftPosition = function (pageIndex) {\n        var leftPosition;\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            if (this.isMixedSizeDocument && this.highestWidth > 0) {\n                if (this.viewerContainer.clientWidth > 0) {\n                    leftPosition = (this.viewerContainer.clientWidth - (this.highestWidth * this.getZoomFactor())) / 2;\n                }\n                else {\n                    leftPosition = (this.viewerContainer.getBoundingClientRect().width - (this.highestWidth * this.getZoomFactor())) / 2;\n                }\n                var pageDiff = (this.highestWidth * this.getZoomFactor() - this.getPageWidth(pageIndex)) / 2;\n                if (leftPosition > 0) {\n                    leftPosition += pageDiff;\n                }\n                else {\n                    leftPosition = pageDiff;\n                }\n            }\n            else {\n                if (this.viewerContainer.clientWidth > 0) {\n                    leftPosition = (this.viewerContainer.clientWidth - this.pageSize[parseInt(pageIndex.toString(), 10)].width *\n                        this.getZoomFactor()) / 2;\n                }\n                else {\n                    leftPosition = (this.viewerContainer.getBoundingClientRect().width -\n                        this.pageSize[parseInt(pageIndex.toString(), 10)].width * this.getZoomFactor()) / 2;\n                }\n            }\n            var isLandscape = false;\n            if (this.pageSize[parseInt(pageIndex.toString(), 10)].width > this.pageSize[parseInt(pageIndex.toString(), 10)].height) {\n                isLandscape = true;\n            }\n            if (leftPosition < 0 || (this.pdfViewer.magnificationModule ? ((this.pdfViewer.magnificationModule.isAutoZoom && this.getZoomFactor() < 1) || this.pdfViewer.magnificationModule.fitType === 'fitToWidth') : false)) {\n                var leftValue = leftPosition;\n                leftPosition = this.pageLeft;\n                if ((leftValue > 0) && this.isMixedSizeDocument) {\n                    leftPosition = leftValue;\n                }\n            }\n            var pageDiv = document.getElementById(this.pdfViewer.element.id + '_pageDiv_' + pageIndex);\n            if (pageDiv) {\n                if (!this.pdfViewer.enableRtl) {\n                    pageDiv.style.left = leftPosition + 'px';\n                }\n                else {\n                    pageDiv.style.right = leftPosition + 'px';\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.updatePageHeight = function (viewerHeight, toolbarHeight) {\n        return ((viewerHeight - toolbarHeight) / viewerHeight) * 100 + '%';\n    };\n    /**\n     * @private\n     * @param {Point} clientPoint - The user should provide a x, y coordinates.\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.getPageNumberFromClientPoint = function (clientPoint) {\n        var pointX = clientPoint.x + this.viewerContainer.scrollLeft;\n        var pointY = clientPoint.y + this.viewerContainer.scrollTop;\n        for (var i = 0; i < this.pageCount; i++) {\n            var pageTop = this.pageSize[parseInt(i.toString(), 10)].height + this.viewerContainer.scrollTop;\n            if (pointY < (this.pageSize[parseInt(i.toString(), 10)].top + pageTop)) {\n                var viewerContainerBounds = this.getElement('_pageViewContainer').getBoundingClientRect();\n                var pageLeft = ((viewerContainerBounds.width - this.pageSize[parseInt(i.toString(), 10)].width) / 2) +\n                    viewerContainerBounds.x;\n                var verticalScrollPosition = 0;\n                if (pointY > this.pageSize[parseInt(i.toString(), 10)].top) {\n                    verticalScrollPosition = (pointY - this.pageSize[parseInt(i.toString(), 10)].top);\n                }\n                else {\n                    verticalScrollPosition = (this.pageSize[parseInt(i.toString(), 10)].top - pointY);\n                }\n                if (verticalScrollPosition > 0) {\n                    if (this.pageSize[parseInt(i.toString(), 10)] != null) {\n                        var pageHeight = this.getPageHeight(i);\n                        if (pageLeft >= 0) {\n                            if ((pointX < pageLeft) || (pointX > (pageLeft + (this.pageSize[parseInt(i.toString(), 10)].width)))) {\n                                return -1;\n                            }\n                        }\n                        if (verticalScrollPosition <= (this.getPageTop(i) + pageTop)) {\n                            return i + 1;\n                        }\n                    }\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * @private\n     * @param {Point} clientPoint - The user should provide a x, y coordinates.\n     * @param {number} pageNumber - We need to pass pageNumber.\n     * @returns {Point} - point\n     */\n    PdfViewerBase.prototype.convertClientPointToPagePoint = function (clientPoint, pageNumber) {\n        if (pageNumber !== -1) {\n            var viewerContainerBounds = this.getElement('_pageViewContainer').getBoundingClientRect();\n            var pageLeft = ((viewerContainerBounds.width - this.pageSize[pageNumber - 1].width) / 2) +\n                viewerContainerBounds.x;\n            var pagePoint = { x: (clientPoint.x + this.viewerContainer.scrollLeft) - pageLeft, y: (clientPoint.y + this.viewerContainer.scrollTop) - this.pageSize[pageNumber - 1].top };\n            return pagePoint;\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {Point} pagePoint - The user needs to provide a page x, y position.\n     * @param {number} pageNumber - We need to pass pageNumber.\n     * @returns {Point} - point\n     */\n    PdfViewerBase.prototype.convertPagePointToClientPoint = function (pagePoint, pageNumber) {\n        if (pageNumber !== -1) {\n            var viewerContainerBounds = this.getElement('_pageViewContainer').getBoundingClientRect();\n            var pageLeft = ((viewerContainerBounds.width - this.pageSize[pageNumber - 1].width) / 2) +\n                viewerContainerBounds.x;\n            var clientPoint = { x: pagePoint.x + pageLeft, y: pagePoint.y + this.pageSize[pageNumber - 1].top };\n            return clientPoint;\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {Point} pagePoint - The user needs to provide a page x, y position.\n     * @param {number} pageNumber - We need to pass pageNumber.\n     * @returns {Point} - point\n     */\n    PdfViewerBase.prototype.convertPagePointToScrollingPoint = function (pagePoint, pageNumber) {\n        if (pageNumber !== -1) {\n            var scrollingPoint = { x: pagePoint.x + this.viewerContainer.scrollLeft, y: pagePoint.y +\n                    this.viewerContainer.scrollTop };\n            return scrollingPoint;\n        }\n        return null;\n    };\n    PdfViewerBase.prototype.initiatePageViewScrollChanged = function () {\n        if (this.scrollHoldTimer) {\n            clearTimeout(this.scrollHoldTimer);\n        }\n        this.scrollHoldTimer = null;\n        if ((this.scrollPosition * this.getZoomFactor()) !== this.viewerContainer.scrollTop) {\n            this.scrollPosition = this.viewerContainer.scrollTop;\n            this.pageViewScrollChanged(this.currentPageNumber);\n        }\n    };\n    PdfViewerBase.prototype.renderCountIncrement = function () {\n        if (this.pdfViewer.magnificationModule) {\n            this.pdfViewer.magnificationModule.renderCountIncrement();\n        }\n    };\n    /**\n     * @private\n     * @param {number} currentPageNumber - The current pagenumber.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.pageViewScrollChanged = function (currentPageNumber) {\n        if (this.isPanMode) {\n            if (this.renderedPagesList.indexOf(currentPageNumber - 1) === -1) {\n                this.reRenderedCount = 0;\n            }\n        }\n        else {\n            this.reRenderedCount = 0;\n        }\n        var currentPageIndex = currentPageNumber - 1;\n        if (currentPageNumber !== this.previousPage && currentPageNumber <= this.pageCount) {\n            var isSkip = false;\n            var storeData = this.clientSideRendering ? this.getLinkInformation(currentPageIndex) :\n                this.getStoredData(currentPageIndex);\n            if (this.isDataExits && !this.getStoredData(currentPageIndex)) {\n                isSkip = true;\n            }\n            if (this.renderedPagesList.indexOf(currentPageIndex) === -1 && !this.getMagnified() && !isSkip && !this.isScrollerMoving) {\n                this.renderCountIncrement();\n                this.createRequestForRender(currentPageIndex);\n            }\n        }\n        if (!(this.getMagnified() || this.getPagesPinchZoomed())) {\n            var previous = currentPageIndex - 1;\n            var isSkip = false;\n            var canvas = this.getElement('_pageCanvas_' + previous);\n            var storeData = this.clientSideRendering ? this.getLinkInformation(previous) : this.getStoredData(previous);\n            if (this.isDataExits && !this.getStoredData(previous)) {\n                isSkip = true;\n            }\n            if (canvas !== null && !isSkip) {\n                if (this.renderedPagesList.indexOf(previous) === -1 && !this.getMagnified() && !this.isScrollerMoving) {\n                    this.renderCountIncrement();\n                    this.createRequestForRender(previous);\n                }\n            }\n            if (this.isMinimumZoom) {\n                this.renderPreviousPagesInScroll(previous);\n            }\n            var next = currentPageIndex + 1;\n            var pageHeight = 0;\n            if (next < this.pageCount) {\n                pageHeight = this.getPageHeight(next);\n                var allowPageRendering = this.isMinimumZoom ? this.isMinimumZoom : this.renderedPagesList.indexOf(next) === -1;\n                if (allowPageRendering && !this.getMagnified() && pageHeight) {\n                    if (this.isDocumentLoaded && this.pdfViewer.initialRenderPages > this.pageRenderCount &&\n                        (this.getPageHeight(this.pdfViewer.initialRenderPages - 1) +\n                            this.getPageTop(this.pdfViewer.initialRenderPages - 1)) > this.viewerContainer.clientHeight) {\n                        var renderLimit = this.pdfViewer.initialRenderPages <= this.pageCount ?\n                            this.pdfViewer.initialRenderPages : this.pageCount;\n                        for (var i = 1; i < renderLimit; i++) {\n                            this.createRequestForRender(i);\n                        }\n                    }\n                    else if (!this.isScrollerMoving) {\n                        this.createRequestForRender(next);\n                        this.renderCountIncrement();\n                        while (this.viewerContainer.clientHeight > pageHeight) {\n                            next = next + 1;\n                            if (next < this.pageCount) {\n                                this.renderPageElement(next);\n                                this.createRequestForRender(next);\n                                pageHeight += this.getPageHeight(next);\n                                this.renderCountIncrement();\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.renderPreviousPagesInScroll = function (pageIndex) {\n        var next = pageIndex - 1;\n        var pageNumber = next - 1;\n        if (next > 0) {\n            if (this.renderedPagesList.indexOf(next) === -1 && !this.getMagnified()) {\n                this.createRequestForRender(next);\n                this.renderCountIncrement();\n            }\n            if (pageNumber > 0) {\n                if (this.renderedPagesList.indexOf(pageNumber) === -1 && !this.getMagnified()) {\n                    this.createRequestForRender(pageNumber);\n                    this.renderCountIncrement();\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.downloadDocument = function (blobUrl) {\n        var Url = URL || webkitURL;\n        blobUrl = Url.createObjectURL(blobUrl);\n        var anchorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a');\n        if (anchorElement.click) {\n            anchorElement.href = blobUrl;\n            anchorElement.target = '_parent';\n            if ('download' in anchorElement) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.downloadFileName)) {\n                    if (this.downloadFileName.endsWith('.pdf')) {\n                        anchorElement.download = this.downloadFileName;\n                    }\n                    else {\n                        var splitPdf = this.downloadFileName.split('.pdf')[0] + '.pdf';\n                        anchorElement.download = splitPdf;\n                    }\n                }\n                else {\n                    anchorElement.download = 'Default.pdf';\n                }\n            }\n            (document.body || document.documentElement).appendChild(anchorElement);\n            anchorElement.click();\n            anchorElement.parentNode.removeChild(anchorElement);\n        }\n        else {\n            if (window.top === window &&\n                blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n            }\n            window.open(blobUrl, '_parent');\n        }\n    };\n    PdfViewerBase.prototype.downloadExportFormat = function (blobUrl, annotationDataFormat, formFieldDataFormat, isForm) {\n        var isJson = annotationDataFormat === 'Json' || formFieldDataFormat === 'Json';\n        var extension = isJson ? '.json' : formFieldDataFormat === 'Fdf' ? '.fdf' : formFieldDataFormat === 'Xml' ? '.xml' : (annotationDataFormat === 'Xfdf' || formFieldDataFormat === 'Xfdf') ? '.xfdf' : null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(extension)) {\n            var Url = URL || webkitURL;\n            blobUrl = Url.createObjectURL(blobUrl);\n            var anchorElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a');\n            if (anchorElement.click) {\n                anchorElement.href = blobUrl;\n                anchorElement.target = '_parent';\n                if ('download' in anchorElement) {\n                    if (this.pdfViewer.exportAnnotationFileName !== null) {\n                        anchorElement.download = this.pdfViewer.exportAnnotationFileName.split('.')[0] + extension;\n                    }\n                    else {\n                        anchorElement.download = this.pdfViewer.fileName.split('.')[0] + extension;\n                    }\n                }\n                (document.body || document.documentElement).appendChild(anchorElement);\n                anchorElement.click();\n                anchorElement.parentNode.removeChild(anchorElement);\n                if (isForm) {\n                    this.pdfViewer.fireFormExportSuccess(blobUrl, anchorElement.download);\n                }\n                else {\n                    this.pdfViewer.fireExportSuccess(blobUrl, anchorElement.download);\n                }\n            }\n            else if (isJson) {\n                if (window.top === window &&\n                    blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                    var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                    blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n                }\n                window.open(blobUrl, '_parent');\n                if (isForm) {\n                    this.pdfViewer.fireFormExportSuccess(blobUrl, this.pdfViewer.fileName.split('.')[0] + extension);\n                }\n                else {\n                    this.pdfViewer.fireExportSuccess(blobUrl, this.pdfViewer.fileName.split('.')[0] + extension);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {string} data - The data for exporting the fields.\n     * @param {FormFieldDataFormat} formFieldDataFormat - It describes about the form fiels data format\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.exportFormFields = function (data, formFieldDataFormat) {\n        this.createRequestForExportFormfields(false, formFieldDataFormat, data);\n    };\n    /**\n     * @param {string} data - It describes about the data value\n     * @param {FormFieldDataFormat} formFieldDataFormat - It describes about the form field data format\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.importFormFields = function (data, formFieldDataFormat) {\n        this.createRequestForImportingFormfields(data, formFieldDataFormat);\n    };\n    /**\n     * @param {boolean} isObject - It ensures whether the isObject is true or not\n     * @param {FormFieldDataFormat} formFieldDataFormat - This describes about the form field data format\n     * @param {string} data - The data for exporting the fields.\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.createRequestForExportFormfields = function (isObject, formFieldDataFormat, data) {\n        var _this = this;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var promise = new Promise(function (resolve, reject) {\n            var jsonObject = proxy.createFormfieldsJsonData();\n            var canExport = false;\n            if (formFieldDataFormat === 'Json' || formFieldDataFormat === 'Fdf' || formFieldDataFormat === 'Xfdf' || formFieldDataFormat === 'Xml') {\n                jsonObject.formFieldDataFormat = formFieldDataFormat;\n                canExport = proxy.pdfViewer.fireFormExportStarted(jsonObject);\n            }\n            if (canExport) {\n                jsonObject.action = 'ExportFormFields';\n                jsonObject['hashId'] = proxy.hashId;\n                jsonObject['fileName'] = proxy.pdfViewer.fileName;\n                if (data && data !== '' && !isObject) {\n                    jsonObject['filePath'] = data;\n                }\n                jsonObject['elementId'] = _this.pdfViewer.element.id;\n                if (proxy.jsonDocumentId) {\n                    jsonObject.document = proxy.jsonDocumentId;\n                }\n                var formFieldsPageList = _this.getFormFieldsPageList(jsonObject['formDesigner']);\n                jsonObject['formFieldsPageList'] = JSON.stringify(formFieldsPageList);\n                jsonObject['isFormFieldAnnotationsExist'] = _this.isAnnotationsExist(jsonObject['formDesigner']) || _this.isFieldsDataExist(jsonObject['fieldsData']) || formFieldsPageList.length > 0;\n                var url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.exportFormFields;\n                proxy.exportFormFieldsRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(_this.pdfViewer);\n                proxy.exportFormFieldsRequestHandler.url = url;\n                proxy.exportFormFieldsRequestHandler.mode = true;\n                proxy.exportFormFieldsRequestHandler.responseType = 'text';\n                if (proxy.validateForm && proxy.pdfViewer.enableFormFieldsValidation) {\n                    proxy.pdfViewer.fireValidatedFailed(proxy.pdfViewer.serverActionSettings.download);\n                    proxy.validateForm = false;\n                }\n                else if (!proxy.clientSideRendering) {\n                    proxy.exportFormFieldsRequestHandler.send(jsonObject);\n                }\n                else {\n                    var resultData = proxy.pdfViewer.pdfRendererModule.exportFormFields(jsonObject, isObject);\n                    var decoder = new TextDecoder('utf-8');\n                    var updatedResultData = decoder.decode(resultData);\n                    if (isObject) {\n                        var annotData = _this.getDataOnSuccess(updatedResultData);\n                        resolve(annotData);\n                    }\n                    else {\n                        proxy.exportFileDownload(resultData, proxy, formFieldDataFormat, jsonObject, isObject);\n                    }\n                }\n                proxy.exportFormFieldsRequestHandler.onSuccess = function (result) {\n                    var data = result.data;\n                    var redirect = proxy.checkRedirection(data);\n                    if (!redirect) {\n                        if (data) {\n                            if (isObject) {\n                                var annotData = proxy.exportFileDownload(data, proxy, formFieldDataFormat, jsonObject, isObject);\n                                resolve(annotData);\n                            }\n                            else {\n                                proxy.exportFileDownload(data, proxy, formFieldDataFormat, jsonObject, isObject);\n                            }\n                        }\n                    }\n                };\n                proxy.exportFormFieldsRequestHandler.onFailure = function (result) {\n                    proxy.pdfViewer.fireFormExportFailed(jsonObject.pdfAnnotation, result.statusText);\n                };\n                proxy.exportFormFieldsRequestHandler.onError = function (result) {\n                    proxy.pdfViewer.fireFormExportFailed(jsonObject.pdfAnnotation, result.statusText);\n                };\n            }\n        });\n        if (isObject) {\n            return promise;\n        }\n        else {\n            return true;\n        }\n    };\n    PdfViewerBase.prototype.exportFileDownload = function (data, proxy, formFieldDataFormat, jsonObject, isObject) {\n        if (!this.clientSideRendering) {\n            return new Promise(function (resolve) {\n                if (data) {\n                    if (!proxy.clientSideRendering) {\n                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.exportFormFields, data);\n                    }\n                    if (isObject) {\n                        var annotationJson = decodeURIComponent(escape(atob(data.split(',')[1])));\n                        resolve(annotationJson);\n                        proxy.pdfViewer.fireFormExportSuccess(annotationJson, proxy.pdfViewer.fileName);\n                    }\n                    else if (data.split('base64,')[1]) {\n                        var blobUrl = proxy.createBlobUrl(data.split('base64,')[1], 'application/json');\n                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.json');\n                        }\n                        else if (jsonObject.formFieldDataFormat === 'Json' || jsonObject.formFieldDataFormat === 'Fdf' || jsonObject.formFieldDataFormat === 'Xfdf' || jsonObject.formFieldDataFormat === 'Xml') {\n                            proxy.downloadExportFormat(blobUrl, null, formFieldDataFormat, true);\n                        }\n                    }\n                }\n            });\n        }\n        else {\n            return new Promise(function (resolve) {\n                if (data) {\n                    if (!proxy.clientSideRendering) {\n                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.exportFormFields, data);\n                    }\n                    if (isObject) {\n                        var annotationJson = decodeURIComponent(escape(atob(data.split(',')[1])));\n                        resolve(annotationJson);\n                        proxy.pdfViewer.fireFormExportSuccess(annotationJson, proxy.pdfViewer.fileName);\n                    }\n                    else if (data && (typeof data !== 'string')) {\n                        var blobUrl = new Blob([data], { type: 'application/json' });\n                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.json');\n                        }\n                        else if (jsonObject.formFieldDataFormat === 'Json' || jsonObject.formFieldDataFormat === 'Fdf' || jsonObject.formFieldDataFormat === 'Xfdf' || jsonObject.formFieldDataFormat === 'Xml') {\n                            proxy.downloadExportFormat(blobUrl, null, formFieldDataFormat, true);\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @param {string} fileName - Gets the name of the file name for slicing the last index\n     * @param {string} sliceBy - A type to slice the file name; example (\".\", \"_\")\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.getLastIndexValue = function (fileName, sliceBy) {\n        var indexName = fileName.slice(fileName.lastIndexOf(sliceBy) + 1);\n        return indexName;\n    };\n    /**\n     * @param {any} source - It describes about the source\n     * @param {FormFieldDataFormat} formFieldDataFormat - It describes about the form field data format\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.createRequestForImportingFormfields = function (source, formFieldDataFormat) {\n        var proxy = null;\n        var index = '.';\n        // eslint-disable-next-line\n        proxy = this;\n        var jsonObject = {};\n        var sourceName = this.getLastIndexValue(source, index);\n        if (typeof source !== 'object' && (sourceName === 'json' || sourceName === 'fdf' || sourceName === 'xfdf' || sourceName === 'xml')) {\n            jsonObject.data = source;\n            jsonObject['fileName'] = proxy.pdfViewer.fileName;\n            jsonObject.formFieldDataFormat = formFieldDataFormat;\n        }\n        else {\n            jsonObject.formFieldDataFormat = formFieldDataFormat;\n            if (formFieldDataFormat === 'Json') {\n                jsonObject.data = JSON.stringify(source);\n            }\n            else {\n                jsonObject.data = source;\n            }\n        }\n        proxy.pdfViewer.fireFormImportStarted(source);\n        jsonObject['hashId'] = proxy.hashId;\n        jsonObject['elementId'] = this.pdfViewer.element.id;\n        if (proxy.jsonDocumentId) {\n            jsonObject.document = proxy.jsonDocumentId;\n        }\n        jsonObject = Object.assign(jsonObject, this.constructJsonDownload());\n        jsonObject.action = 'ImportFormFields';\n        var url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.importFormFields;\n        proxy.importFormFieldsRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        proxy.importFormFieldsRequestHandler.url = url;\n        proxy.importFormFieldsRequestHandler.mode = true;\n        proxy.importFormFieldsRequestHandler.responseType = 'text';\n        if (!proxy.clientSideRendering) {\n            proxy.importFormFieldsRequestHandler.send(jsonObject);\n        }\n        else {\n            var resultData = proxy.pdfViewer.pdfRendererModule.importFormFields(jsonObject);\n            this.importClientSideFormFields(resultData, source);\n        }\n        proxy.importFormFieldsRequestHandler.onSuccess = function (result) {\n            var data = result.data;\n            var redirect = proxy.checkRedirection(data);\n            if (!redirect) {\n                if (data && data !== 'null') {\n                    if (typeof data !== 'object') {\n                        try {\n                            data = JSON.parse(data);\n                            if (typeof data !== 'object') {\n                                proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.importFormFields);\n                                proxy.pdfViewer.fireFormImportFailed(source, result.statusText);\n                                data = null;\n                            }\n                        }\n                        catch (error) {\n                            proxy.pdfViewer.fireFormImportFailed(source, proxy.pdfViewer.localeObj.getConstant('File not found'));\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_FileNotFound');\n                                promise.then(function (value) {\n                                    proxy.openImportExportNotificationPopup(value);\n                                });\n                            }\n                            else {\n                                proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('File not found'));\n                            }\n                            proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.importFormFields);\n                            data = null;\n                        }\n                    }\n                    proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.importFormFields, data);\n                    proxy.pdfViewer.fireFormImportSuccess(source);\n                    PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_formfields');\n                    this.pdfViewer.formFieldsModule.removeExistingFormFields();\n                    PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_formDesigner');\n                    proxy.saveFormfieldsData(data);\n                    for (var i = 0; i < proxy.renderedPagesList.length; i++) {\n                        this.pdfViewer.formFieldsModule.renderFormFields(proxy.renderedPagesList[parseInt(i.toString(), 10)], true);\n                    }\n                }\n                else {\n                    proxy.pdfViewer.fireFormImportFailed(source, result.statusText);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                        var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_FileNotFound');\n                        promise.then(function (value) {\n                            proxy.openImportExportNotificationPopup(value);\n                        });\n                    }\n                    else {\n                        proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('File not found'));\n                    }\n                }\n            }\n        };\n        proxy.importFormFieldsRequestHandler.onFailure = function (result) {\n            proxy.pdfViewer.fireFormImportFailed(source, result.statusText);\n        };\n        proxy.importFormFieldsRequestHandler.onError = function (result) {\n            proxy.pdfViewer.fireFormImportFailed(source, result.statusText);\n        };\n    };\n    PdfViewerBase.prototype.importClientSideFormFields = function (result, source) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result)) {\n            this.pdfViewer.fireFormImportSuccess(source);\n            this.pdfViewer.viewerBase.existingFieldImport = false;\n            PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_formfields');\n            this.pdfViewer.formFieldsModule.removeExistingFormFields();\n            PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_formDesigner');\n            this.saveFormfieldsData(result);\n            for (var i = 0; i < this.renderedPagesList.length; i++) {\n                this.pdfViewer.formFieldsModule.renderFormFields(this.renderedPagesList[parseInt(i.toString(), 10)], true);\n            }\n        }\n        else {\n            this.pdfViewer.fireFormImportFailed(source, null);\n            this.openImportExportNotificationPopup(this.pdfViewer.localeObj.getConstant('File not found'));\n        }\n    };\n    /**\n     * @public\n     * @returns {any} - Returns the Json data.\n     */\n    PdfViewerBase.prototype.createFormfieldsJsonData = function () {\n        var jsonObject = {};\n        if (this.pdfViewer.formDesignerModule) {\n            var fieldsData = this.pdfViewer.formDesignerModule.downloadFormDesigner();\n            jsonObject['formDesigner'] = fieldsData;\n        }\n        else if (this.pdfViewer.formFieldsModule) {\n            var fieldsData = this.pdfViewer.formFieldsModule.downloadFormFieldsData();\n            jsonObject['fieldsData'] = fieldsData;\n        }\n        return jsonObject;\n    };\n    PdfViewerBase.prototype.constructJsonDownload = function () {\n        var jsonObject = { hashId: this.hashId };\n        if (this.jsonDocumentId) {\n            jsonObject.documentId = this.jsonDocumentId;\n        }\n        jsonObject.uniqueId = this.documentId;\n        this.importPageList = [];\n        if (this.pdfViewer.annotationModule) {\n            this.saveImportedAnnotations();\n        }\n        if (this.isTextMarkupAnnotationModule()) {\n            this.isJsonExported = false;\n            var textMarkupAnnotationCollection = this.pdfViewer.annotationModule.textMarkupAnnotationModule.saveTextMarkupAnnotations();\n            jsonObject['textMarkupAnnotations'] = textMarkupAnnotationCollection;\n        }\n        if (this.isShapeAnnotationModule()) {\n            this.isJsonExported = false;\n            var shapeAnnotations = this.pdfViewer.annotationModule.shapeAnnotationModule.saveShapeAnnotations();\n            jsonObject['shapeAnnotations'] = shapeAnnotations;\n        }\n        if (this.isCalibrateAnnotationModule()) {\n            this.isJsonExported = false;\n            var calibrateAnnotations = this.pdfViewer.annotationModule.measureAnnotationModule.saveMeasureShapeAnnotations();\n            jsonObject['measureShapeAnnotations'] = calibrateAnnotations;\n        }\n        if (this.isStampAnnotationModule()) {\n            var stampAnnotationCollection = this.pdfViewer.annotationModule.stampAnnotationModule.saveStampAnnotations();\n            jsonObject['stampAnnotations'] = stampAnnotationCollection;\n        }\n        if (this.isCommentAnnotationModule()) {\n            var stickyAnnotationCollection = this.pdfViewer.annotationModule.stickyNotesAnnotationModule.saveStickyAnnotations();\n            jsonObject['stickyNotesAnnotation'] = stickyAnnotationCollection;\n        }\n        if (this.isImportAction) {\n            var importList = JSON.stringify(this.importPageList);\n            jsonObject['importPageList'] = importList;\n        }\n        if (this.pdfViewer.formDesignerModule) {\n            var fieldsData = this.pdfViewer.formDesignerModule.downloadFormDesigner();\n            jsonObject['formDesigner'] = fieldsData;\n        }\n        if (this.pdfViewer.formFieldsModule && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(jsonObject['formDesigner'])) {\n            var fieldsData = this.pdfViewer.formFieldsModule.downloadFormFieldsData();\n            jsonObject['fieldsData'] = fieldsData;\n        }\n        var signatureData = this.signatureModule.saveSignature();\n        jsonObject['signatureData'] = signatureData;\n        if (this.pdfViewer.isSignatureEditable) {\n            jsonObject['isSignatureEdited'] = this.pdfViewer.isSignatureEditable;\n        }\n        if (this.isFreeTextAnnotationModule()) {\n            var freeTextAnnotationCollection = this.pdfViewer.annotationModule.freeTextAnnotationModule.saveFreeTextAnnotations();\n            jsonObject['freeTextAnnotation'] = freeTextAnnotationCollection;\n        }\n        if (this.isInkAnnotationModule()) {\n            var inkSignatureData = this.pdfViewer.annotationModule.inkAnnotationModule.saveInkSignature();\n            jsonObject['inkSignatureData'] = inkSignatureData;\n        }\n        jsonObject['action'] = 'Download';\n        jsonObject['elementId'] = this.pdfViewer.element.id;\n        if (this.pdfViewer.annotationModule) {\n            var annotationsPageList = this.getAnnotationsPageList();\n            jsonObject['isAnnotationsExist'] = this.isAnnotationsExist(jsonObject['textMarkupAnnotations']) || this.isAnnotationsExist(jsonObject['shapeAnnotations']) || this.isAnnotationsExist(jsonObject['measureShapeAnnotations']) || this.isAnnotationsExist(jsonObject['stampAnnotations']) || this.isAnnotationsExist(jsonObject['stickyNotesAnnotation']) || this.isAnnotationsExist(jsonObject['signatureData']) || this.isAnnotationsExist(jsonObject['freeTextAnnotation']) || this.isAnnotationsExist(jsonObject['inkSignatureData']) || annotationsPageList.length > 0;\n            jsonObject['annotationsPageList'] = JSON.stringify(annotationsPageList);\n        }\n        if (this.pdfViewer.formDesignerModule || this.pdfViewer.formFieldsModule) {\n            var formFieldsPageList = this.getFormFieldsPageList(jsonObject['formDesigner']);\n            jsonObject['isFormFieldAnnotationsExist'] = this.isAnnotationsExist(jsonObject['formDesigner']) || this.isFieldsDataExist(jsonObject['fieldsData']) || formFieldsPageList.length > 0;\n            jsonObject['formFieldsPageList'] = JSON.stringify(formFieldsPageList);\n        }\n        if (this.pdfViewer.annotationCollection) {\n            jsonObject['annotationCollection'] = JSON.stringify(this.pdfViewer.annotationCollection);\n        }\n        return jsonObject;\n    };\n    /**\n     * @param {string} annotationInfo - It describes about the annotation info\n     * @private\n     * @returns {boolean} - Returns whether annotation is present.\n     */\n    PdfViewerBase.prototype.isAnnotationsExist = function (annotationInfo) {\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotationInfo) ? JSON.parse(annotationInfo).flat(1).length > 0 : false;\n    };\n    /**\n     * @param {string} fieldsData - It describes about the fields data\n     * @private\n     * @returns {boolean} - Returns whether fields data is present.\n     */\n    PdfViewerBase.prototype.isFieldsDataExist = function (fieldsData) {\n        return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fieldsData) ? Object.entries(JSON.parse(fieldsData)).length !== 0 : false;\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns annotations page number list.\n     */\n    PdfViewerBase.prototype.getAnnotationsPageList = function () {\n        var annotCollection = this.pdfViewer.annotationCollection.map(function (a) { return a.pageNumber; });\n        var annotActionCollection = this.pdfViewer.annotationModule.actionCollection.filter(function (value) { return value.annotation.propName !== 'formFields' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.annotation.formFieldAnnotationType); }).map(function (a) { return a.pageIndex; });\n        var fullPageList = annotCollection.concat(annotActionCollection, this.modifiedPageIndex);\n        return fullPageList.filter(function (value, index, self) { return self.indexOf(value) === index && value !== undefined; });\n    };\n    /**\n     * @param {string} formDesignerData - It describes about the form designer data\n     * @private\n     * @returns {boolean} - Returns form fields page number list.\n     */\n    PdfViewerBase.prototype.getFormFieldsPageList = function (formDesignerData) {\n        var formFieldsCollection = this.pdfViewer.formFieldCollection.map(function (item) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.properties)) {\n                return item.properties.pageNumber;\n            }\n            else {\n                return item.pageNumber + 1;\n            }\n        });\n        var annotActionCollection = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotationModule) ? this.pdfViewer.annotationModule.actionCollection.filter(function (value) { return value.annotation.propName === 'formFields' || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.annotation.formFieldAnnotationType); }).map(function (a) { return a.pageIndex; }) : [];\n        var fullPageList = formFieldsCollection.concat(annotActionCollection);\n        var designerDataList;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(formDesignerData)) {\n            designerDataList = JSON.parse(formDesignerData).map(function (item) {\n                return item.FormField.pageNumber;\n            });\n        }\n        var totalPageList = fullPageList.concat(designerDataList);\n        return totalPageList.filter(function (value, index, self) { return self.indexOf(value) === index && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value); });\n    };\n    /**\n     * @private\n     * @param {string} annotationID - The annotationID.\n     * @returns {any} - Returns collection of type.\n     */\n    PdfViewerBase.prototype.checkFormFieldCollection = function (annotationID) {\n        var isFormFieldAnnotation = false;\n        var formDesignerData = null;\n        formDesignerData = this.getItemFromSessionStorage('_formDesigner');\n        if (formDesignerData) {\n            var formFieldsData = JSON.parse(formDesignerData);\n            for (var i = 0; i < formFieldsData.length; i++) {\n                if (formFieldsData[parseInt(i.toString(), 10)].FormField.formFieldAnnotationType === 'RadioButton') {\n                    for (var j = 0; j < formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem.length; j++) {\n                        if (annotationID === formFieldsData[parseInt(i.toString(), 10)].FormField.radiobuttonItem[parseInt(j.toString(), 10)].id.split('_')[0]) {\n                            isFormFieldAnnotation = true;\n                            break;\n                        }\n                    }\n                }\n                else if (formFieldsData[parseInt(i.toString(), 10)].Key.split('_')[0] === annotationID) {\n                    isFormFieldAnnotation = true;\n                    break;\n                }\n            }\n        }\n        return isFormFieldAnnotation;\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns whether freetext module is enabled.\n     */\n    PdfViewerBase.prototype.isFreeTextAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.freeTextAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.createRequestForDownload = function () {\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var canDownload = false;\n        canDownload = proxy.pdfViewer.fireDownloadStart(proxy.downloadFileName);\n        if (canDownload) {\n            var jsonObject = this.constructJsonDownload();\n            var digitalSignature = proxy.clientSideRendering ? proxy.isDigitalSignaturePresent :\n                (proxy.digitalSignaturePages && proxy.digitalSignaturePages.length !== 0);\n            if (digitalSignature) {\n                if (proxy.pdfViewer.isDocumentEdited) {\n                    jsonObject['digitalSignatureDocumentEdited'] = true;\n                }\n                else {\n                    jsonObject['digitalSignatureDocumentEdited'] = false;\n                }\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.pageOrganizer) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.pageOrganizer.organizePagesCollection) && this.pdfViewer.pageOrganizer.isDocumentModified) {\n                jsonObject['organizePages'] = JSON.stringify(this.pdfViewer.pageOrganizer.organizePagesCollection);\n            }\n            this.dowonloadRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n            this.dowonloadRequestHandler.url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.download;\n            this.dowonloadRequestHandler.responseType = 'text';\n            if (this.validateForm && this.pdfViewer.enableFormFieldsValidation) {\n                this.pdfViewer.fireValidatedFailed(proxy.pdfViewer.serverActionSettings.download);\n                this.validateForm = false;\n            }\n            else if (!this.clientSideRendering) {\n                this.dowonloadRequestHandler.send(jsonObject);\n            }\n            else {\n                var data = this.pdfViewer.pdfRendererModule.getDocumentAsBase64(jsonObject);\n                this.fileDownload(data, this);\n            }\n            this.dowonloadRequestHandler.onSuccess = function (result) {\n                var data = result.data;\n                var redirect = proxy.checkRedirection(data);\n                if (!redirect) {\n                    if (data) {\n                        proxy.fileDownload(data, proxy);\n                    }\n                    else {\n                        proxy.pdfViewer.fireDownloadEnd(proxy.downloadFileName, 'PDF Document saved in server side successfully');\n                    }\n                }\n            };\n            this.dowonloadRequestHandler.onFailure = function (result) {\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.download);\n            };\n            this.dowonloadRequestHandler.onError = function (result) {\n                proxy.openNotificationPopup();\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.download);\n            };\n        }\n    };\n    /**\n     * @param {string} data - It describes about the download file data\n     * @param {PdfViewerBase} proxy - It describes about the current instance\n     * @param {boolean} isOrganizeSaveAsRequest - It describes about the request is from Organize PDF window\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.fileDownload = function (data, proxy, isOrganizeSaveAsRequest) {\n        if (isOrganizeSaveAsRequest === void 0) { isOrganizeSaveAsRequest = false; }\n        if (!this.clientSideRendering) {\n            if (data) {\n                if (typeof data !== 'object' && data.indexOf('data:application/pdf') === -1) {\n                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.download);\n                    data = null;\n                }\n                if (typeof data === 'object') {\n                    data = JSON.parse(data);\n                }\n                if (data) {\n                    if (proxy.pdfViewer.downloadFileName && (proxy.pdfViewer.downloadFileName !== proxy.downloadFileName)) {\n                        proxy.downloadFileName = proxy.pdfViewer.downloadFileName;\n                    }\n                    if (this.pdfViewer.enableHtmlSanitizer && proxy.pdfViewer.downloadFileName) {\n                        proxy.pdfViewer.downloadFileName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(proxy.pdfViewer.downloadFileName);\n                    }\n                    if (proxy.clientSideRendering && !isOrganizeSaveAsRequest) {\n                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.download, data);\n                    }\n                    var blobUrl = proxy.createBlobUrl(data.split('base64,')[1], 'application/pdf');\n                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                        window.navigator.msSaveOrOpenBlob(blobUrl, proxy.downloadFileName);\n                    }\n                    else {\n                        proxy.downloadDocument(blobUrl);\n                    }\n                    if (!isOrganizeSaveAsRequest) {\n                        proxy.pdfViewer.fireDownloadEnd(proxy.downloadFileName, data);\n                    }\n                }\n                if (!isOrganizeSaveAsRequest) {\n                    proxy.updateDocumentAnnotationCollections();\n                }\n            }\n        }\n        else {\n            if (data) {\n                if (typeof data !== 'object') {\n                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.download);\n                    data = null;\n                }\n                if (data) {\n                    if (proxy.pdfViewer.downloadFileName && (proxy.pdfViewer.downloadFileName !== proxy.downloadFileName)) {\n                        proxy.downloadFileName = proxy.pdfViewer.downloadFileName;\n                    }\n                    if (this.pdfViewer.enableHtmlSanitizer && proxy.pdfViewer.downloadFileName) {\n                        proxy.pdfViewer.downloadFileName = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(proxy.pdfViewer.downloadFileName);\n                    }\n                    if (proxy.clientSideRendering && !isOrganizeSaveAsRequest) {\n                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.download, data);\n                    }\n                    var blobUrl = new Blob([data], { type: 'application/pdf' });\n                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                        window.navigator.msSaveOrOpenBlob(blobUrl, proxy.downloadFileName);\n                    }\n                    else {\n                        proxy.downloadDocument(blobUrl);\n                    }\n                    if (!isOrganizeSaveAsRequest) {\n                        proxy.pdfViewer.fireDownloadEnd(proxy.downloadFileName, data);\n                    }\n                }\n                if (!isOrganizeSaveAsRequest) {\n                    proxy.updateDocumentAnnotationCollections();\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} pageWidth - It describes about the page width\n     * @param {any} pageHeight - It describes about the page height\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.getTileCount = function (pageWidth, pageHeight) {\n        if (pageWidth && typeof pageWidth === 'number') {\n            var defaultWidth = 816;\n            var tileCount = 1;\n            if (this.getZoomFactor() > 2 && pageWidth <= 1200) {\n                tileCount = 2;\n            }\n            else {\n                tileCount = pageWidth / defaultWidth;\n            }\n            var tileValue = Math.ceil(tileCount);\n            if (tileValue <= 0) {\n                return 1;\n            }\n            else {\n                if (this.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                    return tileValue;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return 1;\n        }\n    };\n    PdfViewerBase.prototype.createRequestForRender = function (pageIndex) {\n        var _a, _b;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var jsonData;\n        var canvas = proxy.getElement('_pageCanvas_' + pageIndex);\n        var oldCanvas = proxy.getElement('_oldCanvas_' + pageIndex);\n        if (this.pageSize && this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            var pageWidth_1 = this.pageSize[parseInt(pageIndex.toString(), 10)].width;\n            var pageHeight = this.pageSize[parseInt(pageIndex.toString(), 10)].height;\n            var tilecanvas = this.getElement('_pageCanvas_' + pageIndex);\n            var viewPortWidth_1 = 1200; // On diving the value greater than 1200 we will get the tile count as 2.\n            var viewPortHeight = proxy.pdfViewer.element.clientHeight > 0 ?\n                proxy.pdfViewer.element.clientHeight : proxy.pdfViewer.element.style.height;\n            viewPortWidth_1 = parseInt(viewPortWidth_1, 10);\n            viewPortHeight = parseInt(viewPortHeight, 10) ? parseInt(viewPortHeight, 10) : 500; //we have applied minimum-height as 500.\n            var noTileX = void 0;\n            var noTileY = void 0;\n            var imageSource = void 0;\n            var object = new Object();\n            var thumbnailImageElement = document.getElementById(this.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageIndex);\n            if (this.isMinimumZoom && thumbnailImageElement && thumbnailImageElement.children[0] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(thumbnailImageElement.children[0].src) && thumbnailImageElement.children[0].src !== '') {\n                this.renderThumbnailImages = true;\n                imageSource = thumbnailImageElement.children[0].src;\n            }\n            else {\n                this.renderThumbnailImages = false;\n            }\n            var tileCount = this.getTileCount(pageWidth_1, pageHeight);\n            if (canvas) {\n                if (!isNaN(parseFloat(canvas.style.width)) || oldCanvas) {\n                    if (proxy.isInitialLoaded) {\n                        proxy.showPageLoadingIndicator(pageIndex, false);\n                    }\n                }\n                var data = proxy.getStoredData(pageIndex);\n                noTileX = noTileY = tileCount;\n                var tileSettings = proxy.pdfViewer.tileRenderingSettings;\n                if (tileSettings.enableTileRendering && tileSettings.x > 0 && tileSettings.y > 0) {\n                    if ((viewPortWidth_1 < pageWidth_1 || this.getZoomFactor() > 2)) {\n                        noTileX = tileSettings.x;\n                        noTileY = tileSettings.y;\n                    }\n                }\n                proxy.tileRequestCount = noTileX * noTileY;\n                var zoomFactor = this.retrieveCurrentZoomFactor();\n                var isPageRequestSent = void 0;\n                if (tileCount === 1) {\n                    data = proxy.getStoredData(pageIndex);\n                    isPageRequestSent = proxy.pageRequestSent(pageIndex, 0, 0);\n                }\n                else {\n                    var tileData = JSON.parse(proxy.getWindowSessionStorageTile(pageIndex, 0, 0, zoomFactor));\n                    if (tileCount > 1) {\n                        data = tileData;\n                    }\n                }\n                if (data && data.uniqueId === proxy.documentId && (data['image'] || this.isMinimumZoom)) {\n                    canvas.style.backgroundColor = '#fff';\n                    if ((proxy.pdfViewer.magnification && proxy.pdfViewer.magnification.isPinchZoomed) ||\n                        !this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                        return;\n                    }\n                    var zoomFactor_2 = this.retrieveCurrentZoomFactor();\n                    if (zoomFactor_2 > 2 && pageWidth_1 <= 1200) {\n                        viewPortWidth_1 = 700;\n                    }\n                    else {\n                        viewPortWidth_1 = 1200;\n                    }\n                    if (!proxy.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                        viewPortWidth_1 = 1200;\n                    }\n                    if (((viewPortWidth_1 >= pageWidth_1) || !proxy.pdfViewer.tileRenderingSettings.enableTileRendering) &&\n                        (tileCount === 1)) {\n                        if (this.renderThumbnailImages && tileCount === 1) {\n                            proxy.renderPage(data, pageIndex, imageSource);\n                        }\n                        else {\n                            proxy.renderPage(data, pageIndex);\n                        }\n                    }\n                    else {\n                        proxy.isTileImageRendered = true;\n                        proxy.tileRenderCount = 0;\n                        if (this.renderThumbnailImages && tileCount === 1) {\n                            proxy.renderPage(data, pageIndex, imageSource);\n                        }\n                        else {\n                            proxy.tileRenderPage(data, pageIndex);\n                            for (var k = 0; k < noTileX; k++) {\n                                for (var l = 0; l < noTileY; l++) {\n                                    if (k === 0 && l === 0) {\n                                        continue;\n                                    }\n                                    data = this.clientSideRendering ?\n                                        JSON.parse(this.getStoredTileImageDetails(pageIndex, k, l, zoomFactor_2)) :\n                                        JSON.parse(this.getWindowSessionStorageTile(pageIndex, k, l, zoomFactor_2));\n                                    if (data) {\n                                        proxy.tileRenderPage(data, pageIndex);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    data = null;\n                }\n                else if (data === null || !isPageRequestSent) {\n                    if (!this.renderThumbnailImages) {\n                        if (this.getPagesPinchZoomed()) {\n                            proxy.showPageLoadingIndicator(pageIndex, false);\n                        }\n                        else {\n                            proxy.showPageLoadingIndicator(pageIndex, true);\n                        }\n                        if (proxy.getPagesZoomed()) {\n                            if (proxy.isInitialLoaded) {\n                                proxy.showPageLoadingIndicator(pageIndex, false);\n                            }\n                        }\n                    }\n                    if (proxy.pdfViewer.magnification && proxy.pdfViewer.magnification.isPinchZoomed) {\n                        return;\n                    }\n                    if (!proxy.pdfViewer.tileRenderingSettings.enableTileRendering || this.renderThumbnailImages) {\n                        noTileX = 1;\n                        noTileY = 1;\n                    }\n                    proxy.tileRenderCount = 0;\n                    proxy.isTileImageRendered = true;\n                    for (var x = 0; x < noTileX; x++) {\n                        for (var y = 0; y < noTileY; y++) {\n                            var jsonObject = null;\n                            var zoomFactor_3 = this.retrieveCurrentZoomFactor();\n                            if (zoomFactor_3 > 2 && pageWidth_1 <= 1200) {\n                                viewPortWidth_1 = 700;\n                            }\n                            else {\n                                viewPortWidth_1 = 1200;\n                            }\n                            if (!proxy.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                                viewPortWidth_1 = 1200;\n                            }\n                            if (this.renderThumbnailImages && !this.clientSideRendering) {\n                                proxy.renderPage(object, pageIndex, imageSource);\n                                if (this.textrequestLists.indexOf(pageIndex) === -1) {\n                                    jsonObject = { pageStartIndex: pageIndex, pageEndIndex: pageIndex + 1, documentId: proxy.getDocumentId(), hashId: proxy.hashId, action: 'RenderPdfTexts', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.documentId };\n                                    if (this.jsonDocumentId) {\n                                        jsonObject.documentId = this.jsonDocumentId;\n                                    }\n                                    this.textRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n                                    this.textRequestHandler.url = this.pdfViewer.serviceUrl + '/' + this.pdfViewer.serverActionSettings.renderTexts;\n                                    this.textRequestHandler.responseType = 'json';\n                                    if (!this.clientSideRendering) {\n                                        jsonData = JSON.parse(JSON.stringify(jsonObject));\n                                        jsonData.action = 'pageRenderInitiate';\n                                        proxy.pdfViewer.firePageRenderInitiate(jsonData);\n                                        this.textRequestHandler.send(jsonObject);\n                                    }\n                                    this.textrequestLists.push(pageIndex);\n                                    proxy.textRequestHandler.onSuccess = function (result) {\n                                        if ((proxy.pdfViewer.magnification && proxy.pdfViewer.magnification.isPinchZoomed) ||\n                                            !proxy.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                                            return;\n                                        }\n                                        var data = result.data;\n                                        if (data) {\n                                            if (typeof data !== 'object') {\n                                                try {\n                                                    data = JSON.parse(data);\n                                                }\n                                                catch (error) {\n                                                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.renderTexts);\n                                                    data = null;\n                                                }\n                                            }\n                                        }\n                                        if (data) {\n                                            proxy.pageTextRequestOnSuccess(data, proxy, pageIndex);\n                                        }\n                                    };\n                                    this.textRequestHandler.onFailure = function (result) {\n                                        proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderTexts);\n                                    };\n                                    this.textRequestHandler.onError = function (result) {\n                                        proxy.openNotificationPopup();\n                                        proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderTexts);\n                                    };\n                                    if (this.clientSideRendering) {\n                                        var requestType = 'pageTextRequest';\n                                        this.pdfViewer.pdfRendererModule.getDocumentText(jsonObject, requestType);\n                                    }\n                                }\n                            }\n                            else {\n                                jsonObject = {\n                                    xCoordinate: (x).toString(), yCoordinate: (y).toString(),\n                                    viewPortWidth: (viewPortWidth_1).toString(), viewPortHeight: (viewPortHeight).toString(),\n                                    pageNumber: (pageIndex).toString(), hashId: proxy.hashId, tilecount: (tileCount).toString(),\n                                    tileXCount: (noTileX).toString(), tileYCount: (noTileY).toString(),\n                                    zoomFactor: (zoomFactor_3).toString(), action: 'RenderPdfPages', uniqueId: this.documentId, elementId: proxy.pdfViewer.element.id, digitalSignaturePresent: proxy.digitalSignaturePresent(pageIndex)\n                                };\n                                if (this.jsonDocumentId) {\n                                    jsonObject.documentId = this.jsonDocumentId;\n                                }\n                                proxy.pageRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n                                proxy.pageRequestHandler.url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.renderPages;\n                                proxy.pageRequestHandler.responseType = 'json';\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy.hashId)) {\n                                    // eslint-disable-next-line\n                                    if (jsonObject.xCoordinate == 0 && jsonObject.yCoordinate == 0) {\n                                        jsonData = JSON.parse(JSON.stringify(jsonObject));\n                                        jsonData.action = 'pageRenderInitiate';\n                                        if (!this.clientSideRendering) {\n                                            proxy.pdfViewer.firePageRenderInitiate(jsonData);\n                                        }\n                                    }\n                                    this.requestCollection.push(this.pageRequestHandler);\n                                    if (!this.clientSideRendering) {\n                                        proxy.pageRequestHandler.send(jsonObject);\n                                    }\n                                }\n                                proxy.requestLists.push(proxy.documentId + '_' + pageIndex + '_' + x + '_' + y + '_' + zoomFactor_3);\n                                proxy.pageRequestHandler.onSuccess = function (result) {\n                                    if ((proxy.pdfViewer.magnification && proxy.pdfViewer.magnification.isPinchZoomed) ||\n                                        !proxy.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                                        return;\n                                    }\n                                    var data = result.data;\n                                    var redirect = proxy.checkRedirection(data);\n                                    if (redirect) {\n                                        proxy.showLoadingIndicator(false);\n                                    }\n                                    else {\n                                        if (data) {\n                                            if (typeof data !== 'object') {\n                                                try {\n                                                    data = JSON.parse(data);\n                                                }\n                                                catch (error) {\n                                                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.renderPages);\n                                                    data = null;\n                                                }\n                                            }\n                                        }\n                                        if (data) {\n                                            proxy.pageRequestOnSuccess(data, proxy, viewPortWidth_1, pageWidth_1, pageIndex);\n                                        }\n                                    }\n                                };\n                                this.pageRequestHandler.onFailure = function (result) {\n                                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderPages);\n                                };\n                                this.pageRequestHandler.onError = function (result) {\n                                    proxy.openNotificationPopup();\n                                    proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderPages);\n                                };\n                                if (this.clientSideRendering) {\n                                    var textDetailsId = proxy.documentId + '_' + pageIndex + '_textDetails';\n                                    var isTextNeed = proxy.pageTextDetails ? proxy.pageTextDetails[\"\" + textDetailsId] ? false : true : true;\n                                    var currentPage = this.pdfViewer.pdfRenderer.loadedDocument.getPage(pageIndex);\n                                    var cropBoxRect = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(0, 0, 0, 0);\n                                    var mediaBoxRect = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(0, 0, 0, 0);\n                                    if (currentPage && currentPage._pageDictionary && currentPage._pageDictionary._map &&\n                                        currentPage._pageDictionary._map.CropBox) {\n                                        _a = currentPage._pageDictionary._map.CropBox, cropBoxRect.x = _a[0], cropBoxRect.y = _a[1], cropBoxRect.width = _a[2], cropBoxRect.height = _a[3];\n                                    }\n                                    if (currentPage && currentPage._pageDictionary && currentPage._pageDictionary._map &&\n                                        currentPage._pageDictionary._map.MediaBox) {\n                                        _b = currentPage._pageDictionary._map.MediaBox, mediaBoxRect.x = _b[0], mediaBoxRect.y = _b[1], mediaBoxRect.width = _b[2], mediaBoxRect.height = _b[3];\n                                    }\n                                    if (viewPortWidth_1 >= pageWidth_1 || !proxy.pdfViewer.tileRenderingSettings.enableTileRendering) {\n                                        jsonData = JSON.parse(JSON.stringify(jsonObject));\n                                        jsonData.action = 'pageRenderInitiate';\n                                        proxy.pdfViewer.firePageRenderInitiate(jsonData);\n                                        this.pdfViewerRunner.addTask({ pageIndex: pageIndex, message: 'renderPage', zoomFactor: zoomFactor_3, isTextNeed: isTextNeed, textDetailsId: textDetailsId, cropBoxRect: cropBoxRect, mediaBoxRect: mediaBoxRect }, _pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_14__.TaskPriorityLevel.High);\n                                    }\n                                    else {\n                                        this.showPageLoadingIndicator(pageIndex, true);\n                                        // eslint-disable-next-line\n                                        if (jsonObject.xCoordinate == 0 && jsonObject.yCoordinate == 0) {\n                                            jsonData = JSON.parse(JSON.stringify(jsonObject));\n                                            jsonData.action = 'pageRenderInitiate';\n                                            proxy.pdfViewer.firePageRenderInitiate(jsonData);\n                                        }\n                                        this.pdfViewerRunner.addTask({\n                                            pageIndex: pageIndex,\n                                            message: 'renderImageAsTile',\n                                            zoomFactor: zoomFactor_3,\n                                            tileX: x,\n                                            tileY: y,\n                                            tileXCount: noTileX,\n                                            tileYCount: noTileY,\n                                            isTextNeed: isTextNeed,\n                                            textDetailsId: textDetailsId,\n                                            cropBoxRect: cropBoxRect,\n                                            mediaBoxRect: mediaBoxRect\n                                        }, _pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_14__.TaskPriorityLevel.High);\n                                    }\n                                    this.pdfViewerRunner.onMessage('imageRendered,renderTileImage,renderThumbnail,renderPreviewTileImage,printImage,textSearched', function (event) {\n                                        switch (event.data.message) {\n                                            case 'imageRendered':\n                                                if (event.data.message === 'imageRendered') {\n                                                    var canvas_3 = document.createElement('canvas');\n                                                    var _a = event.data, value = _a.value, width = _a.width, height = _a.height, pageIndex_1 = _a.pageIndex;\n                                                    canvas_3.width = width;\n                                                    canvas_3.height = height;\n                                                    var canvasContext = canvas_3.getContext('2d');\n                                                    var imageData = canvasContext.createImageData(width, height);\n                                                    imageData.data.set(value);\n                                                    canvasContext.putImageData(imageData, 0, 0);\n                                                    var imageUrl = canvas_3.toDataURL();\n                                                    proxy.releaseCanvas(canvas_3);\n                                                    var textBounds = event.data.textBounds;\n                                                    var textContent = event.data.textContent;\n                                                    var pageText = event.data.pageText;\n                                                    var rotation = event.data.rotation;\n                                                    var characterBounds = event.data.characterBounds;\n                                                    var hyperlinksDetails = proxy.pdfViewer.pdfRendererModule.getHyperlinks(pageIndex_1);\n                                                    var data_1 = ({ image: imageUrl, pageNumber: pageIndex_1,\n                                                        uniqueId: proxy.documentId, pageWidth: event.data.pageWidth,\n                                                        zoomFactor: event.data.zoomFactor, hyperlinks: hyperlinksDetails.hyperlinks,\n                                                        hyperlinkBounds: hyperlinksDetails.hyperlinkBounds,\n                                                        linkAnnotation: hyperlinksDetails.linkAnnotation,\n                                                        linkPage: hyperlinksDetails.linkPage,\n                                                        annotationLocation: hyperlinksDetails.annotationLocation,\n                                                        characterBounds: characterBounds });\n                                                    if (event.data.isTextNeed) {\n                                                        data_1.textBounds = textBounds;\n                                                        data_1.textContent = textContent;\n                                                        data_1.rotation = rotation;\n                                                        data_1.pageText = pageText;\n                                                        proxy.storeTextDetails(pageIndex_1, textBounds, textContent, pageText, rotation, characterBounds);\n                                                    }\n                                                    else {\n                                                        var textDetails = JSON.parse(proxy.pageTextDetails[\"\" + event.data.textDetailsId]);\n                                                        data_1.textBounds = textDetails.textBounds;\n                                                        data_1.textContent = textDetails.textContent;\n                                                        data_1.rotation = textDetails.rotation;\n                                                        data_1.pageText = textDetails.pageText;\n                                                        data_1.characterBounds = textDetails.characterBounds;\n                                                    }\n                                                    if (data_1 && data_1.image && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data_1.image.split('base64,')[1]) && data_1.uniqueId === proxy.documentId) {\n                                                        var currentPageWidth = (data_1.pageWidth && data_1.pageWidth > 0) ?\n                                                            data_1.pageWidth : pageWidth_1;\n                                                        proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.\n                                                            renderPages, data_1);\n                                                        var pageNumber = (data_1.pageNumber !== undefined) ? data_1.pageNumber :\n                                                            pageIndex_1;\n                                                        var blobObj = proxy.createBlobUrl(data_1.image.split('base64,')[1], 'image/png');\n                                                        var Url = URL || webkitURL;\n                                                        var blobUrl = Url.createObjectURL(blobObj);\n                                                        var storeObject = {\n                                                            image: blobUrl, width: data_1.pageWidth, uniqueId: data_1.uniqueId,\n                                                            zoomFactor: data_1.zoomFactor\n                                                        };\n                                                        proxy.storeImageData(pageNumber, storeObject);\n                                                        proxy.pageRequestOnSuccess(data_1, proxy, viewPortWidth_1, pageWidth_1, pageIndex_1);\n                                                    }\n                                                }\n                                                break;\n                                            case 'renderTileImage':\n                                                if (event.data.message === 'renderTileImage') {\n                                                    var canvas_4 = document.createElement('canvas');\n                                                    var _b = event.data, value = _b.value, w = _b.w, h = _b.h, noTileX_1 = _b.noTileX, noTileY_1 = _b.noTileY, x_1 = _b.x, y_1 = _b.y, pageIndex_2 = _b.pageIndex;\n                                                    canvas_4.setAttribute('height', h);\n                                                    canvas_4.setAttribute('width', w);\n                                                    canvas_4.width = w;\n                                                    canvas_4.height = h;\n                                                    var canvasContext = canvas_4.getContext('2d');\n                                                    var imageData = canvasContext.createImageData(w, h);\n                                                    imageData.data.set(value);\n                                                    canvasContext.putImageData(imageData, 0, 0);\n                                                    var imageUrl = canvas_4.toDataURL();\n                                                    proxy.releaseCanvas(canvas_4);\n                                                    var tileWidth = w;\n                                                    var tileHeight = h;\n                                                    var textBounds = event.data.textBounds;\n                                                    var textContent = event.data.textContent;\n                                                    var pageText = event.data.pageText;\n                                                    var rotation = event.data.rotation;\n                                                    var characterBounds = event.data.characterBounds;\n                                                    var tileData = {\n                                                        image: imageUrl,\n                                                        noTileX: noTileX_1,\n                                                        noTileY: noTileY_1,\n                                                        pageNumber: pageIndex_2,\n                                                        tileX: x_1,\n                                                        tileY: y_1,\n                                                        uniqueId: proxy.documentId,\n                                                        pageWidth: pageWidth_1,\n                                                        width: tileWidth,\n                                                        transformationMatrix: {\n                                                            Values: [1, 0, 0, 1, tileWidth * x_1, tileHeight * y_1, 0, 0, 0]\n                                                        },\n                                                        zoomFactor: event.data.zoomFactor,\n                                                        characterBounds: characterBounds,\n                                                        isTextNeed: event.data.isTextNeed,\n                                                        textDetailsId: event.data.textDetailsId,\n                                                        textBounds: textBounds,\n                                                        textContent: textContent,\n                                                        pageText: pageText\n                                                    };\n                                                    if (tileData && tileData.image && tileData.uniqueId === proxy.documentId) {\n                                                        var currentPageWidth = (tileData.pageWidth && tileData.pageWidth > 0) ?\n                                                            tileData.pageWidth : pageWidth_1;\n                                                        proxy.pdfViewer.\n                                                            fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderPages, tileData);\n                                                        var pageNumber = (tileData.pageNumber !== undefined) ?\n                                                            tileData.pageNumber : pageIndex_2;\n                                                        if (x_1 === 0 && y_1 === 0) {\n                                                            var blobObj = proxy.createBlobUrl(tileData.image.split('base64,')[1], 'image/png');\n                                                            var Url = URL || webkitURL;\n                                                            var blobUrl = Url.createObjectURL(blobObj);\n                                                            if (tileData.isTextNeed) {\n                                                                tileData.textBounds = textBounds;\n                                                                tileData.textContent = textContent;\n                                                                tileData.rotation = rotation;\n                                                                tileData.pageText = pageText;\n                                                                proxy.storeTextDetails(pageIndex_2, textBounds, textContent, pageText, rotation, characterBounds);\n                                                            }\n                                                            else {\n                                                                var textDetails = JSON.parse(proxy.pageTextDetails[\"\" + tileData.textDetailsId]);\n                                                                tileData.textBounds = textDetails.textBounds;\n                                                                tileData.textContent = textDetails.textContent;\n                                                                tileData.rotation = textDetails.rotation;\n                                                                tileData.pageText = textDetails.pageText;\n                                                                tileData.characterBounds = textDetails.characterBounds;\n                                                            }\n                                                            var storeObject = {\n                                                                image: blobUrl, width: tileData.width, uniqueId: tileData.uniqueId,\n                                                                tileX: tileData.tileX, tileY: tileData.tileY,\n                                                                zoomFactor: tileData.zoomFactor,\n                                                                transformationMatrix: tileData.transformationMatrix,\n                                                                pageText: tileData.pageText, textContent: tileData.textContent,\n                                                                textBounds: tileData.textBounds\n                                                            };\n                                                            proxy.storeImageData(pageNumber, storeObject, tileData.tileX, tileData.tileY);\n                                                        }\n                                                        else {\n                                                            var blobObj = proxy.createBlobUrl(tileData.image.split('base64,')[1], 'image/png');\n                                                            var Url = URL || webkitURL;\n                                                            var blobUrl = Url.createObjectURL(blobObj);\n                                                            var storeObject = {\n                                                                image: blobUrl, width: tileData.width, uniqueId: tileData.uniqueId,\n                                                                tileX: tileData.tileX, tileY: tileData.tileY,\n                                                                zoomFactor: tileData.zoomFactor,\n                                                                transformationMatrix: tileData.transformationMatrix\n                                                            };\n                                                            proxy.storeImageData(pageNumber, storeObject, tileData.tileX, tileData.tileY);\n                                                        }\n                                                        proxy.pageRequestOnSuccess(tileData, proxy, viewPortWidth_1, pageWidth_1, pageIndex_2, true);\n                                                    }\n                                                }\n                                                break;\n                                            case 'renderThumbnail':\n                                                if (proxy.clientSideRendering) {\n                                                    proxy.pdfViewer.thumbnailViewModule.thumbnailOnMessage(event);\n                                                    if (proxy.pdfViewer.textSearch) {\n                                                        proxy.pdfViewer.pdfRendererModule.textExtractionOnmessage(event);\n                                                    }\n                                                }\n                                                break;\n                                            case 'renderPreviewTileImage':\n                                                proxy.pdfViewer.pageOrganizer.previewOnMessage(event);\n                                                if (proxy.pdfViewer.textSearch) {\n                                                    proxy.pdfViewer.pdfRendererModule.textExtractionOnmessage(event);\n                                                }\n                                                break;\n                                            case 'printImage':\n                                                proxy.pdfViewer.printModule.printOnMessage(event);\n                                                break;\n                                            case 'textSearched':\n                                                proxy.pdfViewer.textSearchModule.searchTextAfteresult(event.data.resultPages, event.data.totalSearchCount, event.data.searchWord, event.data.matchCase, event.data.isRequestsend, event.data.isCompletedSearch, event.data.endIndex);\n                                                break;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this.renderedPagesList.indexOf(pageIndex) === -1) {\n                    proxy.renderedPagesList.push(pageIndex);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.pageRequestOnSuccess = function (data, proxy, viewPortWidth, pageWidth, pageIndex, isTileRender) {\n        while (typeof data !== 'object') {\n            data = JSON.parse(data);\n        }\n        if (data.image && data.uniqueId === proxy.documentId) {\n            var currentPageWidth = (data.pageWidth && data.pageWidth > 0) ? data.pageWidth : pageWidth;\n            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderPages, data);\n            pageIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data.pageNumber) ? data.pageNumber : pageIndex;\n            // changed the page index to pageNumber. TaskID - 931967\n            data.pageNumber = pageIndex + 1;\n            if (((viewPortWidth >= currentPageWidth) || !proxy.pdfViewer.tileRenderingSettings.enableTileRendering) && !isTileRender) {\n                proxy.storeWinData(data, pageIndex);\n            }\n            else {\n                proxy.storeWinData(data, pageIndex, data.tileX, data.tileY);\n            }\n            if (((viewPortWidth >= currentPageWidth) || !proxy.pdfViewer.tileRenderingSettings.enableTileRendering) && !isTileRender) {\n                proxy.renderPage(data, pageIndex);\n                proxy.pdfViewer.firePageRenderComplete(data);\n            }\n            else {\n                proxy.tileRenderPage(data, pageIndex);\n            }\n        }\n    };\n    /**\n     * @param {any} data - It gets the data\n     * @param {number} pageIndex - It describes about the page index\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.pageTextRequestSuccess = function (data, pageIndex) {\n        this.pageTextRequestOnSuccess(data, this, pageIndex);\n    };\n    PdfViewerBase.prototype.pageTextRequestOnSuccess = function (data, proxy, pageIndex) {\n        while (typeof data !== 'object') {\n            data = JSON.parse(data);\n        }\n        if (data.documentTextCollection && data.uniqueId === proxy.documentId) {\n            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderTexts, data);\n            proxy.pdfViewer.firePageRenderComplete(data);\n            var pageNumber = (data.pageNumber !== undefined) ? data.pageNumber : pageIndex;\n            proxy.storeWinData(data, pageNumber);\n            proxy.renderPage(data, pageIndex);\n        }\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {any} annotationObject - It describes about the annotation object\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.requestForTextExtraction = function (pageIndex, annotationObject) {\n        // eslint-disable-next-line\n        var proxy = this;\n        var jsonObject = { pageStartIndex: pageIndex, pageEndIndex: pageIndex + 1, documentId: proxy.getDocumentId(), hashId: proxy.hashId, action: 'RenderPdfTexts', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.documentId };\n        if (this.jsonDocumentId) {\n            jsonObject.documentId = this.jsonDocumentId;\n        }\n        this.textRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(this.pdfViewer);\n        this.textRequestHandler.url = this.pdfViewer.serviceUrl + '/' + this.pdfViewer.serverActionSettings.renderTexts;\n        this.textRequestHandler.responseType = 'json';\n        if (!this.clientSideRendering) {\n            this.textRequestHandler.send(jsonObject);\n        }\n        this.textrequestLists.push(pageIndex);\n        proxy.textRequestHandler.onSuccess = function (result) {\n            if ((proxy.pdfViewer.magnification && proxy.pdfViewer.magnification.isPinchZoomed) ||\n                !proxy.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                return;\n            }\n            var data = result.data;\n            var redirect = proxy.checkRedirection(data);\n            if (!redirect) {\n                if (data) {\n                    if (typeof data !== 'object') {\n                        try {\n                            data = JSON.parse(data);\n                        }\n                        catch (error) {\n                            proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.renderTexts);\n                            data = null;\n                        }\n                    }\n                }\n                if (data) {\n                    proxy.textRequestOnSuccess(data, proxy, pageIndex, annotationObject);\n                }\n            }\n        };\n        this.textRequestHandler.onFailure = function (result) {\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderTexts);\n        };\n        this.textRequestHandler.onError = function (result) {\n            proxy.openNotificationPopup();\n            proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderTexts);\n        };\n        if (this.clientSideRendering) {\n            var requestType = 'textRequest';\n            this.pdfViewer.pdfRendererModule.getDocumentText(jsonObject, requestType, annotationObject);\n        }\n    };\n    /**\n     * @private\n     * @param {any} data - It gets the data\n     * @param { number} pageIndex - It gets the page index value\n     * @param {any} annotationObject - It gets the annotation object\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.textRequestSuccess = function (data, pageIndex, annotationObject) {\n        this.textRequestOnSuccess(data, this, pageIndex, annotationObject);\n    };\n    PdfViewerBase.prototype.textRequestOnSuccess = function (data, proxy, pageIndex, annotationObject) {\n        while (typeof data !== 'object') {\n            data = JSON.parse(data);\n        }\n        if (data.documentTextCollection && data.uniqueId === proxy.documentId) {\n            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderTexts, data);\n            var pageNumber = (data.pageNumber !== undefined) ? data.pageNumber : pageIndex;\n            proxy.storeWinData(data, pageNumber);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotationObject)) {\n                var markedBounds = annotationObject.bounds;\n                var pageCharText = data.documentTextCollection[0][parseInt(pageIndex.toString(), 10)].PageText.split('');\n                var characterBounds = data.characterBounds;\n                var textMarkupContent = proxy.textMarkUpContent(markedBounds, pageCharText, characterBounds);\n                annotationObject.textMarkupContent = textMarkupContent;\n                this.pdfViewer.annotationModule.storeAnnotations(pageIndex, annotationObject, '_annotations_textMarkup');\n            }\n            else {\n                proxy.renderPage(data, pageIndex);\n            }\n        }\n    };\n    /**\n     * @param {any} markedBounds - It describes about the marked bounds\n     * @param {any} pageCharText - It describes about the page character text\n     * @param {any} characterBounds - It describes about the character bounds\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.textMarkUpContent = function (markedBounds, pageCharText, characterBounds) {\n        var textMarkupContent = '';\n        for (var k = 0; k < markedBounds.length; k++) {\n            for (var j = 0; j < characterBounds.length; j++) {\n                var buffer = 0.5;\n                if (characterBounds[parseInt(j.toString(), 10)].Y >= markedBounds[parseInt(k.toString(), 10)].Y - buffer &&\n                    characterBounds[parseInt(j.toString(), 10)].X >= markedBounds[parseInt(k.toString(), 10)].X - buffer &&\n                    characterBounds[parseInt(j.toString(), 10)].Y <= markedBounds[parseInt(k.toString(), 10)].Y +\n                        markedBounds[parseInt(k.toString(), 10)].Height + buffer &&\n                    characterBounds[parseInt(j.toString(), 10)].X <= markedBounds[parseInt(k.toString(), 10)].X +\n                        markedBounds[parseInt(k.toString(), 10)].Width + buffer) {\n                    textMarkupContent += pageCharText[parseInt(j.toString(), 10)];\n                }\n            }\n        }\n        return textMarkupContent.replace((/(\\r\\n)/gm), '');\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @private\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.digitalSignaturePresent = function (pageIndex) {\n        var digitalSignaturePresent = false;\n        if (this.digitalSignaturePages && (this.digitalSignaturePages.length !== 0) &&\n            (this.digitalSignaturePages.indexOf(pageIndex) !== -1)) {\n            digitalSignaturePresent = true;\n        }\n        return digitalSignaturePresent;\n    };\n    PdfViewerBase.prototype.pageRequestSent = function (pageIndex, tileX, tileY) {\n        var zoomFactor = this.retrieveCurrentZoomFactor();\n        var currentString = this.documentId + '_' + pageIndex + '_' + tileX + '_' + tileY + '_' + zoomFactor;\n        if (this.requestLists && this.requestLists.indexOf(currentString) > -1) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @private\n     * @param {string} status - The status message.\n     * @param {string} errorMessage - The error message.\n     * @param {string} action - The action.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.onControlError = function (status, errorMessage, action) {\n        this.openNotificationPopup();\n        this.pdfViewer.fireAjaxRequestFailed(status, errorMessage, action);\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isTextSearch - It ensures whether the isTextSearch is true or not\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.getStoredData = function (pageIndex, isTextSearch) {\n        var zoomFactor = this.retrieveCurrentZoomFactor();\n        if (this.pdfViewer.restrictZoomRequest && !this.pdfViewer.tileRenderingSettings.enableTileRendering) {\n            zoomFactor = this.initialZoomValue[parseInt(pageIndex.toString(), 10)];\n        }\n        var storedData = this.getWindowSessionStorage(pageIndex, zoomFactor) ?\n            this.getWindowSessionStorage(pageIndex, zoomFactor) : this.getPinchZoomPage(pageIndex);\n        if (!storedData && isTextSearch) {\n            var storedTileData = this.clientSideRendering ?\n                this.getStoredTileImageDetails(pageIndex, 0, 0, zoomFactor) : this.getWindowSessionStorageTile(pageIndex, 0, 0, zoomFactor);\n            var storedTileDataParsed = JSON.parse(storedTileData);\n            if (storedTileData) {\n                storedData = storedTileData;\n            }\n            if (storedTileDataParsed && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(storedTileDataParsed.pageText) &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(storedTileDataParsed.textContent)) {\n                var SessionData = JSON.parse(this.getWindowSessionStorageTile(pageIndex, 0, 0, zoomFactor));\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(SessionData) && SessionData.uniqueId === storedTileDataParsed.uniqueId) {\n                    storedData = JSON.stringify(SessionData);\n                }\n            }\n        }\n        var data = null;\n        if (storedData) {\n            data = storedData;\n            if (!this.isPinchZoomStorage) {\n                data = JSON.parse(storedData);\n            }\n            this.isPinchZoomStorage = false;\n        }\n        return data;\n    };\n    /**\n     * @private\n     * @param  {any} data - The data.\n     * @param {number} pageIndex - The pageIndex.\n     * @param {number} tileX - The tileX.\n     * @param {number} tileY - The tileY.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.storeWinData = function (data, pageIndex, tileX, tileY) {\n        var storeObject;\n        if (!data['image']) {\n            var pageItems = data.documentTextCollection[0][parseInt(pageIndex.toString(), 10)];\n            storeObject = {\n                textContent: data['textContent'], textBounds: data['textBounds'], pageText: pageItems.PageText, rotation: data['rotation'], uniqueId: data['uniqueId']\n            };\n            if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                this.pageSize[parseInt(pageIndex.toString(), 10)].rotation = parseFloat(data['rotation']);\n            }\n            this.textLayer.characterBound[parseInt(pageIndex.toString(), 10)] = data['characterBounds'];\n        }\n        else {\n            var blobObj = this.createBlobUrl(data['image'].split('base64,')[1], 'image/png');\n            var Url = URL || webkitURL;\n            var blobUrl = Url.createObjectURL(blobObj);\n            if ((isNaN(tileX) && isNaN(tileY)) || (tileX === 0 && tileY === 0)) {\n                storeObject = {\n                    image: blobUrl, transformationMatrix: data['transformationMatrix'], hyperlinks: data['hyperlinks'], hyperlinkBounds: data['hyperlinkBounds'], linkAnnotation: data['linkAnnotation'], linkPage: data['linkPage'], annotationLocation: data['annotationLocation'],\n                    textContent: data['textContent'], width: data['width'], textBounds: data['textBounds'], pageText: data['pageText'], rotation: data['rotation'], scaleFactor: data['scaleFactor'], uniqueId: data['uniqueId'], zoomFactor: data['zoomFactor'], tileX: tileX, tileY: tileY\n                };\n                if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n                    this.pageSize[parseInt(pageIndex.toString(), 10)].rotation = parseFloat(data['rotation']);\n                }\n                this.textLayer.characterBound[parseInt(pageIndex.toString(), 10)] = data['characterBounds'];\n            }\n            else {\n                storeObject = {\n                    image: blobUrl, transformationMatrix: data['transformationMatrix'], tileX: tileX, tileY: tileY, width: data['width'], zoomFactor: data['zoomFactor']\n                };\n            }\n        }\n        var pageWidth = 0;\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            pageWidth = this.pageSize[parseInt(pageIndex.toString(), 10)].width;\n        }\n        this.manageSessionStorage(pageIndex, storeObject, tileX, tileY);\n    };\n    /**\n     * @private\n     * @param {XMLHttpRequest} request - The Xml request.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.setCustomAjaxHeaders = function (request) {\n        for (var i = 0; i < this.pdfViewer.ajaxRequestSettings.ajaxHeaders.length; i++) {\n            request.setRequestHeader(this.pdfViewer.ajaxRequestSettings.ajaxHeaders[parseInt(i.toString(), 10)].headerName, this.pdfViewer.ajaxRequestSettings.ajaxHeaders[parseInt(i.toString(), 10)].headerValue);\n        }\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - Page index.\n     * @returns {object} - object\n     */\n    PdfViewerBase.prototype.getPinchZoomPage = function (pageIndex) {\n        for (var key in this.pinchZoomStorage) {\n            if (Object.prototype.hasOwnProperty.call(this.pinchZoomStorage, key)) {\n                /* eslint-disable-next-line security/detect-object-injection */\n                if (this.pinchZoomStorage[key].index === pageIndex) {\n                    this.isPinchZoomStorage = true;\n                    /* eslint-disable-next-line security/detect-object-injection */\n                    return this.pinchZoomStorage[key].pinchZoomStorage;\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - current page index.\n     * @param {number} zoomFactor - cuurent zoom factor\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.getWindowSessionStorage = function (pageIndex, zoomFactor) {\n        return PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_' + pageIndex + '_' + zoomFactor);\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - current page index.\n     * @param {number} tileX - cuurent tile x\n     * @param {number} tileY - cuurent tile y\n     * @param {number} zoomFactor - cuurent zoom factor\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.getWindowSessionStorageTile = function (pageIndex, tileX, tileY, zoomFactor) {\n        return PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_' + pageIndex + '_' + tileX + '_' + tileY + '_' + zoomFactor);\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {number} tileX - It describes about the tile X\n     * @param {number} tileY - It describes about the tile Y\n     * @param {number} zoomFactor - It describes about the zoom factor\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.getStoredTileImageDetails = function (pageIndex, tileX, tileY, zoomFactor) {\n        return this.pageImageDetails[this.documentId + '_' + pageIndex + '_' + tileX + '_' + tileY + '_' + zoomFactor + '_imageUrl'] || null;\n    };\n    /**\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.retrieveCurrentZoomFactor = function () {\n        var zoomFactor = this.getZoomFactor();\n        if (this.pdfViewer.enableZoomOptimization) {\n            if ((zoomFactor) <= 1) {\n                zoomFactor = 1;\n            }\n            else if ((zoomFactor) > 1 && zoomFactor <= 2) {\n                zoomFactor = 2;\n            }\n            else if ((zoomFactor) > 2 && zoomFactor <= 3) {\n                zoomFactor = 3;\n            }\n            else if ((zoomFactor) > 3 && zoomFactor <= 4) {\n                zoomFactor = 4;\n            }\n            return zoomFactor;\n        }\n        else {\n            if (zoomFactor <= 0) {\n                zoomFactor = 1;\n            }\n            return zoomFactor;\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} textBounds - It describes about the text bounds\n     * @param {any} textContent - It describes about the text content\n     * @param {string} pageText - It describes about the page text\n     * @param {number} rotation - It describes about the rotation\n     * @param {any} characterBounds - It describes about the character bounds\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.storeTextDetails = function (pageNumber, textBounds, textContent, pageText, rotation, characterBounds) {\n        var textObject = ({ textBounds: textBounds, textContent: textContent, rotation: rotation, pageText: pageText,\n            characterBounds: characterBounds });\n        if (this.pageSize[parseInt(pageNumber.toString(), 10)]) {\n            this.pageSize[parseInt(pageNumber.toString(), 10)].rotation = rotation;\n        }\n        this.textLayer.characterBound[parseInt(pageNumber.toString(), 10)] = characterBounds;\n        this.pageTextDetails[this.documentId + '_' + pageNumber + '_textDetails'] = JSON.stringify(textObject);\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} storeObject - It describes about the store object\n     * @param {number} tileX - It describes about the tile X value\n     * @param {number} tileY - It describes about the tile Y\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.storeImageData = function (pageNumber, storeObject, tileX, tileY) {\n        var zoomFactor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(storeObject.zoomFactor) ? storeObject.zoomFactor : this.retrieveCurrentZoomFactor();\n        if (isNaN(tileX) && isNaN(tileY)) {\n            this.pageImageDetails[this.documentId + '_' + pageNumber + '_' + zoomFactor + '_imageUrl'] = JSON.stringify(storeObject);\n        }\n        else {\n            this.pageImageDetails[this.documentId + '_' + pageNumber + '_' + tileX + '_' + tileY + '_' + zoomFactor + '_imageUrl'] = JSON.stringify(storeObject);\n        }\n    };\n    PdfViewerBase.prototype.manageSessionStorage = function (pageIndex, storeObject, tileX, tileY) {\n        var currentSize = PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n        var newObjectSize = Math.round(JSON.stringify(storeObject).length / 1024);\n        var sessionSize = currentSize + newObjectSize;\n        var maxSessionSize = 5000;\n        var maxSessionLength = 200;\n        if (this.isDeviceiOS || this.isMacSafari) {\n            maxSessionSize = 2000;\n            maxSessionLength = 80;\n        }\n        if (sessionSize >= maxSessionSize) {\n            if (!this.isStorageExceed) {\n                var annotationList = [];\n                var formFieldsList = [];\n                for (var i = 0; i < PdfViewerBase.sessionStorageManager.getSessionLength(); i++) {\n                    if (PdfViewerBase.sessionStorageManager.getKey(i) && PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3]) {\n                        if (PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] === 'annotations') {\n                            this.annotationStorage[PdfViewerBase.sessionStorageManager.getKey(i)] =\n                                PdfViewerBase.sessionStorageManager.getItem(PdfViewerBase.sessionStorageManager.getKey(i));\n                            annotationList.push(PdfViewerBase.sessionStorageManager.getKey(i));\n                        }\n                        else if (PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] === 'formfields') {\n                            this.formFieldStorage[PdfViewerBase.sessionStorageManager.getKey(i)] =\n                                PdfViewerBase.sessionStorageManager.getItem(PdfViewerBase.sessionStorageManager.getKey(i));\n                            formFieldsList.push(PdfViewerBase.sessionStorageManager.getKey(i));\n                        }\n                        else if (PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] === 'formDesigner') {\n                            this.formFieldStorage[PdfViewerBase.sessionStorageManager.getKey(i)] =\n                                PdfViewerBase.sessionStorageManager.getItem(PdfViewerBase.sessionStorageManager.getKey(i));\n                            formFieldsList.push(PdfViewerBase.sessionStorageManager.getKey(i));\n                        }\n                    }\n                }\n                if (annotationList) {\n                    for (var i = 0; i < annotationList.length; i++) {\n                        PdfViewerBase.sessionStorageManager.removeItem(annotationList[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (formFieldsList) {\n                    for (var i = 0; i < formFieldsList.length; i++) {\n                        PdfViewerBase.sessionStorageManager.removeItem(formFieldsList[parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n            this.isStorageExceed = true;\n            sessionSize = PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n            if (sessionSize >= maxSessionSize) {\n                var storageLength = PdfViewerBase.sessionStorageManager.getSessionLength();\n                if (storageLength > maxSessionLength) {\n                    storageLength = maxSessionLength;\n                }\n                for (var i = 0; i < storageLength; i++) {\n                    if (PdfViewerBase.sessionStorageManager.getKey(i) && PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3]) {\n                        if (PdfViewerBase.sessionStorageManager.getKey(i).split('_')[3] !== 'annotations') {\n                            PdfViewerBase.sessionStorageManager.removeItem(PdfViewerBase.sessionStorageManager.getKey(i));\n                            storageLength = storageLength - 1;\n                            i = i - 1;\n                        }\n                    }\n                }\n            }\n        }\n        var zoomFactor = this.retrieveCurrentZoomFactor();\n        this.initialZoomValue[parseInt(pageIndex.toString(), 10)] = zoomFactor;\n        if (isNaN(tileX) && isNaN(tileY)) {\n            if (sessionSize < maxSessionSize) {\n                PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_' + pageIndex + '_' + zoomFactor, JSON.stringify(storeObject));\n            }\n            this.sessionStorage.push(this.documentId + '_' + pageIndex + '_' + zoomFactor);\n        }\n        else {\n            this.sessionStorage.push(this.documentId + '_' + pageIndex + '_' + tileX + '_' + tileY + '_' + zoomFactor);\n            if (sessionSize < maxSessionSize) {\n                PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_' + pageIndex + '_' + tileX + '_' + tileY + '_' + zoomFactor, JSON.stringify(storeObject));\n            }\n        }\n    };\n    /**\n     * @param {string} base64String - It describes about the base64 string\n     * @param {string} contentType - It describes about the content type\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.createBlobUrl = function (base64String, contentType) {\n        var sliceSize = 512;\n        var byteCharacters = atob(base64String);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        var blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    };\n    PdfViewerBase.prototype.getRandomNumber = function () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var random = Math.random() * 16 | 0;\n            var v = c === 'x' ? random : (random & 0x3 | 0x8);\n            return random.toString(16);\n        });\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.createGUID = function () {\n        return 'Sync_PdfViewer_' + this.getRandomNumber();\n    };\n    /**\n     * @private\n     * @param {MouseEvent} event - The mouse event.\n     * @param {boolean} isNeedToSet - Is need to test.\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.isClickedOnScrollBar = function (event, isNeedToSet) {\n        var isScrollBar = false;\n        if (isNeedToSet) {\n            this.setScrollDownValue(event.type, false);\n        }\n        if ((this.viewerContainer.clientWidth + this.viewerContainer.offsetLeft) < event.clientX &&\n            event.clientX < (this.viewerContainer.offsetWidth + this.viewerContainer.offsetLeft)) {\n            isScrollBar = true;\n            if (isNeedToSet) {\n                this.setScrollDownValue(event.type, true);\n            }\n        }\n        if ((this.viewerContainer.clientHeight + this.viewerContainer.offsetTop) < event.clientY &&\n            event.clientY < (this.viewerContainer.offsetHeight + this.viewerContainer.offsetTop)) {\n            isScrollBar = true;\n            if (isNeedToSet) {\n                this.setScrollDownValue(event.type, true);\n            }\n        }\n        return isScrollBar;\n    };\n    PdfViewerBase.prototype.setScrollDownValue = function (eventType, boolValue) {\n        if (eventType === 'mousedown') {\n            this.isScrollbarMouseDown = boolValue;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.disableTextSelectionMode = function () {\n        this.isTextSelectionDisabled = true;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.viewerContainer)) {\n            this.viewerContainer.classList.remove('e-enable-text-selection');\n        }\n        if (this.pdfViewer.textSelectionModule) {\n            this.pdfViewer.textSelectionModule.clearTextSelection();\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.viewerContainer)) {\n            this.viewerContainer.classList.add('e-disable-text-selection');\n            this.viewerContainer.addEventListener('selectstart', function () {\n                return false;\n            });\n        }\n    };\n    /**\n     * @private\n     * @param {string} idString - The Id string.\n     * @returns {HTMLElement} - The html element.\n     */\n    PdfViewerBase.prototype.getElement = function (idString) {\n        return document.getElementById(this.pdfViewer.element.id + idString);\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - The pageIndex\n     * @returns {number} - Returns number\n     */\n    PdfViewerBase.prototype.getPageWidth = function (pageIndex) {\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            return this.pageSize[parseInt(pageIndex.toString(), 10)].width * this.getZoomFactor();\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - The pageIndex\n     * @returns {number} - Returns number\n     */\n    PdfViewerBase.prototype.getPageHeight = function (pageIndex) {\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            return this.pageSize[parseInt(pageIndex.toString(), 10)].height * this.getZoomFactor();\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * @private\n     * @param {number} pageIndex - The pageIndex.\n     * @returns {number} - Returns number\n     */\n    PdfViewerBase.prototype.getPageTop = function (pageIndex) {\n        if (this.pageSize[parseInt(pageIndex.toString(), 10)]) {\n            return this.pageSize[parseInt(pageIndex.toString(), 10)].top * this.getZoomFactor();\n        }\n        else {\n            return 0;\n        }\n    };\n    PdfViewerBase.prototype.isAnnotationToolbarHidden = function () {\n        if (this.pdfViewer.toolbarModule.annotationToolbarModule) {\n            return this.pdfViewer.toolbarModule.annotationToolbarModule.isToolbarHidden;\n        }\n        else {\n            return true;\n        }\n    };\n    PdfViewerBase.prototype.isFormDesignerToolbarHidded = function () {\n        var formDesignerToolbar = this.pdfViewer.toolbarModule.formDesignerToolbarModule;\n        if (formDesignerToolbar) {\n            return formDesignerToolbar.isToolbarHidden;\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.getTextMarkupAnnotationMode = function () {\n        if (this.isTextMarkupAnnotationModule()) {\n            return this.pdfViewer.annotationModule.textMarkupAnnotationModule.isTextMarkupAnnotationMode;\n        }\n        else {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.isNewFreeTextAnnotation = function () {\n        if (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.freeTextAnnotationModule) {\n            if (!this.pdfViewer.annotationModule.freeTextAnnotationModule.isNewFreeTextAnnot) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return true;\n        }\n    };\n    PdfViewerBase.prototype.getCurrentTextMarkupAnnotation = function () {\n        if (this.isTextMarkupAnnotationModule()) {\n            if (this.pdfViewer.annotationModule.textMarkupAnnotationModule.currentTextMarkupAnnotation) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {number} - Returns page number.\n     */\n    PdfViewerBase.prototype.getSelectTextMarkupCurrentPage = function () {\n        if (this.isTextMarkupAnnotationModule()) {\n            return this.pdfViewer.annotationModule.textMarkupAnnotationModule.selectTextMarkupCurrentPage;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.getAnnotationToolStatus = function () {\n        if (this.pdfViewer.toolbarModule) {\n            return this.pdfViewer.toolbarModule.annotationToolbarModule.isAnnotationButtonsEnabled();\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.getPopupNoteVisibleStatus = function () {\n        if (this.pdfViewer.annotationModule) {\n            return this.pdfViewer.annotationModule.isPopupNoteVisible;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {TextMarkupAnnotation} - TextMarkupAnnotation.\n     */\n    PdfViewerBase.prototype.isTextMarkupAnnotationModule = function () {\n        if (this.pdfViewer.annotationModule) {\n            return this.pdfViewer.annotationModule.textMarkupAnnotationModule;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.isShapeAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.shapeAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isFormDesignerModule = function () {\n        if (this.pdfViewer.formDesignerModule) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isFormFieldsModule = function () {\n        if (this.pdfViewer.formFieldsModule) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isCalibrateAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.measureAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isStampAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.stampAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isInkAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.inkAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isCommentAnnotationModule = function () {\n        if (this.pdfViewer.annotation) {\n            if (this.pdfViewer.annotation && this.pdfViewer.annotation.stickyNotesAnnotationModule) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @returns {boolean} - Retunrs true or false.\n     */\n    PdfViewerBase.prototype.isShapeBasedAnnotationsEnabled = function () {\n        if (this.isShapeAnnotationModule() || this.isCalibrateAnnotationModule() || this.isStampAnnotationModule() ||\n            this.isCommentAnnotationModule() || this.isFormDesignerModule() || this.isFormFieldsModule()) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @private\n     * @param {MouseEvent | PointerEvent | TouchEvent} e - Returns event.\n     * @returns {PointModel} - Returns points.\n     */\n    PdfViewerBase.prototype.getMousePosition = function (e) {\n        var touchArg;\n        var offsetX;\n        var offsetY;\n        var currentTarget = e.target.parentElement;\n        if (e.type.indexOf('touch') !== -1) {\n            touchArg = e;\n            if (this.pdfViewer.annotation || this.isDeviceiOS) {\n                var pageNumber = this.pdfViewer.currentPageNumber - 1;\n                if (this.pdfViewer.annotation && !isNaN(this.pdfViewer.annotation.getEventPageNumber(e))) {\n                    pageNumber = this.pdfViewer.annotation.getEventPageNumber(e);\n                }\n                if (isNaN(pageNumber) && this.pdfViewer.formDesignerModule) {\n                    pageNumber = this.pdfViewer.formDesignerModule.getEventPageNumber(e);\n                }\n                var pageDiv = this.getElement('_pageDiv_' + pageNumber);\n                if (pageDiv) {\n                    var pageCurrentRect = pageDiv.getBoundingClientRect();\n                    offsetX = touchArg.changedTouches[0].clientX - pageCurrentRect.left;\n                    offsetY = touchArg.changedTouches[0].clientY - pageCurrentRect.top;\n                }\n            }\n        }\n        else {\n            if (e.target.classList.contains('e-pv-hyperlink')) {\n                offsetX = e.offsetX + e.target.offsetLeft;\n                offsetY = e.offsetY + e.target.offsetTop;\n            }\n            else if (e.target.classList.contains('e-pv-text') && currentTarget) {\n                var targetParentRect = currentTarget.getBoundingClientRect();\n                offsetX = e.clientX - targetParentRect.left;\n                offsetY = e.clientY - targetParentRect.top;\n            }\n            else if (e.target && (e && e.path) && currentTarget && (currentTarget.classList.contains('foreign-object') || currentTarget.parentElement.classList.contains('foreign-object'))) {\n                var targetParentRect = void 0;\n                if (e.path[4].className === 'e-pv-page-div') {\n                    targetParentRect = e.path[4].getBoundingClientRect();\n                }\n                else {\n                    for (var i = 0; i < e.path.length; i++) {\n                        if (e.path[parseInt(i.toString(), 10)].className === 'e-pv-page-div') {\n                            targetParentRect = e.path[parseInt(i.toString(), 10)].getBoundingClientRect();\n                            break;\n                        }\n                    }\n                }\n                offsetX = e.clientX - targetParentRect.left;\n                offsetY = e.clientY - targetParentRect.top;\n            }\n            else if (e.target && currentTarget && currentTarget.classList.contains('foreign-object') || (e.target.classList.contains('e-pv-checkbox-div'))) {\n                var targetParentRect = void 0;\n                if ((e.target.classList.contains('e-pv-checkbox-div'))) {\n                    targetParentRect = e.target.offsetParent.offsetParent.offsetParent.offsetParent.getBoundingClientRect();\n                }\n                else {\n                    targetParentRect = e.target.offsetParent.offsetParent.offsetParent.getBoundingClientRect();\n                }\n                offsetX = e.clientX - targetParentRect.left;\n                offsetY = e.clientY - targetParentRect.top;\n            }\n            else {\n                offsetX = e.offsetX;\n                offsetY = e.offsetY;\n            }\n        }\n        return { x: offsetX, y: offsetY };\n    };\n    PdfViewerBase.prototype.getMouseEventArgs = function (position, args, evt, source) {\n        args.position = position;\n        var obj;\n        var objects;\n        if (!source) {\n            if (this.action === 'Drag' || this.action === 'ConnectorSourceEnd' || this.action === 'SegmentEnd' ||\n                this.action === 'OrthoThumb' || this.action === 'BezierSourceThumb' || this.action === 'BezierTargetThumb' ||\n                this.action === 'ConnectorTargetEnd' || this.action.indexOf('Rotate') !== -1 || this.action.indexOf('Resize') !== -1) {\n                obj = this.pdfViewer.selectedItems;\n                if (this.action === 'Drag' && obj && this.pdfViewer.selectedItems.annotations.length > 0) {\n                    obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n                }\n                else if (this.action === 'Drag' && obj && this.pdfViewer.selectedItems.formFields.length > 0) {\n                    obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n                }\n            }\n            else {\n                obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n            }\n        }\n        else {\n            //   objects = this.diagram.findObjectsUnderMouse(this.currentPosition, source);\n            obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n        }\n        var wrapper;\n        if (obj) {\n            wrapper = obj.wrapper;\n        }\n        if (!source) {\n            args.source = obj;\n            args.sourceWrapper = wrapper;\n        }\n        else {\n            args.target = obj;\n            args.targetWrapper = wrapper;\n        }\n        args.actualObject = this.eventArgs.actualObject;\n        //args.startTouches = this.touchStartList;\n        //args.moveTouches = this.touchMoveList;\n        return args;\n    };\n    /**\n     * @private\n     * @param {PdfAnnotationBaseModel} obj - The object.\n     * @param {PointModel} position - The position.\n     * @returns {Actions | string} - Returns the string.\n     */\n    PdfViewerBase.prototype.findToolToActivate = function (obj, position) {\n        position = { x: position.x / this.getZoomFactor(), y: position.y / this.getZoomFactor() };\n        var element = this.pdfViewer.selectedItems.wrapper;\n        if (element && obj) {\n            var selectorBnds = element.bounds; //let handle: SelectorModel = diagram.selectedItems;\n            var paddedBounds = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(selectorBnds.x, selectorBnds.y, selectorBnds.width, selectorBnds.height);\n            if (obj.shapeAnnotationType === 'Line' || obj.shapeAnnotationType === 'LineWidthArrowHead' ||\n                obj.shapeAnnotationType === 'Distance' || obj.shapeAnnotationType === 'Polygon') {\n                var conn = this.pdfViewer.selectedItems.annotations[0];\n                if (conn) {\n                    for (var i = 0; i < conn.vertexPoints.length; i++) {\n                        if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, conn.vertexPoints[parseInt(i.toString(), 10)], 10) && conn.leaderHeight !== 0) {\n                            return 'ConnectorSegmentPoint_' + i;\n                        }\n                    }\n                }\n            }\n            if (obj.shapeAnnotationType === 'Distance') {\n                var leaderCount = 0;\n                var newPoint1 = void 0;\n                if (obj && obj.wrapper) {\n                    for (var i = 0; i < obj.wrapper.children.length; i++) {\n                        var elementAngle = _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Point.findAngle(obj.sourcePoint, obj.targetPoint);\n                        var segment = obj.wrapper.children[parseInt(i.toString(), 10)];\n                        if (segment.id.indexOf('leader') > -1) {\n                            var centerPoint = obj.wrapper.children[0].bounds.center;\n                            if (leaderCount === 0) {\n                                newPoint1 = { x: obj.sourcePoint.x, y: obj.sourcePoint.y - obj.leaderHeight };\n                                centerPoint = obj.sourcePoint;\n                            }\n                            else {\n                                newPoint1 = { x: obj.targetPoint.x, y: obj.targetPoint.y - obj.leaderHeight };\n                                centerPoint = obj.targetPoint;\n                            }\n                            var matrix_1 = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.identityMatrix)();\n                            (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.rotateMatrix)(matrix_1, elementAngle, centerPoint.x, centerPoint.y);\n                            var rotatedPoint = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix_1, { x: newPoint1.x, y: newPoint1.y });\n                            if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, rotatedPoint, 10)) {\n                                return 'Leader' + leaderCount;\n                            }\n                            leaderCount++;\n                        }\n                    }\n                }\n            }\n            var ten = this.pdfViewer.touchPadding;\n            if (this.getZoomFactor() <= 1.5) {\n                ten = ten / this.getZoomFactor();\n            }\n            var matrix = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.identityMatrix)();\n            (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.rotateMatrix)(matrix, obj.rotateAngle + element.parentTransform, element.offsetX, element.offsetY);\n            //check for resizing tool\n            var x = element.offsetX - element.pivot.x * element.actualSize.width;\n            var y = element.offsetY - element.pivot.y * element.actualSize.height;\n            var rotateThumb = {\n                x: x + ((element.pivot.x === 0.5 ? element.pivot.x * 2 : element.pivot.x) * element.actualSize.width / 2),\n                y: y - 30 / this.getZoomFactor()\n            };\n            rotateThumb = (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, rotateThumb);\n            if (obj.shapeAnnotationType === 'Stamp' && (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, rotateThumb, ten)) {\n                return 'Rotate';\n            }\n            paddedBounds = this.inflate(ten, paddedBounds);\n            if (paddedBounds.containsPoint(position, 0)) {\n                var action = this.checkResizeHandles(this.pdfViewer, element, position, matrix, x, y);\n                if (action) {\n                    return action;\n                }\n            }\n            if (this.pdfViewer.selectedItems.annotations.indexOf(obj) > -1) {\n                return 'Drag';\n            }\n            else if (this.pdfViewer.selectedItems.formFields.indexOf(obj) > -1 && this.pdfViewer.designerMode) {\n                return 'Drag';\n            }\n            return 'Select';\n        }\n        return this.pdfViewer.tool || 'Select';\n    };\n    PdfViewerBase.prototype.inflate = function (padding, bound) {\n        bound.x -= padding;\n        bound.y -= padding;\n        bound.width += padding * 2;\n        bound.height += padding * 2;\n        return bound;\n    };\n    PdfViewerBase.prototype.checkResizeHandles = function (diagram, element, position, matrix, x, y) {\n        var action;\n        if (!action) {\n            action = this.checkForResizeHandles(diagram, element, position, matrix, x, y);\n        }\n        if (action) {\n            return action;\n        }\n        return null;\n    };\n    PdfViewerBase.prototype.checkForResizeHandles = function (diagram, element, position, matrix, x, y) {\n        var forty = 40 / 1;\n        var ten = this.pdfViewer.touchPadding / 1;\n        // Resizer cursor adjustment factor for higher zoom values\n        var resizerBuffer = 1.9;\n        if (this.getZoomFactor() >= 2.0 && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            ten = ten / (this.getZoomFactor() / resizerBuffer);\n        }\n        if (element.actualSize.width < 40 || element.actualSize.height < 40 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            ten = ten / 2 * this.getZoomFactor() / 1;\n        }\n        var selectedItems = diagram.selectedItems;\n        var isStamp = false;\n        var isSticky = false;\n        var isNodeShape = false;\n        var isInk = false;\n        var resizerLocation = this.pdfViewer.annotationSelectorSettings.resizerLocation;\n        if (resizerLocation < 1 || resizerLocation > 3) {\n            resizerLocation = 3;\n        }\n        if (this.pdfViewer.selectedItems.annotations[0] && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Stamp'\n            || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'FreeText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Image' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'HandWrittenSignature'\n            || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureImage')) {\n            isStamp = true;\n        }\n        if (this.pdfViewer.selectedItems.annotations[0] && this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'StickyNotes') {\n            isSticky = true;\n        }\n        if (this.pdfViewer.selectedItems.annotations[0] && this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Ink') {\n            isInk = true;\n        }\n        if (this.pdfViewer.selectedItems.annotations[0] && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Ellipse' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Radius' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Rectangle')) {\n            isNodeShape = true;\n        }\n        if (!isSticky) {\n            if ((isInk || isStamp || (this.pdfViewer.selectedItems.annotations[0] && (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'HandWrittenSignature' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureImage')) || ((element.actualSize.width >= forty && element.actualSize.height >= forty) && isNodeShape && (resizerLocation === 1 || resizerLocation === 3)))) {\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x + element.actualSize.width, y: y + element.actualSize.height }), ten)) {\n                    return 'ResizeSouthEast';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x, y: y + element.actualSize.height }), ten)) {\n                    return 'ResizeSouthWest';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x + element.actualSize.width, y: y }), ten)) {\n                    return 'ResizeNorthEast';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x, y: y }), ten)) {\n                    return 'ResizeNorthWest';\n                }\n            }\n            if (isInk || !isNodeShape || (isNodeShape && (resizerLocation === 2 || resizerLocation === 3 ||\n                (!(element.actualSize.width >= forty && element.actualSize.height >= forty) && resizerLocation === 1)))) {\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x + element.actualSize.width, y: y +\n                        element.actualSize.height / 2 }), ten) && !isStamp) {\n                    return 'ResizeEast';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x, y: y + element.actualSize.height / 2 }), ten) && !isStamp) {\n                    return 'ResizeWest';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x + element.actualSize.width / 2, y: y +\n                        element.actualSize.height }), ten) && !isStamp) {\n                    return 'ResizeSouth';\n                }\n                if ((0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.contains)(position, (0,_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.transformPointByMatrix)(matrix, { x: x + element.actualSize.width / 2, y: y }), ten) && !isStamp) {\n                    return 'ResizeNorth';\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {string} fieldID - The fieldID\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.checkSignatureFormField = function (fieldID) {\n        var isFormFieldSign = false;\n        if (this.pdfViewer.formDesignerModule) {\n            fieldID = fieldID.split('_')[0];\n        }\n        var formField = this.pdfViewer.nameTable[\"\" + fieldID];\n        if (formField) {\n            if (formField.formFieldAnnotationType === 'SignatureField' || formField.formFieldAnnotationType === 'InitialField' || formField.annotName === 'SignatureField') {\n                isFormFieldSign = true;\n            }\n        }\n        return isFormFieldSign;\n    };\n    /**\n     * @private\n     * @param {MouseEvent | TouchEvent} evt - The event.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.diagramMouseMove = function (evt) {\n        var allowServerDataBind = this.pdfViewer.allowServerDataBinding;\n        var pageDiv = this.getElement('_pageDiv_' + (this.currentPageNumber - 1));\n        this.pdfViewer.enableServerDataBinding(false);\n        this.currentPosition = this.getMousePosition(evt);\n        this.pdfViewer.firePageMouseover(this.currentPosition.x, this.currentPosition.y);\n        if (this.pdfViewer.annotation) {\n            this.activeElements.activePageID = this.pdfViewer.annotation.getEventPageNumber(evt);\n        }\n        else if (this.pdfViewer.formDesignerModule) {\n            this.activeElements.activePageID = this.pdfViewer.formDesignerModule.getEventPageNumber(evt);\n        }\n        var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n        if ((this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool) || (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool)) {\n            obj = this.pdfViewer.drawingObject;\n        }\n        var target;\n        var isFormFieldSign = this.pdfViewer.selectedItems.annotations.length > 0 ?\n            this.checkSignatureFormField(this.pdfViewer.selectedItems.annotations[0].id) : false;\n        if ((_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Point.equals(this.currentPosition, this.prevPosition) === false || this.inAction)) {\n            if (this.isMouseDown === false) {\n                this.eventArgs = {};\n                var sourceDrawingElement = null;\n                if (obj) {\n                    this.tool = this.getTool(this.action);\n                    if (obj.wrapper) {\n                        sourceDrawingElement = obj.wrapper.children[0];\n                        if (sourceDrawingElement) {\n                            target = obj;\n                        }\n                    }\n                }\n                var eventTarget = evt.target;\n                this.action = this.findToolToActivate(obj, this.currentPosition);\n                if (obj && obj.annotationSettings && obj.annotationSettings.isLock) {\n                    if (this.action === 'Select') {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Select', obj)) {\n                            this.action = '';\n                        }\n                    }\n                    if (this.action === 'Drag') {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Move', obj)) {\n                            this.action = 'Select';\n                        }\n                    }\n                    if (this.action === 'ResizeSouthEast' || this.action === 'ResizeNorthEast' || this.action === 'ResizeNorthWest' || this.action === 'ResizeSouthWest' ||\n                        this.action === 'ResizeNorth' || this.action === 'ResizeWest' || this.action === 'ResizeEast' || this.action === 'ResizeSouth' || this.action.includes('ConnectorSegmentPoint') || this.action.includes('Leader')) {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Resize', obj)) {\n                            this.action = 'Select';\n                        }\n                    }\n                }\n                if (!this.pdfViewer.designerMode && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) &&\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.formFieldAnnotationType))) || isFormFieldSign)) {\n                    if (this.action === 'ResizeSouthEast' || this.action === 'ResizeNorthEast' || this.action === 'ResizeNorthWest' || this.action === 'ResizeSouthWest' ||\n                        this.action === 'ResizeNorth' || this.action === 'Drag' || this.action === 'ResizeWest' || this.action === 'ResizeEast' || this.action === 'ResizeSouth' || this.action.includes('ConnectorSegmentPoint') || this.action.includes('Leader')) {\n                        this.action = '';\n                    }\n                }\n                this.tool = this.getTool(this.action);\n                this.setCursor(eventTarget, evt);\n                if (this.pdfViewer.linkAnnotationModule && this.pdfViewer.selectedItems.annotations.length !== 0 &&\n                    this.pdfViewer.selectedItems.formFields.length !== 0) {\n                    this.pdfViewer.linkAnnotationModule.disableHyperlinkNavigationUnderObjects(eventTarget, evt, this);\n                }\n            }\n            else {\n                if (!this.tool && this.action && this.action === 'Rotate') {\n                    this.tool = this.getTool(this.action);\n                    if (evt.target) {\n                        this.setCursor(evt.target, evt);\n                    }\n                }\n                if (!this.pdfViewer.designerMode && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) &&\n                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.formFieldAnnotationType))) || isFormFieldSign)) {\n                    if (this.action === 'ResizeSouthEast' || this.action === 'ResizeNorthEast' || this.action === 'ResizeNorthWest' || this.action === 'ResizeSouthWest' ||\n                        this.action === 'ResizeNorth' || this.action === 'Drag' || this.action === 'ResizeWest' || this.action === 'ResizeEast' || this.action === 'ResizeSouth' || this.action.includes('ConnectorSegmentPoint') || this.action.includes('Leader')) {\n                        this.action = '';\n                        this.tool = null;\n                    }\n                }\n                if (this.eventArgs && this.eventArgs.source) {\n                    var eventTarget = evt.target;\n                    this.updateDefaultCursor(this.eventArgs.source, eventTarget, evt);\n                }\n                else {\n                    this.setCursor(evt.target, evt);\n                }\n                this.diagramMouseActionHelper(evt);\n                if (this.tool) {\n                    var currentObject = obj;\n                    if (currentObject && currentObject.shapeAnnotationType === 'FreeText') {\n                        if (this.pdfViewer.freeTextSettings.allowEditTextOnly && this.action !== 'Ink' &&\n                            (this.eventArgs.source && this.eventArgs.source.shapeAnnotationType === 'FreeText')) {\n                            var eventTarget = event.target;\n                            eventTarget.style.cursor = 'default';\n                            this.tool = null;\n                        }\n                    }\n                    if (this.tool != null) {\n                        var info = { ctrlKey: evt.ctrlKey, shiftKey: evt.shiftKey };\n                        this.eventArgs.info = info;\n                        this.tool.mouseMove(this.eventArgs);\n                    }\n                }\n            }\n            if (this.pdfViewer.drawingObject && this.pdfViewer.drawingObject.formFieldAnnotationType && this.action !== 'Drag') {\n                if (!(this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ResizeTool)) {\n                    this.tool = this.getTool(this.action);\n                    if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool) {\n                        var obj_1 = this.pdfViewer.drawingObject;\n                        var bounds = this.pdfViewer.formDesignerModule.\n                            updateFormFieldInitialSize(obj_1, obj_1.\n                            formFieldAnnotationType);\n                        var pageWidth = this.pageContainer.firstElementChild.clientWidth - bounds.width;\n                        var pageHeight = this.pageContainer.firstElementChild.clientHeight - bounds.height;\n                        if (this.pdfViewer.formDesignerModule && obj_1.formFieldAnnotationType\n                            && this.currentPosition.x < pageWidth && this.currentPosition.y < pageHeight) {\n                            var formFieldElement = document.getElementById('FormField_helper_html_element');\n                            if (!formFieldElement) {\n                                this.pdfViewer.formDesignerModule.drawHelper(obj_1.formFieldAnnotationType, obj_1, evt);\n                            }\n                            else if (formFieldElement) {\n                                var previousActivePage = formFieldElement.parentElement.id.split('_text_')[1] || formFieldElement.parentElement.id.split('_textLayer_')[1] || formFieldElement.parentElement.id.split('_annotationCanvas_')[1] || formFieldElement.parentElement.id.split('_pageDiv_')[1];\n                                if (parseInt(previousActivePage, 10) !== this.activeElements.activePageID) {\n                                    formFieldElement.remove('FormField_helper_html_element');\n                                }\n                                else {\n                                    var point = this.getMousePosition(event);\n                                    if (obj_1.formFieldAnnotationType === 'Checkbox' && formFieldElement.firstElementChild.firstElementChild.lastElementChild) {\n                                        formFieldElement.firstElementChild.firstElementChild.lastElementChild.style.visibility = 'visible';\n                                    }\n                                    else if (obj_1.formFieldAnnotationType === 'SignatureField' || obj_1.formFieldAnnotationType === 'InitialField') {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'visible';\n                                        formFieldElement.firstElementChild.lastElementChild.style.visibility = 'visible';\n                                    }\n                                    else {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'visible';\n                                    }\n                                    formFieldElement.setAttribute('style', 'height:' + bounds.height + 'px; width:' + bounds.width + 'px;left:' + point.x + 'px; top:' + point.y + 'px;' +\n                                        'position:absolute;opacity: 0.5;');\n                                }\n                            }\n                        }\n                        else if (this.currentPosition.x > pageWidth || this.currentPosition.y > pageHeight) {\n                            var formFieldElement = document.getElementById('FormField_helper_html_element');\n                            if (!formFieldElement) {\n                                this.pdfViewer.formDesignerModule.drawHelper(obj_1.formFieldAnnotationType, obj_1, evt);\n                            }\n                            else if (formFieldElement) {\n                                var point = this.getMousePosition(event);\n                                formFieldElement.setAttribute('style', 'height:' + bounds.height + 'px; width:' + bounds.width + 'px;left:' + point.x + 'px; top:' + point.y + 'px;' +\n                                    'position:absolute;opacity: 0.5;');\n                                if ((this.currentPosition.x + parseInt(formFieldElement.style.width, 10)) >\n                                    parseInt(pageDiv.style.width, 10)) {\n                                    if (obj_1.formFieldAnnotationType === 'Checkbox' && formFieldElement.firstElementChild.firstElementChild.lastElementChild) {\n                                        formFieldElement.firstElementChild.firstElementChild.lastElementChild.style.visibility = 'hidden';\n                                    }\n                                    else if (obj_1.formFieldAnnotationType === 'SignatureField' || obj_1.formFieldAnnotationType === 'InitialField') {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'hidden';\n                                        formFieldElement.firstElementChild.lastElementChild.style.visibility = 'hidden';\n                                    }\n                                    else {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'hidden';\n                                    }\n                                }\n                                else {\n                                    if (obj_1.formFieldAnnotationType === 'Checkbox' && formFieldElement.firstElementChild.firstElementChild.lastElementChild) {\n                                        formFieldElement.firstElementChild.firstElementChild.lastElementChild.style.visibility = 'visible';\n                                    }\n                                    else if (obj_1.formFieldAnnotationType === 'SignatureField' || obj_1.formFieldAnnotationType === 'InitialField') {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'visible';\n                                        formFieldElement.firstElementChild.lastElementChild.style.visibility = 'visible';\n                                    }\n                                    else {\n                                        formFieldElement.firstElementChild.firstElementChild.style.visibility = 'visible';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this.prevPosition = this.currentPosition;\n        }\n        this.pdfViewer.enableServerDataBinding(allowServerDataBind, true);\n    };\n    PdfViewerBase.prototype.updateDefaultCursor = function (source, target, event) {\n        if (source && source.pageIndex !== undefined && source.pageIndex !== this.activeElements.activePageID && target) {\n            if (this.isPanMode) {\n                target.style.cursor = 'grab';\n            }\n            else {\n                target.style.cursor = 'default';\n            }\n        }\n        else {\n            this.setCursor(target, event);\n        }\n    };\n    /**\n     * @private\n     * @param {MouseEvent | TouchEvent} evt - The event.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.diagramMouseLeave = function (evt) {\n        this.currentPosition = this.getMousePosition(evt);\n        if (this.pdfViewer.annotation) {\n            this.activeElements.activePageID = this.pdfViewer.annotation.getEventPageNumber(evt);\n        }\n        if (isNaN(this.activeElements.activePageID) && this.pdfViewer.formDesignerModule) {\n            this.activeElements.activePageID = this.pdfViewer.formDesignerModule.getEventPageNumber(evt);\n        }\n        var shapeElement = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n        var mouseMoveforce = false;\n        var target;\n        if (_syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Point.equals(this.currentPosition, this.prevPosition) === false || this.inAction) {\n            if (this.isMouseDown === false || mouseMoveforce) {\n                this.eventArgs = {};\n                var sourceElement = null;\n                if (shapeElement) {\n                    sourceElement = shapeElement.wrapper.children[0];\n                    if (sourceElement) {\n                        target = shapeElement;\n                    }\n                    mouseMoveforce = false;\n                }\n            }\n            else {\n                this.diagramMouseActionHelper(evt);\n                if (this.tool && this.action !== 'Drag' && this.pdfViewer.tool !== 'Stamp' && this.tool.currentElement && this.tool.currentElement.shapeAnnotationType !== 'Stamp') {\n                    this.tool.mouseLeave(this.eventArgs);\n                    this.tool = null;\n                    if (this.pdfViewer.annotation) {\n                        this.pdfViewer.annotationModule.renderAnnotations(this.previousPage, null, null, null);\n                    }\n                }\n            }\n            this.prevPosition = this.currentPosition;\n        }\n    };\n    PdfViewerBase.prototype.diagramMouseActionHelper = function (evt) {\n        this.eventArgs.position = this.currentPosition;\n        if (this.action === 'Drag' &&\n            this.eventArgs.source instanceof _drawing_selector__WEBPACK_IMPORTED_MODULE_7__.Selector) {\n            this.getMouseEventArgs(this.currentPosition, this.eventArgs, evt);\n        }\n        this.getMouseEventArgs(this.currentPosition, this.eventArgs, evt, this.eventArgs.source);\n        this.inAction = true;\n        this.initialEventArgs = null;\n    };\n    PdfViewerBase.prototype.setCursor = function (eventTarget, event) {\n        var freeTextAnnotModule = this.pdfViewer.annotationModule ?\n            this.pdfViewer.annotationModule.freeTextAnnotationModule : null;\n        var cursorType;\n        if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ResizeTool) {\n            if (this.tool.corner === 'ResizeNorthWest') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'nw-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeNorthEast') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'ne-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeSouthWest') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'sw-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeSouthEast') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'se-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeNorth') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'n-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeWest') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'w-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeEast') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'e-resize' : cursorType;\n            }\n            else if (this.tool.corner === 'ResizeSouth') {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 's-resize' : cursorType;\n            }\n        }\n        else if (this.isCommentIconAdded && this.isAddComment) {\n            eventTarget.style.cursor = 'crosshair';\n        }\n        else if (this.pdfViewer.enableHandwrittenSignature && this.isNewSignatureAdded && this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.StampTool) {\n            eventTarget.style.cursor = 'crosshair';\n        }\n        else if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.MoveTool) {\n            eventTarget.style.cursor = 'move';\n        }\n        else if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool || this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool ||\n            this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool || (freeTextAnnotModule && freeTextAnnotModule.isNewAddedAnnot) ||\n            this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.InkDrawingTool) {\n            eventTarget.style.cursor = 'crosshair';\n        }\n        else if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ConnectTool) {\n            if (this.tool.endPoint && this.tool.endPoint.indexOf('Leader0')) {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'nw-resize' : cursorType;\n            }\n            else if (this.tool.endPoint && this.tool.endPoint.indexOf('Leader1')) {\n                cursorType = this.setResizerCursorType();\n                eventTarget.style.cursor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cursorType) ? 'ne-resize' : cursorType;\n            }\n            else if (this.tool.endPoint && this.tool.endPoint.indexOf('ConnectorSegmentPoint')) {\n                eventTarget.style.cursor = 'sw-resize';\n            }\n        }\n        else {\n            if (eventTarget.classList.contains('e-pv-text')) {\n                eventTarget.style.cursor = 'text';\n            }\n            else if (eventTarget.classList.contains('e-pv-hyperlink')) {\n                eventTarget.style.cursor = 'pointer';\n            }\n            else if (this.isPanMode) {\n                if (this.isViewerMouseDown && event.type === 'mousemove') {\n                    eventTarget.style.cursor = 'grabbing';\n                }\n                else {\n                    var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(event, this, this.pdfViewer);\n                    if (obj && event.type === 'mousemove') {\n                        eventTarget.style.cursor = 'pointer';\n                        var currentObject = obj;\n                        var currentPosition = this.getMousePosition(event);\n                        var relativePosition = this.relativePosition(event);\n                        var viewerPositions = { left: relativePosition.x, top: relativePosition.y };\n                        var mousePositions = { left: currentPosition.x, top: currentPosition.y };\n                        var annotationSettings = { opacity: currentObject.opacity,\n                            fillColor: currentObject.fillColor,\n                            strokeColor: currentObject.strokeColor,\n                            thicknes: currentObject.thickness,\n                            author: currentObject.author,\n                            subject: currentObject.subject,\n                            modifiedDate: currentObject.modifiedDate };\n                        this.isMousedOver = true;\n                        var isFormField = this.checkSignatureFormField(currentObject.id);\n                        if (currentObject.formFieldAnnotationType) {\n                            this.isFormFieldMousedOver = true;\n                            var field = {\n                                id: currentObject.id, name: currentObject.name,\n                                value: currentObject.value, fontFamily: currentObject.fontFamily,\n                                fontSize: currentObject.fontSize, fontStyle: currentObject.fontStyle,\n                                color: currentObject.color,\n                                backgroundColor: currentObject.backgroundColor,\n                                borderColor: currentObject.borderColor,\n                                thickness: currentObject.thickness,\n                                alignment: currentObject.alignment,\n                                isReadonly: currentObject.isReadonly, visibility: currentObject.visibility,\n                                maxLength: currentObject.maxLength, isRequired: currentObject.isRequired,\n                                isPrint: currentObject.isPrint, rotation: currentObject.rotateAngle,\n                                tooltip: currentObject.tooltip, options: currentObject.options,\n                                isChecked: currentObject.isChecked, isSelected: currentObject.isSelected\n                            };\n                            this.pdfViewer.fireFormFieldMouseoverEvent('formFieldMouseover', field, currentObject.pageIndex, relativePosition.x, relativePosition.y, currentPosition.x, currentPosition.y);\n                        }\n                        else {\n                            if (!isFormField) {\n                                this.pdfViewer.\n                                    fireAnnotationMouseover(currentObject.annotName, currentObject.pageIndex, currentObject.shapeAnnotationType, currentObject.bounds, annotationSettings, mousePositions, viewerPositions);\n                            }\n                        }\n                    }\n                    else {\n                        eventTarget.style.cursor = 'grab';\n                        if (this.isMousedOver) {\n                            var pageIndex = void 0;\n                            if (this.pdfViewer.formDesignerModule) {\n                                pageIndex = this.pdfViewer.formDesignerModule.getEventPageNumber(event);\n                            }\n                            else {\n                                pageIndex = this.pdfViewer.annotation.getEventPageNumber(event);\n                            }\n                            if (this.isFormFieldMousedOver) {\n                                this.pdfViewer.fireFormFieldMouseLeaveEvent('formFieldMouseLeave', null, pageIndex);\n                            }\n                            else {\n                                this.pdfViewer.fireAnnotationMouseLeave(pageIndex);\n                            }\n                            this.isMousedOver = false;\n                            this.isFormFieldMousedOver = false;\n                        }\n                    }\n                }\n            }\n            else {\n                var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(event, this, this.pdfViewer);\n                if (obj && this.pdfViewer.selectedItems.annotations.length === 0 && event.type === 'mousemove') {\n                    var currentObject = obj;\n                    var annotationObject = this.pdfViewer.nameTable[currentObject.id];\n                    if (annotationObject.shapeAnnotationType !== 'HandWrittenSignature' && annotationObject.shapeAnnotationType !== 'Ink' && annotationObject.annotationSettings && annotationObject.annotationSettings.isLock !== undefined) {\n                        annotationObject.annotationSettings.isLock = JSON.parse(annotationObject.annotationSettings.isLock);\n                    }\n                    if (annotationObject.annotationSettings && annotationObject.annotationSettings.isLock) {\n                        eventTarget.style.cursor = 'default';\n                    }\n                    else {\n                        eventTarget.style.cursor = 'pointer';\n                    }\n                    var currentPosition = this.getMousePosition(event);\n                    var relativePosition = this.relativePosition(event);\n                    var viewerPositions = { left: relativePosition.x, top: relativePosition.y };\n                    var mousePositions = { left: currentPosition.x, top: currentPosition.y };\n                    var annotationSettings = { opacity: currentObject.opacity, fillColor: currentObject.fillColor,\n                        strokeColor: currentObject.strokeColor, thicknes: currentObject.thickness,\n                        author: currentObject.author, subject: currentObject.subject, modifiedDate: currentObject.modifiedDate };\n                    this.isMousedOver = true;\n                    var isFormField = this.checkSignatureFormField(currentObject.id);\n                    if (currentObject.formFieldAnnotationType) {\n                        this.isFormFieldMousedOver = true;\n                        var field = {\n                            id: currentObject.id, name: currentObject.name,\n                            value: currentObject.value, fontFamily: currentObject.fontFamily,\n                            fontSize: currentObject.fontSize, fontStyle: currentObject.fontStyle,\n                            color: currentObject.color,\n                            backgroundColor: currentObject.backgroundColor,\n                            borderColor: currentObject.borderColor,\n                            thickness: currentObject.thickness,\n                            alignment: currentObject.alignment,\n                            isReadonly: currentObject.isReadonly, visibility: currentObject.visibility,\n                            maxLength: currentObject.maxLength, isRequired: currentObject.isRequired,\n                            isPrint: currentObject.isPrint, rotation: currentObject.rotateAngle,\n                            tooltip: currentObject.tooltip, options: currentObject.options,\n                            isChecked: currentObject.isChecked, isSelected: currentObject.isSelected\n                        };\n                        this.fromTarget = currentObject;\n                        this.pdfViewer.fireFormFieldMouseoverEvent('formFieldMouseover', field, currentObject.pageIndex, relativePosition.x, relativePosition.y, currentPosition.x, currentPosition.y);\n                    }\n                    else {\n                        if (!isFormField) {\n                            this.pdfViewer.fireAnnotationMouseover(currentObject.annotName, currentObject.pageIndex, currentObject.shapeAnnotationType, currentObject.bounds, annotationSettings, mousePositions, viewerPositions);\n                        }\n                    }\n                }\n                else if (!this.pdfViewer.formDesignerModule && event.target.classList.contains('e-pdfviewer-formFields')) {\n                    var pageIndex = void 0;\n                    if (this.pdfViewer.annotation) {\n                        pageIndex = this.pdfViewer.annotation.getEventPageNumber(event);\n                    }\n                    var currentPosition = this.getMousePosition(event);\n                    var relativePosition = this.relativePosition(event);\n                    var dataJson = this.getItemFromSessionStorage('_formfields');\n                    var data = JSON.parse(dataJson);\n                    var field = void 0;\n                    for (var i = 0; i < data.length; i++) {\n                        if (data[parseInt(i.toString(), 10)].FieldName === event.target.name) {\n                            field = { name: data[parseInt(i.toString(), 10)].FieldName, id: data[parseInt(i.toString(), 10)].uniqueID };\n                        }\n                    }\n                    this.isMousedOver = true;\n                    this.isFormFieldMousedOver = true;\n                    this.pdfViewer.fireFormFieldMouseoverEvent('formFieldMouseover', field, pageIndex, relativePosition.x, relativePosition.y, currentPosition.x, currentPosition.y);\n                }\n                else {\n                    if (this.isMousedOver) {\n                        var pageIndex = void 0;\n                        if (this.pdfViewer.formDesignerModule) {\n                            pageIndex = this.pdfViewer.formDesignerModule.getEventPageNumber(event);\n                        }\n                        else if (this.pdfViewer.annotation) {\n                            pageIndex = this.pdfViewer.annotation.getEventPageNumber(event);\n                        }\n                        if (this.isFormFieldMousedOver) {\n                            if (this.fromTarget) {\n                                var field = {\n                                    name: this.fromTarget.name, id: this.fromTarget.id,\n                                    value: this.fromTarget.value, fontFamily: this.fromTarget.fontFamily,\n                                    fontSize: this.fromTarget.fontSize, fontStyle: this.fromTarget.fontStyle,\n                                    color: this.fromTarget.color,\n                                    backgroundColor: this.fromTarget.backgroundColor,\n                                    borderColor: this.fromTarget.borderColor,\n                                    thickness: this.fromTarget.thickness,\n                                    alignment: this.fromTarget.alignment,\n                                    isReadonly: this.fromTarget.isReadonly, visibility: this.fromTarget.visibility,\n                                    maxLength: this.fromTarget.maxLength,\n                                    isRequired: this.fromTarget.isRequired,\n                                    isPrint: this.fromTarget.isPrint, rotation: this.fromTarget.rotateAngle,\n                                    tooltip: this.fromTarget.tooltip, options: this.fromTarget.options,\n                                    isChecked: this.fromTarget.isChecked,\n                                    isSelected: this.fromTarget.isSelected\n                                };\n                                this.pdfViewer.fireFormFieldMouseLeaveEvent('formFieldMouseLeave', field, pageIndex);\n                            }\n                            else {\n                                this.pdfViewer.fireFormFieldMouseLeaveEvent('formFieldMouseLeave', null, pageIndex);\n                            }\n                        }\n                        else {\n                            this.pdfViewer.fireAnnotationMouseLeave(pageIndex);\n                        }\n                        this.isMousedOver = false;\n                        this.isFormFieldMousedOver = false;\n                        eventTarget.style.cursor = 'default';\n                    }\n                    if (obj && this.pdfViewer.selectedItems.annotations.length === 1 && event.type === 'mousemove') {\n                        eventTarget.style.cursor = 'pointer';\n                    }\n                    else {\n                        eventTarget.style.cursor = 'default';\n                    }\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.setResizerCursorType = function () {\n        var cursorType;\n        if (this.pdfViewer.selectedItems.annotations[0] &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.selectedItems.annotations[0].annotationSelectorSettings.resizerCursorType)) {\n            if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'FreeText') {\n                cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.freeTextSettings.annotationSelectorSettings) ?\n                    this.pdfViewer.freeTextSettings.annotationSelectorSettings.resizerCursorType : null;\n            }\n            else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Stamp') {\n                cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.stampSettings.annotationSelectorSettings) ?\n                    this.pdfViewer.stampSettings.annotationSelectorSettings.resizerCursorType : null;\n            }\n            else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'HandWrittenSignature' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureText' || this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'SignatureImage') {\n                cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.handWrittenSignatureSettings.annotationSelectorSettings) ?\n                    this.pdfViewer.handWrittenSignatureSettings.annotationSelectorSettings.resizerCursorType : null;\n            }\n            else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Ink') {\n                cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.inkAnnotationSettings.annotationSelectorSettings) ?\n                    this.pdfViewer.inkAnnotationSettings.annotationSelectorSettings.resizerCursorType : null;\n            }\n            else if (!this.pdfViewer.selectedItems.annotations[0].measureType) {\n                if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Line') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.lineSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.lineSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'LineWidthArrowHead') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.arrowSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.arrowSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Rectangle') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.rectangleSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.rectangleSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Ellipse') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.circleSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.circleSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].shapeAnnotationType === 'Polygon') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.polygonSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.polygonSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n            }\n            else if (this.pdfViewer.selectedItems.annotations[0].measureType) {\n                if (this.pdfViewer.selectedItems.annotations[0].subject === 'Distance calculation') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.distanceSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.distanceSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].subject === 'Perimeter calculation') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.perimeterSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.perimeterSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].subject === 'Area calculation') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.areaSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.areaSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].subject === 'Radius calculation') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.radiusSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.radiusSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n                else if (this.pdfViewer.selectedItems.annotations[0].subject === 'Volume calculation') {\n                    cursorType = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.volumeSettings.annotationSelectorSettings) ?\n                        this.pdfViewer.volumeSettings.annotationSelectorSettings.resizerCursorType : null;\n                }\n            }\n        }\n        else {\n            if (this.pdfViewer.selectedItems.annotations[0]) {\n                cursorType = this.pdfViewer.selectedItems.annotations[0].annotationSelectorSettings.resizerCursorType;\n            }\n        }\n        if (!cursorType) {\n            cursorType = this.pdfViewer.annotationSelectorSettings.resizerCursorType;\n        }\n        return cursorType;\n    };\n    /**\n     * @private\n     * @param {Actions | string} action - The actions.\n     * @returns {ToolBase} - Returns tools.\n     */\n    PdfViewerBase.prototype.getTool = function (action) {\n        switch (action) {\n            case 'Select':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.SelectTool(this.pdfViewer, this);\n            case 'Drag':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.MoveTool(this.pdfViewer, this);\n            case 'ResizeSouthEast':\n            case 'ResizeSouthWest':\n            case 'ResizeNorthEast':\n            case 'ResizeNorthWest':\n            case 'ResizeSouth':\n            case 'ResizeNorth':\n            case 'ResizeWest':\n            case 'ResizeEast':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ResizeTool(this.pdfViewer, this, action);\n            case 'ConnectorSourceEnd':\n            case 'ConnectorTargetEnd':\n            case 'Leader':\n            case 'ConnectorSegmentPoint':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ConnectTool(this.pdfViewer, this, action);\n            case 'DrawTool':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool(this.pdfViewer, this, this.pdfViewer.drawingObject);\n            case 'Polygon':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool(this.pdfViewer, this, 'Polygon');\n            case 'Distance':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool(this.pdfViewer, this, 'Leader1', undefined);\n            case 'Line':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool(this.pdfViewer, this, 'ConnectorSegmentPoint_1', this.pdfViewer.drawingObject);\n            case 'Perimeter':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool(this.pdfViewer, this, 'Perimeter');\n            case 'Rotate':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.RotateTool(this.pdfViewer, this);\n            case 'Stamp':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.StampTool(this.pdfViewer, this);\n            case 'Ink':\n                return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.InkDrawingTool(this.pdfViewer, this, this.pdfViewer.drawingObject);\n        }\n        if (action.indexOf('ConnectorSegmentPoint') > -1 || action.indexOf('Leader') > -1) {\n            return new _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.ConnectTool(this.pdfViewer, this, action);\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {MouseEvent | TouchEvent} evt - The events.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.diagramMouseUp = function (evt) {\n        var allowServerDataBind = this.pdfViewer.allowServerDataBinding;\n        this.pdfViewer.enableServerDataBinding(false);\n        var touches;\n        var isAnnotResized = (this.action.toLowerCase().includes('resize') || this.action.toLowerCase().includes('connectorsegmentpoint'));\n        var isAnnotationDrawn = (this.action === 'Drag' || isAnnotResized) || ((this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool || this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool || this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool) && (this.tool.dragging && this.tool.drawingObject));\n        if (this.tool) {\n            if (!this.inAction && evt.which !== 3) {\n                if (this.action === 'Drag') {\n                    this.action = 'Select';\n                    var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n                    var isMultipleSelect = true;\n                }\n            }\n            var isGroupAction = void 0;\n            if (!(this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool) && !(this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool) && !(this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool)) {\n                this.inAction = false;\n                this.isMouseDown = false;\n            }\n            this.currentPosition = this.getMousePosition(evt);\n            if (this.tool) {\n                this.eventArgs.position = this.currentPosition;\n                this.getMouseEventArgs(this.currentPosition, this.eventArgs, evt, this.eventArgs.source);\n                var ctrlKey = this.isMetaKey(evt);\n                var info = { ctrlKey: evt.ctrlKey, shiftKey: evt.shiftKey };\n                this.eventArgs.info = info;\n                this.eventArgs.clickCount = evt.detail;\n                if (evt.type === 'touchend') {\n                    this.eventArgs.isTouchMode = true;\n                }\n                else {\n                    this.eventArgs.isTouchMode = false;\n                }\n                this.tool.mouseUp(this.eventArgs);\n                this.isAnnotationMouseDown = false;\n                this.isFormFieldMouseDown = false;\n                if ((this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.NodeDrawingTool || this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.LineTool ||\n                    this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.PolygonDrawingTool) && !this.tool.dragging) {\n                    this.inAction = false;\n                    this.isMouseDown = false;\n                }\n                if (isAnnotationDrawn) {\n                    var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n                    if ((this.isShapeAnnotationModule() || this.isCalibrateAnnotationModule())) {\n                        this.pdfViewer.annotation.onShapesMouseup(obj, evt);\n                    }\n                }\n                this.isAnnotationDrawn = false;\n            }\n        }\n        var target = evt.target;\n        if (!touches && (evt.cancelable && !(this.isDeviceiOS && !this.pdfViewer.annotationModule)) && this.skipPreventDefault(target)) {\n            evt.preventDefault();\n        }\n        this.eventArgs = {};\n        this.pdfViewer.enableServerDataBinding(allowServerDataBind, true);\n        if (this.pdfViewer.contextMenuSettings.contextMenuAction === 'MouseUp' && this.pdfViewer.selectedItems && (this.pdfViewer.selectedItems.annotations && this.pdfViewer.selectedItems.annotations.length > 0 ||\n            this.pdfViewer.selectedItems.formFields && this.pdfViewer.selectedItems.formFields.length > 0)) {\n            this.contextMenuModule.open(this.mouseY, this.mouseX, this.viewerContainer);\n        }\n    };\n    /**\n     * @private\n     * @param {HTMLElement} target - The target.\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.skipPreventDefault = function (target) {\n        var isSkipped = false;\n        var isSkip = false;\n        if (this.pdfViewer.annotationModule && this.pdfViewer.annotationModule.freeTextAnnotationModule &&\n            this.pdfViewer.annotationModule.freeTextAnnotationModule.isInuptBoxInFocus) {\n            isSkip = true;\n        }\n        if (target.parentElement && target.parentElement.className !== 'foreign-object' && !target.classList.contains('e-pv-radio-btn') && !target.classList.contains('e-pv-radiobtn-span') && !target.classList.contains('e-pv-checkbox-div') && !target.classList.contains('e-pdfviewer-formFields')\n            && !target.classList.contains('e-pdfviewer-ListBox') && !target.classList.contains('e-pdfviewer-signatureformfields')\n            && !((target).className === 'free-text-input' && (target).tagName === 'TEXTAREA')\n            && !isSkip && !((target).className === 'e-pv-hyperlink') && target.parentElement.classList.length > 0 && !target.parentElement.classList.contains('e-editable-elements') && !this.isAddComment) {\n            isSkipped = true;\n        }\n        return isSkipped;\n    };\n    PdfViewerBase.prototype.isMetaKey = function (evt) {\n        return navigator.platform.match('Mac') ? evt.metaKey : evt.ctrlKey;\n    };\n    /**\n     * @private\n     * @param {MouseEvent | TouchEvent} evt - The events.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.diagramMouseDown = function (evt) {\n        var _this = this;\n        if (this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.MoveTool && !(this.tool instanceof _drawing_tools__WEBPACK_IMPORTED_MODULE_6__.StampTool) && this.tool['inAction']) {\n            this.diagramMouseUp(evt);\n            if (evt.which === 1) {\n                this.preventContextmenu = true;\n                setTimeout(function () {\n                    _this.preventContextmenu = false;\n                }, 200);\n            }\n        }\n        var allowServerDataBind = this.pdfViewer.allowServerDataBinding;\n        this.pdfViewer.enableServerDataBinding(false);\n        var touches = null;\n        touches = evt.touches;\n        this.isMouseDown = true;\n        this.isAnnotationAdded = false;\n        this.currentPosition = this.prevPosition = this.getMousePosition(evt);\n        this.eventArgs = {};\n        var isStamp = false;\n        if (this.pdfViewer.tool === 'Stamp') {\n            this.pdfViewer.tool = '';\n            isStamp = true;\n        }\n        var target;\n        if (this.pdfViewer.annotation) {\n            var currentActivePageID = this.pdfViewer.annotation.getEventPageNumber(evt);\n            this.activeElements.activePageID = currentActivePageID >= 0 ? currentActivePageID : this.pdfViewer.currentPageNumber - 1;\n        }\n        var obj = (0,_drawing_action__WEBPACK_IMPORTED_MODULE_8__.findActiveElement)(evt, this, this.pdfViewer);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj)) {\n            var eventTarget = evt.target;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eventTarget) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eventTarget.id)) {\n                var id = eventTarget.id.split('_')[0];\n                obj = this.pdfViewer.nameTable[\"\" + id];\n            }\n        }\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj)) && (obj.formFieldAnnotationType === 'SignatureField' || obj.formFieldAnnotationType === 'InitialField' || obj.annotName === 'SignatureField' || obj.annotName === 'InitialField')) {\n            this.isSignInitialClick = true;\n        }\n        else {\n            this.isSignInitialClick = false;\n        }\n        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !this.pdfViewer.enableDesktopMode) && (obj && !(obj instanceof _index__WEBPACK_IMPORTED_MODULE_2__.PdfFormFieldBase))) {\n            evt.preventDefault();\n        }\n        if (this.pdfViewer.annotation && this.pdfViewer.enableStampAnnotations) {\n            var stampModule = this.pdfViewer.annotationModule.stampAnnotationModule;\n            if (stampModule && stampModule.isNewStampAnnot) {\n                var stampObj = obj;\n                if (!stampObj && this.pdfViewer.selectedItems.annotations[0]) {\n                    stampObj = this.pdfViewer.selectedItems.annotations[0];\n                }\n                if (stampObj) {\n                    this.isViewerMouseDown = false;\n                    stampObj.opacity = this.pdfViewer.stampSettings.opacity;\n                    this.isNewStamp = true;\n                    var opacity = void 0;\n                    if (stampObj.shapeAnnotationType === 'Image') {\n                        opacity = this.pdfViewer.customStampSettings.opacity;\n                    }\n                    else {\n                        opacity = this.pdfViewer.stampSettings.opacity;\n                    }\n                    this.pdfViewer.nodePropertyChange(stampObj, { opacity: opacity });\n                    this.pdfViewer.annotation.stampAnnotationModule.isStampAddMode = false;\n                    if (stampObj.shapeAnnotationType === 'Image' && !this.isAlreadyAdded) {\n                        this.stampAdded = true;\n                        var stampName = stampObj.id;\n                        if (stampModule.currentStampAnnotation && stampModule.currentStampAnnotation.signatureName) {\n                            stampName = stampModule.currentStampAnnotation.signatureName;\n                        }\n                        var isSkip = false;\n                        for (var i = 0; i < this.customStampCollection.length; i++) {\n                            if (this.customStampCollection[parseInt(i.toString(), 10)].customStampName === stampName) {\n                                isSkip = true;\n                                break;\n                            }\n                        }\n                        if (isSkip) {\n                            stampName = stampObj.id;\n                        }\n                        stampName = stampModule.customStampName ? stampModule.customStampName :\n                            stampModule.currentStampAnnotation.signatureName;\n                        this.customStampCollection.push({ customStampName: stampName, customStampImageSource: stampObj.data });\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                            this.pdfViewer._dotnetInstance.invokeMethodAsync('UpdateCustomStampCollection', stampName, stampObj.data);\n                        }\n                    }\n                    if (this.pdfViewer.customStampSettings.enableCustomStamp && this.pdfViewer.customStampSettings.isAddToMenu) {\n                        this.stampAdded = true;\n                    }\n                    this.isAlreadyAdded = false;\n                    stampModule.updateDeleteItems(stampObj.pageIndex, stampObj, stampObj.opacity);\n                    stampModule.resetAnnotation();\n                    stampModule.isNewStampAnnot = false;\n                }\n            }\n        }\n        if (this.isNewSignatureAdded) {\n            this.signatureCount++;\n            this.currentSignatureAnnot = null;\n            var signObject = obj;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(signObject) && this.pdfViewer.selectedItems.annotations[0]) {\n                signObject = this.pdfViewer.selectedItems.annotations[0];\n            }\n            if (signObject) {\n                var signatureData = '';\n                this.signatureAdded = true;\n                this.signatureModule.storeSignatureData(signObject.pageIndex, signObject);\n                var bounds = { left: signObject.bounds.x, top: signObject.bounds.y, width: signObject.bounds.width,\n                    height: signObject.bounds.height };\n                if (this.signatureModule.signaturetype === 'Draw') {\n                    signatureData = this.signatureModule.saveImageString;\n                }\n                else {\n                    signatureData = signObject.data;\n                }\n                this.pdfViewer.fireSignatureAdd(signObject.pageIndex, signObject.signatureName, signObject.shapeAnnotationType, bounds, signObject.opacity, signObject.strokeColor, signObject.thickness, signatureData);\n            }\n            this.isNewSignatureAdded = false;\n        }\n        if (this.pdfViewer.annotationModule) {\n            var freeTextAnnotModule = this.pdfViewer.annotationModule.freeTextAnnotationModule;\n            var canvasPaddingLeft = 5;\n            var canvasPaddingWidth = 10;\n            if (freeTextAnnotModule.isNewFreeTextAnnot === true) {\n                var canvas = void 0;\n                if (evt.target && (evt.target.id.indexOf('_text') > -1 || evt.target.id.indexOf('_annotationCanvas') > -1 || evt.target.classList.contains('e-pv-hyperlink')) && this.pdfViewer.annotation) {\n                    var pageIndex = this.pdfViewer.annotation.getEventPageNumber(evt);\n                    var diagram = this.getAnnotationCanvas('_annotationCanvas_', pageIndex);\n                    if (diagram) {\n                        var canvas1 = diagram.getBoundingClientRect();\n                        var left = canvas1.x ? canvas1.x : canvas1.left;\n                        var top_5 = canvas1.y ? canvas1.y : canvas1.top;\n                        canvas = new _syncfusion_ej2_drawings__WEBPACK_IMPORTED_MODULE_5__.Rect(left + canvasPaddingLeft, top_5 + canvasPaddingLeft, canvas1.width - canvasPaddingWidth, canvas1.height - canvasPaddingWidth);\n                    }\n                }\n                if (touches) {\n                    this.mouseX = touches[0].clientX;\n                    this.mouseY = touches[0].clientY;\n                }\n                if (canvas && canvas.containsPoint({ x: this.mouseX, y: this.mouseY }) && freeTextAnnotModule.isNewAddedAnnot) {\n                    var pageIndex = this.pdfViewer.annotation.getEventPageNumber(evt);\n                    if (!this.pdfViewer.freeTextSettings.enableAutoFit) {\n                        var zoomFactor = this.getZoomFactor();\n                        var width = this.currentPosition.x + (freeTextAnnotModule.defautWidth * zoomFactor);\n                        var pageWidth = this.getPageWidth(pageIndex);\n                        if (width >= pageWidth) {\n                            this.currentPosition.x = pageWidth - (freeTextAnnotModule.defautWidth * zoomFactor);\n                            if (this.currentPosition.x <= 0) {\n                                this.currentPosition.x = canvasPaddingLeft;\n                            }\n                            freeTextAnnotModule.defautWidth = (freeTextAnnotModule.defautWidth * zoomFactor) >=\n                                pageWidth ? pageWidth - canvasPaddingWidth : freeTextAnnotModule.defautWidth;\n                        }\n                    }\n                    freeTextAnnotModule.addInuptElemet(this.currentPosition, null, pageIndex);\n                    if (this.pdfViewer.toolbar && this.pdfViewer.toolbar.annotationToolbarModule) {\n                        var annotModule = this.pdfViewer.toolbar.annotationToolbarModule;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                            annotModule.primaryToolbar.deSelectItem(annotModule.freeTextEditItem);\n                        }\n                    }\n                    evt.preventDefault();\n                    freeTextAnnotModule.isNewAddedAnnot = false;\n                }\n            }\n        }\n        var sourceElement = null;\n        if (obj) {\n            sourceElement = obj.wrapper.children[0];\n            if (sourceElement) {\n                target = obj;\n            }\n        }\n        if (!this.tool || (this.tool && !this.tool.drawingObject)) {\n            if (!isStamp) {\n                this.action = this.findToolToActivate(obj, this.currentPosition);\n                if (obj && obj.annotationSettings && obj.annotationSettings.isLock) {\n                    if (this.action === 'Select') {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Select', obj)) {\n                            this.action = '';\n                        }\n                    }\n                    if (this.action === 'Drag') {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Move', obj)) {\n                            this.action = 'Select';\n                        }\n                    }\n                    if (this.action === 'Rotate') {\n                        this.action = 'Select';\n                    }\n                    if (this.action === 'ResizeSouthEast' || this.action === 'ResizeNorthEast' || this.action === 'ResizeNorthWest' || this.action === 'ResizeSouthWest' || this.action === 'ResizeSouth' ||\n                        this.action === 'ResizeNorth' || this.action === 'ResizeWest' || this.action === 'ResizeEast' || this.action.includes('ConnectorSegmentPoint') || this.action.includes('Leader')) {\n                        if (!this.pdfViewer.annotationModule.checkAllowedInteractions('Resize', obj)) {\n                            this.action = 'Select';\n                        }\n                    }\n                }\n                this.tool = this.getTool(this.action);\n                if (!this.tool) {\n                    this.action = this.pdfViewer.tool || 'Select';\n                    this.tool = this.getTool(this.action);\n                }\n            }\n            else {\n                this.action = 'Select';\n                this.tool = this.getTool(this.action);\n            }\n        }\n        this.getMouseEventArgs(this.currentPosition, this.eventArgs, evt);\n        this.eventArgs.position = this.currentPosition;\n        if (this.tool) {\n            this.isAnnotationMouseDown = false;\n            this.isFormFieldMouseDown = false;\n            this.isAnnotationMouseMove = false;\n            this.isFormFieldMouseMove = false;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj) && obj.propName !== 'annotations') {\n                this.eventArgs.source = obj;\n            }\n            this.tool.mouseDown(this.eventArgs);\n            this.isAnnotationDrawn = true;\n            this.signatureAdded = true;\n        }\n        if (this.pdfViewer.annotation) {\n            this.pdfViewer.annotation.onAnnotationMouseDown();\n        }\n        if (this.pdfViewer.selectedItems && this.pdfViewer.selectedItems.formFields.length === 1) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbar) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.toolbar.formDesignerToolbarModule)) {\n                this.pdfViewer.toolbar.formDesignerToolbarModule.showHideDeleteIcon(true);\n            }\n        }\n        var signatureFieldAnnotation = this.pdfViewer.selectedItems.annotations.length === 1 ? this.pdfViewer.nameTable[this.pdfViewer.selectedItems.annotations[0].id.split('_')[0] + '_content'] : null;\n        if (!signatureFieldAnnotation) {\n            signatureFieldAnnotation = this.pdfViewer.selectedItems.annotations.length === 1 ?\n                this.pdfViewer.nameTable[this.pdfViewer.selectedItems.annotations[0].id] : null;\n        }\n        if (this.eventArgs && this.eventArgs.source && (this.eventArgs.source.formFieldAnnotationType ||\n            signatureFieldAnnotation) && !this.pdfViewer.designerMode) {\n            var currentObject = void 0;\n            if (signatureFieldAnnotation) {\n                currentObject = this.pdfViewer.nameTable[this.pdfViewer.selectedItems.annotations[0].id.split('_')[0]];\n            }\n            else {\n                currentObject = this.eventArgs.source;\n            }\n            if (!currentObject) {\n                currentObject = this.pdfViewer.formFieldCollections[this.pdfViewer.formFieldCollections.\n                    findIndex(function (el) { return el.id === signatureFieldAnnotation.id; })];\n            }\n            if (currentObject) {\n                var field = {\n                    name: currentObject.name, id: currentObject.id, fontFamily: currentObject.fontFamily,\n                    fontSize: currentObject.fontSize, fontStyle: currentObject.fontStyle,\n                    color: currentObject.color, value: currentObject.value,\n                    type: currentObject.formFieldAnnotationType ? currentObject.formFieldAnnotationType : currentObject.type,\n                    backgroundColor: currentObject.backgroundColor,\n                    alignment: currentObject.alignment, bounds: currentObject.bounds\n                };\n                var target_1 = document.getElementById(currentObject.id);\n                target_1 = target_1 ? target_1 : (document.getElementById(currentObject.id + '_content_html_element') ? document.getElementById(currentObject.id + '_content_html_element').children[0].children[0] : null);\n                if (target_1) {\n                    this.currentTarget = target_1;\n                    this.pdfViewer.fireFormFieldClickEvent('formFieldClicked', field, false, evt.button === 0);\n                }\n            }\n        }\n        this.initialEventArgs = { source: this.eventArgs.source, sourceWrapper: this.eventArgs.sourceWrapper };\n        this.initialEventArgs.position = this.currentPosition;\n        this.initialEventArgs.info = this.eventArgs.info;\n        this.pdfViewer.enableServerDataBinding(allowServerDataBind, true);\n    };\n    /**\n     * @param {AnnotationDataFormat} annotationDataFormat - It describes about the annotaiton data format\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.exportAnnotationsAsObject = function (annotationDataFormat) {\n        var _this = this;\n        if (this.pdfViewer.annotationModule) {\n            var isAnnotations = this.updateExportItem();\n            if (isAnnotations) {\n                return new Promise(function (resolve, reject) {\n                    _this.createRequestForExportAnnotations(true, annotationDataFormat).then(function (value) {\n                        resolve(value);\n                    });\n                });\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {string} type - The type.\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.getItemFromSessionStorage = function (type) {\n        if (this.isStorageExceed) {\n            return this.formFieldStorage[this.documentId + type];\n        }\n        else {\n            return PdfViewerBase.sessionStorageManager.getItem(this.documentId + type);\n        }\n    };\n    /**\n     * @param {HTMLElement} textDiv - It describes about the whether the text div element\n     * @param {number} left - It describes about the left value\n     * @param {number} top - It describes about the top value\n     * @param {number} fontHeight - It describes about the font height\n     * @param {number} width - It describes about the width\n     * @param {number} height - It describes about the height\n     * @param {boolean} isPrint - It describes about the isPrint is true or not\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.setStyleToTextDiv = function (textDiv, left, top, fontHeight, width, height, isPrint) {\n        var zoomvalue = this.getZoomFactor();\n        if (isPrint) {\n            zoomvalue = 1;\n            textDiv.style.position = 'absolute';\n        }\n        textDiv.style.left = left * zoomvalue + 'px';\n        textDiv.style.top = top * zoomvalue + 'px';\n        textDiv.style.height = height * zoomvalue + 'px';\n        textDiv.style.width = width * zoomvalue + 'px';\n        textDiv.style.margin = '0px';\n        if (fontHeight > 0) {\n            textDiv.style.fontSize = fontHeight * zoomvalue + 'px';\n        }\n    };\n    /**\n     * @param {any} number - It describes about the number\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.ConvertPointToPixel = function (number) {\n        return (number * (96 / 72));\n    };\n    /**\n     * @param {number} rotation - It describes about the number\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.getAngle = function (rotation) {\n        var angle = 0;\n        if (rotation) {\n            switch (rotation) {\n                case 0:\n                    angle = 0;\n                    break;\n                case 1:\n                    angle = 90;\n                    break;\n                case 2:\n                    angle = 180;\n                    break;\n                case 3:\n                    angle = 270;\n                    break;\n            }\n        }\n        return angle;\n    };\n    /**\n     * @param {any} formFieldsData - It describes about the form fields data\n     * @param {string} type - It describes about the type\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.setItemInSessionStorage = function (formFieldsData, type) {\n        var formFieldsSize = Math.round(JSON.stringify(formFieldsData).length / 1024);\n        var sessionSize = PdfViewerBase.sessionStorageManager.getWindowSessionStorageSize();\n        if (formFieldsSize > 4500) {\n            this.isStorageExceed = true;\n            if (this.pdfViewer.formFieldsModule) {\n                if (!(this.isFormStorageExceed)) {\n                    this.pdfViewer.formFieldsModule.clearFormFieldStorage();\n                    this.isFormStorageExceed = true;\n                }\n            }\n        }\n        if (this.isStorageExceed) {\n            this.formFieldStorage[this.documentId + type] = JSON.stringify(formFieldsData);\n        }\n        else if ((formFieldsSize + sessionSize) > 4500) {\n            this.isStorageExceed = true;\n            if (this.pdfViewer.formFieldsModule) {\n                this.pdfViewer.formFieldsModule.clearFormFieldStorage();\n            }\n            this.isFormStorageExceed = true;\n            if (this.pdfViewer.annotationModule) {\n                this.pdfViewer.annotationModule.clearAnnotationStorage();\n            }\n            this.formFieldStorage[this.documentId + type] = JSON.stringify(formFieldsData);\n        }\n        else {\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + type, JSON.stringify(formFieldsData));\n        }\n    };\n    /**\n     * @param {FormFieldDataFormat} formFieldDataFormat - It describes about the form field data format\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.exportFormFieldsAsObject = function (formFieldDataFormat) {\n        var _this = this;\n        if (this.pdfViewer.formFieldsModule) {\n            return new Promise(function (resolve, reject) {\n                _this.createRequestForExportFormfields(true, formFieldDataFormat).then(function (value) {\n                    resolve(value);\n                });\n            });\n        }\n    };\n    /**\n     * @param {any} importData - It describes about the imported data\n     * @param {AnnotationDataFormat} annotationDataFormat -It describes about the annotaiton data format\n     * @param {boolean} isXfdf - It describes about the whether the isXfdf is true or not\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.importAnnotations = function (importData, annotationDataFormat, isXfdf) {\n        if (this.pdfViewer.annotationModule) {\n            this.createRequestForImportAnnotations(importData, annotationDataFormat, isXfdf);\n        }\n    };\n    /**\n     * @private\n     * @param {AnnotationDataFormat} annotationDataFormat - The annotationDataFormat.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.exportAnnotations = function (annotationDataFormat) {\n        if (this.pdfViewer.annotationModule) {\n            var isAnnotations = this.updateExportItem();\n            if (isAnnotations) {\n                this.createRequestForExportAnnotations(false, annotationDataFormat);\n            }\n        }\n    };\n    /**\n     * @param {boolean} isObject - It describes about the whether the isObject is true or not\n     * @param {AnnotationDataFormat} annotationDataFormat - It describes about the annotation data format\n     * @param {boolean} isBase64String - It describes about the whether the isBase64String is true or not\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.createRequestForExportAnnotations = function (isObject, annotationDataFormat, isBase64String) {\n        var _this = this;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        var promise = new Promise(function (resolve, reject) {\n            var canExport = false;\n            var jsonObject = _this.constructJsonDownload();\n            jsonObject.annotationDataFormat = annotationDataFormat;\n            jsonObject['action'] = 'ExportAnnotations';\n            canExport = proxy.pdfViewer.fireExportStart(jsonObject);\n            if (canExport) {\n                if (proxy.jsonDocumentId) {\n                    jsonObject.document = proxy.jsonDocumentId;\n                }\n                var url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.exportAnnotations;\n                proxy.exportAnnotationRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(_this.pdfViewer);\n                proxy.exportAnnotationRequestHandler.url = url;\n                proxy.exportAnnotationRequestHandler.mode = true;\n                proxy.exportAnnotationRequestHandler.responseType = 'text';\n                if (!_this.clientSideRendering) {\n                    proxy.exportAnnotationRequestHandler.send(jsonObject);\n                }\n                else {\n                    var resultData = _this.pdfViewer.pdfRendererModule.exportAnnotation(jsonObject, isObject);\n                    if (isObject) {\n                        proxy.exportAnnotationFileDownload(resultData, proxy, annotationDataFormat, jsonObject, isObject, isBase64String).then(function (annotData) {\n                            resolve(annotData);\n                        });\n                    }\n                    else {\n                        proxy.exportAnnotationFileDownload(resultData, proxy, annotationDataFormat, jsonObject, isObject, isBase64String).then(function (annotData) {\n                            resolve(annotData);\n                        });\n                    }\n                }\n                proxy.exportAnnotationRequestHandler.onSuccess = function (result) {\n                    var data = result.data;\n                    var redirect = proxy.checkRedirection(data);\n                    if (!redirect) {\n                        if (data) {\n                            if (isObject) {\n                                proxy.exportAnnotationFileDownload(data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String).then(function (annotData) {\n                                    resolve(annotData);\n                                });\n                            }\n                            else {\n                                proxy.exportAnnotationFileDownload(data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String).then(function (annotData) {\n                                    resolve(annotData);\n                                });\n                            }\n                        }\n                        else {\n                            var fileName = void 0;\n                            if (proxy.pdfViewer.exportAnnotationFileName !== null) {\n                                fileName = proxy.pdfViewer.exportAnnotationFileName;\n                            }\n                            else {\n                                fileName = proxy.pdfViewer.fileName;\n                            }\n                            proxy.pdfViewer.fireExportSuccess('Exported data saved in server side successfully', fileName);\n                        }\n                    }\n                };\n                proxy.exportAnnotationRequestHandler.onFailure = function (result) {\n                    proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, result.statusText);\n                };\n                proxy.exportAnnotationRequestHandler.onError = function (result) {\n                    proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, result.statusText);\n                };\n            }\n        });\n        if (isObject || isBase64String) {\n            return promise;\n        }\n        else {\n            return true;\n        }\n    };\n    PdfViewerBase.prototype.handleServerSideExport = function (data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            if (data) {\n                if (typeof data === 'object') {\n                    data = JSON.parse(data);\n                }\n                if (data) {\n                    var isCancel = proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.\n                        exportAnnotations, data);\n                    if (isObject || (isBase64String && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)())) {\n                        if (data.split('base64,')[1]) {\n                            var exportObject = data;\n                            var annotationJson = atob(data.split(',')[1]);\n                            if (isObject) {\n                                if (jsonObject.annotationDataFormat === 'Json') {\n                                    annotationJson = proxy.getSanitizedString(annotationJson);\n                                    exportObject = JSON.parse(annotationJson);\n                                }\n                                else {\n                                    exportObject = annotationJson;\n                                }\n                            }\n                            if (proxy.pdfViewer.exportAnnotationFileName !== null) {\n                                proxy.pdfViewer.fireExportSuccess(exportObject, proxy.pdfViewer.exportAnnotationFileName);\n                            }\n                            else {\n                                proxy.pdfViewer.fireExportSuccess(exportObject, proxy.pdfViewer.fileName);\n                            }\n                            proxy.updateDocumentAnnotationCollections();\n                            if (isBase64String) {\n                                resolve(data);\n                            }\n                            else {\n                                resolve(annotationJson);\n                            }\n                        }\n                        else {\n                            proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                        }\n                    }\n                    else {\n                        if (annotationDataFormat === 'Json') {\n                            if (data.split('base64,')[1]) {\n                                if (!isCancel) {\n                                    var blobUrl = proxy.createBlobUrl(data.split('base64,')[1], 'application/json');\n                                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                                        if (proxy.pdfViewer.exportAnnotationFileName !== null) {\n                                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.exportAnnotationFileName.split('.')[0] + '.json');\n                                        }\n                                        else {\n                                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.json');\n                                        }\n                                    }\n                                    else {\n                                        proxy.downloadExportFormat(blobUrl, annotationDataFormat);\n                                    }\n                                    proxy.updateDocumentAnnotationCollections();\n                                }\n                                else {\n                                    return data;\n                                }\n                            }\n                            else {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    var promise = _this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_ExportFailed');\n                                    promise.then(function (value) {\n                                        proxy.openImportExportNotificationPopup(value);\n                                    });\n                                }\n                                else {\n                                    proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                                }\n                                proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                            }\n                        }\n                        else {\n                            if (data.split('base64,')[1]) {\n                                if (!isCancel) {\n                                    var blobUrl = proxy.createBlobUrl(data.split('base64,')[1], 'application/vnd.adobe.xfdf');\n                                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                                        window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.xfdf');\n                                    }\n                                    else {\n                                        proxy.downloadExportFormat(blobUrl, annotationDataFormat);\n                                    }\n                                    proxy.updateDocumentAnnotationCollections();\n                                }\n                                else {\n                                    return data;\n                                }\n                            }\n                            else {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    var promise = _this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_ExportFailed');\n                                    promise.then(function (value) {\n                                        proxy.openImportExportNotificationPopup(value);\n                                    });\n                                }\n                                else {\n                                    proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                                }\n                                proxy.pdfViewer.fireExportFailed(jsonObject, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                            }\n                        }\n                    }\n                }\n                if (typeof data !== 'string') {\n                    try {\n                        if (typeof data === 'string') {\n                            proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.exportAnnotations);\n                            data = null;\n                        }\n                    }\n                    catch (error) {\n                        proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                        proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.exportAnnotations);\n                        data = null;\n                    }\n                }\n            }\n            return '';\n        });\n    };\n    PdfViewerBase.prototype.handleClientSideExport = function (data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            if (data) {\n                if (data) {\n                    var isCancel = proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.\n                        exportAnnotations, data);\n                    if (isObject || (isBase64String && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)())) {\n                        if (data && (typeof data !== 'string')) {\n                            var exportObject = data;\n                            var decoder = new TextDecoder('utf-8');\n                            var annotationJson = decoder.decode(data);\n                            if (isObject) {\n                                if (jsonObject.annotationDataFormat === 'Json') {\n                                    annotationJson = proxy.getSanitizedString(annotationJson);\n                                    exportObject = JSON.parse(annotationJson);\n                                }\n                                else {\n                                    exportObject = annotationJson;\n                                }\n                            }\n                            if (proxy.pdfViewer.exportAnnotationFileName !== null) {\n                                proxy.pdfViewer.fireExportSuccess(exportObject, proxy.pdfViewer.exportAnnotationFileName);\n                            }\n                            else {\n                                proxy.pdfViewer.fireExportSuccess(exportObject, proxy.pdfViewer.fileName);\n                            }\n                            proxy.updateDocumentAnnotationCollections();\n                            if (isBase64String) {\n                                resolve(data);\n                            }\n                            else {\n                                resolve(annotationJson);\n                            }\n                        }\n                        else {\n                            proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                        }\n                    }\n                    else {\n                        if (annotationDataFormat === 'Json') {\n                            if (data && (typeof data !== 'string')) {\n                                if (!isCancel) {\n                                    var blobUrl = new Blob([data], { type: 'application/json' });\n                                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                                        if (proxy.pdfViewer.exportAnnotationFileName !== null) {\n                                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.exportAnnotationFileName.split('.')[0] + '.json');\n                                        }\n                                        else {\n                                            window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.json');\n                                        }\n                                    }\n                                    else {\n                                        proxy.downloadExportFormat(blobUrl, annotationDataFormat);\n                                    }\n                                    proxy.updateDocumentAnnotationCollections();\n                                }\n                                else {\n                                    return data;\n                                }\n                            }\n                            else {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    var promise = _this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_ExportFailed');\n                                    promise.then(function (value) {\n                                        proxy.openImportExportNotificationPopup(value);\n                                    });\n                                }\n                                else {\n                                    proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                                }\n                                proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                            }\n                        }\n                        else {\n                            if (data && (typeof data !== 'string')) {\n                                if (!isCancel) {\n                                    var blobUrl = new Blob([data], { type: 'application/vnd.adobe.xfdf' });\n                                    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge') {\n                                        window.navigator.msSaveOrOpenBlob(blobUrl, proxy.pdfViewer.fileName.split('.')[0] + '.xfdf');\n                                    }\n                                    else {\n                                        proxy.downloadExportFormat(blobUrl, annotationDataFormat);\n                                    }\n                                    proxy.updateDocumentAnnotationCollections();\n                                }\n                                else {\n                                    return data;\n                                }\n                            }\n                            else {\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    var promise = _this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_ExportFailed');\n                                    promise.then(function (value) {\n                                        proxy.openImportExportNotificationPopup(value);\n                                    });\n                                }\n                                else {\n                                    proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                                }\n                                proxy.pdfViewer.fireExportFailed(jsonObject, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                try {\n                    if (typeof data === 'string') {\n                        proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.exportAnnotations);\n                        data = null;\n                    }\n                }\n                catch (error) {\n                    proxy.pdfViewer.fireExportFailed(jsonObject.pdfAnnotation, proxy.pdfViewer.localeObj.getConstant('Export Failed'));\n                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.exportAnnotations);\n                    data = null;\n                }\n            }\n            return '';\n        });\n    };\n    PdfViewerBase.prototype.exportAnnotationFileDownload = function (data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String) {\n        if (!this.clientSideRendering) {\n            return this.handleServerSideExport(data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String);\n        }\n        else {\n            return this.handleClientSideExport(data, proxy, annotationDataFormat, jsonObject, isObject, isBase64String);\n        }\n    };\n    PdfViewerBase.prototype.getDataOnSuccess = function (resultData) {\n        var _this = this;\n        // eslint-disable-next-line\n        return new Promise(function (resolve) {\n            var proxy = null;\n            // eslint-disable-next-line\n            proxy = _this;\n            proxy.pdfViewer.fireExportSuccess(resultData, proxy.pdfViewer.fileName);\n            proxy.updateDocumentAnnotationCollections();\n            resolve(resultData);\n        });\n    };\n    /**\n     * @param {any} newData - It describes about the new data\n     * @param {any} annotationType - It describes about the annotation type\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateModifiedDateToLocalDate = function (newData, annotationType) {\n        if (newData[\"\" + annotationType] && newData[\"\" + annotationType].length > 0) {\n            var data = newData[\"\" + annotationType];\n            if (data) {\n                for (var j = 0; j < data.length; j++) {\n                    data[parseInt(j.toString(), 10)].ModifiedDate =\n                        this.convertUTCDateTimeToLocalDateTime(data[parseInt(j.toString(), 10)].ModifiedDate);\n                    if (data[parseInt(j.toString(), 10)].Comments) {\n                        for (var i = 0; i < data[parseInt(j.toString(), 10)].Comments.length; i++) {\n                            data[parseInt(j.toString(), 10)].Comments[parseInt(i.toString(), 10)].ModifiedDate =\n                                this.convertUTCDateTimeToLocalDateTime(data[parseInt(j.toString(), 10)].\n                                    Comments[parseInt(i.toString(), 10)].ModifiedDate);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} date - It describes about the date\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.convertUTCDateTimeToLocalDateTime = function (date) {\n        var dateTime;\n        // We have globalized the date and time based on the given locale.\n        this.globalize = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.pdfViewer.locale);\n        if (date !== null && date !== undefined && date !== '') {\n            if (!this.clientSideRendering) {\n                dateTime = new Date(Date.parse(date + ' ' + 'UTC'));\n            }\n            else {\n                dateTime = new Date(date);\n            }\n        }\n        else {\n            var now = new Date();\n            var nowUtc = Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());\n            dateTime = new Date(nowUtc);\n        }\n        var dateTimeValue = this.globalize.formatDate(dateTime, { format: 'M/d/yyyy h:mm:ss a', type: 'dateTime' });\n        return dateTimeValue;\n    };\n    PdfViewerBase.prototype.createRequestForImportAnnotations = function (importData, annotationDataFormat, isXfdf) {\n        var jsonObject;\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        if (!isXfdf && proxy.isPDFViewerJson) {\n            this.isJsonImported = true;\n        }\n        else {\n            this.isJsonImported = false;\n        }\n        if (typeof importData === 'object' && !(importData instanceof Uint8Array)) {\n            if (importData && importData.pdfAnnotation) {\n                var newArray = Object.keys(importData.pdfAnnotation);\n                for (var i = 0; i < newArray.length; i++) {\n                    var newData = importData.pdfAnnotation[newArray[parseInt(i.toString(), 10)]];\n                    this.updateModifiedDateToLocalDate(newData, 'freeTextAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'measureShapeAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'shapeAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'signatureAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'signatureInkAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'stampAnnotations');\n                    this.updateModifiedDateToLocalDate(newData, 'stickyNotesAnnotation');\n                    this.updateModifiedDateToLocalDate(newData, 'textMarkupAnnotation');\n                }\n            }\n            proxy.reRenderAnnotations(importData.pdfAnnotation);\n            proxy.isImportedAnnotation = true;\n            proxy.updateDocumentEditedProperty(true);\n            if (!this.isAddAnnotation) {\n                proxy.pdfViewer.fireImportSuccess(importData.pdfAnnotation);\n            }\n        }\n        else {\n            proxy.pdfViewer.fireImportStart(importData);\n            if (annotationDataFormat === 'Json') {\n                if (proxy.isPDFViewerJson) {\n                    jsonObject = { fileName: importData, action: 'ImportAnnotations', elementId: proxy.pdfViewer.element.id, hashId: proxy.hashId, uniqueId: proxy.documentId, annotationDataFormat: annotationDataFormat };\n                }\n                else {\n                    jsonObject = { importedData: importData, action: 'ImportAnnotations', elementId: proxy.pdfViewer.element.id, hashId: proxy.hashId, uniqueId: proxy.documentId, annotationDataFormat: annotationDataFormat };\n                }\n            }\n            else {\n                jsonObject = { importedData: importData, action: 'ImportAnnotations', elementId: proxy.pdfViewer.element.id, hashId: proxy.hashId, uniqueId: proxy.documentId, annotationDataFormat: annotationDataFormat };\n            }\n            jsonObject = Object.assign(jsonObject, this.constructJsonDownload());\n            jsonObject['action'] = 'ImportAnnotations';\n            if (proxy.jsonDocumentId) {\n                if (jsonObject.documentId) {\n                    delete jsonObject['documentId'];\n                }\n                jsonObject.document = proxy.jsonDocumentId;\n            }\n            var url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.importAnnotations;\n            proxy.importAnnotationRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_2__.AjaxHandler(proxy.pdfViewer);\n            proxy.importAnnotationRequestHandler.url = url;\n            proxy.importAnnotationRequestHandler.mode = true;\n            proxy.importAnnotationRequestHandler.responseType = 'text';\n            if (!this.clientSideRendering) {\n                proxy.importAnnotationRequestHandler.send(jsonObject);\n            }\n            else {\n                var resultData = this.pdfViewer.pdfRendererModule.importAnnotations(jsonObject);\n                if (resultData) {\n                    this.addAnnotationOnImport(resultData, importData);\n                }\n            }\n            proxy.importAnnotationRequestHandler.onSuccess = function (result) {\n                var data = result.data;\n                var redirect = proxy.checkRedirection(data);\n                if (!redirect) {\n                    if (data) {\n                        if (typeof data !== 'object') {\n                            try {\n                                data = JSON.parse(data);\n                                if (typeof data !== 'object') {\n                                    proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.importAnnotations);\n                                    data = null;\n                                }\n                            }\n                            catch (error) {\n                                proxy.pdfViewer.fireImportFailed(importData, proxy.pdfViewer.localeObj.getConstant('File not found'));\n                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n                                    var promise = this.pdfViewer._dotnetInstance.invokeMethodAsync('GetLocaleText', 'PdfViewer_FileNotFound');\n                                    promise.then(function (value) {\n                                        proxy.openImportExportNotificationPopup(value);\n                                    });\n                                }\n                                else {\n                                    proxy.openImportExportNotificationPopup(proxy.pdfViewer.localeObj.getConstant('File not found'));\n                                }\n                                proxy.onControlError(500, data, proxy.pdfViewer.serverActionSettings.importAnnotations);\n                                data = null;\n                            }\n                        }\n                        if (data) {\n                            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.importAnnotations, data);\n                            if (data.pdfAnnotation) {\n                                var newData = void 0;\n                                var newArray = Object.keys(data.pdfAnnotation);\n                                for (var i = 0; i < Object.keys(data.pdfAnnotation).length; i++) {\n                                    newData = data.pdfAnnotation[newArray[parseInt(i.toString(), 10)]];\n                                    proxy.updateModifiedDateToLocalDate(newData, 'annotationOrder');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'freeTextAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'measureShapeAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'shapeAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'signatureAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'signatureInkAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'stampAnnotations');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'stickyNotesAnnotation');\n                                    proxy.updateModifiedDateToLocalDate(newData, 'textMarkupAnnotation');\n                                }\n                                proxy.reRenderAnnotations(data.pdfAnnotation);\n                                proxy.isImportedAnnotation = true;\n                                proxy.updateDocumentEditedProperty(true);\n                                proxy.pdfViewer.fireImportSuccess(data.pdfAnnotation);\n                            }\n                        }\n                    }\n                }\n            };\n            proxy.importAnnotationRequestHandler.onFailure = function (result) {\n                proxy.pdfViewer.fireImportFailed(importData, result.statusText);\n            };\n            proxy.importAnnotationRequestHandler.onError = function (result) {\n                proxy.pdfViewer.fireImportFailed(importData, result.statusText);\n            };\n        }\n    };\n    PdfViewerBase.prototype.addAnnotationOnImport = function (resultData, importData) {\n        var proxy = null;\n        // eslint-disable-next-line\n        proxy = this;\n        if (resultData) {\n            proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.importAnnotations, resultData);\n            if (resultData.pdfAnnotation) {\n                var newData = void 0;\n                var newArray = Object.keys(resultData.pdfAnnotation);\n                for (var i = 0; i < Object.keys(resultData.pdfAnnotation).length; i++) {\n                    newData = resultData.pdfAnnotation[newArray[parseInt(i.toString(), 10)]];\n                    proxy.updateModifiedDateToLocalDate(newData, 'annotationOrder');\n                    proxy.updateModifiedDateToLocalDate(newData, 'freeTextAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'measureShapeAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'shapeAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'signatureAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'signatureInkAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'stampAnnotations');\n                    proxy.updateModifiedDateToLocalDate(newData, 'stickyNotesAnnotation');\n                    proxy.updateModifiedDateToLocalDate(newData, 'textMarkupAnnotation');\n                }\n                proxy.reRenderAnnotations(resultData.pdfAnnotation);\n                proxy.isImportedAnnotation = true;\n                proxy.updateDocumentEditedProperty(true);\n                proxy.pdfViewer.fireImportSuccess(resultData.pdfAnnotation);\n            }\n            else {\n                proxy.pdfViewer.fireImportFailed(importData, proxy.pdfViewer.localeObj.getConstant('File not found'));\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {string} errorDetails - The error details.\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.openImportExportNotificationPopup = function (errorDetails) {\n        if (this.pdfViewer.showNotificationDialog) {\n            this.createNotificationPopup(errorDetails);\n        }\n    };\n    PdfViewerBase.prototype.reRenderAnnotations = function (annotation) {\n        if (annotation) {\n            this.isImportAction = true;\n            var count = 0;\n            if (this.isImportedAnnotation) {\n                this.importedAnnotation = this.combineImportedData(this.importedAnnotation, annotation);\n            }\n            else {\n                if (this.pageCount > 0) {\n                    this.importedAnnotation = annotation;\n                }\n            }\n            if (!this.isImportedAnnotation) {\n                count = 0;\n            }\n            for (var i = 0; i < this.pageCount; i++) {\n                if (annotation[parseInt(i.toString(), 10)]) {\n                    var importPageCollections = [];\n                    var textMarkupObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_textMarkup');\n                    var shapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape');\n                    var measureShapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape_measure');\n                    var stampObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_stamp');\n                    var stickyObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sticky');\n                    var freeTextObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_freetext');\n                    var signatureObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sign');\n                    var inkObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_ink');\n                    if (this.isStorageExceed) {\n                        textMarkupObject = this.annotationStorage[this.documentId + '_annotations_textMarkup'];\n                        shapeObject = this.annotationStorage[this.documentId + '_annotations_shape'];\n                        measureShapeObject = this.annotationStorage[this.documentId + '_annotations_shape_measure'];\n                        stampObject = this.annotationStorage[this.documentId + '_annotations_stamp'];\n                        stickyObject = this.annotationStorage[this.documentId + '_annotations_sticky'];\n                        freeTextObject = this.annotationStorage[this.documentId + '_annotations_freetext'];\n                        inkObject = this.annotationStorage[this.documentId + '_annotations_ink'];\n                    }\n                    this.drawPageAnnotations(annotation[parseInt(i.toString(), 10)], i);\n                    if (this.isImportedAnnotation) {\n                        var isAdded = false;\n                        for (var j = 0; j < this.annotationPageList.length; j++) {\n                            if (this.annotationPageList[parseInt(j.toString(), 10)] === i) {\n                                isAdded = true;\n                            }\n                        }\n                        if (isAdded) {\n                            this.annotationPageList[parseInt(count.toString(), 10)] = i;\n                            count = count + 1;\n                        }\n                    }\n                    else {\n                        this.annotationPageList[parseInt(count.toString(), 10)] = i;\n                        count = count + 1;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].textMarkupAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].textMarkupAnnotation.length !== 0) {\n                        if (textMarkupObject) {\n                            var annotObject = JSON.parse(textMarkupObject);\n                            annotation[parseInt(i.toString(), 10)].textMarkupAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].textMarkupAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].textMarkupAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].textMarkupAnnotation, i);\n                        importPageCollections.textMarkupAnnotation = annotation[parseInt(i.toString(), 10)].textMarkupAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].shapeAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].shapeAnnotation.length !== 0) {\n                        if (shapeObject) {\n                            var annotObject = JSON.parse(shapeObject);\n                            annotation[parseInt(i.toString(), 10)].shapeAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].shapeAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].shapeAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].shapeAnnotation, i);\n                        importPageCollections.shapeAnnotation = annotation[parseInt(i.toString(), 10)].shapeAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].measureShapeAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].measureShapeAnnotation.length !== 0) {\n                        if (measureShapeObject) {\n                            var annotObject = JSON.parse(measureShapeObject);\n                            annotation[parseInt(i.toString(), 10)].measureShapeAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].measureShapeAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].measureShapeAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].measureShapeAnnotation, i);\n                        importPageCollections.measureShapeAnnotation = annotation[parseInt(i.toString(), 10)].measureShapeAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].stampAnnotations &&\n                        annotation[parseInt(i.toString(), 10)].stampAnnotations.length !== 0) {\n                        if (stampObject) {\n                            var annotObject = JSON.parse(stampObject);\n                            annotation[parseInt(i.toString(), 10)].stampAnnotations =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].stampAnnotations, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].stampAnnotations =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].stampAnnotations, i);\n                        importPageCollections.stampAnnotations = annotation[parseInt(i.toString(), 10)].stampAnnotations;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation.length !== 0) {\n                        if (stickyObject) {\n                            var annotObject = JSON.parse(stickyObject);\n                            annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation, i);\n                        importPageCollections.stickyNotesAnnotation = annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].freeTextAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].freeTextAnnotation.length !== 0) {\n                        if (freeTextObject) {\n                            var annotObject = JSON.parse(freeTextObject);\n                            annotation[parseInt(i.toString(), 10)].freeTextAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].freeTextAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].freeTextAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].freeTextAnnotation, i);\n                        importPageCollections.freeTextAnnotation = annotation[parseInt(i.toString(), 10)].freeTextAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].signatureAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].signatureAnnotation.length !== 0) {\n                        if (signatureObject) {\n                            var annotObject = JSON.parse(signatureObject);\n                            annotation[parseInt(i.toString(), 10)].signatureAnnotation =\n                                this.checkSignatureCollections(annotObject, annotation[parseInt(i.toString(), 10)].signatureAnnotation, i);\n                        }\n                        importPageCollections.signatureAnnotation = annotation[parseInt(i.toString(), 10)].signatureAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].signatureInkAnnotation &&\n                        annotation[parseInt(i.toString(), 10)].signatureInkAnnotation.length !== 0) {\n                        if (inkObject) {\n                            var annotObject = JSON.parse(inkObject);\n                            annotation[parseInt(i.toString(), 10)].signatureInkAnnotation =\n                                this.checkAnnotationCollections(annotObject, annotation[parseInt(i.toString(), 10)].signatureInkAnnotation, i);\n                        }\n                        annotation[parseInt(i.toString(), 10)].signatureInkAnnotation =\n                            this.checkAnnotationCommentsCollections(annotation[parseInt(i.toString(), 10)].signatureInkAnnotation, i);\n                        importPageCollections.signatureInkAnnotation = annotation[parseInt(i.toString(), 10)].signatureInkAnnotation;\n                    }\n                    if (annotation[parseInt(i.toString(), 10)].annotationOrder) {\n                        var annotationOrderCollection = annotation[parseInt(i.toString(), 10)].annotationOrder;\n                        var annotationData = [];\n                        for (var index = 0; index < annotationOrderCollection.length; index++) {\n                            var annotationName = annotationOrderCollection[parseInt(index.toString(), 10)].AnnotType ?\n                                annotationOrderCollection[parseInt(index.toString(), 10)].AnnotType :\n                                annotationOrderCollection[parseInt(index.toString(), 10)].AnnotationType;\n                            annotationData.push(annotationOrderCollection[parseInt(index.toString(), 10)]);\n                            var annotObject = void 0;\n                            switch (annotationName) {\n                                case 'textMarkup':\n                                    if (annotation[parseInt(i.toString(), 10)].textMarkupAnnotation.length !== 0 ||\n                                        annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotationModule.textMarkupAnnotationModule)) {\n                                                this.pdfViewer.annotationModule.\n                                                    stickyNotesAnnotationModule.\n                                                    updateCollections(this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                                                    updateTextMarkupAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                            }\n                                        }\n                                    }\n                                    break;\n                                case 'shape':\n                                    if (annotation[parseInt(i.toString(), 10)].shapeAnnotation.length !== 0 || annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.annotationModule.\n                                                stickyNotesAnnotationModule.updateCollections(this.pdfViewer.annotationModule.\n                                                shapeAnnotationModule.updateShapeAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                                case 'shape_measure':\n                                    if (annotation[parseInt(i.toString(), 10)].measureShapeAnnotation.length !== 0 ||\n                                        annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.annotationModule.\n                                                stickyNotesAnnotationModule.updateCollections(this.pdfViewer.annotationModule.\n                                                measureAnnotationModule.updateMeasureAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                                case 'stamp':\n                                    if (annotation[parseInt(i.toString(), 10)].stampAnnotations.length !== 0 || annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.annotationModule.\n                                                stickyNotesAnnotationModule.updateCollections(this.pdfViewer.annotationModule.\n                                                stampAnnotationModule.updateStampAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                                case 'Text Box':\n                                case 'freeText':\n                                    if (annotation[parseInt(i.toString(), 10)].freeTextAnnotation.length !== 0 || annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.annotationModule.\n                                                stickyNotesAnnotationModule.updateCollections(this.pdfViewer.annotationModule.\n                                                freeTextAnnotationModule.updateFreeTextAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                                case 'sticky':\n                                    if (annotation[parseInt(i.toString(), 10)].stickyNotesAnnotation.length !== 0 ||\n                                        annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.\n                                                annotationModule.stickyNotesAnnotationModule.\n                                                updateCollections(this.pdfViewer.annotationModule.stickyNotesAnnotationModule.\n                                                updateStickyNotesAnnotationCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                                case 'signature':\n                                    if (annotation[parseInt(i.toString(), 10)].signatureAnnotation.length !== 0 ||\n                                        annotationData.length !== 0) {\n                                        for (var j = 0; j < annotationData.length; j++) {\n                                            this.pdfViewer.\n                                                annotationModule.stickyNotesAnnotationModule.\n                                                updateCollections(this.signatureModule.\n                                                updateSignatureCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i), true);\n                                        }\n                                    }\n                                    break;\n                                case 'Ink':\n                                case 'ink':\n                                    if (annotation[parseInt(i.toString(), 10)].signatureInkAnnotation.length !== 0 ||\n                                        annotationData.length !== 0) {\n                                        this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderAnnotationComments(annotationData, i);\n                                        for (var j = 0; j < annotation[parseInt(i.toString(), 10)].\n                                            annotationOrder[parseInt(index.toString(), 10)].length; j++) {\n                                            this.pdfViewer.\n                                                annotationModule.stickyNotesAnnotationModule.\n                                                updateCollections(this.pdfViewer.annotationModule.inkAnnotationModule.\n                                                updateInkCollections(annotationOrderCollection[parseInt(index.toString(), 10)], i));\n                                        }\n                                    }\n                                    break;\n                            }\n                            annotationData = [];\n                        }\n                    }\n                    this.updateImportedAnnotationsInDocumentCollections(importPageCollections, i);\n                }\n            }\n            if (this.pageCount > 0) {\n                if (this.pdfViewer.annotationModule.stickyNotesAnnotationModule &&\n                    !this.pdfViewer.annotationModule.stickyNotesAnnotationModule.isAnnotationRendered) {\n                    var annotationCollection = this.createAnnotationsCollection();\n                    if (annotationCollection) {\n                        this.documentAnnotationCollections =\n                            this.pdfViewer.annotationModule.stickyNotesAnnotationModule.\n                                updateAnnotationsInDocumentCollections(this.importedAnnotation, annotationCollection);\n                    }\n                }\n            }\n        }\n        this.isImportAction = false;\n    };\n    /**\n     * @param {any} importedAnnotations - It describes about the imported annotations\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateImportedAnnotationsInDocumentCollections = function (importedAnnotations, pageNumber) {\n        if (this.documentAnnotationCollections) {\n            var documentAnnotationCollection = this.documentAnnotationCollections;\n            var pageCollections = documentAnnotationCollection[parseInt(pageNumber.toString(), 10)];\n            if (pageCollections) {\n                if (importedAnnotations.textMarkupAnnotation && importedAnnotations.textMarkupAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.textMarkupAnnotation.length; i++) {\n                        pageCollections.textMarkupAnnotation.push(importedAnnotations.textMarkupAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.shapeAnnotation && importedAnnotations.shapeAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.shapeAnnotation.length; i++) {\n                        pageCollections.shapeAnnotation.push(importedAnnotations.shapeAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.measureShapeAnnotation && importedAnnotations.measureShapeAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.measureShapeAnnotation.length; i++) {\n                        pageCollections.measureShapeAnnotation.push(importedAnnotations.measureShapeAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.stampAnnotations && importedAnnotations.stampAnnotations.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.stampAnnotations.length; i++) {\n                        pageCollections.stampAnnotations.push(importedAnnotations.stampAnnotations[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.stickyNotesAnnotation && importedAnnotations.stickyNotesAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.stickyNotesAnnotation.length; i++) {\n                        pageCollections.stickyNotesAnnotation.push(importedAnnotations.stickyNotesAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.freeTextAnnotation && importedAnnotations.freeTextAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.freeTextAnnotation.length; i++) {\n                        pageCollections.freeTextAnnotation.push(importedAnnotations.freeTextAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.signatureAnnotation && importedAnnotations.signatureAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.signatureAnnotation.length; i++) {\n                        pageCollections.signatureAnnotation.push(importedAnnotations.signatureAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (importedAnnotations.signatureInkAnnotation && importedAnnotations.signatureInkAnnotation.length !== 0) {\n                    for (var i = 0; i < importedAnnotations.signatureInkAnnotation.length; i++) {\n                        pageCollections.signatureInkAnnotation.push(importedAnnotations.signatureInkAnnotation[parseInt(i.toString(), 10)]);\n                    }\n                }\n                this.documentAnnotationCollections[parseInt(pageNumber.toString(), 10)] = pageCollections;\n            }\n        }\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {any} pageCollections - It describes about the page collections\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.checkDocumentCollectionData = function (pageIndex, pageCollections) {\n        var importPageCollections;\n        if (pageCollections) {\n            importPageCollections = pageCollections;\n        }\n        else if (this.documentAnnotationCollections) {\n            var documetCollections = this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)];\n            if (documetCollections) {\n                importPageCollections = (0,_drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__.cloneObject)(documetCollections);\n            }\n        }\n        if (importPageCollections) {\n            var textMarkupObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_textMarkup');\n            var shapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape');\n            var measureShapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape_measure');\n            var stampObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_stamp');\n            var stickyObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sticky');\n            var freeTextObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_freetext');\n            var inkObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_ink');\n            var signatureObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sign');\n            if (this.isStorageExceed) {\n                textMarkupObject = this.annotationStorage[this.documentId + '_annotations_textMarkup'];\n                shapeObject = this.annotationStorage[this.documentId + '_annotations_shape'];\n                measureShapeObject = this.annotationStorage[this.documentId + '_annotations_shape_measure'];\n                stampObject = this.annotationStorage[this.documentId + '_annotations_stamp'];\n                stickyObject = this.annotationStorage[this.documentId + '_annotations_sticky'];\n                freeTextObject = this.annotationStorage[this.documentId + '_annotations_freetext'];\n                inkObject = this.annotationStorage[this.documentId + '_annotations_ink'];\n                signatureObject = this.annotationStorage[this.documentId + '_annotations_sign'];\n            }\n            if (importPageCollections.textMarkupAnnotation && importPageCollections.textMarkupAnnotation.length !== 0) {\n                if (textMarkupObject) {\n                    var annotationObject = JSON.parse(textMarkupObject);\n                    if (annotationObject) {\n                        importPageCollections.textMarkupAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.textMarkupAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.shapeAnnotation && importPageCollections.shapeAnnotation.length !== 0) {\n                if (shapeObject) {\n                    var annotationObject = JSON.parse(shapeObject);\n                    if (annotationObject) {\n                        importPageCollections.shapeAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.shapeAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.measureShapeAnnotation && importPageCollections.measureShapeAnnotation.length !== 0) {\n                if (measureShapeObject) {\n                    var annotationObject = JSON.parse(measureShapeObject);\n                    if (annotationObject) {\n                        importPageCollections.measureShapeAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.measureShapeAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.stampAnnotations && importPageCollections.stampAnnotations.length !== 0) {\n                if (stampObject) {\n                    var annotationObject = JSON.parse(stampObject);\n                    if (annotationObject) {\n                        importPageCollections.stampAnnotations =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.stampAnnotations, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.stickyNotesAnnotation && importPageCollections.stickyNotesAnnotation.length !== 0) {\n                if (stickyObject) {\n                    var annotationObject = JSON.parse(stickyObject);\n                    if (annotationObject) {\n                        importPageCollections.stickyNotesAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.stickyNotesAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.freeTextAnnotation && importPageCollections.freeTextAnnotation.length !== 0) {\n                if (freeTextObject) {\n                    var annotationObject = JSON.parse(freeTextObject);\n                    if (annotationObject) {\n                        importPageCollections.freeTextAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.freeTextAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.signatureInkAnnotation && importPageCollections.signatureInkAnnotation.length !== 0) {\n                if (inkObject) {\n                    var annotationObject = JSON.parse(inkObject);\n                    if (annotationObject) {\n                        importPageCollections.signatureInkAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.signatureInkAnnotation, pageIndex);\n                    }\n                }\n            }\n            if (importPageCollections.signatureAnnotation && importPageCollections.signatureAnnotation.length !== 0) {\n                if (signatureObject) {\n                    var annotationObject = JSON.parse(inkObject);\n                    if (annotationObject) {\n                        importPageCollections.signatureAnnotation =\n                            this.findImportedAnnotations(annotationObject, importPageCollections.signatureAnnotation, pageIndex);\n                    }\n                }\n            }\n            return importPageCollections;\n        }\n    };\n    PdfViewerBase.prototype.findImportedAnnotations = function (annotationCollection, importAnnotations, pageNumber) {\n        var pageCollections = null;\n        for (var a = 0; a < annotationCollection.length; a++) {\n            if (annotationCollection[parseInt(a.toString(), 10)].pageIndex === pageNumber) {\n                pageCollections = annotationCollection[parseInt(a.toString(), 10)].annotations;\n            }\n        }\n        if (pageCollections) {\n            for (var i = 0; i < pageCollections.length; i++) {\n                for (var j = 0; j < importAnnotations.length; j++) {\n                    if (pageCollections[parseInt(i.toString(), 10)].annotName === importAnnotations[parseInt(j.toString(), 10)].AnnotName) {\n                        importAnnotations.splice(j, 1);\n                        j = j - 1;\n                    }\n                }\n            }\n        }\n        pageCollections = null;\n        return importAnnotations;\n    };\n    PdfViewerBase.prototype.setAnnotationSettings = function (annotation) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotation)) {\n            annotation.AnnotationSettings = annotation.AnnotationSettings ? annotation.AnnotationSettings :\n                this.pdfViewer.annotationModule.updateAnnotationSettings(annotation);\n            if (annotation.IsLocked) {\n                annotation.AnnotationSettings.isLock = annotation.IsLocked;\n            }\n        }\n    };\n    PdfViewerBase.prototype.drawPageAnnotations = function (annotation, pageIndex, isNewlyAdded) {\n        var _this = this;\n        if (isNewlyAdded) {\n            annotation = annotation[parseInt(pageIndex.toString(), 10)];\n        }\n        // When utilising the addAnnotation API, the annotationOrder object is not available; thus, the following code is used to put the annotation object into the annotationOrder.\n        if (annotation && !(annotation.annotationOrder)) {\n            var annotationTypes = ['freeTextAnnotation', 'measureShapeAnnotation', 'shapeAnnotation', 'signatureAnnotation', 'signatureInkAnnotation', 'stampAnnotations', 'stickyNotesAnnotation', 'textMarkupAnnotation'];\n            var foundAnnotationType = annotationTypes.find(function (type) {\n                if (annotation[\"\" + type] && annotation[\"\" + type].length !== 0) {\n                    return annotation[\"\" + type];\n                }\n            });\n            if (foundAnnotationType) {\n                annotation.annotationOrder = annotation[\"\" + foundAnnotationType];\n            }\n        }\n        if (annotation) {\n            var annotationOrderCollection = annotation.annotationOrder;\n            var annotationData = [];\n            var isRefreshRequired = true;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(annotationOrderCollection)) {\n                for (var index = 0; index < annotationOrderCollection.length; index++) {\n                    var annotationName = annotationOrderCollection[parseInt(index.toString(), 10)].AnnotType ?\n                        annotationOrderCollection[parseInt(index.toString(), 10)].AnnotType :\n                        annotationOrderCollection[parseInt(index.toString(), 10)].AnnotationType;\n                    annotationData.push(annotationOrderCollection[parseInt(index.toString(), 10)]);\n                    var storeObject = void 0;\n                    var annotObject = void 0;\n                    switch (annotationName) {\n                        case 'textMarkup':\n                            isRefreshRequired = false;\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_textMarkup');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_textMarkup'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                if (annotObject) {\n                                    annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                                }\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.textMarkupAnnotation =\n                                this.checkAnnotationCommentsCollections(annotation.textMarkupAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.renderAnnotations(pageIndex, null, null, annotationData, null, true);\n                            break;\n                        case 'shape':\n                            isRefreshRequired = false;\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_shape'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.shapeAnnotation = this.checkAnnotationCommentsCollections(annotation.shapeAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.renderAnnotations(pageIndex, annotationData, null, null, null, true);\n                            break;\n                        case 'shape_measure':\n                            isRefreshRequired = false;\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape_measure');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_shape_measure'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.measureShapeAnnotation =\n                                this.checkAnnotationCommentsCollections(annotation.measureShapeAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.renderAnnotations(pageIndex, null, annotationData, null, null, true);\n                            break;\n                        case 'stamp':\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_stamp');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_stamp'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.stampAnnotations = this.checkAnnotationCommentsCollections(annotation.stampAnnotations, pageIndex);\n                            this.pdfViewer.annotationModule.stampAnnotationModule.renderStampAnnotations(annotationData, pageIndex, null, true);\n                            break;\n                        case 'Text Box':\n                        case 'freeText':\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_freetext');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_freetext'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.freeTextAnnotation = this.checkAnnotationCommentsCollections(annotation.freeTextAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.freeTextAnnotationModule.renderFreeTextAnnotations(annotationData, pageIndex, true);\n                            break;\n                        case 'sticky':\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sticky');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_sticky'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.stickyNotesAnnotation =\n                                this.checkAnnotationCommentsCollections(annotation.stickyNotesAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.stickyNotesAnnotationModule.renderStickyNotesAnnotations(annotationData, pageIndex);\n                            break;\n                        case 'signature':\n                        case 'Signature':\n                        case 'SignatureText':\n                        case 'SignatureImage':\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sign');\n                            annotObject = JSON.parse(storeObject);\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            if (annotObject) {\n                                annotation.signatureAnnotation = this.checkSignatureCollections(annotObject, annotationData, pageIndex);\n                            }\n                            this.signatureModule.renderExistingSignature(annotationData, pageIndex, true);\n                            break;\n                        case 'Ink':\n                        case 'ink':\n                            storeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_ink');\n                            if (this.isStorageExceed) {\n                                storeObject = this.annotationStorage[this.documentId + '_annotations_ink'];\n                            }\n                            if (storeObject) {\n                                annotObject = JSON.parse(storeObject);\n                                annotationData = this.checkAnnotationCollections(annotObject, annotationData, pageIndex);\n                            }\n                            if (annotationData) {\n                                this.setAnnotationSettings(annotationData[0]);\n                            }\n                            annotation.signatureInkAnnotation =\n                                this.checkAnnotationCommentsCollections(annotation.signatureInkAnnotation, pageIndex);\n                            this.pdfViewer.annotationModule.inkAnnotationModule.renderExistingInkSignature(annotationData, pageIndex, true);\n                            break;\n                        default:\n                            break;\n                    }\n                    annotationData = [];\n                }\n            }\n            if (isRefreshRequired) {\n                // Both canvases need to be refresh. The 'blendAnnotationsIntoCanvas' method is used to highlight annotations.\n                var canvasIds = [\n                    '_annotationCanvas_' + pageIndex,\n                    '_blendAnnotationsIntoCanvas_' + pageIndex\n                ];\n                canvasIds.forEach(function (id) {\n                    var canvas = _this.getElement(id);\n                    if (canvas) {\n                        _this.pdfViewer.drawing.refreshCanvasDiagramLayer(canvas, pageIndex);\n                    }\n                });\n            }\n        }\n    };\n    PdfViewerBase.prototype.checkSignatureCollections = function (annotationCollection, annotation, pageNumber) {\n        var pageCollections = null;\n        for (var a = 0; a < annotationCollection.length; a++) {\n            if (annotationCollection[parseInt(a.toString(), 10)].pageIndex === pageNumber) {\n                pageCollections = annotationCollection[parseInt(a.toString(), 10)].annotations;\n            }\n        }\n        if (pageCollections) {\n            for (var i = 0; i < pageCollections.length; i++) {\n                for (var j = 0; j < annotation.length; j++) {\n                    if (pageCollections[parseInt(i.toString(), 10)].signatureName ===\n                        annotation[parseInt(j.toString(), 10)].SignatureName) {\n                        annotation.splice(j, 1);\n                        j = j - 1;\n                    }\n                }\n            }\n        }\n        pageCollections = null;\n        return annotation;\n    };\n    PdfViewerBase.prototype.checkAnnotationCollections = function (annotationCollection, annotation, pageNumber) {\n        var pageCollections = null;\n        for (var a = 0; a < annotationCollection.length; a++) {\n            if (annotationCollection[parseInt(a.toString(), 10)].pageIndex === pageNumber) {\n                pageCollections = annotationCollection[parseInt(a.toString(), 10)].annotations;\n            }\n        }\n        if (pageCollections) {\n            for (var i = 0; i < pageCollections.length; i++) {\n                for (var j = 0; j < annotation.length; j++) {\n                    if (pageCollections[parseInt(i.toString(), 10)].annotName === annotation[parseInt(j.toString(), 10)].AnnotName) {\n                        annotation.splice(j, 1);\n                        j = j - 1;\n                    }\n                }\n            }\n        }\n        pageCollections = null;\n        return annotation;\n    };\n    PdfViewerBase.prototype.checkAnnotationCommentsCollections = function (annotation, pageNumber) {\n        if (this.annotationComments) {\n            var annotationCollections = this.annotationComments[parseInt(pageNumber.toString(), 10)];\n            annotationCollections = this.selectAnnotationCollections(annotationCollections);\n            if (annotationCollections) {\n                for (var i = 0; i < annotationCollections.length; i++) {\n                    for (var j = 0; j < annotation.length; j++) {\n                        if (annotationCollections[parseInt(i.toString(), 10)].AnnotName ===\n                            annotation[parseInt(j.toString(), 10)].AnnotName) {\n                            annotation.splice(j, 1);\n                            j = j - 1;\n                        }\n                    }\n                }\n            }\n            annotationCollections = null;\n        }\n        return annotation;\n    };\n    PdfViewerBase.prototype.selectAnnotationCollections = function (pageAnnotations) {\n        var pageCollections = [];\n        if (pageAnnotations) {\n            if (pageAnnotations.textMarkupAnnotation && pageAnnotations.textMarkupAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.textMarkupAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.textMarkupAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.shapeAnnotation && pageAnnotations.shapeAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.shapeAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.shapeAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.measureShapeAnnotation && pageAnnotations.measureShapeAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.measureShapeAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.measureShapeAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.stampAnnotations && pageAnnotations.stampAnnotations.length !== 0) {\n                for (var i = 0; i < pageAnnotations.stampAnnotations.length; i++) {\n                    pageCollections.push(pageAnnotations.stampAnnotations[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.stickyNotesAnnotation && pageAnnotations.stickyNotesAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.stickyNotesAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.stickyNotesAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.freeTextAnnotation && pageAnnotations.freeTextAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.freeTextAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.freeTextAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (pageAnnotations.signatureInkAnnotation && pageAnnotations.signatureInkAnnotation.length !== 0) {\n                for (var i = 0; i < pageAnnotations.signatureInkAnnotation.length; i++) {\n                    pageCollections.push(pageAnnotations.signatureInkAnnotation[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        return pageCollections;\n    };\n    PdfViewerBase.prototype.saveImportedAnnotations = function () {\n        var textMarkupObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_textMarkup');\n        var shapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape');\n        var measureShapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape_measure');\n        var stampObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_stamp');\n        var stickyObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sticky');\n        var freeTextObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_freetext');\n        var inkObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_ink');\n        var signatureObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sign');\n        if (this.isStorageExceed) {\n            textMarkupObject = this.annotationStorage[this.documentId + '_annotations_textMarkup'];\n            shapeObject = this.annotationStorage[this.documentId + '_annotations_shape'];\n            measureShapeObject = this.annotationStorage[this.documentId + '_annotations_shape_measure'];\n            stampObject = this.annotationStorage[this.documentId + '_annotations_stamp'];\n            stickyObject = this.annotationStorage[this.documentId + '_annotations_sticky'];\n            freeTextObject = this.annotationStorage[this.documentId + '_annotations_freetext'];\n            inkObject = this.annotationStorage[this.documentId + '_annotations_ink'];\n            signatureObject = this.annotationStorage[this.documentId + '_annotations_sign'];\n        }\n        this.downloadCollections = { textMarkupObject: textMarkupObject, shapeObject: shapeObject,\n            measureShapeObject: measureShapeObject, stampObject: stampObject, stickyObject: stickyObject,\n            freeTextObject: freeTextObject, inkObject: inkObject, signatureObject: signatureObject };\n        if (this.documentAnnotationCollections) {\n            for (var i = 0; i < this.pageCount; i++) {\n                if (this.documentAnnotationCollections[parseInt(i.toString(), 10)]) {\n                    var pageCollections = (0,_drawing_drawing_util__WEBPACK_IMPORTED_MODULE_10__.cloneObject)(this.documentAnnotationCollections[parseInt(i.toString(), 10)]);\n                    pageCollections = this.checkDocumentCollectionData(i, pageCollections);\n                    this.savePageAnnotations(pageCollections, i);\n                }\n            }\n        }\n    };\n    PdfViewerBase.prototype.savePageAnnotations = function (annotation, pageIndex) {\n        if (annotation.textMarkupAnnotation.length !== 0) {\n            for (var s = 0; s < annotation.textMarkupAnnotation.length; s++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pdfViewer.annotationModule.textMarkupAnnotationModule)) {\n                    this.pdfViewer.annotationModule.textMarkupAnnotationModule.\n                        saveImportedTextMarkupAnnotations(annotation.textMarkupAnnotation[parseInt(s.toString(), 10)], pageIndex);\n                }\n            }\n        }\n        if (annotation.shapeAnnotation.length !== 0) {\n            for (var s = 0; s < annotation.shapeAnnotation.length; s++) {\n                this.pdfViewer.annotationModule.shapeAnnotationModule.\n                    saveImportedShapeAnnotations(annotation.shapeAnnotation[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.measureShapeAnnotation.length !== 0) {\n            for (var s = 0; s < annotation.measureShapeAnnotation.length; s++) {\n                this.pdfViewer.annotationModule.measureAnnotationModule.\n                    saveImportedMeasureAnnotations(annotation.measureShapeAnnotation[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.stampAnnotations.length !== 0) {\n            for (var s = 0; s < annotation.stampAnnotations.length; s++) {\n                this.pdfViewer.annotationModule.stampAnnotationModule.\n                    saveImportedStampAnnotations(annotation.stampAnnotations[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.stickyNotesAnnotation.length !== 0) {\n            for (var s = 0; s < annotation.stickyNotesAnnotation.length; s++) {\n                this.pdfViewer.annotationModule.stickyNotesAnnotationModule.\n                    saveImportedStickyNotesAnnotations(annotation.stickyNotesAnnotation[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.freeTextAnnotation.length !== 0) {\n            for (var s = 0; s < annotation.freeTextAnnotation.length; s++) {\n                this.pdfViewer.annotationModule.freeTextAnnotationModule.\n                    saveImportedFreeTextAnnotations(annotation.freeTextAnnotation[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.signatureInkAnnotation.length !== 0) {\n            if (!this.pdfViewer.isSignatureEditable) {\n                annotation.signatureInkAnnotation = this.canUpdateSignCollection(annotation.signatureInkAnnotation);\n            }\n            for (var s = 0; s < annotation.signatureInkAnnotation.length; s++) {\n                this.pdfViewer.annotationModule.inkAnnotationModule.\n                    saveImportedInkAnnotation(annotation.signatureInkAnnotation[parseInt(s.toString(), 10)], pageIndex);\n            }\n        }\n        if (annotation.signatureAnnotation.length !== 0) {\n            if (!this.pdfViewer.isSignatureEditable) {\n                annotation.signatureAnnotation = this.canUpdateSignCollection(annotation.signatureAnnotation);\n            }\n        }\n    };\n    PdfViewerBase.prototype.updateDocumentAnnotationCollections = function () {\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_textMarkup');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_shape');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_shape_measure');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_stamp');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_sticky');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_freetext');\n        PdfViewerBase.sessionStorageManager.removeItem(this.documentId + '_annotations_ink');\n        if (this.downloadCollections) {\n            if (this.isStorageExceed) {\n                this.annotationStorage[this.documentId + '_annotations_textMarkup'] = this.downloadCollections.textMarkupObject;\n                this.annotationStorage[this.documentId + '_annotations_shape'] = this.downloadCollections.shapeObject;\n                this.annotationStorage[this.documentId + '_annotations_shape_measure'] = this.downloadCollections.measureShapeObject;\n                this.annotationStorage[this.documentId + '_annotations_stamp'] = this.downloadCollections.stampObject;\n                this.annotationStorage[this.documentId + '_annotations_sticky'] = this.downloadCollections.stickyObject;\n                this.annotationStorage[this.documentId + '_annotations_freetext'] = this.downloadCollections.freeTextObject;\n                this.annotationStorage[this.documentId + '_annotations_ink'] = this.downloadCollections.inkObject;\n            }\n            else {\n                if (this.downloadCollections.textMarkupObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_textMarkup', this.downloadCollections.textMarkupObject);\n                }\n                if (this.downloadCollections.shapeObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_shape', this.downloadCollections.shapeObject);\n                }\n                if (this.downloadCollections.measureShapeObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_shape_measure', this.downloadCollections.measureShapeObject);\n                }\n                if (this.downloadCollections.stampObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_stamp', this.downloadCollections.stampObject);\n                }\n                if (this.downloadCollections.stickyObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_sticky', this.downloadCollections.stickyObject);\n                }\n                if (this.downloadCollections.freeTextObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_freetext', this.downloadCollections.freeTextObject);\n                }\n                if (this.downloadCollections.inkObject) {\n                    PdfViewerBase.sessionStorageManager.setItem(this.documentId + '_annotations_ink', this.downloadCollections.inkObject);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.createAnnotationJsonData = function () {\n        var annotationCollection = {};\n        var textMarkupAnnotationCollection;\n        var shapeAnnotations;\n        var calibrateAnnotations;\n        var stampAnnotationCollection;\n        var stickyAnnotationCollection;\n        var freeTextAnnotationCollection;\n        var signaturCollection;\n        var signaturInkCollection;\n        this.saveImportedAnnotations();\n        if (this.isTextMarkupAnnotationModule()) {\n            this.isJsonExported = true;\n            textMarkupAnnotationCollection = this.pdfViewer.annotationModule.textMarkupAnnotationModule.saveTextMarkupAnnotations();\n        }\n        if (this.isShapeAnnotationModule()) {\n            this.isJsonExported = true;\n            shapeAnnotations = this.pdfViewer.annotationModule.shapeAnnotationModule.saveShapeAnnotations();\n        }\n        if (this.isCalibrateAnnotationModule()) {\n            this.isJsonExported = true;\n            calibrateAnnotations = this.pdfViewer.annotationModule.measureAnnotationModule.saveMeasureShapeAnnotations();\n        }\n        if (this.isStampAnnotationModule()) {\n            stampAnnotationCollection = this.pdfViewer.annotationModule.stampAnnotationModule.saveStampAnnotations();\n        }\n        if (this.isCommentAnnotationModule()) {\n            stickyAnnotationCollection = this.pdfViewer.annotationModule.stickyNotesAnnotationModule.saveStickyAnnotations();\n        }\n        if (this.isFreeTextAnnotationModule()) {\n            freeTextAnnotationCollection = this.pdfViewer.annotationModule.freeTextAnnotationModule.saveFreeTextAnnotations();\n        }\n        if (this.isInkAnnotationModule()) {\n            signaturInkCollection = this.pdfViewer.annotationModule.inkAnnotationModule.saveInkSignature();\n        }\n        if (this.pdfViewer.isSignatureEditable) {\n            signaturCollection = this.signatureModule.saveSignature();\n        }\n        else {\n            var annotations = [];\n            for (var j = 0; j < this.pageCount; j++) {\n                annotations[parseInt(j.toString(), 10)] = [];\n            }\n            signaturCollection = JSON.stringify(annotations);\n        }\n        for (var s = 0; s < this.pageCount; s++) {\n            var annotation = {\n                textMarkupAnnotation: JSON.parse(textMarkupAnnotationCollection)[parseInt(s.toString(), 10)],\n                shapeAnnotation: JSON.parse(shapeAnnotations)[parseInt(s.toString(), 10)],\n                measureShapeAnnotation: JSON.parse(calibrateAnnotations)[parseInt(s.toString(), 10)],\n                stampAnnotations: JSON.parse(stampAnnotationCollection)[parseInt(s.toString(), 10)],\n                stickyNotesAnnotation: JSON.parse(stickyAnnotationCollection)[parseInt(s.toString(), 10)],\n                freeTextAnnotation: JSON.parse(freeTextAnnotationCollection)[parseInt(s.toString(), 10)],\n                signatureAnnotation: JSON.parse(signaturCollection)[parseInt(s.toString(), 10)],\n                signatureInkAnnotation: JSON.parse(signaturInkCollection)[parseInt(s.toString(), 10)]\n            };\n            annotationCollection[parseInt(s.toString(), 10)] = annotation;\n        }\n        return JSON.stringify(annotationCollection);\n    };\n    PdfViewerBase.prototype.combineImportedData = function (excistingImportAnnotation, newlyImportAnnotation) {\n        for (var i = 0; i < this.pageCount; i++) {\n            if (newlyImportAnnotation[parseInt(i.toString(), 10)]) {\n                if (excistingImportAnnotation[parseInt(i.toString(), 10)]) {\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations, newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation;\n                        }\n                    }\n                    if (newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation &&\n                        newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation.length !== 0) {\n                        if (excistingImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation) {\n                            newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation =\n                                this.checkImportedData(excistingImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation, newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation, i);\n                            if (newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation.length !== 0) {\n                                excistingImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation =\n                                    excistingImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation.\n                                        concat(newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation);\n                            }\n                        }\n                        else {\n                            excistingImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation =\n                                newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation;\n                        }\n                    }\n                }\n                else {\n                    var annotation = {\n                        textMarkupAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].textMarkupAnnotation,\n                        shapeAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].shapeAnnotation,\n                        measureShapeAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].measureShapeAnnotation,\n                        stampAnnotations: newlyImportAnnotation[parseInt(i.toString(), 10)].stampAnnotations,\n                        stickyNotesAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].stickyNotesAnnotation,\n                        freeTextAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].freeTextAnnotation,\n                        signatureInkAnnotation: newlyImportAnnotation[parseInt(i.toString(), 10)].signatureInkAnnotation\n                    };\n                    excistingImportAnnotation[parseInt(i.toString(), 10)] = annotation;\n                }\n            }\n        }\n        return excistingImportAnnotation;\n    };\n    /**\n     * @private\n     * @returns {boolean} - Returns true or false.\n     */\n    PdfViewerBase.prototype.updateExportItem = function () {\n        var shapeObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape');\n        var measureObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_shape_measure');\n        var stampObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_stamp');\n        var stickyObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sticky');\n        var textMarkupObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_textMarkup');\n        var freeTextObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_freetext');\n        var isSignatureEditable = false;\n        var inkAnnotationObjct = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_ink');\n        if (this.pdfViewer.isSignatureEditable) {\n            var signatureObject = PdfViewerBase.sessionStorageManager.getItem(this.documentId + '_annotations_sign');\n            if (signatureObject) {\n                isSignatureEditable = true;\n            }\n        }\n        if (this.checkExportAnnotations(shapeObject) ||\n            this.checkExportAnnotations(measureObject) ||\n            this.checkExportAnnotations(stampObject) ||\n            this.checkExportAnnotations(stickyObject) ||\n            this.checkExportAnnotations(textMarkupObject) ||\n            this.checkExportAnnotations(freeTextObject) ||\n            this.isImportAction ||\n            this.isStorageExceed ||\n            isSignatureEditable ||\n            this.checkExportAnnotations(inkAnnotationObjct)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    PdfViewerBase.prototype.checkExportAnnotations = function (obj) {\n        if (obj) {\n            var parsedObj = JSON.parse(obj);\n            return parsedObj.filter(function (s) { return s.annotations.length > 0; }).length > 0;\n        }\n        return false;\n    };\n    PdfViewerBase.prototype.isFreeTextAnnotation = function (annotations) {\n        var resut = false;\n        if (annotations && annotations.length > 0) {\n            resut = annotations.some(function (s) { return s.shapeAnnotationType === 'FreeText' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(s.subject); });\n        }\n        return resut;\n    };\n    PdfViewerBase.prototype.checkImportedData = function (existingCollection, newCollection, pageIndex) {\n        for (var i = 0; i < existingCollection.length; i++) {\n            for (var j = 0; j < newCollection.length; j++) {\n                if (existingCollection[parseInt(i.toString(), 10)].AnnotName === newCollection[parseInt(j.toString(), 10)].AnnotName) {\n                    var len = this.pdfViewer.annotationCollection.length;\n                    for (var x = 0; x < len; x++) {\n                        if (this.pdfViewer.annotationCollection[parseInt(x.toString(), 10)].annotationId ===\n                            newCollection[parseInt(j.toString(), 10)].AnnotName) {\n                            // To update the comment panel values in a collections while importing the annotation with the same name. (EJ2-62092)\n                            this.pdfViewer.annotationCollection[parseInt(x.toString(), 10)].comments =\n                                this.pdfViewer.annotationModule.getAnnotationComments(newCollection[parseInt(j.toString(), 10)].Comments, newCollection[parseInt(j.toString(), 10)], newCollection[parseInt(j.toString(), 10)].Author);\n                            this.pdfViewer.annotationCollection[parseInt(x.toString(), 10)].review =\n                                { state: newCollection[parseInt(j.toString(), 10)].State,\n                                    stateModel: newCollection[parseInt(j.toString(), 10)].StateModel,\n                                    modifiedDate: newCollection[parseInt(j.toString(), 10)].ModifiedDate,\n                                    author: newCollection[parseInt(j.toString(), 10)].Author };\n                            this.pdfViewer.annotationCollection[parseInt(x.toString(), 10)].note =\n                                newCollection[parseInt(j.toString(), 10)].Note;\n                            var annot = this.pdfViewer.annotationCollection[parseInt(x.toString(), 10)];\n                            if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'shape' &&\n                                this.pdfViewer.annotationModule.shapeAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    shapeAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_shape');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'textMarkup' && this.pdfViewer.annotationModule.textMarkupAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    textMarkupAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_textMarkup');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'shape_measure' && this.pdfViewer.annotationModule.measureAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    measureShapeAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_shape_measure');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'stamp' && this.pdfViewer.annotationModule.stampAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    stampAnnotations[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_stamp');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'freeText' && this.pdfViewer.annotationModule.freeTextAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    freeTextAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_freetext');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'ink' && this.pdfViewer.annotationModule.inkAnnotationModule) {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    signatureInkAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_ink');\n                            }\n                            else if (existingCollection[parseInt(i.toString(), 10)].AnnotType === 'sticky') {\n                                this.documentAnnotationCollections[parseInt(pageIndex.toString(), 10)].\n                                    stickyNotesAnnotation[parseInt(i.toString(), 10)] = newCollection[parseInt(j.toString(), 10)];\n                                this.updateAnnotationsInSessionStorage(newCollection[parseInt(j.toString(), 10)], annot, '_annotations_sticky');\n                            }\n                            break;\n                        }\n                    }\n                    this.pdfViewer.annotationModule.stickyNotesAnnotationModule.\n                        createCommentControlPanel(newCollection[parseInt(j.toString(), 10)], (pageIndex + 1), null, null, true);\n                    newCollection.splice(j, 1);\n                    j = j - 1;\n                }\n            }\n        }\n        if (this.annotationComments) {\n            var annotationCollections = this.annotationComments[parseInt(pageIndex.toString(), 10)];\n            annotationCollections = this.selectAnnotationCollections(annotationCollections);\n            if (annotationCollections) {\n                for (var i = 0; i < annotationCollections.length; i++) {\n                    for (var j = 0; j < newCollection.length; j++) {\n                        if (annotationCollections[parseInt(i.toString(), 10)].AnnotName ===\n                            newCollection[parseInt(j.toString(), 10)].AnnotName) {\n                            newCollection.splice(j, 1);\n                            j = j - 1;\n                        }\n                    }\n                }\n            }\n        }\n        return newCollection;\n    };\n    // To update the comment panel values in a session storage while importing the annotation with the same name. (EJ2-62092)\n    PdfViewerBase.prototype.updateAnnotationsInSessionStorage = function (newCollection, annot, type) {\n        var annotation = PdfViewerBase.sessionStorageManager.getItem(this.documentId + type);\n        var annotObject = JSON.parse(annotation);\n        if (annotObject) {\n            for (var b = 0; b < annotObject.length; b++) {\n                if (annotObject[parseInt(b.toString(), 10)].annotations) {\n                    for (var z = 0; z < annotObject[parseInt(b.toString(), 10)].annotations.length; z++) {\n                        if (annotObject[parseInt(b.toString(), 10)].annotations[parseInt(z.toString(), 10)].annotName ===\n                            newCollection.AnnotName) {\n                            annotObject[parseInt(b.toString(), 10)].annotations[parseInt(z.toString(), 10)].comments = annot.comments;\n                            annotObject[parseInt(b.toString(), 10)].annotations[parseInt(z.toString(), 10)].review = annot.review;\n                            annotObject[parseInt(b.toString(), 10)].annotations[parseInt(z.toString(), 10)].note = annot.note;\n                            break;\n                        }\n                    }\n                }\n            }\n            PdfViewerBase.sessionStorageManager.setItem(this.documentId + type, JSON.stringify(annotObject));\n        }\n    };\n    /**\n     * @param {any} points - It describes about the points\n     * @private\n     * @returns {object} - object\n     */\n    PdfViewerBase.prototype.checkAnnotationWidth = function (points) {\n        var width = 0;\n        var height = 0;\n        var minWidth;\n        var maxWidth;\n        var minHeight;\n        var maxHeight;\n        for (var i = 0; i < points.length; i++) {\n            if (!minWidth) {\n                minWidth = points[parseInt(i.toString(), 10)].x;\n                maxWidth = points[parseInt(i.toString(), 10)].x;\n                minHeight = points[parseInt(i.toString(), 10)].y;\n                maxHeight = points[parseInt(i.toString(), 10)].y;\n            }\n            else {\n                if (minWidth > points[parseInt(i.toString(), 10)].x) {\n                    minWidth = points[parseInt(i.toString(), 10)].x;\n                }\n                else if (maxWidth < points[parseInt(i.toString(), 10)].x) {\n                    maxWidth = points[parseInt(i.toString(), 10)].x;\n                }\n                if (minHeight > points[parseInt(i.toString(), 10)].y) {\n                    minHeight = points[parseInt(i.toString(), 10)].y;\n                }\n                else if (maxHeight < points[parseInt(i.toString(), 10)].y) {\n                    maxHeight = points[parseInt(i.toString(), 10)].y;\n                }\n            }\n        }\n        width = maxWidth - minWidth;\n        height = maxHeight - minHeight;\n        return { width: width, height: height };\n    };\n    PdfViewerBase.prototype.deleteAnnotations = function () {\n        if (this.pdfViewer.annotationModule) {\n            this.updateAnnotationsUndoRedo();\n            this.updateSignatureUndoRedo();\n            this.pdfViewer.annotations = [];\n            this.pdfViewer.zIndexTable = [];\n            this.pdfViewer.annotationCollection = [];\n            this.pdfViewer.signatureCollection = [];\n            var annotationCollection = this.createAnnotationsCollection();\n            this.annotationComments = annotationCollection;\n            this.documentAnnotationCollections = annotationCollection;\n            this.annotationRenderredList = [];\n            for (var i = 0; i < this.pageCount; i++) {\n                this.pdfViewer.annotationModule.renderAnnotations(i, null, null, null);\n                this.pdfViewer.renderDrawing(undefined, i);\n                this.pdfViewer.clearSelection(i);\n                var accordionContent = document.getElementById(this.pdfViewer.element.id + '_accordionContainer' + (i + 1));\n                if (accordionContent) {\n                    accordionContent.remove();\n                }\n                var accordionContentContainer = document.getElementById(this.pdfViewer.element.id + '_accordionContentContainer');\n                if (accordionContentContainer) {\n                    if (accordionContentContainer.childElementCount === 0) {\n                        accordionContentContainer.style.display = 'none';\n                        if (document.getElementById(this.pdfViewer.element.id + '_commentsPanelText')) {\n                            this.navigationPane.annotationMenuObj.enableItems([this.pdfViewer.localeObj.getConstant('Export Annotations')], false);\n                            document.getElementById(this.pdfViewer.element.id + '_commentsPanelText').style.display = 'block';\n                        }\n                    }\n                }\n            }\n            this.isImportedAnnotation = false;\n            this.isImportAction = false;\n            this.importedAnnotation = [];\n            this.annotationPageList = [];\n            this.pdfViewer.annotationModule.freeTextAnnotationModule.freeTextPageNumbers = [];\n            this.pdfViewer.annotationModule.stampAnnotationModule.stampPageNumber = [];\n            this.pdfViewer.annotation.inkAnnotationModule.inkAnnotationindex = [];\n            this.isAnnotationCollectionRemoved = true;\n        }\n        else {\n            this.getModuleWarningMessage('Annotation');\n        }\n    };\n    PdfViewerBase.prototype.updateAnnotationsUndoRedo = function () {\n        var _loop_2 = function (j) {\n            var currentAnnotation = null;\n            // eslint-disable-next-line\n            var proxy = this_2;\n            if (proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)].shapeAnnotationType === 'textMarkup') {\n                currentAnnotation = proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)];\n                var pageAnnotations = proxy.pdfViewer.annotation.textMarkupAnnotationModule.\n                    getAnnotations(currentAnnotation.pageNumber, null);\n                if (pageAnnotations) {\n                    for (var i = 0; i < pageAnnotations.length; i++) {\n                        if (currentAnnotation.annotationId === pageAnnotations[parseInt(i.toString(), 10)].annotName) {\n                            var deletedAnnotation = pageAnnotations.splice(parseInt(i.toString(), 10), 1)[0];\n                            proxy.pdfViewer.annotation.addAction(currentAnnotation.pageNumber, parseInt(i.toString(), 10), deletedAnnotation, 'Text Markup Deleted', null);\n                            proxy.pdfViewer.annotation.stickyNotesAnnotationModule.findPosition(deletedAnnotation, 'textMarkup');\n                            var removeDiv = document.getElementById(deletedAnnotation.annotName);\n                            if (removeDiv) {\n                                if (removeDiv.parentElement.childElementCount === 1) {\n                                    proxy.pdfViewer.annotationModule.stickyNotesAnnotationModule.updateAccordionContainer(removeDiv);\n                                }\n                                else {\n                                    removeDiv.remove();\n                                }\n                            }\n                        }\n                    }\n                }\n                proxy.pdfViewer.annotation.textMarkupAnnotationModule.manageAnnotations(pageAnnotations, currentAnnotation.pageNumber);\n            }\n            else {\n                currentAnnotation = proxy.pdfViewer.annotations.filter(function (s) { return s.annotName === proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)].annotationId; })[0];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentAnnotation)) {\n                    currentAnnotation = new _index__WEBPACK_IMPORTED_MODULE_2__.PdfAnnotationBase(this_2.pdfViewer, 'annotations', proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)], true);\n                    currentAnnotation.id = proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)].uniqueId;\n                    currentAnnotation.annotName = proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)].annotationId;\n                    currentAnnotation.annotationId = null;\n                }\n                var undoElement = proxy.pdfViewer.annotation.modifyInCollections(currentAnnotation, 'delete');\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(undoElement)) {\n                    undoElement = proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)];\n                    undoElement.annotName = proxy.pdfViewer.annotationCollection[parseInt(j.toString(), 10)].annotationId;\n                    delete undoElement.annotationId;\n                }\n                proxy.pdfViewer.annotation.undoCommentsElement.push(undoElement);\n                proxy.pdfViewer.annotation.addAction(currentAnnotation.pageIndex, null, currentAnnotation, 'Delete', '', undoElement, currentAnnotation);\n                if (currentAnnotation.shapeAnnotationType === 'Square' || currentAnnotation.shapeAnnotationType === 'Line' ||\n                    currentAnnotation.shapeAnnotationType === 'Circle' || currentAnnotation.shapeAnnotationType === 'Polygon' ||\n                    currentAnnotation.shapeAnnotationType === 'Polyline') {\n                    if (currentAnnotation.calibrate) {\n                        proxy.pdfViewer.annotation.measureAnnotationModule.\n                            manageAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                    }\n                    else {\n                        proxy.pdfViewer.annotation.shapeAnnotationModule.\n                            manageAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                    }\n                }\n                else if (currentAnnotation.shapeAnnotationType === 'Stamp' || currentAnnotation.shapeAnnotationType === 'Image') {\n                    proxy.pdfViewer.annotation.stampAnnotationModule.\n                        manageAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                }\n                else if (currentAnnotation.shapeAnnotationType === 'FreeText') {\n                    proxy.pdfViewer.annotation.freeTextAnnotationModule.\n                        manageAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                }\n                else if (currentAnnotation.shapeAnnotationType === 'Ink') {\n                    proxy.pdfViewer.annotation.inkAnnotationModule.\n                        manageInkAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                }\n                else if (currentAnnotation.shapeAnnotationType === 'StickyNotes') {\n                    var stickyNoteAnnotations = proxy.pdfViewer.annotation.stickyNotesAnnotationModule.getAnnotations(currentAnnotation.pageIndex, null, 'sticky');\n                    for (var i = 0; i < stickyNoteAnnotations.length; i++) {\n                        if (stickyNoteAnnotations[parseInt(i.toString(), 10)].annotName === currentAnnotation.annotName) {\n                            stickyNoteAnnotations.splice(i, 1);\n                            break;\n                        }\n                    }\n                    proxy.pdfViewer.annotation.stickyNotesAnnotationModule.\n                        manageAnnotations(stickyNoteAnnotations, currentAnnotation.pageIndex, 'sticky');\n                }\n            }\n        };\n        var this_2 = this;\n        for (var j = 0; j < this.pdfViewer.annotationCollection.length; j++) {\n            _loop_2(j);\n        }\n    };\n    PdfViewerBase.prototype.updateSignatureUndoRedo = function () {\n        for (var i = 0; i < this.pdfViewer.signatureCollection.length; i++) {\n            // eslint-disable-next-line\n            var proxy = this;\n            var currentAnnotation = void 0;\n            if (proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)].shapeAnnotationType === 'HandWrittenSignature' || proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)].shapeAnnotationType === 'SignatureText' || proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)].shapeAnnotationType === 'SignatureImage') {\n                currentAnnotation = proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)];\n                var pageAnnotations = proxy.signatureModule.getAnnotations(currentAnnotation.pageNumber, null);\n                for (var _i = 0, pageAnnotations_1 = pageAnnotations; _i < pageAnnotations_1.length; _i++) {\n                    var annotation = pageAnnotations_1[_i];\n                    if (annotation.id === currentAnnotation.uniqueKey) {\n                        currentAnnotation = annotation;\n                        break;\n                    }\n                }\n                var undoElement = proxy.pdfViewer.annotation.modifyInCollections(currentAnnotation, 'delete');\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(undoElement)) {\n                    undoElement = proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)];\n                    undoElement.annotName = proxy.pdfViewer.signatureCollection[parseInt(i.toString(), 10)].annotationId;\n                    delete undoElement.annotationId;\n                }\n                proxy.pdfViewer.annotation.undoCommentsElement.push(undoElement);\n                proxy.pdfViewer.annotation.addAction(currentAnnotation.pageIndex, null, currentAnnotation, 'Delete', '', undoElement, currentAnnotation);\n                if (currentAnnotation.shapeAnnotationType === 'HandWrittenSignature' || currentAnnotation.shapeAnnotationType === 'SignatureText' || currentAnnotation.shapeAnnotationType === 'SignatureImage') {\n                    proxy.signatureModule.manageAnnotations(currentAnnotation, currentAnnotation.pageNumber);\n                }\n            }\n            i--;\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {boolean} isObject - It describes about the whether the isObject is true or not\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.createAnnotationsCollection = function (pageNumber, isObject) {\n        var annotationCollectionList = [];\n        if (!isObject) {\n            for (var i = 0; i < this.pageCount; i++) {\n                var annotation = {\n                    textMarkupAnnotation: [], shapeAnnotation: [], measureShapeAnnotation: [], stampAnnotations: [],\n                    stickyNotesAnnotation: [], freeTextAnnotation: [], signatureAnnotation: [], signatureInkAnnotation: []\n                };\n                annotationCollectionList.push(annotation);\n            }\n        }\n        else {\n            annotationCollectionList = {};\n            var annotation = {\n                textMarkupAnnotation: [], shapeAnnotation: [], measureShapeAnnotation: [], stampAnnotations: [],\n                stickyNotesAnnotation: [], freeTextAnnotation: [], signatureAnnotation: [], signatureInkAnnotation: []\n            };\n            annotationCollectionList[parseInt(pageNumber.toString(), 10)] = annotation;\n        }\n        return annotationCollectionList;\n    };\n    /**\n     * @param {any} importAnnotation - It describes about the imported annotation\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.addAnnotation = function (importAnnotation) {\n        var pdfAnnotation = {};\n        var documentCollections;\n        if (importAnnotation) {\n            var isAnnotationObject = false;\n            var annotationCount = 1;\n            if (importAnnotation.shapeAnnotationType || importAnnotation.author) {\n                isAnnotationObject = true;\n                documentCollections = this.createAnnotationsCollection(importAnnotation.pageNumber, true);\n            }\n            else {\n                if (importAnnotation.length) {\n                    annotationCount = importAnnotation.length;\n                    documentCollections = this.createAnnotationsCollection();\n                }\n                else {\n                    isAnnotationObject = true;\n                    documentCollections = this.createAnnotationsCollection(importAnnotation.pageNumber, true);\n                }\n            }\n            for (var a = 0; a < annotationCount; a++) {\n                var annotation = void 0;\n                if (isAnnotationObject) {\n                    annotation = importAnnotation;\n                }\n                else {\n                    annotation = importAnnotation[parseInt(a.toString(), 10)];\n                }\n                var newAnnotation = {};\n                newAnnotation.ShapeAnnotationType = annotation.shapeAnnotationType;\n                newAnnotation.AnnotationAddMode = annotation.annotationAddMode;\n                newAnnotation.Author = annotation.author;\n                newAnnotation.AnnotationSelectorSettings = annotation.annotationSelectorSettings;\n                newAnnotation.AnnotationSettings = annotation.annotationSettings;\n                newAnnotation.PageNumber = annotation.pageNumber;\n                newAnnotation.ModifiedDate = annotation.modifiedDate;\n                newAnnotation.Subject = annotation.subject;\n                newAnnotation.Note = annotation.note;\n                newAnnotation.AnnotName = annotation.annotationId;\n                newAnnotation.IsCommentLock = annotation.isCommentLock;\n                newAnnotation.Comments = annotation.comments;\n                if (annotation.comments && annotation.comments.length > 0) {\n                    var comments = [];\n                    for (var i = 0; i < annotation.comments.length; i++) {\n                        comments.push(this.updateComments(annotation, annotation.comments[parseInt(i.toString(), 10)]));\n                    }\n                    newAnnotation.Comments = comments;\n                }\n                if (annotation.review) {\n                    newAnnotation.State = annotation.review.state;\n                    newAnnotation.StateModel = annotation.review.stateModel;\n                }\n                newAnnotation.CustomData = annotation.customData;\n                newAnnotation.Opacity = annotation.opacity;\n                if (annotation.shapeAnnotationType === 'textMarkup') {\n                    newAnnotation.AnnotType = 'textMarkup';\n                    newAnnotation.Color = annotation.color;\n                    newAnnotation.IsMultiSelect = annotation.isMultiSelect;\n                    newAnnotation.TextMarkupAnnotationType = annotation.textMarkupAnnotationType;\n                    newAnnotation.TextMarkupContent = annotation.textMarkupContent;\n                    newAnnotation.TextMarkupStartIndex = annotation.textMarkupStartIndex;\n                    newAnnotation.TextMarkupEndIndex = annotation.textMarkupEndIndex;\n                    if (annotation.rect) {\n                        newAnnotation.Rect = this.convertBounds(annotation.rect, true);\n                    }\n                    if (annotation.bounds && annotation.bounds.length >= 1) {\n                        var bounds = [];\n                        for (var i = 0; i < annotation.bounds.length; i++) {\n                            bounds.push(this.convertBounds(annotation.bounds[parseInt(i.toString(), 10)]));\n                        }\n                        newAnnotation.Bounds = bounds;\n                    }\n                    documentCollections[annotation.pageNumber].textMarkupAnnotation.push(newAnnotation);\n                }\n                else if (annotation.shapeAnnotationType === 'sticky') {\n                    newAnnotation.AnnotType = 'sticky';\n                    newAnnotation.Icon = 'Comment';\n                    newAnnotation.Bounds = this.convertBounds(annotation.bounds);\n                    newAnnotation.StrokeColor = annotation.strokeColor;\n                    newAnnotation.Color = annotation.color;\n                    documentCollections[annotation.pageNumber].stickyNotesAnnotation.push(newAnnotation);\n                }\n                else if (annotation.shapeAnnotationType === 'FreeText') {\n                    newAnnotation.AnnotType = 'freeText';\n                    newAnnotation.Name = annotation.annotationId;\n                    newAnnotation.MarkupText = annotation.dynamicText;\n                    newAnnotation.Text = annotation.dynamicText;\n                    newAnnotation.Note = annotation.dynamicText;\n                    newAnnotation.TextAlign = annotation.textAlign;\n                    newAnnotation.Thickness = annotation.thicknes;\n                    newAnnotation.StrokeColor = annotation.strokeColor;\n                    newAnnotation.FillColor = annotation.fillColor;\n                    newAnnotation.FontColor = annotation.fontColor;\n                    newAnnotation.FontSize = annotation.fontSize;\n                    newAnnotation.FontFamily = annotation.fontFamily;\n                    newAnnotation.Rotate = annotation.rotateAngle;\n                    newAnnotation.Bounds = this.convertBounds(annotation.bounds);\n                    newAnnotation.Font = { 'Name': annotation.fontFamily, 'Size': annotation.fontSize, 'Bold': annotation.font.isBold, 'Italic': annotation.font.isItalic, 'Strikeout': annotation.font.isStrikeout, 'Underline': annotation.font.isUnderline };\n                    documentCollections[annotation.pageNumber].freeTextAnnotation.push(newAnnotation);\n                }\n                else if (annotation.shapeAnnotationType === 'stamp') {\n                    newAnnotation.AnnotType = 'stamp';\n                    newAnnotation.Icon = annotation.icon;\n                    newAnnotation.isDynamic = false;\n                    newAnnotation.Rect = this.convertBounds(annotation.bounds, false, true);\n                    newAnnotation.RotateAngle = annotation.rotateAngle;\n                    newAnnotation.FillColor = annotation.fillColor;\n                    newAnnotation.StrokeColor = annotation.strokeColor;\n                    newAnnotation.StampAnnotationType = annotation.stampAnnotationType;\n                    newAnnotation.CreationDate = annotation.creationDate;\n                    if (annotation.stampAnnotationType === 'image') {\n                        var apperarance = [];\n                        var imageData = { 'imagedata': annotation.stampAnnotationPath };\n                        apperarance.push(imageData);\n                        newAnnotation.Apperarance = apperarance;\n                    }\n                    if (annotation.isDynamicStamp) {\n                        newAnnotation.IsDynamic = true;\n                        newAnnotation.StrokeColor = annotation.stampFillcolor;\n                        var apperarance = [];\n                        var imageData = { 'type': 'string', 'text': annotation.dynamicText, 'currentFontname': '95b303ab-d397-438a-83af-e2ff8a9900f1', 'baseFontName': 'Helvetica-BoldOblique', 'fontSize': 10, 'isImport': true };\n                        apperarance.push(imageData);\n                        newAnnotation.Apperarance = apperarance;\n                    }\n                    documentCollections[annotation.pageNumber].stampAnnotations.push(newAnnotation);\n                }\n                else if (annotation.shapeAnnotationType === 'Ink' || annotation.shapeAnnotationType === 'Signature') {\n                    newAnnotation.StrokeColor = annotation.strokeColor;\n                    newAnnotation.FillColor = annotation.fillColor;\n                    newAnnotation.Thickness = annotation.thickness;\n                    newAnnotation.Bounds = this.convertBounds(annotation.bounds);\n                    newAnnotation.PathData = annotation.data;\n                    newAnnotation.pageIndex = annotation.pageNumber;\n                    if (annotation.shapeAnnotationType === 'Ink') {\n                        newAnnotation.AnnotType = 'Ink';\n                        newAnnotation.IsPathData = true;\n                        documentCollections[annotation.pageNumber].signatureInkAnnotation.push(newAnnotation);\n                    }\n                    if (annotation.shapeAnnotationType === 'Signature') {\n                        newAnnotation.AnnotType = 'Signature';\n                        newAnnotation.SignatureName = annotation.annotationId;\n                        newAnnotation.IsSignature = true;\n                        documentCollections[annotation.pageNumber].signatureAnnotation.push(newAnnotation);\n                    }\n                }\n                else {\n                    if (annotation.shapeAnnotationType === 'Line' || annotation.shapeAnnotationType === 'LineWidthArrowHead' || annotation.shapeAnnotationType === 'Polyline' || annotation.shapeAnnotationType === 'Polygon' || annotation.shapeAnnotationType === 'Polyline' || annotation.shapeAnnotationType === 'Circle' || annotation.shapeAnnotationType === 'Oval' || annotation.shapeAnnotationType === 'Rectangle' || annotation.shapeAnnotationType === 'Square' || annotation.shapeAnnotationType === 'Ellipse') {\n                        newAnnotation.AnnotType = 'shape';\n                        newAnnotation.StrokeColor = annotation.strokeColor;\n                        newAnnotation.FillColor = annotation.fillColor;\n                        newAnnotation.Thickness = annotation.thickness;\n                        newAnnotation.BorderStyle = annotation.borderStyle;\n                        newAnnotation.BorderDashArray = annotation.borderDashArray;\n                        newAnnotation.RotateAngle = annotation.rotateAngle;\n                        newAnnotation.IsCloudShape = annotation.isCloudShape;\n                        newAnnotation.CloudIntensity = annotation.cloudIntensity;\n                        newAnnotation.RectangleDifference = annotation.rectangleDifference;\n                        newAnnotation.LineHeadStart = annotation.lineHeadStart;\n                        newAnnotation.LineHeadEnd = annotation.lineHeadEnd;\n                        newAnnotation.IsLocked = annotation.isLocked;\n                        newAnnotation.EnableShapeLabel = annotation.enableShapeLabel;\n                        newAnnotation.LabelContent = annotation.labelContent;\n                        newAnnotation.LabelFillColor = annotation.labelFillColor;\n                        newAnnotation.LabelBorderColor = annotation.labelBorderColor;\n                        newAnnotation.FontColor = annotation.fontColor;\n                        newAnnotation.FontSize = annotation.fontSize;\n                        newAnnotation.LabelBounds = this.convertBounds(annotation.labelBounds);\n                        newAnnotation.LabelSettings = annotation.labelSettings;\n                        newAnnotation.Bounds = this.convertBounds(annotation.bounds);\n                        newAnnotation.LeaderLength = annotation.leaderLength;\n                        newAnnotation.LeaderLineExtenstion = annotation.leaderLineExtension;\n                        if (annotation.vertexPoints && annotation.vertexPoints.length >= 1) {\n                            var points = [];\n                            for (var i = 0; i < annotation.vertexPoints.length; i++) {\n                                points.push(this.convertVertexPoints(annotation.vertexPoints[parseInt(i.toString(), 10)]));\n                            }\n                            newAnnotation.VertexPoints = points;\n                        }\n                        newAnnotation.EnableShapeLabel = annotation.enableShapeLabel;\n                        if (annotation.subject === 'Distance calculation' || annotation.subject === 'Perimeter calculation' || annotation.subject === 'Area calculation' || annotation.subject === 'Radius calculation' || annotation.subject === 'Volume calculation') {\n                            newAnnotation.AnnotType = 'shape_measure';\n                            var calibrate = annotation.calibrate;\n                            if (calibrate) {\n                                newAnnotation.Calibrate = {\n                                    'Ratio': calibrate.ratio, 'X': [{ 'Unit': calibrate.x[0].unit, 'ConversionFactor': calibrate.x[0].conversionFactor, 'FractionalType': calibrate.x[0].fractionalType, 'Denominator': calibrate.x[0].denominator, 'FormatDenominator': calibrate.x[0].formatDenominator }],\n                                    'Distance': [{ 'Unit': calibrate.distance[0].unit, 'ConversionFactor': calibrate.distance[0].conversionFactor, 'FractionalType': calibrate.distance[0].fractionalType, 'Denominator': calibrate.distance[0].denominator, 'FormatDenominator': calibrate.distance[0].formatDenominator }],\n                                    'Area': [{ 'Unit': calibrate.area[0].unit, 'ConversionFactor': calibrate.area[0].conversionFactor, 'FractionalType': calibrate.area[0].fractionalType, 'Denominator': calibrate.area[0].denominator, 'FormatDenominator': calibrate.area[0].formatDenominator }],\n                                    'Angle': null, 'Volume': null, 'TargetUnitConversion': calibrate.targetUnitConversion, 'Depth': calibrate.depth\n                                };\n                            }\n                            newAnnotation.Indent = annotation.indent;\n                            newAnnotation.Caption = annotation.caption;\n                            newAnnotation.CaptionPosition = annotation.captionPosition;\n                            newAnnotation.LeaderLineExtension = annotation.leaderLineExtension;\n                            newAnnotation.LeaderLength = annotation.leaderLength;\n                            newAnnotation.LeaderLineOffset = annotation.leaderLineOffset;\n                            documentCollections[annotation.pageNumber].measureShapeAnnotation.push(newAnnotation);\n                        }\n                        else {\n                            documentCollections[annotation.pageNumber].shapeAnnotation.push(newAnnotation);\n                        }\n                    }\n                }\n            }\n            pdfAnnotation.pdfAnnotation = documentCollections;\n            this.pdfViewer.importAnnotation(pdfAnnotation);\n        }\n    };\n    /**\n     * @param {any} bounds - It describes about the bounds\n     * @param {boolean} isRect - It describes about the whether the isRect is true or not\n     * @param {boolean} isStamp - It describes about the whether the isStamp is true or not\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.convertBounds = function (bounds, isRect, isStamp) {\n        if (bounds) {\n            if (isRect) {\n                var left = bounds.left ? bounds.left : bounds.Left ? bounds.Left : 0;\n                var right = bounds.right ? bounds.right : bounds.Right ? bounds.Right : 0;\n                var bottom = bounds.bottom ? bounds.bottom : bounds.Bottom ? bounds.Bottom : 0;\n                var top_6 = bounds.top ? bounds.top : bounds.Top ? bounds.Top : 0;\n                return { left: left, right: right, bottom: bottom, top: top_6 };\n            }\n            else {\n                var x = bounds.x ? bounds.x : bounds.left ? bounds.left : bounds.Left ? bounds.Left : 0;\n                var y = bounds.y ? bounds.y : bounds.top ? bounds.top : bounds.Top ? bounds.Top : 0;\n                var width = bounds.width ? bounds.width : bounds.Width ? bounds.Width : 0;\n                var height = bounds.height ? bounds.height : bounds.Height ? bounds.Height : 0;\n                if (isStamp) {\n                    return { X: this.ConvertPixelToPoint(x), Y: this.ConvertPixelToPoint(y), Left: this.ConvertPixelToPoint(x),\n                        Top: this.ConvertPixelToPoint(y), Height: this.ConvertPixelToPoint(height),\n                        Width: this.ConvertPixelToPoint(width) };\n                }\n                else {\n                    return { X: x, Y: y, Left: x, Top: y, Height: height, Width: width };\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {any} number - It describes about the number\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.ConvertPixelToPoint = function (number) {\n        return (number * (72 / 96));\n    };\n    PdfViewerBase.prototype.convertVertexPoints = function (points) {\n        if (points) {\n            var x = points.x ? points.x : points.X ? points.X : 0;\n            var y = points.y ? points.y : points.Y ? points.Y : 0;\n            return { X: x, Y: y, Left: x, Top: y };\n        }\n    };\n    PdfViewerBase.prototype.updateComments = function (annotation, comments) {\n        if (annotation && comments) {\n            var newAnnotation = {};\n            newAnnotation.ShapeAnnotationType = annotation.shapeAnnotationType;\n            newAnnotation.Author = comments.author;\n            newAnnotation.AnnotationSelectorSettings = annotation.annotationSelectorSettings;\n            newAnnotation.AnnotationSettings = annotation.annotationSettings;\n            newAnnotation.PageNumber = annotation.pageNumber;\n            newAnnotation.ModifiedDate = comments.modifiedDate;\n            newAnnotation.Subject = annotation.subject;\n            newAnnotation.Note = comments.note;\n            newAnnotation.AnnotName = comments.annotName;\n            newAnnotation.Comments = comments.comments;\n            newAnnotation.State = comments.review.state;\n            newAnnotation.StateModel = comments.review.stateModel;\n            newAnnotation.CustomData = annotation.customData;\n            newAnnotation.IsLock = comments.isLock;\n            return newAnnotation;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.removeFocus = function () {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isBlazor)()) {\n            var currentPageContainer = this.pdfViewer.element.querySelector('#' + this.pdfViewer.element.id + '_totalPage');\n            if (currentPageContainer && currentPageContainer.firstElementChild &&\n                currentPageContainer.firstElementChild.firstElementChild) {\n                currentPageContainer.firstElementChild.firstElementChild.blur();\n            }\n        }\n    };\n    /**\n     * @param {boolean} isEdited - It describes about the whether isEdited is true or not\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateDocumentEditedProperty = function (isEdited) {\n        this.pdfViewer.allowServerDataBinding = true;\n        this.pdfViewer.isDocumentEdited = isEdited;\n        this.pdfViewer.allowServerDataBinding = false;\n    };\n    /**\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.getWindowDevicePixelRatio = function () {\n        var devicePixelRatio = window.devicePixelRatio;\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            return devicePixelRatio;\n        }\n        else {\n            return devicePixelRatio = 2;\n        }\n    };\n    /**\n     * @param {any} zoom - It describes about the zoom value\n     * @private\n     * @returns {number} - number\n     */\n    PdfViewerBase.prototype.getZoomRatio = function (zoom) {\n        var zoomFactor = this.getZoomFactor();\n        var zoomValue = zoom ? zoom : 1;\n        var ratio;\n        var devicePixelRatio = this.getWindowDevicePixelRatio();\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && zoomFactor <= 0.7)) {\n            ratio = zoomValue * devicePixelRatio;\n        }\n        else {\n            ratio = zoomValue;\n        }\n        return ratio;\n    };\n    /**\n     * @param {number} Rotate - It describes about the rotate\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} bounds - It describes about the bounds\n     * @param {number} originalRotation - It describes about the original rotation\n     * @private\n     * @returns {any} - any\n     */\n    PdfViewerBase.prototype.importJsonForRotatedDocuments = function (Rotate, pageNumber, bounds, originalRotation) {\n        var rotateAngle = Math.abs(Rotate);\n        var pageDetails = this.pageSize[parseInt(pageNumber.toString(), 10)];\n        //originalRotation = !isNullOrUndefined(originalRotation) ? originalRotation : pageDetails.rotation;\n        if (originalRotation !== pageDetails.rotation) {\n            rotateAngle = this.getRotationAngle(originalRotation, pageNumber);\n            this.isPageRotated = true;\n        }\n        else {\n            rotateAngle = 0;\n            this.isPageRotated = false;\n        }\n        if (rotateAngle === 1) {\n            return { X: pageDetails.width - bounds.Y - bounds.Height, Y: bounds.X, Height: bounds.Width, Width: bounds.Height };\n        }\n        else if (rotateAngle === 2) {\n            return { X: pageDetails.width - bounds.X - bounds.Width, Y: pageDetails.height - bounds.Y - bounds.Height,\n                Height: bounds.Height, Width: bounds.Width };\n        }\n        else if (rotateAngle === 3) {\n            return { X: bounds.Y, Y: pageDetails.height - bounds.X - bounds.Width, Height: bounds.Width, Width: bounds.Height };\n        }\n        else {\n            return bounds;\n        }\n    };\n    PdfViewerBase.prototype.getRotationAngle = function (originalRotation, pageNumber) {\n        var pageDetails = this.pageSize[parseInt(pageNumber.toString(), 10)];\n        originalRotation = Math.abs(originalRotation);\n        var rotateAngle;\n        if (originalRotation === 0) {\n            return rotateAngle = pageDetails.rotation;\n        }\n        else if (originalRotation === 1 || originalRotation === 90) {\n            if (pageDetails.rotation === 0) {\n                return rotateAngle = 3;\n            }\n            else if (pageDetails.rotation === 2) {\n                return rotateAngle = 1;\n            }\n            else if (pageDetails.rotation === 3) {\n                return rotateAngle = 2;\n            }\n        }\n        else if (originalRotation === 2 || originalRotation === 180) {\n            if (pageDetails.rotation === 0) {\n                return rotateAngle = 2;\n            }\n            else if (pageDetails.rotation === 1) {\n                return rotateAngle = 3;\n            }\n            else if (pageDetails.rotation === 3) {\n                return rotateAngle = 1;\n            }\n        }\n        else if (originalRotation === 3 || originalRotation === 270) {\n            if (pageDetails.rotation === 0) {\n                return rotateAngle = 1;\n            }\n            else if (pageDetails.rotation === 2) {\n                return rotateAngle = 3;\n            }\n            else if (pageDetails.rotation === 1) {\n                return rotateAngle = 2;\n            }\n        }\n    };\n    /**\n     * @param {number} Rotate - It describes about the rotate\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} vertexPoints - It describes about the vertex points\n     * @param {number} originalRotation - It describes about the original rotation\n     * @private\n     * @returns {IPoint[]} - IPoint[]\n     */\n    PdfViewerBase.prototype.calculateVertexPoints = function (Rotate, pageNumber, vertexPoints, originalRotation) {\n        var rotateAngle = Math.abs(Rotate);\n        var vPoints = [];\n        var pageDetails = this.pageSize[parseInt(pageNumber.toString(), 10)];\n        var x;\n        var y;\n        var point;\n        //originalRotation = !isNullOrUndefined(originalRotation) ? originalRotation : pageDetails.rotation;\n        if (originalRotation !== pageDetails.rotation) {\n            rotateAngle = this.getRotationAngle(originalRotation, pageNumber);\n        }\n        else {\n            rotateAngle = 0;\n        }\n        for (var j = 0; j < vertexPoints.length; j++) {\n            if (rotateAngle === 1) {\n                x = vertexPoints[parseInt(j.toString(), 10)].Y ? pageDetails.width - vertexPoints[parseInt(j.toString(), 10)].Y :\n                    pageDetails.width - vertexPoints[parseInt(j.toString(), 10)].y;\n                y = vertexPoints[parseInt(j.toString(), 10)].X ? vertexPoints[parseInt(j.toString(), 10)].X :\n                    vertexPoints[parseInt(j.toString(), 10)].x;\n                point = { x: x, y: y };\n                vPoints.push(point);\n            }\n            else if (rotateAngle === 2) {\n                x = vertexPoints[parseInt(j.toString(), 10)].X ? pageDetails.width - vertexPoints[parseInt(j.toString(), 10)].X :\n                    pageDetails.width - vertexPoints[parseInt(j.toString(), 10)].x;\n                y = vertexPoints[parseInt(j.toString(), 10)].Y ? pageDetails.height - vertexPoints[parseInt(j.toString(), 10)].Y :\n                    pageDetails.height - vertexPoints[parseInt(j.toString(), 10)].y;\n                var point_1 = { x: x, y: y };\n                vPoints.push(point_1);\n            }\n            else if (rotateAngle === 3) {\n                x = vertexPoints[parseInt(j.toString(), 10)].Y ? vertexPoints[parseInt(j.toString(), 10)].Y :\n                    vertexPoints[parseInt(j.toString(), 10)].y;\n                y = vertexPoints[parseInt(j.toString(), 10)].X ? pageDetails.height - vertexPoints[parseInt(j.toString(), 10)].X :\n                    pageDetails.height - vertexPoints[parseInt(j.toString(), 10)].x;\n                point = { x: x, y: y };\n                vPoints.push(point);\n            }\n            else {\n                x = vertexPoints[parseInt(j.toString(), 10)].X ? vertexPoints[parseInt(j.toString(), 10)].X :\n                    vertexPoints[parseInt(j.toString(), 10)].x;\n                y = vertexPoints[parseInt(j.toString(), 10)].Y ? vertexPoints[parseInt(j.toString(), 10)].Y :\n                    vertexPoints[parseInt(j.toString(), 10)].y;\n                var point_2 = { x: x, y: y };\n                vPoints.push(point_2);\n            }\n        }\n        return vPoints;\n    };\n    /**\n     * @param {any} data - It describes about the data\n     * @private\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.isSignaturePathData = function (data) {\n        // eslint-disable-next-line\n        var pathRegex = /^([Mm]\\s*\\d+(\\.\\d+)?\\s*,\\s*\\d+(\\.\\d+)?(\\s+[Ll]\\s*\\d+(\\.\\d+)?\\s*,\\s*\\d+(\\.\\d+)?)*\\s*)+$/;\n        return pathRegex.test(data);\n    };\n    /**\n     * @param {any} data - It describes about the data\n     * @private\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.isSignatureImageData = function (data) {\n        var base64ImageRegex = /^data:image\\/([a-z]+);base64,/;\n        return base64ImageRegex.test(data);\n    };\n    /**\n     * @param {any} annotationData - It describes about the annotation data\n     * @private\n     * @returns {string} - string\n     */\n    PdfViewerBase.prototype.getSanitizedString = function (annotationData) {\n        // eslint-disable-next-line\n        var sanitizedString = annotationData.replace(/[\\x00-\\x1F\\x7F]/g, function (c) { return \"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, '0'); });\n        return sanitizedString;\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @param {boolean} isTextSearch - It describes about the whether isTextSearch is true or not\n     * @private\n     * @returns {object} - object\n     */\n    PdfViewerBase.prototype.getLinkInformation = function (pageIndex, isTextSearch) {\n        var zoomFactor = this.retrieveCurrentZoomFactor();\n        if (this.pdfViewer.restrictZoomRequest && !this.pdfViewer.tileRenderingSettings.enableTileRendering) {\n            zoomFactor = 1;\n        }\n        var id = this.documentId + '_' + pageIndex;\n        var storedImage = this.pageImageDetails ? this.pageImageDetails[id + '_' + zoomFactor + '_imageUrl'] ? this.pageImageDetails[id + '_' + zoomFactor + '_imageUrl'] : this.getPinchZoomPage(pageIndex) : this.getPinchZoomPage(pageIndex);\n        var storedHyperlink = this.hyperlinkAndLinkAnnotation ? this.hyperlinkAndLinkAnnotation[id + '_hyperlinkAndLinkAnnotation'] ? this.hyperlinkAndLinkAnnotation[id + '_hyperlinkAndLinkAnnotation'] : this.getPinchZoomPage(pageIndex) : this.getPinchZoomPage(pageIndex);\n        var storedTextDetails = this.pageTextDetails ? this.pageTextDetails[id + '_textDetails'] ? this.pageTextDetails[id + '_textDetails'] : this.getPinchZoomPage(pageIndex) : this.getPinchZoomPage(pageIndex);\n        if (!storedImage) {\n            var storedTileData = this.getStoredTileImageDetails(pageIndex, 0, 0, zoomFactor);\n            if (storedTileData) {\n                storedImage = storedTileData;\n            }\n        }\n        var imageUrl = null;\n        var linkAnnotation = null;\n        var textDetails = null;\n        var mergedObj = null;\n        if (storedImage && storedHyperlink) {\n            imageUrl = JSON.parse(storedImage);\n            linkAnnotation = JSON.parse(storedHyperlink);\n            textDetails = JSON.parse(storedTextDetails);\n            mergedObj = Object.assign({}, imageUrl, linkAnnotation, textDetails);\n            this.isPinchZoomStorage = false;\n        }\n        return mergedObj;\n    };\n    /**\n     * @param canvas\n     * @private\n     */\n    // eslint-disable-next-line\n    PdfViewerBase.prototype.releaseCanvas = function (canvas) {\n        canvas.width = 1;\n        canvas.height = 1;\n        var ctx = canvas.getContext('2d');\n        if (ctx) {\n            ctx.clearRect(0, 0, 1, 1);\n        }\n    };\n    /**\n     * @param {string} moduleName - It describes about the module name\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.getModuleWarningMessage = function (moduleName) {\n        console.warn(\"[WARNING] :: Module '\" + moduleName + \"' is not available in PDF Viewer component! You either misspelled the module name or forgot to load it.\");\n    };\n    /**\n     * @param {any} annotationSelectorSettings - Gets annotationSelectorSettings\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.updateSelectorSettings = function (annotationSelectorSettings) {\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.resizerFillColor !== '#FF4081') {\n            annotationSelectorSettings.resizerFillColor = this.pdfViewer.annotationSelectorSettings.resizerFillColor;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.resizerBorderColor !== 'black') {\n            annotationSelectorSettings.resizerBorderColor = this.pdfViewer.annotationSelectorSettings.resizerBorderColor;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.selectionBorderColor !== '') {\n            annotationSelectorSettings.selectionBorderColor = this.pdfViewer.annotationSelectorSettings.selectionBorderColor;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.resizerSize !== 8) {\n            annotationSelectorSettings.resizerSize = this.pdfViewer.annotationSelectorSettings.resizerSize;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.resizerShape !== 'Square') {\n            annotationSelectorSettings.resizerShape = this.pdfViewer.annotationSelectorSettings.resizerShape;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.resizerCursorType !== null) {\n            annotationSelectorSettings.resizerCursorType = this.pdfViewer.annotationSelectorSettings.resizerCursorType;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.selectionBorderThickness !== 1) {\n            annotationSelectorSettings.selectionBorderThickness = this.pdfViewer.annotationSelectorSettings.selectionBorderThickness;\n        }\n        if (this.pdfViewer.annotationSelectorSettings && this.pdfViewer.annotationSelectorSettings.selectorLineDashArray.length !== 0) {\n            annotationSelectorSettings.selectorLineDashArray = this.pdfViewer.annotationSelectorSettings.selectorLineDashArray;\n        }\n    };\n    /**\n     * @param {any} annotation - Gets the annotation\n     * @private\n     * @returns {void}\n     */\n    PdfViewerBase.prototype.annotationSelectorSettingLoad = function (annotation) {\n        if (annotation.AnnotationType === 'shape') {\n            if (annotation.ShapeAnnotationType === 'Line') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.lineSettings.annotationSelectorSettings ?\n                    this.pdfViewer.lineSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Arrow') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.arrowSettings.annotationSelectorSettings ?\n                    this.pdfViewer.arrowSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Rectangle' || annotation.ShapeAnnotationType === 'Square') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.rectangleSettings.annotationSelectorSettings ?\n                    this.pdfViewer.rectangleSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Circle' || annotation.ShapeAnnotationType === 'Ellipse') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.circleSettings.annotationSelectorSettings ?\n                    this.pdfViewer.circleSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Polygon') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.polygonSettings.annotationSelectorSettings ?\n                    this.pdfViewer.polygonSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n        }\n        if (annotation.AnnotType === 'shape_measure') {\n            if (annotation.ShapeAnnotationType === 'Circle') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.radiusSettings.annotationSelectorSettings ?\n                    this.pdfViewer.radiusSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Line') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.distanceSettings.annotationSelectorSettings ?\n                    this.pdfViewer.distanceSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Polyline') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.perimeterSettings.annotationSelectorSettings ?\n                    this.pdfViewer.perimeterSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Polygon' && annotation.Indent === 'PolygonVolume') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.volumeSettings.annotationSelectorSettings ?\n                    this.pdfViewer.volumeSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n            else if (annotation.ShapeAnnotationType === 'Polygon') {\n                annotation.AnnotationSelectorSettings = this.pdfViewer.areaSettings.annotationSelectorSettings ?\n                    this.pdfViewer.areaSettings.annotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                this.updateSelectorSettings(annotation.AnnotationSelectorSettings);\n            }\n        }\n    };\n    /**\n     * @param {any} pageAnotationBounds - Gets pageAnotationBounds\n     * @param {any} baseAnnotationBounds - Gets baseAnnotationBounds\n     * @private\n     * @returns {boolean} - boolean\n     */\n    PdfViewerBase.prototype.boundsCalculation = function (pageAnotationBounds, baseAnnotationBounds) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pageAnotationBounds) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.x) &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.y) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.width) &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.height) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds) &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.y) &&\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.height) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(baseAnnotationBounds.width)) {\n            return false;\n        }\n        var left = parseFloat(baseAnnotationBounds.x.toFixed(10));\n        var top = parseFloat(baseAnnotationBounds.y.toFixed(10));\n        var width = parseFloat(baseAnnotationBounds.width.toFixed(10));\n        var height = parseFloat(baseAnnotationBounds.height.toFixed(10));\n        var pageLeft = pageAnotationBounds.x ? parseFloat(pageAnotationBounds.x.toFixed(10)) :\n            parseFloat(pageAnotationBounds.left.toFixed(10));\n        var pageTop = pageAnotationBounds.y ? parseFloat(pageAnotationBounds.y.toFixed(10)) :\n            parseFloat(pageAnotationBounds.top.toFixed(10));\n        var pageWidth = parseFloat(pageAnotationBounds.width.toFixed(10));\n        var pageHeight = parseFloat(pageAnotationBounds.height.toFixed(10));\n        return (left !== pageLeft || top !== pageTop || width !== pageWidth || height !== pageHeight);\n    };\n    /**\n     * @private\n     */\n    PdfViewerBase.sessionStorageManager = new _pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_14__.PdfViewerSessionStorage(false);\n    return PdfViewerBase;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-base.js?");

/***/ })

}]);