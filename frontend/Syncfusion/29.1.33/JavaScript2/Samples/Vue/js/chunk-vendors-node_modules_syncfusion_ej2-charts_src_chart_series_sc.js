"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_series_sc"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/scatter-series.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/scatter-series.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScatterSeries: () => (/* binding */ ScatterSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n\n\n\n/**\n * The `ScatterSeries` module is used to render the scatter series.\n */\nvar ScatterSeries = /** @class */ (function () {\n    function ScatterSeries() {\n    }\n    /**\n     * Renders the series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @returns {void}\n     * @private\n     */\n    ScatterSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        // Scatter series DataLabel is not rendered after selecting StackingColumn\n        series.isRectSeries = false;\n        var marker = series.marker;\n        var visiblePoints = this.enableComplexProperty(series);\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.TransformToVisible : _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint;\n        var scatterBorder = {\n            width: this.isLineShapeMarker(marker.shape) ? series.width : series.border.width,\n            color: this.isLineShapeMarker(marker.shape) ? series.interior : series.border.color\n        };\n        for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {\n            var point = visiblePoints_1[_i];\n            this.renderPoint(series, point, isInverted, getCoordinate, scatterBorder, visiblePoints);\n        }\n    };\n    ScatterSeries.prototype.renderPoint = function (series, point, isInverted, getCoordinate, scatterBorder, visiblePoints) {\n        var redraw = series.chart.redraw;\n        var argsData;\n        var startLocation = (redraw && point.symbolLocations) ? point.symbolLocations[0] : null;\n        point.symbolLocations = [];\n        point.regions = [];\n        if (point.visible && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {\n            argsData = {\n                cancel: false, name: _common_model_constants__WEBPACK_IMPORTED_MODULE_2__.pointRender, series: series, point: point,\n                fill: series.setPointColor(point, series.interior),\n                border: series.setBorderColor(point, { width: scatterBorder.width, color: scatterBorder.color }),\n                height: series.marker.height, width: series.marker.width, shape: series.marker.shape\n            };\n            series.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_2__.pointRender, argsData);\n            if (!argsData.cancel) {\n                point.symbolLocations.push(getCoordinate(point.xValue, point.yValue, series.xAxis, series.yAxis, isInverted, series));\n                point.color = argsData.fill;\n                this.refresh(series, point, argsData, startLocation);\n            }\n            else {\n                point.marker = { visible: true };\n            }\n        }\n    };\n    ScatterSeries.prototype.updateDirection = function (series, point, isInverted) {\n        var marker = series.marker;\n        var visiblePoints = this.enableComplexProperty(series);\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.TransformToVisible : _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint;\n        var scatterBorder = {\n            width: this.isLineShapeMarker(marker.shape) ? series.width : series.border.width,\n            color: this.isLineShapeMarker(marker.shape) ? series.interior : series.border.color\n        };\n        for (var i = 0; i < point.length; i++) {\n            this.renderPoint(series, series.points[point[i]], isInverted, getCoordinate, scatterBorder, visiblePoints);\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    ScatterSeries.prototype.isLineShapeMarker = function (shape) {\n        return shape === 'HorizontalLine' || shape === 'VerticalLine' || shape === 'Cross';\n    };\n    /**\n     * Enables complex properties for the series.\n     *\n     * @param {Series} series - The series for which complex properties need to be enabled.\n     * @returns {Points[]} - Returns the updated points array.\n     * @private\n     */\n    ScatterSeries.prototype.enableComplexProperty = function (series) {\n        var tempPoints2 = [];\n        var tempPoints = [];\n        var yVisibleRange = series.yAxis.visibleRange;\n        var xVisibleRange = series.xAxis.visibleRange;\n        var areaBounds = series.clipRect;\n        var seriesPoints = series.points;\n        var yTolerance = Math.abs(yVisibleRange.delta / areaBounds.height);\n        var xTolerance = Math.abs(xVisibleRange.delta / areaBounds.width);\n        var prevYValue = (seriesPoints[0] && seriesPoints[0].y > yTolerance) ? 0 : yTolerance;\n        var prevXValue = (seriesPoints[0] && seriesPoints[0].x > xTolerance) ? 0 : xTolerance;\n        var yVal = 0;\n        var xVal = 0;\n        for (var _i = 0, seriesPoints_1 = seriesPoints; _i < seriesPoints_1.length; _i++) {\n            var currentPoint = seriesPoints_1[_i];\n            if (!currentPoint.symbolLocations) {\n                currentPoint.symbolLocations = [];\n            }\n            yVal = currentPoint.yValue ? currentPoint.yValue : yVisibleRange.min;\n            xVal = currentPoint.xValue ? currentPoint.xValue : xVisibleRange.min;\n            if (Math.abs(prevYValue - yVal) >= yTolerance || Math.abs(prevXValue - xVal) >= xTolerance) {\n                tempPoints.push(currentPoint);\n                prevYValue = yVal;\n                prevXValue = xVal;\n            }\n        }\n        var currentTempPoint;\n        for (var i = 0; i < tempPoints.length; i++) {\n            currentTempPoint = tempPoints[i];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currentTempPoint.x) || currentTempPoint.x === '') {\n                continue;\n            }\n            else {\n                tempPoints2.push(currentTempPoint);\n            }\n        }\n        return tempPoints2;\n    };\n    /**\n     * To append scatter element\n     *\n     * @param {Series} series series\n     * @param {Points} point point\n     * @param {IPointRenderEventArgs} argsData argsData\n     * @param {ChartLocation} startLocation startLocation\n     * @returns {void}\n     */\n    ScatterSeries.prototype.refresh = function (series, point, argsData, startLocation) {\n        var chart = series.chart;\n        var circlePath;\n        var previousPath;\n        var marker = series.marker;\n        var imageURL = argsData.point.marker.imageUrl || marker.imageUrl;\n        var shapeOption = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(chart.element.id + '_Series_' + series.index + '_Point_' + point.index, argsData.fill, argsData.border.width, (series.chart.enableCanvas && !argsData.border.color) ? argsData.fill :\n            argsData.border.color, series.opacity, series.border.dashArray);\n        if (chart.redraw && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getElement)(shapeOption.id)) {\n            circlePath = argsData.shape === 'Circle' ? 'c' : '';\n            previousPath = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getElement)(shapeOption.id).getAttribute('d');\n            var scatterElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getElement)(shapeOption.id);\n            startLocation = {\n                x: +scatterElement.getAttribute(circlePath + 'x'), y: +scatterElement.getAttribute(circlePath + 'y')\n            };\n        }\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.drawSymbol)(point.symbolLocations[0], argsData.shape, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(argsData.width, argsData.height), imageURL, shapeOption, point.x.toString() + ':' + point.yValue.toString(), series.chart.renderer, series.clipRect);\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.appendChildElement)(series.chart.enableCanvas, series.seriesElement, element, chart.redraw, true, circlePath + 'x', circlePath + 'y', startLocation, previousPath, false, false, null, chart.duration, true);\n        point.regions.push(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(point.symbolLocations[0].x - marker.width, point.symbolLocations[0].y - marker.height, 2 * marker.width, 2 * marker.height));\n        point.marker = {\n            border: argsData.border, fill: argsData.fill,\n            height: argsData.height, visible: true,\n            width: argsData.width, shape: argsData.shape, imageUrl: imageURL\n        };\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    ScatterSeries.prototype.doAnimation = function (series) {\n        var duration = series.animation.duration;\n        var delay = series.animation.delay;\n        var rectElements = series.seriesElement.childNodes;\n        var count = 1;\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (!point.symbolLocations.length || !rectElements[count]) {\n                continue;\n            }\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.markerAnimate)(rectElements[count], delay, duration, series, point.index, point.symbolLocations[0], false);\n            count++;\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    ScatterSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'ScatterSeries';\n    };\n    /**\n     * To destroy the scatter.\n     *\n     * @returns {void}\n     * @private\n     */\n    ScatterSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return ScatterSeries;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/scatter-series.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SplineAreaSeries: () => (/* binding */ SplineAreaSeries)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _spline_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spline-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/**\n * The `SplineAreaSeries` module is used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineAreaSeries, _super);\n    function SplineAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the splineArea series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = null;\n        var startPoint1 = null;\n        var pt2;\n        var bpt1;\n        var bpt2;\n        var controlPt1;\n        var controlPt2;\n        var realPoints = [];\n        var points = [];\n        var point;\n        var pointIndex = 0;\n        realPoints = this.filterEmptyPoints(series);\n        var emptyPointDirection = '';\n        for (var i = 0; i < realPoints.length; i++) {\n            point = realPoints[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = pointIndex;\n                pointIndex++;\n                points.push(point);\n            }\n        }\n        var pointsLength = points.length;\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.TransformToVisible : _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.getPoint;\n        var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue :\n            Math.max(series.yAxis.visibleRange.min, 0);\n        for (var i = 0; i < pointsLength; i++) {\n            point = points[i];\n            point.symbolLocations = [];\n            point.regions = [];\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            if (point.visible &&\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.withInRange)(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                if (firstPoint) {\n                    controlPt1 = series.drawPoints[previous].controlPoint1;\n                    controlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n                    bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n                    direction = direction.concat('C ' + bpt1.x + ' '\n                        + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n                }\n                else {\n                    // Start point for the current path\n                    startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                    direction += ('M ' + startPoint.x + ' ' + startPoint.y + ' ');\n                    // First Point to draw the area path\n                    startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    direction += ('L ' + startPoint1.x + ' ' + startPoint1.y + ' ');\n                }\n                this.storePointLocation(point, series, isInverted, getCoordinate);\n                firstPoint = point;\n            }\n            else {\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n            if (((i + 1 < pointsLength && !points[i + 1].visible) || i === pointsLength - 1)\n                && pt2 && startPoint) {\n                startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                direction = direction.concat('L ' + (startPoint.x) + ' ' + (startPoint.y) + ' ');\n            }\n        }\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction), series, '');\n        /**\n         * To draw border for the path directions of area\n         */\n        if (series.border.width !== 0) {\n            emptyPointDirection = this.removeEmptyPointsBorder(this.getBorderDirection(direction));\n            this[pointAnimate ? 'addPath' : 'appendLinePath'](new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', series.border.width, series.border.color ? series.border.color : series.interior, 1, series.border.dashArray, emptyPointDirection), series, '');\n        }\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * To animate point for spline area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        for (var i = 0; i < point.length; i++) {\n            if (series.marker && series.marker.visible) {\n                series.chart.markerRender.renderMarker(series, series.points[point[i]], series.points[point[i]].symbolLocations[0], null, true);\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @param {ChartLocation[]} [firstSymbol] - The location of the first symbol.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            if (points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n                points.previousDirection = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n            }\n            if ((options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n                options.d = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n            }\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        var lastPointBeforeCurve = void 0;\n                        if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n                            lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n                        }\n                        else {\n                            lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n                        }\n                        var curveCommand = 'C ' + lastPointBeforeCurve + lastPointBeforeCurve + lastPointBeforeCurve;\n                        if (options.id.indexOf('border') !== -1) {\n                            startPathCommands.push(curveCommand);\n                        }\n                        else {\n                            startPathCommands.splice(startPathCommands.length - 1, 0, curveCommand);\n                        }\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        var firstPointBeforeCurve = void 0;\n                        if (series.removedPointIndex === series.points.length) {\n                            if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n                                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n                            }\n                            else {\n                                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n                            }\n                            var curveCommand = 'C ' + firstPointBeforeCurve + firstPointBeforeCurve + firstPointBeforeCurve;\n                            if (options.id.indexOf('border') !== -1) {\n                                endPathCommands.push(curveCommand);\n                            }\n                            else {\n                                endPathCommands.splice(endPathCommands.length - 1, 0, curveCommand);\n                            }\n                        }\n                        else {\n                            if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4) {\n                                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ');\n                            }\n                            else {\n                                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ');\n                            }\n                            endPathCommands.splice((options.id.indexOf('border') !== -1 ? 1 : 2), 0, firstPointBeforeCurve);\n                        }\n                    }\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.animateAddPoints)(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SplineAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SplineAreaSeries';\n    };\n    /**\n     * To destroy the spline.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return SplineAreaSeries;\n}(_spline_base__WEBPACK_IMPORTED_MODULE_2__.SplineBase));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js?");

/***/ })

}]);