"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart3d_legend_legend_js-259c1d90"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart3DLegendSettings: () => (/* binding */ Chart3DLegendSettings),\n/* harmony export */   Legend3D: () => (/* binding */ Legend3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _common_legend_legend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Chart legend\n */\n\n\n\n\n\n\n\n\n\n/**\n * Configures the legends in charts.\n */\nvar Chart3DLegendSettings = /** @class */ (function (_super) {\n    __extends(Chart3DLegendSettings, _super);\n    function Chart3DLegendSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DLegendSettings.prototype, \"visible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ x: 0, y: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Location)\n    ], Chart3DLegendSettings.prototype, \"location\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], Chart3DLegendSettings.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Series')\n    ], Chart3DLegendSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(8)\n    ], Chart3DLegendSettings.prototype, \"padding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"itemPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Center')\n    ], Chart3DLegendSettings.prototype, \"alignment\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], Chart3DLegendSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], Chart3DLegendSettings.prototype, \"shapeHeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], Chart3DLegendSettings.prototype, \"shapeWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], Chart3DLegendSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ left: 0, right: 0, top: 0, bottom: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Margin)\n    ], Chart3DLegendSettings.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ left: 0, right: 0, top: 0, bottom: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.ContainerPadding)\n    ], Chart3DLegendSettings.prototype, \"containerPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(8)\n    ], Chart3DLegendSettings.prototype, \"shapePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('transparent')\n    ], Chart3DLegendSettings.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], Chart3DLegendSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DLegendSettings.prototype, \"toggleVisibility\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DLegendSettings.prototype, \"enableHighlight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], Chart3DLegendSettings.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], Chart3DLegendSettings.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Top')\n    ], Chart3DLegendSettings.prototype, \"titlePosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], Chart3DLegendSettings.prototype, \"textWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Ellipsis')\n    ], Chart3DLegendSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(100)\n    ], Chart3DLegendSettings.prototype, \"maximumTitleWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], Chart3DLegendSettings.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Chart3DLegendSettings.prototype, \"enablePages\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DLegendSettings.prototype, \"isInversed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Chart3DLegendSettings.prototype, \"reverse\", void 0);\n    return Chart3DLegendSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The `Legend` module is used to render legend for the chart.\n */\nvar Legend3D = /** @class */ (function (_super) {\n    __extends(Legend3D, _super);\n    function Legend3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.library = _this;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for legend module.\n     *\n     * @returns {void}\n     */\n    Legend3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on('click', this.click, this);\n        this.chart.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd, this);\n    };\n    /**\n     * Unbinding events for legend module.\n     *\n     * @returns {void}\n     */\n    Legend3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('click', this.click);\n        this.chart.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEnd);\n    };\n    /**\n     * To handle mosue move for legend module\n     *\n     * @param {MouseEvent} e - Specifies the mouse event.\n     * @returns {void}\n     */\n    Legend3D.prototype.mouseMove = function (e) {\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n            this.move(e);\n            if (this.chart.highlight3DModule && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n                    this.legendID + '_shape_', this.legendID + '_g_'];\n                var targetId = e.target.id;\n                var index = void 0;\n                for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n                    var id = legendItemsId_1[_i];\n                    if (targetId.indexOf(id) > -1) {\n                        index = parseInt(targetId.split(id)[1], 10);\n                        this.chart.highlight3DModule.legendSelection(this.chart, index, e.target, e.type);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To handle mouse end for legend module\n     *\n     * @param {MouseEvent} e - Specifies the mouse event.\n     * @returns {void}\n     */\n    Legend3D.prototype.mouseEnd = function (e) {\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\n            this.move(e);\n        }\n    };\n    /**\n     * Retrieves and returns legend options for the visible series within a 3D chart.\n     *\n     * @param {Chart3DSeries[]} visibleSeriesCollection - The collection of visible series to extract legend options from.\n     * @param {Chart3D} chart - The 3D chart containing the series and legend.\n     * @returns {void}\n     */\n    Legend3D.prototype.getLegendOptions = function (visibleSeriesCollection, chart) {\n        this.legendCollections = [];\n        var seriesType;\n        var fill;\n        this.isRtlEnable = chart.enableRtl;\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n        if (visibleSeriesCollection.length > 1) {\n            this.legend.mode = 'Series';\n        }\n        for (var _i = 0, visibleSeriesCollection_1 = visibleSeriesCollection; _i < visibleSeriesCollection_1.length; _i++) {\n            var series = visibleSeriesCollection_1[_i];\n            if (this.legend.mode === 'Series') {\n                seriesType = series.type;\n                // To set legend color when use pointColorMapping\n                fill = (series.pointColorMapping && series.points.length > 0) ?\n                    (series.points[0].interior ? series.points[0].interior : series.interior) : series.interior;\n                this.legendCollections.push(new _common_legend_legend__WEBPACK_IMPORTED_MODULE_2__.LegendOptions(series.name, fill, series.legendShape, series.visible, seriesType, series.legendImageUrl ? series.legendImageUrl : '', 'None', false, null, null));\n            }\n            else if (this.legend.mode === 'Point') {\n                var _loop_1 = function (points) {\n                    seriesType = series.type;\n                    fill = points.interior ? points.interior : series.interior;\n                    if (this_1.legendCollections.filter(function (i) { return i.text === points.x.toString(); }).length === 0) {\n                        this_1.legendCollections.push(new _common_legend_legend__WEBPACK_IMPORTED_MODULE_2__.LegendOptions(points.x.toString(), fill, series.legendShape, points.visible, seriesType, '', 'None', false));\n                    }\n                };\n                var this_1 = this;\n                for (var _a = 0, _b = series.points; _a < _b.length; _a++) {\n                    var points = _b[_a];\n                    _loop_1(points);\n                }\n            }\n        }\n        if (this.isReverse) {\n            this.legendCollections.reverse();\n        }\n    };\n    /**\n     * Calculates and retrieves the legend bounds within the available size for the provided legend settings.\n     *\n     * @param {Size} availableSize - The available size for positioning the legend.\n     * @param {Rect} legendBounds - The initial bounds of the legend.\n     * @param {Chart3DLegendSettingsModel} legend - The customization option for the legend.\n     * @returns {void}\n     */\n    Legend3D.prototype.get3DLegendBounds = function (availableSize, legendBounds, legend) {\n        this.calculateLegendTitle(legend, legendBounds);\n        this.isTitle = legend.title ? true : false;\n        this.chartRowCount = 1;\n        this.rowHeights = [];\n        this.columnHeights = [];\n        this.pageHeights = [];\n        var padding = legend.padding;\n        var titlePosition = legend.titlePosition;\n        var extraHeight = 0;\n        var legendOption;\n        var extraWidth = 0;\n        var arrowWidth = this.arrowWidth;\n        var arrowHeight = this.arrowHeight;\n        var verticalArrowSpace = this.isVertical && !legend.enablePages ? arrowHeight : 0;\n        var titleSpace = this.isTitle && titlePosition === 'Top' ? this.legendTitleSize.height + this.fivePixel : 0;\n        titleSpace = this.isTitle && this.isVertical && titlePosition !== 'Top' ? this.legendTitleSize.height + this.fivePixel : titleSpace;\n        if (!this.isVertical) {\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\n        }\n        else {\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\n        }\n        legendBounds.height += (extraHeight);\n        legendBounds.width += extraWidth;\n        var shapeWidth = legend.shapeWidth;\n        var shapePadding = legend.shapePadding;\n        var maximumWidth = 0;\n        var rowWidth = 0;\n        var legendWidth = 0;\n        var columnHeight = 0;\n        var columnCount = 0;\n        var rowCount = 0;\n        var titlePlusArrowSpace = 0;\n        var legendEventArgs;\n        var render = false;\n        this.maxItemHeight = Math.max((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_4__.measureText)('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n        for (var i = 0; i < this.legendCollections.length; i++) {\n            legendOption = this.legendCollections[i];\n            if (_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.regSub.test(legendOption.text)) {\n                legendOption.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getUnicodeText)(legendOption.text, _common_model_constants__WEBPACK_IMPORTED_MODULE_5__.regSub);\n            }\n            if (_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.regSup.test(legendOption.text)) {\n                legendOption.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getUnicodeText)(legendOption.text, _common_model_constants__WEBPACK_IMPORTED_MODULE_5__.regSup);\n            }\n            legendEventArgs = {\n                fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\n                cancel: false\n            };\n            this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.legendRender, legendEventArgs);\n            legendOption.render = !legendEventArgs.cancel;\n            legendOption.text = legendEventArgs.text;\n            legendOption.fill = legendEventArgs.fill;\n            legendOption.shape = legendEventArgs.shape;\n            legendOption.markerShape = 'None';\n            legendOption.textSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_4__.measureText)(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n            shapeWidth = legendOption.text ? legend.shapeWidth : 0;\n            shapePadding = legendOption.text ? legend.shapePadding : 0;\n            if (legendOption.render && legendOption.text) {\n                render = true;\n                legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth :\n                    legendOption.textSize.width) + (!this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\n                rowWidth = rowWidth + legendWidth;\n                if (!legend.enablePages && !this.isVertical) {\n                    titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n                    titlePlusArrowSpace += arrowWidth;\n                }\n                this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n                if (legendBounds.width < (padding + rowWidth + titlePlusArrowSpace) || this.isVertical) {\n                    maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - (this.isVertical ? 0 : legendWidth)));\n                    if (rowCount === 0 && (legendWidth !== rowWidth)) {\n                        rowCount = 1;\n                    }\n                    rowWidth = this.isVertical ? 0 : legendWidth;\n                    rowCount++;\n                    columnCount = 0;\n                    columnHeight = verticalArrowSpace;\n                }\n                var len = (rowCount > 0 ? (rowCount - 1) : 0);\n                this.rowHeights[len] = Math.max((this.rowHeights[len] ? this.rowHeights[len] : 0), legendOption.textSize.height);\n                this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                    this.columnHeights[columnCount] : 0) +\n                    legendOption.textSize.height + (this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\n                columnCount++;\n            }\n        }\n        columnHeight = Math.max.apply(null, this.columnHeights) + padding + titleSpace;\n        columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleSpace);\n        this.isPaging = legendBounds.height < columnHeight;\n        if (this.isPaging && !legend.enablePages) {\n            if (this.isVertical) {\n                columnHeight += columnHeight;\n            }\n            else {\n                columnHeight = (this.maxItemHeight + padding) + padding + (titlePosition === 'Top' ? titleSpace : 0);\n            }\n        }\n        this.totalPages = rowCount;\n        if (!this.isPaging && !this.isVertical) {\n            rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\n        }\n        if (render) {\n            this.setBounds(Math.max((rowWidth + padding), maximumWidth), columnHeight, legend, legendBounds);\n        }\n        else {\n            this.setBounds(0, 0, legend, legendBounds);\n        }\n    };\n    /**\n     * Calculates and retrieves the height of the legend within the specified legend bounds and based on the provided options and settings.\n     *\n     * @param {LegendOptions} legendOption - The options and data for the legend.\n     * @param {Chart3DLegendSettingsModel} legend - The customization options for the legend.\n     * @param {Rect} legendBounds - The bounds of the legend.\n     * @param {number} rowWidth - The width of a row within the legend.\n     * @param {number} legendHeight - The initial height of the legend.\n     * @param {number} padding - The padding applied to the legend.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.getLegendHeight = function (legendOption, legend, legendBounds, rowWidth, legendHeight, padding) {\n        var legendWidth = legendOption.textSize.width;\n        var textPadding = legend.shapePadding + (padding * 2) + legend.shapeWidth;\n        switch (legend.textWrap) {\n            case 'Wrap':\n            case 'AnyWhere':\n                if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > legendBounds.width) {\n                    legendOption.textCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textWrap)(legendOption.text, (legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, (legendBounds.width - textPadding)) :\n                        (legendBounds.width - textPadding)), legend.textStyle, this.chart.enableRtl, null, null, this.chart.themeStyle.legendLabelFont);\n                }\n                else {\n                    legendOption.textCollection.push(legendOption.text);\n                }\n                legendOption.textSize.height = (legendHeight * legendOption.textCollection.length);\n                break;\n        }\n    };\n    /**\n     * Calculates and retrieves the render point (position) for the legend item within the legend area.\n     *\n     * @param {LegendOptions} legendOption - The options and data for the legend item.\n     * @param {ChartLocation} start - The starting point for positioning the legend item.\n     * @param {number} textPadding - The padding applied to the legend text.\n     * @param {LegendOptions} prevLegend - The previous legend item for reference.\n     * @param {Rect} rect - The bounding rectangle of the legend area.\n     * @param {number} count - The index of the legend item within the legend.\n     * @param {number} firstLegend - The index of the first legend item.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n        var padding = this.legend.padding;\n        var textWidth = textPadding + (this.legend.maximumLabelWidth ?\n            this.legend.maximumLabelWidth : prevLegend.textSize.width);\n        var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\n        if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ?\n            this.legend.maximumLabelWidth : legendOption.textSize.width) + textPadding - this.itemPadding, rect) || this.isVertical) {\n            legendOption.location.x = start.x;\n            if (count !== firstLegend) {\n                this.chartRowCount++;\n            }\n            legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\n                prevLegend.location.y + (this.isVertical ? prevLegend.textSize.height :\n                    this.rowHeights[(this.chartRowCount - 2)]) + (this.isVertical ? this.itemPadding : padding);\n        }\n        else {\n            legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\n            legendOption.location.y = prevLegend.location.y;\n        }\n        var availwidth = (!this.isRtlEnable) ? (this.legendBounds.x + this.legendBounds.width) - (legendOption.location.x +\n            textPadding - this.itemPadding - this.legend.shapeWidth / 2) :\n            (legendOption.location.x - textPadding + this.itemPadding + (this.legend.shapeWidth / 2)) - this.legendBounds.x;\n        if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n            availwidth = this.legendBounds.width - legendOption.location.x - this.fivePixel;\n        }\n        availwidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availwidth) : availwidth;\n        if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n            legendOption.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textTrim)(+availwidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n        }\n    };\n    /**\n     * Checks whether the previous bound  width is within the given rectangular bounds.\n     *\n     * @param {number} previousBound - The previous bound (position) of an element.\n     * @param {number} textWidth - The width of the text or element to be positioned.\n     * @param {Rect} rect - The rectangular bounds to check against.\n     * @returns {boolean} - True if the element is within the bounds; otherwise, false.\n     * @private\n     */\n    Legend3D.prototype.isWithinBounds = function (previousBound, textWidth, rect) {\n        if (!this.isRtlEnable) {\n            return (previousBound + textWidth) > (rect.x + rect.width + (this.legend.shapeWidth / 2));\n        }\n        else {\n            return (previousBound - textWidth) < (rect.x - (this.legend.shapeWidth / 2));\n        }\n    };\n    /**\n     * Handles the click event on a legend item at the specified index.\n     *\n     * @param {number} index - The index of the legend item clicked.\n     * @param {Event | PointerEvent} event - The click or pointer event.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.LegendClick = function (index, event) {\n        var chart = this.chart;\n        var seriesIndex = chart.legendSettings.mode === 'Series' ? index : 0;\n        var legendIndex = !this.isReverse ? index : (this.legendCollections.length - 1) - index;\n        var series = chart.visibleSeries[seriesIndex];\n        var legend = this.legendCollections[legendIndex];\n        var changeDetection = 'isProtectedOnChange';\n        if (chart.legendSettings.mode === 'Series') {\n            var legendClickArgs = {\n                legendText: legend.text, legendShape: legend.shape,\n                series: series, cancel: false\n            };\n            this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.legendClick, legendClickArgs);\n            series.legendShape = legendClickArgs.legendShape;\n            if (!legendClickArgs.cancel) {\n                if (series.fill !== null) {\n                    chart.visibleSeries[index].interior = series.fill;\n                }\n                if (chart.legendSettings.toggleVisibility) {\n                    series.chart[changeDetection] = true;\n                    this.changeSeriesVisiblity(series, series.visible);\n                    legend.visible = series.visible;\n                    this.refreshLegendToggle(chart, series);\n                }\n                else if (chart.highlight3DModule) {\n                    chart.highlight3DModule.legendSelection(chart, index, event.target, event.type);\n                }\n                else if (chart.selection3DModule) {\n                    chart.selection3DModule.legendSelection(chart, index, event.target, event.type);\n                }\n                series.chart[changeDetection] = false;\n            }\n        }\n        else if (chart.legendSettings.mode === 'Point') {\n            var point = series.points[index];\n            var legendClickArgs = {\n                legendText: legend.text, legendShape: legend.shape,\n                series: series, cancel: false\n            };\n            this.chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_5__.legendClick, legendClickArgs);\n            if (chart.legendSettings.toggleVisibility && !legendClickArgs.cancel) {\n                point.visible = !point.visible;\n                var legendOption = this.legendCollections[index];\n                legendOption.visible = point.visible;\n                this.refreshLegendToggle(chart, series);\n            }\n        }\n    };\n    /**\n     * Refreshes the legend toggle behavior for the specified series in a 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart containing the legend and series.\n     * @param {Chart3DSeries} series - The series for which the legend toggle behavior is refreshed.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.refreshLegendToggle = function (chart, series) {\n        var selectedDataIndexes = [];\n        if (chart.selection3DModule) {\n            selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], chart.selection3DModule.selectedDataIndexes, null, true);\n        }\n        if ((chart.svgObject.childNodes.length > 0)) {\n            while (chart.svgObject.lastChild) {\n                chart.svgObject.removeChild(chart.svgObject.lastChild);\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(chart.svgObject);\n        }\n        chart.animateSeries = false;\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_4__.getElement)(chart.element.id + '_Secondary_Element').querySelectorAll('.ejSVGTooltip')[0]);\n        this.redrawSeriesElements(series, chart);\n        chart.removeSvg();\n        chart.refreshAxis();\n        series.refreshAxisLabel();\n        this.refreshSeries(chart.visibleSeries);\n        chart.polygons = [];\n        chart.refreshBound();\n        chart.trigger('loaded', { chart: chart });\n        if (selectedDataIndexes.length > 0) {\n            chart.selection3DModule.selectedDataIndexes = selectedDataIndexes;\n            chart.selection3DModule.redrawSelection(chart, chart.selectionMode);\n        }\n        if (chart.highlight3DModule && chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) {\n            chart.highlight3DModule.redrawSelection(chart, chart.highlightMode);\n        }\n        chart.redraw = false;\n    };\n    /**\n     * Changes the visibility of the specified series in a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The series whose visibility is being changed.\n     * @param {boolean} visibility - The new visibility state for the series (true for visible, false for hidden).\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.changeSeriesVisiblity = function (series, visibility) {\n        series.visible = !visibility;\n        if (this.isSecondaryAxis(series.xAxis)) {\n            series.xAxis.internalVisibility = series.xAxis.series.some(function (value) { return (value.visible); });\n        }\n        if (this.isSecondaryAxis(series.yAxis)) {\n            series.yAxis.internalVisibility = series.yAxis.series.some(function (value) { return (value.visible); });\n        }\n    };\n    /**\n     * Checks whether the specified axis is a secondary axis within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The axis to be checked.\n     * @returns {boolean} - True if the axis is a secondary axis, otherwise, false.\n     * @private\n     */\n    Legend3D.prototype.isSecondaryAxis = function (axis) {\n        return (this.chart.axes.indexOf(axis) > -1);\n    };\n    /**\n     * Redraws the elements of a 3D series on the chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to redraw.\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.redrawSeriesElements = function (series, chart) {\n        if (!chart.redraw) {\n            return null;\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(chart.element.id + '_Series_' + (series.index === undefined ? series.category : series.index) +\n            '_DataLabelCollections');\n    };\n    /**\n     * Refreshes the position information of each series in a collection.\n     *\n     * @param {Chart3DSeries[]} seriesCollection - The collection of 3D series to refresh.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.refreshSeries = function (seriesCollection) {\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            series.position = undefined;\n        }\n    };\n    /**\n     * To show the tooltip for the trimmed text in legend.\n     *\n     * @param {Event | PointerEvent} event - Specifies the event.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.click = function (event) {\n        if (!this.chart.legendSettings.visible) {\n            return;\n        }\n        var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ?\n            event.target.firstChild['id'] : event.target.id;\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n            this.legendID + '_shape_'];\n        var seriesIndex;\n        for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n            var id = legendItemsId_2[_i];\n            if (targetId.indexOf(id) > -1) {\n                seriesIndex = parseInt(targetId.split(id)[1], 10);\n                this.LegendClick(seriesIndex, event);\n                break;\n            }\n        }\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n            this.changePage(event, true);\n        }\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n            this.changePage(event, false);\n        }\n    };\n    /**\n     * Get module name\n     *\n     * @returns {string} - Returns the module name\n     */\n    Legend3D.prototype.getModuleName = function () {\n        return 'Legend3D';\n    };\n    /**\n     * To destroy the legend module.\n     *\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Legend3D;\n}(_common_legend_legend__WEBPACK_IMPORTED_MODULE_2__.BaseLegend));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js?");

/***/ })

}]);