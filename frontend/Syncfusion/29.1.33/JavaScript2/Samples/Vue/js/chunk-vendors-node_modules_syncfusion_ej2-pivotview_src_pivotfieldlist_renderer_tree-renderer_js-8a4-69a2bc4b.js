"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pivotview_src_pivotfieldlist_renderer_tree-renderer_js-8a4-69a2bc4b"],{

/***/ "./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/tree-renderer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/tree-renderer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TreeViewRenderer: () => (/* binding */ TreeViewRenderer)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/base/css-constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/css-constant.js\");\n/* harmony import */ var _common_base_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/base/constant */ \"./node_modules/@syncfusion/ej2-pivotview/src/common/base/constant.js\");\n/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _base_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../base/util */ \"./node_modules/@syncfusion/ej2-pivotview/src/base/util.js\");\n\n\n\n\n\n\n\n\n/**\n * Module to render Field List\n */\n/** @hidden */\nvar TreeViewRenderer = /** @class */ (function () {\n    /** Constructor for render module\n     *\n     * @param {PivotFieldList} parent - Instance of field list.\n     */\n    function TreeViewRenderer(parent) {\n        this.selectedNodes = [];\n        this.isSearching = false;\n        this.parentIDs = [];\n        this.isSpaceKey = false;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * Initialize the field list tree rendering\n     *\n     * @param {number} axis - Axis position.\n     * @returns {void}\n     * @private\n     */\n    TreeViewRenderer.prototype.render = function (axis) {\n        this.parentElement = this.parent.dialogRenderer.parentElement;\n        this.fieldListSort = this.parent.pivotGridModule ?\n            this.parent.pivotGridModule.defaultFieldListOrder : this.parent.defaultFieldListOrder;\n        this.fieldListSort = this.fieldListSort === 'Ascending' ? 'Ascend' :\n            this.fieldListSort === 'Descending' ? 'Descend' : 'None';\n        if (!this.parent.isAdaptive) {\n            var fieldTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_TABLE_CLASS + ' ' + (this.parent.dataType === 'olap' ? _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OLAP_FIELD_TABLE_CLASS : '')\n            });\n            var treeHeader = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_HEADER_CLASS,\n                attrs: { title: this.parent.localeObj.getConstant('allFields') }\n            });\n            treeHeader.innerText = this.parent.localeObj.getConstant('allFields');\n            var treeOuterDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_TREE_OUTER_DIV_CLASS + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.TREE_CONTAINER\n            });\n            this.treeViewElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                id: this.parent.element.id + '_TreeView',\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_CLASS + ' ' + (this.parent.dataType === 'olap' ? _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OLAP_FIELD_LIST_CLASS : '')\n            });\n            var fieldHeaderWrappper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_HEADER_CONTAINER_CLASS });\n            fieldHeaderWrappper.appendChild(treeHeader);\n            fieldTable.appendChild(fieldHeaderWrappper);\n            this.updateSortElements(fieldHeaderWrappper);\n            if (this.parent.enableFieldSearching) {\n                var searchWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    id: this.parent.element.id + '_SearchDiv', attrs: { 'tabindex': '-1' },\n                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_SEARCH_CLASS\n                });\n                var searchInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { attrs: { 'type': 'text' } });\n                searchWrapper.appendChild(searchInput);\n                this.fieldSearch = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_5__.TextBox({\n                    placeholder: this.parent.localeObj.getConstant('search'),\n                    enableRtl: this.parent.enableRtl,\n                    locale: this.parent.locale,\n                    cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_SEARCH_INPUT_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''),\n                    input: this.textChange.bind(this),\n                    showClearButton: true\n                });\n                this.fieldSearch.isStringTemplate = true;\n                this.fieldSearch.appendTo(searchInput);\n                this.fieldSearch.addIcon('append', _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_SEARCH_ICON_CLASS + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON);\n                var promptDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_MEMBER_CLASS + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE\n                });\n                promptDiv.innerText = this.parent.localeObj.getConstant('noMatches');\n                fieldTable.appendChild(searchWrapper);\n                fieldTable.appendChild(promptDiv);\n            }\n            treeOuterDiv.appendChild(this.treeViewElement);\n            fieldTable.appendChild(treeOuterDiv);\n            this.parentElement.appendChild(fieldTable);\n            if (this.parent.renderMode === 'Fixed') {\n                var centerDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.STATIC_CENTER_DIV_CLASS });\n                var axisHeader = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                    className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.STATIC_CENTER_HEADER_CLASS\n                });\n                axisHeader.innerText = this.parent.localeObj.getConstant('centerHeader');\n                this.parentElement.appendChild(centerDiv);\n                this.parentElement.appendChild(axisHeader);\n            }\n            this.renderTreeView();\n        }\n        else {\n            this.renderTreeDialog(axis);\n        }\n    };\n    TreeViewRenderer.prototype.updateSortElements = function (headerWrapper) {\n        var options = { 'None': 'sortNone', 'Ascend': 'sortAscending', 'Descend': 'sortDescending' };\n        var keys = Object.keys(options);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var option = keys_1[_i];\n            var spanElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                attrs: {\n                    'tabindex': '0',\n                    'aria-disabled': 'false',\n                    'aria-label': 'Sort ' + option,\n                    'data-sort': option,\n                    'title': this.parent.localeObj.getConstant(options[option]),\n                    'role': 'button'\n                },\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON + ' ' + 'e-sort-' + option.toLowerCase() + ' ' +\n                    (this.fieldListSort === option ? 'e-selected' : '')\n            });\n            headerWrapper.appendChild(spanElement);\n            this.unWireFieldListEvent(spanElement);\n            this.wireFieldListEvent(spanElement);\n        }\n    };\n    TreeViewRenderer.prototype.renderTreeView = function () {\n        this.fieldTable = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_3__.TreeView({\n            fields: { dataSource: this.getTreeData(), id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass' },\n            nodeChecked: this.nodeChecked.bind(this),\n            nodeClicked: this.nodeStateChange.bind(this),\n            keyPress: this.nodeStateChange.bind(this),\n            cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_TREE_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''),\n            showCheckBox: true,\n            allowDragAndDrop: true,\n            sortOrder: 'None',\n            loadOnDemand: this.parent.dataType === 'olap' ? false : (this.parent.enableFieldSearching ? false : true),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            nodeDragStart: this.dragStart.bind(this),\n            nodeDragStop: this.dragStop.bind(this),\n            drawNode: this.updateTreeNode.bind(this),\n            nodeExpanding: this.updateNodeIcon.bind(this),\n            nodeCollapsed: this.updateNodeIcon.bind(this),\n            nodeSelected: function (args) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([args.node], 'e-active');\n                args.cancel = true;\n            }\n        });\n        this.treeViewElement.innerHTML = '';\n        this.fieldTable.isStringTemplate = true;\n        this.fieldTable.appendTo(this.treeViewElement);\n        var dragEle = this.parent.renderMode === 'Fixed' ? this.parent.element : this.parentElement;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragEle.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_CLASS))) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(dragEle.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_CLASS), _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_3__.TreeView)['dragObj']\n                .enableAutoScroll = false;\n        }\n    };\n    TreeViewRenderer.prototype.updateNodeIcon = function (args) {\n        if (this.parent.dataType === 'olap') {\n            if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-icon') > -1)) {\n                var node = args.node.querySelector('.e-list-icon');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([node], 'e-folderCDB-icon');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([node], 'e-folderCDB-open-icon');\n            }\n            else if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-folderCDB-open-icon') > -1)) {\n                var node = args.node.querySelector('.e-list-icon');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([node], 'e-folderCDB-open-icon');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([node], 'e-folderCDB-icon');\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateTreeNode = function (args) {\n        var allowDrag = false;\n        if (this.parent.dataType === 'olap') {\n            allowDrag = this.updateOlapTreeNode(args);\n        }\n        else {\n            if (args.nodeData.hasChildren) {\n                allowDrag = false;\n                args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER).style.display = 'none';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.node], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_TREE_PARENT);\n            }\n            else {\n                allowDrag = true;\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.nodeData.pid)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.node], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_TREE_CHILD);\n        }\n        var liTextElement = args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.TEXT_CONTENT_CLASS);\n        if (args.node.querySelector('.e-list-icon') && liTextElement) {\n            var liIconElement = args.node.querySelector('.e-list-icon');\n            liTextElement.insertBefore(liIconElement, args.node.querySelector('.e-list-text'));\n        }\n        if (allowDrag && !this.parent.isAdaptive) {\n            var field = _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getFieldInfo(args.nodeData.id, this.parent);\n            allowDrag = false;\n            var dragElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', {\n                attrs: {\n                    'tabindex': '-1',\n                    title: (field.fieldItem ? field.fieldItem.allowDragAndDrop ?\n                        this.parent.localeObj.getConstant('drag') : '' : this.parent.localeObj.getConstant('drag')),\n                    'aria-disabled': 'false'\n                },\n                className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DRAG_CLASS + ' ' +\n                    (field.fieldItem ? field.fieldItem.allowDragAndDrop ? '' : _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DRAG_DISABLE_CLASS : '')\n            });\n            if (args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER) &&\n                !args.node.querySelector('.cls.DRAG_CLASS') && liTextElement) {\n                liTextElement.insertBefore(dragElement, args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER));\n            }\n        }\n        if (args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.NODE_CHECK_CLASS)) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n        }\n        if (this.parent.enableFieldSearching && this.isSearching) {\n            var liElement = args.node;\n            if (this.parent.dataType === 'olap') {\n                var id = liElement.getAttribute('data-uid');\n                var searchItem = this.parent.pivotCommon.eventBase.searchListItem;\n                for (var i = 0; i < this.parentIDs.length; i++) {\n                    if (id === this.parentIDs[i]) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                    }\n                    for (var _i = 0, searchItem_1 = searchItem; _i < searchItem_1.length; _i++) {\n                        var li2 = searchItem_1[_i];\n                        var parentID = this.parent.pivotCommon.eventBase.getParentIDs(this.fieldTable, li2.getAttribute('data-uid'), []);\n                        if (_base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.inArray(id, parentID) > -1) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([liElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < this.nonSearchList.length; i++) {\n                    if (liElement.textContent === this.nonSearchList[i].textContent) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                        break;\n                    }\n                    else {\n                        if (liElement.innerText === this.nonSearchList[i].textContent) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liElement], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateOlapTreeNode = function (args) {\n        var allowDrag = false;\n        if (this.parent.dataType === 'olap') {\n            if (args.node && args.node.querySelector('.e-calcMemberGroupCDB,.e-measureGroupCDB-icon,.e-folderCDB-icon,.e-folderCDB-open-icon,.e-dimensionCDB-icon,.e-kpiCDB-icon')) {\n                args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER).style.display = 'none';\n            }\n            if (args.node && args.node.querySelector('.e-list-icon') &&\n                (args.node.querySelector('.e-list-icon').className.indexOf('e-level-members') > -1)) {\n                if (this.parent.isAdaptive) {\n                    args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER).style.display = 'none';\n                }\n                else {\n                    args.node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER).style.visibility = 'hidden';\n                }\n            }\n            if (args.node && (args.node.querySelector('.e-hierarchyCDB-icon,.e-attributeCDB-icon,.e-namedSetCDB-icon') ||\n                args.node.querySelector('.e-measure-icon,.e-kpiGoal-icon,.e-kpiStatus-icon,.e-kpiTrend-icon,.e-kpiValue-icon') ||\n                args.node.querySelector('.e-calc-measure-icon,.e-calc-dimension-icon'))) {\n                if (args.node.querySelector('.e-measure-icon')) {\n                    args.node.querySelector('.e-list-icon').style.display = 'none';\n                    allowDrag = true;\n                }\n                else {\n                    allowDrag = true;\n                }\n            }\n        }\n        else {\n            allowDrag = true;\n        }\n        return allowDrag;\n    };\n    TreeViewRenderer.prototype.renderTreeDialog = function (axis) {\n        var fieldListDialog = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.parent.element.id + '_FieldListTreeView',\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ADAPTIVE_FIELD_LIST_DIALOG_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-editor-dialog' : '')\n        });\n        this.parentElement.appendChild(fieldListDialog);\n        this.fieldDialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Dialog({\n            animationSettings: { effect: 'Fade' },\n            allowDragging: false,\n            header: this.parent.localeObj.getConstant('adaptiveFieldHeader'),\n            content: this.createTreeView(this.getTreeData(axis)),\n            isModal: true,\n            visible: true,\n            showCloseIcon: false,\n            enableRtl: this.parent.enableRtl,\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            locale: this.parent.locale,\n            width: '320px',\n            height: '350px',\n            position: { X: 'center', Y: 'center' },\n            buttons: [{\n                    click: this.closeTreeDialog.bind(this),\n                    isFlat: false,\n                    buttonModel: {\n                        cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CANCEL_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('cancel')\n                    }\n                }, {\n                    click: this.onFieldAdd.bind(this),\n                    isFlat: false,\n                    buttonModel: {\n                        cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.OK_BUTTON_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''), content: this.parent.localeObj.getConstant('add'),\n                        isPrimary: true\n                    }\n                }],\n            closeOnEscape: false,\n            cssClass: this.parent.cssClass,\n            close: this.closeTreeDialog.bind(this),\n            target: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.parentElement, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.WRAPPER_CLASS)\n        });\n        this.fieldDialog.isStringTemplate = true;\n        this.fieldDialog.appendTo(fieldListDialog);\n        // this.fieldDialog.element.querySelector('.e-dlg-header').innerText = this.parent.localeObj.getConstant('adaptiveFieldHeader');\n    };\n    TreeViewRenderer.prototype.createTreeView = function (treeData) {\n        var editorTreeWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.parent.element.id + 'EditorDiv',\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EDITOR_TREE_WRAPPER_CLASS\n        });\n        var searchWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.parent.element.id + '_SearchDiv', attrs: { 'tabindex': '-1' },\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EDITOR_SEARCH_WRAPPER_CLASS\n        });\n        var editorSearch = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { attrs: { 'type': 'text' } });\n        searchWrapper.appendChild(editorSearch);\n        var treeOuterDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_TREE_OUTER_DIV_CLASS });\n        var treeViewContainer = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EDITOR_TREE_CONTAINER_CLASS + ' ' + (this.parent.dataType === 'olap' ? 'e-olap-field-list-tree' : '')\n        });\n        editorTreeWrapper.appendChild(searchWrapper);\n        this.editorSearch = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_5__.MaskedTextBox({\n            showClearButton: true,\n            placeholder: this.parent.localeObj.getConstant('search'),\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            cssClass: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EDITOR_SEARCH_CLASS + (this.parent.cssClass ? (' ' + this.parent.cssClass) : ''),\n            change: this.textChange.bind(this)\n        });\n        this.editorSearch.isStringTemplate = true;\n        this.editorSearch.appendTo(editorSearch);\n        var promptDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            className: _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_MEMBER_CLASS + ' ' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE\n        });\n        promptDiv.innerText = this.parent.localeObj.getConstant('noMatches');\n        editorTreeWrapper.appendChild(promptDiv);\n        treeOuterDiv.appendChild(treeViewContainer);\n        editorTreeWrapper.appendChild(treeOuterDiv);\n        this.fieldTable = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_3__.TreeView({\n            fields: { dataSource: treeData, id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass' },\n            showCheckBox: true,\n            loadOnDemand: this.parent.dataType === 'olap' ? false : true,\n            sortOrder: this.parent.dataType === 'olap' ? 'None' : 'Ascending',\n            enableRtl: this.parent.enableRtl,\n            locale: this.parent.locale,\n            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n            cssClass: this.parent.cssClass,\n            nodeChecked: this.nodeChecked.bind(this),\n            nodeClicked: this.addNode.bind(this),\n            keyPress: this.addNode.bind(this),\n            drawNode: this.updateTreeNode.bind(this),\n            nodeExpanding: this.updateNodeIcon.bind(this),\n            nodeCollapsed: this.updateNodeIcon.bind(this),\n            nodeSelected: function (args) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([args.node], 'e-active');\n                args.cancel = true;\n            }\n        });\n        this.fieldTable.isStringTemplate = true;\n        this.fieldTable.appendTo(treeViewContainer);\n        return editorTreeWrapper;\n    };\n    TreeViewRenderer.prototype.textChange = function (e) {\n        this.parent.pivotCommon.eventBase.searchTreeNodes(e, this.fieldTable, true);\n        var promptDiv;\n        var treeOuterDiv;\n        if (this.parent.isAdaptive) {\n            promptDiv = this.fieldDialog.element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_MEMBER_CLASS);\n        }\n        else {\n            promptDiv = this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EMPTY_MEMBER_CLASS);\n            treeOuterDiv = this.parentElement.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.TREE_CONTAINER);\n        }\n        var liList = [].slice.call(this.fieldTable.element.querySelectorAll('li'));\n        var disabledList = [].slice.call(this.fieldTable.element.querySelectorAll('li.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE));\n        if (liList.length === disabledList.length) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([promptDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n            if (!this.parent.isAdaptive) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([treeOuterDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([treeOuterDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_TREE_OUTER_DIV_SEARCH_CLASS);\n            }\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([promptDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n            if (!this.parent.isAdaptive) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([treeOuterDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([treeOuterDiv], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_LIST_TREE_OUTER_DIV_SEARCH_CLASS);\n            }\n        }\n        this.isSearching = disabledList.length > 0 ? true : false;\n        this.nonSearchList = disabledList;\n        if (this.parent.dataType === 'olap') {\n            this.parentIDs = [];\n            for (var i = 0; i < liList.length; i++) {\n                if (liList[i].classList.contains('e-level-1')) {\n                    var id = liList[i].getAttribute('data-uid');\n                    this.parentIDs.push(id);\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.dragStart = function (args) {\n        var _this = this;\n        if (args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DRAG_CLASS) &&\n            !args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DRAG_DISABLE_CLASS)) {\n            var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getFieldInfo(args.draggedNode.getAttribute('data-uid'), this.parent);\n            var dragEventArgs = {\n                fieldName: fieldInfo.fieldName, fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis,\n                dataSourceSettings: this.parent.dataSourceSettings, cancel: false\n            };\n            var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.fieldDragStart, dragEventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.parent.isDragging = true;\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.draggedNode.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.SELECTED_NODE_CLASS);\n                    var data = void 0;\n                    if (_this.parent.dataType === 'olap') {\n                        data = _this.parent.olapEngineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n                    }\n                    else {\n                        data = _this.parent.engineModule.fieldList[args.draggedNode.getAttribute('data-uid')];\n                    }\n                    var axis = [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ROW_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.COLUMN_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FILTER_AXIS_CLASS];\n                    if (data && data.aggregateType === 'CalculatedField') {\n                        for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {\n                            var axisContent = axis_1[_i];\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.parentElement.querySelector('.' + axisContent)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.NO_DRAG_CLASS);\n                        }\n                    }\n                    var dragItem = args.clonedNode;\n                    if (dragItem && (_this.parent.getModuleName() === 'pivotfieldlist' &&\n                        _this.parent.renderMode) === 'Popup') {\n                        dragItem.style.zIndex = (_this.parent.dialogRenderer.fieldListDialog.zIndex + 1).toString();\n                    }\n                }\n                else {\n                    _this.parent.isDragging = false;\n                    args.cancel = true;\n                }\n            });\n        }\n        else {\n            this.parent.isDragging = false;\n            args.cancel = true;\n        }\n    };\n    // private getFieldDragEventArgs(dragEventArgs: FieldDragStartEventArgs): FieldDragStartEventArgs | Deferred {\n    //     let callbackPromise: Deferred = new Deferred();\n    //     let control: PivotView | PivotFieldList = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n    //     control.trigger(events.fieldDragStart, dragEventArgs, (observedArgs: FieldDragStartEventArgs) => {\n    //         callbackPromise.resolve(observedArgs);\n    //     });\n    //     return callbackPromise;\n    // }\n    TreeViewRenderer.prototype.dragStop = function (args) {\n        args.cancel = true;\n        this.parent.isDragging = false;\n        var axis = [_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ROW_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.COLUMN_AXIS_CLASS, _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FILTER_AXIS_CLASS];\n        for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {\n            var axisElement = axis_2[_i];\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.' + axisElement)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.NO_DRAG_CLASS);\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([args.draggedNode.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.SELECTED_NODE_CLASS);\n        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n            this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n        }\n        var fieldName = args.draggedNodeData.id.toString();\n        if (!this.isNodeDropped(args, fieldName)) {\n            return;\n        }\n        var list = this.parent.pivotFieldList;\n        var selectedNode = list[fieldName];\n        this.parent.pivotCommon.dataSourceUpdate.control = this.parent.getModuleName() === 'pivotview' ? this.parent :\n            (this.parent.isPopupView && this.parent.pivotGridModule ? this.parent.pivotGridModule\n                : this.parent);\n        if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, fieldName)) {\n            if (this.parent.isDeferLayoutUpdate || (this.parent.pivotGridModule && this.parent.pivotGridModule.pivotDeferLayoutUpdate)) {\n                selectedNode.isSelected = true;\n                this.updateDataSource();\n            }\n            else {\n                this.parent.updateDataSource();\n            }\n            var parent_1 = this.parent;\n            //setTimeout(() => {\n            parent_1.axisFieldModule.render();\n            //});\n        }\n    };\n    TreeViewRenderer.prototype.isNodeDropped = function (args, targetID) {\n        var isDropped = true;\n        if (args.draggedNodeData.isChecked === 'true') {\n            var target = this.getButton(targetID);\n            var axisPanel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DROPPABLE_CLASS);\n            var droppableElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DROPPABLE_CLASS);\n            if (target && axisPanel === droppableElement) {\n                var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.PIVOT_BUTTON_CLASS));\n                var dropTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.PIVOT_BUTTON_WRAPPER_CLASS);\n                var sourcePosition = void 0;\n                var dropPosition = -1;\n                for (var i = 0, n = pivotButtons.length; i < n; i++) {\n                    if (pivotButtons[i].id === target.id) {\n                        sourcePosition = i;\n                    }\n                    if (dropTarget) {\n                        var droppableButton = dropTarget.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.PIVOT_BUTTON_CLASS);\n                        if (pivotButtons[i].id === droppableButton.id) {\n                            dropPosition = i;\n                        }\n                    }\n                }\n                if (sourcePosition === dropPosition || (sourcePosition === (pivotButtons.length - 1) && dropPosition === -1)) {\n                    var parentElement = document.getElementById(this.parent.element.id + '_Container');\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([].slice.call(parentElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.DROP_INDICATOR_CLASS)), _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.INDICATOR_HOVER_CLASS);\n                    isDropped = false;\n                }\n            }\n        }\n        return isDropped;\n    };\n    TreeViewRenderer.prototype.getButton = function (fieldName) {\n        var wrapperElement = document.getElementById(this.parent.element.id + '_Container');\n        var pivotButtons = [].slice.call(wrapperElement.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.PIVOT_BUTTON_CLASS));\n        var buttonElement;\n        for (var i = 0, n = pivotButtons.length; i < n; i++) {\n            if (pivotButtons[i].getAttribute('data-uid') === fieldName) {\n                buttonElement = pivotButtons[i];\n                break;\n            }\n        }\n        return buttonElement;\n    };\n    TreeViewRenderer.prototype.nodeChecked = function (args) {\n        if (this.isSpaceKey) {\n            var node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.node, '.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.TEXT_CONTENT_CLASS);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node)) {\n                var li = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(node, 'li');\n                var id = li.getAttribute('data-uid');\n                if (this.parent.isAdaptive) {\n                    this.addNode(undefined, id, args.action === 'check', node);\n                }\n                else {\n                    this.nodeStateChange(undefined, id, args.action === 'check', node);\n                }\n            }\n        }\n        this.isSpaceKey = false;\n    };\n    TreeViewRenderer.prototype.nodeStateChange = function (args, id, isChecked, node) {\n        var _this = this;\n        node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node) ? args.node : node;\n        id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? node.getAttribute('data-uid') : id;\n        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {\n            this.parent.pivotCommon.filterDialog.dialogPopUp.close();\n        }\n        var list = this.parent.pivotFieldList;\n        var selectedNode = list[id];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args)) {\n            this.isSpaceKey = args.event.action && args.event.action === 'space';\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedNode) || node.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE) || (args.event.target &&\n                (args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.COLLAPSIBLE) ||\n                    args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EXPANDABLE))) ||\n                (args.event.action && args.event.action !== 'enter')) {\n                return;\n            }\n            isChecked = false;\n            var getNodeDetails = this.fieldTable.getNode(node);\n            if (args.event && args.event.target &&\n                !args.event.target.closest('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER)) {\n                if (getNodeDetails.isChecked === 'true') {\n                    this.fieldTable.uncheckAll([node]);\n                    isChecked = false;\n                }\n                else {\n                    this.fieldTable.checkAll([node]);\n                    isChecked = true;\n                }\n            }\n            else {\n                isChecked = getNodeDetails.isChecked === 'true';\n            }\n        }\n        var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getFieldInfo(id, this.parent);\n        var parentNode = node.closest('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_TREE_PARENT);\n        if (isChecked) {\n            var eventdrop = {\n                fieldName: id, dropField: fieldInfo.fieldItem,\n                dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                dropAxis: (selectedNode.type === 'number' || (selectedNode.type === 'CalculatedField' &&\n                    selectedNode.formula && selectedNode.formula.indexOf('Measure') > -1 &&\n                    this.parent.dataType === 'olap')) ? 'values' : 'rows',\n                dropPosition: fieldInfo.position, draggedAxis: 'fieldlist', cancel: false\n            };\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.fieldDrop, eventdrop, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                    if (parentNode) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([parentNode.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                    }\n                    _this.updateSelectedNodes(node, 'check');\n                    var addNode = _this.parent.pivotCommon.dataSourceUpdate.getNewField(id, fieldInfo.fieldItem);\n                    _this.updateReportSettings(addNode, observedArgs);\n                    _this.updateNodeStateChange(id, selectedNode, isChecked);\n                }\n                else {\n                    _this.updateCheckState(selectedNode, 'check');\n                }\n            });\n        }\n        else {\n            var removeFieldArgs = {\n                cancel: false, fieldName: id,\n                dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis\n            };\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.fieldRemove, removeFieldArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([node.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                    if (parentNode && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentNode.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.FIELD_TREE_CHILD + ' .' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.NODE_CHECK_CLASS))) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([parentNode.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                    }\n                    _this.updateSelectedNodes(node, 'uncheck');\n                    _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(id);\n                    if (_this.parent.dataType === 'pivot' && _this.parent.showValuesButton && _this.parent.dataSourceSettings.values.length > 1 &&\n                        fieldInfo && fieldInfo.position < _this.parent.dataSourceSettings.valueIndex &&\n                        ((_this.parent.dataSourceSettings.valueAxis === 'row' && fieldInfo.axis === 'rows') ||\n                            (_this.parent.dataSourceSettings.valueAxis === 'column' && fieldInfo.axis === 'columns'))) {\n                        control.setProperties({ dataSourceSettings: { valueIndex: _this.parent.dataSourceSettings.valueIndex - 1 } }, true);\n                    }\n                    if (_this.parent.dataType === 'olap' && _this.parent.dataSourceSettings.values.length === 0) {\n                        _this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport('[Measures]');\n                    }\n                    _this.updateNodeStateChange(id, selectedNode, isChecked);\n                }\n                else {\n                    _this.updateCheckState(selectedNode, 'uncheck');\n                }\n            });\n        }\n    };\n    TreeViewRenderer.prototype.updateReportSettings = function (newField, dropArgs) {\n        var dropPosition = dropArgs.dropPosition;\n        var dropClass = dropArgs.dropAxis;\n        if (this.parent.dataType === 'pivot' && this.parent.showValuesButton && this.parent.dataSourceSettings.values.length > 1) {\n            var dropAxisFields = (this.parent.dataSourceSettings.valueAxis === 'row' &&\n                dropClass === 'rows') ? this.parent.dataSourceSettings.rows : (this.parent.dataSourceSettings.valueAxis === 'column' && dropClass === 'columns') ?\n                this.parent.dataSourceSettings.columns : undefined;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropAxisFields)) {\n                if (dropPosition === -1 && this.parent.dataSourceSettings.valueIndex === -1) {\n                    this.parent.setProperties({ dataSourceSettings: { valueIndex: dropAxisFields.length } }, true);\n                }\n                else if (dropPosition > -1 && dropPosition <= this.parent.dataSourceSettings.valueIndex) {\n                    this.parent.setProperties({ dataSourceSettings: { valueIndex: this.parent.dataSourceSettings.valueIndex + 1 } }, true);\n                }\n                else if (this.parent.dataSourceSettings.valueIndex > -1 && dropPosition > this.parent.dataSourceSettings.valueIndex) {\n                    dropPosition = dropPosition - 1;\n                }\n            }\n        }\n        switch (dropClass) {\n            case 'filters':\n                if (dropPosition !== -1) {\n                    this.parent.dataSourceSettings.filters.splice(dropPosition, 0, newField);\n                }\n                else {\n                    this.parent.dataSourceSettings.filters.push(newField);\n                }\n                break;\n            case 'rows':\n                if (dropPosition !== -1) {\n                    this.parent.dataSourceSettings.rows.splice(dropPosition, 0, newField);\n                }\n                else {\n                    this.parent.dataSourceSettings.rows.push(newField);\n                }\n                break;\n            case 'columns':\n                if (dropPosition !== -1) {\n                    this.parent.dataSourceSettings.columns.splice(dropPosition, 0, newField);\n                }\n                else {\n                    this.parent.dataSourceSettings.columns.push(newField);\n                }\n                break;\n            case 'values':\n                if (dropPosition !== -1) {\n                    this.parent.dataSourceSettings.values.splice(dropPosition, 0, newField);\n                }\n                else {\n                    this.parent.dataSourceSettings.values.push(newField);\n                }\n                if (this.parent.dataType === 'olap' && this.parent.olapEngineModule &&\n                    !(this.parent.olapEngineModule).isMeasureAvail && !(this.parent.dataSourceSettings.values.length > 1)) {\n                    var measureField = {\n                        name: '[Measures]', caption: 'Measures', baseField: undefined, baseItem: undefined\n                    };\n                    var fieldAxis = this.parent.dataSourceSettings.valueAxis === 'row' ?\n                        this.parent.dataSourceSettings.rows : this.parent.dataSourceSettings.columns;\n                    fieldAxis.push(measureField);\n                }\n                break;\n        }\n    };\n    TreeViewRenderer.prototype.updateCheckState = function (selectedNode, action) {\n        var chkState = this.fieldTable.element.querySelectorAll('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECKBOX_CONTAINER);\n        var innerText = this.fieldTable.element.querySelectorAll('.e-list-text');\n        for (var i = 0; i < chkState.length; i++) {\n            if (selectedNode.caption === innerText[i].textContent) {\n                if (action === 'check') {\n                    this.fieldTable.uncheckAll([selectedNode['id']]);\n                }\n                else {\n                    this.fieldTable.checkAll([selectedNode['id']]);\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateNodeStateChange = function (id, selectedNode, isChecked) {\n        if (this.parent.isDeferLayoutUpdate === false || (this.parent.pivotGridModule &&\n            this.parent.pivotGridModule.pivotDeferLayoutUpdate === false)) {\n            this.parent.updateDataSource(true);\n        }\n        else {\n            selectedNode.isSelected = isChecked;\n            if (this.parent.dataType === 'olap') {\n                this.parent.olapEngineModule.updateFieldlistData(id, isChecked);\n            }\n            this.updateDataSource();\n        }\n        var selectedLi = this.treeViewElement.querySelector('[data-uid=\"' + id + '\"]');\n        selectedLi.focus();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectedLi], 'e-hover');\n        var parent = this.parent;\n        setTimeout(function () {\n            parent.axisFieldModule.render();\n        });\n    };\n    TreeViewRenderer.prototype.updateSelectedNodes = function (li, state) {\n        if (li && li.querySelector('ul')) {\n            for (var _i = 0, _a = [].slice.call(li.querySelectorAll('li')); _i < _a.length; _i++) {\n                var element = _a[_i];\n                if (state === 'check') {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([element.querySelector('.' + _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_TEXT_CLASS)], _common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.LIST_SELECT_CLASS);\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateDataSource = function () {\n        if (this.parent.isPopupView) {\n            if (this.parent.dataType === 'olap') {\n                this.parent.pivotGridModule.olapEngineModule = this.parent.olapEngineModule;\n            }\n            else {\n                this.parent.pivotGridModule.engineModule = this.parent.engineModule;\n            }\n            this.parent.pivotGridModule.setProperties({ dataSourceSettings: this.parent.dataSourceSettings.properties }, true);\n            this.parent.pivotGridModule.notify(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.uiUpdate, this);\n        }\n        else {\n            this.parent.triggerPopulateEvent();\n        }\n    };\n    TreeViewRenderer.prototype.addNode = function (args, id, isChecked, node) {\n        var _this = this;\n        node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node) ? args.node : node;\n        id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? node.getAttribute('data-uid') : id;\n        var list = this.parent.pivotFieldList;\n        var selectedNode = list[id];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args)) {\n            this.isSpaceKey = args.event.key && args.event.key === ' ';\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedNode) || args.node.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.ICON_DISABLE) || (args.event.target &&\n                (args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.COLLAPSIBLE) ||\n                    args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.EXPANDABLE))) ||\n                (args.event.key && args.event.key !== 'Enter')) {\n                return;\n            }\n            isChecked = false;\n            var getNodeDetails = this.fieldTable.getNode(args.node);\n            if (args.event && args.event.target &&\n                !args.event.target.classList.contains(_common_base_css_constant__WEBPACK_IMPORTED_MODULE_1__.CHECK_BOX_FRAME_CLASS)) {\n                if (getNodeDetails.isChecked === 'true') {\n                    this.fieldTable.uncheckAll([args.node]);\n                    isChecked = false;\n                }\n                else {\n                    this.fieldTable.checkAll([args.node]);\n                    isChecked = true;\n                }\n            }\n            else {\n                isChecked = getNodeDetails.isChecked === 'true';\n            }\n        }\n        var fieldInfo = _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getFieldInfo(selectedNode.id.toString(), this.parent);\n        var control = this.parent.isPopupView ? this.parent.pivotGridModule : this.parent;\n        if (isChecked) {\n            var axis = ['filters', 'columns', 'rows', 'values'];\n            var eventdrop = {\n                fieldName: fieldInfo.fieldName, dropField: fieldInfo.fieldItem,\n                dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                dropAxis: axis[this.parent.dialogRenderer.adaptiveElement.selectedItem], draggedAxis: 'fieldlist', cancel: false\n            };\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.fieldDrop, eventdrop, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.selectedNodes.push(selectedNode.id.toString());\n                }\n                else {\n                    _this.updateCheckState(selectedNode, 'check');\n                }\n            });\n        }\n        else {\n            var removeFieldArgs = {\n                cancel: false, fieldName: fieldInfo.fieldName,\n                dataSourceSettings: _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getClonedDataSourceSettings(this.parent.dataSourceSettings),\n                fieldItem: fieldInfo.fieldItem, axis: fieldInfo.axis\n            };\n            control.trigger(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.fieldRemove, removeFieldArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    var count = _this.selectedNodes.length;\n                    while (count--) {\n                        if (_this.selectedNodes[count] === selectedNode.id.toString()) {\n                            _this.selectedNodes.splice(count, 1);\n                            break;\n                        }\n                    }\n                }\n                else {\n                    _this.updateCheckState(selectedNode, 'uncheck');\n                }\n            });\n        }\n    };\n    TreeViewRenderer.prototype.refreshTreeView = function () {\n        if (this.fieldTable) {\n            var treeData = this.getUpdatedData();\n            this.fieldTable.fields = {\n                dataSource: treeData, id: 'id', text: 'caption', isChecked: 'isSelected', parentID: 'pid', iconCss: 'spriteCssClass'\n            };\n            this.fieldTable.dataBind();\n        }\n    };\n    TreeViewRenderer.prototype.getUpdatedData = function () {\n        var treeData = this.getTreeData();\n        var expandedNodes = this.fieldTable.expandedNodes;\n        this.updateExpandedNodes(treeData, expandedNodes);\n        return this.applySorting(treeData, this.fieldListSort);\n    };\n    TreeViewRenderer.prototype.getTreeData = function (axis) {\n        var data = [];\n        if (this.parent.dataType === 'olap') {\n            data = this.getOlapTreeData(axis);\n        }\n        else {\n            var keys = this.parent.pivotFieldList ? Object.keys(this.parent.pivotFieldList) : [];\n            var treeDataInfo = {};\n            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n                var key = keys_2[_i];\n                var member = this.parent.pivotFieldList[key];\n                treeDataInfo[key] = { id: member.id, pid: member.pid, caption: member.caption, isSelected: member.isSelected };\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(member.pid) && !treeDataInfo[key].hasChildren) {\n                    var parentId = member.pid + '_group_name';\n                    treeDataInfo[key].pid = parentId;\n                    treeDataInfo[parentId] = {\n                        id: parentId, caption: member.pid,\n                        isSelected: treeDataInfo[parentId] && treeDataInfo[parentId].isSelected\n                            ? treeDataInfo[parentId].isSelected : member.isSelected, hasChildren: true\n                    };\n                }\n            }\n            if (this.parent.isAdaptive) {\n                var fields = [this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns,\n                    this.parent.dataSourceSettings.rows,\n                    this.parent.dataSourceSettings.values];\n                var currentFieldSet = fields[axis];\n                var len = keys.length;\n                while (len--) {\n                    treeDataInfo[keys[len]].isSelected = false;\n                }\n                for (var _a = 0, currentFieldSet_1 = currentFieldSet; _a < currentFieldSet_1.length; _a++) {\n                    var item = currentFieldSet_1[_a];\n                    treeDataInfo[item.name].isSelected = true;\n                }\n            }\n            var members = Object.keys(treeDataInfo);\n            for (var _b = 0, members_1 = members; _b < members_1.length; _b++) {\n                var member = members_1[_b];\n                var obj = treeDataInfo[member];\n                data.push(obj);\n            }\n        }\n        return data;\n    };\n    TreeViewRenderer.prototype.getOlapTreeData = function (axis) {\n        var data = [];\n        var fieldListData = this.parent.olapEngineModule.fieldListData ? this.parent.olapEngineModule.fieldListData : [];\n        if (this.parent.isAdaptive) {\n            var fields = [\n                this.parent.dataSourceSettings.filters, this.parent.dataSourceSettings.columns,\n                this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.values\n            ];\n            var currentFieldSet = fields[axis];\n            var i = 0;\n            while (i < fieldListData.length) {\n                var item = fieldListData[i];\n                var framedSet = void 0;\n                if (axis === 3) {\n                    if (item.id.toLowerCase() !== '[measures]' &&\n                        (item.id.toLowerCase().indexOf('[measures]') === 0 ||\n                            (item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1)) ||\n                        (item.id.toLowerCase() === '[calculated members].[_0]' ||\n                            (item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1))) {\n                        framedSet = {\n                            id: item.id, caption: item.caption, hasChildren: item.hasChildren,\n                            type: item.type, aggregateType: item.aggregateType,\n                            isSelected: item.isSelected, pid: item.pid, spriteCssClass: item.spriteCssClass\n                        };\n                        framedSet.isSelected = false;\n                        if (framedSet.spriteCssClass && framedSet.spriteCssClass.indexOf('e-measureCDB') !== -1) {\n                            framedSet.spriteCssClass = framedSet.spriteCssClass.replace('e-folderCDB-icon', 'e-measureGroupCDB-icon');\n                            framedSet.pid = undefined;\n                        }\n                        for (var _i = 0, currentFieldSet_2 = currentFieldSet; _i < currentFieldSet_2.length; _i++) {\n                            var field = currentFieldSet_2[_i];\n                            if (framedSet.id === field.name) {\n                                framedSet.isSelected = true;\n                                break;\n                            }\n                        }\n                        data.push(framedSet);\n                    }\n                }\n                else {\n                    if (!(item.id.toLowerCase().indexOf('[measures]') === 0) &&\n                        !(item.spriteCssClass && item.spriteCssClass.indexOf('e-measureCDB') !== -1) &&\n                        !(item.spriteCssClass && item.spriteCssClass.indexOf('e-calc-measure-icon') !== -1)) {\n                        framedSet = {\n                            id: item.id, caption: item.caption, hasChildren: item.hasChildren,\n                            type: item.type, aggregateType: item.aggregateType,\n                            isSelected: item.isSelected, pid: item.pid, spriteCssClass: item.spriteCssClass\n                        };\n                        framedSet.isSelected = false;\n                        for (var _a = 0, currentFieldSet_3 = currentFieldSet; _a < currentFieldSet_3.length; _a++) {\n                            var item_1 = currentFieldSet_3[_a];\n                            if (framedSet.id === item_1.name) {\n                                framedSet.isSelected = true;\n                                break;\n                            }\n                        }\n                        data.push(framedSet);\n                    }\n                }\n                i++;\n            }\n        }\n        else {\n            data = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.olapEngineModule.fieldListData) ? [] :\n                _base_util__WEBPACK_IMPORTED_MODULE_6__.PivotUtil.getClonedData(this.parent.olapEngineModule.fieldListData);\n        }\n        return data;\n    };\n    TreeViewRenderer.prototype.updateExpandedNodes = function (data, expandedNodes) {\n        if (expandedNodes.length > 0) {\n            var i = 0;\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var field = data_1[_i];\n                if (expandedNodes.indexOf(field.id) > -1) {\n                    i++;\n                    field.expanded = true;\n                    field.spriteCssClass = (field.spriteCssClass &&\n                        field.spriteCssClass.toString().indexOf('e-folderCDB-icon') > -1 ?\n                        field.spriteCssClass.toString().replace('e-folderCDB-icon', 'e-folderCDB-open-icon') :\n                        field.spriteCssClass);\n                    if (i === (expandedNodes.length)) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    TreeViewRenderer.prototype.updateSorting = function (args) {\n        var target = args.target;\n        var option = target.getAttribute('data-sort');\n        this.parent.actionObj.actionName = _common_base_constant__WEBPACK_IMPORTED_MODULE_2__.sortFieldTree;\n        if (this.parent.actionBeginMethod()) {\n            return;\n        }\n        try {\n            if (target.className.indexOf('e-selected') === -1) {\n                switch (option) {\n                    case 'None':\n                        this.fieldListSort = 'None';\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n                        break;\n                    case 'Ascend':\n                        this.fieldListSort = 'Ascend';\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-descend')], 'e-selected');\n                        break;\n                    case 'Descend':\n                        this.fieldListSort = 'Descend';\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-ascend')], 'e-selected');\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parentElement.querySelector('.e-sort-none')], 'e-selected');\n                        break;\n                }\n                this.refreshTreeView();\n            }\n        }\n        catch (execption) {\n            this.parent.actionFailureMethod(execption);\n        }\n        this.parent.actionObj.actionName = this.parent.getActionCompleteName();\n        if (this.parent.actionObj.actionName) {\n            this.parent.actionCompleteMethod();\n        }\n    };\n    TreeViewRenderer.prototype.applySorting = function (treeData, sortOrder) {\n        if (treeData.length > 0) {\n            if (this.parent.dataType === 'olap') {\n                var measure = void 0;\n                var calcMember = void 0;\n                if (this.parent.dataSourceSettings.calculatedFieldSettings.length > 0 &&\n                    treeData[0].id.toLowerCase() === '[calculated members].[_0]') {\n                    calcMember = treeData[0];\n                    measure = treeData[1];\n                    treeData.splice(0, 2);\n                }\n                else {\n                    measure = treeData[0];\n                    treeData.splice(0, 1);\n                }\n                treeData = sortOrder === 'Ascend' ?\n                    (treeData.sort(function (a, b) { return (a.caption > b.caption) ? 1 :\n                        ((b.caption > a.caption) ? -1 : 0); })) : sortOrder === 'Descend' ?\n                    (treeData.sort(function (a, b) { return (a.caption < b.caption) ? 1 :\n                        ((b.caption < a.caption) ? -1 : 0); })) : treeData;\n                if (calcMember) {\n                    treeData.splice(0, 0, calcMember, measure);\n                }\n                else {\n                    treeData.splice(0, 0, measure);\n                }\n            }\n            else {\n                this.fieldTable.sortOrder = ((sortOrder === 'Ascend' ? 'Ascending' : (sortOrder === 'Descend' ? 'Descending' : 'None')));\n            }\n        }\n        return treeData;\n    };\n    TreeViewRenderer.prototype.onFieldAdd = function () {\n        this.parent.dialogRenderer.updateDataSource(this.selectedNodes);\n        this.closeTreeDialog();\n    };\n    TreeViewRenderer.prototype.closeTreeDialog = function () {\n        this.selectedNodes = [];\n        this.fieldDialog.hide();\n        this.fieldDialog.destroy();\n        if (document.getElementById(this.parent.element.id + '_FieldListTreeView')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(document.getElementById(this.parent.element.id + '_FieldListTreeView'));\n        }\n        this.fieldDialog = null;\n    };\n    TreeViewRenderer.prototype.keyPress = function (e) {\n        if (e.keyCode === 13 && e.target) {\n            e.target.click();\n            e.preventDefault();\n            return;\n        }\n    };\n    TreeViewRenderer.prototype.wireFieldListEvent = function (element) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element, 'keydown', this.keyPress, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element, 'click', this.updateSorting, this);\n    };\n    TreeViewRenderer.prototype.unWireFieldListEvent = function (element) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, 'keydown', this.keyPress);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, 'click', this.updateSorting);\n    };\n    /**\n     * @hidden\n     */\n    TreeViewRenderer.prototype.addEventListener = function () {\n        this.parent.on(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.treeViewUpdate, this.refreshTreeView, this);\n    };\n    /**\n     * @hidden\n     */\n    TreeViewRenderer.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(_common_base_constant__WEBPACK_IMPORTED_MODULE_2__.treeViewUpdate, this.refreshTreeView);\n    };\n    /**\n     * To destroy the tree view event listener\n     *\n     * @returns {void}\n     * @hidden\n     */\n    TreeViewRenderer.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.editorSearch && !this.editorSearch.isDestroyed) {\n            this.editorSearch.destroy();\n            this.editorSearch = null;\n        }\n        if (this.fieldSearch && !this.fieldSearch.isDestroyed) {\n            this.fieldSearch.destroy();\n            this.fieldSearch = null;\n        }\n        if (this.fieldTable && !this.fieldTable.isDestroyed) {\n            this.fieldTable.destroy();\n            this.fieldTable = null;\n        }\n        if (this.fieldDialog && !this.fieldDialog.isDestroyed) {\n            this.fieldDialog.destroy();\n            this.fieldDialog = null;\n        }\n    };\n    return TreeViewRenderer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pivotview/src/pivotfieldlist/renderer/tree-renderer.js?");

/***/ })

}]);