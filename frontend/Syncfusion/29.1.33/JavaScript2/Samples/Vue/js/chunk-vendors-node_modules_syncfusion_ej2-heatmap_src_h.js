"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-heatmap_src_h"],{

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/colorMapping.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/colorMapping.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellColor: () => (/* binding */ CellColor),\n/* harmony export */   PaletteSettings: () => (/* binding */ PaletteSettings),\n/* harmony export */   RgbColor: () => (/* binding */ RgbColor)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/base */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/model/base.js\");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/helper.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n/**\n * Sets and gets the options to customize the color palette of heatmap.\n */\nvar PaletteSettings = /** @class */ (function (_super) {\n    __extends(PaletteSettings, _super);\n    function PaletteSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _model_base__WEBPACK_IMPORTED_MODULE_1__.PaletteCollection)\n    ], PaletteSettings.prototype, \"palette\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Gradient')\n    ], PaletteSettings.prototype, \"type\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], PaletteSettings.prototype, \"emptyPointColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Table')\n    ], PaletteSettings.prototype, \"colorGradientMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_1__.FillColor)\n    ], PaletteSettings.prototype, \"fillColor\", void 0);\n    return PaletteSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Helper class for colormapping\n */\nvar RgbColor = /** @class */ (function () {\n    function RgbColor(r, g, b) {\n        this.R = r;\n        this.G = g;\n        this.B = b;\n    }\n    return RgbColor;\n}());\n\nvar CellColor = /** @class */ (function () {\n    function CellColor(heatMap) {\n        this.heatMap = heatMap;\n    }\n    /**\n     * To convert hexa color to RGB.\n     *\n     * @returns {any}\n     * @private\n     */\n    CellColor.prototype.convertToRGB = function (value, colorMapping) {\n        var previousOffset = this.heatMap.isColorRange ? colorMapping[0].startValue : colorMapping[0].value;\n        var nextOffset = 0;\n        var i = 0;\n        var previousColor;\n        var nextColor;\n        if (this.heatMap.isColorRange && this.heatMap.paletteSettings.type === 'Gradient') {\n            for (i = 0; i < colorMapping.length; i++) {\n                var offset = Number(colorMapping[i].endValue);\n                if (value <= offset && value >= Number(colorMapping[i].startValue)) {\n                    nextOffset = offset;\n                    previousColor = this.heatMap.colorCollection[i].minColor;\n                    nextColor = this.heatMap.colorCollection[i].maxColor;\n                }\n                else if (colorMapping[0].startValue !== this.heatMap.dataSourceMinValue && value < colorMapping[0].startValue) {\n                    nextOffset = colorMapping[0].startValue;\n                    previousOffset = this.heatMap.dataSourceMinValue;\n                    previousColor = this.heatMap.paletteSettings.fillColor.minColor;\n                    nextColor = this.heatMap.paletteSettings.fillColor.maxColor;\n                    break;\n                }\n                else if (value > offset && value <= (i === (colorMapping.length - 1) ? this.heatMap.dataSourceMaxValue :\n                    colorMapping[i + 1].startValue)) {\n                    nextOffset = (i === (colorMapping.length - 1)) ? this.heatMap.dataSourceMaxValue : colorMapping[i + 1].startValue;\n                    previousOffset = offset;\n                    previousColor = this.heatMap.paletteSettings.fillColor.minColor;\n                    nextColor = this.heatMap.paletteSettings.fillColor.maxColor;\n                    break;\n                }\n                else {\n                    nextOffset = offset;\n                    previousOffset = offset;\n                }\n            }\n        }\n        else {\n            for (i = 1; i < colorMapping.length; i++) {\n                var offset = Number(colorMapping[i].value);\n                if (value <= offset) {\n                    nextOffset = offset;\n                    previousColor = this.getEqualColor(colorMapping, previousOffset);\n                    nextColor = this.getEqualColor(colorMapping, nextOffset);\n                    break;\n                }\n                else {\n                    nextOffset = offset;\n                    previousOffset = offset;\n                }\n            }\n        }\n        var percent = 0;\n        var full = (nextOffset) - previousOffset;\n        percent = (value - previousOffset) / full;\n        percent = isNaN(percent) || !isFinite(percent) ? 0 : percent;\n        return this.getPercentageColor(percent, previousColor, nextColor);\n    };\n    /**\n     * To convert RGB to HEX.\n     *\n     * @returns {string}\n     * @private\n     */\n    CellColor.prototype.rgbToHex = function (r, g, b) {\n        return '#' + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n    };\n    /**\n     * To convert Component to HEX.\n     *\n     * @returns {string}\n     * @private\n     */\n    CellColor.prototype.componentToHex = function (c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n    /**\n     * To get similar color.\n     *\n     * @returns {string}\n     * @private\n     */\n    CellColor.prototype.getEqualColor = function (list, offset) {\n        for (var i = 0; i < list.length; i++) {\n            if (Number(list[i].value) === offset) {\n                var color = list[i].color;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(color)) {\n                    if (color.indexOf('rgb') !== -1) {\n                        color = this.convertToHex(color);\n                    }\n                    else if (color.indexOf('#') === -1) {\n                        color = '#FFFFFF';\n                    }\n                }\n                else {\n                    color = '#FFFFFF';\n                }\n                return color;\n            }\n        }\n        return '#00000';\n    };\n    /**\n     * To convert RGB to HEX.\n     *\n     * @returns {string}\n     * @private\n     */\n    CellColor.prototype.convertToHex = function (color) {\n        var itemColor = color.substr(3);\n        itemColor = itemColor.split('(')[1].split(')')[0];\n        var colorSplit = itemColor.split(',');\n        itemColor = this.rgbToHex(parseInt(colorSplit[0], 10), parseInt(colorSplit[1], 10), parseInt(colorSplit[2], 10));\n        return itemColor;\n    };\n    /**\n     * To get RGB for percentage value.\n     *\n     * @returns {any}\n     * @private\n     */\n    CellColor.prototype.getPercentageColor = function (percent, previous, next) {\n        var nextColor = next.split('#')[1];\n        var prevColor = previous.split('#')[1];\n        var r = this.getPercentage(percent, parseInt(prevColor.substr(0, 2), 16), parseInt(nextColor.substr(0, 2), 16));\n        var g = this.getPercentage(percent, parseInt(prevColor.substr(2, 2), 16), parseInt(nextColor.substr(2, 2), 16));\n        var b = this.getPercentage(percent, parseInt(prevColor.substr(4, 2), 16), parseInt(nextColor.substr(4, 2), 16));\n        return new RgbColor(r, g, b);\n    };\n    /**\n     * To convert numbet to percentage.\n     *\n     * @returns {any}\n     * @private\n     */\n    CellColor.prototype.getPercentage = function (percent, previous, next) {\n        var full = next - previous;\n        return Math.round((previous + (full * percent)));\n    };\n    /**\n     * To get complete color Collection.\n     *\n     * @private\n     */\n    CellColor.prototype.getColorCollection = function () {\n        var heatMap = this.heatMap;\n        heatMap.colorCollection = [];\n        heatMap.legendColorCollection = [];\n        var range;\n        for (var j = 0; j < this.heatMap.paletteSettings.palette.length; j++) {\n            if (this.heatMap.paletteSettings.palette[j].startValue === null ||\n                this.heatMap.paletteSettings.palette[j].endValue === null) {\n                this.heatMap.isColorRange = false;\n                break;\n            }\n            else {\n                this.heatMap.isColorRange = true;\n            }\n        }\n        var minValue = heatMap.bubbleSizeWithColor ? heatMap.minColorValue : heatMap.dataSourceMinValue;\n        var maxValue = heatMap.bubbleSizeWithColor ? heatMap.maxColorValue : heatMap.dataSourceMaxValue;\n        heatMap.emptyPointColor = heatMap.paletteSettings.emptyPointColor ? heatMap.paletteSettings.emptyPointColor :\n            heatMap.themeStyle.emptyCellColor;\n        var tempcolorMapping = this.orderbyOffset(this.heatMap.isColorRange ? heatMap.paletteSettings.palette :\n            heatMap.paletteSettings.palette && heatMap.paletteSettings.palette.length > 1 ?\n                heatMap.paletteSettings.palette : heatMap.themeStyle.palette);\n        if (!tempcolorMapping.isCompact) {\n            if (heatMap.paletteSettings.type === 'Gradient') {\n                range = (maxValue - minValue) / (tempcolorMapping.offsets.length - 1);\n            }\n            else {\n                range = (maxValue - minValue) / (tempcolorMapping.offsets.length);\n            }\n            if (tempcolorMapping.offsets.length >= 2) {\n                for (var index = 0; index < tempcolorMapping.offsets.length; index++) {\n                    heatMap.colorCollection.push(new _model_base__WEBPACK_IMPORTED_MODULE_1__.ColorCollection((Math.round(((minValue) + (index * range)) * 100) / 100), tempcolorMapping.offsets[index].color, tempcolorMapping.offsets[index].label, tempcolorMapping.offsets[index].startValue, tempcolorMapping.offsets[index].endValue, tempcolorMapping.offsets[index].minColor, tempcolorMapping.offsets[index].maxColor));\n                    heatMap.legendColorCollection.push(new _model_base__WEBPACK_IMPORTED_MODULE_1__.LegendColorCollection(Math.round(((minValue) + (index * range)) * 100) / 100, tempcolorMapping.offsets[index].color, tempcolorMapping.offsets[index].label, tempcolorMapping.offsets[index].startValue, tempcolorMapping.offsets[index].endValue, tempcolorMapping.offsets[index].minColor, tempcolorMapping.offsets[index].maxColor, false));\n                }\n            }\n        }\n        else {\n            heatMap.colorCollection = tempcolorMapping.offsets;\n            heatMap.legendColorCollection = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], tempcolorMapping.offsets, null, true);\n        }\n        if (!this.heatMap.isColorRange) {\n            this.updateLegendColorCollection(minValue, maxValue, tempcolorMapping);\n        }\n    };\n    /**\n     * To update legend color Collection.\n     *\n     * @private\n     */\n    CellColor.prototype.updateLegendColorCollection = function (minValue, maxValue, tempcolorMapping) {\n        if (this.heatMap.paletteSettings.type === 'Fixed' && (tempcolorMapping.isCompact || tempcolorMapping.isLabel)) {\n            return;\n        }\n        if (Math.round(minValue * 100) / 100 < this.heatMap.legendColorCollection[0].value) {\n            this.heatMap.legendColorCollection.unshift(new _model_base__WEBPACK_IMPORTED_MODULE_1__.LegendColorCollection(Math.round(minValue * 100) / 100, this.heatMap.legendColorCollection[0].color, this.heatMap.legendColorCollection[0].label, this.heatMap.legendColorCollection[0].startValue, this.heatMap.legendColorCollection[0].endValue, this.heatMap.legendColorCollection[0].minColor, this.heatMap.legendColorCollection[0].maxColor, true));\n        }\n        if (Math.round(maxValue * 100) / 100 > this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].value) {\n            this.heatMap.legendColorCollection.push(new _model_base__WEBPACK_IMPORTED_MODULE_1__.LegendColorCollection(Math.round(maxValue * 100) / 100, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].color, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].label, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].startValue, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].endValue, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].minColor, this.heatMap.legendColorCollection[this.heatMap.legendColorCollection.length - 1].maxColor, true));\n        }\n    };\n    /**\n     * To get ordered palette color collection.\n     *\n     * @private\n     */\n    CellColor.prototype.orderbyOffset = function (offsets) {\n        var returnCollection = new _helper__WEBPACK_IMPORTED_MODULE_2__.PaletterColor();\n        var key = this.heatMap.isColorRange ? 'to' : 'value';\n        var label = 'label';\n        returnCollection.isCompact = true;\n        returnCollection.isLabel = true;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        returnCollection.offsets = offsets.sort(function (a, b) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(a[label]) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(b[label])) {\n                returnCollection.isLabel = false;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(a[key]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(b[key])) {\n                return a[key] - b[key];\n            }\n            else {\n                returnCollection.isCompact = false;\n                return a;\n            }\n        });\n        if (!returnCollection.isCompact) {\n            returnCollection.offsets = this.heatMap.paletteSettings.palette && this.heatMap.paletteSettings.palette.length > 1 ?\n                this.heatMap.paletteSettings.palette : this.heatMap.themeStyle.palette;\n        }\n        return returnCollection;\n    };\n    /**\n     * To get color depends to value.\n     *\n     * @private\n     */\n    CellColor.prototype.getColorByValue = function (text) {\n        var color = '';\n        var rbg;\n        var compareValue = 0;\n        if (text.toString() !== '') {\n            if (this.heatMap.cellSettings.tileType === 'Bubble' &&\n                (this.heatMap.cellSettings.bubbleType === 'Size' || this.heatMap.cellSettings.bubbleType === 'Sector')) {\n                color = this.heatMap.isColorRange ? this.heatMap.colorCollection[0].minColor : this.heatMap.colorCollection[0].color;\n            }\n            else if (this.heatMap.paletteSettings.type === 'Fixed') {\n                for (var y = 0; y < this.heatMap.colorCollection.length; y++) {\n                    compareValue = this.heatMap.isColorRange ? this.heatMap.paletteSettings.palette[y].startValue :\n                        this.heatMap.colorCollection[y + 1] ? this.heatMap.colorCollection[y + 1].value :\n                            this.heatMap.colorCollection[y].value;\n                    var singleValue = this.heatMap.dataSourceMinValue === this.heatMap.dataSourceMaxValue;\n                    if (this.heatMap.isColorRange) {\n                        var legendRange = void 0;\n                        if ((text <= this.heatMap.colorCollection[y].endValue &&\n                            text >= this.heatMap.colorCollection[y].startValue)) {\n                            if (this.heatMap.legendVisibilityByCellType) {\n                                legendRange = this.heatMap.legendModule.legendRange;\n                            }\n                            color = (this.heatMap.legendVisibilityByCellType && legendRange[y] &&\n                                !legendRange[y].visible) ?\n                                this.heatMap.themeStyle.toggledColor : this.heatMap.colorCollection[y].minColor;\n                        }\n                        else if (color === '') {\n                            color = this.heatMap.paletteSettings.fillColor.minColor;\n                        }\n                    }\n                    else {\n                        if ((text <= compareValue && singleValue && y === 0) || text < compareValue ||\n                            (text >= compareValue && y === this.heatMap.colorCollection.length - 1)) {\n                            var legendRange = void 0;\n                            if (this.heatMap.legendVisibilityByCellType) {\n                                legendRange = this.heatMap.legendModule.legendRange;\n                            }\n                            color = (this.heatMap.legendVisibilityByCellType && legendRange[y] &&\n                                !legendRange[y].visible) ?\n                                this.heatMap.themeStyle.toggledColor : this.heatMap.colorCollection[y].color;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (this.heatMap.paletteSettings.colorGradientMode !== 'Table') {\n                    this.getColorCollection();\n                }\n                if (text < this.heatMap.colorCollection[0].value && !this.heatMap.isColorRange) {\n                    color = this.heatMap.colorCollection[0].color;\n                }\n                else if (text > this.heatMap.colorCollection[this.heatMap.colorCollection.length - 1].value &&\n                    !this.heatMap.isColorRange) {\n                    color = this.heatMap.colorCollection[this.heatMap.colorCollection.length - 1].color;\n                }\n                else {\n                    rbg = this.convertToRGB(text, this.heatMap.colorCollection);\n                    color = this.rgbToHex(rbg.R, rbg.G, rbg.B);\n                }\n            }\n        }\n        else {\n            color = this.heatMap.emptyPointColor;\n        }\n        return color;\n    };\n    /**\n     * @returns {void}\n     * @private\n     */\n    CellColor.prototype.destroy = function () {\n        this.heatMap = null;\n    };\n    return CellColor;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/colorMapping.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/export.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/export.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportUtils: () => (/* binding */ ExportUtils)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-pdf-export */ \"./node_modules/@syncfusion/ej2-pdf-export/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/helper.js\");\n\n\n\n\n\nvar ExportUtils = /** @class */ (function () {\n    /**\n     * Constructor for Heatmap\n     *\n     * @param  {HeatMap} control - specifies the control\n     *\n     */\n    function ExportUtils(control) {\n        this.control = control;\n    }\n    /**\n     * To export the file as image/svg format\n     *\n     * @param type\n     * @param fileName\n     * @private\n     */\n    ExportUtils.prototype.export = function (type, fileName, orientation) {\n        var _this = this;\n        var controlValue = this.getControlsValue();\n        var width = controlValue.width;\n        var height = controlValue.height;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var element = this.control.svgObject;\n        var url;\n        var isCanvas = this.control.enableCanvasRendering;\n        var image;\n        if (!isCanvas) {\n            element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('canvas', {\n                id: 'ej2-canvas',\n                attrs: {\n                    'width': width.toString(),\n                    'height': height.toString()\n                }\n            });\n        }\n        var isDownload = !(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\n        orientation = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(orientation) ? _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_1__.PdfPageOrientation.Landscape : orientation;\n        var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' +\n            controlValue.svg.outerHTML +\n            '</svg>';\n        if (!isCanvas) {\n            var exportElement = this.control.svgObject.cloneNode(true);\n            var backgroundElement = exportElement.childNodes[0];\n            var backgroundColor = backgroundElement.getAttribute('fill');\n            if ((this.control.theme === 'Tailwind' || this.control.theme === 'Tailwind3' || this.control.theme === 'Bootstrap5' || this.control.theme === 'Fluent' || this.control.theme === 'Material3' || this.control.theme === 'Fluent2')\n                && (backgroundColor === 'rgba(255,255,255, 0.0)' || backgroundColor === 'transparent')) {\n                backgroundElement.setAttribute('fill', 'rgba(255,255,255, 1)');\n            }\n            else if ((this.control.theme === 'TailwindDark' || this.control.theme === 'Tailwind3Dark' || this.control.theme === 'Bootstrap5Dark' || this.control.theme === 'FluentDark' || this.control.theme === 'Material3Dark' ||\n                this.control.theme === 'Fluent2Dark' || this.control.theme === 'Fluent2HighContrast')\n                && (backgroundColor === 'rgba(255,255,255, 0.0)' || backgroundColor === 'transparent')) {\n                backgroundElement.setAttribute('fill', 'rgba(0, 0, 0, 1)');\n            }\n            url = window.URL.createObjectURL(new Blob(type === 'SVG' ? [svgData] :\n                [(new XMLSerializer()).serializeToString(exportElement)], { type: 'image/svg+xml' }));\n        }\n        else {\n            url = element.toDataURL('image/png');\n        }\n        if (type === 'SVG') {\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {\n                var svg = new Blob([(new XMLSerializer()).serializeToString(controlValue.svg)], { type: 'application/octet-stream' });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(window.navigator.msSaveOrOpenBlob)) {\n                    window.navigator.msSaveOrOpenBlob(svg, fileName + '.' + type.toLocaleLowerCase());\n                }\n            }\n            else {\n                this.triggerDownload(fileName, type, url, isDownload);\n            }\n        }\n        else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {\n            var canvas = element;\n            if (!isCanvas) {\n                canvas = this.createCanvas();\n            }\n            image = canvas.toDataURL(type);\n            if (type === 'PDF') {\n                this.exportPdf(canvas, orientation, width, height, isDownload, fileName);\n            }\n            else {\n                this.doExport(type, image, fileName);\n            }\n        }\n        else {\n            var image_1 = new Image();\n            var ctx_1 = element.getContext('2d');\n            var backgroundColor_1 = ctx_1.shadowColor;\n            image_1.onload = (function () {\n                if ((_this.control.theme === 'Tailwind' || _this.control.theme === 'Tailwind3' || _this.control.theme === 'Bootstrap5'\n                    || _this.control.theme === 'Fluent' || _this.control.theme === 'Material3' || _this.control.theme === 'Fluent2')\n                    && (backgroundColor_1 === 'rgba(0, 0, 0, 0)' || backgroundColor_1 === 'transparent')) {\n                    ctx_1.fillStyle = 'rgba(255,255,255, 1)';\n                }\n                else if ((_this.control.theme === 'TailwindDark' || _this.control.theme === 'Tailwind3Dark' ||\n                    _this.control.theme === 'Bootstrap5Dark' || _this.control.theme === 'FluentDark' || _this.control.theme === 'Material3Dark'\n                    || _this.control.theme === 'Fluent2Dark' || _this.control.theme === 'Fluent2HighContrast')\n                    && (backgroundColor_1 === 'rgba(0, 0, 0, 0)' || backgroundColor_1 === 'transparent')) {\n                    ctx_1.fillStyle = 'rgba(0, 0, 0, 1)';\n                }\n                ctx_1.fillRect(0, 0, element.width, element.height);\n                ctx_1.drawImage(image_1, 0, 0);\n                window.URL.revokeObjectURL(url);\n                if (type === 'PDF') {\n                    _this.exportPdf(element, orientation, width, height, isDownload, fileName);\n                }\n                else {\n                    if (window.navigator.msSaveOrOpenBlob) {\n                        window.navigator.msSaveOrOpenBlob(element.msToBlob(), fileName + '.' + type.toLocaleLowerCase());\n                    }\n                    else {\n                        _this.triggerDownload(fileName, type, element.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\n                    }\n                }\n            });\n            image_1.src = url;\n        }\n        if (!isCanvas) {\n            var id = document.getElementById(this.control.element.id);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(id + '_canvas');\n        }\n    };\n    /**\n     * To trigger the download element\n     *\n     * @param fileName\n     * @param type\n     * @param url\n     * @private\n     */\n    ExportUtils.prototype.triggerDownload = function (fileName, type, url, isDownload) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a', {\n            attrs: {\n                'download': fileName + '.' + type.toLocaleLowerCase(),\n                'href': url\n            }\n        }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\n            view: window,\n            bubbles: false,\n            cancelable: true\n        }));\n    };\n    /**\n     * To get the maximum size value\n     *\n     * @param controls\n     * @param name\n     */\n    ExportUtils.prototype.getControlsValue = function () {\n        var width = 0;\n        var height = 0;\n        var isCanvas = this.control.enableCanvasRendering;\n        var svgObject = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.SvgRenderer('').createSvg({\n            id: 'Svg_Export_Element',\n            width: 200, height: 200\n        });\n        var svg = this.control.svgObject.cloneNode(true);\n        var groupEle = this.control.renderer.createGroup({});\n        groupEle.style.cssText = 'transform: translateY(' + height + 'px)';\n        if (!isCanvas) {\n            groupEle.appendChild(svg);\n        }\n        width = Math.max(this.control.availableSize.width, width);\n        height = height + this.control.availableSize.height;\n        if (!isCanvas) {\n            svgObject.appendChild(groupEle);\n        }\n        if (!isCanvas) {\n            svgObject.setAttribute('width', width + '');\n            svgObject.setAttribute('height', height + '');\n        }\n        return {\n            'width': width,\n            'height': height,\n            'svg': svgObject\n        };\n    };\n    ExportUtils.prototype.createCanvas = function () {\n        var heatmap = this.control;\n        var renderMode = heatmap.renderingMode;\n        heatmap.renderingMode = 'Canvas';\n        heatmap.refresh();\n        var canvas = heatmap.svgObject;\n        heatmap.renderingMode = renderMode;\n        heatmap.refresh();\n        return canvas;\n    };\n    ExportUtils.prototype.exportPdf = function (element, orientation, width, height, isDownload, fileName) {\n        var document = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_1__.PdfDocument();\n        var margin = document.pageSettings.margins;\n        var pdfDefaultWidth = document.pageSettings.width;\n        var pdfDefaultHeight = document.pageSettings.height;\n        var imageString = element.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\n        document.pageSettings.orientation = orientation;\n        var exactWidth = (pdfDefaultWidth < width) ? (width + margin.left + margin.right) : pdfDefaultWidth;\n        var exactHeight = (pdfDefaultHeight < height) ? (height + margin.top + margin.bottom) : pdfDefaultHeight;\n        document.pageSettings.size = new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_1__.SizeF(exactWidth, exactHeight);\n        imageString = imageString.slice(imageString.indexOf(',') + 1);\n        document.pages.add().graphics.drawImage(new _syncfusion_ej2_pdf_export__WEBPACK_IMPORTED_MODULE_1__.PdfBitmap(imageString), 0, 0, width, height);\n        if (isDownload) {\n            document.save(fileName + '.pdf');\n            document.destroy();\n        }\n    };\n    ExportUtils.prototype.doExport = function (type, image, fileName) {\n        var images = [];\n        var fileType = type || 'JPG';\n        images = [image];\n        this.exportImage(images, fileName, fileType, image);\n    };\n    ExportUtils.prototype.exportImage = function (images, fileName, fileType, image) {\n        var buffers = [];\n        var length = (!(images instanceof HTMLElement)) ? images.length : 0;\n        for (var g = 0; g < length; g++) {\n            image = images[g];\n            image = image.replace(/^data:[a-z]*;,/, '');\n            var image1 = image.split(',');\n            var byteString = atob(image1[1]);\n            var buffer = new ArrayBuffer(byteString.length);\n            var intArray = new Uint8Array(buffer);\n            for (var i = 0; i < byteString.length; i++) {\n                intArray[i] = byteString.charCodeAt(i);\n            }\n            buffers.push(buffer);\n        }\n        for (var j = 0; j < buffers.length; j++) {\n            var b = new Blob([buffers[j]], { type: 'application/octet-stream' });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(window.navigator.msSaveOrOpenBlob)) {\n                window.navigator.msSaveOrOpenBlob(b, fileName + '.' + fileType.toLocaleLowerCase());\n            }\n        }\n    };\n    /**\n     * To print the heatmap elements.\n     *\n     * @param elements\n     * @private\n     */\n    ExportUtils.prototype.print = function () {\n        this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n        this.printWindow.moveTo(0, 0);\n        this.printWindow.resizeTo(screen.availWidth, screen.availHeight);\n        if (this.control.renderingMode === 'SVG') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.print)(this.getHTMLContent(), this.printWindow);\n        }\n        else {\n            var element = this.control.svgObject;\n            var dataUrl = element.toDataURL();\n            var image_2 = new Image();\n            var ctx_2 = element.getContext('2d');\n            image_2.onload = (function () {\n                ctx_2.drawImage(image_2, 0, 0);\n            });\n            image_2.src = dataUrl;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.print)(image_2, this.printWindow);\n        }\n    };\n    /**\n     * To get the html string of the heatmap.\n     *\n     * @param elements\n     * @private\n     */\n    ExportUtils.prototype.getHTMLContent = function () {\n        var div = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');\n        div.appendChild(this.control.element.cloneNode(true));\n        return div;\n    };\n    return ExportUtils;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/export.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/tooltip.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/tooltip.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TooltipSettings: () => (/* binding */ TooltipSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/base */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/model/base.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/theme */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/model/theme.js\");\n/**\n * HeatMap tool tip file\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n/**\n * Sets and gets the options to customize the tooltip in heatmap.\n */\nvar TooltipSettings = /** @class */ (function (_super) {\n    __extends(TooltipSettings, _super);\n    function TooltipSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TooltipSettings.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TooltipSettings.prototype, \"fill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_3__.TooltipBorder)\n    ], TooltipSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)(_model_theme__WEBPACK_IMPORTED_MODULE_4__.Theme.tooltipFont, _model_base__WEBPACK_IMPORTED_MODULE_3__.Font)\n    ], TooltipSettings.prototype, \"textStyle\", void 0);\n    return TooltipSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n *\n * The `Tooltip` module is used to render the tooltip for heatmap series.\n */\nvar Tooltip = /** @class */ (function () {\n    function Tooltip(heatMap) {\n        /* private */\n        this.isFirst = true;\n        /* private */\n        this.isFadeout = false;\n        this.heatMap = heatMap;\n    }\n    /**\n     * Get module name\n     */\n    Tooltip.prototype.getModuleName = function () {\n        return 'Tooltip';\n    };\n    /**\n     * To show/hide Tooltip.\n     *\n     * @private\n     */\n    Tooltip.prototype.showHideTooltip = function (isShow, isFadeout) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.heatMap)) {\n            var ele = document.getElementById(this.heatMap.element.id + 'Celltooltipcontainer');\n            if (!isShow) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele) && ele.style.visibility !== 'hidden') {\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipObject) && isFadeout && this.heatMap.isRectBoundary) {\n                        this.tooltipObject.fadeOut();\n                    }\n                    else {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipObject) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipObject.element)) {\n                            var tooltipElement = this.tooltipObject.element.firstChild;\n                            tooltipElement.setAttribute('opacity', '0');\n                        }\n                    }\n                    ele.style.visibility = 'hidden';\n                }\n                this.isFadeout = true;\n            }\n            else {\n                ele.style.visibility = 'visible';\n            }\n        }\n    };\n    /**\n     * To destroy the Tooltip.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip.prototype.destroy = function () {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tooltipObject)) {\n            this.tooltipObject.destroy();\n            this.tooltipObject.controlInstance = null;\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.removeElement)(this.heatMap.element.id + 'Celltooltipcontainer');\n        }\n        this.tooltipObject = null;\n        this.heatMap = null;\n    };\n    /**\n     * To add Tooltip to the rect cell.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip.prototype.createTooltip = function (currentRect, x, y, tempTooltipText) {\n        var offset = null;\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.heatMap.element.id + 'Celltooltipcontainer');\n        if (this.heatMap.cellSettings.showLabel && this.heatMap.heatMapSeries.checkLabelXDisplay &&\n            this.heatMap.heatMapSeries.checkLabelYDisplay) {\n            offset = parseInt(this.heatMap.cellSettings.textStyle.size, 10) / 2;\n        }\n        if (this.heatMap.theme === 'Tailwind' || this.heatMap.theme === 'Tailwind3') {\n            this.heatMap.setProperties({ tooltipSettings: { textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500' } } }, true);\n        }\n        if (this.heatMap.theme === 'TailwindDark' || this.heatMap.theme === 'Tailwind3Dark') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#F9FAFB', textStyle: { size: '12px', fontFamily: 'Inter', fontWeight: '500', color: '#1F2937' } } }, true);\n        }\n        if (this.heatMap.theme === 'Bootstrap5') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#000000', textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400', color: '#FFFFFF' } } }, true);\n        }\n        if (this.heatMap.theme === 'Bootstrap5Dark') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#FFFFFF', textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400', color: '#212529' } } }, true);\n        }\n        if (this.heatMap.theme === 'Fluent') {\n            this.heatMap.setProperties({ tooltipSettings: { textStyle: { size: '12px', fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif', fontWeight: '500' } } }, true);\n        }\n        if (this.heatMap.theme === 'FluentDark') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#252423', textStyle: { size: '12px', fontFamily: '\"Segoe UI\", -apple-system, BlinkMacSystemFont, \"Roboto\", \"Helvetica Neue\", sans-serif', fontWeight: '500', color: '#F3F2F1' } } }, true);\n        }\n        if (this.heatMap.theme === 'Material3') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#313033', textStyle: { size: '14px', fontFamily: 'Roboto', fontWeight: '400', color: '#F4EFF4' } } }, true);\n        }\n        if (this.heatMap.theme === 'Material3Dark') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#E6E1E5', textStyle: { size: '14px', fontFamily: 'Roboto', fontWeight: '400', color: '#313033' } } }, true);\n        }\n        if (this.heatMap.theme === 'Fluent2') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#FFFFFF', textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400', color: '#242424' } } }, true);\n        }\n        if (this.heatMap.theme === 'Fluent2Dark') {\n            this.heatMap.setProperties({ tooltipSettings: { fill: '#292929', textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400', color: '#FFFFFF' } } }, true);\n        }\n        if (this.heatMap.theme === 'Fluent2HighContrast') {\n            this.heatMap.setProperties({\n                tooltipSettings: {\n                    fill: '#000000', textStyle: { size: '12px', fontFamily: 'Segoe UI', fontWeight: '400', color: '#FFFFFF' },\n                    border: { width: 1, color: '#FFF' }\n                }\n            }, true);\n        }\n        this.tooltipObject = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Tooltip({\n            opacity: (this.heatMap.theme === 'Tailwind' || this.heatMap.theme === 'Tailwind3' || this.heatMap.theme === 'TailwindDark' || this.heatMap.theme === 'Tailwind3Dark' || this.heatMap.theme === 'Bootstrap5' || this.heatMap.theme === 'Bootstrap5Dark' || this.heatMap.theme === 'Fluent' || this.heatMap.theme === 'FluentDark'\n                || this.heatMap.theme === 'Fluent2' || this.heatMap.theme === 'Fluent2Dark' || this.heatMap.theme === 'Fluent2HighContrast') ? 1 : 0.75,\n            enableAnimation: false,\n            offset: offset,\n            location: { x: x, y: y },\n            availableSize: this.heatMap.availableSize,\n            data: {\n                xValue: this.heatMap.heatMapSeries.hoverXAxisValue,\n                yValue: this.heatMap.heatMapSeries.hoverYAxisValue,\n                value: currentRect.value,\n                xLabel: this.heatMap.heatMapSeries.hoverXAxisLabel ?\n                    this.heatMap.heatMapSeries.hoverXAxisLabel.toString() : null,\n                yLabel: this.heatMap.heatMapSeries.hoverYAxisLabel ?\n                    this.heatMap.heatMapSeries.hoverYAxisLabel.toString() : null\n            },\n            theme: this.heatMap.theme,\n            content: tempTooltipText,\n            fill: this.heatMap.tooltipSettings.fill,\n            enableShadow: true,\n            template: this.heatMap.tooltipSettings.template === '' ? null : this.heatMap.tooltipSettings.template,\n            border: {\n                width: this.heatMap.tooltipSettings.border.width,\n                color: this.heatMap.tooltipSettings.border.color\n            },\n            textStyle: {\n                size: this.heatMap.tooltipSettings.textStyle.size,\n                fontWeight: this.heatMap.tooltipSettings.textStyle.fontWeight.toLowerCase(),\n                color: this.heatMap.tooltipSettings.textStyle.color,\n                fontStyle: this.heatMap.tooltipSettings.textStyle.fontStyle.toLowerCase(),\n                fontFamily: this.heatMap.tooltipSettings.textStyle.fontFamily\n            },\n            areaBounds: {\n                height: this.heatMap.initialClipRect.height + this.heatMap.initialClipRect.y,\n                width: this.heatMap.initialClipRect.width, x: this.heatMap.initialClipRect.x\n            }\n        }, element);\n    };\n    /**\n     * To create div container for tooltip.\n     *\n     * @returns {void}\n     * @private\n     */\n    Tooltip.prototype.createTooltipDiv = function (heatMap) {\n        var position = 'absolute';\n        var top = heatMap.enableCanvasRendering && heatMap.allowSelection ? heatMap.availableSize.height : 0;\n        var element2 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.heatMap.element.id + 'Celltooltipcontainer'\n        });\n        element2.style.cssText = 'position:' + position + '; z-index: 3;top:-' + top + 'px';\n        var tooltipElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: this.heatMap.element.id + 'Celltooltipparent'\n        });\n        tooltipElement.style.position = 'relative';\n        tooltipElement.appendChild(element2);\n        this.heatMap.element.appendChild(tooltipElement);\n    };\n    /**\n     * To get default tooltip content.\n     *\n     * @private\n     */\n    Tooltip.prototype.getTooltipContent = function (currentRect, hetmapSeries) {\n        var value;\n        var content;\n        var heatMap = this.heatMap;\n        var adaptData = this.heatMap.dataSourceSettings;\n        if (heatMap.bubbleSizeWithColor) {\n            var xAxis = heatMap.xAxis.title && heatMap.xAxis.title.text !== '' ? heatMap.xAxis.title.text : 'X-Axis';\n            var yAxis = heatMap.yAxis.title && heatMap.yAxis.title.text !== '' ? heatMap.yAxis.title.text : 'Y-Axis';\n            var value1 = adaptData.isJsonData && adaptData.adaptorType === 'Cell' ?\n                adaptData.bubbleDataMapping.size : 'Value 1';\n            var value2 = adaptData.isJsonData && adaptData.adaptorType === 'Cell' ?\n                adaptData.bubbleDataMapping.color : 'Value 2';\n            value = hetmapSeries.getFormatedText(currentRect.value[0].bubbleData, this.heatMap.cellSettings.format);\n            content = [xAxis + ' : ' + hetmapSeries.hoverXAxisLabel + '<br/>'\n                    + yAxis + ' : ' + hetmapSeries.hoverYAxisLabel + '<br/>'\n                    + value1 + ' : ' + value + '<br/>'\n                    + value2 + ' : '\n                    + hetmapSeries.getFormatedText(currentRect.value[1].bubbleData, this.heatMap.cellSettings.format)];\n        }\n        else {\n            value = currentRect.value;\n            content = [hetmapSeries.hoverXAxisLabel + ' | ' + hetmapSeries.hoverYAxisLabel + ' : ' +\n                    hetmapSeries.getFormatedText(value, this.heatMap.cellSettings.format)];\n        }\n        content = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_1__.getSanitizedTexts)(content, this.heatMap.enableHtmlSanitizer);\n        return content;\n    };\n    /**\n     * To render tooltip.\n     *\n     * @private\n     */\n    Tooltip.prototype.renderTooltip = function (currentRect) {\n        var _this = this;\n        var hetmapSeries = this.heatMap.heatMapSeries;\n        var tempTooltipText = [''];\n        var showTooltip = this.heatMap.bubbleSizeWithColor ?\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRect.value) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRect.value[0].bubbleData)\n                && currentRect.value[0].bubbleData.toString() !== '' ? true : false\n            : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRect.value) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentRect.value) &&\n                currentRect.value.toString() === '') ? false : true;\n        if (!showTooltip) {\n            this.showHideTooltip(false, false);\n            if (!currentRect.visible) {\n                this.showHideTooltip(false, false);\n            }\n        }\n        else {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.heatMap.tooltipRender)) {\n                // this.tooltipObject.header = '';\n                // this.tooltipObject.content = this.getTemplateText(\n                //     currentRect, this.heatMap.tooltipTemplate, hetmapSeries.hoverXAxisLabel,\n                //     hetmapSeries.hoverYAxisLabel);\n                var content = this.getTooltipContent(currentRect, hetmapSeries);\n                var argData = {\n                    heatmap: this.heatMap,\n                    cancel: false,\n                    name: 'tooltipRender',\n                    value: currentRect.value,\n                    xValue: this.heatMap.heatMapSeries.hoverXAxisValue,\n                    yValue: this.heatMap.heatMapSeries.hoverYAxisValue,\n                    xLabel: this.heatMap.heatMapSeries.hoverXAxisLabel ?\n                        this.heatMap.heatMapSeries.hoverXAxisLabel.toString() : null,\n                    yLabel: this.heatMap.heatMapSeries.hoverYAxisLabel ?\n                        this.heatMap.heatMapSeries.hoverYAxisLabel.toString() : null,\n                    content: content\n                };\n                this.heatMap.trigger('tooltipRender', argData, function (observedArgs) {\n                    if (!observedArgs.cancel) {\n                        tempTooltipText = observedArgs.content;\n                        _this.tooltipCallback(currentRect, tempTooltipText);\n                    }\n                    else {\n                        if (_this.tooltipObject) {\n                            _this.showHideTooltip(false);\n                        }\n                    }\n                });\n            }\n            else {\n                //  this.tooltipObject.header = hetmapSeries.hoverYAxisLabel.toString();\n                tempTooltipText = this.getTooltipContent(currentRect, hetmapSeries);\n                this.tooltipCallback(currentRect, tempTooltipText);\n            }\n        }\n    };\n    /**\n     * To render tooltip.\n     */\n    Tooltip.prototype.tooltipCallback = function (currentRect, tempTooltipText) {\n        if (!this.tooltipObject) {\n            this.createTooltip(currentRect, currentRect.x + (currentRect.width / 2), currentRect.y + (currentRect.height / 2), tempTooltipText);\n        }\n        else {\n            this.tooltipObject.content = tempTooltipText;\n            this.tooltipObject.data = {\n                xValue: this.heatMap.heatMapSeries.hoverXAxisValue,\n                yValue: this.heatMap.heatMapSeries.hoverYAxisValue,\n                xLabel: this.heatMap.heatMapSeries.hoverXAxisLabel ?\n                    this.heatMap.heatMapSeries.hoverXAxisLabel.toString() : null,\n                yLabel: this.heatMap.heatMapSeries.hoverYAxisLabel ?\n                    this.heatMap.heatMapSeries.hoverYAxisLabel.toString() : null,\n                value: currentRect.value\n            };\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.heatMap.isVue || this.heatMap.isVue3) {\n            this.tooltipObject.controlInstance = this.heatMap;\n        }\n        this.showHideTooltip(true);\n        this.tooltipObject.enableAnimation = (this.isFirst || this.isFadeout) ? false : true;\n        this.isFirst = (this.isFirst) ? false : this.isFirst;\n        this.isFadeout = (this.isFadeout) ? false : this.isFadeout;\n        this.tooltipObject.location.x = currentRect.x + (currentRect.width / 2);\n        this.tooltipObject.location.y = currentRect.y + (currentRect.height / 2);\n        if (!currentRect.visible) {\n            this.showHideTooltip(false, false);\n        }\n    };\n    return Tooltip;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/heatmap/utils/tooltip.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-heatmap/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-heatmap/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdaptiveMinMax: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.AdaptiveMinMax),\n/* harmony export */   Adaptor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Adaptor),\n/* harmony export */   Axis: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Axis),\n/* harmony export */   AxisHelper: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.AxisHelper),\n/* harmony export */   AxisLabelBorder: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.AxisLabelBorder),\n/* harmony export */   Border: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Border),\n/* harmony export */   BubbleData: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.BubbleData),\n/* harmony export */   BubbleSize: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.BubbleSize),\n/* harmony export */   BubbleTooltipData: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.BubbleTooltipData),\n/* harmony export */   CanvasTooltip: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CanvasTooltip),\n/* harmony export */   CellColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CellColor),\n/* harmony export */   CellSettings: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CellSettings),\n/* harmony export */   CircleOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CircleOption),\n/* harmony export */   ColorCollection: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.ColorCollection),\n/* harmony export */   CurrentLegendRect: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CurrentLegendRect),\n/* harmony export */   CurrentRect: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CurrentRect),\n/* harmony export */   CustomizeOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.CustomizeOption),\n/* harmony export */   Data: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Data),\n/* harmony export */   DrawSvgCanvas: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.DrawSvgCanvas),\n/* harmony export */   ExportUtils: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.ExportUtils),\n/* harmony export */   FillColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.FillColor),\n/* harmony export */   Font: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Font),\n/* harmony export */   Gradient: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Gradient),\n/* harmony export */   GradientColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.GradientColor),\n/* harmony export */   GradientPointer: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.GradientPointer),\n/* harmony export */   HeatMap: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.HeatMap),\n/* harmony export */   Legend: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Legend),\n/* harmony export */   LegendColorCollection: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.LegendColorCollection),\n/* harmony export */   LegendRange: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.LegendRange),\n/* harmony export */   LegendSettings: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.LegendSettings),\n/* harmony export */   Line: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Line),\n/* harmony export */   LineOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.LineOption),\n/* harmony export */   Margin: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Margin),\n/* harmony export */   MultiLevelCategories: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.MultiLevelCategories),\n/* harmony export */   MultiLevelLabels: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.MultiLevelLabels),\n/* harmony export */   MultiLevelPosition: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.MultiLevelPosition),\n/* harmony export */   MultipleRow: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.MultipleRow),\n/* harmony export */   PaletteCollection: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.PaletteCollection),\n/* harmony export */   PaletteSettings: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.PaletteSettings),\n/* harmony export */   PaletterColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.PaletterColor),\n/* harmony export */   Path: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Path),\n/* harmony export */   PathAttributes: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.PathAttributes),\n/* harmony export */   PathOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.PathOption),\n/* harmony export */   Rect: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Rect),\n/* harmony export */   RectOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.RectOption),\n/* harmony export */   RgbColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.RgbColor),\n/* harmony export */   SelectedCellDetails: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.SelectedCellDetails),\n/* harmony export */   Series: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Series),\n/* harmony export */   Size: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Size),\n/* harmony export */   TextBasic: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TextBasic),\n/* harmony export */   TextElement: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TextElement),\n/* harmony export */   TextOption: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TextOption),\n/* harmony export */   Title: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Title),\n/* harmony export */   ToggleVisibility: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.ToggleVisibility),\n/* harmony export */   Tooltip: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.Tooltip),\n/* harmony export */   TooltipBorder: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TooltipBorder),\n/* harmony export */   TooltipSettings: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TooltipSettings),\n/* harmony export */   TwoDimensional: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.TwoDimensional),\n/* harmony export */   colorNameToHex: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.colorNameToHex),\n/* harmony export */   componentToHex: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.componentToHex),\n/* harmony export */   convertElement: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.convertElement),\n/* harmony export */   convertHexToColor: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.convertHexToColor),\n/* harmony export */   convertToHexCode: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.convertToHexCode),\n/* harmony export */   createLabelTemplate: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.createLabelTemplate),\n/* harmony export */   formatValue: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.formatValue),\n/* harmony export */   getElement: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getElement),\n/* harmony export */   getIsLineBreakLabel: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getIsLineBreakLabel),\n/* harmony export */   getSanitizedTexts: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getSanitizedTexts),\n/* harmony export */   getTemplateFunction: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getTemplateFunction),\n/* harmony export */   getTitle: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getTitle),\n/* harmony export */   getTooltipText: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.getTooltipText),\n/* harmony export */   increaseDateTimeInterval: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.increaseDateTimeInterval),\n/* harmony export */   measureText: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.measureText),\n/* harmony export */   removeElement: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.removeElement),\n/* harmony export */   removeMeasureElement: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.removeMeasureElement),\n/* harmony export */   rotateTextSize: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.rotateTextSize),\n/* harmony export */   showTooltip: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.showTooltip),\n/* harmony export */   stringToNumber: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.stringToNumber),\n/* harmony export */   sum: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.sum),\n/* harmony export */   textNone: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.textNone),\n/* harmony export */   textTrim: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.textTrim),\n/* harmony export */   textWrap: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.textWrap),\n/* harmony export */   titlePositionX: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.titlePositionX),\n/* harmony export */   titlePositionY: () => (/* reexport safe */ _heatmap_index__WEBPACK_IMPORTED_MODULE_0__.titlePositionY)\n/* harmony export */ });\n/* harmony import */ var _heatmap_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./heatmap/index */ \"./node_modules/@syncfusion/ej2-heatmap/src/heatmap/index.js\");\n/**\n * HeatMap index file\n */\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-heatmap/src/index.js?");

/***/ })

}]);