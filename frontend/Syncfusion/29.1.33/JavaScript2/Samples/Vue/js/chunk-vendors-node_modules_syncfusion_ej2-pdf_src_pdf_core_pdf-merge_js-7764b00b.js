"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_pdf-merge_js-7764b00b"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-merge.js":
/*!********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-merge.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _PdfCopier: () => (/* binding */ _PdfCopier),\n/* harmony export */   _PdfMergeHelper: () => (/* binding */ _PdfMergeHelper)\n/* harmony export */ });\n/* harmony import */ var _annotations_annotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotations/annotation */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/annotations/annotation.js\");\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n/* harmony import */ var _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fonts/pdf-standard-font */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-standard-font.js\");\n/* harmony import */ var _form_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./form/field */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/form/field.js\");\n/* harmony import */ var _pdf_document__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pdf-document */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-document.js\");\n/* harmony import */ var _pdf_outline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pdf-outline */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-outline.js\");\n/* harmony import */ var _pdf_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pdf-page */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page.js\");\n/* harmony import */ var _pdf_page_import_options__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pdf-page-import-options */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-page-import-options.js\");\n/* harmony import */ var _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pdf-primitives */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-primitives.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/utils.js\");\n/* harmony import */ var _base_stream__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./base-stream */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/base-stream.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar _PdfMergeHelper = /** @class */ (function () {\n    function _PdfMergeHelper(crossReference, destination, source, pageReference, options) {\n        this._namedDestinations = []; // eslint-disable-line\n        this._bookmarks = []; // eslint-disable-line\n        this._fields = []; // eslint-disable-line\n        this._pageReference = new Map();\n        this._bookmarksPageLinkReference = new Map();\n        this._destination = []; // eslint-disable-line\n        this._newList = new Map();\n        this._annotationLayer = new Map();\n        this._isLayersPresent = false;\n        this._fieldNames = [];\n        this._options = new _pdf_page_import_options__WEBPACK_IMPORTED_MODULE_7__.PdfPageImportOptions();\n        this._kidsReference = []; // eslint-disable-line\n        this._formFieldsCollection = new Map();\n        this._formFields = [];\n        this._isDuplicatePage = false;\n        this._fieldCount = 0;\n        this._crossReference = crossReference;\n        this._destinationDocument = destination;\n        this._sourceDocument = source;\n        this._pageReference = pageReference;\n        if (typeof options !== 'undefined') {\n            this._options = options;\n        }\n        this._copier = new _PdfCopier(this._crossReference, this._sourceDocument._crossReference);\n    }\n    _PdfMergeHelper.prototype._importPages = function (page, index, layers, isCopiedPage, options, isSplitDocument) {\n        var _this = this;\n        var template;\n        var newPage;\n        var pageDictionary = page._pageDictionary;\n        this._isDuplicatePage = isCopiedPage;\n        if (!options) {\n            this._options.rotation = page.rotation;\n        }\n        else {\n            this._options.rotation = options.rotation;\n        }\n        if (typeof index === 'number') {\n            newPage = this._insertNewPage(page, index);\n        }\n        else if (this._isDuplicatePage) {\n            newPage = this._insertNewPage(page, page._pageIndex + 1);\n        }\n        else {\n            newPage = this._insertNewPage(page);\n        }\n        if ((isCopiedPage || isSplitDocument) && this._options.optimizeResources) {\n            var newContents_1 = []; // eslint-disable-line\n            pageDictionary.forEach(function (key, value) {\n                if (key === 'Contents' && newContents_1.length === 0) {\n                    var contents = value; // eslint-disable-line\n                    if (contents instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                        var pageContent = isSplitDocument ? _this._copier._copy(contents) : contents; // eslint-disable-line\n                        newPage._pageDictionary.update(key, pageContent);\n                    }\n                    else if (contents instanceof Array) {\n                        for (var i = 0; i < contents.length; i++) {\n                            var newContent = isSplitDocument ? (_this._copier._copy(contents[Number.parseInt(i.toString(), 10)])) : // eslint-disable-line\n                                contents[Number.parseInt(i.toString(), 10)];\n                            newContents_1.push(newContent);\n                        }\n                        newPage._pageDictionary.update(key, newContents_1);\n                    }\n                }\n                else if (key === 'Resources' && value) {\n                    var resourceValue = isSplitDocument ? _this._copier._copy(value) : value; // eslint-disable-line\n                    if (resourceValue) {\n                        newPage._pageDictionary.update(key, resourceValue);\n                    }\n                }\n                else if (key !== 'Resources' && key !== 'MediaBox' && key !== 'CropBox' && key !== 'Parent' && key !== 'Annots'\n                    && key !== 'Contents' && key !== 'Rotate') {\n                    newPage._pageDictionary.update(key, value);\n                }\n            });\n        }\n        else {\n            template = page._contentTemplate;\n            newPage.graphics.drawTemplate(template, { x: 0, y: 0, width: template._size[0], height: template._size[1] });\n            template._content.dictionary.update('Resources', this._copier._copy(pageDictionary.getRaw('Resources')));\n            this._pageReference.set(pageDictionary, newPage);\n            if (!isCopiedPage) {\n                this._bookmarksPageLinkReference.set(page._ref, newPage._pageIndex);\n            }\n        }\n        if (pageDictionary.has('Annots')) {\n            this._importAnnotation(page, newPage);\n            if (typeof this._options !== 'undefined' && this._options.groupFormFields && this._sourceDocument._catalog._catalogDictionary.has('AcroForm')) {\n                this._formFieldsGroupingSupport(this._sourceDocument.form, page, newPage);\n            }\n            else if (this._sourceDocument._catalog._catalogDictionary.has('AcroForm')) {\n                this._importFormField(page, this._sourceDocument.form, newPage, this._sourceDocument._crossReference);\n            }\n        }\n        if (!isCopiedPage) {\n            var bookMarkMap = this._sourceDocument._parseBookmarkDestination();\n            if (bookMarkMap && bookMarkMap.has(page)) {\n                var bookmarks = bookMarkMap.get(page);\n                for (var i = 0; i < bookmarks.length; i++) {\n                    this._bookmarks.push(bookmarks[Number.parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        if ((!isCopiedPage && layers) || !this._options.optimizeResources) {\n            this._mergeLayer(newPage._pageDictionary, pageDictionary, this._sourceDocument._crossReference);\n        }\n        newPage._pageDictionary._updated = true;\n    };\n    _PdfMergeHelper.prototype._importAnnotation = function (page, newPage) {\n        var array = []; // eslint-disable-line\n        var dest; // eslint-disable-line\n        var isDestination = false;\n        var oldCollection = page.annotations;\n        var count = oldCollection.count;\n        for (var i = 0; i < count; i++) {\n            var annotationReference = oldCollection._annotations[Number.parseInt(i.toString(), 10)];\n            if (annotationReference) {\n                var annotationDictionary = this._sourceDocument._crossReference._fetch(annotationReference);\n                if (annotationDictionary) {\n                    if (annotationDictionary.has('Dest')) {\n                        dest = [];\n                        var destinationArray = annotationDictionary.get('Dest'); // eslint-disable-line\n                        var destination = annotationDictionary._get('Dest'); // eslint-disable-line\n                        if (destinationArray instanceof Array) {\n                            var destArray = destinationArray; // eslint-disable-line\n                            for (var j = 0; j < destArray.length; j++) {\n                                dest.push(destArray[Number.parseInt(j.toString(), 10)]);\n                            }\n                            isDestination = true;\n                        }\n                        else if (destination instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                            dest.push(destination);\n                        }\n                    }\n                    if (dest && dest.length > 0) {\n                        this._destination.push(dest);\n                    }\n                    if (annotationDictionary.has('OC')) {\n                        var reference = annotationDictionary.getRaw('OC'); // eslint-disable-line\n                        if (reference instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                            this._annotationLayer.set(i, reference);\n                        }\n                    }\n                    var copiedAnnotationReference = this._copier._copy(annotationReference);\n                    var copiedAnnotationDictionary = this._destinationDocument._crossReference.\n                        _fetch(copiedAnnotationReference);\n                    if (isDestination) {\n                        copiedAnnotationDictionary.update('Dest', dest);\n                    }\n                    copiedAnnotationDictionary.update('P', newPage._ref);\n                    this._crossReference._cacheMap.set(copiedAnnotationReference, copiedAnnotationDictionary);\n                    array.push(copiedAnnotationReference);\n                }\n            }\n            isDestination = false;\n            dest = [];\n        }\n        if (array.length > 0) {\n            newPage._pageDictionary.update('Annots', array);\n        }\n    };\n    _PdfMergeHelper.prototype._formFieldsGroupingSupport = function (form, oldPage, newPage) {\n        var array = [];\n        var fieldNames = [];\n        var kidsArray = [];\n        var formFields;\n        var drEntry = form._dictionary.get('DR');\n        if (form._dictionary.has('DR')) {\n            drEntry = form._dictionary.get('DR');\n        }\n        if (newPage._pageDictionary.has('Annots')) {\n            array = newPage._pageDictionary.get('Annots');\n        }\n        if (oldPage._pageDictionary.has('Annots')) {\n            kidsArray = oldPage._pageDictionary.get('Annots');\n        }\n        if (!this._isDuplicatePage) {\n            formFields = this._destinationDocument.form;\n            this._fieldCount = formFields.count;\n            for (var k = 0; k < this._fieldCount; k++) {\n                fieldNames.push(formFields.fieldAt(k).name);\n            }\n        }\n        for (var i = 0; i < form.count; i++) {\n            var field = form.fieldAt(i);\n            var formField = void 0;\n            var destinationKids = [];\n            var sourceKids = field._dictionary.get('Kids');\n            if (fieldNames.indexOf(field.name) !== -1 || this._isDuplicatePage) {\n                if (!this._isDuplicatePage) {\n                    formField = formFields.fieldAt(fieldNames.indexOf(field.name));\n                    if (formField._dictionary.get('Kids')) {\n                        destinationKids = formField._dictionary.get('Kids');\n                    }\n                }\n                else {\n                    formField = field;\n                    destinationKids = sourceKids;\n                }\n                field._isDuplicatePage = true;\n                if ((field instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField && formField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField) || !(field instanceof\n                    _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField)) {\n                    if (sourceKids !== undefined && sourceKids.length > 0) {\n                        for (var j = 0; j < sourceKids.length; j++) {\n                            var fieldItem = field.itemAt(j); // eslint-disable-line\n                            if (fieldItem.page === oldPage) {\n                                formField._page = newPage;\n                                array = this._groupFormFieldsKids(formField, field, kidsArray, destinationKids, sourceKids, newPage._ref, array, j, i, drEntry, fieldItem);\n                            }\n                        }\n                    }\n                    else {\n                        array = this._groupFormFieldsKids(formField, field, kidsArray, destinationKids, sourceKids, newPage._ref, array, 0, i, drEntry);\n                    }\n                }\n            }\n            else {\n                array = this._insertFormFields(i, form._crossReference, field, form, newPage._ref, array, kidsArray);\n            }\n        }\n        if (array.length > 0) {\n            newPage._pageDictionary.update('Annots', array);\n        }\n    };\n    _PdfMergeHelper.prototype._groupFormFieldsKids = function (destinationField, field, kidsArray, destKids, oldKids, ref, array, index, fieldIndex, drEntry, widget) {\n        if (field._dictionary.has('Kids') && destinationField._dictionary.has('Kids')) {\n            if (kidsArray.indexOf(oldKids[Number.parseInt(index.toString(), 10)]) !== -1) {\n                var oldDictionary = field._crossReference._fetch(oldKids[Number.parseInt(index.toString(), 10)]);\n                var dictionary = this._copier._copyDictionary(oldDictionary, !this._isDuplicatePage);\n                dictionary.update('P', ref);\n                var reference = this._crossReference._getNextReference();\n                this._crossReference._cacheMap.set(reference, dictionary);\n                array.push(reference);\n                dictionary.update('Parent', destinationField._ref);\n                destKids.push(reference);\n                dictionary._updated = true;\n                destinationField._dictionary._updated = true;\n                if (!this._isDuplicatePage) {\n                    if ((destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfTextBoxField || destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfButtonField || destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfComboBoxField) && dictionary.has('AS')) {\n                        delete dictionary._map.AS;\n                    }\n                    this._createAppearance(destinationField, field, oldDictionary, dictionary, drEntry, widget);\n                }\n            }\n        }\n        else if (field._dictionary.has('Kids') && !destinationField._dictionary.has('Kids') || this._isDuplicatePage) {\n            var fieldDictionary = this._copier._copyDictionary(destinationField._dictionary, !this._isDuplicatePage);\n            this._updateFieldsWithKids(destinationField, field, fieldDictionary, index, fieldIndex, ref, oldKids, array, drEntry, destinationField._dictionary);\n        }\n        else if ((!field._dictionary.has('Kids') && destinationField._dictionary.has('Kids'))) {\n            var fieldDict = this._copier._copyDictionary(field._dictionary);\n            this._updateFieldDictionary(fieldDict, ref, destinationField._ref);\n            var reference = this._crossReference._getNextReference();\n            this._crossReference._cacheMap.set(reference, fieldDict);\n            destKids.push(reference);\n            array.push(reference);\n            destinationField._dictionary._updated = true;\n            this._createAppearance(destinationField, field, field._dictionary, fieldDict, drEntry, widget);\n        }\n        else if (!field._dictionary.has('Kids') && !destinationField._dictionary.has('Kids')) {\n            var fieldDictionary = this._copier._copyDictionary(destinationField._dictionary);\n            var formFieldDict = this._copier._copyDictionary(field._dictionary, !this._isDuplicatePage);\n            this._removeFieldDictionary(formFieldDict, ['Parent', 'FT', 'T', 'Ff']);\n            formFieldDict.update('P', ref);\n            this._updateFieldsWithKids(destinationField, field, fieldDictionary, index, fieldIndex, ref, oldKids, array, drEntry, formFieldDict);\n        }\n        return array;\n    };\n    _PdfMergeHelper.prototype._updateFieldsWithKids = function (destinationField, field, fieldDictionary, index, fieldIndex, ref, oldKids, array, drEntry, formFieldDictionary) {\n        var newFieldReference = this._crossReference._getNextReference();\n        var newFieldDict = this._createNewFieldDictionary(fieldDictionary, destinationField._dictionary);\n        newFieldDict.objId = newFieldReference.toString();\n        this._crossReference._cacheMap.set(newFieldReference, newFieldDict);\n        var newField = this._destinationDocument.form._parseFields(newFieldDict, newFieldReference);\n        destinationField._dictionary.update('Parent', newFieldReference);\n        newField._dictionary._updated = true;\n        this._updateFieldDictionary(fieldDictionary, ref, newFieldReference);\n        this._destinationDocument.form._dictionary._updated = true;\n        var oldDictionary;\n        if (oldKids !== undefined && oldKids.length > 0) {\n            oldDictionary = field._crossReference._fetch(oldKids[Number.parseInt(index.toString(), 10)]);\n        }\n        else {\n            oldDictionary = formFieldDictionary;\n        }\n        var dictionary = this._copier._copyDictionary(oldDictionary, !this._isDuplicatePage);\n        if ((destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfTextBoxField || destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfButtonField || destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfComboBoxField) && dictionary.has('AS')) {\n            delete dictionary._map.AS;\n        }\n        var reference = this._crossReference._getNextReference();\n        this._crossReference._cacheMap.set(reference, dictionary);\n        dictionary.update('P', ref);\n        array.push(reference);\n        dictionary.update('Parent', newField._ref);\n        var kidsElement = [];\n        kidsElement.push(destinationField._ref);\n        kidsElement.push(reference);\n        dictionary._updated = true;\n        destinationField._dictionary._updated = true;\n        newFieldDict.update('Kids', kidsElement);\n        newField._kids = kidsElement;\n        this._formFieldsCollection.set(fieldIndex, newFieldReference);\n        this._destinationDocument.form._parsedFields.set(fieldIndex, newField);\n        if (!this._isDuplicatePage) {\n            this._createAppearance(newField, field, oldDictionary, dictionary, drEntry);\n        }\n        newFieldDict._updated = true;\n    };\n    _PdfMergeHelper.prototype._removeFieldDictionary = function (dictionary, keys) {\n        keys.forEach(function (key) {\n            if (dictionary.has(key)) {\n                delete dictionary._map[key]; // eslint-disable-line\n            }\n        });\n        return dictionary;\n    };\n    _PdfMergeHelper.prototype._updateFieldDictionary = function (dictionary, pageRef, parentRef) {\n        dictionary = this._removeFieldDictionary(dictionary, ['Parent', 'FT', 'T', 'Ff']);\n        dictionary.update('P', pageRef);\n        dictionary.update('Parent', parentRef);\n        dictionary._updated = true;\n    };\n    _PdfMergeHelper.prototype._createNewFieldDictionary = function (fieldDictionary, destDictionary) {\n        var newFieldDict = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._crossReference);\n        ['Parent', 'FT', 'T', 'V', 'Ff', 'TU', 'Opt', 'I'].forEach(function (key) {\n            if (fieldDictionary.has(key)) {\n                newFieldDict.update(key, fieldDictionary.get(key));\n                delete fieldDictionary._map[key]; // eslint-disable-line\n                delete destDictionary._map[key]; // eslint-disable-line\n            }\n        });\n        return newFieldDict;\n    };\n    _PdfMergeHelper.prototype._getItemStyle = function (item, field) {\n        var mkDictionary = item._dictionary.get('MK');\n        if (mkDictionary && mkDictionary.has('CA')) {\n            item._styleText = mkDictionary.get('CA').charAt(0);\n        }\n        else {\n            item._styleText = (field instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfRadioButtonListField) ? 'l' : '4';\n        }\n    };\n    _PdfMergeHelper.prototype._createAppearance = function (destinationField, field, oldDictionary, dictionary, drEntry, widget) {\n        var previousIndex = destinationField._kidsCount - 1;\n        var itemValue;\n        if (destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfCheckBoxField) {\n            var item = destinationField.itemAt(previousIndex);\n            item._enableGrouping = true;\n            this._getItemStyle(item, destinationField);\n            if (field instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfRadioButtonListField) {\n                item._dictionary.update('AS', _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfName.get('Off'));\n                itemValue = (0,_utils__WEBPACK_IMPORTED_MODULE_9__._getItemValue)(oldDictionary);\n            }\n            else {\n                item._postProcess(destinationField.checked ? 'Yes' : 'Off');\n            }\n            destinationField._drawAppearance(item, itemValue);\n        }\n        else if (destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfRadioButtonListField) {\n            var item = destinationField.itemAt(previousIndex);\n            this._getItemStyle(item, destinationField);\n            if (item._dictionary.has('AS')) {\n                item._postProcess(item._dictionary.get('AS').name);\n            }\n            else {\n                item._postProcess('Off');\n            }\n            item._enableGrouping = true;\n            destinationField._enableGrouping = true;\n            destinationField._drawAppearance(item);\n        }\n        else if (destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfListField) {\n            var item = destinationField.itemAt(previousIndex);\n            if (typeof widget !== 'undefined') {\n                item.rotationAngle = widget.rotationAngle;\n            }\n            if (item && !destinationField._checkFieldFlag(item._dictionary)) {\n                item._enableGrouping = true;\n                var template = destinationField._createAppearance(item);\n                destinationField._addAppearance(item._dictionary, template, 'N');\n                item._dictionary._updated = true;\n            }\n        }\n        else if (destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfTextBoxField || destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfButtonField || destinationField instanceof\n            _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField) {\n            var widgetAnnotation = _annotations_annotation__WEBPACK_IMPORTED_MODULE_0__.PdfWidgetAnnotation._load(dictionary, this._crossReference);\n            if (typeof widget !== 'undefined' && widget !== null && destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField) {\n                destinationField._createAppearance(widget, false);\n            }\n            else {\n                widgetAnnotation.setAppearance(true);\n                widgetAnnotation._enableGrouping = true;\n                var pdfFont = void 0;\n                if (typeof widget !== 'undefined' && widget !== null) {\n                    pdfFont = this._obtainFont(widget._dictionary, drEntry);\n                }\n                else {\n                    pdfFont = this._obtainFont(dictionary, drEntry);\n                }\n                widgetAnnotation._pdfFont = pdfFont;\n                if (destinationField instanceof _form_field__WEBPACK_IMPORTED_MODULE_3__.PdfSignatureField) {\n                    destinationField._createAppearance(widgetAnnotation, false);\n                }\n                else {\n                    destinationField._postProcess(false, widgetAnnotation);\n                }\n            }\n        }\n    };\n    _PdfMergeHelper.prototype._obtainFont = function (item, formDictionary) {\n        var fontFamily = '';\n        var fontSize = 8;\n        var pdfFont;\n        if (item && (item.has('DS') || item.has('DA'))) {\n            if (item.has('DS')) {\n                var collection = item.get('DS').split(';');\n                for (var i = 0; i < collection.length; i++) {\n                    var entry = collection[Number.parseInt(i.toString(), 10)].split(':');\n                    if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-family') !== -1) {\n                        fontFamily = entry[1];\n                    }\n                    else if (collection[Number.parseInt(i.toString(), 10)].indexOf('font-style') === -1 && collection[Number.parseInt(i.toString(), 10)].indexOf('font') !== -1) {\n                        var name_1 = entry[1];\n                        var split = name_1.split(' ');\n                        for (var j = 0; j < split.length; j++) {\n                            if (split[Number.parseInt(j.toString(), 10)] !== '' && !split[Number.parseInt(j.toString(), 10)].endsWith('pt')) {\n                                fontFamily += split[Number.parseInt(j.toString(), 10)] + ' ';\n                            }\n                        }\n                        while (fontFamily !== ' ' && fontFamily.endsWith(' ')) {\n                            fontFamily = fontFamily.substring(0, fontFamily.length - 2);\n                        }\n                        if (fontFamily.indexOf(',') !== -1) {\n                            fontFamily = fontFamily.split(',')[0];\n                        }\n                    }\n                }\n            }\n            else {\n                var value = item.get('DA');\n                if (value && value !== '' && value.indexOf('Tf') !== -1) {\n                    var textCollection = value.split(' ');\n                    for (var i = 0; i < textCollection.length; i++) {\n                        if (textCollection[Number.parseInt(i.toString(), 10)].indexOf('Tf') !== -1) {\n                            fontFamily = textCollection[i - 2];\n                            while (fontFamily !== '' && fontFamily.length > 1 && fontFamily[0] === '/') {\n                                fontFamily = fontFamily.substring(1);\n                            }\n                            fontSize = Number.parseFloat(textCollection[i - 1]);\n                        }\n                    }\n                    if (fontSize === 0) {\n                        fontSize = 8;\n                    }\n                }\n            }\n        }\n        fontFamily = fontFamily.trim();\n        var fontStyle = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.regular;\n        var baseFontName;\n        if (typeof formDictionary != 'undefined' && formDictionary.has('Font')) {\n            var dictionary = formDictionary.get('Font').get(fontFamily);\n            if (typeof dictionary !== 'undefined') {\n                baseFontName = dictionary.get('BaseFont').name;\n                fontStyle = this._getFontStyle(baseFontName);\n            }\n        }\n        switch (fontFamily) {\n            case 'Helv':\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica, fontSize, fontStyle);\n                break;\n            case 'Courier':\n            case 'Cour':\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.courier, fontSize, fontStyle);\n                break;\n            case 'Symb':\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.symbol, fontSize, fontStyle);\n                break;\n            case 'TiRo':\n            case 'TiIt':\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.timesRoman, fontSize, fontStyle);\n                break;\n            case 'ZaDb':\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.zapfDingbats, fontSize, fontStyle);\n                break;\n            default:\n                pdfFont = new _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfStandardFont(_fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontFamily.helvetica, fontSize, fontStyle);\n                break;\n        }\n        return pdfFont;\n    };\n    _PdfMergeHelper.prototype._getFontStyle = function (fontStyle) {\n        var style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.regular;\n        if (fontStyle.includes('Bold')) {\n            style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.bold;\n        }\n        else if (fontStyle.includes('Italic')) {\n            style = _fonts_pdf_standard_font__WEBPACK_IMPORTED_MODULE_2__.PdfFontStyle.italic;\n        }\n        return style;\n    };\n    _PdfMergeHelper.prototype._importFormField = function (page, pdfForm, newPage, crossReference) {\n        var form = this._destinationDocument.form;\n        var array = [];\n        if (newPage && newPage._pageDictionary && newPage._pageDictionary.has('Annots')) {\n            array = newPage._pageDictionary.get('Annots');\n        }\n        var kidsArray = [];\n        var widgetArray = [];\n        if (this._destinationDocument.form._dictionary.has('Fields')) {\n            var formFields = this._destinationDocument.form;\n            this._fieldCount = formFields.count;\n            for (var k = 0; k < this._fieldCount; k++) {\n                var name_2 = formFields.fieldAt(k).name;\n                this._fieldNames.push(name_2);\n            }\n        }\n        if (page._pageDictionary.has('Annots')) {\n            widgetArray = page._pageDictionary.get('Annots');\n        }\n        var count = pdfForm.count;\n        for (var i = 0; i < count; ++i) {\n            var pdfField = pdfForm.fieldAt(i);\n            if (pdfField._dictionary.has('Kids')) {\n                kidsArray = pdfField._dictionary.get('Kids');\n                if (kidsArray.length > 1) {\n                    for (var j = 0; j < kidsArray.length; j++) {\n                        var fieldItem = pdfField.itemAt(j); // eslint-disable-line\n                        if (fieldItem.page === page) {\n                            array = this._insertFormFields(i, crossReference, pdfField, form, newPage._ref, array, widgetArray);\n                            break;\n                        }\n                    }\n                }\n                else if (kidsArray.length === 1) {\n                    if (pdfField.page === page) {\n                        array = this._insertFormFields(i, crossReference, pdfField, form, newPage._ref, array, widgetArray);\n                    }\n                }\n            }\n            else {\n                if (pdfField.page === page) {\n                    array = this._insertFormFields(i, crossReference, pdfField, form, newPage._ref, array, widgetArray);\n                }\n            }\n        }\n        if (pdfForm._dictionary.has('DR')) {\n            var dr = pdfForm._dictionary.get('DR');\n            var drDictionary = this._copier._copyDictionary(dr); // eslint-disable-line\n            var font = void 0; // eslint-disable-line\n            if (drDictionary.has('Font')) {\n                font = drDictionary.get('Font');\n            }\n            if (this._destinationDocument.form._dictionary.has('DR')) {\n                var curreneDR = this._destinationDocument.form._dictionary.get('DR');\n                if (curreneDR.has('Font')) {\n                    var currentFont_1 = curreneDR.get('Font'); // eslint-disable-line\n                    if (font) {\n                        font.forEach(function (key, value) {\n                            currentFont_1.set(key, value);\n                        });\n                    }\n                    currentFont_1._updated = true;\n                }\n            }\n            else {\n                this._destinationDocument.form._dictionary.update('DR', drDictionary);\n            }\n        }\n        if (array.length > 0) {\n            newPage._pageDictionary.update('Annots', array);\n        }\n    };\n    _PdfMergeHelper.prototype._insertFormFields = function (index, crossReference, pdfField, form, ref, array, kidsArray) {\n        var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary();\n        if (pdfField._dictionary.has('Kids')) {\n            pdfField._dictionary.forEach(function (key, value) {\n                if (key !== 'Kids') {\n                    dictionary.update(key, value);\n                }\n            });\n        }\n        else {\n            dictionary = this._copier._copyDictionary(pdfField._dictionary);\n        }\n        var newReference = this._crossReference._getNextReference();\n        dictionary.objId = newReference.toString();\n        var field = form._parseFields(dictionary, ref);\n        this._crossReference._cacheMap.set(newReference, field._dictionary);\n        if (pdfField._dictionary.has('Kids')) {\n            var oldKids = pdfField._dictionary.get('Kids');\n            var kids = [];\n            for (var j = 0; j < oldKids.length; j++) {\n                if ((kidsArray.indexOf(oldKids[Number.parseInt(j.toString(), 10)]) !== -1)) {\n                    var oldDictionary = pdfField._crossReference._fetch(oldKids[Number.parseInt(j.toString(), 10)]);\n                    var dict = this._copier._copyDictionary(oldDictionary);\n                    dict.update('P', ref);\n                    dict.update('Parent', newReference);\n                    dict._updated = true;\n                    var reference = this._crossReference._getNextReference();\n                    this._crossReference._cacheMap.set(reference, dict);\n                    array.push(reference);\n                    kids.push(reference);\n                }\n            }\n            dictionary.update('Kids', kids);\n            field._kids = kids;\n        }\n        else {\n            field._dictionary.update('P', ref);\n            array.push(newReference);\n        }\n        field._dictionary._updated = true;\n        var i = 0;\n        var fieldName = field.name;\n        var modified = false;\n        while (this._fieldNames.indexOf(fieldName) !== -1) {\n            fieldName = field.name + i;\n            modified = true;\n            ++i;\n        }\n        if (modified) {\n            field._dictionary.update('T', fieldName);\n            field._name = fieldName;\n        }\n        field._dictionary._updated = true;\n        if (this._fieldCount > 0) {\n            this._destinationDocument.form._parsedFields.set(this._fieldCount, field);\n            field._annotationIndex = this._fieldCount;\n            this._fieldCount++;\n        }\n        else {\n            this._destinationDocument.form._parsedFields.set(index, field);\n            field._annotationIndex = index;\n        }\n        this._destinationDocument.form._fields.push(newReference);\n        return array;\n    };\n    _PdfMergeHelper.prototype._mergeFormFieldsWithDocument = function () {\n        var pdfFields;\n        if (this._formFieldsCollection.size > 0) {\n            pdfFields = this._destinationDocument.form._dictionary.get('Fields');\n            this._formFieldsCollection.forEach(function (value, key) {\n                pdfFields[Number.parseInt(key.toString(), 10)] = value;\n            });\n        }\n        else {\n            pdfFields = this._destinationDocument.form._fields;\n        }\n        if (this._destinationDocument.form._dictionary.get('NeedAppearances')) {\n            this._destinationDocument.form._dictionary.set('NeedAppearances', false);\n        }\n        this._destinationDocument.form._dictionary.set('Fields', pdfFields);\n        this._destinationDocument.form._fields = pdfFields;\n        this._destinationDocument.form._dictionary._updated = true;\n    };\n    _PdfMergeHelper.prototype._importLayers = function (ocProperties, layers) {\n        this._isLayersPresent = layers;\n        if (this._isLayersPresent && this._destinationDocument._catalog._catalogDictionary.has('OCProperties')) {\n            var destinationOCProperties = this._destinationDocument._catalog._catalogDictionary.get('OCProperties');\n            var currentOCProperties = ocProperties.get('OCProperties');\n            if (destinationOCProperties.has('OCGs')) {\n                var ocgs = destinationOCProperties.get('OCGs'); // eslint-disable-line\n                var Cocgs = currentOCProperties.get('OCGs'); // eslint-disable-line\n                if (ocgs.length > 0) {\n                    for (var i = 0; i < Cocgs.length; i++) {\n                        ocgs.push(Cocgs[Number.parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n            destinationOCProperties._updated = true;\n            if (destinationOCProperties.has('D') && currentOCProperties.has('D')) {\n                var curreneDefaultView = destinationOCProperties.get('D');\n                var existingDefaultView = currentOCProperties.get('D');\n                if (curreneDefaultView && existingDefaultView) {\n                    if (curreneDefaultView.has('Order') && existingDefaultView.has('Order')) {\n                        var order = curreneDefaultView.get('Order'); // eslint-disable-line\n                        var existingOrder = existingDefaultView.get('Order'); // eslint-disable-line\n                        if (order.length > 0 && existingOrder.length > 0) {\n                            for (var i = 0; i < existingOrder.length; i++) {\n                                order.push(existingOrder[Number.parseInt(i.toString(), 10)]);\n                            }\n                        }\n                    }\n                    else if (existingDefaultView.has('Order')) {\n                        curreneDefaultView.set('Order', existingDefaultView.get('Order'));\n                    }\n                    if (curreneDefaultView.has('RBGroups') && existingDefaultView.has('RBGroups')) {\n                        var groups = curreneDefaultView.get('RBGroups'); // eslint-disable-line\n                        var existingRBGroups = existingDefaultView.get('RBGroups'); // eslint-disable-line\n                        if (groups.length > 0 && existingRBGroups.length > 0) {\n                            for (var i = 0; i < existingRBGroups.length; i++) {\n                                groups.push(existingRBGroups[Number.parseInt(i.toString(), 10)]);\n                            }\n                        }\n                    }\n                    else if (existingDefaultView.has('RBGroups')) {\n                        curreneDefaultView.set('RBGroups', existingDefaultView.get('RBGroups'));\n                        curreneDefaultView._updated = true;\n                    }\n                    if (curreneDefaultView.has('ON') && existingDefaultView.has('ON')) {\n                        var on = curreneDefaultView.get('ON'); // eslint-disable-line\n                        var existingON = existingDefaultView.get('ON'); // eslint-disable-line\n                        if (on.length > 0 && existingON.length > 0) {\n                            for (var i = 0; i < existingON.length; i++) {\n                                on.push(existingON[Number.parseInt(i.toString(), 10)]);\n                            }\n                        }\n                    }\n                    else if (existingDefaultView.has('ON')) {\n                        curreneDefaultView.set('ON', existingDefaultView.get('ON'));\n                    }\n                    if (curreneDefaultView.has('AS') && existingDefaultView.has('AS')) {\n                        var elements = curreneDefaultView.get('AS'); // eslint-disable-line\n                        var existingElements = existingDefaultView.get('AS'); // eslint-disable-line\n                        if (elements.length > 0 && existingElements.length > 0) {\n                            var asDictionary = existingElements[0];\n                            var currentASDictionary = elements[0];\n                            if (asDictionary instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference && currentASDictionary instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                                asDictionary = this._crossReference._fetch(asDictionary);\n                                currentASDictionary = this._crossReference._fetch(currentASDictionary);\n                            }\n                            if (asDictionary.has('OCGs') && currentASDictionary.has('OCGs')) {\n                                var usageGroup = asDictionary.get('OCGs'); // eslint-disable-line\n                                var currentUsageGroup = currentASDictionary.get('OCGs'); // eslint-disable-line\n                                if (usageGroup.length > 0 && currentUsageGroup.length > 0) {\n                                    for (var i = 0; i < usageGroup.length; i++) {\n                                        currentUsageGroup.push(usageGroup[Number.parseInt(i.toString(), 10)]);\n                                    }\n                                }\n                            }\n                            for (var i = 0; i < existingElements.length; i++) {\n                                elements.push(existingElements[Number.parseInt(i.toString(), 10)]);\n                            }\n                        }\n                    }\n                    else if (existingDefaultView.has('AS')) {\n                        curreneDefaultView.set('AS', existingDefaultView.get('AS'));\n                    }\n                    if (curreneDefaultView.has('OFF') && existingDefaultView.has('OFF')) {\n                        var off = curreneDefaultView.get('OFF'); // eslint-disable-line\n                        var existingOff = existingDefaultView.get('OFF'); // eslint-disable-line\n                        if (off.length > 0 && existingOff.length > 0) {\n                            for (var i = 0; i < existingOff.length; i++) {\n                                off.push(existingOff[Number.parseInt(i.toString(), 10)]);\n                            }\n                        }\n                    }\n                    else if (existingDefaultView.has('OFF')) {\n                        curreneDefaultView.set('OFF', existingDefaultView.get('OFF'));\n                    }\n                }\n                if (curreneDefaultView.has('Locked') && existingDefaultView.has('Locked')) {\n                    var locked = curreneDefaultView.get('Locked'); // eslint-disable-line\n                    var existingLocked = existingDefaultView.get('Locked'); // eslint-disable-line\n                    if (locked.length > 0 && existingLocked.length > 0) {\n                        for (var i = 0; i < existingLocked.length; i++) {\n                            locked.push(existingLocked[Number.parseInt(i.toString(), 10)]);\n                        }\n                    }\n                }\n                else if (existingDefaultView.has('Locked')) {\n                    curreneDefaultView.set('Locked', existingDefaultView.get('Locked'));\n                }\n            }\n            else if (currentOCProperties.has('D')) {\n                destinationOCProperties.set('D', currentOCProperties.get('D'));\n            }\n            destinationOCProperties._updated = true;\n            this._destinationDocument._catalog._catalogDictionary._updated = true;\n            this._crossReference._allowCatalog = true;\n        }\n        else if (this._isLayersPresent) {\n            this._destinationDocument._catalog._catalogDictionary.update('OCProperties', ocProperties.get('OCProperties'));\n            this._destinationDocument._catalog._catalogDictionary._updated = true;\n            this._crossReference._allowCatalog = true;\n        }\n    };\n    _PdfMergeHelper.prototype._mergeLayer = function (newPageDictionary, oldPageDictionary, crossReference) {\n        var _this = this;\n        var res = newPageDictionary.get('Resources');\n        var xobject = res.get('XObject');\n        var xobjdict; // eslint-disable-line\n        if (xobject) {\n            xobject.forEach(function (key, value) {\n                xobjdict = _this._crossReference._fetch(value);\n            });\n        }\n        var resource;\n        if (xobjdict) {\n            resource = xobjdict.dictionary.get('Resources');\n        }\n        var XObject; // eslint-disable-line\n        var oldPageList = new Map();\n        var oldPageResource = oldPageDictionary.get('Resources');\n        var layerDictionary; // eslint-disable-line\n        var dict; // eslint-disable-line\n        if (oldPageResource.has('Properties')) {\n            layerDictionary = oldPageResource.get('Properties');\n            layerDictionary.forEach(function (key, value) {\n                oldPageList.set(key, value);\n            });\n            var properties_1 = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._crossReference);\n            oldPageList.forEach(function (value, key) {\n                _this._newList.forEach(function (layerValue, layerkey) {\n                    if (value === layerkey) {\n                        properties_1.set(key, layerValue);\n                    }\n                });\n            });\n            resource.set('Properties', properties_1);\n            resource._updated = true;\n            properties_1._updated = true;\n        }\n        else if (oldPageResource.has('XObject')) {\n            XObject = resource.get('XObject');\n            layerDictionary = oldPageResource.get('XObject');\n            layerDictionary.forEach(function (key, value) {\n                if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                    dict = crossReference._fetch(value);\n                    dict.dictionary.forEach(function (annotationKey, annotationValue) {\n                        if (annotationKey === 'OC') {\n                            _this._newList.forEach(function (layerValue, layerKey) {\n                                if (layerKey === annotationValue) {\n                                    if (XObject.has(key)) {\n                                        var xobjDictionary = XObject.get(key); // eslint-disable-line\n                                        xobjDictionary.dictionary.set(annotationKey, layerValue);\n                                        xobjDictionary._updated = true;\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        }\n        if (this._annotationLayer.size > 0) {\n            var annotations_1 = newPageDictionary._get('Annots'); // eslint-disable-line\n            this._annotationLayer.forEach(function (reference, index) {\n                var pdfAnnotation = annotations_1[Number.parseInt(index.toString(), 10)]; // eslint-disable-line\n                var annotDictionary = _this._crossReference._fetch(pdfAnnotation);\n                _this._newList.forEach(function (value, oldReference) {\n                    if (reference === oldReference) {\n                        annotDictionary.set('OC', value);\n                    }\n                });\n            });\n        }\n    };\n    _PdfMergeHelper.prototype._exportBookmarks = function (document, pageCount) {\n        var _this = this;\n        if (this._bookmarks.length > 0) {\n            var bookmark = this._bookmarks;\n            var currentBase = this._destinationDocument.bookmarks;\n            var current = document.bookmarks;\n            var bkCollection = void 0; // eslint-disable-line\n            if (current) {\n                var stack = [];\n                var nodeInformation = { index: 0, base: currentBase, kids: current._bookMarkList };\n                if (document.pageCount !== pageCount) {\n                    nodeInformation = { index: 0, base: currentBase, kids: bookmark };\n                    bkCollection = [];\n                }\n                do {\n                    var _loop_1 = function () {\n                        current = nodeInformation.kids[nodeInformation.index];\n                        if (bookmark.indexOf(current) !== -1 && typeof bkCollection !== 'undefined' && bkCollection.indexOf(current.title) === -1) {\n                            var bm = current;\n                            var newBm = currentBase.add(bm.title);\n                            var dest = bm.destination;\n                            newBm.color = bm.color;\n                            newBm.textStyle = bm.textStyle;\n                            var newDest = null;\n                            var newPage_1 = null;\n                            var page_1 = null;\n                            var nDest = bm.namedDestination;\n                            if (nDest) {\n                                if (nDest.destination) {\n                                    page_1 = nDest.destination.page;\n                                    this_1._bookmarksPageLinkReference.forEach(function (value, key) {\n                                        if (page_1._ref === key) {\n                                            newPage_1 = _this._destinationDocument.getPage(value);\n                                        }\n                                    });\n                                    if (newPage_1) {\n                                        var newNameddest = this_1._getNamedDestination(nDest, newPage_1);\n                                        newBm.namedDestination = newNameddest;\n                                        delete newBm._dictionary._map.C;\n                                        this_1._namedDestinations.push(newNameddest._title);\n                                        var reference_1 = this_1._crossReference._getNextReference();\n                                        this_1._crossReference._cacheMap.set(reference_1, newNameddest._dictionary);\n                                        this_1._namedDestinations.push(reference_1);\n                                    }\n                                }\n                            }\n                            else if (dest) {\n                                page_1 = dest.page;\n                                this_1._bookmarksPageLinkReference.forEach(function (value, key) {\n                                    if (page_1._ref === key) {\n                                        newPage_1 = _this._destinationDocument.getPage(value);\n                                    }\n                                });\n                                if (newPage_1) {\n                                    newDest = new _pdf_page__WEBPACK_IMPORTED_MODULE_6__.PdfDestination(newPage_1, dest.location);\n                                    newDest.mode = dest.mode;\n                                    newDest.zoom = dest.zoom;\n                                    newDest.location = dest.location;\n                                    newBm.destination = newDest;\n                                }\n                            }\n                            currentBase = newBm;\n                            bkCollection.push(newBm.title);\n                        }\n                        else if (typeof bkCollection === 'undefined' || (typeof bkCollection !== 'undefined' && bkCollection.indexOf(current.title) === -1)) {\n                            var bm = current;\n                            var dest = bm.destination;\n                            var newDest = null;\n                            var newpage_1 = null;\n                            var page_2 = null;\n                            var nDest = bm.namedDestination;\n                            if (document.pageCount === pageCount) {\n                                var newBm = currentBase.add(bm.title);\n                                if (bm._dictionary.has('A')) {\n                                    newBm._dictionary.update('A', bm._dictionary.get('A'));\n                                }\n                                newBm.textStyle = bm.textStyle;\n                                newBm.color = bm.color;\n                                if (nDest) {\n                                    if (nDest._destination) {\n                                        page_2 = nDest.destination.page;\n                                        this_1._bookmarksPageLinkReference.forEach(function (value, key) {\n                                            if (page_2._ref === key) {\n                                                newpage_1 = _this._destinationDocument.getPage(value);\n                                            }\n                                        });\n                                        if (newpage_1) {\n                                            var newNameddest = this_1._getNamedDestination(nDest, newpage_1);\n                                            newBm.namedDestination = newNameddest;\n                                            delete newBm._dictionary._map.C;\n                                            this_1._namedDestinations.push(newNameddest._title);\n                                            var reference_2 = this_1._crossReference._getNextReference();\n                                            this_1._crossReference._cacheMap.set(reference_2, newNameddest._dictionary);\n                                            this_1._namedDestinations.push(reference_2);\n                                        }\n                                    }\n                                }\n                                else if (dest) {\n                                    page_2 = dest.page;\n                                    this_1._bookmarksPageLinkReference.forEach(function (value, key) {\n                                        if (page_2._ref === key) {\n                                            newpage_1 = _this._destinationDocument.getPage(value);\n                                        }\n                                    });\n                                    if (newpage_1) {\n                                        newDest = new _pdf_page__WEBPACK_IMPORTED_MODULE_6__.PdfDestination(newpage_1, dest.location);\n                                        newDest.mode = dest.mode;\n                                        newDest.zoom = dest.zoom;\n                                        newDest.location = dest.location;\n                                        newBm.destination = newDest;\n                                    }\n                                }\n                                currentBase = newBm;\n                            }\n                        }\n                        nodeInformation.index += 1;\n                        if (current.count > 0) {\n                            stack.push(nodeInformation);\n                            nodeInformation = { index: 0, base: currentBase, kids: current._bookMarkList };\n                        }\n                        else {\n                            currentBase = nodeInformation.base;\n                        }\n                    };\n                    var this_1 = this;\n                    for (; nodeInformation.index < nodeInformation.kids.length;) {\n                        _loop_1();\n                    }\n                    if (stack.length > 0) {\n                        nodeInformation = stack.pop();\n                        while ((nodeInformation.index === nodeInformation.kids.length) && (stack.length > 0)) {\n                            nodeInformation = stack.pop();\n                        }\n                        currentBase = nodeInformation.base;\n                    }\n                } while (nodeInformation.index < nodeInformation.kids.length);\n            }\n            var reference = void 0;\n            if (this._namedDestinations.length > 0) {\n                var dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._crossReference);\n                dictionary.update('Names', this._namedDestinations);\n                reference = this._crossReference._getNextReference();\n                this._crossReference._cacheMap.set(reference, dictionary);\n                dictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._crossReference);\n                dictionary.update('Dests', reference);\n                reference = this._crossReference._getNextReference();\n                this._crossReference._cacheMap.set(reference, dictionary);\n                this._destinationDocument._catalog._catalogDictionary.set('Names', reference);\n            }\n            this._destinationDocument._catalog._catalogDictionary._updated = true;\n            this._destinationDocument._catalog._catalogDictionary.isCatalog = true;\n            this._crossReference._allowCatalog = true;\n        }\n    };\n    _PdfMergeHelper.prototype._getNamedDestination = function (nDest, page) {\n        var newNamedDest = new _pdf_outline__WEBPACK_IMPORTED_MODULE_5__.PdfNamedDestination(nDest.title); // eslint-disable-line\n        newNamedDest.destination = this._getDestination(page, nDest.destination);\n        return newNamedDest;\n    };\n    _PdfMergeHelper.prototype._getDestination = function (page, dest) {\n        var newDest = new _pdf_page__WEBPACK_IMPORTED_MODULE_6__.PdfDestination(page, dest.location);\n        newDest._location = dest._location;\n        newDest.mode = dest.mode;\n        newDest.zoom = dest.zoom;\n        newDest.location = dest.location;\n        return newDest;\n    };\n    _PdfMergeHelper.prototype._writeObject = function (document, table, value, dictionary, key, array, ref) {\n        if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfName || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n            this._writeDictionary(value, table, key, array, ref, null);\n        }\n        else if (Array.isArray(value)) {\n            var list = []; // eslint-disable-line\n            this._writeArray(document, list, value, dictionary);\n            this._writeDictionary(null, table, key, array, ref, list);\n        }\n        else if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary) {\n            var subTable = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._crossReference);\n            this._writePropertiesDictionary(document, subTable, value);\n            this._writeDictionary(null, table, key, array, ref, subTable);\n        }\n        else if (value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference && this._crossReference) {\n            this._writeObject(document, table, document._crossReference._fetch(value), dictionary, key, array, value);\n        }\n        else if (value === null || typeof value === 'undefined') {\n            this._writeDictionary('null', table, key, array, ref, null);\n        }\n    };\n    _PdfMergeHelper.prototype._writeDictionary = function (value, table, key, array, ref, list) {\n        if (key && value) {\n            table.set(key, value);\n        }\n        else if (key && list) {\n            table.set(key, list);\n        }\n        else if (list && !ref) {\n            array.push(list);\n        }\n        else if (value) {\n            array.push(value);\n        }\n        else if (ref) {\n            var reference_3;\n            if (this._newList && this._newList.size > 0) {\n                this._newList.forEach(function (value, key) {\n                    if (key === ref) {\n                        reference_3 = value;\n                    }\n                });\n            }\n            if (reference_3) {\n                array.push(reference_3);\n            }\n            else {\n                var layerList = list;\n                reference_3 = this._crossReference._getNextReference();\n                this._crossReference._cacheMap.set(reference_3, layerList);\n                layerList._updated = true;\n                array.push(reference_3);\n                this._newList.set(ref, reference_3);\n            }\n        }\n    };\n    _PdfMergeHelper.prototype._writeArray = function (document, array, value, dictionary) {\n        for (var i = 0; i < value.length; i++) {\n            this._writeObject(document, null, value[Number.parseInt(i.toString(), 10)], dictionary, null, array);\n        }\n    };\n    _PdfMergeHelper.prototype._writePropertiesDictionary = function (document, table, dictionary) {\n        var _this = this;\n        if (dictionary && dictionary.size > 0) {\n            dictionary.forEach(function (key, value) {\n                _this._writeObject(document, table, ((value instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) ? dictionary.get(key) : value), dictionary, key);\n            });\n        }\n    };\n    _PdfMergeHelper.prototype._fixDestinations = function (document) {\n        var pageLinkReference = this._pageReference;\n        if (this._destination.length > 0) {\n            for (var i = 0; i < this._destination.length; i++) {\n                var dest = this._destination[Number.parseInt(i.toString(), 10)]; // eslint-disable-line\n                if (dest instanceof Array) {\n                    var destination = dest; // eslint-disable-line\n                    if (destination.length > 0 && destination[0] && destination[0] instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n                        var ref = document._crossReference._fetch(destination[0]); // eslint-disable-line\n                        var index = pageLinkReference.get(ref);\n                        if (ref && pageLinkReference.has(ref) && index !== null) {\n                            destination[0] = index._ref;\n                        }\n                        if (ref && pageLinkReference.has(ref) && index === null) {\n                            destination[0] = null;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    _PdfMergeHelper.prototype._insertNewPage = function (page, index) {\n        var newPage;\n        var pagesettings = new _pdf_document__WEBPACK_IMPORTED_MODULE_4__.PdfPageSettings();\n        pagesettings.size = page.size;\n        pagesettings.margins.left = 0;\n        pagesettings.margins.top = 0;\n        pagesettings.margins.right = 0;\n        pagesettings.margins.bottom = 0;\n        if (typeof this._options !== 'undefined' && typeof this._options.rotation !== 'undefined') {\n            pagesettings.rotation = this._options.rotation;\n        }\n        else {\n            pagesettings.rotation = page.rotation;\n        }\n        pagesettings.orientation = (page.size[0] > page.size[1]) ? _enumerator__WEBPACK_IMPORTED_MODULE_1__.PdfPageOrientation.landscape : _enumerator__WEBPACK_IMPORTED_MODULE_1__.PdfPageOrientation.portrait;\n        if (typeof index !== 'undefined') {\n            newPage = this._destinationDocument.addPage(index, pagesettings);\n        }\n        else {\n            newPage = this._destinationDocument.addPage(pagesettings);\n        }\n        var pageDictionary = page._pageDictionary;\n        if (pageDictionary._get('MediaBox')) {\n            var mBox = pageDictionary._get('MediaBox'); // eslint-disable-line\n            newPage._pageDictionary.update('MediaBox', mBox);\n        }\n        if (pageDictionary._get('CropBox')) {\n            var cBox = pageDictionary._get('CropBox'); // eslint-disable-line\n            newPage._pageDictionary.update('CropBox', cBox);\n        }\n        if (typeof this._options.rotation !== 'undefined' || page._pageDictionary.has('Rotate')) {\n            var rotate = void 0;\n            if (typeof this._options.rotation !== 'undefined') {\n                rotate = Math.floor(this._options.rotation) * 90;\n            }\n            else {\n                rotate = Math.floor(page.rotation) * 90;\n            }\n            rotate = rotate >= 360 ? rotate % 360 : rotate;\n            newPage._pageDictionary.update('Rotate', rotate);\n        }\n        return newPage;\n    };\n    _PdfMergeHelper.prototype._objectDispose = function () {\n        this._bookmarkHashTable = new Map();\n        this._namedDestinations = [];\n        this._bookmarks = [];\n        this._pageReference = new Map();\n        this._bookmarksPageLinkReference.clear();\n        this._destination = [];\n        this._newList = new Map();\n        this._annotationLayer = new Map();\n        this._fieldNames = [];\n        if (this._destinationDocument && this._destinationDocument._form && this._destinationDocument._form._widgetReferences) {\n            this._destinationDocument._form._widgetReferences = [];\n        }\n    };\n    return _PdfMergeHelper;\n}());\n\nvar _PdfCopier = /** @class */ (function () {\n    function _PdfCopier(targetCrossReference, sourceCrossReference) {\n        this._traversedObjects = new Map();\n        this._isGroupingSupport = false;\n        this._targetCrossReference = targetCrossReference;\n        this._sourceCrossReference = sourceCrossReference;\n    }\n    _PdfCopier.prototype._copy = function (object) {\n        var clonedObject; // eslint-disable-line\n        if (object instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary) {\n            clonedObject = this._copyDictionary(object);\n        }\n        else if (Array.isArray(object)) {\n            clonedObject = this._copyArray(object);\n        }\n        else if (object instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfBaseStream) {\n            clonedObject = this._copyStream(object);\n        }\n        else if (object instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfReference) {\n            clonedObject = this._copyReference(object);\n        }\n        else if (object instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfName || typeof object === 'number' ||\n            typeof object === 'string' || typeof object === 'boolean') {\n            clonedObject = object;\n        }\n        return clonedObject;\n    };\n    _PdfCopier.prototype._copyDictionary = function (element, copiedPage) {\n        var _this = this;\n        var clonedDictionary = new _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary(this._targetCrossReference);\n        if (element && element.size > 0) {\n            element.forEach(function (key, value) {\n                if (key === 'OC' && value instanceof Array || (key !== 'P' && key !== 'Parent' && key !== 'Dest' && key !== 'OC' && !(key === 'AP' && copiedPage))) {\n                    var copiedValue = _this._copy(value); // eslint-disable-line\n                    if (copiedValue !== null && typeof copiedValue !== 'undefined') {\n                        clonedDictionary.update(key, copiedValue);\n                    }\n                }\n            });\n        }\n        clonedDictionary._updated = true;\n        return clonedDictionary;\n    };\n    _PdfCopier.prototype._copyArray = function (originalArray) {\n        var newArray = []; // eslint-disable-line \n        for (var i = 0; i < originalArray.length; i++) {\n            newArray.push(this._copy(originalArray[Number.parseInt(i.toString(), 10)]));\n        }\n        return newArray;\n    };\n    _PdfCopier.prototype._copyStream = function (originalStream) {\n        var bytes;\n        var imageStream = false;\n        var baseStream = originalStream; // eslint-disable-line\n        if (originalStream.dictionary.has('Subtype') && originalStream.dictionary.get('Subtype').name === 'Image') {\n            imageStream = true;\n            if (originalStream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfStream) {\n                bytes = originalStream.getByteRange(originalStream.offset, originalStream.end);\n            }\n            else if (originalStream && baseStream.stream && baseStream.stream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfStream) {\n                if (typeof baseStream._initialized === 'boolean' && baseStream._cipher) {\n                    var streamLength = baseStream.stream.end - baseStream.stream.start;\n                    baseStream.getBytes(streamLength);\n                    bytes = baseStream.buffer.subarray(0, baseStream.bufferLength);\n                }\n                else {\n                    var stream = baseStream.stream;\n                    bytes = stream.getByteRange(stream.start, stream.end);\n                }\n            }\n            else if (baseStream.stream && baseStream.stream.stream) {\n                var flateStream = baseStream.stream; // eslint-disable-line\n                if (flateStream.stream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfStream && typeof flateStream._initialized === 'boolean' && flateStream._cipher) {\n                    var streamLength = flateStream.stream.end - flateStream.stream.start;\n                    flateStream.getBytes(streamLength);\n                    bytes = flateStream.buffer.subarray(0, flateStream.bufferLength);\n                }\n                else if (flateStream.stream && flateStream.stream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfStream) {\n                    var stream = flateStream.stream;\n                    bytes = stream.getByteRange(stream.start, stream.end);\n                }\n                else {\n                    bytes = [];\n                }\n            }\n            else {\n                bytes = originalStream.getBytes();\n                if ((!bytes || bytes.length === 0) && originalStream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfContentStream) {\n                    bytes = originalStream._bytes;\n                }\n            }\n        }\n        else {\n            bytes = originalStream.getBytes();\n            if ((!bytes || bytes.length === 0) && originalStream instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfContentStream) {\n                bytes = originalStream._bytes;\n            }\n        }\n        var content = new _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfContentStream(Array.from(bytes));\n        content._isImage = imageStream;\n        content.dictionary = this._copyDictionary(originalStream.dictionary);\n        content.dictionary._updated = true;\n        return content;\n    };\n    _PdfCopier.prototype._copyReference = function (element) {\n        if (this._traversedObjects.has(element)) {\n            return this._traversedObjects.get(element);\n        }\n        else {\n            this._traversedObjects.set(element, null);\n            var dereferencedValue = this._sourceCrossReference._fetch(element); // eslint-disable-line\n            var copyValue = this._copy(dereferencedValue); // eslint-disable-line\n            if (copyValue instanceof _pdf_primitives__WEBPACK_IMPORTED_MODULE_8__._PdfDictionary || copyValue instanceof _base_stream__WEBPACK_IMPORTED_MODULE_10__._PdfBaseStream) {\n                var newRef = this._addToDestination(copyValue);\n                this._traversedObjects.set(element, newRef);\n                return newRef;\n            }\n            else {\n                this._traversedObjects.set(element, copyValue);\n                return copyValue;\n            }\n        }\n    };\n    _PdfCopier.prototype._addToDestination = function (element) {\n        var newRef = this._targetCrossReference._getNextReference();\n        this._targetCrossReference._cacheMap.set(newRef, element);\n        element.objId = newRef.objectNumber + \" \" + newRef.generationNumber;\n        return newRef;\n    };\n    return _PdfCopier;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/pdf-merge.js?");

/***/ })

}]);