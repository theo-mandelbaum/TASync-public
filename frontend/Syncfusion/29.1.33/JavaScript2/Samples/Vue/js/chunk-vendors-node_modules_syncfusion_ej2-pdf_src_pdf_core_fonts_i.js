"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdf_src_pdf_core_fonts_i"],{

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfCjkFontFamily: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfCjkFontFamily),\n/* harmony export */   PdfCjkStandardFont: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfCjkStandardFont),\n/* harmony export */   PdfFont: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfFont),\n/* harmony export */   PdfFontFamily: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfFontFamily),\n/* harmony export */   PdfFontStyle: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfFontStyle),\n/* harmony export */   PdfStandardFont: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfStandardFont),\n/* harmony export */   PdfStringFormat: () => (/* reexport safe */ _pdf_string_format__WEBPACK_IMPORTED_MODULE_2__.PdfStringFormat),\n/* harmony export */   PdfTrueTypeFont: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__.PdfTrueTypeFont),\n/* harmony export */   PdfVerticalAlignment: () => (/* reexport safe */ _pdf_string_format__WEBPACK_IMPORTED_MODULE_2__.PdfVerticalAlignment),\n/* harmony export */   _BigEndianWriter: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._BigEndianWriter),\n/* harmony export */   _CjkDifferentWidth: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._CjkDifferentWidth),\n/* harmony export */   _CjkSameWidth: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._CjkSameWidth),\n/* harmony export */   _CjkWidth: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._CjkWidth),\n/* harmony export */   _CjkWidthTable: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._CjkWidthTable),\n/* harmony export */   _LineInfo: () => (/* reexport safe */ _string_layouter__WEBPACK_IMPORTED_MODULE_3__._LineInfo),\n/* harmony export */   _LineType: () => (/* reexport safe */ _string_layouter__WEBPACK_IMPORTED_MODULE_3__._LineType),\n/* harmony export */   _PdfCjkFontDescriptorFactory: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__._PdfCjkFontDescriptorFactory),\n/* harmony export */   _PdfCjkStandardFontMetricsFactory: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__._PdfCjkStandardFontMetricsFactory),\n/* harmony export */   _PdfFontMetrics: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._PdfFontMetrics),\n/* harmony export */   _PdfStandardFontMetricsFactory: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__._PdfStandardFontMetricsFactory),\n/* harmony export */   _PdfStringLayoutResult: () => (/* reexport safe */ _string_layouter__WEBPACK_IMPORTED_MODULE_3__._PdfStringLayoutResult),\n/* harmony export */   _PdfStringLayouter: () => (/* reexport safe */ _string_layouter__WEBPACK_IMPORTED_MODULE_3__._PdfStringLayouter),\n/* harmony export */   _StandardWidthTable: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._StandardWidthTable),\n/* harmony export */   _StringTokenizer: () => (/* reexport safe */ _string_layouter__WEBPACK_IMPORTED_MODULE_3__._StringTokenizer),\n/* harmony export */   _TrueTypeAppleCmapSubTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeAppleCmapSubTable),\n/* harmony export */   _TrueTypeCmapSubTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeCmapSubTable),\n/* harmony export */   _TrueTypeCmapTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeCmapTable),\n/* harmony export */   _TrueTypeGlyph: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeGlyph),\n/* harmony export */   _TrueTypeGlyphHeader: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeGlyphHeader),\n/* harmony export */   _TrueTypeHeadTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeHeadTable),\n/* harmony export */   _TrueTypeHorizontalHeaderTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeHorizontalHeaderTable),\n/* harmony export */   _TrueTypeLocaTable: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeLocaTable),\n/* harmony export */   _TrueTypeLongHorMetric: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeLongHorMetric),\n/* harmony export */   _TrueTypeMetrics: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeMetrics),\n/* harmony export */   _TrueTypeMicrosoftCmapSubTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeMicrosoftCmapSubTable),\n/* harmony export */   _TrueTypeNameRecord: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeNameRecord),\n/* harmony export */   _TrueTypeNameTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeNameTable),\n/* harmony export */   _TrueTypeOS2Table: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeOS2Table),\n/* harmony export */   _TrueTypePostTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypePostTable),\n/* harmony export */   _TrueTypeReader: () => (/* reexport safe */ _ttf_reader__WEBPACK_IMPORTED_MODULE_4__._TrueTypeReader),\n/* harmony export */   _TrueTypeTableInfo: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeTableInfo),\n/* harmony export */   _TrueTypeTrimmedCmapSubTable: () => (/* reexport safe */ _ttf_table__WEBPACK_IMPORTED_MODULE_5__._TrueTypeTrimmedCmapSubTable),\n/* harmony export */   _UnicodeLine: () => (/* reexport safe */ _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__._UnicodeLine),\n/* harmony export */   _UnicodeTrueTypeFont: () => (/* reexport safe */ _unicode_true_type_font__WEBPACK_IMPORTED_MODULE_6__._UnicodeTrueTypeFont),\n/* harmony export */   _WidthTable: () => (/* reexport safe */ _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__._WidthTable)\n/* harmony export */ });\n/* harmony import */ var _pdf_font_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pdf-font-metrics */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-font-metrics.js\");\n/* harmony import */ var _pdf_standard_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pdf-standard-font */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-standard-font.js\");\n/* harmony import */ var _pdf_string_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pdf-string-format */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-string-format.js\");\n/* harmony import */ var _string_layouter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string-layouter */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/string-layouter.js\");\n/* harmony import */ var _ttf_reader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ttf-reader */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/ttf-reader.js\");\n/* harmony import */ var _ttf_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ttf-table */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/ttf-table.js\");\n/* harmony import */ var _unicode_true_type_font__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./unicode-true-type-font */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/unicode-true-type-font.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/index.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-font-metrics.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-font-metrics.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _CjkDifferentWidth: () => (/* binding */ _CjkDifferentWidth),\n/* harmony export */   _CjkSameWidth: () => (/* binding */ _CjkSameWidth),\n/* harmony export */   _CjkWidth: () => (/* binding */ _CjkWidth),\n/* harmony export */   _CjkWidthTable: () => (/* binding */ _CjkWidthTable),\n/* harmony export */   _PdfFontMetrics: () => (/* binding */ _PdfFontMetrics),\n/* harmony export */   _StandardWidthTable: () => (/* binding */ _StandardWidthTable),\n/* harmony export */   _WidthTable: () => (/* binding */ _WidthTable)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar _PdfFontMetrics = /** @class */ (function () {\n    function _PdfFontMetrics() {\n        this._lineGap = 0;\n    }\n    _PdfFontMetrics.prototype._getAscent = function (format) {\n        return this._ascent * 0.001 * this._getSize(format);\n    };\n    _PdfFontMetrics.prototype._getDescent = function (format) {\n        return this._descent * 0.001 * this._getSize(format);\n    };\n    _PdfFontMetrics.prototype._getLineGap = function (format) {\n        return this._lineGap * 0.001 * this._getSize(format);\n    };\n    _PdfFontMetrics.prototype._getHeight = function (format) {\n        var height;\n        var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\n        var clearTypeFontCollection = [];\n        for (var index = 0; index < clearTypeFonts.length; index++) {\n            clearTypeFontCollection.push(clearTypeFonts[Number.parseInt(index.toString(), 10)]);\n        }\n        if (this._getDescent(format) < 0) {\n            height = (this._getAscent(format) - this._getDescent(format) + this._getLineGap(format));\n        }\n        else {\n            height = (this._getAscent(format) + this._getDescent(format) + this._getLineGap(format));\n        }\n        return height;\n    };\n    _PdfFontMetrics.prototype._getSize = function (format) {\n        var size = this._size;\n        if (format !== null && typeof format !== 'undefined') {\n            switch (format.subSuperScript) {\n                case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfSubSuperScript.subScript:\n                    size /= this._subScriptSizeFactor;\n                    break;\n                case _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfSubSuperScript.superScript:\n                    size /= this._superscriptSizeFactor;\n                    break;\n            }\n        }\n        return size;\n    };\n    return _PdfFontMetrics;\n}());\n\nvar _WidthTable = /** @class */ (function () {\n    function _WidthTable() {\n    }\n    return _WidthTable;\n}());\n\nvar _StandardWidthTable = /** @class */ (function (_super) {\n    __extends(_StandardWidthTable, _super);\n    function _StandardWidthTable(widths) {\n        var _this = _super.call(this) || this;\n        _this.widths = widths;\n        return _this;\n    }\n    _StandardWidthTable.prototype._itemAt = function (index) {\n        if (index < 0 || index >= this.widths.length) {\n            throw new Error('The character is not supported by the font.');\n        }\n        return this.widths[Number.parseInt(index.toString(), 10)];\n    };\n    _StandardWidthTable.prototype._toArray = function () {\n        return this.widths;\n    };\n    return _StandardWidthTable;\n}(_WidthTable));\n\nvar _CjkWidthTable = /** @class */ (function (_super) {\n    __extends(_CjkWidthTable, _super);\n    function _CjkWidthTable(defaultWidth) {\n        var _this = _super.call(this) || this;\n        _this._defaultWidth = defaultWidth;\n        _this.widths = [];\n        return _this;\n    }\n    _CjkWidthTable.prototype._itemAt = function (index) {\n        var width = this._defaultWidth;\n        this.widths.forEach(function (entry) {\n            if (index >= entry._from && index <= entry._to) {\n                width = entry._itemAt(index);\n            }\n        });\n        return width;\n    };\n    _CjkWidthTable.prototype._toArray = function () {\n        var array = [];\n        this.widths.forEach(function (width) {\n            width._appendToArray(array);\n        });\n        return array;\n    };\n    _CjkWidthTable.prototype._add = function (width) {\n        this.widths.push(width);\n    };\n    return _CjkWidthTable;\n}(_WidthTable));\n\nvar _CjkWidth = /** @class */ (function () {\n    function _CjkWidth() {\n    }\n    return _CjkWidth;\n}());\n\nvar _CjkSameWidth = /** @class */ (function (_super) {\n    __extends(_CjkSameWidth, _super);\n    function _CjkSameWidth(from, to, width) {\n        var _this = _super.call(this) || this;\n        _this._widthFrom = from;\n        _this._widthTo = to;\n        _this._width = width;\n        return _this;\n    }\n    Object.defineProperty(_CjkSameWidth.prototype, \"_from\", {\n        get: function () {\n            return this._widthFrom;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_CjkSameWidth.prototype, \"_to\", {\n        get: function () {\n            return this._widthTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _CjkSameWidth.prototype._itemAt = function (index) {\n        if (index < this._from || index > this._to) {\n            throw new Error('Index is out of range.');\n        }\n        return this._width;\n    };\n    _CjkSameWidth.prototype._appendToArray = function (array) {\n        array.push(this._from, this._to, this._width);\n    };\n    return _CjkSameWidth;\n}(_CjkWidth));\n\nvar _CjkDifferentWidth = /** @class */ (function (_super) {\n    __extends(_CjkDifferentWidth, _super);\n    function _CjkDifferentWidth(from, widths) {\n        var _this = _super.call(this) || this;\n        _this._widthFrom = from;\n        _this._widths = widths;\n        return _this;\n    }\n    Object.defineProperty(_CjkDifferentWidth.prototype, \"_from\", {\n        get: function () {\n            return this._widthFrom;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_CjkDifferentWidth.prototype, \"_to\", {\n        get: function () {\n            return this._widthFrom + this._widths.length - 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _CjkDifferentWidth.prototype._itemAt = function (index) {\n        if (index < this._widthFrom || index > this._to) {\n            throw new Error('Index is out of range.');\n        }\n        return this._widths[Number.parseInt(index.toString(), 10)];\n    };\n    _CjkDifferentWidth.prototype._appendToArray = function (array) {\n        array.push(this._from);\n        array.forEach(function (entry) {\n            array.push(entry);\n        });\n    };\n    return _CjkDifferentWidth;\n}(_CjkWidth));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-font-metrics.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-string-format.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-string-format.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfStringFormat: () => (/* binding */ PdfStringFormat),\n/* harmony export */   PdfVerticalAlignment: () => (/* binding */ PdfVerticalAlignment)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n\n/**\n * Represents the text layout information.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Gets the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new PDF standard font\n * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10);\n * // Create a new PDF string format\n * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right, PdfVerticalAlignment.bottom);\n * // Draw the text\n * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */ (function () {\n    function PdfStringFormat(arg1, arg2) {\n        this.horizontalScalingFactor = 100.0;\n        this.rightToLeft = false;\n        this._wordWrapType = _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.word;\n        this._isList = false;\n        this.lineLimit = true;\n        if (typeof arg1 !== 'undefined') {\n            this.alignment = arg1;\n        }\n        if (typeof arg2 !== 'undefined') {\n            this.lineAlignment = arg2;\n        }\n        else {\n            this.lineAlignment = PdfVerticalAlignment.top;\n        }\n        this.characterSpacing = 0;\n        this.wordSpacing = 0;\n        this.lineSpacing = 0;\n        this.clipPath = false;\n        this.firstLineIndent = 0;\n        this._internalParagraphIndent = 0;\n        this.measureTrailingSpaces = false;\n        this.noClip = false;\n    }\n    Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n        /**\n         * Gets the paragraph indent from string format.\n         *\n         * @returns {number} Returns the paragraph indent.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new PDF standard font\n         * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10);\n         * // Create a new PDF string format\n         * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right);\n         * // Get the default paragraph indent\n         * let paragraph: number = format.paragraphIndent;\n         * // Draw the text\n         * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this._internalParagraphIndent;\n        },\n        /**\n         * Sets the paragraph indent to string format.\n         *\n         * @param {number} value paragraph indent.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new PDF standard font\n         * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10);\n         * // Create a new PDF string format\n         * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right);\n         * // Set a new paragraph indent\n         * format.paragraphIndent = 20;\n         * // Draw the text\n         * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._internalParagraphIndent = value;\n            this.firstLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n        /**\n         * Gets the subscript or superscript mode from string format.\n         *\n         * @returns {PdfSubSuperScript} Returns the subscript or superscript mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new PDF standard font\n         * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10);\n         * // Create a new PDF string format\n         * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right);\n         * // Set a new paragraph indent\n         * format.paragraphIndent = 20;\n         * // Get the subscript or superscript mode\n         * let script: PdfSubSuperScript = format.subSuperScript;\n         * // Draw the text\n         * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this._pdfSubSuperScript === 'undefined' || this._pdfSubSuperScript === null) {\n                return _enumerator__WEBPACK_IMPORTED_MODULE_0__.PdfSubSuperScript.none;\n            }\n            else {\n                return this._pdfSubSuperScript;\n            }\n        },\n        /**\n         * Sets the subscript or superscript mode to string format.\n         *\n         * @param {PdfSubSuperScript} value subscript or superscript mode.\n         * ```typescript\n         * // Load an existing PDF document\n         * let document: PdfDocument = new PdfDocument(data, password);\n         * // Gets the first page\n         * let page: PdfPage = document.getPage(0) as PdfPage;\n         * // Create a new PDF standard font\n         * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10);\n         * // Create a new PDF string format\n         * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right);\n         * // Set a new paragraph indent\n         * format.paragraphIndent = 20;\n         * // Set the subscript or superscript mode\n         * format.subSuperScript = PdfSubSuperScript.subScript;\n         * // Draw the text\n         * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n         * // Save the document\n         * document.save('output.pdf');\n         * // Destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this._pdfSubSuperScript = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"_wordWrap\", {\n        get: function () {\n            return this._wordWrapType;\n        },\n        set: function (value) {\n            this._wordWrapType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfStringFormat;\n}());\n\n/**\n * Public enum to define vertical alignment.\n * ```typescript\n * // Load an existing PDF document\n * let document: PdfDocument = new PdfDocument(data, password);\n * // Gets the first page\n * let page: PdfPage = document.getPage(0) as PdfPage;\n * // Create a new PDF standard font\n * let font: PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 10, PdfFontStyle.regular);\n * // Create a new PDF string format\n * let format: PdfStringFormat = new PdfStringFormat(PdfTextAlignment.right, PdfVerticalAlignment.top);\n * // Draw the text\n * page.graphics.drawString('Helvetica', font, [0, 180, page.size[0], 40], undefined, new PdfBrush([0, 0, 255]), format);\n * // Save the document\n * document.save('output.pdf');\n * // Destroy the document\n * document.destroy();\n * ```\n */\nvar PdfVerticalAlignment;\n(function (PdfVerticalAlignment) {\n    /**\n     * Specifies the type of `top`.\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"top\"] = 0] = \"top\";\n    /**\n     * Specifies the type of `middle`.\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"middle\"] = 1] = \"middle\";\n    /**\n     * Specifies the type of `bottom`.\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"bottom\"] = 2] = \"bottom\";\n})(PdfVerticalAlignment || (PdfVerticalAlignment = {}));\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/pdf-string-format.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/string-layouter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/string-layouter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _LineInfo: () => (/* binding */ _LineInfo),\n/* harmony export */   _LineType: () => (/* binding */ _LineType),\n/* harmony export */   _PdfStringLayoutResult: () => (/* binding */ _PdfStringLayoutResult),\n/* harmony export */   _PdfStringLayouter: () => (/* binding */ _PdfStringLayouter),\n/* harmony export */   _StringTokenizer: () => (/* binding */ _StringTokenizer)\n/* harmony export */ });\n/* harmony import */ var _enumerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../enumerator */ \"./node_modules/@syncfusion/ej2-pdf/src/pdf/core/enumerator.js\");\n\nvar _PdfStringLayouter = /** @class */ (function () {\n    function _PdfStringLayouter() {\n    }\n    _PdfStringLayouter.prototype._layout = function (text, font, format, size) {\n        this._initialize(text, font, format, size);\n        var result = this._doLayout();\n        this._clear();\n        return result;\n    };\n    _PdfStringLayouter.prototype._initialize = function (text, font, format, size) {\n        this._font = font;\n        this._format = format;\n        this._size = size;\n        this._rectangle = [0, 0, size[0], size[1]];\n        this._reader = new _StringTokenizer(text);\n        this._pageHeight = 0;\n    };\n    _PdfStringLayouter.prototype._clear = function () {\n        this._font = null;\n        this._format = null;\n        this._reader._close();\n        this._reader = null;\n    };\n    _PdfStringLayouter.prototype._doLayout = function () {\n        var result = new _PdfStringLayoutResult();\n        var lineResult = new _PdfStringLayoutResult();\n        var lines = [];\n        var line = this._reader._peekLine();\n        var lineIndent = this._getLineIndent(true);\n        while (line !== null) {\n            lineResult = this._layoutLine(line, lineIndent);\n            if (typeof lineResult !== 'undefined' && lineResult !== null) {\n                var numSymbolsInserted = 0;\n                var returnedValue = this._copyToResult(result, lineResult, lines, numSymbolsInserted);\n                var success = returnedValue.success;\n                numSymbolsInserted = returnedValue.flag;\n                if (!success) {\n                    this._reader._read(numSymbolsInserted);\n                    break;\n                }\n            }\n            this._reader._readLine();\n            line = this._reader._peekLine();\n            lineIndent = this._getLineIndent(false);\n        }\n        this._finalizeResult(result, lines);\n        return result;\n    };\n    _PdfStringLayouter.prototype._getLineIndent = function (firstLine) {\n        var lineIndent = 0;\n        if (this._format) {\n            lineIndent = (firstLine) ? this._format.firstLineIndent : this._format.paragraphIndent;\n            lineIndent = (this._size[0] > 0) ? Math.min(this._size[0], lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    _PdfStringLayouter.prototype._getLineHeight = function () {\n        var height = this._font._metrics._getHeight();\n        if (this._format && this._format.lineSpacing !== 0) {\n            height = this._format.lineSpacing + this._font._metrics._getHeight();\n        }\n        return height;\n    };\n    _PdfStringLayouter.prototype._getLineWidth = function (line) {\n        return this._font.getLineWidth(line, this._format);\n    };\n    _PdfStringLayouter.prototype._layoutLine = function (line, lineIndent) {\n        var lineResult = new _PdfStringLayoutResult();\n        lineResult._lineHeight = this._getLineHeight();\n        var lines = [];\n        var maxWidth = this._size[0];\n        var lineWidth = this._getLineWidth(line) + lineIndent;\n        var lineType = _LineType.firstParagraphLine;\n        var readWord = true;\n        if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n            this._addToLineResult(lineResult, lines, line, lineWidth, _LineType.newLineBreak | lineType);\n        }\n        else {\n            var builder = '';\n            var curLine = '';\n            lineWidth = lineIndent;\n            var curIndent = lineIndent;\n            var reader = new _StringTokenizer(line);\n            var word = reader._peekWord();\n            if (word.length !== reader._length) {\n                if (word === ' ') {\n                    curLine = curLine + word;\n                    builder = builder + word;\n                    reader._position += 1;\n                    word = reader._peekWord();\n                }\n            }\n            while (word !== null) {\n                curLine = curLine + word;\n                var curLineWidth = this._getLineWidth(curLine.toString()) + curIndent;\n                if (curLine.toString() === ' ') {\n                    curLine = '';\n                    curLineWidth = 0;\n                }\n                if (curLineWidth > maxWidth) {\n                    if (this._getWrapType() === _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.none) {\n                        break;\n                    }\n                    if (curLine.length === word.length) {\n                        if (this._getWrapType() === _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.wordOnly) {\n                            lineResult._remainder = line.substring(reader._position);\n                            break;\n                        }\n                        else if (curLine.length === 1) {\n                            builder = builder + word;\n                            break;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            word = reader._peek().toString();\n                            continue;\n                        }\n                    }\n                    else {\n                        if (this._getLineWidth(word.toString()) > maxWidth) {\n                            if (typeof this._format !== 'undefined' && this._format !== null) {\n                                this._format._wordWrap = _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.character;\n                            }\n                        }\n                        else {\n                            if (typeof this._format !== 'undefined' && this._format !== null) {\n                                this._format._wordWrap = _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.word;\n                            }\n                        }\n                        if (this._getWrapType() !== _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.character || !readWord) {\n                            var stringValue = builder.toString();\n                            if (stringValue !== ' ') {\n                                this._addToLineResult(lineResult, lines, stringValue, lineWidth, _LineType.layoutBreak | lineType);\n                            }\n                            curLine = '';\n                            builder = '';\n                            lineWidth = 0;\n                            curIndent = 0;\n                            curLineWidth = 0;\n                            lineType = _LineType.none;\n                            word = (readWord) ? word : reader._peekWord();\n                            readWord = true;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            curLine = curLine + builder.toString();\n                            word = reader._peek().toString();\n                        }\n                        continue;\n                    }\n                }\n                builder = builder + word;\n                lineWidth = curLineWidth;\n                if (readWord) {\n                    reader._readWord();\n                    word = reader._peekWord();\n                }\n                else {\n                    reader._read();\n                    word = reader._peek().toString();\n                }\n            }\n            if (builder.length > 0) {\n                this._addToLineResult(lineResult, lines, builder.toString(), lineWidth, _LineType.newLineBreak | _LineType.lastParagraphLine);\n            }\n            reader._close();\n        }\n        lineResult._layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            lineResult._layoutLines.push(lines[index]); // eslint-disable-line\n        }\n        lines = [];\n        return lineResult;\n    };\n    _PdfStringLayouter.prototype._addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n        var info = new _LineInfo();\n        info._text = line;\n        info._width = lineWidth;\n        info._lineType = breakType;\n        lines.push(info);\n        var size = lineResult._actualSize;\n        size[1] = size[1] + this._getLineHeight();\n        size[0] = Math.max(size[0], lineWidth);\n        lineResult._size = size;\n    };\n    _PdfStringLayouter.prototype._copyToResult = function (result, lineResult, lines, flag) {\n        var success = true;\n        var allowPartialLines = (this._format && !this._format.lineLimit);\n        var height = result._actualSize[1];\n        var maxHeight = this._size[1];\n        if ((this._pageHeight > 0) && (maxHeight + this._rectangle[1] > this._pageHeight)) {\n            maxHeight = this._rectangle[1] - this._pageHeight;\n            maxHeight = Math.max(maxHeight, -maxHeight);\n        }\n        flag = 0;\n        if (lineResult._lines !== null) {\n            for (var i = 0, len = lineResult._lines.length; i < len; i++) {\n                var expHeight = height + lineResult._lineHeight;\n                if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n                    var info = lineResult._lines[i]; // eslint-disable-line\n                    flag += info._text.length;\n                    info = this._trimLine(info, (lines.length === 0));\n                    lines.push(info);\n                    var size = result._actualSize;\n                    size[0] = Math.max(size[0], info._width);\n                    result._size = size;\n                    height = expHeight;\n                }\n                else {\n                    success = false;\n                    break;\n                }\n            }\n        }\n        if (height !== result._size[1]) {\n            result._size = [result._actualSize[0], height];\n        }\n        return { success: success, flag: flag };\n    };\n    _PdfStringLayouter.prototype._finalizeResult = function (result, lines) {\n        result._layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            result._layoutLines.push(lines[index]); // eslint-disable-line\n        }\n        result._lineHeight = this._getLineHeight();\n        if (!this._reader._end) {\n            result._remainder = this._reader._readToEnd();\n        }\n        lines = [];\n    };\n    _PdfStringLayouter.prototype._trimLine = function (info, firstLine) {\n        var line = info._text.trim();\n        var lineWidth = info._width;\n        if (line.length !== info._text.length) {\n            lineWidth = this._getLineWidth(line);\n            if ((info._lineType & _LineType.firstParagraphLine) > 0) {\n                lineWidth += this._getLineIndent(firstLine);\n            }\n        }\n        info._text = line;\n        info._width = lineWidth;\n        return info;\n    };\n    _PdfStringLayouter.prototype._getWrapType = function () {\n        var wrapType = (this._format !== null && typeof this._format !== 'undefined') ?\n            this._format._wordWrap : _enumerator__WEBPACK_IMPORTED_MODULE_0__._PdfWordWrapType.word;\n        return wrapType;\n    };\n    return _PdfStringLayouter;\n}());\n\nvar _PdfStringLayoutResult = /** @class */ (function () {\n    function _PdfStringLayoutResult() {\n    }\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_actualSize\", {\n        get: function () {\n            if (typeof this._size === 'undefined') {\n                this._size = [0, 0];\n            }\n            return this._size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lines\", {\n        get: function () {\n            return this._layoutLines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_empty\", {\n        get: function () {\n            return (this._layoutLines === null || this._layoutLines.length === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_PdfStringLayoutResult.prototype, \"_lineCount\", {\n        get: function () {\n            return (!this._empty) ? this._layoutLines.length : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return _PdfStringLayoutResult;\n}());\n\nvar _LineInfo = /** @class */ (function () {\n    function _LineInfo() {\n    }\n    return _LineInfo;\n}());\n\nvar _LineType;\n(function (_LineType) {\n    _LineType[_LineType[\"none\"] = 0] = \"none\";\n    _LineType[_LineType[\"newLineBreak\"] = 1] = \"newLineBreak\";\n    _LineType[_LineType[\"layoutBreak\"] = 2] = \"layoutBreak\";\n    _LineType[_LineType[\"firstParagraphLine\"] = 4] = \"firstParagraphLine\";\n    _LineType[_LineType[\"lastParagraphLine\"] = 8] = \"lastParagraphLine\";\n})(_LineType || (_LineType = {}));\nvar _StringTokenizer = /** @class */ (function () {\n    function _StringTokenizer(textValue) {\n        this._position = 0;\n        if (typeof textValue === 'undefined' || textValue === null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this._text = textValue;\n    }\n    Object.defineProperty(_StringTokenizer.prototype, \"_length\", {\n        get: function () {\n            return this._text.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_StringTokenizer.prototype, \"_end\", {\n        get: function () {\n            return (this._position === this._text.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    _StringTokenizer.prototype._readLine = function () {\n        var position = this._position;\n        while (position < this._length) {\n            var ch = this._text[position]; // eslint-disable-line\n            var text = void 0;\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    text = this._text.substring(this._position, position);\n                    this._position = position + 1;\n                    if (((ch === '\\r') && (this._position < this._length)) && (this._text[this._position] === '\\n')) {\n                        this._position++;\n                    }\n                    return text;\n            }\n            position++;\n        }\n        if (position > this._position) {\n            var text2 = this._text.substring(this._position, position);\n            this._position = position;\n            return text2;\n        }\n        return null;\n    };\n    _StringTokenizer.prototype._peekLine = function () {\n        var position = this._position;\n        var line = this._readLine();\n        this._position = position;\n        return line;\n    };\n    _StringTokenizer.prototype._readWord = function () {\n        var position = this._position;\n        while (position < this._length) {\n            var ch = this._text[position]; // eslint-disable-line\n            var text = void 0;\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    text = this._text.substring(this._position, position - this._position);\n                    this._position = position + 1;\n                    if (((ch === '\\r') && (this._position < this._length)) && (this._text[this._position] === '\\n')) {\n                        this._position++;\n                    }\n                    return text;\n                case ' ':\n                case '\\t':\n                    if (position === this._position) {\n                        position++;\n                    }\n                    text = this._text.substring(this._position, position);\n                    this._position = position;\n                    return text;\n            }\n            position++;\n        }\n        if (position > this._position) {\n            var text2 = this._text.substring(this._position, position);\n            this._position = position;\n            return text2;\n        }\n        return null;\n    };\n    _StringTokenizer.prototype._peekWord = function () {\n        var position = this._position;\n        var word = this._readWord();\n        this._position = position;\n        return word;\n    };\n    _StringTokenizer.prototype._read = function (count) {\n        if (typeof count === 'undefined') {\n            var character = '0';\n            if (!this._end) {\n                character = this._text[this._position];\n                this._position++;\n            }\n            return character;\n        }\n        else {\n            var value = 0;\n            var builder = '';\n            while (!this._end && value < count) {\n                builder += this._read();\n                value++;\n            }\n            return builder;\n        }\n    };\n    _StringTokenizer.prototype._peek = function () {\n        return this._end ? '0' : this._text[this._position];\n    };\n    _StringTokenizer.prototype._close = function () {\n        this._text = null;\n    };\n    _StringTokenizer.prototype._readToEnd = function () {\n        var text;\n        if (this._position === 0) {\n            text = this._text;\n        }\n        else {\n            text = this._text.substring(this._position);\n        }\n        this._position = this._length;\n        return text;\n    };\n    _StringTokenizer._whiteSpace = ' ';\n    _StringTokenizer._tab = '\\t';\n    _StringTokenizer._spaces = [_StringTokenizer._whiteSpace, _StringTokenizer._tab];\n    return _StringTokenizer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/string-layouter.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/ttf-table.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/ttf-table.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _TrueTypeAppleCmapSubTable: () => (/* binding */ _TrueTypeAppleCmapSubTable),\n/* harmony export */   _TrueTypeCmapSubTable: () => (/* binding */ _TrueTypeCmapSubTable),\n/* harmony export */   _TrueTypeCmapTable: () => (/* binding */ _TrueTypeCmapTable),\n/* harmony export */   _TrueTypeHeadTable: () => (/* binding */ _TrueTypeHeadTable),\n/* harmony export */   _TrueTypeHorizontalHeaderTable: () => (/* binding */ _TrueTypeHorizontalHeaderTable),\n/* harmony export */   _TrueTypeMicrosoftCmapSubTable: () => (/* binding */ _TrueTypeMicrosoftCmapSubTable),\n/* harmony export */   _TrueTypeNameTable: () => (/* binding */ _TrueTypeNameTable),\n/* harmony export */   _TrueTypeOS2Table: () => (/* binding */ _TrueTypeOS2Table),\n/* harmony export */   _TrueTypePostTable: () => (/* binding */ _TrueTypePostTable),\n/* harmony export */   _TrueTypeTableInfo: () => (/* binding */ _TrueTypeTableInfo),\n/* harmony export */   _TrueTypeTrimmedCmapSubTable: () => (/* binding */ _TrueTypeTrimmedCmapSubTable)\n/* harmony export */ });\nvar _TrueTypeTableInfo = /** @class */ (function () {\n    function _TrueTypeTableInfo() {\n    }\n    Object.defineProperty(_TrueTypeTableInfo.prototype, \"_empty\", {\n        get: function () {\n            var empty = (this._offset === this._length && this._length === this._checksum && this._checksum === 0);\n            return empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return _TrueTypeTableInfo;\n}());\n\nvar _TrueTypeOS2Table = /** @class */ (function () {\n    function _TrueTypeOS2Table() {\n    }\n    return _TrueTypeOS2Table;\n}());\n\nvar _TrueTypePostTable = /** @class */ (function () {\n    function _TrueTypePostTable() {\n    }\n    return _TrueTypePostTable;\n}());\n\nvar _TrueTypeNameTable = /** @class */ (function () {\n    function _TrueTypeNameTable() {\n    }\n    return _TrueTypeNameTable;\n}());\n\nvar _TrueTypeMicrosoftCmapSubTable = /** @class */ (function () {\n    function _TrueTypeMicrosoftCmapSubTable() {\n    }\n    return _TrueTypeMicrosoftCmapSubTable;\n}());\n\nvar _TrueTypeHorizontalHeaderTable = /** @class */ (function () {\n    function _TrueTypeHorizontalHeaderTable() {\n    }\n    return _TrueTypeHorizontalHeaderTable;\n}());\n\nvar _TrueTypeHeadTable = /** @class */ (function () {\n    function _TrueTypeHeadTable() {\n    }\n    return _TrueTypeHeadTable;\n}());\n\nvar _TrueTypeCmapTable = /** @class */ (function () {\n    function _TrueTypeCmapTable() {\n    }\n    return _TrueTypeCmapTable;\n}());\n\nvar _TrueTypeCmapSubTable = /** @class */ (function () {\n    function _TrueTypeCmapSubTable() {\n    }\n    return _TrueTypeCmapSubTable;\n}());\n\nvar _TrueTypeAppleCmapSubTable = /** @class */ (function () {\n    function _TrueTypeAppleCmapSubTable() {\n    }\n    return _TrueTypeAppleCmapSubTable;\n}());\n\nvar _TrueTypeTrimmedCmapSubTable = /** @class */ (function () {\n    function _TrueTypeTrimmedCmapSubTable() {\n    }\n    return _TrueTypeTrimmedCmapSubTable;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdf/src/pdf/core/fonts/ttf-table.js?");

/***/ })

}]);