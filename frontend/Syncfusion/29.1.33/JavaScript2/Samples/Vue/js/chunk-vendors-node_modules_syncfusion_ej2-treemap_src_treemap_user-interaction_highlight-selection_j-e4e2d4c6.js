"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-treemap_src_treemap_user-interaction_highlight-selection_j-e4e2d4c6"],{

/***/ "./node_modules/@syncfusion/ej2-treemap/src/treemap/user-interaction/highlight-selection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-treemap/src/treemap/user-interaction/highlight-selection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TreeMapHighlight: () => (/* binding */ TreeMapHighlight),\n/* harmony export */   TreeMapSelection: () => (/* binding */ TreeMapSelection)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _model_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/constants */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/constants.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/utils/helper.js\");\n\n\n\n/**\n * Performing treemap highlight\n */\nvar TreeMapHighlight = /** @class */ (function () {\n    function TreeMapHighlight(treeMap) {\n        this.target = 'highlight';\n        this.shapeTarget = 'highlight';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.shapeHighlightCollection = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.legendHighlightCollection = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.currentElement = [];\n        this.treemap = treeMap;\n        this.addEventListener();\n    }\n    /**\n     * Mouse Move event in highlight\n     *\n     * @param {PointerEvent} e - Specifies the pointer argument.\n     * @returns {boolean} - return the highlight process is true or false.\n     * @private\n     */\n    TreeMapHighlight.prototype.mouseMove = function (e) {\n        var targetEle = e.target;\n        return this.highlightOnMouseMove(targetEle);\n    };\n    /**\n     * This method highlights the target element for mouse move event.\n     *\n     * @param {Element} targetElement - Specifies the target element to highlight.\n     * @returns {boolean} - return the highlight process is true or false.\n     * @private\n     */\n    TreeMapHighlight.prototype.highlightOnMouseMove = function (targetElement) {\n        var treemap = this.treemap;\n        var processHighlight;\n        var targetId = targetElement.id;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var eventArgs;\n        var items = [];\n        var highlight = this.treemap.highlightSettings;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var item;\n        var highLightElements = [];\n        var process;\n        var treeMapElement;\n        var element;\n        var orders;\n        var selectionModule = this.treemap.treeMapSelectionModule;\n        var shapeSelected = false;\n        if (selectionModule && selectionModule.legendSelectionCollection.length > 0) {\n            for (var i = 0; i < selectionModule.legendSelectionCollection.length; i++) {\n                for (var j = 0; j < selectionModule.legendSelectionCollection[i]['ShapeCollection']['Elements'].length; j++) {\n                    var selectedElementIndex = parseFloat(selectionModule.legendSelectionCollection[i]['ShapeCollection']['Elements'][j].id.split('Item_Index_')[1].split('_')[0]);\n                    var targetElementIndex = targetId.indexOf('_Item_Index_') > -1 ? parseFloat(targetId.split('Item_Index_')[1].split('_')[0]) : null;\n                    if (selectionModule.legendSelectionCollection[i]['ShapeCollection']['Elements'][j].id === targetId ||\n                        selectedElementIndex === targetElementIndex) {\n                        shapeSelected = true;\n                        break;\n                    }\n                }\n            }\n        }\n        if (targetId.indexOf('_Item_Index') > -1 && !shapeSelected) {\n            if (this.highLightId !== targetId ||\n                (this.legendHighlightCollection[0] ? this.legendHighlightCollection[0]['ShapeCollection']['Elements'].length > 1 : false)) {\n                treeMapElement = document.getElementById(treemap.element.id + '_TreeMap_' + treemap.layoutType + '_Layout');\n                var selectionElements = document.getElementsByClassName('treeMapSelection');\n                item = this.treemap.layout.renderItems[parseFloat(targetId.split('_Item_Index_')[1])];\n                var index = void 0;\n                if (this.treemap.legendSettings.visible) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var collection = this.treemap.treeMapLegendModule.legendCollections;\n                    var length_1 = this.treemap.treeMapLegendModule.legendCollections.length;\n                    index = (!treemap.legendSettings.removeDuplicateLegend && treemap.palette && treemap.palette.length > 0 &&\n                        treemap.leafItemSettings.colorMapping.length === 0 && treemap.levels.length === 0) ?\n                        parseFloat(targetId.split('_Item_Index_')[1]) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getLegendIndex)(length_1, item, treemap);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendHighlightCollection, treemap);\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeHighlightCollection, treemap);\n                        this.legendHighlightCollection = [];\n                        treemap.treeMapLegendModule.removeInteractivePointer();\n                    }\n                    this.shapeElement = this.treemap.legendSettings.mode === 'Default' ? document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + index) : document.getElementById(this.treemap.element.id + '_Legend_Index_' + index);\n                    if (this.shapeElement !== null) {\n                        if (selectionModule ? this.shapeElement.id !== ((selectionModule && selectionModule.shapeElement)\n                            ? selectionModule.shapeElement.id : null) : true) {\n                            this.currentElement.push({ currentElement: this.shapeElement });\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeHighlightCollection, treemap);\n                            this.shapeHighlightCollection.push({ legendEle: this.shapeElement, oldFill: collection[index]['legendFill'],\n                                oldOpacity: collection[index]['opacity'], oldBorderColor: collection[index]['borderColor'],\n                                oldBorderWidth: collection[index]['borderWidth']\n                            });\n                            var legendText = this.treemap.legendSettings.mode === 'Default' ? document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + index)\n                                : document.getElementById(this.treemap.element.id + '_Legend_Index_' + index + '_Text');\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendText, highlight.fill, highlight.opacity, null, null);\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(this.shapeElement, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            this.target = 'highlight';\n                        }\n                        else if (this.currentElement.length > 0 && this.currentElement[this.currentElement.length - 1]['currentElement'] !== this.shapeElement) {\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeSelectionWithHighlight)(this.shapeHighlightCollection, this.currentElement, treemap);\n                            this.highLightId = '';\n                        }\n                    }\n                }\n                orders = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.findHightLightItems)(item, [], highlight.mode, treemap);\n                for (var i = 0; i < treeMapElement.childElementCount; i++) {\n                    element = treeMapElement.childNodes[i];\n                    process = true;\n                    var valuePath = (treemap.rangeColorValuePath !== '') ? treemap.rangeColorValuePath : null;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var targetItem = treemap.layout.renderItems[parseFloat(targetId.split('_Item_Index_')[1])];\n                    item = treemap.layout.renderItems[parseFloat(element.id.split('_Item_Index_')[1])];\n                    for (var j = 0; j < selectionElements.length; j++) {\n                        if (element.id === selectionElements[j].id ||\n                            element.id === selectionElements[j].parentElement.id) {\n                            process = false;\n                            break;\n                        }\n                    }\n                    if (orders.indexOf(item['levelOrderName']) > -1 && process &&\n                        (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(valuePath) ?\n                            (item['data'][valuePath] === targetItem['data'][valuePath] ||\n                                (highlight.mode !== 'Item' && treemap.levels.length > 0)) : true)) {\n                        highLightElements.push(element);\n                        items.push(item);\n                    }\n                }\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', treemap);\n                for (var k = 0; k < highLightElements.length; k++) {\n                    element = highLightElements[k];\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.applyOptions)(element.childNodes[0], { border: highlight.border, fill: highlight.fill, opacity: highlight.opacity });\n                    element.classList.add('treeMapHighLight');\n                    this.highLightId = targetId;\n                }\n                eventArgs = { cancel: false, name: _model_constants__WEBPACK_IMPORTED_MODULE_1__.itemHighlight, treemap: treemap, items: items, elements: highLightElements };\n                treemap.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_1__.itemHighlight, eventArgs);\n            }\n        }\n        else if (targetId.indexOf('_Legend_Shape') > -1 || targetId.indexOf('_Legend_Index') > -1 || targetId.indexOf('_Legend_Text_Index') > -1) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectionModule)) {\n                selectionModule.legendSelectId = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(treemap.legendId[0]) ? treemap.legendId[0] : null;\n            }\n            var selectedLegendIndex = selectionModule && selectionModule.legendSelectId ?\n                parseFloat(selectionModule.legendSelectId.split('Index_')[1]) :\n                (selectionModule && selectionModule.shapeSelectId ? parseFloat(selectionModule.shapeSelectId.split('Index_')[1]) : null);\n            var targetIndex = this.treemap.legendSettings.mode === 'Default' ? (targetId.indexOf('Text') === -1 ? parseFloat(targetId.split('_Legend_Shape_Index_')[1]) : parseFloat(targetId.split('_Legend_Text_Index_')[1]))\n                : parseFloat(targetId.split('_Legend_Index_')[1]);\n            if (this.treemap.legendSettings.visible && targetIndex !== selectedLegendIndex) {\n                var itemIndex = void 0;\n                var groupIndex = void 0;\n                var length_2;\n                var valuePath = (treemap.rangeColorValuePath !== '') ? treemap.rangeColorValuePath : null;\n                var targetEle = document.getElementById(targetId);\n                if (this.shapeTarget === 'highlight') {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendHighlightCollection, this.treemap);\n                    this.legendHighlightCollection = [];\n                }\n                this.shapeTarget = 'highlight';\n                var dataLength = this.treemap.treeMapLegendModule.legendCollections[targetIndex]['legendData'].length;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var collection = this.treemap.treeMapLegendModule.legendCollections;\n                for (var i = 0; i < dataLength; i++) {\n                    for (var j = 0; j < this.treemap.layout.renderItems.length; j++) {\n                        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(valuePath) && treemap.leafItemSettings.colorMapping.length > 0 &&\n                            treemap.levels.length === 0)\n                            ? treemap.treeMapLegendModule.legendCollections[targetIndex]['legendData'][i]['data'][valuePath] === treemap.layout.renderItems[j]['data'][valuePath]\n                            : (treemap.treeMapLegendModule.legendCollections[targetIndex]['legendData'][i]['levelOrderName'] === treemap.layout.renderItems[j]['levelOrderName'])) {\n                            itemIndex = j;\n                            groupIndex = this.treemap.layout.renderItems[j]['groupIndex'];\n                            var nodeEle = document.getElementById(this.treemap.element.id + '_Level_Index_' + groupIndex + '_Item_Index_' + itemIndex + '_RectPath');\n                            if (i === 0 || this.legendHighlightCollection.length === 0) {\n                                this.legendHighlightCollection = [];\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.pushCollection)(this.legendHighlightCollection, targetIndex, j, targetEle, nodeEle, this.treemap.layout.renderItems, collection);\n                                length_2 = this.legendHighlightCollection.length;\n                                this.legendHighlightCollection[length_2 - 1]['ShapeCollection'] = { Elements: [] };\n                            }\n                            var legendShape = void 0;\n                            var legendText = void 0;\n                            if (targetEle.id.indexOf('Text') > -1) {\n                                legendShape = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle.id.replace('_Text', ''))\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + targetIndex);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle, highlight.fill, highlight.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendShape, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            }\n                            else {\n                                legendText = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle.id + '_Text')\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + targetIndex);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendText, highlight.fill, highlight.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            }\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(nodeEle, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            length_2 = this.legendHighlightCollection.length;\n                            this.legendHighlightCollection[length_2 - 1]['ShapeCollection']['Elements'].push(nodeEle);\n                        }\n                    }\n                }\n                if (dataLength === 0 && this.treemap.palette && this.treemap.palette.length > 0) {\n                    for (var j = 0; j < this.treemap.layout.renderItems.length; j++) {\n                        if ((this.treemap.treeMapLegendModule.legendCollections[targetIndex]['levelOrderName'] === this.treemap.layout.renderItems[j]['levelOrderName'] ||\n                            this.treemap.layout.renderItems[j]['levelOrderName'].indexOf(this.treemap.treeMapLegendModule.legendCollections[targetIndex]['levelOrderName']) > -1) &&\n                            ((!this.treemap.legendSettings.removeDuplicateLegend && treemap.palette && treemap.palette.length > 0 &&\n                                !this.treemap.layout.renderItems[j].parent.isDrilled) ?\n                                targetIndex === j : true)) {\n                            itemIndex = j;\n                            groupIndex = this.treemap.layout.renderItems[j]['groupIndex'];\n                            var nodeEle = document.getElementById(this.treemap.element.id + '_Level_Index_' + groupIndex + '_Item_Index_' + itemIndex + '_RectPath');\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.pushCollection)(this.legendHighlightCollection, targetIndex, j, targetEle, nodeEle, this.treemap.layout.renderItems, collection);\n                            length_2 = this.legendHighlightCollection.length;\n                            this.legendHighlightCollection[length_2 - 1]['ShapeCollection'] = { Elements: [] };\n                            var legendItem = void 0;\n                            if (targetEle.id.indexOf('Text') > -1) {\n                                legendItem = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle.id.replace('_Text', ''))\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + targetIndex);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle, highlight.fill, highlight.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendItem, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            }\n                            else {\n                                legendItem = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle.id + '_Text')\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + targetIndex);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendItem, highlight.fill, highlight.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            }\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(nodeEle, highlight.fill, highlight.opacity, highlight.border.color, highlight.border.width.toString());\n                            length_2 = this.legendHighlightCollection.length;\n                            this.legendHighlightCollection[length_2 - 1]['ShapeCollection']['Elements'].push(nodeEle);\n                        }\n                    }\n                }\n            }\n            else {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', treemap);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendHighlightCollection, treemap);\n                this.legendHighlightCollection = [];\n            }\n        }\n        else {\n            if (selectionModule ? this.shapeElement ? this.shapeElement.getAttribute('id') !== selectionModule.legendSelectId : true : true) {\n                if (selectionModule ? this.shapeElement !== selectionModule.shapeElement :  true && this.treemap.legendSettings.visible) {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', treemap);\n                }\n            }\n            if ((this.shapeTarget === 'highlight' || this.target === 'highlight') && this.treemap.legendSettings.visible) {\n                if (selectionModule ? this.shapeElement ? this.shapeElement.getAttribute('id') !== selectionModule.legendSelectId : true : true) {\n                    if (selectionModule ? this.shapeElement !== selectionModule.shapeElement :  true && selectionModule ?\n                        selectionModule.legendSelect : true) {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeHighlightCollection, treemap);\n                        this.shapeHighlightCollection = [];\n                    }\n                }\n            }\n            if (this.shapeTarget === 'highlight' && this.treemap.legendSettings.visible) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendHighlightCollection, this.treemap);\n            }\n            this.highLightId = '';\n            processHighlight = false;\n        }\n        return processHighlight;\n    };\n    /**\n     * To bind events for highlight\n     *\n     * @returns {void}\n     */\n    TreeMapHighlight.prototype.addEventListener = function () {\n        if (this.treemap.isDestroyed) {\n            return;\n        }\n        this.treemap.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove, this);\n    };\n    /**\n     * To unbind events for highlight\n     *\n     * @returns {void}\n     */\n    TreeMapHighlight.prototype.removeEventListener = function () {\n        if (this.treemap.isDestroyed) {\n            return;\n        }\n        this.treemap.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMove);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name\n     */\n    TreeMapHighlight.prototype.getModuleName = function () {\n        return 'treeMapHighlight';\n    };\n    /**\n     * To destroy the hightlight.\n     *\n     * @returns {void}\n     * @private\n     */\n    TreeMapHighlight.prototype.destroy = function () {\n        this.shapeElement = null;\n        this.shapeHighlightCollection = [];\n        this.legendHighlightCollection = [];\n        this.currentElement = [];\n        this.removeEventListener();\n        this.treemap = null;\n    };\n    return TreeMapHighlight;\n}());\n\n/**\n * Performing treemap selection\n */\nvar TreeMapSelection = /** @class */ (function () {\n    function TreeMapSelection(treeMap) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.shapeSelectionCollection = [];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.legendSelectionCollection = [];\n        this.shapeSelect = true;\n        this.legendSelect = true;\n        this.treemap = treeMap;\n        this.addEventListener();\n    }\n    /**\n     * Mouse down event in selection\n     *\n     * @param {PointerEvent} e - Specifies the pointer argument.\n     * @returns {void}\n     * @private\n     */\n    TreeMapSelection.prototype.mouseDown = function (e) {\n        var targetEle = e.target;\n        e.preventDefault();\n        this.selectionOnMouseDown(targetEle);\n    };\n    /**\n     * This method selects the target element for mouse down event.\n     *\n     * @param {Element} targetEle - Specifies the target element that was clicked.\n     * @returns {void}\n     * @private\n     */\n    TreeMapSelection.prototype.selectionOnMouseDown = function (targetEle) {\n        var eventArgs;\n        var treemap = this.treemap;\n        targetEle.setAttribute('tabindex', '-1');\n        targetEle.style.outline = 'none';\n        if (!targetEle.id.includes('Legend_Shape_Index')) {\n            targetEle.focus();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var items = [];\n        var targetId = targetEle.id;\n        var labelText = targetEle.innerHTML;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var item;\n        var selectionElements = [];\n        var treeMapElement;\n        var element;\n        var orders;\n        var selection = treemap.selectionSettings;\n        var highlightModule = this.treemap.treeMapHighlightModule;\n        var layoutID = treemap.element.id + '_TreeMap_' + treemap.layoutType + '_Layout';\n        item = treemap.layout.renderItems[parseFloat(targetId.split('_Item_Index_')[1])];\n        var isDrillItem = (item && !item.isLeafItem && treemap.enableDrillDown) &&\n            (targetEle.textContent.indexOf('[+]') > -1 || targetEle.textContent.indexOf('[-]') > -1 ||\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetEle.nextElementSibling) &&\n                    (targetEle.nextSibling.textContent.indexOf('[+]') > -1 || targetEle.nextSibling.textContent.indexOf('[-]') > -1)));\n        if (targetId.indexOf('_Item_Index') > -1 && !isDrillItem) {\n            if ((this.treemap.selectionId !== targetId &&\n                (treemap.selectionId ? parseFloat(treemap.selectionId.split('_Item_Index_')[1]) !== parseFloat(targetId.split('_Item_Index_')[1]) : true)) ||\n                (this.legendSelectionCollection[0] ? this.legendSelectionCollection[0]['ShapeCollection']['Elements'].length > 1 : false)) {\n                treemap.levelSelection = [];\n                treemap.legendId = [];\n                this.shapeSelectId = '';\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendSelectionCollection, treemap);\n                this.legendSelectionCollection = [];\n                treeMapElement = document.getElementById(layoutID);\n                var index = void 0;\n                if (this.treemap.legendSettings.visible) {\n                    this.shapeSelect = false;\n                    var length_3 = this.treemap.treeMapLegendModule.legendCollections.length;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var collection = this.treemap.treeMapLegendModule.legendCollections;\n                    this.shapeElement = undefined;\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeSelectionCollection, treemap);\n                    if (highlightModule) {\n                        highlightModule.shapeTarget = 'selection';\n                        highlightModule.shapeHighlightCollection = [];\n                    }\n                    index = (!treemap.legendSettings.removeDuplicateLegend && treemap.palette && treemap.palette.length > 0 &&\n                        treemap.leafItemSettings.colorMapping.length === 0\n                        && treemap.levels.length === 0) ?\n                        parseFloat(targetId.split('_Item_Index_')[1]) : (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getLegendIndex)(length_3, item, treemap);\n                    this.shapeElement = this.treemap.legendSettings.mode === 'Default' ? document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + index) : document.getElementById(this.treemap.element.id + '_Legend_Index_' + index);\n                    if (this.shapeElement !== null) {\n                        this.shapeSelectId = this.shapeElement.getAttribute('id');\n                        this.shapeSelectionCollection.push({ legendEle: this.shapeElement, oldFill: collection[index]['legendFill'],\n                            oldOpacity: collection[index]['opacity'], oldBorderColor: collection[index]['borderColor'],\n                            oldBorderWidth: collection[index]['borderWidth']\n                        });\n                        var legendText = this.treemap.legendSettings.mode === 'Default' ? document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + index)\n                            : document.getElementById(this.treemap.element.id + '_Legend_Index_' + index + '_Text');\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendText, selection.fill, selection.opacity, null, null);\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(this.shapeElement, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                        treemap.legendId.push(this.shapeElement.id);\n                        treemap.legendId.push(legendText.id);\n                    }\n                }\n                orders = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.findHightLightItems)(item, [], selection.mode, treemap);\n                for (var i = 0; i < treeMapElement.childElementCount; i++) {\n                    element = treeMapElement.childNodes[i];\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var targetItem = treemap.layout.renderItems[parseFloat(targetId.split('_Item_Index_')[1])];\n                    item = treemap.layout.renderItems[parseFloat(element.id.split('_Item_Index_')[1])];\n                    var valuePath = (treemap.rangeColorValuePath !== '') ? treemap.rangeColorValuePath : null;\n                    if (orders.indexOf(item['levelOrderName']) > -1 &&\n                        (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(valuePath) ?\n                            (item['data'][valuePath] === targetItem['data'][valuePath] ||\n                                (selection.mode !== 'Item' && treemap.levels.length > 0)) : true)) {\n                        selectionElements.push(element);\n                        if (targetId.indexOf('_RectPath') > -1) {\n                            treemap.levelSelection.push(element.id);\n                        }\n                        items.push(item);\n                    }\n                }\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', treemap);\n                this.treemap.selectionId = targetId;\n                var highLightElements = document.getElementsByClassName('treeMapHighLight');\n                for (var k = 0; k < selectionElements.length; k++) {\n                    element = selectionElements[k];\n                    if (highLightElements.length > 0) {\n                        for (var j = 0; j < highLightElements.length; j++) {\n                            if (highLightElements[j].id === element.id) {\n                                highLightElements[j].classList.remove('treeMapHighLight');\n                            }\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.applyOptions)(element.childNodes[0], { border: selection.border, fill: selection.fill, opacity: selection.opacity });\n                            element.classList.add('treeMapSelection');\n                        }\n                    }\n                    else {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.applyOptions)(element.childNodes[0], { border: selection.border, fill: selection.fill, opacity: selection.opacity });\n                        element.classList.add('treeMapSelection');\n                    }\n                    eventArgs = { cancel: false, name: _model_constants__WEBPACK_IMPORTED_MODULE_1__.itemSelected, treemap: treemap, items: items, elements: selectionElements,\n                        text: labelText, contentItemTemplate: labelText };\n                    treemap.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_1__.itemSelected, eventArgs, function (observedArgs) {\n                        if (observedArgs.contentItemTemplate !== labelText) {\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setItemTemplateContent)(targetId, targetEle, observedArgs.contentItemTemplate);\n                        }\n                    });\n                }\n            }\n            else {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendSelectionCollection, treemap);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeSelectionCollection, treemap);\n                this.treemap.legendId = [];\n                this.shapeSelectionCollection = [];\n                this.legendSelectionCollection = [];\n                this.shapeElement = undefined;\n                this.shapeSelect = true;\n                this.shapeSelectId = '';\n                this.treemap.levelSelection = [];\n                this.legendSelectId = '';\n                if (this.legendSelect || this.shapeSelect) {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', treemap);\n                    this.treemap.selectionId = '';\n                }\n            }\n        }\n        else if (targetId.indexOf('_Legend_Shape') > -1 || targetId.indexOf('_Legend_Index') > -1 || targetId.indexOf('_Legend_Text_') > -1) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var collection = this.treemap.treeMapLegendModule.legendCollections;\n            var legendSelectIdIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.legendSelectId) ? parseFloat(this.legendSelectId.split('_Index_')[1]) : null;\n            if (this.treemap.legendSettings.visible && (legendSelectIdIndex !== parseFloat(targetId.split('_Index_')[1]))) {\n                var itemIndex = void 0;\n                var groupIndex = void 0;\n                var length_4;\n                treemap.legendId = [];\n                treemap.levelSelection = [];\n                this.legendSelectId = targetId;\n                this.legendSelect = false;\n                var legendIndex = !isNaN(parseInt(targetId[targetId.length - 1], 10)) ?\n                    parseInt(targetId[targetId.length - 1], 10) :\n                    parseInt(targetId[targetId.length - 6], 10);\n                var targetEle_1 = document.getElementById(targetId);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendSelectionCollection, treemap);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', treemap);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeSelectionCollection, treemap);\n                this.legendSelectionCollection = [];\n                if (highlightModule) {\n                    highlightModule.shapeTarget = 'selection';\n                    highlightModule.legendHighlightCollection = [];\n                }\n                var valuePath = (treemap.rangeColorValuePath !== '') ? treemap.rangeColorValuePath : null;\n                var index = this.treemap.legendSettings.mode === 'Default' ? (targetId.indexOf('Text') === -1 ? parseFloat(targetId.split('_Legend_Shape_Index_')[1]) : parseFloat(targetId.split('_Legend_Text_Index_')[1]))\n                    : parseFloat(targetId.split('_Legend_Index_')[1]);\n                var dataLength = this.treemap.treeMapLegendModule.legendCollections[index]['legendData'].length;\n                for (var k = 0; k < dataLength; k++) {\n                    for (var l = 0; l < this.treemap.layout.renderItems.length; l++) {\n                        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(valuePath) && treemap.leafItemSettings.colorMapping.length > 0 &&\n                            treemap.levels.length === 0) ?\n                            (treemap.treeMapLegendModule.legendCollections[index]['legendData'][k]['data'][valuePath] === treemap.layout.renderItems[l]['data'][valuePath])\n                            : (this.treemap.treeMapLegendModule.legendCollections[index]['legendData'][k]['levelOrderName'] === this.treemap.layout.renderItems[l]['levelOrderName'])) {\n                            itemIndex = l;\n                            groupIndex = this.treemap.layout.renderItems[l]['groupIndex'];\n                            var nodeEle = document.getElementById(this.treemap.element.id + '_Level_Index_' + groupIndex + '_Item_Index_' + itemIndex + '_RectPath');\n                            this.treemap.selectionId = nodeEle.id;\n                            if (k === 0 || this.legendSelectionCollection.length === 0) {\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.pushCollection)(this.legendSelectionCollection, legendIndex, l, targetEle_1, nodeEle, this.treemap.layout.renderItems, collection);\n                                length_4 = this.legendSelectionCollection.length;\n                                this.legendSelectionCollection[length_4 - 1]['ShapeCollection'] = { Elements: [] };\n                            }\n                            this.treemap.selectionId = nodeEle.id;\n                            var legendShape = void 0;\n                            var legendText = void 0;\n                            if (targetEle_1.id.indexOf('Text') > -1) {\n                                legendShape = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle_1.id.replace('_Text', ''))\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + index);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendShape, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle_1, selection.fill, selection.opacity, null, null);\n                                this.legendSelectId = legendShape.id;\n                                this.shapeElement = legendShape;\n                                treemap.legendId.push(targetEle_1.id);\n                                treemap.legendId.push(legendShape.id);\n                            }\n                            else {\n                                legendText = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle_1.id + '_Text')\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + index);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendText, selection.fill, selection.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle_1, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                                this.shapeElement = targetEle_1;\n                                treemap.legendId.push(targetEle_1.id);\n                                treemap.legendId.push(legendText.id);\n                            }\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(nodeEle, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                            length_4 = this.legendSelectionCollection.length;\n                            treemap.levelSelection.push(nodeEle.id);\n                            this.legendSelectionCollection[length_4 - 1]['ShapeCollection']['Elements'].push(nodeEle);\n                        }\n                    }\n                }\n                if (dataLength === 0 && this.treemap.palette && this.treemap.palette.length > 0) {\n                    for (var j = 0; j < this.treemap.layout.renderItems.length; j++) {\n                        if ((this.treemap.treeMapLegendModule.legendCollections[index]['levelOrderName'] === this.treemap.layout.renderItems[j]['levelOrderName'] ||\n                            this.treemap.layout.renderItems[j]['levelOrderName'].indexOf(this.treemap.treeMapLegendModule.legendCollections[index]['levelOrderName']) > -1) &&\n                            ((!this.treemap.legendSettings.removeDuplicateLegend && treemap.palette && treemap.palette.length > 0 &&\n                                !this.treemap.layout.renderItems[j].parent.isDrilled) ?\n                                index === j : true)) {\n                            itemIndex = j;\n                            groupIndex = this.treemap.layout.renderItems[j]['groupIndex'];\n                            var nodeEle = document.getElementById(this.treemap.element.id + '_Level_Index_' + groupIndex + '_Item_Index_' + itemIndex + '_RectPath');\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.pushCollection)(this.legendSelectionCollection, index, j, targetEle_1, nodeEle, this.treemap.layout.renderItems, collection);\n                            this.treemap.selectionId = nodeEle.id;\n                            length_4 = this.legendSelectionCollection.length;\n                            this.legendSelectionCollection[length_4 - 1]['ShapeCollection'] = { Elements: [] };\n                            var legendItem = void 0;\n                            if (targetEle_1.id.indexOf('Text') > -1) {\n                                legendItem = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle_1.id.replace('_Text', ''))\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + index);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle_1, selection.fill, selection.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendItem, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                                this.legendSelectId = legendItem.id;\n                                this.shapeElement = legendItem;\n                            }\n                            else {\n                                legendItem = this.treemap.legendSettings.mode === 'Interactive' ? document.getElementById(targetEle_1.id + '_Text')\n                                    : document.getElementById(this.treemap.element.id + '_Legend_Text_Index_' + index);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(legendItem, selection.fill, selection.opacity, null, null);\n                                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(targetEle_1, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                                this.legendSelectId = targetId;\n                                this.shapeElement = targetEle_1;\n                            }\n                            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(nodeEle, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                            treemap.levelSelection.push(nodeEle.id);\n                            if (treemap.legendId.indexOf(legendItem.id) === -1) {\n                                treemap.legendId.push(legendItem.id);\n                            }\n                            if (treemap.legendId.indexOf(targetEle_1.id) === -1) {\n                                treemap.legendId.push(targetEle_1.id);\n                            }\n                            length_4 = this.legendSelectionCollection.length;\n                            this.legendSelectionCollection[length_4 - 1]['ShapeCollection']['Elements'].push(nodeEle);\n                        }\n                    }\n                }\n            }\n            else {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendSelectionCollection, this.treemap);\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.shapeSelectionCollection, this.treemap);\n                this.legendSelectionCollection = [];\n                if (highlightModule) {\n                    highlightModule.shapeTarget = 'highlight';\n                }\n                this.legendSelect = true;\n                this.legendSelectId = '';\n                this.treemap.legendId = [];\n                this.treemap.levelSelection = [];\n                this.shapeElement = null;\n                this.shapeSelectId = '';\n                if (this.legendSelect || this.shapeSelect) {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', treemap);\n                    this.treemap.selectionId = '';\n                }\n            }\n        }\n        else if (isDrillItem) {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeLegend)(this.legendSelectionCollection, this.treemap);\n            this.legendSelectionCollection = [];\n            this.legendSelect = true;\n            this.legendSelectId = '';\n            this.treemap.legendId = [];\n            this.treemap.levelSelection = [];\n            this.treemap.selectionId = '';\n            this.shapeElement = null;\n        }\n    };\n    /**\n     * @param {string} levelOrder - Specifies the level order of treemap item\n     * @param {boolean} enable - Specifies the boolean value\n     * @returns {void}\n     * @private\n     */\n    TreeMapSelection.prototype.selectTreemapItem = function (levelOrder, enable) {\n        if (enable) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var item = void 0;\n            for (var s = 0; s < this.treemap.layout.renderItems.length; s++) {\n                if (levelOrder === this.treemap.layout.renderItems[s]['levelOrderName']) {\n                    item = this.treemap.layout.renderItems[s];\n                    break;\n                }\n            }\n            var selection = this.treemap.selectionSettings;\n            var selectionElements = [];\n            var element = void 0;\n            var index = void 0;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var items = [];\n            this.treemap.levelSelection = [];\n            var layoutID = this.treemap.element.id + '_TreeMap_' + this.treemap.layoutType + '_Layout';\n            var treeMapElement = document.getElementById(layoutID);\n            var orders = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.findHightLightItems)(item, [], selection.mode, this.treemap);\n            for (var i = 0; i < treeMapElement.childElementCount; i++) {\n                element = treeMapElement.childNodes[i];\n                item = this.treemap.layout.renderItems[parseFloat(element.id.split('_Item_Index_')[1])];\n                if (orders.indexOf(item['levelOrderName']) > -1) {\n                    selectionElements.push(element);\n                    this.treemap.levelSelection.push(element.id);\n                    items.push(item);\n                }\n            }\n            if (this.treemap.legendSettings.visible) {\n                for (var m = 0; m < items.length; m++) {\n                    this.shapeSelect = false;\n                    var length_5 = this.treemap.treeMapLegendModule.legendCollections.length;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var collection = this.treemap.treeMapLegendModule.legendCollections;\n                    this.shapeElement = undefined;\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeShape)(this.shapeSelectionCollection);\n                    index = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.getLegendIndex)(length_5, items[m], this.treemap);\n                    this.shapeElement = this.treemap.legendSettings.mode === 'Default' ? document.getElementById(this.treemap.element.id + '_Legend_Shape_Index_' + index) : document.getElementById(this.treemap.element.id + '_Legend_Index_' + index);\n                    if (this.shapeElement !== null) {\n                        this.shapeSelectId = this.shapeElement.getAttribute('id');\n                        this.treemap.legendId.push(this.shapeSelectId);\n                        this.shapeSelectionCollection.push({\n                            legendEle: this.shapeElement, oldFill: collection[index]['legendFill'],\n                            oldOpacity: collection[index]['opacity'], oldBorderColor: collection[index]['borderColor'],\n                            oldBorderWidth: collection[index]['borderWidth']\n                        });\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.setColor)(this.shapeElement, selection.fill, selection.opacity, selection.border.color, selection.border.width.toString());\n                    }\n                }\n            }\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', this.treemap);\n            var selectionElement = document.getElementById(this.treemap.levelSelection[0]);\n            this.treemap.selectionId = selectionElement.childNodes[0]['id'];\n            var highLightElements = document.getElementsByClassName('treeMapHighLight');\n            for (var k = 0; k < selectionElements.length; k++) {\n                element = selectionElements[k];\n                if (highLightElements.length > 0) {\n                    for (var j = 0; j < highLightElements.length; j++) {\n                        if (highLightElements[j].id === element.id) {\n                            highLightElements[j].classList.remove('treeMapHighLight');\n                        }\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.applyOptions)(element.childNodes[0], { border: selection.border, fill: selection.fill, opacity: selection.opacity });\n                        element.classList.add('treeMapSelection');\n                    }\n                }\n                else {\n                    selection.fill = selection.fill === 'null' ?\n                        this.treemap.layout.renderItems[parseInt(element.id.split('Item_Index_')[1], 10)]['options']['fill']\n                        : selection.fill;\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.applyOptions)(element.childNodes[0], { border: selection.border, fill: selection.fill, opacity: selection.opacity });\n                    element.classList.add('treeMapSelection');\n                }\n            }\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeShape)(this.shapeSelectionCollection);\n            this.shapeElement = undefined;\n            this.treemap.levelSelection = [];\n            this.shapeSelect = true;\n            this.shapeSelectId = '';\n            this.treemap.legendId = [];\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_2__.removeClassNames)(document.getElementsByClassName('treeMapSelection'), 'treeMapSelection', this.treemap);\n            this.treemap.selectionId = '';\n        }\n    };\n    /**\n     * To bind events for selection\n     *\n     * @returns {void}\n     */\n    TreeMapSelection.prototype.addEventListener = function () {\n        if (this.treemap.isDestroyed) {\n            return;\n        }\n        this.treemap.on(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDown, this);\n    };\n    /**\n     * To unbind events for selection\n     *\n     * @returns {void}\n     */\n    TreeMapSelection.prototype.removeEventListener = function () {\n        if (this.treemap.isDestroyed) {\n            return;\n        }\n        this.treemap.off(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDown);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    TreeMapSelection.prototype.getModuleName = function () {\n        return 'treeMapSelection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    TreeMapSelection.prototype.destroy = function () {\n        this.shapeElement = null;\n        this.shapeSelectionCollection = [];\n        this.legendSelectionCollection = [];\n        this.removeEventListener();\n        this.treemap = null;\n    };\n    return TreeMapSelection;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-treemap/src/treemap/user-interaction/highlight-selection.js?");

/***/ })

}]);