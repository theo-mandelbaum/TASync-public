"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-drawings_src_drawing_rendering_i"],{

/***/ "./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CanvasRenderer: () => (/* reexport safe */ _canvas_renderer__WEBPACK_IMPORTED_MODULE_0__.CanvasRenderer),\n/* harmony export */   DrawingRenderer: () => (/* reexport safe */ _renderer__WEBPACK_IMPORTED_MODULE_1__.DrawingRenderer),\n/* harmony export */   SvgRenderer: () => (/* reexport safe */ _svg_renderer__WEBPACK_IMPORTED_MODULE_2__.SvgRenderer),\n/* harmony export */   createSvg: () => (/* reexport safe */ _svg_renderer__WEBPACK_IMPORTED_MODULE_2__.createSvg),\n/* harmony export */   createSvgElement: () => (/* reexport safe */ _svg_renderer__WEBPACK_IMPORTED_MODULE_2__.createSvgElement),\n/* harmony export */   getParentSvg: () => (/* reexport safe */ _svg_renderer__WEBPACK_IMPORTED_MODULE_2__.getParentSvg),\n/* harmony export */   refreshDiagramElements: () => (/* reexport safe */ _canvas_renderer__WEBPACK_IMPORTED_MODULE_0__.refreshDiagramElements),\n/* harmony export */   setAttributeSvg: () => (/* reexport safe */ _svg_renderer__WEBPACK_IMPORTED_MODULE_2__.setAttributeSvg)\n/* harmony export */ });\n/* harmony import */ var _canvas_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas-renderer */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/canvas-renderer.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.js\");\n/* harmony import */ var _svg_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svg-renderer */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/svg-renderer.js\");\n\n\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/index.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DrawingRenderer: () => (/* binding */ DrawingRenderer)\n/* harmony export */ });\n/* harmony import */ var _core_elements_path_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/elements/path-element */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/path-element.js\");\n/* harmony import */ var _core_elements_text_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/elements/text-element */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/text-element.js\");\n/* harmony import */ var _core_containers_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/containers/container */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/core/containers/container.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utility/base-util */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/utility/base-util.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utility/dom-util */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/utility/dom-util.js\");\n/* harmony import */ var _canvas_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./canvas-renderer */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/canvas-renderer.js\");\n/* harmony import */ var _core_elements_image_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/elements/image-element */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/image-element.js\");\n\n\n\n\n\n\n\n/**\n * Renderer module is used to render basic diagram elements\n */\n/** @private */\nvar DrawingRenderer = /** @class */ (function () {\n    function DrawingRenderer(name, isSvgMode) {\n        /**   @private  */\n        this.renderer = null;\n        // private svgRenderer: SvgRenderer;\n        /** @private */\n        this.isSvgMode = true;\n        this.diagramId = name;\n        this.element = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_4__.getDiagramElement)(this.diagramId);\n        this.isSvgMode = isSvgMode;\n        this.renderer = new _canvas_renderer__WEBPACK_IMPORTED_MODULE_5__.CanvasRenderer();\n        //  this.svgRenderer = new SvgRenderer();\n    }\n    // /** @private */\n    // public setLayers(): void {\n    //     this.adornerSvgLayer = this.element.getElementsByClassName('e-adorner-layer')[0] as SVGSVGElement;\n    // }\n    /**   @private  */\n    DrawingRenderer.prototype.renderElement = function (element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue, annotationCallback, annotationType) {\n        var isElement = true;\n        if (element instanceof _core_containers_container__WEBPACK_IMPORTED_MODULE_2__.Container) {\n            isElement = false;\n            this.renderContainer(element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue, annotationCallback, annotationType);\n        }\n        else if (element instanceof _core_elements_image_element__WEBPACK_IMPORTED_MODULE_6__.ImageElement) {\n            this.renderImageElement(element, canvas, transform, parentSvg, fromPalette, annotationCallback, annotationType);\n        }\n        else if (element instanceof _core_elements_path_element__WEBPACK_IMPORTED_MODULE_0__.PathElement) {\n            this.renderPathElement(element, canvas, transform, parentSvg, fromPalette);\n        }\n        else if (element instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_1__.TextElement) {\n            this.renderTextElement(element, canvas, transform, parentSvg, fromPalette);\n        }\n        else {\n            this.renderRect(element, canvas, transform, parentSvg);\n        }\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderImageElement = function (element, canvas, transform, parentSvg, fromPalette, annotationCallback, annotationType) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = 0;\n        this.renderer.drawRectangle(canvas, options);\n        // let sx: number; let sy: number;\n        var imageWidth;\n        var imageHeight;\n        var sourceWidth;\n        var sourceHeight;\n        if (element.stretch === 'Stretch') {\n            imageWidth = element.actualSize.width;\n            imageHeight = element.actualSize.height;\n        }\n        else {\n            var contentWidth = element.contentSize.width;\n            var contentHeight = element.contentSize.height;\n            var widthRatio = options.width / contentWidth;\n            var heightRatio = options.height / contentHeight;\n            var ratio = void 0;\n            switch (element.stretch) {\n                case 'Meet':\n                    ratio = Math.min(widthRatio, heightRatio);\n                    imageWidth = contentWidth * ratio;\n                    imageHeight = contentHeight * ratio;\n                    options.x += Math.abs(options.width - imageWidth) / 2;\n                    options.y += Math.abs(options.height - imageHeight) / 2;\n                    break;\n                case 'Slice':\n                    widthRatio = options.width / contentWidth;\n                    heightRatio = options.height / contentHeight;\n                    ratio = Math.max(widthRatio, heightRatio);\n                    imageWidth = contentWidth * ratio;\n                    imageHeight = contentHeight * ratio;\n                    sourceWidth = options.width / imageWidth * contentWidth;\n                    sourceHeight = options.height / imageHeight * contentHeight;\n                    break;\n                case 'None':\n                    imageWidth = contentWidth;\n                    imageHeight = contentHeight;\n                    break;\n            }\n        }\n        options.width = imageWidth;\n        options.height = imageHeight;\n        //Commented for code coverage\n        //(options as ImageAttributes).sourceX = sx;\n        //(options as ImageAttrib                                                                           utes).sourceY = sy;\n        options.sourceWidth = sourceWidth;\n        options.sourceHeight = sourceHeight;\n        options.source = element.source;\n        options.alignment = element.imageAlign;\n        options.scale = element.imageScale;\n        options.printID = element.printID;\n        this.renderer.drawImage(canvas, options, parentSvg, fromPalette, annotationCallback, annotationType);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderPathElement = function (element, canvas, transform, parentSvg, fromPalette) {\n        var options = this.getBaseAttributes(element, transform);\n        options.data = element.absolutePath;\n        options.data = element.absolutePath;\n        var ariaLabel = element.id;\n        if (!this.isSvgMode) {\n            options.x = options.x;\n            options.y = options.y;\n        }\n        this.renderer.drawPath(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderTextElement = function (element, canvas, transform, parentSvg, fromPalette) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = 0;\n        options.whiteSpace = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_3__.whiteSpaceToString)(element.style.whiteSpace, element.style.textWrapping);\n        options.content = element.content;\n        options.breakWord = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_3__.wordBreakToString)(element.style.textWrapping);\n        options.textAlign = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_3__.textAlignToString)(element.style.textAlign);\n        options.color = element.style.color;\n        options.italic = element.style.italic;\n        options.bold = element.style.bold;\n        options.fontSize = element.style.fontSize;\n        options.fontFamily = element.style.fontFamily;\n        options.textOverflow = element.style.textOverflow;\n        options.textDecoration = element.style.textDecoration;\n        options.doWrap = element.doWrap;\n        options.wrapBounds = element.wrapBounds;\n        options.childNodes = element.childNodes;\n        options.dashArray = '';\n        options.strokeWidth = 0;\n        options.fill = element.style.fill;\n        var ariaLabel = element.content ? element.content : element.id;\n        this.renderer.drawRectangle(canvas, options);\n        this.renderer.drawText(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderContainer = function (group, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue, annotationCallback, annotationType) {\n        transform = { tx: 0, ty: 0, scale: 1 };\n        var svgParent = { svg: parentSvg, g: canvas };\n        if (this.diagramId) {\n            parentSvg = parentSvg;\n        }\n        this.renderRect(group, canvas, transform, parentSvg);\n        if (group.hasChildren()) {\n            var parentG = void 0;\n            var svgParent_1;\n            for (var _i = 0, _a = group.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.renderElement(child, parentG || canvas, htmlLayer, transform, parentSvg, true, fromPalette, indexValue, annotationCallback, annotationType);\n            }\n        }\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderRect = function (element, canvas, transform, parentSvg) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = element.cornerRadius || 0;\n        var ariaLabel = element.id;\n        this.renderer.drawRectangle(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.getBaseAttributes = function (element, transform) {\n        var options = {\n            width: element.actualSize.width, height: element.actualSize.height,\n            x: element.offsetX - element.actualSize.width * element.pivot.x + 0.5,\n            y: element.offsetY - element.actualSize.height * element.pivot.y + 0.5,\n            fill: element.style.fill, stroke: element.style.strokeColor, angle: element.rotateAngle + element.parentTransform,\n            pivotX: element.pivot.x, pivotY: element.pivot.y, strokeWidth: element.style.strokeWidth,\n            dashArray: element.style.strokeDashArray || '', opacity: element.style.opacity,\n            visible: element.visible, id: element.id, gradient: element.style.gradient,\n        };\n        if (transform) {\n            options.x += transform.tx;\n            options.y += transform.ty;\n        }\n        return options;\n    };\n    return DrawingRenderer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/svg-renderer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/svg-renderer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SvgRenderer: () => (/* binding */ SvgRenderer),\n/* harmony export */   createSvg: () => (/* binding */ createSvg),\n/* harmony export */   createSvgElement: () => (/* binding */ createSvgElement),\n/* harmony export */   getParentSvg: () => (/* binding */ getParentSvg),\n/* harmony export */   setAttributeSvg: () => (/* binding */ setAttributeSvg)\n/* harmony export */ });\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../primitives/size */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/size.js\");\n/* harmony import */ var _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../rendering/canvas-renderer */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/canvas-renderer.js\");\n/* harmony import */ var _utility_path_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utility/path-util */ \"./node_modules/@syncfusion/ej2-drawings/src/drawing/utility/path-util.js\");\n\n\n\n/**\n * SVG Renderer\n */\n/** @private */\nvar SvgRenderer = /** @class */ (function () {\n    function SvgRenderer() {\n    }\n    /**   @private  */\n    SvgRenderer.prototype.parseDashArray = function (dashArray) {\n        var dashes = [];\n        return dashes;\n    };\n    /**   @private  */\n    SvgRenderer.prototype.drawRectangle = function (svg, options, diagramId, onlyRect, isSelector, parentSvg, ariaLabel) {\n        var id;\n        if (options.id === svg.id) {\n            id = options.id + '_container';\n        }\n        else {\n            id = options.id;\n        }\n        var rect;\n        if (!rect || isSelector) {\n            rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            svg.appendChild(rect);\n        }\n        var attr = {\n            'id': id, 'x': options.x.toString(), 'y': options.y.toString(), 'width': options.width.toString(),\n            'height': options.height.toString(), 'visibility': options.visible ? 'visible' : 'hidden',\n            'transform': 'rotate(' + options.angle + ','\n                + (options.x + options.width * options.pivotX) + ',' + (options.y + options.height * options.pivotY) + ')',\n            'rx': options.cornerRadius || 0, 'ry': options.cornerRadius || 0, 'opacity': options.opacity,\n            'aria-label': ariaLabel ? ariaLabel : ''\n        };\n        if (options.class) {\n            attr['class'] = options.class;\n        }\n        var poiterEvents = 'pointer-events';\n        if (!ariaLabel) {\n            // eslint-disable-next-line\n            attr[poiterEvents] = 'none';\n        }\n        setAttributeSvg(rect, attr);\n        this.setSvgStyle(rect, options, diagramId);\n    };\n    /**   @private  */\n    SvgRenderer.prototype.updateSelectionRegion = function (gElement, options) {\n        var rect;\n        rect = gElement.parentNode.getElementById(options.id);\n        var attr;\n        attr = {\n            'id': options.id, 'x': options.x.toString(), 'y': options.y.toString(), 'width': options.width.toString(),\n            'height': options.height.toString(), 'transform': 'rotate(' + options.angle + ','\n                + (options.x + options.width * options.pivotX) + ',' + (options.y + options.height * options.pivotY) + ')',\n            class: 'e-diagram-selected-region'\n        };\n        if (!rect) {\n            rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            gElement.appendChild(rect);\n        }\n        this.setSvgStyle(rect, options);\n        setAttributeSvg(rect, attr);\n    };\n    /**   @private  */\n    SvgRenderer.prototype.createGElement = function (elementType, attribute) {\n        var gElement = createSvgElement(elementType, attribute);\n        return gElement;\n    };\n    /** @private */\n    SvgRenderer.prototype.drawCircle = function (gElement, options, enableSelector, ariaLabel) {\n        var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        this.setSvgStyle(circle, options);\n        var classval = options.class || '';\n        if (!enableSelector) {\n            classval += ' e-disabled';\n        }\n        var attr = {\n            'id': options.id,\n            'cx': options.centerX,\n            'cy': options.centerY,\n            'r': options.radius,\n            'visibility': options.visible ? 'visible' : 'hidden',\n            'class': classval,\n            'aria-label': ariaLabel ? ariaLabel['aria-label'] : ''\n        };\n        var pointerEvents = 'pointer-events';\n        if (attr['aria-label'] === '') {\n            // eslint-disable-next-line\n            attr[pointerEvents] = 'none';\n        }\n        circle.style.display = options.visible ? 'block' : 'none';\n        setAttributeSvg(circle, attr);\n        gElement.appendChild(circle);\n    };\n    /**   @private  */\n    SvgRenderer.prototype.setSvgStyle = function (svg, style, diagramId) {\n        if (style.canApplyStyle || style.canApplyStyle === undefined) {\n            if (style.fill === 'none') {\n                style.fill = 'transparent';\n            }\n            if (style.stroke === 'none') {\n                style.stroke = 'transparent';\n            }\n            var dashArray = [];\n            var fill = void 0;\n            if (style.dashArray !== undefined) {\n                var canvasRenderer = new _rendering_canvas_renderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer();\n                dashArray = canvasRenderer.parseDashArray(style.dashArray);\n            }\n            fill = style.fill;\n            if (style.stroke) {\n                svg.setAttribute('stroke', style.stroke);\n            }\n            if (style.strokeWidth !== undefined && style.strokeWidth !== null) {\n                svg.setAttribute('stroke-width', style.strokeWidth.toString());\n            }\n            if (dashArray) {\n                svg.setAttribute('stroke-dasharray', dashArray.toString());\n            }\n            if (fill) {\n                svg.setAttribute('fill', fill);\n            }\n        }\n    };\n    //end region\n    // text utility\n    /**   @private  */\n    SvgRenderer.prototype.svgLabelAlign = function (text, wrapBound, childNodes) {\n        var bounds = new _primitives_size__WEBPACK_IMPORTED_MODULE_0__.Size(wrapBound.width, childNodes.length * (text.fontSize * 1.2));\n        var pos = { x: 0, y: 0 };\n        var x = 0;\n        var y = 1.2;\n        var offsetX = text.width * 0.5;\n        var offsety = text.height * 0.5;\n        var pointX = offsetX;\n        var pointY = offsety;\n        if (text.textAlign === 'left') {\n            pointX = 0;\n        }\n        else if (text.textAlign === 'center') {\n            if (wrapBound.width > text.width && (text.textOverflow === 'Ellipsis' || text.textOverflow === 'Clip')) {\n                pointX = 0;\n            }\n            else {\n                pointX = text.width * 0.5;\n            }\n        }\n        else if (text.textAlign === 'right') {\n            pointX = (text.width * 1);\n        }\n        pos.x = x + pointX + (wrapBound ? wrapBound.x : 0);\n        pos.y = y + pointY - bounds.height / 2;\n        return pos;\n    };\n    /** @private */\n    SvgRenderer.prototype.drawLine = function (gElement, options) {\n        var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        this.setSvgStyle(line, options);\n        var pivotX = options.x + options.width * options.pivotX;\n        var pivotY = options.y + options.height * options.pivotY;\n        var kk = '';\n        var attr = {\n            'id': options.id,\n            'x1': options.startPoint.x + options.x,\n            'y1': options.startPoint.y + options.y,\n            'x2': options.endPoint.x + options.x,\n            'y2': options.endPoint.y + options.y,\n            'stroke': options.stroke,\n            'stroke-width': options.strokeWidth.toString(), 'opacity': options.opacity.toString(),\n            'transform': 'rotate(' + options.angle + ' ' + pivotX + ' ' + pivotY + ')',\n            'visibility': options.visible ? 'visible' : 'hidden',\n        };\n        if (options.class) {\n            attr['class'] = options.class;\n        }\n        setAttributeSvg(line, attr);\n        gElement.appendChild(line);\n    };\n    /**   @private  */\n    SvgRenderer.prototype.drawPath = function (svg, options, diagramId, isSelector, parentSvg, ariaLabel) {\n        var id;\n        var x = Math.floor((Math.random() * 10) + 1);\n        id = svg.id + '_shape' + x.toString();\n        var collection = [];\n        collection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_2__.processPathData)(options.data);\n        collection = (0,_utility_path_util__WEBPACK_IMPORTED_MODULE_2__.pathSegmentCollection)(collection);\n        var shadowElement;\n        if (parentSvg) {\n            shadowElement = parentSvg.getElementById(options.id + '_groupElement_shadow');\n            if (shadowElement) {\n                shadowElement.parentNode.removeChild(shadowElement);\n            }\n        }\n        var path;\n        if (parentSvg) {\n            path = parentSvg.getElementById(options.id);\n        }\n        if (!path || isSelector) {\n            path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            svg.appendChild(path);\n        }\n        this.renderPath(path, options, collection);\n        var attr = {\n            'id': options.id, 'transform': 'rotate(' + options.angle + ',' + (options.x + options.width * options.pivotX) + ','\n                + (options.y + options.height * options.pivotY) + ')' + 'translate(' + (options.x) + ',' + (options.y) + ')',\n            'visibility': options.visible ? 'visible' : 'hidden', 'opacity': options.opacity,\n            'aria-label': ariaLabel ? ariaLabel : ''\n        };\n        if (options.class) {\n            attr['class'] = options.class;\n        }\n        setAttributeSvg(path, attr);\n        this.setSvgStyle(path, options, diagramId);\n    };\n    /**   @private  */\n    SvgRenderer.prototype.renderPath = function (svg, options, collection) {\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        var x;\n        var y;\n        var length;\n        var i;\n        var segments = collection;\n        var d = '';\n        for (x = 0, y = 0, i = 0, length = segments.length; i < length; ++i) {\n            var obj = segments[parseInt(i.toString(), 10)];\n            var segment = obj;\n            var char = segment.command;\n            if ('x1' in segment) {\n                x1 = segment.x1;\n            }\n            if ('x2' in segment) {\n                x2 = segment.x2;\n            }\n            if ('y1' in segment) {\n                y1 = segment.y1;\n            }\n            if ('y2' in segment) {\n                y2 = segment.y2;\n            }\n            if ('x' in segment) {\n                x = segment.x;\n            }\n            if ('y' in segment) {\n                y = segment.y;\n            }\n            switch (char) {\n                case 'M':\n                    d = d + 'M' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'L':\n                    d = d + 'L' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'C':\n                    d = d + 'C' + x1.toString() + ',' + y1.toString() + ',' + x2.toString() + ',' + y2.toString() + ',';\n                    d += x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'Q':\n                    d = d + 'Q' + x1.toString() + ',' + y1.toString() + ',' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'A':\n                    d = d + 'A' + segment.r1.toString() + ',' + segment.r2.toString() + ',' + segment.angle.toString() + ',';\n                    d += segment.largeArc.toString() + ',' + segment.sweep + ',' + x.toString() + ',' + y.toString() + ' ';\n                    break;\n                case 'Z':\n                case 'z':\n                    d = d + 'Z' + ' ';\n                    break;\n            }\n        }\n        svg.setAttribute('d', d);\n    };\n    return SvgRenderer;\n}());\n\n/** @private */\nfunction setAttributeSvg(svg, attributes) {\n    var keys = Object.keys(attributes);\n    for (var i = 0; i < keys.length; i++) {\n        if (keys[parseInt(i.toString(), 10)] === 'style') {\n            svg.style.cssText = attributes[keys[parseInt(i.toString(), 10)]];\n        }\n        else {\n            svg.setAttribute(keys[parseInt(i.toString(), 10)], attributes[keys[parseInt(i.toString(), 10)]]);\n        }\n    }\n}\n/** @private */\nfunction createSvgElement(elementType, attribute) {\n    var element = document.createElementNS('http://www.w3.org/2000/svg', elementType);\n    setAttributeSvg(element, attribute);\n    return element;\n}\n/** @private */\nfunction createSvg(id, width, height) {\n    var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    setAttributeSvg(svgObj, { 'id': id, 'width': width, 'height': height });\n    return svgObj;\n}\nfunction getParentSvg(element, targetElement, canvas) {\n    if (element && element.id) {\n        if (targetElement && targetElement === 'selector') {\n            return this.pdfViewer.adornerSvgLayer;\n        }\n    }\n    return canvas;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/svg-renderer.js?");

/***/ })

}]);