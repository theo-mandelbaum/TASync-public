"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_annotation_shape-annotation_js-82f-8b74da47"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/shape-annotation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/shape-annotation.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShapeAnnotation: () => (/* binding */ ShapeAnnotation)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\n\n/**\n * @hidden\n */\nvar ShapeAnnotation = /** @class */ (function () {\n    function ShapeAnnotation(pdfviewer, pdfViewerBase) {\n        /**\n         * @private\n         */\n        this.shapeCount = 0;\n        /**\n         * @private\n         */\n        this.isAddAnnotationProgramatically = false;\n        this.pdfViewer = pdfviewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @param {any} shapeAnnotations - It describes about the shape annotations\n     * @param {number} pageNumber - It describes about the page number\n     * @param {boolean} isImportAcion - It describes about the whether the import action is true or not\n     * @param {boolean} isAnnotOrderAction - It describes about the whether the annotation order action is true or not\n     * @private\n     * @returns {void}\n     */\n    ShapeAnnotation.prototype.renderShapeAnnotations = function (shapeAnnotations, pageNumber, isImportAcion, isAnnotOrderAction) {\n        if (shapeAnnotations) {\n            if (shapeAnnotations.length >= 1) {\n                var shapeAnnots = this.pdfViewer.annotation.getStoredAnnotations(pageNumber, shapeAnnotations, '_annotations_shape');\n                if (!shapeAnnots || isAnnotOrderAction || isImportAcion) {\n                    for (var i = 0; i < shapeAnnotations.length; i++) {\n                        var annotation = shapeAnnotations[parseInt(i.toString(), 10)];\n                        annotation.annotationAddMode = this.pdfViewer.annotationModule.findAnnotationMode(annotation, pageNumber, annotation.AnnotType);\n                        var annotationObject = null;\n                        this.shapeCount = this.shapeCount + 1;\n                        var isAnnotationRotated = void 0;\n                        if (annotation.ShapeAnnotationType) {\n                            if (isImportAcion) {\n                                if (this.pdfViewerBase.isJsonImported) {\n                                    annotation.Bounds = this.pdfViewerBase.\n                                        importJsonForRotatedDocuments(annotation.Rotate, pageNumber, annotation.Bounds, annotation.AnnotationRotation);\n                                    isAnnotationRotated = this.pdfViewerBase.isPageRotated;\n                                }\n                            }\n                            var vertexPoints = null;\n                            if (annotation.VertexPoints) {\n                                vertexPoints = [];\n                                if (isImportAcion && this.pdfViewerBase.isJsonImported) {\n                                    vertexPoints =\n                                        this.pdfViewerBase.calculateVertexPoints(annotation.Rotate, pageNumber, annotation.VertexPoints, annotation.AnnotationRotation);\n                                }\n                                else {\n                                    for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                                        var x = annotation.VertexPoints[parseInt(j.toString(), 10)].X ?\n                                            annotation.VertexPoints[parseInt(j.toString(), 10)].X :\n                                            annotation.VertexPoints[parseInt(j.toString(), 10)].x;\n                                        var y = annotation.VertexPoints[parseInt(j.toString(), 10)].Y ?\n                                            annotation.VertexPoints[parseInt(j.toString(), 10)].Y :\n                                            annotation.VertexPoints[parseInt(j.toString(), 10)].y;\n                                        var point = { x: x, y: y };\n                                        vertexPoints.push(point);\n                                    }\n                                }\n                            }\n                            if (annotation.Bounds && annotation.EnableShapeLabel === true) {\n                                annotation.LabelBounds = this.pdfViewer.annotationModule.inputElementModule.\n                                    calculateLabelBoundsFromLoadedDocument(annotation.Bounds);\n                                annotation.LabelBorderColor = annotation.LabelBorderColor ? annotation.LabelBorderColor :\n                                    annotation.StrokeColor;\n                                annotation.FontColor = annotation.FontColor ? annotation.FontColor : annotation.StrokeColor;\n                                annotation.LabelFillColor = annotation.LabelFillColor ? annotation.LabelFillColor : annotation.FillColor;\n                                annotation.FontSize = annotation.FontSize ? annotation.FontSize : 16;\n                                annotation.LabelSettings = annotation.LabelSettings ? annotation.LabelSettings :\n                                    this.pdfViewer.shapeLabelSettings;\n                            }\n                            var annotationSelectorSettings = typeof (annotation.AnnotationSelectorSettings) === 'string' ? JSON.parse(annotation.AnnotationSelectorSettings) : annotation.AnnotationSelectorSettings;\n                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(annotationSelectorSettings)) {\n                                this.pdfViewerBase.annotationSelectorSettingLoad(annotation);\n                            }\n                            else {\n                                annotation.AnnotationSelectorSettings = annotationSelectorSettings;\n                            }\n                            annotation.AnnotationSettings = annotation.AnnotationSettings ?\n                                annotation.AnnotationSettings : this.pdfViewer.annotationModule.updateAnnotationSettings(annotation);\n                            if (annotation.IsLocked) {\n                                annotation.AnnotationSettings.isLock = annotation.IsLocked;\n                            }\n                            annotation.allowedInteractions = annotation.AllowedInteractions ? annotation.AllowedInteractions :\n                                this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n                            var left = annotation.Bounds.X ? annotation.Bounds.X : annotation.Bounds.x;\n                            var top_1 = annotation.Bounds.Y ? annotation.Bounds.Y : annotation.Bounds.y;\n                            var width = annotation.Bounds.Width ? annotation.Bounds.Width : annotation.Bounds.width;\n                            var height = annotation.Bounds.Height ? annotation.Bounds.Height : annotation.Bounds.height;\n                            annotationObject = {\n                                id: 'shape' + this.shapeCount, shapeAnnotationType: annotation.ShapeAnnotationType, author: annotation.Author, allowedInteractions: annotation.allowedInteractions, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject, pageNumber: pageNumber,\n                                note: annotation.Note, strokeColor: annotation.StrokeColor, fillColor: annotation.FillColor,\n                                opacity: annotation.Opacity, thickness: annotation.Thickness, rectangleDifference: annotation.RectangleDifference, borderStyle: annotation.BorderStyle, borderDashArray: annotation.BorderDashArray, rotateAngle: annotation.RotateAngle, isCloudShape: annotation.IsCloudShape,\n                                cloudIntensity: annotation.CloudIntensity, vertexPoints: vertexPoints, lineHeadStart: annotation.LineHeadStart, lineHeadEnd: annotation.LineHeadEnd, isLocked: annotation.IsLocked,\n                                comments: this.pdfViewer.annotationModule.getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n                                review: { state: annotation.State, stateModel: annotation.StateModel,\n                                    modifiedDate: annotation.ModifiedDate, author: annotation.Author },\n                                annotName: annotation.AnnotName, bounds: { left: left, top: top_1, width: width,\n                                    height: height, right: annotation.Bounds.Right, bottom: annotation.Bounds.Bottom },\n                                labelContent: annotation.LabelContent, enableShapeLabel: annotation.EnableShapeLabel,\n                                labelFillColor: annotation.LabelFillColor, fontColor: annotation.FontColor,\n                                labelBorderColor: annotation.LabelBorderColor, fontSize: annotation.FontSize,\n                                labelBounds: annotation.LabelBounds, annotationSelectorSettings: this.getSettings(annotation),\n                                labelSettings: annotation.LabelSettings, annotationSettings: annotation.AnnotationSettings,\n                                customData: this.pdfViewer.annotation.getCustomData(annotation), isPrint: annotation.IsPrint,\n                                isCommentLock: annotation.IsCommentLock, isAnnotationRotated: isAnnotationRotated\n                            };\n                            var vPoints = annotationObject.vertexPoints;\n                            if (vertexPoints == null) {\n                                vPoints = [];\n                            }\n                            annotation.AnnotationSelectorSettings = annotation.AnnotationSelectorSettings ? typeof (annotation.AnnotationSelectorSettings) === 'string' ? JSON.parse(annotation.AnnotationSelectorSettings) : annotation.AnnotationSelectorSettings : this.pdfViewer.annotationSelectorSettings;\n                            var annot = {\n                                id: 'shape' + this.shapeCount, shapeAnnotationType: this.getShapeType(annotationObject), author: annotationObject.author, allowedInteractions: annotationObject.allowedInteractions, modifiedDate: annotationObject.modifiedDate, annotName: annotationObject.annotName,\n                                subject: annotationObject.subject, notes: annotationObject.note, fillColor: annotationObject.fillColor,\n                                strokeColor: annotationObject.strokeColor, opacity: annotationObject.opacity,\n                                thickness: annotationObject.thickness, borderStyle: annotationObject.borderStyle, borderDashArray: annotationObject.borderDashArray ? annotationObject.borderDashArray.toString() : '0', rotateAngle: parseFloat(annotationObject.rotateAngle.split('Angle')[1]), comments: annotationObject.comments, review: annotationObject.review, isCloudShape: annotationObject.isCloudShape, cloudIntensity: annotationObject.cloudIntensity, taregetDecoraterShapes: this.pdfViewer.annotation.getArrowType(annotationObject.lineHeadEnd),\n                                sourceDecoraterShapes: this.pdfViewer.annotation.getArrowType(annotationObject.lineHeadStart),\n                                vertexPoints: vPoints, bounds: { x: annotationObject.bounds.left, y: annotationObject.bounds.top,\n                                    width: annotationObject.bounds.width, height: annotationObject.bounds.height },\n                                pageIndex: annotationObject.pageNumber,\n                                labelContent: annotation.LabelContent, enableShapeLabel: annotation.EnableShapeLabel,\n                                labelFillColor: annotation.LabelFillColor,\n                                fontColor: annotation.FontColor, labelBorderColor: annotation.LabelBorderColor,\n                                fontSize: annotation.FontSize,\n                                labelBounds: annotation.LabelBounds, annotationSelectorSettings: annotation.AnnotationSelectorSettings,\n                                annotationSettings: annotationObject.annotationSettings, annotationAddMode: annotation.annotationAddMode,\n                                isPrint: annotation.IsPrint, isCommentLock: annotationObject.isCommentLock,\n                                customData: annotationObject.customData\n                            };\n                            var addedAnnot = this.pdfViewer.add(annot);\n                            this.pdfViewer.annotationModule.storeAnnotations(pageNumber, annotationObject, '_annotations_shape');\n                            if (this.isAddAnnotationProgramatically) {\n                                var settings = {\n                                    opacity: annot.opacity, strokeColor: annot.strokeColor, thickness: annot.thickness,\n                                    modifiedDate: annot.modifiedDate,\n                                    width: annot.bounds.width, height: annot.bounds.height\n                                };\n                                this.pdfViewer.fireAnnotationAdd(annot.pageIndex, annot.annotName, annotation.ShapeAnnotationType, annot.bounds, settings);\n                            }\n                        }\n                    }\n                }\n            }\n            else if (shapeAnnotations.shapeAnnotationType) {\n                var annotationObject = this.createAnnotationObject(shapeAnnotations);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(shapeAnnotations.formFieldAnnotationType) && shapeAnnotations.formFieldAnnotationType !== '') {\n                    this.pdfViewer.annotationModule.isFormFieldShape = true;\n                }\n                else {\n                    this.pdfViewer.annotationModule.isFormFieldShape = false;\n                }\n                this.pdfViewer.annotationModule.storeAnnotations(pageNumber, annotationObject, '_annotations_shape');\n                if (shapeAnnotations) {\n                    shapeAnnotations.customData = annotationObject.customData;\n                }\n                this.pdfViewer.annotationModule.triggerAnnotationAdd(shapeAnnotations);\n            }\n        }\n    };\n    /**\n     * @param {any} annotation - It describes about the annotation\n     * @private\n     * @returns {any} - any\n     */\n    ShapeAnnotation.prototype.getSettings = function (annotation) {\n        var selector = this.pdfViewer.annotationSelectorSettings;\n        if (annotation.AnnotationSelectorSettings) {\n            selector = typeof (annotation.AnnotationSelectorSettings) === 'string' ? JSON.parse(annotation.AnnotationSelectorSettings) : annotation.AnnotationSelectorSettings;\n        }\n        else {\n            selector = this.getSelector(annotation.ShapeAnnotationType, annotation.Subject);\n        }\n        return selector;\n    };\n    /**\n     * @param {AnnotType} type - It describes about the annotation type\n     * @private\n     * @returns {void}\n     */\n    ShapeAnnotation.prototype.setAnnotationType = function (type) {\n        this.updateShapeProperties();\n        this.pdfViewerBase.disableTextSelectionMode();\n        var author = 'Guest';\n        var subject = '';\n        var customData;\n        switch (type) {\n            case 'Line': {\n                this.currentAnnotationMode = 'Line';\n                var modifiedDateLine = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                author = (this.pdfViewer.annotationSettings.author !== 'Guest') ? this.pdfViewer.annotationSettings.author : this.pdfViewer.lineSettings.author ? this.pdfViewer.lineSettings.author : 'Guest';\n                subject = (this.pdfViewer.annotationSettings.subject !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.subject)) ? this.pdfViewer.annotationSettings.subject : this.pdfViewer.lineSettings.subject ? this.pdfViewer.lineSettings.subject : 'Line';\n                customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.customData) ?\n                    this.pdfViewer.annotationSettings.customData : this.pdfViewer.lineSettings.customData ?\n                    this.pdfViewer.lineSettings.customData : null;\n                this.pdfViewer.drawingObject = {\n                    shapeAnnotationType: this.setShapeType('Line'), fillColor: this.lineFillColor, notes: '', strokeColor: this.lineStrokeColor, opacity: this.lineOpacity,\n                    thickness: this.lineThickness, modifiedDate: modifiedDateLine, borderDashArray: this.lineDashArray.toString(),\n                    sourceDecoraterShapes: this.pdfViewer.annotation.getArrowType(this.lineStartHead.toString()),\n                    taregetDecoraterShapes: this.pdfViewer.annotation.getArrowType(this.lineEndHead.toString()),\n                    author: author, subject: subject, lineHeadStart: this.lineStartHead, lineHeadEnd: this.lineEndHead,\n                    isCommentLock: false, customData: customData\n                };\n                this.pdfViewer.tool = 'Line';\n                break;\n            }\n            case 'Arrow': {\n                this.currentAnnotationMode = 'Arrow';\n                var modifiedDateArrow = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                author = (this.pdfViewer.annotationSettings.author !== 'Guest') ? this.pdfViewer.annotationSettings.author : this.pdfViewer.arrowSettings.author ? this.pdfViewer.arrowSettings.author : 'Guest';\n                subject = (this.pdfViewer.annotationSettings.subject !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.subject)) ? this.pdfViewer.annotationSettings.subject : this.pdfViewer.arrowSettings.subject ? this.pdfViewer.arrowSettings.subject : 'Arrow';\n                customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.customData) ?\n                    this.pdfViewer.annotationSettings.customData : this.pdfViewer.arrowSettings.customData ?\n                    this.pdfViewer.arrowSettings.customData : null;\n                this.pdfViewer.drawingObject = {\n                    shapeAnnotationType: this.setShapeType('Arrow'), opacity: this.arrowOpacity,\n                    sourceDecoraterShapes: this.pdfViewer.annotation.getArrowType(this.arrowStartHead.toString()),\n                    taregetDecoraterShapes: this.pdfViewer.annotation.getArrowType(this.arrowEndHead.toString()),\n                    fillColor: this.arrowFillColor, strokeColor: this.arrowStrokeColor, notes: '', thickness: this.arrowThickness,\n                    borderDashArray: this.arrowDashArray.toString(), author: author, subject: subject,\n                    modifiedDate: modifiedDateArrow, lineHeadStart: this.arrowStartHead, lineHeadEnd: this.arrowEndHead,\n                    isCommentLock: false, customData: customData\n                };\n                this.pdfViewer.tool = 'Line';\n                break;\n            }\n            case 'Rectangle': {\n                this.currentAnnotationMode = 'Rectangle';\n                var modifiedDateRect = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                author = (this.pdfViewer.annotationSettings.author !== 'Guest') ? this.pdfViewer.annotationSettings.author : this.pdfViewer.rectangleSettings.author ? this.pdfViewer.rectangleSettings.author : 'Guest';\n                subject = (this.pdfViewer.annotationSettings.subject !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.subject)) ? this.pdfViewer.annotationSettings.subject : this.pdfViewer.rectangleSettings.subject ? this.pdfViewer.rectangleSettings.subject : 'Rectangle';\n                customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.customData) ?\n                    this.pdfViewer.annotationSettings.customData : this.pdfViewer.rectangleSettings.customData ?\n                    this.pdfViewer.rectangleSettings.customData : null;\n                this.pdfViewer.drawingObject = {\n                    shapeAnnotationType: this.setShapeType('Rectangle'), strokeColor: this.rectangleStrokeColor,\n                    fillColor: this.rectangleFillColor, opacity: this.rectangleOpacity, notes: '',\n                    thickness: this.rectangleThickness, borderDashArray: '0', modifiedDate: modifiedDateRect,\n                    author: author, subject: subject, isCommentLock: false, customData: customData\n                };\n                this.pdfViewer.tool = 'DrawTool';\n                break;\n            }\n            case 'Circle': {\n                this.currentAnnotationMode = 'Circle';\n                var modifiedDateCir = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                author = (this.pdfViewer.annotationSettings.author !== 'Guest') ? this.pdfViewer.annotationSettings.author : this.pdfViewer.circleSettings.author ? this.pdfViewer.circleSettings.author : 'Guest';\n                subject = (this.pdfViewer.annotationSettings.subject !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.subject)) ? this.pdfViewer.annotationSettings.subject : this.pdfViewer.circleSettings.subject ? this.pdfViewer.circleSettings.subject : 'Circle';\n                customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.customData) ?\n                    this.pdfViewer.annotationSettings.customData : this.pdfViewer.circleSettings.customData ?\n                    this.pdfViewer.circleSettings.customData : null;\n                this.pdfViewer.drawingObject = {\n                    shapeAnnotationType: this.setShapeType('Circle'), strokeColor: this.circleStrokeColor,\n                    fillColor: this.circleFillColor, opacity: this.circleOpacity, notes: '',\n                    thickness: this.circleThickness, borderDashArray: '0', modifiedDate: modifiedDateCir,\n                    author: author, subject: subject, isCommentLock: false, customData: customData\n                };\n                this.pdfViewer.tool = 'DrawTool';\n                break;\n            }\n            case 'Polygon': {\n                this.currentAnnotationMode = 'Polygon';\n                var modifiedDatePolygon = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                author = (this.pdfViewer.annotationSettings.author !== 'Guest') ? this.pdfViewer.annotationSettings.author : this.pdfViewer.polygonSettings.author ? this.pdfViewer.polygonSettings.author : 'Guest';\n                subject = (this.pdfViewer.annotationSettings.subject !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.subject)) ? this.pdfViewer.annotationSettings.subject : this.pdfViewer.polygonSettings.subject ? this.pdfViewer.polygonSettings.subject : 'Polygon';\n                customData = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.annotationSettings.customData) ?\n                    this.pdfViewer.annotationSettings.customData : this.pdfViewer.polygonSettings.customData ?\n                    this.pdfViewer.polygonSettings.customData : null;\n                this.pdfViewer.drawingObject = {\n                    strokeColor: this.polygonStrokeColor, fillColor: this.polygonFillColor,\n                    opacity: this.polygonOpacity, thickness: this.polygonThickness, borderDashArray: '0',\n                    notes: '', author: author, subject: subject,\n                    modifiedDate: modifiedDatePolygon, borderStyle: '', isCommentLock: false, customData: customData\n                };\n                this.pdfViewer.tool = 'Polygon';\n                break;\n            }\n        }\n    };\n    ShapeAnnotation.prototype.updateShapeProperties = function () {\n        this.lineFillColor = this.pdfViewer.lineSettings.fillColor ? this.pdfViewer.lineSettings.fillColor : '#ffffff00';\n        this.lineStrokeColor = this.pdfViewer.lineSettings.strokeColor ? this.pdfViewer.lineSettings.strokeColor : '#ff0000';\n        this.lineThickness = this.pdfViewer.lineSettings.thickness ? this.pdfViewer.lineSettings.thickness : 1;\n        this.lineOpacity = this.pdfViewer.lineSettings.opacity ? this.pdfViewer.lineSettings.opacity : 1;\n        this.lineDashArray = this.pdfViewer.lineSettings.borderDashArray ? this.pdfViewer.lineSettings.borderDashArray : 0;\n        this.lineStartHead = this.pdfViewer.lineSettings.lineHeadStartStyle ? this.pdfViewer.lineSettings.lineHeadStartStyle : 'None';\n        this.lineEndHead = this.pdfViewer.lineSettings.lineHeadEndStyle ? this.pdfViewer.lineSettings.lineHeadEndStyle : 'None';\n        this.arrowFillColor = this.pdfViewer.arrowSettings.fillColor ? this.pdfViewer.arrowSettings.fillColor : '#ffffff00';\n        this.arrowStrokeColor = this.pdfViewer.arrowSettings.strokeColor ? this.pdfViewer.arrowSettings.strokeColor : '#ff0000';\n        this.arrowThickness = this.pdfViewer.arrowSettings.thickness ? this.pdfViewer.arrowSettings.thickness : 1;\n        this.arrowOpacity = this.pdfViewer.arrowSettings.opacity ? this.pdfViewer.arrowSettings.opacity : 1;\n        this.arrowDashArray = this.pdfViewer.arrowSettings.borderDashArray ? this.pdfViewer.arrowSettings.borderDashArray : 0;\n        this.arrowStartHead = this.pdfViewer.arrowSettings.lineHeadStartStyle ? this.pdfViewer.arrowSettings.lineHeadStartStyle : 'Closed';\n        this.arrowEndHead = this.pdfViewer.arrowSettings.lineHeadEndStyle ? this.pdfViewer.arrowSettings.lineHeadEndStyle : 'Closed';\n        this.rectangleFillColor = this.pdfViewer.rectangleSettings.fillColor ? this.pdfViewer.rectangleSettings.fillColor : '#ffffff00';\n        this.rectangleStrokeColor = this.pdfViewer.rectangleSettings.strokeColor ? this.pdfViewer.rectangleSettings.strokeColor : '#ff0000';\n        this.rectangleThickness = this.pdfViewer.rectangleSettings.thickness ? this.pdfViewer.rectangleSettings.thickness : 1;\n        this.rectangleOpacity = this.pdfViewer.rectangleSettings.opacity ? this.pdfViewer.rectangleSettings.opacity : 1;\n        this.circleFillColor = this.pdfViewer.circleSettings.fillColor ? this.pdfViewer.circleSettings.fillColor : '#ffffff00';\n        this.circleStrokeColor = this.pdfViewer.circleSettings.strokeColor ? this.pdfViewer.circleSettings.strokeColor : '#ff0000';\n        this.circleThickness = this.pdfViewer.circleSettings.thickness ? this.pdfViewer.circleSettings.thickness : 1;\n        this.circleOpacity = this.pdfViewer.circleSettings.opacity ? this.pdfViewer.circleSettings.opacity : 1;\n        this.polygonFillColor = this.pdfViewer.polygonSettings.fillColor ? this.pdfViewer.polygonSettings.fillColor : '#ffffff00';\n        this.polygonStrokeColor = this.pdfViewer.polygonSettings.strokeColor ? this.pdfViewer.polygonSettings.strokeColor : '#ff0000';\n        this.polygonThickness = this.pdfViewer.polygonSettings.thickness ? this.pdfViewer.polygonSettings.thickness : 1;\n        this.polygonOpacity = this.pdfViewer.polygonSettings.opacity ? this.pdfViewer.polygonSettings.opacity : 1;\n    };\n    ShapeAnnotation.prototype.setShapeType = function (shape) {\n        var shapeType;\n        switch (shape) {\n            case 'Line':\n                shapeType = 'Line';\n                break;\n            case 'Circle':\n                shapeType = 'Ellipse';\n                break;\n            case 'Square':\n                shapeType = 'Rectangle';\n                break;\n            case 'Polyline':\n                shapeType = 'Line';\n                break;\n            case 'Arrow':\n                shapeType = 'LineWidthArrowHead';\n                break;\n        }\n        return shapeType;\n    };\n    ShapeAnnotation.prototype.getShapeType = function (shape) {\n        var shapeType;\n        switch (shape.shapeAnnotationType) {\n            case 'Line':\n                shapeType = 'Line';\n                break;\n            case 'Circle':\n                shapeType = 'Ellipse';\n                break;\n            case 'Square':\n                shapeType = 'Rectangle';\n                break;\n            case 'Polyline':\n                shapeType = 'Line';\n                break;\n            case 'Polygon':\n                shapeType = 'Polygon';\n                break;\n        }\n        if ((shape.shapeAnnotationType === 'Line' || shape.shapeAnnotationType === 'Polyline') && (shape.lineHeadStart !== 'None' || shape.lineHeadEnd !== 'None')) {\n            shapeType = 'LineWidthArrowHead';\n        }\n        return shapeType;\n    };\n    ShapeAnnotation.prototype.getShapeAnnotType = function (shape) {\n        var shapeType;\n        switch (shape) {\n            case 'Line':\n            case 'LineWidthArrowHead':\n                shapeType = 'Line';\n                break;\n            case 'Rectangle':\n                shapeType = 'Square';\n                break;\n            case 'Ellipse':\n                shapeType = 'Circle';\n                break;\n            case 'Polygon':\n                shapeType = 'Polygon';\n                break;\n        }\n        return shapeType;\n    };\n    /**\n     * @param {string} property - It describes about the property\n     * @param {number} pageNumber - It describes about the page number\n     * @param {any} annotationBase - It describes about the annotation base\n     * @param {any} toolMoved - It describes about the tool moved\n     * @private\n     * @returns {IShapeAnnotation} - Ishapeannotation\n     */\n    ShapeAnnotation.prototype.modifyInCollection = function (property, pageNumber, annotationBase, toolMoved) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(annotationBase.formFieldAnnotationType) && annotationBase.formFieldAnnotationType !== '') {\n            this.pdfViewer.annotationModule.isFormFieldShape = true;\n        }\n        else {\n            this.pdfViewer.annotationModule.isFormFieldShape = false;\n        }\n        if (toolMoved) {\n            this.pdfViewerBase.updateDocumentEditedProperty(true);\n        }\n        var currentAnnotObject = null;\n        if (annotationBase) {\n            if (property === 'bounds') {\n                this.pdfViewer.annotationModule.stickyNotesAnnotationModule.updateAnnotationModifiedDate(annotationBase, true);\n            }\n        }\n        var pageAnnotations = this.getAnnotations(pageNumber, null);\n        if (pageAnnotations != null && annotationBase) {\n            for (var i = 0; i < pageAnnotations.length; i++) {\n                if (annotationBase.id === pageAnnotations[parseInt(i.toString(), 10)].id) {\n                    if (property === 'bounds') {\n                        this.pdfViewerBase.isBounds =\n                            this.pdfViewerBase.boundsCalculation(pageAnnotations[parseInt(i.toString(), 10)].bounds, annotationBase.wrapper.bounds);\n                        if (this.pdfViewerBase.isBounds) {\n                            if (pageAnnotations[parseInt(i.toString(), 10)].shapeAnnotationType === 'Line') {\n                                pageAnnotations[parseInt(i.toString(), 10)].vertexPoints = annotationBase.vertexPoints;\n                                pageAnnotations[parseInt(i.toString(), 10)].bounds =\n                                    {\n                                        left: annotationBase.bounds.x, top: annotationBase.bounds.y, width: annotationBase.bounds.width,\n                                        height: annotationBase.bounds.height, right: annotationBase.bounds.right,\n                                        bottom: annotationBase.bounds.bottom\n                                    };\n                            }\n                            else if (pageAnnotations[parseInt(i.toString(), 10)].shapeAnnotationType === 'Polygon') {\n                                pageAnnotations[parseInt(i.toString(), 10)].vertexPoints = annotationBase.vertexPoints;\n                                pageAnnotations[parseInt(i.toString(), 10)].bounds = {\n                                    left: annotationBase.bounds.x,\n                                    top: annotationBase.bounds.y, width: annotationBase.bounds.width,\n                                    height: annotationBase.bounds.height, right: annotationBase.bounds.right,\n                                    bottom: annotationBase.bounds.bottom\n                                };\n                            }\n                            else {\n                                pageAnnotations[parseInt(i.toString(), 10)].bounds = {\n                                    left: annotationBase.bounds.x,\n                                    top: annotationBase.bounds.y, width: annotationBase.bounds.width,\n                                    height: annotationBase.bounds.height, right: annotationBase.bounds.right,\n                                    bottom: annotationBase.bounds.bottom\n                                };\n                            }\n                        }\n                        if (pageAnnotations[parseInt(i.toString(), 10)].enableShapeLabel === true && annotationBase.wrapper) {\n                            var labelTop = 0;\n                            var labelLeft = 0;\n                            var labelWidth = 0;\n                            var labelHeight = 24.6;\n                            var labelMaxWidth = 151;\n                            if (annotationBase.wrapper.bounds.width) {\n                                labelWidth = (annotationBase.wrapper.bounds.width / 2);\n                                labelWidth = (labelWidth > 0 && labelWidth < labelMaxWidth) ? labelWidth : labelMaxWidth;\n                            }\n                            if (annotationBase.wrapper.bounds.left) {\n                                labelLeft = (annotationBase.wrapper.bounds.left + (annotationBase.wrapper.bounds.width / 2)\n                                    - (labelWidth / 2));\n                            }\n                            if (annotationBase.wrapper.bounds.top) {\n                                labelTop = (annotationBase.wrapper.bounds.top + (annotationBase.wrapper.bounds.height / 2) - 12.3);\n                            }\n                            pageAnnotations[parseInt(i.toString(), 10)].labelBounds =\n                                { left: labelLeft, top: labelTop, width: labelWidth, height: labelHeight, right: 0, bottom: 0 };\n                        }\n                    }\n                    else if (property === 'fill') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fillColor = annotationBase.wrapper.children[0].style.fill;\n                    }\n                    else if (property === 'stroke') {\n                        pageAnnotations[parseInt(i.toString(), 10)].strokeColor = annotationBase.wrapper.children[0].style.strokeColor;\n                    }\n                    else if (property === 'opacity') {\n                        pageAnnotations[parseInt(i.toString(), 10)].opacity = annotationBase.wrapper.children[0].style.opacity;\n                    }\n                    else if (property === 'thickness') {\n                        pageAnnotations[parseInt(i.toString(), 10)].thickness = annotationBase.wrapper.children[0].style.strokeWidth;\n                    }\n                    else if (property === 'dashArray') {\n                        pageAnnotations[parseInt(i.toString(), 10)].borderDashArray =\n                            annotationBase.wrapper.children[0].style.strokeDashArray;\n                        pageAnnotations[parseInt(i.toString(), 10)].borderStyle = annotationBase.borderStyle;\n                    }\n                    else if (property === 'startArrow') {\n                        pageAnnotations[parseInt(i.toString(), 10)].lineHeadStart =\n                            this.pdfViewer.annotation.getArrowTypeForCollection(annotationBase.sourceDecoraterShapes);\n                    }\n                    else if (property === 'endArrow') {\n                        pageAnnotations[parseInt(i.toString(), 10)].lineHeadEnd =\n                            this.pdfViewer.annotation.getArrowTypeForCollection(annotationBase.taregetDecoraterShapes);\n                    }\n                    else if (property === 'notes') {\n                        pageAnnotations[parseInt(i.toString(), 10)].note = annotationBase.notes;\n                    }\n                    else if (property === 'delete') {\n                        currentAnnotObject = pageAnnotations.splice(i, 1)[0];\n                        break;\n                    }\n                    else if (property === 'labelContent') {\n                        pageAnnotations[parseInt(i.toString(), 10)].note = annotationBase.labelContent;\n                        pageAnnotations[parseInt(i.toString(), 10)].labelContent = annotationBase.labelContent;\n                        break;\n                    }\n                    else if (property === 'fontColor') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fontColor = annotationBase.fontColor;\n                    }\n                    else if (property === 'fontSize') {\n                        pageAnnotations[parseInt(i.toString(), 10)].fontSize = annotationBase.fontSize;\n                    }\n                    if (this.pdfViewerBase.isBounds) {\n                        pageAnnotations[parseInt(i.toString(), 10)].modifiedDate =\n                            this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n                    }\n                    this.pdfViewer.annotationModule.storeAnnotationCollections(pageAnnotations[parseInt(i.toString(), 10)], pageNumber);\n                }\n            }\n            this.manageAnnotations(pageAnnotations, pageNumber);\n        }\n        return currentAnnotObject;\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @param {IShapeAnnotation} annotationBase - It describes about the annotation base\n     * @private\n     * @returns {void}\n     */\n    ShapeAnnotation.prototype.addInCollection = function (pageNumber, annotationBase) {\n        var pageAnnotations = this.getAnnotations(pageNumber, null);\n        if (pageAnnotations) {\n            pageAnnotations.push(annotationBase);\n        }\n        this.manageAnnotations(pageAnnotations, pageNumber);\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    ShapeAnnotation.prototype.saveShapeAnnotations = function () {\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_shape');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_shape'];\n        }\n        var annotations = [];\n        for (var j = 0; j < this.pdfViewerBase.pageCount; j++) {\n            annotations[parseInt(j.toString(), 10)] = [];\n        }\n        if (storeObject && !this.pdfViewer.annotationSettings.skipDownload) {\n            var annotationCollection = JSON.parse(storeObject);\n            for (var i = 0; i < annotationCollection.length; i++) {\n                var newArray = [];\n                var pageAnnotationObject = annotationCollection[parseInt(i.toString(), 10)];\n                if (pageAnnotationObject) {\n                    for (var z = 0; pageAnnotationObject.annotations.length > z; z++) {\n                        if (!this.pdfViewerBase.checkFormFieldCollection(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].id)) {\n                            this.pdfViewer.annotationModule.updateModifiedDate(pageAnnotationObject.annotations[parseInt(z.toString(), 10)]);\n                            if (this.pdfViewerBase.isJsonExported) {\n                                if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].isAnnotationRotated) {\n                                    pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds =\n                                        this.pdfViewer.annotation.getBounds(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds, pageAnnotationObject.pageIndex);\n                                    pageAnnotationObject.annotations[parseInt(z.toString(), 10)].vertexPoints =\n                                        this.pdfViewer.annotation.getVertexPoints(pageAnnotationObject.\n                                            annotations[parseInt(z.toString(), 10)].vertexPoints, pageAnnotationObject.pageIndex);\n                                }\n                                else {\n                                    var pageDetails = this.pdfViewerBase.pageSize[pageAnnotationObject.pageIndex];\n                                    if (pageDetails) {\n                                        pageAnnotationObject.annotations[parseInt(z.toString(), 10)].annotationRotation =\n                                            pageDetails.rotation;\n                                    }\n                                }\n                            }\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds =\n                                JSON.stringify(this.pdfViewer.annotation.getBounds(pageAnnotationObject.\n                                    annotations[parseInt(z.toString(), 10)].bounds, pageAnnotationObject.pageIndex));\n                            var strokeColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor;\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].strokeColor =\n                                JSON.stringify(this.getRgbCode(strokeColorString));\n                            var fillColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fillColor;\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(fillColorString)) {\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fillColor =\n                                    JSON.stringify(this.getRgbCode(fillColorString));\n                            }\n                            else {\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fillColor = 'transparent';\n                            }\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)].vertexPoints =\n                                JSON.stringify(this.pdfViewer.annotation.getVertexPoints(pageAnnotationObject.\n                                    annotations[parseInt(z.toString(), 10)].vertexPoints, pageAnnotationObject.pageIndex));\n                            if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference !== null) {\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference =\n                                    JSON.stringify(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].rectangleDifference);\n                            }\n                            if (pageAnnotationObject.annotations[parseInt(z.toString(), 10)].enableShapeLabel === true) {\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelBounds =\n                                    JSON.stringify(this.pdfViewer.annotationModule.inputElementModule.\n                                        calculateLabelBounds(JSON.parse(pageAnnotationObject.annotations[parseInt(z.toString(), 10)].bounds)));\n                                var labelFillColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelFillColor;\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelFillColor =\n                                    JSON.stringify(this.getRgbCode(labelFillColorString));\n                                var labelBorderColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelBorderColor;\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelBorderColor =\n                                    JSON.stringify(this.getRgbCode(labelBorderColorString));\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelSettings.fillColor = labelFillColorString;\n                                var fontColorString = pageAnnotationObject.annotations[parseInt(z.toString(), 10)].labelSettings.fontColor;\n                                pageAnnotationObject.annotations[parseInt(z.toString(), 10)].fontColor =\n                                    JSON.stringify(this.getRgbCode(fontColorString));\n                            }\n                        }\n                        else {\n                            pageAnnotationObject.annotations[parseInt(z.toString(), 10)] = '';\n                        }\n                    }\n                    pageAnnotationObject.annotations = pageAnnotationObject.annotations.filter(function (item) { return item; });\n                    newArray = pageAnnotationObject.annotations;\n                }\n                annotations[pageAnnotationObject.pageIndex] = newArray;\n            }\n        }\n        return JSON.stringify(annotations);\n    };\n    ShapeAnnotation.prototype.manageAnnotations = function (pageAnnotations, pageNumber) {\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_shape');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_shape'];\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            if (!this.pdfViewerBase.isStorageExceed) {\n                _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.removeItem(this.pdfViewerBase.documentId + '_annotations_shape');\n            }\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageNumber);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                annotObject[parseInt(index.toString(), 10)].annotations = pageAnnotations;\n            }\n            var annotationStringified = JSON.stringify(annotObject);\n            if (this.pdfViewerBase.isStorageExceed) {\n                this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_shape'] = annotationStringified;\n            }\n            else {\n                _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.setItem(this.pdfViewerBase.documentId + '_annotations_shape', annotationStringified);\n            }\n        }\n    };\n    ShapeAnnotation.prototype.createAnnotationObject = function (annotationModel) {\n        var bound;\n        var labelBound;\n        var annotationName = this.pdfViewer.annotation.createGUID();\n        if (!annotationModel.formFieldAnnotationType) {\n            var commentsDivid = this.pdfViewer.annotation.stickyNotesAnnotationModule.addComments('shape', (annotationModel.pageIndex + 1), annotationModel.shapeAnnotationType);\n            if (commentsDivid) {\n                document.getElementById(commentsDivid).id = annotationName;\n            }\n        }\n        annotationModel.annotName = annotationName;\n        if (annotationModel.wrapper.bounds) {\n            bound = {\n                left: annotationModel.wrapper.bounds.x, top: annotationModel.wrapper.bounds.y,\n                height: annotationModel.wrapper.bounds.height, width: annotationModel.wrapper.bounds.width,\n                right: annotationModel.wrapper.bounds.right, bottom: annotationModel.wrapper.bounds.bottom\n            };\n            labelBound = this.pdfViewer.annotationModule.inputElementModule.calculateLabelBounds(annotationModel.wrapper.bounds);\n        }\n        else {\n            bound = { left: 0, top: 0, height: 0, width: 0, right: 0, bottom: 0 };\n            labelBound = { left: 0, top: 0, height: 0, width: 0, right: 0, bottom: 0 };\n        }\n        if (annotationModel.subject === 'Line' && annotationModel.shapeAnnotationType === 'Polygon') {\n            annotationModel.author = this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', 'Polygon');\n        }\n        else {\n            // eslint-disable-next-line\n            annotationModel.author = annotationModel && annotationModel.author != 'Guest' ? annotationModel.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationModel.subject);\n        }\n        this.pdfViewer.annotation.stickyNotesAnnotationModule.addTextToComments(annotationName, annotationModel.notes);\n        var borderDashArray = parseInt(annotationModel.borderDashArray, 10);\n        borderDashArray = isNaN(borderDashArray) ? 0 : borderDashArray;\n        var annotationSettings = this.pdfViewer.annotationModule.findAnnotationSettings(annotationModel, true);\n        annotationModel.isPrint = annotationSettings.isPrint;\n        var setting = this.pdfViewer.shapeLabelSettings;\n        var labelSettings = { borderColor: annotationModel.strokeColor, fillColor: annotationModel.fillColor,\n            fontColor: annotationModel.fontColor, fontSize: annotationModel.fontSize,\n            labelContent: annotationModel.labelContent, labelHeight: setting.labelHeight,\n            labelWidth: setting.labelMaxWidth, opacity: annotationModel.opacity\n        };\n        return {\n            id: annotationModel.id, shapeAnnotationType: this.getShapeAnnotType(annotationModel.shapeAnnotationType),\n            author: annotationModel.author, allowedInteractions: this.pdfViewer.annotationModule.\n                updateAnnotationAllowedInteractions(annotationModel), subject: annotationModel.subject,\n            note: annotationModel.notes,\n            strokeColor: annotationModel.strokeColor, annotName: annotationName, comments: [], review: { state: '', stateModel: '', modifiedDate: this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime(), author: annotationModel.author },\n            fillColor: annotationModel.fillColor, opacity: annotationModel.opacity,\n            thickness: annotationModel.thickness, pageNumber: annotationModel.pageIndex,\n            borderStyle: annotationModel.borderStyle, borderDashArray: borderDashArray,\n            bounds: bound, modifiedDate: this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime(),\n            rotateAngle: 'RotateAngle' + annotationModel.rotateAngle, isCloudShape: annotationModel.isCloudShape, cloudIntensity: annotationModel.cloudIntensity,\n            vertexPoints: annotationModel.vertexPoints, lineHeadStart: this.pdfViewer.annotation.getArrowTypeForCollection(annotationModel.sourceDecoraterShapes),\n            lineHeadEnd: this.pdfViewer.annotation.getArrowTypeForCollection(annotationModel.taregetDecoraterShapes),\n            rectangleDifference: [], isLocked: annotationSettings.isLock,\n            labelContent: annotationModel.labelContent, enableShapeLabel: annotationModel.enableShapeLabel,\n            labelFillColor: annotationModel.labelFillColor,\n            fontColor: annotationModel.fontColor, labelBorderColor: annotationModel.labelBorderColor, fontSize: annotationModel.fontSize,\n            labelBounds: labelBound, annotationSelectorSettings: this.getSelector(annotationModel.shapeAnnotationType, annotationModel.subject), labelSettings: labelSettings,\n            annotationSettings: annotationSettings,\n            customData: this.pdfViewer.annotation.getShapeData(annotationModel.shapeAnnotationType, annotationModel.subject),\n            isPrint: annotationModel.isPrint, isCommentLock: annotationModel.isCommentLock, isAnnotationRotated: false\n        };\n    };\n    ShapeAnnotation.prototype.getSelector = function (type, subject) {\n        var selector = this.pdfViewer.annotationSelectorSettings;\n        if (type === 'Line' && subject !== 'Arrow' && this.pdfViewer.lineSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.lineSettings.annotationSelectorSettings;\n        }\n        else if ((type === 'LineWidthArrowHead' || subject === 'Arrow') && this.pdfViewer.lineSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.arrowSettings.annotationSelectorSettings;\n        }\n        else if ((type === 'Rectangle' || type === 'Square') && this.pdfViewer.rectangleSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.rectangleSettings.annotationSelectorSettings;\n        }\n        else if ((type === 'Ellipse' || type === 'Circle') && this.pdfViewer.circleSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.circleSettings.annotationSelectorSettings;\n        }\n        else if (type === 'Polygon' && this.pdfViewer.polygonSettings.annotationSelectorSettings) {\n            selector = this.pdfViewer.polygonSettings.annotationSelectorSettings;\n        }\n        return selector;\n    };\n    ShapeAnnotation.prototype.getAnnotations = function (pageIndex, shapeAnnotations) {\n        var annotationCollection;\n        var storeObject = _index__WEBPACK_IMPORTED_MODULE_0__.PdfViewerBase.sessionStorageManager.getItem(this.pdfViewerBase.documentId + '_annotations_shape');\n        if (this.pdfViewerBase.isStorageExceed) {\n            storeObject = this.pdfViewerBase.annotationStorage[this.pdfViewerBase.documentId + '_annotations_shape'];\n        }\n        if (storeObject) {\n            var annotObject = JSON.parse(storeObject);\n            var index = this.pdfViewer.annotationModule.getPageCollection(annotObject, pageIndex);\n            if (index != null && annotObject[parseInt(index.toString(), 10)]) {\n                annotationCollection = annotObject[parseInt(index.toString(), 10)].annotations;\n            }\n            else {\n                annotationCollection = shapeAnnotations;\n            }\n        }\n        else {\n            annotationCollection = shapeAnnotations;\n        }\n        return annotationCollection;\n    };\n    ShapeAnnotation.prototype.getRgbCode = function (colorString) {\n        // eslint-disable-next-line\n        if (!colorString.match(/#([a-z0-9]+)/gi) && !colorString.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)) {\n            colorString = this.pdfViewer.annotationModule.nameToHash(colorString);\n        }\n        var stringArray = colorString.split(',');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(stringArray[1])) {\n            colorString = this.pdfViewer.annotationModule.getValue(colorString, 'rgba');\n            stringArray = colorString.split(',');\n        }\n        var r = parseInt(stringArray[0].split('(')[1], 10);\n        var g = parseInt(stringArray[1], 10);\n        var b = parseInt(stringArray[2], 10);\n        var a = parseFloat(stringArray[3]);\n        return { r: r, g: g, b: b, a: a };\n    };\n    /**\n     * @param {any} annotation - It describes about the annotation\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {any} - any\n     */\n    ShapeAnnotation.prototype.saveImportedShapeAnnotations = function (annotation, pageNumber) {\n        var annotationObject = null;\n        var vertexPoints = null;\n        annotation.Author = this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotation.Subject);\n        if (annotation.VertexPoints) {\n            vertexPoints = [];\n            for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                var point = { x: annotation.VertexPoints[parseInt(j.toString(), 10)].X,\n                    y: annotation.VertexPoints[parseInt(j.toString(), 10)].Y };\n                vertexPoints.push(point);\n            }\n        }\n        if (annotation.Bounds && annotation.EnableShapeLabel === true) {\n            annotation.LabelBounds = this.pdfViewer.annotationModule.\n                inputElementModule.calculateLabelBoundsFromLoadedDocument(annotation.Bounds);\n            annotation.LabelBorderColor = annotation.LabelBorderColor ? annotation.LabelBorderColor : annotation.StrokeColor;\n            annotation.FontColor = annotation.FontColor ? annotation.FontColor : annotation.StrokeColor;\n            annotation.LabelFillColor = annotation.LabelFillColor ? annotation.LabelFillColor : annotation.FillColor;\n            annotation.FontSize = annotation.FontSize ? annotation.FontSize : 16;\n            annotation.LabelSettings = annotation.LabelSettings ? annotation.LabelSettings : this.pdfViewer.shapeLabelSettings;\n        }\n        annotation.AnnotationSettings = annotation.AnnotationSettings ?\n            annotation.AnnotationSettings : this.pdfViewer.annotationModule.updateAnnotationSettings(annotation);\n        annotation.allowedInteractions = annotation.AllowedInteractions ?\n            annotation.AllowedInteractions : this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n        annotationObject = {\n            id: 'shape', shapeAnnotationType: annotation.ShapeAnnotationType, author: annotation.Author, allowedInteractions: annotation.allowedInteractions, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject, pageNumber: pageNumber,\n            note: annotation.Note, strokeColor: annotation.StrokeColor, fillColor: annotation.FillColor,\n            opacity: annotation.Opacity, thickness: annotation.Thickness, rectangleDifference: annotation.RectangleDifference,\n            borderStyle: annotation.BorderStyle, borderDashArray: annotation.BorderDashArray,\n            rotateAngle: annotation.RotateAngle, isCloudShape: annotation.IsCloudShape,\n            cloudIntensity: annotation.CloudIntensity, vertexPoints: vertexPoints, lineHeadStart: annotation.LineHeadStart,\n            lineHeadEnd: annotation.LineHeadEnd, isLocked: annotation.IsLocked,\n            comments: this.pdfViewer.annotationModule.getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n            review: { state: annotation.State, stateModel: annotation.StateModel, modifiedDate: annotation.ModifiedDate,\n                author: annotation.Author }, annotName: annotation.AnnotName,\n            bounds: { left: annotation.Bounds.X, top: annotation.Bounds.Y, width: annotation.Bounds.Width,\n                height: annotation.Bounds.Height, right: annotation.Bounds.Right, bottom: annotation.Bounds.Bottom },\n            labelContent: annotation.LabelContent, enableShapeLabel: annotation.EnableShapeLabel, labelFillColor: annotation.LabelFillColor,\n            labelBorderColor: annotation.LabelBorderColor, fontColor: annotation.FontColor, fontSize: annotation.FontSize,\n            labelBounds: annotation.LabelBounds, annotationSelectorSettings: this.getSettings(annotation),\n            labelSettings: annotation.LabelSettings, annotationSettings: annotation.AnnotationSettings,\n            customData: this.pdfViewer.annotation.getCustomData(annotation), isPrint: annotation.IsPrint,\n            isCommentLock: annotation.IsCommentLock, isAnnotationRotated: false\n        };\n        this.pdfViewer.annotationModule.storeAnnotations(pageNumber, annotationObject, '_annotations_shape');\n    };\n    /**\n     * @param {any} annotation - It describes about the annotation\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {any} - any\n     */\n    ShapeAnnotation.prototype.updateShapeAnnotationCollections = function (annotation, pageNumber) {\n        var annotationObject = null;\n        var vertexPoints = null;\n        if (annotation.VertexPoints) {\n            vertexPoints = [];\n            for (var j = 0; j < annotation.VertexPoints.length; j++) {\n                var point = { x: annotation.VertexPoints[parseInt(j.toString(), 10)].X,\n                    y: annotation.VertexPoints[parseInt(j.toString(), 10)].Y };\n                vertexPoints.push(point);\n            }\n        }\n        if (annotation.Bounds && annotation.EnableShapeLabel === true) {\n            annotation.LabelBounds =\n                this.pdfViewer.annotationModule.inputElementModule.calculateLabelBoundsFromLoadedDocument(annotation.Bounds);\n            annotation.LabelBorderColor = annotation.LabelBorderColor ? annotation.LabelBorderColor : annotation.StrokeColor;\n            annotation.FontColor = annotation.FontColor ? annotation.FontColor : annotation.StrokeColor;\n            annotation.LabelFillColor = annotation.LabelFillColor ? annotation.LabelFillColor : annotation.FillColor;\n            annotation.FontSize = annotation.FontSize ? annotation.FontSize : 16;\n            var settings = this.pdfViewer.shapeLabelSettings;\n            var labelSettings = { borderColor: annotation.StrokeColor, fillColor: annotation.FillColor,\n                fontColor: annotation.FontColor, fontSize: annotation.FontSize, labelContent: annotation.LabelContent,\n                labelHeight: settings.labelHeight, labelWidth: settings.labelWidth, opacity: annotation.Opacity\n            };\n            annotation.LabelSettings = annotation.LabelSettings ? annotation.LabelSettings : labelSettings;\n        }\n        annotation.AnnotationSettings = annotation.AnnotationSettings ? annotation.AnnotationSettings :\n            this.pdfViewer.annotationModule.updateAnnotationSettings(annotation);\n        if (annotation.IsLocked) {\n            annotation.AnnotationSettings.isLock = annotation.IsLocked;\n        }\n        annotation.allowedInteractions = annotation.AllowedInteractions ? annotation.AllowedInteractions :\n            this.pdfViewer.annotationModule.updateAnnotationAllowedInteractions(annotation);\n        annotationObject = {\n            id: 'shape', shapeAnnotationType: annotation.ShapeAnnotationType, author: annotation.Author, allowedInteractions: annotation.allowedInteractions, modifiedDate: annotation.ModifiedDate, subject: annotation.Subject,\n            note: annotation.Note, strokeColor: annotation.StrokeColor, fillColor: annotation.FillColor, opacity: annotation.Opacity,\n            thickness: annotation.Thickness, rectangleDifference: annotation.RectangleDifference,\n            borderStyle: annotation.BorderStyle, borderDashArray: annotation.BorderDashArray, rotateAngle: annotation.RotateAngle,\n            isCloudShape: annotation.IsCloudShape, cloudIntensity: annotation.CloudIntensity, vertexPoints: vertexPoints,\n            lineHeadStart: annotation.LineHeadStart, lineHeadEnd: annotation.LineHeadEnd, isLocked: annotation.IsLocked,\n            comments: this.pdfViewer.annotationModule.getAnnotationComments(annotation.Comments, annotation, annotation.Author),\n            review: { state: annotation.State, stateModel: annotation.StateModel, modifiedDate: annotation.ModifiedDate,\n                author: annotation.Author }, annotationId: annotation.AnnotName,\n            bounds: { left: annotation.Bounds.X, top: annotation.Bounds.Y, width: annotation.Bounds.Width,\n                height: annotation.Bounds.Height, right: annotation.Bounds.Right, bottom: annotation.Bounds.Bottom },\n            labelContent: annotation.LabelContent, enableShapeLabel: annotation.EnableShapeLabel, labelFillColor: annotation.LabelFillColor,\n            labelBorderColor: annotation.LabelBorderColor, fontColor: annotation.FontColor, fontSize: annotation.FontSize,\n            labelBounds: annotation.LabelBounds, pageNumber: pageNumber, labelSettings: annotation.LabelSettings,\n            annotationSettings: annotation.AnnotationSettings, customData: this.pdfViewer.annotation.getCustomData(annotation),\n            isPrint: annotation.IsPrint, isCommentLock: annotation.IsCommentLock\n        };\n        return annotationObject;\n    };\n    /**\n     * This method used to add annotations with using program.\n     *\n     * @param {AnnotationType} annotationType - It describes the annotation type\n     * @param {any} annotationObject - It describes type of annotation object\n     * @param {IPoint} offset - It describes about the annotation bounds or location\n     * @returns {object} - object\n     * @private\n     */\n    ShapeAnnotation.prototype.updateAddAnnotationDetails = function (annotationType, annotationObject, offset) {\n        //Creating new object if annotationObject is null\n        if (!annotationObject) {\n            annotationObject = { offset: { x: 10, y: 10 }, pageNumber: 0, width: undefined, height: undefined };\n            offset = annotationObject.offset;\n        }\n        else if (!annotationObject.offset) {\n            offset = { x: 10, y: 10 };\n        }\n        else {\n            offset = annotationObject.offset;\n        }\n        //Initialize the annotation settings\n        var annotationSelectorSettings = null;\n        var allowedInteractions = null;\n        var annotationSettings = null;\n        var shapeAnnotationType = '';\n        var isArrow = false;\n        var vertexPoints = null;\n        //Creating the CurrentDate and Annotation name\n        var currentDateString = this.pdfViewer.annotation.stickyNotesAnnotationModule.getDateAndTime();\n        var annotationName = this.pdfViewer.annotation.createGUID();\n        if (annotationType === 'Line') {\n            //Creating annotation settings\n            annotationSelectorSettings = this.pdfViewer.lineSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n            annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.lineSettings);\n            annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationType);\n            allowedInteractions = this.pdfViewer.lineSettings.allowedInteractions ?\n                this.pdfViewer.lineSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n            shapeAnnotationType = 'Line';\n            if (annotationObject.vertexPoints) {\n                vertexPoints = annotationObject.vertexPoints;\n            }\n            else {\n                vertexPoints = [{ x: offset.x, y: offset.y }, { x: offset.x + 100, y: offset.y }];\n            }\n            annotationObject.width = annotationObject.width ? annotationObject.width : 1;\n            annotationObject.height = annotationObject.height ? annotationObject.height : 1;\n        }\n        else if (annotationType === 'Arrow') {\n            //Creating annotation settings\n            annotationSelectorSettings = this.pdfViewer.arrowSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n            annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.arrowSettings);\n            annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationType);\n            allowedInteractions = this.pdfViewer.arrowSettings.allowedInteractions ?\n                this.pdfViewer.arrowSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n            shapeAnnotationType = 'Line';\n            isArrow = true;\n            if (annotationObject.vertexPoints) {\n                vertexPoints = annotationObject.vertexPoints;\n            }\n            else {\n                vertexPoints = [{ x: offset.x, y: offset.y }, { x: offset.x + 100, y: offset.y }];\n            }\n            annotationObject.width = annotationObject.width ? annotationObject.width : 1;\n            annotationObject.height = annotationObject.height ? annotationObject.height : 1;\n        }\n        else if (annotationType === 'Rectangle') {\n            //Creating annotation settings\n            annotationSelectorSettings = this.pdfViewer.rectangleSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n            annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.rectangleSettings);\n            annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationType);\n            allowedInteractions = this.pdfViewer.rectangleSettings.allowedInteractions ?\n                this.pdfViewer.rectangleSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n            shapeAnnotationType = 'Square';\n            annotationObject.width = annotationObject.width ? annotationObject.width : 150;\n            annotationObject.height = annotationObject.height ? annotationObject.height : 75;\n        }\n        else if (annotationType === 'Circle') {\n            //Creating annotation settings\n            annotationSelectorSettings = this.pdfViewer.circleSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n            annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.circleSettings);\n            annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationType);\n            allowedInteractions = this.pdfViewer.circleSettings.allowedInteractions ?\n                this.pdfViewer.circleSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n            shapeAnnotationType = 'Circle';\n            annotationObject.width = annotationObject.width ? annotationObject.width : 100;\n            annotationObject.height = annotationObject.height ? annotationObject.height : 90;\n        }\n        else if (annotationType === 'Polygon') {\n            //Creating annotation settings\n            annotationSelectorSettings = this.pdfViewer.polygonSettings.annotationSelectorSettings;\n            this.pdfViewerBase.updateSelectorSettings(annotationSelectorSettings);\n            annotationSettings = this.pdfViewer.annotationModule.updateSettings(this.pdfViewer.polygonSettings);\n            annotationObject.author = annotationObject.author ? annotationObject.author : this.pdfViewer.annotationModule.updateAnnotationAuthor('shape', annotationType);\n            allowedInteractions = this.pdfViewer.polygonSettings.allowedInteractions ?\n                this.pdfViewer.polygonSettings.allowedInteractions : this.pdfViewer.annotationSettings.allowedInteractions;\n            shapeAnnotationType = 'Polygon';\n            if (annotationObject.vertexPoints) {\n                vertexPoints = annotationObject.vertexPoints;\n            }\n            else {\n                vertexPoints = [{ x: offset.x, y: offset.y }, { x: offset.x + 42, y: offset.y - 29 },\n                    { x: offset.x + 89, y: offset.y - 1 }, { x: offset.x + 78, y: offset.y + 42 },\n                    { x: offset.x + 11, y: offset.y + 42 }, { x: offset.x, y: offset.y }];\n            }\n            annotationObject.width = annotationObject.width ? annotationObject.width : 1;\n            annotationObject.height = annotationObject.height ? annotationObject.height : 1;\n        }\n        annotationSettings.isLock = annotationObject.isLock ? annotationObject.isLock : annotationSettings.isLock;\n        annotationSettings.minHeight = annotationObject.minHeight ? annotationObject.minHeight : annotationSettings.minHeight;\n        annotationSettings.minWidth = annotationObject.minWidth ? annotationObject.minWidth : annotationSettings.minWidth;\n        annotationSettings.maxWidth = annotationObject.maxWidth ? annotationObject.maxWidth : annotationSettings.maxWidth;\n        annotationSettings.maxHeight = annotationObject.maxHeight ? annotationObject.maxHeight : annotationSettings.maxHeight;\n        //Converting points model into vertex property\n        if (vertexPoints) {\n            vertexPoints = this.pdfViewer.annotation.getVertexPointsXY(vertexPoints);\n        }\n        //Creating Annotation objects with it's proper properties\n        var shapeAnnotation = [];\n        var shape = {\n            AllowedInteractions: annotationObject.allowedInteractions ? annotationObject.allowedInteractions : allowedInteractions,\n            AnnotName: annotationName,\n            AnnotType: 'shape',\n            AnnotationSelectorSettings: annotationObject.annotationSelectorSettings ?\n                annotationObject.annotationSelectorSettings : annotationSelectorSettings,\n            AnnotationSettings: annotationSettings,\n            Author: annotationObject.author ? annotationObject.author : 'Guest',\n            BorderDashArray: annotationObject.borderDashArray ? annotationObject.borderDashArray : 0,\n            BorderStyle: 'Solid',\n            Bounds: { X: offset.x, Y: offset.y, Width: annotationObject.width,\n                Height: annotationObject.height, Left: offset.x, Top: offset.y,\n                Location: { X: offset.x, Y: offset.y }, Size: { Height: annotationObject.height,\n                    IsEmpty: false, Width: annotationObject.width } },\n            CloudIntensity: 0,\n            Comments: null,\n            CustomData: annotationObject.customData ? annotationObject.customData : null,\n            CreatedDate: currentDateString,\n            EnableShapeLabel: false,\n            ExistingCustomData: null,\n            FillColor: annotationObject.fillColor ? annotationObject.fillColor : '#ffffff00',\n            FontColor: null,\n            FontSize: 0,\n            IsCloudShape: false,\n            IsCommentLock: false,\n            IsLocked: annotationObject.isLock ? annotationObject.isLock : false,\n            IsPrint: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(annotationObject.isPrint) ? annotationObject.isPrint : true,\n            LabelBorderColor: null,\n            LabelBounds: { X: 0, Y: 0, Width: 0, Height: 0 },\n            LabelContent: null,\n            LabelFillColor: null,\n            LabelSettings: null,\n            LineHeadStart: annotationObject.lineHeadStartStyle ? annotationObject.lineHeadStartStyle : isArrow ? 'ClosedArrow' : 'None',\n            LineHeadEnd: annotationObject.lineHeadEndStyle ? annotationObject.lineHeadEndStyle : isArrow ? 'ClosedArrow' : 'None',\n            ModifiedDate: '',\n            Note: '',\n            Opacity: annotationObject.opacity ? annotationObject.opacity : 1,\n            RectangleDifference: null,\n            RotateAngle: 'RotateAngle0',\n            ShapeAnnotationType: shapeAnnotationType,\n            State: '',\n            StateModel: '',\n            StrokeColor: annotationObject.strokeColor ? annotationObject.strokeColor : '#ff0000',\n            Subject: annotationObject.subject ? annotationObject.subject : annotationType.toString(),\n            Thickness: annotationObject.thickness ? annotationObject.thickness : 1,\n            VertexPoints: vertexPoints\n        };\n        //Adding the annotation object to an array and return it\n        shapeAnnotation[0] = shape;\n        return { shapeAnnotation: shapeAnnotation };\n    };\n    return ShapeAnnotation;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/annotation/shape-annotation.js?");

/***/ })

}]);