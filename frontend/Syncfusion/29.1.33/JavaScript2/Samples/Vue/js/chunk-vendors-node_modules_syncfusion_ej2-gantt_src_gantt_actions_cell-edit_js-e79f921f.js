"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-gantt_src_gantt_actions_cell-edit_js-e79f921f"],{

/***/ "./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellEdit: () => (/* binding */ CellEdit)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_treegrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-treegrid */ \"./node_modules/@syncfusion/ej2-treegrid/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n\n\n\n/**\n * To handle cell edit action on default columns and custom columns\n */\nvar CellEdit = /** @class */ (function () {\n    function CellEdit(ganttObj) {\n        /**\n         * @private\n         */\n        this.isCellEdit = false;\n        this.isResourceCellEdited = false;\n        this.parent = ganttObj;\n        this.bindTreeGridProperties();\n    }\n    /**\n     * Bind all editing related properties from Gantt to TreeGrid\n     *\n     * @returns {void} .\n     */\n    CellEdit.prototype.bindTreeGridProperties = function () {\n        this.parent.treeGrid.editSettings.allowEditing = this.parent.editSettings.allowEditing;\n        this.parent.treeGrid.editSettings.allowNextRowEdit = this.parent.editSettings.allowNextRowEdit;\n        this.parent.treeGrid.editSettings.mode = 'Cell';\n        this.parent.treeGrid.cellEdit = this.ensureEditCell.bind(this);\n        if (this.parent.editSettings.allowEditing) {\n            _syncfusion_ej2_treegrid__WEBPACK_IMPORTED_MODULE_1__.TreeGrid.Inject(_syncfusion_ej2_treegrid__WEBPACK_IMPORTED_MODULE_1__.Edit);\n        }\n    };\n    /**\n     * Ensure current cell was editable or not\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void | Deferred} .\n     */\n    CellEdit.prototype.ensureEditCell = function (args) {\n        var _this = this;\n        var data = args.rowData;\n        var field = args.columnName;\n        this.editedColumn = this.parent.getColumnByField(field, this.parent.ganttColumns);\n        var taskSettings = this.parent.taskFields;\n        if (this.parent.readOnly) {\n            args.cancel = true;\n            return;\n        }\n        if (this.parent.editSettings.mode === 'Dialog') {\n            args.cancel = true;\n            return;\n        }\n        if (data.hasChildRecords && !this.parent.allowParentDependency && ((field === taskSettings.endDate &&\n            ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[taskSettings.manual]) && data[taskSettings.manual] === false) ||\n                this.parent.taskMode === 'Auto')) || field === taskSettings.duration || field === taskSettings.dependency ||\n            field === taskSettings.progress || field === taskSettings.work || field === taskSettings.type || field === 'taskType')) {\n            if ((field === taskSettings.dependency && !this.parent.allowParentDependency) || field !== taskSettings.dependency) {\n                args.cancel = true;\n            }\n        }\n        else {\n            var callBackPromise_1 = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n            var parentReference_1 = this.parent;\n            this.currentEditedRowData = args.rowData;\n            this.parent.trigger('cellEdit', args, function (arg) {\n                if (arg.columnName === parentReference_1.taskFields.progress && arg.rowData.hasChildRecords) {\n                    arg.cancel = true;\n                }\n                if (data.level === 0 && _this.parent.viewType === 'ResourceView') {\n                    arg.cancel = true;\n                }\n                callBackPromise_1.resolve(arg);\n                if (!arg.cancel) {\n                    if (arg.columnName === _this.parent.taskFields.notes) {\n                        _this.openNotesEditor(arg);\n                    }\n                    else {\n                        _this.isCellEdit = true;\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.parent.toolbarModule)) {\n                            _this.parent.toolbarModule.refreshToolbarItems();\n                        }\n                    }\n                }\n            });\n            return callBackPromise_1;\n        }\n    };\n    /**\n     * To render edit dialog and to focus on notes tab\n     *\n     * @param {CellEditArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.openNotesEditor = function (args) {\n        var taskSettings = this.parent.taskFields;\n        var data = args.rowData;\n        var field = args.columnName;\n        if ((field === taskSettings.notes && !this.parent.showInlineNotes)) {\n            args.cancel = true;\n            var columnTypes = this.parent.editModule.dialogModule.updatedEditFields.map(function (x) { return x.type; });\n            var index = columnTypes.indexOf('Notes');\n            if (index !== -1) {\n                this.parent.editModule.dialogModule.openEditDialog(data.ganttProperties.rowUniqueID);\n                var tabObj = document.getElementById(this.parent.element.id + '_Tab').ej2_instances[0];\n                tabObj.selectedItem = index;\n            }\n        }\n        if (field === taskSettings.notes && this.parent.showInlineNotes === true) {\n            this.isCellEdit = true;\n        }\n    };\n    // private isValueChange(args: Record<string, unknown>, field: string): boolean {\n    //     const data: IGanttData = getValue('data', args);\n    //     const editedValue: Record<string, unknown> = data[`${field}`];\n    //     const previousValue: Record<string, unknown> = getValue('previousData', args);\n    //     if ((isNOU(editedValue) && !isNOU(previousValue)) || (!isNOU(editedValue) && isNOU(previousValue))) {\n    //         return true;\n    //     } else if (!isNOU(editedValue) && !isNOU(previousValue)) {\n    //         if (editedValue instanceof Date) {\n    //             return editedValue.getTime() !== data.taskData[field as string].getTime() ? true : false;\n    //         } else if (field === this.parent.taskFields.resourceInfo) {\n    //             return editedValue !== previousValue ? true : false;\n    //         } else if (editedValue !== data.taskData[field as string]) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n    /**\n     * Initiate cell save action on Gantt with arguments from TreeGrid\n     *\n     * @param {object} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.initiateCellEdit = function (args, editedObj) {\n        var isValid = true;\n        if (args['name'] === 'actionComplete' && args['previousData'] === args['data'][args['column'].field]) {\n            isValid = false;\n        }\n        if (this.parent.undoRedoModule && this.parent['isUndoRedoItemPresent']('Edit')) {\n            if (isValid) {\n                if (this.parent.undoRedoModule['redoEnabled']) {\n                    this.parent.undoRedoModule['disableRedo']();\n                }\n                this.parent.undoRedoModule['createUndoCollection']();\n                var action = {};\n                action['action'] = 'CellEditing';\n                action['editedColumn'] = args['column'].field;\n                action['modifiedRecords'] = [];\n                this.parent.undoRedoModule['getUndoCollection'][this.parent.undoRedoModule['getUndoCollection'].length - 1] = action;\n            }\n        }\n        var column = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('column', args);\n        var data = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('data', args);\n        var editedArgs = {};\n        editedArgs.action = 'CellEditing';\n        editedArgs.data = this.parent.getTaskByUniqueID(data.uniqueID);\n        var previousValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('previousData', args);\n        var editedValue = this.parent.allowUnscheduledTasks ? data[column.field] : (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[column.field])\n            || data[column.field] === '') && (this.parent.taskFields.duration === column.field ||\n            this.parent.taskFields.startDate === column.field || this.parent.taskFields.endDate === column.field)) ? previousValue\n            : data[column.field];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {\n            data[column.field] = previousValue;\n            editedArgs.data[column.field] = previousValue;\n            this.parent.initiateEditAction(true);\n            if (this.parent.weekWorkingTime.length > 0 && editedValue && (column.field === this.parent.taskFields.startDate ||\n                column.field === this.parent.taskFields.baselineStartDate)) {\n                var sDate = column.field === this.parent.taskFields.startDate ? data.ganttProperties.startDate :\n                    data.ganttProperties.baselineStartDate;\n                var prevDay = this.parent['getStartTime'](sDate);\n                if (prevDay / 3600 === sDate.getHours()) {\n                    var dayStartTime = this.parent['getStartTime'](editedValue);\n                    this.parent.dataOperation.setTime(dayStartTime, editedValue);\n                    this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n                }\n                else {\n                    this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n                }\n            }\n            else {\n                this.parent.setRecordValue(column.field, editedValue, editedArgs.data);\n            }\n            if (column.field === this.parent.taskFields.name) {\n                this.taskNameEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.startDate) {\n                this.startDateEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.endDate) {\n                this.endDateEdited(editedArgs, args['previousData']);\n            }\n            else if (column.field === this.parent.taskFields.duration) {\n                this.durationEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.resourceInfo) {\n                this.resourceEdited(editedArgs, editedObj, data);\n            }\n            else if (column.field === this.parent.taskFields.progress) {\n                this.progressEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.baselineStartDate\n                || column.field === this.parent.taskFields.baselineEndDate) {\n                this.baselineEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.dependency) {\n                this.dependencyEdited(editedArgs, previousValue);\n            }\n            else if (column.field === this.parent.taskFields.notes) {\n                this.notedEdited(editedArgs);\n            }\n            else if (column.field === this.parent.taskFields.work) {\n                this.workEdited(editedArgs);\n            }\n            else if ((column.field === this.parent.taskFields.type || column.field === 'taskType') &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.work)) {\n                this.typeEdited(editedArgs, editedObj);\n            }\n            else if (column.field === this.parent.taskFields.manual) {\n                this.taskmodeEdited(editedArgs);\n            }\n            else {\n                this.parent.setRecordValue('taskData.' + column.field, editedArgs.data[column.field], editedArgs.data);\n                this.parent.editModule.initiateSaveAction(editedArgs);\n            }\n        }\n        else {\n            this.parent.editModule.endEditAction(args);\n        }\n        this.isCellEdit = false;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editModule.cellEditModule.editedColumn)) {\n            this.parent.editModule.cellEditModule.editedColumn = null;\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.toolbarModule)) {\n            this.parent.toolbarModule.refreshToolbarItems();\n        }\n    };\n    /**\n     * To update task name cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskNameEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.name, args.data[this.parent.taskFields.name], args.data);\n        this.parent.setRecordValue('taskName', args.data[this.parent.taskFields.name], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task notes cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.notedEdited = function (args) {\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.notes, args.data[this.parent.taskFields.notes], args.data);\n        this.parent.setRecordValue('notes', args.data[this.parent.taskFields.notes], args.data.ganttProperties, true);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task schedule mode cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.taskmodeEdited = function (args) {\n        this.parent.setRecordValue('isAutoSchedule', !args.data[this.parent.taskFields.manual], args.data.ganttProperties, true);\n        this.parent.editModule.updateTaskScheduleModes(args.data);\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task start date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.startDateEdited = function (args) {\n        var ganttData = args.data;\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.startDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        currentValue = this.parent.dateValidationModule.checkStartDate(currentValue, ganttData.ganttProperties, ganttData.ganttProperties.isMilestone);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentValue)) {\n            if (!ganttData.hasChildRecords) {\n                this.parent.setRecordValue('startDate', null, ganttProb, true);\n                if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n                    this.parent.setRecordValue('duration', null, ganttProb, true);\n                }\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                // if (this.parent.allowUnscheduledTasks && isNOU(this.parent.taskFields.endDate)) {\n                //     this.parent.setRecordValue('endDate', null, ganttProb, true);\n                // }\n            }\n        }\n        else if (ganttProb.endDate || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(ganttData);\n        }\n        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.endDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.duration)) {\n            this.parent.setRecordValue('startDate', new Date(currentValue.getTime()), ganttProb, true);\n        }\n        this.parent.setRecordValue('isMilestone', ganttProb.duration === 0 ? true : false, ganttProb, true);\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(ganttData, 'startDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'endDate');\n        this.parent.dataOperation.updateMappingData(ganttData, 'duration');\n        this.updateEditedRecord(args);\n    };\n    CellEdit.prototype.validateEndDateWithSegments = function (ganttProp) {\n        var ganttSegments = [];\n        var segments = ganttProp.segments;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[parseInt(i.toString(), 10)];\n            var endDate = segment.endDate;\n            endDate = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProp.endDate)) && endDate.getTime() <\n                ganttProp.endDate.getTime() && i !== segments.length - 1 ? endDate : ganttProp.endDate;\n            segment.duration = this.parent.dataOperation.getDuration(segment.startDate, endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n            if (segments.length > 0 && endDate.getTime() < segment.startDate.getTime()\n                && endDate.getTime() <= ganttProp.endDate.getTime()) {\n                segments[i - 1].duration = this.parent.dataOperation.getDuration(segments[i - 1].startDate, ganttProp.endDate, ganttProp.durationUnit, ganttProp.isAutoSchedule, ganttProp.isMilestone);\n                continue;\n            }\n            ganttSegments.push(segment);\n        }\n        return ganttSegments;\n    };\n    /**\n     * To update task end date cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {Date} previousValue .\n     * @returns {void} .\n     */\n    CellEdit.prototype.endDateEdited = function (args, previousValue) {\n        var ganttProb = args.data.ganttProperties;\n        var currentValue = args.data[this.parent.taskFields.endDate];\n        currentValue = currentValue ? new Date(currentValue.getTime()) : null;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentValue)) {\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            if (!(ganttProb.startDate === null && ganttProb.endDate === null && ganttProb.duration !== null)) {\n                this.parent.setRecordValue('duration', null, ganttProb, true);\n            }\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n        }\n        else {\n            var dayEndTime = this.parent['getCurrentDayEndTime'](currentValue);\n            if ((currentValue.getHours() === 0 || (previousValue &&\n                currentValue.toTimeString().slice(0, 5) === previousValue.toTimeString().slice(0, 5))) && dayEndTime !== 86400) {\n                this.parent.dateValidationModule.setTime(dayEndTime, currentValue);\n            }\n            currentValue = this.parent.dateValidationModule.checkEndDate(currentValue, ganttProb, ganttProb.isMilestone);\n            this.parent.setRecordValue('endDate', currentValue, ganttProb, true);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.startDate) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.duration)) {\n                if (this.parent.dateValidationModule.compareDates(ganttProb.endDate, ganttProb.startDate) === -1) {\n                    this.parent.setRecordValue('endDate', new Date(ganttProb.startDate.getTime()), ganttProb, true);\n                    dayEndTime = this.parent['getCurrentDayEndTime'](ganttProb.endDate);\n                    this.parent.dateValidationModule.setTime(dayEndTime, ganttProb.endDate);\n                }\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.duration) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.startDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(ganttProb.endDate, ganttProb.duration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.segments)) {\n                ganttProb.segments = this.validateEndDateWithSegments(ganttProb);\n            }\n            if (this.compareDatesFromRecord(ganttProb) <= 0) {\n                this.parent.dateValidationModule.calculateDuration(args.data);\n            }\n            else {\n                this.parent.editModule.revertCellEdit(args);\n            }\n            this.updateDates(args);\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            if (ganttProb.isMilestone) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0) {\n            this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), args.data.ganttProperties, true);\n            this.parent.dataOperation.updateMappingData(args.data, 'segments');\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'endDate');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update duration cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.durationEdited = function (args) {\n        var regex = /^[^\\d.-]+$/;\n        if (regex.test(args.data[this.parent.taskFields.duration])) {\n            var err = \"The provided value for the \" + this.parent.taskFields.duration + \" field is invalid. Please ensure the \" + this.parent.taskFields.duration + \" field contains only valid numeric values.\";\n            this.parent.trigger('actionFailure', { error: err });\n        }\n        if (parseInt(args.data[this.parent.taskFields.duration], 10) < 0) {\n            args.data[this.parent.taskFields.duration] = 0;\n        }\n        var ganttProb = args.data.ganttProperties;\n        var durationString = args.data[this.parent.taskFields.duration];\n        this.parent.dataOperation.updateDurationValue(durationString, ganttProb);\n        this.updateDates(args);\n        this.parent.editModule.updateResourceRelatedFields(args.data, 'duration');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update start date, end date based on duration\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateDates = function (args) {\n        var ganttProb = args.data.ganttProperties;\n        var endDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.endDate);\n        var startDate = this.parent.dateValidationModule.getDateFromFormat(ganttProb.startDate);\n        var currentDuration = ganttProb.duration;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentDuration)) {\n            this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n            if (args.data[this.parent.taskFields.duration] !== null) {\n                this.parent.setRecordValue('endDate', null, ganttProb, true);\n            }\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startDate) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endDate)) {\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.getStartDate(endDate, currentDuration, ganttProb.durationUnit, ganttProb), ganttProb, true);\n            }\n            if (currentDuration !== 0 && ganttProb.isMilestone) {\n                this.parent.setRecordValue('isMilestone', false, ganttProb, true);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.taskFields.milestone)) {\n                    this.parent.setRecordValue(this.parent.taskFields.milestone, false, args.data, true);\n                }\n                this.parent.setRecordValue('startDate', this.parent.dateValidationModule.checkStartDate(ganttProb.startDate, ganttProb), ganttProb, true);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ganttProb.segments) && ganttProb.segments.length > 0) {\n                this.parent.setRecordValue('segments', this.parent.dataOperation.setSegmentsInfo(args.data, false), ganttProb, true);\n                this.parent.dataOperation.updateMappingData(args.data, 'segments');\n            }\n            this.parent.setRecordValue('isMilestone', (ganttProb.duration === 0 ? true : false), ganttProb, true);\n            this.parent.dateValidationModule.calculateEndDate(args.data);\n        }\n        this.parent.dataOperation.updateWidthLeft(args.data);\n        this.parent.dataOperation.updateMappingData(args.data, 'endDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'startDate');\n        this.parent.dataOperation.updateMappingData(args.data, 'duration');\n    };\n    /**\n     * To update progress cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.progressEdited = function (args) {\n        var ganttRecord = args.data;\n        this.parent.setRecordValue('progress', (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), ganttRecord.ganttProperties, true);\n        this.parent.setRecordValue('taskData.' + this.parent.taskFields.progress, (ganttRecord[this.parent.taskFields.progress] > 100 ? 100 : ganttRecord[this.parent.taskFields.progress]), args.data);\n        if (!ganttRecord.ganttProperties.isAutoSchedule) {\n            this.parent.setRecordValue('autoWidth', this.parent.dataOperation.calculateWidth(ganttRecord, false), ganttRecord.ganttProperties, true);\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.data.ganttProperties.segments) && args.data.ganttProperties.segments.length > 0 &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editModule.taskbarEditModule)) {\n            this.parent.editModule.taskbarEditModule.updateSegmentProgress(args.data.ganttProperties);\n        }\n        if (!args.data.hasChildRecords) {\n            var width = ganttRecord.ganttProperties.isAutoSchedule ? ganttRecord.ganttProperties.width :\n                ganttRecord.ganttProperties.autoWidth;\n            this.parent.setRecordValue('progressWidth', this.parent.dataOperation.getProgressWidth(width, ganttRecord.ganttProperties.progress), ganttRecord.ganttProperties, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update baselines with new baseline start date and baseline end date\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.baselineEdited = function (args) {\n        var ganttRecord = args.data.ganttProperties;\n        var baseLineStartDate = args.data[this.parent.taskFields.baselineStartDate];\n        var baseLineEndDate = args.data[this.parent.taskFields.baselineEndDate];\n        var dayEndTime = this.parent['getCurrentDayEndTime'](baseLineEndDate);\n        if (baseLineEndDate && baseLineEndDate.getHours() === 0 && dayEndTime !== 86400) {\n            this.parent.dateValidationModule.setTime(dayEndTime, baseLineEndDate);\n        }\n        this.parent.setRecordValue('baselineStartDate', this.parent.dateValidationModule.checkBaselineStartDate(baseLineStartDate, ganttRecord), ganttRecord, true);\n        this.parent.setRecordValue('baselineEndDate', this.parent.dateValidationModule.checkBaselineEndDate(baseLineEndDate), ganttRecord, true);\n        if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {\n            this.parent.setRecordValue('baselineLeft', this.parent.dataOperation.calculateBaselineLeft(ganttRecord), ganttRecord, true);\n            this.parent.setRecordValue('baselineWidth', this.parent.dataOperation.calculateBaselineWidth(ganttRecord), ganttRecord, true);\n        }\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To update task's resource cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @param {IGanttData} previousData .\n     * @returns {void} .\n     */\n    CellEdit.prototype.resourceEdited = function (args, editedObj, previousData) {\n        var resourceSettings = this.parent.resourceFields;\n        var editedResourceId = editedObj[this.parent.taskFields.resourceInfo];\n        if (editedResourceId) {\n            this.isResourceCellEdited = true;\n            var tempResourceInfo = this.parent.dataOperation.setResourceInfo(editedObj);\n            var editedResouceLength = tempResourceInfo.length;\n            var previousResource = previousData.ganttProperties.resourceInfo;\n            var index = void 0;\n            var editedResources = [];\n            var resourceData = this.parent.resources;\n            var newIndex = void 0;\n            var _loop_1 = function (count) {\n                if (previousResource) {\n                    var previousResourceLength = previousResource.length;\n                    for (newIndex = 0; newIndex < previousResourceLength; newIndex++) {\n                        if (previousResource[newIndex][resourceSettings.id] === editedResourceId[count]) {\n                            index = newIndex;\n                            break;\n                        }\n                        else {\n                            index = -1;\n                        }\n                    }\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) && index !== -1) {\n                    editedResources.push(previousResource[parseInt(index.toString(), 10)]);\n                }\n                else {\n                    var resource = resourceData.filter(function (resourceInfo) {\n                        return (editedResourceId[count] === resourceInfo[resourceSettings.id]);\n                    });\n                    var ganttDataResource = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, resource[0]);\n                    ganttDataResource[resourceSettings.unit] = 100;\n                    editedResources.push(ganttDataResource);\n                }\n            };\n            for (var count = 0; count < editedResouceLength; count++) {\n                _loop_1(count);\n            }\n            args.data.ganttProperties.resourceInfo = editedResources;\n            this.parent.dataOperation.updateMappingData(args.data, 'resourceInfo');\n            this.parent.editModule.updateResourceRelatedFields(args.data, 'resource');\n            if (this.parent.viewType === 'ResourceView') {\n                this.parent.editModule.dialogModule.isResourceUpdate = true;\n                this.parent.editModule.dialogModule.previousResource = previousResource;\n            }\n            this.updateDates(args);\n            this.updateEditedRecord(args);\n        }\n    };\n    /**\n     * To update task's predecessor cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @param {object} cellEditArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.dependencyEdited = function (editedArgs, cellEditArgs) {\n        var specialCharacterPattern = /[!@#$%^&*()_=[\\]{};:<>|./?-]/;\n        if (specialCharacterPattern.test(editedArgs.data[this.parent.taskFields.dependency])) {\n            var err = \"The provided value for the \" + this.parent.taskFields.dependency + \" field is invalid. Please ensure that the \" + this.parent.taskFields.dependency + \" field does not contain any special characters.\";\n            this.parent.trigger('actionFailure', { error: err });\n        }\n        this.parent.predecessorModule.updateUnscheduledDependency(editedArgs.data);\n        var FF = this.parent.localeObj.getConstant('FF');\n        var FS = this.parent.localeObj.getConstant('FS');\n        var SS = this.parent.localeObj.getConstant('SS');\n        var SF = this.parent.localeObj.getConstant('SF');\n        var value = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editedArgs.data[this.parent.taskFields.dependency])) {\n            var splitString_1 = editedArgs.data[this.parent.taskFields.dependency].split(',');\n            splitString_1.map(function (splitvalue, index) {\n                if (splitvalue.includes(FF)) {\n                    value += splitvalue.replace(FF, 'FF');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(FS)) {\n                    value += splitvalue.replace(FS, 'FS');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(SS)) {\n                    value += splitvalue.replace(SS, 'SS');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else if (splitvalue.includes(SF)) {\n                    value += splitvalue.replace(SF, 'SF');\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n                else {\n                    value += splitvalue;\n                    value += (splitString_1.length !== index + 1) ? ',' : '';\n                }\n            });\n        }\n        if (!this.parent.connectorLineEditModule.updatePredecessor(editedArgs.data, value, editedArgs)) {\n            this.parent.editModule.revertCellEdit(cellEditArgs);\n        }\n    };\n    /**\n     * To update task's work cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} editedArgs .\n     * @returns {void} .\n     */\n    CellEdit.prototype.workEdited = function (editedArgs) {\n        var ganttProb = editedArgs.data.ganttProperties;\n        if (editedArgs.data[this.parent.taskFields.work] < 0 || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editedArgs.data[this.parent.taskFields.work])) {\n            editedArgs.data[this.parent.taskFields.work] = 0;\n        }\n        this.parent['updateDuration'] = true;\n        var workValue = editedArgs.data[this.parent.taskFields.work];\n        this.parent.setRecordValue('work', workValue, ganttProb, true);\n        this.parent.editModule.updateResourceRelatedFields(editedArgs.data, 'work');\n        this.updateDates(editedArgs);\n        this.updateEditedRecord(editedArgs);\n        this.parent['updateDuration'] = false;\n    };\n    /**\n     * To update task type cell with new value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @param {object} editedObj .\n     * @returns {void} .\n     */\n    CellEdit.prototype.typeEdited = function (args, editedObj) {\n        var key = this.parent.taskFields.type || 'taskType';\n        var ganttProb = args.data.ganttProperties;\n        var taskType = editedObj[\"\" + key];\n        this.parent.setRecordValue('taskType', taskType, ganttProb, true);\n        // To validate the work column as well, if duartion column value is 0, when FixedDuration type\n        if (ganttProb.taskType === 'FixedDuration' && ganttProb.duration === 0) {\n            this.parent.editModule.updateResourceRelatedFields(args.data, 'work');\n        }\n        //this.parent.dataOperation.updateMappingData(args.data, 'taskType');\n        this.updateEditedRecord(args);\n    };\n    /**\n     * To compare start date and end date from Gantt record\n     *\n     * @param {ITaskData} ganttRecord .\n     * @returns {number} .\n     */\n    CellEdit.prototype.compareDatesFromRecord = function (ganttRecord) {\n        var sDate = this.parent.dateValidationModule.getValidStartDate(ganttRecord);\n        var eDate = this.parent.dateValidationModule.getValidEndDate(ganttRecord);\n        return this.parent.dateValidationModule.compareDates(sDate, eDate);\n    };\n    /**\n     * To start method save action with edited cell value\n     *\n     * @param {ITaskbarEditedEventArgs} args .\n     * @returns {void} .\n     */\n    CellEdit.prototype.updateEditedRecord = function (args) {\n        this.parent.editModule.initiateUpdateAction(args);\n    };\n    /**\n     * To remove all public private properties\n     *\n     * @returns {void} .\n     * @private\n     */\n    CellEdit.prototype.destroy = function () {\n        // Destroy Method\n        this.parent.editModule.cellEditModule = undefined;\n    };\n    return CellEdit;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-gantt/src/gantt/actions/cell-edit.js?");

/***/ })

}]);