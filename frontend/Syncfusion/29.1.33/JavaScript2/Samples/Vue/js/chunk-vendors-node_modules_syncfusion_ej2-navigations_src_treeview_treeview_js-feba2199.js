"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-navigations_src_treeview_treeview_js-feba2199"],{

/***/ "./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionSettings: () => (/* binding */ ActionSettings),\n/* harmony export */   FieldsSettings: () => (/* binding */ FieldsSettings),\n/* harmony export */   NodeAnimationSettings: () => (/* binding */ NodeAnimationSettings),\n/* harmony export */   TreeView: () => (/* binding */ TreeView)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-lists */ \"./node_modules/@syncfusion/ej2-lists/index.js\");\n/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTWRAP = 'e-text-wrap';\nvar IELISTWRAP = 'e-ie-wrap';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-treeview-checkbox';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar PREVENTSELECT = 'e-prevent';\nvar treeAriaAttr = {\n    treeRole: 'group',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nvar FieldsSettings = /** @class */ (function (_super) {\n    __extends(FieldsSettings, _super);\n    function FieldsSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('child')\n    ], FieldsSettings.prototype, \"child\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('expanded')\n    ], FieldsSettings.prototype, \"expanded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('hasChildren')\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('htmlAttributes')\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('iconCss')\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('id')\n    ], FieldsSettings.prototype, \"id\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('imageUrl')\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('isChecked')\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('parentID')\n    ], FieldsSettings.prototype, \"parentID\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FieldsSettings.prototype, \"query\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('selectable')\n    ], FieldsSettings.prototype, \"selectable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('selected')\n    ], FieldsSettings.prototype, \"selected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FieldsSettings.prototype, \"tableName\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('text')\n    ], FieldsSettings.prototype, \"text\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('tooltip')\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('navigateUrl')\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\n    return FieldsSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures animation settings for the TreeView component.\n */\nvar ActionSettings = /** @class */ (function (_super) {\n    __extends(ActionSettings, _super);\n    function ActionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('SlideDown')\n    ], ActionSettings.prototype, \"effect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(400)\n    ], ActionSettings.prototype, \"duration\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('linear')\n    ], ActionSettings.prototype, \"easing\", void 0);\n    return ActionSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nvar NodeAnimationSettings = /** @class */ (function (_super) {\n    __extends(NodeAnimationSettings, _super);\n    function NodeAnimationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\n    return NodeAnimationSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n * <div id=\"tree\"></div>\n * ```\n * ```typescript\n * let treeObj: TreeView = new TreeView();\n * treeObj.appendTo('#tree');\n * ```\n */\nvar TreeView = /** @class */ (function (_super) {\n    __extends(TreeView, _super);\n    function TreeView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isRefreshed = false;\n        _this.preventExpand = false;\n        _this.checkedElement = [];\n        _this.disableNode = [];\n        _this.validArr = [];\n        _this.validNodes = [];\n        _this.expandChildren = [];\n        _this.isFieldChange = false;\n        _this.changeDataSource = false;\n        _this.hasTemplate = false;\n        _this.isFirstRender = false;\n        // Specifies whether the node is dropped or not\n        _this.isNodeDropped = false;\n        _this.isInteracted = false;\n        _this.isRightClick = false;\n        _this.mouseDownStatus = false;\n        _this.isDropIn = false;\n        _this.OldCheckedData = [];\n        _this.isHiddenItem = false;\n        return _this;\n    }\n    TreeView_1 = TreeView;\n    /**\n     * Get component name.\n     *\n     * @returns {string} - returns module name.\n     * @private\n     */\n    TreeView.prototype.getModuleName = function () {\n        return 'treeview';\n    };\n    /**\n     * Initialize the event handler\n     *\n     * @returns {void}\n     */\n    TreeView.prototype.preRender = function () {\n        var _this = this;\n        this.checkActionNodes = [];\n        this.parentNodeCheck = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n            shiftSpace: 'shift+space',\n            ctrlSpace: 'ctrl+space'\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: function (e) {\n                _this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            itemNavigable: this.fullRowNavigable\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        this.DDTTreeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - returns the persisted data\n     * @hidden\n     */\n    TreeView.prototype.getPersistData = function () {\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeView.prototype.render = function () {\n        this.initialRender = true;\n        this.initialize();\n        this.setDataBinding(false);\n        this.setDisabledMode();\n        this.setExpandOnType();\n        if (!this.disabled) {\n            this.setRipple();\n        }\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.initialRender = false;\n        this.renderComplete();\n    };\n    TreeView.prototype.initialize = function () {\n        this.element.setAttribute('role', 'tree');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.fields.dataSource) && Array.isArray(this.fields.dataSource) && this.fields.dataSource.length !== 0) {\n            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n        }\n        this.setCssClass(null, this.cssClass);\n        this.setEnableRtl();\n        this.setFullRow(this.fullRowSelect);\n        this.setTextWrap();\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    };\n    TreeView.prototype.setDisabledMode = function () {\n        if (this.disabled) {\n            this.element.classList.add(DISABLED);\n            this.element.setAttribute('aria-disabled', 'true');\n        }\n        else {\n            this.element.classList.remove(DISABLED);\n            this.element.setAttribute('aria-disabled', 'false');\n        }\n    };\n    TreeView.prototype.setEnableRtl = function () {\n        (this.enableRtl ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], RTL);\n    };\n    TreeView.prototype.setRipple = function () {\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        var rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.rippleEffect)(this.element, rippleModel);\n        var iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true\n        };\n        this.rippleIconFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.rippleEffect)(this.element, iconModel);\n    };\n    TreeView.prototype.setFullRow = function (isEnabled) {\n        (isEnabled ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], FULLROWWRAP);\n    };\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\n        if (isEnabled) {\n            this.element.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            this.element.setAttribute('aria-multiselectable', 'false');\n        }\n    };\n    TreeView.prototype.templateComplier = function (template) {\n        if (template) {\n            this.hasTemplate = true;\n            this.element.classList.add(INTERACTION);\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                }\n            }\n            catch (e) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        this.element.classList.remove(INTERACTION);\n        return undefined;\n    };\n    TreeView.prototype.setDataBinding = function (changeDataSource) {\n        var _this = this;\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n            this.isOffline = this.fields.dataSource.dataSource.offline;\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then(function (e) {\n                    _this.isOffline = _this.fields.dataSource.dataSource.offline;\n                    if (_this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && _this.isOffline) {\n                        _this.treeList.pop();\n                        _this.treeData = e.result;\n                        _this.isNumberTypeId = _this.getType();\n                        _this.setRootData();\n                        _this.renderItems(true);\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\n                            _this.finalize();\n                        }\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n                    _this.treeList.pop();\n                    _this.treeData = e.result;\n                    _this.isNumberTypeId = _this.getType();\n                    _this.setRootData();\n                    if (changeDataSource) {\n                        _this.changeDataSource = true;\n                    }\n                    _this.renderItems(true);\n                    _this.changeDataSource = false;\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\n                        _this.finalize();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.getQuery = function (mapper, value) {\n        if (value === void 0) { value = null; }\n        var columns = [];\n        var query;\n        if (!mapper.query) {\n            query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query();\n            var prop = this.getActualProperties(mapper);\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n                var col = _a[_i];\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[\"\" + col]\n                    && col !== 'url' && columns.indexOf(mapper[\"\" + col]) === -1) {\n                    columns.push(mapper[\"\" + col]);\n                }\n            }\n            query.select(columns);\n            if (Object.prototype.hasOwnProperty.call(prop, 'tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    };\n    TreeView.prototype.getType = function () {\n        return this.treeData[0] ? ((typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    };\n    TreeView.prototype.setRootData = function () {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    };\n    TreeView.prototype.isChildObject = function () {\n        if (typeof this.fields.child === 'object') {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TreeView.prototype.renderItems = function (isSorted) {\n        this.listBaseOption.ariaAttributes.level = 1;\n        var sortedData = this.getSortedData(this.rootData);\n        this.ulElement = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n        this.element.appendChild(this.ulElement);\n        var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n        if (this.loadOnDemand === false) {\n            var i = 0;\n            while (i < rootNodes.length) {\n                this.renderChildNodes(rootNodes[parseInt(i.toString(), 10)], true, null, true);\n                i++;\n            }\n        }\n        var parentEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + PARENTITEM, this.element);\n        if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\n            this.finalizeNode(this.element);\n        }\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    };\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     *\n     * @returns {void}\n     */\n    TreeView.prototype.updateCheckedStateFromDS = function () {\n        this.validNodes = [];\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                var mapper = this.fields;\n                var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < resultData.length; i++) {\n                    var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id]\n                        ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString()\n                        : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkDisabledState(resultId, resultData[i]);\n                    }\n                    if (resultData[parseInt(i.toString(), 10)][this.fields.hasChildren]) {\n                        var id = resultData[parseInt(i.toString(), 10)][this.fields.id];\n                        var childData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).\n                            executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.parentID, 'equal', id, false));\n                        for (var child = 0; child < childData.length; child++) {\n                            var childId = childData[parseInt(child.toString(), 10)][this.fields.id]\n                                ? childData[parseInt(child.toString(), 10)][this.fields.id].toString()\n                                : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkDisabledState(childId, childData[child]);\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < this.checkedNodes.length; i++) {\n                    var mapper_1 = this.fields;\n                    var checkState = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).\n                        executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper_1.id, 'equal', this.checkedNodes[parseInt(i.toString(), 10)], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper_1, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    if (checkState.length > 0) {\n                        var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                    var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).\n                        executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper_1.parentID, 'equal', this.checkedNodes[parseInt(i.toString(), 10)], true));\n                    for (var index = 0; index < checkedData.length; index++) {\n                        var checkedId = checkedData[parseInt(index.toString(), 10)][this.fields.id]\n                            ? checkedData[parseInt(index.toString(), 10)][this.fields.id].toString()\n                            : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkDisabledState(checkedId, checkedData[index]);\n                        }\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager &&\n                this.isOffline)) {\n                for (var index = 0; index < this.treeData.length; index++) {\n                    var fieldId = this.treeData[parseInt(index.toString(), 10)][this.fields.id] ? this.treeData[parseInt(index.toString(), 10)][this.fields.id].toString() : '';\n                    if (this.treeData[parseInt(index.toString(), 10)][this.fields.isChecked] &&\n                        !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkDisabledState(fieldId, this.treeData[index]);\n                    }\n                    if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n                        this.validNodes.push(fieldId);\n                    }\n                    var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), this.treeData[parseInt(index.toString(), 10)]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[parseInt(index.toString(), 10)]);\n                    }\n                }\n                this.validNodes = (this.enablePersistence) ? this.checkedNodes : this.validNodes;\n            }\n            this.setProperties({ checkedNodes: this.validNodes }, true);\n        }\n    };\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     *\n     * @param {FieldsSettingsModel} mapper - The mapper object containing field settings.\n     * @param {Object[]} checkNodes - The array of checked nodes.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        var count = 0;\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            var childNodes = this.getChildNodes(this.treeData, id);\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id]\n                    ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString()\n                    : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkDisabledState(id);\n                }\n            }\n            var preElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).\n                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            var check = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     *\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.updateParentCheckState = function () {\n        var indeterminate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + INDETERMINATE, this.element);\n        var childCheckedElement;\n        var data = this.treeData;\n        if (this.element.classList.contains('e-filtering')) {\n            data = this.DDTTreeData;\n        }\n        for (var i = 0; i < indeterminate.length; i++) {\n            var node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(indeterminate[parseInt(i.toString(), 10)], '.' + LISTITEM);\n            var nodeId = node.getAttribute('data-uid').toString();\n            var OldCheckedNodes = void 0;\n            if (this.element.classList.contains('e-filtering')) {\n                OldCheckedNodes = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.OldCheckedData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('parentID', 'equal', nodeId, true));\n            }\n            if (this.dataType === 1) {\n                childCheckedElement = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(data).\n                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(data, nodeId);\n            }\n            var count = 0;\n            if (childCheckedElement) {\n                var _loop_1 = function (j) {\n                    var childId = childCheckedElement[parseInt(j.toString(), 10)][this_1.fields.id].toString();\n                    if (this_1.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                    else if (this_1.element.classList.contains('e-filtering') && OldCheckedNodes.findIndex(function (e) { return e['id'] === childId; }) !== -1) {\n                        count++;\n                    }\n                };\n                var this_1 = this;\n                for (var j = 0; j < childCheckedElement.length; j++) {\n                    _loop_1(j);\n                }\n                if (count === childCheckedElement.length) {\n                    var nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkDisabledState(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     *\n     * @param {Object} data - The data object to check for indeterminate state.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.checkIndeterminateState = function (data) {\n        var element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            var ariaChecked = element.getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     *\n     * @param {Object[]} childItems - The array of child items to update the checked state.\n     * @param {Object} treeData - The tree data object containing field values.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n        var count = 0;\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (var index = 0; index < childItems.length; index++) {\n            var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : '';\n            if (childItems[parseInt(index.toString(), 10)][this.fields.isChecked] &&\n                !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkDisabledState(checkedChild, childItems[index]);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkDisabledState(checkedChild, childItems[index]);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n                this.validNodes.push(checkedChild);\n            }\n            var subChildItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);\n            if (subChildItems && subChildItems.length) {\n                if (this.parentCheckData.indexOf(treeData) === -1) {\n                    this.parentCheckData.push(treeData);\n                }\n                this.updateChildCheckState(subChildItems, childItems[parseInt(index.toString(), 10)]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkDisabledState(checkedParent, treeData);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (var len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[parseInt(len.toString(), 10)]) &&\n                    (this.parentCheckData[parseInt(len.toString(), 10)])) {\n                    this.checkIndeterminateState(this.parentCheckData[parseInt(len.toString(), 10)]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    };\n    TreeView.prototype.beforeNodeCreate = function (e) {\n        if (this.showCheckBox) {\n            var checkboxEle = (0,_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__.createCheckBox)(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.classList.add(CHECKBOXWRAP);\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + EXPANDABLE + ', div.' + COLLAPSIBLE, e.item);\n            var id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon) ? 0 : 1]);\n            var checkValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                e.item.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkValue) && checkValue.toString() === 'true') {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                e.item.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                e.item.setAttribute('aria-checked', 'false');\n            }\n            var frame = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXFRAME, checkboxEle);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        var fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        e.item.setAttribute('tabindex', '-1');\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(e.item, 'focus', this.focusIn, this);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nodeTemplateFn)) {\n            var textEle = e.item.querySelector('.' + LISTTEXT);\n            var dataId = e.item.getAttribute('data-uid');\n            textEle.innerHTML = '';\n            this.renderNodeTemplate(e.curData, textEle, dataId);\n        }\n        var eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n            if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {\n                e.item.classList.add(PREVENTSELECT);\n                var firstChild = e.item.firstElementChild;\n                firstChild.style.cursor = 'not-allowed';\n            }\n        }\n    };\n    TreeView.prototype.frameMouseHandler = function (e) {\n        var rippleSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        (0,_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__.rippleMouseHandler)(e, rippleSpan);\n    };\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\n        var data = e.curData;\n        var actionValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(action, data);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    };\n    TreeView.prototype.getDataType = function (ds, mapper) {\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n            for (var i = 0; i < ds.length; i++) {\n                if (this.isOffline) {\n                    if ((typeof mapper.child === 'string') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, ds[parseInt(i.toString(), 10)])) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.parentID, ds[parseInt(i.toString(), 10)]))) {\n                        return 1;\n                    }\n                }\n                else if ((typeof mapper.child === 'string') && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, ds[parseInt(i.toString(), 10)]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (var i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, ds[parseInt(i.toString(), 10)])) || (Object.prototype.hasOwnProperty.call(ds[parseInt(i.toString(), 10)], mapper.child)))) {\n                return 2;\n            }\n            if (this.isChildObject()) {\n                return 2;\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.parentID, ds[parseInt(i.toString(), 10)])) ||\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.hasChildren, ds[parseInt(i.toString(), 10)]))) {\n                return 1;\n            }\n        }\n        return 1;\n    };\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n        var cusQuery = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().group(groupBy);\n        var ds = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.getDataSource(dataSource, cusQuery);\n        var grpItem = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[parseInt(j.toString(), 10)].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    };\n    TreeView.prototype.getSortedData = function (list) {\n        if (list && this.sortOrder !== 'None') {\n            list = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.getDataSource(list, _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    };\n    TreeView.prototype.finalizeNode = function (element, isFromExpandAll, expandChild) {\n        var _this = this;\n        if (!isFromExpandAll) {\n            this.updateAttributes(element);\n        }\n        if (!expandChild) {\n            var eNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + EXPANDED, element);\n            if (!this.loadOnDemand && this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n                this.isInitalExpand = this.treeData.filter(function (e) { return e[_this.fields.expanded] === true; }).length > 0\n                    ? true\n                    : this.isInitalExpand;\n            }\n            if (!this.isInitalExpand) {\n                for (var i = 0; i < eNodes.length; i++) {\n                    this.renderChildNodes(eNodes[parseInt(i.toString(), 10)]);\n                }\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(eNodes, EXPANDED);\n        }\n        if (!isFromExpandAll) {\n            this.updateList();\n        }\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    };\n    TreeView.prototype.updateAttributes = function (element) {\n        var iNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + IMAGE, element);\n        for (var k = 0; k < iNodes.length; k++) {\n            iNodes[parseInt(k.toString(), 10)].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            var sNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + SELECTED, element);\n            for (var i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[parseInt(i.toString(), 10)], null);\n                break;\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(sNodes, SELECTED);\n        }\n        var cNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (var j = 0; j < cNodes.length; j++) {\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, cNodes[parseInt(j.toString(), 10)]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[parseInt(j.toString(), 10)]);\n            }\n        }\n    };\n    TreeView.prototype.updateCheckedProp = function () {\n        if (this.showCheckBox) {\n            var nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    };\n    TreeView.prototype.ensureIndeterminate = function () {\n        if (this.autoCheck) {\n            var liElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('li', this.element);\n            var ulElement = void 0;\n            for (var i = 0; i < liElement.length; i++) {\n                if (liElement[parseInt(i.toString(), 10)].classList.contains(LISTITEM)) {\n                    ulElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, liElement[parseInt(i.toString(), 10)]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[parseInt(i.toString(), 10)]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n        }\n        else {\n            var indeterminate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + INDETERMINATE, this.element);\n            for (var i = 0; i < indeterminate.length; i++) {\n                indeterminate[parseInt(i.toString(), 10)].classList.remove(INDETERMINATE);\n            }\n        }\n    };\n    TreeView.prototype.ensureParentCheckState = function (element) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            var ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, element);\n            }\n            var checkedNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CHECKBOXWRAP + ' .' + CHECK, ulElement);\n            var indeterminateNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + INDETERMINATE, ulElement);\n            var nodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)(this.checkDisabledChildren ? '.' + LISTITEM : '.' + LISTITEM + ':not(.' + DISABLE + ')', ulElement);\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            var count = nodes.length;\n            var checkedCount = checkedNodes.length;\n            var matchedChildNodes = [];\n            var oldChildCount = [];\n            var dataUid_1 = element.getAttribute('data-uid');\n            var rootNodeChecked_1 = true;\n            var childNodeChecked_1 = false;\n            nodes.forEach(function (childNode) {\n                if (childNode instanceof HTMLElement) {\n                    var ariaChecked = childNode.getAttribute('aria-checked');\n                    if (ariaChecked === 'true') {\n                        childNodeChecked_1 = true;\n                    }\n                    else {\n                        rootNodeChecked_1 = false;\n                    }\n                }\n            });\n            var parentNodeChecked = false;\n            if (this.element.classList.contains('e-filtering')) {\n                var oldCheckedNodes = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.OldCheckedData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('parentID', 'equal', dataUid_1, true));\n                checkedCount = oldCheckedNodes.length;\n                var parentNode = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.OldCheckedData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('hasChildren', 'equal', true, true));\n                if (parentNode.length > 0 && childNodeChecked_1 && ((this.OldCheckedData.some(function (oldNode) { return oldNode.id === dataUid_1; })) ||\n                    this.parentNodeCheck.indexOf(dataUid_1) !== -1)) {\n                    checkedCount = parentNode.length;\n                    parentNodeChecked = true;\n                }\n                var childItems = [];\n                if (this.dataType === 1) {\n                    childItems = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.DDTTreeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.fields.parentID, 'equal', dataUid_1, true));\n                }\n                else {\n                    childItems = this.getChildNodes(this.DDTTreeData, dataUid_1);\n                }\n                count = childItems.length;\n            }\n            if (this.autoCheck && this.showCheckBox && !(this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager)) {\n                var selectedChildNodeDetails = this.getSelectedChildNodeDetails(dataUid_1);\n                matchedChildNodes = selectedChildNodeDetails;\n                oldChildCount = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.checkActionNodes)\n                    .executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('parentID', 'equal', dataUid_1, true));\n            }\n            if (count === 0 && checkedCount === 0) {\n                return;\n            }\n            else if (count === checkedCount || ((parentNodeChecked && count > 0) && ((oldChildCount.length === matchedChildNodes.length)\n                || (oldChildCount.length !== matchedChildNodes.length))\n                && (oldChildCount.length !== 0 && matchedChildNodes.length !== 0) && rootNodeChecked_1\n                && (this.autoCheck && this.showCheckBox))) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if ((checkedCount > 0 && !parentNodeChecked && (this.autoCheck && this.showCheckBox))) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedCount > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedCount === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            var parentUL = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.' + PARENTITEM);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentUL)) {\n                var currentParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    };\n    TreeView.prototype.getSelectedChildNodeDetails = function (dataUid) {\n        var _this = this;\n        var childKey = typeof this.fields.child === 'string' ? this.fields.child : null;\n        var dataId = this.fields.id;\n        var parentKey = this.fields.parentID;\n        var matchesDataUid = function (childNode) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childKey) && childKey in childNode && Array.isArray(childNode[childKey])) {\n                var matchNode = childNode[dataId];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(matchNode)) {\n                    return matchNode.toString() === dataUid;\n                }\n            }\n            else {\n                var childNodePid = childNode[parentKey];\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childNodePid)) {\n                    return childNodePid.toString() === dataUid;\n                }\n            }\n            return false;\n        };\n        return this.checkedNodes\n            .map(function (checkedNodeId) {\n            return _this.getNodeObject(checkedNodeId);\n        })\n            .filter(function (childNode) {\n            if (childNode && typeof childNode === 'object' && (childKey in childNode)) {\n                return matchesDataUid(childNode);\n            }\n            else if (_this.dataType !== 2 && typeof childNode === 'object' && (parentKey in childNode || childKey in childNode)) {\n                return matchesDataUid(childNode);\n            }\n            return false;\n        });\n    };\n    TreeView.prototype.ensureChildCheckState = function (element, e, isFromExpandAll) {\n        var _this = this;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            var childElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, element);\n            var checkBoxes = void 0;\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childElement)) {\n                var childCheck = Array.from(childElement.querySelectorAll('li'));\n                checkBoxes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CHECKBOXWRAP, childElement);\n                if (this.isFilter) {\n                    checkBoxes = Array.from(checkBoxes).filter(function (checkbox) {\n                        var dataUID = checkbox.closest('li').getAttribute('data-uid');\n                        return dataUID !== null && _this.checkedNodes.indexOf(dataUID) !== -1;\n                    });\n                    childCheck = Array.from(childCheck).filter(function (li) {\n                        var childIds = li.getAttribute('data-uid');\n                        return childIds !== null && _this.checkedNodes.indexOf(childIds) !== -1;\n                    });\n                    if (checkBoxes.length === 0) {\n                        checkBoxes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CHECKBOXWRAP, childElement);\n                        childCheck = Array.from(childElement.querySelectorAll('li'));\n                    }\n                }\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                var checkedState = void 0;\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var childId = childCheck[parseInt(index.toString(), 10)].getAttribute('data-uid');\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentLoadData) &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]))) {\n                        checkedState = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.isChecked, this.currentLoadData[parseInt(index.toString(), 10)]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                        if ((checkedState === 'uncheck') && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.parentNodeCheck) && this.autoCheck\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                            checkedState = 'indeterminate';\n                        }\n                    }\n                    else {\n                        var isNodeChecked = checkBoxes[parseInt(index.toString(), 10)]\n                            .getElementsByClassName(CHECKBOXFRAME)[0]\n                            .classList.contains(CHECK);\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[parseInt(index.toString(), 10)].classList.contains(CHILD) &&\n                            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.parentNodeCheck) && this.autoCheck\n                                && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[parseInt(index.toString(), 10)], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded && !isFromExpandAll) {\n                this.updateParentCheckState();\n            }\n        }\n    };\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            nodes.reverse();\n            for (var len = nodes.length - 1; len >= 0; len--) {\n                var liEle = this.getElement(nodes[parseInt(len.toString(), 10)]);\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n                    var node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString()\n                        : nodes[parseInt(len.toString(), 10)]\n                            ? nodes[parseInt(len.toString(), 10)].toString()\n                            : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node, nodes);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        var childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (var i = 0; i < childItems.length; i++) {\n                                var id = childItems[parseInt(i.toString(), 10)][this.fields.id]\n                                    ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString()\n                                    : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                    var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                                    if (ele) {\n                                        this.changeState(ele, 'uncheck', null);\n                                    }\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                var checkBox = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            var checkBoxes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkBoxes[parseInt(index.toString(), 10)], '.' + LISTITEM);\n                    this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);\n                    this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                    this.updateOldCheckedData([this.getNodeData(liEle)]);\n                }\n            }\n            else {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkBoxes[parseInt(index.toString(), 10)], '.' + LISTITEM);\n                    this.updateFieldChecked(checkBoxes[parseInt(index.toString(), 10)], doCheck);\n                    this.changeState(checkBoxes[parseInt(index.toString(), 10)], doCheck ? 'check' : 'uncheck');\n                    this.updateOldCheckedData([this.getNodeData(liEle)]);\n                }\n            }\n        }\n        if (nodes) {\n            for (var j = 0; j < nodes.length - 1; j++) {\n                var node = nodes[parseInt(j.toString(), 10)] ? nodes[parseInt(j.toString(), 10)].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n        var currLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkbox, '.' + LISTITEM);\n        var id = currLi.getAttribute('data-uid');\n        var nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    };\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     *\n     * @param {string} node - The unique identifier of the node.\n     * @param {boolean} doCheck - A boolean value indicating whether to check or uncheck the node.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n        if (this.dataType === 1) {\n            var count = 0;\n            var resultId = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\n                if (childNodes) {\n                    for (var i = 0; i < childNodes.length; i++) {\n                        var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id]\n                            ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString()\n                            : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager &&\n            this.isOffline)) {\n            var id = void 0;\n            var parentElement = void 0;\n            var check = void 0;\n            for (var i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[parseInt(i.toString(), 10)][this.fields.id] ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                var subChild = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), this.treeData[parseInt(i.toString(), 10)]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     *\n     * @param {string} node - The unique identifier of the node.\n     * @param {boolean} doCheck - A boolean value indicating whether to check or uncheck the node.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n        var indeterminateData = this.getTreeData(node);\n        var count = 0;\n        var parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        var childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[parseInt(i.toString(), 10)][this.fields.id]\n                    ? childNodes[parseInt(i.toString(), 10)][this.fields.id].toString()\n                    : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     *\n     * @param {Object[]} subChild - Array of child nodes\n     * @param {string} parent - Parent identifier\n     * @param {string} node - Current node identifier\n     * @param {boolean} doCheck - Boolean indicating whether to perform a check\n     * @param {string} [child] - Optional child identifier\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n        var count = 0;\n        for (var j = 0; j < subChild.length; j++) {\n            var subId = subChild[parseInt(j.toString(), 10)][this.fields.id] ? subChild[parseInt(j.toString(), 10)][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            var indeterminate = parentElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + INDETERMINATE, parentElement) : null;\n            var check = parentElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECK, parentElement) : null;\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            var childElementCheck = element ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkDisabledState(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            var innerChild = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), subChild[parseInt(j.toString(), 10)]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    };\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n        var _this = this;\n        var eventArgs;\n        var currLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(wrapper, '.' + LISTITEM);\n        if (!this.checkDisabledChildren && currLi && (currLi.classList.contains(DISABLE)\n            || (this.disableNode && this.disableNode.indexOf(currLi.getAttribute('data-uid')) !== -1))) {\n            return;\n        }\n        if (wrapper === currLi) {\n            wrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXWRAP, currLi);\n        }\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    };\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        var ariaState;\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ariaState)) {\n            currLi.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            var data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ariaState)) {\n                currLi.setAttribute('aria-checked', ariaState);\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    };\n    TreeView.prototype.addCheck = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkDisabledState(id);\n        }\n    };\n    TreeView.prototype.removeCheck = function (liEle) {\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        var nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) ? false : true, node: currLi, data: nodeData };\n    };\n    TreeView.prototype.finalize = function () {\n        var firstUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, this.element);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstUl)) {\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\n            this.setMultiSelect(this.allowMultiSelection);\n            this.setNodeFocusable();\n            if (this.allowTextWrap) {\n                this.updateWrap();\n            }\n            this.renderReactTemplates();\n            this.hasPid = this.rootData[0] ? Object.prototype.hasOwnProperty.call(this.rootData[0], this.fields.parentID) : false;\n            this.doExpandAction();\n        }\n    };\n    TreeView.prototype.setTextWrap = function () {\n        (this.allowTextWrap ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], LISTWRAP);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n            (this.allowTextWrap ? _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass : _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], IELISTWRAP);\n        }\n    };\n    TreeView.prototype.updateWrap = function (ulEle) {\n        if (!this.fullRowSelect) {\n            return;\n        }\n        var liEle = ulEle ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM, ulEle) : this.liList;\n        var length = liEle.length;\n        for (var i = 0; i < length; i++) {\n            this.calculateWrap(liEle[parseInt(i.toString(), 10)]);\n        }\n    };\n    TreeView.prototype.calculateWrap = function (liEle) {\n        var element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FULLROW, liEle);\n        if (element && element.nextElementSibling) {\n            element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n        }\n    };\n    TreeView.prototype.doExpandAction = function () {\n        var _this = this;\n        var eUids = this.expandedNodes;\n        if (!this.loadOnDemand && this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n            this.isInitalExpand = this.treeData.filter(function (e) { return e[_this.fields.expanded] === true; }).length > 0\n                ? true\n                : this.isInitalExpand;\n        }\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (var i = 0; i < eUids.length; i++) {\n                    var eNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid=\"' + eUids[parseInt(i.toString(), 10)] + '\"]', this.element);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eNode)) {\n                        var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EXPANDABLE, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, eNode));\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[parseInt(i.toString(), 10)] && this.expandChildren.indexOf(eUids[parseInt(i.toString(), 10)]) === -1) {\n                            this.expandChildren.push(eUids[parseInt(i.toString(), 10)].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    };\n    TreeView.prototype.expandGivenNodes = function (arr) {\n        var _this = this;\n        this.expandCallback(arr[this.index], function () {\n            _this.index++;\n            if (_this.index < arr.length) {\n                _this.expandGivenNodes(arr);\n            }\n            else {\n                _this.afterFinalized();\n            }\n        });\n        if (this.index > 0) {\n            this.index = 0;\n        }\n    };\n    TreeView.prototype.expandCallback = function (eUid, callback) {\n        var eNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eNode)) {\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EXPANDABLE, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, eNode));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            callback();\n        }\n        else {\n            callback();\n        }\n    };\n    TreeView.prototype.afterFinalized = function () {\n        this.doSelectionAction();\n        this.updateCheckedProp();\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {\n            var eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n        this.isNodeDropped = false;\n    };\n    TreeView.prototype.doSelectionAction = function () {\n        var sNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + SELECTED, this.element);\n        var sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (var i = 0; i < sUids.length; i++) {\n                var sNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid=\"' + sUids[parseInt(i.toString(), 10)] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[parseInt(i.toString(), 10)]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(sNodes, SELECTED);\n    };\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\n        for (var i = 0; i < sNodes.length; i++) {\n            if (!sNodes[parseInt(i.toString(), 10)].classList.contains('e-disable')) {\n                this.selectNode(sNodes[parseInt(i.toString(), 10)], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    };\n    TreeView.prototype.clickHandler = function (event) {\n        var target = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && event.originalEvent.changedTouches && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos\n            ? document.elementFromPoint(event.originalEvent.changedTouches[0].clientX, event.originalEvent.changedTouches[0].clientY)\n            : event.originalEvent.target;\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            var classList = target.classList;\n            var li = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n            if (!li || (li.classList.contains(PREVENTSELECT) && !(classList.contains(EXPANDABLE) || classList.contains(COLLAPSIBLE)))) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                var rippleElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RIPPLEELMENT, li);\n                var rippleIcons = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    var checkWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + CHECKBOXWRAP);\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkWrapper)) {\n                        var checkElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            if (event.originalEvent.which === 3) {\n                this.isRightClick = true;\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    };\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    };\n    TreeView.prototype.updateOldCheckedData = function (data) {\n        var _this = this;\n        var dataManager = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(data);\n        var childItems = dataManager.executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('isChecked', 'equal', 'true', true));\n        var uncheckedItems = dataManager.executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('isChecked', 'equal', 'false', true));\n        if (uncheckedItems.length > 0) {\n            var index = this.OldCheckedData.findIndex(function (e) { return e['id'] === uncheckedItems[0]['id']; });\n            if (index !== -1) {\n                this.OldCheckedData.splice(index, 1);\n                var childNodes = this.OldCheckedData.filter(function (e) { return e['parentID'] === uncheckedItems[0]['id']; });\n                if (childNodes.length > 0) {\n                    childNodes.forEach(function (child) {\n                        var childIndex = _this.OldCheckedData.findIndex(function (e) { return e['id'] === child.id; });\n                        if (childIndex !== -1) {\n                            _this.OldCheckedData.splice(childIndex, 1);\n                        }\n                    });\n                }\n                return;\n            }\n        }\n        if (childItems.length > 0) {\n            var index = this.OldCheckedData.findIndex(function (e) { return e['id'] === childItems[0]['id']; });\n            if (index === -1) {\n                this.OldCheckedData.push(childItems[0]);\n                return;\n            }\n        }\n    };\n    TreeView.prototype.triggerClickEvent = function (e, li) {\n        var eventArgs = {\n            event: e,\n            node: li\n        };\n        this.trigger('nodeClicked', eventArgs);\n    };\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n        var _this = this;\n        this.renderReactTemplates();\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], EXPANDABLE);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], COLLAPSIBLE);\n                var start_1 = 0;\n                var end_1 = 0;\n                var ul_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, currLi);\n                var liEle_1 = currLi;\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.setHeight(liEle_1, ul_1);\n                    var activeElement_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTITEM + '.' + ACTIVE, currLi);\n                    this.aniObj.animate(ul_1, {\n                        name: this.animation.expand.effect,\n                        duration: (this.animation.expand.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 400 : this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: function () {\n                            liEle_1.style.overflow = 'hidden';\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start_1 = liEle_1.offsetHeight;\n                            end_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: function (args) {\n                            args.element.style.display = 'block';\n                            _this.animateHeight(args, start_1, end_1);\n                        },\n                        end: function (args) {\n                            args.element.style.display = 'block';\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            _this.expandedNode(liEle_1, ul_1, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle_1, ul_1, icon);\n                }\n            }\n        }\n        else {\n            var ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    };\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], PROCESS);\n        this.addExpand(currLi);\n        if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n            this.updateWrap(currLi);\n            this.isFirstRender = false;\n        }\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.expandArgs.isInteracted = this.isInteracted;\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n        if (this.isHiddenItem) {\n            this.collapseAll([this.getNodeData(currLi).id]);\n        }\n    };\n    TreeView.prototype.addExpand = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([liEle], NODECOLLAPSED);\n        var id = liEle.getAttribute('data-uid');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) && this.expandedNodes.indexOf(id) === -1) {\n            this.expandedNodes.push(id);\n        }\n    };\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], PROCESS);\n        }\n        var colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.isInteracted = colArgs.isInteracted;\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], PROCESS);\n                }\n                else {\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    };\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n        var _this = this;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], COLLAPSIBLE);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], EXPANDABLE);\n        var start = 0;\n        var end = 0;\n        var ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, currLi);\n        var liEle = currLi;\n        var activeElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: (this.animation.collapse.duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 400 : this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: function () {\n                    liEle.style.overflow = 'hidden';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: function (args) {\n                    _this.animateHeight(args, start, end);\n                },\n                end: function (args) {\n                    args.element.style.display = 'none';\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    };\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], PROCESS);\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(liEle, null);\n            colArgs.isInteracted = this.isInteracted;\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    };\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.expandedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.disableExpandAttr = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], NODECOLLAPSED);\n    };\n    TreeView.prototype.setHeight = function (currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    };\n    TreeView.prototype.animateHeight = function (args, start, end) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.parentElement)) {\n            return;\n        }\n        var remaining = (args.duration - args.timeStamp) / args.duration;\n        var currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    };\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded, isFromExpandAll) {\n        var _this = this;\n        var eicon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, parentLi);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        var childItems;\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper_2) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper_2.dataSource)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && this.isOffline) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n            }\n            else {\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n                    _this.treeList.pop();\n                    childItems = e.result;\n                    if (_this.dataType === 1) {\n                        _this.dataType = 2;\n                    }\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'), false, parseFloat(parentLi.getAttribute('aria-level')) + 1);\n            this.currentLoadData = this.getSortedData(childItems);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childItems) || childItems.length === 0) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(eicon);\n                if (eicon.classList.contains(LOAD)) {\n                    this.hideSpinner(eicon);\n                }\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi, isFromExpandAll);\n                this.finalizeNode(parentLi, isFromExpandAll, expandChild);\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded, isFromExpandAll);\n            }\n        }\n    };\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childItems) || childItems.length === 0) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !this.isOffline) {\n                var id = parentLi.getAttribute('data-uid');\n                var nodeData = this.getNodeObject(id);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(_syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (expandChild) {\n            this.expandedNodes.push(parentLi.getAttribute('data-uid'));\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.disableTreeNodes = function (childItems) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.disableNode) || this.disableNode.length === 0) {\n            return;\n        }\n        var i = 0;\n        while (i < childItems.length) {\n            var id = childItems[parseInt(i.toString(), 10)][this.fields.id]\n                ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString()\n                : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    };\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     *\n     * @param {Object[]} nodes - Array of nodes\n     * @returns {void}\n     */\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectedNodes) || this.selectedNodes.length === 0) {\n            return;\n        }\n        var i;\n        for (i = 0; i < nodes.length; i++) {\n            var id = nodes[parseInt(i.toString(), 10)][this.fields.id]\n                ? nodes[parseInt(i.toString(), 10)][this.fields.id].toString()\n                : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    };\n    TreeView.prototype.ensureCheckNode = function (element, isFromExpandAll) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element, null, isFromExpandAll);\n                if (isFromExpandAll ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECK, this.element) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + INDETERMINATE, this.element)) : true) {\n                    this.ensureParentCheckState(element);\n                }\n            }\n        }\n        this.currentLoadData = null;\n    };\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildMapper = function (mapper) {\n        return (typeof mapper.child === 'string' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.child)) ? mapper : mapper.child;\n    };\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot, level) {\n        var _this = this;\n        if (isRoot === void 0) { isRoot = false; }\n        var childNodes;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj)) {\n            return childNodes;\n        }\n        if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        if (typeof this.fields.child === 'string') {\n            return this.findChildNodes(obj, this.fields.id, parentId) || this.findNestedChildNodes(obj, parentId, level) || [];\n        }\n        if (this.isChildObject()) {\n            var tempField = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(level) ? this.fields : this.fields.child;\n            var i = 1;\n            while (i < level) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempField.child)) {\n                    tempField = tempField.child;\n                }\n                else {\n                    break;\n                }\n                i++;\n            }\n            this.updateListProp(tempField);\n            var index = obj.findIndex(function (data) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(_this.fields.id, data) &&\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(_this.fields.id, data).toString() === parentId;\n            });\n            if (index !== -1) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(index.toString(), 10)]);\n            }\n            if (index === -1) {\n                for (var i_1 = 0, objlen = obj.length; i_1 < objlen; i_1++) {\n                    var tempArray = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i_1.toString(), 10)]);\n                    var childIndex = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempArray)\n                        ? tempArray.findIndex(function (data) {\n                            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(_this.fields.child.id, data) &&\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(_this.fields.child.id, data).toString() === parentId;\n                        })\n                        : -1;\n                    if (childIndex !== -1) {\n                        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', tempArray[parseInt(childIndex.toString(), 10)]);\n                    }\n                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempArray)) {\n                        childNodes = this.getChildNodes(tempArray, parentId, false, level);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.findChildNodes = function (items, idField, parentId) {\n        var index = items.findIndex(function (data) {\n            var value = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(idField, data);\n            return value && value.toString() === parentId;\n        });\n        if (index !== -1) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child, items[index]);\n        }\n        return null;\n    };\n    TreeView.prototype.findNestedChildNodes = function (items, parentId, level) {\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var tempArray = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child, item);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempArray)) {\n                var childNodes = this.findChildNodes(tempArray, this.fields.id, parentId);\n                if (childNodes) {\n                    return childNodes;\n                }\n                var nestedChildNodes = this.getChildNodes(tempArray, parentId, false, level);\n                if (nestedChildNodes && nestedChildNodes.length > 0) {\n                    return nestedChildNodes;\n                }\n            }\n        }\n        return undefined;\n    };\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n        var childNodes;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {\n            return childNodes;\n        }\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data[parseInt(i.toString(), 10)][0]) &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.parentID, data[parseInt(i.toString(), 10)][0]))) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.parentID, data[parseInt(i.toString(), 10)][0]).toString() === parentId) {\n                    return data[parseInt(i.toString(), 10)];\n                }\n            }\n            else if (isRoot) {\n                return data[parseInt(i.toString(), 10)];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded, isFromExpandAll) {\n        if (expandChild) {\n            var cIcons = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + EXPANDABLE, element);\n            for (var i = 0, len = cIcons.length; i < len; i++) {\n                var icon = cIcons[parseInt(i.toString(), 10)];\n                if (element.querySelector('.e-icons') !== cIcons[parseInt(i.toString(), 10)]) {\n                    var curLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded, isFromExpandAll);\n                }\n            }\n        }\n    };\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    };\n    TreeView.prototype.isActive = function (li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    };\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(li) || (!this.allowMultiSelection && this.isActive(li) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if ((!observedArgs.cancel) && !observedArgs.node.classList.contains(PREVENTSELECT)) {\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    };\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !(e.ctrlKey || e.metaKey))))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            var startIndex = this.liList.indexOf(this.startNode);\n            var endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex; i <= endIndex; i++) {\n                var currNode = this.liList[parseInt(i.toString(), 10)];\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n            this.isRightClick = false;\n        }\n        this.isRightClick = false;\n    };\n    TreeView.prototype.unselectNode = function (li, e) {\n        var _this = this;\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    };\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.setFocusElement = function (li) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(li)) {\n            var focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([focusedNode], FOCUS);\n                focusedNode.setAttribute('tabindex', '-1');\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([li], FOCUS);\n            li.setAttribute('tabindex', '0');\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(li, 'blur', this.focusOut, this);\n            this.updateIdAttr(focusedNode, li);\n        }\n    };\n    TreeView.prototype.addSelect = function (liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], ACTIVE);\n        var id = liEle.getAttribute('data-uid');\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeSelect = function (liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([liEle], ACTIVE);\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.removeSelectAll = function () {\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n            var ele = selectedLI_1[_i];\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    };\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) ? false : true, node: currLi, nodeData: nodeData };\n    };\n    TreeView.prototype.setExpandOnType = function () {\n        this.expandOnType = (this.expandOn === 'Auto') ? (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    };\n    TreeView.prototype.expandHandler = function (e) {\n        var target = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && e.originalEvent.changedTouches && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos\n            ? document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY)\n            : e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM), e);\n        }\n    };\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\n        var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            var classList = icon.classList;\n            if (classList.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    };\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback, isFromExpandAll) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.isInteracted = this.expandArgs.isInteracted;\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], PROCESS);\n                }\n                else {\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback, isFromExpandAll);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback, isFromExpandAll);\n        }\n    };\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback, isFromExpandAll) {\n        var ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.isFirstRender = true;\n            this.renderChildNodes(currLi, expandChild, callback, null, isFromExpandAll);\n            var liEles = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM, currLi);\n            for (var i = 0; i < liEles.length; i++) {\n                var id = this.getId(liEles[parseInt(i.toString(), 10)]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    var icon_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EXPANDABLE, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, liEles[parseInt(i.toString(), 10)]));\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon_1)) {\n                        this.expandAction(liEles[parseInt(i.toString(), 10)], icon_1, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    };\n    TreeView.prototype.keyActionHandler = function (e) {\n        var _this = this;\n        var target = e.target;\n        var focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            var inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n            }\n            return;\n        }\n        e.preventDefault();\n        var eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode\n        };\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (_this.showCheckBox) {\n                            _this.checkNode(e);\n                        }\n                        else {\n                            _this.toggleSelect(focusedNode, e);\n                        }\n                        break;\n                    case 'moveRight':\n                        _this.openNode(_this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        _this.openNode(_this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        _this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        _this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        _this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        _this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        _this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        _this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                    case 'shiftSpace':\n                    case 'ctrlSpace':\n                        _this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            _this.createTextbox(focusedNode);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (_this.allowMultiSelection) {\n                            var sNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n                            _this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    };\n    TreeView.prototype.navigateToFocus = function (isUp) {\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        var pos = focusNode.getBoundingClientRect();\n        var parent = this.getScrollParent(this.element);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent)) {\n            var parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        var isVisible = this.isVisibleInViewport(focusNode);\n        if (!isVisible) {\n            focusNode.scrollIntoView(isUp);\n        }\n    };\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n        var pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    };\n    TreeView.prototype.getScrollParent = function (node) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    };\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n        if (this.allowMultiSelection) {\n            var focusedNode = this.getFocusedNode();\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    };\n    TreeView.prototype.checkNode = function (e) {\n        var focusedNode = this.getFocusedNode();\n        var checkWrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXWRAP, focusedNode);\n        var isChecked = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName('e-checkbox-disabled').length === 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    };\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n        var _this = this;\n        var currLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        var ariaState = !isCheck ? 'true' : 'false';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ariaState)) {\n            currLi.setAttribute('aria-checked', ariaState);\n        }\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    };\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            if (this.autoCheck) {\n                var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n                if (child !== null) {\n                    this.allCheckNode(child, this.checkedElement, null, null, false);\n                }\n                else {\n                    child = null;\n                }\n            }\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.updateOldCheckedData([this.getNodeData(li)]);\n            this.ensureParentCheckState((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(li, '.' + PARENTITEM), '.' + LISTITEM));\n            var doCheck = void 0;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     *\n     * @param {Element} li - The list item element\n     * @param {boolean} [doCheck] - Optional parameter to specify whether to perform a check\n     * @returns {void}\n     */\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\n        var _this = this;\n        var childElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, li);\n        var parentIndex = li.getAttribute('data-uid');\n        var mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.parentID, 'equal', parentIndex, true));\n            var childMatchesCheckedNodes = resultData.filter(function (item) {\n                return _this.checkedNodes.indexOf(item[mapper.id].toString()) !== -1;\n            }, this);\n            if (this.checkedNodes.indexOf(parentIndex) !== -1 && childMatchesCheckedNodes.length !== resultData.length && this.isFilter) {\n                if (childMatchesCheckedNodes.length > 0) {\n                    resultData = childMatchesCheckedNodes;\n                }\n            }\n            for (var i = 0; i < resultData.length; i++) {\n                var resultId = resultData[parseInt(i.toString(), 10)][this.fields.id]\n                    ? resultData[parseInt(i.toString(), 10)][this.fields.id].toString()\n                    : null;\n                var isCheck = resultData[parseInt(i.toString(), 10)][this.fields.isChecked]\n                    ? resultData[parseInt(i.toString(), 10)][this.fields.isChecked].toString()\n                    : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkDisabledState(resultId, resultData[i]);\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                var checkedData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < checkedData.length; i++) {\n                    var id = checkedData[parseInt(i.toString(), 10)][this.fields.id]\n                        ? checkedData[parseInt(i.toString(), 10)][this.fields.id].toString()\n                        : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (var i = 0; i < this.treeData.length; i++) {\n                    var checkedId = this.treeData[parseInt(i.toString(), 10)][this.fields.id]\n                        ? this.treeData[parseInt(i.toString(), 10)][this.fields.id].toString()\n                        : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkDisabledState(checkedId, this.treeData[i]);\n                    }\n                }\n            }\n        }\n        else {\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                var filteredChildItems = childItems.filter(function (item) {\n                    var itemValue = String(item[Object.keys(item)[0]]);\n                    return _this.checkedNodes.indexOf(itemValue) !== -1;\n                });\n                if (filteredChildItems.length > 0 && childItems.length && this.isFilter) {\n                    childItems = filteredChildItems;\n                }\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    };\n    TreeView.prototype.checkDisabledState = function (resultId, currentItem) {\n        var requiresUpdate = this.checkDisabledChildren;\n        if (!requiresUpdate) {\n            var shouldPreventUpdate = true;\n            if (this.loadOnDemand && this.fields.htmlAttributes) {\n                currentItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentItem) ? currentItem : this.getNodeObject(resultId);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentItem)) {\n                    var htmlAttributes = currentItem[this.fields.htmlAttributes];\n                    if (htmlAttributes && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(htmlAttributes.class) && htmlAttributes.class.indexOf(DISABLE) !== -1) {\n                        shouldPreventUpdate = false;\n                    }\n                }\n            }\n            var liElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)(\"[data-uid=\\\"\" + resultId + \"\\\"]\", this.element);\n            requiresUpdate = liElement ? !liElement.classList.contains(DISABLE)\n                : (this.disableNode.indexOf(resultId) === -1 && shouldPreventUpdate);\n        }\n        if (requiresUpdate) {\n            this.checkedNodes.push(resultId);\n        }\n    };\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var childId = childItems[parseInt(i.toString(), 10)][this.fields.id]\n                ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString()\n                : null;\n            var childIsCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked]\n                ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString()\n                : null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkDisabledState(childId, childItems[i]);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            var subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     *\n     * @param {Object[]} childItems - Array of child items\n     * @param {string} parent - Parent identifier\n     * @param {Element} childElement - Child DOM element\n     * @param {boolean} [doCheck] - Optional parameter to specify whether to perform a check\n     * @returns {void}\n     */\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var checkedChild = childItems[parseInt(i.toString(), 10)][this.fields.id] ? childItems[parseInt(i.toString(), 10)][this.fields.id].toString() : '';\n            var isCheck = childItems[parseInt(i.toString(), 10)][this.fields.isChecked]\n                ? childItems[parseInt(i.toString(), 10)][this.fields.isChecked].toString()\n                : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkDisabledState(checkedChild, childItems[i]);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkDisabledState(checkedChild, childItems[i]);\n                    }\n                }\n            }\n            var subChild = this.getChildNodes([childItems[parseInt(i.toString(), 10)]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    };\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\n                var childId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, child[parseInt(length_1.toString(), 10)]);\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(child[parseInt(length_1.toString(), 10)][this.fields.isChecked]) &&\n                        newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        if (child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2) {\n                            newCheck.push(childId.toString());\n                        }\n                        else {\n                            childCheck = null;\n                        }\n                        childCheck = (child[parseInt(length_1.toString(), 10)][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                var hierChildId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), child[parseInt(length_1.toString(), 10)]);\n                //Gets if any next level children are available for child nodes\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.hasChildren, child[parseInt(length_1.toString(), 10)]) === true || hierChildId) {\n                    var id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, child[parseInt(length_1.toString(), 10)]);\n                    var childId_1 = void 0;\n                    if (this.dataType === 1) {\n                        childId_1 = this.getChildNodes(this.treeData, id.toString());\n                    }\n                    else {\n                        childId_1 = hierChildId;\n                    }\n                    if (childId_1) {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validateCheck)) {\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck);\n                        }\n                        else {\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n                        }\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    };\n    TreeView.prototype.openNode = function (toBeOpened, e) {\n        var focusedNode = this.getFocusedNode();\n        var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                var parentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    };\n    TreeView.prototype.navigateNode = function (isTowards) {\n        var focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    };\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\n        var focusedNode = this.getFocusedNode();\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    };\n    TreeView.prototype.getFocusedNode = function () {\n        var selectedItem;\n        var fNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTITEM + '[tabindex=\"0\"]', this.element);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fNode)) {\n            var ariaChecked = fNode.getAttribute('aria-checked');\n            if (ariaChecked === 'mixed' || ariaChecked === 'false') {\n                this.isFilter = false;\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fNode)) {\n            selectedItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTITEM, this.element);\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fNode) ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    };\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            var lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    };\n    TreeView.prototype.getNextNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var nextNode;\n        do {\n            index++;\n            nextNode = this.liList[parseInt(index.toString(), 10)];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextNode)) {\n                return li;\n            }\n        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(nextNode));\n        return nextNode;\n    };\n    TreeView.prototype.getPrevNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var prevNode;\n        do {\n            index--;\n            prevNode = this.liList[parseInt(index.toString(), 10)];\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevNode)) {\n                return li;\n            }\n        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(prevNode));\n        return prevNode;\n    };\n    TreeView.prototype.getRootNode = function () {\n        var index = 0;\n        var rootNode;\n        do {\n            rootNode = this.liList[parseInt(index.toString(), 10)];\n            index++;\n        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(rootNode));\n        return rootNode;\n    };\n    TreeView.prototype.getEndNode = function () {\n        var index = this.liList.length - 1;\n        var endNode;\n        do {\n            endNode = this.liList[parseInt(index.toString(), 10)];\n            index--;\n        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(endNode));\n        return endNode;\n    };\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([preNode], FOCUS);\n        preNode.setAttribute('tabindex', '-1');\n        if (!nextNode.classList.contains('e-disable')) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([nextNode], FOCUS);\n            nextNode.setAttribute('tabindex', '0');\n            nextNode.focus();\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(nextNode, 'blur', this.focusOut, this);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    };\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    };\n    TreeView.prototype.focusIn = function () {\n        if (!this.mouseDownStatus) {\n            var focusedElement = this.getFocusedNode();\n            if (focusedElement.classList.contains('e-disable')) {\n                focusedElement.setAttribute('tabindex', '-1');\n                this.navigateNode(true);\n            }\n            else {\n                focusedElement.setAttribute('tabindex', '0');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([focusedElement], FOCUS);\n                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(focusedElement, 'blur', this.focusOut, this);\n            }\n            this.mouseDownStatus = false;\n        }\n    };\n    TreeView.prototype.focusOut = function (event) {\n        var focusedElement = this.getFocusedNode();\n        if (event.target === focusedElement) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([focusedElement], FOCUS);\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(focusedElement, 'blur', this.focusOut);\n        }\n    };\n    TreeView.prototype.onMouseOver = function (e) {\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            return;\n        }\n        var target = e.target;\n        var classList = target.classList;\n        var currentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    };\n    TreeView.prototype.setHover = function (li) {\n        if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {\n            this.removeHover();\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([li], HOVER);\n        }\n    };\n    TreeView.prototype.onMouseLeave = function () {\n        this.removeHover();\n    };\n    TreeView.prototype.removeHover = function () {\n        var hoveredNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(hoveredNode, HOVER);\n        }\n    };\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currLi) && currLi.classList.contains(LISTITEM) &&\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(currLi, '.' + CONTROL)) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            var id = currLi.getAttribute('data-uid');\n            var text = this.getText(currLi, fromDS);\n            var pNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(currLi.parentNode, '.' + LISTITEM);\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\n            var selected = currLi.classList.contains(ACTIVE);\n            var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EXPANDABLE, currLi) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n            var checked = null;\n            var checkboxElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CHECKBOXWRAP, currLi);\n            if (this.showCheckBox && checkboxElement) {\n                checked = currLi.getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, selectable: selectable, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    };\n    TreeView.prototype.getText = function (currLi, fromDS) {\n        if (fromDS) {\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            var level = parseFloat(currLi.getAttribute('aria-level'));\n            var nodeFields = this.getFields(this.fields, level, 1);\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(nodeFields.text, nodeData);\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTTEXT, currLi).textContent;\n    };\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    };\n    TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n        var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)(tempArr, textEle);\n        }\n    };\n    TreeView.prototype.destroyTemplate = function (liEle) {\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n    };\n    TreeView.prototype.reRenderNodes = function () {\n        this.updateListProp(this.fields);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nodeTemplateFn)) {\n            this.clearTemplate();\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding(true);\n    };\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(oldClass) && oldClass !== '') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldClass.split(' '));\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newClass) && newClass !== '') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], newClass.split(' '));\n        }\n    };\n    TreeView.prototype.editingHandler = function (e) {\n        var target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n            this.createTextbox(liEle);\n        }\n    };\n    TreeView.prototype.createTextbox = function (liEle) {\n        var _this = this;\n        var oldInpEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        var textEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                var inpWidth = textEle.offsetWidth + 5;\n                var widthSize_1 = inpWidth + 'px';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], EDITING);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.nodeTemplateFn)) {\n                    _this.destroyTemplate(liEle);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (_this.isReact) {\n                    setTimeout(function () {\n                        _this.renderTextBox(eventArgs, textEle, widthSize_1);\n                    }, 5);\n                }\n                else {\n                    _this.renderTextBox(eventArgs, textEle, widthSize_1);\n                }\n            }\n        });\n    };\n    TreeView.prototype.renderTextBox = function (eventArgs, textEle, widthSize) {\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TREEINPUT, textEle);\n        this.inputObj = _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.Input.createInput({\n            element: inpEle,\n            properties: {\n                enableRtl: this.enableRtl\n            }\n        }, this.createElement);\n        this.inputObj.container.style.width = widthSize;\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n        this.wireInputEvents(inpEle);\n    };\n    TreeView.prototype.updateOldText = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.editFields.text, this.editData);\n    };\n    TreeView.prototype.inputFocusOut = function (e) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        var target = e.target;\n        var newText = target.value;\n        var txtEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTTEXT);\n        var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.inputObj.container);\n        _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.Input.destroy({ element: target, properties: this.properties });\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !this.isOffline) {\n            this.crudOperation('update', null, liEle, newText, null, null, true);\n        }\n        else {\n            this.appendNewText(liEle, txtEle, newText, true);\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(target, 'blur', this.inputFocusOut);\n        this.inputObj = null;\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(target);\n        target = null;\n    };\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n        var _this = this;\n        var eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            _this.updateText(liEle, txtEle, newText, isInput);\n            if (observedArgs.oldText !== newText) {\n                _this.triggerEvent('nodeEdited', [_this.getNode(liEle)]);\n            }\n        });\n    };\n    TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n        var newData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.editFields.text, newText, this.editData);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nodeTemplateFn)) {\n            txtEle.innerText = '';\n            var dataId = liEle.getAttribute('data-uid');\n            this.renderNodeTemplate(newData, txtEle, dataId);\n            this.renderReactTemplates();\n        }\n        else {\n            if (this.enableHtmlSanitizer) {\n                txtEle.innerText = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(newText);\n            }\n            else {\n                txtEle.innerHTML = newText;\n            }\n        }\n        if (isInput) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([liEle], EDITING);\n            liEle.focus();\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(liEle, 'blur', this.focusOut, this);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], FOCUS);\n        }\n        if (this.allowTextWrap) {\n            this.calculateWrap(liEle);\n        }\n    };\n    TreeView.prototype.getElement = function (ele) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(ele);\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getId = function (ele) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getElement)(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n        var data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    };\n    TreeView.prototype.getNodeObject = function (id) {\n        var childNodes;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                var dataId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, this.treeData[parseInt(i.toString(), 10)]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.treeData[parseInt(i.toString(), 10)]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dataId) && dataId.toString() === id) {\n                    return this.treeData[parseInt(i.toString(), 10)];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n        var newList;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj)) {\n            return newList;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var dataId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.id, obj[parseInt(i.toString(), 10)]);\n            if (obj[parseInt(i.toString(), 10)] && dataId && dataId.toString() === id) {\n                return obj[parseInt(i.toString(), 10)];\n            }\n            else if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]))) {\n                var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]))) {\n                var child = 'child';\n                newList = this.getChildNodeObject((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.isChildObject()) {\n                var children = 'child';\n                var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(children, obj[parseInt(i.toString(), 10)]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    };\n    TreeView.prototype.setDragAndDrop = function (toBind) {\n        if (toBind && !this.disabled) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    };\n    TreeView.prototype.initializeDrag = function () {\n        var _this = this;\n        var virtualEle;\n        this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragArea: this.dragArea,\n            dragTarget: '.' + TEXTWRAP,\n            enableTapHold: true,\n            tapHoldThreshold: 100,\n            helper: function (e) {\n                _this.dragTarget = e.sender.target;\n                var dragRoot = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(_this.dragTarget, '.' + ROOT);\n                var dragWrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(_this.dragTarget, '.' + TEXTWRAP);\n                _this.dragLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(_this.dragTarget, '.' + LISTITEM);\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = _this.dragTarget.nextElementSibling;\n                }\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                var cloneEle = (dragWrap.cloneNode(true));\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, cloneEle))) {\n                    var icon = _this.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n                virtualEle = _this.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                var nLen = _this.selectedNodes.length;\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n                    var cNode = _this.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                _this.dragData = _this.getNodeData(_this.dragLi);\n                return virtualEle;\n            },\n            dragStart: function (e) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([_this.element], DRAGGING);\n                var listItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    _this.dragObj.intDestroy(e.event);\n                    _this.dragCancelAction(virtualEle);\n                }\n                else {\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n                        if (observedArgs.cancel) {\n                            _this.dragObj.intDestroy(e.event);\n                            _this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            _this.dragStartAction = true;\n                        }\n                    });\n                }\n            },\n            drag: function (e) {\n                _this.dragObj.setProperties({ cursorAt: { top: (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.event.targetTouches) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 60 : -20 } });\n                _this.dragAction(e, virtualEle);\n            },\n            dragStop: function (e) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([_this.element], DRAGGING);\n                if (!e.target.classList.contains('e-sibling')) {\n                    _this.removeVirtualEle();\n                }\n                var dropTarget = e.target;\n                var preventTargetExpand = false;\n                var dropRoot = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + DROPPABLE));\n                // eslint-disable-next-line\n                var isHelperElement = true;\n                if (!dropTarget || !dropRoot) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(e.helper);\n                    document.body.style.cursor = '';\n                }\n                var listItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n                    _this.dragParent = observedArgs.draggedParentNode;\n                    _this.preventExpand = observedArgs.preventTargetExpand;\n                    if (observedArgs.cancel) {\n                        if (e.helper.parentNode) {\n                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(e.helper);\n                        }\n                        document.body.style.cursor = '';\n                        isHelperElement = false;\n                        if (dropTarget.classList.contains('e-sibling')) {\n                            _this.removeVirtualEle();\n                        }\n                    }\n                    _this.dragStartAction = false;\n                });\n            }\n        });\n        this.dropObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Droppable(this.element, {\n            out: function (e) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) && !e.target.classList.contains(SIBLING) &&\n                    (_this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT))) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: function () {\n                document.body.style.cursor = '';\n            },\n            drop: function (e) {\n                _this.dropAction(e);\n                _this.removeVirtualEle();\n            }\n        });\n    };\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(virtualEle);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], DRAGGING);\n        this.dragStartAction = false;\n    };\n    TreeView.prototype.getOffsetX = function (event, target) {\n        var touchList = event.changedTouches;\n        if (touchList && touchList.length > 0) {\n            return touchList[0].clientX - target.getBoundingClientRect().left;\n        }\n        else {\n            return event.offsetX;\n        }\n    };\n    TreeView.prototype.getOffsetY = function (event, target) {\n        var touchList = event.changedTouches;\n        if (touchList && touchList.length > 0) {\n            return touchList[0].clientY - target.getBoundingClientRect().top;\n        }\n        else {\n            return event.offsetY;\n        }\n    };\n    TreeView.prototype.dragAction = function (e, virtualEle) {\n        var dropRoot = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + DROPPABLE);\n        var dropWrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + TEXTWRAP);\n        var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, virtualEle);\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.isDropIn = false;\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        var classList = e.target.classList;\n        var event = e.event;\n        var offsetY = this.getOffsetY(event, e.target);\n        var offsetX = this.getOffsetX(event, e.target);\n        if (this.fullRowSelect && !dropWrap && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(classList) && classList.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            var dropLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + LISTITEM);\n            var checkWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + CHECKBOXWRAP);\n            var collapse = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + COLLAPSIBLE);\n            var expand = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if (this.hasTemplate && dropLi) {\n                    var templateTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n                    if ((e && (!expand && !collapse) && offsetY < 7 && !checkWrapper) ||\n                        (((expand && offsetY < 5) || (collapse && offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((e && (!expand && !collapse) &&\n                        !checkWrapper && templateTarget && offsetY > templateTarget.offsetHeight - 10) ||\n                        ((expand && offsetY > 19) || (collapse && offsetX > 19))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPIN);\n                        this.isDropIn = true;\n                    }\n                }\n                else {\n                    if ((dropLi && e && (!expand && !collapse) && (offsetY < 7) && !checkWrapper) ||\n                        (((expand && offsetY < 5) || (collapse && offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((dropLi && e && (!expand && !collapse) &&\n                        (e.target.offsetHeight > 0 && offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) ||\n                        (((expand && offsetY > 19) || (collapse && offsetX > 19)))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPIN);\n                        this.isDropIn = true;\n                    }\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPNEXT);\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPOUT);\n            }\n        }\n        else {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        var listItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-list-item');\n        var level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], eventArgs.dropIndicator);\n        }\n    };\n    TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([icon], DROPNEXT);\n        var virEle = this.createElement('div', { className: SIBLING });\n        dropLi.insertBefore(virEle, dropLi.children[parseInt(index.toString(), 10)]);\n    };\n    TreeView.prototype.dropAction = function (e) {\n        var event = e.event;\n        var offsetY = this.getOffsetY(event, e.target);\n        var dropTarget = e.target;\n        var dragObj;\n        var level;\n        var drop = false;\n        var nodeData = [];\n        var liArray = [];\n        var dragInstance = e.dragData.draggable;\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[parseInt(i.toString(), 10)] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[parseInt(i.toString(), 10)];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            var dragTarget = dragObj.dragTarget;\n            var dragLi = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragTarget, '.' + LISTITEM));\n            var dropLi = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + LISTITEM));\n            liArray.push(dragLi);\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(e.droppedElement);\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                var sNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ACTIVE, dragObj.element);\n                liArray = sNodes;\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) ||\n                            this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (var i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[parseInt(i.toString(), 10)]) ||\n                            this.isDescendant(sNodes[parseInt(i.toString(), 10)], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[parseInt(i.toString(), 10)], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager === false) {\n            this.preventExpand = false;\n        }\n        for (var i = 0; i < liArray.length; i++) {\n            nodeData.push(this.getNode(liArray[parseInt(i.toString(), 10)]));\n        }\n        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        if (dragObj.element.id !== this.element.id) {\n            dragObj.triggerEvent('nodeDropped', nodeData);\n            this.isNodeDropped = true;\n            this.fields.dataSource = this.treeData;\n        }\n        this.triggerEvent('nodeDropped', nodeData);\n    };\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        var checkWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + CHECKBOXWRAP);\n        var collapse = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + COLLAPSIBLE);\n        var expand = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, null, dropTarget);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true, dropTarget);\n        }\n        if (this.showCheckBox) {\n            this.ensureIndeterminate();\n        }\n    };\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n        var dropUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropLi, '.' + PARENTITEM);\n        var dragParentUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragLi, '.' + PARENTITEM);\n        var dragParentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragParentUl, '.' + LISTITEM);\n        var pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            var target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck, dropTarget) {\n        var dragParentUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragLi, '.' + PARENTITEM);\n        var dragParentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragParentUl, '.' + LISTITEM);\n        var dropParentUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropLi, '.' + PARENTITEM);\n        var templateTarget;\n        if (e && e.target) {\n            templateTarget = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n        }\n        if (e && ((pos < 7 && !dropTarget.classList.contains('e-sibling')) || (dropTarget.classList.contains('e-sibling') && !dropLi.lastChild.classList.contains('e-sibling'))) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck && !this.hasTemplate) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            var dropUl = this.expandParent(dropLi);\n            var childLi = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n        var dropParentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropUl, '.' + LISTITEM);\n        var id = this.getId(dragLi);\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        var refId = this.getId(dropLi);\n        var index = this.getDataPos(this.treeData, this.fields, refId);\n        var parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            var pos = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? this.treeData.length : (pre ? index : index + 1);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                var childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (var i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[parseInt(i.toString(), 10)]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    };\n    TreeView.prototype.expandParent = function (dropLi) {\n        var dropIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + EXPANDABLE + ', div.' + COLLAPSIBLE, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        var dropUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, dropLi);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropUl) && (this.preventExpand && !(dropLi.getAttribute('aria-expanded') === 'true'))) {\n            dropUl.style.display = 'none';\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropUl) && this.preventExpand === true) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropIcon)) {\n                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + EXPANDABLE + ', div.' + COLLAPSIBLE, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], COLLAPSIBLE);\n            }\n            else {\n                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropUl)) {\n            var args = this.expandArgs;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) || (args && args.name !== 'nodeExpanding')) {\n                this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropIcon)) {\n                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + EXPANDABLE + ', div.' + COLLAPSIBLE, dropLi);\n            if (icon) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], EXPANDABLE);\n            }\n            else {\n                _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, dropLi);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([icon], EXPANDABLE);\n            }\n            dropUl = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        var collapseIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + COLLAPSIBLE, dropLi);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropUl) && collapseIcon && (this.preventExpand && !(dropLi.getAttribute('aria-expanded') === 'true'))) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([collapseIcon], COLLAPSIBLE);\n            dropLi.setAttribute('aria-expanded', 'false');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([collapseIcon], EXPANDABLE);\n        }\n        return dropUl;\n    };\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            var dragIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, dragParentLi);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(dragParentUl);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(dragIcon);\n            var parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    };\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, dragLi), level + 1);\n    };\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            var cNodes = element.childNodes;\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[parseInt(i.toString(), 10)];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    };\n    TreeView.prototype.renderVirtualEle = function (e) {\n        var pre;\n        var event = e.event;\n        var offsetY = this.getOffsetY(event, e.target);\n        if (offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (offsetY < 2) {\n            pre = true;\n        }\n        var virEle = this.createElement('div', { className: SIBLING });\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[parseInt(index.toString(), 10)]);\n    };\n    TreeView.prototype.removeVirtualEle = function () {\n        var sibEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + SIBLING);\n        if (sibEle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(sibEle);\n        }\n    };\n    TreeView.prototype.destroyDrag = function () {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    };\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        var dropLi = dropTarget ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropTarget, '.' + LISTITEM) : null;\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\n        var draggedNode = obj ? obj.dragLi : dragNode;\n        var draggedNodeData = obj ? obj.dragData : null;\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        var dragLiParent = obj.dragLi.parentElement;\n        var dragParent = obj.dragLi ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragLiParent, '.' + LISTITEM) : null;\n        var targetParent = null;\n        var indexValue = null;\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        var iconClass = null;\n        var node = (drop === true) ? draggedNode : dropLi;\n        var index = node ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(node, '.e-list-parent') : null;\n        var i = 0;\n        var position = null;\n        dragParent = (obj.dragLi && dragParent === null) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + ICON, cloneEle).classList.contains(iconCss[parseInt(i.toString(), 10)])) {\n                    iconClass = iconCss[parseInt(i.toString(), 10)];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            var dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[parseInt(i.toString(), 10)] === draggedNode && dropLi !== draggedNode)\n                    ? ++dropTar\n                    : dropTar;\n                if ((drop !== true && index.children[parseInt(i.toString(), 10)].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[parseInt(i.toString(), 10)] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n            position = this.isDropIn ? 'Inside' : ((event.offsetY < 7) ? 'Before' : 'After');\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                var parent_2 = targetParent ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-list-parent', targetParent) : null;\n                indexValue = (parent_2) ? parent_2.children.length : 0;\n                if (!(this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) && parent_2 === null && targetParent) {\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent_3) ? parent_3.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n            position: position\n        };\n    };\n    TreeView.prototype.addFullRow = function (toAdd) {\n        var len = this.liList.length;\n        if (toAdd) {\n            for (var i = 0; i < len; i++) {\n                this.createFullRow(this.liList[parseInt(i.toString(), 10)]);\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var rowDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FULLROW, this.liList[parseInt(i.toString(), 10)]);\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(rowDiv);\n            }\n        }\n    };\n    TreeView.prototype.createFullRow = function (item) {\n        var rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    };\n    TreeView.prototype.addMultiSelect = function (toAdd) {\n        if (toAdd) {\n            var liEles = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n                var ele = liEles_1[_i];\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            var liEles = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n                var ele = liEles_2[_a];\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    };\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes, currentLevel) {\n        currentLevel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentLevel) ? 1 : currentLevel;\n        if (level > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[parseInt(i.toString(), 10)];\n                var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + COLLAPSIBLE, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, liEle));\n                if (currentLevel >= level && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, liEle), level, excludeHiddenNodes, currentLevel + 1);\n            }\n        }\n    };\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + COLLAPSIBLE, this.element));\n        for (var i = 0, len = cIcons.length; i < len; i++) {\n            var icon = cIcons[parseInt(i.toString(), 10)];\n            var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    };\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                var liEle = eNodes[parseInt(i.toString(), 10)];\n                var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EXPANDABLE, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, liEle));\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + EXPANDABLE, this.element));\n        for (var _i = 0, eIcons_1 = eIcons; _i < eIcons_1.length; _i++) {\n            var icon = eIcons_1[_i];\n            var liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true, null, true);\n        }\n    };\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n        var vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (var i = 0; i < vNodes.length; i++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(vNodes[parseInt(i.toString(), 10)])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    };\n    TreeView.prototype.removeNode = function (node) {\n        var dragParentUl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(node, '.' + PARENTITEM);\n        var dragParentLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragParentUl, '.' + LISTITEM);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nodeTemplateFn)) {\n            this.destroyTemplate(node);\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.removeData(node);\n    };\n    TreeView.prototype.updateInstance = function () {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n    };\n    TreeView.prototype.updateList = function () {\n        this.liList = Array.prototype.slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LISTITEM, this.element));\n    };\n    TreeView.prototype.updateSelectedNodes = function () {\n        this.setProperties({ selectedNodes: [] }, true);\n        var sNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ACTIVE, this.element);\n        this.selectGivenNodes(sNodes);\n    };\n    TreeView.prototype.updateExpandedNodes = function () {\n        this.setProperties({ expandedNodes: [] }, true);\n        var eNodes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('[aria-expanded=\"true\"]', this.element);\n        for (var i = 0, len = eNodes.length; i < len; i++) {\n            this.addExpand(eNodes[parseInt(i.toString(), 10)]);\n        }\n    };\n    TreeView.prototype.removeData = function (node) {\n        if (this.dataType === 1) {\n            var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData);\n            var id = this.getId(node);\n            var data = {};\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            var id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    };\n    TreeView.prototype.removeChildNodes = function (parentId) {\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        var childData = [];\n        if (cNodes) {\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var dm = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData);\n                var id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, cNodes[parseInt(i.toString(), 10)]).toString();\n                var data = {};\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                var nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    };\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n                continue;\n            }\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + selector, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, liEle));\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(icon)) {\n                if (toExpand) {\n                    this.expandAction(liEle, icon, null);\n                }\n                else {\n                    this.collapseNode(liEle, icon, null);\n                }\n            }\n        }\n    };\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        var sNodes = this.getSortedData(nodes);\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        var li = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        var id = this.getId(dropLi);\n        var dropIcon1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropLi)) {\n            dropIcon1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, dropLi);\n        }\n        if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && this.preventExpand && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n            this.preventExpand = true;\n        }\n        if (this.dataType !== 1) {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n            this.isFirstRender = false;\n        }\n        var dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        var refNode = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? dropUl.childNodes[parseInt(index.toString(), 10)] : null;\n        if (!this.isFirstRender || this.dataType === 1) {\n            var args = this.expandArgs;\n            if (refNode || this.sortOrder === 'None') {\n                for (var i = 0; i < li.length; i++) {\n                    dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);\n                }\n                if (this.dataType === 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropLi) && !this.preventExpand && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n                    this.preventExpand = false;\n                    var dropIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, dropLi);\n                    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) || args.name !== 'nodeExpanding')) {\n                        this.expandAction(dropLi, dropIcon, null);\n                    }\n                }\n            }\n            if (!refNode && ((this.sortOrder === 'Ascending') || (this.sortOrder === 'Descending'))) {\n                if (dropUl.childNodes.length === 0) {\n                    for (var i = 0; i < li.length; i++) {\n                        dropUl.insertBefore(li[parseInt(i.toString(), 10)], refNode);\n                    }\n                    if (this.dataType === 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropLi) && !this.preventExpand && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n                        this.preventExpand = false;\n                        var dropIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, dropLi);\n                        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) || args.name !== 'nodeExpanding')) {\n                            this.expandAction(dropLi, dropIcon, null);\n                        }\n                    }\n                }\n                else {\n                    var cNodes = dropUl.childNodes;\n                    for (var i = 0; i < li.length; i++) {\n                        for (var j = 0; j < cNodes.length; j++) {\n                            var returnValue = (this.sortOrder === 'Ascending') ? cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() > li[parseInt(i.toString(), 10)].innerText.toUpperCase() : cNodes[parseInt(j.toString(), 10)].textContent.toUpperCase() < li[parseInt(i.toString(), 10)].innerText.toUpperCase();\n                            if (returnValue) {\n                                dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[parseInt(j.toString(), 10)]);\n                                break;\n                            }\n                            dropUl.insertBefore(li[parseInt(i.toString(), 10)], cNodes[cNodes.length]);\n                        }\n                    }\n                }\n            }\n        }\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            var refId = this.getId(refNode);\n            var pos = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (var j = 0; j < nodes.length; j++) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.fields.parentID, currId, nodes[parseInt(j.toString(), 10)]);\n                }\n                this.treeData.splice(pos, 0, nodes[parseInt(j.toString(), 10)]);\n                pos++;\n            }\n        }\n        this.finalizeNode(dropUl);\n    };\n    TreeView.prototype.updateMapper = function (level) {\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    };\n    TreeView.prototype.updateListProp = function (mapper) {\n        var prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = Object.prototype.hasOwnProperty.call(prop, 'navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    };\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\n        var pos = null;\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.id, obj[parseInt(i.toString(), 10)]);\n            if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]))) {\n                var data = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]))) {\n                var items = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    };\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n        var updated;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {\n            index = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? obj.length : index;\n            for (var k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[parseInt(k.toString(), 10)]);\n                index++;\n            }\n            return updated;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.id, obj[parseInt(i.toString(), 10)]);\n            if (obj[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && (Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], mapper.child) && obj[parseInt(i.toString(), 10)][mapper.child] !== null)) ||\n                    ((this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) && Object.prototype.hasOwnProperty.call(obj[parseInt(i.toString(), 10)], 'child'))) {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(key, obj[parseInt(i.toString(), 10)]);\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childData)) {\n                        childData = [];\n                    }\n                    index = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? childData.length : index;\n                    for (var k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[parseInt(k.toString(), 10)]);\n                        index++;\n                    }\n                }\n                else {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[parseInt(i.toString(), 10)][\"\" + key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]))) {\n                var childObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if ((this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]))) {\n                var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    };\n    TreeView.prototype.doDisableAction = function (nodes) {\n        var validNodes = this.nodeType(nodes);\n        var validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (var i = 0, len = validID.length; i < len; i++) {\n            var id = validID[parseInt(i.toString(), 10)][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            var liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.doEnableAction = function (nodes) {\n        var strNodes = this.nodeType(nodes);\n        for (var i = 0, len = strNodes.length; i < len; i++) {\n            var liEle = this.getElement(strNodes[parseInt(i.toString(), 10)]);\n            var id = strNodes[parseInt(i.toString(), 10)];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.nodeType = function (nodes) {\n        var validID = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var id = void 0;\n            if (typeof nodes[parseInt(i.toString(), 10)] == 'string') {\n                id = (nodes[parseInt(i.toString(), 10)]) ? nodes[parseInt(i.toString(), 10)].toString() : null;\n            }\n            else if (typeof nodes[parseInt(i.toString(), 10)] === 'object') {\n                id = nodes[parseInt(i.toString(), 10)] ? nodes[parseInt(i.toString(), 10)].getAttribute('data-uid').toString() : null;\n            }\n            if (validID.indexOf(id) === -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    };\n    TreeView.prototype.checkValidId = function (node) {\n        var _this = this;\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter(function (data) {\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (var k = 0; k < this.treeData.length; k++) {\n                var id = this.treeData[parseInt(k.toString(), 10)][this.fields.id]\n                    ? this.treeData[parseInt(k.toString(), 10)][this.fields.id].toString()\n                    : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[parseInt(k.toString(), 10)]);\n                }\n                var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), this.treeData[parseInt(k.toString(), 10)]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    };\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n        for (var k = 0; k < treeData.length; k++) {\n            var id = treeData[parseInt(k.toString(), 10)][this.fields.id]\n                ? treeData[parseInt(k.toString(), 10)][this.fields.id].toString()\n                : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[parseInt(k.toString(), 10)]);\n            }\n            var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), treeData[parseInt(k.toString(), 10)]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    };\n    TreeView.prototype.setTouchClass = function () {\n        var ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, '.' + BIGGER);\n        this.touchClass = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele) ? '' : SMALL;\n    };\n    TreeView.prototype.updatePersistProp = function () {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        var sleNodes = this.selectedNodes;\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[parseInt(l.toString(), 10)], 'selected', true);\n        }\n        var enodes = this.expandedNodes;\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[parseInt(k.toString(), 10)], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            var cnodes = this.checkedNodes;\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[parseInt(m.toString(), 10)], 'isChecked', true);\n            }\n        }\n    };\n    TreeView.prototype.removeField = function (obj, mapper, names) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper)) {\n            return;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            for (var j = 0; j < names.length; j++) {\n                var field = this.getMapperProp(mapper, names[parseInt(j.toString(), 10)]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj[parseInt(i.toString(), 10)][\"\" + field])) {\n                    delete obj[parseInt(i.toString(), 10)][\"\" + field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]))) {\n                this.removeField((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]))) {\n                this.removeField((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]), this.getChildMapper(mapper), names);\n            }\n        }\n    };\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    };\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.id, 'equal', newId, false));\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    };\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n        var removedData;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(obj)) {\n            return removedData;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.id, obj[parseInt(i.toString(), 10)]);\n            if (obj[parseInt(i.toString(), 10)] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodeId) && nodeId.toString() === id) {\n                if (remove) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.getMapperProp(mapper, key), value, obj[parseInt(i.toString(), 10)]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]))) {\n                var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, obj[parseInt(i.toString(), 10)]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]))) {\n                var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', obj[parseInt(i.toString(), 10)]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    };\n    TreeView.prototype.triggerEvent = function (action, node) {\n        this.renderReactTemplates();\n        if (action === 'addNodes') {\n            var nodeData = [];\n            for (var i = 0; i < node.length; i++) {\n                nodeData.push(this.getNode(this.getElement((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node[parseInt(i.toString(), 10)][this.fields.id])\n                    ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.id, node[parseInt(i.toString(), 10)]).toString()\n                    : null)));\n            }\n            node = nodeData;\n        }\n        var eventArgs = { data: this.treeData, action: action, nodeData: node };\n        this.trigger('dataSourceChanged', eventArgs);\n    };\n    TreeView.prototype.wireInputEvents = function (inpEle) {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    };\n    TreeView.prototype.wireEditingEvents = function (toBind) {\n        var _this = this;\n        if (toBind && !this.disabled) {\n            this.touchEditObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {\n                tap: function (e) {\n                    if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        _this.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireClickEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            this.touchClickObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {\n                tap: function (e) {\n                    _this.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            this.touchExpandObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {\n                tap: function (e) {\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        _this.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.mouseDownHandler = function (e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    };\n    TreeView.prototype.preventContextMenu = function (e) {\n        e.preventDefault();\n    };\n    TreeView.prototype.wireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n    };\n    TreeView.prototype.unWireEvents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        if (!this.disabled) {\n            this.keyboardModule.destroy();\n        }\n    };\n    TreeView.prototype.parents = function (element, selector) {\n        var matched = [];\n        var el = element.parentNode;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(el)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.matches)(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    };\n    TreeView.prototype.isDoubleTapped = function (e) {\n        var target = e.originalEvent.target;\n        var secondTap;\n        if (target && e.tapCount) {\n            if (e.tapCount === 1) {\n                this.firstTap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n            }\n            else if (e.tapCount === 2) {\n                secondTap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LISTITEM);\n            }\n        }\n        return (this.firstTap === secondTap);\n    };\n    TreeView.prototype.isDescendant = function (parent, child) {\n        var node = child.parentNode;\n        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    };\n    TreeView.prototype.showSpinner = function (element) {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], LOAD);\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__.createSpinner)({\n            target: element,\n            width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__.showSpinner)(element);\n    };\n    TreeView.prototype.hideSpinner = function (element) {\n        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_5__.hideSpinner)(element);\n        element.innerHTML = '';\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([element], LOAD);\n    };\n    TreeView.prototype.setCheckedNodes = function (nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        if (nodes.length > 1 && typeof this.nodeChecked === 'function' && this.nodeChecked.length > 0) {\n            this.isFilter = true;\n        }\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     *\n     * @param {string} node - The unique identifier of the node.\n     * @param {string[]} [nodes=[]] - The list of node IDs to check.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.setValidCheckedNode = function (node, nodes) {\n        if (nodes === void 0) { nodes = []; }\n        if (this.dataType === 1) {\n            var mapper = this.fields;\n            var resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeData).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0], nodes);\n                if (this.autoCheck) {\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\n                    var count = 0;\n                    for (var len = 0; len < childNodes.length; len++) {\n                        var childId = childNodes[parseInt(len.toString(), 10)][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n                        this.checkDisabledState(parent_4);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (var a = 0; a < this.treeData.length; a++) {\n                var index = this.treeData[parseInt(a.toString(), 10)][this.fields.id] ? this.treeData[parseInt(a.toString(), 10)][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkDisabledState(node);\n                    break;\n                }\n                var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), this.treeData[parseInt(a.toString(), 10)]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[parseInt(a.toString(), 10)], nodes);\n                }\n            }\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     *\n     * @param {Object[]} childItems - The child items to check.\n     * @param {string} node - The node to set the check state for.\n     * @param {Object} [treeData] - The optional tree data.\n     * @param {string[]} [nodes=[]] - The list of node IDs to check.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData, nodes) {\n        if (nodes === void 0) { nodes = []; }\n        var checkedParent;\n        var count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkNode = childItems[parseInt(index.toString(), 10)][this.fields.id]\n                    ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString()\n                    : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkDisabledState(checkNode, childItems[index]);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkDisabledState(node);\n                }\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\n                var isParentNodeCheck = (nodes.length === 1 && nodes[0] === checkNode);\n                if (subChildItems.length === node.length || isParentNodeCheck) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkedChild = childItems[parseInt(index.toString(), 10)][this.fields.id] ? childItems[parseInt(index.toString(), 10)][this.fields.id].toString() : '';\n                var isParentNodeCheck = ([node].length === 1 && nodes.length === 0);\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1\n                        && (checkedChild === node || isParentNodeCheck)) {\n                        this.checkDisabledState(checkedChild, childItems[index]);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkDisabledState(node);\n                }\n                var subChildItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), childItems[parseInt(index.toString(), 10)]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[parseInt(index.toString(), 10)]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkDisabledState(checkedParent, treeData);\n                }\n            }\n        }\n    };\n    TreeView.prototype.setIndeterminate = function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[parseInt(i.toString(), 10)], nodes);\n        }\n    };\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            var pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (var j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[parseInt(j.toString(), 10)]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    };\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n        var found;\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n            var nodeId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.id, treeData[parseInt(i.toString(), 10)]);\n            if (treeData[parseInt(i.toString(), 10)] && nodeId && nodeId.toString() === currID) {\n                treeData[parseInt(i.toString(), 10)] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, treeData[parseInt(i.toString(), 10)]))) {\n                var childObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(mapper.child, treeData[parseInt(i.toString(), 10)]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', treeData[parseInt(i.toString(), 10)]))) {\n                var childData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('child', treeData[parseInt(i.toString(), 10)]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    };\n    TreeView.prototype.dynamicState = function () {\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEditingEvents(this.allowEditing);\n        if (!this.disabled) {\n            this.wireEvents();\n            this.setRipple();\n        }\n        else {\n            this.unWireEvents();\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n    };\n    TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n        var _this = this;\n        var data = this.fields.dataSource;\n        var matchedArr = [];\n        var query = this.getQuery(this.fields);\n        var key = this.fields.id;\n        var crud;\n        var changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        var nodesID = [];\n        if (nodes) {\n            nodesID = this.nodeType(nodes);\n        }\n        else if (target) {\n            if (typeof target == 'string') {\n                nodesID[0] = target.toString();\n            }\n            else if (typeof target === 'object') {\n                nodesID[0] = target.getAttribute('data-uid').toString();\n            }\n        }\n        for (var i = 0, len = nodesID.length; i < len; i++) {\n            var liEle = this.getElement(nodesID[parseInt(i.toString(), 10)]);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n                continue;\n            }\n            var removedData = this.getNodeObject(nodesID[parseInt(i.toString(), 10)]);\n            matchedArr.push(removedData);\n        }\n        switch (operation) {\n            case 'delete':\n                if (nodes.length === 1) {\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\n                }\n                else {\n                    changes.deletedRecords = matchedArr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function () { return _this.deleteSuccess(nodesID); })\n                    .catch(function (e) { return _this.dmFailure(e); });\n                break;\n            case 'update':\n                matchedArr[0][this.fields.text] = newText;\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\n                crud.then(function () { return _this.editSucess(target, newText, prevent); })\n                    .catch(function (e) { return _this.dmFailure(e, target, prevent); });\n                break;\n            case 'insert':\n                if (newNode.length === 1) {\n                    crud = data.insert(newNode[0], query.fromTable, query);\n                }\n                else {\n                    var arr = [];\n                    for (var i = 0, len = newNode.length; i < len; i++) {\n                        arr.push(newNode[parseInt(i.toString(), 10)]);\n                    }\n                    changes.addedRecords = arr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function () {\n                    var dropLi = _this.getElement(target);\n                    _this.addSuccess(newNode, dropLi, index);\n                    _this.preventExpand = false;\n                }).catch(function (e) { return _this.dmFailure(e); });\n                break;\n        }\n    };\n    TreeView.prototype.deleteSuccess = function (nodes) {\n        var nodeData = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[parseInt(i.toString(), 10)]);\n            nodeData.push(this.getNode(liEle));\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n                continue;\n            }\n            this.removeNode(liEle);\n        }\n        this.updateInstance();\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.triggerEvent('removeNode', nodeData);\n    };\n    TreeView.prototype.editSucess = function (target, newText, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTTEXT, liEle);\n        this.appendNewText(liEle, txtEle, newText, prevent);\n    };\n    TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n        var _this = this;\n        var dropUl;\n        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n            dropLi.querySelector('.' + PARENTITEM) === null) {\n            this.renderChildNodes(dropLi, null, function () {\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\n                _this.addGivenNodes(nodes, dropLi, index, true, dropUl);\n                _this.triggerEvent('addNodes', nodes);\n            });\n        }\n        else {\n            this.addGivenNodes(nodes, dropLi, index, true);\n            this.triggerEvent('addNodes', nodes);\n        }\n    };\n    TreeView.prototype.dmFailure = function (e, target, prevent) {\n        if (target) {\n            this.updatePreviousText(target, prevent);\n        }\n        this.trigger('actionFailure', { error: e });\n    };\n    TreeView.prototype.updatePreviousText = function (target, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTTEXT, liEle);\n        this.updateText(liEle, txtEle, this.oldText, prevent);\n    };\n    TreeView.prototype.getHierarchicalParentId = function (node, data, parentsID) {\n        var _this = this;\n        var index = data.findIndex(function (data) {\n            return data[_this.fields.id] && data[_this.fields.id].toString() === node;\n        });\n        if (index === -1) {\n            for (var i = 0; i < data.length; i++) {\n                var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), data[parseInt(i.toString(), 10)]);\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childItems)) {\n                    index = childItems.findIndex(function (data) {\n                        return data[_this.fields.id] && data[_this.fields.id].toString() === node;\n                    });\n                    if (index === -1) {\n                        this.getHierarchicalParentId(node, childItems, parentsID);\n                    }\n                    else {\n                        parentsID.push(data[parseInt(i.toString(), 10)][this.fields.id].toString());\n                        this.getHierarchicalParentId(data[parseInt(i.toString(), 10)][this.fields.id].toString(), this.treeData, parentsID);\n                        break;\n                    }\n                }\n            }\n        }\n        return parentsID;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {TreeViewModel} newProp - The new property value.\n     * @param {TreeViewModel} oldProp - The old property value.\n     * @returns {void}\n     * @private\n     */\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        this.dragObj.dragArea = this.dragArea;\n                    }\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        var sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'allowTextWrap':\n                    this.setTextWrap();\n                    this.updateWrap();\n                    break;\n                case 'checkedNodes':\n                    if (JSON.stringify(oldProp.checkedNodes) !== JSON.stringify(newProp.checkedNodes)) {\n                        if (this.showCheckBox) {\n                            this.checkedNodes = oldProp.checkedNodes;\n                            this.setCheckedNodes(newProp.checkedNodes);\n                        }\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    this.setProperties({ expandedNodes: [] }, true);\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    this.setProperties({ expandedNodes: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None' && !this.disabled) {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'disabled':\n                    this.setDisabledMode();\n                    this.dynamicState();\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    if (!this.isReact || this.isReact && !(this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager)) {\n                        if (!this.element.classList.contains('e-filtering')) {\n                            this.DDTTreeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                        }\n                        this.reRenderNodes();\n                    }\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    if (this.allowTextWrap) {\n                        this.setTextWrap();\n                        this.updateWrap();\n                    }\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        var nodes = this.element.querySelectorAll('li');\n                        var i = 0;\n                        while (i < nodes.length) {\n                            if (nodes[parseInt(i.toString(), 10)].getAttribute('aria-expanded') !== 'true') {\n                                this.renderChildNodes(nodes[parseInt(i.toString(), 10)], true, null, true);\n                            }\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.hasTemplate = false;\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                case 'checkDisabledChildren':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n                case 'fullRowNavigable':\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     *\n     * @returns {void}\n     */\n    TreeView.prototype.destroy = function () {\n        this.clearTemplate();\n        this.element.removeAttribute('aria-activedescendant');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        if (!this.disabled) {\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        this.ulElement = null;\n        this.liList = null;\n        this.startNode = null;\n        this.firstTap = null;\n        this.expandArgs = null;\n        this.dragLi = null;\n        this.dragTarget = null;\n        this.dragParent = null;\n        this.dragObj = null;\n        this.dropObj = null;\n        this.inputObj = null;\n        this.touchEditObj = null;\n        this.touchExpandObj = null;\n        this.touchClickObj = null;\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     *\n     * @param  { object } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     * @returns {void}\n     */\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        var dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager) {\n            if (!this.isOffline) {\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n            }\n            else {\n                this.addSuccess(nodes, dropLi, index);\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (var i = 0; i < nodes.length; i++) {\n                    var pid = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.parentID, nodes[parseInt(i.toString(), 10)]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pid) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropLi)) {\n                        this.isHiddenItem = true;\n                        this.preventExpand = false;\n                        this.ensureVisible(pid);\n                        this.preventExpand = preventTargetExpand;\n                        this.isHiddenItem = false;\n                        dropLi = this.getElement(pid.toString());\n                    }\n                    this.addGivenNodes([nodes[parseInt(i.toString(), 10)]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.setNodeFocusable();\n        this.updateCheckedStateFromDS();\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager === false)) {\n            this.preventExpand = false;\n            this.triggerEvent('addNodes', nodes);\n        }\n    };\n    /**\n     * Editing can also be enabled by using the `beginEdit` property, instead of clicking on the\n     * TreeView node. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     *\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @returns {void}\n     */\n    TreeView.prototype.beginEdit = function (node) {\n        var ele = this.getElement(node);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele) || this.disabled) {\n            return;\n        }\n        this.createTextbox(ele);\n    };\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @returns {void}\n     */\n    TreeView.prototype.checkAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    };\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     * @returns {void}\n     */\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @returns {void}\n     */\n    TreeView.prototype.disableNodes = function (nodes) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    };\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @returns {void}\n     */\n    TreeView.prototype.enableNodes = function (nodes) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    };\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     *\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     * @returns {void}\n     */\n    TreeView.prototype.ensureVisible = function (node) {\n        var parentsId = [];\n        if (this.dataType === 1) {\n            var nodeData = this.getTreeData(node);\n            while (nodeData.length !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodeData[0][this.fields.parentID])) {\n                parentsId.push(nodeData[0][this.fields.parentID].toString());\n                nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());\n            }\n        }\n        else if (this.dataType === 2) {\n            parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId);\n        }\n        this.expandAll(parentsId.reverse(), null, null, this.isHiddenItem);\n        var liEle = this.getElement(node);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n            if (typeof node == 'object') {\n                var parents = this.parents(liEle, '.' + LISTITEM);\n                this.expandAll(parents);\n            }\n            setTimeout(function () { liEle.scrollIntoView({ behavior: 'smooth' }); }, 450);\n        }\n    };\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     * @param  {boolean} preventAnimation - Prevent the expand animation when expanding all nodes.\n     * @returns {void}\n     */\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes, preventAnimation) {\n        this.isAnimate = !preventAnimation;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n                if (!this.loadOnDemand || this.element.classList.contains('e-filtering')) {\n                    this.updateAttributes(this.element);\n                    this.updateList();\n                }\n            }\n        }\n        this.isAnimate = true;\n    };\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     *\n     * @returns {string[]} - An array of strings representing the unique identifiers of checked nodes.\n     */\n    TreeView.prototype.getAllCheckedNodes = function () {\n        var checkNodes = this.checkedNodes;\n        return checkNodes;\n    };\n    /**\n     * Gets all the disabled nodes including child, whether it is loaded or not.\n     *\n     * @returns {string[]} An array of strings representing the unique identifiers of disabled nodes.\n     */\n    TreeView.prototype.getDisabledNodes = function () {\n        var disabledNodes = this.disableNode;\n        return disabledNodes;\n    };\n    /**\n     * Gets the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     *\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @returns {Object} - The data associated with the specified node.\n     */\n    TreeView.prototype.getNode = function (node) {\n        var ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    };\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     *\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     * @returns {Object} - The tree data associated with the specified node or element.\n     */\n    TreeView.prototype.getTreeData = function (node) {\n        var id = this.getId(node);\n        this.updatePersistProp();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {\n            return this.treeData;\n        }\n        else {\n            var data = this.getNodeObject(id);\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) ? [] : [data];\n        }\n    };\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     *\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     * @returns {void}\n     */\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sourceNodes) || sourceNodes.length === 0) {\n            return;\n        }\n        var dropLi = this.getElement(target);\n        var nodeData = [];\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropLi)) {\n            this.isHiddenItem = true;\n            this.ensureVisible(target);\n            this.isHiddenItem = false;\n            dropLi = this.getElement(target);\n        }\n        for (var i = 0; i < sourceNodes.length; i++) {\n            var dragLi = this.getElement(sourceNodes[parseInt(i.toString(), 10)]);\n            nodeData.push(this.getNode(dragLi));\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index, null, null, null, dropLi);\n        }\n        if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent('moveNodes', nodeData);\n    };\n    /**\n     * Refreshes a particular node of the TreeView.\n     *\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {Object[]} newData - Specifies the new data of TreeView node.\n     * @returns {void}\n     * ```typescript\n     * var treeObj = document.getElementById(\"treeview\").ej2_instances[0];\n     * var data = treeObj.getTreeData(\"01\");\n     * var newData = {\n     *   id: data[0].id,\n     *   name: \"new Text\",\n     * };\n     * treeObj.refreshNode(\"01\", [newData]);\n     * ```\n     */\n    TreeView.prototype.refreshNode = function (target, newData) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newData)) {\n            return;\n        }\n        var isRefreshChild = false;\n        if (this.dataType === 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType === 2 && newData.length === 1) {\n            var updatedChildValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), newData[0]);\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        var liEle = this.getElement(target);\n        var id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        var newNodeData;\n        var parentData;\n        if (this.dataType === 1 && isRefreshChild) {\n            for (var k = 0; k < newData.length; k++) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newData[parseInt(k.toString(), 10)][this.fields.parentID])) {\n                    parentData = newData[parseInt(k.toString(), 10)];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.refreshData, newData[0]);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        var newliEle = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_2__.ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        var ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + PARENTITEM, liEle);\n        var childItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childItems))) {\n            var parentEle = liEle.parentElement;\n            var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(liEle);\n            parentEle.insertBefore(newliEle[0], parentEle.childNodes[parseInt(index.toString(), 10)]);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            var txtEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, liEle);\n            var newTextEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + TEXTWRAP, newliEle[0]);\n            var icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, txtEle);\n            var newIcon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([newIcon], EXPANDABLE);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([newIcon], COLLAPSIBLE);\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([newIcon], 'interaction');\n                }\n            }\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(txtEle);\n            var fullEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FULLROW, liEle);\n            fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        liEle = this.getElement(target);\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute('title', newNodeData[this.fields.tooltip]);\n        }\n        if (Object.prototype.hasOwnProperty.call(newNodeData, this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            var attr = {};\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(liEle, attr);\n            }\n        }\n        if (this.selectedNodes.indexOf(id) !== -1) {\n            liEle.setAttribute('aria-selected', 'true');\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([liEle], ACTIVE);\n        }\n        this.isRefreshed = false;\n        this.triggerEvent('refreshNode', [this.getNode(liEle)]);\n    };\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @returns {void}\n     */\n    TreeView.prototype.removeNodes = function (nodes) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodes)) {\n            if (this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !this.isOffline) {\n                this.crudOperation('delete', nodes);\n            }\n            else {\n                this.deleteSuccess(nodes);\n            }\n        }\n    };\n    /**\n     * Replaces the text of the TreeView node with the given text only when the `allowEditing` property is enabled.\n     *\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     * @returns {void}\n     */\n    TreeView.prototype.updateNode = function (target, newText) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newText) || !this.allowEditing) {\n            return;\n        }\n        var liEle = this.getElement(target);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liEle)) {\n            return;\n        }\n        var txtEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                if (_this.fields.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager && !_this.isOffline) {\n                    _this.crudOperation('update', null, target, newText, null, null, false);\n                }\n                else {\n                    _this.appendNewText(liEle, txtEle, newText, false);\n                }\n            }\n        });\n    };\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     *\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @returns {void}\n     */\n    TreeView.prototype.uncheckAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    };\n    TreeView.prototype.setNodeFocusable = function () {\n        var firstNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LISTITEM, this.element);\n        if (firstNode) {\n            firstNode.setAttribute('tabindex', '0');\n            this.updateIdAttr(null, firstNode);\n        }\n    };\n    var TreeView_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"allowEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, NodeAnimationSettings)\n    ], TreeView.prototype, \"animation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], TreeView.prototype, \"checkedNodes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], TreeView.prototype, \"checkDisabledChildren\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TreeView.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"disabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeView.prototype, \"dragArea\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], TreeView.prototype, \"expandedNodes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], TreeView.prototype, \"expandOn\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FieldsSettings)\n    ], TreeView.prototype, \"fields\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], TreeView.prototype, \"locale\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], TreeView.prototype, \"selectedNodes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], TreeView.prototype, \"sortOrder\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"showCheckBox\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], TreeView.prototype, \"autoCheck\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeView.prototype, \"fullRowNavigable\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"dataBound\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"drawNode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"keyPress\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeChecked\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeChecking\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeClicked\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeDragging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeDropped\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeEdited\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\n    TreeView = TreeView_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], TreeView);\n    return TreeView;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js?");

/***/ })

}]);