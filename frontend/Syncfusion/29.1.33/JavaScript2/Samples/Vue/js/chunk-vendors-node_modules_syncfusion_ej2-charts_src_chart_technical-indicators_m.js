"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_chart_technical-indicators_m"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/momentum-indicator.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/momentum-indicator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MomentumIndicator: () => (/* binding */ MomentumIndicator)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `MomentumIndicator` module is used to render the Momentum indicator.\n */\nvar MomentumIndicator = /** @class */ (function (_super) {\n    __extends(MomentumIndicator, _super);\n    function MomentumIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the collection of series to represent a momentum indicator.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     */\n    MomentumIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n        _super.prototype.initSeriesCollection.call(this, indicator, chart);\n        var upperLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        _super.prototype.setSeriesProperties.call(this, upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n    };\n    /**\n     * Defines the predictions using momentum approach\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    MomentumIndicator.prototype.initDataSource = function (indicator) {\n        var upperCollection = [];\n        var signalCollection = [];\n        var validData = indicator.points;\n        if (validData && validData.length) {\n            var upperSeries = indicator.targetSeries[1];\n            var signalSeries = indicator.targetSeries[0];\n            var length_1 = indicator.period;\n            if (validData.length >= indicator.period) {\n                for (var i = 0; i < validData.length; i++) {\n                    upperCollection.push(this.getDataPoint(validData[i].x, 100, validData[i], upperSeries, upperCollection.length));\n                    if (!(i < length_1)) {\n                        signalCollection.push(this.getDataPoint(validData[i].x, (Number(validData[i].close) / Number(validData[i - length_1].close) * 100), validData[i], signalSeries, signalCollection.length));\n                    }\n                }\n            }\n            this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n            this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[1]);\n        }\n    };\n    /**\n     * To destroy the momentum indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    MomentumIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the momentum indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    MomentumIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'MomentumIndicator';\n    };\n    return MomentumIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/momentum-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/rsi-indicator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/rsi-indicator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RsiIndicator: () => (/* binding */ RsiIndicator)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `RsiIndicator` module is used to render the Relative Strength Index indicator.\n */\nvar RsiIndicator = /** @class */ (function (_super) {\n    __extends(RsiIndicator, _super);\n    function RsiIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the series collection to represent the RSI Indicator\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     */\n    RsiIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n        _super.prototype.initSeriesCollection.call(this, indicator, chart);\n        if (indicator.showZones) {\n            var lowerLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            _super.prototype.setSeriesProperties.call(this, lowerLine, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n            var upperLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            _super.prototype.setSeriesProperties.call(this, upperLine, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n        }\n    };\n    /**\n     * Defines the predictions using RSI approach\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    RsiIndicator.prototype.initDataSource = function (indicator) {\n        var signalCollection = [];\n        var lowerCollection = [];\n        var upperCollection = [];\n        var signalSeries = indicator.targetSeries[0];\n        //prepare data\n        var validData = indicator.points;\n        if (validData.length && validData.length >= indicator.period) {\n            //Find upper band and lower band values\n            if (indicator.showZones) {\n                for (var i = 0; i < validData.length; i++) {\n                    upperCollection.push(this.getDataPoint(validData[i].x, indicator.overBought, validData[i], indicator.targetSeries[1], upperCollection.length));\n                    lowerCollection.push(this.getDataPoint(validData[i].x, indicator.overSold, validData[i], indicator.targetSeries[2], lowerCollection.length));\n                }\n            }\n            //Find signal line value\n            var prevClose = Number(validData[0].close);\n            var gain = 0;\n            var loss = 0;\n            for (var i = 1; i <= indicator.period; i++) {\n                var close_1 = Number(validData[i].close);\n                if (close_1 > prevClose) {\n                    gain += close_1 - prevClose;\n                }\n                else {\n                    loss += prevClose - close_1;\n                }\n                prevClose = close_1;\n            }\n            gain = gain / indicator.period;\n            loss = loss / indicator.period;\n            signalCollection.push(this.getDataPoint(validData[indicator.period].x, 100 - (100 / (1 + gain / loss)), validData[indicator.period], signalSeries, signalCollection.length));\n            for (var j = indicator.period + 1; j < validData.length; j++) {\n                var close_2 = Number(validData[j].close);\n                if (close_2 > prevClose) {\n                    gain = (gain * (indicator.period - 1) + (close_2 - prevClose)) / indicator.period;\n                    loss = (loss * (indicator.period - 1)) / indicator.period;\n                }\n                else if (close_2 < prevClose) {\n                    loss = (loss * (indicator.period - 1) + (prevClose - close_2)) / indicator.period;\n                    gain = (gain * (indicator.period - 1)) / indicator.period;\n                }\n                prevClose = close_2;\n                signalCollection.push(this.getDataPoint(validData[j].x, 100 - (100 / (1 + gain / loss)), validData[j], signalSeries, signalCollection.length));\n            }\n        }\n        this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n        if (indicator.showZones) {\n            this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[1]);\n            this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[2]);\n        }\n    };\n    /**\n     * To destroy the RSI Indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    RsiIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the RSI Indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    RsiIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the indicator.\n         */\n        return 'RsiIndicator';\n    };\n    return RsiIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/rsi-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmaIndicator: () => (/* binding */ SmaIndicator)\n/* harmony export */ });\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `SmaIndicator` module is used to render the Simple Moving Average indicator.\n */\nvar SmaIndicator = /** @class */ (function (_super) {\n    __extends(SmaIndicator, _super);\n    function SmaIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions based on SMA approach.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    SmaIndicator.prototype.initDataSource = function (indicator) {\n        var smaPoints = [];\n        var points = indicator.points;\n        if (points && points.length) {\n            //prepare data\n            var validData = points;\n            var field = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_0__.firstToLowerCase)(indicator.field);\n            var xField = 'x';\n            var signalSeries = indicator.targetSeries[0];\n            if (validData && validData.length && validData.length >= indicator.period) {\n                //find initial average\n                var average = 0;\n                var sum = 0;\n                for (var i = 0; i < indicator.period; i++) {\n                    sum += validData[i][field];\n                }\n                average = sum / indicator.period;\n                smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n                var index = indicator.period;\n                while (index < validData.length) {\n                    sum -= validData[index - indicator.period][field];\n                    sum += validData[index][field];\n                    average = sum / indicator.period;\n                    smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n                    index++;\n                }\n            }\n            this.setSeriesRange(smaPoints, indicator);\n        }\n    };\n    /**\n     * To destroy the SMA indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    SmaIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the SMA indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SmaIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SmaIndicator';\n    };\n    return SmaIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/stochastic-indicator.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/stochastic-indicator.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StochasticIndicator: () => (/* binding */ StochasticIndicator)\n/* harmony export */ });\n/* harmony import */ var _series_chart_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../series/chart-series */ \"./node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js\");\n/* harmony import */ var _indicator_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./indicator-base */ \"./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/indicator-base.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * The `StochasticIndicator` module is used to render the Stochastic indicator.\n */\nvar StochasticIndicator = /** @class */ (function (_super) {\n    __extends(StochasticIndicator, _super);\n    function StochasticIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the collection of series that represents the stochastic indicator.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the series collection is initialized.\n     * @param {Chart} chart - The chart associated with the technical indicator.\n     * @returns {void}\n     */\n    StochasticIndicator.prototype.initSeriesCollection = function (indicator, chart) {\n        _super.prototype.initSeriesCollection.call(this, indicator, chart);\n        var periodLine = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n        this.setSeriesProperties(periodLine, indicator, 'PeriodLine', indicator.periodLine.color, indicator.periodLine.width, chart);\n        if (indicator.showZones) {\n            var upperSeries = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            this.setSeriesProperties(upperSeries, indicator, 'UpperLine', indicator.upperLine.color, indicator.upperLine.width, chart);\n            var lowerSeries = new _series_chart_series__WEBPACK_IMPORTED_MODULE_0__.Series(indicator, 'targetSeries', {}, true);\n            this.setSeriesProperties(lowerSeries, indicator, 'LowerLine', indicator.lowerLine.color, indicator.lowerLine.width, chart);\n        }\n    };\n    /**\n     * Defines the predictions based on stochastic approach.\n     *\n     * @private\n     * @param {TechnicalIndicator} indicator - The technical indicator for which the data source is to be initialized.\n     * @returns {void}\n     */\n    StochasticIndicator.prototype.initDataSource = function (indicator) {\n        var signalCollection = [];\n        var upperCollection = [];\n        var lowerCollection = [];\n        var periodCollection = [];\n        var source = [];\n        //prepare data\n        var validData = indicator.points;\n        if (validData.length && validData.length >= indicator.period) {\n            if (indicator.showZones) {\n                for (var i = 0; i < validData.length; i++) {\n                    upperCollection.push(this.getDataPoint(validData[i].x, indicator.overBought, validData[i], indicator.targetSeries[2], upperCollection.length));\n                    lowerCollection.push(this.getDataPoint(validData[i].x, indicator.overSold, validData[i], indicator.targetSeries[3], lowerCollection.length));\n                }\n            }\n            source = this.calculatePeriod(indicator.period, indicator.kPeriod, validData, indicator.targetSeries[1]);\n            periodCollection = this.smaCalculation(indicator.period, indicator.kPeriod, source, indicator.targetSeries[1]);\n            signalCollection = this.smaCalculation(indicator.period + indicator.kPeriod - 1, indicator.dPeriod, source, indicator.targetSeries[0]);\n        }\n        this.setSeriesRange(signalCollection, indicator, indicator.targetSeries[0]);\n        this.setSeriesRange(periodCollection, indicator, indicator.targetSeries[1]);\n        if (indicator.showZones) {\n            this.setSeriesRange(upperCollection, indicator, indicator.targetSeries[2]);\n            this.setSeriesRange(lowerCollection, indicator, indicator.targetSeries[3]);\n        }\n    };\n    /**\n     * Calculates the Simple Moving Average (SMA) for the given period.\n     *\n     * @private\n     * @param {number} period - The period for the SMA calculation.\n     * @param {number} kPeriod - The 'k' period used in the calculation.\n     * @param {Points[]} data - The array of data points.\n     * @param {Series} sourceSeries - The series associated with the data.\n     * @returns {Points[]} - An array containing the calculated SMA points.\n     */\n    StochasticIndicator.prototype.smaCalculation = function (period, kPeriod, data, sourceSeries) {\n        var pointCollection = [];\n        if (data.length >= period + kPeriod) {\n            var count = period + (kPeriod - 1);\n            var temp = [];\n            var values = [];\n            for (var i = 0; i < data.length; i++) {\n                var value = Number(data[i].y);\n                temp.push(value);\n            }\n            var length_1 = temp.length;\n            while (length_1 >= count) {\n                var sum = 0;\n                for (var i = period - 1; i < (period + kPeriod - 1); i++) {\n                    sum = sum + temp[i];\n                }\n                sum = sum / kPeriod;\n                values.push(sum.toFixed(2));\n                temp.splice(0, 1);\n                length_1 = temp.length;\n            }\n            var len = count - 1;\n            for (var i = 0; i < data.length; i++) {\n                if (!(i < len)) {\n                    pointCollection.push(this.getDataPoint(data[i].x, Number(values[i - len]), data[i], sourceSeries, pointCollection.length));\n                    data[i].y = Number((values[i - len]));\n                }\n            }\n        }\n        return pointCollection;\n    };\n    /**\n     * Calculates the period for the indicator.\n     *\n     * @private\n     * @param {number} period - The period for the calculation.\n     * @param {number} kPeriod - The 'k' period used in the calculation.\n     * @param {Points[]} data - The array of data points.\n     * @param {Series} series - The series associated with the data.\n     * @returns {Points[]} - An array containing the calculated points for the period.\n     */\n    StochasticIndicator.prototype.calculatePeriod = function (period, kPeriod, data, series) {\n        var lowValues = [];\n        var highValues = [];\n        var closeValues = [];\n        var modifiedSource = [];\n        for (var j = 0; j < data.length; j++) {\n            lowValues[j] = data[j].low;\n            highValues[j] = data[j].high;\n            closeValues[j] = data[j].close;\n        }\n        if (data.length > period) {\n            var mins = [];\n            var maxs = [];\n            for (var i = 0; i < period - 1; ++i) {\n                maxs.push(0);\n                mins.push(0);\n                modifiedSource.push(this.getDataPoint(data[i].x, data[i].close, data[i], series, modifiedSource.length));\n            }\n            for (var i = period - 1; i < data.length; ++i) {\n                var min = Number.MAX_VALUE;\n                var max = Number.MIN_VALUE;\n                for (var j = 0; j < period; ++j) {\n                    min = Math.min(min, lowValues[i - j]);\n                    max = Math.max(max, highValues[i - j]);\n                }\n                maxs.push(max);\n                mins.push(min);\n            }\n            for (var i = period - 1; i < data.length; ++i) {\n                var top_1 = 0;\n                var bottom = 0;\n                top_1 += closeValues[i] - mins[i];\n                bottom += maxs[i] - mins[i];\n                modifiedSource.push(this.getDataPoint(data[i].x, (top_1 / bottom) * 100, data[i], series, modifiedSource.length));\n            }\n        }\n        return modifiedSource;\n    };\n    /**\n     * To destroy the Stocastic Indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    StochasticIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the stochastic indicator.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    StochasticIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the indicator.\n         */\n        return 'StochasticIndicator';\n    };\n    return StochasticIndicator;\n}(_indicator_base__WEBPACK_IMPORTED_MODULE_1__.TechnicalAnalysis));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/stochastic-indicator.js?");

/***/ })

}]);