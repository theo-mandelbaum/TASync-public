"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-treemap_src_treemap_treemap_js-a32ddb3f"],{

/***/ "./node_modules/@syncfusion/ej2-treemap/src/treemap/treemap.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-treemap/src/treemap/treemap.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LevelsData: () => (/* binding */ LevelsData),\n/* harmony export */   TreeMap: () => (/* binding */ TreeMap)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/base */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/base.js\");\n/* harmony import */ var _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../treemap/utils/helper */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/utils/helper.js\");\n/* harmony import */ var _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../treemap/model/constants */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/constants.js\");\n/* harmony import */ var _layout_render_panel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layout/render-panel */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/layout/render-panel.js\");\n/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/theme.js\");\n/* harmony import */ var _model_print__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model/print */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/print.js\");\n/* harmony import */ var _model_image_export__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./model/image-export */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/image-export.js\");\n/* harmony import */ var _model_pdf_export__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./model/pdf-export */ \"./node_modules/@syncfusion/ej2-treemap/src/treemap/model/pdf-export.js\");\n/**\n * Tree Map Components\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the treemap control. It is used to visualize both hierarchical and flat data.\n * ```html\n * <div id=\"container\"/>\n * <script>\n *   var treemap = new TreeMap();\n *   treemap.appendTo(\"#container\");\n * </script>\n * ```\n */\nvar TreeMap = /** @class */ (function (_super) {\n    __extends(TreeMap, _super);\n    /**\n     * Constructor for TreeMap.\n     *\n     * @param {TreeMapModel} options - Specifies the treemap instance.\n     * @param {string | HTMLElement} element - Specifies the treemap element.\n     */\n    function TreeMap(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /**\n         * resize the treemap\n         */\n        _this.isResize = false;\n        /** @private */\n        _this.orientation = 'Horizontal';\n        /** @private */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _this.drilledItems = [];\n        /** @private */\n        _this.isHierarchicalData = false;\n        /** @private */\n        _this.levelSelection = [];\n        /** @private */\n        _this.legendId = [];\n        return _this;\n    }\n    TreeMap.prototype.preRender = function () {\n        var _this = this;\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.load, { treemap: this }, function () {\n            _this.initPrivateVariable();\n            _this.unWireEVents();\n            _this.createSvg();\n            _this.wireEVents();\n            _this.setCulture();\n        });\n    };\n    TreeMap.prototype.render = function () {\n        this.renderElements();\n    };\n    TreeMap.prototype.renderElements = function () {\n        this.treemapLevelData = new LevelsData();\n        this.treemapLevelData.levelsData = null;\n        this.treemapLevelData.defaultLevelsData = null;\n        this.treemapLevelData.hierarchyData = null;\n        this.createSecondaryElement();\n        this.addTabIndex();\n        this.themeStyle = (0,_model_theme__WEBPACK_IMPORTED_MODULE_7__.getThemeStyle)(this.theme);\n        this.renderBorder();\n        this.renderTitle(this.titleSettings, 'title', null, null);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.treemapLevelData.levelsData)) {\n            this.treemapLevelData.defaultLevelsData = this.treemapLevelData.levelsData;\n        }\n        this.processDataManager();\n    };\n    TreeMap.prototype.processDataManager = function () {\n        var _this = this;\n        var dataModule;\n        var queryModule;\n        var fetchApiModule;\n        var localAjax;\n        if (this.dataSource instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_6__.DataManager) {\n            dataModule = this.dataSource;\n            queryModule = this.query instanceof _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_6__.Query ? this.query : new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_6__.Query();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var dataManager = dataModule.executeQuery(queryModule);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            dataManager.then(function (e) {\n                _this.dataSource = e['result'];\n                _this.renderTreeMapElements();\n            });\n        }\n        else if (this.dataSource instanceof _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.TreeMapAjax) {\n            localAjax = this.dataSource;\n            fetchApiModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Fetch(localAjax.dataOptions, localAjax.type, localAjax.contentType);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            fetchApiModule.onSuccess = function (args) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.type) && args.type === 'application/octet-stream') {\n                    var reader_1 = new FileReader();\n                    // eslint-disable-next-line @typescript-eslint/no-this-alias\n                    var treemap_1 = _this;\n                    reader_1.onload = function () {\n                        args = JSON.parse(reader_1.result.toString());\n                        treemap_1.dataSource = args;\n                        treemap_1.renderTreeMapElements();\n                    };\n                    reader_1.readAsText(args);\n                }\n                else {\n                    _this.dataSource = args;\n                    _this.renderTreeMapElements();\n                }\n            };\n            fetchApiModule.send(localAjax.sendData);\n        }\n        else {\n            this.renderTreeMapElements();\n        }\n    };\n    TreeMap.prototype.renderTreeMapElements = function () {\n        this.processingData();\n        if (this.treeMapLegendModule && this.legendSettings.visible) {\n            this.treeMapLegendModule.renderLegend();\n        }\n        this.layout.processLayoutPanel();\n        this.element.appendChild(this.svgObject);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.treeMapLegendModule) && this.legendSettings.visible) {\n            (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.legendMaintain)(this, this.treeMapLegendModule.legendGroup);\n        }\n        this.elementChange();\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.loaded, { treemap: this, isResized: this.isResize });\n        this.isResize = false;\n        this.renderComplete();\n    };\n    TreeMap.prototype.createSvg = function () {\n        if (this.svgObject) {\n            while (this.svgObject.childNodes.length > 0) {\n                this.svgObject.removeChild(this.svgObject.firstChild);\n            }\n            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.renderer)) {\n            this.renderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.layout)) {\n            this.layout = new _layout_render_panel__WEBPACK_IMPORTED_MODULE_5__.LayoutPanel(this);\n        }\n        this.clearTemplate();\n        var containerWidth = this.element.clientWidth;\n        var containerHeight = this.element.clientHeight;\n        this.availableSize = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Size((0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(this.width, containerWidth) || containerWidth || 600, (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(this.height, containerHeight) || containerHeight || 450);\n        this.svgObject = this.renderer.createSvg({\n            id: this.element.id + '_svg',\n            width: this.availableSize.width,\n            height: this.availableSize.height\n        });\n    };\n    /**\n     * To initilize the private varibales of treemap.\n     *\n     * @returns {void}\n     */\n    TreeMap.prototype.initPrivateVariable = function () {\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-treemap').length;\n            this.element.id = 'treemap_control_' + collection;\n        }\n        this.renderer = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.SvgRenderer(this.element.id);\n        this.layout = new _layout_render_panel__WEBPACK_IMPORTED_MODULE_5__.LayoutPanel(this);\n    };\n    TreeMap.prototype.createSecondaryElement = function () {\n        var secondaryEle = document.getElementById(this.element.id + '_Secondary_Element');\n        if (secondaryEle && secondaryEle.childElementCount > 0) {\n            secondaryEle.parentNode.removeChild(secondaryEle);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.getElementById(this.element.id + '_Secondary_Element'))) {\n            var secondaryElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                id: this.element.id + '_Secondary_Element'\n            });\n            secondaryElement.style.cssText = 'position: absolute;z-index:1;';\n            this.element.appendChild(secondaryElement);\n        }\n    };\n    TreeMap.prototype.elementChange = function () {\n        if (this.treeMapLegendModule && this.legendSettings.visible && this.treeMapLegendModule.legendGroup && this.layout.layoutGroup\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.svgObject) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.getElementById(this.layout.layoutGroup.id))\n            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(document.getElementById(this.treeMapLegendModule.legendGroup.id))) {\n            this.svgObject.insertBefore(this.layout.layoutGroup, this.treeMapLegendModule.legendGroup);\n        }\n    };\n    /**\n     * Render the treemap border\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeMap.prototype.renderBorder = function () {\n        var width = this.border.width;\n        var borderElement = this.svgObject.querySelector('#' + this.element.id + '_TreeMap_Border');\n        if ((this.border.width > 0 || (this.background || this.themeStyle.backgroundColor)) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(borderElement)) {\n            var borderRect = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.RectOption(this.element.id + '_TreeMap_Border', this.background || this.themeStyle.backgroundColor, this.border, 1, new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Rect(width / 2, width / 2, this.availableSize.width - width, this.availableSize.height - width));\n            this.svgObject.appendChild(this.renderer.drawRectangle(borderRect));\n        }\n        else if (borderElement) {\n            borderElement.setAttribute('fill', this.background || this.themeStyle.backgroundColor);\n        }\n    };\n    TreeMap.prototype.renderTitle = function (title, type, bounds, groupEle) {\n        var style = {\n            color: title.textStyle.color, size: title.textStyle.size, fontFamily: title.textStyle.fontFamily,\n            fontStyle: title.textStyle.fontStyle, fontWeight: title.textStyle.fontWeight, opacity: title.textStyle.opacity\n        };\n        var height;\n        var titlePadding = 10;\n        var width = (this.availableSize.width - this.margin.right - this.margin.left);\n        style.fontFamily = style.fontFamily || this.themeStyle.fontFamily;\n        style.fontWeight = style.fontWeight || this.themeStyle.titleFontWeight;\n        style.size = style.size || (type === 'title' ? this.themeStyle.fontSize : this.themeStyle.subtitleFontSize);\n        if (title.text) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupEle)) {\n                groupEle = this.renderer.createGroup({ id: this.element.id + '_Title_Group' });\n            }\n            var titleText = this.enableHtmlSanitizer ? (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(title.text)) : title.text;\n            var trimmedTitle = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textTrim)(width, titleText, style);\n            var elementSize = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.measureText)(trimmedTitle, style);\n            var rect = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bounds)) ? new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Rect(this.margin.left, this.margin.top, this.availableSize.width, this.availableSize.height) : bounds;\n            var location_1 = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findPosition)(rect, title.alignment, elementSize, type);\n            var options = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.TextOption(this.element.id + '_TreeMap_' + type, location_1.x, location_1.y, 'start', trimmedTitle);\n            var titleBounds = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Rect(location_1.x, location_1.y, elementSize.width, elementSize.height);\n            var element = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.renderTextElement)(options, style, style.color || (type === 'title' ? this.themeStyle.titleFontColor : this.themeStyle.subTitleFontColor), groupEle);\n            element.setAttribute('aria-label', title.description || titleText);\n            element.setAttribute('role', 'region');\n            element.setAttribute('tabindex', this.tabIndex.toString());\n            if ((type === 'title' && !title.subtitleSettings.text) || (type === 'subtitle')) {\n                height = (this.availableSize.height - titleBounds.y - titlePadding - this.margin.bottom);\n                this.areaRect = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Rect(this.margin.left, titleBounds.y + titlePadding, width, height);\n            }\n            if (type !== 'subtitle' && title.subtitleSettings.text) {\n                this.renderTitle(title.subtitleSettings, 'subtitle', titleBounds, groupEle);\n            }\n            else {\n                this.svgObject.appendChild(groupEle);\n            }\n        }\n        else {\n            height = (this.availableSize.height - this.margin.top - this.margin.bottom);\n            this.areaRect = new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Rect(this.margin.left, this.margin.top, width, height);\n        }\n    };\n    TreeMap.prototype.processingData = function () {\n        var _this = this;\n        var path;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.dataSource = this.dataSource;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dataSource) && this.dataSource.length > 0 && this.weightValuePath) {\n            this.treemapLevelData.levelsData = [];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.dataSource.map(function (data) {\n                data[_this.weightValuePath] = (data[_this.weightValuePath]) ? data[_this.weightValuePath].toString() :\n                    data[_this.weightValuePath];\n            });\n            this.leafItemSettings.labelPath = this.leafItemSettings.labelPath || this.weightValuePath;\n            this.checkIsHierarchicalData();\n            if (this.levels.length === 0) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var data_1 = {};\n                data_1['level'] = 0;\n                path = this.leafItemSettings.labelPath;\n                data_1[path] = [];\n                for (var i = 0; i < this.dataSource.length; i++) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    var child = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(this.dataSource[i])['values'];\n                    if (this.isHierarchicalData && child && child.length > 0) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        child.forEach(function (currentData) {\n                            if (currentData[path]) {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                data_1[path].push({\n                                    groupIndex: 0, name: currentData[path],\n                                    levelOrderName: currentData[path].toString(),\n                                    data: currentData, weight: currentData[_this.weightValuePath]\n                                });\n                            }\n                        });\n                    }\n                    else {\n                        if (this.dataSource[i][path]) {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data_1[path].push({\n                                groupIndex: 0, name: this.dataSource[i][path], levelOrderName: this.dataSource[i][path].toString(), data: this.dataSource[i],\n                                weight: this.dataSource[i][this.weightValuePath]\n                            });\n                        }\n                    }\n                }\n                this.treemapLevelData.levelsData.push(data_1);\n            }\n            else {\n                if (this.isHierarchicalData) {\n                    this.treemapLevelData.hierarchyData = [];\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this.treemapLevelData.hierarchyData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.dataSource, this.treemapLevelData.hierarchyData, true);\n                    for (var i = 0; i < this.treemapLevelData.hierarchyData.length; i++) {\n                        this.processHierarchicalData(this.treemapLevelData.hierarchyData[i], i);\n                    }\n                    this.treemapLevelData.levelsData = this.treemapLevelData.hierarchyData;\n                }\n                else {\n                    this.processFlatJsonData();\n                    if (this.treemapLevelData.levelsData.length > 1) {\n                        this.reOrderLevelData(this.treemapLevelData.levelsData.length - 1);\n                    }\n                }\n                path = this.levels[0].groupPath;\n            }\n            if (!this.isHierarchicalData) {\n                this.findTotalWeight(this.treemapLevelData.levelsData[0][path], 'Parent');\n            }\n        }\n    };\n    TreeMap.prototype.checkIsHierarchicalData = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var child;\n        this.dataSource = this.dataSource;\n        for (var i = 0; i < this.dataSource.length; i++) {\n            child = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(this.dataSource[i])['values'];\n            if (child && child.length) {\n                this.isHierarchicalData = true;\n                break;\n            }\n            else if (i === this.dataSource.length - 1) {\n                this.isHierarchicalData = false;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeMap.prototype.processHierarchicalData = function (data, dataCount) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var childData;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var newData = {};\n        var levelIndex;\n        var path = this.leafItemSettings.labelPath ? this.leafItemSettings.labelPath : this.weightValuePath;\n        var key;\n        newData = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(data);\n        childData = newData ? newData['values'] : null;\n        if (childData && childData.length > 0) {\n            key = newData['key'];\n            for (var i = 0; i < this.levels.length; i++) {\n                if (key === this.levels[i].groupPath) {\n                    levelIndex = i;\n                }\n            }\n            for (var j = 0; j < childData.length; j++) {\n                childData[j]['name'] = childData[j][path];\n                childData[j]['levelOrderName'] = (levelIndex === 0 ? childData[j]['name'] :\n                    data['levelOrderName'] + '#' + childData[j]['name']) + '';\n                var childItemLevel = childData[j]['levelOrderName'];\n                var childLevel = void 0;\n                if (childItemLevel.search('#') > 0) {\n                    childLevel = childItemLevel.split('#').length - 1;\n                }\n                childData[j]['groupIndex'] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(levelIndex) ? childLevel === this.levels.length\n                    ? this.levels.length : childLevel : levelIndex;\n                if (levelIndex !== 0) {\n                    childData[j]['parent'] = data;\n                }\n                childData[j]['groupName'] = key;\n                childData[j]['data'] = childData[j];\n                childData[j]['isDrilled'] = false;\n                childData[j]['weight'] = childData[j][this.weightValuePath];\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            childData.forEach(function (currentData) {\n                _this.processHierarchicalData(currentData, dataCount);\n            });\n        }\n        if (dataCount === this.treemapLevelData.hierarchyData.length - 1) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var mainData_1 = this.treemapLevelData.hierarchyData[0][this.levels[0].groupPath];\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(mainData_1)) {\n                for (var k = 0; k < this.treemapLevelData.hierarchyData.length; k++) {\n                    childData = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(this.treemapLevelData.hierarchyData[k])['values'];\n                    if (k !== 0 && childData) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        childData.forEach(function (currentData) { mainData_1.push(currentData); });\n                        this.treemapLevelData.hierarchyData.splice(k, 1);\n                        k -= 1;\n                    }\n                }\n                mainData_1 = this.treemapLevelData.hierarchyData[0][this.levels[0].groupPath];\n                for (var l = 0; l < mainData_1.length; l++) {\n                    newData[this.levels[0].groupPath] = mainData_1;\n                    mainData_1[l]['parent'] = newData;\n                }\n            }\n        }\n    };\n    /* eslint-disable valid-jsdoc */\n    /**\n     * This method is used to perform the print functionality in treemap.\n     *\n     * @param {string[] | string | Element} id - Specifies the element to print the treemap.\n     * @returns {void}\n     */\n    TreeMap.prototype.print = function (id) {\n        if (this.allowPrint && this.printModule) {\n            this.printModule.print(this, id);\n        }\n    };\n    /**\n     * This method is used to perform the export functionality for the rendered treemap.\n     *\n     * @param {ExportType} type - Specifies the extension type of the exported document.\n     * @param {string} fileName - Specifies file name for exporting the rendered TreeMap.\n     * @param {PdfPageOrientation} orientation - Specifies the orientation of the PDF document.\n     * @param {boolean} allowDownload - Specifies whether the exported file should be downloaded or not.\n     * @returns {string} - Specifies the base64 string of the exported image which is returned when the allowDownload is set to false.\n     */\n    TreeMap.prototype.export = function (type, fileName, orientation, allowDownload) {\n        var _this = this;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allowDownload)) {\n            allowDownload = true;\n        }\n        if (type === 'PDF' && this.allowPdfExport && this.pdfExportModule) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n            return new Promise(function (resolve, reject) {\n                resolve(_this.pdfExportModule.export(_this, type, fileName, orientation, allowDownload));\n            });\n        }\n        else if (this.allowImageExport && (type !== 'PDF') && this.imageExportModule) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\n            return new Promise(function (resolve, reject) {\n                resolve(_this.imageExportModule.export(_this, type, fileName, allowDownload));\n            });\n        }\n        return null;\n    };\n    TreeMap.prototype.processFlatJsonData = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.dataSource = this.dataSource;\n        var groupPath;\n        var orderNames = [];\n        for (var i = 0; i < this.levels.length + 1; i++) {\n            groupPath = this.levels[i] ? this.levels[i].groupPath : this.leafItemSettings.labelPath;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var level = {};\n            level['level'] = i;\n            level[groupPath] = [];\n            this.treemapLevelData.levelsData.push(level);\n            for (var j = 0; j < this.dataSource.length; j++) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var currentData = {};\n                var childName = '';\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(groupPath)) {\n                    var name_1 = this.dataSource[j][groupPath];\n                    if (i !== 0) {\n                        for (var k = 0; k <= i; k++) {\n                            var childGroupPath = this.levels[k] ? this.levels[k].groupPath : groupPath;\n                            childName += (this.dataSource[j][childGroupPath]) + ((k === i) ? '' : '#');\n                        }\n                    }\n                    if (!(orderNames.length > 0 ? orderNames.indexOf(childName ?\n                        childName : name_1) !== -1 : false)) {\n                        currentData['name'] = name_1;\n                        currentData['levelOrderName'] = ((childName) ? childName : name_1) + '';\n                        currentData['groupIndex'] = i;\n                        currentData['isDrilled'] = false;\n                        currentData['groupName'] = groupPath;\n                        currentData['data'] = this.dataSource[j];\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any, max-len\n                        this.treemapLevelData.levelsData[(this.treemapLevelData.levelsData.length - 1)][groupPath].push(currentData);\n                        orderNames.push((childName) ? childName : name_1);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * This method orders the treemap level data.\n     *\n     * @param {number} start - Specifies the start value of the treemap level.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.reOrderLevelData = function (start) {\n        var currentName;\n        var currentPath = this.levels[start] ? this.levels[start].groupPath : this.leafItemSettings.labelPath;\n        var prevPath = this.levels[start - 1].groupPath;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var currentData = this.treemapLevelData.levelsData[start][currentPath];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var previousData = this.treemapLevelData.levelsData[start - 1][prevPath];\n        for (var i = 0; i < currentData.length; i++) {\n            currentName = currentData[i]['levelOrderName'];\n            for (var j = 0; j < previousData.length; j++) {\n                previousData[j][currentPath] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(previousData[j][currentPath]) ?\n                    [] : previousData[j][currentPath];\n                if (this.IsChildHierarchy(currentName.split('#'), previousData[j]['levelOrderName'].split('#'))) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentData[i]['parent'])) {\n                        currentData[i]['parent'] = previousData[j];\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    previousData[j][currentPath].push(currentData[i]);\n                    break;\n                }\n            }\n        }\n        this.findTotalWeight(this.treemapLevelData.levelsData[this.treemapLevelData.levelsData.length - 1][currentPath], 'Child');\n        this.treemapLevelData.levelsData.splice(start, 1);\n        if ((start - 1) > 0) {\n            this.reOrderLevelData(start - 1);\n        }\n    };\n    TreeMap.prototype.IsChildHierarchy = function (current, previous) {\n        var isChild = false;\n        for (var i = 0; i < previous.length; i++) {\n            if (current.length < i || previous[i] !== current[i]) {\n                return false;\n            }\n            else {\n                isChild = true;\n            }\n        }\n        return isChild;\n    };\n    /**\n     * This method finds the weight value of the treemap level.\n     *\n     * @param {any[]} processData - Specifies the treemap data.\n     * @param {string} type - Specifies the type of the data.\n     * @returns {void}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeMap.prototype.findTotalWeight = function (processData, type) {\n        var _this = this;\n        var totalWeight;\n        var split;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var groupName;\n        var groupObj = {};\n        var _loop_1 = function (i) {\n            totalWeight = 0;\n            groupName = processData[i]['groupName'];\n            split = processData[i]['levelOrderName'].split('#');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this_1.dataSource.forEach(function (data) {\n                if ((0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.isContainsData)(split, processData[i]['levelOrderName'], data, _this)) {\n                    totalWeight += parseFloat(data[_this.weightValuePath]);\n                }\n            });\n            if (type === 'Parent') {\n                groupObj[groupName] = processData;\n                processData[i]['parent'] = groupObj;\n            }\n            processData[i]['weight'] = totalWeight;\n        };\n        var this_1 = this;\n        for (var i = 0; i < processData.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * To unbind event handlers for treemap.\n     *\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.unWireEVents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.clickOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'dblclick', this.doubleClickOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.rightClickOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDownOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMoveOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEndOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'pointerleave mouseleave', this.mouseLeaveOnTreeMap);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.keyDownHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'focusout', this.focusHandler);\n        window.removeEventListener('resize', this.resizeEvent);\n    };\n    /**\n     * To bind event handlers for treemap.\n     *\n     * @returns {void}\n     */\n    TreeMap.prototype.wireEVents = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.clickOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'dblclick', this.doubleClickOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.rightClickOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDownOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.mouseMoveOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.mouseEndOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'pointerleave mouseleave', this.mouseLeaveOnTreeMap, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'focusout', this.focusHandler, this);\n        this.resizeEvent = this.resizeOnTreeMap.bind(this);\n        window.addEventListener('resize', this.resizeEvent);\n    };\n    /**\n     * Method to set culture for maps\n     *\n     * @returns {void}\n     */\n    TreeMap.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    };\n    /**\n     * To add tab index for treemap element\n     *\n     * @returns {void}\n     */\n    TreeMap.prototype.addTabIndex = function () {\n        this.element.setAttribute('aria-label', this.description || 'TreeMap Element');\n        this.element.setAttribute('role', 'region');\n        this.element.setAttribute('tabindex', this.tabIndex.toString());\n    };\n    /**\n     * This method handles the window resize event on treemap.\n     *\n     * @param {Event} e - Specifies the pointer event.\n     * @returns {void}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    TreeMap.prototype.resizeOnTreeMap = function (e) {\n        var _this = this;\n        if (!this.isDestroyed) {\n            this.isResize = true;\n            var args_1 = {\n                name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.resize,\n                cancel: false,\n                previousSize: this.availableSize,\n                currentSize: new _treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.Size(0, 0),\n                treemap: this\n            };\n            if (this.resizeTo) {\n                clearTimeout(this.resizeTo);\n            }\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element) && this.element.classList.contains('e-treemap')) {\n                this.resizeTo = setTimeout(function () {\n                    _this.unWireEVents();\n                    _this.createSvg();\n                    _this.refreshing = true;\n                    _this.wireEVents();\n                    args_1.currentSize = _this.availableSize;\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    _this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.resize, args_1, function (observedArgs) {\n                        _this.render();\n                        _this.refreshing = false;\n                    });\n                }, 500);\n            }\n        }\n    };\n    /**\n     * This method handles the click event on the treemap.\n     *\n     * @param {PointerEvent} e - Specifies the mouse click event in the treemap.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.clickOnTreeMap = function (e) {\n        var _this = this;\n        var targetEle = e.target;\n        var targetId = targetEle.id;\n        var eventArgs;\n        var itemIndex;\n        var labelText = targetEle.innerHTML;\n        var clickArgs = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.click, treemap: this, mouseEvent: e };\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.click, clickArgs);\n        if (targetId.indexOf('_Item_Index') > -1) {\n            e.preventDefault();\n            itemIndex = parseFloat(targetId.split('_Item_Index_')[1]);\n            eventArgs = {\n                cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.itemClick, treemap: this, item: this.layout.renderItems[itemIndex], mouseEvent: e,\n                groupIndex: this.layout.renderItems[itemIndex]['groupIndex'], groupName: this.layout.renderItems[itemIndex]['name'],\n                text: labelText, contentItemTemplate: labelText\n            };\n            this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.itemClick, eventArgs, function (observedArgs) {\n                if (observedArgs.text !== labelText || observedArgs.contentItemTemplate !== labelText) {\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.leafItemSettings.labelTemplate)) {\n                        observedArgs.text = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textFormatter)(observedArgs.text, observedArgs['item']['data'], observedArgs.treemap);\n                        targetEle.textContent = observedArgs.text;\n                    }\n                    else {\n                        (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.setItemTemplateContent)(targetId, targetEle, observedArgs.contentItemTemplate);\n                    }\n                }\n            });\n        }\n        var end = new Date().getMilliseconds();\n        var doubleTapTimer1;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.doubleClick)) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(doubleTapTimer1) && end - doubleTapTimer1 < 500) {\n                this.doubleClickOnTreeMap(e);\n            }\n            doubleTapTimer1 = end;\n        }\n    };\n    /**\n     * This method handles the double click event in the treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse click.\n     * @returns {void}\n     */\n    TreeMap.prototype.doubleClickOnTreeMap = function (e) {\n        var doubleClickArgs = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.doubleClick, treemap: this, mouseEvent: e };\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.doubleClick, doubleClickArgs);\n        //this.notify('dblclick', e);\n    };\n    /**\n     * This method handles the right click event in the treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse click.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.rightClickOnTreeMap = function (e) {\n        var rightClickArgs = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.rightClick, treemap: this, mouseEvent: e };\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.rightClick, rightClickArgs);\n    };\n    /**\n     * This method handles the mouse down event in the treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse click.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.mouseDownOnTreeMap = function (e) {\n        if (e.target.id.indexOf('_Item_Index') > -1) {\n            this.mouseDown = true;\n        }\n        if (e.type === 'touchstart' || e.type === 'mousedown') {\n            this.removeFocus('none');\n            e.preventDefault();\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, e);\n    };\n    /**\n     * This method handles the mouse move event in the treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse click.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.mouseMoveOnTreeMap = function (e) {\n        var targetEle = e.target;\n        var targetId = targetEle.id;\n        var eventArgs;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var item;\n        var moveArgs = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.mouseMove, treemap: this, mouseEvent: e };\n        this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.mouseMove, moveArgs);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var childItems;\n        this.removeFocus('none');\n        if (targetId.indexOf('_Item_Index') > -1) {\n            item = this.layout.renderItems[parseFloat(targetId.split('_Item_Index_')[1])];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            childItems = (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(item)['values'];\n            this.element.style.cursor = (!item['isLeafItem'] && childItems && childItems.length > 0 && this.enableDrillDown) ?\n                'pointer' : 'auto';\n            eventArgs = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.itemMove, treemap: this, item: item, mouseEvent: e };\n            this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.itemMove, eventArgs);\n        }\n        else {\n            this.element.style.cursor = 'default';\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, e);\n    };\n    /**\n     * This method calculates the selected treemap levels.\n     *\n     * @param {string} labelText - Specifies the label text.\n     * @param {any} item - Specifies the treemap item.\n     * @returns {any} - Returns label of the drilled level.\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeMap.prototype.calculateSelectedTextLevels = function (labelText, item) {\n        //to find the levels by clicking the particular text both for drillDownView as true / false.\n        var drillLevel;\n        var k;\n        var text;\n        var levelLabels = item['levelOrderName'];\n        var levelText = levelLabels.split('#');\n        for (var _i = 0, _a = Object.keys(levelText); _i < _a.length; _i++) {\n            k = _a[_i];\n            if (levelText[k] === labelText) {\n                drillLevel = parseInt(k, 10);\n                text = labelText;\n            }\n        }\n        return { drillLevel: drillLevel, currentLevelLabel: text, levelText: levelText };\n    };\n    /**\n     * This method calculates the previous level of child items in treemap.\n     *\n     * @param {any} drillLevelValues - Specifies the values of drill level.\n     * @param {any} item - Specifies the treemap item.\n     * @param {boolean} directLevel - Specifies the current level.\n     * @returns {boolean} - check whether it is previous level or not.\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeMap.prototype.calculatePreviousLevelChildItems = function (drillLevelValues, item, directLevel) {\n        //By clicking any child items drilldown to the particular level.\n        //At the time store all the previous drilled level items in drilledItems\n        // This condition satisfies while drilldown View is set as false and the text contains '[+]'\n        var text;\n        var p = 0;\n        var levelItems;\n        var text1;\n        var drillTextLevel = this.layout.renderItems[0]['levelOrderName'].split('#').length;\n        for (var h = 0; h < drillTextLevel; h++) {\n            text1 = h === 0 ? drillLevelValues['levelText'][h] : text1 + '#' + drillLevelValues['levelText'][h];\n        }\n        p = drillTextLevel > 1 ? drillTextLevel : p;\n        for (var _i = 0, _a = Object['values'](this.layout.renderItems); _i < _a.length; _i++) {\n            levelItems = _a[_i];\n            var drillLevelText = levelItems['levelOrderName'].split('#');\n            if (drillLevelText[0] === drillLevelValues['levelText'][0]) {\n                text = p === 0 ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text1) ? text1 : drillLevelValues['levelText'][p] :\n                    directLevel ? text1 : text1 + '#' + drillLevelValues['levelText'][p];\n                if (text === levelItems['levelOrderName']) {\n                    this.drilledItems.push({ name: levelItems['levelOrderName'], data: levelItems });\n                    p++;\n                    directLevel = true;\n                    if (p <= item['groupIndex']) {\n                        text = text + '#' + drillLevelValues['levelText'][p];\n                        text1 = text;\n                    }\n                }\n            }\n        }\n        return directLevel;\n    };\n    /**\n     * This method compares the selected labels with the drill down items.\n     *\n     * @param {any} drillLevelValues - Specifies the values of drill level.\n     * @param {any} item - Specifies the treemap item.\n     * @param {number} i - Specifies the treemap item.\n     * @returns {any} - return the new drill down object.\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeMap.prototype.compareSelectedLabelWithDrillDownItems = function (drillLevelValues, item, i) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var drillLevelChild;\n        var newDrillItem = {};\n        var b = drillLevelValues['drillLevel'] + 1;\n        if (b === this.drilledItems[i]['data']['groupIndex']) {\n            drillLevelChild = this.drilledItems[i]['data']['parent'];\n            drillLevelChild['isDrilled'] = true;\n            newDrillItem[drillLevelChild[this.drilledItems[i]['data']['groupName']]]\n                = [drillLevelChild];\n            // to remove all the items after matched drilled items\n            this.drilledItems.splice(i, this.drilledItems.length);\n        }\n        else if (drillLevelValues['drillLevel'] === (this.drilledItems.length - 1)\n            || drillLevelValues['drillLevel'] === item['groupIndex']) {\n            newDrillItem[item['groupName']] = [item];\n        }\n        return newDrillItem;\n    };\n    /**\n     * This method handles mouse end event in treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.mouseEndOnTreeMap = function (e) {\n        var _this = this;\n        var targetEle = e.target;\n        var targetId = targetEle.id;\n        var totalRect;\n        var startEvent;\n        var endEvent;\n        var directLevel = false;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var index;\n        var newDrillItem = {};\n        var item;\n        var process = true;\n        var layoutID = this.element.id + '_TreeMap_' + this.layoutType + '_Layout';\n        var drillLevel;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var templateID = this.element.id + '_Label_Template_Group';\n        var drillLevelValues;\n        if (targetId.indexOf('_Item_Index') > -1 && this.enableDrillDown && !this.drillMouseMove) {\n            if (e.cancelable) {\n                e.preventDefault();\n            }\n            index = parseFloat(targetId.split('_Item_Index_')[1]);\n            item = this.layout.renderItems[index];\n            var labelText = targetEle.textContent;\n            if (this.enableBreadcrumb) {\n                drillLevelValues = this.calculateSelectedTextLevels(labelText, item);\n                drillLevel = drillLevelValues['drillLevel'];\n                if (!this.drillDownView && labelText.search('[+]') !== -1) {\n                    directLevel = this.calculatePreviousLevelChildItems(drillLevelValues, item, directLevel);\n                }\n            }\n            if (this.levels.length !== 0 && !item['isLeafItem'] && (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(item)['values'] &&\n                (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.findChildren)(item)['values'].length > 0) {\n                if (this.drilledItems.length > 0) {\n                    item = directLevel ? this.drilledItems[this.drilledItems.length - 1]['data'] : item;\n                    for (var i = 0; i < this.drilledItems.length; i++) {\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel)) { //Compare the selected text level with drilled items\n                            var drillLength = this.drilledItems.length;\n                            newDrillItem = this.compareSelectedLabelWithDrillDownItems(drillLevelValues, item, i);\n                            if (drillLength !== this.drilledItems.length) {\n                                i -= 1;\n                                break;\n                            }\n                        } //when clicking the levels drill back to the previous level process takes place\n                        if (item['levelOrderName'] === this.drilledItems[i]['name'] && !directLevel && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel)) {\n                            if (item['groupIndex'] === 0 && item['parent'][item['groupName']] instanceof Array) {\n                                item['isDrilled'] = !(item['isDrilled']);\n                                if (!item['isDrilled']) {\n                                    newDrillItem = item['parent'];\n                                }\n                                else {\n                                    newDrillItem[item['groupName']] = [item];\n                                }\n                            }\n                            else {\n                                item['isDrilled'] = false;\n                                item['parent']['isDrilled'] = true;\n                                item = item['parent'];\n                                newDrillItem[item['groupName']] = [item];\n                            }\n                            this.drilledItems.splice(i, 1);\n                            i -= 1;\n                            break;\n                        }\n                        else if (i === this.drilledItems.length - 1 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel)) {\n                            item['isDrilled'] = true; // click the items move to next level.\n                            newDrillItem[item['groupName']] = [item];\n                        }\n                    }\n                }\n                else {\n                    item['isDrilled'] = true;\n                    newDrillItem[item['groupName']] = [item];\n                }\n                startEvent = {\n                    cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.drillStart, treemap: this,\n                    element: targetEle, groupIndex: this.enableBreadcrumb &&\n                        this.drilledItems.length !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel) ?\n                        this.drilledItems[this.drilledItems.length - 1]['data']['groupIndex'] : item['groupIndex'],\n                    groupName: this.enableBreadcrumb && this.drilledItems.length !== 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel) ?\n                        this.drilledItems[this.drilledItems.length - 1]['data']['name'] : item['name'],\n                    rightClick: e.which === 3 ? true : false, childItems: null, item: newDrillItem\n                };\n                this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.drillStart, startEvent, function (observedArgs) {\n                    _this.currentLevel = item['isDrilled'] && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel) ? item['groupIndex'] :\n                        (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel) && _this.enableBreadcrumb && item['isDrilled']) ? drillLevel : null;\n                    if (!observedArgs.cancel) {\n                        if (document.getElementById(layoutID)) {\n                            var layerElementId = document.getElementById(layoutID);\n                            layerElementId.parentNode.removeChild(layerElementId);\n                        }\n                        totalRect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, _this.areaRect, totalRect, true);\n                        if (_this.legendSettings.visible && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.treeMapLegendModule)) {\n                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newDrillItem)) {\n                                _this.treeMapLegendModule.legendGroup.textContent = '';\n                                _this.treeMapLegendModule.legendGroup = null;\n                                _this.treeMapLegendModule.widthIncrement = 0;\n                                _this.treeMapLegendModule.heightIncrement = 0;\n                                if (_this.enableBreadcrumb && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel)) {\n                                    _this.drilledLegendItems = {\n                                        name: _this.drilledItems[_this.drilledItems.length - 1]['data']['levelOrderName'],\n                                        data: _this.drilledItems[_this.drilledItems.length - 1]['data']\n                                    };\n                                }\n                                else {\n                                    _this.drilledLegendItems = { name: item['levelOrderName'], data: item };\n                                }\n                                _this.treeMapLegendModule.renderLegend();\n                            }\n                            totalRect = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(_this.totalRect) ? _this.totalRect : totalRect;\n                        }\n                        if (document.getElementById(templateID)) {\n                            var drillElementId = document.getElementById(templateID);\n                            drillElementId.parentNode.removeChild(drillElementId);\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(observedArgs.childItems) && !observedArgs.cancel) {\n                            _this.layout.onDemandProcess(observedArgs.childItems);\n                        }\n                        else {\n                            _this.layout.calculateLayoutItems(newDrillItem, totalRect);\n                            _this.layout.renderLayoutItems();\n                        }\n                    }\n                });\n                endEvent = { cancel: false, name: _treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.drillEnd, treemap: this, renderItems: this.layout.renderItems };\n                this.trigger(_treemap_model_constants__WEBPACK_IMPORTED_MODULE_4__.drillEnd, endEvent);\n                if (process) {\n                    if (!directLevel && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(drillLevel)) {\n                        this.drilledItems.push({ name: item['levelOrderName'], data: item });\n                    }\n                }\n            }\n        }\n        this.mouseDown = false;\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, e);\n    };\n    /**\n     * This method handles mouse leave event in treemap.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event of mouse.\n     * @return {void}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    TreeMap.prototype.mouseLeaveOnTreeMap = function (e) {\n        if (this.treeMapTooltipModule) {\n            this.treeMapTooltipModule.removeTooltip();\n        }\n        if (this.treeMapLegendModule) {\n            this.treeMapLegendModule.removeInteractivePointer();\n        }\n        (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', this);\n        if (this.treeMapHighlightModule) {\n            (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeLegend)(this.treeMapHighlightModule.shapeHighlightCollection, this);\n            this.treeMapHighlightModule.highLightId = '';\n        }\n        this.removeFocus('');\n    };\n    /**\n     * This method is used to perform operations when keyboard up on TreeMap.\n     *\n     * @param {KeyboardEvent} event - Specifies the keyboard event on TreeMap.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.keyUpHandler = function (event) {\n        if (event.code !== 'Tab') {\n            return;\n        }\n        var id = event.target['id'];\n        var targetEle = document.getElementById(id);\n        if ((id.indexOf('Item_Index') > -1 || id.indexOf('Legend') > -1)) {\n            if (this.treeMapTooltipModule) {\n                this.treeMapTooltipModule.removeTooltip();\n            }\n            if (this.treeMapHighlightModule && this.highlightSettings.enable) {\n                targetEle.style.setProperty('outline', 'none');\n                targetEle.classList.add('keyboard-focused');\n                var highlightElement = id.indexOf('_Legend_') > -1 && this.legendSettings.mode === 'Default' ?\n                    targetEle.children[0] : targetEle;\n                this.treeMapHighlightModule.highlightOnMouseMove(highlightElement);\n            }\n            else {\n                this.removeFocus('');\n                targetEle.style.outline = '2px solid black';\n                targetEle.classList.add('keyboard-focused');\n            }\n        }\n        else {\n            (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', this);\n            if (this.treeMapHighlightModule) {\n                (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeLegend)(this.treeMapHighlightModule.shapeHighlightCollection, this);\n            }\n            this.removeFocus('none');\n        }\n    };\n    /**\n     * This method is used to perform operations when keyboard down on treemap.\n     *\n     * @param {KeyboardEvent} event - Specifies the keyboard event on treemap.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.keyDownHandler = function (event) {\n        var id = event.target['id'];\n        var targetEle = document.getElementById(id);\n        if (event.code === 'Enter') {\n            if (this.selectionSettings.enable && (id.indexOf('Item_Index') > -1 || id.indexOf('Legend') > -1)) {\n                var selectionElement = id.indexOf('_Legend_') > -1 && this.legendSettings.mode === 'Default' ?\n                    targetEle.children[0] : targetEle;\n                this.treeMapSelectionModule.selectionOnMouseDown(selectionElement);\n            }\n            if (this.enableDrillDown && targetEle.childElementCount > 0) {\n                this.mouseEndOnTreeMap(event);\n            }\n        }\n    };\n    /**\n     * This method is used to perform operations when focus out on treemap.\n     *\n     * @param {KeyboardEvent} event - Specifies the keyboard event on treemap.\n     * @returns {void}\n     * @private\n     */\n    TreeMap.prototype.focusHandler = function (event) {\n        var id = event.target['id'];\n        if (!this.element.contains(event.relatedTarget) ||\n            (id.indexOf('Item_Index') > -1 && event.relatedTarget.id.indexOf('Legend') > -1) ||\n            (id.indexOf('Legend') > -1 && event.relatedTarget.id.indexOf('Item_Index') > -1)) {\n            if (this.treeMapHighlightModule && this.highlightSettings.enable) {\n                (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeClassNames)(document.getElementsByClassName('treeMapHighLight'), 'treeMapHighLight', this);\n                (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeLegend)(this.treeMapHighlightModule.legendHighlightCollection, this);\n                this.treeMapHighlightModule.highLightId = '';\n            }\n            else {\n                this.removeFocus('none');\n            }\n        }\n    };\n    TreeMap.prototype.removeFocus = function (outline) {\n        var highlightedElement = document.querySelector('.keyboard-focused');\n        if (highlightedElement) {\n            highlightedElement.style.outline = outline;\n            highlightedElement.classList.remove('keyboard-focused');\n        }\n    };\n    /**\n     * This method is used to select or remove the selection of treemap item based on the provided selection settings.\n     *\n     * @param {string[]} levelOrder - Specifies the order of the level.\n     * @param {boolean} isSelected - Specifies whether the treemap item should be selected or the selection should be removed.\n     * @return {void}\n     */\n    TreeMap.prototype.selectItem = function (levelOrder, isSelected) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isSelected)) {\n            isSelected = true;\n        }\n        var levelOrderName = '';\n        for (var i = 0; i < levelOrder.length; i++) {\n            if (i !== levelOrder.length - 1) {\n                levelOrderName += levelOrder[i] + '#';\n            }\n            else {\n                levelOrderName += levelOrder[i];\n            }\n        }\n        if (this.treeMapSelectionModule && this.selectionSettings.enable) {\n            this.treeMapSelectionModule.selectTreemapItem(levelOrderName, isSelected);\n        }\n    };\n    /**\n     * To provide the array of modules needed for maps rendering\n     *\n     * @returns {ModuleDeclaration[]} Returns the modules\n     * @private\n     */\n    TreeMap.prototype.requiredModules = function () {\n        var modules = [];\n        if (this.tooltipSettings.visible) {\n            modules.push({\n                member: 'treeMapTooltip',\n                args: [this],\n                name: 'TreeMapTooltip'\n            });\n        }\n        if (this.highlightSettings.enable) {\n            modules.push({\n                member: 'treeMapHighlight',\n                args: [this],\n                name: 'TreeMapHighlight'\n            });\n        }\n        if (this.selectionSettings.enable) {\n            modules.push({\n                member: 'treeMapSelection',\n                args: [this],\n                name: 'TreeMapSelection'\n            });\n        }\n        if (this.legendSettings.visible) {\n            modules.push({\n                member: 'treeMapLegend',\n                args: [this],\n                name: 'TreeMapLegend'\n            });\n        }\n        if (this.allowPrint) {\n            modules.push({\n                member: 'Print',\n                args: [this, _model_print__WEBPACK_IMPORTED_MODULE_8__.Print],\n                name: 'Print'\n            });\n        }\n        if (this.allowImageExport) {\n            modules.push({\n                member: 'ImageExport',\n                args: [this, _model_image_export__WEBPACK_IMPORTED_MODULE_9__.ImageExport],\n                name: 'ImageExport'\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport',\n                args: [this, _model_pdf_export__WEBPACK_IMPORTED_MODULE_10__.PdfExport],\n                name: 'PdfExport'\n            });\n        }\n        return modules;\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {TreeMapModel} newProp - Specifies the new property\n     * @param {TreeMapModel} oldProp - Specifies the old property\n     * @returns {void}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    TreeMap.prototype.onPropertyChanged = function (newProp, oldProp) {\n        if (!this.isDestroyed) {\n            var render = false;\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'background':\n                        this.renderBorder();\n                        break;\n                    case 'height':\n                    case 'width':\n                    case 'layoutType':\n                    case 'levels':\n                    case 'drillDownView':\n                    case 'renderDirection':\n                    case 'leafItemSettings':\n                    case 'legendSettings':\n                    case 'dataSource':\n                        render = true;\n                        break;\n                }\n            }\n            if (render) {\n                this.createSvg();\n                this.renderElements();\n            }\n        }\n    };\n    /**\n     * Gets component name.\n     *\n     * @returns {string} - return the treemap instance.\n     * @private\n     */\n    TreeMap.prototype.getModuleName = function () {\n        return 'treemap';\n    };\n    /**\n     * This method destroys the treemap. This method removes the events associated with the treemap and disposes the objects created for rendering and updating the treemap.\n     */\n    TreeMap.prototype.destroy = function () {\n        this.unWireEVents();\n        (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)('treeMapMeasureText');\n        this.drilledItems = [];\n        this.levelSelection = [];\n        this.legendId = [];\n        this.removeSvg();\n        _super.prototype.destroy.call(this);\n        this.areaRect = null;\n        this.themeStyle = null;\n        this.totalRect = null;\n        this.drilledLegendItems = null;\n        this.doubleTapTimer = null;\n        this.treemapLevelData = null;\n        this.resizeEvent = null;\n        this.availableSize = null;\n        this.intl = null;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.layout)) {\n            this.layout.destroy();\n        }\n        this.layout = null;\n        this.renderer = null;\n    };\n    TreeMap.prototype.removeSvg = function () {\n        (0,_treemap_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(this.element.id + '_Secondary_Element');\n        if (this.svgObject) {\n            while (this.svgObject.childNodes.length > 0) {\n                this.svgObject.removeChild(this.svgObject.firstChild);\n            }\n            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Returns the string value.\n     * @private\n     */\n    TreeMap.prototype.getPersistData = function () {\n        return '';\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"allowPrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"allowImageExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.Border)\n    ], TreeMap.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.Margin)\n    ], TreeMap.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Material')\n    ], TreeMap.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.TitleSettings)\n    ], TreeMap.prototype, \"titleSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Squarified')\n    ], TreeMap.prototype, \"layoutType\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"query\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"weightValuePath\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TreeMap.prototype, \"rangeColorValuePath\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], TreeMap.prototype, \"equalColorValuePath\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"colorValuePath\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])\n    ], TreeMap.prototype, \"palette\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('TopLeftBottomRight')\n    ], TreeMap.prototype, \"renderDirection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"enableDrillDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"enableBreadcrumb\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(' - ')\n    ], TreeMap.prototype, \"breadcrumbConnector\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"drillDownView\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.InitialDrillSettings)\n    ], TreeMap.prototype, \"initialDrillDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.LeafItemSettings)\n    ], TreeMap.prototype, \"leafItemSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _model_base__WEBPACK_IMPORTED_MODULE_2__.LevelSettings)\n    ], TreeMap.prototype, \"levels\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.HighlightSettings)\n    ], TreeMap.prototype, \"highlightSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.SelectionSettings)\n    ], TreeMap.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.TooltipSettings)\n    ], TreeMap.prototype, \"tooltipSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.LegendSettings)\n    ], TreeMap.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], TreeMap.prototype, \"useGroupingSeparator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], TreeMap.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], TreeMap.prototype, \"format\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"itemRendering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"drillStart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"drillEnd\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"itemSelected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"itemHighlight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"tooltipRendering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"itemClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"itemMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"click\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"doubleClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"rightClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"mouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"resize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"legendItemRendering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], TreeMap.prototype, \"legendRendering\", void 0);\n    TreeMap = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], TreeMap);\n    return TreeMap;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n/**\n * @private\n */\nvar LevelsData = /** @class */ (function () {\n    function LevelsData() {\n    }\n    return LevelsData;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-treemap/src/treemap/treemap.js?");

/***/ })

}]);