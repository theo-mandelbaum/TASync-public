"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_utility_base-util_js-3f5a5c49"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bBoxText: () => (/* binding */ bBoxText),\n/* harmony export */   cloneArray: () => (/* binding */ cloneArray),\n/* harmony export */   cloneObject: () => (/* binding */ cloneObject),\n/* harmony export */   cornersPointsBeforeRotation: () => (/* binding */ cornersPointsBeforeRotation),\n/* harmony export */   extendArray: () => (/* binding */ extendArray),\n/* harmony export */   extendObject: () => (/* binding */ extendObject),\n/* harmony export */   getBounds: () => (/* binding */ getBounds),\n/* harmony export */   getFunction: () => (/* binding */ getFunction),\n/* harmony export */   getIndex: () => (/* binding */ getIndex),\n/* harmony export */   getInternalProperties: () => (/* binding */ getInternalProperties),\n/* harmony export */   getOffset: () => (/* binding */ getOffset),\n/* harmony export */   middleElement: () => (/* binding */ middleElement),\n/* harmony export */   overFlow: () => (/* binding */ overFlow),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   rotatePoint: () => (/* binding */ rotatePoint),\n/* harmony export */   rotateSize: () => (/* binding */ rotateSize),\n/* harmony export */   templateCompiler: () => (/* binding */ templateCompiler),\n/* harmony export */   textAlignToString: () => (/* binding */ textAlignToString),\n/* harmony export */   whiteSpaceToString: () => (/* binding */ whiteSpaceToString),\n/* harmony export */   wordBreakToString: () => (/* binding */ wordBreakToString)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _primitives_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../primitives/matrix */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/matrix.js\");\n/* harmony import */ var _dom_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n\n\n\n\n\n\n/**\n * Implements the basic functionalities\n */\n/**\n * Used to generate the random id \\\n *\n * @returns { boolean }    Used to generate the random id .\\\n *\n * @private\n */\nfunction randomId() {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\n    var id = '';\n    var num;\n    for (var i = 0; i < 5; i++) {\n        if (typeof window !== 'undefined' && 'crypto' in window && 'getRandomValues' in crypto) {\n            var count = new Uint16Array(1);\n            // tslint:disable-next-line:no-any\n            var intCrypto = window.msCrypto || window.crypto;\n            num = intCrypto.getRandomValues(count)[0] % (chars.length - 1);\n        }\n        else {\n            num = Math.floor(Math.random() * chars.length);\n        }\n        if (i === 0 && num < 10) {\n            i--;\n            continue;\n        }\n        id += chars.substring(num, num + 1);\n    }\n    return id;\n}\n/**\n * Used to get the index value \\\n *\n * @returns { boolean }    Used to get the index value .\\\n * @param {Diagram} comp - provide the Diagram value.\n * @param {string} id - provide the id value.\n *\n * @private\n */\nfunction getIndex(comp, id) {\n    if (comp.nodes && comp.nodes.length > 0) {\n        for (var i = 0; i < comp.nodes.length; i++) {\n            if (comp.nodes[parseInt(i.toString(), 10)].id === id) {\n                return i;\n            }\n        }\n    }\n    if (comp.connectors && comp.connectors.length > 0) {\n        for (var i = 0; i < comp.connectors.length; i++) {\n            if (comp.connectors[parseInt(i.toString(), 10)].id === id) {\n                return i;\n            }\n        }\n    }\n    return null;\n}\n/**\n * templateCompiler method\\\n *\n * @returns { Function }    templateCompiler method .\\\n * @param {string} template - provide the template value.\n *\n * @private\n */\nfunction templateCompiler(template) {\n    if (template) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var e = void 0;\n        try {\n            if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n            }\n            else {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        catch (e) {\n            return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n        }\n    }\n    return undefined;\n}\n/**\n * cornersPointsBeforeRotation method\\\n *\n * @returns { Rect }    templateCompiler method .\\\n * @param {DiagramElement} ele - provide the template value.\n *\n * @private\n */\nfunction cornersPointsBeforeRotation(ele) {\n    var bounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_1__.Rect();\n    var top = ele.offsetY - ele.actualSize.height * ele.pivot.y;\n    var bottom = ele.offsetY + ele.actualSize.height * (1 - ele.pivot.y);\n    var left = ele.offsetX - ele.actualSize.width * ele.pivot.x;\n    var right = ele.offsetX + ele.actualSize.width * (1 - ele.pivot.x);\n    var topLeft = { x: left, y: top };\n    //const topCenter: PointModel = { x: (left + right) / 2, y: top };\n    var topRight = { x: right, y: top };\n    //const middleLeft: PointModel = { x: left, y: (top + bottom) / 2 };\n    //const middleRight: PointModel = { x: right, y: (top + bottom) / 2 };\n    var bottomLeft = { x: left, y: bottom };\n    //const bottomCenter: PointModel = { x: (left + right) / 2, y: bottom };\n    var bottomRight = { x: right, y: bottom };\n    bounds = _primitives_rect__WEBPACK_IMPORTED_MODULE_1__.Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n    return bounds;\n}\n/**\n * getBounds method\\\n *\n * @returns { Rect }    getBounds method .\\\n * @param {DiagramElement} element - provide the template value.\n *\n * @private\n */\nfunction getBounds(element) {\n    var bounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_1__.Rect();\n    //let corners: Rect;\n    var corners = cornersPointsBeforeRotation(element);\n    var middleLeft = corners.middleLeft;\n    var topCenter = corners.topCenter;\n    var bottomCenter = corners.bottomCenter;\n    var middleRight = corners.middleRight;\n    var topLeft = corners.topLeft;\n    var topRight = corners.topRight;\n    var bottomLeft = corners.bottomLeft;\n    var bottomRight = corners.bottomRight;\n    element.corners = {\n        topLeft: topLeft, topCenter: topCenter, topRight: topRight, middleLeft: middleLeft,\n        middleRight: middleRight, bottomLeft: bottomLeft, bottomCenter: bottomCenter, bottomRight: bottomRight\n    };\n    if (element.rotateAngle !== 0 || element.parentTransform !== 0) {\n        var matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.identityMatrix)();\n        (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.rotateMatrix)(matrix, element.rotateAngle + element.parentTransform, element.offsetX, element.offsetY);\n        element.corners.topLeft = topLeft = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, topLeft);\n        element.corners.topCenter = topCenter = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, topCenter);\n        element.corners.topRight = topRight = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, topRight);\n        element.corners.middleLeft = middleLeft = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, middleLeft);\n        element.corners.middleRight = middleRight = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, middleRight);\n        element.corners.bottomLeft = bottomLeft = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, bottomLeft);\n        element.corners.bottomCenter = bottomCenter = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, bottomCenter);\n        element.corners.bottomRight = bottomRight = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, bottomRight);\n        //Set corners based on rotate angle\n    }\n    bounds = _primitives_rect__WEBPACK_IMPORTED_MODULE_1__.Rect.toBounds([topLeft, topRight, bottomLeft, bottomRight]);\n    element.corners.left = bounds.left;\n    element.corners.right = bounds.right;\n    element.corners.top = bounds.top;\n    element.corners.bottom = bounds.bottom;\n    element.corners.center = bounds.center;\n    element.corners.width = bounds.width;\n    element.corners.height = bounds.height;\n    return bounds;\n}\n// Removed updateCloneProp method\n/**\n * cloneObject method\\\n *\n * @returns { Rect }    cloneObject method .\\\n * @param {DiagramElement} obj - provide the obj value.\n * @param {DiagramElement} additionalProp - provide the additionalProp value.\n * @param {DiagramElement} key - provide the key value.\n * @param {DiagramElement} cloneBlazorProp - provide the cloneBlazorProp value.\n *\n * @private\n */\nfunction cloneObject(obj, additionalProp, key, cloneBlazorProp) {\n    var newObject = {};\n    var keys = 'properties';\n    var prop = 'propName';\n    if (obj) {\n        key = obj[\"\" + prop];\n        var sourceObject = obj[\"\" + keys] || obj;\n        var properties = [];\n        properties = properties.concat(Object.keys(sourceObject));\n        var customProperties = [];\n        properties.push('version');\n        if (key) {\n            var propAdditional = getFunction(additionalProp);\n            if (propAdditional) {\n                customProperties = propAdditional(key);\n            }\n            else {\n                customProperties = [];\n            }\n            properties = properties.concat(customProperties);\n        }\n        var internalProp = getInternalProperties(key);\n        properties = properties.concat(internalProp);\n        //Removed blazor code\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var property = properties_1[_i];\n            if (property !== 'historyManager') {\n                if (property !== 'wrapper') {\n                    //const constructorId: string = 'constructor';\n                    //const name: string = 'name';\n                    // eslint-disable-next-line no-prototype-builtins\n                    var isEventEmmitter = obj[\"\" + property] && obj.hasOwnProperty('observers') ? true : false;\n                    if (!isEventEmmitter) {\n                        if (obj[\"\" + property] instanceof Array) {\n                            newObject[\"\" + property] = cloneArray((internalProp.indexOf(property) === -1 && obj[\"\" + keys]) ? obj[\"\" + keys][\"\" + property] : obj[\"\" + property], additionalProp, property, cloneBlazorProp);\n                        }\n                        else if (obj[\"\" + property] instanceof Array === false && obj[\"\" + property] instanceof HTMLElement) {\n                            newObject[\"\" + property] = obj[\"\" + property].cloneNode(true).innerHTML;\n                        }\n                        else if (obj[\"\" + property] instanceof Array === false && obj[\"\" + property] instanceof Object) {\n                            newObject[\"\" + property] = cloneObject((internalProp.indexOf(property) === -1 && obj[\"\" + keys]) ? obj[\"\" + keys][\"\" + property] : obj[\"\" + property], undefined, undefined, cloneBlazorProp);\n                        }\n                        else {\n                            newObject[\"\" + property] = obj[\"\" + property];\n                        }\n                    }\n                }\n                else {\n                    if (obj[\"\" + property]) {\n                        newObject[\"\" + property] = {\n                            actualSize: {\n                                width: obj[\"\" + property].actualSize.width, height: obj[\"\" + property].actualSize.height\n                            }, offsetX: obj[\"\" + property].offsetX, offsetY: obj[\"\" + property].offsetY\n                        };\n                    }\n                }\n            }\n        }\n    }\n    return newObject;\n}\n/**\n * getInternalProperties method\\\n *\n * @returns { string[] }    getInternalProperties method .\\\n * @param {string} propName - provide the propName value.\n *\n * @private\n */\nfunction getInternalProperties(propName) {\n    switch (propName) {\n        case 'nodes':\n        case 'children':\n            return ['inEdges', 'outEdges', 'parentId', 'processId', 'nodeId', 'umlIndex', 'isPhase', 'isLane'];\n        case 'connectors':\n            return ['parentId'];\n        case 'annotation':\n            return ['nodeId'];\n        case 'annotations':\n            return ['nodeId'];\n        case 'shape':\n            return ['hasHeader'];\n        case 'layers':\n            return ['objectZIndex'];\n    }\n    return [];\n}\n/**\n * cloneArray method\\\n *\n * @returns {  Object[] }    getInternalProperties method .\\\n * @param {string} sourceArray - provide the sourceArray value.\n * @param {string} additionalProp - provide the additionalProp value.\n * @param {string} key - provide the key value.\n * @param {string} cloneBlazorProp - provide the cloneBlazorProp value.\n *\n * @private\n */\nfunction cloneArray(sourceArray, additionalProp, key, cloneBlazorProp) {\n    var clonedArray;\n    if (sourceArray) {\n        clonedArray = [];\n        for (var i = 0; i < sourceArray.length; i++) {\n            if (sourceArray[parseInt(i.toString(), 10)] instanceof Array) {\n                clonedArray.push(sourceArray[parseInt(i.toString(), 10)]);\n            }\n            else if (sourceArray[parseInt(i.toString(), 10)] instanceof Object) {\n                clonedArray.push(cloneObject(sourceArray[parseInt(i.toString(), 10)], additionalProp, key, cloneBlazorProp));\n            }\n            else {\n                clonedArray.push(sourceArray[parseInt(i.toString(), 10)]);\n            }\n        }\n    }\n    return clonedArray;\n}\n/**\n * extendObject method\\\n *\n * @returns {  Object}    getInternalProperties method .\\\n * @param {string} options - provide the options value.\n * @param {string} childObject - provide the childObject value.\n *\n * @private\n */\nfunction extendObject(options, childObject) {\n    var properties = 'properties';\n    if (options) {\n        if (!childObject) {\n            childObject = { properties: {} };\n        }\n        //const target: Object = childObject;\n        for (var _i = 0, _a = Object.keys(options); _i < _a.length; _i++) {\n            var property = _a[_i];\n            if (options[\"\" + property] instanceof Array) {\n                var extendeArray = extendArray(options[\"\" + property], childObject[\"\" + properties][\"\" + property]);\n                if (!childObject[\"\" + properties][\"\" + property] || !childObject[\"\" + properties][\"\" + property].length) {\n                    childObject[\"\" + property] = extendeArray;\n                }\n            }\n            else if (options[\"\" + property] instanceof Array === false && options[\"\" + property] instanceof HTMLElement) {\n                childObject[\"\" + property] = options[\"\" + property].cloneNode(true).innerHtml;\n            }\n            else if (options[\"\" + property] instanceof Array === false && options[\"\" + property] instanceof Object) {\n                var extendedObject = extendObject(options[\"\" + property], childObject[\"\" + properties][\"\" + property]);\n                if (extendedObject[\"\" + properties] && !Object.keys(extendedObject[\"\" + properties]).length) {\n                    delete extendedObject[\"\" + properties];\n                }\n                childObject[\"\" + property] = extendedObject;\n            }\n            else {\n                childObject[\"\" + property] = childObject[\"\" + properties][\"\" + property] !== undefined ?\n                    childObject[\"\" + property] : options[\"\" + property];\n            }\n        }\n    }\n    return childObject;\n}\n/**\n * extendObject method\\\n *\n * @returns {  Object}    getInternalProperties method .\\\n * @param {string} sourceArray - provide the sourceArray value.\n * @param {string} childArray - provide the childArray value.\n *\n * @private\n */\nfunction extendArray(sourceArray, childArray) {\n    var clonedArray = [];\n    var reset = false;\n    if (!childArray) {\n        childArray = [];\n    }\n    if (!childArray.length) {\n        reset = true;\n    }\n    for (var i = 0; i < sourceArray.length; i++) {\n        if (sourceArray[parseInt(i.toString(), 10)] instanceof Array) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            var extendedArray = extendArray(sourceArray[parseInt(i.toString(), 10)], childArray[parseInt(i.toString(), 10)]);\n            if (reset) {\n                clonedArray.push(extendArray);\n            }\n        }\n        else if (sourceArray[parseInt(i.toString(), 10)] instanceof Object) {\n            var extendedObject = extendObject(sourceArray[parseInt(i.toString(), 10)], childArray[parseInt(i.toString(), 10)]);\n            if (reset) {\n                clonedArray.push(extendedObject);\n            }\n        }\n        else {\n            clonedArray.push(sourceArray[parseInt(i.toString(), 10)]);\n        }\n    }\n    return clonedArray;\n}\n/**\n * textAlignToString method\\\n *\n * @returns {  Object}    textAlignToString method .\\\n * @param {string} value - provide the sourceArray value.\n *\n * @private\n */\nfunction textAlignToString(value) {\n    var state = '';\n    switch (value) {\n        case 'Center':\n            state = 'center';\n            break;\n        case 'Left':\n            state = 'left';\n            break;\n        case 'Right':\n            state = 'right';\n            break;\n        case 'Justify':\n            state = 'justify';\n            break;\n    }\n    return state;\n}\n/**\n * wordBreakToString method\\\n *\n * @returns {  string }    wordBreakToString method .\\\n * @param {TextWrap | TextDecoration} value - provide the value value.\n *\n * @private\n */\nfunction wordBreakToString(value) {\n    var state = '';\n    switch (value) {\n        case 'Wrap':\n            state = 'breakall';\n            break;\n        case 'NoWrap':\n            state = 'keepall';\n            break;\n        case 'WrapWithOverflow':\n            state = 'normal';\n            break;\n        case 'LineThrough':\n            state = 'line-through';\n            break;\n    }\n    return state;\n}\n/**\n * bBoxText method\\\n *\n * @returns { number }    bBoxText method .\\\n * @param {string} textContent - provide the textContent value.\n * @param {string} options - provide the options value.\n *\n * @private\n */\nfunction bBoxText(textContent, options) {\n    var measureWindowElement = 'measureElement';\n    window[\"\" + measureWindowElement].style.visibility = 'visible';\n    var svg = window[\"\" + measureWindowElement].children[2];\n    var text = (0,_dom_util__WEBPACK_IMPORTED_MODULE_4__.getChildNode)(svg)[1];\n    text.textContent = textContent;\n    (0,_dom_util__WEBPACK_IMPORTED_MODULE_4__.applyStyleAgainstCsp)(text, 'font-size:' + options.fontSize + 'px; font-family:'\n        + options.fontFamily + ';font-weight:' + (options.bold ? 'bold' : 'normal'));\n    var bBox = text.getBBox().width;\n    window[\"\" + measureWindowElement].style.visibility = 'hidden';\n    return bBox;\n}\n/**\n * middleElement method\\\n *\n * @returns {  number}    middleElement method .\\\n * @param {number} i - provide the textContent value.\n * @param {number} j - provide the options value.\n *\n * @private\n */\nfunction middleElement(i, j) {\n    var m = 0;\n    m = (i + j) / 2;\n    return m;\n}\n/**\n * overFlow method\\\n *\n * @returns {  number}    overFlow method .\\\n * @param {number} text - provide the text value.\n * @param {number} options - provide the options value.\n *\n * @private\n */\nfunction overFlow(text, options) {\n    var i = 0;\n    var j = 0;\n    var middle = 0;\n    var bounds = 0;\n    var temp = '';\n    j = text.length;\n    var t = 0;\n    do {\n        if (bounds > 0) {\n            i = middle;\n        }\n        middle = Math.floor(middleElement(i, j));\n        temp += text.substr(i, middle);\n        bounds = bBoxText(temp, options);\n    } while (bounds <= options.width);\n    temp = temp.substr(0, i);\n    for (t = i; t < j; t++) {\n        temp += text[parseInt(t.toString(), 10)];\n        bounds = bBoxText(temp, options);\n        if (bounds >= options.width) {\n            text = text.substr(0, temp.length - 1);\n            break;\n        }\n    }\n    if (options.textOverflow === 'Ellipsis') {\n        text = text.substr(0, text.length - 3);\n        text += '...';\n    }\n    else {\n        text = text.substr(0, text.length);\n    }\n    return text;\n}\n/**\n * whiteSpaceToString method\\\n *\n * @returns {  number}    whiteSpaceToString method .\\\n * @param {number} value - provide the value value.\n * @param {number} wrap - provide the wrap value.\n *\n * @private\n */\nfunction whiteSpaceToString(value, wrap) {\n    if (wrap === 'NoWrap' && value === 'PreserveAll') {\n        return 'pre';\n    }\n    var state = '';\n    switch (value) {\n        case 'CollapseAll':\n            state = 'nowrap';\n            break;\n        case 'CollapseSpace':\n            state = 'pre-line';\n            break;\n        case 'PreserveAll':\n            state = 'pre-wrap';\n            break;\n    }\n    return state;\n}\n/**\n * rotateSize method\\\n *\n * @returns {  number}    rotateSize method .\\\n * @param {number} size - provide the size value.\n * @param {number} angle - provide the angle value.\n *\n * @private\n */\nfunction rotateSize(size, angle) {\n    var matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.identityMatrix)();\n    (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.rotateMatrix)(matrix, angle, 0, 0);\n    var topLeft = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, { x: 0, y: 0 });\n    var topRight = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, { x: size.width, y: 0 });\n    var bottomLeft = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, { x: 0, y: size.height });\n    var bottomRight = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, { x: size.width, y: size.height });\n    var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n    var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n    var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);\n    var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);\n    return new _primitives_size__WEBPACK_IMPORTED_MODULE_2__.Size(maxX - minX, maxY - minY);\n}\n/**\n * rotatePoint method\\\n *\n * @returns {  number}    rotateSize method .\\\n * @param {number} angle - provide the angle value.\n * @param {number} pivotX - provide the pivotX value.\n * @param {number} pivotY - provide the pivotY value.\n * @param {PointModel} point - provide the point value.\n * @private\n */\nfunction rotatePoint(angle, pivotX, pivotY, point) {\n    if (angle !== 0) {\n        var matrix = (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.identityMatrix)();\n        (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.rotateMatrix)(matrix, angle, pivotX, pivotY);\n        return (0,_primitives_matrix__WEBPACK_IMPORTED_MODULE_3__.transformPointByMatrix)(matrix, point);\n    }\n    return point;\n}\n/**\n * getOffset method\\\n *\n * @returns {  number}    getOffset method .\\\n * @param {PointModel} topLeft - provide the angle value.\n * @param {DiagramElement} obj - provide the pivotX value.\n * @private\n */\nfunction getOffset(topLeft, obj) {\n    var offX = topLeft.x + obj.desiredSize.width * obj.pivot.x;\n    var offY = topLeft.y + obj.desiredSize.height * obj.pivot.y;\n    return {\n        x: offX, y: offY\n    };\n}\n/**\n * getFunction method\\\n *\n * @returns {  Function }    getFunction method .\\\n * @param {PointModel} value - provide the angle value.\n * @private\n */\nfunction getFunction(value) {\n    if (value !== undefined) {\n        if (typeof value === 'string') {\n            value = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(value, window);\n        }\n    }\n    return value;\n}\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js?");

/***/ })

}]);