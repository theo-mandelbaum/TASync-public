"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-image-editor_src_image-editor_action_filter_js-5046d4c9"],{

/***/ "./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/filter.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/filter.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Filter: () => (/* binding */ Filter)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\nvar Filter = /** @class */ (function () {\n    function Filter(parent) {\n        this.adjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n            exposure: 0, transparency: 100, sharpen: false, bw: false }; // for toolbar slider value\n        this.tempAdjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n            exposure: 0, transparency: 100, sharpen: false, bw: false }; // for temp toolbar slider value\n        this.adjustmentValue = ''; // for internal slider value\n        this.isBrightnessAdjusted = false;\n        this.bevelFilter = 'none';\n        this.tempAdjVal = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n            exposure: 0, transparency: 100, sharpen: false, bw: false };\n        this.tempFilVal = '';\n        this.parent = parent;\n        this.addEventListener();\n    }\n    Filter.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.removeEventListener();\n    };\n    Filter.prototype.addEventListener = function () {\n        this.parent.on('filter', this.filter, this);\n        this.parent.on('destroyed', this.destroy, this);\n    };\n    Filter.prototype.removeEventListener = function () {\n        this.parent.off('filter', this.filter);\n        this.parent.off('destroyed', this.destroy);\n    };\n    Filter.prototype.filter = function (args) {\n        this.updatePrivateVariables();\n        switch (args.prop) {\n            case 'finetuneImage':\n                this.finetuneImage(args.value['option'], args.value['value']);\n                break;\n            case 'applyImageFilter':\n                this.setFilter(args.value['option']);\n                break;\n            case 'update-finetunes':\n                this.updateFinetunes();\n                break;\n            case 'set-adjustment':\n                this.setAdjustment(args.value['operation']);\n                break;\n            case 'initFilter':\n                this.initFilter();\n                break;\n            case 'setCurrAdjValue':\n                this.setCurrAdjValue(args.value['type'], args.value['value']);\n                break;\n            case 'updateAdj':\n                this.updateAdj(args.value['type'], args.value['value'], args.value['isPreview'], args.value['ctx']);\n                break;\n            case 'getCurrentObj':\n                this.getCurrentObj(args.value['object']);\n                break;\n            case 'getAdjustmentLevel':\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.activeObj.opacity)) {\n                    this.adjustmentLevel.transparency = 100;\n                }\n                else {\n                    this.adjustmentLevel.transparency = this.parent.activeObj.opacity * 100;\n                }\n                args.value['obj']['adjustmentLevel'] = this.adjustmentLevel;\n                break;\n            case 'setAdjustmentLevel':\n                this.adjustmentLevel = args.value['adjustmentLevel'];\n                break;\n            case 'getTempAdjustmentLevel':\n                args.value['obj']['tempAdjustmentLevel'] = this.tempAdjustmentLevel;\n                break;\n            case 'setTempAdjustmentLevel':\n                this.tempAdjustmentLevel = args.value['tempAdjustmentLevel'];\n                break;\n            case 'setAdjustmentValue':\n                this.adjustmentValue = args.value['adjustmentValue'];\n                break;\n            case 'setBrightnessAdjusted':\n                this.isBrightnessAdjusted = args.value['isBrightnessAdjusted'];\n                if (this.parent.currentFilter.split('_') && this.parent.currentFilter.split('_')[1] === 'cold') {\n                    this.isBrightnessAdjusted = false;\n                }\n                break;\n            case 'getBevelFilter':\n                args.value['obj']['bevelFilter'] = this.bevelFilter;\n                break;\n            case 'setBevelFilter':\n                this.bevelFilter = args.value['bevelFilter'];\n                break;\n            case 'setTempAdjVal':\n                this.tempAdjVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.adjustmentLevel, {}, true);\n                break;\n            case 'setTempFilVal':\n                this.tempFilVal = this.parent.currentFilter;\n                break;\n            case 'reset':\n                this.reset();\n                break;\n            case 'apply-filter':\n                this.applyFilter(args.value['context']);\n                break;\n        }\n    };\n    Filter.prototype.updatePrivateVariables = function () {\n        var parent = this.parent;\n        if (parent.lowerCanvas) {\n            this.lowerContext = parent.lowerCanvas.getContext('2d');\n        }\n    };\n    Filter.prototype.getModuleName = function () {\n        return 'filter';\n    };\n    Filter.prototype.reset = function () {\n        this.adjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0,\n            blur: 0, exposure: 0, transparency: 100, sharpen: false, bw: false };\n        this.tempAdjustmentLevel = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0,\n            blur: 0, exposure: 0, transparency: 100, sharpen: false, bw: false };\n        this.adjustmentValue = this.parent.getDefaultFilter();\n        this.isBrightnessAdjusted = false;\n        this.bevelFilter = 'none';\n        this.tempFilVal = '';\n        this.tempAdjVal = { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0,\n            blur: 0, exposure: 0, transparency: 100, sharpen: false, bw: false };\n    };\n    Filter.prototype.updateFinetunes = function () {\n        var _this = this;\n        var parent = this.parent;\n        var fs = parent.finetuneSettings;\n        if (fs) {\n            var propertiesToSet = ['brightness', 'contrast', 'hue', 'saturation', 'exposure', 'opacity', 'blur'];\n            propertiesToSet.forEach(function (property) {\n                if (fs[property]) {\n                    _this.adjustmentLevel[property] = fs[property].defaultValue;\n                    _this.tempAdjustmentLevel[property] = fs[property].defaultValue;\n                }\n            });\n            parent.notify('draw', { prop: 'isInitialLoading', onPropertyChange: false, value: { isInitialLoading: true } });\n        }\n    };\n    Filter.prototype.initFilter = function () {\n        this.setFilterAdj('brightness', this.adjustmentLevel.brightness);\n        this.setFilterAdj('contrast', this.adjustmentLevel.contrast);\n        this.setFilterAdj('hue', this.adjustmentLevel.hue);\n        this.setFilterAdj('saturation', this.adjustmentLevel.saturation);\n        this.setFilterAdj('exposure', this.adjustmentLevel.exposure);\n        this.setFilterAdj('opacity', this.adjustmentLevel.opacity);\n        this.setFilterAdj('blur', this.adjustmentLevel.blur);\n    };\n    Filter.prototype.updateAdj = function (type, value, isPreview, ctx) {\n        var parent = this.parent;\n        this.lowerContext.clearRect(0, 0, parent.lowerCanvas.width, parent.lowerCanvas.height);\n        var splitWords = this.lowerContext.filter.split(' ');\n        var values = [];\n        var brightness = this.getFilterValue(this.adjustmentLevel.brightness);\n        var saturate;\n        var bright;\n        var saturatePercent;\n        var contrast;\n        var saturatePercentage;\n        switch (type) {\n            case 'brightness':\n                value = this.getFilterValue(this.adjustmentLevel.exposure) + (value * 0.005);\n                splitWords[0] = 'brightness(' + value + ')';\n                if (this.adjustmentLevel.brightness !== 0) {\n                    value = (this.adjustmentLevel.opacity / 100) - (this.adjustmentLevel.opacity * 0.3) / 100;\n                    splitWords[4] = 'opacity(' + value + ')';\n                }\n                else {\n                    value = this.adjustmentLevel.opacity / 100;\n                    splitWords[4] = 'opacity(' + value + ')';\n                }\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'contrast':\n                splitWords[1] = 'contrast(' + value + '%)';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'hue':\n                splitWords[2] = 'hue-rotate(' + value + 'deg)';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'saturation':\n                splitWords[3] = 'saturate(' + value + '%)';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'opacity':\n                if (parseFloat(splitWords[0].split('(')[1]) !== 1) {\n                    value -= 0.2;\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                splitWords[4] = 'opacity(' + value + ')';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'blur':\n                splitWords[5] = 'blur(' + value + 'px)';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'exposure':\n                if (value > 1) {\n                    value -= 1;\n                    value += brightness;\n                }\n                else if (value < 1) {\n                    value = 1 - value;\n                    value = brightness - value;\n                }\n                splitWords[0] = 'brightness(' + value + ')';\n                this.adjustmentValue = splitWords.join(' ');\n                break;\n            case 'chrome':\n                saturate = this.getSaturationFilterValue(this.adjustmentLevel.saturation);\n                saturate *= 100;\n                value = saturate + (saturate * 0.4);\n                splitWords[3] = 'saturate(' + value + '%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[0] = values[0];\n                splitWords[1] = values[1];\n                splitWords[2] = values[2];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[6] = 'sepia(0%)';\n                splitWords[7] = 'grayscale(0%)';\n                splitWords[8] = 'invert(0%)';\n                break;\n            case 'cold':\n                // Adjusting Brightness\n                bright = this.getFilterValue(this.adjustmentLevel.brightness);\n                bright *= 100;\n                value = bright * 0.9;\n                value *= 0.01;\n                splitWords[0] = 'brightness(' + value + ')';\n                // Adjusting Contrast\n                contrast = this.getFilterValue(this.adjustmentLevel.contrast);\n                contrast *= 100;\n                value = contrast + (contrast * 0.5);\n                splitWords[1] = 'contrast(' + value + '%)';\n                // Adjusting Saturation\n                saturatePercentage = this.getSaturationFilterValue(this.adjustmentLevel.saturation);\n                saturatePercentage *= 100;\n                value = saturatePercentage;\n                splitWords[3] = 'saturate(' + value + '%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[2] = values[2];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[6] = 'sepia(0%)';\n                splitWords[7] = 'grayscale(0%)';\n                splitWords[8] = 'invert(0%)';\n                break;\n            case 'warm':\n                saturatePercent = this.getSaturationFilterValue(this.adjustmentLevel.saturation);\n                saturatePercent *= 100;\n                value = saturatePercent + (saturatePercent * 0.4);\n                splitWords[3] = 'saturate(' + value + '%)';\n                splitWords[6] = 'sepia(25%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[0] = values[0];\n                splitWords[1] = values[1];\n                splitWords[2] = values[2];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[7] = 'grayscale(0%)';\n                splitWords[8] = 'invert(0%)';\n                break;\n            case 'grayscale':\n                splitWords[7] = 'grayscale(100%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[0] = values[0];\n                splitWords[1] = values[1];\n                splitWords[2] = values[2];\n                splitWords[3] = values[3];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[6] = 'sepia(0%)';\n                splitWords[8] = 'invert(0%)';\n                break;\n            case 'sepia':\n                splitWords[6] = 'sepia(100%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[0] = values[0];\n                splitWords[1] = values[1];\n                splitWords[2] = values[2];\n                splitWords[3] = values[3];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[7] = 'grayscale(0%)';\n                splitWords[8] = 'invert(0%)';\n                break;\n            case 'invert':\n                splitWords[8] = 'invert(100%)';\n                values = this.adjustmentValue.split(' ');\n                splitWords[0] = values[0];\n                splitWords[1] = values[1];\n                splitWords[2] = values[2];\n                splitWords[3] = values[3];\n                splitWords[4] = values[4];\n                splitWords[5] = values[5];\n                splitWords[6] = 'sepia(0%)';\n                splitWords[7] = 'grayscale(0%)';\n                break;\n        }\n        if (type !== 'sharpen' && type !== 'blackandwhite') {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreview)) {\n                if (type === 'default') {\n                    splitWords = this.getDefaultCurrentFilter(splitWords);\n                }\n                this.lowerContext.filter = splitWords.join(' ');\n            }\n            splitWords = this.setTempFilterValue(brightness, isPreview, splitWords, type);\n            parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: true } });\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'initial', isPreventDestination: null, isRotatePan: null } });\n            var tempFilter = void 0;\n            if (parent.frameObj.type === 'bevel') {\n                tempFilter = this.lowerContext.filter;\n                this.bevelFilter = tempFilter;\n            }\n            if (parent.transform.degree === 0 && parent.rotateFlipColl.length > 0) {\n                parent.img.destLeft += parent.panPoint.totalPannedPoint.x;\n                parent.img.destTop += parent.panPoint.totalPannedPoint.y;\n            }\n            parent.img.destLeft += parent.panPoint.totalPannedInternalPoint.x;\n            parent.img.destTop += parent.panPoint.totalPannedInternalPoint.y;\n            if (parent.transform.degree === 0) {\n                parent.notify('transform', { prop: 'setDestPointsForFlipState', onPropertyChange: false });\n            }\n            parent.notify('draw', { prop: 'drawImage', onPropertyChange: false });\n            parent.notify('draw', { prop: 'updateCurrTransState', onPropertyChange: false,\n                value: { type: 'reverse', isPreventDestination: null, isRotatePan: null } });\n            parent.notify('draw', { prop: 'setRotateZoom', onPropertyChange: false, value: { isRotateZoom: false } });\n            if (parent.transform.degree === 0 && parent.rotateFlipColl.length > 0) {\n                parent.img.destLeft += parent.panPoint.totalPannedPoint.x;\n                parent.img.destTop += parent.panPoint.totalPannedPoint.y;\n            }\n            splitWords = this.setTempFilterValue(brightness, isPreview, splitWords, type);\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreview)) {\n                this.lowerContext.filter = splitWords.join(' ');\n            }\n            parent.initialAdjustmentValue = splitWords.join(' ');\n            tempFilter = this.lowerContext.filter;\n            this.lowerContext.filter = 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +\n                'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';\n            this.bevelFilter = tempFilter;\n            parent.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                value: { ctx: this.lowerContext, shape: 'iterate', pen: 'iterate', isPreventApply: null } });\n            this.lowerContext.filter = tempFilter;\n            parent.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n            if ((parent.currSelectionPoint && parent.currSelectionPoint.shape === 'crop-circle') || parent.isCircleCrop) {\n                parent.notify('crop', { prop: 'cropCircle', onPropertyChange: false,\n                    value: { context: this.lowerContext, isSave: null, isFlip: null } });\n            }\n            this.isBrightnessAdjusted = brightness !== 1;\n        }\n        var filter = splitWords.join(' ');\n        if (ctx) {\n            ctx.filter = filter;\n        }\n    };\n    Filter.prototype.setTempFilterValue = function (brightness, isPreview, splitWords, type) {\n        if (isPreview) {\n            if (type === 'default') {\n                splitWords = this.getDefaultCurrentFilter(splitWords);\n            }\n            else if (brightness !== 1) {\n                var tempSplitWords = this.lowerContext.filter.split(' ');\n                tempSplitWords[4] = splitWords[4];\n                this.lowerContext.filter = tempSplitWords.join(' ');\n            }\n        }\n        return splitWords;\n    };\n    Filter.prototype.getDefaultCurrentFilter = function (splitWords) {\n        var values = this.adjustmentValue.split(' ');\n        splitWords = [values[0], values[1], values[2], values[3], values[4], values[5], 'sepia(0%)', 'grayscale(0%)', 'invert(0%)'];\n        return splitWords;\n    };\n    Filter.prototype.getFilterValue = function (value) {\n        return (value === 0) ? 1 : 1 + ((value * 0.5) / 100);\n    };\n    Filter.prototype.getSaturationFilterValue = function (value) {\n        return value === 0 ? 1 : 1 + (value / 100);\n    };\n    Filter.prototype.setFilterAdj = function (type, value) {\n        var parent = this.parent;\n        parent.notify('freehand-draw', { prop: 'apply-pen-draw', onPropertyChange: false });\n        this.adjustmentLevel[\"\" + type] = value;\n        switch (type) {\n            case 'contrast':\n            case 'exposure':\n                value = this.getFilterValue(value);\n                if (type === 'contrast') {\n                    value *= 100;\n                }\n                break;\n            case 'hue':\n                value *= 3;\n                break;\n            case 'saturation':\n                value = this.getSaturationFilterValue(value) * 100;\n                break;\n            case 'opacity':\n                if (value < 10) {\n                    value += 1;\n                }\n                value /= 100;\n                break;\n            case 'blur':\n                if (value !== 0) {\n                    value /= 20;\n                    // Since 0.5 is not working in blur we consider from 1\n                    value += 0.5;\n                }\n                break;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.cropObj, {}, true);\n        var prevObj = this.getCurrentObj();\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false, value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        this.updateAdj(type, value);\n        parent.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: type, previousObj: prevObj,\n                previousObjColl: prevObj.objColl, previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                previousCropObj: prevCropObj, previousText: null, currentText: null, previousFilter: null, isCircleCrop: null\n            } });\n    };\n    Filter.prototype.setFilter = function (type) {\n        var parent = this.parent;\n        type = type.toLowerCase();\n        parent.notify('freehand-draw', { prop: 'apply-pen-draw', onPropertyChange: false });\n        var obj = { currentFilter: this.parent.currentFilter };\n        var prevFilter = obj['currentFilter'];\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.cropObj, {}, true);\n        var prevObj = this.getCurrentObj();\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        parent.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false, value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        this.updateAdj(type, null);\n        parent.notify('draw', { prop: 'setImageEdited', onPropertyChange: false });\n        parent.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n            value: { operation: type, previousObj: prevObj, previousObjColl: prevObj.objColl, previousPointColl: prevObj.pointColl,\n                previousSelPointColl: prevObj.selPointColl, previousCropObj: prevCropObj, previousText: null,\n                currentText: null, previousFilter: prevFilter, isCircleCrop: null } });\n    };\n    Filter.prototype.setAdjustment = function (type) {\n        var splitWords = this.lowerContext.filter.split(' ');\n        var value;\n        var valueArr;\n        switch (type) {\n            case 'brightness':\n                valueArr = splitWords[0].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                this.adjustmentLevel.brightness = this.setFilterValue(value);\n                break;\n            case 'contrast':\n                valueArr = splitWords[1].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                value /= 100;\n                this.adjustmentLevel.contrast = this.setFilterValue(value);\n                break;\n            case 'hue':\n                valueArr = splitWords[2].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                value /= 3;\n                this.adjustmentLevel.hue = value;\n                break;\n            case 'saturation':\n                valueArr = splitWords[3].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                value /= 100;\n                this.adjustmentLevel.saturation = this.setSaturationFilterValue(value);\n                break;\n            case 'opacity':\n                valueArr = splitWords[4].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                if (value === 0.45) {\n                    value = 40;\n                }\n                else if (value === 0.40) {\n                    value = 30;\n                }\n                else if (value === 0.35) {\n                    value = 20;\n                }\n                else if (value === 0.30) {\n                    value = 10;\n                }\n                else if (value === 0.25) {\n                    value = 0;\n                }\n                else {\n                    value *= 100;\n                }\n                this.adjustmentLevel.opacity = value;\n                break;\n            case 'blur':\n                valueArr = splitWords[5].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                value *= 20;\n                this.adjustmentLevel.blur = value;\n                break;\n            case 'exposure':\n                valueArr = splitWords[0].split('(');\n                value = parseFloat(valueArr[1].split(')')[0]);\n                this.adjustmentLevel.exposure = this.setFilterValue(value);\n                break;\n        }\n    };\n    Filter.prototype.setFilterValue = function (value) {\n        return Math.round((value === 1) ? 0 : ((value - 1) * 100) / 0.5);\n    };\n    Filter.prototype.setSaturationFilterValue = function (value) {\n        return Math.round((value === 1) ? 0 : (value - 1) * 100);\n    };\n    Filter.prototype.finetuneImage = function (finetuneOption, value) {\n        var parent = this.parent;\n        if (!parent.disabled && parent.isImageLoaded) {\n            switch (finetuneOption.toLowerCase()) {\n                case 'brightness':\n                    this.setFilterAdj('brightness', value);\n                    break;\n                case 'contrast':\n                    this.setFilterAdj('contrast', value);\n                    break;\n                case 'hue':\n                    this.setFilterAdj('hue', value);\n                    break;\n                case 'saturation':\n                    this.setFilterAdj('saturation', value);\n                    break;\n                case 'opacity':\n                    this.setFilterAdj('opacity', value);\n                    break;\n                case 'blur':\n                    this.setFilterAdj('blur', value);\n                    break;\n                case 'exposure':\n                    this.setFilterAdj('exposure', value);\n                    break;\n            }\n            this.parent.canvasFilter = this.lowerContext.filter;\n            parent.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n        }\n    };\n    Filter.prototype.setCurrAdjValue = function (type, value) {\n        var parent = this.parent;\n        this.parent.notify('draw', { prop: 'setImageEdited', onPropertyChange: false });\n        switch (type) {\n            case 'brightness':\n                this.setFilterAdj('brightness', value);\n                break;\n            case 'contrast':\n                this.setFilterAdj('contrast', value);\n                break;\n            case 'hue':\n                this.setFilterAdj('hue', value);\n                break;\n            case 'saturation':\n                this.setFilterAdj('saturation', value);\n                break;\n            case 'opacity':\n                this.setFilterAdj('opacity', value);\n                break;\n            case 'blur':\n                this.setFilterAdj('blur', value);\n                break;\n            case 'exposure':\n                this.setFilterAdj('exposure', value);\n                break;\n        }\n        parent.isFinetuneBtnClick = true;\n        parent.curFinetuneObjEvent = { finetune: parent.toPascalCase(type), value: value };\n    };\n    Filter.prototype.getCurrentObj = function (dummyObj) {\n        var parent = this.parent;\n        var tempFlipPanPointObj = { point: null };\n        parent.notify('crop', { prop: 'getTempFlipPanPoint', value: { obj: tempFlipPanPointObj } });\n        var zoomObj = { previousZoomValue: null };\n        parent.notify('transform', { prop: 'getPreviousZoomValue', value: { obj: zoomObj } });\n        var straightenObj = { zoomFactor: null };\n        parent.notify('draw', { prop: 'getStraightenInitZoom', value: { obj: straightenObj } });\n        var bgObj = { color: null };\n        parent.notify('draw', { prop: 'getImageBackgroundColor', value: { obj: bgObj } });\n        var obj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },\n            totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {},\n            rotateFlipColl: [], degree: 0, currFlipState: '', zoomFactor: 0, previousZoomValue: 0, straighten: 0,\n            destPoints: { startX: 0, startY: 0, width: 0, height: 0 }, frame: 'none',\n            srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '', isBrightAdjust: this.isBrightnessAdjusted,\n            aspectWidth: null, aspectHeight: null, straightenZoom: 0, adjustmentLevel: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.tempAdjVal, {}, true),\n            currentFilter: this.tempFilVal, imageSource: '', bgColor: '' };\n        obj.cropZoom = parent.transform.cropZoomFactor;\n        obj.defaultZoom = parent.transform.defaultZoomFactor;\n        obj.zoomFactor = parent.zoomSettings.zoomFactor;\n        obj.previousZoomValue = zoomObj['previousZoomValue'];\n        obj.straightenZoom = straightenObj['zoomFactor'];\n        obj.totalPannedPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedPoint, {}, true);\n        obj.totalPannedClientPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedClientPoint, {}, true);\n        obj.totalPannedInternalPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.panPoint.totalPannedInternalPoint, {}, true);\n        obj.tempFlipPanPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, tempFlipPanPointObj['point'], {}, true);\n        obj.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.activeObj, {}, true);\n        obj.rotateFlipColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], parent.rotateFlipColl, [], true);\n        obj.degree = parent.transform.degree;\n        obj.straighten = parent.cropObj.straighten;\n        obj.currFlipState = parent.transform.currFlipState;\n        obj.destPoints = { startX: parent.img.destLeft, startY: parent.img.destTop, endX: 0, endY: 0,\n            width: parent.img.destWidth, height: parent.img.destHeight };\n        obj.srcPoints = { startX: parent.img.srcLeft, startY: parent.img.srcTop, endX: 0, endY: 0,\n            width: parent.img.srcWidth, height: parent.img.srcHeight };\n        obj.filter = this.lowerContext.filter;\n        obj.aspectWidth = parent.aspectWidth;\n        obj.aspectHeight = parent.aspectHeight;\n        obj.frame = parent.frameObj.type;\n        obj.frameObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, parent.frameObj);\n        obj.imageSource = parent.baseImg.src;\n        obj.bgColor = bgObj['color'];\n        if (dummyObj) {\n            dummyObj['currObj'] = obj;\n        }\n        return obj;\n    };\n    /* Filter safari related codes */\n    Filter.prototype.getValFromPercentage = function (percentage) {\n        var val = parseFloat(percentage);\n        // check for percentages and divide by a hundred\n        if (/%\\s*?$/i.test(percentage)) {\n            val /= 100;\n        }\n        return val;\n    };\n    Filter.prototype.getValFromLength = function (length) {\n        return parseFloat(length);\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.parseFilterString = function (filterString) {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var filterArray = [];\n        if (filterString && filterString !== 'none') {\n            filterArray = filterString.split(' ').map(function (filter) {\n                var _a = filter.match(/([a-z-]+)\\(([^)]+)\\)/).slice(1, 3), name = _a[0], value = _a[1];\n                return { filter: name, value: value };\n            });\n        }\n        return filterArray;\n    };\n    Filter.prototype.applyFilter = function (context) {\n        var _a = context.canvas, height = _a.height, width = _a.width;\n        var imageData = context.getImageData(0, 0, width, height);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var filterArray = this.parseFilterString(context.filter);\n        for (var i = 0, len = filterArray.length; i < len; i++) {\n            switch (filterArray[i].filter) {\n                case 'blur':\n                    imageData = this.blur(context, imageData, filterArray[i].value);\n                    break;\n                case 'brightness':\n                    imageData = this.brightness(imageData, filterArray[i].value);\n                    break;\n                case 'contrast':\n                    imageData = this.contrast(imageData, filterArray[i].value);\n                    break;\n                case 'grayscale':\n                    imageData = this.grayscale(imageData, filterArray[i].value);\n                    break;\n                case 'hue-rotate':\n                    imageData = this.hueRotate(imageData, filterArray[i].value);\n                    break;\n                case 'invert':\n                    imageData = this.invert(imageData, filterArray[i].value);\n                    break;\n                case 'opacity':\n                    imageData = this.opacity(imageData, filterArray[i].value);\n                    break;\n                case 'saturate':\n                    imageData = this.saturate(context, imageData, filterArray[i].value);\n                    break;\n                case 'sepia':\n                    imageData = this.sepia(imageData, filterArray[i].value);\n                    break;\n            }\n        }\n        context.putImageData(imageData, 0, 0);\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.blur = function (context, imageData, radius) {\n        if (radius === void 0) { radius = '0'; }\n        var blurRadius = this.getValFromLength(radius);\n        blurRadius = Math.floor(blurRadius);\n        if (blurRadius <= 0) {\n            return imageData;\n        }\n        var _a = context.canvas, height = _a.height, width = _a.width;\n        var data = imageData.data;\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var blurredData = new Uint8ClampedArray(data.length);\n        for (var y = 0; y < height; y++) {\n            for (var x = 0; x < width; x++) {\n                var r = 0;\n                var g = 0;\n                var b = 0;\n                var a = 0;\n                var count = 0;\n                for (var dy = -blurRadius; dy <= blurRadius; dy++) {\n                    for (var dx = -blurRadius; dx <= blurRadius; dx++) {\n                        var nx = x + dx;\n                        var ny = y + dy;\n                        if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\n                            var offset = (ny * width + nx) * 4;\n                            r += data[offset];\n                            g += data[offset + 1];\n                            b += data[offset + 2];\n                            a += data[offset + 3];\n                            count++;\n                        }\n                    }\n                }\n                var i = (y * width + x) * 4;\n                blurredData[i] = r / count;\n                blurredData[i + 1] = g / count;\n                blurredData[i + 2] = b / count;\n                blurredData[i + 3] = a / count;\n            }\n        }\n        for (var i = 0; i < data.length; i++) {\n            data[i] = blurredData[i];\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.brightness = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '1'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor !== 1) {\n            var data = imageData.data;\n            var length_1 = data.length;\n            for (var i = 0; i < length_1; i += 4) {\n                data[i + 0] *= factor;\n                data[i + 1] *= factor;\n                data[i + 2] *= factor;\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.contrast = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '1'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor !== 1) {\n            var data = imageData.data;\n            var length_2 = data.length;\n            for (var i = 0; i < length_2; i += 4) {\n                data[i + 0] = ((data[i + 0] / 255 - 0.5) * factor + 0.5) * 255;\n                data[i + 1] = ((data[i + 1] / 255 - 0.5) * factor + 0.5) * 255;\n                data[i + 2] = ((data[i + 2] / 255 - 0.5) * factor + 0.5) * 255;\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.grayscale = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '0'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor > 0) {\n            var data = imageData.data;\n            var length_3 = data.length;\n            for (var i = 0; i < length_3; i += 4) {\n                var r = data[i];\n                var g = data[i + 1];\n                var b = data[i + 2];\n                // Calculate the grayscale value using the luminosity method\n                var gray = 0.299 * r + 0.587 * g + 0.114 * b;\n                // Blend the original color with the grayscale value based on the percentage\n                data[i] = r * (1 - factor) + gray * factor;\n                data[i + 1] = g * (1 - factor) + gray * factor;\n                data[i + 2] = b * (1 - factor) + gray * factor;\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.hueRotate = function (imageData, rotation) {\n        if (rotation === void 0) { rotation = '0deg'; }\n        var data = imageData.data;\n        var angle = parseFloat(rotation) * (Math.PI / 180);\n        if (angle > 0) {\n            var cosA = Math.cos(angle);\n            var sinA = Math.sin(angle);\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            var matrix = [\n                0.213 + cosA * 0.787 - sinA * 0.213, 0.715 - cosA * 0.715 - sinA * 0.715, 0.072 - cosA * 0.072 + sinA * 0.928,\n                0.213 - cosA * 0.213 + sinA * 0.143, 0.715 + cosA * 0.285 + sinA * 0.140, 0.072 - cosA * 0.072 - sinA * 0.283,\n                0.213 - cosA * 0.213 - sinA * 0.787, 0.715 - cosA * 0.715 + sinA * 0.715, 0.072 + cosA * 0.928 + sinA * 0.072\n            ];\n            for (var i = 0; i < data.length; i += 4) {\n                var r = data[i];\n                var g = data[i + 1];\n                var b = data[i + 2];\n                // Apply the hue rotation matrix\n                data[i] = matrix[0] * r + matrix[1] * g + matrix[2] * b;\n                data[i + 1] = matrix[3] * r + matrix[4] * g + matrix[5] * b;\n                data[i + 2] = matrix[6] * r + matrix[7] * g + matrix[8] * b;\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.invert = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '0'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor > 0) {\n            var data = imageData.data;\n            var length_4 = data.length;\n            for (var i = 0; i < length_4; i += 4) {\n                data[i + 0] = Math.abs(data[i + 0] - 255 * factor);\n                data[i + 1] = Math.abs(data[i + 1] - 255 * factor);\n                data[i + 2] = Math.abs(data[i + 2] - 255 * factor);\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.opacity = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '0'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor >= 0) {\n            var data = imageData.data;\n            var length_5 = data.length;\n            for (var i = 3; i < length_5; i += 4) {\n                data[i] *= factor;\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.saturate = function (context, imageData, percentage) {\n        if (percentage === void 0) { percentage = '0'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor !== 1) {\n            var _a = context.canvas, width = _a.width, height = _a.height;\n            var data = imageData.data;\n            var lumR = (1 - factor) * 0.3086;\n            var lumG = (1 - factor) * 0.6094;\n            var lumB = (1 - factor) * 0.082;\n            // tslint:disable-next-line no-bitwise\n            var shiftW = width << 2;\n            for (var j = 0; j < height; j++) {\n                var offset = j * shiftW;\n                for (var i = 0; i < width; i++) {\n                    // tslint:disable-next-line no-bitwise\n                    var pos = offset + (i << 2);\n                    var r = data[pos + 0];\n                    var g = data[pos + 1];\n                    var b = data[pos + 2];\n                    data[pos + 0] = (lumR + factor) * r + lumG * g + lumB * b;\n                    data[pos + 1] = lumR * r + (lumG + factor) * g + lumB * b;\n                    data[pos + 2] = lumR * r + lumG * g + (lumB + factor) * b;\n                }\n            }\n        }\n        return imageData;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    Filter.prototype.sepia = function (imageData, percentage) {\n        if (percentage === void 0) { percentage = '0'; }\n        var factor = this.getValFromPercentage(percentage);\n        if (factor > 1) {\n            factor = 1;\n        }\n        if (factor > 0) {\n            var data = imageData.data;\n            var length_6 = data.length;\n            for (var i = 0; i < length_6; i += 4) {\n                var r = data[i + 0];\n                var g = data[i + 1];\n                var b = data[i + 2];\n                data[i + 0] =\n                    (0.393 * r + 0.769 * g + 0.189 * b) * factor + r * (1 - factor);\n                data[i + 1] =\n                    (0.349 * r + 0.686 * g + 0.168 * b) * factor + g * (1 - factor);\n                data[i + 2] =\n                    (0.272 * r + 0.534 * g + 0.131 * b) * factor + b * (1 - factor);\n            }\n        }\n        return imageData;\n    };\n    return Filter;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-image-editor/src/image-editor/action/filter.js?");

/***/ })

}]);