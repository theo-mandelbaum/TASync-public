"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-diagrams_src_diagram_objects_bpmn_js-6c79afb9"],{

/***/ "./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/bpmn.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/bpmn.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BpmnDiagrams: () => (/* binding */ BpmnDiagrams),\n/* harmony export */   getBpmnGatewayShapePathData: () => (/* binding */ getBpmnGatewayShapePathData),\n/* harmony export */   getBpmnLoopShapePathData: () => (/* binding */ getBpmnLoopShapePathData),\n/* harmony export */   getBpmnShapePathData: () => (/* binding */ getBpmnShapePathData),\n/* harmony export */   getBpmnTaskShapePathData: () => (/* binding */ getBpmnTaskShapePathData),\n/* harmony export */   getBpmnTriggerShapePathData: () => (/* binding */ getBpmnTriggerShapePathData)\n/* harmony export */ });\n/* harmony import */ var _objects_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../objects/node */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/node.js\");\n/* harmony import */ var _core_elements_diagram_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../core/elements/diagram-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/diagram-element.js\");\n/* harmony import */ var _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../core/containers/canvas */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/canvas.js\");\n/* harmony import */ var _core_containers_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../core/containers/container */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/containers/container.js\");\n/* harmony import */ var _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../core/elements/path-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/path-element.js\");\n/* harmony import */ var _core_elements_text_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../core/elements/text-element */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/core/elements/text-element.js\");\n/* harmony import */ var _diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../diagram/utility/diagram-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.js\");\n/* harmony import */ var _utility_base_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utility/base-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/base-util.js\");\n/* harmony import */ var _diagram_diagram__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../diagram/diagram */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram.js\");\n/* harmony import */ var _enum_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../enum/enum */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/enum/enum.js\");\n/* harmony import */ var _utility_connector__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utility/connector */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/connector.js\");\n/* harmony import */ var _primitives_point__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../primitives/point */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/point.js\");\n/* harmony import */ var _objects_port__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./../objects/port */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/port.js\");\n/* harmony import */ var _primitives_rect__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../primitives/rect */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/rect.js\");\n/* harmony import */ var _primitives_size__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../primitives/size */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/primitives/size.js\");\n/* harmony import */ var _utility_dom_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utility/dom-util */ \"./node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/dom-util.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/ban-types */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * BPMN Diagrams contains the BPMN functionalities\n */\nvar BpmnDiagrams = /** @class */ (function () {\n    //End size region\n    /**\n     * Constructor for the BpmnDiagrams module\n     *\n     * @private\n     */\n    function BpmnDiagrams() {\n        //Code conversion for Bpmn Shapes\n        //Start Region\n        /**   @private  */\n        this.bpmnTextAnnotationConnector = [];\n        //constructs the BpmnDiagrams module\n    }\n    /**   @private  */\n    BpmnDiagrams.prototype.getSize = function (node, content) {\n        var size = new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size(node.width, node.height);\n        if (size.width === undefined || size.height === undefined) {\n            if (!(content instanceof _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement)) {\n                size.width = size.width || 50;\n                size.height = size.height || 50;\n            }\n            if (content.actualSize.width && content.actualSize.height) {\n                return content.actualSize;\n            }\n            else {\n                content.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size());\n                size.width = size.width || content.desiredSize.width;\n                size.height = size.height || content.desiredSize.height;\n            }\n            if (node.maxWidth !== undefined) {\n                size.width = Math.min(size.width, node.maxWidth);\n            }\n            if (node.maxHeight !== undefined) {\n                size.height = Math.min(size.height, node.maxHeight);\n            }\n            if (node.minWidth !== undefined) {\n                size.width = Math.max(size.width, node.minWidth);\n            }\n            if (node.minHeight !== undefined) {\n                size.height = Math.max(size.height, node.minHeight);\n            }\n        }\n        return size;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.initBPMNContent = function (content, node, diagram) {\n        var shape = node.shape;\n        var bpmnShape = node.shape.shape;\n        if (bpmnShape === 'Event') {\n            content = this.getBPMNEventShape(node, shape.event);\n        }\n        if (bpmnShape === 'Gateway') {\n            content = this.getBPMNGatewayShape(node);\n        }\n        if (bpmnShape === 'DataObject') {\n            content = this.getBPMNDataObjectShape(node);\n        }\n        if (bpmnShape === 'Message' || bpmnShape === 'DataSource') {\n            content = this.getBPMNShapes(node);\n        }\n        //848061-BPMN Group shape to be function Like Subprocess Node\n        if (bpmnShape === 'Group') {\n            //854195 - bpmn group serialization issue\n            content = this.getBPMNGroup(node, diagram);\n            content.style.strokeDashArray = node.style.strokeDashArray !== '' ? node.style.strokeDashArray : '2 2 6 2';\n            content.cornerRadius = 10;\n        }\n        if (bpmnShape === 'Activity') {\n            content = this.getBPMNActivityShape(node);\n        }\n        //Task 866412: Should revamp BPMN text annotation node.\n        if (bpmnShape === 'TextAnnotation') {\n            if (node.parentObj instanceof _diagram_diagram__WEBPACK_IMPORTED_MODULE_8__.Diagram || node.parentObj instanceof _objects_node__WEBPACK_IMPORTED_MODULE_0__.Lane) {\n                content = this.getBpmnTextAnnotationShape(node, node.shape, diagram);\n            }\n            else {\n                content = this.getBpmnTextAnnotationSymbol(node, node.shape, diagram);\n            }\n        }\n        return content;\n    };\n    BpmnDiagrams.prototype.getBpmnTextAnnotationShape = function (textAnnotation, bpmnTextAnnotation, diagram) {\n        var annotationsContainer = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        annotationsContainer.measureChildren = false;\n        annotationsContainer.offsetX = textAnnotation.offsetX;\n        annotationsContainer.offsetY = textAnnotation.offsetY;\n        annotationsContainer.float = true;\n        annotationsContainer.id = textAnnotation.id + \"_textannotation\";\n        annotationsContainer.style.strokeColor = 'transparent';\n        annotationsContainer.style.fill = 'transparent';\n        annotationsContainer.relativeMode = 'Object';\n        annotationsContainer.rotateAngle = 0;\n        var width = textAnnotation.width;\n        var height = textAnnotation.height;\n        var bounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_13__.Rect(0, 0, 0, 0);\n        if (width !== 0 && height !== 0) {\n            bounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_13__.Rect(textAnnotation.offsetX - width / 2, textAnnotation.offsetY - height / 2, width, height);\n        }\n        var oldIsProtectedOnChange = diagram.isProtectedOnChange;\n        diagram.isProtectedOnChange = false;\n        this.setAnnotationPath(bounds, annotationsContainer, textAnnotation, bpmnTextAnnotation, bpmnTextAnnotation.textAnnotation.textAnnotationDirection, diagram);\n        diagram.isProtectedOnChange = oldIsProtectedOnChange;\n        return annotationsContainer;\n    };\n    //Task 866412: Should revamp BPMN text annotation node. To render text annotation in symbol palette.\n    BpmnDiagrams.prototype.getBpmnTextAnnotationSymbol = function (annotation, bpmnTextAnnotation, diagram) {\n        var data = 'M33.33,15 L0,43 M39.33,0 L33.33,0 L33.33,30 L39.33,30 M60,0';\n        if (bpmnTextAnnotation.textAnnotation.textAnnotationDirection === 'Top') {\n            data = 'M15,33.33 L43,0 M0,39.33 L0,33.33 L30,33.33 L30,39.33 M0,60';\n        }\n        else if (bpmnTextAnnotation.textAnnotation.textAnnotationDirection === 'Right') {\n            data = 'M6,15 L39.33,43 M0,0 L6,0 L6,30 L0,30 M-20,0';\n        }\n        else if (bpmnTextAnnotation.textAnnotation.textAnnotationDirection === 'Bottom') {\n            data = 'M15,6 L43,39.33 M0,0 L0,6 L30,6 L30,0 M0,-20';\n        }\n        var path = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        path.data = data;\n        path.style.fill = ((annotation.style.fill === 'white') ? 'transparent' : annotation.style.fill);\n        path.style.strokeDashArray = (annotation.style.strokeDashArray ? annotation.style.strokeDashArray : '');\n        path.style.strokeWidth = annotation.style.strokeWidth;\n        path.style.strokeColor = ((annotation.style.strokeColor === 'transparent') ? 'black' : annotation.style.strokeColor);\n        path.style.opacity = annotation.style.opacity;\n        return path;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNShapes = function (node) {\n        var bpmnShape = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        //set style\n        this.setStyle(bpmnShape, node);\n        //941052: Issue with visible property doesn't hide shadows\n        if ((node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.NodeConstraints.Shadow) !== 0 && node.visible) {\n            bpmnShape.shadow = node.shadow;\n        }\n        var bpmnShapeData = getBpmnShapePathData(node.shape.shape);\n        bpmnShape.data = bpmnShapeData;\n        bpmnShape.id = node.id + '_' + node.shape.shape;\n        if (node.width !== undefined && node.height !== undefined) {\n            bpmnShape.width = node.width;\n            bpmnShape.height = node.height;\n        }\n        return bpmnShape;\n    };\n    //854195 - Method to add the children as canvas in the Bpmn group node container\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNGroup = function (node, diagram) {\n        var group = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        //set style\n        this.setStyle(group, node);\n        group.id = node.id + '_group';\n        if (!group.children) {\n            group.children = [];\n        }\n        var groupShapeObj = (node.shape.group);\n        if (node.shape.group) {\n            for (var i = 0; i < groupShapeObj.children.length; i++) {\n                var child = diagram.nameTable[groupShapeObj.children[parseInt(i.toString(), 10)]];\n                group.children.push(child.wrapper);\n            }\n        }\n        group.width = node.width;\n        group.height = node.height;\n        return group;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNGatewayShape = function (node) {\n        var gatewayshape = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        //childNode0\n        var gatewayNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        gatewayNode.id = node.id + '_0_gateway';\n        gatewayNode.offsetX = node.offsetX;\n        gatewayNode.offsetY = node.offsetY;\n        gatewayNode.data = 'M 40 20 L 20 40 L 0 20 L 20 0 L 40 20 Z';\n        this.setStyle(gatewayNode, node);\n        //childNode1\n        var gatewayTypeNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        gatewayTypeNode.id = node.id + '_1_gatewayType';\n        //set style - opacity\n        gatewayTypeNode.style.opacity = node.style.opacity;\n        gatewayTypeNode.style.strokeColor = node.style.strokeColor;\n        gatewayTypeNode.horizontalAlignment = 'Center';\n        gatewayTypeNode.verticalAlignment = 'Center';\n        gatewayTypeNode.relativeMode = 'Object';\n        var shapeType = node.shape.gateway;\n        //let gatewayTypeNodeShapeData: string;\n        var gatewayTypeNodeShapeData = getBpmnGatewayShapePathData(shapeType.type);\n        if (shapeType.type === 'EventBased' || shapeType.type === 'ExclusiveEventBased' || shapeType.type === 'ParallelEventBased') {\n            gatewayTypeNode.style.fill = 'white';\n        }\n        else {\n            gatewayTypeNode.style.fill = 'black';\n        }\n        gatewayTypeNode.data = gatewayTypeNodeShapeData;\n        // append child and set style\n        gatewayshape.style.fill = 'transparent';\n        gatewayshape.style.strokeColor = 'transparent';\n        gatewayshape.style.strokeWidth = 0;\n        gatewayshape.children = [gatewayNode, gatewayTypeNode];\n        var size = this.getSize(node, gatewayNode);\n        this.setSizeForBPMNGateway(node.shape.gateway, gatewayshape, size.width, size.height);\n        return gatewayshape;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNDataObjectShape = function (node) {\n        var dataObjectshape = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        var shape = node.shape.dataObject;\n        //childNode0\n        var dataobjNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        dataobjNode.id = node.id + '_0_dataobj';\n        dataobjNode.data = 'M29.904,5 L7.853,5 L7.853,45 L42.147,45 L42.147,17.242,L29.932,5,L29.932,17.242,L42.147,17.242';\n        var size = this.getSize(node, dataobjNode);\n        dataobjNode.width = size.width;\n        dataobjNode.height = size.height;\n        this.setStyle(dataobjNode, node);\n        //childNode1\n        var dataobjTypeNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        dataobjTypeNode.id = node.id + '_1_type';\n        dataobjTypeNode.width = 25;\n        dataobjTypeNode.height = 20;\n        dataobjTypeNode.margin.left = 5;\n        dataobjTypeNode.margin.top = 5;\n        dataobjTypeNode.data = 'M 3 9.4 l 6 0 v 2.4 l 3.6 -4 L 9 4 v 2.5 H 3 V 9.4 Z';\n        //set style - opacity\n        dataobjTypeNode.style.opacity = node.style.opacity;\n        //childNode2\n        var dataobjCollectionNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        dataobjCollectionNode.id = node.id + '_2_collection';\n        dataobjCollectionNode.width = 7.5;\n        dataobjCollectionNode.height = 15;\n        dataobjCollectionNode.style.fill = 'black';\n        dataobjCollectionNode.visible = true;\n        dataobjCollectionNode.horizontalAlignment = 'Center';\n        dataobjCollectionNode.verticalAlignment = 'Bottom';\n        dataobjCollectionNode.relativeMode = 'Object';\n        //set style - opacity\n        dataobjCollectionNode.style.opacity = node.style.opacity;\n        dataobjCollectionNode.data = 'M 0 0 L 0.1 0 L 0.1 2 L 0 2 Z M 0.4 0 L 0.6 0 L 0.6 2 L0.4 2 Z M 0.9 0 L 1 0 L 1 2 L 0.9 2 Z';\n        switch (shape.type) {\n            case 'None':\n                dataobjTypeNode.visible = false;\n                break;\n            case 'Input':\n                dataobjTypeNode.style.fill = 'white';\n                break;\n            case 'Output':\n                dataobjTypeNode.style.fill = 'black';\n                break;\n        }\n        if (shape.collection === false) {\n            dataobjCollectionNode.visible = false;\n        }\n        //append child and set style\n        dataObjectshape.style.fill = 'transparent';\n        dataObjectshape.style.strokeColor = 'transparent';\n        dataObjectshape.style.strokeWidth = 0;\n        dataObjectshape.children = [dataobjNode, dataobjTypeNode, dataobjCollectionNode];\n        return dataObjectshape;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNTaskShape = function (node) {\n        var shape = node.shape.activity;\n        var task = shape.task;\n        var taskShapes = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        //childNode0\n        var taskNode = new _core_elements_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement();\n        taskNode.cornerRadius = 10;\n        var size = this.getSize(node, taskNode);\n        taskNode.id = node.id + '_0_task';\n        taskNode.width = size.width;\n        taskNode.height = size.height;\n        this.setStyle(taskNode, node);\n        // if task as call\n        if ((task.call !== undefined) && task.call === true) {\n            taskNode.style.strokeWidth = 4;\n        }\n        taskShapes.width = size.width;\n        taskShapes.height = size.height;\n        var childCount = this.getTaskChildCount(node);\n        var x;\n        var childSpace = childCount * 12;\n        var area = size.width / 2 - childSpace;\n        if (childCount === 1) {\n            x = area + 8;\n        }\n        else {\n            x = area + (childCount - 1) * 8;\n        }\n        //childNode1\n        var taskTypeNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        if (task.type === 'Receive' || task.type === 'Send') {\n            taskTypeNode.width = 18;\n            taskTypeNode.height = 16;\n        }\n        else if (task.type === 'Manual') {\n            taskTypeNode.width = 16;\n            taskTypeNode.height = 11;\n        }\n        else {\n            taskTypeNode.width = 20;\n            taskTypeNode.height = 20;\n        }\n        taskTypeNode.id = node.id + '_1_tasktType';\n        taskTypeNode.margin.left = 5;\n        taskTypeNode.margin.top = 5;\n        task.type = task.type || 'None';\n        var taskTypeNodeData = getBpmnTaskShapePathData(task.type);\n        taskTypeNode.data = taskTypeNodeData;\n        taskTypeNode.style.fill = 'transparent';\n        taskTypeNode.style.opacity = node.style.opacity;\n        if (task.type === 'Send') {\n            taskTypeNode.style.fill = 'black';\n        }\n        // append child and set style\n        taskShapes.style.fill = 'transparent';\n        taskShapes.style.strokeColor = 'transparent';\n        taskShapes.style.strokeWidth = 0;\n        taskShapes.children = [taskNode, taskTypeNode];\n        //childnode for service\n        if (task.type === 'Service') {\n            var taskTypeNodeService = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            taskTypeNodeService.id = node.id + '_1_taskTypeService';\n            taskTypeNodeService.data = taskTypeNodeData;\n            taskTypeNodeService.margin.left = taskTypeNode.margin.left + 9;\n            taskTypeNodeService.margin.top = taskTypeNode.margin.top + 9;\n            taskTypeNodeService.style.fill = 'white';\n            taskTypeNodeService.style.opacity = node.style.opacity;\n            taskShapes.children.push(taskTypeNodeService);\n        }\n        // if task as loop\n        var loopType = task.loop;\n        var taskLoopNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement(); //let childNode2data: string;\n        var childNode2data = getBpmnLoopShapePathData(loopType);\n        taskLoopNode.data = childNode2data;\n        taskLoopNode.style.fill = 'black';\n        if (loopType !== 'None') {\n            taskLoopNode.visible = true;\n        }\n        else {\n            taskLoopNode.visible = false;\n        }\n        if (childCount === 1) {\n            x = area + 9;\n        }\n        //891296: Position of BPMN activity loop node is not proper while save and load\n        taskLoopNode.margin.left = x - 3;\n        if (taskLoopNode.visible === true) {\n            x += 12 + 8;\n        }\n        taskLoopNode.width = 12;\n        taskLoopNode.height = 12;\n        taskLoopNode.margin.bottom = 5;\n        taskLoopNode.id = node.id + '_2_loop';\n        taskLoopNode.horizontalAlignment = 'Left';\n        taskLoopNode.verticalAlignment = 'Bottom';\n        taskLoopNode.setOffsetWithRespectToBounds(0, 1, 'Fraction');\n        taskLoopNode.relativeMode = 'Point';\n        taskLoopNode.style.fill = 'transparent';\n        taskTypeNode.style.opacity = node.style.opacity;\n        taskShapes.children.push(taskLoopNode);\n        //if task as compensation\n        var taskCompNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        taskCompNode = this.getBPMNCompensationShape(node, taskCompNode);\n        if (task.compensation === true) {\n            taskCompNode.visible = true;\n        }\n        else {\n            taskCompNode.visible = false;\n        }\n        if (childCount === 1) {\n            x = area + 9;\n        }\n        taskCompNode.margin.left = x - 3;\n        x += 12 + 6;\n        taskShapes.children.push(taskCompNode);\n        return taskShapes;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNEventShape = function (node, subEvent, sub, id) {\n        var eventshape = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        var event;\n        var trigger;\n        var width;\n        var height;\n        id = id || node.id;\n        var pathdata = 'M164.1884,84.6909000000001C156.2414,84.6909000000001,149.7764,78.2259000000001,149.7764,70.2769000000001' +\n            'C149.7764,62.3279000000001,156.2414,55.8629000000001,164.1884,55.8629000000001C172.1354,55.8629000000001,178.6024,' +\n            '62.3279000000001,178.6024,70.2769000000001C178.6024,78.2259000000001,172.1354,84.6909000000001,164.1884,84.6909000000001';\n        var shapeEvent = node.shape.event;\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && node.shape.shape === 'Event')) {\n            event = shapeEvent.event;\n            trigger = shapeEvent.trigger;\n        }\n        width = subEvent.width;\n        height = subEvent.height;\n        if (sub) {\n            width = width || 20;\n            height = height || 20;\n        }\n        else if (subEvent.width === undefined || subEvent.height === undefined) {\n            var pathElement = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            pathElement.data = pathdata;\n            var size = this.getSize(node, pathElement);\n            width = size.width;\n            height = size.height;\n        }\n        var shapeActivity = node.shape.activity;\n        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && node.shape.shape === 'Activity')) {\n            var subProcess = shapeActivity.subProcess;\n            event = subEvent.event;\n            trigger = subEvent.trigger;\n        }\n        //childNode0\n        var innerEvtNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        innerEvtNode.data = pathdata;\n        innerEvtNode.id = id + '_0_event';\n        innerEvtNode.width = width;\n        innerEvtNode.height = height;\n        innerEvtNode.horizontalAlignment = 'Center';\n        innerEvtNode.verticalAlignment = 'Center';\n        innerEvtNode.relativeMode = 'Object';\n        this.setStyle(innerEvtNode, node);\n        //childNode1\n        var outerEvtNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        outerEvtNode.data = pathdata;\n        outerEvtNode.id = id + '_1_event';\n        outerEvtNode.style.gradient = node.style.gradient;\n        outerEvtNode.horizontalAlignment = 'Center';\n        outerEvtNode.verticalAlignment = 'Center';\n        outerEvtNode.relativeMode = 'Object';\n        // set style opacity & strokeColor\n        outerEvtNode.style.strokeColor = node.style.strokeColor;\n        outerEvtNode.style.opacity = node.style.opacity;\n        //childNode2\n        var triggerNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        var triggerNodeData = getBpmnTriggerShapePathData(trigger);\n        triggerNode.data = triggerNodeData;\n        triggerNode.id = id + '_2_trigger';\n        triggerNode.horizontalAlignment = 'Center';\n        triggerNode.verticalAlignment = 'Center';\n        triggerNode.relativeMode = 'Object';\n        // set style opacity & strokeColor\n        triggerNode.style.strokeColor = node.style.strokeColor;\n        triggerNode.style.opacity = node.style.opacity;\n        switch (event) {\n            case 'Start':\n                outerEvtNode.visible = false;\n                break;\n            case 'NonInterruptingStart':\n                innerEvtNode.style.strokeDashArray = '2 3';\n                outerEvtNode.visible = false;\n                break;\n            case 'Intermediate':\n                innerEvtNode.style.fill = node.style.fill;\n                innerEvtNode.style.gradient = null;\n                break;\n            case 'NonInterruptingIntermediate':\n                innerEvtNode.style.fill = node.style.fill;\n                innerEvtNode.style.gradient = null;\n                innerEvtNode.style.strokeDashArray = '2 3';\n                outerEvtNode.style.strokeDashArray = '2 3';\n                break;\n            case 'ThrowingIntermediate':\n            case 'End':\n                innerEvtNode.style.fill = event !== 'End' ? node.style.fill : node.style.fill !== 'white' ? node.style.fill : 'black';\n                innerEvtNode.style.gradient = null;\n                triggerNode.style.fill = 'black';\n                triggerNode.style.strokeColor = 'white';\n                break;\n        }\n        //append child and set style\n        eventshape.style.fill = 'transparent';\n        eventshape.style.strokeColor = 'transparent';\n        eventshape.style.strokeWidth = 0;\n        eventshape.children = [innerEvtNode, outerEvtNode, triggerNode];\n        this.setSizeForBPMNEvents(shapeEvent, eventshape, width, height);\n        return eventshape;\n    };\n    BpmnDiagrams.prototype.setEventVisibility = function (node, canvas) {\n        var event = node.shape.event.event;\n        var innerEvtNode = canvas[0];\n        var outerEvtNode = canvas[1];\n        var triggerNode = canvas[2];\n        switch (event) {\n            case 'Start':\n                outerEvtNode.visible = false;\n                break;\n            case 'NonInterruptingStart':\n                innerEvtNode.style.strokeDashArray = '2 3';\n                outerEvtNode.visible = false;\n                break;\n        }\n    };\n    BpmnDiagrams.prototype.setSubProcessVisibility = function (node) {\n        var subProcess = node.shape.activity.subProcess;\n        var eventLength = subProcess.events.length;\n        var index = (node.shape.activity.subProcess.type === 'Transaction') ? 2 : 0;\n        var elementWrapper = node.wrapper.children[0].children[0];\n        if (subProcess.adhoc === false) {\n            elementWrapper.children[3 + index + eventLength].visible = false;\n        }\n        if (subProcess.compensation === false) {\n            elementWrapper.children[4 + index + eventLength].visible = false;\n        }\n        if (eventLength > 0) {\n            for (var i = 0; i < eventLength; i++) {\n                this.setEventVisibility(node, elementWrapper.children[2 + i].children);\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNSubProcessShape = function (node) {\n        var subProcessShapes = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        var loopType;\n        var events;\n        var event;\n        var subprocessAdhoc = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        var subProcessEventsShapes = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        var subProcessLoopShapes = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        var shape = node.shape.activity;\n        var subProcess = shape.subProcess;\n        var subChildCount = this.getSubprocessChildCount(node);\n        var x;\n        var subprocessNode = new _core_elements_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement();\n        subprocessNode.id = node.id + '_0_Subprocess';\n        subprocessNode.style.fill = 'transparent';\n        subprocessNode.cornerRadius = 10;\n        var size = this.getSize(node, subprocessNode);\n        subprocessNode.width = size.width;\n        subprocessNode.height = size.height;\n        subProcessShapes.children = [subprocessNode];\n        if (shape.subProcess.type === 'Transaction') {\n            this.getBPMNSubProcessTransaction(node, node.shape, subProcessShapes);\n        }\n        var iconSpace = 4;\n        var subChildSpace = 12;\n        var childSpace = subChildCount * subChildSpace;\n        var area = size.width / 2;\n        if (subChildCount === 1) {\n            x = area - (subChildSpace * 0.5);\n        }\n        else {\n            x = area - (childSpace / 2) - ((subChildCount - 1) * iconSpace) / 2;\n        }\n        //set style\n        this.setStyle(subprocessNode, node);\n        //941052: Issue with visible property doesn't hide shadows\n        if ((node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.NodeConstraints.Shadow) !== 0 && node.visible) {\n            subProcessShapes.shadow = node.shadow;\n        }\n        var collapsedShape = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        collapsedShape.id = node.id + '_0_collapsed';\n        collapsedShape.width = 12;\n        collapsedShape.height = 12;\n        collapsedShape.style.fill = 'black';\n        collapsedShape.style.strokeColor = node.style.strokeColor;\n        collapsedShape.margin.bottom = 5;\n        collapsedShape.style.opacity = node.style.opacity;\n        collapsedShape.horizontalAlignment = 'Left';\n        collapsedShape.verticalAlignment = 'Bottom';\n        collapsedShape.setOffsetWithRespectToBounds(0, 1, 'Fraction');\n        collapsedShape.relativeMode = 'Point';\n        collapsedShape.data = getBpmnShapePathData('collapsedShape');\n        collapsedShape.margin.left = x;\n        if (subProcess.collapsed === true && !subProcess.processes) {\n            collapsedShape.visible = true;\n        }\n        else {\n            collapsedShape.visible = false;\n        }\n        if (collapsedShape.visible === true) {\n            x += subChildSpace + iconSpace;\n        }\n        subProcessShapes.children.push(collapsedShape);\n        if (subProcess.type === 'Event') {\n            subprocessNode.style.strokeWidth = 1;\n            subprocessNode.style.strokeDashArray = '2 2';\n            events = subProcess.events;\n            for (var i = 0; i < events.length; i++) {\n                event = events[parseInt(i.toString(), 10)];\n                this.getBPMNSubEvent(event, node, subProcessShapes);\n            }\n        }\n        // set loop for subprocess\n        subProcessLoopShapes = this.getBPMNSubProcessLoopShape(node);\n        if (subChildCount === 1) {\n            x = area - 6;\n        }\n        subProcessLoopShapes.margin.left = x;\n        if (subProcessLoopShapes.visible === true) {\n            x += subChildSpace + iconSpace;\n        }\n        subProcessLoopShapes.style.opacity = node.style.opacity;\n        subProcessShapes.children.push(subProcessLoopShapes);\n        // set boundary for subprocess\n        subprocessNode.id = node.id + '_boundary';\n        if (subProcess.boundary === 'Default') {\n            subprocessNode.style.strokeWidth = 1;\n            subprocessNode.style.strokeDashArray = '1 0';\n        }\n        if (subProcess.boundary === 'Call') {\n            subprocessNode.style.strokeWidth = 4;\n            subprocessNode.style.strokeDashArray = '1 0';\n        }\n        if (subProcess.boundary === 'Event') {\n            subprocessNode.style.strokeWidth = 1;\n            subprocessNode.style.strokeDashArray = '2 2';\n        }\n        //set adhoc for subprocess\n        subprocessAdhoc = this.getBPMNAdhocShape(node, subprocessAdhoc, subProcess);\n        if (subChildCount === 1) {\n            x = area - 6;\n        }\n        subprocessAdhoc.margin.left = x;\n        if (subprocessAdhoc.visible === true) {\n            x += subChildSpace + iconSpace;\n        }\n        subprocessAdhoc.style.opacity = node.style.opacity;\n        subProcessShapes.children.push(subprocessAdhoc);\n        //set compensation for subprocess\n        var subprocessComp = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        if (subProcess.compensation === true) {\n            subprocessComp.visible = true;\n        }\n        else {\n            subprocessComp.visible = false;\n        }\n        subprocessComp = this.getBPMNCompensationShape(node, subprocessComp);\n        if (subChildCount === 1) {\n            x = area - 6;\n        }\n        subprocessComp.margin.left = x;\n        if (subprocessComp.visible === true) {\n            x += subChildSpace + iconSpace;\n        }\n        subprocessComp.style.opacity = node.style.opacity;\n        subProcessShapes.children.push(subprocessComp);\n        //set style for subprocess\n        subProcessShapes.style.strokeColor = 'transparent';\n        subProcessShapes.style.strokeWidth = 0;\n        subProcessShapes.style.fill = 'transparent';\n        return subProcessShapes;\n    };\n    BpmnDiagrams.prototype.getBPMNSubEvent = function (event, node, container, id) {\n        container.children = container.children || [];\n        //let eventContainer: Canvas;\n        var eventContainer = this.getBPMNEventShape(node, event, true, id);\n        this.getBPMNSubprocessEvent(node, eventContainer, event);\n        eventContainer.id = id || (node.id + '_subprocessEvents');\n        eventContainer.width = event.width || 20;\n        eventContainer.height = event.height || 20;\n        // set offset for subevents\n        eventContainer.setOffsetWithRespectToBounds(event.offset.x, event.offset.y, 'Fraction');\n        eventContainer.relativeMode = 'Point';\n        //set margin for subevents\n        eventContainer.margin = event.margin;\n        //set alignment for subevents\n        eventContainer.horizontalAlignment = event.horizontalAlignment;\n        eventContainer.verticalAlignment = event.verticalAlignment;\n        // set style for subevent\n        eventContainer.style.fill = 'transparent';\n        eventContainer.style.strokeColor = 'transparent';\n        eventContainer.style.strokeWidth = 0;\n        container.children.push(eventContainer);\n    };\n    BpmnDiagrams.prototype.getBPMNSubProcessTransaction = function (node, shape, container) {\n        var shapeWidth = container.children[0].width;\n        var shapeHeight = container.children[0].height;\n        var innerRect = new _core_elements_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement();\n        innerRect.margin = { left: 3, right: 0, top: 3, bottom: 0 };\n        innerRect.id = node.id + '_0_Subprocess_innnerRect';\n        innerRect.cornerRadius = 10;\n        innerRect.width = shapeWidth - 6;\n        //EJ2-824711 - Fill color is not applied properly for BPMN transaction subProcess.\n        innerRect.style.fill = 'transparent';\n        innerRect.height = shapeHeight - 6;\n        container.children.push(innerRect);\n        var transactionEvents = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        transactionEvents.id = node.id + '_transaction_events';\n        transactionEvents.style.gradient = node.style.gradient;\n        var transaction = shape.activity.subProcess.transaction;\n        this.getBPMNSubEvent(transaction.success, node, transactionEvents, node.id + '_success');\n        this.getBPMNSubEvent(transaction.cancel, node, transactionEvents, node.id + '_cancel');\n        this.getBPMNSubEvent(transaction.failure, node, transactionEvents, node.id + '_failure');\n        this.updateDiagramContainerVisibility(transactionEvents.children[0], transaction.success.visible);\n        this.updateDiagramContainerVisibility(transactionEvents.children[1], transaction.cancel.visible);\n        this.updateDiagramContainerVisibility(transactionEvents.children[2], transaction.failure.visible);\n        transactionEvents.float = true;\n        transactionEvents.width = shapeWidth;\n        transactionEvents.height = shapeHeight;\n        transactionEvents.style.fill = transactionEvents.style.strokeColor = 'transparent';\n        container.children.push(transactionEvents);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNSubProcessLoopShape = function (node) {\n        var shape = node.shape.activity;\n        var loopType;\n        var subprocessLoop = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        var subprocessLoopData;\n        var subProcess = shape.subProcess;\n        // eslint-disable-next-line prefer-const\n        loopType = subProcess.loop;\n        // eslint-disable-next-line prefer-const\n        subprocessLoopData = getBpmnLoopShapePathData(loopType);\n        if (loopType !== 'None') {\n            subprocessLoop.visible = true;\n        }\n        else {\n            subprocessLoop.visible = false;\n        }\n        subprocessLoop.id = node.id + '_loop';\n        subprocessLoop.data = subprocessLoopData;\n        subprocessLoop.style.fill = 'black';\n        subprocessLoop.width = 12;\n        subprocessLoop.height = 12;\n        subprocessLoop.horizontalAlignment = 'Left';\n        subprocessLoop.verticalAlignment = 'Bottom';\n        subprocessLoop.setOffsetWithRespectToBounds(0, 1, 'Fraction');\n        subprocessLoop.relativeMode = 'Point';\n        subprocessLoop.margin.bottom = 5;\n        subprocessLoop.style.fill = 'transparent';\n        subprocessLoop.style.strokeColor = node.style.strokeColor;\n        return subprocessLoop;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.drag = function (obj, tx, ty, diagram) {\n        var node = diagram.nameTable[(obj).processId];\n        if (obj.margin.top + ty >= 0) {\n            diagram.nodePropertyChange(obj, {}, { margin: { top: obj.margin.top + ty } });\n        }\n        if (obj.margin.left + tx >= 0) {\n            diagram.nodePropertyChange(obj, {}, { margin: { left: obj.margin.left + tx } });\n        }\n        //const diffX: number = 0;\n        //const diffY: number = 0;\n        var bound = this.getChildrenBound(node, obj.id, diagram);\n        this.updateSubProcessess(bound, obj, diagram);\n        node.wrapper.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size(undefined, undefined));\n        node.wrapper.arrange(node.wrapper.desiredSize);\n        diagram.refreshCanvasLayers();\n        diagram.updateSelector();\n        //909205: The selector updates properly, but the node does not update correctly, so call the updateDiagramObject method.\n        diagram.updateDiagramObject(node);\n        //941048: The connectors not updates properly on redo, so call the updateConnectorEdges method.\n        diagram.updateConnectorEdges(obj);\n        this.updateDocks(obj, diagram);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.dropBPMNchild = function (target, source, diagram) {\n        if (source && source.shape.type === 'Bpmn' && target.shape.type === 'Bpmn'\n            && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && source.shape.shape !== 'TextAnnotation')) {\n            var subProcess = diagram.nameTable[target.id].shape.activity.subProcess;\n            if (diagram.currentSymbol && target.shape.type === 'Bpmn' && !subProcess.collapsed) {\n                source.processId = target.id;\n                return;\n            }\n            subProcess.processes = subProcess.processes || [];\n            if (subProcess.processes && subProcess.processes.indexOf(source.id) === -1 && !subProcess.collapsed) {\n                subProcess.processes.push(source.id);\n                // To arrange the process based on zIndex, which cause issue in save and load.\n                if (subProcess.processes.length > 1) {\n                    this.sortProcessOrder(subProcess.processes, diagram);\n                }\n                var redoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_7__.cloneObject)(source);\n                var sources = diagram.nameTable[source.id].wrapper;\n                var targetWrapper = diagram.nameTable[target.id].wrapper;\n                sources.margin.top = (sources.offsetY - (sources.actualSize.height / 2))\n                    - (target.offsetY - (target.actualSize.height / 2));\n                sources.margin.left = (sources.offsetX - (sources.actualSize.width / 2))\n                    - (target.offsetX - (target.actualSize.width / 2));\n                sources.margin.top = (sources.margin.top < 0) ? 0 : sources.margin.top;\n                sources.margin.left = (sources.margin.left < 0) ? 0 : sources.margin.left;\n                diagram.nameTable[source.id].processId = target.id;\n                targetWrapper.children.push(diagram.nameTable[source.id].wrapper);\n                //To identify the processess added at runtime.\n                //diagram.nameTable[source.id].wrapper.isDroppedProcess = true;\n                var bound = this.getChildrenBound(target, source.id, diagram);\n                this.updateSubProcessess(bound, source, diagram);\n                targetWrapper.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size(undefined, undefined));\n                targetWrapper.arrange(targetWrapper.desiredSize);\n                diagram.refreshCanvasLayers();\n                diagram.updateSelector();\n                // 908136: Node goes behind the subprocess and the connector connected to it is destroyed Issue Fix by commenting these lines\n                // let edges: string[] = [];\n                // edges = edges.concat((source as Node).outEdges, (source as Node).inEdges);\n                // for (let i: number = edges.length - 1; i >= 0; i--) {\n                //     if (diagram.bpmnModule.bpmnTextAnnotationConnector.indexOf(diagram.nameTable[edges[parseInt(i.toString(), 10)]])\n                //         === -1) {\n                //         diagram.remove(diagram.nameTable[edges[parseInt(i.toString(), 10)]]);\n                //     }\n                // }\n                var obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_7__.cloneObject)(source);\n                var entry = {\n                    type: 'PositionChanged', undoObject: { nodes: [redoElement] },\n                    redoObject: { nodes: [obj] }, category: 'Internal'\n                };\n                diagram.addHistoryEntry(entry);\n                if (diagram.mode === 'SVG') {\n                    if (source.zIndex < target.zIndex) {\n                        diagram.updateProcesses(source);\n                        this.updateSubprocessNodeIndex(source, diagram, target);\n                    } //909204-The node inside the subprocess disappears while grouping\n                    var parent_1 = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.getDiagramElement)(target.id + '_groupElement');\n                    parent_1.appendChild((0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.getDiagramElement)(source.id + '_groupElement'));\n                }\n                this.updateDocks(source, diagram);\n            }\n        }\n    };\n    BpmnDiagrams.prototype.sortProcessOrder = function (processes, diagram) {\n        // Sort the process array based on node zIndex\n        processes.sort(function (a, b) { return diagram.nameTable[\"\" + a].zIndex - diagram.nameTable[\"\" + b].zIndex; });\n    };\n    BpmnDiagrams.prototype.updateIndex = function (diagram, source) {\n        //let processNode: Node;\n        var processNode = source;\n        var nodeindex = diagram.getIndex(processNode, processNode.id);\n        diagram.nodes.splice(Number(nodeindex), 1);\n        processNode.zIndex = diagram.nodes[diagram.nodes.length - 1].zIndex + 1;\n        diagram.nodes.push(processNode);\n    };\n    BpmnDiagrams.prototype.updateSubprocessNodeIndex = function (source, diagram, target) {\n        if (source.shape.activity.subProcess.processes\n            && source.shape.activity.subProcess.processes.length > 0) {\n            for (var i = 0; i < source.shape.activity.subProcess.processes.length; i++) {\n                this.updateIndex(diagram, source);\n                var processes = source.shape.activity.subProcess.processes[parseInt(i.toString(), 10)];\n                if (diagram.nameTable[\"\" + processes].shape.activity.subProcess.processes.length > 0) {\n                    this.updateSubprocessNodeIndex(diagram.nameTable[\"\" + processes], diagram, target);\n                }\n                else {\n                    var node = diagram.nameTable[source.shape.activity.subProcess.processes[parseInt(i.toString(), 10)]];\n                    this.updateIndex(diagram, node);\n                }\n            }\n        }\n        else {\n            this.updateIndex(diagram, source);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateDocks = function (obj, diagram) {\n        if (obj.shape.type === 'Bpmn' && obj.shape.activity.subProcess.processes &&\n            !obj.shape.activity.subProcess.collapsed) {\n            var processTable = obj.shape.activity.subProcess.processes;\n            for (var _i = 0, processTable_1 = processTable; _i < processTable_1.length; _i++) {\n                var i = processTable_1[_i];\n                var actualObject = diagram.nameTable[\"\" + i];\n                if (actualObject) {\n                    diagram.updateConnectorEdges(actualObject);\n                    actualObject.wrapper.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size(actualObject.wrapper.width, actualObject.wrapper.height));\n                    actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n                    if (actualObject.shape.activity.subProcess.processes\n                        && actualObject.shape.activity.subProcess.processes.length) {\n                        this.updateDocks(actualObject, diagram);\n                    }\n                }\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.removeBpmnProcesses = function (currentObj, diagram) {\n        var element = diagram.nameTable[currentObj.processId];\n        if (currentObj.shape.type === 'Bpmn' && currentObj.shape.activity.subProcess.processes &&\n            currentObj.shape.activity.subProcess.processes.length > 0) {\n            var processes = currentObj.shape.activity.subProcess.processes;\n            for (var j = processes.length - 1; j >= 0; j--) {\n                diagram.remove(diagram.nameTable[processes[parseInt(j.toString(), 10)]]);\n            }\n        }\n        if (element) {\n            diagram.removeDependentConnector(currentObj);\n            var processes = element.shape.activity.subProcess.processes;\n            this.removeChildFromBPMN(element.wrapper, currentObj.id, diagram, true);\n            var processIndex = processes.indexOf(currentObj.id);\n            processes.splice(processIndex, 1);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.removeChildFromBPMN = function (wrapper, name, diagram, isDelete) {\n        for (var _i = 0, _a = wrapper.children; _i < _a.length; _i++) {\n            var i = _a[_i];\n            if (i.id === name) {\n                wrapper.children.splice(wrapper.children.indexOf(i), 1);\n                if (!isDelete) {\n                    // To remove the child node from subprocess to diagram in DOM.\n                    this.removeGElement(i.id, diagram);\n                }\n            }\n            else if (i.children) {\n                this.removeChildFromBPMN(i, name, diagram, isDelete);\n            }\n        }\n    };\n    //Bug 858761: Default Tooltip of sub-process node is not positioned properly after drag and drop the child of subprocess in diagram.\n    // To remove the child node from subprocess to diagram in DOM.\n    BpmnDiagrams.prototype.removeGElement = function (id, diagram) {\n        var element = document.getElementById(id + '_groupElement');\n        var diagramLayer = document.getElementById(diagram.element.id + '_diagramLayer');\n        var parent = element.parentElement;\n        parent.removeChild(element);\n        diagramLayer.appendChild(element);\n        var node = diagram.nameTable[\"\" + id];\n        var subProcess = diagram.nameTable[\"\" + node.processId];\n        var beforeIndex = node.zIndex + 1;\n        var getNode = this.getNode(beforeIndex, diagram);\n        if (getNode.length > 0) {\n            var neighborElement_1 = document.getElementById(getNode[0].id + '_groupElement');\n            var index = Array.from(diagramLayer.children).findIndex(function (child) { return child === neighborElement_1; });\n            var domIndex = index !== -1 ? index : 1;\n            // 889550: issue with dragging process nodes of the sub process\n            // Remove the adjacent element of the node which z index is lessthan subprocess z index\n            if (node.zIndex < subProcess.zIndex) {\n                diagramLayer.children[parseInt(domIndex.toString(), 10)].insertAdjacentElement('beforebegin', element);\n            }\n        }\n    };\n    BpmnDiagrams.prototype.getNode = function (index, diagram) {\n        var getNode = diagram.nodes.filter(function (x) { return x.zIndex === index; });\n        if (getNode.length === 0 && index > 0) {\n            return this.getNode(index - 1, diagram);\n        }\n        return getNode;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.removeProcess = function (id, diagram) {\n        var node = diagram.nameTable[\"\" + id];\n        if (node) {\n            var parent_2 = diagram.nameTable[node.processId];\n            if (parent_2 && parent_2.shape.type === 'Bpmn') {\n                var processes = parent_2.shape.activity.subProcess.processes;\n                diagram.removeDependentConnector(node);\n                this.removeChildFromBPMN(parent_2.wrapper, id, diagram, true);\n                var processIndex = processes.indexOf(id);\n                processes.splice(processIndex, 1);\n                node.processId = '';\n                diagram.refreshDiagramLayer();\n                diagram.updateSelector();\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.addProcess = function (process, parentId, diagram) {\n        //let id: string;\n        process.id = process.id || (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_7__.randomId)();\n        var id = process.id;\n        var node = diagram.nameTable[\"\" + id];\n        //913821-Adding of process node to expanded subprocess at runtime won't be undoed.\n        var undoElement = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_7__.cloneObject)(node);\n        if (!node) {\n            diagram.add(process);\n        }\n        process.processId = parentId;\n        var parentNode = diagram.nameTable[\"\" + parentId];\n        var subProcess = parentNode.shape.activity.subProcess;\n        //EJ2-942115-The function addProcess is not working when empty processes are not defined in the subprocess object.\n        if (!subProcess.processes) {\n            subProcess.processes = [];\n        }\n        if (node && parentNode && parentNode.shape.type === 'Bpmn' && node.shape.type === 'Bpmn') {\n            node.processId = parentId;\n            var processes = parentNode.shape.activity.subProcess.processes;\n            if (processes.indexOf(id) < 0) {\n                processes.push(id);\n            }\n            parentNode.wrapper.children.push(node.wrapper);\n            parentNode.wrapper.measure(new _primitives_size__WEBPACK_IMPORTED_MODULE_14__.Size());\n            parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n            diagram.bpmnModule.updateDocks(parentNode, diagram);\n            diagram.refreshDiagramLayer();\n            //913821-Adding of process node to expanded subprocess at runtime won't be undoed\n            if (!(diagram.diagramActions & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.DiagramAction.UndoRedo) && (!diagram.historyManager.currentEntry ||\n                diagram.historyManager.currentEntry.type !== 'CollectionChanged')) {\n                var obj = (0,_utility_base_util__WEBPACK_IMPORTED_MODULE_7__.cloneObject)(node);\n                var entry = {\n                    type: 'PositionChanged', undoObject: { nodes: [undoElement] },\n                    redoObject: { nodes: [obj] }, category: 'Internal'\n                };\n                diagram.addHistoryEntry(entry);\n            }\n            if (diagram.mode === 'SVG' && (node.shape && node.shape.activity\n                && !node.shape.activity.subProcess.processes)) {\n                var child = (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.getDiagramElement)(parentId + '_groupElement');\n                child.appendChild((0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.getDiagramElement)(process.id + '_groupElement'));\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getChildrenBound = function (node, excludeChild, diagram) {\n        var processes = node.shape.activity.subProcess.processes;\n        var bound;\n        if (processes && processes.length) {\n            for (var _i = 0, processes_1 = processes; _i < processes_1.length; _i++) {\n                var i = processes_1[_i];\n                if (excludeChild !== i) {\n                    if (!bound) {\n                        bound = diagram.nameTable[\"\" + i].wrapper.bounds;\n                    }\n                    else {\n                        bound = diagram.nameTable[\"\" + i].wrapper.bounds.uniteRect(bound);\n                    }\n                }\n            }\n        }\n        return bound || diagram.nameTable[\"\" + excludeChild].wrapper.bounds;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateSubProcessess = function (bound, obj, diagram) {\n        var diffX;\n        var diffY;\n        var node = diagram.nameTable[obj.processId];\n        var right;\n        var bottom;\n        var pivot = { x: 0.5, y: 0.5 };\n        if ((node.wrapper.bounds.left + obj.margin.left + obj.width) > (node.wrapper.bounds.right)) {\n            right = true;\n        }\n        if ((node.wrapper.bounds.top + obj.margin.top + obj.height) > (node.wrapper.bounds.bottom)) {\n            bottom = true;\n        }\n        if (right) {\n            pivot.x = 0;\n        }\n        if (bottom) {\n            pivot.y = 0;\n        }\n        var actualSize = node.wrapper.actualSize;\n        if (right) {\n            diffX = (obj.wrapper.margin.left + obj.wrapper.bounds.width) / actualSize.width;\n        }\n        if (bottom) {\n            diffY = (obj.wrapper.margin.top + obj.wrapper.bounds.height) / actualSize.height;\n        }\n        if (diffX > 0 || diffY > 0) {\n            diagram.commandHandler.scale(diagram.nameTable[obj.processId], diffX || 1, diffY || 1, pivot);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNCompensationShape = function (node, compensationNode) {\n        compensationNode.id = node.id + '_0_compensation';\n        compensationNode.width = 12;\n        compensationNode.height = 12;\n        compensationNode.margin.bottom = 5;\n        compensationNode.style.fill = 'transparent';\n        compensationNode.style.strokeColor = node.style.strokeColor;\n        compensationNode.horizontalAlignment = 'Left';\n        compensationNode.verticalAlignment = 'Bottom';\n        compensationNode.relativeMode = 'Object';\n        compensationNode.data = 'M 22.462 18.754 l -6.79 3.92 l 6.79 3.92 V 22.89 l 6.415 3.705 v -7.841 l -6.415 3.705 V 18.754 Z' +\n            ' M 28.331 19.701 v 5.947 l -5.149 -2.973 L 28.331 19.701 Z M 21.916 25.647 l -5.15 -2.973 l 5.15 -2.973 V 25.647 Z' +\n            ' M 22.275 12.674 c -5.513 0 -9.999 4.486 -9.999 9.999 c 0 5.514 4.486 10.001 9.999 10.001' +\n            ' c 5.514 0 9.999 -4.486 9.999 -10.001 C 32.274 17.16 27.789 12.674 22.275 12.674 Z M 22.275 32.127 ' +\n            ' c -5.212 0 -9.453 -4.241 -9.453 -9.454 c 0 -5.212 4.241 -9.453 9.453 -9.453 c 5.212 0 9.453 4.241 9.453 9.453' +\n            ' C 31.728 27.887 27.487 32.127 22.275 32.127 Z';\n        return compensationNode;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNActivityShape = function (node) {\n        var eventshape = new _core_containers_canvas__WEBPACK_IMPORTED_MODULE_2__.Canvas();\n        var content;\n        var shape = node.shape.activity;\n        var task = shape.activity;\n        var subProcess = shape.subProcess;\n        var activityType = shape.activity;\n        if (task === 'Task') {\n            content = this.getBPMNTaskShape(node);\n        }\n        if (task === 'SubProcess' && subProcess) {\n            content = this.getBPMNSubProcessShape(node);\n        }\n        content.id = task + node.id;\n        eventshape.children = [content];\n        eventshape.style.fill = 'transparent';\n        eventshape.style.strokeColor = 'transparent';\n        eventshape.style.strokeWidth = 0;\n        return eventshape;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNSubprocessEvent = function (node, subProcessEventsShapes, events) {\n        var annotations;\n        var ports;\n        if (events.annotations.length !== 0) {\n            for (var i = 0; i < events.annotations.length; i++) {\n                var annot = events.annotations[parseInt(i.toString(), 10)];\n                annotations = node.initAnnotationWrapper(annot);\n                annotations.width = events.width;\n                annotations.height = events.height;\n                subProcessEventsShapes.children.push(annotations);\n            }\n        }\n        if (events.ports.length !== 0) {\n            for (var i = 0; i < events.ports.length; i++) {\n                var port = events.ports[parseInt(i.toString(), 10)];\n                ports = node.initPortWrapper(port);\n                subProcessEventsShapes.children.push(ports);\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getBPMNAdhocShape = function (node, adhocNode, subProcess) {\n        adhocNode.id = node.id + '_0_adhoc';\n        adhocNode.width = 12;\n        adhocNode.height = 8;\n        adhocNode.style.fill = 'black';\n        adhocNode.style.strokeColor = node.style.strokeColor;\n        adhocNode.margin.bottom = 5;\n        adhocNode.horizontalAlignment = 'Left';\n        adhocNode.verticalAlignment = 'Bottom';\n        adhocNode.relativeMode = 'Object';\n        adhocNode.data = 'M 49.832 76.811 v -2.906 c 0 0 0.466 -1.469 1.931 -1.5 c 1.465 -0.031 2.331 1.219 2.897 1.688 ' +\n            's 1.06 0.75 1.526 0.75 c 0.466 0 1.548 -0.521 1.682 -1.208 s 0.083 3.083 0.083 3.083 s -0.76 0.969 -1.859 0.969 ' +\n            'c -1.066 0 -1.865 -0.625 -2.464 -1.438 s -1.359 -0.998 -2.064 -0.906 C 50.598 75.467 49.832 76.811 49.832 76.811 Z';\n        if (subProcess && subProcess.adhoc === true) {\n            adhocNode.visible = true;\n        }\n        else {\n            adhocNode.visible = false;\n        }\n        return adhocNode;\n    };\n    // /** @private */\n    // public getTextAnnotationWrapper(node: NodeModel, id: string): TextElement {\n    //     if (node && node.shape.type === 'Bpmn') {\n    //         const shape: BpmnShapes = (node.shape as BpmnShape).shape;\n    //         if (shape === 'TextAnnotation') {\n    //             return node.wrapper.children[1] as TextElement;\n    //         }\n    //     }\n    //     return null;\n    // }\n    /**\n     *\n     * @private\n     * To modify the text annotation path while dragging the node and set port offset based on dragging.\n     */\n    BpmnDiagrams.prototype.setAnnotationPath = function (sourceBounds, wrapper, node, bpmnShape, direction, diagram) {\n        var pathElement = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        pathElement.id = wrapper.id + '_path';\n        pathElement.width = node.width;\n        pathElement.height = node.height;\n        pathElement.style.fill = 'transparent';\n        pathElement.style.strokeColor = ((node.style.strokeColor === 'transparent') ? 'black' : node.style.strokeColor);\n        pathElement.style.opacity = node.style.opacity;\n        pathElement.relativeMode = 'Object';\n        pathElement.horizontalAlignment = 'Stretch';\n        pathElement.verticalAlignment = 'Stretch';\n        var pointPort = (node.ports.length > 0) ? node.ports[0] : new _objects_port__WEBPACK_IMPORTED_MODULE_12__.PointPort(node, 'ports', '', true);\n        diagram.protectPropertyChange(true);\n        node.ports = [pointPort];\n        diagram.protectPropertyChange(false);\n        switch (direction) {\n            case 'Left':\n                pathElement.data = 'M10,20 L0,20 L0,0 L10,0';\n                pathElement.width = 10;\n                pathElement.horizontalAlignment = 'Left';\n                pointPort.offset = { x: 0.0, y: 0.5 };\n                break;\n            case 'Right':\n                pathElement.data = 'M0,0 L10,0 L10,20 L0,20';\n                pathElement.width = 10;\n                pathElement.horizontalAlignment = 'Right';\n                pointPort.offset =\n                    {\n                        x: 1.0,\n                        y: 0.5\n                    };\n                break;\n            case 'Top':\n                pathElement.data = 'M20,10 L20,0 L0,0 L0,10';\n                pathElement.height = 10.0;\n                pathElement.verticalAlignment = 'Top';\n                pointPort.offset =\n                    {\n                        x: 0.5,\n                        y: 0.0\n                    };\n                break;\n            case 'Bottom':\n                pathElement.data = 'M0,0 L0,10 L20,10 L20,0';\n                pathElement.height = 10;\n                pathElement.verticalAlignment = 'Bottom';\n                pointPort.offset =\n                    {\n                        x: 0.5,\n                        y: 1.0\n                    };\n                break;\n            default:\n                //To check the text annotation has parent and update the path element.\n                if (bpmnShape.textAnnotation.textAnnotationTarget !== '') {\n                    if (diagram.nameTable[bpmnShape.textAnnotation.textAnnotationTarget]) {\n                        var node2 = diagram.nameTable[bpmnShape.textAnnotation.textAnnotationTarget];\n                        node2.hasTextAnnotation = true;\n                        var wrapper2 = node2.wrapper;\n                        if (wrapper2 !== null) {\n                            var doubleValue = node2.width;\n                            var doubleValue2 = node2.height;\n                            var targetBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_13__.Rect(0.0, 0.0, 0.0, 0.0);\n                            if (doubleValue !== 0.0 && doubleValue2 !== 0.0) {\n                                targetBounds = new _primitives_rect__WEBPACK_IMPORTED_MODULE_13__.Rect(node2.offsetX - doubleValue / 2, node2.offsetY - doubleValue2 / 2, doubleValue, doubleValue2);\n                            }\n                            this.setAnnotationPosition(targetBounds, node, sourceBounds, pathElement);\n                        }\n                    }\n                }\n                else if (bpmnShape.textAnnotation.textAnnotationTarget === '') {\n                    pathElement.data = 'M10,20 L0,20 L0,0 L10,0';\n                    pathElement.width = 10.0;\n                    pathElement.horizontalAlignment = 'Left';\n                    pointPort.offset = {\n                        x: 0.0,\n                        y: 0.5\n                    };\n                }\n                break;\n        }\n        wrapper.children = [];\n        wrapper.children.push(pathElement);\n    };\n    //Task 866412: Should revamp BPMN text annotation node. To modifty the port offset and annotation path based on node bounds while dragging.\n    BpmnDiagrams.prototype.setAnnotationPosition = function (targetBounds, annotation, annotationBounds, annotationPath) {\n        var pointPort = annotation.ports[0];\n        var position = { x: annotationBounds.x, y: annotationBounds.y };\n        var rotateAngle = this.getAnnotationPathAngle(position, targetBounds);\n        if (rotateAngle === 90) {\n            annotationPath.data = 'M20,10 L20,0 L0,0 L0,10';\n            annotationPath.height = 10.0;\n            annotationPath.verticalAlignment = 'Top';\n            pointPort.offset =\n                {\n                    x: 0.5,\n                    y: 0.0\n                };\n        }\n        else if (rotateAngle === 180) {\n            annotationPath.data = 'M0,0 L10,0 L10,20 L0,20';\n            annotationPath.width = 10.0;\n            annotationPath.horizontalAlignment = 'Right';\n            pointPort.offset =\n                {\n                    x: 1.0,\n                    y: 0.5\n                };\n        }\n        else if (rotateAngle === 0) {\n            annotationPath.data = 'M10,20 L0,20 L0,0 L10,0';\n            annotationPath.width = 10.0;\n            annotationPath.horizontalAlignment = 'Left';\n            pointPort.offset =\n                {\n                    x: 0.0,\n                    y: 0.5\n                };\n        }\n        else {\n            annotationPath.data = 'M0,0 L0,10 L20,10 L20,0';\n            annotationPath.height = 10.0;\n            annotationPath.verticalAlignment = 'Bottom';\n            pointPort.offset =\n                {\n                    x: 0.5,\n                    y: 1.0\n                };\n        }\n    };\n    // /** @private */\n    // public findInteractableObject(obj: ConnectorModel, diagram: Diagram): NodeModel | ConnectorModel {\n    //     if (obj.targetID) {\n    //         let targetNode: NodeModel = diagram.nameTable[obj.targetID];\n    //         if (targetNode.shape.type === 'Bpmn' && (targetNode.shape as BpmnShape).shape === 'TextAnnotation') {\n    //             return targetNode;\n    //         }\n    //     }\n    //     return obj;\n    // }\n    /** @private */\n    BpmnDiagrams.prototype.getSubprocessChildCount = function (node) {\n        var count = 0;\n        var shape = node.shape.activity;\n        //let loopType: string;\n        var subProcess = shape.subProcess;\n        var loopType = subProcess.loop;\n        if (loopType !== undefined && loopType !== 'None') {\n            count++;\n        }\n        if ((subProcess.compensation !== undefined) &&\n            subProcess.compensation === true) {\n            count++;\n        }\n        if ((subProcess.collapsed !== undefined) &&\n            subProcess.collapsed === true) {\n            count++;\n        }\n        if ((subProcess.adhoc !== undefined) &&\n            subProcess.adhoc === true) {\n            count++;\n        }\n        return count;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getTaskChildCount = function (node) {\n        var count = 0;\n        var shape = node.shape.activity;\n        var task = shape.task;\n        var loopType;\n        if ((task.compensation !== undefined) &&\n            task.compensation === true) {\n            count++;\n        }\n        if ((task.loop !== undefined) &&\n            task.loop !== 'None') {\n            count++;\n        }\n        return count;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.setStyle = function (child, node) {\n        //set style\n        child.style.fill = node.style.fill;\n        child.style.strokeColor = node.style.strokeColor;\n        child.style.strokeWidth = node.style.strokeWidth;\n        child.style.strokeDashArray = node.style.strokeDashArray;\n        child.style.opacity = node.style.opacity;\n        child.style.gradient = node.style.gradient;\n        //941052: Issue with visible property doesn't hide shadows\n        if ((node.constraints & _enum_enum__WEBPACK_IMPORTED_MODULE_9__.NodeConstraints.Shadow) !== 0 && node.visible) {\n            child.shadow = node.shadow;\n        }\n    };\n    //End code conversion region\n    //Update BPMN Shapes on NodePropertyChange\n    //Start region\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMN = function (changedProp, oldObject, actualObject, diagram) {\n        var newShape = changedProp.shape || {};\n        var elementWrapper = actualObject.wrapper.children[0];\n        var actualShape = actualObject.shape.shape ||\n            (actualObject.shape.bpmnShape);\n        //Bug 892767: Unable to update BPMN text annotation direction dynamically\n        //To update the text annotation direction and target dynamically.\n        if (newShape.textAnnotation && actualShape === 'TextAnnotation') {\n            if (newShape.textAnnotation.textAnnotationDirection !== undefined) {\n                //Modify text annotation path based on text annotation direction\n                this.setAnnotationPath(actualObject.wrapper.bounds, actualObject.wrapper.children[0], actualObject, actualObject.shape, actualObject.shape.textAnnotation.textAnnotationDirection, diagram);\n                //Reset the id of path element\n                actualObject.wrapper.children[0].children[0].id = actualObject.id + '_textannotation_path';\n                var newValue = { ports: { 0: { offset: actualObject.ports[0].offset } } };\n                diagram.nodePropertyChange(actualObject, {}, newValue);\n            }\n            if (newShape.textAnnotation.textAnnotationTarget !== undefined) {\n                var sourceNode = diagram.nameTable[newShape.textAnnotation.textAnnotationTarget];\n                if (sourceNode && sourceNode.shape.type === 'Bpmn') {\n                    var textAnnotationConnector = diagram.nameTable[actualObject.inEdges[0]];\n                    if (textAnnotationConnector) {\n                        //To modify the sourceID of text annotation connector\n                        textAnnotationConnector.sourceID = sourceNode.id;\n                        diagram.connectorPropertyChange(textAnnotationConnector, {}, { sourceID: sourceNode.id });\n                    }\n                }\n                else if (newShape.textAnnotation.textAnnotationTarget === '') {\n                    var textAnnotationConnector = diagram.nameTable[actualObject.inEdges[0]];\n                    if (textAnnotationConnector) {\n                        var oldParent = diagram.nameTable[oldObject.shape.textAnnotation.textAnnotationTarget];\n                        var index = oldParent.outEdges.indexOf(textAnnotationConnector.id);\n                        oldParent.outEdges.splice(index, 1);\n                        textAnnotationConnector.sourceID = '';\n                        diagram.connectorPropertyChange(textAnnotationConnector, {}, { sourceID: '' });\n                    }\n                }\n            }\n        }\n        var sizeChanged = changedProp.width !== undefined || changedProp.height !== undefined;\n        if ((newShape.shape === 'Gateway') &&\n            newShape.gateway) {\n            this.removeBPMNElementFromDOM(actualObject, diagram);\n            actualObject.wrapper.children[0] = this.getBPMNGatewayShape(actualObject);\n        }\n        else if ((newShape.shape === 'DataObject') &&\n            newShape.dataObject) {\n            this.removeBPMNElementFromDOM(actualObject, diagram);\n            actualObject.wrapper.children[0] = this.getBPMNDataObjectShape(actualObject);\n        }\n        else if ((newShape.shape === 'Activity') &&\n            newShape.activity) {\n            this.removeBPMNElementFromDOM(actualObject, diagram);\n            actualObject.wrapper.children[0] = this.getBPMNActivityShape(actualObject);\n        }\n        /**\n         * EJ2-EJ2-60644 - Bpmn event fill color does not applied while changing event in runtime.\n         */\n        else if (((actualObject.shape.bpmnShape === 'Event' || actualObject.shape.shape === 'Event') || newShape.shape === 'Event') &&\n            newShape.event) {\n            this.removeBPMNElementFromDOM(actualObject, diagram);\n            var shapeEvent = newShape.event;\n            actualObject.wrapper.children[0] = this.getBPMNEventShape(actualObject, shapeEvent);\n        }\n        else if ((newShape.shape === 'Message') ||\n            (newShape.shape === 'DataSource')) {\n            this.removeBPMNElementFromDOM(actualObject, diagram);\n            actualObject.wrapper.children[0] = this.getBPMNShapes(actualObject);\n            //}\n            // else if (newShape.shape === 'Group') {\n            //     actualObject.wrapper.children[0] = this.getBPMNGroup(actualObject, diagram);\n        }\n        else if (newShape.gateway !== undefined || (actualShape === 'Gateway' && sizeChanged)) {\n            this.updateBPMNGateway(actualObject, changedProp);\n        }\n        else if (newShape.dataObject !== undefined || (actualShape === 'DataObject' && sizeChanged)) {\n            this.updateBPMNDataObject(actualObject, changedProp, oldObject);\n        }\n        else if (newShape.activity !== undefined || (actualShape === 'Activity' && sizeChanged)) {\n            this.updateBPMNActivity(actualObject, changedProp, oldObject, diagram);\n        }\n        else if (newShape.event !== undefined || (actualShape === 'Event' && sizeChanged)) {\n            this.updateBPMNEvent(actualObject, changedProp, oldObject);\n        }\n        actualObject.wrapper.children[0].id = actualObject.wrapper.children[0].id || elementWrapper.id;\n        if (changedProp.style) {\n            //941045: update styles for bpmn group shape\n            var containerChild = elementWrapper;\n            if (elementWrapper instanceof _core_containers_container__WEBPACK_IMPORTED_MODULE_3__.Container) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && actualObject.shape.shape === 'Activity') {\n                    containerChild = elementWrapper.children[0].children[0];\n                }\n                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && actualObject.shape.shape === 'Group') {\n                    containerChild = elementWrapper;\n                }\n                else {\n                    containerChild = elementWrapper.children[0];\n                }\n            }\n            (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)(changedProp.style, containerChild);\n            if (changedProp.style && changedProp.style.strokeColor) {\n                //EJ2-844052-BPMN nodes styles are not updated properly at runtime\n                if (elementWrapper && elementWrapper.children !== undefined\n                    && elementWrapper.children.length > 0) {\n                    if (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && actualObject.shape.shape === 'Activity')) &&\n                        actualObject.shape.activity.activity === 'SubProcess') {\n                        var child = elementWrapper.children[0];\n                        this.updateBPMNStyle(child, changedProp.style.strokeColor);\n                    }\n                    else if (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && actualObject.shape.shape === 'Gateway')) ||\n                        ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && actualObject.shape.shape === 'Event'))) {\n                        this.updateBPMNStyle(elementWrapper, changedProp.style.strokeColor);\n                    }\n                }\n            }\n            if (changedProp.style && changedProp.style.opacity !== undefined) {\n                this.updateBpmnChildOpacity(actualObject.wrapper, changedProp.style.opacity);\n            }\n        }\n    };\n    // To update the opacity of BPMN child\n    BpmnDiagrams.prototype.updateBpmnChildOpacity = function (wrapper, opacity) {\n        if (wrapper.children && wrapper.children.length > 0) {\n            for (var i = 0; i < wrapper.children.length; i++) {\n                var child = wrapper.children[parseInt(i.toString(), 10)];\n                if (child.children) {\n                    this.updateBpmnChildOpacity(child, opacity);\n                }\n                if (!(child instanceof _core_elements_text_element__WEBPACK_IMPORTED_MODULE_5__.TextElement)) {\n                    child.style.opacity = opacity;\n                }\n            }\n        }\n    };\n    /**\n     * EJ2-60574 -BPMN shape do not get changed at runtime properly\n     */\n    BpmnDiagrams.prototype.removeBPMNElementFromDOM = function (actualObject, diagram) {\n        for (var _i = 0, _a = diagram.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.removeElement)(actualObject.id + '_groupElement', elementId);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNStyle = function (elementWrapper, changedProp) {\n        for (var i = 0; i < elementWrapper.children.length; i++) {\n            var child = elementWrapper.children[parseInt(i.toString(), 10)];\n            (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)({ strokeColor: changedProp }, child);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNGateway = function (node, changedProp) {\n        var bpmnShape = node.shape;\n        var elementWrapper = node.wrapper.children[0];\n        if (bpmnShape) {\n            (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)(node.style, elementWrapper.children[0]);\n            var pathData = getBpmnGatewayShapePathData(bpmnShape.gateway.type);\n            var dataobjTypeNode = this.updateGatewaySubType(elementWrapper, node, pathData);\n            // EJ2-912371-BpmnGateway -- BPMN gateway shape runtime change is not properly rendered\n            var gatewayType = bpmnShape.gateway.type;\n            if (gatewayType === 'None' || gatewayType === 'EventBased' || gatewayType === 'ExclusiveEventBased' || gatewayType === 'ParallelEventBased') {\n                dataobjTypeNode.style.fill = 'white';\n            }\n            else {\n                dataobjTypeNode.style.fill = 'black';\n            }\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.removeElement)(elementWrapper.children[1].id);\n            elementWrapper.children.splice(1, 1);\n            elementWrapper.children.push(dataobjTypeNode);\n        }\n        if (changedProp.width !== undefined || changedProp.height !== undefined) {\n            this.setSizeForBPMNGateway(node.shape.gateway, elementWrapper, changedProp.width || node.width, changedProp.height || node.height);\n        }\n    };\n    /**\n     * Used to update Bpmn gateway child in runtime\n     * EJ2-60581\n     * @param elementWrapper\n     * @param node\n     * @param pathData\n     * @returns\n     */\n    BpmnDiagrams.prototype.updateGatewaySubType = function (elementWrapper, node, pathData) {\n        var dataobjTypeNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        dataobjTypeNode.id = node.id + '_1_gatewayType';\n        dataobjTypeNode.width = elementWrapper.children[1].width;\n        dataobjTypeNode.height = elementWrapper.children[1].height;\n        dataobjTypeNode.margin.left = elementWrapper.children[1].margin.left;\n        dataobjTypeNode.margin.top = elementWrapper.children[1].margin.top;\n        dataobjTypeNode.data = pathData;\n        dataobjTypeNode.offsetX = elementWrapper.children[1].offsetX;\n        dataobjTypeNode.offsetY = elementWrapper.children[1].offsetY;\n        dataobjTypeNode.style = elementWrapper.children[1].style;\n        dataobjTypeNode.horizontalAlignment = elementWrapper.children[1].horizontalAlignment;\n        dataobjTypeNode.verticalAlignment = elementWrapper.children[1].verticalAlignment;\n        dataobjTypeNode.relativeMode = elementWrapper.children[1].relativeMode;\n        dataobjTypeNode.transform = elementWrapper.children[1].transform;\n        return dataobjTypeNode;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNDataObject = function (node, newObject, oldObject) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0];\n        if (bpmnShape) {\n            var elementWrapperChild1 = elementWrapper.children[1];\n            var elementWrapperChild2 = elementWrapper.children[2];\n            if (newObject.style !== undefined) {\n                (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)(newObject.style, elementWrapper.children[0]);\n                elementWrapperChild1.style.opacity = node.style.opacity;\n                elementWrapperChild2.style.opacity = node.style.opacity;\n            }\n            if (bpmnShape.dataObject) {\n                switch (bpmnShape.dataObject.type) {\n                    case 'None':\n                        elementWrapperChild1.visible = false;\n                        break;\n                    case 'Input':\n                        elementWrapperChild1.style.fill = 'white';\n                        break;\n                    case 'Output':\n                        elementWrapperChild1.style.fill = 'black';\n                        break;\n                }\n                if (oldObject.shape.dataObject.type === 'None') {\n                    elementWrapperChild1.visible = true;\n                }\n                if (newObject.shape.dataObject.collection !== undefined) {\n                    elementWrapperChild2.visible = bpmnShape.dataObject.collection;\n                }\n            }\n        }\n        if (newObject.width !== undefined || newObject.height !== undefined) {\n            this.setSizeForBPMNDataObjects(node.shape.dataObject, elementWrapper, newObject.width || node.width, newObject.height || node.height);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getEvent = function (node, oldObject, event, child0, child1, child2) {\n        switch (event) {\n            case 'Start':\n                child1.visible = false;\n                child0.style.strokeDashArray = '';\n                child2.style.fill = 'white';\n                child2.style.strokeColor = 'black';\n                child0.style.fill = 'white';\n                break;\n            case 'NonInterruptingStart':\n                child0.style.strokeDashArray = '2 3';\n                child2.style.fill = 'white';\n                child0.style.fill = 'white';\n                child2.style.strokeColor = 'black';\n                child1.visible = false;\n                break;\n            case 'Intermediate':\n                child0.style.strokeDashArray = '';\n                child0.style.fill = 'white';\n                child1.style.strokeDashArray = '';\n                child0.style.gradient = null;\n                child2.style.fill = 'white';\n                child2.style.strokeColor = 'black';\n                this.updateEventVisibility(oldObject, child1);\n                break;\n            case 'NonInterruptingIntermediate':\n                child0.style.fill = 'white';\n                child0.style.gradient = null;\n                child2.style.fill = 'white';\n                child2.style.strokeColor = 'black';\n                child0.style.strokeDashArray = '2 3';\n                child1.style.strokeDashArray = '2 3';\n                this.updateEventVisibility(oldObject, child1);\n                break;\n            case 'ThrowingIntermediate':\n            case 'End':\n                child0.style.fill = event !== 'End' ? 'white' : 'black';\n                child0.style.strokeDashArray = '';\n                child1.style.strokeDashArray = '';\n                child0.style.gradient = null;\n                child2.style.fill = 'black';\n                this.updateEventVisibility(oldObject, child1);\n                // child2.style.strokeColor = node.style.fill;\n                break;\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateEventVisibility = function (oldObject, child1) {\n        if (oldObject.shape.activity && oldObject.shape.activity.subProcess &&\n            oldObject.shape.activity.subProcess.events &&\n            oldObject.shape.activity.subProcess.events[0] !== undefined &&\n            oldObject.shape.activity.subProcess.events[0].event !== undefined) {\n            if (oldObject.shape.activity.subProcess.events[0].event === 'NonInterruptingStart' ||\n                oldObject.shape.activity.subProcess.events[0].event === 'Start') {\n                child1.visible = true;\n            }\n        }\n        // 922925 - Start event node doesnot change at run time for the transaction Subprocess event that has the event start\n        else if (oldObject.shape.activity &&\n            oldObject.shape.activity.subProcess &&\n            oldObject.shape.activity.subProcess.transaction) {\n            var subProcessTransaction_1 = oldObject.shape.activity.subProcess.transaction;\n            var isEventStart_1 = function (event) {\n                return event === 'Start' || event === 'NonInterruptingStart';\n            };\n            var validKeys = ['success', 'failure', 'cancel'];\n            var hasStartEvent = validKeys.some(function (key) {\n                var transactionEvent = subProcessTransaction_1['' + key];\n                return transactionEvent ? isEventStart_1(transactionEvent.event) : false;\n            });\n            child1.visible = hasStartEvent || child1.visible;\n        }\n        else if (oldObject.shape.event !== undefined) {\n            if (oldObject.shape.event.event === 'NonInterruptingStart' ||\n                oldObject.shape.event.event === 'Start') {\n                child1.visible = true;\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNEvent = function (node, newObject, oldObject) {\n        var bpmnShape = newObject.shape;\n        var trigger;\n        var elementWrapper = node.wrapper.children[0];\n        // if (bpmnShape) {\n        //     const elementWrapperChild0: DiagramElement = elementWrapper.children[0];\n        //     const elementWrapperChild1: DiagramElement = elementWrapper.children[1];\n        //     const elementWrapperChild2: DiagramElement = elementWrapper.children[2];\n        //     //let event: string;\n        //     if (newObject.style !== undefined) {\n        //         updateStyle(node.style, elementWrapper.children[0]);\n        //         if (newObject.style.opacity !== undefined || newObject.style.strokeColor !== undefined) {\n        //             elementWrapperChild1.style.opacity = node.style.opacity;\n        //             elementWrapperChild1.style.strokeColor = node.style.strokeColor;\n        //         }\n        //     }\n        //     const event: string = bpmnShape.event.event;\n        //     trigger = bpmnShape.event.trigger;\n        //     if (event !== undefined) {\n        //         this.getEvent(node, oldObject, event, elementWrapperChild0, elementWrapperChild1, elementWrapperChild2);\n        //     }\n        //     if (trigger !== undefined) {\n        //         this.updateBPMNEventTrigger(node, newObject);\n        //     }\n        // }\n        if (newObject.width !== undefined || newObject.height !== undefined || trigger !== undefined) {\n            this.setSizeForBPMNEvents(node.shape.event, elementWrapper, newObject.width || node.width, newObject.height || node.height);\n        }\n    };\n    // /** @private */\n    // public updateBPMNEventTrigger(node: Node, newObject: Node): void {\n    //     const bpmnShape: BpmnShapeModel = node.shape as BpmnShapeModel;\n    //     const elementWrapper: DiagramElement = (node.wrapper.children[0] as Canvas).children[2];\n    //     (elementWrapper as PathElement).canMeasurePath = true;\n    //     if (newObject.style &&\n    //         (newObject.style.strokeColor !== undefined || newObject.style.opacity !== undefined)) {\n    //         updateStyle(node.style, elementWrapper);\n    //     }\n    //     const bpmnshapeTriggerdata: string = getBpmnTriggerShapePathData(\n    //         bpmnShape.event.trigger);\n    //     (elementWrapper as PathModel).data = bpmnshapeTriggerdata;\n    // }\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNActivity = function (node, newObject, oldObject, diagram) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0];\n        if (elementWrapper && elementWrapper.children && elementWrapper.children.length > 0 && elementWrapper.children[0]) {\n            var size = this.getSize(node, elementWrapper.children[0].children[0]);\n            if (bpmnShape) {\n                var oldProp = oldObject.shape.activity.activity;\n                var actualObjectProp = node.shape.activity.activity;\n                if ((oldProp === 'SubProcess' || oldProp === 'Task') && (actualObjectProp === 'SubProcess' || actualObjectProp === 'Task')) {\n                    diagram.removeElements(node);\n                    node.wrapper.children[0] = this.getBPMNActivityShape(node);\n                }\n                else {\n                    if (actualObjectProp === 'Task' && bpmnShape.activity.task !== undefined) {\n                        this.updateBPMNActivityTask(node, newObject);\n                        var subChildCount = this.getTaskChildCount(node);\n                        var x = void 0;\n                        var childSpace = subChildCount * 12;\n                        var area = size.width / 2 - childSpace;\n                        if (subChildCount === 1) {\n                            x = area + 8;\n                        }\n                        else {\n                            x = area + (subChildCount - 1) * 8;\n                        }\n                        if (bpmnShape.activity.task.loop !== undefined) {\n                            this.updateBPMNActivityTaskLoop(node, newObject, x, subChildCount, area, 2);\n                        }\n                    }\n                    if (actualObjectProp === 'SubProcess' && bpmnShape.activity.subProcess !== undefined) {\n                        this.updateBPMNActivitySubProcess(node, newObject, oldObject, diagram);\n                    }\n                }\n                this.setSizeForBPMNActivity(node.shape.activity, elementWrapper, newObject.width || size.width, newObject.height || size.height, node);\n            }\n            if (newObject.width !== undefined || newObject.height !== undefined) {\n                this.setSizeForBPMNActivity(node.shape.activity, elementWrapper, newObject.width || size.width, newObject.height || size.height, node);\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNActivityTask = function (node, newObject) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0].children[0];\n        var task = bpmnShape.activity.task;\n        for (var i = 0; i < elementWrapper.children.length; i++) {\n            //EJ2-907764-Changing Loop for Activity node with task type, result in change in task type symbols\n            if (elementWrapper.children[parseInt(i.toString(), 10)].id === node.id + '_2_loop') {\n                var element = document.getElementById(node.id + '_2_loop');\n                element.parentNode.removeChild(element);\n            }\n        }\n        if (task.type !== undefined) {\n            task.type = task.type || 'None';\n            var bpmnshapeTaskdata = getBpmnTaskShapePathData(task.type);\n            elementWrapper.children[1].data = bpmnshapeTaskdata;\n            for (var i = 0; i < elementWrapper.children.length; i++) {\n                if (elementWrapper.children[parseInt(i.toString(), 10)].id === node.id + '_1_tasktType') {\n                    elementWrapper.children.splice(i, 1);\n                    var element = document.getElementById(node.id + '_1_tasktType');\n                    element.parentNode.removeChild(element);\n                }\n                //EJ2-907764-Changing Loop for Activity node with task type, result in change in task type symbols\n                if (elementWrapper.children[parseInt(i.toString(), 10)].id === node.id + '_1_taskTypeService') {\n                    elementWrapper.children.splice(i, 1);\n                    var element = document.getElementById(node.id + '_1_taskTypeService');\n                    element.parentNode.removeChild(element);\n                }\n            }\n            var taskTypeNode = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            taskTypeNode.id = node.id + '_1_tasktType';\n            taskTypeNode.margin.left = 5;\n            taskTypeNode.margin.top = 5;\n            taskTypeNode.data = bpmnshapeTaskdata;\n            taskTypeNode.style.fill = 'transparent';\n            taskTypeNode.style.opacity = node.style.opacity;\n            /**\n             * Used to update the Bpmn activity task type at runtime\n             * EJ2-60586\n             */\n            if (task.type === 'Receive' || task.type === 'Send') {\n                taskTypeNode.width = 18;\n                taskTypeNode.height = 16;\n                if (task.type === 'Send') {\n                    taskTypeNode.style.fill = 'black';\n                }\n                elementWrapper.children.splice(1, 0, taskTypeNode);\n            }\n            else if (task.type === 'Manual') {\n                taskTypeNode.width = 16;\n                taskTypeNode.height = 11;\n                elementWrapper.children.splice(1, 0, taskTypeNode);\n            }\n            else if (task.type !== 'Service') {\n                taskTypeNode.width = 20;\n                taskTypeNode.height = 20;\n                elementWrapper.children.splice(1, 0, taskTypeNode);\n            }\n            else {\n                taskTypeNode.width = 20;\n                taskTypeNode.height = 20;\n                elementWrapper.children.splice(1, 0, taskTypeNode);\n                var taskTypeNodeService = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n                taskTypeNodeService.id = node.id + '_1_taskTypeService';\n                taskTypeNodeService.data = bpmnshapeTaskdata;\n                taskTypeNodeService.margin.left = elementWrapper.children[1].margin.left + 9;\n                taskTypeNodeService.margin.top = elementWrapper.children[1].margin.top + 9;\n                taskTypeNodeService.style.fill = 'white';\n                taskTypeNodeService.style.opacity = node.style.opacity;\n                elementWrapper.children.splice(2, 0, taskTypeNodeService);\n            }\n        }\n        if (bpmnShape.activity.task.call !== undefined) {\n            if (bpmnShape.activity.task.call !== false) {\n                elementWrapper.children[0].style.strokeWidth = 4;\n            }\n            else {\n                elementWrapper.children[0].style.strokeWidth = 1;\n            }\n        }\n        if (bpmnShape.activity.task.compensation !== undefined) {\n            if (bpmnShape.activity.task.compensation === true) {\n                var isServiceTask = node.shape.activity.task.type === 'Service';\n                elementWrapper.children[isServiceTask ? 4 : 3].visible = true;\n            }\n            else {\n                elementWrapper.children[3].visible = false;\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNActivityTaskLoop = function (node, newObject, x, subChildCount, area, start) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0].children[0];\n        var activity = bpmnShape.activity;\n        var taskType = node.shape.activity.task.type;\n        var loop;\n        var index = 0;\n        var bpmnshapeLoopdata;\n        if (activity.subProcess !== undefined) {\n            var subProcess = activity.subProcess;\n            if (activity.subProcess.type === 'Transaction') {\n                index = 2;\n            }\n            else {\n                index = (activity.subProcess.events.length > 0) ? 1 : 0;\n            }\n            loop = subProcess.loop;\n            bpmnshapeLoopdata = getBpmnLoopShapePathData(loop);\n            elementWrapper.children[2 + index].data = bpmnshapeLoopdata;\n            elementWrapper.children[2 + index].visible = (loop === 'None') ? false : true;\n            //EJ2-907764-Changing Loop for Activity node with task type, result in change in task type symbols\n        }\n        else if (activity.task !== undefined && activity.task.loop !== undefined && taskType !== 'Service') {\n            bpmnshapeLoopdata = getBpmnLoopShapePathData(activity.task.loop);\n            elementWrapper.children[2].data = bpmnshapeLoopdata;\n            elementWrapper.children[2].visible = (activity.task.loop === 'None') ? false : true;\n        }\n        else if (activity.task !== undefined && activity.task.loop !== undefined && taskType === 'Service') {\n            bpmnshapeLoopdata = getBpmnLoopShapePathData(activity.task.loop);\n            elementWrapper.children[3].data = bpmnshapeLoopdata;\n            elementWrapper.children[3].visible = (activity.task.loop === 'None') ? false : true;\n        }\n        this.updateChildMargin(elementWrapper, subChildCount, area, x, start + index);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateChildMargin = function (elementWrapper, subChildCount, area, x, start) {\n        if (subChildCount === 1) {\n            for (var i = start; i < elementWrapper.children.length; i++) {\n                if (i !== 2 && elementWrapper.children[parseInt(i.toString(), 10)].visible === true) {\n                    elementWrapper.children[parseInt(i.toString(), 10)].margin.left = x;\n                    x = area + 8;\n                }\n            }\n        }\n        else {\n            x = area + (subChildCount - 1) * 8;\n            for (var i = start; i < elementWrapper.children.length; i++) {\n                if (i !== 2 && elementWrapper.children[parseInt(i.toString(), 10)].visible === true) {\n                    elementWrapper.children[parseInt(i.toString(), 10)].margin.left = x;\n                    x += 12 + 8;\n                }\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNActivitySubProcess = function (node, newObject, oldObject, diagram) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0];\n        var size = this.getSize(node, elementWrapper.children[0].children[0]);\n        var subProcess = bpmnShape.activity.subProcess;\n        var subChildCount = this.getSubprocessChildCount(node);\n        var x;\n        var childSpace = subChildCount * 12;\n        var area = size.width / 2 - childSpace;\n        if (subChildCount === 1) {\n            x = area + 8;\n        }\n        else {\n            x = area + (subChildCount - 1) * 8;\n        }\n        (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)(node.style, elementWrapper.children[0].children[0]);\n        if (subProcess.events !== undefined) {\n            this.updateBPMNSubProcessEvent(node, newObject, oldObject, diagram);\n        }\n        if (subProcess.adhoc !== undefined) {\n            this.updateBPMNSubProcessAdhoc(node, oldObject, subProcess, x, subChildCount, area);\n        }\n        if (subProcess.boundary !== undefined) {\n            this.updateBPMNSubProcessBoundary(node, subProcess);\n        }\n        if (subProcess.collapsed !== undefined) {\n            this.updateBPMNSubProcessCollapsed(node, oldObject, subProcess, x, subChildCount, area, diagram);\n        }\n        if (subProcess.compensation !== undefined) {\n            this.updateBPMNSubProcessCompensation(node, oldObject, subProcess, x, subChildCount, area);\n        }\n        if (subProcess.loop !== undefined) {\n            this.updateBPMNSubProcessLoop(node, oldObject, subProcess, x, subChildCount, area);\n        }\n        if (subProcess.transaction !== undefined) {\n            this.updateBPMNSubProcessTransaction(node, newObject, oldObject, diagram);\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessEvent = function (node, newObject, oldObject, diagram) {\n        var bpmnShape = newObject.shape;\n        var elementWrapper = node.wrapper.children[0];\n        var nodeContent = elementWrapper.children[0];\n        var index;\n        var j = 0;\n        var elementWrapperChildLen = elementWrapper.children[0].children.length;\n        var subProcess = bpmnShape.activity.subProcess;\n        var events;\n        var start = 2;\n        for (var _i = 0, _a = Object.keys(subProcess.events); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var eventIndex = Number(key);\n            var eventWrapper = nodeContent.children[eventIndex + start];\n            var actualEvent = node.shape.activity.subProcess.events[parseInt(eventIndex.toString(), 10)];\n            this.updateBPMNSubEvent(node, subProcess.events[parseInt(eventIndex.toString(), 10)], actualEvent, eventWrapper, newObject, oldObject, diagram);\n        }\n    };\n    BpmnDiagrams.prototype.updateBPMNSubEvent = function (node, newEvent, actualEvent, eventWrapper, newObject, oldObject, diagram) {\n        var elementWrapper = node.wrapper.children[0];\n        var bpmnShape = newObject.shape;\n        if (eventWrapper.children !== undefined) {\n            var child0 = eventWrapper.children[0];\n            var child1 = eventWrapper.children[1];\n            var child2 = eventWrapper.children[2];\n            var eventType = void 0;\n            var trigger = void 0;\n            if (newObject.style) {\n                if (newObject.style.strokeColor !== undefined || newObject.style.opacity !== undefined) {\n                    elementWrapper.children[0].children[1].style.strokeColor = newObject.style.strokeColor;\n                    elementWrapper.children[0].children[1].style.opacity = newObject.style.opacity;\n                }\n            }\n            if (bpmnShape.activity.subProcess !== undefined) {\n                eventType = newEvent.event;\n                trigger = newEvent.trigger;\n            }\n            if (eventType !== undefined) {\n                this.getEvent(newObject, oldObject, eventType, child0, child1, child2);\n            }\n            if (trigger !== undefined) {\n                if (newObject.style) {\n                    (0,_diagram_utility_diagram_util__WEBPACK_IMPORTED_MODULE_6__.updateStyle)(newObject.style, elementWrapper.children[0]);\n                }\n                //EJ2-913823 - Transaction subprocess event trigger not updated properly at runtime\n                this.removeBPMNElementFromDOM(node, diagram);\n                node.wrapper.children[0] = this.getBPMNActivityShape(node);\n            }\n            if (newEvent.height !== undefined || newEvent.width !== undefined) {\n                this.getEventSize(newEvent, eventWrapper);\n            }\n            if (newEvent.id !== undefined) {\n                eventWrapper.id = newEvent.id;\n            }\n            if (newEvent.margin !== undefined) {\n                eventWrapper.margin = newEvent.margin;\n            }\n            if (newEvent.horizontalAlignment !== undefined) {\n                eventWrapper.horizontalAlignment = newEvent.horizontalAlignment;\n            }\n            if (newEvent.verticalAlignment !== undefined) {\n                eventWrapper.verticalAlignment = newEvent.verticalAlignment;\n            }\n            if (newEvent.offset !== undefined) {\n                eventWrapper.setOffsetWithRespectToBounds(actualEvent.offset.x, actualEvent.offset.y, 'Fraction');\n                eventWrapper.relativeMode = 'Point';\n            }\n            if (newEvent.annotations !== undefined) {\n                var annotations = void 0;\n                var annotation = elementWrapper.children[0].children[2];\n                if (eventWrapper.children[3] && eventWrapper.children.length > 3) {\n                    annotations = eventWrapper.children[3];\n                    diagram.updateAnnotation(newEvent.annotations[0], annotations, annotation);\n                }\n            }\n            if (newEvent.ports !== undefined) {\n                var ports = void 0;\n                var port = elementWrapper.children[0].children[2];\n                if (eventWrapper.children[4] && eventWrapper.children.length > 4) {\n                    ports = eventWrapper.children[4];\n                    diagram.updatePort(newEvent.ports[0], ports, port);\n                }\n            }\n            if (newEvent.visible !== undefined &&\n                node.shape.activity.subProcess.type !== 'Event') {\n                this.updateDiagramContainerVisibility(eventWrapper, newEvent.visible);\n            }\n        }\n    };\n    BpmnDiagrams.prototype.updateBPMNSubProcessTransaction = function (node, newObject, oldObject, diagram) {\n        var transaction = newObject.shape.activity.subProcess.transaction;\n        var eventContainer = node.wrapper.children[0].children[0].children[2];\n        var actualEvent;\n        if (transaction.success !== undefined) {\n            actualEvent = node.shape.activity.subProcess.transaction.success;\n            this.updateBPMNSubEvent(node, transaction.success, actualEvent, eventContainer.children[0], newObject, oldObject, diagram);\n        }\n        if (transaction.cancel !== undefined) {\n            actualEvent = node.shape.activity.subProcess.transaction.cancel;\n            this.updateBPMNSubEvent(node, transaction.cancel, actualEvent, eventContainer.children[1], newObject, oldObject, diagram);\n        }\n        if (transaction.failure !== undefined) {\n            actualEvent = node.shape.activity.subProcess.transaction.failure;\n            this.updateBPMNSubEvent(node, transaction.failure, actualEvent, eventContainer.children[2], newObject, oldObject, diagram);\n        }\n        for (var _i = 0, _a = node.outEdges; _i < _a.length; _i++) {\n            var edge = _a[_i];\n            var connector = diagram.nameTable[\"\" + edge];\n            switch (connector.sourcePortID) {\n                case 'success':\n                    if (transaction.success && transaction.success.visible !== undefined) {\n                        diagram.connectorPropertyChange(connector, {}, { sourcePortID: 'success' });\n                    }\n                    break;\n                case 'cancel':\n                    if (transaction.cancel && transaction.cancel.visible !== undefined) {\n                        diagram.connectorPropertyChange(connector, {}, { sourcePortID: 'cancel' });\n                    }\n                    break;\n                case 'failure':\n                    if (transaction.failure && transaction.failure.visible !== undefined) {\n                        diagram.connectorPropertyChange(connector, {}, { sourcePortID: 'failure' });\n                    }\n                    break;\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getEventSize = function (events, wrapperChild) {\n        if (events.height !== undefined) {\n            wrapperChild.height = events.height;\n            wrapperChild.children[0].height = events.height;\n            wrapperChild.children[1].height = events.height * 0.85;\n            wrapperChild.children[2].height = events.height * 0.54;\n        }\n        if (events.width !== undefined) {\n            wrapperChild.width = events.width;\n            wrapperChild.children[0].width = events.width;\n            wrapperChild.children[1].width = events.width * 0.85;\n            wrapperChild.children[2].width = events.width * 0.54;\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessAdhoc = function (node, oldObject, subProcess, x, subChildCount, area) {\n        var shape = node.shape;\n        var elementWrapper = node.wrapper.children[0].children[0];\n        var index;\n        if (node.shape.activity.subProcess.type === 'Transaction') {\n            index = 2;\n        }\n        else {\n            index = (node.shape.activity.subProcess.events.length > 0) ? 1 : 0;\n        }\n        if (subProcess.adhoc === false) {\n            elementWrapper.children[3 + index].visible = false;\n        }\n        else {\n            elementWrapper.children[3 + index].visible = true;\n        }\n        this.updateChildMargin(elementWrapper, subChildCount, area, x, 3 + index);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessBoundary = function (node, subProcess) {\n        var shape = node.shape;\n        var elementWrapper = (node.wrapper.children[0].children[0].children[0]);\n        if (subProcess.boundary === 'Default') {\n            elementWrapper.style.strokeWidth = 1;\n            elementWrapper.style.strokeDashArray = '1 0';\n        }\n        if (subProcess.boundary === 'Call') {\n            elementWrapper.style.strokeWidth = 4;\n            elementWrapper.style.strokeDashArray = '1 0';\n        }\n        if (subProcess.boundary === 'Event') {\n            elementWrapper.style.strokeWidth = 1;\n            elementWrapper.style.strokeDashArray = '2 2';\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateElementVisibility = function (node, visible, diagram) {\n        if (node.shape.activity.subProcess.processes\n            && node.shape.activity.subProcess.processes.length > 0) {\n            var processes = node.shape.activity.subProcess.processes;\n            for (var j = processes.length - 1; j >= 0; j--) {\n                var currentNode = diagram.nameTable[processes[parseInt(j.toString(), 10)]];\n                currentNode.visible = visible;\n                diagram.updateElementVisibility(currentNode.wrapper, currentNode, visible);\n                if (visible) {\n                    if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && currentNode.shape.shape === 'Event')) {\n                        this.setEventVisibility(currentNode, currentNode.wrapper.children[0].children);\n                    }\n                    if (currentNode.shape.activity.activity === 'SubProcess') {\n                        this.setSubProcessVisibility(currentNode);\n                    }\n                }\n                var connectors = currentNode.inEdges.concat(currentNode.outEdges);\n                for (var i = connectors.length - 1; i >= 0; i--) {\n                    var connector = diagram.nameTable[connectors[parseInt(i.toString(), 10)]];\n                    connector.visible = visible;\n                    diagram.updateElementVisibility(connector.wrapper, connector, visible);\n                }\n            }\n        }\n        if (visible) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && node.shape.shape === 'Event') {\n                this.setEventVisibility(node, node.wrapper.children[0].children);\n            }\n            if (node.shape.activity.activity === 'SubProcess') {\n                this.setSubProcessVisibility(node);\n            }\n            if (node.shape.activity.activity === 'Task' &&\n                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_16__.isBlazor)() && node.shape.shape === 'Activity')\n                && node.shape.activity.subProcess.loop === 'None') {\n                node.wrapper.children[0].children[0].children[3].visible = false;\n            }\n            //(EJ2-843861) - BPMN node subtype visibles whiles changing the node visibility\n            if (node.shape.shape === 'DataObject') {\n                if (node.shape.dataObject.collection === false && node.shape.dataObject.type === 'None') {\n                    for (var i = node.wrapper.children[0].children.length - 1; i > 0; i--) {\n                        node.wrapper.children[0].children[parseInt(i.toString(), 10)].visible = false;\n                    }\n                }\n                else if (node.shape.dataObject.collection === true && node.shape.dataObject.type === 'None') {\n                    node.wrapper.children[0].children[1].visible = false;\n                }\n                else if (node.shape.dataObject.collection === false && (node.shape.dataObject.type === 'Input' || node.shape.dataObject.type === 'Output')) {\n                    node.wrapper.children[0].children[2].visible = false;\n                }\n            }\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessCollapsed = function (node, oldObject, subProcess, x, subChildCount, area, diagram) {\n        var eventLength = node.shape.activity.subProcess.events.length;\n        var elementWrapper = node.wrapper.children[0].children[0];\n        var index;\n        if (node.shape.activity.subProcess.type === 'Transaction') {\n            index = 3;\n        }\n        else {\n            index = (node.shape.activity.subProcess.events.length > 0) ? 0 : 1;\n        }\n        if (subProcess.collapsed === false) {\n            this.updateElementVisibility(node, true, diagram);\n            elementWrapper.children[index + eventLength].visible = false;\n        }\n        else {\n            this.updateElementVisibility(node, false, diagram);\n            elementWrapper.children[index + eventLength].visible = true;\n        }\n        this.updateChildMargin(elementWrapper, subChildCount, area, x, 3 + eventLength);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessCompensation = function (node, oldObject, subProcess, x, subChildCount, area) {\n        var elementWrapper = node.wrapper.children[0].children[0];\n        var index;\n        if (node.shape.activity.subProcess.type === 'Transaction') {\n            index = 2;\n        }\n        else {\n            index = (node.shape.activity.subProcess.events.length > 0) ? 1 : 0;\n        }\n        if (subProcess.compensation === false) {\n            elementWrapper.children[4 + index].visible = false;\n        }\n        else {\n            elementWrapper.children[4 + index].visible = true;\n        }\n        this.updateChildMargin(elementWrapper, subChildCount, area, x, 4 + index);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNSubProcessLoop = function (node, oldObject, subProcess, x, subChildCount, area) {\n        this.updateBPMNActivityTaskLoop(node, node, x, subChildCount, area, 1);\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateBPMNConnector = function (actualObject, oldObject, connection, diagram) {\n        var flowType = connection.shape;\n        //EJ2-66905 - Changing BPMN flow connectors at runtime is not working properly.\n        var flow = actualObject.shape.flow;\n        if ((flowType.flow === 'Sequence' || flowType.sequence) && flow === 'Sequence') {\n            actualObject = this.getSequence(actualObject, oldObject, connection, diagram);\n        }\n        if ((flowType.flow === 'Association' || flowType.association) && flow === 'Association') {\n            actualObject = this.getAssociation(actualObject, oldObject, connection, diagram);\n        }\n        if ((flowType.flow === 'Message' || flowType.message) && flow === 'Message') {\n            actualObject = this.getMessage(actualObject, oldObject, connection, diagram);\n        }\n        return actualObject;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getSequence = function (actualObject, oldObject, connection, diagram) {\n        if ((connection.shape.sequence) === 'Normal' || actualObject.shape.sequence === 'Normal') {\n            actualObject.targetDecorator.shape = 'Arrow';\n            actualObject.sourceDecorator.shape = 'None';\n            actualObject.style.strokeDashArray = 'None';\n            actualObject.targetDecorator.style.fill = 'black';\n            actualObject.targetDecorator.width = 10;\n            actualObject.targetDecorator.height = 10;\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                targetDecorator: { shape: 'Arrow', style: { fill: 'black' }, height: 10, width: 10 },\n                sourceDecorator: { shape: 'None' },\n                style: { strokeDashArray: 'None' }\n            });\n            actualObject.wrapper.children[3].visible = false;\n        }\n        if ((connection.shape.sequence) === 'Default' || actualObject.shape.sequence === 'Default') {\n            actualObject.targetDecorator.shape = 'Arrow';\n            actualObject.sourceDecorator.shape = 'None';\n            actualObject.style.strokeDashArray = 'None';\n            actualObject.targetDecorator.style.fill = 'black';\n            actualObject.targetDecorator.width = 10;\n            actualObject.targetDecorator.height = 10;\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                style: { strokeDashArray: 'None' },\n                targetDecorator: { shape: 'Arrow', style: { fill: 'black' }, height: 10, width: 10 },\n                sourceDecorator: { shape: 'None' }\n            });\n            var segment = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            var pathseq = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            var pathseqData = void 0;\n            segment = actualObject.getSegmentElement(actualObject, segment);\n            var anglePoints = actualObject.intermediatePoints;\n            for (var j = 0; j < anglePoints.length - 1; j++) {\n                // eslint-disable-next-line no-global-assign\n                length = length + actualObject.distance(anglePoints[parseInt(j.toString(), 10)], anglePoints[j + 1]);\n                pathseqData = actualObject.findPath(anglePoints[parseInt(j.toString(), 10)], anglePoints[j + 1]);\n            }\n            var content = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n            content.data = pathseqData[0];\n            content.id = actualObject.id + '_' + connection.shape.sequence || actualObject.shape.sequence;\n            content.offsetX = pathseqData[1].x;\n            content.offsetY = pathseqData[1].y;\n            content.rotateAngle = 45;\n            content.transform = _enum_enum__WEBPACK_IMPORTED_MODULE_9__.Transform.Self;\n            this.removeDomElement(actualObject, diagram, content);\n        }\n        if ((connection.shape.sequence) === 'Conditional' || actualObject.shape.sequence === 'Conditional') {\n            actualObject.sourceDecorator.shape = 'Diamond';\n            actualObject.sourceDecorator.width = 20;\n            actualObject.sourceDecorator.height = 10;\n            actualObject.sourceDecorator.style.fill = 'white';\n            actualObject.targetDecorator.style.fill = 'black';\n            actualObject.style.strokeDashArray = 'None';\n            actualObject.targetDecorator.shape = 'Arrow';\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                style: { strokeDashArray: 'None' },\n                targetDecorator: { shape: 'Arrow', style: { fill: 'black' }, height: 10, width: 10 },\n                sourceDecorator: { shape: 'Diamond', width: 20, height: 10, style: { fill: 'white' } }\n            });\n            actualObject.wrapper.children[3].visible = false;\n        }\n        return actualObject;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getAssociation = function (actualObject, oldObject, connection, diagram) {\n        if ((connection.shape.association) === 'Default' || actualObject.shape.association === 'Default') {\n            actualObject.sourceDecorator.shape = 'None';\n            actualObject.targetDecorator.shape = 'None';\n            actualObject.style.strokeDashArray = '2 2';\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                style: { strokeDashArray: '2 2' },\n                targetDecorator: { shape: 'None' },\n                sourceDecorator: { shape: 'None' }\n            });\n            actualObject.wrapper.children[3].visible = false;\n        }\n        if ((connection.shape.association) === 'Directional' || actualObject.shape.association === 'Directional') {\n            actualObject.sourceDecorator.shape = 'None';\n            actualObject.style.strokeDashArray = '2 2';\n            actualObject.targetDecorator.shape = 'OpenArrow';\n            actualObject.targetDecorator.width = 10;\n            actualObject.targetDecorator.height = 10;\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                style: { strokeDashArray: '2 2' },\n                targetDecorator: { shape: 'OpenArrow', width: 10, height: 10 },\n                sourceDecorator: { shape: 'None' }\n            });\n            actualObject.wrapper.children[3].visible = false;\n        }\n        if ((connection.shape.association) === 'BiDirectional' || actualObject.shape.association === 'BiDirectional') {\n            actualObject.sourceDecorator.shape = 'OpenArrow';\n            actualObject.targetDecorator.shape = 'OpenArrow';\n            actualObject.sourceDecorator.width = 10;\n            actualObject.sourceDecorator.height = 10;\n            actualObject.sourceDecorator.style.fill = 'black';\n            diagram.connectorPropertyChange(actualObject, oldObject, {\n                style: { strokeDashArray: '2 2' },\n                targetDecorator: { shape: 'OpenArrow', width: 10, height: 10 },\n                sourceDecorator: { shape: 'OpenArrow', width: 10, height: 10, style: { fill: 'black' } }\n            });\n            actualObject.wrapper.children[3].visible = false;\n        }\n        return actualObject;\n    };\n    /** @private */\n    BpmnDiagrams.prototype.getMessage = function (actualObject, oldObject, connection, diagram) {\n        var segmentOffset = 0.5;\n        var angle;\n        var pt;\n        actualObject.sourceDecorator.shape = 'Circle';\n        actualObject.sourceDecorator.width = 10;\n        actualObject.targetDecorator.shape = 'Arrow';\n        actualObject.sourceDecorator.height = 10;\n        actualObject.sourceDecorator.style.fill = 'White';\n        actualObject.targetDecorator.style.fill = 'White';\n        diagram.connectorPropertyChange(actualObject, oldObject, { sourceDecorator: { shape: 'Circle', style: { fill: 'White' }, width: 10, height: 10 }, targetDecorator: { shape: 'Arrow', style: { fill: 'white' } } });\n        var anglePoints = actualObject.intermediatePoints;\n        var length = 0;\n        for (var j = 0; j < anglePoints.length - 1; j++) {\n            /* eslint-disable */\n            length = length + actualObject.distance(anglePoints[j], anglePoints[j + 1]);\n            /* eslint-enable */\n            var offLength = length * segmentOffset;\n            if (length >= offLength) {\n                angle = (0,_utility_connector__WEBPACK_IMPORTED_MODULE_10__.findAngle)(anglePoints[parseInt(j.toString(), 10)], anglePoints[j + 1]);\n                pt = _primitives_point__WEBPACK_IMPORTED_MODULE_11__.Point.transform(anglePoints[parseInt(j.toString(), 10)], angle, offLength);\n            }\n        }\n        var content = new _core_elements_path_element__WEBPACK_IMPORTED_MODULE_4__.PathElement();\n        actualObject.wrapper.children[0].style.strokeDashArray = ' 4 4';\n        actualObject.style.strokeDashArray = '4 4';\n        content.id = actualObject.id + '_' + connection.shape.message || actualObject.shape.message;\n        content.width = 25;\n        content.height = 15;\n        content.data = 'M0,0 L19.8,12.8 L40,0 L0, 0 L0, 25.5 L40, 25.5 L 40, 0';\n        content.horizontalAlignment = 'Center';\n        content.verticalAlignment = 'Center';\n        content.transform = _enum_enum__WEBPACK_IMPORTED_MODULE_9__.Transform.Self;\n        content.style.fill = connection.shape.message === 'NonInitiatingMessage' ?\n            'lightgrey' : 'white';\n        content.offsetX = pt.x;\n        content.offsetY = pt.y;\n        if ((connection.shape.message !== 'Default' && connection.shape.message !== undefined) || actualObject.shape.message !== 'Default') {\n            content.style.fill = (connection.shape.message || actualObject.shape.message) === 'NonInitiatingMessage' ?\n                'lightgrey' : 'white';\n        }\n        else {\n            content.visible = false;\n        }\n        this.removeDomElement(actualObject, diagram, content);\n        return actualObject;\n    };\n    // To remove old wrapper element from dom.\n    BpmnDiagrams.prototype.removeDomElement = function (actualObject, diagram, content) {\n        for (var _i = 0, _a = diagram.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.removeElement)(actualObject.id + '_groupElement', elementId);\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.removeElement)(actualObject.id + '_content_groupElement', elementId);\n            (0,_utility_dom_util__WEBPACK_IMPORTED_MODULE_15__.removeElement)(actualObject.id + '_html_element', elementId);\n        }\n        actualObject.wrapper.children.splice(3, 1);\n        actualObject.wrapper.children.splice(3, 0, content);\n    };\n    //End update Region\n    //size updation\n    BpmnDiagrams.prototype.setSizeForBPMNEvents = function (event, wrapper, width, height) {\n        wrapper.children[0].width = width;\n        wrapper.children[0].height = height;\n        //child node 1 - event node\n        var eventNode = wrapper.children[1];\n        eventNode.width = width * 0.85;\n        eventNode.height = height * 0.85;\n        var triggerNode = wrapper.children[2];\n        if (event.trigger === 'Message') {\n            triggerNode.width = width * 0.54;\n            triggerNode.height = height * 0.4;\n        }\n        else {\n            triggerNode.width = width * 0.5;\n            triggerNode.height = height * 0.5;\n        }\n    };\n    /** @private */\n    BpmnDiagrams.prototype.updateAnnotationDrag = function (node, diagram, tx, ty) {\n        if (node.processId) {\n            this.drag(node, tx, ty, diagram);\n            return true;\n        }\n        return false;\n    };\n    BpmnDiagrams.prototype.getAnnotationPathAngle = function (point, bounds) {\n        var direction = (0,_utility_connector__WEBPACK_IMPORTED_MODULE_10__.getPortDirection)(point, bounds, bounds, false);\n        var rotateAngle = 0;\n        switch (direction) {\n            case 'Right':\n                rotateAngle = 0;\n                break;\n            case 'Left':\n                rotateAngle = 180;\n                break;\n            case 'Bottom':\n                rotateAngle = 90;\n                break;\n            case 'Top':\n                rotateAngle = 270;\n                break;\n        }\n        return rotateAngle;\n    };\n    BpmnDiagrams.prototype.setSizeForBPMNGateway = function (event, wrapper, width, height) {\n        wrapper.children[0].width = width;\n        wrapper.children[0].height = height;\n        wrapper.children[1].width = width * 0.45;\n        wrapper.children[1].height = height * 0.45;\n    };\n    BpmnDiagrams.prototype.setSizeForBPMNDataObjects = function (event, wrapper, width, height) {\n        wrapper.children[0].width = width;\n        wrapper.children[0].height = height;\n    };\n    BpmnDiagrams.prototype.setSizeForBPMNActivity = function (activity, wrapper, width, height, node) {\n        //child node 1 - event node\n        wrapper.children[0].width = width;\n        wrapper.children[0].height = height;\n        wrapper.children[0].children[0].width = width;\n        wrapper.children[0].children[0].height = height;\n        if (activity.subProcess.type === 'Transaction') {\n            wrapper.children[0].children[1].width = Math.max(width - 6, 1);\n            wrapper.children[0].children[1].height = Math.max(height - 6, 1);\n            wrapper.children[0].children[2].width = width;\n            wrapper.children[0].children[2].height = height;\n        }\n        var taskNode = new _core_elements_diagram_element__WEBPACK_IMPORTED_MODULE_1__.DiagramElement();\n        var x;\n        var size = this.getSize(node, taskNode);\n        var childCount;\n        var iconSpace = 4;\n        if (activity.activity === 'Task') {\n            childCount = this.getTaskChildCount(node);\n        }\n        else {\n            childCount = this.getSubprocessChildCount(node);\n        }\n        var childSpace = childCount * 12;\n        var area = (width || size.width) / 2;\n        if (childCount === 1) {\n            x = area - 6;\n        }\n        else {\n            x = area - (childSpace / 2) - ((childCount - 1) * iconSpace) / 2;\n        }\n        for (var i = 0; i < wrapper.children[0].children.length; i++) {\n            if (wrapper.children[0].children[parseInt(i.toString(), 10)].visible &&\n                (wrapper.children[0].children[parseInt(i.toString(), 10)].id.indexOf('_loop') > -1 ||\n                    wrapper.children[0].children[parseInt(i.toString(), 10)].id.indexOf('_0_compensation') > -1 ||\n                    wrapper.children[0].children[parseInt(i.toString(), 10)].id.indexOf('_0_adhoc') > -1 ||\n                    wrapper.children[0].children[parseInt(i.toString(), 10)].id.indexOf('_0_collapsed') > -1)) {\n                wrapper.children[0].children[parseInt(i.toString(), 10)].margin.left = x;\n                x += wrapper.children[0].children[parseInt(i.toString(), 10)].actualSize.width + iconSpace;\n            }\n        }\n    };\n    BpmnDiagrams.prototype.updateDiagramContainerVisibility = function (element, visible) {\n        if (element instanceof _core_containers_container__WEBPACK_IMPORTED_MODULE_3__.Container) {\n            for (var i = 0; i < element.children.length; i++) {\n                this.updateDiagramContainerVisibility(element.children[parseInt(i.toString(), 10)], visible);\n            }\n        }\n        // 913810 : Start is as start event not rendered correctly for success, failure, cancel transaction subprocess events\n        if (element.visible && element.visible !== visible) {\n            element.visible = visible;\n        }\n    };\n    /**\n     *To destroy the ruler\n     *\n     * @returns {void} To destroy the ruler\n     */\n    BpmnDiagrams.prototype.destroy = function () {\n        /**\n         * Destroys the BpmnDiagrams module\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string}   Get module name.\n     */\n    BpmnDiagrams.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'Bpmn';\n    };\n    return BpmnDiagrams;\n}());\n\n/**\n * getBpmnShapePathData method \\\n *\n * @returns { string } getBpmnShapePathData method .\\\n * @param {string} shape - provide the shape value.\n *\n * @private\n */\nfunction getBpmnShapePathData(shape) {\n    return bpmnShapes[shape.toString()];\n}\n/**\n * getBpmnTriggerShapePathData method \\\n *\n * @returns { string } getBpmnTriggerShapePathData method .\\\n * @param {string} shape - provide the shape value.\n *\n * @private\n */\nfunction getBpmnTriggerShapePathData(shape) {\n    return bpmnTriggerShapes[shape.toString()];\n}\n/**\n * getBpmnGatewayShapePathData method \\\n *\n * @returns { string } getBpmnGatewayShapePathData method .\\\n * @param {string} shape - provide the shape value.\n *\n * @private\n */\nfunction getBpmnGatewayShapePathData(shape) {\n    return bpmnGatewayShapes[shape.toString()];\n}\n/**\n * getBpmnTaskShapePathData method \\\n *\n * @returns { string } getBpmnTaskShapePathData method .\\\n * @param {string} shape - provide the shape value.\n *\n * @private\n */\nfunction getBpmnTaskShapePathData(shape) {\n    return bpmnTaskShapes[shape.toString()];\n}\n/**\n * getBpmnLoopShapePathData method \\\n *\n * @returns { string } getBpmnLoopShapePathData method .\\\n * @param {string} shape - provide the shape value.\n *\n * @private\n */\nfunction getBpmnLoopShapePathData(shape) {\n    return bpmnLoopShapes[shape.toString()];\n}\nvar bpmnShapes = {\n    'Event': 'M80.5,12.5 C80.5,19.127417 62.59139,24.5 40.5,24.5 C18.40861,24.5 0.5,19.127417 0.5,12.5' +\n        'C0.5,5.872583 18.40861,0.5 40.5,0.5 C62.59139,0.5 80.5,5.872583 80.5,12.5 z',\n    'Message': 'M0,0L19.8,12.8L40,0L0,0L0,25.5L40,25.5L40,0z',\n    'DataSource': 'M 0 10.6 c 0 5.9 16.8 10.6 37.5 10.6 S 75 16.4 75 10.6 v 0 v 68.9 v -0.1 C 75 85.3 58.2 90 37.5 90 ' +\n        'S 0 85.3 0 79.4 l 0 0.1 V 56 V 40.6 L 0 10.6 C 0 4.7 16.8 0 37.5 0 S 75 4.7 75 10.6 S 58.2 21.2 37.5 21.2' +\n        'S 0 16.5 0 10.6 l 0 6.7 v -0.2 c 0 5.9 16.8 10.6 37.5 10.6 S 75 22.9 75 17.1 v 6.8 v -0.1 ' +\n        'c 0 5.9 -16.8 10.6 -37.5 10.6 S 0 29.6 0 23.8',\n    'SubProcess': 'M100,100 h200 a20,20 0 0 1 20,20 v200 a20,20 0 0 1 -20,20 h-200 ' +\n        'a20,20 0 0 1 -20,-20 v-200 a20,20 0 0 1 20,-20 z',\n    'collapsedShape': 'M 8.13789 15 H 0 V 0 H 8.13789 V 15 Z M 0.625991 13.75 H 7.51189 V 1.25 H 0.625991 V 13.75 Z ' +\n        'M 2.18095 7.03125 L 5.95631 7.03125 L 5.95631 7.46875 L 2.18095 7.46875 Z M 3.8342 3.73 ' +\n        'L 4.30369 3.73 L 4.30369 11.2687 L 3.8342 11.2687 Z'\n};\nvar bpmnTriggerShapes = {\n    // 'None': '',\n    'Message': 'M0,0 L19.8,12.8 L40,0 L0, 0 L0, 25.5 L40, 25.5 L 40, 0',\n    'Timer': 'M40,20c0,8.654-5.496,16.024-13.189,18.81' +\n        'C24.685,39.58,22.392,40,20,40C8.954,40,0,31.046,0,20S8.954,0,20,0S40,8.954,40,20z M20,0 L20,2.583 L20,5.283 M10.027,2.681' +\n        'L11.659,5.507 L12.669,7.257 M2.731,9.989 L6.014,11.885 L7.307,12.631 M0.067,19.967 L2.667,19.967 L5.35,19.967' +\n        'M2.748,29.939 L5.731,28.217 L7.323,27.298 M10.056,37.236 L11.292,35.095 L12.698,32.66 M20.033,39.9 L20.033,36.417 L20.033,34.617' +\n        'M30.006,37.219 L28.893,35.292 L27.364,32.643 M37.302,29.911 L34.608,28.355 L32.727,27.269' +\n        'M39.967,19.933 L37.417,19.933 L34.683,19.933 M37.286,9.961 L34.583,11.521 L32.71,12.602 M29.977,2.664 L28.653,4.957 L27.336,' +\n        '7.24 M22.104,8.5 L19.688,20 L24.75,20 L31.604,20 L24.75,20 L19.688,20z',\n    'Error': 'M 23.77 18.527 l -7.107 27.396 l 8.507 -17.247 L 36.94 40.073 l 6.394 -25.997 l -8.497 15.754 L 23.77 18.527 Z',\n    'Escalation': 'M 30.001 8.098 L 11.842 43.543 l 18.159 -18.882 l 18.162 18.882 L 30.001 8.098 Z ',\n    'Cancel': 'M 3.5 16 L 0 12.6 L 4.6 8 L 0 3.5 L 3.4 0 L 8 4.6 l 4.5 -4.5 L 16 3.5 L 11.5 8 l 4.5 4.5 l -3.4 3.5 L 8 11.4 L 3.5 16 Z',\n    'Compensation': 'M 25.7086 0 L 0 25 L 25.7086 50 V 26.3752 L 50 50 V 0 L 25.7086 23.6248 V 0 Z ',\n    'Conditional': 'M 0 0 H 16 V 16 H 0 z M 1.14 3.2 H 14.85 M 1.14 6.4 H 14.85 M 1.14 9.6 H 14.85 M 1.14 12.8 H 14.85',\n    'Link': 'M 32.014 19.258 v 5.992 H 9.373 v 9.504 h 22.641 v 5.988 L 50.622 30 L 32.014 19.258 Z',\n    'Signal': 'M 50 50 H 0 L 25.0025 0 L 50 50 Z',\n    'Terminate': 'M 25 50 C 11.21 50 0 38.79 0 25 C 0 11.21 11.21 0 25 0 C 38.78 0 50 11.21 50 25 C 50 38.79 38.78 50 25 50',\n    'Multiple': 'M 17.784 48.889 H 42.21 l 7.548 -23.23 L 29.997 11.303 L 10.236 25.658 L 17.784 48.889 Z',\n    'Parallel': 'M 27.276 49.986 h 5.58 v -17.15 h 17.146 V 27.17 h -17.15 l 0.004 -17.15 h -5.58 l -0.004 17.15 ' +\n        'H 9.994 v 5.666 h 17.278 L 27.276 49.986 Z'\n};\nvar bpmnGatewayShapes = {\n    'None': '',\n    //exclusive\n    'Exclusive': 'M 11.196 29.009 l 6.36 -9.712 l -5.764 -8.899 h 4.393 l 3.732 5.979 l 3.656 -5.979 h 4.354 l -5.789 9.039' +\n        'l 6.36 9.572 h -4.532 l -4.126 -6.437 l -4.139 6.437 H 11.196 Z',\n    //inclusive\n    'Inclusive': 'M 20.323 31.333 c -6.625 0 -12.015 -5.39 -12.015 -12.015 s 5.39 -12.015 12.015 -12.015 ' +\n        's 12.016 5.39 12.016 12.015 S 26.948 31.333 20.323 31.333 Z M 20.323 9.303 c -5.522 0 -10.015 4.493 -10.015 10.015 ' +\n        's 4.492 10.015 10.015 10.015 s 10.016 -4.493 10.016 -10.015 S 25.846 9.303 20.323 9.303 Z',\n    //parallel\n    'Parallel': 'M 18.394 29.542 v -8.833 H 9.626 v -3.691 h 8.768 V 8.251 h 3.734 v 8.767 h 8.768 v 3.691 h -8.768 v 8.833 H 18.394 Z',\n    //complex\n    'Complex': 'M29.198,19.063L23.089,19.063L27.794,14.358L26.38,12.944L21.223,18.101L21.223,10.443L19.223,10.443L19.223,17.976' +\n        'L14.022,12.776L12.608,14.19L17.48,19.063L10.365,19.063L10.365,21.063L18.261,21.063L12.392,26.932L13.806,28.346' +\n        'L19.223,22.929L19.223,30.225L21.223,30.225L21.223,22.805L25.925,27.507L27.339,26.093L22.309,21.063L29.198,21.063z',\n    //eventbased\n    'EventBased': 'M 20.322 29.874 c -5.444 0 -9.873 -4.43 -9.873 -9.874 s 4.429 -9.874 9.873 -9.874 s 9.874 4.429 9.874 9.874 ' +\n        'S 25.767 29.874 20.322 29.874 Z M 20.322 32.891 c -7.107 0 -12.89 -5.783 -12.89 -12.891 c 0 -7.107 5.782 -12.89 12.89 -12.89 ' +\n        'c 7.108 0 12.891 5.783 12.891 12.89 C 33.213 27.108 27.431 32.891 20.322 32.891 Z M 24.191 25.386 ' +\n        'h -7.984 l -2.469 -7.595 l 6.461 -4.693 l 6.461 4.693 L 24.191 25.386 Z',\n    //exclusive event based\n    'ExclusiveEventBased': 'M 30 15 C 30 23.28 23.28 30 15 30 S 0 23.28 0 15 S 6.72 0 15 0 S 30 6.72 30 15 z M 15 5 ' +\n        'L 5 12.5 L 8 22.5 H 22 L 25 12.5 z',\n    //parallel event based\n    'ParallelEventBased': 'M 35 17.5 C 35 27.16 27.16 35 17.5 35 S 0 27.16 0 17.5 S 7.84 0 17.5 0 S 35 7.84 35 17.5 z M 14.58 5.83 ' +\n        'V 14.58 H 5.83 V 20.42 H 14.58 V 29.17 H 20.42 V 20.42 H 29.17 V 14.58 H 20.42 V 5.83 z'\n};\nvar bpmnTaskShapes = {\n    'None': '',\n    'Service': 'M 32.699 20.187 v -4.005 h -3.32 c -0.125 -0.43 -0.292 -0.83 -0.488 -1.21 l 2.373 -2.375 ' +\n        'l -2.833 -2.83 l -2.333 2.333 c -0.44 -0.253 -0.9 -0.448 -1.387 -0.595 v -3.32 h -4.003 v 3.32 c -0.46 0.137 -0.89' +\n        '0.322 -1.3 0.537 l -2.285 -2.275 l -2.833 2.83 l 2.285 2.278 c -0.235 0.42 -0.41 0.847 -0.547 1.307 h -3.33 v 4.005 h 3.33 ' +\n        'c 0.148 0.488 0.343 0.955 0.588 1.395 l -2.325 2.325 l 2.822 2.832 l 2.373 -2.382 c 0.392 0.205 0.792 0.37 1.212 0.497 v 3.33 ' +\n        'h 4.003 v -3.33 c 0.46 -0.138 0.89 -0.323 1.3 -0.547 l 2.43 2.432 l 2.822 -2.832 l -2.42 -2.422 c 0.222 -0.41 0.4 -0.85 0.535' +\n        '-1.297 H 32.699 Z M 22.699 21.987 c -2.1 0 -3.803 -1.703 -3.803 -3.803 c 0 -2.1 1.703 -3.803 3.803 -3.803 c 2.1 0 3.803 ' +\n        '1.703 3.803 3.803 C 26.502 20.285 24.8 21.987 22.699 21.987 Z',\n    'Receive': 'M 12.217 12.134 v 13.334 h 20 V 12.134 H 12.217 Z M 30.44 13.007 l -8.223 5.35 l -8.223 -5.35 H 30.44 Z M 13.09' +\n        ' 24.594 V 13.459 l 9.127 5.94 l 9.127 -5.94 v 11.135 H 13.09 Z',\n    'Send': 'M0,1.2260086 L8.0000002,8.3380068 16,1.2260086 16,12.000007 0,12.000007 z M1.6300015,0 L14.371001,0 8.0000055,5.662 z',\n    'InstantiatingReceive': 'M 16.306 17.39 v 8.79 h 13.198 v -8.79 H 16.306 Z M 28.375 17.946 l -5.47 3.558 l -5.47 -3.558 ' +\n        'H 28.375 Z M 28.948 25.625 H 16.861 v -7.389 l 6.043 3.931 l 6.043 -3.931 V 25.625 Z M 22.905 11.785' +\n        'c -5.514 0 -9.999 4.486 -9.999 10 c 0 5.514 4.485 10 9.999 10 s 9.999 -4.486 9.999 -10 ' +\n        'C 32.904 16.272 28.419 11.785 22.905 11.785 Z M 22.905 31.239 c -5.212 0 -9.453 -4.241 -9.453 -9.454' +\n        'c 0 -5.212 4.241 -9.453 9.453 -9.453 s 9.452 4.241 9.452 9.453 C 32.357 26.998 28.117 31.239 22.905 31.239 Z',\n    'Manual': 'M9.21 612 L5.82 612 L1.07 612 a1.07317 1 -180 0 1 -1.07317 -1 L0 604.75 A3.42007 1.59344 -180 0 0 1.61 604 L2.6 604 L5.99 604 a0.721171 0.672 0 0 1 0.721171 0.672 a0.721171 0.672 0 0 1 -0.721171 0.672 L2.6 605.34 a0.48818 0.183302 -90 0 0 0.0837073 0.342385 L5.63 605.69 a0.721171 0.672 0 0 1 0.184585 -0.0223847 L10.28 605.66 a0.721171 0.672 0 0 1 0.721171 0.672 a0.721171 0.672 0 0 1 -0.721171 0.672 L5.82 607.01 a0.721171 0.672 0 0 1 -0.184585 -0.0223847 L5.63 607.35 a0.721171 0.672 0 0 1 0.184585 -0.0223847 L10.01 607.33 a0.721171 0.672 0 0 1 0.721171 0.672 a0.721171 0.672 0 0 1 -0.721171 0.672 L5.82 608.67 a0.721171 0.672 0 0 1 -0.184585 -0.0223847 L5.63 609.01 a0.721171 0.672 0 0 1 0.184585 -0.0223847 L9.47 608.99 a0.721171 0.672 0 0 1 0.721171 0.672 a0.721171 0.672 0 0 1 -0.721171 0.672 L5.82 610.34 a0.721171 0.672 0 0 1 -0.184585 -0.0223847 L5.63 610.68 a0.721171 0.672 0 0 1 0.184585 -0.0223847 L9.21 610.66 a0.721171 0.672 0 0 1 0.721171 0.672 a0.721171 0.672 0 0 1 -0.721171 0.672',\n    'BusinessRule': 'M 32.844 13.245 h -0.089 v 0 H 13.764 v -0.015 h -1.009 v 16.989 h 0.095 v 0.011 h 19.716 v -0.011 h 0.278 ' +\n        'V 13.245 Z M 31.844 14.229 v 4.185 h -18.08 v -4.185 H 31.844 Z M 18.168 25.306 v 3.938 h -4.404 v -3.938 H 18.168 Z ' +\n        'M 13.764 24.322 v -4.923 h 4.404 v 4.923 H 13.764 Z M 19.177 25.306 h 12.667 v 3.938 H 19.177 V 25.306 Z M 19.177 24.322' +\n        'v -4.923 h 12.667 v 4.923 H 19.177 Z',\n    'User': 'M8.6751149,13.75 L10.79009,18.703003 11.664047,18.696991 13.792084,13.75 13.824066,13.75 C18.177001,13.75 21.709022,' +\n        '17.259003 21.748998,21.60199 21.748998,21.649994 21.743993,21.700012 21.735021,21.747009 21.137981,24.774994 18.775997,' +\n        '27.144989 15.74904,27.75 L6.7491024,27.75 C3.7231224,27.144989 1.3601628,24.774994 0.76312089,21.747009 0.75414884,21.700012 0.74914402,' +\n        '21.649994 0.75012076,21.60199 0.78912175,17.259003 4.3221171,13.75 8.6751149,13.75 z M11.249014,0.75 C14.287014,0.75 16.749015,' +\n        '3.2119999 16.749015,6.25 16.749015,9.2880001 14.287014,11.75 11.249014,11.75 8.211015,11.75 5.7490147,9.2880001 5.7490147,6.25 5.7490147,3.2119999 8.211015,0.75 11.249014,0.75 z',\n    'Script': 'M22.3,80.4 A82.9529,77.0159,-180,0,0,10.3,46.7 A69.8467,64.8477,0,0,1,0,19.7 A27.6207,25.6439,0,0,1,12.1,0 L84.7,0 A37.4124,34.7347,-180,0,0,77.7,19.6 A82.8871,76.9547,' +\n        '-180,0,0,89.7,53.3 A69.8146,64.81790000000001,0,0,1,100,80.3 A27.603399999999997,25.6278,0,0,1,87.9,100 L15.3,100 A37.4265,34.7479,-180,0,0,22.3,80.4 M12.5,28.6 L67.3,28.6 M18.3,42.9 L72.1,42.9 M80.8,' +\n        '57.1 L26,57.1 M85.6,71.4 L32.6,71.4'\n};\nvar bpmnLoopShapes = {\n    'None': '',\n    'Standard': 'M 52.002 73.379 c -2.494 -2.536 -6.55 -2.534 -9.043 0 c -1.208 1.228 -1.874 2.861 -1.874 4.598 ' +\n        'c 0 1.225 0.337 2.395 0.957 3.411 l -1.167 1.186 l 2.071 0.458 l 2.071 0.458 l -0.45 -2.106 l -0.45 -2.106 l -1.292 1.314' +\n        'c -1.119 -2.065 -0.842 -4.709 0.877 -6.458 c 2.084 -2.119 5.475 -2.117 7.557 0 c 2.083 2.119 2.083 5.565 0 7.685' +\n        'c -0.976 0.992 -2.272 1.557 -3.65 1.59 l 0.025 1.068 c 1.65 -0.041 3.2 -0.716 4.368 -1.903 ' +\n        'c 1.208 -1.228 1.874 -2.861 1.874 -4.597 C 53.875 76.24 53.209 74.607 52.002 73.379 Z',\n    'ParallelMultiInstance': 'M 51.5,69.5 L52.5,69.5 L52.5,84.5 L51.5 84.5 Z M 46.5,69.5 L47.5,69.5 L47.5,84.5 L46.5 84.5 Z' +\n        ' M 41.5,69.5 L42.5,69.5 L42.5,84.5 L41.5 84.5 Z  ',\n    'SequenceMultiInstance': 'M 40.375,71.5 L 55.375,71.5 L 55.375,72.5 L 40.375,72.5 Z M 40.375,76.5 L 55.375,76.5 ' +\n        'L 55.375,77.5 L 40.375,77.5 Z M 40.375,76.5 L 55.375,76.5 L 55.375,77.5 L 40.375,77.5 Z M 40.375,81.5 L 55.375,81.5' +\n        'L 55.375,82.5 L 40.375,82.5 Z'\n};\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-diagrams/src/diagram/objects/bpmn.js?");

/***/ })

}]);