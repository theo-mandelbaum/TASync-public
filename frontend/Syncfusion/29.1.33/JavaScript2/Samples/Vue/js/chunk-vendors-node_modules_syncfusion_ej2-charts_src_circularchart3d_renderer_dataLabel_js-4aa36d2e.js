"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_circularchart3d_renderer_dataLabel_js-4aa36d2e"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/dataLabel.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/dataLabel.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircularChart3DConnector: () => (/* binding */ CircularChart3DConnector),\n/* harmony export */   CircularChart3DDataLabelFont: () => (/* binding */ CircularChart3DDataLabelFont),\n/* harmony export */   CircularChart3DDataLabelSettings: () => (/* binding */ CircularChart3DDataLabelSettings),\n/* harmony export */   CircularChartDataLabel3D: () => (/* binding */ CircularChartDataLabel3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart data label.\n */\n\n\n\n\n\n/**\n * Configures the fonts in the circular 3D data label.\n */\nvar CircularChart3DDataLabelFont = /** @class */ (function (_super) {\n    __extends(CircularChart3DDataLabelFont, _super);\n    function CircularChart3DDataLabelFont() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], CircularChart3DDataLabelFont.prototype, \"fontStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('16px')\n    ], CircularChart3DDataLabelFont.prototype, \"size\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], CircularChart3DDataLabelFont.prototype, \"fontWeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularChart3DDataLabelFont.prototype, \"color\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Segoe UI')\n    ], CircularChart3DDataLabelFont.prototype, \"fontFamily\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], CircularChart3DDataLabelFont.prototype, \"opacity\", void 0);\n    return CircularChart3DDataLabelFont;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Defines the appearance of the connector line for the circular 3D chart.\n */\nvar CircularChart3DConnector = /** @class */ (function (_super) {\n    __extends(CircularChart3DConnector, _super);\n    function CircularChart3DConnector() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DConnector.prototype, \"color\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], CircularChart3DConnector.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DConnector.prototype, \"length\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularChart3DConnector.prototype, \"dashArray\", void 0);\n    return CircularChart3DConnector;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Configures the data label settings for circular 3D chart.\n */\nvar CircularChart3DDataLabelSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DDataLabelSettings, _super);\n    function CircularChart3DDataLabelSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3DDataLabelSettings.prototype, \"visible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DDataLabelSettings.prototype, \"name\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('transparent')\n    ], CircularChart3DDataLabelSettings.prototype, \"fill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Inside')\n    ], CircularChart3DDataLabelSettings.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], CircularChart3DDataLabelSettings.prototype, \"angle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3DDataLabelSettings.prototype, \"enableRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ width: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], CircularChart3DDataLabelSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: '400', color: null }, CircularChart3DDataLabelFont)\n    ], CircularChart3DDataLabelSettings.prototype, \"font\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, CircularChart3DConnector)\n    ], CircularChart3DDataLabelSettings.prototype, \"connectorStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3DDataLabelSettings.prototype, \"template\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularChart3DDataLabelSettings.prototype, \"format\", void 0);\n    return CircularChart3DDataLabelSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The 'CircularChartDataLabel3D' module used to render dataLabel in circular 3D charts.\n */\nvar CircularChartDataLabel3D = /** @class */ (function (_super) {\n    __extends(CircularChartDataLabel3D, _super);\n    function CircularChartDataLabel3D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Renders data labels for a circular 3D series on the given chart.\n     *\n     * @param {CircularChart3DSeries} series - The circular 3D series for which data labels are to be rendered.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.renderDataLabel = function (series, chart) {\n        var templateId = chart.element.id + '-series-' + series.index + '-data-label-collections';\n        series.labelBound = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(series.labelBound) ? new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Rect(Infinity, Infinity, -Infinity, -Infinity) : series.labelBound;\n        series.dataLabelElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { id: templateId });\n        for (var i = 0; i < series.points.length; i++) {\n            var point = series.points[i];\n            var pointText = this.getDatalabelText(series.dataLabel.format, chart, point.text ? point.text : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(point.y) ? '' : point.y.toString());\n            var border = { width: series.dataLabel.border.width, color: series.dataLabel.border.color,\n                dashArray: series.dataLabel.border.dashArray };\n            var argsFont = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('properties', series.dataLabel.font), null, true));\n            var argsData = {\n                cancel: false, name: _common_model_constants__WEBPACK_IMPORTED_MODULE_3__.textRender, series: series, point: point,\n                text: pointText, border: border, color: series.dataLabel.fill, template: series.dataLabel.template, font: argsFont\n            };\n            chart.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_3__.textRender, argsData);\n            point.argsData = argsData;\n            if (point.visible && !argsData.cancel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(point.y)) {\n                this.draw3DDataLabel(series, point.index, point, chart);\n            }\n        }\n        if (series.dataLabel.template) {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.appendChildElement)(false, document.getElementById(chart.element.id + '_Secondary_Element'), series.dataLabelElement, chart.redraw, false, 'x', 'y', null, '', false, false, null);\n        }\n    };\n    /**\n     * Creates a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element to which the data label template is attached.\n     * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style settings for data labels.\n     * @param {CircularChart3DPoints} point - The data point for which the data label template is created.\n     * @param {CircularChart3DTextRenderEventArgs} data - The text render event arguments.\n     * @param {number} labelIndex - The index of the data label.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {CircularChart3DLocation} location - The location values for the data label.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.createDataLabelTemplate = function (parentElement, series, dataLabel, point, data, labelIndex, redraw, location, chart) {\n        var childElement = this.createTemplate((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            id: chart.element.id + '-series-' + series.index + '-data-label-' + labelIndex,\n            styles: 'position: absolute;background-color:' + data.color + ';' +\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.getFontStyle)(dataLabel.font, chart.themeStyle.datalabelFont) + ';border:' + data.border.width + 'px solid ' + data.border.color + ';'\n        }), data.template, chart, point, series, chart.element.id + '-data-label-');\n        this.calculateTemplateLabelSize(parentElement, childElement, point, series, dataLabel, redraw, location);\n    };\n    /**\n     * Calculates the size of a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element containing the data label template.\n     * @param {HTMLElement} childElement - The child HTML element representing the data label template.\n     * @param {CircularChart3DPoints} point - The data point for which the data label template size is calculated.\n     * @param {CircularChart3DSeries} series - The circular 3D series to which the data point belongs.\n     * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style for data labels.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {CircularChart3DLocation} location - The location values for the data label.\n     * @param {boolean} isReactCallback - Indicates whether the callback is associated with React.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.calculateTemplateLabelSize = function (parentElement, childElement, point, series, dataLabel, redraw, location, isReactCallback) {\n        var elementRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.measureElementRect)(childElement, redraw, isReactCallback);\n        childElement.style.left = (location.x - (elementRect.width / 2)) + 'px';\n        childElement.style.top = (location.y - elementRect.height) + 'px';\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.appendChildElement)(false, parentElement, childElement, redraw, true, 'left', 'top');\n    };\n    /**\n     * Creates a template element for rendering data labels associated with a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} childElement - The child HTML element to contain the template content.\n     * @param {string | Function} content - The content or function for the data label template.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DPoints} point - The data point for which the template is created (optional).\n     * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs (optional).\n     * @param {string} dataLabelId - The ID for the data label element (optional).\n     * @returns {HTMLElement} - The created template element.\n     */\n    CircularChartDataLabel3D.prototype.createTemplate = function (childElement, content, chart, point, series, dataLabelId) {\n        var templateFn = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.getTemplateFunction)(content);\n        var templateElement;\n        try {\n            var tempObject = { chart: chart, series: series, point: point };\n            var templateId = dataLabelId + '-template';\n            var elementData = templateFn ? templateFn(tempObject, chart, templateId, dataLabelId) : [];\n            if (elementData.length) {\n                templateElement = Array.prototype.slice.call(elementData);\n                var len = templateElement.length;\n                for (var i = 0; i < len; i++) {\n                    childElement.appendChild(templateElement[i]);\n                }\n            }\n            var reactCallback = void 0;\n            if (chart.isReact) {\n                chart.renderReactTemplates(reactCallback);\n            }\n        }\n        catch (e) {\n            return childElement;\n        }\n        return childElement;\n    };\n    /**\n     * Draws a 3D data label for a circular 3D series.\n     * This method is responsible for drawing a 3D data label for a circular 3D series.\n     *\n     * @param {CircularChart3DSeries} series - The CircularChart3DSeries to which the data label belongs.\n     * @param {number} pointIndex - The index of the data label point in the series.\n     * @param  {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point of the data label.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.draw3DDataLabel = function (series, pointIndex, point, chart) {\n        var connectorHeight = series.dataLabel.connectorStyle.length ?\n            parseFloat(series.dataLabel.connectorStyle.length) : series.dataLabel.connectorStyle.length;\n        var radius;\n        var pointX;\n        var pointY;\n        var degree;\n        var commonEventArgs = { data: null };\n        var location = { x: 0, y: 0 };\n        var seriesIndex = series.index;\n        var center = point.symbolLocation.center;\n        var dradius = point.symbolLocation.radius * series.coefficient;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(connectorHeight)) {\n            connectorHeight = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont).height;\n        }\n        if (series != null && series.dataLabel.position !== 'Inside') {\n            radius = point.symbolLocation.radius + connectorHeight;\n        }\n        else if (series != null) {\n            radius = dradius + (point.symbolLocation.radius - dradius) / 2;\n        }\n        pointX = location.x = center.x + (parseFloat(point.argsData.font.size) / 3) + radius * Math.cos(point.symbolLocation.angle);\n        pointY = location.y = center.y + (parseFloat(point.argsData.font.size) / 3) + radius * Math.sin(point.symbolLocation.angle);\n        commonEventArgs.data = {\n            text: point.argsData.text, location: { x: pointX, y: pointY },\n            series: series, pointIndex: pointIndex, seriesIndex: seriesIndex\n        };\n        commonEventArgs.data.Text = commonEventArgs.data.text;\n        var size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont);\n        pointX = location.x = commonEventArgs.data.location.x;\n        pointY = location.y = commonEventArgs.data.location.y;\n        var tag = (!series.dataLabel.template) ? 'text' : 'template';\n        var saturationColor = this.getSaturatedColor(point, point.argsData.color, chart);\n        var element = { width: size.width, height: size.height, fill: saturationColor, label: commonEventArgs.data, textAnchor: 'middle', tag: tag, font: point.argsData.font, angle: 0, id: chart.element.id + '-svg-data-label-text-' + pointIndex, child: chart.groupElement };\n        if (chart.circularChartLegend3DModule && chart.legendSettings.visible && point.visible && series.dataLabel.position === 'Outside') {\n            var rect = chart.circularChartLegend3DModule.legendBounds;\n            var legendpadding = chart.legendSettings.border.width / 2;\n            rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Rect(rect.x - legendpadding, rect.y - legendpadding, rect.width +\n                (2 * legendpadding), rect.height + (2 * legendpadding));\n            var labelRegion = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.Rect(element.label.location.x + (size.width / 2) + 20, element.label.location.y + 2.5, element.width, element.height);\n            if ((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.isOverlap)(labelRegion, rect)) {\n                if (chart.circularChartLegend3DModule.position === 'Right') {\n                    element.width = rect.x - labelRegion.x;\n                }\n                else if (chart.circularChartLegend3DModule.position === 'Left') {\n                    element.width = labelRegion.x - (rect.x + rect.width);\n                    if (element.width < 0) {\n                        element.width += labelRegion.width;\n                        element.label.location.x = rect.x + rect.width - (size.width / 2) + 20;\n                    }\n                }\n                if (labelRegion && element.width < labelRegion.width) {\n                    element.label.text = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.textTrim)(element.width, element.label.text, series.dataLabel.font, chart.enableRtl, chart.themeStyle.datalabelFont);\n                }\n                if (element.label.text.length === 3 && element.label.text.indexOf('...') > -1) {\n                    return;\n                }\n            }\n        }\n        var connectorPoints;\n        if (series.dataLabel.position !== 'Inside') {\n            connectorPoints = this.updateConnectorLine(point, pointIndex, series, connectorHeight, chart);\n        }\n        if (series.dataLabel.template && series.dataLabel.position !== 'Inside') {\n            var childElement = this.createTemplate((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n                id: chart.element.id + '-series-data-label-' + 0,\n                styles: 'position: absolute;background-color:' + point.argsData.color + ';' +\n                    (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.getFontStyle)(point.argsData.font, chart.themeStyle.datalabelFont) + ';border:' + point.argsData.border.width + 'px solid ' + point.argsData.border.color + ';'\n            }), point.argsData.template, chart, point, series, chart.element.id + '-data-label-');\n            size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_2__.measureText)(childElement.textContent, series.dataLabel.font, chart.themeStyle.datalabelFont);\n        }\n        if (chart.circularChartLegend3DModule && chart.legendSettings.visible && (series.dataLabel.position === 'Outside')) {\n            chart.visibleSeries[0].findMaxBounds(chart.visibleSeries[0].labelBound, { x: pointX, y: pointY, width: size.width, height: size.height });\n        }\n        var padding = 0;\n        var heightPadding = 0;\n        var textAngle = point.symbolLocation.angle;\n        if (series.dataLabel.position !== 'Inside') {\n            if ((textAngle > 1.5 && textAngle < 1.8) || (textAngle > 1.3 && textAngle < 1.5) ||\n                (textAngle > 4.5 && textAngle < 4.8) || (textAngle > 4.3 && textAngle < 4.5)) {\n                location.x = connectorPoints.x;\n                location.y = connectorPoints.y;\n                textAngle = connectorPoints.angle;\n            }\n            if (textAngle < (Math.PI / 2) || textAngle >= (Math.PI / 2) + Math.PI) {\n                padding = (size.width / 2) + 20;\n                heightPadding = 5 / 2;\n            }\n            else {\n                padding = -((size.width / 2) + (point.argsData.color !== 'transparent' || point.argsData.border.color ? 25 : 20));\n                heightPadding = 5 / 2;\n            }\n        }\n        if (!point.argsData.template && commonEventArgs.data.text !== '') {\n            var element_1 = { tag: 'dataLabel', series: series, point: point, pointIndex: pointIndex, id: chart.element.id + '-svg-' + seriesIndex + '-data-label-' + pointIndex, child: chart.groupElement };\n            var angle = void 0;\n            var transform = '';\n            if (series.dataLabel.enableRotation) {\n                angle = degree = series.dataLabel.angle;\n                if (angle === 0) {\n                    var toDegrees = function (angle) { return angle * (180 / Math.PI); };\n                    var midAngle = toDegrees(point.symbolLocation.angle);\n                    if (series.dataLabel.position === 'Outside') {\n                        degree = 0;\n                    }\n                    else if (midAngle >= 90 && midAngle <= 260) {\n                        degree = midAngle + 180;\n                        location.x = location.x - (parseFloat(point.argsData.font.size) / 2);\n                    }\n                    else {\n                        degree = midAngle;\n                    }\n                }\n                else {\n                    degree = (angle > 360) ? angle - 360 : (angle < -360) ? angle + 360 : angle;\n                }\n                transform = 'rotate(' + degree + ',' + (location.x) + ',' + (location.y) + ')';\n            }\n            element_1.transform = transform;\n            var borderElement = chart.polygon.createTextElement(chart.vector.vector3D(pointX + padding, pointY + heightPadding, (point.symbolLocation.z) ?\n                point.symbolLocation.z : 0), element_1, 0, -size.height);\n            chart.circular3DPolygon.push(borderElement);\n        }\n        element.angle = series.dataLabel.enableRotation ? series.dataLabel.angle !== 0 ? series.dataLabel.angle : degree : 0;\n        var polygon = chart.polygon.createTextElement(chart.vector.vector3D(location.x + padding, location.y + heightPadding, -1), element, 0, -size.height);\n        chart.circular3DPolygon.push(polygon);\n    };\n    /**\n     * To find saturated color for datalabel.\n     *\n     * @param {CircularChart3DPoints} point - The point to get the color saturation.\n     * @param {string} color - The color to be saturated.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {string} - The saturated color computed for the data label.\n     */\n    CircularChartDataLabel3D.prototype.getSaturatedColor = function (point, color, chart) {\n        var saturatedColor;\n        saturatedColor = color === 'transparent' ? this.getLabelBackground(point, chart) : color;\n        saturatedColor = (saturatedColor === 'transparent') ? ((chart.theme.indexOf('Dark') > -1 || chart.theme.indexOf('HighContrast') > -1) ? 'black' : 'white') : saturatedColor;\n        var rgbValue = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.convertHexToColor)((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_4__.colorNameToHex)(saturatedColor));\n        var contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);\n        return chart.theme === 'Bootstrap5' ? '#212529' : chart.theme === 'Bootstrap5Dark' ? '#DEE2E6' : contrast >= 128 ? chart.theme.indexOf('Tailwind3') > -1 ? '#4B5563' : 'black' : chart.theme.indexOf('Tailwind3') > -1 ? '#D1D5DB' : 'white';\n    };\n    /**\n     * To find background color for the datalabel.\n     *\n     * @param {CircularChart3DPoints} point - The point to get the color saturation.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {string} - The background color computed for the data label.\n     */\n    CircularChartDataLabel3D.prototype.getLabelBackground = function (point, chart) {\n        return point.argsData.series.dataLabel.position === 'Outside' ?\n            chart.background || chart.themeStyle.background : !point.y ? chart.theme.indexOf('dark') ? 'white' : 'black' : point.color;\n    };\n    /**\n     * Gets the data label text based on a specified format, chart configuration, and input label text.\n     *\n     * @param {string} labelFormat - The format string for the data label.\n     * @param {CircularChart3D} chart - The Circular 3D chart instance.\n     * @param {string} labelText - The original label text to be formatted.\n     * @returns {string} - The formatted data label text.\n     */\n    CircularChartDataLabel3D.prototype.getDatalabelText = function (labelFormat, chart, labelText) {\n        if (Number(labelText)) {\n            var customLabelFormat = labelFormat.match('{value}') !== null;\n            var format = chart.intl.getNumberFormat({\n                format: customLabelFormat ? '' : labelFormat,\n                useGrouping: chart.useGroupingSeparator\n            });\n            labelText = customLabelFormat ? labelFormat.replace('{value}', format(parseFloat(labelText))) : format(parseFloat(labelText));\n        }\n        return labelText;\n    };\n    /**\n     * Updates the connector line for a 3D point in a circular 3D series.\n     *\n     * @param {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point.\n     * @param {number} pointIndex - The index of the point in the series.\n     * @param {CircularChart3DSeries} series - The instance of the circular 3D series.\n     * @param {number} connectorHeight - The height of the connector line.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.updateConnectorLine = function (point, pointIndex, series, connectorHeight, chart) {\n        var drawPoints = [];\n        var symbolLocation = point.symbolLocation;\n        var x = symbolLocation.center.x + Math.cos(symbolLocation.angle) * symbolLocation.radius;\n        var y = symbolLocation.center.y + Math.sin(symbolLocation.angle) * symbolLocation.radius;\n        drawPoints.push({ x: x, y: y });\n        var labelRadiusFromOrigin = symbolLocation.radius + connectorHeight;\n        var angle = symbolLocation.angle;\n        x = symbolLocation.center.x + Math.cos(angle) * labelRadiusFromOrigin;\n        y = symbolLocation.center.y + Math.sin(angle) * labelRadiusFromOrigin;\n        drawPoints.push({ x: x, y: y });\n        var padding;\n        if (angle < (Math.PI / 2) || angle >= (Math.PI / 2) + Math.PI) {\n            padding = 10;\n        }\n        else {\n            padding = -10;\n        }\n        drawPoints.push({ x: x + padding, y: y });\n        this.drawLineSegment(drawPoints, pointIndex, series, chart);\n        return ({ x: x, y: y, angle: angle });\n    };\n    /**\n     * Draws a line segment based on the provided points in 3D space for the circular 3D series.\n     *\n     * @param {CircularChart3DLocation[]} drawpoints - An array of CircularChart3DLocation representing the points in 3D space.\n     * @param {number} pointIndex - The index of the point in the series.\n     * @param {CircularChart3DSeries} series - The instance of the circular 3D series to which the point belongs.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.drawLineSegment = function (drawpoints, pointIndex, series, chart) {\n        var vectorPoints = [];\n        for (var i = 0; i < drawpoints.length; i++) {\n            vectorPoints.push(chart.vector.vector3D(drawpoints[i].x, drawpoints[i].y, 0));\n        }\n        var seriesIndex = series.index;\n        var color = series.points[pointIndex].color;\n        var stroke = series.dataLabel.connectorStyle.color ? series.dataLabel.connectorStyle.color : color;\n        var line = {\n            width: series.dataLabel.connectorStyle.width,\n            stroke: stroke,\n            child: chart.groupElement,\n            tag: 'polyline',\n            dashArray: series.dataLabel.connectorStyle.dashArray,\n            id: chart.element.id + '-datalabel-series-' + seriesIndex + '-connector-' + pointIndex\n        };\n        var ploygon = chart.polygon.createPolyline(vectorPoints, line);\n        chart.circular3DPolygon.push(ploygon);\n    };\n    /**\n     * Gets the module name for the circular 3D data label.\n     *\n     * @returns {string} - The module name, which is 'CircularChartDataLabel3D'.\n     */\n    CircularChartDataLabel3D.prototype.getModuleName = function () {\n        return 'CircularChartDataLabel3D';\n    };\n    /**\n     * Destroys the circular 3D chart data label.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    return CircularChartDataLabel3D;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/dataLabel.js?");

/***/ })

}]);