"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_workbook_base_workbook_js-de461c6c"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/workbook.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/workbook.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Workbook: () => (/* binding */ Workbook)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _sheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sheet */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/sheet.js\");\n/* harmony import */ var _common_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/module */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/module.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n/* harmony import */ var _common_event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/event */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/event.js\");\n/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cell */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/cell.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _integrations_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../integrations/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/index.js\");\n/* harmony import */ var _integrations_number_format__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../integrations/number-format */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/integrations/number-format.js\");\n/* harmony import */ var _actions_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../actions/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/actions/index.js\");\n/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../services/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/services/index.js\");\n/* harmony import */ var _spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../spreadsheet/common/event */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/event.js\");\n/* harmony import */ var _actions_conditional_formatting__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../actions/conditional-formatting */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/actions/conditional-formatting.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the Workbook.\n */\nvar Workbook = /** @class */ (function (_super) {\n    __extends(Workbook, _super);\n    /**\n     * Constructor for initializing the library.\n     *\n     * @param {WorkbookModel} options - Configures Workbook model.\n     */\n    function Workbook(options) {\n        var _this = _super.call(this, options) || this;\n        /** @hidden */\n        _this.isEdit = false;\n        /**\n         * To generate sheet name based on sheet count.\n         *\n         * @hidden\n         */\n        _this.sheetNameCount = 1;\n        /**\n         * @hidden\n         */\n        _this.dataValidationRange = '';\n        /**\n         * @hidden\n         */\n        _this.isOpen = false;\n        /**\n         * @hidden\n         */\n        _this.chartColl = [];\n        /**\n         * @hidden\n         */\n        _this.isPrintingProcessing = false;\n        /**\n         * @hidden\n         */\n        _this.currentPrintSheetIndex = 0;\n        /** @hidden */\n        _this.customFormulaCollection = new Map();\n        Workbook_1.Inject(_index__WEBPACK_IMPORTED_MODULE_7__.DataBind, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookSave, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookOpen, _integrations_number_format__WEBPACK_IMPORTED_MODULE_9__.WorkbookNumberFormat, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookCellFormat, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookEdit, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookFormula, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookSort, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookHyperlink, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookFilter, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookInsert, _index__WEBPACK_IMPORTED_MODULE_7__.WorkbookFindAndReplace, _index__WEBPACK_IMPORTED_MODULE_7__.WorkbookDataValidation, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookProtectSheet, _index__WEBPACK_IMPORTED_MODULE_7__.WorkbookMerge, _actions_conditional_formatting__WEBPACK_IMPORTED_MODULE_13__.WorkbookConditionalFormat, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookImage, _integrations_index__WEBPACK_IMPORTED_MODULE_8__.WorkbookChart, _actions_index__WEBPACK_IMPORTED_MODULE_10__.WorkbookAutoFill);\n        _this.commonCellStyle = {};\n        if (options && options.cellStyle) {\n            _this.commonCellStyle = options.cellStyle;\n        }\n        if (_this.getModuleName() === 'workbook') {\n            _this.serviceLocator = new _services_index__WEBPACK_IMPORTED_MODULE_11__.ServiceLocator;\n            _this.initWorkbookServices();\n            _this.dataBind();\n            _this.initEmptySheet();\n        }\n        return _this;\n    }\n    Workbook_1 = Workbook;\n    /**\n     * For internal use only.\n     *\n     * @returns {void} - For internal use only.\n     * @hidden\n     */\n    Workbook.prototype.preRender = function () {\n        if (!Object.keys(this.commonCellStyle).length) {\n            this.commonCellStyle = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.skipDefaultValue)(this.cellStyle, true);\n        }\n        if (this.getModuleName() === 'spreadsheet' && !this.refreshing) {\n            this.initEmptySheet();\n        }\n    };\n    Workbook.prototype.initWorkbookServices = function () {\n        this.serviceLocator.register(_common_index__WEBPACK_IMPORTED_MODULE_4__.workbookLocale, new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), _common_index__WEBPACK_IMPORTED_MODULE_4__.localeData, this.locale));\n    };\n    /**\n     * For internal use only.\n     *\n     * @returns {void} - For internal use only.\n     * @hidden\n     */\n    Workbook.prototype.render = function () {\n        /** code snippets */\n    };\n    /**\n     * To provide the array of modules needed for workbook.\n     *\n     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for workbook.\n     * @hidden\n     */\n    Workbook.prototype.requiredModules = function () {\n        return (0,_common_module__WEBPACK_IMPORTED_MODULE_2__.getWorkbookRequiredModules)(this);\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Get the properties to be maintained in the persisted state.\n     * @hidden\n     */\n    Workbook.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     * Applies the style (font family, font weight, background color, etc...) to the specified range of cells.\n     *\n     * {% codeBlock src='spreadsheet/cellFormat/index.md' %}{% endcodeBlock %}\n     *\n     * @param {CellStyleModel} style - Specifies the cell style.\n     * @param {string} range - Specifies the address for the range of cells.\n     * @returns {void} - Applies the style (font family, font weight, background color, etc...) to the specified range of cells.\n     */\n    Workbook.prototype.cellFormat = function (style, range) {\n        var sheet = this.getActiveSheet();\n        if (sheet && (!sheet.isProtected || sheet.protectSettings.formatCells)) {\n            range = range || sheet.selectedRange;\n            this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setCellFormat, { style: style, range: range, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false });\n        }\n    };\n    /**\n     * Applies cell lock to the specified range of cells.\n     *\n     * {% codeBlock src='spreadsheet/lockCells/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} range - Specifies the address for the range of cells.\n     * @param {boolean} isLocked -Specifies the cell is locked or not.\n     * @returns {void} - To Applies cell lock to the specified range of cells.\n     */\n    Workbook.prototype.lockCells = function (range, isLocked) {\n        var sheet = this.getActiveSheet();\n        range = range || sheet.selectedRange;\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setLockCells, { range: range, isLocked: isLocked, triggerEvent: true });\n    };\n    /**\n     * @hidden\n     * @param {Workbook} cssProps - Specifies the cssProps.\n     * @param {number[]} indexes - Specifies the indexes.\n     * @returns {CellStyleModel} - To get Cell Style Value.\n     */\n    Workbook.prototype.getCellStyleValue = function (cssProps, indexes) {\n        var _this = this;\n        var cell = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.getCell)(indexes[0], indexes[1], this.getActiveSheet());\n        var style = {};\n        cssProps.forEach(function (cssProp) {\n            style[\"\" + cssProp] = _this.cellStyle[\"\" + cssProp];\n            if (cell && cell.style && cell.style[\"\" + cssProp]) {\n                style[\"\" + cssProp] = cell.style[\"\" + cssProp];\n            }\n        });\n        return style;\n    };\n    /**\n     * Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.\n     *\n     * {% codeBlock src='spreadsheet/numberFormat/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} format - Specifies the number format code.\n     * @param {string} range - Specifies the address of the range of cells.\n     * @returns {void} - Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.\n     */\n    Workbook.prototype.numberFormat = function (format, range) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.applyNumberFormatting, { format: format, range: range });\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.localizedFormatAction, { action: 'addToCustomFormats', format: format });\n    };\n    /**\n     * Used to create new sheet.\n     *\n     * @hidden\n     * @param {number} index - Specifies the index.\n     * @param {SheetModel[]} sheets - Specifies the sheets.\n     * @returns {void} - To create new sheet.\n     */\n    Workbook.prototype.createSheet = function (index, sheets) {\n        if (index === void 0) { index = this.sheets.length; }\n        if (sheets === void 0) { sheets = [{}]; }\n        var _a;\n        (_a = this.sheets).splice.apply(_a, [index, 0].concat(sheets));\n        (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.initSheet)(this, sheets);\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.sheetCreated, { sheetIndex: index || 0, sheets: sheets });\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, {\n            action: 'registerSheet', sheetIndex: index || 0, sheetCount: index + sheets.length\n        });\n    };\n    /**\n     * Used to remove sheet.\n     *\n     * @hidden\n     * @param  {number} idx - Specifies the index.\n     * @returns {void} - To remove sheet\n     */\n    Workbook.prototype.removeSheet = function (idx) {\n        this.sheets.splice(idx, 1);\n    };\n    /**\n     * Destroys the Workbook library.\n     *\n     * @returns {void} - To destroy sheet\n     */\n    Workbook.prototype.destroy = function () {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookDestroyed, null);\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {WorkbookModel} newProp - To set the properties\n     * @param {WorkbookModel} oldProp - To get the properties\n     * @returns {void} - property value changed\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Workbook.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'cellStyle':\n                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(this.commonCellStyle, newProp.cellStyle);\n                    break;\n                case 'sheets':\n                    if (newProp.sheets === this.sheets) {\n                        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, { action: 'unRegisterSheet', propertyChange: true });\n                        this.sheetNameCount = 1;\n                        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.sheetsDestroyed, {});\n                        (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.initSheet)(this);\n                        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.sheetCreated, null);\n                        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, { action: 'registerSheet' });\n                    }\n                    else {\n                        (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.initSheet)(this);\n                    }\n                    break;\n                case 'listSeparator':\n                    this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, { action: 'setArgumentSeparator' });\n                    break;\n            }\n        }\n    };\n    /**\n     * Not applicable for workbook.\n     *\n     * @hidden\n     * @param {string | HTMLElement} selector - Specifies the selector.\n     * @returns {void} - To append the element.\n     */\n    Workbook.prototype.appendTo = function (selector) {\n        _super.prototype.appendTo.call(this, selector);\n    };\n    /**\n     * Used to hide/show the rows in spreadsheet.\n     *\n     * @param {number} startIndex - Specifies the start row index.\n     * @param {number} endIndex - Specifies the end row index.\n     * @param {boolean} hide - To hide/show the rows in specified range.\n     * @returns {void} - To hide/show the rows in spreadsheet.\n     */\n    Workbook.prototype.hideRow = function (startIndex, endIndex, hide) {\n        if (endIndex === void 0) { endIndex = startIndex; }\n        if (hide === void 0) { hide = true; }\n        var sheet = this.getActiveSheet();\n        for (var i = startIndex; i <= endIndex; i++) {\n            (0,_index__WEBPACK_IMPORTED_MODULE_7__.setRow)(sheet, i, { hidden: hide });\n        }\n    };\n    /**\n     * Used to hide/show the columns in spreadsheet.\n     *\n     * @param {number} startIndex - Specifies the start column index.\n     * @param {number} endIndex - Specifies the end column index.\n     * @param {boolean} hide - Set `true` / `false` to hide / show the columns.\n     * @returns {void} - To hide/show the columns in spreadsheet.\n     */\n    Workbook.prototype.hideColumn = function (startIndex, endIndex, hide) {\n        if (endIndex === void 0) { endIndex = startIndex; }\n        if (hide === void 0) { hide = true; }\n        var sheet = this.getActiveSheet();\n        for (var i = startIndex; i <= endIndex; i++) {\n            (0,_index__WEBPACK_IMPORTED_MODULE_7__.setColumn)(sheet, i, { hidden: hide });\n        }\n    };\n    /**\n     * Sets the border to specified range of cells.\n     *\n     * {% codeBlock src='spreadsheet/setBorder/index.md' %}{% endcodeBlock %}\n     *\n     * @param {CellStyleModel} style - Specifies the style property which contains border value.\n     * @param {string} range - Specifies the range of cell reference. If not specified, it will considered the active cell reference.\n     * @param {BorderType} type - Specifies the range of cell reference. If not specified, it will considered the active cell reference.\n     * @param {boolean} isUndoRedo - Specifies is undo redo or not.\n     * @returns {void} - To Sets the border to specified range of cells.\n     */\n    Workbook.prototype.setBorder = function (style, range, type, isUndoRedo) {\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setCellFormat, {\n            style: style, borderType: type, range: range || this.getActiveSheet().selectedRange, isUndoRedo: isUndoRedo\n        });\n    };\n    /**\n     * Used to insert rows in to the spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/insertRow/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number | RowModel[]} startRow - Specifies the start row index / row model which needs to be inserted.\n     * @param {number} endRow - Specifies the end row index.\n     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,\n     * active sheet will be considered.\n     * @returns {void} - To insert rows in to the spreadsheet.\n     */\n    Workbook.prototype.insertRow = function (startRow, endRow, sheet) {\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.insertModel, { model: this.getSheetModel(sheet), start: startRow, end: endRow,\n            modelType: 'Row', insertType: 'below' });\n    };\n    /**\n     * Used to insert columns in to the spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/insertColumn/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number | ColumnModel[]} startColumn - Specifies the start column index / column model which needs to be inserted.\n     * @param {number} endColumn - Specifies the end column index.\n     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,\n     * active sheet will be considered.\n     * @returns {void} - To insert columns in to the spreadsheet.\n     */\n    Workbook.prototype.insertColumn = function (startColumn, endColumn, sheet) {\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.insertModel, { model: this.getSheetModel(sheet), start: startColumn, end: endColumn,\n            modelType: 'Column', insertType: 'after' });\n    };\n    /**\n     * Used to insert sheets in to the spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/insertSheet/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number | SheetModel[]} startSheet - Specifies the start sheet index / sheet model which needs to be inserted.\n     * @param {number} endSheet - Specifies the end sheet index.\n     * @returns {void} - To insert sheets in to the spreadsheet.\n     */\n    Workbook.prototype.insertSheet = function (startSheet, endSheet) {\n        if (this.isProtected) {\n            return;\n        }\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.insertModel, { model: this, start: startSheet, end: endSheet, modelType: 'Sheet' });\n    };\n    /**\n     * Used to delete rows, columns and sheets from the spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/delete/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} startIndex - Specifies the start sheet / row / column index.\n     * @param {number} endIndex - Specifies the end sheet / row / column index.\n     * @param {ModelType} model - Specifies the delete model type. By default, the model is considered as `Sheet`. The possible values are,\n     * - Row: To delete rows.\n     * - Column: To delete columns.\n     * - Sheet: To delete sheets.\n     * @param {number | string} sheet - Specifies the sheet name or index in which the delete operation will perform. By default,\n     * active sheet will be considered. It is applicable only for model type Row and Column.\n     * @returns {void} - To delete rows, columns and sheets from the spreadsheet.\n     */\n    Workbook.prototype.delete = function (startIndex, endIndex, model, sheet) {\n        if (this.isProtected) {\n            return;\n        }\n        startIndex = startIndex || 0;\n        var sheetModel;\n        endIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endIndex) ? startIndex : endIndex;\n        if (!model || model === 'Sheet') {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            sheetModel = this;\n            if (Math.abs(endIndex - startIndex) >= this.sheets.length) {\n                return;\n            }\n        }\n        else {\n            sheetModel = this.getSheetModel(sheet);\n            if (!sheetModel) {\n                return;\n            }\n        }\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.deleteModel, {\n            model: sheetModel, start: startIndex, end: endIndex, modelType: model || 'Sheet'\n        });\n    };\n    /**\n     * Used to move the sheets to the specified position in the list of sheets.\n     *\n     * {% codeBlock src='spreadsheet/moveSheet/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} position - Specifies the position to move a sheet in the list of sheets.\n     * @param {number[]} sheetIndexes - Specifies the indexes of the sheet to be moved. By default, the active sheet will be moved.\n     * @returns {void} - Used to move the sheets to the specified position in the list of sheets.\n     */\n    Workbook.prototype.moveSheet = function (position, sheetIndexes) {\n        if (this.isProtected) {\n            return;\n        }\n        (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.moveSheet)(this, position, sheetIndexes);\n    };\n    /**\n     * Used to make a duplicate/copy of the sheet in the spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/duplicateSheet/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} sheetIndex - Specifies the index of the sheet to be duplicated. By default, the active sheet will be duplicated.\n     * @returns {void} - Used to make a duplicate/copy of the sheet in the spreadsheet.\n     */\n    Workbook.prototype.duplicateSheet = function (sheetIndex) {\n        if (this.isProtected) {\n            return;\n        }\n        (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.duplicateSheet)(this, sheetIndex);\n    };\n    Workbook.prototype.getSheetModel = function (sheet) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet)) {\n            return this.getActiveSheet();\n        }\n        else {\n            var index = typeof sheet === 'string' ? (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, sheet) : sheet;\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) || index >= this.sheets.length) {\n                return null;\n            }\n            return this.sheets[index];\n        }\n    };\n    /**\n     * Used to merge the range of cells.\n     *\n     * {% codeBlock src='spreadsheet/merge/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} range - Specifies the range of cells as address.\n     * @param {MergeType} type - Specifies the merge type. The possible values are,\n     * - All: Merge all the cells between provided range.\n     * - Horizontally: Merge the cells row-wise.\n     * - Vertically: Merge the cells column-wise.\n     * @returns {void} - To merge the range of cells.\n     */\n    Workbook.prototype.merge = function (range, type) {\n        var sheetIdx;\n        var sheet;\n        if (range) {\n            sheetIdx = this.isPrintingProcessing ? this.currentPrintSheetIndex : (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getSheetIndexFromAddress)(this, range);\n            sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIdx);\n        }\n        else {\n            sheet = this.getActiveSheet();\n            range = sheet.selectedRange;\n            sheetIdx = this.activeSheetIndex;\n        }\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setMerge, { merge: true, range: range, type: type || 'All', sheetIndex: sheetIdx, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false, preventRefresh: this.activeSheetIndex !== sheetIdx });\n    };\n    /**\n     * Used to split the merged cell into multiple cells.\n     *\n     * {% codeBlock src='spreadsheet/unMerge/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} range - Specifies the range of cells as address.\n     * @returns {void} - To split the merged cell into multiple cells.\n     */\n    Workbook.prototype.unMerge = function (range) {\n        var sheetIdx;\n        var sheet;\n        if (range) {\n            sheetIdx = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getSheetIndexFromAddress)(this, range);\n            sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIdx);\n        }\n        else {\n            sheet = this.getActiveSheet();\n            range = sheet.selectedRange;\n            sheetIdx = this.activeSheetIndex;\n        }\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setMerge, {\n            merge: false, range: range, sheetIndex: sheetIdx, type: 'All',\n            refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false, preventRefresh: this.activeSheetIndex !== sheetIdx\n        });\n    };\n    /** Used to compute the specified expression/formula.\n     *\n     * {% codeBlock src='spreadsheet/computeExpression/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} formula - Specifies the formula(=SUM(A1:A3)) or expression(2+3).\n     * @returns {string | number} - to compute the specified expression/formula.\n     */\n    Workbook.prototype.computeExpression = function (formula) {\n        var args = {\n            action: 'computeExpression', formula: formula, isFromComputeExpression: true\n        };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, args);\n        return args.calcValue;\n    };\n    Workbook.prototype.initEmptySheet = function () {\n        if (!this.sheets.length) {\n            this.createSheet();\n        }\n        else {\n            (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.initSheet)(this);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {SheetModel} - To get Active Sheet.\n     */\n    Workbook.prototype.getActiveSheet = function () {\n        return this.sheets[this.activeSheetIndex];\n    };\n    /** @hidden\n     * @param {number} index - Specifies the index.\n     * @param {number} initIdx - Specifies the initIdx.\n     * @param {number} hiddenCount - Specifies the initIdx.\n     * @returns {number} - To skip Hidden Sheets.\n     */\n    Workbook.prototype.skipHiddenSheets = function (index, initIdx, hiddenCount) {\n        if (hiddenCount === void 0) { hiddenCount = 0; }\n        if (this.sheets[index] && this.sheets[index].state !== 'Visible') {\n            if (initIdx === undefined) {\n                initIdx = index;\n            }\n            if (index && index + 1 === this.sheets.length) {\n                index = initIdx - 1;\n            }\n            else {\n                index = index < initIdx ? --index : ++index;\n            }\n            index = this.skipHiddenSheets(index, initIdx, ++hiddenCount);\n        }\n        if (hiddenCount === this.sheets.length) {\n            this.setSheetPropertyOnMute(this.sheets[0], 'state', 'Visible');\n            return 0;\n        }\n        return index;\n    };\n    /**\n     * Used for setting the used range row and column index.\n     *\n     * @hidden\n     * @param {number} rowIdx - Specifies the rowIndex.\n     * @param {number} colIdx - Specifies the colIndex.\n     * @param {SheetModel} sheet - Specifies the active sheet.\n     * @param {boolean} preventRowColUpdate - To prevent updating row and column count.\n     * @param {boolean} forceUpdate - To force updating row and column count.\n     * @returns {void} - To setting the used range row and column index.\n     */\n    Workbook.prototype.setUsedRange = function (rowIdx, colIdx, sheet, preventRowColUpdate, forceUpdate) {\n        if (sheet === void 0) { sheet = this.getActiveSheet(); }\n        if (forceUpdate) {\n            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: rowIdx, colIndex: colIdx });\n            return;\n        }\n        if (rowIdx > sheet.usedRange.rowIndex) {\n            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: rowIdx, colIndex: sheet.usedRange.colIndex });\n            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {\n                this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.updateRowColCount, { index: rowIdx, update: 'row' });\n            }\n        }\n        if (colIdx > sheet.usedRange.colIndex) {\n            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: sheet.usedRange.rowIndex, colIndex: colIdx });\n            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {\n                this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.updateRowColCount, { index: colIdx, update: 'col' });\n            }\n        }\n    };\n    /**\n     * Gets the range of data as JSON from the specified address.\n     *\n     * {% codeBlock src='spreadsheet/getData/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} address - Specifies the address for range of cells.\n     * @returns {Promise<Map<string, CellModel>>} - Gets the range of data as JSON from the specified address.\n     */\n    Workbook.prototype.getData = function (address) {\n        return (0,_index__WEBPACK_IMPORTED_MODULE_3__.getData)(this, address);\n    };\n    /**\n     * Get component name.\n     *\n     * @returns {string} - Gets the module name.\n     * @hidden\n     */\n    Workbook.prototype.getModuleName = function () {\n        return 'workbook';\n    };\n    /** @hidden\n     * @param {string} address - Specifies the sheet id.\n     * @returns {void} - To set the value for row and col.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Workbook.prototype.goTo = function (address) {\n        /** */\n    };\n    /** @hidden\n     * @param {number} sheetId - Specifies the sheet id.\n     * @param {number} rowIndex - Specifies the rowIndex.\n     * @param {number} colIndex - Specifies the colIndex.\n     * @param {string} formulaCellReference - Specifies the formulaCellReference.\n     * @param {boolean} refresh - Specifies the refresh.\n     * @param {boolean} isUnique - Specifies is unique formula or not.\n     * @param {boolean} isSubtotal - Specifies is from Subtotal formula or not.\n     * @returns {string | number} - To set the value for row and col.\n     */\n    Workbook.prototype.getValueRowCol = function (sheetId, rowIndex, colIndex, formulaCellReference, refresh, isUnique, isSubtotal) {\n        var sheetIndex = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this, sheetId);\n        var sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIndex);\n        var cell = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.getCell)(rowIndex - 1, colIndex - 1, sheet);\n        if (formulaCellReference && formulaCellReference.includes('!') && !cell && sheet.ranges && sheet.ranges.length) {\n            var isNotLoaded_1;\n            if (this.formulaRefCell && this.formulaRefCell === formulaCellReference) {\n                return cell && cell.value;\n            }\n            sheet.ranges.forEach(function (range) {\n                if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {\n                    isNotLoaded_1 = true;\n                    return;\n                }\n            });\n            if (isNotLoaded_1) {\n                this.formulaRefCell = formulaCellReference;\n                sheetIndex = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this, Number(formulaCellReference.substring(formulaCellReference.lastIndexOf(',') + 1, formulaCellReference.length)));\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheetIndex)) {\n                    return cell && cell.value;\n                }\n                formulaCellReference = formulaCellReference.substring(formulaCellReference.lastIndexOf('!') + 1, formulaCellReference.lastIndexOf(','));\n                (0,_index__WEBPACK_IMPORTED_MODULE_3__.getData)(this, sheet.name + \"!A1:\" + (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(rowIndex - 1, colIndex - 1), null, null, null, null, formulaCellReference, sheetIndex);\n            }\n        }\n        else if (cell && cell.formula && (refresh || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value)) &&\n            !isUnique && this.calculationMode === 'Automatic') {\n            this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.calculateFormula, {\n                cell: cell, rowIdx: rowIndex - 1, colIdx: colIndex - 1, sheetIndex: sheetIndex,\n                formulaRefresh: true\n            });\n        }\n        if (cell && !(0,_common_index__WEBPACK_IMPORTED_MODULE_4__.isNumber)(cell.value) && !this.isEdit) {\n            var eventArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell,\n                skipFormatCheck: false };\n            this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.getFormattedCellObject, eventArgs);\n            cell = eventArgs.cell;\n        }\n        if (isSubtotal && cell && cell.formula && cell.formula.includes('SUBTOTAL(')) {\n            return cell.formula; // To ignore subtotal result in the subtotal formula.\n        }\n        return cell && cell.value;\n    };\n    /** @hidden\n     * @param {number} sheetId - Specifies the sheet id.\n     * @param {string | number} value - Specifies the value.\n     * @param {number} rowIndex - Specifies the rowIndex.\n     * @param {number} colIndex - Specifies the colIndex.\n     * @param {string} formula - Specifies the colIndex.\n     * @param {boolean} isRandomFormula - Specifies is random formula or not.\n     * @returns {void} - To set the value for row and col.\n     */\n    Workbook.prototype.setValueRowCol = function (sheetId, value, rowIndex, colIndex, formula, isRandomFormula) {\n        this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.workbookEditOperation, {\n            action: 'updateCellValue', address: [rowIndex - 1, colIndex - 1], value: value,\n            sheetIndex: (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this, sheetId), isValueOnly: true, formula: formula, isRandomFormula: isRandomFormula\n        });\n    };\n    /**\n     * Opens the specified excel file or stream.\n     *\n     * @param {OpenOptions} options - Options for opening the excel file.\n     * @returns {void} - Opens the specified excel file or stream.\n     */\n    Workbook.prototype.open = function (options) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookOpen, options);\n    };\n    /**\n     * Opens the specified JSON object.\n     *\n     * {% codeBlock src='spreadsheet/openFromJson/index.md' %}{% endcodeBlock %}\n     *\n     * The available arguments in options are:\n     * * file: Specifies the spreadsheet model as object or string. And the object contains the jsonObject,\n     * which is saved from spreadsheet using saveAsJson method.\n     * * triggerEvent: Specifies whether to trigger the `openComplete` event or not.\n     *\n     * @param {Object} options - Options for opening the JSON object.\n     * @param {string | object} options.file - Options for opening the JSON object.\n     * @param {boolean} options.triggerEvent - Specifies whether to trigger the `openComplete` event or not.\n     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the loading of the JSON data.\n     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be loaded, excluding styles, formulas, etc.\n     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded when loading the JSON data.\n     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded when loading the JSON data.\n     * @returns {void} - Opens the specified JSON object.\n     */\n    Workbook.prototype.openFromJson = function (options, jsonConfig) {\n        this.isOpen = true;\n        var jsonObject = typeof options.file === 'object' ? JSON.stringify(options.file) : options.file;\n        if (jsonObject !== '' && jsonConfig) {\n            var skipProps_1 = [];\n            if (jsonConfig.onlyValues) {\n                skipProps_1.push.apply(skipProps_1, ['style', 'formula', 'format', 'conditionalFormats', 'validation',\n                    'hyperlink', 'wrap', 'chart', 'image', 'notes']);\n            }\n            else {\n                var ignoreProps = {\n                    style: jsonConfig.ignoreStyle,\n                    formula: jsonConfig.ignoreFormula,\n                    format: jsonConfig.ignoreFormat,\n                    conditionalFormats: jsonConfig.ignoreConditionalFormat,\n                    validation: jsonConfig.ignoreValidation,\n                    wrap: jsonConfig.ignoreWrap,\n                    chart: jsonConfig.ignoreChart,\n                    image: jsonConfig.ignoreImage,\n                    notes: jsonConfig.ignoreNote\n                };\n                if (jsonConfig.ignoreFreezePane) {\n                    skipProps_1.push.apply(skipProps_1, ['frozenColumns', 'frozenRows']);\n                }\n                for (var prop in ignoreProps) {\n                    if (ignoreProps[prop]) {\n                        skipProps_1.push(prop);\n                    }\n                }\n            }\n            jsonObject = JSON.stringify(JSON.parse(jsonObject), function (key, value) {\n                if (skipProps_1.indexOf(key) > -1) {\n                    return undefined;\n                }\n                return value;\n            });\n        }\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookOpen, { jsonObject: jsonObject, triggerEvent: options.triggerEvent });\n    };\n    /**\n     * Saves the Spreadsheet data to Excel file.\n     *\n     * {% codeBlock src='spreadsheet/save/index.md' %}{% endcodeBlock %}\n     *\n     * The available arguments in saveOptions are:\n     * * url: Specifies the save URL.\n     * * fileName: Specifies the file name.\n     * * saveType: Specifies the file type need to be saved.\n     *\n     * @param {SaveOptions} saveOptions - Options for saving the excel file.\n     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the JSON output.\n     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be included, excluding styles, formulas, etc.\n     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded from the JSON output.\n     * @returns {void} - To Saves the Spreadsheet data to Excel file.\n     */\n    Workbook.prototype.save = function (saveOptions, jsonConfig) {\n        if (saveOptions === void 0) { saveOptions = {}; }\n        if (this.allowSave) {\n            var defaultProps = {\n                url: this.saveUrl,\n                fileName: saveOptions.fileName || 'Sample',\n                saveType: 'Xlsx'\n                //passWord: args.passWord\n            };\n            var eventArgs = __assign({}, defaultProps, saveOptions, { customParams: {}, isFullPost: true, needBlobData: false, cancel: false, autoDetectFormat: false, pdfLayoutSettings: { fitSheetOnOnePage: false, orientation: 'Portrait' } });\n            this.trigger('beforeSave', eventArgs);\n            this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.beginAction, { eventArgs: eventArgs, action: 'beforeSave' });\n            if (!eventArgs.cancel) {\n                this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.beginSave, {\n                    saveSettings: eventArgs, isFullPost: eventArgs.isFullPost, needBlobData: eventArgs.needBlobData,\n                    customParams: eventArgs.customParams, pdfLayoutSettings: eventArgs.pdfLayoutSettings,\n                    jsonConfig: jsonConfig\n                });\n            }\n        }\n    };\n    /**\n     * Saves the Spreadsheet data as JSON object.\n     *\n     * {% codeBlock src='spreadsheet/saveAsJson/index.md' %}{% endcodeBlock %}\n     *\n     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the JSON output.\n     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be included, excluding styles, formulas, etc.\n     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded from the JSON output.\n     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded from the JSON output.\n     * @returns {Promise<object>} - To Saves the Spreadsheet data as JSON object.\n     */\n    Workbook.prototype.saveAsJson = function (jsonConfig) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this.on(_common_event__WEBPACK_IMPORTED_MODULE_5__.onSave, function (args) {\n                args.cancel = true;\n                _this.off(_common_event__WEBPACK_IMPORTED_MODULE_5__.onSave);\n                resolve({ jsonObject: { Workbook: args.jsonObject } });\n                _this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.saveCompleted, args);\n            });\n            _this.save({}, jsonConfig);\n        });\n    };\n    Workbook.prototype.addHyperlink = function (hyperlink, cellAddress) {\n        var args = { hyperlink: hyperlink, cell: cellAddress };\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setLinkModel, args);\n    };\n    /**\n     * To find the specified cell value.\n     *\n     * @hidden\n     * @param {FindOptions} args - options for find.\n     * {% codeBlock src='spreadsheet/findHandler/index.md' %}{% endcodeBlock %}\n     * @returns {void} - To find the specified cell value.\n     */\n    Workbook.prototype.findHandler = function (args) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.find, args);\n    };\n    /**\n     * @hidden\n     * @param {FindOptions} args - Specifies the FindOptions.\n     * @returns {void} - To replace the value.\n     */\n    Workbook.prototype.replaceHandler = function (args) {\n        if (args.replaceBy === 'replace') {\n            this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.replace, args);\n        }\n        else {\n            this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.replaceAll, args);\n        }\n    };\n    /**\n     * Protect the active sheet based on the protect sheetings.\n     *\n     * @param {number} sheet - Specifies the sheet to protect.\n     * @param {ProtectSettingsModel} protectSettings - Specifies the protect settings of the sheet.\n     * @param {string} password - Specifies the password to protect\n     * @returns {void} - protect the active sheet.\n     */\n    Workbook.prototype.protectSheet = function (sheet, protectSettings, password) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet)) {\n            sheet = this.activeSheetIndex;\n        }\n        else if (typeof (sheet) === 'string') {\n            sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, sheet);\n        }\n        var sheetModel = this.sheets[sheet];\n        if (!sheetModel) {\n            return;\n        }\n        this.setSheetPropertyOnMute(sheetModel, 'isProtected', true);\n        this.setSheetPropertyOnMute(sheetModel, 'password', password ? password : '');\n        this.setSheetPropertyOnMute(sheetModel, 'protectSettings', protectSettings ? protectSettings : {});\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.protectsheetHandler, {\n            protectSettings: sheetModel.protectSettings, password: sheetModel.password, sheetIndex: sheet\n        });\n    };\n    /**\n     * Unprotect the active sheet.\n     *\n     * @param {number} sheet - Specifies the sheet to Unprotect.\n     * @returns {void} - Unprotect the active sheet.\n     */\n    Workbook.prototype.unprotectSheet = function (sheet) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet)) {\n            sheet = this.activeSheetIndex;\n        }\n        else if (typeof (sheet) === 'string') {\n            sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, sheet);\n        }\n        if (!this.sheets[sheet]) {\n            return;\n        }\n        var args = { sheet: sheet };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.unprotectsheetHandler, args);\n    };\n    /**\n     * Sorts the range of cells in the active Spreadsheet.\n     *\n     * @param {SortOptions} sortOptions - options for sorting.\n     * @param {string} range - address of the data range.\n     * @param {SortCollectionModel[]} previousSort - specifies previous sort collection.\n     * @returns {Promise<SortEventArgs>} - Sorts the range of cells in the active Spreadsheet.\n     */\n    Workbook.prototype.sort = function (sortOptions, range, previousSort) {\n        if (!this.allowSorting) {\n            return Promise.reject();\n        }\n        var eventArgs = {\n            range: range || this.getActiveSheet().selectedRange,\n            sortOptions: sortOptions || { sortDescriptors: {} },\n            cancel: false\n        };\n        var promise = new Promise(function (resolve) { resolve((function () { })()); });\n        var sortArgs = { args: eventArgs, promise: promise, previousSort: previousSort };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.initiateSort, sortArgs);\n        return sortArgs.promise;\n    };\n    Workbook.prototype.addDataValidation = function (rules, range) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rules.value1)) {\n            return;\n        }\n        if (rules.type === 'List') {\n            if (rules.value1.length > 256) {\n                rules.value1 = rules.value1.substring(0, 255);\n            }\n        }\n        else {\n            rules.value1 = (0,_index__WEBPACK_IMPORTED_MODULE_7__.parseLocaleNumber)([rules.value1], this)[0];\n            if (rules.value2) {\n                rules.value2 = (0,_index__WEBPACK_IMPORTED_MODULE_7__.parseLocaleNumber)([rules.value2], this)[0];\n            }\n        }\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.cellValidation, { rules: rules, range: range || (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getUpdatedRange)(this.getActiveSheet()) });\n    };\n    Workbook.prototype.removeDataValidation = function (range) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.cellValidation, {\n            range: range || (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getUpdatedRange)(this.getActiveSheet()),\n            isRemoveValidation: true\n        });\n    };\n    Workbook.prototype.addInvalidHighlight = function (range) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.addHighlight, { range: range });\n    };\n    Workbook.prototype.removeInvalidHighlight = function (range) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.removeHighlight, { range: range });\n    };\n    /**\n     * To determine whether the cell value in a data validation applied cell is valid or not.\n     *\n     * @param {string} cellAddress - Address of the cell.\n     * @returns {boolean} - It return true if the cell value is valid; otherwise, false.\n     */\n    Workbook.prototype.isValidCell = function (cellAddress) {\n        var sheet;\n        var sheetIdx;\n        var range;\n        if (cellAddress) {\n            var addressInfo = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getAddressInfo)(this, cellAddress);\n            sheetIdx = addressInfo.sheetIndex;\n            range = addressInfo.indices;\n            sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIdx);\n        }\n        else {\n            sheet = this.getActiveSheet();\n            range = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.activeCell);\n            sheetIdx = this.activeSheetIndex;\n        }\n        var cell = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.getCell)(range[0], range[1], sheet, false, true);\n        if (cell.validation || (0,_index__WEBPACK_IMPORTED_MODULE_7__.checkColumnValidation)(sheet.columns[range[1]], range[0], range[1])) {\n            var value = cell.value ? cell.value : '';\n            var validEventArgs = { value: value, range: range, sheetIdx: sheetIdx, td: null, isValid: true };\n            this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.isValidation, validEventArgs);\n            return validEventArgs.isValid;\n        }\n        else {\n            return true;\n        }\n    };\n    Workbook.prototype.conditionalFormat = function (conditionalFormat) {\n        var _this = this;\n        if (conditionalFormat.range) {\n            if (this.listSeparator !== ',' && conditionalFormat.range.includes(this.listSeparator)) {\n                conditionalFormat.range = conditionalFormat.range.split(this.listSeparator).join(',');\n            }\n        }\n        else {\n            conditionalFormat.range = this.getActiveSheet().selectedRange;\n        }\n        if (conditionalFormat.value) {\n            var cfValues = void 0;\n            if (conditionalFormat.type === 'Between') {\n                if (this.listSeparator !== ',' && conditionalFormat.value.includes(this.listSeparator)) {\n                    var dateValues = conditionalFormat.value.split('\"').filter(function (date) { return date.trim() && date.trim() !== _this.listSeparator; });\n                    cfValues = dateValues.length > 1 ? dateValues : conditionalFormat.value.split(this.listSeparator);\n                }\n                else {\n                    var dateValues = conditionalFormat.value.split('\"').filter(function (date) { return date.trim() && date.trim() !== ','; });\n                    cfValues = dateValues.length > 1 ? dateValues : conditionalFormat.value.split(',');\n                }\n            }\n            else {\n                cfValues = [conditionalFormat.value];\n            }\n            (0,_index__WEBPACK_IMPORTED_MODULE_7__.parseLocaleNumber)(cfValues, this);\n            conditionalFormat.value = cfValues.join(',');\n        }\n        this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.setCFRule, { cfModel: conditionalFormat });\n    };\n    Workbook.prototype.clearConditionalFormat = function (range) {\n        var clearCFArgs = {};\n        if (!range || !range.includes('!')) {\n            clearCFArgs.range = range || this.getActiveSheet().selectedRange;\n            clearCFArgs.sheetIdx = this.activeSheetIndex;\n        }\n        else {\n            var lastIndex = range.lastIndexOf('!');\n            clearCFArgs.range = range.substring(lastIndex + 1);\n            clearCFArgs.sheetIdx = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, range.substring(0, lastIndex));\n        }\n        this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.clearCFRule, clearCFArgs);\n    };\n    /**\n     * Updates the properties of a specified cell.\n     *\n     * {% codeBlock src='spreadsheet/updateCell/index.md' %}{% endcodeBlock %}\n     *\n     * @param {CellModel} cell - The properties to update for the specified cell.\n     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.\n     * @param {boolean} enableDependentCellUpdate - Specifies whether dependent cells should also be updated. Default value is <c>true</c>.\n     * @returns {void} - This method does not return a value.\n     */\n    Workbook.prototype.updateCell = function (cell, address, enableDependentCellUpdate) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(enableDependentCellUpdate)) {\n            enableDependentCellUpdate = true;\n        }\n        this.updateCellDetails(cell, address, undefined, undefined, enableDependentCellUpdate);\n    };\n    /**\n     * Updates the properties of a specified cell.\n     *\n     * @param {CellModel} cell - The properties to update for the specified cell.\n     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.\n     * @param {UndoRedoEventArgs} cellInformation - It holds the undoRedoCollections.\n     * @param {boolean} isRedo - It holds the undo redo information.\n     * @param {boolean} isDependentUpdate - Specifies whether dependent cells should also be updated.\n     * @param {boolean} isFinite - Specifies scroll settings of the sheet is finite or not.\n     * @param {boolean} isPublic - It holds whether updateCell public method is used.\n     * @returns {void} - This method does not return a value.\n     *\n     * @hidden\n     */\n    Workbook.prototype.updateCellDetails = function (cell, address, cellInformation, isRedo, isDependentUpdate, isFinite, isPublic) {\n        var range;\n        var sheetIdx;\n        if (!address) {\n            address = this.getActiveSheet().activeCell;\n        }\n        if (address.includes('!')) {\n            range = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getIndexesFromAddress)(address);\n            sheetIdx = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, address.substring(0, address.lastIndexOf('!')));\n            if (sheetIdx === undefined) {\n                return;\n            }\n        }\n        else {\n            range = (0,_index__WEBPACK_IMPORTED_MODULE_7__.getRangeIndexes)(address);\n            sheetIdx = this.activeSheetIndex;\n        }\n        var sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIdx);\n        if (isFinite && !(sheet.rowCount > range[0] && sheet.rowCount > range[2] &&\n            sheet.colCount > range[1] && sheet.colCount > range[3])) {\n            this.notify(_spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_12__.finiteAlert, null);\n            return;\n        }\n        (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.updateCell)(this, sheet, { cell: cell, rowIdx: range[0], colIdx: range[1], preventEvt: true });\n        var val = isPublic ? cell.formula || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value) ? null : cell.value) :\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value) ? (cell.formula || null) : cell.value;\n        var valChange = val !== null;\n        var cellModel = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.getCell)(range[0], range[1], sheet, false, true);\n        if (cellInformation && cellInformation.format && isRedo) {\n            cellModel.format = cellInformation.format;\n        }\n        if (valChange) {\n            delete cellModel.formattedText;\n            this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.workbookEditOperation, {\n                action: 'updateCellValue', address: range, value: val, sheetIndex: sheetIdx,\n                cellInformation: cellInformation, isRedo: isRedo, isDependentUpdate: isDependentUpdate\n            });\n            if (this.isEdit && cellModel.value === '#CIRCULARREF!') {\n                cellModel.value = '0';\n            }\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.format) && cellModel.formattedText) {\n            delete cellModel.formattedText;\n        }\n        if (sheetIdx === this.activeSheetIndex) {\n            var eventArgs = { sheet: sheet, cell: cellModel, rowIdx: range[0], colIdx: range[1] };\n            if (cellModel.rowSpan > 1 || cellModel.colSpan > 1) {\n                (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.setVisibleMergeIndex)(eventArgs);\n            }\n            var cellEle = !(0,_index__WEBPACK_IMPORTED_MODULE_3__.isHiddenRow)(sheet, eventArgs.rowIdx) && !(0,_index__WEBPACK_IMPORTED_MODULE_3__.isHiddenCol)(sheet, eventArgs.colIdx) &&\n                this.getCell(eventArgs.rowIdx, eventArgs.colIdx);\n            if (cellEle) {\n                this.serviceLocator.getService('cell').refresh(eventArgs.rowIdx, eventArgs.colIdx, true, cellEle, valChange, valChange);\n            }\n            var activeCellIdx = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.activeCell);\n            if (range[0] === activeCellIdx[0] && range[1] === activeCellIdx[1]) {\n                this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.refreshRibbonIcons, null);\n                this.notify(_spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_12__.formulaBarOperation, { action: 'refreshFormulabar', cell: cellModel });\n                if (cellEle && cell.validation) {\n                    eventArgs.validation = cellModel.validation;\n                    eventArgs.td = cellEle;\n                    eventArgs.isRefresh = true;\n                    this.notify(_index__WEBPACK_IMPORTED_MODULE_7__.addListValidationDropdown, eventArgs);\n                }\n            }\n        }\n    };\n    /**\n     * Used to get a row data from the data source with updated cell value.\n     *\n     * {% codeBlock src='spreadsheet/getRowData/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} index - Specifies the row index.\n     * @param {number} sheetIndex - Specifies the sheet index. By default, it consider the active sheet index.\n     * @returns {Object[]} - Return row data.\n     */\n    Workbook.prototype.getRowData = function (index, sheetIndex) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n            index = 0;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheetIndex)) {\n            sheetIndex = this.activeSheetIndex;\n        }\n        var eventArgs = { sheetIdx: sheetIndex, startIndex: index, modelType: 'Row', isDataRequest: true };\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.dataChanged, eventArgs);\n        return eventArgs.data;\n    };\n    /**\n     * This method is used to update the Range property in specified sheet index.\n     *\n     * @param {RangeModel} range - Specifies the range properties to update.\n     * @param {number} [sheetIndex] - Specifies the sheet index to update the range. By default, it consider the active sheet index.\n     * @returns {void} - To update a range properties.\n     */\n    Workbook.prototype.updateRange = function (range, sheetIndex) {\n        if (sheetIndex === void 0) { sheetIndex = this.activeSheetIndex; }\n        var sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheetIndex);\n        if (!sheet) {\n            return;\n        }\n        if (!range.startCell) {\n            range.startCell = 'A1';\n        }\n        if (range.showFieldAsHeader === undefined) {\n            range.showFieldAsHeader = true;\n        }\n        if (range.template && !range.address) {\n            range.address = range.startCell;\n        }\n        sheet.ranges.push(range);\n        this.setSheetPropertyOnMute(sheet, 'ranges', sheet.ranges);\n        if (range.dataSource) {\n            this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.dataSourceChanged, { sheetIdx: sheetIndex, rangeIdx: sheet.ranges.length - 1, changedData: range.dataSource });\n        }\n    };\n    /**\n     * This method is used to wrap/unwrap the text content of the cell.\n     *\n     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} address - Address of the cell to be wrapped.\n     * @param {boolean} wrap - Set `false` if the text content of the cell to be unwrapped.\n     * @returns {void} - To wrap/unwrap the text content of the cell.\n     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}\n     */\n    Workbook.prototype.wrap = function (address, wrap) {\n        if (wrap === void 0) { wrap = true; }\n        (0,_cell__WEBPACK_IMPORTED_MODULE_6__.wrap)(address, wrap, this, null, true);\n    };\n    /**\n     * Adds the defined name to the Spreadsheet.\n     *\n     * @param {DefineNameModel} definedName - Specifies the name.\n     * @returns {boolean} - Return the added status of the defined name.\n     * {% codeBlock src='spreadsheet/addDefinedName/index.md' %}{% endcodeBlock %}\n     */\n    Workbook.prototype.addDefinedName = function (definedName) {\n        var eventArgs = {\n            action: 'addDefinedName',\n            isAdded: false,\n            definedName: definedName\n        };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, eventArgs);\n        return eventArgs.isAdded;\n    };\n    /**\n     * Removes the defined name from the Spreadsheet.\n     *\n     * @param {string} definedName - Specifies the name.\n     * @param {string} scope - Specifies the scope of the defined name.\n     * @returns {boolean} - Return the removed status of the defined name.\n     * {% codeBlock src='spreadsheet/removeDefinedName/index.md' %}{% endcodeBlock %}\n     */\n    Workbook.prototype.removeDefinedName = function (definedName, scope) {\n        if (scope === void 0) { scope = ''; }\n        var eventArgs = {\n            action: 'removeDefinedName',\n            isRemoved: false,\n            definedName: definedName,\n            scope: scope\n        };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, eventArgs);\n        return eventArgs.isRemoved;\n    };\n    /**\n     * Used to set the image in spreadsheet.\n     *\n     * @param {ImageModel} images - Specifies the options to insert image in spreadsheet.\n     * @param {string} range - Specifies the range in spreadsheet.\n     * @returns {void} - To set the image in spreadsheet.\n     */\n    Workbook.prototype.insertImage = function (images, range) {\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setImage, { options: images, range: range ? range : this.getActiveSheet().selectedRange });\n    };\n    /**\n     * Used to perform autofill action based on the specified range in spreadsheet.\n     *\n     * @param {string} fillRange - Specifies the fill range.\n     * @param {string} dataRange - Specifies the data range.\n     * @param {AutoFillDirection} direction - Specifies the direction(\"Down\",\"Right\",\"Up\",\"Left\") to be filled.\n     * @param {AutoFillType} fillType - Specifies the fill type(\"FillSeries\",\"CopyCells\",\"FillFormattingOnly\",\"FillWithoutFormatting\") for autofill action.\n     * @returns {void} - To perform autofill action based on the specified range in spreadsheet.\n     */\n    Workbook.prototype.autoFill = function (fillRange, dataRange, direction, fillType) {\n        var options = {\n            dataRange: dataRange ? dataRange : this.getActiveSheet().selectedRange,\n            fillRange: fillRange,\n            direction: direction ? direction : 'Down',\n            fillType: fillType ? fillType : 'FillSeries'\n        };\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setAutoFill, options);\n    };\n    /**\n     * Used to set the chart in spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/insertChart/index.md' %}{% endcodeBlock %}\n     *\n     * @param {ChartModel} chart - Specifies the options to insert chart in spreadsheet\n     * @returns {void} - To set the chart in spreadsheet.\n     */\n    Workbook.prototype.insertChart = function (chart) {\n        this.notify(_common_index__WEBPACK_IMPORTED_MODULE_4__.setChart, { chart: chart });\n    };\n    /**\n     * Used to delete the chart from spreadsheet.\n     *\n     * {% codeBlock src='spreadsheet/deleteChart/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} id - Specifies the chart element id.\n     * @returns {void} - To delete the chart from spreadsheet.\n     */\n    Workbook.prototype.deleteChart = function (id) {\n        this.notify(_spreadsheet_common_event__WEBPACK_IMPORTED_MODULE_12__.deleteChart, { id: id });\n    };\n    /**\n     * Filters the range of cells in the sheet.\n     *\n     * @param {FilterOptions} filterOptions - Specifies the filterOptions\n     * @param {string} range - Specifies the range\n     * @returns {Promise<FilterEventArgs>} - To Filters the range of cells in the sheet.\n     */\n    Workbook.prototype.filter = function (filterOptions, range) {\n        if (!this.allowFiltering) {\n            return Promise.reject();\n        }\n        var eventArgs = {\n            range: range || this.getActiveSheet().selectedRange,\n            filterOptions: filterOptions,\n            cancel: false\n        };\n        var promise = new Promise(function (resolve) { resolve((function () { })()); });\n        var filterArgs = { args: eventArgs, promise: promise };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.initiateFilter, filterArgs);\n        return filterArgs.promise;\n    };\n    /**\n     * To add custom library function.\n     *\n     * @param {string} functionHandler - Custom function handler name\n     * @param {string} functionName - Custom function name\n     * @param {string} formulaDescription - Specifies formula description.\n     * {% codeBlock src='spreadsheet/addCustomFunction/index.md' %}{% endcodeBlock %}\n     * @returns {void} - To add custom library function.\n     */\n    Workbook.prototype.addCustomFunction = function (functionHandler, functionName, formulaDescription) {\n        functionName = functionName ? functionName : typeof functionHandler === 'string' ? functionHandler :\n            functionHandler.name.replace('bound ', '');\n        var eventArgs = {\n            action: 'addCustomFunction',\n            functionHandler: functionHandler,\n            functionName: functionName,\n            formulaDescription: formulaDescription\n        };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, eventArgs);\n    };\n    /**\n     * This method is used to Clear contents, formats and hyperlinks in spreadsheet.\n     *\n     * @param {ClearOptions} options - Options for clearing the content, formats and hyperlinks in spreadsheet.\n     * @returns {void} - To Clear contents, formats and hyperlinks.\n     */\n    Workbook.prototype.clear = function (options) {\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.clear, options);\n    };\n    /**\n     * Gets the formatted text of the cell.\n     *\n     * {% codeBlock src='spreadsheet/getDisplayText/index.md' %}{% endcodeBlock %}\n     *\n     * @param {CellModel} cell - Specifies the cell.\n     * @returns {string} - To get Display Text.\n     */\n    Workbook.prototype.getDisplayText = function (cell) {\n        if (!cell) {\n            return '';\n        }\n        if (cell.format && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cell.value)) {\n            var eventArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell,\n                skipFormatCheck: true };\n            this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.getFormattedCellObject, eventArgs);\n            return eventArgs.formattedText;\n        }\n        else if (!cell.value && cell.hyperlink) {\n            return typeof cell.hyperlink === 'string' ? cell.hyperlink : cell.hyperlink.address;\n        }\n        else {\n            return cell.value || typeof cell.value === 'number' ? cell.value.toString() : '';\n        }\n    };\n    /**\n     * This method is used to freeze rows and columns after the specified cell in the Spreadsheet.\n     *\n     * @param {number} row - Specifies the freezed row count.\n     * @param {number} column - Specifies the freezed column count.\n     * @param {number | string} sheet - Specifies the sheet name or index in which the freeze operation will perform. By default,\n     * active sheet will be considered.\n     * {% codeBlock src='spreadsheet/freezePanes/index.md' %}{% endcodeBlock %}\n     * @returns {void}\n     */\n    Workbook.prototype.freezePanes = function (row, column, sheet) {\n        if (row === void 0) { row = 1; }\n        if (column === void 0) { column = 1; }\n        var model = this.getSheetModel(sheet);\n        if (!this.allowFreezePane || (model.frozenRows === row && model.frozenColumns === column)) {\n            return;\n        }\n        this.setSheetPropertyOnMute(model, 'frozenRows', row);\n        this.setSheetPropertyOnMute(model, 'frozenColumns', column);\n        this.updateTopLeftCell();\n        if (model.id === this.getActiveSheet().id && this.getModuleName() === 'spreadsheet') {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            this.renderModule.refreshSheet();\n        }\n    };\n    /**\n     * This method is used to unfreeze the frozen rows and columns from the active sheet.\n     *\n     * @param {number | string} sheet - Specifies the sheet name or index in which the unfreeze operation will perform. By default,\n     * active sheet will be considered.\n     * {% codeBlock src='spreadsheet/unfreezePanes/index.md' %}{% endcodeBlock %}\n     * @returns {void}\n     * @deprecated This method is deprecated, use `unfreezePanes` method to unfreeze the frozen rows and columns.\n     */\n    Workbook.prototype.Unfreeze = function (sheet) {\n        this.freezePanes(0, 0, sheet);\n    };\n    /**\n     * This method is used to unfreeze the frozen rows and columns from spreadsheet.\n     *\n     * @param {number | string} sheet - Specifies the sheet name or index in which the unfreeze operation will perform. By default,\n     * active sheet will be considered.\n     * {% codeBlock src='spreadsheet/unfreezePanes/index.md' %}{% endcodeBlock %}\n     * @returns {void}\n     */\n    Workbook.prototype.unfreezePanes = function (sheet) {\n        this.freezePanes(0, 0, sheet);\n    };\n    /**\n     * The `calculateNow` method is used to calculate any uncalculated formulas in a spreadsheet.\n     * This method accepts an option to specify whether the calculation should be performed for the entire workbook or a specific sheet.\n     *\n     * @param {string} [scope] - Specifies the scope of the calculation. Acceptable values are `Sheet` or `Workbook`.\n     * If not provided, the default scope is `Sheet`.\n     * * `Sheet`: Calculates formulas only on the current sheet or a specified sheet.\n     * * `Workbook`: Calculates formulas across the entire workbook.\n     * @param {number | string} [sheet] - The index or name of the sheet to calculate if the scope is set to `Sheet`.\n     * If not provided and the scope is `Sheet`, the current active sheet will be used.\n     * @returns {Promise<void>} - A promise that resolves when the calculation is complete.\n     * The promise does not return a specific value, but it can be used to perform actions after the calculation has finished.\n     */\n    Workbook.prototype.calculateNow = function (scope, sheet) {\n        var sheets;\n        if (scope === 'Workbook' && this.calculationMode === 'Manual') {\n            scope = 'CalculateWorkbook';\n            this.setProperties({ calculationMode: 'Automatic' }, true);\n        }\n        if (scope === 'Workbook' || scope === 'CalculateWorkbook') {\n            sheets = this.sheets;\n        }\n        else {\n            if (typeof sheet === 'string') {\n                sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndex)(this, sheet);\n            }\n            else {\n                sheet = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sheet) ? this.activeSheetIndex : sheet;\n            }\n            sheets = [(0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, sheet)];\n        }\n        var calcArgs = { action: 'calculateNow',\n            scope: scope, sheets: sheets, promise: new Promise(function (resolve) { resolve((function () { })()); }) };\n        this.notify(_common_event__WEBPACK_IMPORTED_MODULE_5__.workbookFormulaOperation, calcArgs);\n        return calcArgs.promise;\n    };\n    /**\n     * @param {number} top - Specifies the top.\n     * @param {number} left - Specifies the fleft.\n     * @param {string} model - Specifies the model.\n     * @param {SheetModel} sheet - Specifies the sheet.\n     * @returns {void}\n     * @hidden\n     */\n    Workbook.prototype.updateTopLeftCell = function (top, left, model, sheet) {\n        if (!sheet) {\n            sheet = this.getActiveSheet();\n        }\n        var indexes = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.topLeftCell);\n        if (sheet.frozenRows || sheet.frozenColumns) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(top) || top < 0) {\n                top = sheet.frozenRows ? 0 : indexes[0];\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(left) || left < 0) {\n                left = sheet.frozenColumns ? 0 : indexes[1];\n            }\n            top += this.frozenRowCount(sheet);\n            left += this.frozenColCount(sheet);\n            if (model) {\n                if (model === 'row') {\n                    top = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.paneTopLeftCell)[0];\n                }\n                else {\n                    left = (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.paneTopLeftCell)[1];\n                }\n            }\n            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(top, left));\n            if (sheet.frozenRows) {\n                top = indexes[0];\n            }\n            if (sheet.frozenColumns) {\n                left = indexes[1];\n            }\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(top)) {\n                top = indexes[0];\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(left)) {\n                left = indexes[1];\n            }\n            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(top, left));\n        }\n        this.setSheetPropertyOnMute(sheet, 'topLeftCell', (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(top, left));\n    };\n    /**\n     * @hidden\n     * @param {string} address - Specifies the address.\n     * @returns {number | number[]} - To get address info.\n     */\n    Workbook.prototype.getAddressInfo = function (address) {\n        return (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getAddressInfo)(this, address);\n    };\n    /**\n     * @hidden\n     * @param {SheetModel} sheet - Specifies the sheet.\n     * @param {string} prop - Specifies the prop.\n     * @param {Object} value - Specifies the value.\n     * @returns {void} - To set sheet properties.\n     */\n    Workbook.prototype.setSheetPropertyOnMute = function (sheet, prop, value) {\n        this.isProtectedOnChange = true;\n        sheet[\"\" + prop] = value;\n        this.isProtectedOnChange = false;\n    };\n    /**\n     * To get frozen row count from top index.\n     *\n     * @hidden\n     * @param {SheetModel} sheet - Specifies the sheet.\n     * @returns {number} - to get the frozen count.\n     */\n    Workbook.prototype.frozenRowCount = function (sheet) {\n        return sheet.frozenRows ? (sheet.topLeftCell === 'A1' ? sheet.frozenRows : (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.topLeftCell)[0] + sheet.frozenRows)\n            : 0;\n    };\n    /**\n     * To get frozen column count from left index.\n     *\n     * @hidden\n     * @param {SheetModel} sheet - Specifies the sheet.\n     * @returns {number} - to get the frozen count.\n     */\n    Workbook.prototype.frozenColCount = function (sheet) {\n        return sheet.frozenColumns ? (sheet.topLeftCell === 'A1' ? sheet.frozenColumns : (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellIndexes)(sheet.topLeftCell)[1] +\n            sheet.frozenColumns) : 0;\n    };\n    /**\n     * To update the provided range while inserting or deleting rows and columns.\n     *\n     * @param {InsertDeleteEventArgs} args - Insert / Detele event arguments.\n     * @param {number[]} index - Existing range.\n     * @param {boolean} isRangeFormula - Specifies is range formula or not.\n     * @param {number} rowIndex - Specifies the row index of the cell that contains the formula which is going to be refreshed.\n     * @param {number} colIndex - Specifies the column index of the cell that contains the formula which is going to be refreshed.\n     * @param {boolean} isAbsoluteRef - Specifies is the range used in the formula is Absolute reference or not.\n     * @param {boolean} isSingleRangeRef - Specifies whether the formula as single range reference or not.\n     * @returns {boolean} - It return `true`, if the insert / delete action happens between the provided range, otherwise `false`.\n     * @hidden\n     */\n    Workbook.prototype.updateRangeOnInsertDelete = function (args, index, isRangeFormula, rowIndex, colIndex, isAbsoluteRef, isSingleRangeRef) {\n        var diff;\n        var updated = false;\n        if (args.isInsert) {\n            diff = (args.endIndex - args.startIndex) + 1;\n            if (args.modelType === 'Row') {\n                if (args.forceUpdate) {\n                    index[0] += 1;\n                    index[2] += 1;\n                    updated = true;\n                }\n                else {\n                    var isRangeRefresh = !isAbsoluteRef && isSingleRangeRef\n                        && index[2] === args.startIndex - 1 && rowIndex === args.startIndex && index[1] === index[3];\n                    if (args.startIndex <= index[0]) {\n                        index[0] += diff;\n                        updated = true;\n                    }\n                    if (args.startIndex <= index[2] || (isRangeFormula && args.startIndex === index[2] + 1 && isRangeRefresh)) {\n                        index[2] += diff;\n                        updated = true;\n                    }\n                }\n            }\n            else {\n                if (args.forceUpdate) {\n                    index[1] += 1;\n                    index[3] += 1;\n                    updated = true;\n                }\n                else {\n                    var isRangeRefresh = !isAbsoluteRef && isSingleRangeRef\n                        && index[3] === args.startIndex - 1 && colIndex === args.startIndex && index[0] === index[2];\n                    if (args.startIndex <= index[1]) {\n                        index[1] += diff;\n                        updated = true;\n                    }\n                    if (args.startIndex <= index[3] || (isRangeFormula && args.startIndex === index[3] + 1 && isRangeRefresh)) {\n                        index[3] += diff;\n                        updated = true;\n                    }\n                }\n            }\n        }\n        else {\n            if (args.modelType === 'Row') {\n                diff = index[0] - args.startIndex;\n                if (diff > 0) {\n                    if (index[0] > args.endIndex) {\n                        diff = (args.endIndex - args.startIndex) + 1;\n                        if (diff > 0) {\n                            index[0] -= diff;\n                            updated = true;\n                        }\n                    }\n                    else {\n                        index[0] -= diff;\n                        updated = true;\n                    }\n                }\n                if (args.startIndex <= index[2]) {\n                    if (args.endIndex <= index[2]) {\n                        index[2] -= (args.endIndex - args.startIndex) + 1;\n                    }\n                    else {\n                        index[2] -= (index[2] - args.startIndex) + 1;\n                    }\n                    updated = true;\n                }\n            }\n            else {\n                diff = index[1] - args.startIndex;\n                if (diff > 0) {\n                    if (index[1] > args.endIndex) {\n                        diff = (args.endIndex - args.startIndex) + 1;\n                        if (diff > 0) {\n                            index[1] -= diff;\n                            updated = true;\n                        }\n                    }\n                    else {\n                        index[1] -= diff;\n                        updated = true;\n                    }\n                }\n                if (args.startIndex <= index[3]) {\n                    if (args.endIndex <= index[3]) {\n                        index[3] -= (args.endIndex - args.startIndex) + 1;\n                    }\n                    else {\n                        index[3] -= (index[3] - args.startIndex) + 1;\n                    }\n                    updated = true;\n                }\n            }\n        }\n        return updated;\n    };\n    /**\n     * @param {number} rowIndex - Specifies the row index.\n     * @param {number} colIndex - Specifies the column index.\n     * @param {HTMLTableRowElement} row - Specifies the row.\n     * @returns {HTMLElement} - returns cell element.\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Workbook.prototype.getCell = function (rowIndex, colIndex, row) {\n        return null;\n    };\n    /**\n     * Used in calculate to compute integer value of date\n     *\n     * @param {Date} date - Specifies the date value.\n     * @param {boolean} isTime -Specifies is Time or not.\n     * @returns {number} - Returns integer value of date.\n     */\n    Workbook.prototype.dateToInt = function (date, isTime) {\n        return (0,_common_index__WEBPACK_IMPORTED_MODULE_4__.dateToInt)(date, isTime);\n    };\n    /**\n     * Used to update format from calculate.\n     *\n     * @param {number} sheetId - Specifies the sheetId.\n     * @param {number} rowIndex - Specifies the row index.\n     * @param {number} colIndex - Specifies the col index.\n     * @returns {void} - Update format from calculate.\n     */\n    Workbook.prototype.setDateFormat = function (sheetId, rowIndex, colIndex) {\n        var sheet = (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheet)(this, (0,_sheet__WEBPACK_IMPORTED_MODULE_1__.getSheetIndexFromId)(this, sheetId));\n        var formatType = (0,_cell__WEBPACK_IMPORTED_MODULE_6__.getCell)(rowIndex, colIndex, sheet, null, true).format;\n        if (!formatType || formatType === 'General') {\n            (0,_cell__WEBPACK_IMPORTED_MODULE_6__.setCell)(rowIndex, colIndex, sheet, { format: (0,_integrations_number_format__WEBPACK_IMPORTED_MODULE_9__.getFormatFromType)('ShortDate') }, true);\n        }\n    };\n    var Workbook_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _sheet__WEBPACK_IMPORTED_MODULE_1__.Sheet)\n    ], Workbook.prototype, \"sheets\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], Workbook.prototype, \"activeSheetIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Workbook.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowFindAndReplace\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Workbook.prototype, \"filterCollection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], Workbook.prototype, \"sortCollection\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], Workbook.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"showRibbon\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"showFormulaBar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"showSheetTabs\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowEditing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowSave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowSorting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowFiltering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowNumberFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowCellFormatting\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowHyperlink\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"enableNotes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowInsert\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowDelete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowMerge\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowDataValidation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowImage\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowChart\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowAutoFill\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowPrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Automatic')\n    ], Workbook.prototype, \"calculationMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_index__WEBPACK_IMPORTED_MODULE_4__.AutoFillSettings)\n    ], Workbook.prototype, \"autoFillSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowConditionalFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_index__WEBPACK_IMPORTED_MODULE_4__.CellStyle)\n    ], Workbook.prototype, \"cellStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Workbook.prototype, \"openUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _cell__WEBPACK_IMPORTED_MODULE_6__.OpenSettings)\n    ], Workbook.prototype, \"openSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Workbook.prototype, \"saveUrl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], Workbook.prototype, \"password\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], Workbook.prototype, \"isProtected\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _common_index__WEBPACK_IMPORTED_MODULE_4__.DefineName)\n    ], Workbook.prototype, \"definedNames\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"beforeOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"openFailure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"beforeSave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"saveComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"beforeCellFormat\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], Workbook.prototype, \"beforeCellUpdate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], Workbook.prototype, \"allowFreezePane\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(',')\n    ], Workbook.prototype, \"listSeparator\", void 0);\n    Workbook = Workbook_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], Workbook);\n    return Workbook;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/base/workbook.js?");

/***/ })

}]);