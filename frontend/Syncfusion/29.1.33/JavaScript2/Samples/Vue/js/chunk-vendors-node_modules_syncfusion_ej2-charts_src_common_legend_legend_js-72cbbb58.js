"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_common_legend_legend_js-72cbbb58"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLegend: () => (/* binding */ BaseLegend),\n/* harmony export */   LegendOptions: () => (/* binding */ LegendOptions),\n/* harmony export */   LegendSettings: () => (/* binding */ LegendSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _model_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _utils_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n/**\n * Configures the appearance and behavior of legends in charts.\n */\nvar LegendSettings = /** @class */ (function (_super) {\n    __extends(LegendSettings, _super);\n    function LegendSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], LegendSettings.prototype, \"visible\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ x: 0, y: 0 }, _model_base__WEBPACK_IMPORTED_MODULE_2__.Location)\n    ], LegendSettings.prototype, \"location\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], LegendSettings.prototype, \"position\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Series')\n    ], LegendSettings.prototype, \"mode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(8)\n    ], LegendSettings.prototype, \"padding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"itemPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Center')\n    ], LegendSettings.prototype, \"alignment\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _model_base__WEBPACK_IMPORTED_MODULE_2__.Font)\n    ], LegendSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], LegendSettings.prototype, \"shapeHeight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], LegendSettings.prototype, \"shapeWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.Border)\n    ], LegendSettings.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ left: 0, right: 0, top: 0, bottom: 0 }, _model_base__WEBPACK_IMPORTED_MODULE_2__.Margin)\n    ], LegendSettings.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ left: 0, right: 0, top: 0, bottom: 0 }, _model_base__WEBPACK_IMPORTED_MODULE_2__.ContainerPadding)\n    ], LegendSettings.prototype, \"containerPadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(8)\n    ], LegendSettings.prototype, \"shapePadding\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('transparent')\n    ], LegendSettings.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], LegendSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], LegendSettings.prototype, \"toggleVisibility\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], LegendSettings.prototype, \"enableHighlight\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"description\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(3)\n    ], LegendSettings.prototype, \"tabIndex\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _model_base__WEBPACK_IMPORTED_MODULE_2__.Font)\n    ], LegendSettings.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Top')\n    ], LegendSettings.prototype, \"titlePosition\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Normal')\n    ], LegendSettings.prototype, \"textWrap\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Ellipsis')\n    ], LegendSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(100)\n    ], LegendSettings.prototype, \"maximumTitleWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], LegendSettings.prototype, \"enablePages\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], LegendSettings.prototype, \"isInversed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], LegendSettings.prototype, \"reverse\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Auto')\n    ], LegendSettings.prototype, \"layout\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], LegendSettings.prototype, \"maximumColumns\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], LegendSettings.prototype, \"fixedWidth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _model_base__WEBPACK_IMPORTED_MODULE_2__.Accessibility)\n    ], LegendSettings.prototype, \"accessibility\", void 0);\n    return LegendSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Legend base class for Chart and Accumulation chart.\n *\n * @private\n */\nvar BaseLegend = /** @class */ (function () {\n    /**\n     * Constructor for the dateTime module.\n     *\n     * @private\n     */\n    function BaseLegend(chart) {\n        this.maxItemHeight = 0;\n        this.rowHeights = [];\n        this.pageHeights = [];\n        this.columnHeights = [];\n        this.pageXCollections = []; // pages of x locations\n        this.chartRowCount = 1;\n        this.legendTitleCollections = [];\n        this.legendRegions = [];\n        this.pagingRegions = [];\n        this.chart = chart;\n        this.legend = chart.legendSettings;\n        this.legendID = chart.element.id + '_chart_legend';\n        this.isChartControl = (chart.getModuleName() === 'chart' || chart.getModuleName() === 'chart3d');\n        this.isAccChartControl = (chart.getModuleName() === 'accumulationchart' || chart.getModuleName() === 'circularchart3d');\n        this.isBulletChartControl = (chart.getModuleName() === 'bulletChart');\n        this.isStockChartControl = (chart.getModuleName() === 'stockChart');\n        this.bulletChart = this.chart;\n        this.fivePixel = 5;\n        this.rowCount = 0;\n        this.pageButtonSize = 8;\n        this.maxColumns = 0;\n        this.maxWidth = 0;\n        this.currentPage = 1;\n        this.backwardArrowOpacity = 0;\n        this.forwardArrowOpacity = 1;\n        this.arrowWidth = (2 * (this.fivePixel + this.pageButtonSize + this.fivePixel));\n        this.arrowHeight = this.arrowWidth;\n        this.isTop = false;\n        this.isTitle = false;\n        this.currentPageNumber = 1;\n    }\n    /**\n     * Calculate the bounds for the legends.\n     *\n     * @returns {void}\n     * @private\n     */\n    BaseLegend.prototype.calculateLegendBounds = function (rect, availableSize, maxLabelSize, previousLegendBounds, pointAnimation) {\n        var legend = this.legend;\n        var defaultValue = (this.isBulletChartControl || ((this.chart.getModuleName() === 'accumulationchart' || this.chart.getModuleName() === 'chart') && (this.legend.layout !== 'Auto' || this.legend.maximumColumns > 0))) ? '40%' : '20%';\n        this.getPosition(legend.position, availableSize);\n        this.legendBounds = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(rect.x, rect.y, 0, 0);\n        this.isVertical = (this.position === 'Left' || this.position === 'Right');\n        this.itemPadding = this.legend.itemPadding ? this.legend.itemPadding : this.isVertical ? 8 : 20;\n        if (this.isVertical) {\n            this.legendBounds.height = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(legend.height, availableSize.height - (rect.y - this.chart.margin.top)) || rect.height;\n            this.legendBounds.width = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(legend.width || defaultValue, availableSize.width);\n        }\n        else {\n            this.legendBounds.width = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(legend.width, availableSize.width) || rect.width;\n            this.legendBounds.height = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.stringToNumber)(legend.height || defaultValue, availableSize.height);\n        }\n        if (this.chart.getModuleName() === 'chart3d') {\n            this.library.get3DLegendBounds(availableSize, this.legendBounds, legend);\n        }\n        else {\n            this.library.getLegendBounds(availableSize, this.legendBounds, legend);\n        }\n        if (!this.isBulletChartControl) {\n            this.legendBounds.width += (this.legend.containerPadding.left + this.legend.containerPadding.right);\n            this.legendBounds.height += (this.legend.containerPadding.top + this.legend.containerPadding.bottom);\n        }\n        this.getLocation(this.position, legend.alignment, this.legendBounds, rect, availableSize, maxLabelSize, previousLegendBounds, pointAnimation);\n    };\n    /**\n     * To find legend position based on available size for chart and accumulation chart\n     *\n     * @param position\n     * @param availableSize\n     * @param position\n     * @param availableSize\n     * @returns {void}\n     */\n    BaseLegend.prototype.getPosition = function (position, availableSize) {\n        var chart = this.chart;\n        var accumulation = this.chart;\n        if (this.isChartControl || this.isBulletChartControl || this.isStockChartControl) {\n            this.position = (position !== 'Auto') ? position : 'Bottom';\n        }\n        else {\n            if (position === 'Auto' && ((chart || accumulation).visibleSeries && (chart || accumulation).visibleSeries[0].type === 'Funnel' || (chart || accumulation).visibleSeries[0].type === 'Pyramid')) {\n                position = 'Top';\n            }\n            this.position = (position !== 'Auto') ? position :\n                (availableSize.width > availableSize.height ? 'Right' : 'Bottom');\n        }\n    };\n    /**\n     * To set bounds for chart and accumulation chart\n     *\n     * @param computedWidth\n     * @param computedHeight\n     * @param legend\n     * @param legendBounds\n     * @param computedWidth\n     * @param computedHeight\n     * @param legend\n     * @param legendBounds\n     * @param computedWidth\n     * @param computedHeight\n     * @param legend\n     * @param legendBounds\n     * @param computedWidth\n     * @param computedHeight\n     * @param legend\n     * @param legendBounds\n     * @returns {void}\n     */\n    BaseLegend.prototype.setBounds = function (computedWidth, computedHeight, legend, legendBounds) {\n        var titleHeight = legend.title && legend.titlePosition === 'Top' ? this.legendTitleSize.height + this.fivePixel : 0;\n        if (this.isVertical && this.isPaging && !legend.enablePages && !this.isBulletChartControl) {\n            titleHeight = legend.title && legend.titlePosition === 'Top' ? this.legendTitleSize.height + this.fivePixel : 0;\n            titleHeight += (this.pageButtonSize + this.fivePixel);\n        }\n        computedWidth = Math.min(computedWidth, legendBounds.width);\n        computedHeight = Math.min(computedHeight, legendBounds.height);\n        if (legend.mode === 'Gradient') {\n            legendBounds.width = legend.width ? legendBounds.width : this.isVertical ? computedWidth : 0.75 * legendBounds.width;\n            legendBounds.height = legend.height ? legendBounds.height : this.isVertical ? 0.75 * legendBounds.height : computedHeight;\n        }\n        else {\n            legendBounds.width = !legend.width ? computedWidth : legendBounds.width;\n            legendBounds.height = !legend.height ? computedHeight : legendBounds.height;\n        }\n        if (!this.isBulletChartControl) {\n            if (this.isTop && legend.titleStyle.textOverflow !== 'None') {\n                this.calculateLegendTitle(legend, legendBounds);\n                legendBounds.height += legend.titleStyle.textOverflow === 'Wrap' && this.legendTitleCollections.length > 1 ?\n                    (this.legendTitleSize.height - (this.legendTitleSize.height / this.legendTitleCollections.length)) : 0;\n            }\n        }\n        this.rowCount = Math.max(1, Math.ceil((legendBounds.height - legend.padding - titleHeight) /\n            (this.maxItemHeight + legend.padding)));\n    };\n    /**\n     * To find legend location based on position, alignment for chart and accumulation chart\n     *\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     * @param position\n     * @param alignment\n     * @param legendBounds\n     * @param rect\n     * @param availableSize\n     * @param maxLabelSize\n     */\n    BaseLegend.prototype.getLocation = function (position, alignment, legendBounds, rect, availableSize, maxLabelSize, previousLegendBounds, pointAnimation) {\n        var padding = this.legend.border.width;\n        var isBulletChart = this.isBulletChartControl;\n        var bulletChart = this.bulletChart;\n        var labelIns = bulletChart.labelPosition === 'Inside';\n        var ticklIns = bulletChart.tickPosition === 'Inside';\n        var isVertical = bulletChart.orientation === 'Vertical';\n        var categoryFieldValue = (isBulletChart && bulletChart.categoryField !== '') ?\n            maxLabelSize.width + this.chart.border.width + padding * 3 : 0;\n        var marginBottom = this.chart.margin.bottom;\n        var legendHeight = legendBounds.height + padding + this.legend.margin.top + this.legend.margin.bottom;\n        var legendWidth = legendBounds.width + padding + this.legend.margin.left + this.legend.margin.right;\n        if (position === 'Bottom') {\n            legendBounds.x = this.alignLegend(legendBounds.x, availableSize.width, legendBounds.width, alignment);\n            legendBounds.y = (previousLegendBounds && (legendBounds.height === previousLegendBounds.height || this.chart.series[0].type !== 'Pie')) ? previousLegendBounds.y : rect.y + (rect.height - legendHeight) + padding + this.legend.margin.top;\n            legendBounds.y += (isBulletChart && !bulletChart.opposedPosition && !labelIns && !ticklIns\n                && !isVertical) ? bulletChart.majorTickLines.height + marginBottom + this.legend.border.width + padding * 2 :\n                (isVertical && bulletChart.categoryField !== '') ? maxLabelSize.height + padding * 2 : 0;\n            if ((!pointAnimation || (legendBounds.height !== previousLegendBounds.height))) {\n                {\n                    (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.subtractThickness)(rect, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.Thickness(0, 0, 0, legendHeight));\n                }\n            }\n        }\n        else if (position === 'Top') {\n            var axisTextSize = void 0;\n            if (this.isChartControl) {\n                axisTextSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)('100', this.chart.verticalAxes[0].labelStyle, this.chart.themeStyle.legendLabelFont);\n            }\n            legendBounds.x = this.alignLegend(legendBounds.x, availableSize.width, legendBounds.width, alignment);\n            legendBounds.y = (previousLegendBounds && (legendBounds.height === previousLegendBounds.height || this.chart.series[0].type !== 'Pie')) ? previousLegendBounds.y : rect.y + padding + this.legend.margin.top;\n            legendBounds.y -= (isBulletChart && bulletChart.opposedPosition && !labelIns && !ticklIns &&\n                !isVertical) ? bulletChart.majorTickLines.height + this.chart.margin.top : 0;\n            legendHeight -= (isBulletChart) ? -padding * 2 : (this.isChartControl ? -padding * 2 - axisTextSize.height / 2 : 0);\n            if (!pointAnimation || (legendBounds.height !== previousLegendBounds.height)) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.subtractThickness)(rect, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.Thickness(0, 0, legendHeight, 0));\n            }\n        }\n        else if (position === 'Right') {\n            legendBounds.x = (previousLegendBounds && (legendBounds.width === previousLegendBounds.width || this.chart.series[0].type !== 'Pie')) ? previousLegendBounds.x : rect.x + (rect.width - legendBounds.width) - this.legend.margin.right;\n            legendBounds.y = rect.y + this.alignLegend(0, availableSize.height - (rect.y + marginBottom), legendBounds.height, alignment);\n            legendWidth += (isBulletChart && bulletChart.opposedPosition && !labelIns && !ticklIns &&\n                isVertical) ? (this.chart.margin.left + this.chart.margin.right + bulletChart.majorTickLines.height) : 0;\n            if (!pointAnimation || (legendBounds.width !== previousLegendBounds.width)) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.subtractThickness)(rect, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.Thickness(0, legendWidth, 0, 0));\n            }\n        }\n        else if (position === 'Left') {\n            legendBounds.x = (previousLegendBounds && (legendBounds.width === previousLegendBounds.width || this.chart.series[0].type !== 'Pie')) ? previousLegendBounds.x : legendBounds.x + this.legend.margin.left;\n            legendBounds.y = rect.y + this.alignLegend(0, availableSize.height - (rect.y + marginBottom), legendBounds.height, alignment);\n            legendWidth += (isBulletChart && !bulletChart.opposedPosition && !labelIns && !ticklIns &&\n                isVertical) ? (legendBounds.x - this.chart.margin.left + padding + bulletChart.majorTickLines.height) :\n                (bulletChart.orientation !== 'Vertical' && bulletChart.categoryField !== '') ? categoryFieldValue : 0;\n            if (!pointAnimation || (legendBounds.width !== previousLegendBounds.width)) {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.subtractThickness)(rect, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.Thickness(legendWidth, 0, 0, 0));\n            }\n        }\n        else {\n            legendBounds.x = this.legend.location.x;\n            legendBounds.y = this.legend.location.y;\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.subtractThickness)(rect, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.Thickness(0, 0, 0, 0));\n        }\n    };\n    /**\n     * To find legend alignment for chart and accumulation chart\n     *\n     * @param start\n     * @param size\n     * @param legendSize\n     * @param alignment\n     * @param start\n     * @param size\n     * @param legendSize\n     * @param alignment\n     * @param start\n     * @param size\n     * @param legendSize\n     * @param alignment\n     * @param start\n     * @param size\n     * @param legendSize\n     * @param alignment\n     */\n    BaseLegend.prototype.alignLegend = function (start, size, legendSize, alignment) {\n        switch (alignment) {\n            case 'Far':\n                start = (size - legendSize) - start;\n                break;\n            case 'Center':\n                start = ((size - legendSize) / 2);\n                break;\n        }\n        return start;\n    };\n    /**\n     * Renders the legend.\n     *\n     * @param chart\n     * @param legend\n     * @param legendBounds\n     * @param redraw\n     * @param chart\n     * @param legend\n     * @param legendBounds\n     * @param redraw\n     * @param chart\n     * @param legend\n     * @param legendBounds\n     * @param redraw\n     * @param chart\n     * @param legend\n     * @param legendBounds\n     * @param redraw\n     * @returns {void}\n     * @private\n     */\n    BaseLegend.prototype.renderLegend = function (chart, legend, legendBounds, redraw, pointAnimation) {\n        var titleHeight = 0;\n        var titlePlusArrowWidth = 0;\n        var pagingLegendBounds = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        var requireLegendBounds = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, 0, 0, 0);\n        var xValue;\n        var yValue;\n        if (pointAnimation) {\n            xValue = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getElement)(this.legendID + '_element').getAttribute('x');\n            yValue = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getElement)(this.legendID + '_element').getAttribute('y');\n        }\n        var firstLegend = this.findFirstLegendPosition(this.legendCollections);\n        var padding = legend.padding;\n        this.itemPadding = this.isBulletChartControl ? legend.padding : this.itemPadding;\n        var isPaging = legend.enablePages;\n        var titlePosition = legend.titlePosition;\n        var upArrowHeight = this.isPaging && !legend.enablePages && this.isVertical && ((chart.getModuleName() !== 'accumulationchart' && chart.getModuleName() !== 'chart') || this.legend.layout === 'Auto') ? this.pageButtonSize : 0;\n        var legendGroup = chart.renderer.createGroup({ id: this.legendID + '_g' });\n        var legendTranslateGroup = this.createLegendElements(chart, legendBounds, legendGroup, legend, this.legendID, redraw);\n        this.legendRegions = [];\n        this.chartRowCount = 1;\n        var maxHeight = 0;\n        titleHeight = !this.isTitle ? 0 : (this.isTop || this.isVertical ? this.legendTitleSize.height : 0);\n        if (this.isChartControl || (this.isAccChartControl && (!this.isVertical || (legend.layout && legend.layout !== 'Auto')))) {\n            var pageCount = 1;\n            var rowHeights = this.rowHeights[0] + ((this.isVertical || (this.rowHeights.length > 1 && this.legend.itemPadding && this.chart.getModuleName() === 'chart')) ? this.itemPadding : padding);\n            for (var i = 1; i < this.rowHeights.length; i++) {\n                if ((rowHeights + this.rowHeights[i] + (((this.isVertical || (this.rowHeights.length > 1 && this.chart.getModuleName() === 'chart')) && this.legend.itemPadding) ? this.itemPadding : padding))\n                    > (this.legendBounds.height - this.pageButtonSize - this.maxItemHeight / 2) - this.legend.containerPadding.top -\n                        this.legend.containerPadding.bottom) {\n                    this.pageHeights[pageCount - 1] = rowHeights + titleHeight;\n                    pageCount++;\n                    rowHeights = 0;\n                }\n                rowHeights += (this.rowHeights[i] + ((this.isVertical || (this.rowHeights.length > 1 && this.legend.itemPadding && this.chart.getModuleName() === 'chart')) ? this.itemPadding : padding));\n            }\n            this.pageHeights[pageCount - 1] = rowHeights + titleHeight;\n            this.totalPages = pageCount;\n        }\n        for (var i = 0; i < this.legendCollections.length; i++) {\n            if (this.legendCollections[i].text !== '') {\n                maxHeight = Math.max(this.legendCollections[i].textSize.height, maxHeight);\n                break;\n            }\n            else {\n                continue;\n            }\n        }\n        if (!this.isChartControl && !this.isAccChartControl) {\n            this.maxItemHeight = Math.max(maxHeight, legend.shapeHeight);\n        }\n        // For new legend navigation\n        if (!isPaging && this.isPaging && !this.isVertical) {\n            titlePlusArrowWidth = !this.isTitle ? 0 : titlePosition === 'Left' ? this.legendTitleSize.width : 0;\n            titlePlusArrowWidth += (this.pageButtonSize + (2 * this.fivePixel));\n        }\n        else if (this.isTitle && !this.isVertical) {\n            titlePlusArrowWidth = titlePosition === ((!this.isRtlEnable) ? 'Left' : 'Right') ? (this.fivePixel + this.legendTitleSize.width) : 0;\n        }\n        if (chart.legendSettings.mode === 'Gradient' && this.legendCollections.length > 1) {\n            this.getLinearLegend(legendBounds, chart, legend, legendTranslateGroup);\n            this.totalPages = 1;\n        }\n        else if (firstLegend !== this.legendCollections.length) {\n            var legendSeriesGroup = void 0; // legendItem group for each series group element\n            var count = 0;\n            var previousLegend = this.legendCollections[firstLegend];\n            // starting shape center x,y position && to resolve lint error used new line for declaration\n            var startPadding = this.isBulletChartControl ? padding : titlePlusArrowWidth + padding +\n                (legend.shapeWidth / 2) + legend.containerPadding.left;\n            var xLocation = (this.isBulletChartControl && !this.isRtlEnable) ? legendBounds.x + titlePlusArrowWidth +\n                padding + (legend.shapeWidth / 2) :\n                (!this.isRtlEnable) ? legendBounds.x + startPadding : legendBounds.x + ((this.chart.getModuleName() === 'accumulationchart' && this.isVertical && legend.layout === 'Auto' && !(legend.maximumColumns > 0)) ? this.maxWidth : legendBounds.width) - startPadding;\n            var start = new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.ChartLocation(xLocation, this.isBulletChartControl ? legendBounds.y + titleHeight + upArrowHeight + padding + (this.maxItemHeight / 2) :\n                legendBounds.y + titleHeight + upArrowHeight + padding + (this.maxItemHeight / 2) + legend.containerPadding.top);\n            var anchor = chart.isRtlEnabled || chart.enableRtl ? 'end' : 'start';\n            var textOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption('', start.x, start.y, anchor);\n            var textPadding = legend.shapePadding + this.itemPadding + legend.shapeWidth;\n            //  initialization for totalPages legend click totalpage again calculate\n            this.totalPages = this.totalPages = (this.isAccChartControl || this.isChartControl || this.isBulletChartControl ||\n                this.isStockChartControl) ? this.totalPages : 0;\n            this.pageXCollections = [];\n            this.legendCollections[firstLegend].location = start;\n            var legendIndex = void 0;\n            if (!legend.enablePages && this.isPaging) {\n                var x = start.x - this.fivePixel;\n                var y = start.y - this.fivePixel;\n                var leftSpace = this.isTitle && !this.isVertical && titlePosition === 'Left' ?\n                    this.legendTitleSize.width + this.fivePixel : 0;\n                var bottomSapce = this.isVertical ? (this.pageButtonSize) + Math.abs(y - legendBounds.y) : 0;\n                var rightSpace = this.isTitle && !this.isVertical && titlePosition === 'Right' ?\n                    this.legendTitleSize.width + this.fivePixel : 0;\n                rightSpace += this.isVertical ? 0 : (this.fivePixel + this.pageButtonSize + this.fivePixel);\n                pagingLegendBounds = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(x, y, legendBounds.width - rightSpace - leftSpace, legendBounds.height - bottomSapce);\n                requireLegendBounds = pagingLegendBounds;\n            }\n            else {\n                requireLegendBounds = legendBounds;\n            }\n            var legendOption = void 0;\n            for (var i = 0; i < this.legendCollections.length; i++) {\n                legendOption = this.legendCollections[i];\n                legendIndex = !this.isReverse ? count : (this.legendCollections.length - 1) - count;\n                if (this.chart.getModuleName() === 'accumulationchart') {\n                    legendOption.fill = (this.chart || this.chart || this.chart ||\n                        this.chart).visibleSeries[0].points[legendOption.pointIndex].color;\n                }\n                if (this.chart.getModuleName() === 'stockChart') {\n                    legendOption.type = this.chart.visibleSeries[count].type;\n                }\n                this.accessbilityText = (this.isBulletChartControl) ? 'Legend of bullet chart' + '' + legendOption.text\n                    : 'Click to show or hide the ' + legendOption.text + ' series';\n                if (legendOption.render && legendOption.text && legendOption.text !== '') {\n                    legendSeriesGroup = chart.renderer.createGroup({\n                        id: this.legendID + this.generateId(legendOption, '_g_', legendIndex)\n                    });\n                    if (legendSeriesGroup && (this.chart.getModuleName() === 'chart' || this.chart.getModuleName() === 'accumulationchart')) {\n                        legendSeriesGroup.setAttribute('tabindex', (i === 0 && legend.accessibility.focusable) ? String(legend.accessibility.tabIndex) : '');\n                        legendSeriesGroup.style.outline = 'none';\n                        legendSeriesGroup.setAttribute('aria-label', legend.accessibility.accessibilityDescription ? legend.accessibility.accessibilityDescription : (legendOption.text + ' series is ' + (legendOption.visible ? 'showing, press enter to hide the ' : 'hidden, press enter to show the ') + legendOption.text + ' series'));\n                        legendSeriesGroup.setAttribute('role', legend.accessibility.accessibilityRole ? legend.accessibility.accessibilityRole : 'button');\n                        legendSeriesGroup.setAttribute('aria-pressed', legendOption.visible ? 'true' : 'false');\n                    }\n                    else if (legendSeriesGroup) {\n                        legendSeriesGroup.setAttribute('tabindex', i === 0 ? '0' : '');\n                        legendSeriesGroup.style.outline = 'none';\n                        legendSeriesGroup.setAttribute('aria-label', legend.description || (legendOption.text + ' series is ' + (legendOption.visible ? 'showing, press enter to hide the ' : 'hidden, press enter to show the ') + legendOption.text + ' series'));\n                        legendSeriesGroup.setAttribute('role', 'button');\n                        legendSeriesGroup.setAttribute('aria-pressed', legendOption.visible ? 'true' : 'false');\n                    }\n                    this.library.getRenderPoint(legendOption, start, textPadding, previousLegend, requireLegendBounds, count, firstLegend);\n                    this.renderSymbol(legendOption, legendSeriesGroup, legendIndex);\n                    this.renderText(chart, legendOption, legendSeriesGroup, textOptions, count, legendIndex);\n                    if (legendSeriesGroup) {\n                        legendSeriesGroup.style.cssText =\n                            'pointer-events: bounding-box; cursor: ' + ((!legend.toggleVisibility && (chart.selectionMode === 'None' ||\n                                chart.highlightMode === 'None' ||\n                                chart.selectionMode === 'None') || this.isBulletChartControl) ? 'auto' : 'pointer');\n                    }\n                    if (legendTranslateGroup) {\n                        legendTranslateGroup.appendChild(legendSeriesGroup);\n                    }\n                    previousLegend = legendOption;\n                }\n                count++;\n            }\n            this.totalPages = (this.isPaging && !this.isBulletChartControl && !this.legend.enablePages && !this.isVertical &&\n                this.totalPages > this.chartRowCount) ? this.chartRowCount : this.totalPages;\n            this.currentPage = this.currentPage > 1 && this.currentPage > this.totalPages ? this.totalPages : this.currentPage;\n            if (this.isPaging && this.totalPages > 1) {\n                this.renderPagingElements(chart, legendBounds, textOptions, legendGroup);\n            }\n            else {\n                this.totalPages = 1;\n            }\n        }\n        if (pointAnimation) {\n            var translateX = \"translate(\" + (this.rowCount > 1 ? 0 : Math.round(Number(xValue)) - Math.round(this.legendBounds.x)) + \" \\n              + ',' + \" + (Math.round(Number(yValue)) - Math.round(this.legendBounds.y)) + \")\";\n            var translateY = \"translate(\" + (Math.round(Number(xValue)) - Math.round(this.legendBounds.x)) + \", \" + (Math.round(Number(yValue)) - Math.round(this.legendBounds.y)) + \")\";\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.appendChildElement)(chart.enableCanvas, chart.svgObject, legendGroup, redraw, true, 'x', 'y', undefined, undefined, undefined, undefined, undefined, chart.duration, undefined, undefined, new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.ChartLocation(0, 0), this.position === 'Top' || this.position === 'Bottom' ? translateX : translateY);\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.appendChildElement)(chart.enableCanvas, chart.svgObject, legendGroup, redraw);\n        }\n    };\n    /**\n     * To get linear legend.\n     *\n     * @param {Rect} legendBounds - The bounds of the legend.\n     * @param {Chart | AccumulationChart | BulletChart | StockChart | Chart3D | CircularChart3D} chart - The chart instance.\n     * @param {LegendSettingsModel} legend - The legend settings.\n     * @param {Element} legendTranslateGroup - The group element to translate the legend.\n     * @returns {void}\n     * @private\n     */\n    BaseLegend.prototype.getLinearLegend = function (legendBounds, chart, legend, legendTranslateGroup) {\n        var xmlns = 'http://www.w3.org/2000/svg';\n        var previousLegend = this.legendCollections[0];\n        var nextLegend = this.legendCollections[1];\n        var defElement = this.chart.renderer.createDefs();\n        var gradientLegendCount = 0;\n        var linerGradientEle = document.createElementNS(xmlns, 'linearGradient');\n        var opacity = 1;\n        var fillColors = [];\n        var numberItems = [];\n        if (legend.title) {\n            if (!this.isVertical) {\n                if (legend.titlePosition === 'Left') {\n                    legendBounds.x += this.legendTitleSize.width;\n                    legendBounds.width -= this.legendTitleSize.width;\n                }\n                else if (legend.titlePosition === 'Right') {\n                    legendBounds.width -= this.legendTitleSize.width;\n                }\n                else if (legend.titlePosition === 'Top') {\n                    legendBounds.y += this.legendTitleSize.height;\n                    legendBounds.height -= this.legendTitleSize.height;\n                }\n            }\n            else {\n                legendBounds.y += this.legendTitleSize.height;\n                legendBounds.height -= this.legendTitleSize.height;\n            }\n        }\n        for (var _i = 0, _a = this.chart.rangeColorSettings; _i < _a.length; _i++) {\n            var colorMap = _a[_i];\n            if (numberItems.indexOf(colorMap.start) < 0) {\n                numberItems.push(colorMap.start);\n            }\n            if (colorMap.colors.length > 2) {\n                var diffValue = (colorMap.end - colorMap.start);\n                var colorsLength = colorMap.colors.length - 1;\n                if (diffValue > 0) {\n                    diffValue = diffValue / colorsLength;\n                    for (var index = 1; index < colorsLength; index++) {\n                        var calculatedValue = colorMap.start + (diffValue * index);\n                        numberItems.push(calculatedValue);\n                    }\n                }\n                else {\n                    for (var index = 1; index < colorsLength; index++) {\n                        numberItems.push(colorMap.start);\n                    }\n                }\n            }\n            if (numberItems.indexOf(colorMap.end) < 0) {\n                numberItems.push(colorMap.end);\n            }\n            for (var _b = 0, _c = colorMap.colors; _b < _c.length; _b++) {\n                var fillColor = _c[_b];\n                if (fillColors.indexOf(fillColor) < 0) {\n                    fillColors.push(fillColor);\n                }\n            }\n            if (colorMap.colors.length > 0 && colorMap.colors.length < 2) {\n                fillColors.push(colorMap.colors[0]);\n            }\n        }\n        var x1 = this.isRtlEnable && !this.isVertical ? '100%' : '0%';\n        var x2 = this.isVertical || this.isRtlEnable ? '0%' : '100%';\n        var y2 = this.isVertical ? '100%' : '0%';\n        linerGradientEle.setAttribute('id', this.generateId(previousLegend, 'linearGradient', gradientLegendCount));\n        linerGradientEle.setAttribute('x1', x1);\n        linerGradientEle.setAttribute('y1', '0%');\n        linerGradientEle.setAttribute('x2', x2);\n        linerGradientEle.setAttribute('y2', y2);\n        var full = numberItems[numberItems.length - 1] - numberItems[0];\n        for (var b = 0; b < fillColors.length; b++) {\n            var offsetValue = numberItems[b] - numberItems[0];\n            offsetValue = offsetValue / full;\n            var stopEle = document.createElementNS(xmlns, 'stop');\n            stopEle.setAttribute('offset', offsetValue.toString());\n            stopEle.setAttribute('stop-color', fillColors[b]);\n            stopEle.setAttribute('stop-opacity', opacity.toString());\n            linerGradientEle.appendChild(stopEle);\n        }\n        var startLabel = previousLegend.text.toString();\n        var endLabel = nextLegend.text.toString();\n        var startTextSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(startLabel, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n        var endTextSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(endLabel, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n        var textWidth = startTextSize.width > endTextSize.width ? startTextSize.width : endTextSize.width;\n        var textHeight = startTextSize.height > endTextSize.height ? startTextSize.height : endTextSize.height;\n        var otherSpaces = (2 * textWidth) + (4 * legend.padding);\n        var linearBarWidth = legendBounds.width;\n        var linearBarHeight = legendBounds.height;\n        var xValue = legendBounds.x + textWidth + (2 * legend.padding);\n        var yValue = legendBounds.y + legend.padding;\n        var startLabelY;\n        var endLabelY;\n        var startLabelX;\n        var endLabelX;\n        if (this.isVertical) {\n            otherSpaces = (2 * textHeight) + (4 * legend.padding);\n            linearBarWidth = legendBounds.width - (2 * legend.padding);\n            linearBarHeight = legendBounds.height - otherSpaces;\n            xValue = legendBounds.x + legend.padding;\n            yValue = legendBounds.y + textHeight + (2 * legend.padding);\n            startLabelY = legendBounds.y + legend.padding + textHeight;\n            endLabelY = yValue + linearBarHeight + textHeight;\n            startLabelX = (legendBounds.x + (legendBounds.width * 0.5)) - (textWidth * 0.5);\n            endLabelX = startLabelX;\n            if (linearBarWidth > 30) {\n                var diffWidth = linearBarWidth - 30;\n                linearBarWidth = 30;\n                xValue = xValue + (diffWidth / 2);\n            }\n        }\n        else {\n            linearBarWidth = legendBounds.width - otherSpaces;\n            linearBarHeight = legendBounds.height - (2 * legend.padding);\n            startLabelX = legendBounds.x + ((!this.isRtlEnable) ? legend.padding + (textWidth - startTextSize.width) :\n                linearBarWidth + (3 * legend.padding) + textWidth);\n            endLabelX = legendBounds.x + ((!this.isRtlEnable) ? linearBarWidth + (3 * legend.padding) + textWidth :\n                legend.padding + (textWidth - endTextSize.width));\n            startLabelY = legendBounds.y + (legendBounds.height * 0.5) + (textHeight * 0.25);\n            endLabelY = startLabelY;\n            if (linearBarHeight > 30) {\n                var diffHeight = linearBarHeight - 30;\n                linearBarHeight = 30;\n                yValue = yValue + (diffHeight / 2);\n            }\n        }\n        var anchor = chart.enableRtl ? 'end' : '';\n        var textOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption('', startLabelX, startLabelY, anchor, startLabel);\n        var hiddenColor = '#D3D3D3';\n        textOptions.id = this.legendID + this.generateId(previousLegend, '_text_', 1);\n        var fontcolor = previousLegend.visible ? legend.textStyle.color || chart.themeStyle.legendLabelFont.color : hiddenColor;\n        var isCanvas = this.isStockChartControl ? false : this.chart.enableCanvas;\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textElement)(chart.renderer, textOptions, legend.textStyle, fontcolor, legendTranslateGroup, false, false, false, false, null, this.currentPageNumber && isCanvas ?\n            new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, -this.translatePage(isCanvas, null, this.currentPageNumber - 1, this.currentPageNumber), 0, 0) :\n            null, null, null, null, null, this.chart.themeStyle.legendLabelFont);\n        textOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption('', endLabelX, endLabelY, anchor, endLabel);\n        textOptions.id = this.legendID + this.generateId(previousLegend, '_text_', 2);\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textElement)(chart.renderer, textOptions, legend.textStyle, fontcolor, legendTranslateGroup, false, false, false, false, null, this.currentPageNumber && isCanvas ?\n            new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, -this.translatePage(isCanvas, null, this.currentPageNumber - 1, this.currentPageNumber), 0, 0) :\n            null, null, null, null, null, this.chart.themeStyle.legendLabelFont);\n        var gradientLegend = chart.renderer.drawRectangle({\n            width: linearBarWidth,\n            height: linearBarHeight,\n            x: xValue,\n            y: yValue,\n            fill: 'url(#' + this.generateId(previousLegend, 'linearGradient', gradientLegendCount) + ')'\n        });\n        defElement.appendChild(linerGradientEle);\n        legendTranslateGroup.appendChild(defElement);\n        legendTranslateGroup.appendChild(gradientLegend);\n    };\n    /**\n     * To find first valid legend text index for chart and accumulation chart\n     *\n     * @param legendCollection\n     * @returns {number}\n     * @private\n     */\n    BaseLegend.prototype.findFirstLegendPosition = function (legendCollection) {\n        var count = 0;\n        for (var _i = 0, legendCollection_1 = legendCollection; _i < legendCollection_1.length; _i++) {\n            var legend = legendCollection_1[_i];\n            if (legend.render && legend.text && legend.text !== '') {\n                break;\n            }\n            count++;\n        }\n        return count;\n    };\n    /**\n     * To get the legend title text width and height.\n     *\n     * @param legend\n     * @param legendBounds\n     */\n    BaseLegend.prototype.calculateLegendTitle = function (legend, legendBounds) {\n        if (legend.title) {\n            this.isTop = legend.titlePosition === 'Top';\n            var padding = legend.titleStyle.textOverflow === 'Trim' ? 2 * legend.padding : 0;\n            if (this.isTop || this.isVertical) {\n                this.legendTitleCollections = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getTitle)(legend.title, legend.titleStyle, (legendBounds.width - padding), this.chart.enableRtl, this.chart.themeStyle.legendTitleFont);\n            }\n            else {\n                this.legendTitleCollections[0] = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textTrim)(legend.maximumTitleWidth, legend.title, legend.titleStyle, this.chart.enableRtl, this.chart.themeStyle.legendTitleFont);\n            }\n            var text = this.isTop ? legend.title : this.legendTitleCollections[0];\n            this.legendTitleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(text, legend.titleStyle, this.chart.themeStyle.legendTitleFont);\n            this.legendTitleSize.height *= this.legendTitleCollections.length;\n        }\n        else {\n            this.legendTitleSize = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(0, 0);\n        }\n    };\n    /**\n     * Render the legend title\n     *\n     * @param chart\n     * @param legend\n     * @param legendBounds\n     * @param legendGroup\n     */\n    BaseLegend.prototype.renderLegendTitle = function (chart, legend, legendBounds, legendGroup) {\n        var padding = legend.padding;\n        var alignment = legend.titleStyle.textAlignment;\n        this.isTop = legend.titlePosition === 'Top';\n        var anchor = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getTextAnchor)(legend.titleStyle.textAlignment, chart.enableRtl);\n        var x = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.titlePositionX)(legendBounds, legend.titleStyle);\n        anchor = this.isTop || this.isVertical ? anchor : (chart.enableRtl) ? 'end' : '';\n        x = alignment === 'Near' ? (x + padding) : alignment === 'Far' ? (x - padding) : x;\n        x = (this.isTop || this.isVertical) ? x : ((legendBounds.x) + (legend.titlePosition === 'Left' ? 5 :\n            (legendBounds.width - this.legendTitleSize.width - 5)));\n        var topPadding = (legendBounds.height / 2) + (this.legendTitleSize.height / 4);\n        var y = legendBounds.y + (!this.isTop && !this.isVertical ? topPadding :\n            (this.legendTitleSize.height / this.legendTitleCollections.length));\n        var legendTitleTextOptions = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.TextOption(this.legendID + '_title', x, y, anchor, this.legendTitleCollections);\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textElement)(chart.renderer, legendTitleTextOptions, legend.titleStyle, legend.titleStyle.color ||\n            this.chart.themeStyle.legendTitleFont.color, legendGroup, null, null, null, null, null, null, null, null, null, null, this.chart.themeStyle.legendTitleFont);\n    };\n    /**\n     * To create legend rendering elements for chart and accumulation chart\n     *\n     * @param chart\n     * @param legendBounds\n     * @param legendGroup\n     * @param legend\n     * @param id\n     * @param redraw\n     */\n    BaseLegend.prototype.createLegendElements = function (chart, legendBounds, legendGroup, legend, id, redraw) {\n        var padding = legend.padding;\n        var options = new _utils_helper__WEBPACK_IMPORTED_MODULE_3__.RectOption(id + '_element', legend.background, legend.border, legend.opacity, legendBounds, 0, 0, '', this.legend.border.dashArray);\n        var legendItemsGroup = chart.renderer.createGroup({ id: id + '_collections' });\n        var isCanvas = this.isStockChartControl ? false : chart.enableCanvas;\n        var clippath = chart.renderer.createClipPath({ id: id + '_clipPath' });\n        options.width = (this.isRtlEnable && this.chart.getModuleName() === 'accumulationchart' && this.isVertical && legend.layout === 'Auto' && !(legend.maximumColumns > 0)) ? this.maxWidth : legendBounds.width;\n        if (legendGroup) {\n            legendGroup.appendChild(chart.renderer.drawRectangle(options));\n        }\n        else {\n            chart.renderer.drawRectangle(options);\n        }\n        if (legend.title) {\n            this.renderLegendTitle(chart, legend, legendBounds, legendGroup);\n        }\n        if (!isCanvas) {\n            legendGroup.appendChild(legendItemsGroup);\n        }\n        this.legendTranslateGroup = chart.renderer.createGroup({ id: id + '_translate_g' });\n        if (!isCanvas) {\n            legendItemsGroup.appendChild(this.legendTranslateGroup);\n        }\n        options.y += (this.isTop ? this.legendTitleSize.height : 0) + (!this.isBulletChartControl ? legend.containerPadding.top : 0);\n        options.height -= (this.isTop && (this.isChartControl || !this.isVertical || legend.layout !== 'Auto') ? this.legendTitleSize.height : 0) + (this.isBulletChartControl ? 0 : legend.containerPadding.top);\n        options.id += '_clipPath_rect';\n        options.width = ((!this.isChartControl && chart.getModuleName() !== 'bulletChart' && !this.isStockChartControl && !(chart.getModuleName() === 'accumulationchart' && (legend.layout !== 'Auto' || legend.maximumColumns > 0))) && this.isVertical) ? this.maxWidth - padding + legend.containerPadding.left + legend.containerPadding.right\n            : legendBounds.width;\n        if (!isCanvas) {\n            this.clipRect = chart.renderer.drawRectangle(options);\n            clippath.appendChild(this.clipRect);\n        }\n        else {\n            this.pagingClipRect = options;\n        }\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.appendChildElement)(isCanvas, chart.svgObject, clippath, redraw);\n        if (!isCanvas) {\n            legendItemsGroup.style.cssText = 'clip-path:url(#' + clippath.id + ')';\n        }\n        return this.legendTranslateGroup;\n    };\n    /**\n     * To render legend symbols for chart and accumulation chart\n     *\n     * @param legendOption\n     * @param group\n     * @param i\n     * @param legendOption\n     * @param group\n     * @param i\n     * @param legendOption\n     * @param group\n     * @param i\n     */\n    BaseLegend.prototype.renderSymbol = function (legendOption, group, legendIndex) {\n        var control = this.isBulletChartControl ? this.chart : null;\n        var symbolColor = legendOption.visible ? legendOption.fill : '#D3D3D3';\n        var isStrokeWidth = (this.chart.getModuleName() === 'chart' || this.chart.getModuleName() === 'stockChart') && (((legendOption.shape === 'SeriesType') &&\n            (legendOption.type.toLowerCase().indexOf('line') > -1) && (legendOption.type.toLowerCase().indexOf('area') === -1)) ||\n            ((legendOption.shape === 'HorizontalLine') || (legendOption.shape === 'VerticalLine') || (legendOption.shape === 'Cross')));\n        var isCustomBorder = (this.chart.getModuleName() === 'chart' || this.chart.getModuleName() === 'stockChart') &&\n            (legendOption.type === 'Scatter' || legendOption.type === 'Bubble');\n        var isCanvas = this.isStockChartControl ? false : this.chart.enableCanvas;\n        var borderColor;\n        var shape = (legendOption.shape === 'SeriesType') ? legendOption.type : legendOption.shape;\n        var strokewidth = isStrokeWidth ? (this.legend.mode === 'Series' ?\n            this.chart.visibleSeries[legendIndex].width : this.chart.visibleSeries[0].width) :\n            (this.isBulletChartControl && legendOption.shape === 'Multiply') ? 4 : 1;\n        var regionPadding;\n        shape = shape === 'Scatter' ? legendOption.markerShape : shape;\n        if (isCustomBorder && legendIndex < this.chart.visibleSeries.length) {\n            var series = this.chart.visibleSeries[legendIndex];\n            var seriesBorder = series.border;\n            var isLineShapemarker = shape === 'HorizontalLine' || shape === 'VerticalLine';\n            borderColor = isLineShapemarker ? symbolColor : seriesBorder.color ? seriesBorder.color : symbolColor;\n            strokewidth = isLineShapemarker ? series.width : seriesBorder.width ? seriesBorder.width : 1;\n        }\n        var symbolOption = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(this.legendID + this.generateId(legendOption, '_shape_', legendIndex), symbolColor, strokewidth, (isCustomBorder ? borderColor : symbolColor), this.legend.opacity, legendOption.dashArray, '');\n        var textSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendOption.text, this.legend.textStyle, this.chart.themeStyle.legendLabelFont);\n        var x = this.legend.isInversed && !this.isRtlEnable ? legendOption.location.x + textSize.width + this.legend.shapePadding\n            : legendOption.location.x;\n        var y = legendOption.location.y;\n        if (!isCanvas) {\n            group.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, shape, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.legend.shapeWidth, this.legend.shapeHeight), legendOption.url, symbolOption, this.accessbilityText, this.chart.renderer, null, this.isBulletChartControl, control));\n        }\n        else {\n            regionPadding = -this.translatePage(isCanvas, null, this.currentPageNumber - 1, this.currentPageNumber);\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, shape, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.legend.shapeWidth, this.legend.shapeHeight), '', symbolOption, this.accessbilityText, this.chart.renderer, this.currentPageNumber ? new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, regionPadding, 0, 0) : null, this.isBulletChartControl, control);\n            this.legendRegions.push({\n                rect: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(legendOption.location.x - this.legend.shapeWidth, legendOption.location.y, this.legend.shapeWidth + this.legend.shapePadding, this.legend.shapeHeight + regionPadding),\n                index: legendIndex\n            });\n        }\n        if (shape === 'Line' && legendOption.markerVisibility && legendOption.markerShape !== 'Image' ||\n            (legendOption.type === 'Doughnut' && shape === 'Doughnut')) {\n            symbolOption.id = this.legendID + this.generateId(legendOption, '_shape_marker_', legendIndex);\n            shape = legendOption.type === 'Doughnut' ? 'Circle' : legendOption.markerShape;\n            symbolOption.fill = legendOption.type === 'Doughnut' ? '#FFFFFF' : symbolOption.fill;\n            if (!isCanvas) {\n                group.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, shape, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.legend.shapeWidth / 2, this.legend.shapeHeight / 2), '', symbolOption, this.accessbilityText, null, null, this.isBulletChartControl, control));\n            }\n            else {\n                (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, shape, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(this.legend.shapeWidth / 2, this.legend.shapeHeight / 2), '', symbolOption, this.accessbilityText, this.chart.renderer, this.currentPageNumber ?\n                    new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, -this.translatePage(isCanvas, null, this.currentPageNumber - 1, this.currentPageNumber), 0, 0) : null, this.isBulletChartControl, control);\n            }\n        }\n    };\n    /**\n     * To render legend text for chart and accumulation chart\n     *\n     * @param chart\n     * @param legendOption\n     * @param group\n     * @param textOptions\n     * @param i\n     * @param chart\n     * @param legendOption\n     * @param group\n     * @param textOptions\n     * @param i\n     * @param chart\n     * @param legendOption\n     * @param group\n     * @param textOptions\n     * @param i\n     * @param chart\n     * @param legendOption\n     * @param group\n     * @param textOptions\n     * @param i\n     * @param chart\n     * @param legendOption\n     * @param group\n     * @param textOptions\n     * @param i\n     */\n    BaseLegend.prototype.renderText = function (chart, legendOption, group, textOptions, i, legendIndex) {\n        var legend = chart.legendSettings;\n        var hiddenColor = '#D3D3D3';\n        var fontcolor = legendOption.visible ? legend.textStyle.color || chart.themeStyle.legendLabelFont.color : hiddenColor;\n        var isCanvas = this.isStockChartControl ? false : this.chart.enableCanvas;\n        textOptions.id = this.legendID + this.generateId(legendOption, '_text_', legendIndex);\n        textOptions.text = legendOption.textCollection.length > 0 ? legendOption.textCollection : legendOption.text;\n        if (legend.isInversed && !this.isRtlEnable) {\n            textOptions.x = legendOption.location.x - (legend.shapeWidth / 2);\n        }\n        else if (this.isRtlEnable) {\n            var textWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont).width;\n            textOptions.x = this.chart.getModuleName() === 'bulletChart' ? legendOption.location.x - legend.shapeWidth : legendOption.location.x - ((legendOption.textCollection.length > 1 ? textWidth / legendOption.textCollection.length : textWidth) + legend.shapeWidth / 2 + legend.shapePadding);\n        }\n        else {\n            textOptions.x = legendOption.location.x + (legend.shapeWidth / 2) + legend.shapePadding;\n        }\n        textOptions.y = legendOption.location.y + this.maxItemHeight / 4;\n        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textElement)(chart.renderer, textOptions, legend.textStyle, fontcolor, group, false, false, false, false, null, this.currentPageNumber && isCanvas ?\n            new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(0, -this.translatePage(isCanvas, null, this.currentPageNumber - 1, this.currentPageNumber), 0, 0) :\n            null, null, null, null, null, this.chart.themeStyle.legendLabelFont);\n        if (isCanvas) {\n            var textSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n            var region = void 0;\n            for (var j = 0; j < this.legendRegions.length; j++) {\n                if (this.legendRegions[j].index === i) {\n                    region = this.legendRegions[j];\n                    break;\n                }\n            }\n            region.rect.y = textOptions.y < region.rect.y ? textOptions.y : region.rect.y;\n            region.rect.width += textSize.width;\n            region.rect.height = textSize.height;\n            region.rect.y -= textSize.height * 0.5;\n            region.rect.x -= (this.isRtlEnable) ? region.rect.width : 0;\n        }\n    };\n    /**\n     * To render legend paging elements for chart and accumulation chart\n     *\n     * @param chart\n     * @param bounds\n     * @param textOption\n     * @param legendGroup\n     * @param chart\n     * @param bounds\n     * @param textOption\n     * @param legendGroup\n     * @param chart\n     * @param bounds\n     * @param textOption\n     * @param legendGroup\n     * @param chart\n     * @param bounds\n     * @param textOption\n     * @param legendGroup\n     */\n    BaseLegend.prototype.renderPagingElements = function (chart, bounds, textOption, legendGroup) {\n        var paginggroup = chart.renderer.createGroup({ id: this.legendID + '_navigation' });\n        var isCanvas = this.isStockChartControl ? false : chart.enableCanvas;\n        var titleHeight = this.isBulletChartControl ? 0 : this.legendTitleSize.height;\n        var grayColor = (this.chart.theme.indexOf('Dark') > -1 || this.chart.theme.indexOf('Contrast') > -1) ? '#FFFFFF' : '#545454';\n        var legend = chart.legendSettings; // to solve parameter lint error, legend declaration is here\n        var padding = 8; // const padding for paging elements\n        var pageUp = this.legendID + (!this.isRtlEnable ? '_pageup' : '_pagedown');\n        var pageDown = this.legendID + (!this.isRtlEnable ? '_pagedown' : '_pageup');\n        var symbolOption = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.PathOption(pageUp, 'transparent', 5, grayColor, 1, '', '');\n        var iconSize = chart.availableSize.width < 110 || chart.availableSize.height < 190 ? 4 : this.pageButtonSize;\n        var legendFontSize = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('properties', legend.textStyle), null, true));\n        legendFontSize.size = (chart.availableSize.width < 110 || chart.availableSize.height < 190 && !this.isBulletChartControl && this.chart.getModuleName() === 'accumulationchart') ? '8px' : legend.textStyle.size;\n        // Page left arrow drawing calculation started here\n        var rowCount = !legend.enablePages && this.isPaging && !this.isVertical && !this.isBulletChartControl ? 1 :\n            (this.rowCount - 1);\n        var titleWidth = this.isTitle && legend.titlePosition === 'Left' ? this.legendTitleSize.width : 0;\n        this.pagingRegions = [];\n        this.backwardArrowOpacity = this.currentPage !== 1 ? 1 : 0;\n        this.forwardArrowOpacity = this.currentPage === this.totalPages ? 0 : 1;\n        if (!isCanvas) {\n            legendGroup.appendChild(paginggroup);\n        }\n        if (!this.isChartControl && !this.isAccChartControl) {\n            if (this.isBulletChartControl || this.isStockChartControl || !this.isVertical) {\n                this.totalPages = Math.ceil(this.totalPages / Math.max(1, this.rowCount - 1));\n            }\n            else {\n                this.totalPages = Math.ceil(this.totalPages / this.maxColumns);\n            }\n        }\n        if (paginggroup) {\n            paginggroup.style.cursor = 'pointer';\n        }\n        if ((this.isChartControl || this.isAccChartControl) && !(!legend.enablePages && this.isPaging)) {\n            this.clipPathHeight = this.pageHeights[0] - (this.isTitle && this.isTop && (this.isChartControl || !this.isVertical || legend.layout !== 'Auto') ? this.legendTitleSize.height : 0) -\n                legend.containerPadding.top - legend.containerPadding.bottom;\n        }\n        else {\n            this.clipPathHeight = (rowCount * (this.maxItemHeight + legend.padding));\n        }\n        //this.clipPathHeight = !(this.isChartControl) ? (rowCount * (this.maxItemHeight + legend.padding)) : this.columnHeights[0];\n        if (!isCanvas) {\n            this.clipRect.setAttribute('height', this.clipPathHeight.toString());\n        }\n        else {\n            //paging clipRect only for canvas mode\n            this.pagingClipRect.height = this.legendBounds.height - this.clipPathHeight -\n                (this.pagingClipRect.y - this.legendBounds.y) - legend.border.width;\n            this.pagingClipRect.y = this.pagingClipRect.y + this.clipPathHeight;\n            this.pagingClipRect.x += legend.border.width;\n            this.pagingClipRect.width -= (legend.border.width + legend.border.width / 2);\n            this.chart.renderer.clearRect(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(this.pagingClipRect.x, this.pagingClipRect.y, this.pagingClipRect.width, this.pagingClipRect.height));\n        }\n        var pageTextElement;\n        var x = (bounds.x + iconSize / 2);\n        var y = bounds.y + this.clipPathHeight + ((titleHeight + bounds.height - this.clipPathHeight) / 2);\n        if (this.isPaging && !legend.enablePages && !this.isVertical && !this.isBulletChartControl) {\n            x = (bounds.x + this.pageButtonSize + titleWidth);\n            y = legend.title && this.isTop ? (bounds.y + padding + titleHeight + (iconSize / 1) + 0.5) :\n                (bounds.y + padding + iconSize + 0.5);\n        }\n        var size = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.measureText)(this.totalPages + '/' + this.totalPages, legendFontSize, this.chart.themeStyle.legendLabelFont);\n        var translateX = (this.isRtlEnable) ? legend.border.width + (iconSize / 2) :\n            bounds.width - (2 * (iconSize + padding) + padding + size.width);\n        if (!isCanvas) {\n            if (this.isVertical && !legend.enablePages && !this.isBulletChartControl) {\n                x = bounds.x + (bounds.width / 2);\n                y = bounds.y + (iconSize / 2) + (padding / 2) + titleHeight;\n                symbolOption.opacity = this.backwardArrowOpacity;\n                paginggroup.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'UpArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'UpArrow'));\n            }\n            else {\n                symbolOption.opacity = this.isBulletChartControl ? symbolOption.opacity :\n                    (legend.enablePages ? 1 : !this.isRtlEnable ? this.backwardArrowOpacity : this.forwardArrowOpacity);\n                paginggroup.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'LeftArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'LeftArrow'));\n            }\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'LeftArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'LeftArrow', this.chart.renderer, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(translateX, 0, 0, 0));\n        }\n        this.pagingRegions.push(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(!this.isRtlEnable ? x + bounds.width -\n            (2 * (iconSize + padding) + padding + size.width) - iconSize * 0.5 : x, y - iconSize * 0.5, iconSize, iconSize));\n        // Page numbering rendering calculation started here\n        textOption.x = x + (iconSize / 2) + padding;\n        textOption.y = y + (size.height / 4);\n        textOption.id = this.legendID + '_pagenumber';\n        textOption.text = !this.isRtlEnable ? '1/' + this.totalPages : this.totalPages + '/1';\n        var color = (this.chart.theme.indexOf('Dark') > -1 || this.chart.theme.indexOf('Contrast') > -1) ? '#FFFFFF' : legend.textStyle.color || this.chart.theme === 'Tailwind3' ? '#111827' : this.chart.theme === 'Tailwind3Dark' ? '#FFFFFF' : this.chart.themeStyle.legendLabelFont.color;\n        if (isCanvas && this.totalNoOfPages) {\n            textOption.text = !this.isRtlEnable ? this.currentPageNumber + '/' + this.totalNoOfPages : this.totalNoOfPages + '/' + this.currentPageNumber;\n        }\n        if (legend.enablePages || this.isBulletChartControl) {\n            pageTextElement = (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.textElement)(chart.renderer, textOption, legendFontSize, color, paginggroup, false, false, false, false, null, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(translateX, 0, 0, 0), null, null, null, null, this.chart.themeStyle.legendLabelFont);\n        }\n        // Page right arrow rendering calculation started here\n        x = textOption.x + padding + (iconSize / 2) + size.width;\n        if (this.isPaging && !legend.enablePages && !this.isBulletChartControl && !this.isVertical) {\n            x = (bounds.x + bounds.width - (this.isBulletChartControl ? this.fivePixel : 0) - this.pageButtonSize - (legend.title && legend.titlePosition === 'Right' ?\n                this.legendTitleSize.width + this.fivePixel : 0));\n        }\n        symbolOption.id = pageDown;\n        symbolOption.opacity = !legend.enablePages ? !this.isRtlEnable ? this.forwardArrowOpacity : this.backwardArrowOpacity : 1;\n        if (!isCanvas) {\n            if (this.isVertical && !legend.enablePages && !this.isBulletChartControl) {\n                x = bounds.x + (bounds.width / 2);\n                y = bounds.y + bounds.height - (iconSize / 2);\n                paginggroup.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'DownArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'DownArrow'));\n            }\n            else {\n                paginggroup.appendChild((0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'RightArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'RightArrow'));\n            }\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.drawSymbol)({ x: x, y: y }, 'RightArrow', new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Size(iconSize, iconSize), '', symbolOption, 'RightArrow', this.chart.renderer, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(translateX, 0, 0, 0));\n        }\n        this.pagingRegions.push(new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_1__.Rect(!this.isRtlEnable ? x + (bounds.width -\n            (2 * (iconSize + padding) + padding + size.width) - iconSize * 0.5) : x, y - iconSize * 0.5, iconSize, iconSize));\n        if (!isCanvas && (legend.enablePages || this.isBulletChartControl)) {\n            //placing the navigation buttons and page numbering in legend right corner\n            paginggroup.setAttribute('transform', 'translate(' + translateX + ', ' + 0 + ')');\n        }\n        else {\n            if (this.currentPageNumber === 1 && this.calTotalPage && (legend.enablePages || this.isBulletChartControl)) {\n                this.totalNoOfPages = this.totalPages;\n                this.calTotalPage = false;\n            }\n            if (!legend.enablePages && !this.isBulletChartControl) { // For new legend page navigation\n                this.translatePage(isCanvas, null, this.currentPage - 1, this.currentPage, legend);\n            }\n        }\n        if (legend.enablePages || this.isBulletChartControl) {\n            this.translatePage(isCanvas, pageTextElement, this.currentPage - 1, this.currentPage, legend);\n        }\n    };\n    BaseLegend.prototype.getPageHeight = function (pageHeights, pageCount) {\n        var sum = 0;\n        for (var i = 0; i < pageCount; i++) {\n            sum += pageHeights[i] - ((this.isTitle && this.isTop) ? this.legendTitleSize.height : 0);\n        }\n        return sum;\n    };\n    /**\n     * To translate legend pages for chart and accumulation chart\n     *\n     * @param pagingText\n     * @param page\n     * @param pageNumber\n     * @param legend\n     * @param pagingText\n     * @param page\n     * @param pageNumber\n     * @param legend\n     * @param pagingText\n     * @param page\n     * @param pageNumber\n     * @param legend\n     * @param pagingText\n     * @param page\n     * @param pageNumber\n     * @param legend\n     */\n    BaseLegend.prototype.translatePage = function (isCanvas, pagingText, page, pageNumber, legend) {\n        var size = (this.isChartControl || this.isAccChartControl) ?\n            (page ? this.getPageHeight(this.pageHeights, page) : 0) : ((this.clipPathHeight) * page);\n        if (!isCanvas && (this.isChartControl || this.isAccChartControl)) {\n            this.clipRect.setAttribute('height', (this.pageHeights[page] - (this.isTitle && this.isTop && (this.isChartControl || !this.isVertical || legend.layout !== 'Auto') ? this.legendTitleSize.height : 0) - legend.containerPadding.top - legend.containerPadding.bottom).toString());\n            if (this.isAccChartControl && this.isPaging && !legend.enablePages && this.isVertical && (this.chart.getModuleName() !== 'accumulationchart' || legend.layout === 'Auto')) {\n                this.clipRect.setAttribute('height', this.legendBounds.height.toString());\n            }\n        }\n        var translate = 'translate(0,-' + size + ')';\n        if (!this.isChartControl && !this.isBulletChartControl && !this.isStockChartControl && !(this.chart.getModuleName() === 'accumulationchart' && legend.layout !== 'Auto') && this.isVertical) {\n            var pageX = this.pageXCollections[page * this.maxColumns];\n            size = (!this.isRtlEnable) ? pageX - this.legendBounds.x : (this.legendBounds.x + this.maxWidth) - pageX;\n            size = size < 0 ? 0 : size; // to avoid small pixel variation\n            translate = ((!this.isRtlEnable) ? 'translate(-' : 'translate(') + size + ',0)';\n        }\n        if (!this.chart.enableCanvas) {\n            this.legendTranslateGroup.setAttribute('transform', translate);\n        }\n        if (!this.chart.enableCanvas && (legend.enablePages || this.isBulletChartControl)) {\n            pagingText.textContent = (pageNumber) + '/' + this.totalPages;\n        }\n        this.currentPage = pageNumber;\n        return size;\n    };\n    /**\n     * To change legend pages for chart and accumulation chart\n     *\n     * @param event\n     * @param pageUp\n     * @param event\n     * @param pageUp\n     */\n    BaseLegend.prototype.changePage = function (event, pageUp) {\n        var legend = this.chart.legendSettings;\n        var backwardArrow = document.getElementById(this.legendID + '_pageup');\n        var forwardArrow = document.getElementById(this.legendID + '_pagedown');\n        var isCanvas = this.isStockChartControl ? false : this.chart.enableCanvas;\n        var pageText = (legend.enablePages || this.isBulletChartControl) ?\n            document.getElementById(this.legendID + '_pagenumber') : null;\n        var page = (legend.enablePages || this.isBulletChartControl) ? parseInt(pageText.textContent.split('/')[0], 10) :\n            this.currentPage;\n        if (pageUp && page > 1) {\n            this.translatePage(isCanvas, pageText, (page - 2), (page - 1), legend);\n        }\n        else if (!pageUp && page < this.totalPages) {\n            this.translatePage(isCanvas, pageText, page, (page + 1), legend);\n        }\n        if (this.isPaging && !legend.enablePages && !this.isBulletChartControl) {\n            if (this.currentPage === this.totalPages) {\n                this.hideArrow(forwardArrow);\n            }\n            else {\n                this.showArrow(forwardArrow);\n            }\n            if (this.currentPage === 1) {\n                this.hideArrow(backwardArrow);\n            }\n            else {\n                this.showArrow(backwardArrow);\n            }\n            // this.currentPage === this.totalPages ? this.hideArrow(forwardArrow) : this.showArrow(forwardArrow);\n            // this.currentPage === 1 ? this.hideArrow(backwardArrow) : this.showArrow(backwardArrow);\n        }\n    };\n    /**\n     * To hide the backward and forward arrow\n     *\n     * @param arrowElement\n     */\n    BaseLegend.prototype.hideArrow = function (arrowElement) {\n        arrowElement.setAttribute('opacity', '0');\n    };\n    /**\n     * To show the  backward and forward arrow\n     *\n     * @param arrowElement\n     */\n    BaseLegend.prototype.showArrow = function (arrowElement) {\n        arrowElement.setAttribute('opacity', '1');\n    };\n    /**\n     * To find legend elements id based on chart or accumulation chart\n     *\n     * @param option\n     * @param prefix\n     * @param count\n     * @param option\n     * @param prefix\n     * @param count\n     * @param option\n     * @param prefix\n     * @param count\n     * @private\n     */\n    BaseLegend.prototype.generateId = function (option, prefix, count) {\n        if (this.isChartControl || this.isStockChartControl) {\n            return prefix + count;\n        }\n        else {\n            return prefix + option.pointIndex;\n        }\n    };\n    /**\n     * To show or hide trimmed text tooltip for legend.\n     *\n     * @param event\n     * @returns {void}\n     * @private\n     */\n    BaseLegend.prototype.move = function (event) {\n        var _this = this;\n        var x = this.chart.mouseX;\n        var y = this.chart.mouseY;\n        if (event.target.textContent.indexOf('...') > -1) {\n            var targetId = event.target.id.split(this.legendID + '_text_');\n            if (targetId.length === 2) {\n                var index = parseInt(targetId[1], 10);\n                var element = this.chart.element;\n                if (!isNaN(index)) {\n                    if (this.chart.isTouch) {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(this.chart.element.id + '_EJ2_Legend_Tooltip');\n                    }\n                    if (this.isChartControl) {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.showTooltip)(this.chart.series[index].name, x, y, element.offsetWidth, element.id + '_EJ2_Legend_Tooltip', (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getElement)(this.chart.element.id + '_Secondary_Element'));\n                    }\n                    else {\n                        (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.showTooltip)((this.chart.getModuleName() === 'accumulationchart' ? this.legendCollections[index].originalText :\n                            this.chart.visibleSeries[0].points[index].x.toString()), x + 10, y + 10, element.offsetWidth, element.id + '_EJ2_Legend_Tooltip', (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.getElement)(this.chart.element.id + '_Secondary_Element'));\n                    }\n                }\n            }\n        }\n        else {\n            (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(this.chart.element.id + '_EJ2_Legend_Tooltip');\n        }\n        if (this.chart.isTouch) {\n            clearTimeout(this.clearTooltip);\n            this.clearTooltip = +setTimeout(function () { (0,_utils_helper__WEBPACK_IMPORTED_MODULE_3__.removeElement)(_this.chart.element.id + '_EJ2_Legend_Tooltip'); }, 1000);\n        }\n    };\n    return BaseLegend;\n}());\n\n/**\n * Class for legend options\n *\n * @private\n */\nvar LegendOptions = /** @class */ (function () {\n    function LegendOptions(text, fill, shape, visible, type, url, markerShape, markerVisibility, pointIndex, seriesIndex, dashArray, originalText) {\n        this.location = { x: 0, y: 0 };\n        this.textCollection = [];\n        this.text = text;\n        this.fill = fill;\n        this.shape = shape;\n        this.url = url;\n        this.visible = visible;\n        this.type = type;\n        this.markerVisibility = markerVisibility;\n        this.markerShape = markerShape;\n        this.pointIndex = pointIndex;\n        this.seriesIndex = seriesIndex;\n        this.dashArray = dashArray;\n        this.originalText = originalText;\n    }\n    return LegendOptions;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/common/legend/legend.js?");

/***/ })

}]);