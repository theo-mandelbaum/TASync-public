"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-circulargauge_src_circular-gauge_axes_pointer-renderer_js--8e37c7ed"],{

/***/ "./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/pointer-renderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/pointer-renderer.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PointerRenderer: () => (/* binding */ PointerRenderer)\n/* harmony export */ });\n/* harmony import */ var _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/helper-common */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper-common.js\");\n/* harmony import */ var _utils_helper_pointer_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/helper-pointer-renderer */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/utils/helper-pointer-renderer.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _model_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/constants */ \"./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/model/constants.js\");\n\n\n\n\n/**\n * Specifies the Axis rendering for circular gauge\n */\nvar PointerRenderer = /** @class */ (function () {\n    /**\n     * Constructor for pointer renderer.\n     *\n     * @param {CircularGauge} gauge - Specifies the instance of the gauge.\n     * @private.\n     */\n    function PointerRenderer(gauge) {\n        this.gauge = gauge;\n    }\n    /**\n     * Method to render the axis pointers of the circular gauge.\n     *\n     * @param {Axis} axis - Specifies the axis.\n     * @param {number} axisIndex - Specifies the axis index.\n     * @param {Element} element - Specifies the element.\n     * @param {CircularGauge} gauge - Specifies the instance of the gauge.\n     * @param {boolean} animate - Specifies the boolean value.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.drawPointers = function (axis, axisIndex, element, gauge, animate) {\n        var _this = this;\n        if (animate === void 0) { animate = true; }\n        var pointerElement = gauge.renderer.createGroup({\n            id: gauge.element.id + '_Axis_Pointers_' + axisIndex\n        });\n        var childElement;\n        if (this.gauge.allowComponentRender) {\n            axis.pointers.map(function (pointer, pointerIndex) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.offset) && pointer.offset.length > 0) {\n                    pointer.currentDistanceFromScale = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.stringToNumber)(pointer.offset, axis.currentRadius);\n                }\n                else {\n                    pointer.currentDistanceFromScale = pointer.offset;\n                }\n                pointer.pathElement = [];\n                _this.calculatePointerRadius(axis, pointer);\n                if (!gauge.allowPointerDrag) {\n                    gauge.allowPointerDrag = pointer.enableDrag;\n                }\n                childElement = gauge.renderer.createGroup({\n                    id: gauge.element.id + '_Axis_' + axisIndex + '_Pointer_' + pointerIndex\n                });\n                if (pointer.value != null) {\n                    childElement.setAttribute('aria-label', pointer.description || 'Pointer:' + pointer.value.toString());\n                    childElement.setAttribute('role', 'region');\n                }\n                _this['draw' + pointer.type + 'Pointer'](axis, axisIndex, pointerIndex, childElement, gauge);\n                if (_this.gauge.allowLoadingAnimation) {\n                    childElement.style.visibility = 'hidden';\n                }\n                else {\n                    _this.setPointerValue(axis, pointer, pointer.currentValue);\n                }\n                pointerElement.appendChild(childElement);\n                if (!_this.gauge.allowLoadingAnimation && ((animate || pointer.animation.enable) || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable') && (!_this.gauge.isPropertyChange || pointer.isPointerAnimation)) {\n                    pointer.previousValue = !_this.gauge.isPropertyChange ? axis.minimum : pointer.previousValue;\n                    _this.doPointerAnimation(childElement, pointer, axis, axisIndex);\n                }\n            });\n            element.appendChild(pointerElement);\n        }\n    };\n    /**\n     * Measure the pointer length of the circular gauge.\n     *\n     * @returns {void}\n     */\n    PointerRenderer.prototype.calculatePointerRadius = function (axis, pointer) {\n        var padding = 5;\n        pointer.currentRadius = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.radius) ?\n            (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.stringToNumber)(pointer.radius, axis.currentRadius) : pointer.position !== 'Auto' ?\n            this.pointerRadiusForPosition(axis, pointer) : (axis.currentRadius - (axis.farSize + padding));\n    };\n    /**\n     * Measure the pointer length of the circular gauge based on pointer position.\n     *\n     * @returns {number}\n     */\n    PointerRenderer.prototype.pointerRadiusForPosition = function (axis, pointer) {\n        if (pointer.markerShape === 'Text') {\n            var pointerRadius = void 0;\n            var pointerSize = parseInt(pointer.textStyle.size, 10);\n            var markerOffset = pointer.position === 'Cross' ? pointerSize / 5 : 0;\n            // eslint-disable-next-line prefer-const\n            pointerRadius = pointer.position === 'Inside' ?\n                (axis.currentRadius - pointerSize / 1.2 - axis.lineStyle.width / 2 - markerOffset - pointer.currentDistanceFromScale) :\n                pointer.position === 'Outside' ?\n                    (axis.currentRadius + axis.lineStyle.width / 2 + pointerSize / 4 + markerOffset +\n                        pointer.currentDistanceFromScale) :\n                    (axis.currentRadius - pointerSize / 6 - markerOffset - pointer.currentDistanceFromScale);\n            return pointerRadius;\n        }\n        else {\n            var pointerRadius = void 0;\n            var rangeBarOffset = pointer.type === 'RangeBar' ? pointer.pointerWidth : 0;\n            var markerOffset = pointer.type === 'Marker' ? ((pointer.markerShape === 'InvertedTriangle' ||\n                pointer.markerShape === 'Triangle') ? (pointer.position === 'Cross' ? pointer.markerWidth / 2 : 0) :\n                pointer.markerWidth / 2) : 0;\n            // eslint-disable-next-line prefer-const\n            pointerRadius = pointer.position === 'Inside' ?\n                (axis.currentRadius - axis.lineStyle.width / 2 - markerOffset - pointer.currentDistanceFromScale) :\n                pointer.position === 'Outside' ?\n                    (axis.currentRadius + rangeBarOffset + axis.lineStyle.width / 2 + markerOffset + pointer.currentDistanceFromScale) :\n                    (axis.currentRadius + rangeBarOffset / 2 - pointer.currentDistanceFromScale -\n                        ((pointer.markerShape === 'InvertedTriangle' || pointer.markerShape === 'Triangle') ? markerOffset : 0));\n            return pointerRadius;\n        }\n    };\n    /**\n     * Method to render the needle pointer of the ciruclar gauge.\n     *\n     * @param {Axis} axis - Specifies the axis\n     * @param {number} axisIndex - Specifies the axis index.\n     * @param {number} index - Specifies the index.\n     * @param {Element} parentElement - Specifies the parent element.\n     * @param {CircularGauge} gauge - Specifies the instance of the gauge.\n     * @returns {void}\n     */\n    PointerRenderer.prototype.drawNeedlePointer = function (axis, axisIndex, index, parentElement, gauge) {\n        var pointer = axis.pointers[index];\n        var needle = pointer.needleTail;\n        var cap = pointer.cap;\n        var pointerRadius;\n        var location;\n        var direction;\n        var needleStartWidth = pointer.needleStartWidth;\n        var needleEndWidth = pointer.needleEndWidth;\n        var mid = gauge.midPoint;\n        var width = pointer.pointerWidth / 2;\n        var rectDirection;\n        var gradientColor;\n        var gradientTailColor;\n        var gradientCapColor;\n        // To render the needle\n        location = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getLocationFromAngle)(0, pointer.currentRadius, mid);\n        if ((needleStartWidth === 0) && (needleEndWidth === 0) && width) {\n            direction = 'M ' + mid.x + ' ' + (mid.y) + ' L ' + (location.x) + ' ' + mid.y +\n                ' L ' + (mid.x) + ' ' + (mid.y) + ' Z';\n        }\n        else {\n            direction = 'M ' + mid.x + ' ' + (mid.y - width - needleEndWidth) + ' L ' + (location.x) + ' ' + (mid.y - needleStartWidth / 2) +\n                ' L ' + location.x + ' ' + (mid.y + needleStartWidth / 2) + ' L ' + mid.x + ' ' + (mid.y + width + needleEndWidth) + ' Z';\n        }\n        if (gauge.gradientModule) {\n            gradientColor = gauge.gradientModule.getGradientColorString(pointer);\n        }\n        pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_Needle_' + index, gradientColor ? gradientColor :\n            pointer.color || this.gauge.themeStyle.needleColor, pointer.border.width, pointer.border.color, null, pointer.border.dashArray, direction), parentElement, gauge));\n        // eslint-disable-next-line prefer-const\n        pointerRadius = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.stringToNumber)(pointer.needleTail.length, pointer.currentRadius);\n        // To render the rect element for touch\n        rectDirection = 'M ' + mid.x + ' ' + (mid.y - width) + ' L ' + (location.x) + ' ' + (mid.y - width) +\n            ' L ' + location.x + ' ' + (mid.y + width) + ' L ' + mid.x + ' ' + (mid.y + width);\n        // To render the needle tail\n        if (gauge.gradientModule) {\n            gradientTailColor = gauge.gradientModule.getGradientColorString(needle);\n        }\n        if (pointerRadius) {\n            location = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getLocationFromAngle)(180, pointerRadius, gauge.midPoint);\n            direction = 'M ' + mid.x + ' ' + (mid.y - width) +\n                ' L ' + (location.x) + ' ' + (mid.y - width) +\n                ' L ' + (location.x) + ' ' + (mid.y + width) +\n                ' L ' + (mid.x) + ' ' + (mid.y + width) + ' Z';\n            pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_NeedleTail_' + index, gradientTailColor ? gradientTailColor : pointer.needleTail.color || this.gauge.themeStyle.needleTailColor, pointer.needleTail.border.width, pointer.needleTail.border.color, null, pointer.needleTail.border.dashArray, direction), parentElement, gauge));\n            rectDirection += ' L ' + location.x + ' ' + (mid.y + width) + ' L ' + location.x + ' ' + (mid.y - width);\n        }\n        // To render the cap\n        if (gauge.gradientModule) {\n            gradientCapColor = gauge.gradientModule.getGradientColorString(cap);\n        }\n        if (pointer.cap.radius) {\n            pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.calculateShapes)(mid, 'Circle', new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.Size(pointer.cap.radius * 2, pointer.cap.radius * 2), '', new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_NeedleCap_' + index, gradientCapColor ? gradientCapColor : pointer.cap.color || this.gauge.themeStyle.capColor, pointer.cap.border.width, pointer.cap.border.color, null, pointer.cap.border.dashArray, '', '')), parentElement, gauge, 'Ellipse'));\n        }\n        pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_NeedleRect_' + index, 'transparent', 0, 'transpanret', null, '0', rectDirection + ' Z'), parentElement, gauge));\n    };\n    /**\n     * Method to set the pointer value of the circular gauge.\n     *\n     * @param {Axis} axis - Specifies the axis.\n     * @param {Pointer} pointer - Specifies the pointer.\n     * @param {number} value - Specifies the value.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.setPointerValue = function (axis, pointer, value) {\n        var _this = this;\n        var checkMinValue = value === axis.visibleRange.min && pointer.type === 'RangeBar';\n        var location = this.gauge.midPoint;\n        var isClockWise = axis.direction === 'ClockWise';\n        var radius = pointer.roundedCornerRadius;\n        var minRadius = (radius * 0.25);\n        if (radius > 0 && radius <= 5) {\n            radius = 6;\n            minRadius = (radius * 0.25);\n        }\n        var startAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(axis.visibleRange.min, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        var endAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(value, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        if (isClockWise) {\n            if (startAngle > endAngle) {\n                endAngle = Math.round(startAngle) === Math.round(endAngle) && !checkMinValue ?\n                    Math.round(endAngle) - (pointer.roundedCornerRadius > 0 ? 1.5 : 0.5) : Math.round(endAngle);\n            }\n            else {\n                endAngle = startAngle === endAngle && !checkMinValue ? endAngle + 1 : endAngle;\n            }\n        }\n        else {\n            endAngle = Math.round(startAngle) === Math.round(endAngle) && !checkMinValue ?\n                [startAngle, startAngle = (endAngle > startAngle ? endAngle + (pointer.roundedCornerRadius > 0 ? 1.5 : 0.5) : endAngle - 1)][0]\n                : [startAngle, startAngle = endAngle][0];\n        }\n        if (value <= (axis.visibleRange.min + axis.visibleRange.interval) && pointer.roundedCornerRadius) {\n            radius = value === axis.visibleRange.min || (axis.visibleRange.min + 1) ? 8 : radius;\n            radius /= 2;\n            minRadius = radius * 0.25;\n        }\n        var oldStartValue = ((((pointer.currentRadius - (pointer.pointerWidth / 2)) * ((startAngle * Math.PI) / 180) -\n            (radius / minRadius)) / (pointer.currentRadius - (pointer.pointerWidth / 2))) * 180) / Math.PI;\n        var oldEndValue = ((((pointer.currentRadius - (pointer.pointerWidth / 2)) * ((endAngle * Math.PI) / 180) +\n            (radius / minRadius)) / (pointer.currentRadius - (pointer.pointerWidth / 2))) * 180) / Math.PI;\n        var angleValue = value === axis.maximum && (axis.startAngle === axis.endAngle ||\n            Math.abs(axis.startAngle - axis.endAngle) === 360) && pointer.type === 'RangeBar' ? 45 : 180;\n        var roundStartAngle = ((((pointer.currentRadius) * ((startAngle * Math.PI) / angleValue) +\n            radius) / (pointer.currentRadius)) * angleValue) / Math.PI;\n        var roundEndAngle = ((((pointer.currentRadius) * ((endAngle * Math.PI) / angleValue) -\n            radius) / (pointer.currentRadius)) * angleValue) / Math.PI;\n        if (roundStartAngle > roundEndAngle && (roundStartAngle - roundEndAngle) <= 36 && pointer.type === 'RangeBar') {\n            roundStartAngle = startAngle;\n            roundEndAngle = endAngle;\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.currentRadius)) {\n            this.calculatePointerRadius(axis, pointer);\n        }\n        pointer.pathElement.map(function (element) {\n            if (pointer.type === 'RangeBar') {\n                if (radius && !checkMinValue) {\n                    element.setAttribute('d', (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getRoundedPathArc)(location, Math.floor(roundStartAngle), Math.ceil(roundEndAngle), oldStartValue, oldEndValue, pointer.currentRadius, pointer.pointerWidth, pointer.pointerWidth));\n                    radius = 0;\n                }\n                else {\n                    element.setAttribute('d', (0,_utils_helper_pointer_renderer__WEBPACK_IMPORTED_MODULE_1__.getCompleteArc)(location, startAngle, endAngle, pointer.currentRadius, (pointer.currentRadius - pointer.pointerWidth), checkMinValue));\n                }\n            }\n            else {\n                if (pointer.type === 'Marker' && pointer.markerShape === 'Text') {\n                    _this.calculateTextElement(axis, pointer, value, element);\n                }\n                else {\n                    element.setAttribute('transform', 'rotate(' + (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(value, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise) + ',' + location.x + ',' + location.y + ')');\n                }\n            }\n        });\n    };\n    /**\n     * Method to set the text value of the circular gauge.\n     *\n     * @param {Axis} axis - Specifies the axis.\n     * @param {Pointer} pointer - Specifies the pointer.\n     * @param {number} value - Specifies the value.\n     * @param {Element} element - Specifies the text element.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.calculateTextElement = function (axis, pointer, value, element) {\n        var textangle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(value, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, axis.direction === 'ClockWise');\n        var textlocation = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getLocationFromAngle)(textangle, pointer.currentRadius, this.gauge.midPoint);\n        element.setAttribute('transform', 'rotate(' + (textangle + 90) + ',' + textlocation.x + ',' + textlocation.y + ')');\n        element.setAttribute('x', String(textlocation.x));\n        element.setAttribute('y', String(textlocation.y));\n    };\n    /**\n     * Method to render the marker pointer of the ciruclar gauge.\n     *\n     * @param {Axis} axis - Specifies the axis\n     * @param {number} axisIndex - Specifies the axis index.\n     * @param {number} index - Specifies the index.\n     * @param {Element} parentElement - Specifies the parent element.\n     * @param {CircularGauge} gauge - Specifies the instance of the gauge.\n     * @returns {void}\n     */\n    PointerRenderer.prototype.drawMarkerPointer = function (axis, axisIndex, index, parentElement, gauge) {\n        var pointer = axis.pointers[index];\n        var min = axis.visibleRange.min;\n        var max = axis.visibleRange.max;\n        var gradientMarkerColor;\n        var angle = Math.round((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(pointer.value, max, min, axis.startAngle, axis.endAngle, axis.direction === 'ClockWise'));\n        var shapeBasedOnPosition = pointer.markerShape;\n        if (gauge.gradientModule) {\n            gradientMarkerColor = gauge.gradientModule.getGradientColorString(pointer);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.radius) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.position) && (pointer.markerShape === 'InvertedTriangle' ||\n            pointer.markerShape === 'Triangle')) {\n            shapeBasedOnPosition = ((pointer.position === 'Outside' || pointer.position === 'Cross') && pointer.markerShape === 'Triangle' ?\n                'InvertedTriangle' : (pointer.position === 'Inside' &&\n                pointer.markerShape === 'InvertedTriangle' ? 'Triangle' : pointer.markerShape));\n        }\n        var location = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getLocationFromAngle)((pointer.markerShape === 'Text') ? angle : 0, pointer.currentRadius, gauge.midPoint);\n        if (pointer.markerShape === 'Text') {\n            var style = {\n                size: pointer.textStyle.size,\n                color: pointer.textStyle.color || this.gauge.themeStyle.pointerColor,\n                fontFamily: pointer.textStyle.fontFamily,\n                fontStyle: pointer.textStyle.fontStyle,\n                fontWeight: pointer.textStyle.fontWeight || this.gauge.themeStyle.fontWeight,\n                opacity: pointer.textStyle.opacity\n            };\n            var textOption = new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.TextOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_Marker_' + index, location.x, location.y, 'middle', pointer.text, 'rotate(' + (angle + 90) + ',' +\n                (location.x) + ',' + location.y + ')', 'auto');\n            var textObject = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.textElement)(textOption, style, style.color, parentElement, 'pointer-events : auto; ');\n            textObject.style.visibility = ((pointer.animation.enable || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable') && (!this.gauge.isPropertyChange || pointer.isPointerAnimation) && this.gauge.animatePointer) ? 'hidden' : 'visible';\n            pointer.pathElement.push(textObject);\n        }\n        else {\n            pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.calculateShapes)(location, shapeBasedOnPosition, new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.Size(pointer.markerWidth, pointer.markerHeight), pointer.imageUrl, new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_Marker_' + index, gradientMarkerColor ? gradientMarkerColor : pointer.color || this.gauge.themeStyle.pointerColor, pointer.border.width, pointer.border.color, null, pointer.border.dashArray, '', '')), parentElement, gauge, pointer.markerShape === 'Circle' ? 'Ellipse' : (pointer.markerShape === 'Image' ? 'Image' : 'Path')));\n        }\n    };\n    /**\n     * Method to render the range bar pointer of the ciruclar gauge.\n     *\n     * @param {Axis} axis - Specifies the axis\n     * @param {number} axisIndex - Specifies the axis index.\n     * @param {number} index - Specifies the index.\n     * @param {Element} parentElement - Specifies the parent element.\n     * @param {CircularGauge} gauge - Specifies the instance of the gauge.\n     * @returns {void}\n     */\n    PointerRenderer.prototype.drawRangeBarPointer = function (axis, axisIndex, index, parentElement, gauge) {\n        var pointer = axis.pointers[index];\n        var gradientBarColor;\n        if (gauge.gradientModule) {\n            gradientBarColor = gauge.gradientModule.getGradientColorString(pointer);\n        }\n        pointer.pathElement.push((0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.appendPath)(new _utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.PathOption(gauge.element.id + '_Axis_' + axisIndex + '_Pointer_RangeBar_' + index, gradientBarColor ? gradientBarColor :\n            pointer.color || this.gauge.themeStyle.pointerColor, pointer.border.width, pointer.border.color, 1, pointer.border.dashArray, ''), parentElement, gauge));\n    };\n    /**\n     * Method to perform the animation of the pointer in circular gauge.\n     *\n     * @param {Element} pointerElement - specifies the pointer element.\n     * @param {Pointer} pointer - Specifies the pointer.\n     * @param {Axis} axis - Specifies the axis.\n     * @param {number} axisIndex - Specifies the axis index.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.doPointerAnimation = function (pointerElement, pointer, axis, axisIndex) {\n        var _this = this;\n        var startValue = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.previousValue) ? pointer.previousValue : axis.visibleRange.min;\n        var endValue = pointer.currentValue;\n        if (((pointer.animation.enable || _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable') && startValue !== endValue && this.gauge.animatePointer) ||\n            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(this.gauge.loadingAnimationDuration) && this.gauge.loadingAnimationDuration[axisIndex] > 0)) {\n            pointer.pathElement.map(function (element) {\n                if (pointer.type === 'RangeBar') {\n                    _this.performRangeBarAnimation(element, startValue, endValue, axis, pointer, axisIndex);\n                }\n                else {\n                    if (pointer.type === 'Marker' && pointer.markerShape === 'Text') {\n                        _this.performTextAnimation(pointerElement, startValue, endValue, axis, pointer, axisIndex);\n                    }\n                    else {\n                        _this.performNeedleAnimation(element, startValue, endValue, axis, pointer, axisIndex);\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @param {HTMLElement} element - specifies the element.\n     * @param {number} start - specifies the start.\n     * @param {number} end - specifies the end.\n     * @param {Axis} axis - specifies the axis.\n     * @param {Pointer} pointer - specfies the pointer.\n     * @param {number} axisIndex - Specifies the axis index.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.performTextAnimation = function (element, start, end, axis, pointer, axisIndex) {\n        var _this = this;\n        var isClockWise = axis.direction === 'ClockWise';\n        var textangle;\n        var textlocation;\n        var pointerValue = 0;\n        var timeStamp;\n        start = typeof (start) === 'string' ? parseInt(start, 10) : start;\n        end = typeof (end) === 'string' ? parseInt(end, 10) : end;\n        element = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(element.children[0]) ? element.children[0] : element;\n        var val = Math.abs(start - end);\n        new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Animation({}).animate(element, {\n            duration: this.gauge.isAnimationProgress ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.value) || pointer.value === axis.minimum ? 0 :\n                (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable' && (((!pointer.animation.enable || pointer.animation.duration === 0)\n                    && !this.gauge.allowLoadingAnimation) || (this.gauge.allowLoadingAnimation && (this.gauge.animationDuration === 0\n                    && pointer.animation.enable && pointer.animation.duration === 0)))) ? 1000 :\n                    (this.gauge.allowLoadingAnimation ? (pointer.animation.enable && pointer.animation.duration > 0 ? pointer.animation.duration\n                        : this.gauge.loadingAnimationDuration[axisIndex]) : pointer.animation.duration)) : 0,\n            progress: function (args) {\n                if (_this.gauge.isAnimationProgress) {\n                    if (args.timeStamp > args.delay) {\n                        timeStamp = (args.timeStamp / pointer.animation.duration);\n                        pointerValue = end > start ? start + (timeStamp * val) : start - (timeStamp * val);\n                        textangle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(pointerValue, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise);\n                        textlocation = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getLocationFromAngle)(textangle, pointer.currentRadius, _this.gauge.midPoint);\n                        element.setAttribute('transform', 'rotate(' + (textangle + 90) + ',' + textlocation.x + ',' + textlocation.y + ')');\n                        element.setAttribute('x', String(textlocation.x));\n                        element.setAttribute('y', String(textlocation.y));\n                        element.style.visibility = 'visible';\n                    }\n                }\n            },\n            end: function () {\n                if (_this.gauge.isAnimationProgress) {\n                    _this.setPointerValue(axis, pointer, end);\n                    pointer.isPointerAnimation = false;\n                }\n                _this.gauge.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_3__.animationComplete, { axis: axis, pointer: pointer });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.loadingAnimationDuration) && (_this.gauge.loadingAnimationDuration[axisIndex] > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.annotationsModule))) {\n                    _this.gauge.annotationsModule.annotationAnimation(_this.gauge);\n                }\n                else {\n                    _this.gauge.isOverAllAnimationComplete = true;\n                }\n            }\n        });\n    };\n    /**\n     * Perform the needle and marker pointer animation for circular gauge.\n     *\n     * @param {HTMLElement} element - Specifies the element\n     * @param {number} start - Specifies the start\n     * @param {number} end - Specifies the end\n     * @param {Axis} axis - Specifies the axis\n     * @param {Pointer} pointer - Specifies the pointer.\n     * @param {number} axisIndex - Specifies the axis index.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.performNeedleAnimation = function (element, start, end, axis, pointer, axisIndex) {\n        var _this = this;\n        var isClockWise = axis.direction === 'ClockWise';\n        start = typeof (start) === 'string' ? parseInt(start, 10) : start;\n        end = typeof (end) === 'string' ? parseInt(end, 10) : end;\n        var startAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(start, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        var pointAngle = (0,_utils_helper_common__WEBPACK_IMPORTED_MODULE_0__.getAngleFromValue)(end, axis.visibleRange.max, axis.visibleRange.min, axis.startAngle, axis.endAngle, isClockWise);\n        var endAngle = startAngle > pointAngle ? (pointAngle + 360) : pointAngle;\n        var sweepAngle;\n        new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Animation({}).animate(element, {\n            duration: this.gauge.isAnimationProgress ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.value) || pointer.value === axis.minimum ? 0 :\n                (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable' && (((!pointer.animation.enable || pointer.animation.duration === 0)\n                    && !this.gauge.allowLoadingAnimation) || (this.gauge.allowLoadingAnimation && (this.gauge.animationDuration === 0\n                    && pointer.animation.enable && pointer.animation.duration === 0)))) ? 1000 :\n                    (this.gauge.allowLoadingAnimation ? (pointer.animation.enable && pointer.animation.duration > 0 ? pointer.animation.duration\n                        : this.gauge.loadingAnimationDuration[axisIndex]) : pointer.animation.duration)) : 0,\n            progress: function (args) {\n                if (_this.gauge.isAnimationProgress) {\n                    sweepAngle = (start < end || Math.round(startAngle) === Math.round(endAngle)) ?\n                        isClockWise ? (endAngle - startAngle) : (endAngle - startAngle - 360) :\n                        isClockWise ? (endAngle - startAngle - 360) : (endAngle - startAngle);\n                    element.style.animation = 'None';\n                    if (start !== end) {\n                        element.setAttribute('transform', 'rotate(' + (0,_utils_helper_pointer_renderer__WEBPACK_IMPORTED_MODULE_1__.linear)(args.timeStamp, startAngle, sweepAngle, args.duration) + ',' +\n                            _this.gauge.midPoint.x.toString() + ',' + _this.gauge.midPoint.y.toString() + ')');\n                        element.style.visibility = 'visible';\n                    }\n                }\n            },\n            end: function () {\n                if (_this.gauge.isAnimationProgress) {\n                    _this.setPointerValue(axis, pointer, end);\n                    if (_this.gauge.animationDuration > 0) {\n                        element.style.visibility = 'visible';\n                    }\n                    pointer.isPointerAnimation = false;\n                }\n                if (pointer.type === 'Marker' || (element.id.indexOf('_Pointer_NeedleCap') >= 0)) {\n                    _this.gauge.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_3__.animationComplete, { axis: axis, pointer: pointer });\n                }\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.loadingAnimationDuration) && _this.gauge.loadingAnimationDuration[axisIndex] > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.annotationsModule)) {\n                    _this.gauge.annotationsModule.annotationAnimation(_this.gauge);\n                }\n                else {\n                    _this.gauge.isOverAllAnimationComplete = true;\n                }\n            }\n        });\n    };\n    /**\n     * Perform the range bar pointer animation for circular gauge.\n     *\n     * @param {HTMLElement} element - Specifies the element.\n     * @param {number} start - Specifies the start.\n     * @param {number} end - Specifies the end.\n     * @param {Axis} axis - Specifies the axis.\n     * @param {Pointer} pointer - Specifies the pointer.\n     * @param {number} axisIndex - Specifies the axis index.\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.performRangeBarAnimation = function (element, start, end, axis, pointer, axisIndex) {\n        var _this = this;\n        start = typeof (start) === 'string' ? parseInt(start, 10) : start;\n        end = typeof (end) === 'string' ? parseInt(end, 10) : end;\n        var pointerValue;\n        var timeStamp;\n        element.style.visibility = 'visible';\n        var val = Math.abs(start - end);\n        new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.Animation({}).animate(element, {\n            duration: this.gauge.isAnimationProgress ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(pointer.value) || pointer.value === axis.minimum ? 0 :\n                (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.animationMode === 'Enable' && (((!pointer.animation.enable || pointer.animation.duration === 0)\n                    && !this.gauge.allowLoadingAnimation) || (this.gauge.allowLoadingAnimation && (this.gauge.animationDuration === 0\n                    && pointer.animation.enable && pointer.animation.duration === 0)))) ? 1000 :\n                    (this.gauge.allowLoadingAnimation ? (pointer.animation.enable && pointer.animation.duration > 0 ? pointer.animation.duration\n                        : this.gauge.loadingAnimationDuration[axisIndex]) : pointer.animation.duration)) : 0,\n            progress: function (arg) {\n                if (_this.gauge.isAnimationProgress) {\n                    arg.duration = !_this.gauge.isAnimationProgress ? 0 : arg.duration;\n                    timeStamp = (arg.timeStamp / arg.duration);\n                    pointerValue = end > start ? start + (timeStamp * val) : start - (timeStamp * val);\n                    _this.setPointerValue(axis, pointer, pointerValue);\n                }\n            },\n            end: function () {\n                if (_this.gauge.isAnimationProgress) {\n                    _this.setPointerValue(axis, pointer, end);\n                    pointer.isPointerAnimation = false;\n                }\n                _this.gauge.trigger(_model_constants__WEBPACK_IMPORTED_MODULE_3__.animationComplete, { axis: axis, pointer: pointer });\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.loadingAnimationDuration) && _this.gauge.loadingAnimationDuration[axisIndex] > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined)(_this.gauge.annotationsModule)) {\n                    _this.gauge.annotationsModule.annotationAnimation(_this.gauge);\n                }\n                else {\n                    _this.gauge.isOverAllAnimationComplete = true;\n                }\n            }\n        });\n    };\n    /**\n     *\n     * @returns {void}\n     * @private\n     */\n    PointerRenderer.prototype.destroy = function () {\n        this.gauge = null;\n    };\n    return PointerRenderer;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-circulargauge/src/circular-gauge/axes/pointer-renderer.js?");

/***/ })

}]);