"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-charts_src_circularchart3d_circularchart3d_js-fa2bea3c"],{

/***/ "./node_modules/@syncfusion/ej2-charts/src/circularchart3d/circularchart3d.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-charts/src/circularchart3d/circularchart3d.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircularChart3D: () => (/* binding */ CircularChart3D)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _common_model_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/model/base */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/base.js\");\n/* harmony import */ var _model_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/theme */ \"./node_modules/@syncfusion/ej2-charts/src/circularchart3d/model/theme.js\");\n/* harmony import */ var _renderer_series__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer/series */ \"./node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/series.js\");\n/* harmony import */ var _common_model_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/model/data */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/data.js\");\n/* harmony import */ var _common_utils_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/utils/helper */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/helper.js\");\n/* harmony import */ var _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-svg-base */ \"./node_modules/@syncfusion/ej2-svg-base/index.js\");\n/* harmony import */ var _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./renderer/3d-renderer */ \"./node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/3d-renderer.js\");\n/* harmony import */ var _common_model_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/model/constants */ \"./node_modules/@syncfusion/ej2-charts/src/common/model/constants.js\");\n/* harmony import */ var _common_utils_print__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/utils/print */ \"./node_modules/@syncfusion/ej2-charts/src/common/utils/print.js\");\n/* harmony import */ var _legend_legend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./legend/legend */ \"./node_modules/@syncfusion/ej2-charts/src/circularchart3d/legend/legend.js\");\n/* harmony import */ var _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./user-interaction/tooltip */ \"./node_modules/@syncfusion/ej2-charts/src/circularchart3d/user-interaction/tooltip.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart file.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Represents the circular 3D chart control.\n * ```html\n * <div id=\"container\"/>\n * <script>\n *   let pie: CircularChart3D = new CircularChart3D({ });\n *   pie.appendTo(\"#container\");\n *\n * </script>\n * ```\n *\n * @public\n */\nvar CircularChart3D = /** @class */ (function (_super) {\n    __extends(CircularChart3D, _super);\n    /**\n     * Constructor for creating the circular 3D chart widget.\n     *\n     * @private\n     * @param {CircularChart3DModel} options - Specifies the instance of the circular 3D chart model.\n     * @param {string | HTMLElement} element - Specifies the element for which the circular 3D chart will be rendered\n     * @returns {void}\n     */\n    function CircularChart3D(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.chartId = 57724;\n        /** @private */\n        _this.explodeDistance = 0;\n        /** @private */\n        _this.rotateActivate = false;\n        /** @private */\n        _this.previousTargetId = '';\n        /** @private */\n        _this.currentPointIndex = 0;\n        /** @private */\n        _this.currentLegendIndex = 0;\n        /** @private */\n        _this.isLegendClicked = false;\n        /** @private */\n        _this.delayRedraw = false;\n        return _this;\n    }\n    Object.defineProperty(CircularChart3D.prototype, \"type\", {\n        get: function () {\n            return 'Pie';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * To create SVG object, renderer, and bind events for the container.\n     *\n     * @private\n     * @returns {void}\n     */\n    CircularChart3D.prototype.preRender = function () {\n        this.allowServerDataBinding = false;\n        this.unWireEvents();\n        this.titleLocation = { x: 0, y: 0, size: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(0, 0) };\n        this.subTitleLocation = { x: 0, y: 0, size: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(0, 0) };\n        this.circularRadius = [];\n        this.innerRadius = [];\n        this.matrixObj = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DMatrix();\n        this.bspTreeObj = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DBinaryTreeBuilder();\n        this.polygon = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DPolygonModule();\n        this.vector = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DVectorModule(null, null, null);\n        this.graphics = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DGraphics();\n        this.transform3D = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DTransform();\n        this.svg3DRenderer = new _renderer_3d_renderer__WEBPACK_IMPORTED_MODULE_7__.CircularChart3DSvgRenderer();\n        this.circular3DPolygon = [];\n        this.explodeDistance = 0;\n        this.setCulture();\n        this.animateSeries = true;\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-circular3dchart').length;\n            this.element.id = 'acc_chart_' + this.chartId + '_' + collection;\n        }\n        this.wireEvents();\n        this.element.setAttribute('dir', this.enableRtl ? 'rtl' : '');\n        this.element.style.outline = 'none';\n    };\n    /**\n     * Method to unbind events for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.unWireEvents = function () {\n        /** Find the Events type */\n        var isIE11Pointer = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer;\n        var start = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var move = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var stop = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';\n        /** UnBind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, move, this.chartOnMouseMove);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, stop, this.chartMouseUp);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, start, this.chartMouseDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'click', this.chartOnMouseClick);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, cancel, this.chartMouseLeave);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keydown', this.circular3DChartKeyDown);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'keyup', this.circular3DChartKeyUp);\n        window.removeEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.chartResizeBound);\n    };\n    /**\n     * Handles the mouse click on the circular 3D chart.\n     *\n     * @param {PointerEvent} e - Mouse event arguments.\n     * @returns {boolean} - Indicates whether the mouse click event was handled by the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartOnMouseClick = function (e) {\n        this.setMouseXY(e);\n        if (this.circularChartLegend3DModule && this.legendSettings.visible) {\n            this.circularChartLegend3DModule.click(e);\n        }\n        if (this.selectionMode !== 'None' && this.circularChartSelection3DModule) {\n            this.circularChartSelection3DModule.calculateSelectedElements(this, e.target, e.type);\n        }\n        if (this.visibleSeries[0].explode) {\n            var id = e.target.id;\n            var indexes = void 0;\n            var pointIndex = void 0;\n            if (id.indexOf('-point-') > -1) {\n                indexes = id.split('-series-')[1].split('-point-');\n                pointIndex = parseInt(indexes[1], 10);\n                var currentPointIndex = this.visibleSeries[0].explodeIndex;\n                if (currentPointIndex === pointIndex || this.visibleSeries[0].points[pointIndex].isExplode) {\n                    this.visibleSeries[0].explodeIndex = null;\n                    this.visibleSeries[0].isExploded = true;\n                    this.visibleSeries[0].points.forEach(function (point) {\n                        point.isExplode = false;\n                    });\n                }\n                else {\n                    this.visibleSeries[0].explodeIndex = pointIndex;\n                }\n                this.removeSeriesElements(this);\n                this.visibleSeries[0].segments = [];\n                this.circular3DPolygon = [];\n                this.renderSeries();\n                this.processSelection();\n                this.delayRedraw = true;\n            }\n        }\n        this.trigger('circularChart3DMouseClick', { target: e.target.id, x: this.mouseX, y: this.mouseY });\n        if (this.pointClick) {\n            this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.pointClick, e.target, e);\n        }\n        this.removeNavigationStyle();\n        return false;\n    };\n    /**\n     * Triggers a point event for a circular 3D chart element.\n     *\n     * @param {string} event - The type of event to trigger.\n     * @param {Element} element - The DOM element associated with the event.\n     * @param {PointerEvent | TouchEvent | undefined} e - The pointer or touch event.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.triggerPointEvent = function (event, element, e) {\n        var evt = e;\n        var point;\n        var series = this.visibleSeries[0];\n        if (element.id.indexOf('point') > -1 && element.id.indexOf('series') > -1) {\n            var pointIndex = parseInt(element.id.split('point-')[1], 10);\n            point = series.points[pointIndex];\n        }\n        if (point) {\n            this.trigger(event, {\n                series: series,\n                point: point,\n                seriesIndex: series.index, pointIndex: point.index,\n                x: this.mouseX, y: this.mouseY, pageX: evt.pageX, pageY: evt.pageY\n            });\n        }\n    };\n    /**\n     * Handles the mouse move on the circular 3D chart.\n     *\n     * @param {PointerEvent} e - Mouse event arguments.\n     * @returns {boolean} - Indicates whether the mouse move event was handled by the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartOnMouseMove = function (e) {\n        if (!(0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_svg')) {\n            return false;\n        }\n        this.setMouseXY(e);\n        this.trigger('circularChart3DMouseMove', { target: e.target.id, x: this.mouseX, y: this.mouseY });\n        if (this.rotateActivate) {\n            var deltaX = this.previousCoords.x - this.mouseX;\n            var deltaY = this.previousCoords.y - this.mouseY;\n            if (deltaX || deltaY) {\n                this.tilt -= deltaY;\n                this.rotation += deltaX;\n                if (!this.isTouch) {\n                    var grpElement = document.getElementById(this.groupElement.id);\n                    grpElement.innerHTML = '';\n                    grpElement.remove();\n                }\n                var size = { width: this.availableSize.width, height: this.availableSize.height };\n                this.graphics.view(this.svgObject, this, this.rotation, this.tilt, size, 0, this.depth);\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.appendChildElement)(false, this.svgObject, this.groupElement, this.redraw);\n                this.setSeriesTabIndex();\n                this.previousCoords.y = this.mouseY;\n                this.previousCoords.x = this.mouseX;\n                if (this.circularChartHighlight3DModule && this.highlightMode !== 'None') {\n                    this.circularChartHighlight3DModule.calculateSelectedElements(this, document.getElementById(this.element.id + '-border'), 'mousemove');\n                    this.circularChartHighlight3DModule.previousSelectedElement = [];\n                }\n                this.processSelection();\n            }\n        }\n        if (this.pointMove) {\n            this.triggerPointEvent(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.pointMove, e.target, e);\n        }\n        if (this.tooltip.enable && this.circularChartTooltip3DModule) {\n            this.circularChartTooltip3DModule.mouseMoveHandler(e, this);\n        }\n        if (!this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY);\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, e);\n        return false;\n    };\n    /**\n     * Displays a tooltip for the given event at the specified coordinates.\n     *\n     * @param {Event} event - The event triggering the tooltip display.\n     * @param {number} x - The x-coordinate for the tooltip position.\n     * @param {number} y - The y-coordinate for the tooltip position.\n     * @param {boolean} isTouch - Optional parameter indicating whether the event is a touch event. Defaults to false if not provided.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.titleTooltip = function (event, x, y, isTouch) {\n        var targetId = event.target.id;\n        var id = (targetId === (this.element.id + '-title') || targetId === (this.element.id + '-sub-title') ||\n            targetId === (this.element.id + '_chart_legend_title'));\n        if ((event.target.textContent.indexOf('...') > -1) && id) {\n            var title = (targetId === (this.element.id + '-title')) ?\n                this.title : (targetId === (this.element.id + '-sub-title')) ? this.subTitle : this.legendSettings.title;\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.showTooltip)(title, x, y, this.element.offsetWidth, this.element.id + '_EJ2_Title_Tooltip', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_Secondary_Element'), isTouch);\n        }\n        else {\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)(this.element.id + '_EJ2_Title_Tooltip');\n        }\n    };\n    /**\n     * Sets the mouse x and y coordinates based on the specified pointer event.\n     *\n     * @param {PointerEvent} e - Specifies the pointer event.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setMouseXY = function (e) {\n        var pageX;\n        var pageY;\n        var svgRectElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_svg');\n        if (svgRectElement && this.element) {\n            var svgRect = svgRectElement.getBoundingClientRect();\n            var rect = this.element.getBoundingClientRect();\n            if (e.type.indexOf('touch') > -1) {\n                this.isTouch = true;\n                var touchArg = e;\n                pageY = touchArg.changedTouches[0].clientY;\n                pageX = touchArg.changedTouches[0].clientX;\n            }\n            else {\n                this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';\n                pageX = e.clientX;\n                pageY = e.clientY;\n            }\n            this.mouseY = (pageY - rect.top) - Math.max(svgRect.top - rect.top, 0);\n            this.mouseX = (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);\n        }\n    };\n    /**\n     * Method to bind events for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.wireEvents = function () {\n        if (!this.element) {\n            return;\n        }\n        /** Find the Events type */\n        var isIE11Pointer = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer;\n        var start = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent;\n        var stop = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent;\n        var move = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent;\n        var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';\n        /** Bind the Event handler */\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, move, this.chartOnMouseMove, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, stop, this.chartMouseUp, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, start, this.chartMouseDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'click', this.chartOnMouseClick, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, cancel, this.chartMouseLeave, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.circular3DChartKeyDown, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keyup', this.circular3DChartKeyUp, this);\n        this.chartResizeBound = this.chartResize.bind(this);\n        window.addEventListener((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.chartResizeBound);\n        //new Touch(this.element); // To avoid geasture blocking for browser\n        /** Apply the style for chart */\n        this.setStyle(this.element);\n    };\n    /**\n     * Handles the mouse leave on circular 3D chart.\n     *\n     * @param {PointerEvent} e - Mouse event arguments.\n     * @returns {boolean} - Indicates the mouse leave event for the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartMouseLeave = function (e) {\n        this.setMouseXY(e);\n        this.trigger('circularChart3DMouseLeave', { target: e.target.id, x: this.mouseX, y: this.mouseY });\n        if (this.tooltip.enable && this.circularChartTooltip3DModule) {\n            this.circularChartTooltip3DModule.mouseLeaveHandler();\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isPointer ? 'pointerleave' : 'mouseleave', e);\n        this.rotateActivate = false;\n        return false;\n    };\n    /**\n     * Handles the mouse end event for the circular 3D chart.\n     *\n     * @param {PointerEvent} e - Mouse event arguments.\n     * @returns {boolean} - Indicates the mouse end event for the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartMouseUp = function (e) {\n        this.setMouseXY(e);\n        this.trigger('circularChart3DMouseUp', { target: e.target.id, x: this.mouseX, y: this.mouseY });\n        if (this.isTouch) {\n            this.titleTooltip(e, this.mouseX, this.mouseY, this.isTouch);\n        }\n        this.rotateActivate = false;\n        if (this.tooltip.enable && this.circularChartTooltip3DModule) {\n            this.circularChartTooltip3DModule.mouseUpHandler(e, this);\n        }\n        this.notify(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, e);\n        return false;\n    };\n    /**\n     * Handles the mouse start event on the circular 3D chart.\n     *\n     * @param {PointerEvent} e - Mouse event arguments.\n     * @returns {boolean} - Indicates whether the mouse start event was handled by the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartMouseDown = function (e) {\n        this.setMouseXY(e);\n        this.trigger('circularChart3DMouseDown', { target: e.target.id, x: this.mouseX, y: this.mouseY });\n        this.cachedX = this.mouseX;\n        this.cachedY = this.mouseY;\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_svg').getBoundingClientRect();\n        var bounds = document.getElementById(this.element.id + '-svg-chart-3d').getBoundingClientRect();\n        var rect = { x: bounds.left - svgRect.left, y: bounds.top - svgRect.top, width: bounds.width, height: bounds.height };\n        if (this.enableRotation && (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.withInBounds)(this.mouseX, this.mouseY, rect)) {\n            this.rotateActivate = true;\n            this.previousCoords = { x: this.mouseX, y: this.mouseY };\n        }\n        return false;\n    };\n    /**\n     * Applies styles for the circular 3D chart element.\n     *\n     * @param {HTMLElement} element - Specifies the circular 3D chart element.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setStyle = function (element) {\n        element.style.touchAction = this.enableRotation ? 'none' : 'element';\n        element.style.msTouchAction = 'element';\n        element.style.msContentZooming = 'none';\n        element.style.msUserSelect = 'none';\n        element.style.webkitUserSelect = 'none';\n        element.style.position = 'relative';\n        element.style.display = 'block';\n        element.style.height = (element.style.height || (this.height && this.height.indexOf('%') === -1)) ? element.style.height : 'inherit';\n    };\n    /**\n     * Method to set the culture for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setCulture = function () {\n        this.intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n    };\n    /**\n     * Renders the circular 3D chart elements.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.render = function () {\n        var _this = this;\n        if (this.element.className.indexOf('e-circular3dchart') === -1) {\n            this.element.classList.add('e-circular3dchart');\n        }\n        this.element.setAttribute('role', 'region');\n        this.element.setAttribute('tabindex', '0');\n        this.element.setAttribute('aria-label', this.title + '. Syncfusion interactive chart.');\n        this.element.setAttribute('class', this.element.getAttribute('class') + ' e-circular3dchart-focused');\n        var loadEventData = {\n            chart: this,\n            theme: this.theme, name: _common_model_constants__WEBPACK_IMPORTED_MODULE_8__.load, cancel: false\n        };\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.load, loadEventData, function () {\n            if (!loadEventData.cancel) {\n                _this.setTheme();\n                _this.calculateVisibleSeries();\n                _this.processData();\n                _this.renderComplete();\n                _this.allowServerDataBinding = true;\n            }\n        });\n    };\n    /**\n     * Sets the theme for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setTheme = function () {\n        /** Set theme for circular 3D chart */\n        this.themeStyle = (0,_model_theme__WEBPACK_IMPORTED_MODULE_2__.getCircular3DThemeColor)(this.theme);\n    };\n    /**\n     * Processes data from the data source to find points for rendering.\n     *\n     * @param {boolean} render - A boolean value indicating whether to trigger rendering after processing the data. Default is true.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.processData = function (render) {\n        if (render === void 0) { render = true; }\n        this.seriesCounts = 0;\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.dataModule = new _common_model_data__WEBPACK_IMPORTED_MODULE_4__.Data(series.dataSource || this.dataSource, series.query);\n            series.refreshDataManager(this, render);\n        }\n    };\n    /**\n     * Refreshes the circular 3D chart.\n     *\n     * @private\n     * @returns {void}\n     */\n    CircularChart3D.prototype.refreshChart = function () {\n        this.createPieSvg();\n        this.calculateBounds();\n        this.circular3DPolygon = [];\n        this.visibleSeries[0].segments = [];\n        this.groupElement = this.renderer.createGroup({ 'id': this.element.id + '-svg-chart-3d' });\n        this.groupElement.setAttribute('role', 'region');\n        this.groupElement.setAttribute('aria-hidden', 'false');\n        this.renderElements();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)('chartmeasuretext');\n    };\n    /**\n     * Renders elements for the circular 3D chart.\n     *\n     * @private\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderElements = function () {\n        this.renderBorder();\n        this.createSecondaryElement();\n        this.renderTitle();\n        this.renderSeries();\n        this.renderLegend();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.appendChildElement)(false, this.element, this.svgObject, this.redraw);\n        this.processSelection();\n        this.setSecondaryElementPosition();\n        this.trigger('loaded', { chart: this });\n        this.setSeriesTabIndex();\n        this.doAnimation();\n        this.animateSeries = false;\n    };\n    /**\n     * Sets the tabindex attribute to '0' for the last element matching the selector pattern \"[id*='region-series-0-point-0']\".\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setSeriesTabIndex = function () {\n        var elements;\n        for (var i = 0; i < this.visibleSeries[0].points.length; i++) {\n            if (this.visibleSeries[0].points[i].visible) {\n                elements = document.querySelectorAll('[id*=\"region-series-0-point-' + this.visibleSeries[0].points[i].index + '\"]');\n                break;\n            }\n        }\n        if (elements && elements.length > 0) {\n            var element = elements[elements.length - 1];\n            element.setAttribute('tabindex', '0');\n        }\n    };\n    /**\n     * Processes the selection in the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.processSelection = function () {\n        var selectedDataIndexes = [];\n        if (this.circularChartSelection3DModule && this.selectionMode !== 'None') {\n            selectedDataIndexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.circularChartSelection3DModule.selectedDataIndexes, null, true);\n            this.circularChartSelection3DModule.invokeSelection(this);\n        }\n        if (this.circularChartHighlight3DModule) {\n            this.circularChartHighlight3DModule.invokeHighlight(this);\n        }\n        if (selectedDataIndexes.length > 0) {\n            this.circularChartSelection3DModule.selectedDataIndexes = selectedDataIndexes;\n            this.circularChartSelection3DModule.redrawSelection(this);\n        }\n    };\n    /**\n     * Performs a highlight animation on the specified HTML element with the given duration and starting opacity.\n     *\n     * @param {HTMLElement} element - The HTML element to animate.\n     * @param {number} duration - The duration of the animation in milliseconds.\n     * @param {number} startOpacity - The starting opacity value for the animation.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.highlightAnimation = function (element, duration, startOpacity) {\n        var endOpacity = parseFloat(this.visibleSeries[0].opacity.toString());\n        if (endOpacity) {\n            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({}).animate(element, {\n                duration: duration,\n                progress: function (args) {\n                    element.style.animation = '';\n                    var progress = args.timeStamp / args.duration;\n                    var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\n                    element.setAttribute('opacity', currentOpacity.toString());\n                },\n                end: function () {\n                    element.setAttribute('opacity', endOpacity.toString());\n                }\n            });\n        }\n    };\n    /**\n     * Stops the animation for the specified HTML element in the circular 3D chart.\n     *\n     * @param {HTMLElement} element - The HTML element for which the animation should be stopped.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.stopElementAnimation = function (element) {\n        var endOpacity = parseFloat(this.visibleSeries[0].opacity.toString());\n        var animation = element.getAttribute('e-animate');\n        if (animation) {\n            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation.stop(element);\n        }\n        element.setAttribute('opacity', endOpacity.toString());\n    };\n    /**\n     * Initiates and executes the animation for the circular 3D chart.\n     * This method assumes the existence of visible series and focuses on the first series for animation.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.doAnimation = function () {\n        var series = this.visibleSeries[0];\n        if (series.animation.enable && this.animateSeries) {\n            var clippath_1 = this.renderer.createClipPath({ id: this.element.id + 'SeriesGroup0' + '_clipPath' });\n            var path = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.PathOption(this.element.id + 'SeriesGroup0' + '_slice', 'transparent', 1, 'transparent', 1, '', '');\n            var clipslice = this.renderer.drawPath(path);\n            clippath_1.appendChild(clipslice);\n            this.svgObject.appendChild(clippath_1);\n            var id_1 = this.element.id;\n            var groupElementID_1 = this.groupElement.id;\n            document.querySelectorAll('[id*=\"region-series-\"]').forEach(function (slice) {\n                if (slice.parentElement.id === groupElementID_1) {\n                    slice.style.cssText = 'clip-path:url(#' + clippath_1.id + '); -webkit-clip-path:url(#' + clippath_1.id + ');';\n                    slice.setAttribute('clip-path', 'url(#' + id_1 + 'SeriesGroup0' + '_clipPath' + ')');\n                }\n            });\n            if (series.segments[0]) {\n                this.animationRect(clipslice, series);\n            }\n        }\n    };\n    /**\n     * Renders the legend for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderLegend = function () {\n        if (!this.circularChartLegend3DModule || !this.legendSettings.visible) {\n            return null;\n        }\n        if (this.circularChartLegend3DModule.legendCollections.length && this.visibleSeries[0].labelBound) {\n            this.circularChartLegend3DModule.getSmartLegendLocation(this.visibleSeries[0].labelBound, this.circularChartLegend3DModule.legendBounds, this.margin);\n        }\n        this.circularChartLegend3DModule.renderLegend(this, this.legendSettings, this.circularChartLegend3DModule.legendBounds, this.redraw);\n    };\n    /**\n     * Initiates animation for the circular 3D series.\n     *\n     * @param {Element} slice - Specifies the slice element to animate.\n     * @param {CircularChart3DSeries} series - Specifies the circular 3D chart series.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.animationRect = function (slice, series) {\n        var _this = this;\n        var startAngle = -90;\n        var duration = series.animation.duration; //this.duration ? this.duration : series.animation.duration;\n        var value;\n        var radius = Math.max(this.availableSize.height, this.availableSize.width) * 0.75;\n        radius += radius * (0.414); // formula r + r / 2 * (1.414 -1)\n        var effect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getAnimationFunction)('Linear'); // need to check animation type\n        var center = {\n            x: series.segments[0].center.x - this.rotation / 2,\n            y: series.segments[0].center.y + this.tilt / 2\n        };\n        for (var i = 0; i < series.points.length; i++) {\n            var dataLabelElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '-svg-data-label-text-' + i);\n            if (dataLabelElement) {\n                dataLabelElement.style.visibility = 'hidden';\n            }\n            var shapeElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '-svg-data-label-series-0-shape-' + i);\n            if (shapeElement) {\n                shapeElement.style.visibility = 'hidden';\n            }\n            var templateElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '-series-' + series.index + '-data-label-' + i);\n            if (templateElement) {\n                templateElement.style.visibility = 'hidden';\n            }\n            var connectorElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '-datalabel-series-0-connector-' + i);\n            if (connectorElement) {\n                connectorElement.style.visibility = 'hidden';\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(slice)) {\n            new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Animation({}).animate(slice, {\n                duration: (duration === 0 && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.animationMode === 'Enable') ? 1000 : duration,\n                delay: series.animation.delay,\n                progress: function (args) {\n                    value = effect(args.timeStamp, startAngle, 359.99999, args.duration);\n                    slice.setAttribute('d', _this.getPathArc(center, startAngle, value, radius));\n                },\n                end: function () {\n                    slice.setAttribute('d', _this.getPathArc(center, 0, 359.99999, radius));\n                    _this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.animationComplete, { series: series, chart: _this });\n                    for (var i = 0; i < series.points.length; i++) {\n                        var dataLabelElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(_this.element.id + '-svg-data-label-text-' + i);\n                        if (dataLabelElement) {\n                            dataLabelElement.style.visibility = 'visible';\n                        }\n                        var shapeElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(_this.element.id + '-svg-data-label-series-0-shape-' + i);\n                        if (shapeElement) {\n                            shapeElement.style.visibility = 'visible';\n                        }\n                        var templateElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(_this.element.id + '-series-' + series.index + '-data-label-' + i);\n                        if (templateElement) {\n                            templateElement.style.visibility = 'visible';\n                        }\n                        var connectorElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(_this.element.id + '-datalabel-series-0-connector-' + i);\n                        if (connectorElement) {\n                            connectorElement.style.visibility = 'visible';\n                        }\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Gets the path arc direction for the circular 3D chart.\n     *\n     * @param {ChartLocation} center - Specifies the center of the series segment.\n     * @param {number} start - Specifies the start angle in degrees.\n     * @param {number} end  - Specifies the end angle in degrees.\n     * @param {number} radius - Specifies the radius of the series.\n     * @returns {string} - Path arc direction as an SVG path string.\n     */\n    CircularChart3D.prototype.getPathArc = function (center, start, end, radius) {\n        var degree = end - start;\n        degree = degree < 0 ? (degree + 360) : degree;\n        var flag = (degree < 180) ? 0 : 1;\n        return this.getPiePath(center, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.degreeToLocation)(start, radius, center), (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.degreeToLocation)(end, radius, center), radius, flag);\n    };\n    /**\n     * Gets the SVG path string for a pie in the circular 3D chart.\n     *\n     * @param {ChartLocation} center - Specifies the center of the series segment.\n     * @param {ChartLocation} start - Specifies the start angle in degrees.\n     * @param {ChartLocation} end - Specifies the end angle in degrees.\n     * @param {number} radius - Specifies the radius of the series.\n     * @param {number} clockWise - Specifies the clockwise direction (0 for anti-clockwise, 1 for clockwise).\n     * @returns {string} - SVG path string for the pie.\n     */\n    CircularChart3D.prototype.getPiePath = function (center, start, end, radius, clockWise) {\n        return 'M ' + center.x + ' ' + center.y + ' L ' + start.x + ' ' + start.y + ' A ' + radius + ' ' +\n            radius + ' 0 ' + clockWise + ' 1 ' + end.x + ' ' + end.y + ' Z';\n    };\n    /**\n     * Renders the border for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderBorder = function () {\n        var padding = this.border.width;\n        var rect = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.RectOption(this.element.id + '-border', this.background || this.themeStyle.background, this.border, 1, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(padding / 2, padding / 2, this.availableSize.width - padding, this.availableSize.height - padding));\n        var htmlObject = this.renderer.drawRectangle(rect);\n        htmlObject.setAttribute('aria-hidden', 'true');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.appendChildElement)(false, this.svgObject, htmlObject, this.redraw);\n        var backGroundImage = this.backgroundImage;\n        if (backGroundImage) {\n            var image = new _common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.ImageOption(this.availableSize.height - padding, this.availableSize.width - padding, backGroundImage, 0, 0, this.element.id + '-background', 'visible', 'none');\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.appendChildElement)(false, this.svgObject, this.renderer.drawImage(image), this.redraw);\n        }\n    };\n    /**\n     * Creates the secondary element for tooltips and data labels.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.createSecondaryElement = function () {\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.redrawElement)(this.redraw, this.element.id + '_Secondary_Element') ||\n            this.createElement('div', {\n                id: this.element.id + '_Secondary_Element',\n                styles: 'position: relative'\n            });\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.appendChildElement)(false, this.element, element, this.redraw);\n    };\n    /**\n     * Renders the series for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderSeries = function () {\n        if (!this.redraw) {\n            this.svgObject.appendChild(this.renderer.createGroup({ id: this.element.id + '_SeriesCollection' }));\n        }\n        for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible && this[('pie' + 'Series3DModule')]) {\n                series.draw(series, this);\n                this.defaultLabelBound(series);\n            }\n        }\n    };\n    /**\n     * Sets the default label bounds for the specified circular 3D chart series based on its circular bounds.\n     *\n     * @param {CircularChart3DSeries} series - The CircularChart3DSeries for which to set the default label bounds.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.defaultLabelBound = function (series) {\n        if (series.segments.length > 0 && series.dataLabel.visible) {\n            var circularBound = this.getSeriesBound(series);\n            if (series.dataLabel.visible && series.dataLabel.position === 'Inside') {\n                series.labelBound = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(circularBound.x, circularBound.y, circularBound.width + circularBound.x, circularBound.height + circularBound.y);\n            }\n            series.findMaxBounds(series.labelBound, circularBound);\n            if (this.circularChartLegend3DModule) {\n                series.labelBound.x -= this.explodeDistance;\n                series.labelBound.y -= this.explodeDistance;\n                series.labelBound.height += (this.explodeDistance - series.labelBound.y);\n                series.labelBound.width += (this.explodeDistance - series.labelBound.x);\n            }\n        }\n    };\n    /**\n     * Calculates and returns the bounding rectangle (Rect) for the specified circular 3D chart series.\n     *\n     * @param {CircularChart3DSeries} series - The CircularChart3DSeries for which to calculate the bounding rectangle.\n     * @returns {Rect} - The calculated bounding rectangle for the series.\n     */\n    CircularChart3D.prototype.getSeriesBound = function (series) {\n        var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(Infinity, Infinity, -Infinity, -Infinity);\n        var start = 0;\n        var total = 360;\n        var end = (0 + total) % 360;\n        end = (end === 0) ? 360 : end;\n        series.findMaxBounds(rect, this.getRectFromAngle(start));\n        series.findMaxBounds(rect, this.getRectFromAngle(end));\n        series.findMaxBounds(rect, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(series.segments[0].center.x, series.segments[0].center.y, 0, 0));\n        var nextQuandrant = (Math.floor(start / 90) * 90 + 90) % 360;\n        var lastQuadrant = (Math.floor(end / 90) * 90) % 360;\n        lastQuadrant = (lastQuadrant === 0) ? 360 : lastQuadrant;\n        if (total >= 90 || lastQuadrant === nextQuandrant) {\n            series.findMaxBounds(rect, this.getRectFromAngle(nextQuandrant));\n            series.findMaxBounds(rect, this.getRectFromAngle(lastQuadrant));\n        }\n        if (start === 0 || (start + total >= 360)) {\n            series.findMaxBounds(rect, this.getRectFromAngle(0));\n        }\n        var length = nextQuandrant === lastQuadrant ? 0 : Math.floor(total / 90);\n        for (var i = 1; i < length; i++) {\n            nextQuandrant = nextQuandrant + 90;\n            if ((nextQuandrant < lastQuadrant || end < start) || total === 360) {\n                series.findMaxBounds(rect, this.getRectFromAngle(nextQuandrant));\n            }\n        }\n        rect.width -= rect.x;\n        rect.height -= rect.y;\n        return rect;\n    };\n    /**\n     * Computes and returns a rectangle (Rect) based on the specified angle.\n     *\n     * @param {number} angle - The angle used to calculate the rectangle position.\n     * @returns {Rect} - The calculated rectangle representing the position.\n     */\n    CircularChart3D.prototype.getRectFromAngle = function (angle) {\n        var location = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.degreeToLocation)(angle, this.circularRadius[0], this.visibleSeries[0].segments[0].center);\n        return new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(location.x, location.y, 0, 0);\n    };\n    /**\n     * Renders the title for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderTitle = function () {\n        var margin = this.margin;\n        if (!this.title) {\n            return null;\n        }\n        var getAnchor = this.getTextAnchor(this.titleStyle.textAlignment, this.enableRtl);\n        var titleSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont);\n        var titleHeight = this.margin.top + (titleSize.height * 3 / 4);\n        var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(margin.left, 0, this.availableSize.width - margin.left - margin.right, 0);\n        var options = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.TextOption(this.element.id + '-title', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.titlePositionX)(rect, this.titleStyle), titleHeight, getAnchor, this.titleCollection, '', 'auto');\n        this.titleLocation = { x: options.x, y: options.y, size: titleSize };\n        var element = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.textElement)(this.renderer, options, this.titleStyle, this.titleStyle.color || this.themeStyle.chartTitleFont.color, this.svgObject, false, this.redraw, null, null, null, null, null, null, null, null, this.themeStyle.chartTitleFont);\n        if (element) {\n            element.setAttribute('tabindex', '0');\n            element.style.outline = 'none';\n            element.parentNode.insertBefore(element, this.svgObject.children && this.svgObject.children[1]);\n        }\n        if (this.subTitle) {\n            this.renderSubTitle(options);\n        }\n    };\n    /**\n     * Gets the text anchor based on the specified alignment and RTL setting.\n     *\n     * @param {Alignment} alignment - The alignment of the text.\n     * @param {boolean} enableRTL - A boolean indicating whether right-to-left (RTL) text is enabled.\n     * @returns {string} - The text anchor value.\n     */\n    CircularChart3D.prototype.getTextAnchor = function (alignment, enableRTL) {\n        switch (alignment) {\n            case 'Near':\n                return enableRTL ? 'end' : 'start';\n            case 'Far':\n                return enableRTL ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    };\n    /**\n     * Renders the subtitle for the circular 3D chart.\n     *\n     * @param {TextOption} options - The text options for rendering the subtitle.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.renderSubTitle = function (options) {\n        var maxWidth = 0;\n        var titleWidth = 0;\n        var padding = 10;\n        var alignment = this.titleStyle.textAlignment;\n        var subTitleElementSize = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont);\n        for (var _i = 0, _a = this.titleCollection; _i < _a.length; _i++) {\n            var titleText = _a[_i];\n            titleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(titleText, this.titleStyle, this.themeStyle.chartTitleFont).width;\n            maxWidth = titleWidth > maxWidth ? titleWidth : maxWidth;\n        }\n        var rect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(alignment === 'Center' ? (options.x - maxWidth / 2) : alignment === 'Far' ? options.x - maxWidth : options.x, 0, maxWidth, 0);\n        var subTitleOption = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.TextOption(this.element.id + '-sub-title', (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.titlePositionX)(rect, this.subTitleStyle), options.y * options.text.length + ((subTitleElementSize.height) * 3 / 4) + padding, this.getTextAnchor(this.subTitleStyle.textAlignment, this.enableRtl), this.subTitleCollection, '', 'auto');\n        this.subTitleLocation = { x: subTitleOption.x, y: subTitleOption.y, size: subTitleElementSize };\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.textElement)(this.renderer, subTitleOption, this.subTitleStyle, this.subTitleStyle.color || this.themeStyle.chartSubTitleFont.color, this.svgObject, false, this.redraw, null, null, null, null, null, null, null, null, this.themeStyle.chartSubTitleFont);\n    };\n    /**\n     * Sets the left and top position for the data label and tooltip template for center-aligned chart.\n     *\n     * @private\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setSecondaryElementPosition = function () {\n        var tooltipParent = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_Secondary_Element');\n        if (!tooltipParent) {\n            return;\n        }\n        var rect = this.element.getBoundingClientRect();\n        var svgRect = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_svg').getBoundingClientRect();\n        tooltipParent.style.left = Math.max(svgRect.left - rect.left, 0) + 'px';\n        tooltipParent.style.top = Math.max(svgRect.top - rect.top, 0) + 'px';\n    };\n    /**\n     * Creates an SVG element for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.createPieSvg = function () {\n        this.removeSvg();\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.createSvg)(this);\n    };\n    /**\n     * Removes the SVG from the circular 3D chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.removeSvg = function () {\n        if (this.redraw) {\n            return null;\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)(this.element.id + '_Secondary_Element');\n        if (this.svgObject) {\n            while (this.svgObject.childNodes.length > 0) {\n                this.svgObject.removeChild(this.svgObject.firstChild);\n            }\n            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(this.svgObject);\n            }\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)('EJ2_legend_tooltip');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)('EJ2_datalabel_tooltip');\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)(this.element.id + 'PointHover_Border');\n    };\n    /**\n     * Calculates and sets the visible series for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.calculateVisibleSeries = function () {\n        this.visibleSeries = [];\n        this.series[0].index = 0;\n        this.visibleSeries.push(this.series[0]);\n    };\n    /**\n     * Method to calculate bounds for the circular 3D chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.calculateBounds = function () {\n        this.initialClipRect = new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(this.margin.left, this.margin.top, this.availableSize.width, this.availableSize.height);\n        this.titleCollection = [];\n        this.subTitleCollection = [];\n        var titleHeight = 0;\n        var subTitleHeight = 0;\n        var maxWidth = 0;\n        var titleWidth = 0;\n        if (this.title) {\n            this.titleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getTitle)(this.title, this.titleStyle, this.initialClipRect.width, this.enableRtl, this.themeStyle.chartTitleFont);\n        }\n        titleHeight = this.title ? (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.title, this.titleStyle, this.themeStyle.chartTitleFont).height * this.titleCollection.length : titleHeight;\n        if (this.subTitle) {\n            for (var _i = 0, _a = this.titleCollection; _i < _a.length; _i++) {\n                var titleText = _a[_i];\n                titleWidth = (0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(titleText, this.titleStyle, this.themeStyle.chartTitleFont).width;\n                maxWidth = titleWidth > maxWidth ? titleWidth : maxWidth;\n            }\n            this.subTitleCollection = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getTitle)(this.subTitle, this.subTitleStyle, maxWidth, this.enableRtl, this.themeStyle.chartSubTitleFont);\n            subTitleHeight = ((0,_syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.measureText)(this.subTitle, this.subTitleStyle, this.themeStyle.chartSubTitleFont).height * this.subTitleCollection.length);\n        }\n        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.subtractRect)(this.initialClipRect, new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Rect(0, (subTitleHeight + titleHeight), this.margin.right + this.margin.left, this.margin.bottom + this.margin.top));\n        this.calculateLegendBounds();\n    };\n    /*\n     * Method to calculate legend bounds for the circular 3D chart.\n     *\n     * @returns {void}\n     */\n    CircularChart3D.prototype.calculateLegendBounds = function () {\n        if (!this.circularChartLegend3DModule || !this.legendSettings.visible) {\n            return null;\n        }\n        this.circularChartLegend3DModule.getLegendOptions(this, this.visibleSeries);\n        this.circularChartLegend3DModule.calculateLegendBounds(this.initialClipRect, this.availableSize, null);\n    };\n    /**\n     * Handles the print method for the circular 3D chart control.\n     *\n     * @param {string[] | string | Element} id - Specifies the element to print.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.print = function (id) {\n        var exportChart = new _common_utils_print__WEBPACK_IMPORTED_MODULE_9__.PrintUtils(this);\n        exportChart.print(id);\n    };\n    /**\n     * Export method for the circular 3D chart.\n     *\n     * @param {ExportType} type - Specifies the type of the image file (PNG, JPEG, SVG).\n     * @param {string} fileName - Specifies the name of the exported image file.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.export = function (type, fileName) {\n        if (this.circularChartExport3DModule) {\n            this.circularChartExport3DModule.export(type, fileName);\n            if (this.afterExport) {\n                this.circularChartExport3DModule.getDataUrl(this);\n            }\n        }\n    };\n    /**\n     * Export the chart on the page to a PDF document.\n     *\n     * @param {string} fileName - The name of the exported file.\n     * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\n     * @param {CircularChart3D[]} controls - Array of controls to be exported.\n     * @param {number} width - The width of the exported chart.\n     * @param {number} height - The height of the exported chart.\n     * @param {boolean} isVertical - Export the chart vertically or horizontally.\n     * @param {string} header - Text to appear at the top of the exported PDF document.\n     * @param {string} footer - Text to appear at the bottom of the exported PDF document.\n     * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n        if (this.circularChartExport3DModule) {\n            this.circularChartExport3DModule.pdfExport(fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage);\n        }\n    };\n    /**\n     * Provides an array of modules needed for control rendering in the circular 3D chart.\n     *\n     * @returns {ModuleDeclaration[]} - An array of required modules.\n     * @private\n     */\n    CircularChart3D.prototype.requiredModules = function () {\n        var modules = [];\n        modules.push({\n            member: this.type + 'Series3D',\n            args: [this]\n        });\n        if (this.legendSettings.visible) {\n            modules.push({\n                member: 'CircularChartLegend3D',\n                args: [this]\n            });\n        }\n        if (this.series[0].dataLabel.visible) {\n            modules.push({\n                member: 'CircularChartDataLabel3D',\n                args: [this]\n            });\n        }\n        if (this.tooltip.enable) {\n            modules.push({\n                member: 'CircularChartTooltip3D',\n                args: [this]\n            });\n        }\n        if (this.selectionMode !== 'None') {\n            modules.push({\n                member: 'CircularChartSelection3D',\n                args: [this]\n            });\n        }\n        if (this.highlightMode !== 'None' || this.legendSettings.enableHighlight) {\n            modules.push({\n                member: 'CircularChartHighlight3D',\n                args: [this]\n            });\n        }\n        if (this.enableExport) {\n            modules.push({\n                member: 'CircularChartExport3D',\n                args: [this]\n            });\n        }\n        return modules;\n    };\n    /**\n     * Handles to set style for key event on the document.\n     *\n     * @param {target} target - element which currently focused.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.setNavigationStyle = function (target) {\n        var tabColor = '';\n        switch (this.theme) {\n            case 'HighContrastLight':\n            case 'HighContrast':\n                tabColor = '#969696';\n                break;\n            case 'MaterialDark':\n            case 'FabricDark':\n            case 'Bootstrap':\n            case 'Bootstrap4':\n                tabColor = '#66afe9';\n                break;\n            case 'Tailwind':\n            case 'TailwindDark':\n                tabColor = '#4f46e5';\n                break;\n            case 'Bootstrap5':\n            case 'Bootstrap5Dark':\n                tabColor = '#0d6efd';\n                break;\n            case 'Fluent':\n            case 'FluentDark':\n                tabColor = '#9e9e9e';\n                break;\n            case 'Fluent2':\n            case 'Fluent2Dark':\n            case 'Fluent2HighContrast':\n                tabColor = '#0078D4';\n                break;\n            default:\n                tabColor = '#9e9e9e';\n                break;\n        }\n        var currentElement = document.getElementById(target);\n        if (currentElement) {\n            currentElement.style.setProperty('outline', \"1.5px solid \" + tabColor);\n        }\n    };\n    /**\n     * Handles to remove style for key event on the document.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.removeNavigationStyle = function () {\n        var currentElement = document.querySelectorAll(\"path[id*=_Series_0_Point_], [id*=\" + this.element.id + \"], [id*=_ChartBorder], text[id*=_title],g[id*=_chart_legend]\");\n        if (currentElement) {\n            currentElement.forEach(function (element) {\n                if (element instanceof HTMLElement || element instanceof SVGElement) {\n                    element.style.setProperty('outline', 'none');\n                }\n            });\n        }\n    };\n    /**\n     * Handles the keyboard onkeydown event in the circular 3D chart.\n     *\n     * @param {KeyboardEvent} e - The keydown event arguments.\n     * @returns {boolean} - Returns `false`.\n     * @private\n     */\n    CircularChart3D.prototype.circular3DChartKeyDown = function (e) {\n        var actionKey = '';\n        if (this.tooltip.enable && ((e.code === 'Tab' && this.previousTargetId.indexOf('series') > -1) || (this.previousTargetId.indexOf('legend') > -1) || e.code === 'Escape')) {\n            actionKey = 'ESC';\n        }\n        if (e.code.indexOf('Arrow') > -1) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && (e.key === 'p')) {\n            e.preventDefault();\n            actionKey = 'CtrlP';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, e.target.id, actionKey);\n        }\n        if (e.code === 'Tab') {\n            this.removeNavigationStyle();\n        }\n        return false;\n    };\n    /**\n     * Handles keyboard navigation for the chart based on the provided KeyboardEvent, targetId, and actionKey.\n     *\n     * @param {KeyboardEvent} e - The keyboard event object.\n     * @param {string} targetId - The ID of the target element related to the keyboard action.\n     * @param {string} actionKey - The key representing the type of action (e.g., 'Tab', 'ArrowMove').\n     * @returns {void}\n     */\n    CircularChart3D.prototype.chartKeyboardNavigations = function (e, targetId, actionKey) {\n        this.isLegendClicked = false;\n        switch (actionKey) {\n            case 'Tab':\n            case 'ArrowMove':\n                if (targetId.indexOf('-point-') > -1) {\n                    var seriesIndex = 0;\n                    var pointIndex = parseInt(targetId.split('point-')[1], 10);\n                    var point = this.visibleSeries[0].points[pointIndex];\n                    var center = point.symbolLocation.center;\n                    var dradius = point.symbolLocation.radius * this.visibleSeries[0].coefficient;\n                    var radius = dradius + (point.symbolLocation.radius - dradius) / 2;\n                    this.mouseX = center.x + radius * Math.cos(point.symbolLocation.angle);\n                    this.mouseY = center.y + radius * Math.sin(point.symbolLocation.angle);\n                    if (this.circularChartHighlight3DModule) {\n                        var targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetId);\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {\n                            if (targetElement.id.indexOf('text') > 1) {\n                                targetElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetElement.id.replace('text', 'shape'));\n                            }\n                            if (this.circularChartSelection3DModule) {\n                                this.circularChartSelection3DModule.calculateSelectedElements(this, targetElement, 'mousemove');\n                            }\n                            else {\n                                this.circularChartHighlight3DModule.calculateSelectedElements(this, targetElement, 'mousemove');\n                            }\n                        }\n                    }\n                    if (this.circularChartTooltip3DModule) {\n                        var series = this.visibleSeries[seriesIndex];\n                        var data = void 0;\n                        if (series.enableTooltip) {\n                            data = new _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_11__.CircularChart3DPointData(series.points[pointIndex], series);\n                        }\n                        this.circularChartTooltip3DModule.element = this.element;\n                        this.circularChartTooltip3DModule.control = this;\n                        this.circularChartTooltip3DModule.renderSeriesTooltip(this, data);\n                    }\n                }\n                if (this.circularChartHighlight3DModule && this.highlightMode !== 'None') {\n                    targetId = targetId.indexOf('_chart_legend_g_') > -1 ? document.getElementById(targetId).firstChild['id'] : targetId;\n                    var legendID = this.element.id + '_chart_legend';\n                    var legendItemsId = [legendID + '_text_', legendID + '_shape_marker_',\n                        legendID + '_shape_'];\n                    for (var i = 0; i < legendItemsId.length; i++) {\n                        var id = legendItemsId[i];\n                        if (targetId.indexOf(id) > -1) {\n                            document.getElementById(targetId).setAttribute('class', '');\n                            if (this.circularChartSelection3DModule) {\n                                this.circularChartSelection3DModule.legendSelection(this, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetId), 'mousemove');\n                            }\n                            else {\n                                this.circularChartHighlight3DModule.legendSelection(this, (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetId), 'mousemove');\n                            }\n                            break;\n                        }\n                    }\n                }\n                break;\n            case 'Enter':\n            case 'Space':\n                if (targetId.indexOf('_chart_legend_') > -1 && this.circularChartLegend3DModule) {\n                    this.isLegendClicked = true;\n                    this.circularChartLegend3DModule.click(e);\n                    this.focusChild(document.getElementById(targetId).parentElement);\n                    this.setNavigationStyle(document.getElementById(targetId).parentElement.id);\n                }\n                else {\n                    if (this.circularChartSelection3DModule) {\n                        this.circularChartSelection3DModule.calculateSelectedElements(this, document.getElementById(targetId), 'click');\n                    }\n                    this.setNavigationStyle(targetId);\n                }\n                break;\n            case 'CtrlP':\n                this.print();\n                break;\n            case 'ESC':\n                if (this.circularChartTooltip3DModule) {\n                    this.circularChartTooltip3DModule.removeTooltip(1);\n                }\n                if (this.circularChartSelection3DModule) {\n                    this.circularChartSelection3DModule.calculateSelectedElements(this, document.getElementById(this.element.id + '-border'), 'mousemove');\n                }\n                else if (this.circularChartHighlight3DModule && this.highlightMode !== 'None') {\n                    this.circularChartHighlight3DModule.calculateSelectedElements(this, document.getElementById(this.element.id + '-border'), 'mousemove');\n                }\n                break;\n        }\n    };\n    /**\n     * Sets the tabindex attribute of the provided HTML element to '0'.\n     *\n     * @param {HTMLElement} element - The HTML element to be focused.\n     * @returns {string} - The updated class attribute of the focused element.\n     */\n    CircularChart3D.prototype.focusChild = function (element) {\n        element.setAttribute('tabindex', '0');\n        var className = element.getAttribute('class');\n        element.setAttribute('tabindex', '0');\n        if (className && className.indexOf('e-circular3dchart-focused') === -1) {\n            className = 'e-circular3dchart-focused ' + className;\n        }\n        else if (!className) {\n            className = 'e-circular3dchart-focused';\n        }\n        element.setAttribute('class', className);\n        element.focus();\n        return element.id;\n    };\n    /**\n     * Handles the keyboard onkeyup event in the circular 3D chart.\n     *\n     * @param {KeyboardEvent} e - The keyup event arguments.\n     * @returns {boolean} - Returns `false`.\n     * @private\n     */\n    CircularChart3D.prototype.circular3DChartKeyUp = function (e) {\n        var actionKey = '';\n        var targetId = e.target['id'];\n        var legendElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_chart_legend_translate_g');\n        var pagingElement = (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(this.element.id + '_chart_legend_pageup');\n        if (legendElement) {\n            var firstChild = legendElement.firstElementChild;\n            var className = firstChild.getAttribute('class');\n            if (className && className.indexOf('e-circular3dchart-focused') === -1) {\n                className = className + ' e-circular3dchart-focused';\n            }\n            else if (!className) {\n                className = 'e-circular3dchart-focused';\n            }\n            firstChild.setAttribute('class', className);\n        }\n        if (pagingElement) {\n            pagingElement.setAttribute('class', 'e-circular3dchart-focused');\n        }\n        this.removeNavigationStyle();\n        if (e.code === 'Tab') {\n            if (this.previousTargetId !== '') {\n                if (this.previousTargetId.indexOf('-point-') > -1 && targetId.indexOf('-point-') === -1) {\n                    // const groupElement: HTMLElement = document.getElementById(this.previousTargetId).parentElement;\n                    // this.setTabIndex(groupElement.children[this.currentPointIndex] as HTMLElement,\n                    //                  groupElement.firstElementChild as HTMLElement);\n                    this.currentPointIndex = 0;\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_page') > -1 && targetId.indexOf('_chart_legend_page') === -1 &&\n                    targetId.indexOf('_chart_legend_g_') === -1) {\n                    this.setTabIndex(e.target, pagingElement);\n                }\n                else if (this.previousTargetId.indexOf('_chart_legend_g_') > -1 && targetId.indexOf('chart_legend_g_') === -1) {\n                    this.setTabIndex(legendElement.children[this.currentLegendIndex], legendElement.firstElementChild);\n                }\n                else if (this.previousTargetId.indexOf('-title') > -1 && targetId.indexOf('-point-') > -1) {\n                    this.currentPointIndex = parseInt(targetId.split('point-')[1], 10);\n                }\n            }\n            this.previousTargetId = targetId;\n            if (targetId.indexOf('_chart_legend_g_') > -1 && this.highlightMode !== 'None') {\n                targetId = e.target['lastElementChild'].id;\n                actionKey = 'Tab';\n            }\n            else if (targetId.indexOf('-point-') > -1 && (this.highlightMode !== 'None' || this.tooltip.enable)) {\n                actionKey = 'Tab';\n            }\n        }\n        else if (e.code.indexOf('Arrow') > -1) {\n            e.preventDefault();\n            if (targetId.indexOf('_chart_legend_page') > -1) {\n                e.target.removeAttribute('tabindex');\n                this.previousTargetId = targetId = this.element.id + '_chart_legend_page' + (e.code === 'ArrowRight' ? 'up' : 'down');\n                this.focusTarget((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetId));\n            }\n            else if ((targetId.indexOf('_chart_legend_') > -1)) {\n                e.target.removeAttribute('tabindex');\n                this.currentLegendIndex += (e.code === 'ArrowUp' || e.code === 'ArrowRight') ? +1 : -1;\n                this.currentLegendIndex = this.getActualIndex(this.currentLegendIndex, legendElement.children.length);\n                var currentLegend = legendElement.children[this.currentLegendIndex];\n                this.focusTarget(currentLegend);\n                this.removeNavigationStyle();\n                this.setNavigationStyle(currentLegend.id);\n                this.previousTargetId = targetId = currentLegend.lastElementChild.id;\n                actionKey = this.highlightMode !== 'None' ? 'ArrowMove' : '';\n            }\n            else if (targetId.indexOf('-point-') > -1) {\n                e.target.setAttribute('tabindex', '-1');\n                var totalLength = 0;\n                var seriesIndexes = [];\n                for (var i = 0; i < this.visibleSeries[0].points.length; i++) {\n                    var point = this.visibleSeries[0].points[i];\n                    totalLength = point.visible ? totalLength + 1 : totalLength;\n                    if (this.visibleSeries[0].points[i].visible) {\n                        seriesIndexes.push(this.visibleSeries[0].points[i].index);\n                    }\n                }\n                this.currentPointIndex = seriesIndexes.indexOf(this.currentPointIndex) + ((e.code === 'ArrowUp' || e.code === 'ArrowRight') ? 1 : -1);\n                this.currentPointIndex = seriesIndexes[this.getActualIndex(this.currentPointIndex, seriesIndexes.length)];\n                var elements = document.querySelectorAll(\"[id*=\\\"region-series-0-point-\" + this.currentPointIndex + \"\\\"]\");\n                var element = void 0;\n                if (elements.length > 0) {\n                    element = elements[elements.length - 1];\n                }\n                targetId = element ? element.id : '';\n                this.focusTarget((0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.getElement)(targetId));\n                this.removeNavigationStyle();\n                this.setNavigationStyle(targetId);\n                actionKey = this.tooltip.enable || this.circularChartHighlight3DModule ? 'ArrowMove' : '';\n            }\n        }\n        else if ((e.code === 'Enter' || e.code === 'Space') && ((targetId.indexOf('_chart_legend_') > -1) ||\n            (targetId.indexOf('-point-') > -1))) {\n            targetId = (targetId.indexOf('_chart_legend_g') > -1) ? e.target['lastElementChild'].id : targetId;\n            actionKey = 'Enter';\n        }\n        if (actionKey !== '') {\n            this.chartKeyboardNavigations(e, targetId, actionKey);\n        }\n        if (e.code === 'Tab') {\n            this.setNavigationStyle(targetId);\n        }\n        return false;\n    };\n    /**\n     * Calculates the actual index based on the specified index and total length.\n     *\n     * @param {number} index - The index to be adjusted.\n     * @param {number} totalLength - The total length of the collection or array.\n     * @returns {number} - The actual index after adjustment.\n     */\n    CircularChart3D.prototype.getActualIndex = function (index, totalLength) {\n        return index > totalLength - 1 ? 0 : (index < 0 ? totalLength - 1 : index);\n    };\n    /**\n     * Focuses the specified HTML element by setting its tabindex attribute to '0'.\n     *\n     * @param {HTMLElement} element - The HTML element to be focused.\n     * @returns {string} - The updated class attribute of the focused element.\n     */\n    CircularChart3D.prototype.focusTarget = function (element) {\n        var className = element.getAttribute('class');\n        element.setAttribute('tabindex', '0');\n        if (className && className.indexOf('e-circular3dchart-focused') === -1) {\n            className = className + ' e-circular3dchart-focused';\n        }\n        else if (!className) {\n            className = 'e-circular3dchart-focused';\n        }\n        element.setAttribute('tabindex', '0');\n        element.setAttribute('class', className);\n        element.focus();\n        return element.id;\n    };\n    /**\n     * Sets the tabIndex property on the provided currentElement.\n     *\n     * @param {HTMLElement} previousElement - The previously focused HTML element.\n     * @param {HTMLElement} currentElement - The currently focused HTML element.\n     * @returns {void}\n     */\n    CircularChart3D.prototype.setTabIndex = function (previousElement, currentElement) {\n        if (previousElement) {\n            previousElement.removeAttribute('tabindex');\n        }\n        if (currentElement) {\n            currentElement.setAttribute('tabindex', '0');\n        }\n    };\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     *\n     * @private\n     * @returns {string} - A string representing the persisted data.\n     */\n    CircularChart3D.prototype.getPersistData = function () {\n        return '';\n    };\n    /**\n     * Gets the module name for the circular 3D chart.\n     *\n     *  @private\n     * @returns {string} - The circular 3D chart module name.\n     */\n    CircularChart3D.prototype.getModuleName = function () {\n        return 'circularchart3d';\n    };\n    /**\n     * Destroys the circular 3D chart instance.\n     *\n     * @private\n     * @returns {void}\n     */\n    CircularChart3D.prototype.destroy = function () {\n        if (this.element) {\n            this.unWireEvents();\n            this.circular3DPolygon = [];\n            this.visibleSeries[0].segments = [];\n            _super.prototype.destroy.call(this);\n            this.element.classList.remove('e-circular3dchart');\n            this.element.classList.remove('e-circular3dchart-focused');\n            var element = document.getElementById(this.element.id + 'Keyboard_circular3dchart_focus');\n            if (element) {\n                element.remove();\n            }\n            var highlightElement = document.getElementById(this.element.id + '_ej2_chart_highlight');\n            if (highlightElement) {\n                highlightElement.remove();\n            }\n            var selectionElement = document.getElementById(this.element.id + '_ej2_chart_selection');\n            if (selectionElement) {\n                selectionElement.remove();\n            }\n            (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)('chartmeasuretext');\n            this.removeSvg();\n            this.svgObject = null;\n        }\n    };\n    /**\n     * Handles the resize of the circular 3D chart.\n     *\n     * @returns {boolean} - Returns `true` to indicate the resize method of the circular 3D chart.\n     * @private\n     */\n    CircularChart3D.prototype.chartResize = function () {\n        var _this = this;\n        this.animateSeries = false;\n        var args = {\n            previousSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(this.availableSize.width, this.availableSize.height),\n            currentSize: new _syncfusion_ej2_svg_base__WEBPACK_IMPORTED_MODULE_6__.Size(0, 0),\n            chart: this\n        };\n        var beforeResizeArgs = { cancel: false };\n        if (this.resizeTo) {\n            clearTimeout(this.resizeTo);\n        }\n        this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.beforeResize, beforeResizeArgs);\n        if (!beforeResizeArgs.cancel) {\n            this.resizeTo = +setTimeout(function () {\n                if (_this.isDestroyed) {\n                    clearTimeout(_this.resizeTo);\n                    return;\n                }\n                (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.calculateSize)(_this);\n                args.currentSize = _this.availableSize;\n                _this.trigger(_common_model_constants__WEBPACK_IMPORTED_MODULE_8__.resized, args);\n                _this.refreshChart();\n            }, 500);\n        }\n        return false;\n    };\n    /**\n     * Retrieves the visible circular 3D chart series based on the specified index.\n     *\n     * @param {CircularChart3DSeries[]} visibleSeries - An array of visible circular 3D chart series.\n     * @param {number} index - The index of the desired series.\n     * @returns {CircularChart3DSeries} - The CircularChart3D series corresponding to the provided index.\n     */\n    CircularChart3D.prototype.changeVisibleSeries = function (visibleSeries, index) {\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (index === series.index) {\n                return series;\n            }\n        }\n        return null;\n    };\n    /**\n     * Removes elements with IDs containing the substring \"region-series-\".\n     *\n     * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3D.prototype.removeSeriesElements = function (chart) {\n        document.querySelectorAll('[id*=\"region-series-\"]').forEach(function (element) {\n            if (element.parentElement.id === chart.groupElement.id) {\n                return element.remove();\n            }\n        });\n        document.querySelectorAll('[id*=\"data-label-text-\"]').forEach(function (element) {\n            if (element.parentElement.id === chart.groupElement.id) {\n                return element.remove();\n            }\n        });\n        document.querySelectorAll('[id*=\"data-label-series-0-shape-\"]').forEach(function (element) {\n            if (element.parentElement.id === chart.groupElement.id) {\n                return element.remove();\n            }\n        });\n        document.querySelectorAll('[id*=\"datalabel-series-0-connector-\"]').forEach(function (element) {\n            if (element.parentElement.id === chart.groupElement.id) {\n                return element.remove();\n            }\n        });\n    };\n    /**\n     * Called internally when any property value changes in the circular 3D chart.\n     *\n     * @private\n     * @param {CircularChart3DModel} newProp - Specifies the new properties of the circular 3D chart.\n     * @param {CircularChart3DModel} oldProp - Specifies the old properties of the circular 3D chart.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    CircularChart3D.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var update = {\n            refreshElements: false, refreshBounds: false\n        };\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'theme':\n                    this.animateSeries = true;\n                    break;\n                case 'title':\n                case 'subTitle':\n                case 'height':\n                case 'width':\n                case 'margin':\n                case 'enableRotation':\n                case 'depth':\n                    update.refreshBounds = true;\n                    break;\n                case 'tilt':\n                case 'rotation':\n                    if (!this.rotateActivate) {\n                        update.refreshBounds = true;\n                        this.animateSeries = false;\n                    }\n                    break;\n                case 'titleStyle':\n                    if (newProp.titleStyle && (newProp.titleStyle.size || newProp.titleStyle.textOverflow)) {\n                        update.refreshBounds = true;\n                    }\n                    else {\n                        update.refreshElements = true;\n                    }\n                    break;\n                case 'subTitleStyle':\n                    if (newProp.subTitleStyle && (newProp.subTitleStyle.size || newProp.subTitleStyle.textOverflow)) {\n                        update.refreshBounds = true;\n                    }\n                    else {\n                        update.refreshElements = true;\n                    }\n                    break;\n                case 'legendSettings':\n                    update.refreshBounds = true;\n                    update.refreshElements = true;\n                    break;\n                case 'dataSource':\n                    this.processData(false);\n                    update.refreshBounds = true;\n                    break;\n                case 'series':\n                    if (!this.delayRedraw) {\n                        var seriesRefresh = false;\n                        var series = void 0;\n                        var seriesRender = void 0;\n                        for (var i = 0; i < this.series.length; i++) {\n                            series = newProp.series[i];\n                            if ((series.explodeOffset ||\n                                series.radius || series.innerRadius || series.emptyPointSettings)) {\n                                seriesRender = true;\n                            }\n                            if (newProp.series[i] && (newProp.series[i].dataSource || newProp.series[i].yName\n                                || newProp.series[i].xName ||\n                                newProp.series[i].dataLabel || seriesRender)) {\n                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.changeVisibleSeries(this.visibleSeries, i), series, null, true);\n                                seriesRefresh = true;\n                            }\n                            if (newProp.series[i] && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.series[i].explodeIndex) &&\n                                newProp.series[i].explodeIndex >= 0\n                                && newProp.series[i].explodeIndex !== oldProp.series[i].explodeIndex) {\n                                seriesRefresh = true;\n                                this.removeSeriesElements(this);\n                            }\n                        }\n                        if (seriesRefresh) {\n                            this.processData(false);\n                            update.refreshBounds = true;\n                        }\n                    }\n                    this.delayRedraw = false;\n                    this.redraw = false;\n                    break;\n                case 'enableRtl':\n                case 'locale':\n                    if (this.circularChartHighlight3DModule) {\n                        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)(this.circularChartHighlight3DModule.styleId);\n                    }\n                    if (this.circularChartSelection3DModule) {\n                        (0,_common_utils_helper__WEBPACK_IMPORTED_MODULE_5__.removeElement)(this.circularChartSelection3DModule.styleId);\n                    }\n                    _super.prototype.refresh.call(this);\n                    break;\n                case 'background':\n                case 'border':\n                    update.refreshElements = true;\n                    break;\n                case 'isMultiSelect':\n                case 'selectedDataIndexes':\n                case 'selectionMode':\n                    if (this.circularChartSelection3DModule) {\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.circularChartSelection3DModule.selectedDataIndexes)) {\n                            this.circularChartSelection3DModule.invokeSelection(this);\n                        }\n                        else {\n                            this.circularChartSelection3DModule.selectedDataIndexes = this.selectedDataIndexes;\n                            this.circularChartSelection3DModule.redrawSelection(this);\n                        }\n                    }\n                    break;\n                case 'tooltip':\n                    if (this.circularChartTooltip3DModule) {\n                        this.circularChartTooltip3DModule.previousPoints = [];\n                        if (this.tooltip.template) {\n                            this.circularChartTooltip3DModule.template = this.tooltip.template;\n                        }\n                    }\n                    break;\n            }\n            if (!update.refreshBounds && update.refreshElements) {\n                this.removeSeriesElements(this);\n                this.createPieSvg();\n                this.circular3DPolygon = [];\n                this.visibleSeries[0].segments = [];\n                this.renderElements();\n            }\n            else if (update.refreshBounds) {\n                this.removeSeriesElements(this);\n                this.createPieSvg();\n                this.circular3DPolygon = [];\n                this.visibleSeries[0].segments = [];\n                this.calculateBounds();\n                this.renderElements();\n            }\n        }\n    };\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"title\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"backgroundImage\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularChart3D.prototype, \"dataSource\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], CircularChart3D.prototype, \"titleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"subTitle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Font)\n    ], CircularChart3D.prototype, \"subTitleStyle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], CircularChart3D.prototype, \"selectionMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], CircularChart3D.prototype, \"highlightMode\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([{}], _renderer_series__WEBPACK_IMPORTED_MODULE_3__.CircularChart3DSeries)\n    ], CircularChart3D.prototype, \"series\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _legend_legend__WEBPACK_IMPORTED_MODULE_10__.CircularChart3DLegendSettings)\n    ], CircularChart3D.prototype, \"legendSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], CircularChart3D.prototype, \"highlightColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], CircularChart3D.prototype, \"selectionPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')\n    ], CircularChart3D.prototype, \"highlightPattern\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3D.prototype, \"isMultiSelect\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], CircularChart3D.prototype, \"enableAnimation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Material')\n    ], CircularChart3D.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Indexes)\n    ], CircularChart3D.prototype, \"selectedDataIndexes\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Margin)\n    ], CircularChart3D.prototype, \"margin\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ color: '#DDDDDD', width: 0 }, _common_model_base__WEBPACK_IMPORTED_MODULE_1__.Border)\n    ], CircularChart3D.prototype, \"border\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _user_interaction_tooltip__WEBPACK_IMPORTED_MODULE_11__.CircularChart3DTooltipSettings)\n    ], CircularChart3D.prototype, \"tooltip\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], CircularChart3D.prototype, \"background\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3D.prototype, \"useGroupingSeparator\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(50)\n    ], CircularChart3D.prototype, \"depth\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], CircularChart3D.prototype, \"tilt\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3D.prototype, \"enableRotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)\n    ], CircularChart3D.prototype, \"rotation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], CircularChart3D.prototype, \"enableExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"load\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"loaded\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"legendRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"legendClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"selectionComplete\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"pointRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"seriesRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"textRender\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"beforeExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"afterExport\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"beforePrint\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"beforeResize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"resized\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"circularChart3DMouseMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"circularChart3DMouseClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"circularChart3DMouseDown\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"circularChart3DMouseLeave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"circularChart3DMouseUp\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"pointClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"pointMove\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], CircularChart3D.prototype, \"tooltipRender\", void 0);\n    CircularChart3D = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], CircularChart3D);\n    return CircularChart3D;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-charts/src/circularchart3d/circularchart3d.js?");

/***/ })

}]);