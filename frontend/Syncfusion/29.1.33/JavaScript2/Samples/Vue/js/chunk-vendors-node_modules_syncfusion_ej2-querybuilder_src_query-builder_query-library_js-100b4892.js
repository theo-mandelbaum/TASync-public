"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-querybuilder_src_query-builder_query-library_js-100b4892"],{

/***/ "./node_modules/@syncfusion/ej2-querybuilder/src/query-builder/query-library.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-querybuilder/src/query-builder/query-library.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryLibrary: () => (/* binding */ QueryLibrary)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n\nvar QueryLibrary = /** @class */ (function () {\n    function QueryLibrary(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    QueryLibrary.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.removeEventListener();\n    };\n    QueryLibrary.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on('query-library', this.queryLibrary, this);\n        this.parent.on('destroyed', this.destroy, this);\n    };\n    QueryLibrary.prototype.removeEventListener = function () {\n        this.parent.off('query-library', this.queryLibrary);\n        this.parent.off('destroyed', this.destroy);\n    };\n    QueryLibrary.prototype.queryLibrary = function (args) {\n        switch (args.prop) {\n            case 'getMongoFromRules':\n                args.value['obj']['mongoQuery'] = this.getMongoFromRules(args.value['rule'], args.value['mongoQuery']);\n                break;\n            case 'mongoParser':\n                this.mongoParser(args.value['mongoQuery'], args.value['rule'], args.value['mongoLocale']);\n                break;\n            case 'getParameterSql':\n                args.value['obj']['sql'] = this.getParameterSql(args.value['rule']);\n                break;\n            case 'getNamedParameterSql':\n                args.value['obj']['sql'] = this.getNamedParameterSql(args.value['rule']);\n                break;\n            case 'convertParamSqlToSql':\n                args.value['obj']['sql'] = this.convertParamSqlToSql(args.value['sql']);\n                break;\n            case 'convertNamedParamSqlToSql':\n                args.value['obj']['sql'] = this.convertNamedParamSqlToSql(args.value['sql']);\n                break;\n        }\n    };\n    QueryLibrary.prototype.getMongoFromRules = function (rule, mongoQuery) {\n        mongoQuery = '{';\n        if (rule.condition === 'or') {\n            mongoQuery += '\"$or\":[';\n            mongoQuery = this.convertMongoQuery(rule.rules, mongoQuery) + ']';\n        }\n        else {\n            mongoQuery += '\"$and\":[';\n            mongoQuery = this.convertMongoQuery(rule.rules, mongoQuery) + ']';\n        }\n        mongoQuery += '}';\n        return mongoQuery;\n    };\n    QueryLibrary.prototype.getOperatorFromMongoOperator = function (operator) {\n        var operatorValue;\n        switch (operator) {\n            case '$ne':\n                operatorValue = 'notequal';\n                break;\n            case '$gt':\n                operatorValue = 'greaterthan';\n                break;\n            case '$gte':\n                operatorValue = 'greaterthanorequal';\n                break;\n            case '$lt':\n                operatorValue = 'lessthan';\n                break;\n            case '$lte':\n                operatorValue = 'lessthanorequal';\n                break;\n            case '$nin':\n                operatorValue = 'notin';\n                break;\n        }\n        return operatorValue;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    QueryLibrary.prototype.convertMongoQuery = function (rules, mongoQuery) {\n        var _this = this;\n        var i = 0;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        rules.forEach(function (item) {\n            i++;\n            mongoQuery += '{';\n            if (item.rules !== undefined) {\n                if (item.condition === 'or') {\n                    mongoQuery += ' \"$or\":[';\n                    mongoQuery = _this.convertMongoQuery(item.rules, mongoQuery) + ']';\n                }\n                else {\n                    mongoQuery += ' \"$and\":[';\n                    mongoQuery = _this.convertMongoQuery(item.rules, mongoQuery) + ']';\n                }\n            }\n            var itVal = item.type === 'string' && item.operator !== 'in' && item.operator !== 'notin' && item.value && item.value.trim() !== '' ? item.value.replace(/'/g, '\\\\') : '';\n            if (item.type === 'string' && (item.operator === 'in' || item.operator === 'notin') && item.value && item.value.length === 1) {\n                itVal = item.value[0].replace(/'/g, '\\\\');\n            }\n            var field = item.field ? item.field.substring(0) : '';\n            switch (item.operator) {\n                case 'contains':\n                    mongoQuery += '\"' + field + '\":{\"$regex\":\"' + itVal + '\"}';\n                    break;\n                case 'notcontains':\n                    mongoQuery += '\"' + field + '\":{\"$not\":{\"$regex\":\"' + item.value + '\"}}';\n                    break;\n                case 'startswith':\n                    mongoQuery += '\"' + field + '\":{\"$regex\":\"^' + itVal + '\"}';\n                    break;\n                case 'notstartswith':\n                    mongoQuery += '\"' + field + '\":{\"$not\":{\"$regex\":\"^' + item.value + '\"}}';\n                    break;\n                case 'endswith':\n                    mongoQuery += '\"' + field + '\":{\"$regex\":\"' + itVal + '$\"}';\n                    break;\n                case 'notendswith':\n                    mongoQuery += '\"' + field + '\":{\"$not\":{\"$regex\":\"' + item.value + '$\"}}';\n                    break;\n                case 'isnull':\n                    mongoQuery += '\"' + field + '\": null';\n                    break;\n                case 'isnotnull':\n                    mongoQuery += '\"' + field + '\":{\"$ne\": null}';\n                    break;\n                case 'isempty':\n                    mongoQuery += '\"' + field + '\": \"\"';\n                    break;\n                case 'isnotempty':\n                    mongoQuery += '\"' + field + '\":{\"$ne\": \"\"}';\n                    break;\n                case 'equal':\n                    if (item.type === 'string') {\n                        mongoQuery += '\"' + field + '\":\"' + itVal + '\"';\n                    }\n                    else if (item.type === 'date') {\n                        mongoQuery += '\"' + field + '\":\"' + item.value + '\"';\n                    }\n                    else if (item.type === 'boolean') {\n                        mongoQuery += '\"' + field + '\":' + item.value + '';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\":' + item.value + '';\n                    }\n                    break;\n                case 'notequal':\n                    if (item.type === 'string') {\n                        mongoQuery += '\"' + field + '\":{\"$ne\":\"' + itVal + '\"}';\n                    }\n                    else if (item.type === 'date') {\n                        mongoQuery += '\"' + field + '\":{\"$ne\":\"' + item.value + '\"}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\":{\"$ne\":' + item.value + '}';\n                    }\n                    break;\n                case 'in':\n                    if (item.type === 'string') {\n                        if (item.value.length > 1) {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            var s = item.value.map(function (x, j) { return (j < item.value.length ? \"\\\"\" + x + \"\\\"\" : ''); }).toString();\n                            s = s.endsWith(',') ? s.substring(0, s.length - 1) : s;\n                            mongoQuery += '\"' + field + '\": { \"$in\": [' + s + ']}';\n                        }\n                        else {\n                            mongoQuery += '\"' + field + '\": { \"$in\": [\"' + itVal + '\"]}';\n                        }\n                    }\n                    else if (item.type === 'number') {\n                        if (item.value.length > 1) {\n                            mongoQuery += '\"' + field + '\": { \"$in\": [' + item.value.toString() + ']}';\n                        }\n                        else {\n                            mongoQuery += '\"' + field + '\": { \"$in\": [' + item.value + ']}';\n                        }\n                    }\n                    break;\n                case 'notin':\n                    if (item.type === 'string') {\n                        if (item.value.length > 1) {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            var s = item.value.map(function (x, j) { return (j < item.value.length ? \"\\\"\" + x + \"\\\"\" : ''); }).toString();\n                            s = s.endsWith(',') ? s.substring(0, s.length - 1) : s;\n                            mongoQuery += '\"' + field + '\": { \"$nin\": [' + s + ']}';\n                        }\n                        else {\n                            mongoQuery += '\"' + field + '\": { \"$nin\": [\"' + itVal + '\"]}';\n                        }\n                    }\n                    else if (item.type === 'number') {\n                        if (item.value.length > 1) {\n                            mongoQuery += '\"' + field + '\": { \"$nin\": [' + item.value.toString() + ']}';\n                        }\n                        else {\n                            mongoQuery += '\"' + field + '\": { \"$nin\": [' + item.value + ']}';\n                        }\n                    }\n                    break;\n                case 'greaterthan':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"' + field + '\": { \"$gt\": ' + item.value + '}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\": { \"$gt\": \"' + item.value + '\"}';\n                    }\n                    break;\n                case 'greaterthanorequal':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"' + field + '\": { \"$gte\": ' + item.value + '}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\": { \"$gte\": \"' + item.value + '\"}';\n                    }\n                    break;\n                case 'between':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"' + field + '\": {\"$gte\":' + item.value[0] + ', \"$lte\":' + item.value[1] + '}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\": {\"$gte\": \"' + item.value[0] + '\", \"$lte\": \"' + item.value[1] + '\"}';\n                    }\n                    break;\n                case 'notbetween':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"$or\":[{\"' + field + '\": {\"$lt\":' + item.value[0] + '}}, {\"' + field + '\": {\"$gt\":' + item.value[1] + '}}]';\n                    }\n                    else {\n                        mongoQuery += '\"$or\":[{\"' + field + '\": {\"$lt\": \"' + item.value[0] + '\"}}, {\"' + field + '\": {\"$gt\": \"' + item.value[1] + '\"}}]';\n                    }\n                    break;\n                case 'lessthan':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"' + field + '\": { \"$lt\": ' + item.value + '}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\": { \"$lt\": \"' + item.value + '\"}';\n                    }\n                    break;\n                case 'lessthanorequal':\n                    if (item.type === 'number') {\n                        mongoQuery += '\"' + field + '\": { \"$lte\": ' + item.value + '}';\n                    }\n                    else {\n                        mongoQuery += '\"' + field + '\": { \"$lte\": \"' + item.value + '\"}';\n                    }\n                    break;\n            }\n            mongoQuery += '}';\n            if (rules.length !== i) {\n                mongoQuery += ',';\n            }\n        });\n        return mongoQuery;\n    };\n    QueryLibrary.prototype.mongoParser = function (mongoQuery, rule, mongoLocale) {\n        var mongoList;\n        if (Object.keys(mongoQuery).indexOf('$and') > -1) {\n            mongoList = mongoQuery['$and'];\n            rule.condition = 'and';\n        }\n        else if (Object.keys(mongoQuery).indexOf('$or') > -1) {\n            mongoList = mongoQuery['$or'];\n            rule.condition = 'or';\n        }\n        rule.rules = [];\n        this.mongoRecursion(mongoList, rule.rules, mongoLocale);\n    };\n    QueryLibrary.prototype.mongoRecursion = function (mongoList, rules, mongoLocale) {\n        var operatorValue;\n        var type;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var stringValue;\n        var key;\n        var betweenValue;\n        var fieldType;\n        var condition;\n        var value;\n        var subRules;\n        var rule;\n        var keyObj;\n        var ruleValue;\n        for (var i = 0, len = mongoList.length; i < len; i++) {\n            var betweenOperatorArray = [];\n            var inOperatorArray = [];\n            condition = Object.keys(mongoList[i])[0];\n            value = mongoList[i][condition];\n            if (condition === '$and') {\n                if (this.parent.enableNotCondition) {\n                    subRules = { condition: condition.replace('$', ''), rules: [], not: false };\n                }\n                else {\n                    subRules = { condition: condition.replace('$', ''), rules: [] };\n                }\n                rules.push(subRules);\n                this.mongoRecursion(mongoList[i][condition], rules[rules.length - 1].rules, mongoLocale);\n            }\n            else if (condition === '$or') {\n                var notBetween = void 0;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var innerObject = [];\n                var keys = [];\n                var firstKey = [];\n                var secondKey = [];\n                var innerKeys = [];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var firstValue = [];\n                var secondValue = [];\n                var innerFirstValue = [];\n                var innerSecondValue = [];\n                if (Array.isArray(value) && value.length === 2) {\n                    keys = Object.keys(value);\n                    innerFirstValue = value[keys[0]];\n                    innerSecondValue = value[keys[1]];\n                    if (typeof innerFirstValue === 'object') {\n                        innerObject = Object.keys(innerFirstValue)[0];\n                        innerKeys = Object.keys(innerFirstValue[Object.keys(innerFirstValue)[0]]);\n                        firstKey = innerKeys[0];\n                        secondKey = Object.keys(innerSecondValue[Object.keys(innerSecondValue)[0]])[0];\n                        if (firstKey === '$lt' && secondKey === '$gt') {\n                            operatorValue = 'notbetween';\n                            // eslint-disable-next-line security/detect-object-injection\n                            firstValue = innerFirstValue[innerObject][firstKey];\n                            // eslint-disable-next-line security/detect-object-injection\n                            secondValue = innerSecondValue[innerObject][secondKey];\n                            type = typeof firstValue === 'number' ? 'number' : 'date';\n                            ruleValue = [firstValue, secondValue];\n                            rule = { field: innerObject, label: innerObject, value: ruleValue, operator: operatorValue, type: type };\n                            rules.push(rule);\n                            notBetween = true;\n                        }\n                    }\n                }\n                if (!notBetween) {\n                    if (this.parent.enableNotCondition) {\n                        subRules = { condition: condition.replace('$', ''), rules: [], not: false };\n                    }\n                    else {\n                        subRules = { condition: condition.replace('$', ''), rules: [] };\n                    }\n                    rules.push(subRules);\n                    this.mongoRecursion(mongoList[i][condition], rules[rules.length - 1].rules, mongoLocale);\n                }\n            }\n            else {\n                value = mongoList[i][condition];\n                if (value === null) { // isnull operator\n                    operatorValue = 'isnull';\n                }\n                if (typeof value === 'boolean') { // boolean type values\n                    operatorValue = 'equal';\n                    type = 'boolean';\n                    ruleValue = value;\n                }\n                if (typeof (value) === 'number') {\n                    ruleValue = value;\n                    type = 'number';\n                    operatorValue = 'equal';\n                }\n                else if (typeof (value) === 'object' && value !== null) {\n                    keyObj = Object.keys(value);\n                    for (var i_1 = 0; i_1 < keyObj.length; i_1++) {\n                        key = keyObj[i_1];\n                        stringValue = (value)[keyObj[i_1]];\n                        if (key === '$ne' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stringValue)) { // not null operator\n                            operatorValue = 'isnotnull';\n                            ruleValue = null;\n                        }\n                        if (key === '$ne' && typeof stringValue === 'boolean') { // not equal operator for boolean\n                            operatorValue = 'notequal';\n                            ruleValue = stringValue;\n                            type = 'boolean';\n                        }\n                        if (keyObj.length >= 2 && keyObj[i_1]) {\n                            if (typeof (stringValue) == 'object') { // between and notbetween operators\n                                operatorValue = 'notbetween';\n                                condition = Object.keys(stringValue)[0];\n                                betweenValue = [Object.keys(stringValue[condition])[0]];\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                betweenOperatorArray.push(stringValue[condition][betweenValue]);\n                                type = 'number';\n                            }\n                            else {\n                                operatorValue = 'between';\n                                betweenOperatorArray.push(stringValue);\n                            }\n                            if (typeof (stringValue) === 'number') {\n                                type = 'number';\n                            }\n                        }\n                        else if (typeof (stringValue) === 'object' && stringValue !== null) { // \"in\" and \"notin\" operator\n                            if (key === '$not' && Object.keys(stringValue)[0] === '$regex') {\n                                if (stringValue['$regex'].indexOf('^') > -1) {\n                                    operatorValue = 'notstartswith';\n                                    ruleValue = stringValue['$regex'].replace('^', '');\n                                }\n                                else if (stringValue['$regex'].indexOf('$') > -1) {\n                                    operatorValue = 'notendswith';\n                                    ruleValue = stringValue['$regex'].replace('$', '');\n                                }\n                                else {\n                                    operatorValue = 'notcontains';\n                                    ruleValue = stringValue['$regex'];\n                                }\n                            }\n                            else {\n                                operatorValue = key === '$in' ? 'in' : 'notin';\n                                inOperatorArray = stringValue;\n                                type = typeof (stringValue[0]) === 'number' ? 'number' : 'string';\n                            }\n                        }\n                        else if (typeof (stringValue) === 'number') { // number type values\n                            operatorValue = this.getOperatorFromMongoOperator(key);\n                            type = 'number';\n                            ruleValue = stringValue;\n                        }\n                        if (typeof (stringValue) === 'string') { // string type values\n                            if (key === '$regex') {\n                                operatorValue = 'contains';\n                                ruleValue = stringValue;\n                                type = 'string';\n                            }\n                            if (key === '$ne') { // not equal\n                                if (stringValue !== null && stringValue.length > 0 && isNaN(Date.parse(stringValue))) {\n                                    operatorValue = 'notequal';\n                                    ruleValue = stringValue;\n                                }\n                                else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(stringValue)) { // is not null operator\n                                    operatorValue = 'isnotnull';\n                                    ruleValue = stringValue;\n                                }\n                                else if (stringValue === '') { // is not empty operator\n                                    operatorValue = 'isnotempty';\n                                    ruleValue = stringValue;\n                                }\n                                type = 'string';\n                            }\n                            if (stringValue.indexOf('^') > -1) {\n                                operatorValue = 'startswith';\n                                ruleValue = stringValue.replace('^', '');\n                                type = 'string';\n                            }\n                            if (stringValue.indexOf('$') > -1 && key !== '$not') {\n                                operatorValue = 'endswith';\n                                ruleValue = stringValue.replace('$', '');\n                                type = 'string';\n                            }\n                            for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {\n                                var column = _a[_i];\n                                if (column.field === condition) {\n                                    fieldType = column.type;\n                                    break;\n                                }\n                            }\n                            if (!isNaN(Date.parse(stringValue)) || fieldType === 'date') { // Date type operators\n                                operatorValue = operatorValue || this.getOperatorFromMongoOperator(key);\n                                type = 'date';\n                                ruleValue = stringValue;\n                            }\n                        }\n                    }\n                }\n                else if (value && typeof (value) === 'string' && !isNaN(Date.parse(value))) {\n                    operatorValue = 'equal';\n                    ruleValue = value;\n                    type = 'date';\n                }\n                else if (typeof (value) === 'string' && value !== '' && value !== 'true' && value !== 'false') {\n                    operatorValue = 'equal';\n                    ruleValue = value;\n                    type = 'string';\n                }\n                else if (typeof (value) === 'string' && value === '') {\n                    operatorValue = 'isempty';\n                    ruleValue = value;\n                    type = 'string';\n                }\n                if (betweenOperatorArray && betweenOperatorArray.length > 1) { // between opertor value\n                    rule = { field: condition, label: condition, value: betweenOperatorArray, operator: operatorValue, type: type };\n                }\n                else if (inOperatorArray && inOperatorArray.length > 1) { // in operator value\n                    rule = { field: condition, label: condition, value: inOperatorArray, operator: operatorValue, type: type };\n                }\n                else {\n                    rule = { field: condition, label: condition, value: ruleValue, operator: operatorValue, type: type };\n                }\n                rules.push(rule);\n                operatorValue = '';\n            }\n        }\n    };\n    QueryLibrary.prototype.convertParamSqlToSql = function (sql) {\n        var paramSql = sql.sql;\n        var paramValues = sql.params;\n        var parts = paramSql.split('?');\n        var normalSql = parts[0];\n        for (var i = 0; i < paramValues.length; i++) {\n            normalSql += (typeof (paramValues[i]) === 'string' ? \"'\" + paramValues[i] + \"'\" + parts[i + 1] : paramValues[i] + parts[i + 1]);\n        }\n        if (normalSql.length >= 2 && normalSql[0] === '(' && normalSql[normalSql.length - 1] === ')') {\n            normalSql = normalSql.slice(1, -1);\n        }\n        normalSql = normalSql.replace(/!= ''(?! =)/g, 'IS NOT EMPTY').replace(/= ''/g, 'IS EMPTY');\n        return normalSql;\n    };\n    QueryLibrary.prototype.convertNamedParamSqlToSql = function (sql) {\n        var namedParamSql = sql.sql;\n        var params = sql.params;\n        var normalSql = namedParamSql;\n        Object.keys(params).forEach(function (paramName) {\n            var paramValue = params[paramName];\n            paramName = ':' + paramName;\n            normalSql = normalSql.replace(paramName, typeof (paramValue) === 'string' ? \"'\" + paramValue + \"'\" : String(paramValue));\n        });\n        if (normalSql.length >= 2 && normalSql[0] === '(' && normalSql[normalSql.length - 1] === ')') {\n            normalSql = normalSql.slice(1, -1);\n        }\n        normalSql = normalSql.replace(/!= ''(?! =)/g, 'IS NOT EMPTY').replace(/= ''/g, 'IS EMPTY');\n        return normalSql;\n    };\n    QueryLibrary.prototype.getParameterSql = function (qbrule) {\n        var qbRule = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, qbrule, null, true);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var value = this.updateRuleValue(qbRule, false);\n        return this.getParameterSQLVal(this.parent.getSqlFromRules(qbRule), value['ruleVal']);\n    };\n    QueryLibrary.prototype.getNamedParameterSql = function (qbrule) {\n        var qbRule = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, qbrule, null, true);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var value = this.updateRuleValue(qbRule, true);\n        return this.getNamedParameterSQLVal(this.parent.getSqlFromRules(qbRule), value['namedRuleVal']);\n    };\n    QueryLibrary.prototype.getParameterSQLVal = function (content, ruleValue) {\n        var replacedString = content.replace(/[%']/g, '');\n        return { sql: '(' + replacedString + ')', params: ruleValue };\n    };\n    QueryLibrary.prototype.getNamedParameterSQLVal = function (content, ruleValue) {\n        var replacedString = content.replace(/[%']/g, '');\n        return { sql: '(' + replacedString + ')', params: ruleValue };\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    QueryLibrary.prototype.updateRuleValue = function (rule, isNamedParameter) {\n        var ruleVal = [];\n        var namedRuleVal = {};\n        var namedParameters = [];\n        return this.updateValue(rule.rules, isNamedParameter, ruleVal, namedRuleVal, namedParameters);\n    };\n    QueryLibrary.prototype.updateValue = function (rules, isNamedParameter, ruleVal, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    namedRuleVal, namedParameters) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rules)) {\n            return { ruleVal: ruleVal, namedRuleVal: namedRuleVal };\n        }\n        for (var i = 0; i < rules.length; i++) {\n            if (rules[i].rules) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var value = this.updateValue(rules[i].rules, isNamedParameter, ruleVal, namedRuleVal, namedParameters);\n                ruleVal = value['ruleVal'];\n                namedRuleVal = value['namedRuleVal'];\n            }\n            else {\n                var namedField = void 0;\n                if (rules[i].value instanceof Array) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    for (var j = 0; j < (rules[i].value).length; j++) {\n                        if (isNamedParameter) {\n                            namedField = this.getNamedParameter(rules[i].field, namedParameters);\n                        }\n                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rules[i].value[j])) {\n                            if (rules[i].type === 'string' || rules[i].type === 'date') {\n                                if (isNamedParameter) {\n                                    namedRuleVal[namedField] = rules[i].value[j];\n                                }\n                                else {\n                                    ruleVal.push(rules[i].value[j]);\n                                }\n                            }\n                            else {\n                                if (isNamedParameter) {\n                                    namedRuleVal[namedField] = rules[i].value[j];\n                                }\n                                else {\n                                    ruleVal.push(rules[i].value[j]);\n                                }\n                            }\n                        }\n                        if (isNamedParameter) {\n                            rules[i].value[j] = ':' + namedField;\n                        }\n                        else {\n                            rules[i].value[j] = '?';\n                        }\n                    }\n                }\n                else {\n                    if (isNamedParameter) {\n                        namedField = this.getNamedParameter(rules[i].field, namedParameters);\n                    }\n                    if (rules[i].operator.indexOf('null') < 1) {\n                        if (rules[i].type !== 'string' || (rules[i].type === 'string' && (rules[i].value !== '' || rules[i].value === 0))) {\n                            if (rules[i].type === 'string' || rules[i].type === 'date') {\n                                if (rules[i].operator.indexOf('empty') < 1) {\n                                    var value = rules[i].value.toString();\n                                    switch (rules[i].operator) {\n                                        case 'startswith':\n                                        case 'notstartswith':\n                                            value = value + '%';\n                                            break;\n                                        case 'endswith':\n                                        case 'notendswith':\n                                            value = '%' + value;\n                                            break;\n                                        case 'contains':\n                                        case 'notcontains':\n                                            value = '%' + value + '%';\n                                            break;\n                                    }\n                                    if (isNamedParameter) {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        namedRuleVal[namedField] = value;\n                                    }\n                                    else {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        ruleVal.push(value);\n                                    }\n                                }\n                                else {\n                                    if (isNamedParameter) {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        namedRuleVal[namedField] = '';\n                                    }\n                                    else {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        ruleVal.push('');\n                                    }\n                                    if (rules[i].operator === 'isempty') {\n                                        rules[i].operator = 'equal';\n                                    }\n                                    else {\n                                        rules[i].operator = 'notequal';\n                                    }\n                                }\n                            }\n                            else {\n                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rules[i].value)) {\n                                    if (isNamedParameter) {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        namedRuleVal[namedField] = rules[i].value;\n                                    }\n                                    else {\n                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                        ruleVal.push(rules[i].value);\n                                    }\n                                }\n                            }\n                            if (isNamedParameter) {\n                                rules[i].value = ':' + namedField;\n                            }\n                            else {\n                                rules[i].value = '?';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return { ruleVal: ruleVal, namedRuleVal: namedRuleVal };\n    };\n    QueryLibrary.prototype.getNamedParameter = function (field, namedParameters) {\n        var newField = null;\n        if (namedParameters.length > 0) {\n            for (var i = namedParameters.length - 1; i >= 0; i--) {\n                var currField = namedParameters[i];\n                if (currField.indexOf(field) > -1) {\n                    var idx = parseInt(currField.split('_')[1], 10) + 1;\n                    newField = field + '_' + idx;\n                    namedParameters.push(newField);\n                    break;\n                }\n            }\n        }\n        if (!newField) {\n            newField = field + '_1';\n            namedParameters.push(newField);\n        }\n        return newField;\n    };\n    QueryLibrary.prototype.getModuleName = function () {\n        return 'query-library';\n    };\n    return QueryLibrary;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-querybuilder/src/query-builder/query-library.js?");

/***/ })

}]);