"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-documenteditor_src_document-editor_implementation_editor_e-f861f192"],{

/***/ "./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* binding */ Base64),\n/* harmony export */   HelperMethods: () => (/* binding */ HelperMethods),\n/* harmony export */   Point: () => (/* binding */ Point),\n/* harmony export */   WrapPosition: () => (/* binding */ WrapPosition)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_compression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-compression */ \"./node_modules/@syncfusion/ej2-compression/index.js\");\n/* harmony import */ var _viewer_page__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../viewer/page */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/viewer/page.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../index */ \"./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/index.js\");\n\n\n\n\n\n/**\n * @private\n */\nvar HelperMethods = /** @class */ (function () {\n    function HelperMethods() {\n    }\n    /**\n     * Inserts text at specified index in string.\n     *\n     * @private\n     * @param {string} spanText - Specifies the span text.\n     * @param {number} index - Specifies the index\n     * @param {string} text - Specifies the text\n     * @returns {string} - Returns modified string\n     */\n    HelperMethods.insert = function (spanText, index, text) {\n        if (index >= 0) {\n            return [spanText.slice(0, index) + text + spanText.slice(index)].join('');\n        }\n        else {\n            return text + this;\n        }\n    };\n    /**\n     * @returns {string} returns a string value\n     * @param {string} text takes string as parameter\n     * @private\n     */\n    HelperMethods.replaceSpecialChars = function (text) {\n        text = text.replace('^[\\\\s]*', '');\n        /* eslint-disable quotes */\n        text = text.replace(\"^[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+\", '');\n        text = text.replace(\"[#@!~\\\\$%^&\\\\*\\\\(\\\\)\\\\-_\\\\+\\\\.=\\\\{\\\\}\\\\[\\\\]:;,<>\\\\?'\\\\\\\\\\\"\\\\“\\\\”\\\\//0123456789]+$\", '');\n        /* eslint-enable quotes */\n        return text;\n    };\n    /**\n     * @returns {any} returns any type\n     * @param {string} text gets string as a input\n     * @public\n     */\n    HelperMethods.getSpellCheckData = function (text) {\n        text = text.replace('\\r\\n', ' ');\n        text = text.replace('\\n', ' ');\n        text = text.replace('\\r', ' ');\n        text = text.replace('\\v', ' ');\n        text = text.replace('\\t', ' ');\n        text = text.replace('/', ' ');\n        text = text.replace(String.fromCharCode(160), ' ');\n        var stringarr = text.split(' ');\n        var spellColl = [];\n        for (var _i = 0, stringarr_1 = stringarr; _i < stringarr_1.length; _i++) {\n            var str = stringarr_1[_i];\n            var spellInfo = {};\n            spellInfo.Text = this.replaceSpecialChars(str);\n            spellInfo.HasSpellError = false;\n            spellColl.push(spellInfo);\n        }\n        return spellColl;\n    };\n    /**\n     * Check given string is a valid either roman or arabic number\n     * @private\n     * @param {string} input input string value to check if it is a number\n     * @returns {boolean} weather given string is a number or not\n     */\n    HelperMethods.checkTextFormat = function (input) {\n        // Regular expression patterns for Roman and Arabic numerals\n        var romanPattern = /^(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/i;\n        var arabicPattern = /^[0-9]+$/;\n        // Check if the input matches either pattern\n        if (romanPattern.test(input) || arabicPattern.test(input)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @returns {string}\n     * Sanitize the string for xss string content\n     * @param {string} value accepts a string value\n     * @public\n     */\n    HelperMethods.sanitizeString = function (value) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {\n            return '';\n        }\n        var sanitizedContent = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(value)\n            .replace(/&amp;/g, '&')\n            .replace(/&nbsp;/g, String.fromCharCode(160))\n            .replace(/&gt;/g, '>')\n            .replace(/&lt;/g, '<');\n        return sanitizedContent;\n    };\n    /**\n     * @returns {any} returns any type\n     * Get the SFDT document from the optimized SFDT.\n     * @param {any} json accepts a json file\n     * @public\n     */\n    HelperMethods.getSfdtDocument = function (json) {\n        json = (json instanceof Object) ? json : JSON.parse(json);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(json.sfdt)) {\n            var zipArchive = new _syncfusion_ej2_compression__WEBPACK_IMPORTED_MODULE_1__.ZipArchive();\n            zipArchive.open(JSON.stringify(json.sfdt));\n            var zipItem = zipArchive.items[0];\n            var value = new Uint8Array(zipItem.data);\n            var str = new TextDecoder('utf-8').decode(value);\n            json = JSON.parse(str);\n        }\n        // json = JSON.parse(this.sanitizeString(JSON.stringify(json)));\n        return json;\n    };\n    /**\n     * @returns {number}\n     * Generates a unique unique hexadecimal ID.\n     * @param {WList[]} lists accepts list\n     * @param {WAbstractList[]} abstractLists accepts array of abstractList\n     * @public\n     */\n    HelperMethods.generateUniqueId = function (lists, abstractLists) {\n        var isAbstractList = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(abstractLists) ? true : false;\n        var randomNumber = Math.floor(Math.random() * 100000000);\n        if (isAbstractList) {\n            return this.isSameListIDExists(randomNumber, undefined, abstractLists, isAbstractList) ?\n                this.generateUniqueId(undefined, abstractLists) : randomNumber;\n        }\n        else {\n            return this.isSameListIDExists(randomNumber, lists) ? this.generateUniqueId(lists) : randomNumber;\n        }\n    };\n    /**\n     * @private\n     * @returns {string} returns a string value\n     */\n    HelperMethods.generateHexDecimal = function () {\n        return (Math.floor(Math.random() * (4000000000 - 270000000)) + 270000000).toString(16).toUpperCase();\n    };\n    /**\n     * @private\n     * @param {number} id id need to be converted\n     * @returns {string} returns a string value\n     */\n    HelperMethods.numberToHexDecimal = function (id) {\n        return (id >>> 0).toString(16).toUpperCase();\n    };\n    /**\n     * @returns {boolean} returns a boolean value\n     * @param {number} nsid accepts number as a parameter\n     * @param {WList[]} lists accepts an array of type WList\n     * @param {WAbstractList[]} abstractLists accepts an array of type WAbstractList\n     * @param {boolean} isAbstractList accepts a boolean value\n     * @private\n     */\n    HelperMethods.isSameListIDExists = function (nsid, lists, abstractLists, isAbstractList) {\n        if (isAbstractList) {\n            for (var i = 0; i < abstractLists.length; i++) {\n                var abstractList = abstractLists[parseInt(i.toString(), 10)];\n                if (nsid === abstractList.nsid) {\n                    return true;\n                }\n            }\n        }\n        else {\n            for (var j = 0; j < lists.length; j++) {\n                var list = lists[parseInt(j.toString(), 10)];\n                if (nsid === list.nsid) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /* eslint-enable */\n    /**\n     * Removes text from specified index in string.\n     *\n     * @private\n     * @param {string} text - Specifies the text\n     * @param {number} index - Specifies the index\n     * @returns {string} - Returns modified string\n     */\n    HelperMethods.remove = function (text, index) {\n        if (index === 0) {\n            return text.substring(index + 1, text.length);\n        }\n        else {\n            return text.substring(0, index) + text.substring(index + 1, text.length);\n        }\n    };\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    HelperMethods.indexOfAny = function (text, wordSplitCharacter) {\n        var index = undefined;\n        for (var j = 0; j < wordSplitCharacter.length; j++) {\n            var temp = text.indexOf(wordSplitCharacter[parseInt(j.toString(), 10)]);\n            if (temp !== -1 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {\n                index = temp;\n            }\n            else if (temp !== -1 && temp < index) {\n                index = temp;\n            }\n        }\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) ? -1 : index;\n    };\n    HelperMethods.lastIndexOfAny = function (text, wordSplitCharacter) {\n        for (var i = text.length - 1; i >= 0; i--) {\n            for (var j = 0; j <= wordSplitCharacter.length - 1; j++) {\n                if (text[parseInt(i.toString(), 10)] === wordSplitCharacter[parseInt(j.toString(), 10)]) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Convert ARGB to RGB\n     * @private\n     * @param {string} color accepts a color string\n     * @returns {string} returns a string value\n     */\n    HelperMethods.convertArgbToRgb = function (color) {\n        if (color.length >= 8) {\n            return color.substr(0, 6);\n        }\n        return color;\n    };\n    HelperMethods.convertRgbToHex = function (val) {\n        var hex = Number(val).toString(16);\n        if (hex.length < 2) {\n            hex = '0' + hex;\n        }\n        return hex;\n    };\n    // public static convertPointsToCentimetre(val: number): number {\n    //     return val/28.34644;\n    // }\n    // public static convertCentimetreToPoints(val: number): number {\n    //     return val*28.34644;\n    // }\n    /**\n     * @returns {number} returns a number\n     * @param {string} input accepts a string value as an input\n     * @private\n     */\n    HelperMethods.getNumberFromString = function (input) {\n        var numbers = [];\n        var currentNumber = '';\n        for (var _i = 0, input_1 = input; _i < input_1.length; _i++) {\n            var char = input_1[_i];\n            if (/\\d|\\./.test(char)) {\n                currentNumber += char;\n            }\n            else if (currentNumber) {\n                numbers.push(parseFloat(currentNumber));\n                currentNumber = '';\n            }\n        }\n        if (currentNumber) {\n            numbers.push(parseFloat(currentNumber));\n        }\n        return parseFloat(numbers.join(''));\n    };\n    HelperMethods.convertHexToRgb = function (colorCode) {\n        var r;\n        var g;\n        var b;\n        if (colorCode) {\n            colorCode = colorCode.replace(/[^0-9A-â€Œâ€‹F]/gi, ''); // To remove # from color code string.\n            var colCodeNo = parseInt(colorCode, 16);\n            if (colorCode.length === 8) {\n                r = (colCodeNo >> 32) & 255;\n                g = (colCodeNo >> 16) & 255;\n                b = (colCodeNo >> 8) & 255;\n            }\n            else if (colorCode.length === 6) {\n                r = (colCodeNo >> 16) & 255;\n                g = (colCodeNo >> 8) & 255;\n                b = colCodeNo & 255;\n            }\n            return { 'r': r, 'g': g, 'b': b };\n        }\n        return undefined;\n    };\n    HelperMethods.addCssStyle = function (css) {\n        var style = document.createElement('style');\n        if (style.style.cssText) {\n            style.style.cssText = css;\n        }\n        else {\n            style.appendChild(document.createTextNode(css));\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    };\n    /**\n     * @returns {HTMLElement[]} returns an array of HTML elements\n     * @param {NodeListOf<HTMLElement>} nodeList accepts a list of HTML elements\n     * @public\n     */\n    HelperMethods.convertNodeListToArray = function (nodeList) {\n        var array = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodeList)) {\n            for (var i = 0; i < nodeList.length; i++) {\n                array.push(nodeList[parseInt(i.toString(), 10)]);\n            }\n        }\n        return array;\n    };\n    HelperMethods.getHighlightColorCode = function (highlightColor) {\n        var color = '#ffffff';\n        switch (highlightColor) {\n            case 'Yellow':\n                color = '#ffff00';\n                break;\n            case 'BrightGreen':\n                color = '#00ff00';\n                break;\n            case 'Turquoise':\n                color = '#00ffff';\n                break;\n            case 'Pink':\n                color = '#ff00ff';\n                break;\n            case 'Blue':\n                color = '#0000ff';\n                break;\n            case 'Red':\n                color = '#ff0000';\n                break;\n            case 'DarkBlue':\n                color = '#000080';\n                break;\n            case 'Teal':\n                color = '#008080';\n                break;\n            case 'Green':\n                color = '#008000';\n                break;\n            case 'Violet':\n                color = '#800080';\n                break;\n            case 'DarkRed':\n                color = '#800000';\n                break;\n            case 'DarkYellow':\n                color = '#808000';\n                break;\n            case 'Gray50':\n                color = '#808080';\n                break;\n            case 'Gray25':\n                color = '#c0c0c0';\n                break;\n            case 'Black':\n                color = '#000000';\n                break;\n        }\n        return color;\n    };\n    HelperMethods.isVeryDark = function (backColor) {\n        var backgroundColor = backColor.substring(1);\n        var r = parseInt(backgroundColor.substr(0, 2), 16);\n        var g = parseInt(backgroundColor.substr(2, 2), 16);\n        var b = parseInt(backgroundColor.substr(4, 2), 16);\n        var contrast = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n        return contrast <= 60;\n    };\n    HelperMethods.getColor = function (color) {\n        if (color.length > 0) {\n            if (color[0] === '#') {\n                if (color.length > 7) {\n                    return color.substr(0, 7);\n                }\n            }\n        }\n        return color;\n    };\n    HelperMethods.getTextVerticalAlignment = function (textVerticalAlignment) {\n        switch (textVerticalAlignment) {\n            case 0:\n                return 'Top';\n            case 1:\n                return 'Middle';\n            case 2:\n                return 'Bottom';\n            default:\n                return textVerticalAlignment;\n        }\n    };\n    HelperMethods.convertPointToPixel = function (point) {\n        point = HelperMethods.round(point, 5);\n        var pixel = HelperMethods.round((point * 96 / 72), 5);\n        return pixel;\n    };\n    HelperMethods.convertPixelToPoint = function (pixel) {\n        var point = HelperMethods.round((pixel * 72 / 96), 5);\n        return point;\n    };\n    HelperMethods.isLinkedFieldCharacter = function (inline) {\n        if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.FieldElementBox && inline.fieldType === 0) {\n            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inline.fieldEnd);\n        }\n        else if (inline instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.FieldElementBox && inline.fieldType === 2) {\n            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inline.fieldBegin) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inline.fieldEnd);\n        }\n        else {\n            return !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inline.fieldBegin);\n        }\n    };\n    /**\n     * Removes white space in a string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.removeSpace = function (text) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) && text.length !== 0) {\n            for (var i = 0; i < text.length; i++) {\n                if (text.charAt(i) === ' ') {\n                    //replace the space by empty string in string\n                    text = text.replace(' ', '');\n                }\n            }\n        }\n        return text;\n    };\n    /**\n     * Trims white space at start of the string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.trimStart = function (text) {\n        var i = 0;\n        for (i; i < text.length; i++) {\n            if (text[parseInt(i.toString(), 10)] !== ' ') {\n                break;\n            }\n        }\n        return text.substring(i, text.length);\n    };\n    /**\n     * Trims white space at end of the string.\n     *\n     * @private\n     * @param {string} text - Specifies text to trim.\n     * @returns {string} - Returns modified text.\n     */\n    HelperMethods.trimEnd = function (text) {\n        var i = text.length - 1;\n        for (i; i >= 0; i--) {\n            if (text[parseInt(i.toString(), 10)] !== ' ') {\n                break;\n            }\n        }\n        return text.substring(0, i + 1);\n    };\n    /**\n     * Checks whether string ends with whitespace.\n     * @private\n     * @param {string} text - Specifies the text.\n     * @returns {boolean} - Returns true if text ends with specified text.\n     */\n    HelperMethods.endsWith = function (text) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) && text.length !== 0) {\n            return text[text.length - 1] === ' ';\n        }\n        return false;\n    };\n    HelperMethods.addSpace = function (length) {\n        var str = '';\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                str += ' ';\n            }\n        }\n        return str;\n    };\n    HelperMethods.getBoolValue = function (value) {\n        return value ? 1 : 0;\n    };\n    HelperMethods.getBoolInfo = function (value, keywordIndex) {\n        if (keywordIndex === 1) {\n            return this.getBoolValue(value);\n        }\n        else {\n            return value;\n        }\n    };\n    HelperMethods.parseBoolValue = function (value) {\n        if (value instanceof String) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value) || value === 'f' || value === '0' || value === 'off' || value === 'false') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        /* eslint-disable eqeqeq */\n        else {\n            if (value == 1) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    /* eslint-enable eqeqeq */\n    HelperMethods.getBaselineAlignmentEnumValue = function (baselineAlignment) {\n        switch (baselineAlignment) {\n            case 'Normal':\n                return 0;\n            case 'Superscript':\n                return 1;\n            case 'Subscript':\n                return 2;\n        }\n    };\n    HelperMethods.getFontHintTypeEnumValue = function (fontHintType) {\n        switch (fontHintType) {\n            case 'Default':\n                return 0;\n            case 'EastAsia':\n                return 1;\n            case 'CS':\n                return 2;\n        }\n    };\n    HelperMethods.getUnderlineEnumValue = function (underline) {\n        switch (underline) {\n            case 'None':\n                return 0;\n            case 'Single':\n                return 1;\n            case 'Words':\n                return 2;\n            case 'Double':\n                return 3;\n            case 'Dotted':\n                return 4;\n            case 'Thick':\n                return 5;\n            case 'Dash':\n                return 6;\n            case 'DashLong':\n                return 7;\n            case 'DotDash':\n                return 8;\n            case 'DotDotDash':\n                return 9;\n            case 'Wavy':\n                return 10;\n            case 'DottedHeavy':\n                return 11;\n            case 'DashHeavy':\n                return 12;\n            case 'DashLongHeavy':\n                return 13;\n            case 'DotDashHeavy':\n                return 14;\n            case 'DotDotDashHeavy':\n                return 15;\n            case 'WavyHeavy':\n                return 16;\n            case 'WavyDouble':\n                return 17;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getStrikeThroughEnumValue = function (strikethrough) {\n        switch (strikethrough) {\n            case 'None':\n                return 0;\n            case 'SingleStrike':\n                return 1;\n            case 'DoubleStrike':\n                return 2;\n        }\n    };\n    HelperMethods.getHighlightColorEnumValue = function (highlightColor) {\n        switch (highlightColor) {\n            case 'NoColor':\n                return 0;\n            case 'Yellow':\n                return 1;\n            case 'BrightGreen':\n                return 2;\n            case 'Turquoise':\n                return 3;\n            case 'Pink':\n                return 4;\n            case 'Blue':\n                return 5;\n            case 'Red':\n                return 6;\n            case 'DarkBlue':\n                return 7;\n            case 'Teal':\n                return 8;\n            case 'Green':\n                return 9;\n            case 'Violet':\n                return 10;\n            case 'DarkRed':\n                return 11;\n            case 'DarkYellow':\n                return 12;\n            case 'Gray50':\n                return 13;\n            case 'Gray25':\n                return 14;\n            case 'Black':\n                return 15;\n        }\n    };\n    HelperMethods.getBiDirectionalOverride = function (biDirectionalOverride) {\n        switch (biDirectionalOverride) {\n            case 'None':\n                return 0;\n            case 'LTR':\n                return 1;\n            case 'RTL':\n                return 2;\n        }\n    };\n    HelperMethods.getBreakClearType = function (breakClearType) {\n        switch (breakClearType) {\n            case 'None':\n                return 0;\n            case 'Left':\n                return 1;\n            case 'Right':\n                return 2;\n            case 'All':\n                return 3;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getOutlineLevelEnumValue = function (outlineLevel) {\n        switch (outlineLevel) {\n            case 'BodyText':\n                return 0;\n            case 'Level1':\n                return 1;\n            case 'Level2':\n                return 2;\n            case 'Level3':\n                return 3;\n            case 'Level4':\n                return 4;\n            case 'Level5':\n                return 5;\n            case 'Level6':\n                return 6;\n            case 'Level7':\n                return 7;\n            case 'Level8':\n                return 8;\n            case 'Level9':\n                return 9;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getTextAlignmentEnumValue = function (textAlignment) {\n        switch (textAlignment) {\n            case 'Left':\n                return 0;\n            case 'Center':\n                return 1;\n            case 'Right':\n                return 2;\n            case 'Justify':\n                return 3;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getLineStyleEnumValue = function (lineStyle) {\n        switch (lineStyle) {\n            case 'Single':\n                return 0;\n            case 'None':\n                return 1;\n            case 'Dot':\n                return 2;\n            case 'DashSmallGap':\n                return 3;\n            case 'DashLargeGap':\n                return 4;\n            case 'DashDot':\n                return 5;\n            case 'DashDotDot':\n                return 6;\n            case 'Double':\n                return 7;\n            case 'Triple':\n                return 8;\n            case 'ThinThickSmallGap':\n                return 9;\n            case 'ThickThinSmallGap':\n                return 10;\n            case 'ThinThickThinSmallGap':\n                return 11;\n            case 'ThinThickMediumGap':\n                return 12;\n            case 'ThickThinMediumGap':\n                return 13;\n            case 'ThinThickThinMediumGap':\n                return 14;\n            case 'ThinThickLargeGap':\n                return 15;\n            case 'ThickThinLargeGap':\n                return 16;\n            case 'ThinThickThinLargeGap':\n                return 17;\n            case 'SingleWavy':\n                return 18;\n            case 'DoubleWavy':\n                return 19;\n            case 'DashDotStroked':\n                return 20;\n            case 'Emboss3D':\n                return 21;\n            case 'Engrave3D':\n                return 22;\n            case 'Outset':\n                return 23;\n            case 'Inset':\n                return 24;\n            case 'Thick':\n                return 25;\n            case 'Cleared':\n                return 26;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getLineSpacingTypeEnumValue = function (lineSpacing) {\n        switch (lineSpacing) {\n            case 'Multiple':\n                return 0;\n            case 'AtLeast':\n                return 1;\n            case 'Exactly':\n                return 2;\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.writeBorder = function (wBorder, keywordIndex) {\n        var border = {};\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.colorProperty[keywordIndex]] = wBorder.hasValue('color') ? wBorder.color : undefined;\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.hasNoneStyleProperty[keywordIndex]] = wBorder.hasValue('hasNoneStyle') ? HelperMethods.getBoolInfo(wBorder.hasNoneStyle, keywordIndex) : undefined;\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.lineStyleProperty[keywordIndex]] = wBorder.hasValue('lineStyle') ?\n            keywordIndex == 1 ? this.getLineStyleEnumValue(wBorder.lineStyle) : wBorder.lineStyle : undefined;\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.lineWidthProperty[keywordIndex]] = wBorder.hasValue('lineWidth') ? wBorder.lineWidth : undefined;\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.shadowProperty[keywordIndex]] = wBorder.hasValue('shadow') ? HelperMethods.getBoolInfo(wBorder.shadow, keywordIndex) : undefined;\n        border[_index__WEBPACK_IMPORTED_MODULE_3__.spaceProperty[keywordIndex]] = wBorder.hasValue('space') ? wBorder.space : undefined;\n        return border;\n    };\n    /* eslint-disable */\n    HelperMethods.writeBorders = function (wBorders, keywordIndex) {\n        var borders = {};\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.topProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('top'), keywordIndex);\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.leftProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('left'), keywordIndex);\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.rightProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('right'), keywordIndex);\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.bottomProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('bottom'), keywordIndex);\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.horizontalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('horizontal'), keywordIndex);\n        borders[_index__WEBPACK_IMPORTED_MODULE_3__.verticalProperty[keywordIndex]] = this.writeBorder(wBorders.getBorder('vertical'), keywordIndex);\n        return borders;\n    };\n    /* eslint-disable */\n    HelperMethods.writeParagraphFormat = function (paragraphFormat, isInline, format, keywordIndex) {\n        keywordIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(keywordIndex) ? 0 : keywordIndex;\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.bordersProperty[keywordIndex]] = this.writeBorders(format.borders, keywordIndex);\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.leftIndentProperty[keywordIndex]] = isInline ? format.leftIndent : format.getValue('leftIndent');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.rightIndentProperty[keywordIndex]] = isInline ? format.rightIndent : format.getValue('rightIndent');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.firstLineIndentProperty[keywordIndex]] = isInline ? format.firstLineIndent : format.getValue('firstLineIndent');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.textAlignmentProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.textAlignment) : format.textAlignment :\n            keywordIndex == 1 ? this.getTextAlignmentEnumValue(format.getValue('textAlignment')) : format.getValue('textAlignment');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.beforeSpacingProperty[keywordIndex]] = isInline ? format.beforeSpacing : format.getValue('beforeSpacing');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.afterSpacingProperty[keywordIndex]] = isInline ? format.afterSpacing : format.getValue('afterSpacing');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.spaceBeforeAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceBeforeAuto, keywordIndex) : format.getValue('spaceBeforeAuto');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.spaceAfterAutoProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.spaceAfterAuto, keywordIndex) : format.getValue('spaceAfterAuto');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.lineSpacingProperty[keywordIndex]] = isInline ? format.lineSpacing : format.getValue('lineSpacing');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.lineSpacingTypeProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.lineSpacingType) : format.lineSpacingType :\n            keywordIndex == 1 ? this.getLineSpacingTypeEnumValue(format.getValue('lineSpacingType')) : format.getValue('lineSpacingType');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.styleNameProperty[keywordIndex]] = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format.baseStyle) ? format.baseStyle.name : undefined;\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.outlineLevelProperty[keywordIndex]] = isInline ?\n            keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.outlineLevel) : format.outlineLevel :\n            keywordIndex == 1 ? this.getOutlineLevelEnumValue(format.getValue('outlineLevel')) : format.getValue('outlineLevel');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.bidiProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.keepLinesTogetherProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepLinesTogether, keywordIndex) : format.getValue('keepLinesTogether');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.keepWithNextProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.keepWithNext, keywordIndex) : format.getValue('keepWithNext');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.contextualSpacingProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.contextualSpacing, keywordIndex) : format.getValue('contextualSpacing');\n        paragraphFormat[_index__WEBPACK_IMPORTED_MODULE_3__.widowControlProperty[keywordIndex]] = isInline ? HelperMethods.getBoolInfo(format.widowControl, keywordIndex) : format.getValue('widowControl');\n    };\n    /* eslint-disable */\n    HelperMethods.writeCharacterFormat = function (characterFormat, isInline, format, keywordIndex, isWriteAllValues) {\n        keywordIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(keywordIndex) ? 0 : keywordIndex;\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.boldProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.bold, keywordIndex) : format.getValue('bold');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.italicProperty[keywordIndex]] = isWriteAllValues ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : isInline ? HelperMethods.getBoolInfo(format.italic, keywordIndex) : format.getValue('italic');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontSizeProperty[keywordIndex]] = isWriteAllValues ? format.fontSize : isInline ? this.toWriteInline(format, 'fontSize') : format.getValue('fontSize');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyProperty[keywordIndex]] = isWriteAllValues ? format.fontFamily : isInline ? this.toWriteInline(format, 'fontFamily') : format.getValue('fontFamily');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.underlineProperty[keywordIndex]] = isWriteAllValues ? format.underline : isInline ?\n            keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.underline) : format.underline :\n            keywordIndex == 1 ? HelperMethods.getUnderlineEnumValue(format.getValue('underline')) : format.getValue('underline');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.underlineColorProperty[keywordIndex]] = isWriteAllValues ? format.underlineColor : isInline ? this.toWriteInline(format, 'underlineColor') : format.getValue('underlineColor');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontHintTypeProperty[keywordIndex]] = isWriteAllValues ? format.fontHintType : isInline ?\n            keywordIndex == 1 ? HelperMethods.getFontHintTypeEnumValue(format.fontHintType) : (format.fontHintType) :\n            keywordIndex == 1 ? HelperMethods.getFontHintTypeEnumValue(format.getValue('fontHintType')) : format.getValue('fontHintType');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.strikethroughProperty[keywordIndex]] = isWriteAllValues ? format.strikethrough : isInline ?\n            keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.strikethrough) : (format.strikethrough) :\n            keywordIndex == 1 ? HelperMethods.getStrikeThroughEnumValue(format.getValue('strikethrough')) : format.getValue('strikethrough');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.baselineAlignmentProperty[keywordIndex]] = isWriteAllValues ? format.baselineAlignment : isInline ?\n            keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.baselineAlignment) : (format.baselineAlignment) :\n            keywordIndex == 1 ? HelperMethods.getBaselineAlignmentEnumValue(format.getValue('baselineAlignment')) : format.getValue('baselineAlignment');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.highlightColorProperty[keywordIndex]] = isWriteAllValues ? format.highlightColor : isInline ?\n            keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.highlightColor) : (format.highlightColor) :\n            keywordIndex == 1 ? HelperMethods.getHighlightColorEnumValue(format.getValue('highlightColor')) : format.getValue('highlightColor');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontColorProperty[keywordIndex]] = isWriteAllValues ? format.fontColor : isInline ? this.toWriteInline(format, 'fontColor') : format.getValue('fontColor');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.styleNameProperty[keywordIndex]] = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format.baseCharStyle) ? format.baseCharStyle.name : undefined;\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.bidiProperty[keywordIndex]] = isWriteAllValues ? format.bidi : isInline ? HelperMethods.getBoolInfo(format.bidi, keywordIndex) : format.getValue('bidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.bdoProperty[keywordIndex]] = isWriteAllValues ? format.bdo : isInline ?\n            keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.bdo) : (format.bdo) :\n            keywordIndex == 1 ? HelperMethods.getBiDirectionalOverride(format.getValue('bdo')) : format.getValue('bdo');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.boldBidiProperty[keywordIndex]] = isWriteAllValues ? format.boldBidi : isInline ? HelperMethods.getBoolInfo(format.boldBidi, keywordIndex) : format.getValue('boldBidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.italicBidiProperty[keywordIndex]] = isWriteAllValues ? format.italicBidi : isInline ? HelperMethods.getBoolInfo(format.italicBidi, keywordIndex) : format.getValue('italicBidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontSizeBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontSizeBidi : isInline ? format.fontSizeBidi : format.getValue('fontSizeBidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyBidiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyBidi : isInline ? format.fontFamilyBidi : format.getValue('fontFamilyBidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.allCapsProperty[keywordIndex]] = isWriteAllValues ? format.allCaps : isInline ? HelperMethods.getBoolInfo(format.allCaps, keywordIndex) : format.getValue('allCaps');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.localeIdBidiProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdBidi : format.getValue('localeIdBidi');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.localeIdProperty[keywordIndex]] = isWriteAllValues ? format.localeIdBidi : isInline ? format.localeIdAscii : format.getValue('localeIdAscii');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.localeIdFarEastProperty[keywordIndex]] = isWriteAllValues ? format.localeIdFarEast : isInline ? format.localeIdFarEast : format.getValue('localeIdFarEast');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.complexScriptProperty[keywordIndex]] = isWriteAllValues ? format.complexScript : isInline ? HelperMethods.getBoolInfo(format.complexScript, keywordIndex) : format.getValue('complexScript');\n        if (format.hasValue('hidden')) {\n            characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.hiddenProperty[keywordIndex]] = isWriteAllValues ? format.hidden : isInline ? HelperMethods.getBoolInfo(format.hidden, keywordIndex) : format.getValue('hidden');\n        }\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyAsciiProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyAscii : isInline ? this.toWriteInline(format, 'fontFamilyAscii') : format.getValue('fontFamilyAscii');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyNonFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyNonFarEast : isInline ? this.toWriteInline(format, 'fontFamilyNonFarEast') : format.getValue('fontFamilyNonFarEast');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyFarEastProperty[keywordIndex]] = isWriteAllValues ? format.fontFamilyFarEast : isInline ? this.toWriteInline(format, 'fontFamilyFarEast') : format.getValue('fontFamilyFarEast');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.characterSpacingProperty[keywordIndex]] = isWriteAllValues ? format.characterSpacing : isInline ? this.toWriteInline(format, 'characterSpacing') : format.getValue('characterSpacing');\n        characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.scalingProperty[keywordIndex]] = isWriteAllValues ? format.scaling : isInline ? this.toWriteInline(format, 'scaling') : format.getValue('scaling');\n        if (format.hasValue('fontFamily') || isWriteAllValues) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyAsciiProperty[keywordIndex]])) {\n                characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyAsciiProperty[keywordIndex]] = format.fontFamily;\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyNonFarEastProperty[keywordIndex]])) {\n                characterFormat[_index__WEBPACK_IMPORTED_MODULE_3__.fontFamilyNonFarEastProperty[keywordIndex]] = format.fontFamily;\n            }\n        }\n    };\n    /// <summary>\n    /// To check whether the font name is theme font or not.\n    /// </summary>\n    /// <param name=\"fontName\">Specify the font name.</param>\n    /// <returns>Returns true if the font name is represent a theme font.</returns>\n    HelperMethods.isThemeFont = function (fontName) {\n        return (fontName == \"majorAscii\" || fontName == \"majorBidi\" || fontName == \"majorEastAsia\"\n            || fontName == \"majorHAnsi\" || fontName == \"minorAscii\" || fontName == \"minorBidi\" || fontName == \"minorEastAsia\"\n            || fontName == \"minorHAnsi\");\n    };\n    HelperMethods.toWriteInline = function (format, propertyName) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(format.ownerBase) && (format.ownerBase instanceof _viewer_page__WEBPACK_IMPORTED_MODULE_2__.ElementBox)) {\n            return format.hasValue(propertyName) ? format[propertyName] : format.getValue(propertyName);\n        }\n        else {\n            return format[propertyName];\n        }\n    };\n    /* eslint-enable */\n    HelperMethods.round = function (value, decimalDigits) {\n        var temp = value;\n        for (var i = 0; i < decimalDigits; i++) {\n            temp = temp * 10;\n        }\n        temp = Math.round(temp);\n        for (var i = 0; i < decimalDigits; i++) {\n            temp = temp / 10;\n        }\n        return temp;\n    };\n    /* eslint-disable  */\n    HelperMethods.removeInvalidXmlChars = function (text) {\n        // From xml spec valid chars:\n        // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n        // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n        // and used unicodes in DocumentEditor \\f | \\v | \\r | \\u000E\n        var invalidXMLChars = /[^\\x09\\x0A\\x0C\\x0D\\v\\f\\r\\u000E\\x20-\\uD7FF\\uE000-\\uFFFD\\u{10000}-\\u{10FFFF}]/ug;\n        return text.replace(invalidXMLChars, '');\n    };\n    HelperMethods.commentInlines = function (ctext, mentions, keywordIndex) {\n        var _this = this;\n        var blocks = [];\n        var outputArray = ctext.split(/<\\/?div>/).filter(Boolean).map(function (item) { return item.trim(); });\n        outputArray = outputArray.filter(Boolean).map(function (item) { return item === \"<br>\" ? item : item.split(/<br\\s*\\/?>/); }).flat();\n        outputArray.forEach(function (text) {\n            var block = {};\n            block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]] = [];\n            if (text !== \"\" && text !== \"<br>\") {\n                // Extracting parts into an array\n                var parts = text.match(/(<[^>]+>[^<]*<\\/[^>]+>|[^<]+)/g);\n                // Iterate through the parts array\n                parts.forEach(function (content) {\n                    // Replace &nbsp; &lt; &gt; &amp; with a space,\"<\",\">\" and \"&\" respectively\n                    var replacements = {\n                        \"&nbsp;\": \" \",\n                        \"&lt;\": \"<\",\n                        \"&gt;\": \">\",\n                        \"&amp;\": \"&\"\n                    };\n                    content = content.replace(/&nbsp;|&lt;|&gt;|&amp;/g, function (match) { return replacements[match]; });\n                    if (content.indexOf(\"<span\") === 0) {\n                        // Regular expression to match the content inside the span tag\n                        var regex = /<span[^>]*>([^<]*)<\\/span>/;\n                        // Extract the text\n                        var match = content.match(regex);\n                        var name_1 = match ? match[1].trim() : '';\n                        var email = _this.getEmailIdByName(name_1, mentions);\n                        block = _this.serializeMentions(name_1, email, block, keywordIndex);\n                    }\n                    else {\n                        var inlines = {};\n                        inlines[_index__WEBPACK_IMPORTED_MODULE_3__.textProperty[keywordIndex]] = content;\n                        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines);\n                    }\n                });\n            }\n            blocks.push(block);\n        });\n        // adding a inline.\n        if (blocks.length == 0) {\n            var block = {};\n            block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]] = [];\n            var inlines = {};\n            block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines);\n            blocks.push(block);\n        }\n        return blocks;\n    };\n    HelperMethods.parseCommentAsText = function (comment) {\n        // Create a temporary DOM element to manipulate the input string\n        var tempDiv = document.createElement('div');\n        tempDiv.innerHTML = comment.text;\n        // Find all span elements with the class 'e-mention-chip'\n        var spanElements = tempDiv.querySelectorAll('span.e-mention-chip');\n        var inputDataStr = JSON.stringify(comment.mentions);\n        var inputData = JSON.parse(inputDataStr);\n        var index = 0;\n        if (spanElements.length !== inputData.length) {\n            throw new Error(\"The lengths of spanElements and inputData do not match\");\n        }\n        spanElements.forEach(function (span) {\n            if (index in inputData) {\n                var data = inputData[index];\n                if (data && typeof data.value === 'string' && typeof data.text === 'string') {\n                    var anchor = document.createElement('a');\n                    anchor.href = \"mailto:\" + data.value;\n                    anchor.textContent = \"@\" + data.text;\n                    span.replaceWith(anchor);\n                }\n                index++;\n            }\n        });\n        // Get the updated innerHTML\n        var result = tempDiv.innerHTML;\n        // Replace <br> with appropriate newline characters\n        result = result.replace(/<br>/g, '\\r\\n');\n        return result;\n    };\n    HelperMethods.getEmailIdByName = function (name, mentions) {\n        for (var _i = 0, mentions_1 = mentions; _i < mentions_1.length; _i++) {\n            var item = mentions_1[_i];\n            if (item[\"text\"] === name) {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item[\"value\"])) {\n                    return item[\"value\"];\n                }\n                else {\n                    return item[\"text\"] + '.com';\n                }\n            }\n        }\n        return \"\";\n    };\n    HelperMethods.serializeMentions = function (name, email, block, keywordIndex) {\n        var inlines = {};\n        inlines[_index__WEBPACK_IMPORTED_MODULE_3__.characterFormatProperty[keywordIndex]] = {};\n        inlines[_index__WEBPACK_IMPORTED_MODULE_3__.fieldTypeProperty[keywordIndex]] = 0;\n        inlines[_index__WEBPACK_IMPORTED_MODULE_3__.hasFieldEndProperty[keywordIndex]] = true;\n        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines);\n        var inlines2 = {};\n        inlines2[_index__WEBPACK_IMPORTED_MODULE_3__.characterFormatProperty[keywordIndex]] = {};\n        inlines2[_index__WEBPACK_IMPORTED_MODULE_3__.textProperty[keywordIndex]] = ' HYPERLINK \\\"mailto:' + email + '\\\" ';\n        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines2);\n        var inlines3 = {};\n        inlines3[_index__WEBPACK_IMPORTED_MODULE_3__.characterFormatProperty[keywordIndex]] = {};\n        inlines3[_index__WEBPACK_IMPORTED_MODULE_3__.fieldTypeProperty[keywordIndex]] = 2;\n        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines3);\n        var inlines4 = {};\n        inlines4[_index__WEBPACK_IMPORTED_MODULE_3__.characterFormatProperty[keywordIndex]] = {\n            \"underline\": \"Single\",\n            \"fontColor\": \"#0563c1\",\n            \"bidi\": false\n        };\n        inlines4[_index__WEBPACK_IMPORTED_MODULE_3__.textProperty[keywordIndex]] = name;\n        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines4);\n        var inlines5 = {};\n        inlines5[_index__WEBPACK_IMPORTED_MODULE_3__.characterFormatProperty[keywordIndex]] = {};\n        inlines5[_index__WEBPACK_IMPORTED_MODULE_3__.fieldTypeProperty[keywordIndex]] = 1;\n        block[_index__WEBPACK_IMPORTED_MODULE_3__.inlinesProperty[keywordIndex]].push(inlines5);\n        return block;\n    };\n    HelperMethods.reverseString = function (text) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(text) && text !== '') {\n            // return a new array\n            var splitString = text.split('');\n            // reverse the new created array\n            var reverseString = splitString.reverse();\n            // join all elements of the array into a string\n            text = reverseString.join('');\n        }\n        return text;\n    };\n    HelperMethods.formatClippedString = function (base64ImageString) {\n        var extension = '';\n        var formatClippedString = '';\n        if (this.startsWith(base64ImageString, 'data:image/svg+xml;base64,')) {\n            extension = '.svg';\n            formatClippedString = base64ImageString.replace('data:image/svg+xml;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/svg+xml;utf8,')) {\n            extension = '.svg';\n            formatClippedString = base64ImageString.replace('data:image/svg+xml;utf8,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/bmp;base64,')) {\n            extension = '.bmp';\n            formatClippedString = base64ImageString.replace('data:image/bmp;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/x-emf;base64,')) {\n            extension = '.emf';\n            formatClippedString = base64ImageString.replace('data:image/x-emf;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/exif;base64,')) {\n            extension = '.exif';\n            formatClippedString = base64ImageString.replace('data:image/exif;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/gif;base64,')) {\n            extension = '.gif';\n            formatClippedString = base64ImageString.replace('data:image/gif;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/icon;base64,')) {\n            extension = '.ico';\n            formatClippedString = base64ImageString.replace('data:image/icon;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/jpeg;base64,')) {\n            extension = '.jpeg';\n            formatClippedString = base64ImageString.replace('data:image/jpeg;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/jpg;base64,')) {\n            extension = '.jpg';\n            formatClippedString = base64ImageString.replace('data:image/jpg;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/png;base64,')) {\n            extension = '.png';\n            formatClippedString = base64ImageString.replace('data:image/png;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/tiff;base64,')) {\n            extension = '.tif';\n            formatClippedString = base64ImageString.replace('data:image/tiff;base64,', '');\n        }\n        else if (this.startsWith(base64ImageString, 'data:image/x-wmf;base64,')) {\n            extension = '.wmf';\n            formatClippedString = base64ImageString.replace('data:image/x-wmf;base64,', '');\n        }\n        else {\n            extension = '.jpeg';\n        }\n        return { 'extension': extension, 'formatClippedString': formatClippedString };\n    };\n    /**\n     * @private\n     * @param sourceString\n     * @param startString\n     * @returns\n     */\n    HelperMethods.startsWith = function (sourceString, startString) {\n        return startString.length > 0 && sourceString.substring(0, startString.length) === startString;\n    };\n    HelperMethods.formatText = function (format, value) {\n        var text = value;\n        switch (format.toLowerCase()) {\n            case 'uppercase':\n                text = value.toUpperCase();\n                break;\n            case 'lowercase':\n                text = value.toLowerCase();\n                break;\n            case 'firstlower':\n                text = this.lowerFirstChar(value);\n                break;\n            case 'firstcapital':\n                text = this.capitaliseFirst(value, 'FirstCapital');\n                break;\n            case 'titlecase':\n                text = this.capitaliseFirst(value, 'Titlecase');\n                break;\n        }\n        return text;\n    };\n    HelperMethods.formatNumber = function (format, value) {\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n        var dotData = value.split('.');\n        value = dotData[0];\n        var numberValue = intl.parseNumber(value);\n        if (value.toString() === 'NaN') {\n            return '';\n        }\n        if (format === '') {\n            format = '0';\n        }\n        var numberFormat = { format: format };\n        return intl.formatNumber(numberValue, numberFormat);\n    };\n    HelperMethods.formatDate = function (format, value) {\n        var intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization();\n        var date = new Date(value);\n        if (isNaN(date.getDate())) {\n            return '';\n        }\n        if (format === '') {\n            return value;\n        }\n        if (format.indexOf('am/pm') !== -1) {\n            format = format.replace(/am\\/pm/gi, 'a');\n        }\n        var dateFormat = { 'format': format };\n        return intl.formatDate(date, dateFormat);\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n    HelperMethods.capitaliseFirst = function (value, type, splitBy) {\n        var text = '';\n        if (type === 'Titlecase') {\n            var valArry = splitBy ? value.split(splitBy) : value.split(' ');\n            for (var i = 0; i < valArry.length; i++) {\n                /* eslint-disable-next-line max-len */\n                text += splitBy ? valArry[parseInt(i.toString(), 10)].charAt(0).toUpperCase() + valArry[parseInt(i.toString(), 10)].slice(1, valArry[parseInt(i.toString(), 10)].length) : this.capitaliseFirstInternal(valArry[parseInt(i.toString(), 10)]);\n                if (valArry.length >= 0 && !splitBy) {\n                    text += ' ';\n                }\n            }\n            if (!splitBy) {\n                text = this.capitaliseFirst(text, 'Titlecase', '\\r');\n            }\n        }\n        else if (type === 'FirstCapital') {\n            text = this.capitaliseFirstInternal(value);\n        }\n        return text;\n    };\n    HelperMethods.lowerFirstChar = function (value) {\n        return (value.charAt(0).toLowerCase() + value.slice(1, value.length));\n    };\n    HelperMethods.capitaliseFirstInternal = function (value) {\n        return (value.charAt(0).toUpperCase() + value.slice(1, value.length).toLowerCase());\n    };\n    HelperMethods.getModifiedDate = function (date) {\n        var modifiedDate = HelperMethods.getLocaleDate(date);\n        var dateString = modifiedDate.toLocaleDateString([], { year: 'numeric', month: 'long', day: 'numeric' });\n        var time = modifiedDate.toLocaleTimeString([], { hour: 'numeric', minute: 'numeric' });\n        var dateTime = dateString + ' ' + time;\n        return dateTime;\n    };\n    HelperMethods.getUtcDate = function (dateTime) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dateTime)) {\n            dateTime = new Date();\n        }\n        return new Date(dateTime.getTime() - dateTime.getTimezoneOffset() * 60000).toISOString();\n    };\n    HelperMethods.getLocaleDate = function (date) {\n        var dt = new Date(date);\n        return new Date(dt.getTime() + dt.getTimezoneOffset() * 60000);\n    };\n    HelperMethods.getCompatibilityModeValue = function (compatibilityMode) {\n        var compatValue;\n        switch (compatibilityMode) {\n            case 1:\n                compatValue = '11';\n                break;\n            case 2:\n                compatValue = '12';\n                break;\n            case 3:\n                compatValue = '14';\n                break;\n            default:\n                compatValue = '15';\n                break;\n        }\n        return compatValue;\n    };\n    /**\n     * @private\n     * @returns {string} - Returns the unique id for document editor.\n     */\n    HelperMethods.getUniqueElementId = function () {\n        return 'de_element' + Date.now().toString(36) + Math.random().toString(36).substring(2);\n    };\n    /**\n     * @private\n     * @param element - element to be splitted of space\n     * @param fromStart - weather to removed space from start or end\n     * @returns {Boolean} - is the input element is splitted\n     */\n    /* eslint-disable  */\n    HelperMethods.splitSpaceInTextElementBox = function (element, fromStart) {\n        var elementText = element.text;\n        var emptySpace = \"\";\n        if (fromStart) {\n            while (HelperMethods.startsWith(elementText, \" \")) {\n                emptySpace += ' ';\n                elementText = elementText.substring(1);\n            }\n        }\n        else {\n            while (HelperMethods.endsWith(elementText)) {\n                emptySpace += ' ';\n                elementText = elementText.slice(0, -1);\n            }\n        }\n        if (emptySpace != \"\") {\n            var textBox = new _viewer_page__WEBPACK_IMPORTED_MODULE_2__.TextElementBox();\n            textBox.characterFormat.copyFormat(element.characterFormat);\n            if (element.revisions.length > 0) {\n                for (var i = 0; i < element.revisions.length; i++) {\n                    var currentRevision = element.revisions[i];\n                    textBox.revisions.push(currentRevision);\n                    var rangeIndex = currentRevision.range.indexOf(element);\n                    if (rangeIndex < 0) {\n                        currentRevision.range.push(textBox);\n                    }\n                    else {\n                        currentRevision.range.splice(rangeIndex + 1, 0, textBox);\n                    }\n                }\n                textBox.isMarkedForRevision = element.isMarkedForRevision;\n            }\n            textBox.line = element.line;\n            var lineChildren = textBox.line.children;\n            if (fromStart) {\n                element.text = emptySpace;\n                textBox.text = elementText;\n            }\n            else {\n                element.text = elementText;\n                textBox.text = emptySpace;\n            }\n            lineChildren.splice(lineChildren.indexOf(element) + 1, 0, textBox);\n        }\n    };\n    /* eslint-disable */\n    HelperMethods.getTextIndexAfterWhitespace = function (text, startIndex) {\n        var length = text.length;\n        var index = 0;\n        index = text.indexOf(' ', startIndex) + 1;\n        var nextIndex = index;\n        if (nextIndex === 0 || nextIndex === length) {\n            return nextIndex;\n        }\n        while (text[nextIndex] === ' ') {\n            nextIndex++;\n            if (nextIndex === length) {\n                break;\n            }\n        }\n        return nextIndex;\n    };\n    /**\n     * @private\n     * @param {TextElementBox} textElementBox text element box to split the text based on max text length.\n     * @param {LineWidget} lineWidget  line widget to add the splitted text element box.\n     * @returns {void}\n     */\n    HelperMethods.splitWordByMaxLength = function (textElementBox, lineWidget, isInitialParsing) {\n        var text = textElementBox.text;\n        var index = 0;\n        var textLength = text.length;\n        var maxLength = 90;\n        var splittedText = '';\n        var characterFormat = textElementBox.characterFormat;\n        var revisions = textElementBox.revisions;\n        var spanIndex = lineWidget.children.indexOf(textElementBox);\n        while (index < textLength) {\n            var nextIndex = index + maxLength;\n            if (nextIndex > textLength) {\n                nextIndex = textLength;\n            }\n            var spaceIndex = HelperMethods.getTextIndexAfterWhitespace(text, nextIndex);\n            if (spaceIndex === 0 || spaceIndex > textLength) {\n                spaceIndex = nextIndex;\n            }\n            splittedText = text.substring(index, spaceIndex);\n            if (index === 0) {\n                textElementBox.text = splittedText;\n                textElementBox.isWidthUpdated = false;\n            }\n            else {\n                var splittedElement = new _viewer_page__WEBPACK_IMPORTED_MODULE_2__.TextElementBox();\n                splittedElement.text = splittedText;\n                splittedElement.line = lineWidget;\n                splittedElement.characterFormat.copyFormat(characterFormat);\n                if (revisions.length > 0) {\n                    for (var i = 0; i < revisions.length; i++) {\n                        var revision = revisions[i];\n                        splittedElement.revisions.push(revision);\n                        var rangeIndex = revision.range.indexOf(textElementBox);\n                        if (isInitialParsing) {\n                            revision.range.push(splittedElement);\n                        }\n                        else {\n                            if (rangeIndex < 0) {\n                                revision.range.push(splittedElement);\n                            }\n                            else {\n                                revision.range.splice(rangeIndex + 1, 0, splittedElement);\n                            }\n                        }\n                    }\n                }\n                if (isInitialParsing) {\n                    lineWidget.children.push(splittedElement);\n                }\n                else {\n                    lineWidget.children.splice(spanIndex + 1, 0, splittedElement);\n                    spanIndex++;\n                }\n            }\n            index = spaceIndex;\n        }\n    };\n    /**\n     * @private\n     */\n    HelperMethods.wordBefore = '\\\\b';\n    /**\n     * @private\n     */\n    HelperMethods.wordAfter = '\\\\b';\n    /**\n     * @private\n     */\n    HelperMethods.wordSplitCharacters = [' ', ',', '.', ':', ';', '<', '>', '=',\n        '+', '-', '_', '{', '}', '[', ']', '`', '~', '!', '@', '#', '$', '%', '^', '&',\n        '*', '(', ')', '\"', '?', '/', '|', '\\\\', '”', '　', '،', '؟', '؛', '’', '‘'];\n    return HelperMethods;\n}());\n\n/**\n * @private\n */\nvar Point = /** @class */ (function () {\n    function Point(xPosition, yPosition) {\n        this.xIn = 0;\n        this.yIn = 0;\n        this.xIn = xPosition;\n        this.yIn = yPosition;\n    }\n    Object.defineProperty(Point.prototype, \"x\", {\n        get: function () {\n            return this.xIn;\n        },\n        set: function (value) {\n            this.xIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Point.prototype, \"y\", {\n        get: function () {\n            return this.yIn;\n        },\n        set: function (value) {\n            this.yIn = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Point.prototype.copy = function (point) {\n        this.xIn = point.xIn;\n        this.yIn = point.yIn;\n    };\n    /**\n     * Destroys the internal objects maintained.\n     *\n     * @returns {void}\n     */\n    Point.prototype.destroy = function () {\n        this.xIn = undefined;\n        this.yIn = undefined;\n    };\n    return Point;\n}());\n\n/**\n * @private\n */\nvar Base64 = /** @class */ (function () {\n    function Base64() {\n        this.keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    }\n    // public method for encoding\n    Base64.prototype.encodeString = function (input) {\n        var output = '';\n        var chr1;\n        var chr2;\n        var chr3;\n        var enc1;\n        var enc2;\n        var enc3;\n        var enc4;\n        var i = 0;\n        input = this.unicodeEncode(input);\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            }\n            else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output +\n                this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) +\n                this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);\n        }\n        return output;\n    };\n    // private method for UTF-8 encoding\n    Base64.prototype.unicodeEncode = function (input) {\n        var tempInput = input.replace(/\\r\\n/g, '\\n');\n        var utftext = '';\n        for (var n = 0; n < tempInput.length; n++) {\n            var c = tempInput.charCodeAt(n);\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            }\n            else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n        return utftext;\n    };\n    Base64.prototype.decodeString = function (input) {\n        var chr1;\n        var chr2;\n        var chr3;\n        var enc1;\n        var enc2;\n        var enc3;\n        var enc4;\n        var i = 0;\n        var resultIndex = 0;\n        /*let dataUrlPrefix: string = 'data:';*/\n        input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === this.keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (input.charAt(input.length - 2) === this.keyStr.charAt(64)) {\n            totalLength--;\n        }\n        if (totalLength % 1 !== 0) {\n            // totalLength is not an integer, the length does not match a valid\n            // base64 content. That can happen if:\n            // - the input is not a base64 content\n            // - the input is *almost* a base64 content, with a extra chars at the\n            // beginning or at the end\n            // - the input uses a base64 variant (base64url for example)\n            throw new Error('Invalid base64 input, bad content length.');\n        }\n        var output = new Uint8Array(totalLength | 0);\n        while (i < input.length) {\n            enc1 = this.keyStr.indexOf(input.charAt(i++));\n            enc2 = this.keyStr.indexOf(input.charAt(i++));\n            enc3 = this.keyStr.indexOf(input.charAt(i++));\n            enc4 = this.keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output[resultIndex++] = chr1;\n            if (enc3 !== 64) {\n                output[resultIndex++] = chr2;\n            }\n            if (enc4 !== 64) {\n                output[resultIndex++] = chr3;\n            }\n        }\n        return output;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Base64.prototype.destroy = function () {\n        this.keyStr = undefined;\n    };\n    return Base64;\n}());\n\n/**\n * @private\n */\nvar WrapPosition = /** @class */ (function () {\n    function WrapPosition(x, width) {\n        this.x = 0;\n        this.width = 0;\n        this.x = x;\n        this.width = width;\n    }\n    Object.defineProperty(WrapPosition.prototype, \"right\", {\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return WrapPosition;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-documenteditor/src/document-editor/implementation/editor/editor-helper.js?");

/***/ })

}]);