"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-ribbon_src_ribbon_items_ribbon-c"],{

/***/ "./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-combobox.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-combobox.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RibbonComboBox: () => (/* binding */ RibbonComboBox)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/index.js\");\n\n\n\n/**\n * Defines the items of Ribbon.\n */\nvar RibbonComboBox = /** @class */ (function () {\n    function RibbonComboBox(parent) {\n        this.parent = parent;\n    }\n    RibbonComboBox.prototype.getModuleName = function () {\n        return 'ribbonComboBox';\n    };\n    RibbonComboBox.prototype.destroy = function () {\n        this.parent = null;\n    };\n    /**\n     * Creates the combobox.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonComboBox.prototype.createComboBox = function (item, itemEle) {\n        var _this = this;\n        var inputEle = this.parent.createElement('input', {\n            id: item.id\n        });\n        itemEle.appendChild(inputEle);\n        var comboBoxSettings = item.comboBoxSettings;\n        if (comboBoxSettings.htmlAttributes) {\n            if (comboBoxSettings.htmlAttributes.id) {\n                delete comboBoxSettings.htmlAttributes.id;\n            }\n        }\n        new _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox({\n            locale: this.parent.locale,\n            enableRtl: this.parent.enableRtl,\n            enablePersistence: this.parent.enablePersistence,\n            allowCustom: false,\n            floatLabelType: 'Never',\n            ignoreAccent: true,\n            ignoreCase: true,\n            allowFiltering: comboBoxSettings.allowFiltering,\n            autofill: comboBoxSettings.autofill,\n            cssClass: (_base_index__WEBPACK_IMPORTED_MODULE_2__.RIBBON_CONTROL + _base_index__WEBPACK_IMPORTED_MODULE_2__.SPACE + (comboBoxSettings.cssClass ? comboBoxSettings.cssClass : '')).trim(),\n            dataSource: comboBoxSettings.dataSource,\n            enabled: !item.disabled,\n            fields: comboBoxSettings.fields,\n            filterType: comboBoxSettings.filterType,\n            footerTemplate: comboBoxSettings.footerTemplate,\n            groupTemplate: comboBoxSettings.groupTemplate,\n            headerTemplate: comboBoxSettings.headerTemplate,\n            index: comboBoxSettings.index,\n            itemTemplate: comboBoxSettings.itemTemplate,\n            noRecordsTemplate: comboBoxSettings.noRecordsTemplate,\n            placeholder: comboBoxSettings.placeholder,\n            popupHeight: comboBoxSettings.popupHeight,\n            popupWidth: comboBoxSettings.popupWidth,\n            showClearButton: comboBoxSettings.showClearButton,\n            sortOrder: comboBoxSettings.sortOrder,\n            text: comboBoxSettings.text,\n            value: comboBoxSettings.value,\n            width: comboBoxSettings.width,\n            beforeOpen: comboBoxSettings.beforeOpen,\n            open: comboBoxSettings.open,\n            htmlAttributes: comboBoxSettings.htmlAttributes,\n            close: function (e) {\n                if (comboBoxSettings.close) {\n                    comboBoxSettings.close.call(_this, e);\n                }\n            },\n            filtering: comboBoxSettings.filtering,\n            change: comboBoxSettings.change,\n            select: comboBoxSettings.select,\n            created: comboBoxSettings.created\n        }, inputEle);\n    };\n    /**\n     * Adds the additional event handlers as the item moved into overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @param {DropDownButton} overflowButton - Gets the overflow button.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonComboBox.prototype.addOverFlowEvents = function (item, itemEle, overflowButton) {\n        var _this = this;\n        var comboBoxSettings = item.comboBoxSettings;\n        if (comboBoxSettings.label && this.parent.activeLayout === 'Simplified') {\n            var label = this.parent.createElement('div', {\n                className: 'e-ribbon-combobox-label',\n                id: item.id + '_label',\n                innerHTML: comboBoxSettings.label\n            });\n            itemEle.insertBefore(label, itemEle.firstChild);\n        }\n        var inputEle = itemEle.querySelector('#' + item.id);\n        inputEle.setAttribute('data-control', item.type.toString());\n        var comboBoxObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(inputEle, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox);\n        comboBoxObj.setProperties({ cssClass: comboBoxObj.cssClass + _base_index__WEBPACK_IMPORTED_MODULE_2__.SPACE + _base_index__WEBPACK_IMPORTED_MODULE_2__.RIBBON_POPUP_CONTROL });\n        comboBoxObj.close = function (e) {\n            var target = e.event ? e.event.target : null;\n            if (item.comboBoxSettings.close) {\n                item.comboBoxSettings.close.call(_this, e);\n            }\n            if (target && !target.closest('.e-ribbon-group-overflow-ddb')) {\n                if (overflowButton.element.classList.contains('e-active')) {\n                    overflowButton.toggle();\n                }\n            }\n        };\n    };\n    /**\n     * Removes the additional event handlers as the item moved from overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonComboBox.prototype.removeOverFlowEvents = function (item, itemEle) {\n        var _this = this;\n        var comboBoxSettings = item.comboBoxSettings;\n        if (comboBoxSettings.label) {\n            var label = itemEle.querySelector('#' + item.id + '_label');\n            if (label) {\n                label.remove();\n            }\n        }\n        var inputEle = itemEle.querySelector('#' + item.id);\n        var comboBoxObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(inputEle, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox);\n        var cssClass = comboBoxObj.cssClass.split(_base_index__WEBPACK_IMPORTED_MODULE_2__.SPACE);\n        cssClass = cssClass.filter(function (value) { return value !== _base_index__WEBPACK_IMPORTED_MODULE_2__.RIBBON_POPUP_CONTROL; });\n        comboBoxObj.setProperties({ cssClass: cssClass.join(_base_index__WEBPACK_IMPORTED_MODULE_2__.SPACE) });\n        comboBoxObj.close = function (e) {\n            if (item.comboBoxSettings.close) {\n                item.comboBoxSettings.close.call(_this, e);\n            }\n        };\n    };\n    RibbonComboBox.prototype.getComboBoxObj = function (controlId) {\n        var inputEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItemElement)(this.parent, controlId);\n        return inputEle ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(inputEle, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox) : null;\n    };\n    /**\n     * To filter the data from given data source by using query\n     *\n     * @param  {string } controlId - set the id of the control in which methods needs to be called.\n     * @param  {Object[] } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @returns {void}\n     */\n    RibbonComboBox.prototype.filter = function (controlId, dataSource, query, fields) {\n        this.getComboBoxObj(controlId).filter(dataSource, query, fields);\n    };\n    /**\n     * To open/close DropDownButton popup based on current state of the combobox.\n     *\n     * @param {string} controlId - Gets the id of the control.\n     * @returns {void}\n     */\n    RibbonComboBox.prototype.hidePopup = function (controlId) {\n        var comboBoxObj = this.getComboBoxObj(controlId);\n        if (!comboBoxObj) {\n            return;\n        }\n        comboBoxObj.hidePopup();\n    };\n    /**\n     * To open/close DropDownButton popup based on current state of the combobox.\n     *\n     * @param {string} controlId - Gets the id of the control.\n     * @returns {void}\n     */\n    RibbonComboBox.prototype.showPopup = function (controlId) {\n        var comboBoxObj = this.getComboBoxObj(controlId);\n        if (!comboBoxObj) {\n            return;\n        }\n        comboBoxObj.showPopup();\n    };\n    /**\n     * Updates the combobox properties.\n     *\n     * @param {RibbonComboBoxSettingsModel} prop - Gets the combobox property.\n     * @param {string} id - Gets the ID of combobox.\n     * @returns {void}\n     */\n    RibbonComboBox.prototype.updateComboBox = function (prop, id) {\n        var itemProp = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItem)(this.parent.tabs, id);\n        if (!itemProp) {\n            return;\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(itemProp.item.comboBoxSettings, prop);\n        var inputEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItemElement)(this.parent, id, itemProp);\n        if (!inputEle) {\n            return;\n        }\n        if (prop.cssClass) {\n            prop.cssClass = (_base_index__WEBPACK_IMPORTED_MODULE_2__.RIBBON_CONTROL + _base_index__WEBPACK_IMPORTED_MODULE_2__.SPACE + prop.cssClass).trim();\n        }\n        delete prop.close;\n        var comboBoxObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(inputEle, _syncfusion_ej2_dropdowns__WEBPACK_IMPORTED_MODULE_1__.ComboBox);\n        comboBoxObj.setProperties(prop);\n    };\n    return RibbonComboBox;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-combobox.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-dropdown.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-dropdown.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RibbonDropDown: () => (/* binding */ RibbonDropDown)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/constant.js\");\n\n\n\n\n\n/**\n * Defines the items of Ribbon.\n */\nvar RibbonDropDown = /** @class */ (function () {\n    function RibbonDropDown(parent) {\n        this.parent = parent;\n    }\n    RibbonDropDown.prototype.getModuleName = function () {\n        return 'ribbonDropDown';\n    };\n    RibbonDropDown.prototype.destroy = function () {\n        this.parent = null;\n    };\n    /**\n     * Creates DropDown.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.createDropDown = function (item, itemEle) {\n        var _this = this;\n        var buttonEle = this.parent.createElement('button', {\n            id: item.id\n        });\n        itemEle.appendChild(buttonEle);\n        var dropDownSettings = item.dropDownSettings;\n        var cssClass = (_base_constant__WEBPACK_IMPORTED_MODULE_4__.ITEM_VERTICAL_CENTER + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_CONTROL + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + (dropDownSettings.cssClass ?\n            dropDownSettings.cssClass : '')).trim();\n        new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton({\n            locale: this.parent.locale,\n            enableRtl: this.parent.enableRtl,\n            enablePersistence: this.parent.enablePersistence,\n            iconPosition: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large ? 'Top' : 'Left',\n            closeActionEvents: dropDownSettings.closeActionEvents,\n            content: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small ? '' : dropDownSettings.content,\n            cssClass: cssClass + ((item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) ? (_base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_4__.VERTICAL_DDB) : ''),\n            disabled: item.disabled,\n            iconCss: dropDownSettings.iconCss,\n            items: dropDownSettings.items,\n            target: dropDownSettings.target,\n            createPopupOnClick: dropDownSettings.createPopupOnClick,\n            beforeClose: function (e) {\n                if (dropDownSettings.beforeClose) {\n                    dropDownSettings.beforeClose.call(_this, e);\n                }\n            },\n            beforeItemRender: dropDownSettings.beforeItemRender,\n            beforeOpen: dropDownSettings.beforeOpen,\n            close: function (e) {\n                if (dropDownSettings.close) {\n                    dropDownSettings.close.call(_this, e);\n                }\n            },\n            created: dropDownSettings.created,\n            open: dropDownSettings.open,\n            select: dropDownSettings.select\n        }).appendTo(buttonEle);\n        if (dropDownSettings.htmlAttributes) {\n            if (dropDownSettings.htmlAttributes.id) {\n                delete dropDownSettings.htmlAttributes.id;\n            }\n            (0,_base_index__WEBPACK_IMPORTED_MODULE_3__.setCustomAttributes)(buttonEle, dropDownSettings.htmlAttributes);\n        }\n    };\n    /**\n     * Adds the additional event handlers as the item moved into overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @param {DropDownButton} overflowButton - Gets the overflow button.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.addOverFlowEvents = function (item, itemEle, overflowButton) {\n        var _this = this;\n        var dropdownElement = itemEle.querySelector('#' + item.id);\n        dropdownElement.setAttribute('data-control', item.type.toString());\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        dropdown.cssClass = dropdown.cssClass + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_POPUP_CONTROL;\n        dropdown.dataBind();\n        var target;\n        dropdown.beforeClose = function (e) {\n            if (item.dropDownSettings.beforeClose) {\n                item.dropDownSettings.beforeClose.call(_this, e);\n            }\n            target = e.event ? e.event.target : null;\n        };\n        dropdown.close = function (e) {\n            if (item.dropDownSettings.close) {\n                item.dropDownSettings.close.call(_this, e);\n            }\n            if (target && !target.closest('.e-ribbon-group-overflow-ddb')) {\n                if (overflowButton.element.classList.contains('e-active')) {\n                    overflowButton.toggle();\n                }\n            }\n        };\n    };\n    /**\n     * Removes the additional event handlers as the item moved from overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.removeOverFlowEvents = function (item, itemEle) {\n        var _this = this;\n        var dropdownElement = itemEle.querySelector('#' + item.id);\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        var cssClass = dropdown.cssClass.split(_base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE);\n        cssClass = cssClass.filter(function (value) { return value !== _base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_POPUP_CONTROL; });\n        dropdown.cssClass = cssClass.join(_base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE);\n        dropdown.dataBind();\n        dropdown.close = function (e) {\n            if (item.dropDownSettings.close) {\n                item.dropDownSettings.close.call(_this, e);\n            }\n        };\n        dropdown.beforeClose = function (e) {\n            if (item.dropDownSettings.beforeClose) {\n                item.dropDownSettings.beforeClose.call(_this, e);\n            }\n        };\n    };\n    /**\n     * Creates Overflow DropDown.\n     *\n     * @param {string} id - Gets the ID of the dropdown item.\n     * @param {string} name - Gets the name of the dropdown item.\n     * @param {string} iconCss - Gets the icon of the dropdown item.\n     * @param {HTMLElement} groupEle - Gets the overflow group element.\n     * @param {HTMLElement} overflowEle - Gets the overflow element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.createOverFlowDropDown = function (id, name, iconCss, groupEle, overflowEle, enableRtl) {\n        var _this = this;\n        this.enableRtl = enableRtl;\n        var buttonEle = this.parent.createElement('button', {\n            id: id + _base_constant__WEBPACK_IMPORTED_MODULE_4__.OVERFLOW_ID + _base_constant__WEBPACK_IMPORTED_MODULE_4__.DROPDOWN_ID\n        });\n        groupEle.setAttribute('tabindex', '0');\n        overflowEle.appendChild(buttonEle);\n        var dropdown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton({\n            iconCss: iconCss,\n            target: groupEle,\n            locale: this.parent.locale,\n            enableRtl: this.parent.enableRtl,\n            enablePersistence: this.parent.enablePersistence,\n            cssClass: _base_constant__WEBPACK_IMPORTED_MODULE_4__.VERTICAL_DDB + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_GROUP_OVERFLOW_DDB,\n            iconPosition: 'Top',\n            content: name,\n            beforeClose: function (args) {\n                args.cancel = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.event && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.event.target, '.' + _base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_POPUP_CONTROL));\n            }\n        }, buttonEle);\n        (0,_base_index__WEBPACK_IMPORTED_MODULE_3__.createTooltip)(groupEle, this.parent);\n        buttonEle.onclick = buttonEle.onkeydown = function () { _this.itemIndex = 0; };\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        groupEle.onkeydown = function (e) { _this.keyActionHandler(e, groupEle), _this; };\n        return dropdown;\n    };\n    RibbonDropDown.prototype.keyActionHandler = function (e, target) {\n        var controlElements = Array.prototype.slice.call(target.querySelectorAll('.e-control'));\n        var templateElements = Array.prototype.slice.call(target.querySelectorAll('.e-ribbon-template'));\n        var items = controlElements.concat(templateElements);\n        var comboBoxElements = target.querySelectorAll('.e-combobox');\n        var comboBoxEle;\n        if (comboBoxElements) {\n            for (var i = 0; i < comboBoxElements.length; i++) {\n                if (comboBoxElements[parseInt(i.toString(), 10)].closest('.e-input-focus')) {\n                    comboBoxEle = comboBoxElements[parseInt(i.toString(), 10)];\n                }\n            }\n        }\n        if (comboBoxEle) {\n            for (var i = 0; i < items.length; i++) {\n                if (items[parseInt(i.toString(), 10)].classList.contains('e-combobox')) {\n                    if (items[parseInt(i.toString(), 10)].closest('.e-input-focus')) {\n                        this.itemIndex = i;\n                    }\n                }\n            }\n        }\n        if (e.target.classList.contains('e-control') || e.target.classList.contains('e-ribbon-template') || e.target.classList.contains('e-ribbon-launcher-icon') ||\n            e.target.classList.contains('e-ribbon-last-item') || e.target.classList.contains('e-ribbon-first-item')) {\n            if (e.key === 'ArrowRight' || (!e.shiftKey && e.key === 'Tab')) {\n                this.handleNavigation(e, !this.enableRtl, items);\n            }\n            if (e.key === 'ArrowLeft' || (e.shiftKey && e.key === 'Tab')) {\n                this.handleNavigation(e, this.enableRtl, items);\n            }\n        }\n    };\n    RibbonDropDown.prototype.handleNavigation = function (e, enableRtl, items) {\n        if (!(items[0].classList.contains('e-ribbon-first-item'))) {\n            items[0].classList.add('e-ribbon-first-item');\n        }\n        if (!(items[items.length - 1].classList.contains('e-ribbon-last-item'))) {\n            items[items.length - 1].classList.add('e-ribbon-last-item');\n        }\n        if (enableRtl) {\n            if (this.itemIndex === 0 && items[parseInt(this.itemIndex.toString(), 10)].classList.contains('e-ribbon-first-item')) {\n                this.updateItemIndex(e, items, true);\n            }\n            if (!e.target.classList.contains('e-combobox') && !e.target.classList.contains('e-ribbon-last-item') &&\n                !e.target.classList.contains('e-ribbon-group-container') && (e.target.classList.contains('e-ribbon-first-item')\n                || this.itemIndex !== 0) && (e.target.classList.contains('e-control') || e.target.classList.contains('e-ribbon-template'))) {\n                this.itemIndex++;\n                this.updateItemIndex(e, items, true);\n            }\n            if (e.target.classList.contains('e-ribbon-last-item')) {\n                var launcherIcon = false;\n                launcherIcon = this.focusLauncherIcon(e, items);\n                if (!launcherIcon) {\n                    this.itemIndex = 0;\n                    this.updateItemIndex(e, items, true);\n                }\n            }\n            if (e.target.classList.contains('e-ribbon-launcher-icon')) {\n                this.itemIndex = 0;\n                this.updateItemIndex(e, items, true);\n            }\n        }\n        else {\n            if (!e.target.classList.contains('e-combobox') && this.itemIndex !== 0) {\n                this.itemIndex--;\n                this.updateItemIndex(e, items, false);\n            }\n            if (e.target.classList.contains('e-ribbon-first-item')) {\n                var launcherIcon = false;\n                launcherIcon = this.focusLauncherIcon(e, items);\n                if (!launcherIcon) {\n                    this.itemIndex = items.length - 1;\n                    this.updateItemIndex(e, items, false);\n                }\n            }\n            if (e.target.classList.contains('e-ribbon-launcher-icon')) {\n                this.itemIndex = items.length - 1;\n                this.updateItemIndex(e, items, false);\n            }\n        }\n        if (e.target.classList.contains('e-combobox') && (e.key === 'Tab')) {\n            if (enableRtl) {\n                if (this.itemIndex < items.length - 1) {\n                    this.itemIndex++;\n                }\n            }\n            else {\n                if (this.itemIndex > 0) {\n                    this.itemIndex--;\n                }\n            }\n        }\n    };\n    RibbonDropDown.prototype.focusLauncherIcon = function (e, items) {\n        var groupContainer = items[parseInt(this.itemIndex.toString(), 10)].closest('.e-ribbon-group-container');\n        var launcherIconEle;\n        if (groupContainer) {\n            launcherIconEle = groupContainer.querySelector('.e-ribbon-launcher-icon');\n        }\n        if (launcherIconEle) {\n            if (e.key === 'Tab') {\n                e.preventDefault();\n            }\n            groupContainer.querySelector('.e-ribbon-launcher-icon').focus();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    RibbonDropDown.prototype.updateItemIndex = function (e, items, enableRtl) {\n        var ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n        while (ribbonItem && ribbonItem.classList.contains('e-disabled')) {\n            if (enableRtl) {\n                if (this.itemIndex < items.length - 1) {\n                    this.itemIndex++;\n                }\n                else {\n                    var launcherIcon = false;\n                    launcherIcon = this.focusLauncherIcon(e, items);\n                    if (launcherIcon) {\n                        break;\n                    }\n                    this.itemIndex = 0;\n                }\n            }\n            else {\n                if (this.itemIndex > 0) {\n                    this.itemIndex--;\n                }\n                else {\n                    var launcherIcon = false;\n                    launcherIcon = this.focusLauncherIcon(e, items);\n                    if (launcherIcon) {\n                        break;\n                    }\n                    this.itemIndex = items.length - 1;\n                }\n            }\n            ribbonItem = items[this.itemIndex].closest('.e-ribbon-item');\n        }\n        if (e.key === 'Tab') {\n            e.preventDefault();\n        }\n        items[parseInt(this.itemIndex.toString(), 10)].focus();\n    };\n    /**\n     * Removes Overflow DropDown.\n     *\n     * @param {HTMLElement} dropdownElement - Gets the ribbon DropDown element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.removeOverFlowDropDown = function (dropdownElement) {\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        var tooltip = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdown.target, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Tooltip);\n        tooltip.destroy();\n        dropdownElement.parentElement.parentElement.insertBefore(dropdown.target, dropdownElement.parentElement);\n        dropdown.destroy();\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(dropdownElement);\n    };\n    /**\n     * Gets DropDown item element.\n     *\n     * @param {HTMLElement} dropdownElement - Gets the ribbon DropDown element.\n     * @param {string} id - Gets the ID of ribbon DropDown element.\n     * @returns {HTMLElement} - Returns the DropDown item element.\n     * @hidden\n     */\n    RibbonDropDown.prototype.getDDBItemElement = function (dropdownElement, id) {\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        var dropDownPopup = dropdown.dropDown.element;\n        return dropDownPopup.querySelector('#' + id);\n    };\n    /**\n     * Gets Overflow DropDown Popup.\n     *\n     * @param {itemProps} itemProp - Gets the property of ribbon item.\n     * @param {HTMLElement} contentEle - Gets the content element.\n     * @returns {HTMLElement} - Returns the Overflow DropDown Popup.\n     * @hidden\n     */\n    RibbonDropDown.prototype.getOverflowDropDownPopup = function (itemProp, contentEle) {\n        var dropdownElement = contentEle.querySelector('#' + this.parent.tabs[itemProp.tabIndex].groups[itemProp.groupIndex].id + _base_constant__WEBPACK_IMPORTED_MODULE_4__.OVERFLOW_ID + _base_constant__WEBPACK_IMPORTED_MODULE_4__.DROPDOWN_ID);\n        var dropdown = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropdownElement, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        return dropdown.dropDown.element;\n    };\n    RibbonDropDown.prototype.getDropDownObj = function (controlId) {\n        var dropDownEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_3__.getItemElement)(this.parent, controlId);\n        return dropDownEle ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(dropDownEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton) : null;\n    };\n    /**\n     * Adds a new item to the menu. By default, new item appends to\n     * the list as the last item, but you can insert based on the text parameter.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @param {ItemModel[]} Items - Gets the DropDown items.\n     * @param {string} text - Gets the text of the dropdown item where the new item needs to be inserted.\n     * @returns {void}\n     */\n    RibbonDropDown.prototype.addItems = function (controlId, Items, text) {\n        this.getDropDownObj(controlId).addItems(Items, text);\n    };\n    /**\n     * Removes the items from the menu.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @param {string[]} Items -\n     * @param {string} isUniqueId -\n     * @returns {void}\n     */\n    RibbonDropDown.prototype.removeItems = function (controlId, Items, isUniqueId) {\n        this.getDropDownObj(controlId).removeItems(Items, isUniqueId);\n    };\n    /**\n     * To open/close DropDownButton popup based on current state of the DropDownButton.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @returns {void}\n     */\n    RibbonDropDown.prototype.toggle = function (controlId) {\n        var dropdownObj = this.getDropDownObj(controlId);\n        if (!dropdownObj) {\n            return;\n        }\n        if (!dropdownObj.disabled) {\n            dropdownObj.toggle();\n        }\n    };\n    /**\n     * Updates the dropdown.\n     *\n     * @param {RibbonDropDownSettingsModel} prop - Gets the dropdown property.\n     * @param {string} id - Gets the ID of dropdown.\n     * @returns {void}\n     */\n    RibbonDropDown.prototype.updateDropDown = function (prop, id) {\n        var itemProp = (0,_base_index__WEBPACK_IMPORTED_MODULE_3__.getItem)(this.parent.tabs, id);\n        if (!itemProp) {\n            return;\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(itemProp.item.dropDownSettings, prop);\n        var btnEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_3__.getItemElement)(this.parent, id, itemProp);\n        if (!btnEle) {\n            return;\n        }\n        var control = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(btnEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        if (prop.cssClass) {\n            prop.cssClass = (_base_constant__WEBPACK_IMPORTED_MODULE_4__.RIBBON_CONTROL + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_4__.ITEM_VERTICAL_CENTER + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + prop.cssClass).trim();\n            prop.cssClass = itemProp.item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large ?\n                (_base_constant__WEBPACK_IMPORTED_MODULE_4__.VERTICAL_DDB + _base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE + prop.cssClass).trim() : prop.cssClass;\n            control.cssClass = prop.cssClass;\n        }\n        delete prop.close;\n        delete prop.beforeClose;\n        if (prop.content) {\n            prop.content = itemProp.item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small ? '' : prop.content;\n        }\n        control.setProperties(prop);\n    };\n    /**\n     * Updated DropDown size\n     *\n     * @param {HTMLElement} element - Gets the dropdown element.\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonDropDown.prototype.updateDropDownSize = function (element, item) {\n        var control = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(element, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.DropDownButton);\n        var cssClass = control.cssClass.split(_base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE);\n        if (item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large) {\n            cssClass.push(_base_constant__WEBPACK_IMPORTED_MODULE_4__.VERTICAL_DDB);\n        }\n        else {\n            cssClass = cssClass.filter(function (value) { return value !== _base_constant__WEBPACK_IMPORTED_MODULE_4__.VERTICAL_DDB; });\n        }\n        control.cssClass = cssClass.join(_base_constant__WEBPACK_IMPORTED_MODULE_4__.SPACE);\n        control.setProperties({ iconPosition: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Large ? 'Top' : 'Left' });\n        control.setProperties({ content: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_3__.RibbonItemSize.Small ? '' : item.dropDownSettings.content });\n    };\n    return RibbonDropDown;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-dropdown.js?");

/***/ }),

/***/ "./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-splitbutton.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-splitbutton.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RibbonSplitButton: () => (/* binding */ RibbonSplitButton)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\");\n/* harmony import */ var _base_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/index */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/index.js\");\n/* harmony import */ var _base_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base/constant */ \"./node_modules/@syncfusion/ej2-ribbon/src/ribbon/base/constant.js\");\n\n\n\n\n/**\n * Defines the items of Ribbon.\n */\nvar RibbonSplitButton = /** @class */ (function () {\n    function RibbonSplitButton(parent) {\n        this.parent = parent;\n    }\n    RibbonSplitButton.prototype.getModuleName = function () {\n        return 'ribbonSplitButton';\n    };\n    RibbonSplitButton.prototype.destroy = function () {\n        this.parent = null;\n    };\n    /**\n     * Creates SplitButton.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonSplitButton.prototype.createSplitButton = function (item, itemEle) {\n        var _this = this;\n        var buttonEle = this.parent.createElement('button', {\n            id: item.id\n        });\n        itemEle.appendChild(buttonEle);\n        var splitButtonSettings = item.splitButtonSettings;\n        var cssClass = (_base_constant__WEBPACK_IMPORTED_MODULE_3__.ITEM_VERTICAL_CENTER + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_CONTROL + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + (splitButtonSettings.cssClass ?\n            splitButtonSettings.cssClass : '')).trim();\n        var splitbutton = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton({\n            locale: this.parent.locale,\n            enableRtl: this.parent.enableRtl,\n            enablePersistence: this.parent.enablePersistence,\n            iconPosition: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large ? 'Top' : 'Left',\n            closeActionEvents: splitButtonSettings.closeActionEvents,\n            cssClass: cssClass + ((item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large) ? (_base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_3__.VERTICAL_DDB) : ''),\n            disabled: item.disabled,\n            iconCss: splitButtonSettings.iconCss,\n            items: splitButtonSettings.items,\n            target: splitButtonSettings.target,\n            beforeClose: function (e) {\n                if (splitButtonSettings.beforeClose) {\n                    splitButtonSettings.beforeClose.call(_this, e);\n                }\n            },\n            beforeItemRender: splitButtonSettings.beforeItemRender,\n            beforeOpen: splitButtonSettings.beforeOpen,\n            close: function () {\n                splitbutton['wrapper'].classList.remove(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_OPEN);\n                if (splitButtonSettings.close) {\n                    splitButtonSettings.close.call(_this);\n                }\n            },\n            created: splitButtonSettings.created,\n            open: function () {\n                splitbutton['wrapper'].classList.add(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_OPEN);\n                if (splitButtonSettings.open) {\n                    splitButtonSettings.open.call(_this);\n                }\n            },\n            select: splitButtonSettings.select,\n            click: function (e) {\n                if (splitButtonSettings.click) {\n                    splitButtonSettings.click.call(_this, e);\n                }\n            }\n        }, buttonEle);\n        if (splitButtonSettings.htmlAttributes) {\n            if (splitButtonSettings.htmlAttributes.id) {\n                delete splitButtonSettings.htmlAttributes.id;\n            }\n            (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.setCustomAttributes)(buttonEle, splitButtonSettings.htmlAttributes);\n        }\n        var dropdownEle = buttonEle.parentElement.querySelector('.e-dropdown-btn');\n        dropdownEle.onkeydown = function (e) {\n            if (e.key === 'Enter') {\n                e.stopImmediatePropagation();\n                dropdownEle.click();\n            }\n        };\n        this.setContent(item, splitbutton);\n        var wrapper = splitbutton['wrapper'];\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(wrapper, 'mouseenter', function () { wrapper.classList.add(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_HOVER); }, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(wrapper, 'mouseleave', function () { wrapper.classList.remove(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_HOVER); }, this);\n    };\n    /**\n     * Adds the additional event handlers as the item moved into overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @param {DropDownButton} overflowButton - Gets the overflow button.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonSplitButton.prototype.addOverFlowEvents = function (item, itemEle, overflowButton) {\n        var _this = this;\n        var splitButtonEle = itemEle.querySelector('#' + item.id);\n        splitButtonEle.setAttribute('data-control', item.type.toString());\n        var splitbutton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(splitButtonEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton);\n        splitbutton.cssClass = splitbutton.cssClass + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_CONTROL;\n        splitbutton.dataBind();\n        var dropdownEle = splitButtonEle.parentElement.querySelector('.e-dropdown-btn');\n        var ddbId = dropdownEle.getAttribute('id');\n        var popupEle = document.querySelector('#' + ddbId + '-popup');\n        dropdownEle.onkeydown = function (e) {\n            if (e.key === 'Enter') {\n                e.stopImmediatePropagation();\n                dropdownEle.click();\n            }\n        };\n        popupEle.onkeydown = function (e) {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                splitbutton['wrapper'].classList.remove('e-ribbon-open');\n                popupEle.querySelector('.e-focused').click();\n            }\n        };\n        var target;\n        splitbutton.beforeClose = function (e) {\n            if (item.splitButtonSettings.beforeClose) {\n                item.splitButtonSettings.beforeClose.call(_this, e);\n            }\n            target = e.event ? e.event.target : null;\n        };\n        splitbutton.click = function (e) {\n            if (item.splitButtonSettings.click) {\n                item.splitButtonSettings.click.call(_this, e);\n            }\n            if (overflowButton.element.classList.contains('e-active')) {\n                overflowButton.toggle();\n            }\n        };\n        splitbutton.close = function (e) {\n            if (item.splitButtonSettings.close) {\n                item.splitButtonSettings.close.call(_this, e);\n            }\n            splitbutton['wrapper'].classList.remove(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_OPEN);\n            if (target && !target.closest('.e-ribbon-group-overflow-ddb')) {\n                if (overflowButton.element.classList.contains('e-active')) {\n                    overflowButton.toggle();\n                }\n            }\n        };\n    };\n    /**\n     * Removes the additional event handlers as the item moved from overflow popup.\n     *\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @param {HTMLElement} itemEle - Gets the ribbon item element.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonSplitButton.prototype.removeOverFlowEvents = function (item, itemEle) {\n        var _this = this;\n        var splitButtonEle = itemEle.querySelector('#' + item.id);\n        var splitbutton = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(splitButtonEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton);\n        var cssClass = splitbutton.cssClass.split(_base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE);\n        cssClass = cssClass.filter(function (value) { return value !== _base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_CONTROL; });\n        splitbutton.cssClass = cssClass.join(_base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE);\n        splitbutton.dataBind();\n        splitbutton.beforeClose = function (e) {\n            if (item.splitButtonSettings.beforeClose) {\n                item.splitButtonSettings.beforeClose.call(_this, e);\n            }\n        };\n        splitbutton.click = function (e) {\n            if (item.splitButtonSettings.click) {\n                item.splitButtonSettings.click.call(_this, e);\n            }\n        };\n        splitbutton.close = function (e) {\n            if (item.splitButtonSettings.close) {\n                item.splitButtonSettings.close.call(_this, e);\n            }\n            splitbutton['wrapper'].classList.remove(_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_POPUP_OPEN);\n        };\n    };\n    RibbonSplitButton.prototype.setContent = function (item, control) {\n        control['primaryBtnObj'].setProperties({ content: (item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Medium) ? item.splitButtonSettings.content : '' });\n        control['secondaryBtnObj'].setProperties({ content: (item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large) ? item.splitButtonSettings.content : '' });\n    };\n    RibbonSplitButton.prototype.getSplitButtonObj = function (controlId) {\n        var splitButtonEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItemElement)(this.parent, controlId);\n        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(splitButtonEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton);\n    };\n    /**\n     * Adds a new item to the menu. By default, new item appends to\n     * the list as the last item, but you can insert based on the text parameter.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @param {ItemModel[]} Items - Gets the SplitButton items.\n     * @param {string} text - Gets the text of the splitbutton item where the new item needs to be inserted.\n     * @returns {void}\n     */\n    RibbonSplitButton.prototype.addItems = function (controlId, Items, text) {\n        this.getSplitButtonObj(controlId).addItems(Items, text);\n    };\n    /**\n     * Removes the items from the menu.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @param {string[]} Items -\n     * @param {string} isUniqueId -\n     * @returns {void}\n     */\n    RibbonSplitButton.prototype.removeItems = function (controlId, Items, isUniqueId) {\n        this.getSplitButtonObj(controlId).removeItems(Items, isUniqueId);\n    };\n    /**\n     * To open/close SplitButton popup based on current state of the SplitButton.\n     *\n     * @param {string} controlId - Gets the control ID.\n     * @returns {void}\n     */\n    RibbonSplitButton.prototype.toggle = function (controlId) {\n        var splitBtnObj = this.getSplitButtonObj(controlId);\n        if (!splitBtnObj) {\n            return;\n        }\n        if (!splitBtnObj.disabled) {\n            splitBtnObj.toggle();\n        }\n    };\n    /**\n     * Updates the splitbutton.\n     *\n     * @param {RibbonSplitButtonSettingsModel} prop - Gets the splitbutton property.\n     * @param {string} id - Gets the ID of dropdown.\n     * @returns {void}\n     */\n    RibbonSplitButton.prototype.updateSplitButton = function (prop, id) {\n        var itemProp = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItem)(this.parent.tabs, id);\n        if (!itemProp) {\n            return;\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.merge)(itemProp.item.splitButtonSettings, prop);\n        var btnEle = (0,_base_index__WEBPACK_IMPORTED_MODULE_2__.getItemElement)(this.parent, id, itemProp);\n        if (!btnEle) {\n            return;\n        }\n        var control = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(btnEle, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton);\n        if (prop.cssClass) {\n            prop.cssClass = (_base_constant__WEBPACK_IMPORTED_MODULE_3__.RIBBON_CONTROL + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + _base_constant__WEBPACK_IMPORTED_MODULE_3__.ITEM_VERTICAL_CENTER + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + prop.cssClass).trim();\n            prop.cssClass = itemProp.item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large ?\n                (_base_constant__WEBPACK_IMPORTED_MODULE_3__.VERTICAL_DDB + _base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE + prop.cssClass).trim() : prop.cssClass;\n            control.cssClass = prop.cssClass;\n        }\n        delete prop.open;\n        delete prop.click;\n        delete prop.close;\n        delete prop.beforeClose;\n        control.setProperties(prop);\n        if (prop.content) {\n            this.setContent(itemProp.item, control);\n        }\n    };\n    /**\n     * Updated SplitButton size\n     *\n     * @param {HTMLElement} element - Gets the splibutton element.\n     * @param {RibbonItemModel} item - Gets the ribbon item model.\n     * @returns {void}\n     * @hidden\n     */\n    RibbonSplitButton.prototype.updateSplitButtonSize = function (element, item) {\n        var control = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(element, _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_1__.SplitButton);\n        var cssClass = control.cssClass.split(_base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE);\n        if (item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large) {\n            cssClass.push(_base_constant__WEBPACK_IMPORTED_MODULE_3__.VERTICAL_DDB);\n        }\n        else {\n            cssClass = cssClass.filter(function (value) { return value !== _base_constant__WEBPACK_IMPORTED_MODULE_3__.VERTICAL_DDB; });\n        }\n        control.cssClass = cssClass.join(_base_constant__WEBPACK_IMPORTED_MODULE_3__.SPACE);\n        control.setProperties({ iconPosition: item.activeSize === _base_index__WEBPACK_IMPORTED_MODULE_2__.RibbonItemSize.Large ? 'Top' : 'Left' });\n        this.setContent(item, control);\n    };\n    return RibbonSplitButton;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-ribbon/src/ribbon/items/ribbon-splitbutton.js?");

/***/ })

}]);