"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-pdfviewer_src_pdfviewer_thumbnail-view_thumbnail-view_js-7-a9932570"],{

/***/ "./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/thumbnail-view/thumbnail-view.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/thumbnail-view/thumbnail-view.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThumbnailView: () => (/* binding */ ThumbnailView)\n/* harmony export */ });\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base/pdfviewer-utlis */ \"./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/base/pdfviewer-utlis.js\");\n\n\n\n/**\n * The `ThumbnailView` module is used to handle thumbnail view navigation of PDF viewer.\n *\n * @param {Event} event - args\n * @returns {void}\n */\nvar ThumbnailView = /** @class */ (function () {\n    /**\n     * @param {PdfViewer} pdfViewer - It describes about the pdfviewer\n     * @param {PdfViewerBase} pdfViewerBase - It describes about the pdfviewer base\n     * @private\n     * @returns {void}\n     */\n    function ThumbnailView(pdfViewer, pdfViewerBase) {\n        var _this = this;\n        this.thumbnailLimit = 30;\n        this.thumbnailThreshold = 5;\n        this.thumbnailRequestsBatch = 5;\n        this.thumbnailTopMargin = 10;\n        this.thumbnailTop = 8;\n        this.isRendered = false;\n        this.list = [];\n        /**\n         * @private\n         */\n        this.thumbnailPageSize = [];\n        /**\n         * @private\n         */\n        this.isThubmnailOpen = false;\n        /**\n         * @private\n         */\n        this.isThumbnailClicked = false;\n        this.thumbnailOnScroll = function (event) {\n            var _loop_1 = function (i) {\n                var scrollPosition = _this.pdfViewerBase.navigationPane.sideBarContent.scrollTop;\n                var index = _this.thumbnailPageSize.findIndex(function (page) { return page.top >= scrollPosition; });\n                if (index !== -1) {\n                    var number = Math.floor((index) / _this.thumbnailRequestsBatch) * _this.thumbnailRequestsBatch;\n                    _this.updateScrollTopForThumbnail(number);\n                    return \"break\";\n                }\n            };\n            for (var i = 0; i < _this.thumbnailPageSize.length; i++) {\n                var state_1 = _loop_1(i);\n                if (state_1 === \"break\")\n                    break;\n            }\n        };\n        /**\n         * @param {MouseEvent} event - It describes about the event\n         * @param {boolean} isKeyboard - It describes about the isKeyboard value\n         * @private\n         * @returns {void}\n         */\n        this.thumbnailClick = function (event, isKeyboard) {\n            // eslint-disable-next-line\n            var proxy = _this;\n            var target = event.target;\n            var pageNumber = proxy.getPageNumberFromID(target.id);\n            if (proxy.previousElement) {\n                proxy.previousElement.classList.remove('e-pv-thumbnail-selection');\n                proxy.previousElement.classList.remove('e-pv-thumbnail-focus');\n                proxy.previousElement.classList.add('e-pv-thumbnail-selection-ring');\n            }\n            if (target.parentElement.id === proxy.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageNumber) {\n                proxy.setSelectionStyle(target.parentElement);\n                proxy.previousElement = target.parentElement;\n            }\n            else if (target.id === proxy.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageNumber) {\n                proxy.setSelectionStyle(target);\n                proxy.previousElement = target;\n            }\n            proxy.pdfViewer.fireThumbnailClick(pageNumber + 1);\n            proxy.isThumbnailClicked = true;\n            proxy.goToThumbnailPage(pageNumber + 1);\n            if (!isKeyboard) {\n                proxy.pdfViewerBase.focusViewerContainer();\n            }\n            if (_this.pdfViewer.annotationModule && _this.pdfViewer.annotationModule.inkAnnotationModule) {\n                var currentPageNumber = parseInt(_this.pdfViewer.annotationModule.inkAnnotationModule.currentPageNumber, 10);\n                _this.pdfViewer.annotationModule.inkAnnotationModule.drawInkAnnotation(currentPageNumber);\n            }\n        };\n        /**\n         * @param {KeyboardEvent} event - It describes about the event\n         * @private\n         * @returns {void}\n         */\n        this.thumbnailKeydown = function (event) {\n            if (event && event.key === 'Enter' || event.key === ' ') {\n                _this.thumbnailClick(event, true);\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        };\n        /**\n         * @param {MouseEvent} event - It describes about the event\n         * @private\n         * @returns {void}\n         */\n        this.thumbnailMouseOver = function (event) {\n            // eslint-disable-next-line\n            var proxy = _this;\n            var target = event.target;\n            var pageNumber = proxy.getPageNumberFromID(target.id);\n            if (target.id === proxy.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageNumber) {\n                proxy.setMouseOverStyle(target);\n            }\n            else if (target.id === proxy.pdfViewer.element.id + '_thumbnail_image_' + pageNumber) {\n                proxy.setMouseOverStyle(target.parentElement);\n            }\n        };\n        /**\n         * @param {MouseEvent} event - It describes about the event\n         * @private\n         * @returns {void}\n         */\n        this.thumbnailMouseLeave = function (event) {\n            // eslint-disable-next-line\n            var proxy = _this;\n            var target = event.target;\n            var pageNumber = proxy.getPageNumberFromID(target.id);\n            if (target.parentElement.id === proxy.pdfViewer.element.id + '_thumbnail_view') {\n                proxy.setMouseLeaveStyle(target.children[0].children[0]);\n            }\n            else if (target.parentElement.id === proxy.pdfViewer.element.id + '_thumbnail_' + pageNumber) {\n                proxy.setMouseLeaveStyle(target.parentElement.children[0]);\n            }\n        };\n        this.pdfViewer = pdfViewer;\n        this.pdfViewerBase = pdfViewerBase;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.createThumbnailContainer = function () {\n        this.thumbnailView = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + '_thumbnail_view', className: 'e-pv-thumbnail-view e-pv-thumbnail-row' });\n        this.pdfViewerBase.navigationPane.sideBarContent.appendChild(this.thumbnailView);\n        this.pdfViewerBase.navigationPane.sideBarContent.addEventListener('scrollend', this.thumbnailOnScroll);\n    };\n    /**\n     * Open the thumbnail pane of the PdfViewer.\n     *\n     * @returns {void}\n     */\n    ThumbnailView.prototype.openThumbnailPane = function () {\n        if (this.pdfViewerBase.navigationPane) {\n            this.pdfViewerBase.navigationPane.openThumbnailPane();\n        }\n    };\n    /**\n     * Close the thumbnail pane of the PdfViewer.\n     *\n     * @returns {void}\n     */\n    ThumbnailView.prototype.closeThumbnailPane = function () {\n        if (this.pdfViewerBase.navigationPane) {\n            this.pdfViewerBase.navigationPane.closeThumbnailPane();\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.createRequestForThumbnails = function () {\n        // eslint-disable-next-line\n        var proxy = this;\n        proxy.thumbnailLimit = 0;\n        for (var i = 0; i < proxy.pdfViewer.pageCount; i++) {\n            proxy.renderThumbnailEmptyPage(i);\n        }\n        if (proxy.pdfViewer.isThumbnailViewOpen) {\n            this.isThubmnailOpen = true;\n            if (proxy.pdfViewerBase.navigationPane && proxy.pdfViewerBase.navigationPane.sideBarTitle) {\n                proxy.pdfViewerBase.navigationPane.sideBarTitle.textContent = proxy.pdfViewer.localeObj.getConstant('Page Thumbnails');\n            }\n            if (document.getElementById(proxy.pdfViewer.element.id + '_thumbnail_view')) {\n                document.getElementById(proxy.pdfViewer.element.id + '_thumbnail_view').style.display = 'flex';\n            }\n            var bookmarkContent = proxy.pdfViewer.element.querySelector('.e-pv-bookmark-view');\n            if (bookmarkContent) {\n                bookmarkContent.style.display = 'none';\n            }\n            proxy.pdfViewerBase.navigationPane.updateViewerContainerOnExpand();\n            this.isThubmnailOpen = false;\n            proxy.pdfViewerBase.navigationPane.isBookmarkOpen = false;\n        }\n        this.createRequestForThumbnailImages();\n    };\n    ThumbnailView.prototype.isThumbnailViewOpen = function () {\n        // eslint-disable-next-line\n        var proxy = this;\n        if (proxy.pdfViewer.isThumbnailViewOpen) {\n            proxy.pdfViewerBase.navigationPane.setThumbnailSelectionIconTheme();\n            proxy.pdfViewerBase.navigationPane.isThumbnailOpen = true;\n            this.pdfViewerBase.navigationPane.sideBarContentContainer.style.display = 'block';\n            if (this.pdfViewer.enableRtl) {\n                proxy.pdfViewerBase.viewerContainer.style.right = this.pdfViewerBase.navigationPane.getViewerContainerLeft() + 'px';\n            }\n            else {\n                proxy.pdfViewerBase.viewerContainer.style.left = this.pdfViewerBase.navigationPane.getViewerContainerLeft() + 'px';\n            }\n            proxy.pdfViewerBase.viewerContainer.style.width = (proxy.pdfViewer.element.clientWidth - this.pdfViewerBase.navigationPane.getViewerContainerLeft() - this.pdfViewerBase.navigationPane.getViewerContainerRight()) + 'px';\n            proxy.pdfViewerBase.pageContainer.style.width = proxy.pdfViewerBase.viewerContainer.clientWidth + 'px';\n            proxy.pdfViewerBase.updateZoomValue();\n        }\n    };\n    /**\n     * Checks if thumbnails have been requested for the given page number.\n     *\n     * @param {number} pageNumber The page number to check.\n     * @returns {boolean} True if thumbnails have been requested, otherwise false.\n     */\n    ThumbnailView.prototype.thumbnailsRequestedForPage = function (pageNumber) {\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var requestedPage = _a[_i];\n            if (pageNumber === requestedPage) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {number} pageNumber - Specify the pageNumber.\n     * @returns {void}\n     * @private\n     */\n    ThumbnailView.prototype.updateScrollTopForThumbnail = function (pageNumber) {\n        var _this = this;\n        var step = this.thumbnailRequestsBatch;\n        var number = Math.floor((pageNumber + 1) / step) * step;\n        var lastNum = this.pdfViewer.thumbnailViewModule.thumbnailLimit;\n        var numbers = [number, number - step, number + step, lastNum];\n        numbers.forEach(function (num) {\n            if (num < 0) {\n                return;\n            }\n            if (!_this.thumbnailsRequestedForPage(num)) {\n                _this.renderThumbnailImage(null, num);\n            }\n        });\n    };\n    /**\n     * @param {number} pageIndex - It describes about the page index\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.renderThumbnailEmptyPage = function (pageIndex) {\n        if (this.thumbnailView) {\n            var pageLink = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('a', { id: 'page_' + pageIndex, attrs: { 'aria-label': 'Thumbnail of Page' + (pageIndex + 1), 'tabindex': '-1', 'role': 'link' }, className: 'e-pv-thumbnail-anchor-node' });\n            var thumbnail = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + '_thumbnail_' + pageIndex, className: 'e-pv-thumbnail e-pv-thumbnail-column' });\n            this.thumbnailSelectionRing = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageIndex, className: 'e-pv-thumbnail-selection-ring' });\n            thumbnail.appendChild(this.thumbnailSelectionRing);\n            var thumbnailPageNumber = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('div', { id: this.pdfViewer.element.id + '_thumbnail_pagenumber_' + pageIndex, className: 'e-pv-thumbnail-number' });\n            thumbnailPageNumber.textContent = (pageIndex + 1).toString();\n            thumbnail.appendChild(thumbnailPageNumber);\n            var height = 180;\n            this.thumbnailImage = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.createElement)('img', { id: this.pdfViewer.element.id + '_thumbnail_image_' + pageIndex, className: 'e-pv-thumbnail-image' });\n            if (this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)] &&\n                (this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].height <\n                    this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].width)) {\n                this.thumbnailImage.style.height = '86px';\n                this.thumbnailImage.style.width = '126px';\n                thumbnail.style.height = '100px';\n                thumbnail.style.width = '140px';\n                thumbnailPageNumber.style.left = '18px';\n                pageLink.style.marginRight = '41px';\n                thumbnail.style.marginLeft = '-5px';\n                thumbnail.style.marginRight = '0px';\n                height = 140;\n            }\n            if (pageIndex !== 0) {\n                this.thumbnailTop = this.thumbnailPageSize[pageIndex - 1].top + this.thumbnailPageSize[pageIndex - 1].height;\n                var thumbnailSize = { height: height, top: this.thumbnailTop };\n                this.thumbnailPageSize[parseInt(pageIndex.toString(), 10)] = thumbnailSize;\n            }\n            else {\n                var thumbnailSize = { height: height, top: this.thumbnailTop };\n                this.thumbnailPageSize[parseInt(pageIndex.toString(), 10)] = thumbnailSize;\n            }\n            this.thumbnailSelectionRing.appendChild(this.thumbnailImage);\n            pageLink.appendChild(thumbnail);\n            this.thumbnailView.appendChild(pageLink);\n            this.wireUpEvents();\n            if (pageIndex === 0) {\n                this.setMouseFocusToFirstPage();\n            }\n            this.pdfViewerBase.navigationPane.enableThumbnailButton();\n        }\n    };\n    /**\n     * @param {ThumbnailView} prox - It describes about the prox\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.renderViewPortThumbnailImage = function (prox) {\n        var proxy = prox ? prox : this;\n        // Removed the condition to skip multiple request for thumbnail image.\n        proxy.startIndex = proxy.thumbnailLimit;\n        this.list.push(proxy.startIndex);\n        if (this.pdfViewerBase.pageSize.length === this.pdfViewerBase.pageCount && !this.isRendered) {\n            this.renderDiv();\n        }\n        proxy.thumbnailLimit = proxy.startIndex + proxy.thumbnailThreshold < proxy.pdfViewer.pageCount ?\n            proxy.startIndex + proxy.thumbnailThreshold : proxy.pdfViewer.pageCount;\n        if (!this.pdfViewerBase.clientSideRendering) {\n            var digitalSignaturePresent = false;\n            for (var i = proxy.startIndex; i < proxy.thumbnailLimit; i++) {\n                if (proxy.pdfViewerBase.digitalSignaturePresent(i)) {\n                    digitalSignaturePresent = true;\n                }\n            }\n            var digitalSignatureList = '';\n            if (digitalSignaturePresent) {\n                digitalSignatureList = proxy.pdfViewerBase.digitalSignaturePages.toString();\n            }\n            var jsonObject = { startPage: proxy.startIndex.toString(), endPage: proxy.thumbnailLimit.toString(), sizeX: '99.7', sizeY: '141', hashId: proxy.pdfViewerBase.hashId, action: 'RenderThumbnailImages', elementId: proxy.pdfViewer.element.id, uniqueId: proxy.pdfViewerBase.documentId, digitalSignaturePresent: digitalSignaturePresent, digitalSignaturePageList: digitalSignatureList };\n            if (this.pdfViewerBase.jsonDocumentId) {\n                jsonObject.documentId = this.pdfViewerBase.jsonDocumentId;\n            }\n            this.thumbnailRequestHandler = new _index__WEBPACK_IMPORTED_MODULE_0__.AjaxHandler(this.pdfViewer);\n            this.thumbnailRequestHandler.url = proxy.pdfViewer.serviceUrl + '/' + proxy.pdfViewer.serverActionSettings.renderThumbnail;\n            this.thumbnailRequestHandler.responseType = 'json';\n            if ((proxy.startIndex.toString() !== proxy.thumbnailLimit.toString()) && proxy.thumbnailLimit > 0 &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(proxy.pdfViewerBase.hashId)) {\n                this.pdfViewerBase.requestCollection.push(this.thumbnailRequestHandler);\n                this.thumbnailRequestHandler.send(jsonObject);\n            }\n            this.thumbnailRequestHandler.onSuccess = function (result) {\n                var data = result.data;\n                var redirect = proxy.pdfViewerBase.checkRedirection(data);\n                if (!redirect) {\n                    proxy.updateThumbnailCollection(data);\n                }\n            };\n            this.thumbnailRequestHandler.onFailure = function (result) {\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderThumbnail);\n            };\n            this.thumbnailRequestHandler.onError = function (result) {\n                proxy.pdfViewerBase.openNotificationPopup();\n                proxy.pdfViewer.fireAjaxRequestFailed(result.status, result.statusText, proxy.pdfViewer.serverActionSettings.renderThumbnail);\n            };\n        }\n        else {\n            for (var count = proxy.startIndex; count < proxy.thumbnailLimit; count++) {\n                var currentPageImage = this.getThumbnailImageElement(count);\n                var jsonObject = { documentId: proxy.pdfViewerBase.getDocumentId(), hashId: proxy.pdfViewerBase.hashId,\n                    elementId: proxy.pdfViewer.element.id, uniqueId: proxy.pdfViewerBase.documentId };\n                var isTextNeed = proxy.pdfViewer.textSearch ? true : false;\n                var isSkipCharacterBounds = (this.pdfViewer.extractTextOption === _index__WEBPACK_IMPORTED_MODULE_0__.ExtractTextOption.None ||\n                    this.pdfViewer.extractTextOption === _index__WEBPACK_IMPORTED_MODULE_0__.ExtractTextOption.TextOnly) ? true : false;\n                if ((currentPageImage && currentPageImage.src === '') || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentPageImage) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.pageOrganizer))) {\n                    this.pdfViewerBase.pdfViewerRunner.addTask({\n                        pageIndex: count,\n                        message: 'renderThumbnail',\n                        isTextNeed: isTextNeed,\n                        jsonObject: jsonObject,\n                        isRenderText: isTextNeed,\n                        requestType: isTextNeed ? 'pdfTextSearchRequest' : '',\n                        isSkipCharacterBounds: isSkipCharacterBounds\n                    }, _base_pdfviewer_utlis__WEBPACK_IMPORTED_MODULE_2__.TaskPriorityLevel.Low);\n                }\n            }\n            this.isThumbnailViewOpen();\n        }\n    };\n    /**\n     * @param {any} event - It describes about the event\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.thumbnailOnMessage = function (event) {\n        if (event.data.message === 'renderThumbnail') {\n            var canvas = document.createElement('canvas');\n            var _a = event.data, value = _a.value, width = _a.width, height = _a.height, pageIndex = _a.pageIndex;\n            canvas.width = width;\n            canvas.height = height;\n            var canvasContext = canvas.getContext('2d');\n            var imageData = canvasContext.createImageData(width, height);\n            imageData.data.set(value);\n            canvasContext.putImageData(imageData, 0, 0);\n            var imageUrl = canvas.toDataURL();\n            this.pdfViewerBase.releaseCanvas(canvas);\n            var currentPageImage = this.getThumbnailImageElement(pageIndex);\n            if (currentPageImage) {\n                currentPageImage.src = imageUrl;\n            }\n            var data = ({\n                thumbnailImage: imageUrl,\n                startPage: this.startIndex,\n                endPage: this.thumbnailLimit,\n                uniqueId: this.pdfViewerBase.documentId,\n                pageIndex: pageIndex\n            });\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.Browser.isDevice || this.pdfViewer.enableDesktopMode) {\n                this.updateThumbnailCollection(data);\n            }\n            else {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.pageOrganizer)) {\n                    this.pdfViewer.pageOrganizer.updatePreviewCollection(data);\n                }\n            }\n        }\n    };\n    /**\n     * @param {any} data - It describes about the data\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.updateThumbnailCollection = function (data) {\n        if (data) {\n            // eslint-disable-next-line\n            var proxy = this;\n            if (typeof data !== 'object') {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    proxy.pdfViewerBase.onControlError(500, data, proxy.pdfViewer.serverActionSettings.renderThumbnail);\n                    data = null;\n                }\n            }\n            if (data && data.uniqueId === proxy.pdfViewerBase.documentId) {\n                proxy.pdfViewer.fireAjaxRequestSuccess(proxy.pdfViewer.serverActionSettings.renderThumbnail, data);\n                proxy.renderThumbnailImage(data);\n            }\n        }\n    };\n    ThumbnailView.prototype.renderDiv = function (data) {\n        if ((this.pdfViewerBase.pageSize.length === this.pdfViewerBase.pageCount || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data)) && !this.isRendered) {\n            for (var i = 100; i < this.pdfViewer.pageCount; i++) {\n                var thumbnail = document.getElementById(this.pdfViewer.element.id + '_thumbnail_' + i);\n                var pageLink = document.getElementById('page_' + i);\n                var thumbnailPageNumber = document.getElementById(this.pdfViewer.element.id + '_thumbnail_pagenumber_' + i);\n                var currentPageImage = this.getThumbnailImageElement(i);\n                var height = 180;\n                if ((this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)] &&\n                    (this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].height <\n                        this.pdfViewerBase.pageSize[parseInt(i.toString(), 10)].width)) ||\n                    (data && (data.pageRotation[parseInt(i.toString(), 10)] === 1 ||\n                        data.pageRotation[parseInt(i.toString(), 10)] === 3))) {\n                    currentPageImage.style.height = '86px';\n                    currentPageImage.style.width = '126px';\n                    thumbnail.style.height = '100px';\n                    thumbnail.style.width = '140px';\n                    thumbnailPageNumber.style.left = '18px';\n                    pageLink.style.marginRight = '41px';\n                    thumbnail.style.marginLeft = '-5px';\n                    thumbnail.style.marginRight = '0px';\n                    height = 140;\n                }\n                if (this.thumbnailPageSize.length > 0) {\n                    this.thumbnailTop = this.thumbnailPageSize[i - 1].top + this.thumbnailPageSize[i - 1].height;\n                    var thumbnailSize = { height: height, top: this.thumbnailTop };\n                    this.thumbnailPageSize[parseInt(i.toString(), 10)] = thumbnailSize;\n                }\n            }\n            this.isRendered = true;\n        }\n    };\n    /**\n     * @param {number} pageNumber - It describes about the page number\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.gotoThumbnailImage = function (pageNumber) {\n        var shouldScroll = this.checkThumbnailScroll(pageNumber);\n        if (this.thumbnailView) {\n            var thumbnailChild = this.thumbnailView.children[parseInt(pageNumber.toString(), 10)];\n            if (thumbnailChild) {\n                var thumbnailDiv = thumbnailChild.children[0];\n                var offsetTop = void 0;\n                if (shouldScroll) {\n                    if (this.pdfViewerBase.pageSize.length === this.pdfViewerBase.pageCount && !this.isRendered) {\n                        this.renderDiv();\n                    }\n                    if (thumbnailDiv.offsetTop <= 0) {\n                        offsetTop = thumbnailDiv.parentElement.offsetTop + thumbnailDiv.clientTop - this.thumbnailTopMargin;\n                    }\n                    else {\n                        offsetTop = thumbnailDiv.offsetTop + thumbnailDiv.clientTop - this.thumbnailTopMargin;\n                    }\n                    this.pdfViewerBase.navigationPane.sideBarContent.scrollTop = offsetTop;\n                }\n                if (!this.isThumbnailClicked) {\n                    if (this.previousElement) {\n                        this.previousElement.classList.remove('e-pv-thumbnail-selection');\n                        this.previousElement.classList.remove('e-pv-thumbnail-focus');\n                        this.previousElement.classList.remove('e-pv-thumbnail-hover');\n                        this.previousElement.classList.add('e-pv-thumbnail-selection-ring');\n                    }\n                    this.setFocusStyle(thumbnailDiv, pageNumber);\n                }\n                this.previousElement = thumbnailDiv.children[0];\n            }\n        }\n    };\n    /**\n     * Determines if there is a need to request thumbnails based on the current page number.\n     *\n     * @param {number} currentPageNumber The current page number.\n     * @returns {number} The page number to request thumbnails for.\n     */\n    ThumbnailView.prototype.determineThumbnailsRequest = function (currentPageNumber) {\n        var pageCount = this.pdfViewer.pageCount;\n        var batchSize = this.thumbnailRequestsBatch; // Assuming thumbnails are requested in batches of 50\n        var numberOfBatches = Math.ceil(pageCount / batchSize);\n        if (this.list.length === numberOfBatches) {\n            return pageCount;\n        }\n        for (var i = 0; i < this.list.length; i++) {\n            if (currentPageNumber === this.list[parseInt(i.toString(), 10)]) {\n                currentPageNumber += batchSize;\n                i = -1; // Resetting i to -1 to start from the beginning of the list again\n            }\n        }\n        return currentPageNumber !== undefined && currentPageNumber < pageCount ? currentPageNumber : pageCount;\n    };\n    ThumbnailView.prototype.checkThumbnailScroll = function (pageNumber) {\n        var shouldScroll = false;\n        if (this.thumbnailView) {\n            var visibleThumbs = this.getVisibleThumbs();\n            var numVisibleThumbs = visibleThumbs.views.length;\n            // if the thumbnail isn't currently visible, scroll it into view.\n            if (numVisibleThumbs > 0) {\n                var visibleFirstPageID = this.getPageNumberFromID(visibleThumbs.first.id);\n                // account for only one thumbnail being visible.\n                var visibleLastPageID = (numVisibleThumbs > 1 ?\n                    this.getPageNumberFromID(visibleThumbs.last.id) : visibleFirstPageID);\n                if (pageNumber <= visibleFirstPageID || pageNumber >= visibleLastPageID) {\n                    shouldScroll = true;\n                }\n                else {\n                    visibleThumbs.views.some(function (view) {\n                        var pageID = view.id.split('_');\n                        var thumbPageNumber = pageID[pageID.length - 1];\n                        if (parseInt(thumbPageNumber, 10) !== pageNumber) {\n                            return false;\n                        }\n                        shouldScroll = view.percent < 100 && (view.view.offsetWidth > view.view.offsetHeight && view.percent < 97);\n                        return true;\n                    });\n                }\n            }\n        }\n        return shouldScroll;\n    };\n    ThumbnailView.prototype.getPageNumberFromID = function (pageId) {\n        var pageID = pageId.split('_');\n        var pageNumber = pageID[pageID.length - 1];\n        return parseInt(pageNumber, 10);\n    };\n    ThumbnailView.prototype.setFocusStyle = function (thumbnail, pageNumber) {\n        if (thumbnail.children[0].id === this.pdfViewer.element.id + '_thumbnail_Selection_Ring_' + pageNumber) {\n            this.setMouseFocusStyle(thumbnail.children[0]);\n        }\n    };\n    ThumbnailView.prototype.renderThumbnailImage = function (data, pageNumber) {\n        if (this.thumbnailView && data) {\n            if (this.pdfViewerBase.clientSideRendering) {\n                this.renderClientThumbnailImage(data);\n            }\n            else {\n                this.renderServerThumbnailImage(data);\n            }\n        }\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.pageOrganizer)) {\n            this.pdfViewer.pageOrganizer.getData(data, this.pdfViewerBase.clientSideRendering);\n        }\n        this.thumbnailLimit = this.determineThumbnailsRequest(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(pageNumber) ? pageNumber : this.thumbnailLimit);\n        if (this.thumbnailLimit !== this.pdfViewerBase.pageCount && (this.thumbnailView ||\n            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.pdfViewer.pageOrganizer))) {\n            var isIE = !!document.documentMode;\n            if (!isIE) {\n                Promise.all([this.createRequestForThumbnailImages()]);\n            }\n            else {\n                this.createRequestForThumbnailImages();\n            }\n        }\n    };\n    ThumbnailView.prototype.createRequestForThumbnailImages = function () {\n        // eslint-disable-next-line\n        var proxy = this;\n        var isIE = !!document.documentMode;\n        if (!isIE) {\n            return new Promise(function (renderThumbnailImage, reject) {\n                proxy.renderViewPortThumbnailImage(proxy);\n            });\n        }\n        else {\n            this.renderViewPortThumbnailImage(proxy);\n            return null;\n        }\n    };\n    ThumbnailView.prototype.renderServerThumbnailImage = function (data) {\n        var startPage = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data && (data.startPage)) ? data.startPage : this.startIndex;\n        var endPage = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data && (data.endPage)) ? data.endPage : this.thumbnailLimit;\n        for (var i = startPage; i < endPage; i++) {\n            this.thumbnailImageRender(i, data);\n        }\n        this.isThumbnailViewOpen();\n    };\n    ThumbnailView.prototype.renderClientThumbnailImage = function (data) {\n        var pageIndex = data.pageIndex;\n        this.thumbnailImageRender(pageIndex, data);\n    };\n    ThumbnailView.prototype.thumbnailImageRender = function (pageIndex, data) {\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(data.pageRotation) && Object.keys(data.pageRotation).length > 0 && !this.isRendered) {\n            this.renderDiv(data);\n        }\n        var thumbnail = document.getElementById(this.pdfViewer.element.id + '_thumbnail_' + pageIndex);\n        var pageLink = document.getElementById('page_' + pageIndex);\n        var thumbnailPageNumber = document.getElementById(this.pdfViewer.element.id + '_thumbnail_pagenumber_' + pageIndex);\n        var currentPageImage = this.getThumbnailImageElement(pageIndex);\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(thumbnail) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(currentPageImage)) {\n            currentPageImage.src = this.pdfViewerBase.clientSideRendering || typeof data.thumbnailImage === 'string' || data.thumbnailImage instanceof String ? data.thumbnailImage : data.thumbnailImage[parseInt(pageIndex.toString(), 10)];\n            currentPageImage.alt = this.pdfViewer.element.id + '_thumbnail_page_' + pageIndex;\n            pageLink.setAttribute('aria-label', \"Thumbnail of Page \" + (pageIndex + 1));\n            if (this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)] &&\n                (this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].height <\n                    this.pdfViewerBase.pageSize[parseInt(pageIndex.toString(), 10)].width)) {\n                currentPageImage.style.height = '86px';\n                currentPageImage.style.width = '126px';\n                thumbnail.style.height = '100px';\n                thumbnail.style.width = '140px';\n                // pageLink.style.left = '-25px';\n                thumbnailPageNumber.style.left = '18px';\n                pageLink.style.marginRight = '41px';\n                thumbnail.style.marginLeft = '-5px';\n                thumbnail.style.marginRight = '0px';\n            }\n            if (pageIndex === 0) {\n                this.pdfViewerBase.navigationPane.enableThumbnailButton();\n                this.isThumbnailViewOpen();\n            }\n        }\n    };\n    ThumbnailView.prototype.wireUpEvents = function () {\n        if (this.thumbnailSelectionRing) {\n            this.thumbnailSelectionRing.addEventListener('click', this.thumbnailClick);\n            this.thumbnailImage.addEventListener('keydown', this.thumbnailKeydown);\n            this.thumbnailSelectionRing.addEventListener('mouseover', this.thumbnailMouseOver);\n            this.thumbnailSelectionRing.addEventListener('mouseleave', this.thumbnailMouseLeave);\n        }\n    };\n    ThumbnailView.prototype.unwireUpEvents = function () {\n        if (this.thumbnailSelectionRing && this.thumbnailImage) {\n            this.thumbnailSelectionRing.removeEventListener('click', this.thumbnailClick);\n            this.thumbnailImage.removeEventListener('keydown', this.thumbnailKeydown);\n            this.thumbnailSelectionRing.removeEventListener('mouseover', this.thumbnailMouseOver);\n            this.thumbnailSelectionRing.removeEventListener('mouseleave', this.thumbnailMouseLeave);\n        }\n    };\n    ThumbnailView.prototype.goToThumbnailPage = function (pageNumber) {\n        if (pageNumber > 0 && pageNumber <= this.pdfViewerBase.pageCount && this.pdfViewerBase.currentPageNumber !== pageNumber) {\n            this.pdfViewerBase.updateScrollTop(pageNumber - 1);\n        }\n        else {\n            this.isThumbnailClicked = false;\n        }\n    };\n    ThumbnailView.prototype.setSelectionStyle = function (thumbnailElement) {\n        thumbnailElement.classList.remove('e-pv-thumbnail-selection-ring');\n        thumbnailElement.classList.remove('e-pv-thumbnail-hover');\n        thumbnailElement.classList.remove('e-pv-thumbnail-focus');\n        thumbnailElement.classList.add('e-pv-thumbnail-selection');\n    };\n    ThumbnailView.prototype.setMouseOverStyle = function (thumbnailElement) {\n        if (!thumbnailElement.classList.contains('e-pv-thumbnail-selection')) {\n            thumbnailElement.classList.remove('e-pv-thumbnail-selection-ring');\n            if (!thumbnailElement.classList.contains('e-pv-thumbnail-focus')) {\n                thumbnailElement.classList.add('e-pv-thumbnail-hover');\n            }\n        }\n    };\n    ThumbnailView.prototype.setMouseLeaveStyle = function (thumbnailElement) {\n        if (!thumbnailElement.classList.contains('e-pv-thumbnail-selection')) {\n            if (!thumbnailElement.classList.contains('e-pv-thumbnail-focus')) {\n                thumbnailElement.classList.add('e-pv-thumbnail-selection-ring');\n            }\n            thumbnailElement.classList.remove('e-pv-thumbnail-hover');\n        }\n        else {\n            if (!thumbnailElement.classList.contains('e-pv-thumbnail-selection')) {\n                thumbnailElement.classList.remove('e-pv-thumbnail-selection');\n                thumbnailElement.classList.add('e-pv-thumbnail-focus');\n            }\n        }\n    };\n    ThumbnailView.prototype.setMouseFocusStyle = function (thumbnailElement) {\n        thumbnailElement.classList.remove('e-pv-thumbnail-selection');\n        thumbnailElement.classList.remove('e-pv-thumbnail-hover');\n        thumbnailElement.classList.add('e-pv-thumbnail-focus');\n    };\n    ThumbnailView.prototype.setMouseFocusToFirstPage = function () {\n        var thumbnailChild = this.thumbnailView.children[0];\n        if (thumbnailChild) {\n            var thumbnailDiv = thumbnailChild.children[0].children[0];\n            this.setMouseFocusStyle(thumbnailDiv);\n            this.previousElement = thumbnailDiv;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.clear = function () {\n        this.startIndex = 0;\n        this.thumbnailLimit = 0;\n        this.list = [];\n        this.thumbnailPageSize = [];\n        this.thumbnailTop = 0;\n        this.isRendered = false;\n        if (this.pdfViewerBase.navigationPane) {\n            if (this.pdfViewerBase.navigationPane.sideBarContentContainer) {\n                this.pdfViewerBase.navigationPane.sideBarContentContainer.style.display = 'block';\n                this.pdfViewerBase.navigationPane.sideBarContent.scrollTop = 0;\n                this.pdfViewerBase.navigationPane.sideBarContentContainer.style.display = 'none';\n            }\n        }\n        if (this.thumbnailView) {\n            while (this.thumbnailView.hasChildNodes()) {\n                this.thumbnailView.removeChild(this.thumbnailView.lastChild);\n            }\n        }\n        if (this.pdfViewerBase.navigationPane) {\n            this.pdfViewerBase.navigationPane.resetThumbnailView();\n        }\n        if (this.thumbnailRequestHandler) {\n            this.thumbnailRequestHandler.clear();\n        }\n        this.unwireUpEvents();\n    };\n    ThumbnailView.prototype.getVisibleThumbs = function () {\n        return this.getVisibleElements(this.pdfViewerBase.navigationPane.sideBarContent, this.thumbnailView.children);\n    };\n    ThumbnailView.prototype.getVisibleElements = function (scrollElement, thumbnailViewChildren) {\n        var top = scrollElement.scrollTop;\n        var bottom = top + scrollElement.clientHeight;\n        var left = scrollElement.scrollLeft;\n        var right = left + scrollElement.clientWidth;\n        /**\n         * @param {HTMLElement} thumbnailViewChildrenElement - It describes about the thumbnail view children element\n         * @returns {boolean} - boolean\n         */\n        function isThumbnailElementBottomAfterViewTop(thumbnailViewChildrenElement) {\n            var elementBottom = thumbnailViewChildrenElement.offsetTop + thumbnailViewChildrenElement.clientTop + thumbnailViewChildrenElement.clientHeight;\n            return elementBottom > top;\n        }\n        var visible = [];\n        var thumbnailView;\n        var element;\n        var currentHeight;\n        var viewHeight;\n        var viewBottom;\n        var hiddenHeight;\n        var currentWidth;\n        var viewWidth;\n        var viewRight;\n        var hiddenWidth;\n        var percentVisible;\n        var firstVisibleElementInd = thumbnailViewChildren.length === 0 ? 0 :\n            this.binarySearchFirstItem(thumbnailViewChildren, isThumbnailElementBottomAfterViewTop);\n        if (thumbnailViewChildren.length > 0) {\n            firstVisibleElementInd =\n                this.backtrackBeforeAllVisibleElements(firstVisibleElementInd, thumbnailViewChildren, top);\n        }\n        var lastEdge = -1;\n        for (var i = firstVisibleElementInd, ii = thumbnailViewChildren.length; i < ii; i++) {\n            thumbnailView = this.getThumbnailElement(i);\n            element = thumbnailView;\n            currentWidth = element.offsetLeft + element.clientLeft;\n            currentHeight = element.offsetTop + element.clientTop;\n            viewWidth = element.clientWidth;\n            viewHeight = element.clientHeight;\n            viewRight = currentWidth + viewWidth;\n            viewBottom = currentHeight + viewHeight;\n            if (lastEdge === -1) {\n                if (viewBottom >= bottom) {\n                    lastEdge = viewBottom;\n                }\n            }\n            else if (currentHeight > lastEdge) {\n                break;\n            }\n            if (viewBottom <= top || currentHeight >= bottom ||\n                viewRight <= left || currentWidth >= right) {\n                continue;\n            }\n            hiddenHeight = Math.max(0, top - currentHeight) +\n                Math.max(0, viewBottom - bottom);\n            hiddenWidth = Math.max(0, left - currentWidth) +\n                Math.max(0, viewRight - right);\n            percentVisible = ((viewHeight - hiddenHeight) * (viewWidth - hiddenWidth) * 100 / viewHeight / viewWidth) | 0;\n            visible.push({\n                id: thumbnailView.id,\n                x: currentWidth,\n                y: currentHeight,\n                view: thumbnailView,\n                percent: percentVisible\n            });\n        }\n        var first = visible[0];\n        var last = visible[visible.length - 1];\n        return { first: first, last: last, views: visible };\n    };\n    ThumbnailView.prototype.binarySearchFirstItem = function (items, condition) {\n        var minIndex = 0;\n        var maxIndex = items.length - 1;\n        if (items.length === 0 || !condition(this.getThumbnailElement(maxIndex))) {\n            return items.length - 1;\n        }\n        if (condition(this.getThumbnailElement(minIndex))) {\n            return minIndex;\n        }\n        while (minIndex < maxIndex) {\n            var currentIndex = (minIndex + maxIndex) >> 1;\n            if (condition(this.getThumbnailElement(currentIndex))) {\n                maxIndex = currentIndex;\n            }\n            else {\n                minIndex = currentIndex + 1;\n            }\n        }\n        return minIndex; /* === maxIndex */\n    };\n    ThumbnailView.prototype.backtrackBeforeAllVisibleElements = function (index, views, top) {\n        if (index < 2) {\n            return index;\n        }\n        var thumbnailElement = this.getThumbnailElement(index);\n        var pageTop = thumbnailElement.offsetTop + thumbnailElement.clientTop;\n        if (pageTop >= top) {\n            thumbnailElement = this.getThumbnailElement(index - 1);\n            pageTop = thumbnailElement.offsetTop + thumbnailElement.clientTop;\n        }\n        for (var i = index - 2; i >= 0; --i) {\n            thumbnailElement = this.getThumbnailElement(i);\n            if (thumbnailElement.offsetTop + thumbnailElement.clientTop + thumbnailElement.clientHeight <= pageTop) {\n                break;\n            }\n            index = i;\n        }\n        return index;\n    };\n    /**\n     * @param {number} index - It describes about the index value\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    ThumbnailView.prototype.getThumbnailElement = function (index) {\n        var thumbnailChild = this.thumbnailView.children[parseInt(index.toString(), 10)];\n        return thumbnailChild.children[0];\n    };\n    /**\n     * @param {number} index - It describes about the index value\n     * @private\n     * @returns {HTMLElement} - html element\n     */\n    ThumbnailView.prototype.getThumbnailLinkElement = function (index) {\n        var thumbnailChild = this.thumbnailView.children[parseInt(index.toString(), 10)];\n        return thumbnailChild;\n    };\n    /**\n     * @param {number} index - It describes about the index value\n     * @private\n     * @returns {HTMLImageElement} - html image element\n     */\n    ThumbnailView.prototype.getThumbnailImageElement = function (index) {\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_1__.isNullOrUndefined)(this.thumbnailView)) {\n            return null;\n        }\n        var thumbnailChild = this.thumbnailView.children[parseInt(index.toString(), 10)];\n        if (thumbnailChild) {\n            return thumbnailChild.children[0].children[0].children[0];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    ThumbnailView.prototype.destroy = function () {\n        this.clear();\n    };\n    /**\n     * @private\n     * @returns {string} - string\n     */\n    ThumbnailView.prototype.getModuleName = function () {\n        return 'ThumbnailView';\n    };\n    return ThumbnailView;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-pdfviewer/src/pdfviewer/thumbnail-view/thumbnail-view.js?");

/***/ })

}]);