"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-spreadsheet_src_spreadsheet_integrations_chart_js-f92c6b04"],{

/***/ "./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/integrations/chart.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/integrations/chart.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpreadsheetChart: () => (/* binding */ SpreadsheetChart)\n/* harmony export */ });\n/* harmony import */ var _workbook_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../workbook/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/index.js\");\n/* harmony import */ var _common_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/common/index.js\");\n/* harmony import */ var _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\");\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _workbook_common_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../workbook/common/index */ \"./node_modules/@syncfusion/ej2-spreadsheet/src/workbook/common/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Chart.Inject(_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.ColumnSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.LineSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.BarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AreaSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.StackingColumnSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.StackingLineSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.StackingBarSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.ScatterSeries);\n_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Chart.Inject(_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.StackingAreaSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Category, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Legend, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Tooltip, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.DataLabel);\n_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AccumulationChart.Inject(_syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.PieSeries, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AccumulationTooltip, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AccumulationDataLabel, _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AccumulationLegend);\n/**\n * Represents Chart support for Spreadsheet.\n */\nvar SpreadsheetChart = /** @class */ (function () {\n    /**\n     * Constructor for the Spreadsheet Chart module.\n     *\n     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Chart module.\n     */\n    function SpreadsheetChart(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * Adding event listener for success and failure\n     *\n     * @returns {void} - Adding event listener for success and failure\n     */\n    SpreadsheetChart.prototype.addEventListener = function () {\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.initiateChart, this.initiateChartHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshChartCellObj, this.refreshChartCellObj, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshChartCellModel, this.refreshChartCellModel, this);\n        this.parent.on(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.refreshChartCellOnInit, this.refreshChartCellObj, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.deleteChart, this.deleteChart, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.clearChartBorder, this.clearBorder, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.insertChart, this.insertChartHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.chartRangeSelection, this.chartRangeHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.chartDesignTab, this.chartDesignTabHandler, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.addChartEle, this.updateChartElement, this);\n        this.parent.on(_common_index__WEBPACK_IMPORTED_MODULE_1__.undoRedoForChartDesign, this.undoRedoForChartDesign, this);\n        this.parent.on(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.refreshChart, this.refreshChartData, this);\n    };\n    SpreadsheetChart.prototype.insertChartHandler = function (args) {\n        var _this = this;\n        var chartType = 'Column';\n        var markerVisible = false;\n        switch (args.id) {\n            case 'clusteredColumn':\n                chartType = 'Column';\n                break;\n            case 'stackedColumn':\n                chartType = 'StackingColumn';\n                break;\n            case 'stackedColumn100':\n                chartType = 'StackingColumn100';\n                break;\n            case 'clusteredBar':\n                chartType = 'Bar';\n                break;\n            case 'stackedBar':\n                chartType = 'StackingBar';\n                break;\n            case 'stackedBar100':\n                chartType = 'StackingBar100';\n                break;\n            case 'area':\n                chartType = 'Area';\n                break;\n            case 'stackedArea':\n                chartType = 'StackingArea';\n                break;\n            case 'stackedArea100':\n                chartType = 'StackingArea100';\n                break;\n            case 'line':\n                chartType = 'Line';\n                break;\n            case 'lineMarker':\n                chartType = 'Line';\n                markerVisible = true;\n                break;\n            case 'stackedLine':\n                chartType = 'StackingLine';\n                break;\n            case 'stackedLineMarker':\n                chartType = 'StackingLine';\n                markerVisible = true;\n                break;\n            case 'stackedLine100':\n                chartType = 'StackingLine100';\n                break;\n            case 'stackedLine100Marker':\n                chartType = 'StackingLine100';\n                markerVisible = true;\n                break;\n            case 'pie':\n                chartType = 'Pie';\n                break;\n            case 'doughnut':\n                chartType = 'Doughnut';\n                break;\n            //  case 'radar':\n            //     chartType = ;\n            //     break;\n            //  case 'radar_markers':\n            //     chartType = 'Column';\n            //     break;\n            case 'scatter':\n                chartType = 'Scatter';\n                break;\n        }\n        var chart = [{ type: chartType, markerSettings: { visible: markerVisible, isFilled: true } }];\n        if (args.isChart) {\n            this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.setChart, { chart: chart });\n            (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.getUpdateUsingRaf)(function () { return (0,_common_index__WEBPACK_IMPORTED_MODULE_1__.focus)(_this.parent.element); });\n        }\n        else {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.chartDesignTab, { chartType: chartType, triggerEvent: true, markerVisible: markerVisible });\n        }\n    };\n    SpreadsheetChart.prototype.chartRangeHandler = function () {\n        var overlayEle = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');\n        if (overlayEle) {\n            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;\n            var chartColl = this.parent.chartColl;\n            var chartCollLen = chartColl.length;\n            for (var idx = 0; idx < chartCollLen; idx++) {\n                var chartEle = document.getElementById(chartColl[idx].id);\n                if (overlayEle && chartEle && chartColl[idx].id === chartId) {\n                    this.initiateChartHandler({ option: chartColl[idx], isRefresh: true });\n                }\n            }\n        }\n    };\n    SpreadsheetChart.prototype.refreshChartData = function (args) {\n        if (!this.parent.chartColl || !this.parent.chartColl.length) {\n            return;\n        }\n        var chart;\n        var sheetName;\n        var range;\n        var insideRange;\n        var chartEle;\n        var chartObj;\n        for (var i = 0, len = this.parent.chartColl.length; i < len; i++) {\n            chart = this.parent.chartColl[i];\n            if (chart.range.includes('!')) {\n                sheetName = chart.range.substring(0, chart.range.lastIndexOf('!'));\n                if (this.parent.activeSheetIndex !== (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, sheetName)) {\n                    continue;\n                }\n                range = chart.range.substring(chart.range.lastIndexOf('!') + 1);\n            }\n            else {\n                range = chart.range;\n            }\n            if (args.viewportIndexes) {\n                for (var idx = 0; idx < args.viewportIndexes.length; idx++) {\n                    if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.checkRange)([args.viewportIndexes[idx]], range)) {\n                        insideRange = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                insideRange = args.range ? (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.checkRange)([args.range], range) : (args.showHide ? this.inRowColumnRange((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(range), args.rIdx, args.showHide) : (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.inRange)((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(range), args.rIdx, args.cIdx));\n            }\n            if (insideRange || (args.isSelectAll && !args.isRefreshChart)) {\n                chartEle = this.parent.element.querySelector('.' + chart.id);\n                if (chartEle) {\n                    chartObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartEle, 'chart') || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartEle, 'accumulationchart');\n                    if (chartObj) {\n                        chartObj.series = this.initiateChartHandler({ option: chart, isRefresh: true });\n                        chartObj.refresh();\n                    }\n                }\n            }\n        }\n    };\n    SpreadsheetChart.prototype.inRowColumnRange = function (range, index, showHide) {\n        return showHide === 'rows' ? index >= range[0] && index <= range[2] : index >= range[1] && index <= range[3];\n    };\n    SpreadsheetChart.prototype.refreshChartCellModel = function (args) {\n        for (var i = 0, len = args.prevChartIndexes.length; i < len; i++) {\n            var chart = args.prevChartIndexes[i].chart;\n            var prevRowIdx = args.prevChartIndexes[i].chartRowIdx;\n            var prevColIdx = args.prevChartIndexes[i].chartColIdx;\n            var currentRowIdx = args.currentChartIndexes[i].chartRowIdx;\n            var currentColIdx = args.currentChartIndexes[i].chartColIdx;\n            var eventArgs = {\n                prevTop: chart.top, prevLeft: chart.left, prevRowIdx: prevRowIdx, prevColIdx: prevColIdx,\n                prevHeight: chart.height, prevWidth: chart.width, currentTop: chart.top, currentLeft: chart.left,\n                currentRowIdx: currentRowIdx, currentColIdx: currentColIdx, currentHeight: chart.height,\n                currentWidth: chart.width, id: chart.id, requestType: 'chartRefreshOnFilter'\n            };\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshChartCellObj, eventArgs);\n        }\n    };\n    SpreadsheetChart.prototype.refreshChartCellObj = function (args) {\n        var sheetIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(args.sheetIdx) ? this.parent.activeSheetIndex : args.sheetIdx;\n        var sheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, sheetIndex);\n        var prevCellObj = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(args.prevRowIdx, args.prevColIdx, sheet);\n        var currCellObj = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(args.currentRowIdx, args.currentColIdx, sheet);\n        var prevCellChart = prevCellObj ? prevCellObj.chart : [];\n        var prevChartObj;\n        var currChartObj;\n        var prevCellChartLen = (prevCellChart && prevCellChart.length) ? prevCellChart.length : 0;\n        if (prevCellChartLen) {\n            for (var i = 0; i < prevCellChartLen; i++) {\n                if (prevCellChart[i].id === args.id.split('_overlay')[0]) {\n                    prevChartObj = prevCellChart[i];\n                    prevChartObj.height = args.currentHeight;\n                    prevChartObj.width = args.currentWidth;\n                    prevChartObj.top = args.currentTop;\n                    prevChartObj.left = args.currentLeft;\n                    prevCellChart.splice(i, 1);\n                    i--;\n                    prevCellChartLen--;\n                    for (var idx = 0, chartCollLen = this.parent.chartColl.length; idx < chartCollLen; idx++) {\n                        if (prevChartObj.id === this.parent.chartColl[idx].id) {\n                            prevChartObj.height = args.currentHeight;\n                            this.parent.chartColl[idx].width = args.currentWidth;\n                            this.parent.chartColl[idx].top = args.currentTop;\n                            this.parent.chartColl[idx].left = args.currentLeft;\n                        }\n                    }\n                }\n            }\n            if (currCellObj && currCellObj.chart) {\n                currChartObj = currCellObj.chart;\n                if (prevChartObj) {\n                    currChartObj.push(prevChartObj);\n                }\n            }\n            if (currChartObj) {\n                (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(args.currentRowIdx, args.currentColIdx, sheet, { chart: currChartObj }, true);\n            }\n            else {\n                (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(args.currentRowIdx, args.currentColIdx, sheet, { chart: [prevChartObj] }, true);\n            }\n            if (args.requestType === 'chartRefresh' && !args.isUndoRedo) {\n                var eventArgs = {\n                    requestType: 'chartRefresh', currentRowIdx: args.currentRowIdx, currentColIdx: args.currentColIdx,\n                    currentWidth: args.currentWidth, prevHeight: args.prevHeight, prevWidth: args.prevWidth,\n                    prevRowIdx: args.prevRowIdx, prevColIdx: args.prevColIdx, prevTop: args.prevTop, prevLeft: args.prevLeft,\n                    currentTop: args.currentTop, currentLeft: args.currentLeft, currentHeight: args.currentHeight,\n                    id: args.id, sheetIdx: sheetIndex\n                };\n                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'chartRefresh' });\n            }\n        }\n    };\n    SpreadsheetChart.prototype.processChartRange = function (range, dataSheetIdx, opt) {\n        var _this = this;\n        var xRange;\n        var yRange;\n        var lRange;\n        var minr = range[0];\n        var minc = range[1];\n        var isStringSeries = false;\n        var maxr = range[2];\n        var maxc = range[3];\n        var isSingleRow = minr === maxr;\n        var isSingleCol = minc === maxc;\n        var isDateTimeFormat;\n        var isDateTime;\n        var sheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, dataSheetIdx);\n        var autoDetectFormatFn = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getAutoDetectFormatParser)(this.parent);\n        var getPropertyValue = function (rIdx, cIdx, isFirstCol, checkDateTime) {\n            var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(rIdx, cIdx, sheet);\n            if (cell) {\n                if (cell.formula && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cell.value)) {\n                    _this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.calculateFormula, { cell: cell, rowIdx: rIdx, colIdx: cIdx, sheetIndex: dataSheetIdx });\n                }\n                var value = void 0;\n                if (cell.format) {\n                    var formatObj = { value: cell.value, format: cell.format, formattedText: cell.value, cell: cell,\n                        rowIndex: rIdx, colIndex: cIdx };\n                    _this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.getFormattedCellObject, formatObj);\n                    var isNum = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value);\n                    if (isNum && !(0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isCustomDateTime)(cell.format, true, null, true)) {\n                        value = Number(cell.value);\n                    }\n                    else {\n                        if (checkDateTime && isNum) {\n                            isDateTimeFormat = true;\n                        }\n                        else if (isFirstCol && isNum) {\n                            isDateTime = true;\n                        }\n                        value = formatObj.formattedText && formatObj.formattedText.toString();\n                    }\n                }\n                else {\n                    autoDetectFormatFn(cell);\n                    value = cell.value;\n                }\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(value) ? '' : value;\n            }\n            else {\n                return '';\n            }\n        };\n        var trVal = sheet ? getPropertyValue(minr, maxc, false, true) : '';\n        var blVal = sheet ? getPropertyValue(maxr, minc, true) : '';\n        var tlVal = sheet ? getPropertyValue(minr, minc, true) : '';\n        if (!(0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(blVal) || !tlVal) {\n            isStringSeries = true;\n        }\n        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(tlVal) || (opt.type === 'Scatter' && !opt.isSeriesInRows)) && !isSingleRow && !isSingleCol) {\n            xRange = [minr + 1, minc, maxr, minc];\n            yRange = [minr + 1, minc + 1, maxr, maxc];\n            lRange = [minr, minc + 1, minr, maxc];\n        }\n        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(blVal) && isStringSeries && !isSingleRow && !isSingleCol && !isDateTimeFormat) {\n            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(trVal) && (!(0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(trVal) || !tlVal)) {\n                xRange = [minr + 1, minc, maxr, minc];\n                yRange = [minr + 1, minc + 1, maxr, maxc];\n                lRange = [minr, minc + 1, minr, maxc];\n            }\n            else {\n                xRange = [minr, minc, maxr, minc];\n                yRange = [minr, minc + 1, maxr, maxc];\n            }\n        }\n        else {\n            yRange = [minr, minc, maxr, maxc];\n            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(trVal) && !(0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(trVal) && !isDateTimeFormat)) {\n                lRange = [minr, minc, minr, maxc];\n                if (!isSingleRow) {\n                    yRange[0] = yRange[0] + 1;\n                }\n            }\n            else if ((isSingleRow || isSingleCol) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(tlVal)) {\n                lRange = [minr, minc, minr, maxc];\n                if (isSingleRow) {\n                    yRange[1] = yRange[1] + 1;\n                    lRange[3] = lRange[1];\n                }\n                else {\n                    yRange[0] = yRange[0] + 1;\n                }\n            }\n        }\n        return { xRange: xRange, yRange: yRange, lRange: lRange, isStringSeries: isStringSeries, isDateTime: isDateTime };\n    };\n    SpreadsheetChart.prototype.getRangeData = function (options) {\n        var sheet = options.sheet;\n        if (!options.range) {\n            options.range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(sheet.selectedRange);\n        }\n        else if (typeof (options.range) === 'string') {\n            options.range = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(options.range);\n        }\n        var rangeData = [];\n        var rObj;\n        var cIdx;\n        var formatArgs;\n        var rIdx = options.range[0];\n        var autoDetectFormatFn = options.isYvalue && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getAutoDetectFormatParser)(this.parent);\n        while (rIdx <= options.range[2]) {\n            if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isHiddenRow)(sheet, rIdx)) {\n                rIdx++;\n                continue;\n            }\n            cIdx = options.range[1];\n            while (cIdx <= options.range[3]) {\n                if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isHiddenCol)(sheet, cIdx)) {\n                    cIdx++;\n                    continue;\n                }\n                var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(rIdx, cIdx, sheet, false, true);\n                if (cell.formula && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cell.value)) {\n                    this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.calculateFormula, { cell: cell, rowIdx: rIdx, colIdx: cIdx, sheetIndex: options.sheetIdx });\n                }\n                if (options.isYvalue) {\n                    autoDetectFormatFn(cell);\n                }\n                rObj = { value: cell.value || (cell.value === 0 ? 0 : null) };\n                if (cell.format) {\n                    formatArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell, skipFormatCheck: true };\n                    this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.getFormattedCellObject, formatArgs);\n                    if (options.isYvalue) {\n                        if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value)) {\n                            rObj.value = Number(cell.value);\n                            rObj.displayText = formatArgs.formattedText ? formatArgs.formattedText.toString() : '';\n                        }\n                        else {\n                            rObj.displayText = rObj.value === null ? '' : this.parent.getDisplayText({ format: cell.format, value: '0' });\n                            rObj.value = 0;\n                        }\n                    }\n                    else {\n                        if (options.isScatter && !options.isDateTime && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(cell.value)) {\n                            rObj.value = Number(cell.value);\n                        }\n                        else {\n                            rObj.value = formatArgs.formattedText ? formatArgs.formattedText.toString() : null;\n                        }\n                    }\n                }\n                else if (options.isYvalue) {\n                    if ((0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(rObj.value)) {\n                        rObj.displayText = rObj.value.toString();\n                        rObj.value = Number(rObj.value);\n                    }\n                    else {\n                        rObj.displayText = rObj.value === null ? '' : '0';\n                        rObj.value = 0;\n                    }\n                }\n                rangeData.push(rObj);\n                cIdx++;\n            }\n            rIdx++;\n        }\n        return rangeData;\n    };\n    SpreadsheetChart.prototype.toArrayData = function (args) {\n        var prop = 'value';\n        var obj;\n        var i = 0;\n        var temp = [];\n        var len = args.length;\n        while (i < len) {\n            obj = args[i];\n            if (Object.keys(obj).length) {\n                if (prop in obj) {\n                    temp.push(obj[\"\" + prop]);\n                }\n            }\n            else {\n                temp.push('');\n            }\n            i++;\n        }\n        return temp;\n    };\n    SpreadsheetChart.prototype.getVirtualXValues = function (limit) {\n        var i = 1;\n        var arr = [];\n        while (i < limit) {\n            arr.push(i.toString());\n            i++;\n        }\n        return arr;\n    };\n    SpreadsheetChart.prototype.processChartSeries = function (options, sheetIndex, xRange, yRange, lRange, isDateTime) {\n        options = options || {};\n        var seriesName;\n        var dataLabel = { name: 'displayText' };\n        var xValue;\n        var lValue;\n        var diff;\n        var pArr;\n        var pObj = {};\n        var j;\n        var i = 0;\n        var yInc = 0;\n        var isPrint = this.parent.isPrintingProcessing;\n        var sArr = [];\n        sheetIndex = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(sheetIndex) ? this.parent.activeSheetIndex : sheetIndex;\n        var sheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, sheetIndex);\n        var isScatter = options && options.type === 'Scatter';\n        var yValue = this.getRangeData({ range: yRange, sheet: sheet, isYvalue: true, sheetIdx: sheetIndex });\n        var rDiff = ((yRange[2] - yRange[0]) + 1) - this.parent.hiddenCount(yRange[0], yRange[2], 'rows', sheet);\n        var cDiff = ((yRange[3] - yRange[1]) + 1) - this.parent.hiddenCount(yRange[1], yRange[3], 'columns', sheet);\n        if (options.isSeriesInRows) {\n            xValue = lRange ? this.toArrayData(this.getRangeData({ range: lRange, sheet: sheet, isScatter: isScatter,\n                isDateTime: isDateTime })) : this.getVirtualXValues(cDiff + 1);\n            if (xRange) {\n                lValue = this.toArrayData(this.getRangeData({ range: xRange, sheet: sheet }));\n            }\n            diff = rDiff;\n        }\n        else {\n            xValue = xRange ? this.toArrayData(this.getRangeData({ range: xRange, sheet: sheet, isScatter: isScatter,\n                isDateTime: isDateTime })) : this.getVirtualXValues(rDiff + 1);\n            if (lRange) {\n                lValue = this.toArrayData(this.getRangeData({ range: lRange, sheet: sheet }));\n            }\n            diff = cDiff;\n        }\n        var len = xValue.length;\n        var inc = options.isSeriesInRows ? 1 : diff;\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(options.dataLabelSettings)) {\n            dataLabel.visible = options.dataLabelSettings.visible;\n            dataLabel.position = options.dataLabelSettings.position;\n        }\n        while (i < diff) {\n            j = 0;\n            pArr = [];\n            yInc = options.isSeriesInRows ? yInc : i;\n            while (j < len) {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(xValue[j])) {\n                    xValue[j] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getUniqueID)('spread-chart-empty-label-');\n                }\n                pArr.push({ x: xValue[j], y: yValue[yInc].value, displayText: yValue[yInc].displayText });\n                yInc += inc;\n                j++;\n            }\n            if (lValue && lValue.length > 0) {\n                seriesName = lValue[i];\n            }\n            else {\n                seriesName = options.type === 'Scatter' ? ('series' + (i + 1)) : ('series' + i);\n            }\n            seriesName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(seriesName) ? '' : seriesName.toString();\n            if (options.type) {\n                var type = options.type;\n                if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {\n                    pObj = {\n                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName,\n                        animation: { enable: !isPrint }, tooltipMappingName: 'displayText',\n                        marker: options.markerSettings ? { visible: options.markerSettings.visible, width: options.markerSettings.size,\n                            height: options.markerSettings.size, shape: options.markerSettings.shape, dataLabel: dataLabel,\n                            isFilled: options.markerSettings.isFilled, border: options.markerSettings.border,\n                            fill: options.markerSettings.isFilled ? options.markerSettings.fill : null } : { dataLabel: dataLabel }\n                    };\n                }\n                else if (type === 'Scatter') {\n                    pObj = {\n                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName,\n                        tooltipMappingName: 'displayText', animation: { enable: !isPrint },\n                        marker: { visible: false, width: 12, height: 12, shape: 'Circle', dataLabel: dataLabel }\n                    };\n                }\n                else if (type === 'Pie' || type === 'Doughnut') {\n                    pObj = {\n                        dataSource: pArr, radius: '100%', xName: 'x', yName: 'y', innerRadius: options.type === 'Pie' ? '0%' : '40%',\n                        dataLabel: { visible: !!dataLabel.visible, position: dataLabel.position === 'Outer' ? 'Outside' : 'Inside',\n                            name: 'displayText', font: { fontWeight: '600' } },\n                        animation: { enable: !isPrint }, tooltipMappingName: 'displayText'\n                    };\n                }\n                else {\n                    pObj = {\n                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', animation: { enable: !isPrint },\n                        name: seriesName, marker: { dataLabel: dataLabel }, tooltipMappingName: 'displayText'\n                    };\n                }\n            }\n            sArr.push(pObj);\n            i++;\n        }\n        var retVal;\n        if (options.type) {\n            retVal = {\n                series: sArr, xRange: options.isSeriesInRows ? lRange : xRange,\n                yRange: yRange, lRange: options.isSeriesInRows ? xRange : lRange\n            };\n        }\n        return retVal;\n    };\n    SpreadsheetChart.prototype.getAxisFormat = function (yRange) {\n        var format = '';\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(yRange)) {\n            var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(yRange[0], yRange[1], this.parent.getActiveSheet());\n            if (cell && cell.format) {\n                format = cell.format;\n            }\n        }\n        return format;\n    };\n    SpreadsheetChart.prototype.focusChartRange = function (xRange, yRange, lRange) {\n        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];\n        this.clearBorder();\n        var range;\n        var sheet = this.parent.getActiveSheet();\n        var isFreezePane = !!(sheet.frozenRows || sheet.frozenColumns);\n        if (lRange) {\n            if (isFreezePane) {\n                range = lRange;\n            }\n            else {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.focusBorder, {\n                    startcell: { rowIndex: lRange[0], colIndex: lRange[1] },\n                    endcell: { rowIndex: lRange[2], colIndex: lRange[3] }, classes: [border[0], border[1]]\n                });\n            }\n        }\n        if (xRange) {\n            if (isFreezePane) {\n                if (range) {\n                    range[0] = Math.min(lRange[0], xRange[0]);\n                    range[1] = Math.min(lRange[1], xRange[1]);\n                    range[2] = Math.max(lRange[2], xRange[2]);\n                    range[3] = Math.max(lRange[3], xRange[3]);\n                }\n                else {\n                    range = xRange;\n                }\n            }\n            else {\n                this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.focusBorder, {\n                    startcell: { rowIndex: xRange[0], colIndex: xRange[1] },\n                    endcell: { rowIndex: xRange[2], colIndex: xRange[3] }, classes: [border[2], border[3]]\n                });\n            }\n        }\n        if (isFreezePane && range) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.focusBorder, {\n                startcell: { rowIndex: Math.min(range[0], yRange[0]), colIndex: Math.min(range[1], yRange[1]) },\n                endcell: {\n                    rowIndex: Math.max(range[2], yRange[2]), colIndex: Math.max(range[3], yRange[3])\n                }, classes: [border[4], border[5]]\n            });\n        }\n        else {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.focusBorder, {\n                startcell: { rowIndex: yRange[0], colIndex: yRange[1] },\n                endcell: { rowIndex: yRange[2], colIndex: yRange[3] }, classes: [border[4], border[5]]\n            });\n        }\n    };\n    SpreadsheetChart.prototype.clearBorder = function () {\n        var sheet = this.parent.getActiveSheet();\n        if (sheet.frozenColumns || sheet.frozenRows) {\n            var chartIndicator = [].slice.call(this.parent.element.getElementsByClassName('e-chart-range'));\n            chartIndicator.forEach(function (indicator) { (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.detach)(indicator); });\n            return;\n        }\n        var mainCont = this.parent.getMainContent();\n        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];\n        for (var borderIdx = 0, borderLen = border.length; borderIdx < borderLen; borderIdx++) {\n            var eleColl = mainCont.querySelectorAll('.' + border[borderIdx]);\n            for (var tdIdx = 0, eleCollLen = eleColl.length; tdIdx < eleCollLen; tdIdx++) {\n                var td = eleColl[tdIdx];\n                td.classList.remove(border[borderIdx]);\n            }\n        }\n    };\n    SpreadsheetChart.prototype.initiateChartHandler = function (argsOpt) {\n        var _this = this;\n        var chart = argsOpt.option;\n        var isRangeSelect = true;\n        isRangeSelect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(argsOpt.isInitCell) ? true : !argsOpt.isInitCell;\n        argsOpt.triggerEvent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(argsOpt.triggerEvent) ? true : argsOpt.triggerEvent;\n        var seriesModel;\n        argsOpt.isRefresh = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(argsOpt.isRefresh) ? false : argsOpt.isRefresh;\n        var sheetIdx = (chart.range && chart.range.lastIndexOf('!') > 0) ?\n            (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, chart.range.substring(0, chart.range.lastIndexOf('!'))) : this.parent.activeSheetIndex;\n        var sheet = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, sheetIdx);\n        var range = chart.range ? chart.range : this.parent.getActiveSheet().selectedRange;\n        var rangeIdx = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(range);\n        var options = {};\n        var isRowLesser;\n        var eventArgs;\n        if (!this.parent.allowChart && sheet.isProtected) {\n            return seriesModel;\n        }\n        var args = {\n            sheetIndex: sheetIdx, reqType: 'shape', type: 'actionBegin', shapeType: 'chart',\n            action: 'create', options: chart, range: range, operation: 'create'\n        };\n        options = args.options;\n        range = args.range;\n        options = options || {};\n        if (rangeIdx.length > 0 && !argsOpt.isRefresh && isRangeSelect) {\n            var rDiff = rangeIdx[2] - rangeIdx[0];\n            var cDiff = rangeIdx[3] - rangeIdx[1];\n            if (rDiff < cDiff) {\n                isRowLesser = true;\n            }\n        }\n        options.isSeriesInRows = isRowLesser ? true : options.isSeriesInRows ? options.isSeriesInRows : false;\n        argsOpt.dataSheetIdx = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(argsOpt.dataSheetIdx) ? sheetIdx : argsOpt.dataSheetIdx;\n        var chartRange = this.processChartRange(rangeIdx, argsOpt.dataSheetIdx, options);\n        var xRange = chartRange.xRange;\n        var yRange = chartRange.yRange;\n        var lRange = chartRange.lRange;\n        if (sheetIdx === this.parent.activeSheetIndex && isRangeSelect) {\n            this.focusChartRange(xRange, yRange, lRange);\n        }\n        if (argsOpt.triggerEvent && !argsOpt.isRefresh) {\n            eventArgs = {\n                type: chart.type, theme: chart.theme, isSeriesInRows: chart.isSeriesInRows, range: chart.range,\n                markerSettings: options.markerSettings, dataLabelSettings: options.dataLabelSettings, title: options.title,\n                legendSettings: options.legendSettings, primaryXAxis: options.primaryXAxis, primaryYAxis: options.primaryYAxis,\n                id: chart.id, height: chart.height, width: chart.width, posRange: argsOpt.range, isInitCell: argsOpt.isInitCell,\n                cancel: false, top: chart.top, left: chart.left\n            };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.beginAction, { eventArgs: eventArgs, action: 'beforeInsertChart' });\n            if (eventArgs.cancel) {\n                return [];\n            }\n            chart.type = eventArgs.type;\n            chart.theme = eventArgs.theme;\n            chart.isSeriesInRows = eventArgs.isSeriesInRows;\n            chart.markerSettings = eventArgs.markerSettings;\n            chart.range = eventArgs.range;\n            chart.id = eventArgs.id;\n            chart.height = eventArgs.height;\n            chart.width = eventArgs.width;\n        }\n        var chartOptions = this.processChartSeries(options, argsOpt.dataSheetIdx, xRange, yRange, lRange, chartRange.isDateTime);\n        var primaryXAxis = {\n            majorGridLines: chart.primaryXAxis && chart.primaryXAxis.majorGridLines &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.primaryXAxis.majorGridLines.width) ?\n                { width: chart.primaryXAxis.majorGridLines.width } : { width: 0 },\n            minorGridLines: chart.primaryXAxis && chart.primaryXAxis.minorGridLines &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.primaryXAxis.minorGridLines.width) ?\n                { width: chart.primaryXAxis.minorGridLines.width } : { width: 0 },\n            minorTicksPerInterval: chart.primaryXAxis && chart.primaryXAxis.minorGridLines && chart.primaryXAxis.minorGridLines.width > 0 ?\n                5 : 0,\n            lineStyle: { width: 0 },\n            valueType: chart.type === 'Scatter' && !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Double' : 'Category',\n            rangePadding: chart.type === 'Scatter' && !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Round' : 'Auto',\n            visible: chart.primaryXAxis ? chart.primaryXAxis.visible : true,\n            title: chart.primaryXAxis ? chart.primaryXAxis.title : '',\n            edgeLabelPlacement: 'Shift'\n        };\n        var primaryYAxis = {\n            lineStyle: { width: 0 },\n            majorGridLines: chart.primaryYAxis && chart.primaryYAxis.majorGridLines &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.primaryYAxis.majorGridLines.width) ?\n                { width: chart.primaryYAxis.majorGridLines.width } : { width: 1 },\n            minorGridLines: chart.primaryYAxis && chart.primaryYAxis.minorGridLines &&\n                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.primaryYAxis.minorGridLines.width) ?\n                { width: chart.primaryYAxis.minorGridLines.width } : { width: 0 },\n            minorTicksPerInterval: chart.primaryYAxis && chart.primaryYAxis.minorGridLines && chart.primaryYAxis.minorGridLines.width > 0 ?\n                5 : 0,\n            visible: chart.primaryYAxis ? chart.primaryYAxis.visible : true,\n            title: chart.primaryYAxis ? chart.primaryYAxis.title : '',\n            edgeLabelPlacement: 'Shift'\n        };\n        if (argsOpt.isRefresh) {\n            if (argsOpt.isSwitchRowColumn && chart.type === 'Scatter') {\n                var chartObj = this.parent.element.querySelector('.' + chart.id);\n                if (chartObj) {\n                    var chartComp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartObj, 'chart');\n                    chartComp.primaryXAxis.valueType = !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Double' : 'Category';\n                }\n            }\n            return chartOptions.series;\n        }\n        var id = chart.id + '_overlay';\n        var overlayObj = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_1__.overlay);\n        var eleRange = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(argsOpt.isInitCell) && argsOpt.isInitCell ? argsOpt.range : range;\n        var overlayProps = overlayObj.insertOverlayElement(id, eleRange, argsOpt.isChangeChartType ?\n            this.parent.activeSheetIndex : (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndexFromAddress)(this.parent, eleRange));\n        overlayProps.element.classList.add('e-datavisualization-chart');\n        overlayProps.element.style.width = chart.width + 'px';\n        overlayProps.element.style.height = chart.height + 'px';\n        if (sheet && (sheet.frozenRows || sheet.frozenColumns)) {\n            overlayObj.adjustFreezePaneSize(chart, overlayProps.element, eleRange);\n        }\n        else {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.top)) {\n                chart.top = overlayProps.top;\n            }\n            else {\n                overlayProps.element.style.top = Number((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.addDPRValue)(chart.top).toFixed(2)) + 'px';\n            }\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.left)) {\n                chart.left = overlayProps.left;\n            }\n            else {\n                overlayProps.element.style.left = Number((0,_common_index__WEBPACK_IMPORTED_MODULE_1__.addDPRValue)(chart.left).toFixed(2)) + 'px';\n            }\n        }\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.overlayEleSize, { height: chart.height, width: chart.width });\n        var legendSettings = (chart.type === 'Pie' || chart.type === 'Doughnut') ? { position: 'Bottom', visible: true } : {};\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.legendSettings)) {\n            legendSettings.visible = chart.legendSettings.visible;\n            legendSettings.position = chart.legendSettings.position;\n        }\n        var chartContent = this.parent.createElement('div', {\n            id: chart.id, className: chart.id\n        });\n        var theme = chart.theme || 'Material';\n        var primaryYAxisFormat = this.getAxisFormat(yRange);\n        var primaryXAxisFormat = this.getAxisFormat(xRange);\n        var borderWidth = Math.round(parseFloat(getComputedStyle(overlayProps.element).borderWidth)) * 2;\n        var height = (parseFloat(overlayProps.element.style.height) - (isNaN(borderWidth) ? 0 : borderWidth)) + 'px';\n        if (chart.type !== 'Pie' && chart.type !== 'Doughnut') {\n            this.chart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.Chart({\n                primaryXAxis: primaryXAxis,\n                primaryYAxis: primaryYAxis,\n                background: this.getThemeBgColor(theme),\n                chartArea: { border: { width: 0 } },\n                title: chart.title,\n                legendSettings: legendSettings,\n                theme: theme,\n                series: chartOptions.series,\n                tooltip: { enable: true, format: '${point.x} : <b>${point.tooltip}</b>' },\n                width: overlayProps.element.style.width,\n                height: height,\n                enableRtl: this.parent.enableRtl,\n                load: function (args) {\n                    args.chart.theme = chart.theme || 'Material';\n                },\n                beforeResize: function (args) {\n                    args.cancelResizedEvent = true; // This is for cancel the resized event.\n                },\n                axisLabelRender: function (args) {\n                    if (args.axis.name === 'primaryYAxis' && primaryYAxisFormat && !chart.type.includes('100') &&\n                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.value) && _this.parent) {\n                        args.text = _this.parent.getDisplayText({ format: primaryYAxisFormat, value: args.value.toString() });\n                    }\n                    else if (args.axis.name === 'primaryXAxis' && args.text.startsWith('spread-chart-empty-label-')) {\n                        args.text = '';\n                    }\n                    if (args.axis.name === 'primaryXAxis' && chart.type === 'Scatter' && !chartRange.isDateTime) {\n                        if (args.axis.labels.length > 0 && !(0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(args.text)) {\n                            args.text = (args.axis.labels.indexOf(args.text) + 1).toString();\n                        }\n                        else if (primaryXAxisFormat && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.value)) {\n                            args.text = _this.parent.getDisplayText({ format: primaryXAxisFormat, value: args.value.toString() });\n                        }\n                    }\n                }\n            });\n            this.chart.appendTo(chartContent);\n        }\n        else {\n            this.chart = new _syncfusion_ej2_charts__WEBPACK_IMPORTED_MODULE_2__.AccumulationChart({\n                title: chart.title,\n                legendSettings: legendSettings,\n                theme: theme,\n                background: this.getThemeBgColor(theme),\n                series: chartOptions.series,\n                width: overlayProps.element.style.width,\n                height: height,\n                center: { x: '50%', y: '50%' },\n                tooltip: { enable: true, format: '${point.x} : <b>${point.tooltip}</b>' },\n                enableSmartLabels: true,\n                enableAnimation: true,\n                enableRtl: this.parent.enableRtl,\n                load: function (args) {\n                    args.chart.theme = chart.theme || 'Material';\n                },\n                beforeResize: function (args) {\n                    args.cancelResizedEvent = true; // This is for cancel the resized event.\n                }\n            });\n            this.chart.appendTo(chartContent);\n        }\n        overlayProps.element.appendChild(chartContent);\n        if (overlayProps.element.classList.contains('e-ss-overlay-active') && !this.parent.isPrintingProcessing) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.insertDesignChart, { id: overlayProps.element.id });\n        }\n        if (argsOpt.triggerEvent) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.completeAction, { eventArgs: eventArgs, action: 'insertChart' });\n        }\n        return seriesModel;\n    };\n    SpreadsheetChart.prototype.deleteChart = function (args) {\n        this.clearBorder();\n        var chartElements = null;\n        var sheet = this.parent.getActiveSheet();\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.id)) {\n            chartElements = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');\n            args.id = chartElements ? chartElements.getElementsByClassName('e-control')[0].id : null;\n        }\n        else {\n            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';\n            chartElements = document.getElementById(args.id);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(args.id)) {\n            return;\n        }\n        else {\n            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';\n        }\n        var rowIdx;\n        var colIdx;\n        var prevCellChart;\n        var isRemoveEle = false;\n        var chartObj;\n        for (var i = 0, chartCollLen = this.parent.chartColl.length; i < chartCollLen; i++) {\n            if (this.parent.chartColl[i].id === args.id.split('_overlay')[0]) {\n                chartObj = this.parent.chartColl[i];\n                break;\n            }\n        }\n        var eventArgs = {\n            id: chartObj.id, range: chartObj.range, type: chartObj.type, markerSettings: chartObj.markerSettings,\n            dataLabelSettings: chartObj.dataLabelSettings, title: chartObj.title, legendSettings: chartObj.legendSettings,\n            primaryXAxis: chartObj.primaryXAxis, primaryYAxis: chartObj.primaryYAxis, theme: chartObj.theme,\n            height: chartObj.height, width: chartObj.width, isSeriesInRows: chartObj.isSeriesInRows,\n            isInitCell: true, posRange: null, top: chartObj.top, left: chartObj.left, cancel: false\n        };\n        if (chartElements) {\n            var chartTop = void 0;\n            var chartleft = void 0;\n            if (sheet.frozenRows || sheet.frozenColumns) {\n                var clientRect = chartElements.getBoundingClientRect();\n                chartTop = { clientY: clientRect.top };\n                chartleft = { clientX: clientRect.left };\n                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {\n                    chartTop.target = this.parent.getColumnHeaderContent();\n                }\n                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {\n                    chartleft.target = this.parent.getRowHeaderTable();\n                }\n            }\n            else {\n                chartTop = { clientY: parseFloat(chartElements.style.top), isImage: true };\n                chartleft = { clientX: parseFloat(chartElements.style.left), isImage: true };\n            }\n            this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.deleteChartColl, { id: args.id });\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getRowIdxFromClientY, chartTop);\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getColIdxFromClientX, chartleft);\n            isRemoveEle = true;\n            rowIdx = chartTop.clientY;\n            colIdx = chartleft.clientX;\n            sheet = this.parent.sheets[this.parent.activeSheetIndex];\n        }\n        else {\n            this.parent.notify(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.deleteChartColl, { id: args.id });\n            var lastIndex = args.range ? args.range.lastIndexOf('!') : 0;\n            var sheetIndex = args.range && lastIndex > 0 ?\n                (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheetIndex)(this.parent, args.range.substring(0, lastIndex)) : this.parent.activeSheetIndex;\n            var rangeVal = args.range ? lastIndex > 0 ? args.range.substring(lastIndex + 1) : args.range :\n                this.parent.getActiveSheet().selectedRange;\n            var index = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getRangeIndexes)(rangeVal);\n            rowIdx = index[0];\n            colIdx = index[1];\n            sheet = this.parent.sheets[sheetIndex];\n        }\n        var cellObj = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(rowIdx, colIdx, sheet);\n        if (cellObj) {\n            prevCellChart = cellObj.chart;\n        }\n        var chartLength = prevCellChart ? prevCellChart.length : null;\n        for (var i = 0; i < chartLength; i++) {\n            if (args.id === prevCellChart[i].id + '_overlay') {\n                prevCellChart.splice(i, 1);\n                chartLength = prevCellChart.length;\n            }\n        }\n        if (isRemoveEle) {\n            document.getElementById(args.id).remove();\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.removeDesignChart, {});\n        }\n        (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.setCell)(rowIdx, colIdx, sheet, { chart: prevCellChart }, true);\n        eventArgs.posRange = sheet.name + '!' + (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(rowIdx, colIdx);\n        if (!args.isUndoRedo) {\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.completeAction, { eventArgs: eventArgs, action: 'deleteChart', isClearAction: args.clearAction });\n        }\n    };\n    SpreadsheetChart.prototype.updateChartModel = function (eleId, chartComp, currCellObj, chartCollId, isAccumulationChart) {\n        var accumulationChartComp = chartComp;\n        chartComp = chartComp;\n        var chartId = this.parent.chartColl[chartCollId].id;\n        if (isAccumulationChart &&\n            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',\n                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(eleId) > -1) {\n            return;\n        }\n        for (var idx = 0, chartsCount = currCellObj.chart.length; idx < chartsCount; idx++) {\n            if (currCellObj.chart[idx].id === chartId) {\n                switch (eleId) {\n                    case 'PHAxes':\n                    case 'PHAxisTitle':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryXAxis)) {\n                            currCellObj.chart[idx].primaryXAxis = {};\n                            this.parent.chartColl[chartCollId].primaryXAxis = {};\n                        }\n                        if (eleId === 'PHAxes') {\n                            currCellObj.chart[idx].primaryXAxis.visible = chartComp.primaryXAxis.visible;\n                            this.parent.chartColl[chartCollId].primaryXAxis.visible = chartComp.primaryXAxis.visible;\n                        }\n                        else if (eleId === 'PHAxisTitle') {\n                            currCellObj.chart[idx].primaryXAxis.title = chartComp.primaryXAxis.title;\n                            this.parent.chartColl[chartCollId].primaryXAxis.title = chartComp.primaryXAxis.title;\n                        }\n                        break;\n                    case 'PVAxes':\n                    case 'PVAxisTitle':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryYAxis)) {\n                            currCellObj.chart[idx].primaryYAxis = {};\n                            this.parent.chartColl[chartCollId].primaryYAxis = {};\n                        }\n                        if (eleId === 'PVAxes') {\n                            currCellObj.chart[idx].primaryYAxis.visible = chartComp.primaryYAxis.visible;\n                            this.parent.chartColl[chartCollId].primaryYAxis.visible = chartComp.primaryYAxis.visible;\n                        }\n                        else if (eleId === 'PVAxisTitle') {\n                            currCellObj.chart[idx].primaryYAxis.title = chartComp.primaryYAxis.title;\n                            this.parent.chartColl[chartCollId].primaryYAxis.title = chartComp.primaryYAxis.title;\n                        }\n                        break;\n                    case 'ChartTitleNone':\n                    case 'ChartTitleAbove':\n                        currCellObj.chart[idx].title = chartComp.title;\n                        this.parent.chartColl[chartCollId].title = chartComp.title;\n                        break;\n                    case 'DLNone':\n                    case 'DLCenter':\n                    case 'DLInsideend':\n                    case 'DLInsidebase':\n                    case 'DLOutsideend':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].dataLabelSettings)) {\n                            currCellObj.chart[idx].dataLabelSettings = {};\n                            this.parent.chartColl[chartCollId].dataLabelSettings = {};\n                        }\n                        if (eleId === 'DLNone') {\n                            currCellObj.chart[idx].dataLabelSettings.visible = false;\n                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = false;\n                        }\n                        else {\n                            currCellObj.chart[idx].dataLabelSettings.visible = true;\n                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = true;\n                            var position = void 0;\n                            if (isAccumulationChart) {\n                                position = accumulationChartComp.series[0].dataLabel.position === 'Outside' ? 'Outer' : 'Middle';\n                            }\n                            else {\n                                position = chartComp.series[0].marker.dataLabel.position;\n                            }\n                            currCellObj.chart[idx].dataLabelSettings.position = position;\n                            this.parent.chartColl[chartCollId].dataLabelSettings.position = position;\n                        }\n                        break;\n                    case 'GLMajorHorizontal':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryYAxis)) {\n                            currCellObj.chart[idx].primaryYAxis = {};\n                            this.parent.chartColl[chartCollId].primaryYAxis = {};\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryYAxis.majorGridLines)) {\n                            currCellObj.chart[idx].primaryYAxis.majorGridLines = {};\n                            this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines = {};\n                        }\n                        currCellObj.chart[idx].primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width;\n                        this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines.width =\n                            chartComp.primaryYAxis.majorGridLines.width;\n                        break;\n                    case 'GLMajorVertical':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryXAxis)) {\n                            currCellObj.chart[idx].primaryXAxis = {};\n                            this.parent.chartColl[chartCollId].primaryXAxis = {};\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryXAxis.majorGridLines)) {\n                            currCellObj.chart[idx].primaryXAxis.majorGridLines = {};\n                            this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines = {};\n                        }\n                        currCellObj.chart[idx].primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width;\n                        this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines.width =\n                            chartComp.primaryXAxis.majorGridLines.width;\n                        break;\n                    case 'GLMinorHorizontal':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryYAxis)) {\n                            currCellObj.chart[idx].primaryYAxis = {};\n                            this.parent.chartColl[chartCollId].primaryYAxis = {};\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryYAxis.minorGridLines)) {\n                            currCellObj.chart[idx].primaryYAxis.minorGridLines = {};\n                            this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines = {};\n                        }\n                        currCellObj.chart[idx].primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width;\n                        this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines.width =\n                            chartComp.primaryYAxis.minorGridLines.width;\n                        break;\n                    case 'GLMinorVertical':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryXAxis)) {\n                            currCellObj.chart[idx].primaryXAxis = {};\n                            this.parent.chartColl[chartCollId].primaryXAxis = {};\n                        }\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].primaryXAxis.minorGridLines)) {\n                            currCellObj.chart[idx].primaryXAxis.minorGridLines = {};\n                            this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines = {};\n                        }\n                        currCellObj.chart[idx].primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width;\n                        this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines.width =\n                            chartComp.primaryXAxis.minorGridLines.width;\n                        break;\n                    case 'LegendNone':\n                    case 'LegendsRight':\n                    case 'LegendsLeft':\n                    case 'LegendsBottom':\n                    case 'LegendsTop':\n                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(currCellObj.chart[idx].legendSettings)) {\n                            currCellObj.chart[idx].legendSettings = {};\n                            this.parent.chartColl[chartCollId].legendSettings = {};\n                        }\n                        currCellObj.chart[idx].legendSettings.visible = chartComp.legendSettings.visible;\n                        this.parent.chartColl[chartCollId].legendSettings.visible = chartComp.legendSettings.visible;\n                        if (eleId !== 'LegendNone') {\n                            currCellObj.chart[idx].legendSettings.position = chartComp.legendSettings.position;\n                            this.parent.chartColl[chartCollId].legendSettings.position =\n                                chartComp.legendSettings.position;\n                            break;\n                        }\n                }\n            }\n        }\n    };\n    SpreadsheetChart.prototype.updateChartElement = function (value, chartComp, currCellObj, chartCollId, title, isAccumulationChart, address, triggerEvent) {\n        if (isAccumulationChart &&\n            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',\n                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(value) > -1) {\n            return;\n        }\n        var chartSeries;\n        switch (value) {\n            case 'PHAxes':\n                chartComp = chartComp;\n                chartComp.primaryXAxis.visible = !chartComp.primaryXAxis.visible;\n                break;\n            case 'PVAxes':\n                chartComp = chartComp;\n                chartComp.primaryYAxis.visible = !chartComp.primaryYAxis.visible;\n                break;\n            case 'PHAxisTitle':\n                chartComp = chartComp;\n                chartComp.primaryXAxis.title = title;\n                break;\n            case 'PVAxisTitle':\n                chartComp = chartComp;\n                chartComp.primaryYAxis.title = title;\n                break;\n            case 'ChartTitleNone':\n                chartComp.title = '';\n                break;\n            case 'ChartTitleAbove':\n                chartComp.title = title;\n                break;\n            case 'DLNone':\n            case 'DLCenter':\n            case 'DLInsideend':\n            case 'DLInsidebase':\n            case 'DLOutsideend':\n                chartComp = isAccumulationChart ? chartComp : chartComp;\n                chartSeries = chartComp.series;\n                if (value === 'DLNone') {\n                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {\n                        if (isAccumulationChart) {\n                            chartSeries[idx].dataLabel.visible = false;\n                        }\n                        else {\n                            chartSeries[idx].marker.dataLabel.visible = false;\n                        }\n                    }\n                }\n                else {\n                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {\n                        if (isAccumulationChart) {\n                            var position = value === 'DLOutsideend' ? 'Outside' : 'Inside';\n                            chartSeries[idx].dataLabel.visible = true;\n                            chartSeries[idx].dataLabel.position = position;\n                        }\n                        else {\n                            var position = value === 'DLCenter' ? 'Middle' : value === 'DLInsideend' ? 'Top' : value === 'DLInsidebase' ?\n                                'Bottom' : value === 'DLOutsideend' ? 'Outer' : chartSeries[0].marker.dataLabel.position;\n                            chartSeries[idx].marker.dataLabel.visible = true;\n                            chartSeries[idx].marker.dataLabel.position = position;\n                        }\n                    }\n                }\n                chartComp.series = chartSeries;\n                if (isAccumulationChart) {\n                    chartComp.refresh();\n                }\n                break;\n            case 'GLMajorHorizontal':\n                chartComp = chartComp;\n                chartComp.primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width === 0 ? 1 : 0;\n                break;\n            case 'GLMajorVertical':\n                chartComp = chartComp;\n                chartComp.primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width === 0 ? 1 : 0;\n                break;\n            case 'GLMinorHorizontal':\n                chartComp = chartComp;\n                chartComp.primaryYAxis.minorTicksPerInterval = chartComp.primaryYAxis.minorGridLines.width === 0 ? 5 : 0;\n                chartComp.primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width === 0 ? 1 : 0;\n                break;\n            case 'GLMinorVertical':\n                chartComp = chartComp;\n                chartComp.primaryXAxis.minorTicksPerInterval = chartComp.primaryXAxis.minorGridLines.width === 0 ? 5 : 0;\n                chartComp.primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width === 0 ? 1 : 0;\n                break;\n            case 'LegendNone':\n                chartComp.legendSettings.visible = false;\n                break;\n            case 'LegendsRight':\n            case 'LegendsLeft':\n            case 'LegendsBottom':\n            case 'LegendsTop':\n                chartComp.legendSettings.visible = true;\n                chartComp.legendSettings.position = value === 'LegendsRight' ? 'Right' : value === 'LegendsLeft' ? 'Left' : value ===\n                    'LegendsBottom' ? 'Bottom' : value === 'LegendsTop' ? 'Top' : chartComp.legendSettings.position;\n                break;\n        }\n        this.updateChartModel(value, chartComp, currCellObj, chartCollId, isAccumulationChart);\n        if (triggerEvent) {\n            var eventArgs = { addChartEle: value, id: chartComp.element.id + '_overlay', title: title, address: address };\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.completeAction, { action: 'chartDesign', eventArgs: eventArgs });\n        }\n    };\n    SpreadsheetChart.prototype.undoRedoForChartDesign = function (args) {\n        var overlayElem = document.getElementById(args.id);\n        if (!overlayElem) {\n            return;\n        }\n        var chartElem = this.getChartElement(overlayElem);\n        var chartComp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartElem, 'chart');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chartComp)) {\n            chartComp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartElem, 'accumulationchart');\n        }\n        var addressInfo = this.parent.getAddressInfo(args.address);\n        var cell = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(addressInfo.indices[0], addressInfo.indices[1], (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getSheet)(this.parent, addressInfo.sheetIndex));\n        var chartCollectionId = this.getChartCollectionId(chartElem.id);\n        var chart;\n        var property = args.addChartEle;\n        var title = args.title;\n        for (var i = 0; i < args.beforeActionData.cellDetails[0].chart.length; i++) {\n            if (chartElem.id === args.beforeActionData.cellDetails[0].chart[i].id) {\n                chart = args.beforeActionData.cellDetails[0].chart[i];\n                break;\n            }\n        }\n        var isMarkerEnabled = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.markerSettings) ? false : chart.markerSettings.visible;\n        if (args.switchRowColumn) {\n            this.switchRowColumn(chartCollectionId, chartElem.id, chartComp, cell);\n        }\n        else if (args.chartTheme) {\n            this.switchChartTheme(chartCollectionId, chartElem.id, args.isUndo ? chart.theme : args.chartTheme, chartComp, cell);\n        }\n        else if (args.chartType) {\n            this.switchChartType(chartCollectionId, chartElem.id, args.isUndo ? chart.type : args.chartType, chartComp, cell, false, args.isUndo ? isMarkerEnabled : args.chartMarker, 'undoRedo');\n        }\n        else if (args.addChartEle) {\n            if (args.isUndo) {\n                var position = void 0;\n                switch (property) {\n                    case 'DLNone':\n                    case 'DLCenter':\n                    case 'DLInsideend':\n                    case 'DLInsidebase':\n                    case 'DLOutsideend':\n                        position = chart.dataLabelSettings && chart.dataLabelSettings.position;\n                        property = position === 'Middle' ? 'DLCenter' : position === 'Top' ? 'DLInsideend' : position === 'Bottom' ?\n                            'DLInsidebase' : position === 'Outer' ? 'DLOutsideend' : 'DLNone';\n                        break;\n                    case 'LegendNone':\n                    case 'LegendsRight':\n                    case 'LegendsLeft':\n                    case 'LegendsBottom':\n                    case 'LegendsTop':\n                        if (chart.legendSettings && !chart.legendSettings.visible) {\n                            position = 'LegendNone';\n                        }\n                        else {\n                            position = chart.legendSettings && chart.legendSettings.position;\n                            property = position === 'Right' ? 'LegendsRight' : position === 'Left' ? 'LegendsLeft' : position ===\n                                'Bottom' ? 'LegendsBottom' : position === 'Top' ? 'LegendsTop' : 'LegendsBottom';\n                        }\n                        break;\n                    case 'PVAxisTitle':\n                        title = chart.primaryYAxis && chart.primaryYAxis.title;\n                        break;\n                    case 'PHAxisTitle':\n                        title = chart.primaryXAxis && chart.primaryXAxis.title;\n                        break;\n                    case 'ChartTitleNone':\n                    case 'ChartTitleAbove':\n                        title = chart.title;\n                        break;\n                }\n            }\n            this.updateChartElement(property, chartComp, cell, chartCollectionId, title, null, args.address);\n        }\n    };\n    SpreadsheetChart.prototype.chartDesignTabHandler = function (args) {\n        var isAccumulationChart = false;\n        var sheet = this.parent.sheets[this.parent.activeSheetIndex];\n        var switchRowColumn = args.switchRowColumn;\n        var chartType = args.chartType;\n        var chartTheme = args.chartTheme;\n        var addChartEle = args.addChartEle;\n        var chartComp = null;\n        var overlayElem = args.id ? document.getElementById(args.id) : document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');\n        if (!overlayElem) {\n            return;\n        }\n        var opensTitleDialog = addChartEle === 'ChartTitleAbove' || addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle';\n        var chartTop;\n        var chartleft;\n        if (sheet.frozenRows || sheet.frozenColumns) {\n            var clientRect = overlayElem.getBoundingClientRect();\n            chartTop = { clientY: clientRect.top };\n            chartleft = { clientX: clientRect.left };\n            if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {\n                chartTop.target = this.parent.getColumnHeaderContent();\n            }\n            if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {\n                chartleft.target = this.parent.getRowHeaderTable();\n            }\n        }\n        else {\n            chartTop = { clientY: overlayElem.offsetTop, isImage: true };\n            chartleft = { clientX: overlayElem.offsetLeft, isImage: true };\n        }\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getRowIdxFromClientY, chartTop);\n        this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.getColIdxFromClientX, chartleft);\n        var currCellObj = (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.getCell)(chartTop.clientY, chartleft.clientX, sheet);\n        var address = sheet.name + '!' + (0,_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.getCellAddress)(chartTop.clientY, chartleft.clientX);\n        if (args.triggerEvent) {\n            var eventArgs = {\n                switchRowColumn: args.switchRowColumn, chartType: args.chartType, chartTheme: args.chartTheme,\n                addChartEle: args.addChartEle, id: overlayElem.id, address: address, cancel: false\n            };\n            this.parent.notify(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.beginAction, { action: 'chartDesign', eventArgs: eventArgs });\n            if (eventArgs.cancel) {\n                return;\n            }\n        }\n        var chartObj = this.getChartElement(overlayElem);\n        var chartId = chartObj.getAttribute('id');\n        var chartCollId = this.getChartCollectionId(chartId);\n        if (chartObj) {\n            chartComp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartObj, 'chart');\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chartComp)) {\n                chartComp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.getComponent)(chartObj, 'accumulationchart');\n                isAccumulationChart = true;\n            }\n        }\n        if (switchRowColumn) {\n            this.switchRowColumn(chartCollId, chartId, chartComp, currCellObj);\n        }\n        if (chartType) {\n            this.switchChartType(chartCollId, chartId, chartType, chartComp, currCellObj, args.markerVisible);\n        }\n        if (chartTheme) {\n            this.switchChartTheme(chartCollId, chartId, chartTheme, chartComp, currCellObj);\n        }\n        if (addChartEle) {\n            if (opensTitleDialog && !args.title) {\n                if (this.parent.element.getElementsByClassName('e-title-dlg').length > 0) {\n                    return;\n                }\n                else {\n                    this.titleDlgHandler(addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart, address, args.triggerEvent);\n                }\n            }\n            else {\n                this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, args.title, isAccumulationChart);\n            }\n        }\n        if (args.triggerEvent && !opensTitleDialog) {\n            var eventArgs = {\n                switchRowColumn: args.switchRowColumn, chartType: args.chartType, chartMarker: args.markerVisible,\n                chartTheme: args.chartTheme, addChartEle: args.addChartEle, id: overlayElem.id, address: address\n            };\n            this.parent.notify(_common_index__WEBPACK_IMPORTED_MODULE_1__.completeAction, { action: 'chartDesign', eventArgs: eventArgs });\n        }\n    };\n    SpreadsheetChart.prototype.switchRowColumn = function (chartCollId, chartId, chartComp, cell) {\n        var chart = this.parent.chartColl[chartCollId];\n        chart.isSeriesInRows = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chart.isSeriesInRows) ? true : !chart.isSeriesInRows;\n        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {\n            if (cell.chart[idx].id === chartId) {\n                cell.chart[idx].isSeriesInRows = chart.isSeriesInRows;\n            }\n        }\n        var chartSeries = this.initiateChartHandler({ option: chart, isRefresh: true, isSwitchRowColumn: true });\n        chartComp.series = chartSeries;\n    };\n    SpreadsheetChart.prototype.switchChartTheme = function (chartCollId, chartId, theme, chartComp, cell) {\n        this.parent.chartColl[chartCollId].theme = theme;\n        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {\n            if (cell.chart[idx].id === chartId) {\n                cell.chart[idx].theme = theme;\n            }\n        }\n        chartComp.setProperties({ theme: theme, background: this.getThemeBgColor(theme) }, true);\n        chartComp.refresh();\n    };\n    SpreadsheetChart.prototype.getThemeBgColor = function (theme) {\n        var bg;\n        if (theme.includes('Dark')) {\n            switch (theme) {\n                case 'MaterialDark':\n                    bg = '#383838';\n                    break;\n                case 'FabricDark':\n                    bg = '#242424';\n                    break;\n                case 'BootstrapDark':\n                    bg = '#1b1b1b';\n                    break;\n                case 'Bootstrap5Dark':\n                    bg = '#212529';\n                    break;\n                case 'TailwindDark':\n                    bg = '#1f2937';\n                    break;\n                case 'Tailwind3Dark':\n                    bg = '#111827';\n                    break;\n                case 'FluentDark':\n                    bg = '#1b1a19';\n                    break;\n                case 'Fluent2Dark':\n                    bg = '#292929';\n                    break;\n                case 'Material3Dark':\n                    bg = '#1C1B1F';\n                    break;\n            }\n        }\n        else if (theme.includes('HighContrast')) {\n            bg = '#000000';\n        }\n        else {\n            bg = '#FFFFFF';\n        }\n        return bg;\n    };\n    SpreadsheetChart.prototype.switchChartType = function (chartCollId, chartId, chartType, chartComp, cell, markerVisible, enableMarker, action) {\n        var type = this.parent.chartColl[chartCollId].type;\n        this.parent.chartColl[chartCollId].type = chartType;\n        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {\n            if (cell.chart[idx].id === chartId) {\n                cell.chart[idx].type = chartType;\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(cell.chart[idx].markerSettings)) {\n                    cell.chart[idx].markerSettings.visible = markerVisible;\n                }\n            }\n        }\n        if (chartType !== 'Pie' && chartType !== 'Doughnut') {\n            if (type === 'Pie' || type === 'Doughnut') {\n                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(this.parent.chartColl[chartCollId].markerSettings)) {\n                    if (markerVisible) {\n                        this.parent.chartColl[chartCollId].markerSettings.visible = markerVisible;\n                    }\n                    else if (action === 'undoRedo') {\n                        this.parent.chartColl[chartCollId].markerSettings.visible = enableMarker;\n                    }\n                    else {\n                        this.parent.chartColl[chartCollId].markerSettings.visible = false;\n                    }\n                }\n                else if (markerVisible && (chartType === 'Line' || chartType === 'StackingLine' || chartType === 'StackingLine100')) {\n                    this.parent.chartColl[chartCollId].markerSettings = { shape: 'Circle', visible: true, isFilled: false };\n                }\n                this.changeCharType(chartCollId);\n            }\n            else {\n                if (type !== chartType) {\n                    if (chartType === 'Scatter') {\n                        var labels = chartComp.primaryXAxis['labels'];\n                        if (labels && labels.length > 0 && (0,_workbook_index__WEBPACK_IMPORTED_MODULE_0__.isNumber)(labels[labels.length - 1])) {\n                            chartComp.primaryXAxis.valueType = 'Double';\n                        }\n                    }\n                    else if (chartComp.primaryXAxis.valueType === 'Double') {\n                        chartComp.primaryXAxis.valueType = 'Category';\n                    }\n                }\n                var chartSeries = chartComp.series;\n                var isLineChart = chartType === 'Line' || chartType === 'StackingLine' || chartType === 'StackingLine100';\n                for (var idx = 0, len = chartSeries.length; idx < len; idx++) {\n                    chartSeries[idx].type = chartType;\n                    if (isLineChart) {\n                        chartSeries[idx].marker.visible = markerVisible;\n                        chartSeries[idx].marker.shape = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chartSeries[idx].marker.shape) ? 'Circle' : chartSeries[idx].marker.shape;\n                        if (action === 'undoRedo') {\n                            chartSeries[idx].marker.visible = enableMarker;\n                        }\n                    }\n                    else {\n                        chartSeries[idx].marker.visible = false;\n                    }\n                }\n                chartComp.series = chartSeries;\n                chartComp.refresh();\n            }\n        }\n        else {\n            if (type === 'Pie' || type === 'Doughnut') {\n                var chartSeries = chartComp.series;\n                for (var idx = 0, len = chartSeries.length; idx < len; idx++) {\n                    chartSeries[idx].innerRadius = chartType === 'Pie' ? '0%' : '40%';\n                }\n                chartComp.series = chartSeries;\n                chartComp.refresh();\n            }\n            else {\n                this.changeCharType(chartCollId);\n            }\n        }\n    };\n    SpreadsheetChart.prototype.getChartElement = function (overlayElem) {\n        var chartObj = overlayElem.querySelector('.e-chart');\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.isNullOrUndefined)(chartObj)) {\n            chartObj = overlayElem.querySelector('.e-accumulationchart');\n        }\n        return chartObj;\n    };\n    SpreadsheetChart.prototype.getChartCollectionId = function (id) {\n        var chartCollectionId;\n        for (var i = 0, len = this.parent.chartColl.length; i < len; i++) {\n            if (id === this.parent.chartColl[i].id) {\n                chartCollectionId = i;\n            }\n        }\n        return chartCollectionId;\n    };\n    SpreadsheetChart.prototype.changeCharType = function (chartCollId) {\n        var chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);\n        var chartParEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.closest)(chartEle, '.e-datavisualization-chart');\n        chartParEle.remove();\n        this.initiateChartHandler({\n            option: this.parent.chartColl[chartCollId], isInitCell: false, triggerEvent: false, isPaste: false,\n            isChangeChartType: true\n        });\n        chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);\n        chartParEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.closest)(chartEle, '.e-datavisualization-chart');\n        if (!chartParEle.classList.contains('e-ss-overlay-active')) {\n            chartParEle.classList.add('e-ss-overlay-active');\n        }\n    };\n    SpreadsheetChart.prototype.titleDlgHandler = function (addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart, address, triggerEvent) {\n        var _this = this;\n        var title = '';\n        if (isAccumulationChart && (addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle')) {\n            return;\n        }\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_1__.locale);\n        var dialogInst = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_1__.dialog);\n        dialogInst.show({\n            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-title-dlg',\n            header: addChartEle === 'chart_abovechart' ? l10n.getConstant('ChartTitle') : addChartEle ===\n                'PHAxisTitle' ? l10n.getConstant('HorizontalAxisTitle') : l10n.getConstant('VerticalAxisTitle'),\n            beforeOpen: function () {\n                dialogInst.dialogInstance.content = _this.titleDlgContent(addChartEle, chartComp);\n                dialogInst.dialogInstance.dataBind();\n                _this.parent.element.focus();\n            },\n            buttons: [{\n                    buttonModel: {\n                        content: l10n.getConstant('Ok'),\n                        isPrimary: true,\n                        cssClass: 'e-btn e-clearall-btn e-flat'\n                    },\n                    click: function () {\n                        var dlgCont = _this.parent.element.querySelector('.e-title-dlg').\n                            getElementsByClassName('e-title-dlg-content')[0];\n                        title = dlgCont.getElementsByTagName('input')[0].value;\n                        dialogInst.hide();\n                        _this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, title, null, address, triggerEvent);\n                    }\n                }]\n        });\n        dialogInst.dialogInstance.refresh();\n    };\n    SpreadsheetChart.prototype.titleDlgContent = function (addChartEle, chartComp) {\n        var l10n = this.parent.serviceLocator.getService(_common_index__WEBPACK_IMPORTED_MODULE_1__.locale);\n        var dlgContent = this.parent.createElement('div', { className: 'e-title-dlg-content' });\n        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header' });\n        value1Text.innerText = l10n.getConstant('EnterTitle');\n        var value1Inp = this.parent.createElement('input', { className: 'e-input', id: 'titleInput', attrs: { type: 'text' } });\n        dlgContent.appendChild(value1Text);\n        dlgContent.appendChild(value1Inp);\n        if (chartComp) {\n            if (addChartEle === 'PHAxisTitle') {\n                value1Inp.value = chartComp.primaryXAxis.title ? chartComp.primaryXAxis.title : value1Inp.value;\n            }\n            else if (addChartEle === 'PVAxisTitle') {\n                value1Inp.value = chartComp.primaryYAxis.title ? chartComp.primaryYAxis.title : value1Inp.value;\n            }\n            else {\n                value1Inp.value = chartComp.title ? chartComp.title : value1Inp.value;\n            }\n        }\n        return dlgContent;\n    };\n    /**\n     * Removing event listener for success and failure\n     *\n     * @returns {void} - Removing event listener for success and failure\n     */\n    SpreadsheetChart.prototype.removeEventListener = function () {\n        if (!this.parent.isDestroyed) {\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.initiateChart, this.initiateChartHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshChartCellObj, this.refreshChartCellObj);\n            this.parent.off(_workbook_index__WEBPACK_IMPORTED_MODULE_0__.refreshChartCellOnInit, this.refreshChartCellModel);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.refreshChartCellModel, this.refreshChartCellModel);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.deleteChart, this.deleteChart);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.clearChartBorder, this.clearBorder);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.insertChart, this.insertChartHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.chartRangeSelection, this.chartRangeHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.chartDesignTab, this.chartDesignTabHandler);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.addChartEle, this.updateChartElement);\n            this.parent.off(_common_index__WEBPACK_IMPORTED_MODULE_1__.undoRedoForChartDesign, this.undoRedoForChartDesign);\n            this.parent.off(_workbook_common_index__WEBPACK_IMPORTED_MODULE_4__.refreshChart, this.refreshChartData);\n        }\n    };\n    /**\n     * To Remove the event listeners.\n     *\n     * @returns {void} - To Remove the event listeners.\n     */\n    SpreadsheetChart.prototype.destroy = function () {\n        this.removeEventListener();\n        this.parent = null;\n        var chartEle = null;\n        if (this.chart) {\n            chartEle = this.chart.element;\n            this.chart.destroy();\n        }\n        if (chartEle) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_3__.detach)(chartEle);\n        }\n        this.chart = null;\n    };\n    /**\n     * Get the sheet chart module name.\n     *\n     * @returns {string} - Get the module name.\n     */\n    SpreadsheetChart.prototype.getModuleName = function () {\n        return 'spreadsheetChart';\n    };\n    return SpreadsheetChart;\n}());\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-spreadsheet/src/spreadsheet/integrations/chart.js?");

/***/ })

}]);