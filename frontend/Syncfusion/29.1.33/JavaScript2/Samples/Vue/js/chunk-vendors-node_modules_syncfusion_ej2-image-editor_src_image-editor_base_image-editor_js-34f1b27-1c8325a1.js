"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkej2_vue_samples"] = self["webpackChunkej2_vue_samples"] || []).push([["chunk-vendors-node_modules_syncfusion_ej2-image-editor_src_image-editor_base_image-editor_js-34f1b27-1c8325a1"],{

/***/ "./node_modules/@syncfusion/ej2-image-editor/src/image-editor/base/image-editor.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-image-editor/src/image-editor/base/image-editor.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FinetuneSettings: () => (/* binding */ FinetuneSettings),\n/* harmony export */   FontFamily: () => (/* binding */ FontFamily),\n/* harmony export */   ImageEditor: () => (/* binding */ ImageEditor),\n/* harmony export */   SelectionSettings: () => (/* binding */ SelectionSettings),\n/* harmony export */   UploadSettings: () => (/* binding */ UploadSettings),\n/* harmony export */   ZoomSettings: () => (/* binding */ ZoomSettings)\n/* harmony export */ });\n/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\");\n/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../index */ \"./node_modules/@syncfusion/ej2-image-editor/src/image-editor/index.js\");\n/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable max-len */\n\n\n\n\n\n\n\n/**\n * Defines the settings for restricting uploaded images.\n */\nvar UploadSettings = /** @class */ (function (_super) {\n    __extends(UploadSettings, _super);\n    function UploadSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], UploadSettings.prototype, \"allowedExtensions\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], UploadSettings.prototype, \"minFileSize\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], UploadSettings.prototype, \"maxFileSize\", void 0);\n    return UploadSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * This interface is used to specify settings for finetuning operations on images, including brightness, contrast, hue, saturation, exposure, opacity, and blur. It includes properties for setting minimum and maximum values for each of these options, as well as a default value.\n */\nvar FinetuneSettings = /** @class */ (function (_super) {\n    __extends(FinetuneSettings, _super);\n    function FinetuneSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"brightness\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"contrast\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"hue\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"saturation\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"exposure\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FinetuneSettings.prototype, \"blur\", void 0);\n    return FinetuneSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * An interface used to define the settings such as minimum, maximum, and default zoom factors, and the type of zooming which are available in the image editor control.\n */\nvar ZoomSettings = /** @class */ (function (_super) {\n    __extends(ZoomSettings, _super);\n    function ZoomSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], ZoomSettings.prototype, \"zoomTrigger\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], ZoomSettings.prototype, \"minZoomFactor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)\n    ], ZoomSettings.prototype, \"maxZoomFactor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)\n    ], ZoomSettings.prototype, \"zoomFactor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], ZoomSettings.prototype, \"zoomPoint\", void 0);\n    return ZoomSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * This interface is used to specify settings for selection operations on images, including visibility, stroke color and fill color.\n */\nvar SelectionSettings = /** @class */ (function (_super) {\n    __extends(SelectionSettings, _super);\n    function SelectionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], SelectionSettings.prototype, \"showCircle\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], SelectionSettings.prototype, \"strokeColor\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], SelectionSettings.prototype, \"fillColor\", void 0);\n    return SelectionSettings;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * Predefine the font families that populate in font family dropdown list from the toolbar.\n */\nvar FontFamily = /** @class */ (function (_super) {\n    __extends(FontFamily, _super);\n    function FontFamily() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Arial')\n    ], FontFamily.prototype, \"default\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)\n    ], FontFamily.prototype, \"items\", void 0);\n    return FontFamily;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty));\n\n/**\n * The Image Editor is a graphical user interface for editing images.\n *\n * {% codeBlock src='image-editor/default/index.md' %}{% endcodeBlock %}\n *\n * @remarks\n * The Image Editor component provides various image editing features such as zooming, cropping, rotating, inserting text and shapes (rectangles, ellipses, and lines), drawing freehand on top of an image, undo/redo, and more.\n *\n */\nvar ImageEditor = /** @class */ (function (_super) {\n    __extends(ImageEditor, _super);\n    /**\n     *\n     * Constructor for creating the widget\n     *\n     * @param  {ImageEditorModel} options - Specifies the image editor model\n     * @param  {string|HTMLDivElement} element - Specifies the target element\n     */\n    function ImageEditor(options, element) {\n        var _this = _super.call(this, options) || this;\n        /**\n         *\n         * Image Editor Private Properties\n         */\n        /** @hidden */\n        _this.isImageLoaded = false;\n        /** @hidden */\n        _this.activeObj = { activePoint: { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 },\n            flipObjColl: [], triangle: [], triangleRatio: [], rotatedAngle: 0, opacity: 1, order: null };\n        // current object's ui interaction properties\n        /** @hidden */\n        _this.currObjType = { shape: '', isDragging: false, isActiveObj: false, isText: false, isInitialText: false, isLine: false, isInitialLine: false,\n            isCustomCrop: false, isZoomed: false, isUndoZoom: false, isUndoAction: false, isFiltered: false, isSave: false, isResize: false, isRedact: false };\n        /** @hidden */\n        _this.objColl = [];\n        /** @hidden */\n        // eslint-disable-next-line\n        _this.pointColl = {};\n        /** @hidden */\n        _this.freehandCounter = 0;\n        /** @hidden */\n        _this.points = [];\n        /** @hidden */\n        _this.togglePen = false;\n        /** @hidden */\n        _this.togglePan = false;\n        /** @hidden */\n        _this.img = { destLeft: 0, destTop: 0, destWidth: 0, destHeight: 0, srcLeft: 0, srcTop: 0, srcWidth: 0, srcHeight: 0 };\n        /** @hidden */\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        _this.rotateFlipColl = [];\n        // All prop values saved while cropping (to restore the image to its original state)\n        /** @hidden */\n        _this.cropObj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },\n            totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {}, rotateFlipColl: [],\n            degree: 0, currFlipState: '', straighten: 0, destPoints: { startX: 0, startY: 0, width: 0, height: 0 },\n            srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '', isBrightAdjust: false,\n            zoomFactor: 0, previousZoomValue: 0, aspectWidth: null, aspectHeight: null, frame: 'none', straightenZoom: 0,\n            adjustmentLevel: { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n                exposure: 0, transparency: 100, sharpen: false, bw: false }, currentFilter: '' };\n        // Stored transformations performed after cropping\n        /** @hidden */\n        _this.afterCropActions = [];\n        /** @hidden */\n        _this.transform = { degree: 0, currFlipState: '', zoomFactor: 0, cropZoomFactor: null, defaultZoomFactor: 0, straighten: 0 };\n        /** @hidden */\n        _this.panPoint = { currentPannedPoint: { x: 0, y: 0 }, totalPannedPoint: { x: 0, y: 0 }, totalPannedInternalPoint: { x: 0, y: 0 },\n            totalPannedClientPoint: { x: 0, y: 0 } };\n        /** @hidden */\n        _this.isUndoRedo = false;\n        /** @hidden */\n        _this.isCropTab = false;\n        /** @hidden */\n        _this.isCircleCrop = false;\n        /** @hidden */\n        _this.fontSizeColl = [];\n        /** @hidden */\n        _this.initialAdjustmentValue = '';\n        /** @hidden */\n        _this.currentFilter = '';\n        /** @hidden */\n        _this.canvasFilter = 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +\n            'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' + 'grayscale(0%) ' + 'invert(0%)';\n        /** @hidden */\n        _this.toolbarHeight = 0;\n        /** @hidden */\n        _this.isPublicMethod = false;\n        /** @hidden */\n        _this.isCropToolbar = false;\n        /** @hidden */\n        _this.cursor = 'default';\n        /** @hidden */\n        _this.resizeSrc = { startX: _this.img.srcLeft, startY: _this.img.srcTop, width: _this.img.srcWidth, height: _this.img.srcHeight };\n        /** @hidden */\n        _this.isResize = false;\n        /** @hidden */\n        _this.isAspectRatio = false;\n        /** @hidden */\n        _this.frameObj = { type: 'none', color: '#fff', size: 20, inset: 20, offset: 20, radius: 0, amount: 1, border: 'solid', gradientColor: '' };\n        /** @hidden */\n        _this.tempFrameObj = { type: 'none', color: '#fff', size: 20, inset: 20, offset: 20, radius: 0, amount: 1, border: 'solid', gradientColor: '' };\n        /** @hidden */\n        _this.allowDownScale = true;\n        /** @hidden */\n        _this.gradientColor = '';\n        /** @hidden */\n        _this.size = 20;\n        /** @hidden */\n        _this.inset = 0;\n        /** @hidden */\n        _this.offset = 0;\n        /** @hidden */\n        _this.borderRadius = 0;\n        /** @hidden */\n        _this.lineCount = 0;\n        /** @hidden */\n        _this.prevStraightenedDegree = 0;\n        /** @hidden */\n        _this.tempStraighten = 0;\n        /** @hidden */\n        _this.isStraightening = false;\n        /** @hidden */\n        _this.isFinetuning = false;\n        /** @hidden */\n        _this.isZoomBtnClick = false;\n        /** @hidden */\n        _this.isFinetuneBtnClick = false;\n        /** @hidden */\n        _this.isFilterCanvasClick = false;\n        /** @hidden */\n        _this.isFrameBtnClick = false;\n        /** @hidden */\n        _this.isChangesSaved = false;\n        /** @hidden */\n        _this.isShapeDrawing = false;\n        /** @hidden */\n        _this.noPushUndo = false;\n        /** @hidden */\n        _this.isUndoRedoStack = false;\n        /** @hidden */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _this.shapeColl = [];\n        /** @hidden */\n        _this.isKBDNavigation = false;\n        /** @hidden */\n        _this.isMaskImage = false;\n        /** @hidden */\n        _this.tempObjColl = [];\n        /** @hidden */\n        _this.tempPointColl = [];\n        /** @hidden */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        _this.tempShapeColl = [];\n        /** @hidden */\n        _this.isImageUpdated = false;\n        /** @hidden */\n        _this.noRedact = false;\n        /** @hidden */\n        _this.tempRedactBlur = 50;\n        /** @hidden */\n        _this.tempRedactPixel = 40;\n        _this.tempToolbarHeight = 0;\n        _this.tempToolbar = [];\n        ImageEditor_1.Inject(_index__WEBPACK_IMPORTED_MODULE_2__.Crop, _index__WEBPACK_IMPORTED_MODULE_2__.Draw, _index__WEBPACK_IMPORTED_MODULE_2__.Selection, _index__WEBPACK_IMPORTED_MODULE_2__.Transform, _index__WEBPACK_IMPORTED_MODULE_2__.Export, _index__WEBPACK_IMPORTED_MODULE_2__.ToolbarModule);\n        ImageEditor_1.Inject(_index__WEBPACK_IMPORTED_MODULE_2__.UndoRedo);\n        ImageEditor_1.Inject(_index__WEBPACK_IMPORTED_MODULE_2__.Filter);\n        ImageEditor_1.Inject(_index__WEBPACK_IMPORTED_MODULE_2__.Shape);\n        ImageEditor_1.Inject(_index__WEBPACK_IMPORTED_MODULE_2__.FreehandDrawing);\n        if (element) {\n            _this.appendTo(element);\n        }\n        return _this;\n    }\n    ImageEditor_1 = ImageEditor;\n    /**\n     * To provide the array of modules needed for component rendering.\n     *\n     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for component rendering.\n     * @hidden\n     */\n    ImageEditor.prototype.requiredModules = function () {\n        var modules = [];\n        modules.push({ member: 'crop', args: [this] });\n        modules.push({ member: 'draw', args: [this] });\n        modules.push({ member: 'selection', args: [this] });\n        modules.push({ member: 'transform', args: [this] });\n        modules.push({ member: 'export', args: [this] });\n        modules.push({ member: 'toolbar-module', args: [this] });\n        modules.push({ member: 'undo-redo', args: [this] });\n        modules.push({ member: 'filter', args: [this] });\n        modules.push({ member: 'shape', args: [this] });\n        modules.push({ member: 'freehand-draw', args: [this] });\n        return modules;\n    };\n    ImageEditor.prototype.preRender = function () {\n        // pre render code snippets\n        this.element.id = this.element.id || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('ej2-image-editor');\n        this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            this.element.classList.add('e-device');\n        }\n        this.initializeThemeColl();\n    };\n    /**\n     *\n     * To Initialize the component rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    ImageEditor.prototype.render = function () {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isAngular) {\n            var originalElement = this.element;\n            var clonedElement = originalElement.cloneNode(true);\n            originalElement.parentNode.replaceChild(clonedElement, originalElement);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element = clonedElement;\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('ej2_instances', [this], this.element);\n        }\n        this.initialize();\n    };\n    /**\n     * To get component name.\n     *\n     * @returns {string} - Module Name\n     * @private\n     */\n    ImageEditor.prototype.getModuleName = function () {\n        return 'image-editor';\n    };\n    /**\n     *\n     * To get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Persist data\n     * @private\n     */\n    ImageEditor.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     *\n     * Called internally if any of the property value changed.\n     *\n     * @param {ImageEditorModel} newProperties - Specifies new properties\n     * @param {ImageEditorModel} oldProperties - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n    ImageEditor.prototype.onPropertyChanged = function (newProperties, oldProperties) {\n        var indexObj;\n        for (var _i = 0, _a = Object.keys(newProperties); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProperties.cssClass) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldProperties.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n                    }\n                    if (newProperties.cssClass) {\n                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], newProperties.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n                    }\n                    break;\n                case 'disabled':\n                    if (newProperties.disabled) {\n                        this.element.classList.add('e-disabled');\n                        this.unwireEvent();\n                    }\n                    else {\n                        this.element.classList.remove('e-disabled');\n                        this.wireEvent();\n                    }\n                    break;\n                case 'height':\n                    this.element.style.height = newProperties.height;\n                    this.update();\n                    break;\n                case 'width':\n                    this.element.style.width = newProperties.width;\n                    this.update();\n                    break;\n                case 'theme':\n                    if (newProperties.theme) {\n                        if (this.theme && this.theme !== '') {\n                            this.theme = this.toPascalCase(this.theme);\n                        }\n                        else {\n                            this.theme = 'Bootstrap5';\n                        }\n                        this.upperContext.strokeStyle = this.themeColl[this.theme]['primaryColor'];\n                        this.upperContext.fillStyle = this.themeColl[this.theme]['secondaryColor'];\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    break;\n                case 'finetuneSettings':\n                    if (newProperties.finetuneSettings) {\n                        this.finetuneSettings = newProperties.finetuneSettings;\n                        this.notify('filter', { prop: 'update-finetunes' });\n                    }\n                    break;\n                case 'locale':\n                    if (newProperties.locale) {\n                        this.notify('toolbar', { prop: 'setLocale', onPropertyChange: false, value: { locale: newProperties.locale } });\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    break;\n                case 'allowUndoRedo':\n                    if (newProperties.allowUndoRedo) {\n                        this.allowUndoRedo = true;\n                    }\n                    else {\n                        this.allowUndoRedo = false;\n                    }\n                    this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                            isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    break;\n                case 'showQuickAccessToolbar':\n                    if (newProperties.showQuickAccessToolbar) {\n                        this.showQuickAccessToolbar = true;\n                        this.notify('toolbar', { prop: 'create-qa-toolbar', onPropertyChange: false });\n                        indexObj = { freehandSelectedIndex: null };\n                        this.notify('freehand-draw', { prop: 'getFreehandSelectedIndex', onPropertyChange: false, value: { obj: indexObj } });\n                        if (this.activeObj.shape) {\n                            this.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n                        }\n                        else if (indexObj['freehandSelectedIndex']) {\n                            this.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: true } });\n                        }\n                    }\n                    else {\n                        this.showQuickAccessToolbar = false;\n                        this.notify('toolbar', { prop: 'destroy-qa-toolbar', onPropertyChange: false });\n                    }\n                    break;\n                case 'zoomSettings':\n                    if (newProperties.zoomSettings) {\n                        this.zoomSettings.zoomTrigger = newProperties.zoomSettings.zoomTrigger;\n                    }\n                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.zoomSettings.zoomTrigger)) {\n                        this.zoomSettings.zoomTrigger = (_index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.MouseWheel | _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Pinch | _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Toolbar |\n                            _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Commands);\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    else if ((newProperties.zoomSettings.zoomTrigger & _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Toolbar) === _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Toolbar) {\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    break;\n                case 'selectionSettings':\n                    if (newProperties.selectionSettings) {\n                        this.selectionSettings = newProperties.selectionSettings;\n                        if (this.activeObj.shape) {\n                            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n                            this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: this.activeObj } });\n                        }\n                    }\n                    break;\n                case 'toolbar':\n                    if (newProperties.toolbar) {\n                        this.toolbar = newProperties.toolbar;\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    break;\n                case 'toolbarTemplate':\n                    if (newProperties.toolbarTemplate) {\n                        this.notify('toolbar', { prop: 'destroy-bottom-toolbar', onPropertyChange: false });\n                        this.notify('toolbar', { prop: 'destroy-top-toolbar', onPropertyChange: false });\n                        this.element.appendChild(this.createElement('div', {\n                            id: this.element.id + '_toolbarArea', className: 'e-toolbar-area'\n                        }));\n                        this.toolbarTemplateFn();\n                    }\n                    break;\n                case 'quickAccessToolbarTemplate':\n                    if (newProperties.quickAccessToolbarTemplate) {\n                        this.notify('toolbar', { prop: 'destroy-qa-toolbar', onPropertyChange: false });\n                        this.quickAccessToolbarTemplateFn();\n                    }\n                    break;\n                case 'uploadSettings':\n                    if (newProperties.uploadSettings) {\n                        this.uploadSettings = newProperties.uploadSettings;\n                        if (!this.uploadSettings.allowedExtensions) {\n                            this.uploadSettings.allowedExtensions = '.jpg, .jpeg, .png, .svg, .webp';\n                            this.notify('draw', { prop: 'setNullExtension', value: { extension: true } });\n                        }\n                        else {\n                            this.notify('draw', { prop: 'setNullExtension', value: { extension: false } });\n                        }\n                        this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                                isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n                    }\n                    else {\n                        this.notify('draw', { prop: 'setNullExtension', value: { extension: true } });\n                    }\n                    this.updateDropInfoContent(this.element.querySelector('.e-ie-drop-info'));\n                    break;\n            }\n        }\n    };\n    ImageEditor.prototype.destroy = function () {\n        var classList = [];\n        this.element.removeAttribute('tabindex');\n        var saveDialog = this.element.querySelector('#' + this.element.id + '_saveDialog');\n        if (saveDialog && saveDialog.style.display === 'block') {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(document.getElementById(this.element.id + '_saveDialog'), 'dialog').destroy();\n        }\n        if (this.cssClass) {\n            classList = classList.concat(this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n        }\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], classList);\n        if (!this.element.getAttribute('class')) {\n            this.element.removeAttribute('class');\n        }\n        this.unwireEvent();\n        this.notify('toolbar', { prop: 'destroySubComponents', onPropertyChange: false });\n        this.notify('destroyed', null);\n        _super.prototype.destroy.call(this);\n        this.element.innerHTML = '';\n    };\n    ImageEditor.prototype.initialize = function () {\n        if (this.toolbarTemplate) {\n            this.element.appendChild(this.createElement('div', {\n                id: this.element.id + '_toolbarArea', className: 'e-toolbar-area'\n            }));\n            this.toolbarTemplateFn();\n        }\n        else {\n            this.notify('toolbar', { prop: 'create-toolbar', onPropertyChange: false });\n            this.notify('toolbar', { prop: 'create-contextual-toolbar', onPropertyChange: false });\n        }\n        if (!this.uploadSettings.allowedExtensions) {\n            this.setProperties({ uploadSettings: { allowedExtensions: '.jpg, .jpeg, .png, .svg, .webp' } }, true);\n        }\n        else {\n            this.notify('draw', { prop: 'setNullExtension', value: { extension: false } });\n        }\n        this.createCanvas();\n        if (this.element.offsetWidth > 359 && this.element.querySelector('.e-ie-min-drop-content') && this.element.querySelector('.e-ie-drop-content')) {\n            this.element.querySelector('.e-ie-min-drop-content').style.display = 'none';\n            this.element.querySelector('.e-ie-drop-content').style.display = 'block';\n        }\n        this.createDropUploader();\n        if (this.showQuickAccessToolbar) {\n            var canvasWrapper = document.querySelector('#' + this.element.id + '_canvasWrapper');\n            canvasWrapper.appendChild(this.createElement('div', {\n                id: this.element.id + '_quickAccessToolbarArea', className: 'e-quick-access-toolbar-area'\n            }));\n            var quickAccessToolbar = document.getElementById(this.element.id + '_quickAccessToolbarArea');\n            quickAccessToolbar.style.position = 'absolute';\n            quickAccessToolbar.style.display = 'none';\n            if (this.activeObj) {\n                quickAccessToolbar.style.left = this.activeObj.activePoint.startX + 'px';\n                quickAccessToolbar.style.top = this.activeObj.activePoint.startY + 'px';\n            }\n            quickAccessToolbar.style.width = '100%';\n        }\n        if (this.quickAccessToolbarTemplate) {\n            this.quickAccessToolbarTemplateFn();\n        }\n        else {\n            this.notify('toolbar', { prop: 'create-qa-toolbar', onPropertyChange: false });\n        }\n        this.wireEvent();\n        this.lowerContext = this.lowerCanvas.getContext('2d');\n        this.upperContext = this.upperCanvas.getContext('2d');\n        this.inMemoryContext = this.inMemoryCanvas.getContext('2d');\n        this.lowerContext.filter = this.getDefaultFilter();\n        this.notify('filter', { prop: 'setAdjustmentValue', onPropertyChange: false, value: { adjustmentValue: this.lowerContext.filter } });\n        this.canvasFilter = this.lowerContext.filter;\n        this.notify('toolbar', { prop: 'setInitialAdjustmentValue', onPropertyChange: false, value: { value: this.lowerContext.filter } });\n        if (this.cssClass) {\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n        }\n        if (this.element) {\n            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.createSpinner)({\n                target: this.element\n            });\n        }\n        this.initializeZoomSettings();\n        if (this.imgSrc) {\n            this.open(this.imgSrc);\n        }\n    };\n    ImageEditor.prototype.createDropUploader = function () {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var proxy = this;\n        var uploadObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.Uploader({\n            dropArea: this.element.getElementsByClassName('e-canvas-wrapper')[0],\n            allowedExtensions: this.uploadSettings.allowedExtensions,\n            multiple: false,\n            selected: function (args) {\n                if (args.event.type === 'change' || args.event.type === 'drop') {\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    var type = args.filesData[0].type;\n                    var errType = 'unsupported';\n                    var extension = _this.getExtensionArray();\n                    var isAllowedFileType = (extension.indexOf(type) > -1 ||\n                        (type === 'jpeg' && (proxy.uploadSettings.allowedExtensions.indexOf('jpg') > -1 ||\n                            proxy.uploadSettings.allowedExtensions.indexOf('jpeg') > -1)));\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    var size = args.filesData[0].size;\n                    var isInvalidSize = (proxy.uploadSettings.minFileSize && size < proxy.uploadSettings.minFileSize) ||\n                        (proxy.uploadSettings.maxFileSize && size > proxy.uploadSettings.maxFileSize);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    if ((args.event.type === 'change' || (args.event.type === 'drop' && args.event.dataTransfer.files.length === 1)) && isAllowedFileType &&\n                        !isInvalidSize) {\n                        _this.notify('draw', { prop: 'fileSelect', value: { inputElement: _this.element.querySelector('#' + _this.element.id + '_dropfileUpload'), args: args } });\n                    }\n                    else {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        if (args.event.type === 'drop' && args.event.dataTransfer.files.length > 1) {\n                            errType = 'multi-select-image';\n                        }\n                        _this.showDialogPopup(errType, !isAllowedFileType);\n                    }\n                }\n            }\n        });\n        uploadObj.appendTo('#' + this.element.id + '_dropfileUpload');\n    };\n    ImageEditor.prototype.dlgCloseBtnClick = function () {\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(document.getElementById(this.element.id + '_dialog'), 'dialog').destroy();\n    };\n    /**\n     * Show dialog popup for unsupported files.\n     *\n     * @param { string } type - Specifies the type of error.\n     * @param { boolean } fileTypeError - Specifies the error is due to file type.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.showDialogPopup = function (type, fileTypeError) {\n        var content = '';\n        this.element.querySelector('#' + this.element.id + '_dialog').style.display = 'block';\n        var headerObj;\n        var okObj = { key: 'DlgOK' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: okObj } });\n        if (type === 'multi-select-image') {\n            headerObj = { key: 'ImageErrorDialogHeader' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: headerObj } });\n            var contentObj = { key: 'ImageErrorDialogContent' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: contentObj } });\n            content = '<span>' + contentObj['value'] + '</span>';\n        }\n        else {\n            headerObj = { key: 'AlertDialogHeader' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: headerObj } });\n            var contentObj = { key: 'AlertDialogContent' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: contentObj } });\n            var supportObj = { key: 'SupportText' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: supportObj } });\n            var extension = this.getExtensionString();\n            var fileSizeObj = { key: 'MinMaxSizeAlert' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n            var andObj = { key: 'And' };\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: andObj } });\n            var size = void 0;\n            if (this.uploadSettings.minFileSize && this.uploadSettings.maxFileSize) {\n                size = ' ' + fileSizeObj['value'] + ' <b> ' + this.formatSizeUnits(this.uploadSettings.minFileSize) + ' </b> ' + andObj['value'] + ' <b> ' + this.formatSizeUnits(this.uploadSettings.maxFileSize) + ' </b> ';\n            }\n            else if (this.uploadSettings.minFileSize) {\n                fileSizeObj['key'] = 'MinSizeAlert';\n                this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n                size = ' ' + fileSizeObj['value'] + ' <b> ' + this.formatSizeUnits(this.uploadSettings.minFileSize) + ' </b> ';\n            }\n            else if (this.uploadSettings.maxFileSize) {\n                fileSizeObj['key'] = 'MaxSizeAlert';\n                this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n                size = ' ' + fileSizeObj['value'] + ' <b> ' + this.formatSizeUnits(this.uploadSettings.maxFileSize) + ' </b> ';\n            }\n            if (fileTypeError) {\n                content = '<span>' + contentObj['value'] + ' ' + supportObj['value'] + '<b>' + extension + '</b>' + '</span>';\n            }\n            else if (size) {\n                content = '<span>' + contentObj['value'] + ' ' + supportObj['value'] + size + '</span>';\n            }\n        }\n        var dialog = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_1__.Dialog({\n            header: headerObj['value'],\n            closeOnEscape: true,\n            content: content,\n            target: document.getElementById('target'),\n            width: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? '285px' : '400px',\n            isModal: true,\n            animationSettings: { effect: 'Zoom' },\n            close: this.dlgCloseBtnClick.bind(this),\n            buttons: [\n                { click: this.dlgCloseBtnClick.bind(this),\n                    buttonModel: { content: okObj['value'] }\n                }\n            ]\n        });\n        dialog.appendTo('#' + this.element.id + '_dialog');\n    };\n    /**\n     * Returns bytes in string format.\n     *\n     * @param { number } bytes - Specifies the bytes.\n     *\n     * @hidden\n     * @returns {string}.\n     */\n    ImageEditor.prototype.formatSizeUnits = function (bytes) {\n        var byte = '';\n        if (bytes >= 1073741824) {\n            byte = (bytes / 1073741824).toFixed(2) + ' GB';\n        }\n        else if (bytes >= 1048576) {\n            byte = (bytes / 1048576).toFixed(2) + ' MB';\n        }\n        else if (bytes >= 1024) {\n            byte = (bytes / 1024).toFixed(2) + ' KB';\n        }\n        else if (bytes > 1) {\n            byte = bytes + ' bytes';\n        }\n        else if (bytes === 1) {\n            byte = bytes + ' byte';\n        }\n        else {\n            byte = '0 bytes';\n        }\n        return byte;\n    };\n    /**\n     * Returns allowed file type extensions in string[].\n     *\n     * @hidden\n     * @returns {string[]}.\n     */\n    ImageEditor.prototype.getExtensionArray = function () {\n        var validExtensions = ['jpeg', 'jpg', 'png', 'svg', 'webp'];\n        var split = this.uploadSettings.allowedExtensions.split(',');\n        var extension = [];\n        for (var _i = 0, split_1 = split; _i < split_1.length; _i++) {\n            var ext = split_1[_i];\n            var trimmedExt = ext.trim();\n            for (var _a = 0, validExtensions_1 = validExtensions; _a < validExtensions_1.length; _a++) {\n                var valid = validExtensions_1[_a];\n                if (trimmedExt.indexOf(valid) !== -1) {\n                    extension.push(valid);\n                    break;\n                }\n            }\n        }\n        return extension;\n    };\n    /**\n     * Returns allowed file type extensions in string.\n     *\n     * @hidden\n     * @returns {string}.\n     */\n    ImageEditor.prototype.getExtensionString = function () {\n        var andObj = { key: 'And' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: andObj } });\n        var extension = this.getExtensionArray();\n        var words = '';\n        for (var i = 0; i < extension.length; i++) {\n            if (i === extension.length - 1 && extension.length > 1 &&\n                !((extension[i] === 'jpeg' || extension[i] === 'jpg') &&\n                    (words.indexOf('JPG') > -1))) {\n                if (extension.length === 2 || (extension.length === 3 && extension.indexOf('jpeg') !== -1 && extension.indexOf('jpg') !== -1)) {\n                    words = words.replace(/,\\s*$/, '');\n                }\n                words += ' ' + andObj['value'];\n            }\n            switch (extension[i]) {\n                case 'jpeg':\n                case 'jpg':\n                    if (words.indexOf('JPG') === -1) {\n                        words += ' JPG,';\n                    }\n                    break;\n                case 'png':\n                    words += ' PNG,';\n                    break;\n                case 'svg':\n                    words += ' SVG,';\n                    break;\n                case 'webp':\n                    words += ' WebP,';\n                    break;\n            }\n            if (i === extension.length - 1) {\n                words = words.slice(0, -1);\n            }\n        }\n        return words;\n    };\n    /**\n     *\n     * This Method will add events to component (element, event, method, current reference)\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.wireEvent = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'keydown', this.keyDownEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'keypress', this.keyUpEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.upperCanvas, 'mousedown', this.mouseDownEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.upperCanvas, 'mousemove', this.mouseMoveEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.upperCanvas, 'mouseup', this.mouseUpEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mouseup', this.mouseUpEventHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.lowerCanvas, 'mousedown', this.canvasMouseDownHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.lowerCanvas, 'mousemove', this.canvasMouseMoveHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.lowerCanvas, 'mouseup', this.canvasMouseUpHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.upperCanvas, 'touchstart', this.touchStartHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.lowerCanvas, 'touchstart', this.touchStartHandler, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.lowerCanvas, 'mousewheel DOMMouseScroll', this.handleScroll, this);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.upperCanvas, 'mousewheel DOMMouseScroll', this.handleScroll, this);\n        window.addEventListener('resize', this.windowResizeHandler.bind(this));\n        if ((!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'safari')) {\n            screen.orientation.addEventListener('change', this.screenOrientation.bind(this));\n        }\n        this.notify('shape', { prop: 'wireEvent', onPropertyChange: false });\n    };\n    /**\n     *\n     * This Method will remove events from component\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.unwireEvent = function () {\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'keydown', this.keyDownEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'keypress', this.keyUpEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.upperCanvas, 'mousedown', this.mouseDownEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.upperCanvas, 'mousemove', this.mouseMoveEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.upperCanvas, 'mouseup', this.mouseUpEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mouseup', this.mouseUpEventHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.lowerCanvas, 'mousedown', this.canvasMouseDownHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.lowerCanvas, 'mousemove', this.canvasMouseMoveHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.lowerCanvas, 'mouseup', this.canvasMouseUpHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.upperCanvas, 'touchstart', this.touchStartHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.lowerCanvas, 'touchstart', this.touchStartHandler);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.lowerCanvas, 'mousewheel DOMMouseScroll', this.handleScroll);\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.upperCanvas, 'mousewheel DOMMouseScroll', this.handleScroll);\n        window.removeEventListener('resize', this.windowResizeHandler.bind(this));\n        if ((!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'safari')) {\n            screen.orientation.removeEventListener('change', this.screenOrientation.bind(this));\n        }\n        this.notify('shape', { prop: 'unWireEvent', onPropertyChange: false });\n        this.notify('selection', { prop: 'unWireEvent', onPropertyChange: false });\n    };\n    ImageEditor.prototype.createCanvas = function () {\n        this.element.style.boxSizing = 'border-box';\n        var obj = { toolbarHeight: 0 };\n        this.notify('toolbar', { prop: 'getToolbarHeight', value: { obj: obj } });\n        var height = obj['toolbarHeight'];\n        if (this.toolbar && this.toolbar.length > 0 && this.toolbar.indexOf('Open') === -1) {\n            height = 0;\n        }\n        this.element.style.width = this.width;\n        this.element.style.height = this.height;\n        var canvasWrapperElement = this.createElement('div', { id: this.element.id + '_canvasWrapper', className: 'e-canvas-wrapper' });\n        canvasWrapperElement.style.cssText = \"height: \" + (this.element.offsetHeight - height - 2) + \"px; width: \" + (this.element.offsetWidth - 2) + \"px; position: relative; overflow: hidden; margin: 0 auto;\";\n        var canvasWrapper = this.element.appendChild(canvasWrapperElement);\n        var dragObj = { key: 'DragText' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: dragObj } });\n        var dropObj = { key: 'DropText' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: dropObj } });\n        var browseObj = { key: 'BrowseText' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: browseObj } });\n        var dropAreaElement = this.createElement('div', { id: this.element.id + '_dropArea', className: 'e-ie-drop-area' });\n        dropAreaElement.style.position = 'relative';\n        var dropIconElement = this.createElement('span', { className: 'e-ie-drop-icon e-icons e-image' });\n        dropIconElement.style.position = 'absolute';\n        var dropContentElement = this.createElement('span', { className: 'e-ie-drop-content' });\n        dropContentElement.style.cssText = 'position: absolute; display: none;';\n        dropContentElement.textContent = dragObj['value'] + ' ';\n        var minDropContentElem = this.createElement('span', { className: 'e-ie-min-drop-content' });\n        minDropContentElem.style.position = 'absolute';\n        minDropContentElem.textContent = dropObj['value'] + ' ';\n        var dropAnchorElement = this.createElement('a', { id: this.element.id + '_dropBrowse', className: 'e-ie-drop-browse' });\n        dropAnchorElement.textContent = browseObj['value'];\n        var minDropAnchorElem = this.createElement('a', { id: this.element.id + '_dropBrowse', className: 'e-ie-drop-browse' });\n        minDropAnchorElem.textContent = browseObj['value'];\n        dropContentElement.appendChild(dropAnchorElement);\n        minDropContentElem.appendChild(minDropAnchorElem);\n        dropAnchorElement.href = '';\n        minDropAnchorElem.href = '';\n        var dropInfoElement = this.createElement('span', { className: 'e-ie-drop-info', attrs: { position: 'absolute' } });\n        this.updateDropInfoContent(dropInfoElement);\n        var dropUploader = dropAreaElement.appendChild(this.createElement('input', {\n            id: this.element.id + '_dropfileUpload', className: 'e-fileUpload e-image-upload'\n        }));\n        dropUploader.setAttribute('type', 'file');\n        dropUploader.setAttribute('accept', 'image/*');\n        dropAreaElement.appendChild(dropIconElement);\n        dropAreaElement.appendChild(dropContentElement);\n        dropAreaElement.appendChild(minDropContentElem);\n        dropAreaElement.appendChild(dropInfoElement);\n        canvasWrapper.appendChild(dropAreaElement);\n        this.lowerCanvas = canvasWrapper.appendChild(this.createElement('canvas', {\n            id: this.element.id + '_lowerCanvas', attrs: { name: 'canvasImage' }\n        }));\n        this.maskCanvas = canvasWrapper.appendChild(this.createElement('canvas', {\n            id: this.element.id + '_maskCanvas', attrs: { name: 'canvasImage' }\n        }));\n        this.upperCanvas = canvasWrapper.appendChild(this.createElement('canvas', {\n            id: this.element.id + '_upperCanvas', attrs: { name: 'canvasImage' }\n        }));\n        this.inMemoryCanvas = this.createElement('canvas', {\n            id: this.element.id + '_inMemoryCanvas', attrs: { name: 'canvasImage' }\n        });\n        this.baseImgCanvas = this.createElement('canvas', {\n            id: this.element.id + '_baseImgCanvas', attrs: { name: 'canvasImage' }\n        });\n        this.textArea = canvasWrapper.appendChild(this.createElement('textarea', {\n            id: this.element.id + '_textArea', className: 'e-textarea', attrs: { name: 'textArea' }\n        }));\n        var dialog = this.element.appendChild(this.createElement('div', {\n            id: this.element.id + '_dialog', className: 'e-dialog'\n        }));\n        dialog.style.display = 'none';\n        var uploader = this.element.appendChild(this.createElement('input', {\n            id: this.element.id + '_fileUpload', className: 'e-fileUpload'\n        }));\n        uploader.setAttribute('type', 'file');\n        uploader.setAttribute('accept', 'image/*');\n        uploader.style.display = 'none';\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.style.lineHeight = 'normal';\n        this.lowerCanvas.style.width = this.upperCanvas.style.width = this.maskCanvas.style.width =\n            this.inMemoryCanvas.style.width = '100%';\n        this.lowerCanvas.style.height = this.upperCanvas.style.height = this.maskCanvas.style.height =\n            this.inMemoryCanvas.style.height = '100%';\n        this.upperCanvas.style.position = this.lowerCanvas.style.position = this.maskCanvas.style.position =\n            this.textArea.style.position = 'absolute';\n        this.textArea.style.backgroundColor = 'transparent';\n        this.textArea.style.display = 'none';\n        this.maskCanvas.style.display = this.textArea.style.resize = 'none';\n        this.lowerContext = this.lowerCanvas.getContext('2d');\n        this.baseImg = this.createElement('img', {\n            id: this.element.id + '_orgImg', attrs: { name: 'Image', crossorigin: 'anonymous' }\n        });\n        this.upperCanvas.style.cursor = this.cursor = 'default';\n        this.upperCanvas.style.display = 'block';\n        this.upperContext = this.upperCanvas.getContext('2d');\n        dropAnchorElement.addEventListener('click', function (e) {\n            e.preventDefault();\n            dropUploader.click();\n            return false;\n        });\n        minDropAnchorElem.addEventListener('click', function (e) {\n            e.preventDefault();\n            dropUploader.click();\n            return false;\n        });\n    };\n    ImageEditor.prototype.touchStartHandler = function (e) {\n        this.notify('selection', { prop: 'touchStartHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.mouseDownEventHandler = function (e) {\n        if (e.target.className === 'e-ie-drop-browse') {\n            return;\n        }\n        this.notify('selection', { prop: 'mouseDownEventHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.mouseMoveEventHandler = function (e) {\n        this.notify('selection', { prop: 'mouseMoveEventHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.mouseUpEventHandler = function (e) {\n        if (e.target.className === 'e-ie-drop-browse') {\n            return;\n        }\n        this.notify('selection', { prop: 'mouseUpEventHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.keyDownEventHandler = function (e) {\n        this.notify('selection', { prop: 'keyDownEventHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.keyUpEventHandler = function (e) {\n        if ((this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block')\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            && e.target.id === this.element.id + '_textArea') {\n            this.notify('selection', { prop: 'textKeyDown', value: { e: e } });\n        }\n    };\n    ImageEditor.prototype.canvasMouseDownHandler = function (e) {\n        if (e.target.className === 'e-ie-drop-browse') {\n            return;\n        }\n        this.notify('selection', { prop: 'canvasMouseDownHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.canvasMouseMoveHandler = function (e) {\n        this.notify('selection', { prop: 'canvasMouseMoveHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.canvasMouseUpHandler = function (e) {\n        if (e.target.className === 'e-ie-drop-browse') {\n            return;\n        }\n        this.notify('selection', { prop: 'canvasMouseUpHandler', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.handleScroll = function (e) {\n        this.notify('selection', { prop: 'handleScroll', onPropertyChange: false, value: { e: e } });\n    };\n    ImageEditor.prototype.adjustToScreen = function () {\n        this.update();\n    };\n    ImageEditor.prototype.screenOrientation = function () {\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            setTimeout(this.adjustToScreen.bind(this), 100);\n        }\n    };\n    ImageEditor.prototype.windowResizeHandler = function () {\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.element.classList.contains('e-image-editor')) {\n            this.adjustToScreen();\n        }\n    };\n    ImageEditor.prototype.notifyResetForAllModules = function () {\n        var modules = this.requiredModules();\n        for (var i = 0; i < modules.length; i++) {\n            var module = modules[i].member;\n            this.notify(module === 'toolbar-module' ? 'toolbar' : module, { prop: 'reset', onPropertyChange: false });\n        }\n    };\n    ImageEditor.prototype.allowShape = function (x, y) {\n        this.isPublicMethod = true;\n        this.applyShapes();\n        var obj = { inRange: false };\n        this.notify('shape', { prop: 'isPointsInRange', onPropertyChange: false,\n            value: { x: x, y: y, obj: obj } });\n        return obj['inRange'];\n    };\n    ImageEditor.prototype.manageActiveAction = function () {\n        this.applyShapes();\n        if (this.activeObj.shape && this.activeObj.shape.indexOf('crop') > -1) {\n            this.discard();\n        }\n    };\n    /**\n     * Clears the current selection performed in the image editor.\n     *\n     * @param { boolean } resetCrop - Specifies to reset last cropped image.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.clearSelection = function (resetCrop) {\n        this.notify('selection', { prop: 'clearSelection', onPropertyChange: false, value: { resetCrop: resetCrop } });\n    };\n    /**\n     * Crops an image based on the selection done in the image editor.\n     *\n     * {% codeBlock src='image-editor/crop/index.md' %}{% endcodeBlock %}\n     *\n     * @remarks\n     * The selection can be done through programmatically using the 'select' method or through UI interactions.\n     *\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.crop = function () {\n        var obj = { isCrop: false };\n        this.notify('crop', { prop: 'crop', onPropertyChange: false, value: { obj: obj } });\n        return obj['isCrop'];\n    };\n    /**\n     * Flips an image by horizontally or vertically in the image editor.\n     *\n     * {% codeBlock src='image-editor/zoom/index.md' %}{% endcodeBlock %}\n     *\n     * @param { Direction } direction - Specifies the direction to flip the image.\n     * A horizontal direction for horizontal flipping and vertical direction for vertical flipping.\n     *\n     * @remarks\n     * It flips the shapes including rectangle, circle, line, text, image, and freehand drawings.\n     *\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.flip = function (direction) {\n        this.applyShapes();\n        this.updateImageTransformColl(direction.toLowerCase() + 'flip');\n        this.notify('transform', { prop: 'flip', value: { direction: direction } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n        this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n        var actionArgs = { action: 'flip', actionEventArgs: this.editCompleteArgs };\n        this.triggerEditCompleteEvent(actionArgs);\n    };\n    /**\n     * Returns an image as ImageData to load it in to a canvas.\n     *\n     * @param {boolean} [includeAnnotations=true] - Optional. Specifies whether the returned image data should include annotations. The default value is true, meaning annotations are included.\n     *\n     * @remarks\n     * The data returned from this method is directly drawn in a canvas using 'putImageData' method.\n     * And then the user can get the base64 string from the canvas using toDataURL method.\n     *\n     * @returns {ImageData}.\n     */\n    ImageEditor.prototype.getImageData = function (includeAnnotations) {\n        includeAnnotations = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(includeAnnotations) ? true : includeAnnotations;\n        var imageData;\n        if (includeAnnotations) {\n            var obj = { canvas: null };\n            this.applyShapes();\n            this.notify('export', { prop: 'exportToCanvas', value: { object: obj } });\n            imageData = obj['canvas'].getContext('2d').getImageData(0, 0, obj['canvas'].width, obj['canvas'].height);\n        }\n        else if (this.isMaskImage && this.element.getAttribute('data-value') === 'mask-drawing') {\n            imageData = this.getData(true);\n            this.updateColl('reset');\n        }\n        else {\n            imageData = this.getData();\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n        }\n        return imageData;\n    };\n    /**\n     *  Opens an image as URL or ImageData for editing in an image editor.\n     *\n     * @param {string | ImageData } data - Specifies url of the image or image data.\n     * @param {boolean} [resetChanges=true] - Optional. Determines whether to reset existing changes when opening the image. The default value is true, which resets all existing changes.\n     * @param {ImageSettings} imageSettings - Optional. Specifies the image setting that contains background color to apply when opening a transparent image. The default value of background color is an empty string (''), meaning no background color is applied by default when a transparent image is opened.\n     *\n     * @remarks\n     * The supported file types are JPG, JPEG, PNG, and SVG.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.open = function (data, resetChanges, imageSettings) {\n        resetChanges = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resetChanges) ? true : resetChanges;\n        if (resetChanges) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {\n                return;\n            }\n            var dropArea = document.getElementById(this.element.id + '_dropArea');\n            if (dropArea) {\n                dropArea.style.display = 'none';\n            }\n            this.notify('draw', { prop: 'open', value: { data: data } });\n        }\n        else {\n            this.updateImage(data, imageSettings ? imageSettings.backgroundColor : null);\n        }\n    };\n    /**\n     * Reset all the changes done in an image editor and revert to original image.\n     *\n     * @remarks\n     * The undo redo collection also cleared while resetting the image editor.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.reset = function () {\n        this.updateColl('reset');\n        var obj = { isErrorImage: false };\n        this.notify('draw', { prop: 'getErrorImage', value: { obj: obj } });\n        if (!this.disabled && !obj['isErrorImage']) {\n            this.clearContext(this.inMemoryContext);\n            this.clearContext(this.lowerContext);\n            this.clearContext(this.upperContext);\n            this.notify('shape', { prop: 'setRedactType', onPropertyChange: false, value: { redactType: 'blur' } });\n            this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                    isApplyBtn: false, isCropping: false, isZooming: null, cType: null } });\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && document.getElementById(this.element.id + '_bottomToolbar')) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(document.getElementById(this.element.id + '_bottomToolbar'), 'toolbar').destroy();\n                this.notify('toolbar', { prop: 'create-bottom-toolbar', onPropertyChange: false });\n            }\n            var isImageLoaded = this.isImageLoaded;\n            this.currObjType.isUndoAction = this.isUndoRedo = this.togglePan = this.togglePen = this.isImageLoaded = this.isFinetuning = false;\n            this.isCircleCrop = this.isCropTab = false;\n            this.objColl = [];\n            this.transform.degree = 0;\n            this.upperCanvas.style.display = 'block';\n            this.transform.currFlipState = '';\n            this.allowDownScale = true;\n            this.upperCanvas.style.cursor = this.cursor = this.lowerCanvas.style.cursor = 'default';\n            this.lowerContext.lineWidth = this.upperContext.lineWidth = undefined;\n            this.frameDestPoints = null;\n            this.textArea.value = this.textArea.textContent = '';\n            this.textArea.style.display = 'none';\n            this.lowerContext.filter = this.canvasFilter = this.getDefaultFilter();\n            this.img.destLeft = this.img.destTop = this.img.srcLeft = this.img.srcTop = 0;\n            this.img.destWidth = this.img.destHeight = this.img.srcWidth = this.img.srcHeight = null;\n            this.currSelectionPoint = null;\n            this.panPoint.currentPannedPoint = { x: 0, y: 0 };\n            this.rotateFlipColl = [];\n            this.points = [];\n            this.pointColl = {};\n            this.freehandCounter = 0;\n            this.notify('draw', { prop: 'resetPanPoints' });\n            this.lowerCanvas.style.left = this.upperCanvas.style.left = '';\n            this.fontSizeColl = [];\n            this.lowerCanvas.style.top = this.upperCanvas.style.top = '';\n            this.lowerCanvas.style.maxWidth = this.upperCanvas.style.maxWidth = '';\n            this.lowerCanvas.style.maxHeight = this.upperCanvas.style.maxHeight = '';\n            this.transform.defaultZoomFactor = this.transform.zoomFactor = 0;\n            this.transform.cropZoomFactor = null;\n            this.frameObj = { type: 'none', color: '#fff', size: 20, inset: 20, offset: 20, radius: 0, amount: 1, border: 'solid', gradientColor: '' };\n            this.tempFrameObj = { type: 'none', color: '#fff', size: 20, inset: 20, offset: 20, radius: 0, amount: 1, border: 'solid', gradientColor: '' };\n            this.currObjType = { shape: '', isDragging: false, isActiveObj: false, isText: false, isInitialText: false, isLine: false,\n                isInitialLine: false, isCustomCrop: false, isZoomed: false, isUndoZoom: false,\n                isUndoAction: false, isFiltered: false, isSave: false, isResize: false, isRedact: false };\n            this.cropObj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },\n                totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {},\n                rotateFlipColl: [], degree: 0, currFlipState: '', straighten: 0, zoomFactor: 0, previousZoomValue: 0,\n                destPoints: { startX: 0, startY: 0, width: 0, height: 0 }, frame: 'none',\n                srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '', isBrightAdjust: false,\n                aspectWidth: null, aspectHeight: null, straightenZoom: 0,\n                adjustmentLevel: { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n                    exposure: 0, transparency: 100, sharpen: false, bw: false }, currentFilter: '' };\n            this.afterCropActions = [];\n            this.currentFilter = '';\n            this.tempFrameZoomLevel = null;\n            this.cxtTbarHeight = null;\n            this.straightenPoint = null;\n            this.transform.straighten = 0;\n            this.cancelCropSelection = null;\n            this.aspectWidth = this.aspectHeight = null;\n            this.isResize = this.isMaskImage = false;\n            this.drawingShape = null;\n            this.isShapeDrawing = this.noPushUndo = this.isUndoRedoStack = this.isKBDNavigation = false;\n            this.shapeColl = [];\n            this.tempObjColl = [];\n            this.tempPointColl = [];\n            this.tempShapeColl = [];\n            this.isImageUpdated = false;\n            this.tempToolbarHeight = 0;\n            this.tempToolbar = [];\n            this.tempRedactBlur = 50;\n            this.tempRedactPixel = 40;\n            var obj_1 = { initialZoomValue: false };\n            this.editCompleteArgs = null;\n            this.isFinetuneBtnClick = false;\n            this.notify('draw', { prop: 'getInitialZoomValue', onPropertyChange: false, value: { obj: obj_1 } });\n            if (obj_1['initialZoomValue']) {\n                this.setProperties({ zoomSettings: { zoomFactor: obj_1['initialZoomValue'] } }, true);\n            }\n            var qtArea = document.getElementById(this.element.id + '_quickAccessToolbarArea');\n            if (qtArea) {\n                qtArea.style.display = 'none';\n            }\n            this.notifyResetForAllModules();\n            this.notify('filter', { prop: 'update-finetunes' });\n            if (this.toolbarTemplate) {\n                this.toolbarHeight = this.element.querySelector('#' + this.element.id + '_toolbarArea').clientHeight;\n            }\n            else if (this.element.querySelector('#' + this.element.id + '_toolbar')) {\n                this.toolbarHeight = this.element.querySelector('#' + this.element.id + '_toolbar').clientHeight;\n            }\n            this.notify('toolbar', { prop: 'setToolbarHeight', value: { height: this.toolbarHeight } });\n            this.isImageLoaded = isImageLoaded;\n            this.straightenBaseImageCanvas();\n            this.isImageLoaded = false;\n            this.notify('draw', { prop: 'update-canvas', onPropertyChange: false });\n            this.isImageLoaded = isImageLoaded;\n            this.prevStraightenedDegree = 0;\n            var ctWrapper = this.element.querySelector('.e-contextual-toolbar-wrapper');\n            if (ctWrapper) {\n                ctWrapper.classList.add('e-hide');\n            }\n            this.notify('toolbar', { prop: 'refresh-dropdown-btn', value: { isDisabled: false } });\n            this.notify('toolbar', { prop: 'enable-disable-btns' });\n            var straightenObj = { bool: this.isStraightening };\n            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && straightenObj['bool']) {\n                this.notify('crop', { prop: 'resizeWrapper' });\n            }\n            var saveDialog = this.element.querySelector('#' + this.element.id + '_saveDialog');\n            if (saveDialog) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(saveDialog, 'dialog').close();\n            }\n            var actionArgs = { action: 'reset', actionEventArgs: null };\n            this.triggerEditCompleteEvent(actionArgs);\n        }\n    };\n    /**\n     * Rotate an image to clockwise and anti-clockwise.\n     *\n     * {% codeBlock src='image-editor/rotate/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} degree - Specifies a degree to rotate an image.\n     * A positive integer value for clockwise and negative integer value for anti-clockwise rotation.\n     *\n     * @remarks\n     * It rotated the shapes including rectangle, circle, line, text, image, and freehand drawings.\n     *\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.rotate = function (degree) {\n        var obj = { isRotate: false };\n        this.applyShapes();\n        if (degree === 90 || degree === -90) {\n            this.updateImageTransformColl(degree === 90 ? 'rotateright' : 'rotateleft');\n        }\n        this.notify('transform', { prop: 'rotate', value: { degree: degree, obj: obj } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n        var actionArgs = { action: 'rotate', actionEventArgs: this.editCompleteArgs };\n        this.triggerEditCompleteEvent(actionArgs);\n        return obj['isRotate'];\n    };\n    /**\n     * Export an image using the specified file name and the extension.\n     *\n     * @param {string} type - Specifies a format of image to be saved.\n     * @param {string} fileName – Specifies a file name to be saved\n     * @param {number} imageQuality – Specifies the quality of an image to be saved. The default value is “1” which represents the original size of the image if not specified.\n     *\n     * @remarks\n     * The supported file types are JPG, JPEG, PNG, and SVG.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.export = function (type, fileName, imageQuality) {\n        this.applyShapes();\n        this.notify('export', { prop: 'export', onPropertyChange: false, value: { type: type, fileName: fileName, imgQuality: imageQuality } });\n    };\n    /**\n     * Perform selection in an image editor. The selection helps to crop an image.\n     *\n     * {% codeBlock src='image-editor/select/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} type - Specifies the shape - circle / square / custom selection / pre-defined ratios.\n     * @param {number} startX – Specifies the start x-coordinate point of the selection.\n     * @param {number} startY – Specifies the start y-coordinate point of the selection.\n     * @param {number} width - Specifies the width of the selection area.\n     * @param {number} height - Specifies the height of the selection area.\n     *\n     * @remarks\n     * The selection UI is based on the 'theme' property.\n     *\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.select = function (type, startX, startY, width, height) {\n        this.applyShapes();\n        this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: 'crop-' + type } });\n        this.notify('draw', { prop: 'select', onPropertyChange: false,\n            value: { type: type, startX: startX, startY: startY, width: width, height: height } });\n        if ((startX && startY) || (width && height)) {\n            this.notify('draw', { prop: 'select', onPropertyChange: false,\n                value: { type: type, startX: startX, startY: startY, width: width, height: height } });\n        }\n        else {\n            this.cropObj = { cropZoom: 0, defaultZoom: 0, totalPannedPoint: { x: 0, y: 0 }, totalPannedClientPoint: { x: 0, y: 0 },\n                totalPannedInternalPoint: { x: 0, y: 0 }, tempFlipPanPoint: { x: 0, y: 0 }, activeObj: {},\n                rotateFlipColl: [], degree: 0, currFlipState: '', straighten: 0, zoomFactor: 0, previousZoomValue: 0,\n                destPoints: { startX: 0, startY: 0, width: 0, height: 0 }, frame: 'none',\n                srcPoints: { startX: 0, startY: 0, width: 0, height: 0 }, filter: '', isBrightAdjust: false,\n                aspectWidth: null, aspectHeight: null, straightenZoom: 0,\n                adjustmentLevel: { brightness: 0, contrast: 0, hue: 0, opacity: 100, saturation: 0, blur: 0,\n                    exposure: 0, transparency: 100, sharpen: false, bw: false }, currentFilter: '' };\n        }\n    };\n    /**\n     * Enable or disable a freehand drawing option in an Image Editor.\n     *\n     * @param {boolean} value - Specifies a value whether to enable or disable freehand drawing.\n     *\n     * @returns {void}.\n     * @private\n     */\n    ImageEditor.prototype.freeHandDraw = function (value) {\n        this.notify('freehand-draw', { prop: 'freeHandDraw', onPropertyChange: false, value: { value: value } });\n    };\n    /**\n     * Enable or disable a freehand drawing in an Image Editor.\n     *\n     * @param {boolean} value - Specifies a value whether to enable or disable freehand drawing.\n     *\n     * @remarks\n     * User can directly drawing on a canvas after enabling this option.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.freehandDraw = function (value) {\n        if (!this.disabled && this.isImageLoaded) {\n            if (!value && this.isMaskImage) {\n                this.discard();\n                return;\n            }\n            this.manageActiveAction();\n            this.freeHandDraw(value);\n            var prevObj = { shapeSettingsObj: {} };\n            this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: prevObj } });\n            var shapeSettings = prevObj['shapeSettingsObj'];\n            shapeSettings.type = _index__WEBPACK_IMPORTED_MODULE_2__.ShapeType.FreehandDraw;\n            var shapeChangingArgs = { cancel: false, action: 'insert', previousShapeSettings: shapeSettings,\n                currentShapeSettings: shapeSettings };\n            this.notify('freehand-draw', { prop: 'triggerShapeChanging', value: { shapeChangingArgs: shapeChangingArgs } });\n        }\n    };\n    /**\n     * Enable or disable a panning on the Image Editor.\n     *\n     * @param {boolean} value - Specifies a value whether enable or disable panning.\n     * @param {number} x - Optional, Specifies a value to pan the image horizontally.\n     * @param {number} y - Optional, Specifies a value to pan the image vertically.\n     *\n     * @remarks\n     * This option will take into effect once the image's visibility is hidden when zooming an image or selection has been performed.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.pan = function (value, x, y) {\n        this.applyShapes();\n        this.notify('transform', { prop: 'pan', onPropertyChange: false, value: { value: value, x: x, y: y } });\n    };\n    /**\n     * Zoom in or out on a point in the image editor.\n     *\n     * @param {number} zoomFactor - The percentage-based zoom factor to use (e.g. 20 for 2x zoom).\n     * @param {Point} zoomPoint - The point in the image editor to zoom in/out on.\n     *\n     * @remarks\n     * Zooming directly enables the panning option when the image's visibility is hidden.\n     * User can disable it by using 'Pan' method.\n     * @returns {void}\n     *\n     */\n    ImageEditor.prototype.zoom = function (zoomFactor, zoomPoint) {\n        this.isZoomBtnClick = true;\n        this.notify('transform', { prop: 'zoom', onPropertyChange: false,\n            value: { zoomFactor: zoomFactor, zoomPoint: zoomPoint } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n    };\n    /**\n     * Draw ellipse on an image.\n     *\n     * {% codeBlock src='image-editor/ellipse/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} x - Specifies x-coordinate of ellipse.\n     * @param {number} y - Specifies y-coordinate of ellipse.\n     * @param {number} radiusX - Specifies the radius x point for the ellipse.\n     * @param {number} radiusY - Specifies the radius y point for the ellipse.\n     * @param {number} strokeWidth - Specifies the stroke width of ellipse.\n     * @param {string} strokeColor - Specifies the stroke color of ellipse.\n     * @param {string} fillColor - Specifies the fill color of the ellipse.\n     * @param {number} degree - Specifies the degree to rotate the ellipse.\n     * @param {boolean} isSelected - Specifies to show the ellipse in the selected state.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.drawEllipse = function (x, y, radiusX, radiusY, strokeWidth, strokeColor, fillColor, degree, isSelected) {\n        var isEllipse = false;\n        var isPointsInRange = this.allowShape(x, y);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(y)))) {\n            isEllipse = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawEllipse', onPropertyChange: false, value: { x: x, y: y, radiusX: radiusX, radiusY: radiusY,\n                    strokeWidth: strokeWidth, strokeColor: strokeColor, fillColor: fillColor, degree: degree, isSelected: isSelected } });\n            this.editCompleted();\n        }\n        return isEllipse;\n    };\n    /**\n     * Draw line on an image.\n     *\n     * @param {number} startX – Specifies start point x-coordinate of line.\n     * @param {number} startY – Specifies start point y-coordinate of line.\n     * @param {number} endX - Specifies end point x-coordinates of line.\n     * @param {number} endY - Specifies end point y-coordinates of the line.\n     * @param {number} strokeWidth - Specifies the stroke width of line.\n     * @param {string} strokeColor - Specifies the stroke color of line.\n     * @param {boolean} isSelected - Specifies to show the line in the selected state.\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawLine = function (startX, startY, endX, endY, strokeWidth, strokeColor, isSelected) {\n        var isLine = false;\n        var isPointsInRange = this.allowShape(startX, startY);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startX) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startY)))) {\n            isLine = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawLine', onPropertyChange: false, value: { startX: startX, startY: startY, endX: endX,\n                    endY: endY, strokeWidth: strokeWidth, strokeColor: strokeColor, isSelected: isSelected } });\n            this.editCompleted();\n        }\n        return isLine;\n    };\n    /**\n     * Draw arrow on an image.\n     *\n     * @param {number} startX – Specifies start point x-coordinate of arrow.\n     * @param {number} startY – Specifies start point y-coordinate of arrow.\n     * @param {number} endX - Specifies end point x-coordinates of arrow.\n     * @param {number} endY - Specifies end point y-coordinates of the arrow.\n     * @param {number} strokeWidth - Specifies the stroke width of arrow.\n     * @param {string} strokeColor - Specifies the stroke color of arrow.\n     * @param {ArrowheadType} arrowStart – Specifies the type of arrowhead for start position. The default value is ‘None’.\n     * @param {ArrowheadType} arrowEnd – Specifies the type of arrowhead for end position. The default value is ‘SolidArrow’.\n     * @param {boolean} isSelected - Specifies to show the arrow in the selected state.\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawArrow = function (startX, startY, endX, endY, strokeWidth, strokeColor, arrowStart, arrowEnd, isSelected) {\n        var isArrow = false;\n        var isPointsInRange = this.allowShape(startX, startY);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startX) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startY)))) {\n            isArrow = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawArrow', onPropertyChange: false, value: { startX: startX, startY: startY, endX: endX,\n                    endY: endY, strokeWidth: strokeWidth, strokeColor: strokeColor, arrowStart: arrowStart, arrowEnd: arrowEnd,\n                    isSelected: isSelected } });\n            this.editCompleted();\n        }\n        return isArrow;\n    };\n    /**\n     * Draw path on an image.\n     *\n     * @param {Point[]} pointColl – Specifies collection of start and end x, y-coordinates of path.\n     * @param {number} strokeWidth - Specifies the stroke width of path.\n     * @param {string} strokeColor - Specifies the stroke color of path.\n     * @param {boolean} isSelected - Specifies to show the path in the selected state.\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawPath = function (pointColl, strokeWidth, strokeColor, isSelected) {\n        this.isPublicMethod = true;\n        var obj = { inRange: false };\n        var isPath = false;\n        if (pointColl && pointColl.length > 0) {\n            for (var i = 0; i < pointColl.length; i++) {\n                if (obj['inRange']) {\n                    break;\n                }\n                this.notify('shape', { prop: 'isPointsInRange', onPropertyChange: false,\n                    value: { x: pointColl[i].x, y: pointColl[i].y, obj: obj } });\n            }\n        }\n        if (!this.disabled && this.isImageLoaded && (obj['inRange'] || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pointColl))) {\n            isPath = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawPath', onPropertyChange: false, value: { pointColl: pointColl,\n                    strokeWidth: strokeWidth, strokeColor: strokeColor, isSelected: isSelected } });\n            this.editCompleted();\n        }\n        return isPath;\n    };\n    /**\n     * Draw a rectangle on an image.\n     *\n     * @param {number} x - Specifies x-coordinate of rectangle.\n     * @param {number} y - Specifies y-coordinate of rectangle.\n     * @param {number} width - Specifies the width of the rectangle.\n     * @param {number} height - Specifies the height of the rectangle.\n     * @param {number} strokeWidth - Specifies the stroke width of rectangle.\n     * @param {string} strokeColor - Specifies the stroke color of rectangle.\n     * @param {string} fillColor - Specifies the fill color of the rectangle.\n     * @param {number} degree - Specifies the degree to rotate the rectangle.\n     * @param {boolean} isSelected - Specifies to show the rectangle in the selected state.\n     * @param {number} borderRadius - Specifies the radius to apply border radius to rectangle.\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawRectangle = function (x, y, width, height, strokeWidth, strokeColor, fillColor, degree, isSelected, borderRadius) {\n        var isRectangle = false;\n        var isPointsInRange = this.allowShape(x, y);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(y)))) {\n            isRectangle = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawRectangle', onPropertyChange: false, value: { x: x, y: y, width: width, height: height,\n                    strokeWidth: strokeWidth, strokeColor: strokeColor, fillColor: fillColor, degree: degree, isSelected: isSelected,\n                    radius: borderRadius } });\n            this.editCompleted();\n        }\n        return isRectangle;\n    };\n    /**\n     * Draw a text on an image.\n     *\n     * {% codeBlock src='image-editor/text/index.md' %}{% endcodeBlock %}\n     *\n     * @param {number} x - Specifies x-coordinate of text.\n     * @param {number} y - Specifies y-coordinate of text.\n     * @param {string} text - Specifies the text to add on an image.\n     * @param {string} fontFamily - Specifies the font family of the text.\n     * @param {number} fontSize - Specifies the font size of the text.\n     * @param {boolean} bold - Specifies whether the text is bold or not.\n     * @param {boolean} italic - Specifies whether the text is italic or not.\n     * @param {string} color - Specifies font color of the text.\n     * @param {boolean} isSelected - Specifies to show the text in the selected state.\n     * @param {number} degree - Specifies the degree to rotate the text.\n     * @param {fillColor} fillColor - Specifies the background Color of the text.\n     * @param {string} strokeColor - Specifies the outline color of the text annotation.\n     * @param {number} strokeWidth - Specifies the outline stroke width of the text annotation.\n     * @param {TransformationCollection[]} transformCollection - Specifies the transform collection of the text annotation.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.drawText = function (x, y, text, fontFamily, fontSize, bold, italic, color, isSelected, degree, fillColor, strokeColor, strokeWidth, transformCollection) {\n        var isText = false;\n        var isPointsInRange = this.allowShape(x, y);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(y)))) {\n            isText = true;\n            this.manageActiveAction();\n            this.notify('shape', { prop: 'drawText', onPropertyChange: false, value: { x: x, y: y, text: text, fontFamily: fontFamily,\n                    fontSize: fontSize, bold: bold, italic: italic, color: color, isSelected: isSelected, degree: degree, fillColor: fillColor,\n                    outlineColor: strokeColor, outlineWidth: strokeWidth, transformCollection: transformCollection } });\n            this.editCompleted();\n        }\n        return isText;\n    };\n    /**\n     * Draw an image as annotation on an image.\n     *\n     *\n     * @param {string | ImageData} data - Specifies url of the image or image data.\n     * @param {number} x - Specifies x-coordinate of a starting point for an image.\n     * @param {number} y - Specifies y-coordinate of a starting point for an image.\n     * @param {number} width - Specifies the width of the image.\n     * @param {number} height - Specifies the height of the image.\n     * @param {boolean} isAspectRatio - Specifies whether to maintain aspect ratio or not.\n     * @param {number} degree - Specifies the degree to rotate the image.\n     * @param {number} opacity - Specifies the value for the image.\n     * @param {boolean} isSelected - Specifies to show the image in the selected state.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.drawImage = function (data, x, y, width, height, isAspectRatio, degree, opacity, isSelected) {\n        var isImage = false;\n        var isPointsInRange = this.allowShape(x, y);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(y)))) {\n            this.manageActiveAction();\n            var length_1 = this.objColl.length;\n            this.notify('shape', { prop: 'drawImage', onPropertyChange: false, value: { x: x, y: y, width: width, height: height,\n                    src: data, degree: degree, isAspectRatio: isAspectRatio, opacity: opacity, isSelected: isSelected } });\n            this.editCompleted();\n            if (this.objColl.length > length_1) {\n                isImage = true;\n            }\n        }\n        return isImage;\n    };\n    /**\n     * This method is used to update the existing shapes by changing its height, width, color, and font styles in the component.\n     * Use 'getShapeSettings' method to get the shape which is then passed to change the options of a shape.\n     * {% codeBlock src='image-editor/updateShape/index.md' %}{% endcodeBlock %}\n     *\n     * @param {ShapeSettings} setting - Specifies the shape settings to be updated for the shape on an image.\n     * @param {boolean} isSelected - Specifies to show the shape in the selected state.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.updateShape = function (setting, isSelected) {\n        var obj = { isSelected: false };\n        var isTextArea = false;\n        var freehandObj = { bool: false };\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(setting.id)) {\n            if (setting.strokeColor) {\n                this.activeObj.strokeSettings.strokeColor = setting.strokeColor;\n            }\n            if (setting.fillColor) {\n                this.activeObj.strokeSettings.fillColor = setting.fillColor;\n            }\n            if (setting.strokeWidth) {\n                this.activeObj.strokeSettings.strokeWidth = setting.strokeWidth;\n            }\n            if (setting.index) {\n                this.activeObj.order = setting.index;\n            }\n            if (setting.type === 'FreehandDraw' && setting.strokeWidth) {\n                this.notify('freehand-draw', { prop: 'setPenStrokeWidth', onPropertyChange: false, value: { value: setting.strokeWidth } });\n            }\n        }\n        else {\n            if (setting.type.toLowerCase() === 'text' && (this.textArea.style.display === 'block' ||\n                this.textArea.style.display === 'inline-block')) {\n                this.okBtn(null, true);\n                isTextArea = true;\n            }\n            this.notify('shape', { prop: 'selectShape', onPropertyChange: false, value: { id: setting.id, obj: obj, isShape: true } });\n            this.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: freehandObj } });\n            if (obj['isSelected']) {\n                var tempFontSize = this.activeObj.textSettings.fontSize;\n                this.notify('shape', { prop: 'updateShapeChangeEventArgs', onPropertyChange: false,\n                    value: { shapeSettings: setting } });\n                if (this.activeObj.shape === 'text' && tempFontSize) {\n                    var diff = this.activeObj.textSettings.fontSize - tempFontSize;\n                    if (diff !== 0) {\n                        this.activeObj.activePoint.height += diff;\n                        this.activeObj.activePoint.startY -= (diff / 2);\n                        this.activeObj.activePoint.endY += (diff / 2);\n                        this.notify('draw', { prop: 'updateActiveObject', onPropertyChange: false, value: { actPoint: this.activeObj.activePoint, obj: this.activeObj,\n                                isMouseMove: null, x: null, y: null } });\n                    }\n                }\n                var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n                this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n                this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null, isPreventClearRect: null, isFrame: null } });\n                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n                if (activeObj.shape) {\n                    this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: activeObj } });\n                }\n                if (this.activeObj.shape === 'text') {\n                    this.notify('toolbar', { prop: 'editText', onPropertyChange: false });\n                }\n                if (freehandObj['bool']) {\n                    this.notify('undo-redo', { prop: 'setPreventUR', value: { bool: true } });\n                }\n                this.okBtn(isSelected, true);\n                if (freehandObj['bool']) {\n                    this.notify('undo-redo', { prop: 'setPreventUR', value: { bool: false } });\n                }\n                this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n                this.editCompleteArgs = { action: 'shape-update', currentShapeSettings: setting };\n                this.editCompleted('shape-customize');\n                if (isTextArea) {\n                    this.enableTextEditing();\n                }\n                if (isSelected) {\n                    this.noRedact = true;\n                    this.selectShape(setting.id);\n                }\n            }\n        }\n        return obj['isSelected'];\n    };\n    /**\n     * Select a shape based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform selection.\n     *\n     * {% codeBlock src='image-editor/selectShape/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} id - Specifies the shape id to select a shape on an image.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.selectShape = function (id) {\n        this.applyShapes();\n        var obj = { isSelected: false };\n        this.notify('shape', { prop: 'selectShape', onPropertyChange: false, value: { id: id, obj: obj, isShape: true } });\n        this.editCompleted('shape-select');\n        this.noRedact = false;\n        return obj['isSelected'];\n    };\n    /**\n     * Deletes a shape based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform selection.\n     *\n     * {% codeBlock src='image-editor/deleteShape/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} id - Specifies the shape id to delete the shape on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.deleteShape = function (id) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var shape = this.getShapeSetting(id);\n        if (shape.type === 'Redact') {\n            return;\n        }\n        this.applyShapes();\n        this.notify('shape', { prop: 'deleteShape', onPropertyChange: false, value: { id: id, isShape: true } });\n        this.editCompleted('shape-delete');\n    };\n    /**\n     * Get particular shapes details based on id of the shape which is drawn on an image editor.\n     *\n     * {% codeBlock src='image-editor/getShapeSetting/index.md' %}{% endcodeBlock %}\n     *\n     * @param {string} id - Specifies the shape id on an image.\n     * @returns {ShapeSettings}.\n     *\n     */\n    ImageEditor.prototype.getShapeSetting = function (id) {\n        this.applyShapes();\n        var obj = { shapeDetails: null };\n        this.notify('shape', { prop: 'getShapeSetting', onPropertyChange: false,\n            value: { id: id, obj: obj } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n        var shapeDetails = obj['shapeDetails'] ? obj['shapeDetails'] : {};\n        return shapeDetails;\n    };\n    /**\n     * Get all the shapes details which is drawn on an image editor.\n     *\n     * @returns {ShapeSettings[]}.\n     */\n    ImageEditor.prototype.getShapeSettings = function () {\n        this.applyShapes();\n        var obj = { shapeDetailsColl: [] };\n        this.notify('shape', { prop: 'getShapeSettings', onPropertyChange: false, value: { obj: obj } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        return obj.shapeDetailsColl.filter(function (item) { return item.type !== 'redact'; });\n    };\n    /**\n     * Get all the shapes details which is drawn on an image editor.\n     *\n     * @returns {RedactSettings[]}.\n     */\n    ImageEditor.prototype.getRedacts = function () {\n        this.applyShapes();\n        var obj = { shapeDetailsColl: [] };\n        this.notify('shape', { prop: 'getRedactSettings', onPropertyChange: false, value: { obj: obj } });\n        this.notify('draw', { prop: 'redrawDownScale' });\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        return obj.shapeDetailsColl.filter(function (item) { return item.type !== 'redact'; });\n    };\n    /**\n     * Select a redaction based on the given redaction id.\n     * Use 'getRedacts' method to get the shape id which is then passed to perform selection.\n     *\n     *\n     * @param {string} id - Specifies the shape id to select a redact on an image.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.selectRedact = function (id) {\n        this.applyShapes();\n        var obj = { isSelected: false };\n        this.notify('shape', { prop: 'selectShape', onPropertyChange: false, value: { id: id, obj: obj, isRedact: true } });\n        this.editCompleted('redact-select');\n        this.noRedact = false;\n        return obj['isSelected'];\n    };\n    /**\n     * Deletes a redaction based on the given shape id.\n     * Use 'getRedacts' method to get the redaaction id which is then passed to perform deletion.\n     *\n     *\n     * @param {string} id - Specifies the redaction id to delete the redaction on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.deleteRedact = function (id) {\n        this.applyShapes();\n        this.notify('shape', { prop: 'deleteShape', onPropertyChange: false, value: { id: id, isRedact: true } });\n        this.editCompleted('redact-delete');\n    };\n    /**\n     * This method is used to update the existing redacts by changing its height, width, blur, and pixel size in the component.\n     * Use 'getRedacts' method to get the redacts which is then passed to change the options of a redacts.\n     *\n     * @param {RedactSettings} setting - Specifies the redact settings to be updated for the shape on an image.\n     * @param {boolean} isSelected - Specifies to show the redacts in the selected state.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.updateRedact = function (setting, isSelected) {\n        this.applyShapes();\n        var obj = { isSelected: false };\n        this.notify('shape', { prop: 'selectShape', onPropertyChange: false, value: { id: setting.id, obj: obj, isRedact: true } });\n        if (obj['isSelected']) {\n            this.notify('shape', { prop: 'updateShapeChangeEventArgs', onPropertyChange: false,\n                value: { shapeSettings: setting } });\n            if (setting.blurIntensity) {\n                this.activeObj.redactBlur = setting.blurIntensity;\n            }\n            if (setting.pixelSize) {\n                this.activeObj.redactPixelate = setting.pixelSize;\n            }\n            this.activeObj.redactType = setting.type.toLowerCase() === 'blur' ? 'blur' : 'pixelate';\n            var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n            this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null, isPreventClearRect: null, isFrame: null } });\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            if (activeObj.shape) {\n                this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: activeObj } });\n            }\n            this.okBtn(isSelected, true);\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            this.editCompleteArgs = { action: 'redact-update', currentShapeSettings: setting };\n            this.editCompleted('redact-customize');\n            if (isSelected) {\n                this.selectRedact(setting.id);\n            }\n        }\n        return obj['isSelected'];\n    };\n    /**\n     * To refresh the Canvas Wrapper.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.update = function () {\n        this.notify('transform', { prop: 'update' });\n    };\n    /**\n     * Finetuning an image with the given type of finetune and its value in the image editor.\n     *\n     * @param {ImageFinetuneOption } finetuneOption - Specifies the finetune options to be performed in the image.\n     * @param {number } value - Specifies the value for finetuning the image.\n     *\n     * @remarks\n     * The finetuning will not affect the shapes background and border color.\n     *\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.finetuneImage = function (finetuneOption, value) {\n        if (!this.disabled && this.isImageLoaded) {\n            this.manageActiveAction();\n            this.notify('filter', { prop: 'finetuneImage', value: { value: value, option: finetuneOption } });\n            this.editCompleteArgs = { finetune: finetuneOption, value: value };\n            this.editCompleted('fine-tune');\n        }\n    };\n    /**\n     * Filtering an image with the given type of filters.\n     *\n     * @param {ImageFilterOption } filterOption - Specifies the filter options to the image.\n     *\n     * @remarks\n     * The filtering will not affect the shape's background and border color.\n     * @returns {void}.\n     */\n    ImageEditor.prototype.applyImageFilter = function (filterOption) {\n        if (!this.disabled && this.isImageLoaded) {\n            this.manageActiveAction();\n            this.notify('filter', { prop: 'applyImageFilter', value: { option: filterOption.toString() } });\n            this.editCompleteArgs = { filter: filterOption };\n            this.editCompleted('filter');\n            this.canvasFilter = this.lowerContext.filter;\n            this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n        }\n    };\n    /**\n     * Reverse the last action which performed by the user in the Image Editor.\n     *\n     * @remarks\n     * This method will take into effect once the 'allowUndoRedo' property is enabled.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.undo = function () {\n        this.manageActiveAction();\n        this.notify('undo-redo', { prop: 'undo', onPropertyChange: false });\n        this.notify('draw', { prop: 'redrawDownScale' });\n    };\n    /**\n     * Redo the last user action that was undone by the user or `undo` method.\n     *\n     * @remarks\n     * This method will take into effect once the 'allowUndoRedo' property is enabled.\n     * @returns {void}.\n     */\n    ImageEditor.prototype.redo = function () {\n        this.manageActiveAction();\n        this.notify('undo-redo', { prop: 'redo', onPropertyChange: false });\n        this.notify('draw', { prop: 'redrawDownScale' });\n    };\n    /**\n     * Get the dimension of an image in the image editor such as x, y, width, and height.\n     * The method helps to get dimension after cropped an image.\n     *\n     * @returns {Dimension}.\n     * A Dimension object containing the x, y, width, and height of an image.\n     */\n    ImageEditor.prototype.getImageDimension = function () {\n        return { x: this.img.destLeft, y: this.img.destTop, width: this.img.destWidth, height: this.img.destHeight };\n    };\n    /**\n     * Resize an image by changing its width and height.\n     *\n     * @param {number} width - Specifies the width of an image.\n     * @param {number} height - Specifies the height of an image.\n     * @param {boolean} isAspectRatio - Specifies whether the scaling option is enabled or not.\n     *\n     * @returns {boolean} - A boolean value indicating the success of the resizing operation.\n     */\n    ImageEditor.prototype.resize = function (width, height, isAspectRatio) {\n        var isResized = false;\n        if (((width.toString()).length <= 4 && (height.toString()).length <= 4) && (!this.isCircleCrop || isAspectRatio)) {\n            this.manageActiveAction();\n            this.notify('toolbar', { prop: 'resizeClick', value: { bool: false } });\n            var destPoints = { startX: this.img.destLeft, startY: this.img.destTop, width: this.img.destWidth,\n                height: this.img.destHeight };\n            if (isAspectRatio) {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: false, isCropping: false } });\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: false, isCropping: false } });\n            }\n            else {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'resize',\n                        isApplyBtn: false, isCropping: false } });\n            }\n            var aspectRatioWidth = this.element.querySelector('#' + this.element.id + '_resizeWidth');\n            var aspectRatioHeight = this.element.querySelector('#' + this.element.id + '_resizeHeight');\n            if (aspectRatioWidth && aspectRatioHeight) {\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(aspectRatioWidth, 'numerictextbox').value = Math.floor(width);\n                aspectRatioWidth.value = Math.floor(width).toString() + ' px';\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(aspectRatioHeight, 'numerictextbox').value = Math.floor(height);\n                aspectRatioHeight.value = Math.floor(height).toString() + ' px';\n            }\n            this.notify('transform', { prop: 'resize', value: { width: width, height: height, isAspectRatio: isAspectRatio } });\n            if (destPoints.startX !== this.img.destLeft || destPoints.startY !== this.img.destTop ||\n                destPoints.width !== this.img.destWidth || destPoints.height !== this.img.destHeight) {\n                isResized = true;\n                this.aspectWidth = width;\n                this.aspectHeight = height;\n                if (isAspectRatio) {\n                    this.aspectHeight = null;\n                }\n                this.okBtn(false, false, true);\n            }\n            else {\n                this.notify('draw', { prop: 'performCancel', value: { isContextualToolbar: null } });\n            }\n            this.notify('draw', { prop: 'redrawDownScale' });\n        }\n        return isResized;\n    };\n    /**\n     * Draw a frame on an image.\n     *\n     * @param { FrameType} frameType - Specifies the frame option to be drawn on an image.\n     * @param {string} color - Specifies the color of a frame on an image. The default value is ‘#fff’.\n     * @param {string} gradientColor - Specifies the gradient color of a frame on an image. The default value is ‘’.\n     * @param {number} size - Specifies the size of the frame as a percentage. It can be provided as an integer percentage (e.g., 10). Defaults to 20 if not specified.\n     * @param {number} inset - Specifies the inset value for line, hook, and inset type frames, as a percentage. It can be provided as an integer percentage (e.g., 10). Defaults to 0 if not specified.\n     * @param {number} offset - Specifies the offset value for line and inset type frames, as a percentage. It can be provided as an integer percentage (e.g., 10). Defaults to 0 if not specified.\n     * @param {number} borderRadius - Specifies the border radius for line-type frames, as a percentage. It can be provided as an integer percentage (e.g., 10). Defaults to 0 if not specified.\n     * @param {FrameLineStyle} frameLineStyle - Specifies the type of line to be drawn for line-type frames. Default to Solid if not specified.\n     * @param {number} lineCount - Specifies the number of lines for line-type frames. Defaults to 0 if not specified.\n     *\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawFrame = function (frameType, color, gradientColor, size, inset, offset, borderRadius, frameLineStyle, lineCount) {\n        this.manageActiveAction();\n        var isFrame = false;\n        var obj = { frameChangeEventArgs: null };\n        color = color ? color : '#fff';\n        gradientColor = gradientColor ? gradientColor : '';\n        size = size ? size : 20;\n        inset = inset ? inset : 0;\n        offset = offset ? offset : 0;\n        borderRadius = borderRadius ? borderRadius : 0;\n        frameLineStyle = frameLineStyle ? frameLineStyle : _index__WEBPACK_IMPORTED_MODULE_2__.FrameLineStyle.Solid;\n        lineCount = lineCount ? lineCount : 0;\n        var prevFrameSettings = { type: this.toPascalCase(this.frameObj.type), color: this.frameObj.color,\n            gradientColor: this.frameObj.gradientColor, size: this.frameObj.size, inset: this.frameObj.inset,\n            offset: this.frameObj.offset, borderRadius: this.frameObj.radius,\n            frameLineStyle: this.toPascalCase(this.frameObj.border), lineCount: this.frameObj.amount };\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.tempFrameObj, this.frameObj);\n        this.tempFrameZoomLevel = this.transform.zoomFactor;\n        this.frameDestPoints = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.img, {}, true);\n        this.notify('toolbar', { prop: 'frameToolbarClick' });\n        this.frameObj.type = frameType.toLowerCase();\n        this.frameObj.color = color;\n        this.frameObj.gradientColor = gradientColor;\n        this.frameObj.size = size;\n        this.frameObj.inset = inset;\n        this.frameObj.offset = offset;\n        this.frameObj.radius = borderRadius;\n        this.frameObj.border = frameLineStyle.toLowerCase();\n        this.frameObj.amount = lineCount;\n        this.notify('draw', { prop: 'triggerFrameChange', value: { prevFrameSettings: prevFrameSettings, obj: obj } });\n        if (obj['frameChangeEventArgs'] && !obj['frameChangeEventArgs'].cancel) {\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null } });\n            if (JSON.stringify(this.frameObj) !== JSON.stringify(this.tempFrameObj)) {\n                isFrame = true;\n                this.okBtn();\n            }\n            else {\n                this.tempFrameZoomLevel = null;\n            }\n        }\n        else {\n            this.notify('draw', { prop: 'performCancel', value: { isContextualToolbar: null } });\n            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.frameObj, this.tempFrameObj);\n            this.tempFrameZoomLevel = null;\n        }\n        this.notify('draw', { prop: 'redrawDownScale' });\n        var ctxTbar = this.element.querySelector('.e-contextual-toolbar-wrapper');\n        if (ctxTbar) {\n            ctxTbar.classList.add('e-hide');\n        }\n        return isFrame;\n    };\n    /**\n     * Straightens an image by rotating it clockwise or counterclockwise.\n     *\n     * @param {number} degree - The degree value specifying the amount of rotation for straightening the image.\n     * Positive values indicate clockwise rotation, while negative values indicate counterclockwise rotation.\n     *\n     * @remarks\n     * The degree value should be within the range of -45 to +45 degrees for accurate straightening.\n     *\n     * @returns {boolean} - A boolean value indicating the success of the straightening operation.\n     */\n    ImageEditor.prototype.straightenImage = function (degree) {\n        var isStraightened = false;\n        if (degree >= -45 && degree <= 45) {\n            this.applyShapes();\n            isStraightened = true;\n            this.notify('transform', { prop: 'straightenImage', value: { degree: degree } });\n            this.notify('draw', { prop: 'redrawDownScale' });\n        }\n        return isStraightened;\n    };\n    /**\n     * Duplicates a shape based on the given shape ID in the ImageEditor.\n     * Use 'getShapeSettings' method to get the shape and then pass a shapeId from the returned shape to clone a shape.\n     *\n     * @param {string} shapeId - Specifies the shape id to clone a shape on an image.\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.cloneShape = function (shapeId) {\n        var obj = { isSelected: false };\n        if (shapeId.split('_')[0] === 'shape') {\n            this.notify('shape', { prop: 'selectShape', onPropertyChange: false, value: { id: shapeId, obj: obj } });\n            if (obj['isSelected']) {\n                this.notify('toolbar', { prop: 'duplicateShape', onPropertyChange: false, value: { isPreventUndoRedo: false } });\n                this.okBtn(null, true);\n                this.notify('draw', { prop: 'redrawDownScale' });\n            }\n        }\n        return obj['isSelected'];\n    };\n    /**\n     * Update filter to the canvas in the ImageEditor.\n     *\n     * @param {ImageFilterOption } filterOption - Specifies the filter options to the image.\n     *\n     * @returns {string}.\n     *\n     */\n    ImageEditor.prototype.getImageFilter = function (filterOption) {\n        var canvas = this.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        this.notify('filter', { prop: 'updateAdj', value: { type: filterOption.toLowerCase(), value: null, isPreview: true, ctx: ctx } });\n        return ctx.filter;\n    };\n    /**\n     * Enable text area editing in the ImageEditor.\n     *\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.enableTextEditing = function () {\n        var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        if (!activeObj.order) {\n            this.noPushUndo = true;\n            this.okBtn();\n            this.noPushUndo = false;\n            this.noRedact = true;\n            this.selectShape(activeObj.currIndex);\n            activeObj.order = this.activeObj.order;\n        }\n        this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null, isPreventClearRect: null, isFrame: false } });\n        this.activeObj = activeObj;\n        this.notify('toolbar', { prop: 'editText', onPropertyChange: false });\n    };\n    /**\n     * Specifies if it's possible to undo the last recent action made in an Image Editor.\n     *\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.canUndo = function () {\n        var canUndo = false;\n        var object = this.getUndoRedoColl();\n        var undoRedoIndex = object['index'];\n        if (undoRedoIndex > 0) {\n            canUndo = true;\n        }\n        return canUndo;\n    };\n    /**\n     * Specifies if it's possible to redo the last recent action made in an Image Editor.\n     *\n     * @returns {boolean}.\n     *\n     */\n    ImageEditor.prototype.canRedo = function () {\n        var canRedo = false;\n        var object = this.getUndoRedoColl();\n        var undoRedoColl = object['undoRedoColl'];\n        var undoRedoIndex = object['index'];\n        if (undoRedoColl && undoRedoColl.length > 0 && undoRedoIndex < undoRedoColl.length - 1) {\n            canRedo = true;\n        }\n        if (undoRedoIndex === undoRedoColl.length) {\n            canRedo = false;\n        }\n        else if (undoRedoIndex === 0 && undoRedoColl.length > 0) {\n            canRedo = true;\n        }\n        else if (undoRedoIndex > 0) {\n            canRedo = true;\n        }\n        return canRedo;\n    };\n    /**\n     * Applies the operations performed in the Image Editor, such as annotation drawings.\n     *\n     * @returns{void}\n     * @remarks\n     * This method applies the actions performed after enabling annotation drawings, ensuring that the drawn annotations are applied to the image.\n     */\n    ImageEditor.prototype.apply = function () {\n        if (this.isMaskImage) {\n            this.discard();\n        }\n        else {\n            this.updateColl('reset');\n            this.closeOverlayTbar();\n            this.okBtn(null, true);\n        }\n    };\n    /**\n     * Discards the operations performed in the Image Editor, such as annotation drawings.\n     *\n     * @returns{void}\n     * @remarks\n     * This method discards the actions performed after enabling annotation drawings, ensuring that the drawn annotations are not applied to the image.\n     */\n    ImageEditor.prototype.discard = function () {\n        this.updateColl('reset');\n        this.notify('draw', { prop: 'performCancel', value: { isContextualToolbar: this.closeOverlayTbar(), isFinalCancel: true } });\n    };\n    /**\n     * Enable or disable a shape drawing option in an Image Editor.\n     *\n     * @param {ShapeType} shapeType - Specifies the type of shape to be enabled or disabled for drawing.\n     * @param {boolean} isEnabled - Optional. Specifies a value to indicate whether to enable or disable shape drawing. The default value is true.\n     *\n     * @remarks This function allows the user to toggle the shape drawing feature in the Image Editor. When enabled, users can draw shapes on the image. When disabled, the shape drawing functionality is not available.\n     *\n     * @returns {void}.\n     */\n    ImageEditor.prototype.enableShapeDrawing = function (shapeType, isEnabled) {\n        if (isEnabled) {\n            this.drawingShape = shapeType.toLowerCase();\n            this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        }\n        if (shapeType && isEnabled) {\n            this.currObjType.shape = shapeType.toLowerCase();\n            this.activeObj.shape = this.currObjType.shape;\n            this.currObjType.isDragging = this.currObjType.isCustomCrop = false;\n            this.activeObj.shapeDegree = this.transform.degree;\n            this.activeObj.shapeFlip = this.transform.currFlipState;\n            this.activeObj.textFlip = this.transform.currFlipState;\n            this.activeObj.flipObjColl = [];\n            var orderObj = { order: null };\n            this.notify('shape', { prop: 'getNewOrder', onPropertyChange: false, value: { obj: orderObj } });\n            this.activeObj.order = orderObj['order'];\n            this.notify('selection', { prop: 'annotate', value: { shape: this.currObjType.shape } });\n            if (this.currObjType.shape === 'text') {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'text',\n                        isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n            }\n            else if (this.currObjType.shape === 'redact') {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'redact',\n                        isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n            }\n            else {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'shapes',\n                        isApplyBtn: null, isCropping: null, isZooming: null, cType: null } });\n            }\n            this.notify('toolbar', { prop: 'update-toolbar-items', onPropertyChange: false });\n        }\n        else if (!isEnabled) {\n            this.okBtn(null, true);\n        }\n    };\n    /**\n     * Moves a shape to the front of all other shapes based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform moving.\n     *\n     * @param {string} shapeId - Specifies the shape id to move the shape on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.bringToFront = function (shapeId) {\n        this.noRedact = true;\n        if (this.selectShape(shapeId)) {\n            this.updateShapeOrder(shapeId, 'bringToFront');\n            this.apply();\n        }\n    };\n    /**\n     * Moves a shape to ahead of one shape based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform moving.\n     *\n     * @param {string} shapeId - Specifies the shape id to move the shape on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.bringForward = function (shapeId) {\n        this.noRedact = true;\n        if (this.selectShape(shapeId)) {\n            this.updateShapeOrder(shapeId, 'bringForward');\n            this.apply();\n        }\n    };\n    /**\n     * Moves a shape to behind all other shapes based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform moving.\n     *\n     * @param {string} shapeId - Specifies the shape id to move the shape on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.sendToBack = function (shapeId) {\n        this.noRedact = true;\n        if (this.selectShape(shapeId)) {\n            this.updateShapeOrder(shapeId, 'sendToBack');\n            this.apply();\n        }\n    };\n    /**\n     * Moves a shape to behind one shape based on the given shape id.\n     * Use 'getShapeSettings' method to get the shape id which is then passed to perform moving.\n     *\n     * @param {string} shapeId - Specifies the shape id to move the shape on an image.\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.sendBackward = function (shapeId) {\n        this.noRedact = true;\n        if (this.selectShape(shapeId)) {\n            this.updateShapeOrder(shapeId, 'sendBackward');\n            this.apply();\n        }\n    };\n    /**\n     * Clears the loaded image in the Image Editor.\n     *\n     * @returns{void}\n     * @remarks\n     * This method clears the loaded image and updates the component's user interface to its initial state (the initial user interface without a loaded image).\n     */\n    ImageEditor.prototype.clearImage = function () {\n        this.reset();\n        this.isImageLoaded = false;\n        this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);\n        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n        var btoolbar = document.getElementById(this.element.id + '_bottomToolbar');\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && btoolbar) {\n            document.getElementById(this.element.id + '_bottomToolbar').style.display = 'none';\n        }\n        this.notify('toolbar', { prop: 'destroy-top-toolbar', onPropertyChange: false });\n        this.notify('toolbar', { prop: 'create-toolbar', onPropertyChange: false });\n        this.notify('toolbar', { prop: 'create-contextual-toolbar', onPropertyChange: false });\n        var dropArea = document.getElementById(this.element.id + '_dropArea');\n        if (dropArea) {\n            dropArea.style.display = 'block';\n        }\n    };\n    // AI related codes\n    /**\n     * Enables overlay drawing to erase objects in an image editor. The eraser tool assists in selecting the mask image.\n     *\n     * @remarks\n     * The selection UI is based on the 'theme' property.\n     *\n     * @param {number} strokeWidth - Specifies the stroke width of the drawing.\n     * @param {string} color - Specifies the color of the drawing.\n     * @hidden\n     * @returns {void}.\n     *\n     */\n    ImageEditor.prototype.selectMaskImage = function (strokeWidth, color) {\n        strokeWidth = strokeWidth ? strokeWidth : 10;\n        color = color ? color : '#512da880';\n        this.applyShapes();\n        this.isMaskImage = true;\n        this.updateColl('empty');\n        this.enableDisableToolbar(true);\n        this.update();\n        this.activeObj.strokeSettings.strokeWidth = strokeWidth;\n        this.notify('freehand-draw', { prop: 'setPenStrokeWidth', onPropertyChange: false, value: { value: strokeWidth } });\n        this.activeObj.strokeSettings.strokeColor = color;\n        this.notify('freehand-draw', { prop: 'freeHandDraw', onPropertyChange: false, value: { value: true } });\n        this.maskCanvas.style.display = 'block';\n    };\n    ImageEditor.prototype.enableDisableToolbar = function (value) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var toolbar;\n        var elem = document.getElementById(this.element.id + '_toolbar');\n        if (elem) {\n            toolbar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(elem, 'toolbar');\n            if (toolbar) {\n                toolbar.disable(value);\n            }\n        }\n        elem = document.getElementById(this.element.id + '_bottomToolbar');\n        if (elem) {\n            toolbar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(elem, 'toolbar');\n            if (toolbar) {\n                toolbar.disable(value);\n            }\n        }\n    };\n    ImageEditor.prototype.updateImage = function (data, imageBackgroundColor) {\n        var _this = this;\n        if (data || imageBackgroundColor || imageBackgroundColor === '') {\n            var prevCropObj_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            var prevObj_1 = object['currObj'];\n            prevObj_1.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj_1.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj_1.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false, value: { obj: selPointCollObj } });\n            prevObj_1.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            if (data) {\n                this.isImageUpdated = true;\n                if (typeof (data) !== 'string') {\n                    var canvas = this.createElement('canvas');\n                    canvas.width = data.width;\n                    canvas.height = data.height;\n                    canvas.getContext('2d').putImageData(data, 0, 0);\n                    data = canvas.toDataURL();\n                }\n                this.baseImg.src = data;\n                setTimeout(function () {\n                    if (_this.cropObj.straighten !== 0) {\n                        _this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: 'crop-' + 'custom' } });\n                        _this.noPushUndo = true;\n                        _this.crop();\n                        _this.noPushUndo = false;\n                    }\n                    else {\n                        _this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n                    }\n                    _this.isImageUpdated = false;\n                    if (!imageBackgroundColor) {\n                        _this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'updateImage', previousObj: prevObj_1,\n                                previousObjColl: prevObj_1.objColl, previousPointColl: prevObj_1.pointColl,\n                                previousSelPointColl: prevObj_1.selPointColl, previousCropObj: prevCropObj_1,\n                                previousText: null, currentText: null, previousFilter: null, isCircleCrop: null\n                            } });\n                        _this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n                    }\n                }, 100);\n            }\n            if (imageBackgroundColor || imageBackgroundColor === '') {\n                this.notify('draw', { prop: 'imageBackgroundColor', onPropertyChange: false, value: { color: imageBackgroundColor } });\n                this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n                if (!data) {\n                    this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'bgColor', previousObj: prevObj_1,\n                            previousObjColl: prevObj_1.objColl, previousPointColl: prevObj_1.pointColl, previousSelPointColl: prevObj_1.selPointColl,\n                            previousCropObj: prevCropObj_1, previousText: null, currentText: null, previousFilter: null, isCircleCrop: null\n                        } });\n                    this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n                }\n            }\n            if (data && imageBackgroundColor) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'updateImage', previousObj: prevObj_1,\n                        previousObjColl: prevObj_1.objColl, previousPointColl: prevObj_1.pointColl, previousSelPointColl: prevObj_1.selPointColl,\n                        previousCropObj: prevCropObj_1, previousText: null, currentText: null, previousFilter: null, isCircleCrop: null\n                    } });\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n            }\n        }\n    };\n    ImageEditor.prototype.editCompleted = function (type) {\n        this.notify('draw', { prop: 'redrawDownScale' });\n        var actionArgs = { action: type ? type : 'shape-insert',\n            actionEventArgs: this.editCompleteArgs };\n        this.triggerEditCompleteEvent(actionArgs);\n    };\n    ImageEditor.prototype.updateColl = function (type) {\n        if (!this.isMaskImage) {\n            return;\n        }\n        if (type === 'empty') {\n            this.tempToolbarHeight = this.toolbarHeight;\n            this.tempToolbar = this.toolbar ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.toolbar, [], true) : null;\n            this.tempObjColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            this.tempPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            this.tempShapeColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.shapeColl, [], true);\n            this.objColl = [];\n            this.pointColl = [];\n            this.shapeColl = [];\n            this.freehandCounter = 0;\n            this.notify('freehand-draw', { prop: 'setCurrentFreehandDrawIndex',\n                value: { value: 0 } });\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n        }\n        else if (type === 'reset') {\n            this.objColl = this.tempObjColl;\n            this.pointColl = this.tempPointColl;\n            this.shapeColl = this.tempShapeColl;\n            this.freehandCounter = this.pointColl.length;\n            this.notify('freehand-draw', { prop: 'setCurrentFreehandDrawIndex',\n                value: { value: this.freehandCounter } });\n            this.enableDisableToolbar(false);\n            if (this.cropObj.straighten !== 0) {\n                this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: 'crop-' + 'custom' } });\n                this.noPushUndo = true;\n                this.crop();\n                this.noPushUndo = false;\n            }\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n            this.isMaskImage = false;\n            this.upperContext.globalCompositeOperation = 'source-over';\n            this.maskCanvas.style.display = 'none';\n            this.activeObj.strokeSettings = { strokeColor: '#fff', fillColor: '', strokeWidth: null,\n                radius: null, outlineColor: '', outlineWidth: null };\n            this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: this.activeObj.strokeSettings,\n                    strokeColor: '#fff', fillColor: '', strokeWidth: null, outlineWidth: null } });\n            this.notify('freehand-draw', { prop: 'setPenStrokeWidth', onPropertyChange: false, value: { value: 2 } });\n            this.notify('freehand-draw', { prop: 'setMasking', onPropertyChange: false, value: { value: false } });\n        }\n    };\n    // Toolbar related codes\n    ImageEditor.prototype.resetToolbar = function () {\n        if (this.toolbarHeight !== this.tempToolbarHeight && !(((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbar) ||\n            (this.toolbar && this.toolbar.length > 0)\n            || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbarTemplate)))) {\n            this.toolbarHeight = this.tempToolbarHeight;\n            this.notify('toolbar', { prop: 'setToolbarHeight', value: { height: this.toolbarHeight } });\n            this.toolbar = this.tempToolbar;\n            if (!this.toolbarTemplate) {\n                this.notify('toolbar', { prop: 'create-toolbar', onPropertyChange: false });\n                this.notify('toolbar', { prop: 'create-contextual-toolbar', onPropertyChange: false });\n            }\n            this.update();\n        }\n    };\n    ImageEditor.prototype.getData = function (isMaskImage) {\n        if (isMaskImage) {\n            this.resetToolbar();\n        }\n        var objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, null, true);\n        var pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, null, true);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var shapeColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.shapeColl, null, true);\n        if (isMaskImage) {\n            this.notify('shape', { prop: 'updateShapeColl', onPropertyChange: false });\n            for (var i = 0; i < this.freehandCounter; i++) {\n                this.pointColl[i].strokeColor = '#fff';\n            }\n        }\n        else {\n            this.objColl = [];\n            this.pointColl = [];\n            this.shapeColl = [];\n            this.freehandCounter = 0;\n        }\n        var frameType = this.frameObj.type;\n        this.frameObj.type = 'none';\n        var aspectWidth = this.aspectWidth;\n        var aspectHeight = this.aspectHeight;\n        this.aspectWidth = this.aspectHeight = null;\n        var straighten = this.cropObj.straighten;\n        this.togglePen = false;\n        this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: 'crop-' + 'custom' } });\n        var tempDestPoints = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.img, {}, true);\n        var tempCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var tempSel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        var tempTransform = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.transform, {}, true);\n        var panPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.panPoint, {}, true);\n        if (straighten !== 0) {\n            this.setStraighten(0);\n        }\n        var point = this.activeObj.activePoint;\n        point.startX = this.img.destLeft;\n        point.startY = this.img.destTop;\n        point.width = this.img.destWidth;\n        point.height = this.img.destHeight;\n        point.endX = point.startX + point.width;\n        point.endY = point.startY + point.height;\n        this.notify('draw', { prop: 'updateActiveObject', onPropertyChange: false, value: { actPoint: point, obj: this.activeObj,\n                isMouseMove: null, x: null, y: null } });\n        this.noPushUndo = true;\n        this.crop();\n        this.noPushUndo = false;\n        this.isCropTab = false;\n        this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        this.notify('crop', { prop: 'resetZoom', onPropertyChange: false });\n        this.isCropTab = true;\n        var afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var coll = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.rotateFlipColl, [], true);\n        this.notify('crop', { prop: 'revertTransform', value: { type: 'initial', coll: coll } });\n        var imageData = this.getImageData();\n        if (isMaskImage) {\n            var canvas = this.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            if (this.pointColl.length > 0) {\n                var obj = { width: 0, height: 0 };\n                this.notify('crop', { prop: 'calcRatio', onPropertyChange: false,\n                    value: { obj: obj, dimension: { width: canvas.width, height: canvas.height } } });\n                var ratio = obj;\n                this.notify('export', { prop: 'drawAnnotation', value: { context: ctx, ratio: ratio } });\n            }\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        }\n        this.notify('crop', { prop: 'revertTransform', value: { type: 'reverse', coll: coll } });\n        this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        this.afterCropActions = afterCropActions;\n        if (!isMaskImage) {\n            this.objColl = objColl;\n            this.pointColl = pointColl;\n            this.shapeColl = shapeColl;\n            this.freehandCounter = this.pointColl.length;\n        }\n        this.frameObj.type = frameType;\n        this.aspectWidth = aspectWidth;\n        this.aspectHeight = aspectHeight;\n        this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: 'crop-' + 'custom' } });\n        if (straighten !== 0) {\n            this.setStraighten(straighten);\n        }\n        this.img = tempDestPoints;\n        this.cropObj = tempCropObj;\n        this.activeObj = tempSel;\n        this.transform = tempTransform;\n        this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n            value: { zoomFactor: 0.1, zoomPoint: null, isResize: null } });\n        this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n            value: { zoomFactor: -0.1, zoomPoint: null, isResize: null } });\n        if (this.transform.degree !== 0) {\n            this.panPoint.currentPannedPoint = { x: panPoint.totalPannedClientPoint.x,\n                y: panPoint.totalPannedClientPoint.y };\n            this.notify('transform', { prop: 'drawPannedImage', value: { xDiff: panPoint.totalPannedClientPoint.x,\n                    yDiff: panPoint.totalPannedClientPoint.y } });\n            this.panPoint.currentPannedPoint = { x: 0, y: 0 };\n            this.notify('transform', { prop: 'setTempPanMove', value: { point: null } });\n        }\n        this.noPushUndo = true;\n        this.crop();\n        this.noPushUndo = false;\n        this.transform.straighten = 0;\n        this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n        return imageData;\n    };\n    ImageEditor.prototype.applyShapes = function () {\n        if (this.isUndoRedoStack) {\n            return;\n        }\n        var shapes = ['rectangle', 'ellipse', 'line', 'arrow', 'path', 'text', 'image'];\n        var dummyObj = { bool: false };\n        this.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: dummyObj } });\n        if (dummyObj['bool'] || this.togglePen || (this.activeObj.shape && shapes.indexOf(this.activeObj.shape) !== -1) ||\n            this.drawingShape) {\n            this.okBtn(null, true);\n        }\n    };\n    ImageEditor.prototype.closeOverlayTbar = function () {\n        var isContextualToolbar = false;\n        var frameObject = { bool: null };\n        this.notify('toolbar', { prop: 'getFrameToolbar', onPropertyChange: false, value: { obj: frameObject } });\n        if (!frameObject['bool'] && this.element.querySelector('.e-contextual-toolbar-wrapper')) {\n            if (!this.element.querySelector('.e-contextual-toolbar-wrapper').classList.contains('e-hide')) {\n                isContextualToolbar = true;\n            }\n            var straightenObj = { bool: this.isStraightening };\n            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !straightenObj['bool'])) {\n                this.element.querySelector('.e-contextual-toolbar-wrapper').classList.add('e-hide');\n            }\n        }\n        return isContextualToolbar;\n    };\n    ImageEditor.prototype.toolbarTemplateFn = function () {\n        var template;\n        var templateID = this.element.id + '_toolbar';\n        var toolbarArea = this.element.querySelector('#' + this.element.id + '_toolbarArea');\n        if (this.toolbarTemplate) {\n            this.toolbarFn = this.templateParser(this.toolbarTemplate);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.isReact) {\n                template = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID)[0];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            else if (this.isAngular) {\n                var templateColl = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID);\n                template = (templateColl[0].nodeType === 3) ? templateColl[1] : templateColl[0];\n            }\n            else {\n                template = this.toolbarFn({ type: 'toolbar' }, this, 'Template', templateID)[0];\n            }\n            toolbarArea.appendChild(template);\n            this.toolbarHeight = toolbarArea.clientHeight;\n            this.notify('toolbar', { prop: 'setToolbarHeight', value: { height: this.toolbarHeight } });\n            this['renderReactTemplates']();\n        }\n    };\n    ImageEditor.prototype.quickAccessToolbarTemplateFn = function () {\n        var template;\n        var templateID = this.element.id + '_quickAccessToolbar';\n        var toolbarArea = this.element.querySelector('#' + this.element.id + '_quickAccessToolbarArea');\n        if (this.quickAccessToolbarTemplate) {\n            this.qatFn = this.templateParser(this.quickAccessToolbarTemplate);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (this.isReact) {\n                template = this.qatFn({ type: 'toolbar' }, this, 'Template', templateID)[0];\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            else if (this.isAngular) {\n                var templateColl = this.qatFn({ type: 'toolbar' }, this, 'Template', templateID);\n                template = (templateColl[0].nodeType === 3) ? templateColl[1] : templateColl[0];\n            }\n            else {\n                template = this.qatFn({ type: 'toolbar' }, this, 'Template', templateID)[0];\n            }\n            toolbarArea.appendChild(template);\n            this['renderReactTemplates']();\n        }\n    };\n    ImageEditor.prototype.templateParser = function (template) {\n        if (template) {\n            try {\n                if (typeof template !== 'function' && document.querySelectorAll(template).length) {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n                }\n            }\n            catch (error) {\n                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(template);\n            }\n        }\n        return undefined;\n    };\n    // Common codes for EJ2 and Blazor\n    ImageEditor.prototype.getTextFromId = function (id) {\n        var idToValue = { '1': 'none', '2': 'bar', '3': 'arrow', '4': 'arrowSolid',\n            '5': 'circle', '6': 'circleSolid', '7': 'square', '8': 'squareSolid' };\n        return idToValue[\"\" + id];\n    };\n    ImageEditor.prototype.getFinetuneOption = function (type) {\n        var typeToOption = { 'brightness': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Brightness, 'contrast': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Contrast,\n            'hue': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Hue, 'saturation': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Saturation, 'opacity': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Opacity,\n            'blur': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Blur, 'exposure': _index__WEBPACK_IMPORTED_MODULE_2__.ImageFinetuneOption.Exposure };\n        return typeToOption[\"\" + type];\n    };\n    ImageEditor.prototype.setPenStroke = function (args) {\n        this.notify('freehand-draw', { prop: 'setPenStrokeWidth', onPropertyChange: false, value: { value: parseInt(args, 10) } });\n    };\n    ImageEditor.prototype.updateFreehandDrawColorChange = function () {\n        var obj = { tempFreeHandDrawEditingStyles: null };\n        this.notify('freehand-draw', { prop: 'getTempFreeHandDrawEditingStyles', value: { obj: obj } });\n        this.notify('freehand-draw', { prop: 'color-change', value: { color: obj['tempFreeHandDrawEditingStyles'].strokeColor } });\n    };\n    ImageEditor.prototype.getUndoRedoColl = function () {\n        var obj = { undoRedoColl: null, index: null };\n        var undoRedoObj = { undoRedoStep: null };\n        var object = { appliedUndoRedoColl: [] };\n        this.notify('undo-redo', { prop: 'getAppliedUndoRedoColl', value: { obj: object } });\n        this.notify('undo-redo', { prop: 'getUndoRedoStep', value: { obj: undoRedoObj } });\n        obj['undoRedoColl'] = object['appliedUndoRedoColl'];\n        obj['index'] = undoRedoObj['undoRedoStep'];\n        return obj;\n    };\n    ImageEditor.prototype.updateImageTransformColl = function (type) {\n        var value;\n        if (type === 'rotateleft') {\n            value = -90;\n        }\n        else if (type === 'rotateright') {\n            value = 90;\n        }\n        else if (type === 'horizontalflip') {\n            value = 'horizontal';\n        }\n        else if (type === 'verticalflip') {\n            value = 'vertical';\n        }\n        for (var i = 0; i < this.objColl.length; i++) {\n            var shape = this.objColl[i].shape;\n            if (shape === 'image' || shape === 'text') {\n                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.objColl[i].rotateFlipColl)) {\n                    this.objColl[i].rotateFlipColl = [];\n                }\n                this.objColl[i].rotateFlipColl.push(value);\n                var obj = { collection: this.objColl[i].rotateFlipColl };\n                this.notify('shape', { prop: 'alignRotateFlipColl', onPropertyChange: false,\n                    value: { collection: this.objColl[i].rotateFlipColl, isRotateFlipCollection: false, obj: obj } });\n                this.objColl[i].rotateFlipColl = obj['collection'];\n            }\n        }\n    };\n    ImageEditor.prototype.setInitialZoomState = function () {\n        this.objColl.push(this.activeObj);\n        this.notify('shape', { prop: 'refreshActiveObj', onPropertyChange: false });\n        var isUndoRedo = this.isUndoRedo;\n        this.isCropTab = false;\n        this.isUndoRedo = true;\n        if (this.transform.cropZoomFactor && this.transform.cropZoomFactor > 0) {\n            this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                value: { zoomFactor: -this.transform.cropZoomFactor, zoomPoint: null, isResize: true } });\n        }\n        else {\n            this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                value: { zoomFactor: Math.abs(this.transform.cropZoomFactor), zoomPoint: null, isResize: true } });\n        }\n        this.isUndoRedo = isUndoRedo;\n        this.panPoint.totalPannedPoint = { x: 0, y: 0 };\n        this.transform.cropZoomFactor = 0;\n        this.notify('freehand-draw', { prop: 'updateFHDColl', onPropertyChange: false });\n        this.activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.objColl[this.objColl.length - 1], {}, true);\n        this.objColl.pop();\n        this.isCropTab = true;\n        this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: this.activeObj } });\n    };\n    /**\n     * Set the old item Transform item state.\n     *\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateCropTransformItems = function () {\n        this.prevCurrSelectionPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.currSelectionPoint, {}, true);\n        this.notify('draw', { prop: 'updateCropSelection', onPropertyChange: false });\n    };\n    /**\n     * Get the pascal case.\n     *\n     * @param { string } str - Specifies the string to convert to pascal case.\n     * @param { Object } obj - Specifies the string to convert to pascal case.\n     * @hidden\n     * @returns {string}.\n     * A pascal case string.\n     */\n    ImageEditor.prototype.toPascalCase = function (str, obj) {\n        var strArr = [];\n        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(str)) {\n            strArr = str.toLowerCase().split('-');\n        }\n        for (var i = 0; i < strArr.length; i++) {\n            strArr[i] = strArr[i].charAt(0).toUpperCase() + strArr[i].slice(1);\n        }\n        if (obj) {\n            obj['maxText'] = strArr.join('');\n        }\n        return strArr.join('');\n    };\n    /**\n     * Get the font sizes.\n     *\n     * @hidden\n     * @returns {DropDownButtonItemModel[]}.\n     * A font size collections.\n     */\n    ImageEditor.prototype.getFontSizes = function () {\n        var items = [];\n        this.fontSizeColl = [];\n        var fontSize;\n        if (this.transform.degree === 0 || this.transform.degree % 180 === 0) {\n            fontSize = this.img.destWidth / 25;\n        }\n        else {\n            fontSize = this.img.destHeight / 25;\n        }\n        for (var i = 1; i <= 10; i++) {\n            this.fontSizeColl.push({ text: (i * (Math.round(fontSize / 2))).toString() });\n            items.push({ text: (i.toString()) });\n        }\n        return items;\n    };\n    /**\n     * Updates drop area content dynamically.\n     *\n     * @param { HTMLElement } dropInfoElement - Specifies the drop area element.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateDropInfoContent = function (dropInfoElement) {\n        if (!dropInfoElement) {\n            return;\n        }\n        var supportObj = { key: 'SupportText' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: supportObj } });\n        var words = this.getExtensionString();\n        var fileSizeObj = { key: 'MinMaxSize' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n        var andObj = { key: 'And' };\n        this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: andObj } });\n        var size;\n        if (this.uploadSettings.minFileSize && this.uploadSettings.maxFileSize) {\n            size = ' ' + fileSizeObj['value'] + ' ' + this.formatSizeUnits(this.uploadSettings.minFileSize) + ' ' + andObj['value'] + ' ' + this.formatSizeUnits(this.uploadSettings.maxFileSize);\n        }\n        else if (this.uploadSettings.minFileSize) {\n            fileSizeObj['key'] = 'MinSize';\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n            size = ' ' + fileSizeObj['value'] + ' ' + this.formatSizeUnits(this.uploadSettings.minFileSize);\n        }\n        else if (this.uploadSettings.maxFileSize) {\n            fileSizeObj['key'] = 'MaxSize';\n            this.notify('toolbar', { prop: 'getLocaleText', onPropertyChange: false, value: { obj: fileSizeObj } });\n            size = ' ' + fileSizeObj['value'] + ' ' + this.formatSizeUnits(this.uploadSettings.maxFileSize);\n        }\n        if (size) {\n            dropInfoElement.textContent = supportObj['value'] + words + size;\n        }\n        else {\n            dropInfoElement.textContent = supportObj['value'] + words;\n        }\n    };\n    /**\n     * Handles the OK button operation\n     *\n     * @param { boolean } isMouseDown - Specifies whether it is a mouse down.\n     * @param { boolean } isFinalApply - Specifies whether it is a final apply.\n     * @param { boolean } isResize - Specifies whether it is called from resize public method.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.okBtn = function (isMouseDown, isFinalApply, isResize) {\n        if (isFinalApply) {\n            this.noPushUndo = false;\n            var tempActiveObj = { activePoint: { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 },\n                flipObjColl: [], triangle: [], triangleRatio: [], order: null };\n            this.notify('selection', { prop: 'setTempActObj', onPropertyChange: false, value: { obj: tempActiveObj } });\n        }\n        var ctWrapper = this.element.querySelector('.e-contextual-toolbar-wrapper');\n        if (ctWrapper) {\n            ctWrapper.classList.remove('e-frame-wrapper');\n        }\n        var isCropSelection = false;\n        var splitWords;\n        this.isResizeOkBtn = true;\n        var aspectIcon = this.element.querySelector('#' + this.element.id + '_aspectratio');\n        var nonAspectIcon = this.element.querySelector('#' + this.element.id + '_nonaspectratio');\n        var blrAspRatElem = this.element.querySelector('.e-ie-toolbar-aspect-ratio-btn');\n        var blrNAspRatElem = this.element.querySelector('.e-ie-toolbar-nonaspect-ratio-btn');\n        if (this.activeObj.shape !== undefined) {\n            splitWords = this.activeObj.shape.split('-');\n        }\n        if (splitWords === undefined && this.currObjType.isCustomCrop) {\n            isCropSelection = true;\n        }\n        else if (splitWords !== undefined && splitWords[0] === 'crop') {\n            isCropSelection = true;\n        }\n        this.allowDownScale = true;\n        if ((this.activeObj.shape && this.activeObj.shape !== 'image' || this.togglePen) && !isCropSelection) {\n            var objt = { shapeSettingsObj: {} };\n            this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n            var shapeSettings = objt['shapeSettingsObj'];\n            if (this.togglePen) {\n                shapeSettings.type = _index__WEBPACK_IMPORTED_MODULE_2__.ShapeType.FreehandDraw;\n            }\n            var shapeChangedArgs = { action: 'apply', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n            if (!this.currObjType.isRedact && (isFinalApply || this.isShapeDrawing)) {\n                if (this.isShapeDrawing) {\n                    shapeChangedArgs.action = 'draw-end';\n                }\n                this.trigger('shapeChange', shapeChangedArgs);\n            }\n            this.editCompleteArgs = shapeChangedArgs;\n            if (this.currObjType.isRedact) {\n                this.currObjType.isRedact = false;\n            }\n        }\n        if (aspectIcon || nonAspectIcon) {\n            var obj_2 = { width: null, height: null };\n            this.notify('selection', { prop: 'getNumTextValue', onPropertyChange: false, value: { obj: obj_2 } });\n            var point = { x: obj_2['width'], y: obj_2['height'] };\n            var obj1 = { prevCropObj: this.prevCropObj };\n            var obj2 = { prevObj: this.prevObj };\n            if (point && point.x && point.y && obj1['prevCropObj'] && obj2['prevObj']) {\n                if (nonAspectIcon || (blrNAspRatElem && !blrNAspRatElem.classList.contains('e-hidden'))) {\n                    this.notify('transform', { prop: 'resize', value: { width: point.x, height: point.y, isAspectRatio: false } });\n                }\n                else if (aspectIcon || (blrAspRatElem && !blrAspRatElem.classList.contains('e-hidden'))) {\n                    this.notify('transform', { prop: 'resize', value: { width: point.x, height: null, isAspectRatio: true } });\n                }\n                this.isResize = false;\n                this.aspectWidth = point.x;\n                this.aspectHeight = point.y;\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                        isApplyBtn: false, isCropping: false, isZooming: null, cType: null } });\n                this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                    value: { zoomFactor: -this.transform.zoomFactor, zoomPoint: null, isResize: true } });\n                this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                    value: { zoomFactor: obj2['prevObj']['defaultZoom'], zoomPoint: null, isResize: true } });\n                if (obj2['prevObj'].zoomFactor) {\n                    this.setProperties({ zoomSettings: { zoomFactor: obj2['prevObj'].zoomFactor } }, true);\n                }\n                this.notify('transform', { prop: 'setPreviousZoomValue', onPropertyChange: false,\n                    value: { previousZoomValue: this.zoomSettings.zoomFactor } });\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'resize',\n                        previousObj: obj2['prevObj'], previousObjColl: obj2['prevObj']['objColl'],\n                        previousPointColl: obj2['prevObj']['pointColl'], previousSelPointColl: obj2['prevObj']['selPointColl'],\n                        previousCropObj: obj1['prevCropObj'], previousText: null, currentText: null, previousFilter: null,\n                        isCircleCrop: null } });\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n                var obj_3 = this.cancelCropSelection;\n                if ((obj_3 && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nonAspectIcon) || !nonAspectIcon))) {\n                    obj_3.previousObj.aspectWidth = obj_3.currentObj.aspectWidth = this.aspectWidth;\n                    obj_3.previousObj.aspectHeight = obj_3.currentObj.aspectHeight = this.aspectHeight;\n                    obj_3.previousCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n                    obj_3.currentCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n                    this.notify('draw', { prop: 'updateCropSelObj' });\n                }\n                this.cancelCropSelection = null;\n            }\n            else if (point && (point.x === 0 || point.y === 0)) {\n                this.notify('draw', { prop: 'performCancel', value: { isContextualToolbar: null } });\n            }\n            else {\n                this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                        isApplyBtn: false, isCropping: false, isZooming: null, cType: null } });\n            }\n            this.isAspectRatio = false;\n        }\n        else if (isResize) {\n            var isAspectRatio = false;\n            if (this.aspectWidth && this.aspectHeight) {\n                this.notify('transform', { prop: 'resize', value: { width: this.aspectWidth, height: this.aspectHeight, isAspectRatio: false } });\n            }\n            else if (this.aspectWidth) {\n                this.notify('transform', { prop: 'resize', value: { width: this.aspectWidth, height: null, isAspectRatio: true } });\n                this.aspectHeight = this.aspectWidth / (this.img.destWidth / this.img.destHeight);\n                isAspectRatio = true;\n            }\n            this.isResize = false;\n            this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                    isApplyBtn: false, isCropping: false, isZooming: null, cType: null } });\n            this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                value: { zoomFactor: -this.transform.zoomFactor, zoomPoint: null, isResize: true } });\n            this.notify('transform', { prop: 'zoomAction', onPropertyChange: false,\n                value: { zoomFactor: this.prevObj['defaultZoom'], zoomPoint: null, isResize: true } });\n            if (this.prevObj.zoomFactor) {\n                this.setProperties({ zoomSettings: { zoomFactor: this.prevObj.zoomFactor } }, true);\n            }\n            this.notify('transform', { prop: 'setPreviousZoomValue', onPropertyChange: false,\n                value: { previousZoomValue: this.zoomSettings.zoomFactor } });\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: { operation: 'resize',\n                    previousObj: this.prevObj, previousObjColl: this.prevObj['objColl'],\n                    previousPointColl: this.prevObj['pointColl'], previousSelPointColl: this.prevObj['selPointColl'],\n                    previousCropObj: this.prevCropObj, previousText: null, currentText: null, previousFilter: null,\n                    isCircleCrop: null } });\n            this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n            var obj_4 = this.cancelCropSelection;\n            if ((obj_4 && isAspectRatio)) {\n                obj_4.previousObj.aspectWidth = obj_4.currentObj.aspectWidth = this.aspectWidth;\n                obj_4.previousObj.aspectHeight = obj_4.currentObj.aspectHeight = this.aspectHeight;\n                obj_4.previousCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n                obj_4.currentCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n                this.notify('draw', { prop: 'updateCropSelObj' });\n            }\n            this.cancelCropSelection = null;\n            this.isAspectRatio = false;\n        }\n        var selElem = this.element.querySelector('.e-contextual-toolbar-wrapper .e-toolbar-item.e-selected');\n        var obj = { bool: false };\n        this.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: obj } });\n        var frameObject = { bool: null };\n        this.notify('toolbar', { prop: 'getFrameToolbar', onPropertyChange: false, value: { obj: frameObject } });\n        var sliderWrap = document.querySelector('#' + this.element.id + '_sliderWrapper');\n        if (selElem) {\n            this.currentFilter = selElem.children[0].children[0].id.replace('Canvas', '');\n        }\n        if (isCropSelection) {\n            if (this.transform.straighten !== 0 && (this.panPoint.totalPannedPoint.x !== 0 || this.panPoint.totalPannedPoint.y !== 0 ||\n                this.panPoint.totalPannedClientPoint.x !== 0 || this.panPoint.totalPannedClientPoint.y !== 0)) {\n                var temp = this.prevStraightenedDegree;\n                this.prevStraightenedDegree = this.transform.straighten;\n                this.setStraighten(this.transform.straighten - 3);\n                this.setStraighten(this.transform.straighten + 3);\n                this.prevStraightenedDegree = temp;\n            }\n            this.isCroppedEvent = this.crop();\n        }\n        else if (this.togglePen) {\n            this.freeHandDraw(false);\n            if (!this.isMaskImage) {\n                var widthObj = { penStrokeWidth: null };\n                this.notify('freehand-draw', { prop: 'getPenStrokeWidth', onPropertyChange: false, value: { obj: widthObj } });\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n                this.notify('freehand-draw', { prop: 'setPenStrokeWidth', onPropertyChange: false, value: { value: widthObj['penStrokeWidth'] } });\n            }\n            this.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n            this.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.upperContext } });\n        }\n        else if (this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block') {\n            this.notify('shape', { prop: 'redrawActObj', onPropertyChange: false,\n                value: { x: null, y: null, isMouseDown: null } });\n            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);\n            this.notify('draw', { prop: 'redrawImgWithObj', onPropertyChange: false });\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isMouseDown)) {\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n            }\n            this.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.lowerContext } });\n            this.notify('draw', { prop: 'clearOuterCanvas', onPropertyChange: false, value: { context: this.upperContext } });\n        }\n        else if ((sliderWrap || this.currObjType.isFiltered) && !this.drawingShape && this.activeObj.shape !== 'redact') {\n            this.initialAdjustmentValue = this.canvasFilter = this.lowerContext.filter;\n            this.currObjType.isFiltered = false;\n            var obj_5 = { value: null };\n            this.notify('draw', { prop: 'getTempAdjustmentValue', value: { obj: obj_5 } });\n            if (!sliderWrap || sliderWrap.parentElement.previousElementSibling.textContent !== 'Opacity') {\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n            }\n            if ((this.activeObj.activePoint.width !== 0 && this.activeObj.activePoint.height !== 0) ||\n                (this.activeObj.shape === 'path' && this.activeObj.pointColl.length > 0)) {\n                this.notify('shape', { prop: 'applyActObj', onPropertyChange: false, value: { isMouseDown: null } });\n            }\n        }\n        else if (obj['bool']) {\n            this.notify('freehand-draw', { prop: 'applyFhd', onPropertyChange: false });\n            this.notify('selection', { prop: 'setFreehandDrawCustomized', value: { isFreehandDrawCustomized: false } });\n            this.notify('toolbar', { prop: 'destroy-qa-toolbar' });\n            this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n            this.notify('freehand-draw', { prop: 'resetFreehandDrawSelectedId', onPropertyChange: false });\n        }\n        else if ((this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) ||\n            (this.activeObj.shape === 'path' && this.activeObj.pointColl.length > 0)) {\n            if (this.activeObj.shape === 'image') {\n                this.notify('draw', { prop: 'setImageApply', onPropertyChange: false, value: { bool: true } });\n            }\n            this.notify('shape', { prop: 'applyActObj', onPropertyChange: false, value: { isMouseDown: null } });\n        }\n        else {\n            if (JSON.stringify(this.frameObj) !== JSON.stringify(this.tempFrameObj)) {\n                var object = { currObj: {} };\n                this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false, value: {\n                        operation: 'frame', previousObj: object['currObj'], previousObjColl: object['currObj']['objColl'],\n                        previousPointColl: object['currObj']['pointColl'], previousSelPointColl: object['currObj']['selPointColl'],\n                        previousCropObj: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true), previousText: null, currentText: null,\n                        previousFilter: null, isCircleCrop: null\n                    } });\n                this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null, isPreventClearRect: null, isFrame: true } });\n                var currFrameSettings = { type: this.toPascalCase(this.frameObj.type),\n                    color: this.frameObj.color, gradientColor: this.frameObj.gradientColor, size: this.frameObj.size,\n                    inset: this.frameObj.inset, offset: this.frameObj.offset, borderRadius: this.frameObj.radius,\n                    frameLineStyle: this.toPascalCase(this.frameObj.border), lineCount: this.frameObj.amount };\n                var prevFrameSettings = { type: this.toPascalCase(this.tempFrameObj.type),\n                    color: this.tempFrameObj.color, gradientColor: this.tempFrameObj.gradientColor, size: this.tempFrameObj.size,\n                    inset: this.tempFrameObj.inset, offset: this.tempFrameObj.offset, borderRadius: this.tempFrameObj.radius,\n                    frameLineStyle: this.toPascalCase(this.tempFrameObj.border), lineCount: this.tempFrameObj.amount };\n                var frameChange = { cancel: false, previousFrameSetting: prevFrameSettings,\n                    currentFrameSetting: currFrameSettings };\n                this.editCompleteArgs = frameChange;\n                this.notify('undo-redo', { prop: 'updateCurrUrc', value: { type: 'ok' } });\n                this.tempFrameObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.frameObj, {}, true);\n            }\n            this.notify('draw', { prop: 'resetFrameZoom', onPropertyChange: false, value: { isOk: true } });\n        }\n        if (!obj['isCropToolbar']) {\n            this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                    isApplyBtn: false, isCropping: null, isZooming: null, cType: null } });\n            this.currObjType.isRedact = false;\n        }\n        this.notify('draw', { prop: 'setNewPath', value: { bool: false } });\n        this.transform.zoomFactor = this.transform.defaultZoomFactor;\n        this.notify('selection', { prop: 'setCurrentDrawingShape', onPropertyChange: false, value: { value: '' } });\n        this.isResizeOkBtn = false;\n        this.notify('draw', { prop: 'redrawDownScale' });\n        this.isChangesSaved = this.isFinetuneBtnClick = false;\n        if (isFinalApply) {\n            this.drawingShape = null;\n            this.notify('draw', { prop: 'resetTempObjColl' });\n            this.notify('draw', { prop: 'resetTempPointColl' });\n        }\n    };\n    ImageEditor.prototype.triggerEditCompleteEvent = function (args) {\n        if (args.action === 'shape-insert' && args.actionEventArgs &&\n            args.actionEventArgs.currentShapeSettings &&\n            args.actionEventArgs.currentShapeSettings.type.toString() === 'Redact') {\n            args.action = 'redact';\n        }\n        this.trigger('editComplete', args);\n        this.editCompleteArgs = null;\n    };\n    /**\n     * Handles the OK button operation\n     *\n     * @param { string } id - Specifies shape id to return.\n     * @hidden\n     * @returns {SelectionPoint | Object}.\n     */\n    ImageEditor.prototype.getObjFromId = function (id) {\n        var obj;\n        if (this.activeObj.currIndex && this.activeObj.currIndex === id) {\n            obj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        }\n        else {\n            for (var i = 0; i < this.shapeColl.length; i++) {\n                var shapeId = this.shapeColl[i].id ? this.shapeColl[i].id :\n                    this.shapeColl[i].currIndex;\n                if (shapeId === id) {\n                    obj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.shapeColl[i], {}, true);\n                    break;\n                }\n            }\n        }\n        return obj;\n    };\n    /**\n     * Set the temporary filter properties.\n     *\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.setTempFilterProperties = function () {\n        this.upperCanvas.style.display = 'block';\n        this.cropSelectedState();\n        var obj = { adjustmentLevel: null };\n        this.notify('filter', { prop: 'getAdjustmentLevel', onPropertyChange: false,\n            value: { obj: obj } });\n        this.lowerContext.filter = this.initialAdjustmentValue;\n        this.notify('draw', { prop: 'setTempAdjustmentValue', value: { tempAdjustmentValue: this.lowerContext.filter } });\n        this.notify('filter', { prop: 'setTempAdjustmentLevel', onPropertyChange: false,\n            value: { tempAdjustmentLevel: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, obj['adjustmentLevel'], {}, true) } });\n        this.notify('draw', { prop: 'setTempFilter', value: { tempFilter: this.currentFilter } });\n        var undoRedoObj = { undoRedoStep: null };\n        this.notify('undo-redo', { prop: 'getUndoRedoStep', value: { obj: undoRedoObj } });\n        this.notify('draw', { prop: 'setTempUndoRedoStep', value: { tempUndoRedoStep: undoRedoObj['undoRedoStep'] } });\n    };\n    /**\n     * To crop the selection.\n     *\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.cropSelectedState = function () {\n        if (this.activeObj.shape && this.activeObj.shape.split('-')[0] === 'crop') {\n            this.okBtn();\n        }\n    };\n    /**\n     * Get the current canvas data.\n     *\n     * @hidden\n     * @returns {ImageData}.\n     * An ImageData returns the current canvas image data object.\n     */\n    ImageEditor.prototype.getCurrentCanvasData = function () {\n        var tempFrame = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.frameObj, {}, true);\n        this.frameObj = { type: 'none', color: '#fff', size: 20, inset: 20, offset: 20, radius: 0, amount: 1, border: 'solid', gradientColor: '' };\n        var tempFilter = this.lowerContext.filter;\n        this.lowerContext.filter = this.canvasFilter = 'none';\n        var objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, null, true);\n        var pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, null, true);\n        this.objColl = [];\n        this.pointColl = [];\n        this.freehandCounter = 0;\n        this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n        var ctWrapper = this.element.querySelector('.e-contextual-toolbar-wrapper');\n        if (ctWrapper) {\n            ctWrapper.classList.add('e-hide');\n        }\n        var data = this.getImageData();\n        if (ctWrapper) {\n            ctWrapper.classList.remove('e-hide');\n        }\n        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            this.notify('toolbar', { prop: 'refresh-toolbar', onPropertyChange: false, value: { type: 'main',\n                    isApplyBtn: true, isCropping: false } });\n        }\n        this.element.querySelector('#' + this.element.id + '_contextualToolbarArea').classList.remove('e-hide');\n        this.objColl = objColl;\n        this.pointColl = pointColl;\n        this.freehandCounter = pointColl.length;\n        this.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n            value: { ctx: this.lowerContext, shape: 'iterate', pen: 'iterate', isPreventApply: null } });\n        this.lowerContext.filter = this.canvasFilter = tempFilter;\n        this.frameObj = tempFrame;\n        return data;\n    };\n    /**\n     * To set current adjustment value\n     *\n     * @param { string } type - Specifies the type of adjustment.\n     * @param { number } value - Specifies the value to adjust.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.setCurrAdjustmentValue = function (type, value) {\n        var finetuneValueChanging = { finetune: this.getFinetuneOption(type), value: value, cancel: false };\n        this.trigger('finetuneValueChanging', finetuneValueChanging);\n        this.editCompleteArgs = finetuneValueChanging;\n        if (finetuneValueChanging.cancel) {\n            return;\n        }\n        this.notify('filter', { prop: 'setCurrAdjValue', value: { type: type.toLowerCase(), value: value } });\n    };\n    /**\n     * Get the square point for path.\n     *\n     * @param { SelectionPoint } obj - Specifies the points of path.\n     * @hidden\n     * @returns {ActivePoint}.\n     * An ActivePoint object which returns the square point.\n     */\n    ImageEditor.prototype.getSquarePointForPath = function (obj) {\n        var point = { startX: 0, startY: 0, endX: 0, endY: 0, width: 0, height: 0 };\n        if (obj.pointColl.length > 0) {\n            point = { startX: obj.pointColl[0].x, startY: obj.pointColl[0].y, endX: obj.pointColl[0].x, endY: obj.pointColl[0].y };\n            for (var i = 1; i < obj.pointColl.length; i++) {\n                if (obj.pointColl[i].x < point.startX) {\n                    point.startX = obj.pointColl[i].x;\n                }\n                if (obj.pointColl[i].y < point.startY) {\n                    point.startY = obj.pointColl[i].y;\n                }\n                if (obj.pointColl[i].x > point.endX) {\n                    point.endX = obj.pointColl[i].x;\n                }\n                if (obj.pointColl[i].y > point.endY) {\n                    point.endY = obj.pointColl[i].y;\n                }\n            }\n            point.width = point.endX - point.startX;\n            point.height = point.endY - point.startY;\n        }\n        return point;\n    };\n    /**\n     * Get the SelectionType.\n     *\n     * @param { string } type - Specifies the SelectionType.\n     * @hidden\n     * @returns {string}.\n     * An string which returns the SelectionType.\n     */\n    ImageEditor.prototype.getSelectionType = function (type) {\n        type = type === 'crop-custom' ? 'CropCustom' : type;\n        var typeToSelectionType = { 'CropCustom': 'Custom', 'CropSquare': 'Square', 'CropCircle': 'Circle',\n            'Crop3:2': '3:2', 'Crop4:3': '4:3', 'Crop5:4': '5:4', 'Crop7:5': '7:5', 'Crop16:9': '16:9',\n            'Crop2:3': '2:3', 'Crop3:4': '3:4', 'Crop4:5': '4:5', 'Crop5:7': '5:7', 'Crop9:16': '9:16' };\n        return typeToSelectionType[\"\" + type] ? typeToSelectionType[\"\" + type] : type.split('Crop')[1];\n    };\n    /** Clears the context.\n     *\n     * @param { CanvasRenderingContext2D } ctx - Specifies the canvas context.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.clearContext = function (ctx) {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.clearRect(0, 0, ctx.canvas.height, ctx.canvas.width);\n    };\n    /**\n     * Apply Arrow for start and end.\n     *\n     * @param { string } type - Specifies the start arrow or end arrow.\n     * @param { string } id - Specifies the start arrow or end arrow item id.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateArrow = function (type, id) {\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var object = { currObj: {} };\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        if (type === 'startArrow') {\n            this.activeObj.start = this.getTextFromId(id);\n        }\n        else if (type === 'endArrow') {\n            this.activeObj.end = this.getTextFromId(id);\n        }\n        this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                strokeWidth: this.activeObj.strokeSettings.strokeWidth } });\n        this.objColl.push(this.activeObj);\n        if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n        }\n        this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {\n            if (document.getElementById(this.element.id + '_bottomToolbar')) {\n                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                var toolbar_1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(this.element.id + '_bottomToolbar', 'toolbar');\n                toolbar_1.refreshOverflow();\n            }\n        }\n        else {\n            if (document.getElementById(this.element.id + '_toolbar')) {\n                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                var toolbar_2 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getComponent)(this.element.id + '_toolbar', 'toolbar');\n                toolbar_2.refreshOverflow();\n            }\n        }\n        var shapeChangedArgs = { action: type, currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Font style for text.\n     *\n     * @param { string } id - Specifies the selected item id.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateFontFamily = function (id) {\n        this.notify('selection', { prop: 'setInitialTextEdit', value: { bool: false } });\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        if (this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block') {\n            this.notify('shape', { prop: 'updateFontRatio', onPropertyChange: false,\n                value: { obj: this.activeObj, isTextArea: true } });\n            var temp = this.activeObj.textSettings.fontFamily;\n            this.activeObj.textSettings.fontFamily = this.toPascalCase(id);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('shape', { prop: 'redraw-text' });\n            }\n            this.objColl.push(this.activeObj);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'textAreaCustomization', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n            }\n            this.objColl.pop();\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            var width = this.activeObj.activePoint.width +\n                this.activeObj.textSettings.fontSize * 0.25;\n            this.textArea.style.width = width + 'px';\n            this.textArea.style.fontFamily = this.toPascalCase(id);\n            this.activeObj.textSettings.fontFamily = temp;\n            this.notify('shape', { prop: 'updateFontStyles', onPropertyChange: false,\n                value: { isTextBox: null } });\n        }\n        else {\n            this.notify('shape', { prop: 'updateFontRatio', onPropertyChange: false,\n                value: { obj: this.activeObj, isTextArea: null } });\n            var fontFamily = this.activeObj.textSettings.fontFamily = this.toPascalCase(id);\n            this.notify('shape', { prop: 'setTextSettings', onPropertyChange: false,\n                value: { textSettings: null, fontFamily: fontFamily, fontSize: null } });\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('shape', { prop: 'redraw-text' });\n            }\n            this.objColl.push(this.activeObj);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: objColl,\n                        previousPointColl: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true),\n                        previousSelPointColl: prevObj.selPointColl, previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n            }\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        }\n        var shapeChangedArgs = { action: 'font-family', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.fontFamily = this.textArea.style.fontFamily;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Font size for text.\n     *\n     * @param { string } text - Specifies the selected item text.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateFontSize = function (text) {\n        var itemText = text;\n        this.notify('selection', { prop: 'setInitialTextEdit', value: { bool: false } });\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        if (this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block') {\n            this.notify('shape', { prop: 'updateFontRatio', onPropertyChange: false,\n                value: { obj: this.activeObj, isTextArea: true } });\n            var temp = this.activeObj.textSettings.fontSize;\n            this.activeObj.textSettings.fontSize = parseInt(this.fontSizeColl[(parseInt(itemText, 10) - 1)].text, 10);\n            this.objColl.push(this.activeObj);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'textAreaCustomization', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n            }\n            this.objColl.pop();\n            var textStyle = '';\n            if (this.textArea.style.fontWeight === 'bold') {\n                textStyle = 'bold ';\n            }\n            if (this.textArea.style.fontStyle === 'italic') {\n                textStyle = 'italic ';\n            }\n            if (this.textArea.style.fontWeight === 'bold' && this.textArea.style.fontStyle === 'italic') {\n                textStyle = 'italic bold ';\n            }\n            this.upperContext.font = textStyle + this.activeObj.textSettings.fontSize + 'px' + ' ' + this.textArea.style.fontFamily;\n            var rows = this.textArea.value.split('\\n');\n            var obj = { maxText: '' };\n            this.notify('shape', { prop: 'getMaxText', onPropertyChange: false,\n                value: { isTextBox: true, text: null, obj: obj } });\n            var text_1 = obj['maxText'];\n            var width = this.upperContext.measureText(text_1).width +\n                this.activeObj.textSettings.fontSize * 0.5;\n            this.textArea.style.width = width + 'px';\n            this.textArea.style.height = rows.length * (this.activeObj.textSettings.fontSize + this.activeObj.textSettings.fontSize * 0.25) + 'px';\n            this.activeObj.textSettings.fontSize = temp;\n            this.upperContext.font = this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;\n            this.textArea.style.fontSize = parseInt(this.fontSizeColl[(parseInt(itemText, 10) - 1)].text, 10) + 'px';\n            if (this.textArea.style.fontFamily === 'georgia') {\n                this.textArea.style.width = parseFloat(this.textArea.style.width) + parseFloat(this.textArea.style.fontSize) + 'px';\n            }\n        }\n        else {\n            this.notify('shape', { prop: 'updateFontRatio', onPropertyChange: false,\n                value: { obj: this.activeObj, isTextArea: null } });\n            var fontSize = this.activeObj.textSettings.fontSize = parseInt(this.fontSizeColl[(parseInt(itemText, 10) - 1)].text, 10);\n            this.notify('shape', { prop: 'setTextSettings', onPropertyChange: false,\n                value: { textSettings: null, fontFamily: null, fontSize: fontSize } });\n            this.upperContext.font = this.activeObj.textSettings.fontSize + 'px' + ' ' + this.activeObj.textSettings.fontFamily;\n            var rows = this.activeObj.keyHistory.split('\\n');\n            var obj = { maxText: '' };\n            this.notify('shape', { prop: 'getMaxText', onPropertyChange: false,\n                value: { isTextBox: null, text: null, obj: obj } });\n            var text_2 = obj['maxText'];\n            var width = this.upperContext.measureText(text_2).width +\n                this.activeObj.textSettings.fontSize * 0.5;\n            var height = rows.length * (this.activeObj.textSettings.fontSize +\n                this.activeObj.textSettings.fontSize * 0.25);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('selection', { prop: 'setTextSelection', onPropertyChange: false,\n                    value: { width: width, height: height } });\n                this.notify('draw', { prop: 'updateActiveObject', onPropertyChange: false, value: { actPoint: this.activeObj.activePoint, obj: this.activeObj,\n                        isMouseMove: null, x: null, y: null } });\n                this.notify('shape', { prop: 'redraw-text' });\n            }\n            this.objColl.push(this.activeObj);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n            }\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        }\n        var shapeChangedArgs = { action: 'font-size', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.fontSize = this.activeObj.textSettings.fontSize;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Font color for text.\n     *\n     * @param { string } value - Specifies the selected color item value.\n     * @param { string } color - Specifies the selected color type value.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateFontColor = function (value, color) {\n        this.notify('selection', { prop: 'setInitialTextEdit', value: { bool: false } });\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        if (this.textArea.style.display === 'none') {\n            if (color === 'Text') {\n                this.activeObj.strokeSettings.strokeColor = value;\n                this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null,\n                        strokeColor: this.activeObj.strokeSettings.strokeColor, fillColor: null, strokeWidth: null } });\n            }\n            else {\n                this.activeObj.strokeSettings.fillColor = value;\n                this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null,\n                        strokeColor: null, fillColor: this.activeObj.strokeSettings.fillColor, strokeWidth: null } });\n            }\n            if (!this.togglePen) {\n                if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                    this.objColl.push(this.activeObj);\n                    this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                        value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                            previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                            previousCropObj: prevCropObj, previousText: null,\n                            currentText: null, previousFilter: null, isCircleCrop: null } });\n                    this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n                }\n            }\n        }\n        else if (this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block') {\n            this.textArea.style[color === 'Text' ? 'color' : 'backgroundColor'] = value;\n            var temp = color === 'Text' ? this.activeObj.strokeSettings.strokeColor : this.activeObj.strokeSettings.fillColor;\n            this.activeObj.strokeSettings[color === 'Text' ? 'strokeColor' : 'fillColor'] = value;\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.objColl.push(this.activeObj);\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'textAreaCustomization', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n                this.objColl.pop();\n            }\n            this.activeObj.strokeSettings[color === 'Text' ? 'strokeColor' : 'fillColor'] = temp;\n        }\n        else if (!this.togglePen) {\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.objColl.push(this.activeObj);\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n                this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n            }\n        }\n        var shapeChangedArgs = { action: 'font-color', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.fillColor = value;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Font color for text.\n     *\n     * @param { string } value - Specifies the selected color item value.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateStrokeTextColor = function (value) {\n        this.notify('selection', { prop: 'setInitialTextEdit', value: { bool: false } });\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        if (this.textArea.style.display === 'none') {\n            this.activeObj.strokeSettings.outlineColor = value;\n            this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null,\n                    strokeColor: null, fillColor: null, strokeWidth: null, outlineColor: this.activeObj.strokeSettings.outlineColor } });\n            if (!this.togglePen) {\n                if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                    this.objColl.push(this.activeObj);\n                    this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                        value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                            previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                            previousCropObj: prevCropObj, previousText: null,\n                            currentText: null, previousFilter: null, isCircleCrop: null } });\n                    this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n                }\n            }\n        }\n        else if (this.textArea.style.display === 'block' || this.textArea.style.display === 'inline-block') {\n            this.textArea.style.textShadow = \"-1px -1px 0 \" + value + \", 1px -1px 0 \" + value + \", -1px 1px 0 \" + value + \", 1px 1px 0 \" + value;\n            var temp = this.activeObj.strokeSettings.outlineColor;\n            this.activeObj.strokeSettings.outlineColor = value;\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.objColl.push(this.activeObj);\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'textAreaCustomization', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n                this.objColl.pop();\n            }\n            this.activeObj.strokeSettings.outlineColor = temp;\n        }\n        else if (!this.togglePen) {\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.objColl.push(this.activeObj);\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n                this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n            }\n        }\n        var shapeChangedArgs = { action: 'font-color', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.fillColor = value;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Pen stroke width.\n     *\n     * @param { string } id - Specifies the selected item id.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updatePenStrokeWidth = function (id) {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        this.updateFreehandDrawColorChange();\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        this.pointColl = temp;\n        this.notify('selection', { prop: 'setFreehandDrawCustomized', value: { isFreehandDrawCustomized: true } });\n        this.setPenStroke(id);\n        var obj = { bool: false };\n        this.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: obj } });\n        if (obj['bool']) {\n            var obj_6 = { penStrokeWidth: null };\n            this.notify('freehand-draw', { prop: 'getPenStrokeWidth', onPropertyChange: false, value: { obj: obj_6 } });\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            this.lowerContext.clearRect(0, 0, this.lowerCanvas.width, this.lowerCanvas.height);\n            this.notify('freehand-draw', { prop: 'hoverFhd', onPropertyChange: false,\n                value: { strokeColor: null, strokeWidth: obj_6['penStrokeWidth'] } });\n            var indexObj = { freehandSelectedIndex: null };\n            this.notify('freehand-draw', { prop: 'getFreehandSelectedIndex', onPropertyChange: false, value: { obj: indexObj } });\n            this.pointColl[indexObj['freehandSelectedIndex']].strokeWidth = obj_6['penStrokeWidth'];\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null } });\n            this.notify('draw', { prop: 'redrawDownScale' });\n            this.notify('freehand-draw', { prop: 'hoverFhd', onPropertyChange: false,\n                value: { strokeColor: null, strokeWidth: obj_6['penStrokeWidth'] } });\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'freehanddrawCustomized', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n        }\n        shapeSettings.type = _index__WEBPACK_IMPORTED_MODULE_2__.ShapeType.FreehandDraw;\n        var shapeChangedArgs = { action: 'stroke-width', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.strokeWidth = this.activeObj.strokeSettings.strokeWidth;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Pen stroke color.\n     *\n     * @param { string } value - Specifies the selected color item value.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updatePenStrokeColor = function (value) {\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        var temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        this.updateFreehandDrawColorChange();\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        this.pointColl = temp;\n        this.notify('selection', { prop: 'setFreehandDrawCustomized', value: { isFreehandDrawCustomized: true } });\n        this.activeObj.strokeSettings.strokeColor = value;\n        var indexObj = { freehandSelectedIndex: null };\n        this.notify('freehand-draw', { prop: 'getFreehandSelectedIndex', onPropertyChange: false, value: { obj: indexObj } });\n        if (indexObj['freehandSelectedIndex'] !== null && indexObj['freehandSelectedIndex'] !== undefined) {\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: null } });\n            this.notify('draw', { prop: 'redrawDownScale' });\n            this.notify('freehand-draw', { prop: 'hoverFhd', onPropertyChange: false,\n                value: { strokeColor: null, strokeWidth: null } });\n        }\n        var obj = { bool: false };\n        this.notify('selection', { prop: 'getFreehandDrawEditing', onPropertyChange: false, value: { obj: obj } });\n        if (obj['bool']) {\n            var indexObj_1 = { freehandSelectedIndex: null };\n            this.notify('freehand-draw', { prop: 'getFreehandSelectedIndex', onPropertyChange: false, value: { obj: indexObj_1 } });\n            this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n            this.pointColl[indexObj_1['freehandSelectedIndex']].strokeColor = value;\n            this.notify('freehand-draw', { prop: 'hoverFhd', onPropertyChange: false,\n                value: { strokeColor: value } });\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'freehanddrawCustomized', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n        }\n        else if (!this.togglePen) {\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.activeObj } });\n        }\n        shapeSettings.type = _index__WEBPACK_IMPORTED_MODULE_2__.ShapeType.FreehandDraw;\n        var shapeChangedArgs = { action: 'stroke-color', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.strokeColor = value;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Shape stroke width.\n     *\n     * @param { string } id - Specifies the selected item id.\n     * @param { string } type - Specifies the type of selected item.\n     * @param { string } shapeType - Specifies the shape type of selected item.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateStrokeWidth = function (id, type, shapeType) {\n        if (this.activeObj.shape && (this.activeObj.shape !== 'path' || (this.activeObj.shape === 'path' &&\n            this.activeObj.pointColl.length > 0))) {\n            var obj = { shapeSettingsObj: {} };\n            this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: obj } });\n            var shapeSettings = obj['shapeSettingsObj'];\n            var isObjPushed = false;\n            var collLength = this.objColl.length;\n            this.notify('shape', { prop: 'pushActItemIntoObj' });\n            if (collLength !== this.objColl.length) {\n                isObjPushed = true;\n            }\n            var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            var prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            if (isObjPushed) {\n                this.objColl.pop();\n            }\n            this.activeObj.strokeSettings[type === 'width' ? (shapeType === 'text' ? 'outlineWidth' : 'strokeWidth') : 'radius'] = parseInt(id, 10);\n            if (this.activeObj.shape === 'rectangle' || this.activeObj.shape === 'ellipse') {\n                this.activeObj.strokeSettings[type === 'width' ? (shapeType === 'text' ? 'outlineWidth' : 'strokeWidth') : 'radius'] = parseInt(id, 10) - 1;\n            }\n            this.activeObj.strokeSettings[type === 'width' ? (shapeType === 'text' ? 'outlineWidth' : 'strokeWidth') : 'radius'] *= 2;\n            if (type === 'width') {\n                if (shapeType === 'text') {\n                    this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                            strokeWidth: null, radius: null, outlineWidth: this.activeObj.strokeSettings.outlineWidth } });\n                }\n                else {\n                    this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                            strokeWidth: this.activeObj.strokeSettings.strokeWidth, radius: null, outlineWidth: null } });\n                }\n            }\n            else {\n                this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                        strokeWidth: null, radius: this.activeObj.strokeSettings.radius } });\n            }\n            this.objColl.push(this.activeObj);\n            if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                    value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                        previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                        previousCropObj: prevCropObj, previousText: null,\n                        currentText: null, previousFilter: null, isCircleCrop: null } });\n            }\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n            var shapeChangedArgs = { action: 'stroke-width', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n            shapeChangedArgs.currentShapeSettings[type === 'width' ? (shapeType === 'text' ? 'outlineWidth' : 'strokeWidth') : 'radius'] = this.activeObj.strokeSettings[type === 'width' ? (shapeType === 'text' ? 'outlineWidth' : 'strokeWidth') : 'radius'];\n            this.trigger('shapeChange', shapeChangedArgs);\n            this.editCompleteArgs = shapeChangedArgs;\n        }\n        else if (this.activeObj.shape && (this.activeObj.shape === 'path' &&\n            this.activeObj.pointColl.length === 0)) {\n            this.activeObj.strokeSettings.strokeWidth = parseInt(id, 10);\n            this.activeObj.strokeSettings.strokeWidth *= 2;\n            if (type === 'width') {\n                if (shapeType === 'text') {\n                    this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                            strokeWidth: null, radius: null, outlineWidth: this.activeObj.strokeSettings.outlineWidth } });\n                }\n                else {\n                    this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                            strokeWidth: this.activeObj.strokeSettings.strokeWidth, radius: null, outlineWidth: null } });\n                }\n            }\n            else {\n                this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                        strokeWidth: null, radius: this.activeObj.strokeSettings.radius } });\n            }\n        }\n    };\n    /**\n     * Apply Shape stroke color.\n     *\n     * @param { string } value - Specifies the selected color item value.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateStrokeColor = function (value) {\n        var objt = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: objt } });\n        var shapeSettings = objt['shapeSettingsObj'];\n        if (this.activeObj.shape && (this.activeObj.shape !== 'path' || (this.activeObj.shape === 'path' &&\n            this.activeObj.pointColl.length > 0))) {\n            var isObjPushed = false;\n            var collLength = this.objColl.length;\n            this.notify('shape', { prop: 'pushActItemIntoObj' });\n            if (collLength !== this.objColl.length) {\n                isObjPushed = true;\n            }\n            var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            var prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            if (isObjPushed) {\n                this.objColl.pop();\n            }\n            this.activeObj.strokeSettings.strokeColor = value;\n            this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: this.activeObj.strokeSettings.strokeColor, fillColor: null, strokeWidth: null } });\n            if (!this.togglePen) {\n                this.objColl.push(this.activeObj);\n                if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n                    this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                        value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                            previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                            previousCropObj: prevCropObj, previousText: null,\n                            currentText: null, previousFilter: null, isCircleCrop: null } });\n                }\n                this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n            }\n        }\n        else if (this.activeObj.shape && (this.activeObj.shape === 'path' &&\n            this.activeObj.pointColl.length === 0)) {\n            this.activeObj.strokeSettings.strokeColor = value;\n            this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: this.activeObj.strokeSettings.strokeColor, fillColor: null, strokeWidth: null } });\n        }\n        var shapeChangedArgs = { action: 'stroke-color', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        shapeChangedArgs.currentShapeSettings.strokeColor = value;\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply Shape fill color.\n     *\n     * @param { string } value - Specifies the selected color item value.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateFillColor = function (value) {\n        var obj = { shapeSettingsObj: {} };\n        this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: obj } });\n        var shapeSettings = obj['shapeSettingsObj'];\n        var isObjPushed = false;\n        var collLength = this.objColl.length;\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        if (collLength !== this.objColl.length) {\n            isObjPushed = true;\n        }\n        var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        var prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (isObjPushed) {\n            this.objColl.pop();\n        }\n        this.activeObj.strokeSettings.fillColor = value;\n        this.notify('shape', { prop: 'setStrokeSettings',\n            value: { strokeSettings: null, strokeColor: null, fillColor: this.activeObj.strokeSettings.fillColor,\n                strokeWidth: null } });\n        this.objColl.push(this.activeObj);\n        if (this.activeObj.activePoint.width !== 0 || this.activeObj.activePoint.height !== 0) {\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n        }\n        this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        var shapeChangedArgs = { action: 'fill-color', currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n        this.trigger('shapeChange', shapeChangedArgs);\n        this.editCompleteArgs = shapeChangedArgs;\n    };\n    /**\n     * Apply horizontal flip.\n     *\n     * @param { CanvasRenderingContext2D } ctx - Specifies the canvas context 2D.\n     * @param { boolean } isPreventURC - Specifies to update undo redo collection.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.horizontalFlip = function (ctx, isPreventURC) {\n        var prevCropObj;\n        var prevObj;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreventURC)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeObj.imageRatio)) {\n                this.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n            }\n            this.notify('shape', { prop: 'pushActItemIntoObj' });\n            prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            this.objColl.pop();\n        }\n        this.notify('toolbar', { prop: 'refreshSlider' });\n        ctx.clearRect(0, 0, this.activeObj.imageCanvas.width, this.activeObj.imageCanvas.height);\n        var activePoint = this.duplicateImage();\n        this.notify('draw', { prop: 'downScaleImgCanvas', onPropertyChange: false,\n            value: { ctx: this.activeObj.imageCanvas.getContext('2d'), isImgAnnotation: true, isHFlip: true, isVFlip: null } });\n        this.activeObj.activePoint = activePoint;\n        this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate' } });\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreventURC)) {\n            this.objColl.push(this.activeObj);\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'imageHFlip', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        }\n    };\n    /**\n     * Apply vertical flip.\n     *\n     * @param { CanvasRenderingContext2D } ctx - Specifies the canvas context 2D.\n     * @param { boolean } isPreventURC - Specifies to update undo redo collection.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.verticalFlip = function (ctx, isPreventURC) {\n        var prevCropObj;\n        var prevObj;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreventURC)) {\n            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeObj.imageRatio)) {\n                this.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n            }\n            this.notify('shape', { prop: 'pushActItemIntoObj' });\n            prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            this.objColl.pop();\n        }\n        this.notify('toolbar', { prop: 'refreshSlider' });\n        ctx.clearRect(0, 0, this.activeObj.imageCanvas.width, this.activeObj.imageCanvas.height);\n        var activePoint = this.duplicateImage();\n        this.notify('draw', { prop: 'downScaleImgCanvas', onPropertyChange: false,\n            value: { ctx: this.activeObj.imageCanvas.getContext('2d'), isImgAnnotation: true, isHFlip: null, isVFlip: true } });\n        this.activeObj.activePoint = activePoint;\n        this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate' } });\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(isPreventURC)) {\n            this.objColl.push(this.activeObj);\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'imageVFlip', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n            this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        }\n    };\n    /**\n     * Apply rotate image.\n     *\n     * @param { string } rotate - Specifies the direction of rotation.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.rotateImage = function (rotate) {\n        var prevCropObj;\n        var prevObj;\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeObj.imageRatio)) {\n            this.notify('shape', { prop: 'updImgRatioForActObj', onPropertyChange: false });\n        }\n        this.notify('shape', { prop: 'pushActItemIntoObj' });\n        // eslint-disable-next-line prefer-const\n        prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        // eslint-disable-next-line prefer-const\n        prevObj = object['currObj'];\n        prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        this.objColl.pop();\n        this.notify('toolbar', { prop: 'refreshSlider' });\n        if (rotate === 'rotleft') {\n            this.activeObj.rotatedAngle -= (90 * (Math.PI / 180));\n        }\n        else {\n            this.activeObj.rotatedAngle += (90 * (Math.PI / 180));\n        }\n        this.notify('selection', { prop: 'updPtCollForShpRot', onPropertyChange: false, value: { obj: this.activeObj } });\n        this.upperContext.clearRect(0, 0, this.upperCanvas.width, this.upperCanvas.height);\n        this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate' } });\n        this.objColl.push(this.activeObj);\n        this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n            value: { operation: 'imageRotate', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                previousCropObj: prevCropObj, previousText: null,\n                currentText: null, previousFilter: null, isCircleCrop: null } });\n        this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n        this.notify('toolbar', { prop: 'destroy-qa-toolbar' });\n        this.notify('toolbar', { prop: 'renderQAT', onPropertyChange: false, value: { isPenEdit: null } });\n    };\n    /**\n     * Get pascalToSplitWords from string.\n     *\n     * @param { string } str - Specifies the word.\n     * @hidden\n     * @returns {string}.\n     */\n    ImageEditor.prototype.pascalToSplitWords = function (str) {\n        str = str.charAt(0).toUpperCase() + str.slice(1);\n        var splitStr = str.match(/[A-Z][a-z]+/g);\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitStr)) {\n            return str;\n        }\n        else {\n            return splitStr.map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); }).join(' ');\n        }\n    };\n    /**\n     * Get Slider Value.\n     *\n     * @param { string } type - Finetune type.\n     * @hidden\n     * @returns {number}.\n     */\n    ImageEditor.prototype.getCurrAdjustmentValue = function (type) {\n        var value = 100;\n        var indexObj = { freehandSelectedIndex: null };\n        this.notify('freehand-draw', { prop: 'getFreehandSelectedIndex', onPropertyChange: false, value: { obj: indexObj } });\n        if (type === 'transparency' && this.togglePen) {\n            var obj = { penOpacity: 1 };\n            this.notify('freehand-draw', { prop: 'getPenOpacity', onPropertyChange: false, value: { obj: obj } });\n            value = obj['penOpacity'] * 100;\n        }\n        else if (type === 'transparency' && indexObj['freehandSelectedIndex'] !== null && indexObj['freehandSelectedIndex'] !== undefined) {\n            value = this.pointColl[indexObj['freehandSelectedIndex']].opacity * 100;\n        }\n        else {\n            var obj = { adjustmentLevel: null };\n            this.notify('filter', { prop: 'getAdjustmentLevel', onPropertyChange: false,\n                value: { obj: obj } });\n            var typeToAdjustmentLevel = { 'brightness': obj['adjustmentLevel'].brightness,\n                'contrast': obj['adjustmentLevel'].contrast, 'hue': obj['adjustmentLevel'].hue,\n                'saturation': obj['adjustmentLevel'].saturation, 'opacity': obj['adjustmentLevel'].opacity,\n                'blur': obj['adjustmentLevel'].blur, 'exposure': obj['adjustmentLevel'].exposure,\n                'transparency': obj['adjustmentLevel'].transparency, 'straighten': this.transform.straighten };\n            value = typeToAdjustmentLevel[\"\" + type];\n        }\n        return value;\n    };\n    /**\n     * Apply transformSelect.\n     *\n     * @param { string } type - Specifies the selected item text.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.transformSelect = function (type) {\n        if (this.transform.straighten === 0 && (type === 'rotateleft' || type === 'rotateright') &&\n            this.activeObj.shape && (['crop-2:3', 'crop-3:2', 'crop-3:4', 'crop-4:3', 'crop-4:5', 'crop-5:4', 'crop-5:7', 'crop-7:5',\n            'crop-9:16', 'crop-16:9'].indexOf(this.activeObj.shape) !== -1 || (this.activeObj.shape.indexOf('crop-') !== -1 &&\n            this.activeObj.shape !== 'crop-custom' && this.activeObj.shape !== 'crop-square' && this.activeObj.shape !== 'crop-circle'))) {\n            this.activeObj.shape = 'crop-' + this.activeObj.shape.split('-')[1].split(':')[1] + ':' + this.activeObj.shape.split('-')[1].split(':')[0];\n            this.notify('toolbar', { prop: 'performCropTransformClick', value: { shape: this.activeObj.shape, isTransform: true } });\n        }\n        this.isCropToolbar = true;\n        this.allowDownScale = false;\n        var straighten = this.transform.straighten;\n        var straightenObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        var zoomFactor = this.transform.zoomFactor;\n        this.prevEventSelectionPoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        var object = { currObj: {} };\n        this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n        this.prevEventObjPoint = object['currObj'];\n        this.prevEventObjPoint.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n        this.prevEventObjPoint.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n        this.prevEventObjPoint.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n        var selPointCollObj = { selPointColl: null };\n        this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n            value: { obj: selPointCollObj } });\n        this.prevEventObjPoint.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n        if (this.transform.straighten !== 0) {\n            this.transform.straighten = 0;\n            this.straightenBaseImageCanvas();\n            for (var i = 0, len = this.objColl.length; i < len; i++) {\n                var shape = this.objColl[i].shape;\n                if (shape !== 'line' && shape !== 'arrow' && shape !== 'path') {\n                    this.objColl[i].rotatedAngle -= (straighten * (Math.PI / 180));\n                    this.notify('selection', { prop: 'updPtCollForShpRot', onPropertyChange: false, value: { obj: this.objColl[i] } });\n                }\n            }\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n            this.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: null } });\n        }\n        this.setInitialZoomState();\n        var activeObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, {}, true);\n        this.notify('crop', { prop: 'setTransformCrop', onPropertyChange: false, value: { bool: true } });\n        this.cropSelectedState();\n        this.notify('crop', { prop: 'setTransformCrop', onPropertyChange: false, value: { bool: false } });\n        this.notify('draw', { prop: 'resetCurrentSelectionPoint' });\n        this.updateImageTransformColl(type);\n        this.notify('transform', { prop: 'performTransformation', value: { text: type } });\n        this.isCropTab = true;\n        this.notify('draw', { prop: 'moveToSelectionRange', value: { type: type, activeObj: activeObj } });\n        if (this.isStraightening && (type === 'horizontalflip' || type === 'verticalflip')) {\n            this.notify('draw', { prop: 'resetStraightenDestPoints' });\n            this.notify('draw', { prop: 'setDestForStraighten' });\n        }\n        if (straighten !== 0) {\n            this.transform.straighten = straighten;\n            this.straightenBaseImageCanvas();\n            for (var i = 0, len = this.objColl.length; i < len; i++) {\n                var shape = this.objColl[i].shape;\n                if (shape !== 'line' && shape !== 'arrow' && shape !== 'path') {\n                    this.objColl[i].rotatedAngle += (straighten * (Math.PI / 180));\n                    this.notify('selection', { prop: 'updPtCollForShpRot', onPropertyChange: false, value: { obj: this.objColl[i] } });\n                }\n            }\n            this.notify('shape', { prop: 'drawAnnotations', onPropertyChange: false,\n                value: { ctx: this.lowerContext, shape: 'zoom', pen: 'zoom', isPreventApply: null } });\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: false } });\n            this.notify('draw', { prop: 'drawObject', onPropertyChange: false, value: { canvas: 'duplicate', obj: straightenObj } });\n            this.notify('draw', { prop: 'setStraightenActObj', value: { activeObj: null } });\n            this.notify('draw', { prop: 'setStraightenInitZoom', value: { zoomFactor: zoomFactor } });\n            if ((this.isStraightening && (type === 'horizontalflip' || type === 'verticalflip')) &&\n                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.transform.zoomFactor) || this.transform.zoomFactor === 0) {\n                if (this.transform.degree === 0) {\n                    this.transform.zoomFactor += 0.025;\n                }\n                else if (this.transform.zoomFactor === 0) {\n                    this.transform.zoomFactor = null;\n                }\n            }\n            this.notify('draw', { prop: 'zoomToSel', value: { activeObj: straightenObj, isToolbar: false } });\n        }\n        this.isCropToolbar = false;\n        var stValPan = this.element.querySelector('.e-ie-straighten-value-span');\n        if (stValPan) {\n            stValPan.innerHTML = this.transform.straighten.toString() + '&#176';\n        }\n    };\n    /**\n     * Returns default filter.\n     *\n     * @hidden\n     * @returns {string}.\n     */\n    ImageEditor.prototype.getDefaultFilter = function () {\n        return 'brightness(' + 1 + ') ' + 'contrast(' + 100 + '%) ' + 'hue-rotate(' + 0 + 'deg) ' +\n            'saturate(' + 100 + '%) ' + 'opacity(' + 1 + ') ' + 'blur(' + 0 + 'px) ' + 'sepia(0%) ' +\n            'grayscale(0%) ' + 'invert(0%)';\n    };\n    /**\n     * Performs Straightening action.\n     *\n     * @param { number } value - Specifies the degree of straightening.\n     * @hidden\n     * @returns {void} .\n     */\n    ImageEditor.prototype.setStraighten = function (value) {\n        var straightenEventArgs = { cancel: false, previousDegree: this.transform.straighten, currentDegree: value };\n        this.trigger('rotating', straightenEventArgs);\n        this.editCompleteArgs = straightenEventArgs;\n        if (!straightenEventArgs.cancel) {\n            this.performStraighten(straightenEventArgs);\n            var actionArgs = { action: 'straighten', actionEventArgs: this.editCompleteArgs };\n            this.triggerEditCompleteEvent(actionArgs);\n        }\n    };\n    ImageEditor.prototype.duplicateImage = function () {\n        var activePoint = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj.activePoint, {}, true);\n        var dimObj = { width: 0, height: 0 };\n        this.notify('transform', { prop: 'calcMaxDimension', onPropertyChange: false,\n            value: { width: this.activeObj.imageElement.width, height: this.activeObj.imageElement.height, obj: dimObj, isImgShape: null } });\n        this.activeObj.activePoint.width = dimObj['width'];\n        this.activeObj.activePoint.height = dimObj['height'];\n        return activePoint;\n    };\n    ImageEditor.prototype.performStraighten = function (straightenEventArgs) {\n        var value = straightenEventArgs.currentDegree;\n        var stValPan = this.element.querySelector('.e-ie-straighten-value-span');\n        if (stValPan) {\n            stValPan.innerHTML = value.toString() + '&#176';\n        }\n        var obj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.activeObj, null, true);\n        this.notify('freehand-draw', { prop: 'setCenterSelPoints' });\n        this.transform.straighten = value;\n        this.straightenPoint = { x: this.activeObj.activePoint.startX + (this.activeObj.activePoint.width / 2),\n            y: this.activeObj.activePoint.startY + (this.activeObj.activePoint.height / 2) };\n        this.straightenBaseImageCanvas();\n        for (var i = 0, len = this.objColl.length; i < len; i++) {\n            var shape = this.objColl[i].shape;\n            if (shape !== 'line' && shape !== 'arrow' && shape !== 'path') {\n                this.objColl[i].rotatedAngle += ((this.transform.straighten - this.prevStraightenedDegree) * (Math.PI / 180));\n                this.notify('selection', { prop: 'updPtCollForShpRot', onPropertyChange: false, value: { obj: this.objColl[i] } });\n            }\n        }\n        if (this.transform.degree % 90 === 0 && this.transform.degree % 180 !== 0) {\n            if (this.transform.straighten === 0) {\n                this.transform.straighten = 360;\n            }\n            this.notify('draw', { prop: 'performPointZoom', onPropertyChange: false,\n                value: { x: this.activeObj.activePoint.startX + (this.activeObj.activePoint.width / 2),\n                    y: this.activeObj.activePoint.startY + (this.activeObj.activePoint.height / 2), type: 'zoomIn', isResize: true } });\n            this.notify('draw', { prop: 'performPointZoom', onPropertyChange: false,\n                value: { x: this.activeObj.activePoint.startX + (this.activeObj.activePoint.width / 2),\n                    y: this.activeObj.activePoint.startY + (this.activeObj.activePoint.height / 2), type: 'zoomOut', isResize: true } });\n            if (this.transform.straighten === 360) {\n                this.transform.straighten = 0;\n            }\n        }\n        else {\n            this.notify('draw', { prop: 'render-image', value: { isMouseWheel: true, isPreventClearRect: null, isFrame: null, isStraighten: true } });\n        }\n        this.notify('draw', { prop: 'drawObject', onPropertyChange: false,\n            value: { canvas: 'duplicate', obj: obj } });\n        this.notify('draw', { prop: 'zoomToSel', value: { activeObj: obj, isToolbar: true } });\n        this.notify('transform', { prop: 'disableZoomOutBtn', value: { isZoomOut: true } });\n        this.prevStraightenedDegree = this.transform.straighten;\n    };\n    /**\n     * Straightens base image.\n     *\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.straightenBaseImageCanvas = function () {\n        if (this.isImageLoaded) {\n            var flipState = this.getStraightenFlipState();\n            var straighten = flipState === 'horizontal' || flipState === 'vertical' ?\n                -this.transform.straighten : this.transform.straighten;\n            var ctx = this.baseImgCanvas.getContext('2d');\n            if (ctx.canvas.width !== this.lowerContext.canvas.width &&\n                ctx.canvas.height !== this.lowerContext.canvas.height) {\n                var obj_7 = { width: 0, height: 0 };\n                this.notify('crop', { prop: 'calcRatio', onPropertyChange: false,\n                    value: { obj: obj_7, dimension: { width: ctx.canvas.width, height: ctx.canvas.height } } });\n            }\n            var dimension = void 0;\n            // eslint-disable-next-line prefer-const\n            dimension = this.getRotatedCanvasDim(this.baseImg.width, this.baseImg.height, this.transform.straighten);\n            this.img.srcWidth = ctx.canvas.width = dimension.width;\n            this.img.srcHeight = ctx.canvas.height = dimension.height;\n            var x = ctx.canvas.width / 2;\n            var y = ctx.canvas.height / 2;\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            ctx.translate(x, y);\n            ctx.rotate(straighten * Math.PI / 180);\n            ctx.drawImage(this.baseImg, -this.baseImg.width / 2, -this.baseImg.height / 2, this.baseImg.width, this.baseImg.height);\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            var obj = { width: 0, height: 0 };\n            this.notify('crop', { prop: 'calcRatio', onPropertyChange: false, value: { obj: obj, dimension: { width: ctx.canvas.width, height: ctx.canvas.height } } });\n        }\n    };\n    /**\n     * Returns rotated canvas dimension.\n     *\n     * @param { number } width - Specifies the width of the canvas.\n     * @param { number } height - Specifies the height of the canvas.\n     * @param { number } angle - Specifies the angle of rotation in degrees.\n     * @hidden\n     * @returns {void} .\n     */\n    ImageEditor.prototype.getRotatedCanvasDim = function (width, height, angle) {\n        var angleRad = angle * Math.PI / 180;\n        var cosAngle = Math.cos(angleRad);\n        var sinAngle = Math.sin(angleRad);\n        var minX = Math.min(0, width * cosAngle, height * Math.cos(Math.PI / 2 - angleRad), width * cosAngle + height * Math.cos(Math.PI / 2 - angleRad));\n        var maxX = Math.max(0, width * cosAngle, height * Math.cos(Math.PI / 2 - angleRad), width * cosAngle + height * Math.cos(Math.PI / 2 - angleRad));\n        var minY = Math.min(0, width * sinAngle, height * Math.sin(Math.PI / 2 - angleRad), width * sinAngle + height * Math.sin(Math.PI / 2 - angleRad));\n        var maxY = Math.max(0, width * sinAngle, height * Math.sin(Math.PI / 2 - angleRad), width * sinAngle + height * Math.sin(Math.PI / 2 - angleRad));\n        return { width: Math.ceil(maxX - minX), height: Math.ceil(maxY - minY) };\n    };\n    /**\n     * Apply Shape order.\n     *\n     * @param { string } id - Specifies the id of the shape to change the order.\n     * @param { string } value - Specifies the order of the shapes.\n     * @hidden\n     * @returns {void}.\n     */\n    ImageEditor.prototype.updateShapeOrder = function (id, value) {\n        var shapeObj = this.getObjFromId(id);\n        if ((shapeObj.shape && (shapeObj.shape !== 'path' ||\n            (shapeObj.shape === 'path' && shapeObj.pointColl.length > 0))) ||\n            (shapeObj && shapeObj['id'] && shapeObj['id'].indexOf('pen') > -1)) {\n            var obj = { shapeSettingsObj: {} };\n            this.notify('selection', { prop: 'updatePrevShapeSettings', onPropertyChange: false, value: { obj: obj } });\n            var shapeSettings = obj['shapeSettingsObj'];\n            if (shapeObj.shape) {\n                this.notify('shape', { prop: 'pushActItemIntoObj' });\n            }\n            var prevCropObj = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.cropObj, {}, true);\n            var object = { currObj: {} };\n            this.notify('filter', { prop: 'getCurrentObj', onPropertyChange: false, value: { object: object } });\n            var prevObj = object['currObj'];\n            prevObj.objColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.objColl, [], true);\n            prevObj.pointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.pointColl, [], true);\n            prevObj.afterCropActions = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], this.afterCropActions, [], true);\n            var selPointCollObj = { selPointColl: null };\n            this.notify('freehand-draw', { prop: 'getSelPointColl', onPropertyChange: false,\n                value: { obj: selPointCollObj } });\n            prevObj.selPointColl = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)([], selPointCollObj['selPointColl'], [], true);\n            if (shapeObj.shape) {\n                this.objColl.pop();\n            }\n            this.notify('shape', { prop: 'z-order', onPropertyChange: false, value: { obj: shapeObj, value: value } });\n            if (shapeObj.shape) {\n                this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                        strokeWidth: shapeObj.strokeSettings.strokeWidth } });\n                this.objColl.push(shapeObj);\n            }\n            this.notify('undo-redo', { prop: 'updateUndoRedoColl', onPropertyChange: false,\n                value: { operation: 'shapeTransform', previousObj: prevObj, previousObjColl: prevObj.objColl,\n                    previousPointColl: prevObj.pointColl, previousSelPointColl: prevObj.selPointColl,\n                    previousCropObj: prevCropObj, previousText: null,\n                    currentText: null, previousFilter: null, isCircleCrop: null } });\n            if (shapeObj.shape) {\n                this.notify('selection', { prop: 'redrawShape', value: { obj: this.objColl[this.objColl.length - 1] } });\n                this.activeObj.order = shapeObj.order;\n            }\n            var shapeChangedArgs = { action: 'stroke-width', previousShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true),\n                currentShapeSettings: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)({}, shapeSettings, {}, true) };\n            shapeChangedArgs.currentShapeSettings.strokeWidth = this.activeObj.strokeSettings.strokeWidth;\n        }\n        else if (this.activeObj.shape && (this.activeObj.shape === 'path' &&\n            this.activeObj.pointColl.length === 0)) {\n            this.notify('shape', { prop: 'setStrokeSettings', value: { strokeSettings: null, strokeColor: null, fillColor: null,\n                    strokeWidth: this.activeObj.strokeSettings.strokeWidth } });\n        }\n    };\n    ImageEditor.prototype.getStraightenFlipState = function () {\n        var flipState = '';\n        if (this.rotateFlipColl.length > 0) {\n            for (var i = 0, len = this.rotateFlipColl.length; i < len; i++) {\n                var curFlip = this.rotateFlipColl[i];\n                if (curFlip === 'horizontal') {\n                    flipState += 'horizontal';\n                }\n                else if (curFlip === 'vertical') {\n                    flipState += 'vertical';\n                }\n                if (flipState === 'horizontalvertical' || flipState === 'verticalhorizontal') {\n                    flipState = '';\n                }\n            }\n        }\n        return flipState;\n    };\n    ImageEditor.prototype.initializeZoomSettings = function () {\n        this.theme = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.theme) ? 'Bootstrap5' : this.theme;\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.zoomSettings.zoomTrigger) || this.zoomSettings.zoomTrigger === 0) {\n            this.zoomSettings.zoomTrigger = (_index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.MouseWheel | _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Pinch | _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Toolbar | _index__WEBPACK_IMPORTED_MODULE_2__.ZoomTrigger.Commands);\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectionSettings.strokeColor)) {\n            this.selectionSettings.strokeColor = this.themeColl[this.theme]['primaryColor'];\n        }\n        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectionSettings.fillColor)) {\n            this.selectionSettings.fillColor = this.themeColl[this.theme]['secondaryColor'];\n        }\n    };\n    ImageEditor.prototype.initializeThemeColl = function () {\n        this.themeColl = {\n            Bootstrap5: { primaryColor: '#0d6efd', secondaryColor: '#fff' },\n            Bootstrap5Dark: { primaryColor: '#0d6efd', secondaryColor: '#fff' },\n            Tailwind: { primaryColor: '#4f46e5', secondaryColor: '#fff' },\n            TailwindDark: { primaryColor: '#22d3ee', secondaryColor: '#fff' },\n            Fluent: { primaryColor: '#0078d4', secondaryColor: '#fff' },\n            FluentDark: { primaryColor: '#0078d4', secondaryColor: '#fff' },\n            Bootstrap4: { primaryColor: '#007bff', secondaryColor: '#fff' },\n            Bootstrap: { primaryColor: '#317ab9', secondaryColor: '#fff' },\n            BootstrapDark: { primaryColor: '#317ab9', secondaryColor: '#fff' },\n            Material: { primaryColor: '#e3165b', secondaryColor: '#fff' },\n            MaterialDark: { primaryColor: '#00b0ff', secondaryColor: '#fff' },\n            Fabric: { primaryColor: '#0078d6', secondaryColor: '#fff' },\n            FabricDark: { primaryColor: '#0074cc', secondaryColor: '#fff' },\n            Highcontrast: { primaryColor: '#000000', secondaryColor: '#fff' },\n            Material3: { primaryColor: '#6750a4', secondaryColor: '#fff' },\n            Material3Dark: { primaryColor: '#d0bcff', secondaryColor: '#fff' },\n            Fluent2: { primaryColor: '#0f6cbd', secondaryColor: '#fff' },\n            Fluent2Dark: { primaryColor: '#115ea3', secondaryColor: '#fff' },\n            Fluent2Highcontrast: { primaryColor: '#1aebff', secondaryColor: '#fff' },\n            'Bootstrap5.3': { primaryColor: '#0d6efd', secondaryColor: '#fff' },\n            'Bootstrap5.3Dark': { primaryColor: '#0d6efd', secondaryColor: '#fff' },\n            Tailwind3: { primaryColor: '#4f46e5', secondaryColor: '#ffffff' },\n            Tailwind3Dark: { primaryColor: '#6366f1', secondaryColor: '#ffffff03' }\n        };\n    };\n    /**\n     * Draw a redaction on an image.\n     *\n     * @param {RedactType} type – Optional. Specifies the type of redaction to be drawn on the image such as blur or pixelate. If not specified, the redaction drawing is initiated with the default blur value.\n     * @param {number} x – Optional. Specifies x-coordinate of redaction. If not specified, the redaction drawing is initiated with the first parameter.\n     * @param {number} y – Optional. Specifies y-coordinate of redaction. If not specified it draws redaction from the center point of the image.\n     * @param {number} width – Optional. Specifies the width of the redaction. The default value is 100.\n     * @param {number} height – Optional. Specifies the height of the redaction. The default value is 50.\n     * @param {number} value – Optional. Specifies the blur value for blur-type redaction or the pixel size for pixelate-type redaction. Defaults to 20 since the default redaction is blur.\n     * @returns {boolean}.\n     */\n    ImageEditor.prototype.drawRedact = function (type, x, y, width, height, value) {\n        var isRedact = false;\n        var isPointsInRange = this.allowShape(x, y);\n        if (!this.disabled && this.isImageLoaded && (isPointsInRange || ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(x) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(y)))) {\n            isRedact = true;\n            this.manageActiveAction();\n            this.notify('shape', {\n                prop: 'drawRedact', onPropertyChange: false, value: {\n                    x: x, y: y, width: width, height: height, type: type, value: value\n                }\n            });\n            this.notify('draw', { prop: 'redrawDownScale' });\n        }\n        return isRedact;\n    };\n    var ImageEditor_1;\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')\n    ], ImageEditor.prototype, \"cssClass\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ImageEditor.prototype, \"disabled\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], ImageEditor.prototype, \"height\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Bootstrap5')\n    ], ImageEditor.prototype, \"theme\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ImageEditor.prototype, \"toolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ImageEditor.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')\n    ], ImageEditor.prototype, \"width\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ImageEditor.prototype, \"allowUndoRedo\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)\n    ], ImageEditor.prototype, \"showQuickAccessToolbar\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()\n    ], ImageEditor.prototype, \"quickAccessToolbarTemplate\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ImageEditor.prototype, \"isReadOnly\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ImageEditor.prototype, \"enableRtl\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)\n    ], ImageEditor.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FinetuneSettings)\n    ], ImageEditor.prototype, \"finetuneSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ZoomSettings)\n    ], ImageEditor.prototype, \"zoomSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, SelectionSettings)\n    ], ImageEditor.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FontFamily)\n    ], ImageEditor.prototype, \"fontFamily\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, UploadSettings)\n    ], ImageEditor.prototype, \"uploadSettings\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"beforeSave\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"created\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"destroyed\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"zooming\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"panning\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"cropping\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"rotating\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"flipping\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"shapeChanging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"selectionChanging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"fileOpened\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"saved\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"toolbarCreated\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"toolbarUpdating\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"toolbarItemClicked\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"imageFiltering\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"finetuneValueChanging\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"click\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"shapeChange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"quickAccessToolbarOpen\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"resizing\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"quickAccessToolbarItemClick\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"frameChange\", void 0);\n    __decorate([\n        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()\n    ], ImageEditor.prototype, \"editComplete\", void 0);\n    ImageEditor = ImageEditor_1 = __decorate([\n        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges\n    ], ImageEditor);\n    return ImageEditor;\n}(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component));\n\n\n\n//# sourceURL=webpack://ej2-vue-samples/./node_modules/@syncfusion/ej2-image-editor/src/image-editor/base/image-editor.js?");

/***/ })

}]);