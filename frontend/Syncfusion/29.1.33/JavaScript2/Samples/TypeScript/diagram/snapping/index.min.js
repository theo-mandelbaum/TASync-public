/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/snapping/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/snapping/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/snapping/index.ts":
/*!*******************************************!*\
  !*** ./samples/diagram/snapping/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_buttons_1, ej2_inputs_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.DiagramContextMenu, ej2_diagrams_1.UndoRedo, ej2_diagrams_1.Snapping, ej2_diagrams_1.ConnectorEditing);\n    var diagram;\n    var showGridlines;\n    var snapToObject;\n    var drawingNode;\n    var snappingInterval;\n    function createNode(id, offsetX, offsetY, content, width, height, ports) {\n        if (width === void 0) { width = 100; }\n        if (height === void 0) { height = 100; }\n        if (ports === void 0) { ports = []; }\n        return {\n            id: \"node_\".concat(id),\n            width: width,\n            height: height,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            ports: ports.map(function (port) { return (__assign(__assign({}, port), { visibility: ej2_diagrams_1.PortVisibility.Visible, style: { fill: 'black' }, constraints: ej2_diagrams_1.PortConstraints.Default | ej2_diagrams_1.PortConstraints.Draw })); }),\n            annotations: [{\n                    content: content,\n                    offset: { x: 0.5, y: 1.2 },\n                    style: { bold: true },\n                }],\n        };\n    }\n    var nodes = [\n        createNode('1', 350, 250, 'Shape 1', 100, 100, [\n            { id: 'port1', offset: { x: 0.5, y: 0.5 } }\n        ]),\n        createNode('2', 650, 250, 'Shape 2', 100, 100, [\n            { id: 'port11', offset: { x: 0.5, y: 0.5 } },\n            { id: 'port2', offset: { x: 0, y: 0.5 }, height: 100, width: 7 }\n        ]),\n        createNode('3', 500, 400, 'Shape 3'),\n    ];\n    var connectors = [\n        {\n            id: 'connector_1', sourceID: 'node_1', targetID: 'node_3', type: 'Orthogonal',\n        }\n    ];\n    var contextMenu = {\n        show: true,\n        showCustomMenuOnly: false,\n    };\n    var handles = [\n        {\n            name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n            visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        },\n        {\n            name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n            visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        },\n        {\n            name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n            visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        },\n    ];\n    function created() {\n        diagram.fitToPage({ mode: 'Width' });\n    }\n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            var selectedNodes = diagram.selectedItems.nodes;\n            var selectedConnectors = diagram.selectedItems.connectors;\n            var selectedItems = __spreadArray(__spreadArray([], selectedNodes, true), selectedConnectors, true);\n            if (selectedItems.length > 0) {\n                if (args.newValue.length > 0 && args.newValue[0] instanceof ej2_diagrams_1.Node) {\n                    diagram.selectedItems = {\n                        constraints: ej2_diagrams_1.SelectorConstraints.All | ej2_diagrams_1.SelectorConstraints.UserHandle,\n                        userHandles: handles,\n                    };\n                    if (selectedNodes.length > 0) {\n                        drawingNode = selectedNodes[selectedNodes.length - 1];\n                    }\n                }\n                else {\n                    diagram.selectedItems = {\n                        constraints: ej2_diagrams_1.SelectorConstraints.All & ~ej2_diagrams_1.SelectorConstraints.UserHandle,\n                    };\n                }\n            }\n        }\n    }\n    function getConnectorDefaults(connector) {\n        connector.constraints = ej2_diagrams_1.ConnectorConstraints.Default | ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb;\n    }\n    function getNodeDefaults(node) {\n        node.style = { fill: 'orange', strokeColor: 'orange' };\n    }\n    function rotateChange(args) {\n        if (args.state === 'Start' || args.state === 'Progress') {\n            diagram.selectedItems = { constraints: ej2_diagrams_1.SelectorConstraints.All & ~ej2_diagrams_1.SelectorConstraints.UserHandle };\n        }\n        if (args.state === 'Completed') {\n            diagram.selectedItems = { constraints: ej2_diagrams_1.SelectorConstraints.All | ej2_diagrams_1.SelectorConstraints.UserHandle, userHandles: handles };\n        }\n    }\n    function userHandelClick(args) {\n        switch (args.element.name) {\n            case 'Delete':\n                diagram.remove();\n                break;\n            case 'Clone':\n                diagram.paste(diagram.selectedItems.selectedObjects);\n                break;\n            case 'Draw':\n                diagram.drawingObject.shape = {};\n                diagram.drawingObject.type = diagram.drawingObject.type || 'Orthogonal';\n                diagram.drawingObject.sourceID = drawingNode.id;\n                diagram.dataBind();\n                break;\n        }\n    }\n    function adjustGridlineScale() {\n        diagram.snapSettings.horizontalGridlines.scaledIntervals[0] =\n            snappingInterval.value;\n        diagram.snapSettings.verticalGridlines.scaledIntervals[0] =\n            snappingInterval.value;\n        diagram.dataBind();\n    }\n    function checkbox() {\n        diagram.snapSettings.constraints = ej2_diagrams_1.SnapConstraints.All;\n        if (!showGridlines.checked) {\n            diagram.snapSettings.constraints &= ~ej2_diagrams_1.SnapConstraints.ShowLines;\n        }\n        if (!snapToObject.checked) {\n            diagram.snapSettings.constraints &= ~ej2_diagrams_1.SnapConstraints.SnapToObject;\n        }\n    }\n    function handleSnapToLinesChange(args) {\n        checkbox();\n        switch (args.value) {\n            case 'Snap To Gridlines':\n                diagram.snapSettings.constraints |= ej2_diagrams_1.SnapConstraints.SnapToLines;\n                break;\n            case 'Snap To Horizontal Gridlines':\n                diagram.snapSettings.constraints ^=\n                    ej2_diagrams_1.SnapConstraints.SnapToVerticalLines;\n                break;\n            case 'Snap To Vertical Gridlines':\n                diagram.snapSettings.constraints ^=\n                    ej2_diagrams_1.SnapConstraints.SnapToHorizontalLines;\n                break;\n            case 'None':\n                diagram.snapSettings.constraints &=\n                    ~(ej2_diagrams_1.SnapConstraints.SnapToHorizontalLines |\n                        ej2_diagrams_1.SnapConstraints.SnapToVerticalLines |\n                        ej2_diagrams_1.SnapConstraints.SnapToLines);\n                break;\n        }\n        diagram.dataBind();\n        adjustGridlineScale();\n    }\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '645px', nodes: nodes,\n        scrollSettings: { scrollLimit: 'Infinity' },\n        drawingObject: { type: 'Orthogonal' },\n        contextMenuSettings: contextMenu,\n        onUserHandleMouseDown: userHandelClick,\n        connectors: connectors,\n        snapSettings: { snapAngle: 5 },\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        created: created,\n        selectionChange: selectionChange,\n        rotateChange: rotateChange\n    });\n    diagram.appendTo('#diagram');\n    snappingInterval = new ej2_inputs_1.NumericTextBox({\n        min: 1,\n        step: 1,\n        width: 150,\n        value: 20,\n        format: 'n0',\n        change: function (args) {\n            diagram.snapSettings.horizontalGridlines.snapIntervals[0] = args.value;\n            diagram.snapSettings.verticalGridlines.snapIntervals[0] = args.value;\n            diagram.snapSettings.horizontalGridlines.scaledIntervals[0] = args.value;\n            diagram.snapSettings.horizontalGridlines.scaledIntervals[0] = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingInterval.appendTo('#snappingInterval');\n    var snappingAngle = new ej2_inputs_1.NumericTextBox({\n        min: 1,\n        step: 1,\n        value: 5,\n        format: 'n0',\n        change: function (args) {\n            diagram.snapSettings.snapAngle = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingAngle.appendTo('#snappingAngle');\n    var snappingLineColor = new ej2_inputs_1.ColorPicker({\n        mode: 'Palette',\n        showButtons: false,\n        value: '#07EDE1',\n        change: function (args) {\n            diagram.snapSettings.snapLineColor = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingLineColor.appendTo('#snappingLineColor');\n    showGridlines = new ej2_buttons_1.CheckBox({\n        label: 'Show Gridline', checked: true,\n        change: function () {\n            diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej2_diagrams_1.SnapConstraints.ShowLines;\n            diagram.dataBind();\n            adjustGridlineScale();\n        }\n    });\n    showGridlines.appendTo('#showGridlines');\n    snapToObject = new ej2_buttons_1.CheckBox({\n        label: 'Snapping To Objects', checked: true,\n        change: function () {\n            diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej2_diagrams_1.SnapConstraints.SnapToObject;\n            diagram.dataBind();\n            adjustGridlineScale();\n        }\n    });\n    snapToObject.appendTo('#snapToObject');\n    var radioButton = new ej2_buttons_1.RadioButton({ label: 'Snap To Gridlines', name: 'snapToLines', value: 'Snap To Gridlines', checked: true, change: handleSnapToLinesChange });\n    radioButton.appendTo('#radio1');\n    var radioButton1 = new ej2_buttons_1.RadioButton({ label: 'Snap To Horizontal Gridlines', name: 'snapToLines', value: 'Snap To Horizontal Gridlines', change: handleSnapToLinesChange });\n    radioButton1.appendTo('#radio2');\n    var radioButton2 = new ej2_buttons_1.RadioButton({ label: 'Snap To Vertical Gridlines', name: 'snapToLines', value: 'Snap To Vertical Gridlines', change: handleSnapToLinesChange });\n    radioButton2.appendTo('#radio3');\n    var radioButton3 = new ej2_buttons_1.RadioButton({ label: 'None', name: 'snapToLines', value: 'None', change: handleSnapToLinesChange });\n    radioButton3.appendTo('#radio4');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/snapping/index.ts?");

/***/ })

/******/ });