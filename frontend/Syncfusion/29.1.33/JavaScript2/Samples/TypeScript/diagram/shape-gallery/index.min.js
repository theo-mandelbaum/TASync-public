/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/shape-gallery/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/shape-gallery/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/shape-gallery/index.ts":
/*!************************************************!*\
  !*** ./samples/diagram/shape-gallery/index.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.BpmnDiagrams);\n    function getBasicShape(shapeType, annotations) {\n        return {\n            shape: {\n                type: 'Basic',\n                shape: shapeType\n            },\n            annotations: annotations\n        };\n    }\n    var basicShapeModel = [\n        {\n            shape: { type: 'Text', content: 'Basic Shapes' },\n            constraints: ej2_diagrams_1.NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        getBasicShape('Rectangle', [{ content: 'Rectangle' }]),\n        getBasicShape('Ellipse', [{ content: 'Ellipse' }]),\n        getBasicShape('Triangle', [{ content: 'Triangle' }]),\n        getBasicShape('Plus', [{ content: 'Plus' }]),\n        getBasicShape('Star', [{ content: 'Star' }]),\n        getBasicShape('Pentagon', [{ content: 'Pentagon' }]),\n        getBasicShape('Heptagon', [{ content: 'Heptagon' }]),\n        getBasicShape('Octagon', [{ content: 'Octagon' }]),\n        getBasicShape('Trapezoid', [{ content: 'Trapezoid' }]),\n        getBasicShape('Decagon', [{ content: 'Decagon' }]),\n        getBasicShape('RightTriangle', [{ content: 'Right Triangle' }]),\n        getBasicShape('Parallelogram', [{ content: 'Parallelogram' }])\n    ];\n    function createFlowShape(shapeType, content) {\n        var flowshape = {\n            shape: { type: 'Flow', shape: shapeType },\n            annotations: [{ content: content }]\n        };\n        return flowshape;\n    }\n    var flowShapes = [\n        { shape: { type: 'Text', content: 'Flow Shapes' }, constraints: ej2_diagrams_1.NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n        },\n        createFlowShape('Terminator', 'Terminator'),\n        createFlowShape('Process', 'Process'),\n        createFlowShape('Decision', 'Decision'),\n        createFlowShape('Document', 'Document'),\n        createFlowShape('PreDefinedProcess', 'Predefined Process'),\n        createFlowShape('PaperTap', 'Paper Tape'),\n        createFlowShape('DirectData', 'Direct Data'),\n        createFlowShape('SequentialData', 'Direct Data'),\n        createFlowShape('Sort', 'Sort'),\n        createFlowShape('MultiDocument', 'Multi-Document'),\n        createFlowShape('Collate', 'Collate'),\n        createFlowShape('SummingJunction', 'Summing Junction'),\n        createFlowShape('Or', 'Or'),\n        createFlowShape('InternalStorage', 'Internal Storage'),\n        createFlowShape('Extract', 'Extract'),\n        createFlowShape('ManualOperation', 'Manual Operation'),\n        createFlowShape('Merge', 'Merge'),\n        createFlowShape('OffPageReference', 'Off-Page Reference'),\n        createFlowShape('SequentialAccessStorage', 'Sequential Access Storage'),\n        createFlowShape('Data', 'Data'),\n        createFlowShape('Card', 'Card')\n    ];\n    function getBpmnShape(shapeType, annotations, event) {\n        var shape = {\n            type: 'Bpmn',\n            shape: shapeType\n        };\n        if (event) {\n            shape.event = event;\n        }\n        return {\n            shape: shape,\n            annotations: annotations\n        };\n    }\n    var bpmnShapeModel = [\n        {\n            shape: { type: 'Text', content: 'BPMN Shapes' },\n            constraints: ej2_diagrams_1.NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        getBpmnShape('Event', [{ content: 'Start Event' }], { event: 'Start', trigger: 'None' }),\n        getBpmnShape('Event', [{ content: 'Intermediate Event' }], { event: 'Intermediate', trigger: 'None' }),\n        getBpmnShape('Event', [{ content: 'End Event' }], { event: 'End', trigger: 'None' }),\n        getBpmnShape('Gateway', [{ content: 'Gateway' }]),\n        {\n            shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            annotations: [{ content: 'Task' }]\n        },\n        {\n            shape: { type: 'Bpmn', shape: 'Activity', activity: {\n                    activity: 'SubProcess',\n                    subProcess: {\n                        type: 'Transaction', transaction: {\n                            success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\n                        }\n                    }\n                } },\n            annotations: [{ content: 'Transaction' }]\n        },\n        getBpmnShape('Message', [{ content: 'Message' }]),\n        getBpmnShape('DataObject', [{ content: 'Data Object' }]),\n        getBpmnShape('DataSource', [{ content: 'Data Source' }]),\n        getBpmnShape('Group', [{ content: 'Group' }]),\n        getBpmnShape('TextAnnotation', [{ content: 'Text Annotation' }])\n    ];\n    function getNodes() {\n        var nodes1 = basicShapeModel.concat(flowShapes).concat(bpmnShapeModel);\n        var offsetx = 60;\n        var offsety = 50;\n        var count = 1;\n        for (var i = 0; i < nodes1.length; i++) {\n            var node = nodes1[i];\n            node.width = 40;\n            node.height = 40;\n            if (node.shape.type === 'Flow') {\n                var shapeType = node.shape.shape;\n                if (shapeType === 'Process' || shapeType === 'Terminator') {\n                    node.height = 20;\n                }\n                else if (shapeType === 'Decision') {\n                    node.height = 35;\n                }\n                else if (shapeType === 'Document' || shapeType === 'DirectData' ||\n                    shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\n                    node.height = 30;\n                }\n            }\n            node.offsetX = offsetx;\n            node.offsetY = offsety;\n            if (!(node.shape.type === 'Text')) {\n                var label = node.annotations[0];\n                label.verticalAlignment = 'Top';\n                label.offset = { y: 1 };\n                label.margin = { top: 10 };\n                offsetx += 90;\n                if (count % 10 === 0) {\n                    offsety = offsety + 100;\n                    offsetx = 60;\n                }\n                count++;\n            }\n            if (node.shape.type === 'Text') {\n                offsetx = 60;\n                offsety += 50;\n                count = 1;\n                node.width = 150;\n                node.height = 100;\n                node.offsetX = 90;\n                if (!(node.shape.content === 'Basic Shapes')) {\n                    node.offsetX = 90;\n                    node.offsetY = offsety + 50;\n                    offsety = offsety + 100;\n                }\n            }\n        }\n        return nodes1;\n    }\n    var objects = getNodes();\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '800px', snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        nodes: objects,\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage({ mode: 'Height' });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/shape-gallery/index.ts?");

/***/ })

/******/ });