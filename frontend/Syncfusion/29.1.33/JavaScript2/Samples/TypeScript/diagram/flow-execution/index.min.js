/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/flow-execution/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/flow-execution/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/flow-execution/index.ts":
/*!*************************************************!*\
  !*** ./samples/diagram/flow-execution/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_diagrams_1, ej2_buttons_1, ej2_base_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(true);\n    var diagram;\n    function CreateConnector(name, source, target, content, type, direction, targePort, length) {\n        var connector = {};\n        connector.id = name;\n        connector.sourceID = source;\n        connector.targetID = target;\n        if (targePort) {\n            connector.targetPortID = targePort;\n        }\n        connector.style = { strokeWidth: 2, strokeColor: '#8D8D8D' };\n        var annotation = {};\n        connector.annotations = [annotation];\n        connector.targetDecorator = { style: { strokeColor: '#8D8D8D', fill: '#8D8D8D' } };\n        if (type) {\n            connector.type = type;\n            var segment = { type: type, direction: direction, length: length };\n            connector.segments = [segment];\n        }\n        return connector;\n    }\n    function CreateNodes(name, offsetX, offsetY, shape, content, width, height, ports) {\n        var node = {};\n        node.id = name;\n        node.offsetX = offsetX;\n        node.width = 150;\n        node.height = 50;\n        node.offsetY = offsetY;\n        node.shape = { type: 'Flow', shape: shape };\n        node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\n        var annotations = {};\n        node.annotations = [annotations];\n        annotations.content = content;\n        if (ports) {\n            node.ports = ports;\n        }\n        return node;\n    }\n    var port1 = { id: 'port1', offset: { x: 0.5, y: 1 } };\n    var port = { id: 'port', offset: { x: 1, y: 0.5 } };\n    var selectedButton = 'LinksConnected';\n    var nodes = [];\n    nodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\n    nodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\n    nodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\n    nodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\n    nodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\n    nodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\n    nodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\n    nodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\n    nodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\n    var connectors = [];\n    connectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\n    connectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\n    connectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\n    connectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\n    connectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\n    connectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\n    connectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\n    connectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\n    connectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None }\n    });\n    diagram.appendTo('#diagram');\n    var highLightedObjects = [];\n    var radioButton = new ej2_buttons_1.RadioButton({\n        label: 'None', name: 'radio', value: 'UnhighlightAll', change: buttonChange,\n    });\n    radioButton.appendTo('#UnhighlightAll');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Incoming connections', change: buttonChange, name: 'radio', value: 'LinksInto' });\n    radioButton.appendTo('#LinksInto');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Outgoing connections', change: buttonChange, name: 'radio', value: 'LinksOutOf' });\n    radioButton.appendTo('#LinksOutOf');\n    radioButton = new ej2_buttons_1.RadioButton({\n        label: 'Incoming and outgoing connections', change: buttonChange, name: 'radio',\n        value: 'LinksConnected', checked: true\n    });\n    radioButton.appendTo('#LinksConnected');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Incoming nodes', change: buttonChange, name: 'radio', value: 'NodesInto' });\n    radioButton.appendTo('#NodesInto');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesOutOf' });\n    radioButton.appendTo('#NodesOutOf');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Incoming and outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesConnected' });\n    radioButton.appendTo('#NodesConnected');\n    radioButton = new ej2_buttons_1.RadioButton({ label: 'Flow of Execution', change: buttonChange, name: 'radio', value: 'NodesReachable' });\n    radioButton.appendTo('#NodesReachable');\n    function buttonChange(args) {\n        applyChanges(args.event.srcElement.id);\n        selectedButton = args.event.srcElement.id;\n    }\n    function applyChanges(id) {\n        Unhighlight();\n        switch (id) {\n            case 'LinksInto':\n                highlightIncomingConnections();\n                break;\n            case 'LinksOutOf':\n                highlightOutgoingConnections();\n                break;\n            case 'LinksConnected':\n                highlightIncomingConnections();\n                highlightOutgoingConnections();\n                break;\n            case 'NodesInto':\n                highlightIncomingNodes();\n                break;\n            case 'NodesOutOf':\n                highlightOutgoingNodes();\n                break;\n            case 'NodesConnected':\n                highlightIncomingNodes();\n                highlightOutgoingNodes();\n                break;\n            case 'NodesReachable':\n                highlightReachableNodes();\n                break;\n        }\n    }\n    function highlightConnectors(edges) {\n        edges.forEach(function (edge) {\n            var index = diagram.connectors.indexOf(diagram.nameTable[edge]);\n            highLightedObjects.push(edge);\n            var connector = diagram.connectors[index];\n            connector.style.strokeColor = '#1413F8';\n            connector.targetDecorator.style.strokeColor = '#1413F8';\n            connector.targetDecorator.style.fill = '#1413F8';\n            diagram.dataBind();\n        });\n    }\n    ;\n    function highlightIncomingConnections() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].inEdges;\n            highlightConnectors(node);\n        }\n    }\n    function highlightOutgoingConnections() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].outEdges;\n            highlightConnectors(node);\n        }\n    }\n    function highlightNodes(edges, edgeType) {\n        edges.forEach(function (edge) {\n            var nodeId = diagram.nameTable[edge][edgeType];\n            highLightedObjects.push(nodeId);\n            var index = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\n            diagram.nodes[index].style.strokeColor = '#1413F8';\n            diagram.dataBind();\n        });\n    }\n    ;\n    function highlightIncomingNodes() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].inEdges;\n            highlightNodes(node, 'sourceID');\n        }\n    }\n    function highlightOutgoingNodes() {\n        if (diagram.selectedItems.nodes.length) {\n            var node = diagram.selectedItems.nodes[0].outEdges;\n            highlightNodes(node, 'targetID');\n        }\n    }\n    function highlightReachableNodes() {\n        if (diagram.selectedItems.nodes.length) {\n            var connectors_1 = diagram.selectedItems.nodes[0].outEdges;\n            var nodeList = foundNode(connectors_1, []);\n            highlightConnectors(nodeList);\n        }\n    }\n    function foundNode(list, nodeList) {\n        for (var i = 0; i < list.length; i++) {\n            var connector = diagram.nameTable[list[i]];\n            if (nodeList.indexOf(connector.id) > -1) {\n                break;\n            }\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\n                nodeList.push(connector.id);\n            }\n            if (diagram.nameTable[connector.targetID].outEdges.length) {\n                if (list.indexOf(connector.targetID) === -1) {\n                    foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);\n                }\n            }\n        }\n        return nodeList;\n    }\n    function Unhighlight() {\n        for (var i = highLightedObjects.length - 1; i >= 0; i--) {\n            if (diagram.nameTable[highLightedObjects[i]] instanceof ej2_diagrams_1.Node) {\n                var index = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                diagram.nodes[index].style.strokeColor = '#E8DFB6';\n                diagram.dataBind();\n            }\n            else {\n                var index = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                var connector = diagram.connectors[index];\n                connector.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.fill = '#8D8D8D';\n                diagram.dataBind();\n            }\n        }\n        highLightedObjects = [];\n    }\n    diagram.selectionChange = function (arg) {\n        applyChanges(selectedButton);\n    };\n    diagram.select([diagram.nodes[2]]);\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/flow-execution/index.ts?");

/***/ })

/******/ });