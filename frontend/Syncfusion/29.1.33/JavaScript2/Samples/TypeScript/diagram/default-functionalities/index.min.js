/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/default-functionalities/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/default-functionalities/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/default-functionalities/index.ts":
/*!**********************************************************!*\
  !*** ./samples/diagram/default-functionalities/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! ./script/diagram-common */ \"./samples/diagram/default-functionalities/script/diagram-common.ts\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, diagram_common_1, ej2_diagrams_2, ej2_inputs_1, ej2_navigations_1, ej2_splitbuttons_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.UndoRedo, ej2_diagrams_1.PrintAndExport);\n    function getPorts() {\n        var ports = [\n            { id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 } },\n            { id: 'port2', shape: 'Circle', offset: { x: 0.5, y: 1 } },\n            { id: 'port3', shape: 'Circle', offset: { x: 1, y: .5 } },\n            { id: 'port4', shape: 'Circle', offset: { x: .5, y: 0 } }\n        ];\n        return ports;\n    }\n    function getConnectorDefaults(obj) {\n        if (obj.id.indexOf('connector') !== -1) {\n            obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };\n        }\n        return obj;\n    }\n    function getNodeDefaults(node) {\n        if (node.width === undefined) {\n            node.width = 145;\n        }\n        node.style = { fill: '#357BD2', strokeColor: 'white' };\n        for (var i = 0; i < node.annotations.length; i++) {\n            node.annotations[i].style = {\n                color: 'white',\n                fill: 'transparent',\n            };\n        }\n        node.ports = getPorts();\n        return node;\n    }\n    function dragEnter(args) {\n        var obj = args.element;\n        if (obj instanceof ej2_diagrams_1.Node) {\n            var objWidth = obj.width;\n            var objHeight = obj.height;\n            var ratio = 100 / obj.width;\n            obj.width = 100;\n            obj.height *= ratio;\n            obj.offsetX += (obj.width - objWidth) / 2;\n            obj.offsetY += (obj.height - objHeight) / 2;\n            obj.style = { fill: '#357BD2', strokeColor: 'white' };\n        }\n    }\n    function getSymbolDefaults(symbol) {\n        symbol.style = { strokeColor: '#757575' };\n        if (symbol.id === 'Terminator' || symbol.id === 'Process' || symbol.id === 'Delay') {\n            symbol.width = 80;\n            symbol.height = 40;\n        }\n        else if (symbol.id === 'Decision' || symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' ||\n            symbol.id === 'PaperTap' || symbol.id === 'DirectData' || symbol.id === 'MultiDocument' || symbol.id === 'Data') {\n            symbol.width = 50;\n            symbol.height = 40;\n        }\n        else {\n            symbol.width = 50;\n            symbol.height = 50;\n        }\n    }\n    function getSymbolInfo(symbol) {\n        return { fit: true };\n    }\n    var Window = window.location.href;\n    if (Window) {\n        if (Window.includes('bootstrap5')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Bootstrap5_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('bootstrap4')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/bootstrap4_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('bootstrap')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Bootstrap_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('material3')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Material3_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('material')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Material_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('fabric')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/fabric_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('fluent')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Fluent_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('tailwind')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Tailwind_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('highcontrast')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/HighContrast_Diagram_Builder/style.css';\n        }\n        else if (Window.includes('fusion')) {\n            document.getElementById('change_themes').href = '../../src/diagram/styles/Diagram_Builder_EJ2_Icon/Font/Fusion_Diagram_Builder/style.css';\n        }\n    }\n    var interval = [\n        1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75\n    ];\n    var gridlines = { lineColor: '#e0e0e0', lineIntervals: interval };\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var centerX = bounds.width / 2;\n    function createNode(id, height, offsetX, offsetY, shape, annotationContent, annotationMargin) {\n        var node = {\n            id: id,\n            height: height,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            shape: { type: 'Flow', shape: shape },\n            annotations: [{ content: annotationContent, margin: annotationMargin }]\n        };\n        return node;\n    }\n    var nodes = [\n        createNode('NewIdea', 60, centerX - 50, 80, 'Terminator', 'Place Order'),\n        createNode('Meeting', 60, centerX - 50, 160, 'Process', 'Start Transaction'),\n        createNode('BoardDecision', 60, centerX - 50, 240, 'Process', 'Verification'),\n        createNode('Project', 60, centerX - 50, 330, 'Decision', 'Credit card valid?'),\n        createNode('End', 60, centerX - 50, 430, 'Decision', 'Funds available?'),\n        createNode('Payment_method', 60, centerX - 50 + 230, 330, 'Process', 'Enter payment method'),\n        createNode('transaction_entered', 60, centerX - 50, 630, 'Terminator', 'Log transaction'),\n        createNode('Reconcile_entries', 60, centerX - 50 + 180, 630, 'Process', 'Reconcile the entries'),\n        createNode('transaction_completed', 60, centerX - 50, 530, 'Process', 'Complete Transaction'),\n        createNode('Data', 45, centerX - 50 - 190, 530, 'Data', 'Send e-mail', { left: 25, right: 25 }),\n        createNode('Database', 70, centerX - 50 + 175, 530, 'DirectData', 'Customer Database', { left: 25, right: 25 })\n    ];\n    var connectors = [\n        { id: 'connector1', sourceID: 'NewIdea', targetID: 'Meeting' },\n        { id: 'connector2', sourceID: 'Meeting', targetID: 'BoardDecision' },\n        { id: 'connector3', sourceID: 'BoardDecision', targetID: 'Project' },\n        { id: 'connector4', sourceID: 'Project', annotations: [{ content: 'Yes', style: { fill: 'white' } }], targetID: 'End' },\n        {\n            id: 'connector5', sourceID: 'End',\n            annotations: [{ content: 'Yes', style: { fill: 'white' } }], targetID: 'transaction_completed'\n        },\n        { id: 'connector6', sourceID: 'transaction_completed', targetID: 'transaction_entered' },\n        { id: 'connector7', sourceID: 'transaction_completed', targetID: 'Data' },\n        { id: 'connector8', sourceID: 'transaction_completed', targetID: 'Database' },\n        { id: 'connector9', sourceID: 'Payment_method', targetID: 'Meeting', type: 'Orthogonal', segments: [{ direction: 'Top', type: 'Orthogonal', length: 120 }] },\n        {\n            id: 'connector10', sourceID: 'End', annotations: [{ content: 'No', style: { fill: 'white' } }], type: 'Orthogonal',\n            targetID: 'Payment_method', segments: [{ direction: 'Right', type: 'Orthogonal', length: 100 }]\n        },\n        { id: 'connector11', sourceID: 'Project', annotations: [{ content: 'No', style: { fill: 'white' } }], targetID: 'Payment_method' },\n        { id: 'connector12', style: { strokeDashArray: '2,2' }, sourceID: 'transaction_entered', targetID: 'Reconcile_entries' }\n    ];\n    var rotateItems = [\n        { iconCss: 'e-icons e-transform-right', text: 'Rotate Clockwise' },\n        { iconCss: 'e-icons e-transform-left', text: 'Rotate Counter-Clockwise' }\n    ];\n    var flipItems = [\n        { iconCss: 'e-icons e-flip-horizontal', text: 'Flip Horizontal' },\n        { iconCss: 'e-icons e-flip-vertical', text: 'Flip Vertical' }\n    ];\n    var alignItems = [\n        { iconCss: 'sf-icon-align-left-1', text: 'Align Left', },\n        { iconCss: 'sf-icon-align-center-1', text: 'Align Center' },\n        { iconCss: 'sf-icon-align-right-1', text: 'Align Right' },\n        { iconCss: 'sf-icon-align-top-1', text: 'Align Top' },\n        { iconCss: 'sf-icon-align-middle-1', text: 'Align Middle' },\n        { iconCss: 'sf-icon-align-bottom-1', text: 'Align Bottom' },\n    ];\n    var distributeItems = [\n        { iconCss: 'sf-icon-distribute-vertical', text: 'Distribute Objects Vertically', },\n        { iconCss: 'sf-icon-distribute-horizontal', text: 'Distribute Objects Horizontally', },\n    ];\n    var orderItems = [\n        { iconCss: 'e-icons e-bring-forward', text: 'Bring Forward' },\n        { iconCss: 'e-icons e-bring-to-front', text: 'Bring To Front' },\n        { iconCss: 'e-icons e-send-backward', text: 'Send Backward' },\n        { iconCss: 'e-icons e-send-to-back', text: 'Send To Back' }\n    ];\n    var zoomMenuItems = [\n        { text: 'Zoom In' }, { text: 'Zoom Out' }, { text: 'Zoom to Fit' }, { text: 'Zoom to 50%' },\n        { text: 'Zoom to 100%' }, { text: 'Zoom to 200%' },\n    ];\n    var conTypeItems = [\n        { text: 'Straight', iconCss: 'e-icons e-line' },\n        { text: 'Orthogonal', iconCss: 'sf-icon-orthogonal' },\n        { text: 'Bezier', iconCss: 'sf-icon-bezier' }\n    ];\n    var shapesItems = [\n        { text: 'Rectangle', iconCss: 'e-rectangle e-icons' },\n        { text: 'Ellipse', iconCss: ' e-circle e-icons' },\n        { text: 'Polygon', iconCss: 'e-line e-icons' }\n    ];\n    var exportItems = [\n        { text: 'JPG' }, { text: 'PNG' }, { text: 'SVG' }\n    ];\n    var groupItems = [\n        { text: 'Group', iconCss: 'e-icons e-group-1' }, { text: 'Ungroup', iconCss: 'e-icons e-ungroup-1' }\n    ];\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '700px', nodes: nodes, connectors: connectors,\n        drawingObject: {},\n        selectionChange: selectionChange,\n        historyChange: historyChange,\n        tool: ej2_diagrams_2.DiagramTools.Default,\n        snapSettings: { horizontalGridlines: gridlines, verticalGridlines: gridlines },\n        scrollChange: function (args) {\n            if (args.panState !== 'Start') {\n                var zoomCurrentValue = document.getElementById(\"btnZoomIncrement\").ej2_instances[0];\n                zoomCurrentValue.content = Math.round(diagram.scrollSettings.currentZoom * 100) + ' %';\n            }\n        },\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        dragEnter: dragEnter,\n    });\n    diagram.appendTo('#diagram');\n    var toolbarObj = new ej2_navigations_1.Toolbar({\n        clicked: function (args) { toolbarClick(args); },\n        created: function (args) {\n            if (diagram !== undefined) {\n                var conTypeBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: conTypeItems, iconCss: 'e-ddb-icons e-connector e-icons',\n                    select: function (args) { onConnectorSelect(args); }\n                });\n                conTypeBtn.appendTo('#conTypeBtn');\n                var btnZoomIncrement = new ej2_splitbuttons_1.DropDownButton({\n                    items: zoomMenuItems, content: Math.round(diagram.scrollSettings.currentZoom * 100) + ' %', select: zoomChange,\n                });\n                btnZoomIncrement.appendTo('#btnZoomIncrement');\n                var shapesBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: shapesItems, iconCss: 'e-shapes e-icons',\n                    select: function (args) { onShapesSelect(args); }\n                });\n                shapesBtn.appendTo('#shapesBtn');\n                var exportBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: exportItems, iconCss: 'e-ddb-icons e-export', select: function (args) { onselectExport(args); },\n                });\n                exportBtn.appendTo('#exportBtn');\n                var groupBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: groupItems, iconCss: 'e-icons e-group-1', select: function (args) { onSelectGroup(args); }\n                });\n                groupBtn.appendTo('#groupBtn');\n                var alignBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: alignItems, iconCss: 'sf-icon-align-center-1', select: function (args) { onSelectAlignObjects(args); }\n                });\n                alignBtn.appendTo('#alignBtn');\n                var distributeBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: distributeItems, iconCss: 'sf-icon-distribute-vertical', select: function (args) { onSelectDistributeObjects(args); }\n                });\n                distributeBtn.appendTo('#distributeBtn');\n                var orderBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: orderItems, iconCss: 'e-icons e-order', select: function (args) { onSelectOrder(args); }\n                });\n                orderBtn.appendTo('#orderBtn');\n                var rotateBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: rotateItems, iconCss: 'e-icons e-repeat', select: function (args) { onSelectRotate(args); }\n                });\n                rotateBtn.appendTo('#rotateBtn');\n                var flipBtn = new ej2_splitbuttons_1.DropDownButton({\n                    items: flipItems, iconCss: 'e-icons e-flip-horizontal', select: function (args) { onSelectFlip(args); }\n                });\n                flipBtn.appendTo('#flipBtn');\n                refreshOverflow();\n            }\n        },\n        items: toolbarItems(),\n        overflowMode: 'Scrollable',\n        width: '100%'\n    });\n    toolbarObj.appendTo('#toolbarEditor');\n    function refreshOverflow() {\n        setTimeout(function () {\n            toolbarObj.refreshOverflow();\n        }, 100);\n    }\n    function toolbarItems() {\n        var items = [\n            { prefixIcon: 'e-icons e-circle-add', tooltipText: 'New Diagram', id: 'New_Diagram' },\n            { prefixIcon: 'e-icons e-folder-open', tooltipText: 'Open Diagram', id: 'Open_diagram' },\n            { prefixIcon: 'e-icons e-save', tooltipText: 'Save Diagram', id: 'Save' },\n            { prefixIcon: 'e-print e-icons', tooltipText: 'Print Diagram', id: 'Print' },\n            { type: 'Input', tooltipText: 'Export Diagram', template: '<button id=\"exportBtn\" style=\"width:100%;\"></button>', id: 'Export' },\n            { type: 'Separator' },\n            { disabled: true, prefixIcon: 'e-cut e-icons', tooltipText: 'Cut', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Cut' },\n            { disabled: true, prefixIcon: 'e-copy e-icons', tooltipText: 'Copy', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Copy' },\n            { prefixIcon: 'e-icons e-paste', tooltipText: 'Paste', disabled: true, id: 'Paste' },\n            { type: 'Separator' },\n            { disabled: true, prefixIcon: 'e-icons e-undo tb-icons', tooltipText: 'Undo', cssClass: 'tb-item-start tb-item-undo', id: 'Undo' },\n            { disabled: true, prefixIcon: 'e-icons e-redo tb-icons', tooltipText: 'Redo', cssClass: 'tb-item-end tb-item-redo', id: 'Redo' },\n            { type: 'Separator', },\n            { prefixIcon: 'e-pan e-icons', tooltipText: 'Pan Tool', cssClass: 'tb-item-start pan-item', id: 'Pan_tool' },\n            { prefixIcon: 'e-mouse-pointer e-icons', tooltipText: 'Select Tool', cssClass: 'tb-item-middle tb-item-selected', id: 'Select_tool' },\n            { tooltipText: 'Draw Connectors', template: '<button id=\"conTypeBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle', id: 'Draw_con' },\n            { tooltipText: 'Draw Shapes', template: '<button id=\"shapesBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle', id: 'Draw_shapes' },\n            { prefixIcon: 'e-caption e-icons', tooltipText: 'Text Tool', cssClass: 'tb-item-end', id: 'Text_tool' },\n            { type: 'Separator', },\n            { disabled: true, prefixIcon: 'e-icons e-lock', tooltipText: 'Lock', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Lock' },\n            { disabled: true, prefixIcon: 'e-trash e-icons', tooltipText: 'Delete', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Delete' },\n            { type: 'Separator', align: 'Center' },\n            { disabled: true, type: 'Input', tooltipText: 'Align Objects', template: '<button id=\"alignBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle  tb-item-align-category', id: 'Align_objects' },\n            { disabled: true, type: 'Input', tooltipText: 'Distribute Objects', template: '<button id=\"distributeBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-space-category', id: 'Distribute_objects' },\n            { type: 'Separator', },\n            { disabled: true, type: 'Input', tooltipText: 'Order Commands', template: '<button id=\"orderBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Order' },\n            { type: 'Separator' },\n            { disabled: true, type: 'Input', tooltipText: 'Group/Ungroup', template: '<button id=\"groupBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-align-category', id: 'Group' },\n            { type: 'Separator' },\n            { disabled: true, type: 'Input', tooltipText: 'Rotate', template: '<button id=\"rotateBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Rotate' },\n            { type: 'Separator' },\n            { disabled: true, type: 'Input', tooltipText: 'Flip', template: '<button id=\"flipBtn\" style=\"width:100%;\"></button>', cssClass: 'tb-item-middle tb-item-lock-category', id: 'Flip' },\n            { type: 'Separator' },\n            { cssClass: 'tb-item-end tb-zoom-dropdown-btn', template: '<button id=\"btnZoomIncrement\"></button>', id: 'Zoom' },\n        ];\n        return items;\n    }\n    function toolbarClick(args) {\n        var item = args.item.tooltipText;\n        switch (item) {\n            case 'Undo':\n                diagram.undo();\n                break;\n            case 'Redo':\n                diagram.redo();\n                break;\n            case 'Lock':\n                lockObject(args);\n                break;\n            case 'Cut':\n                diagram.cut();\n                updateToolbarItems([\"Paste\"], false);\n                break;\n            case 'Copy':\n                diagram.copy();\n                updateToolbarItems([\"Paste\"], false);\n                break;\n            case 'Paste':\n                diagram.paste();\n                break;\n            case 'Delete':\n                diagram.remove();\n                break;\n            case 'Select Tool':\n                diagram.clearSelection();\n                diagram.tool = ej2_diagrams_2.DiagramTools.Default;\n                break;\n            case 'Text Tool':\n                diagram.clearSelection();\n                diagram.selectedItems.userHandles = [];\n                diagram.drawingObject = { shape: { type: 'Text' } };\n                diagram.tool = ej2_diagrams_2.DiagramTools.ContinuousDraw;\n                break;\n            case 'Pan Tool':\n                diagram.clearSelection();\n                diagram.tool = ej2_diagrams_2.DiagramTools.ZoomPan;\n                break;\n            case 'New Diagram':\n                diagram.clear();\n                historyChange(args);\n                break;\n            case 'Print Diagram':\n                printDiagram(args);\n                break;\n            case 'Save Diagram':\n                download(diagram.saveDiagram());\n                break;\n            case 'Open Diagram':\n                document\n                    .getElementsByClassName('e-file-select-wrap')[0]\n                    .querySelector('button')\n                    .click();\n                break;\n        }\n        diagram.dataBind();\n    }\n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            var selectedItems = diagram.selectedItems.nodes;\n            selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\n            if (selectedItems.length === 0) {\n                updateToolbarItems(['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'], true);\n                disableMultiselectedItems();\n            }\n            if (selectedItems.length === 1) {\n                enableItems();\n                disableMultiselectedItems();\n                if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {\n                    updateToolbarItems([\"Group\"], false);\n                }\n                else {\n                    updateToolbarItems([\"Group\"], true);\n                }\n            }\n            if (selectedItems.length > 1) {\n                enableItems();\n                updateToolbarItems(['Align_objects', 'Group', 'Distribute_objects'], false);\n                if (selectedItems.length > 2) {\n                    updateToolbarItems(['Distribute_objects'], false);\n                }\n                else {\n                    updateToolbarItems(['Distribute_objects'], true);\n                }\n            }\n        }\n    }\n    function historyChange(args) {\n        updateToolbarItems(['Undo'], diagram.historyManager.undoStack.length === 0);\n        updateToolbarItems(['Redo'], diagram.historyManager.redoStack.length === 0);\n    }\n    var uploadObject = new ej2_inputs_1.Uploader({\n        asyncSettings: {\n            saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save',\n            removeUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove'\n        }, success: onUploadSuccess, showFileList: false\n    });\n    uploadObject.appendTo('#fileupload');\n    function printDiagram(args) {\n        var options = {};\n        options.mode = 'Download';\n        options.region = 'Content';\n        options.multiplePage = diagram.pageSettings.multiplePage;\n        options.pageHeight = diagram.pageSettings.height;\n        options.pageWidth = diagram.pageSettings.width;\n        diagram.print(options);\n    }\n    function enableItems() {\n        updateToolbarItems(['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'], false);\n    }\n    function disableMultiselectedItems() {\n        updateToolbarItems(['Align_objects', 'Distribute_objects', 'Group'], true);\n    }\n    function onConnectorSelect(args) {\n        diagram.clearSelection();\n        diagram.drawingObject = { type: args.item.text };\n        diagram.tool = ej2_diagrams_2.DiagramTools.ContinuousDraw;\n        diagram.selectedItems.userHandles = [];\n        diagram.dataBind();\n    }\n    function onShapesSelect(args) {\n        diagram.clearSelection();\n        diagram.drawingObject = { shape: { shape: args.item.text } };\n        diagram.tool = ej2_diagrams_2.DiagramTools.ContinuousDraw;\n        diagram.selectedItems.userHandles = [];\n        diagram.dataBind();\n    }\n    function onselectExport(args) {\n        var exportOptions = {};\n        exportOptions.format = args.item.text;\n        exportOptions.mode = 'Download';\n        exportOptions.region = 'PageSettings';\n        exportOptions.fileName = 'Export';\n        exportOptions.margin = { left: 0, top: 0, bottom: 0, right: 0 };\n        diagram.exportDiagram(exportOptions);\n    }\n    function onSelectGroup(args) {\n        if (args.item.text === 'Group') {\n            diagram.group();\n        }\n        else if (args.item.text === 'Ungroup') {\n            diagram.unGroup();\n        }\n    }\n    function onSelectAlignObjects(args) {\n        var item = args.item.text;\n        var alignType = item.replace('Align', '');\n        var alignType1 = alignType.charAt(0).toUpperCase() + alignType.slice(1);\n        diagram.align(alignType1.trim());\n    }\n    function onSelectDistributeObjects(args) {\n        diagram.distribute(args.item.text === 'Distribute Objects Vertically' ? 'BottomToTop' : 'RightToLeft');\n    }\n    function onSelectOrder(args) {\n        switch (args.item.text) {\n            case 'Bring Forward':\n                diagram.moveForward();\n                break;\n            case 'Bring To Front':\n                diagram.bringToFront();\n                break;\n            case 'Send Backward':\n                diagram.sendBackward();\n                break;\n            case 'Send To Back':\n                diagram.sendToBack();\n                break;\n        }\n    }\n    function onSelectRotate(args) {\n        diagram.rotate(diagram.selectedItems, args.item.text === 'Rotate Clockwise' ? 90 : -90);\n    }\n    function onSelectFlip(args) {\n        flipObjects(args.item.text);\n    }\n    function flipObjects(flipType) {\n        var selectedObjects = diagram.selectedItems.nodes.concat(diagram.selectedItems.connectors);\n        for (var i = 0; i < selectedObjects.length; i++) {\n            selectedObjects[i].flip ^= flipType === 'Flip Horizontal' ? ej2_diagrams_1.FlipDirection.Horizontal : ej2_diagrams_1.FlipDirection.Vertical;\n        }\n        diagram.dataBind();\n    }\n    function onUploadSuccess(args) {\n        var file = args.file;\n        var rawFile = file.rawFile;\n        var reader = new FileReader();\n        reader.readAsText(rawFile);\n        reader.onloadend = loadDiagram;\n    }\n    function loadDiagram(event) {\n        diagram.loadDiagram(event.target.result);\n    }\n    function download(data) {\n        if (window.navigator.msSaveBlob) {\n            var blob = new Blob([data], { type: 'data:text/json;charset=utf-8,' });\n            window.navigator.msSaveOrOpenBlob(blob, 'Diagram.json');\n        }\n        else {\n            var dataString = 'data:text/json;charset=utf-8,' + encodeURIComponent(data);\n            var element = document.createElement('a');\n            element.href = dataString;\n            element.download = 'Diagram.json';\n            document.body.appendChild(element);\n            element.click();\n            element.remove();\n        }\n    }\n    function lockObject(args) {\n        var isChecked;\n        for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {\n            var node = diagram.selectedItems.nodes[i];\n            if (node.constraints & ej2_diagrams_2.NodeConstraints.Drag) {\n                node.constraints = ej2_diagrams_2.NodeConstraints.PointerEvents | ej2_diagrams_2.NodeConstraints.Select | ej2_diagrams_2.NodeConstraints.ReadOnly;\n                isChecked = true;\n            }\n            else {\n                node.constraints = ej2_diagrams_2.NodeConstraints.Default;\n                isChecked = false;\n            }\n        }\n        for (var j = 0; j < diagram.selectedItems.connectors.length; j++) {\n            var connector = diagram.selectedItems.connectors[j];\n            if (connector.constraints & ej2_diagrams_2.ConnectorConstraints.Drag) {\n                connector.constraints = ej2_diagrams_2.ConnectorConstraints.PointerEvents | ej2_diagrams_2.ConnectorConstraints.Select | ej2_diagrams_2.ConnectorConstraints.ReadOnly;\n                isChecked = true;\n            }\n            else {\n                connector.constraints = ej2_diagrams_2.ConnectorConstraints.Default;\n                isChecked = false;\n            }\n        }\n        updateToolbarItems([\"Cut\", \"Copy\", \"Delete\", \"Order\", \"Rotate\", \"Flip\"], isChecked);\n        diagram.dataBind();\n    }\n    function updateToolbarItems(itemIds, disabled) {\n        itemIds.forEach(function (itemId) {\n            var item = toolbarObj.items.find(function (item) { return item.id === itemId; });\n            if (item) {\n                item.disabled = disabled;\n            }\n        });\n    }\n    function zoomChange(args) {\n        var zoomCurrentValue = document.getElementById(\"btnZoomIncrement\").ej2_instances[0];\n        var currentZoom = diagram.scrollSettings.currentZoom;\n        var zoom = {};\n        switch (args.item.text) {\n            case 'Zoom In':\n                diagram.zoomTo({ type: 'ZoomIn', zoomFactor: 0.2 });\n                zoomCurrentValue.content = (diagram.scrollSettings.currentZoom * 100).toFixed() + '%';\n                break;\n            case 'Zoom Out':\n                diagram.zoomTo({ type: 'ZoomOut', zoomFactor: 0.2 });\n                zoomCurrentValue.content = (diagram.scrollSettings.currentZoom * 100).toFixed() + '%';\n                break;\n            case 'Zoom to Fit':\n                zoom.zoomFactor = 1 / currentZoom - 1;\n                diagram.zoomTo(zoom);\n                zoomCurrentValue.content = diagram.scrollSettings.currentZoom;\n                break;\n            case 'Zoom to 50%':\n                if (currentZoom === 0.5) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (0.5 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (0.5 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                break;\n            case 'Zoom to 100%':\n                if (currentZoom === 1) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (1 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (1 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                break;\n            case 'Zoom to 200%':\n                if (currentZoom === 2) {\n                    currentZoom = 0;\n                    zoom.zoomFactor = (2 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                else {\n                    zoom.zoomFactor = (2 / currentZoom) - 1;\n                    diagram.zoomTo(zoom);\n                }\n                break;\n        }\n        zoomCurrentValue.content = Math.round(diagram.scrollSettings.currentZoom * 100) + ' %';\n    }\n    function getFlowShape(id, shapeType) {\n        var flowshape = { id: id, shape: { type: 'Flow', shape: shapeType } };\n        return flowshape;\n    }\n    var flowShapes = [\n        getFlowShape('Terminator', 'Terminator'),\n        getFlowShape('Process', 'Process'),\n        getFlowShape('Decision', 'Decision'),\n        getFlowShape('Document', 'Document'),\n        getFlowShape('PreDefinedProcess', 'PreDefinedProcess'),\n        getFlowShape('PaperTap', 'PaperTap'),\n        getFlowShape('DirectData', 'DirectData'),\n        getFlowShape('SequentialData', 'SequentialData'),\n        getFlowShape('Sort', 'Sort'),\n        getFlowShape('MultiDocument', 'MultiDocument'),\n        getFlowShape('Collate', 'Collate'),\n        getFlowShape('Or', 'Or'),\n        getFlowShape('Extract', 'Extract'),\n        getFlowShape('Merge', 'Merge'),\n        getFlowShape('OffPageReference', 'OffPageReference'),\n        getFlowShape('SequentialAccessStorage', 'SequentialAccessStorage'),\n        getFlowShape('Annotation', 'Annotation'),\n        getFlowShape('Annotation2', 'Annotation2'),\n        getFlowShape('Data', 'Data'),\n        getFlowShape('Card', 'Card'),\n        getFlowShape('Delay', 'Delay'),\n    ];\n    var connectorSymbols = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n            style: { strokeWidth: 1, strokeColor: '#757575' }\n        },\n        {\n            id: 'link2', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Link3', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n            style: { strokeWidth: 1, strokeColor: '#757575' }\n        },\n        {\n            id: 'link4', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link5', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n    ];\n    var palettes = [\n        { id: 'flow', expanded: true, symbols: flowShapes, iconCss: 'e-ddb-icons e-flow', title: 'Flow Shapes' },\n        { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ];\n    var palette = new ej2_diagrams_1.SymbolPalette({\n        expandMode: 'Multiple', palettes: palettes,\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        enableSearch: true,\n        getNodeDefaults: getSymbolDefaults, getSymbolInfo: getSymbolInfo\n    });\n    palette.appendTo('#symbolpalette');\n    (0, diagram_common_1.addEvents)();\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/default-functionalities/index.ts?");

/***/ }),

/***/ "./samples/diagram/default-functionalities/script/diagram-common.ts":
/*!**************************************************************************!*\
  !*** ./samples/diagram/default-functionalities/script/diagram-common.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.openPalette = exports.addEvents = void 0;\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    exports.addEvents = addEvents;\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    exports.openPalette = openPalette;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/default-functionalities/script/diagram-common.ts?");

/***/ })

/******/ });