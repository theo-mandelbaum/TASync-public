/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/connector/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/connector/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/connector/index.ts":
/*!********************************************!*\
  !*** ./samples/diagram/connector/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_inputs_1, ej2_dropdowns_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.HierarchicalTree, ej2_diagrams_1.ConnectorEditing);\n    var diagram;\n    var sourceDecoratorShape;\n    var targetDecoratorShape;\n    var sourceDecoratorSize;\n    var targetDecoratorSize;\n    var segmentDecoratorSize;\n    function created() {\n        diagram.updateViewPort();\n    }\n    function getNodeDefaults(obj) {\n        if (obj.id !== 'node1') {\n            obj.ports = getPorts(obj);\n        }\n        if (obj.id !== 'node6') {\n            obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };\n            obj.width = 80;\n            obj.style.strokeWidth = 2;\n            obj.style.strokeColor = '#6F409F';\n            obj.height = 35;\n        }\n        return obj;\n    }\n    function getConnectorDefaults(obj) {\n        obj.type = 'Bezier';\n        obj.style.strokeColor = '#6f409f';\n        obj.style.strokeWidth = 2;\n        obj.targetDecorator = {\n            style: {\n                strokeColor: '#6f409f',\n                fill: '#6f409f',\n            }\n        },\n            obj.segments = [\n                {\n                    type: 'Bezier',\n                }\n            ],\n            obj.constraints = ej2_diagrams_1.ConnectorConstraints.Default | ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb;\n        return obj;\n    }\n    function setNodeTemplate(obj) {\n        if (obj.id === 'node6') {\n            var canvas = new ej2_diagrams_1.StackPanel();\n            canvas.id = (0, ej2_diagrams_1.randomId)();\n            canvas.children = [];\n            canvas.style.strokeWidth = 0;\n            canvas.style.fill = '#e6e0eb';\n            canvas.children.push(getTextElement('Events', '#a6a1e0'));\n            canvas.children.push(getTextElement('Emails', '#db8ec9'));\n            canvas.children.push(getTextElement('Calls', '#db8ec9'));\n            canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));\n            return canvas;\n        }\n        return null;\n    }\n    function getTextElement(text, color) {\n        var textElement = new ej2_diagrams_1.TextElement();\n        textElement.id = (0, ej2_diagrams_1.randomId)();\n        textElement.width = 80;\n        textElement.height = 35;\n        textElement.content = text;\n        textElement.style.fill = '#6f409f';\n        textElement.style.color = 'white';\n        textElement.style.strokeColor = '#6f409f';\n        textElement.cornerRadius = 5;\n        textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n        textElement.relativeMode = 'Object';\n        return textElement;\n    }\n    function getPorts(obj) {\n        if (obj.id === 'node2') {\n            var node2Ports = [\n                { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: ej2_diagrams_1.PortVisibility.Hidden }\n            ];\n            return node2Ports;\n        }\n        else if (obj.id === 'node6') {\n            var node6Ports = [\n                { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: ej2_diagrams_1.PortVisibility.Hidden }\n            ];\n            return node6Ports;\n        }\n        else {\n            var ports = [\n                { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n            ];\n            return ports;\n        }\n    }\n    function changeConnectorPattern(args) {\n        var target = args.target;\n        var selectedElement = document.getElementsByClassName('e-selected-style');\n        if (selectedElement.length) {\n            selectedElement[0].classList.remove('e-selected-style');\n        }\n        if (target.className === 'image-pattern-style') {\n            switch (target.id) {\n                case 'straightConnector':\n                    applyConnectorStyle(false, false, false, 'Straight', target, 1);\n                    break;\n                case 'orthogonalConnector':\n                    applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);\n                    break;\n                case 'bezierConnector':\n                    applyConnectorStyle(false, false, false, 'Bezier', target, 1);\n                    break;\n                case 'straightConnectorWithStroke':\n                    applyConnectorStyle(false, false, false, 'Straight', target);\n                    break;\n                case 'orthogonalConnectorWithStroke':\n                    applyConnectorStyle(false, false, false, 'Orthogonal', target);\n                    break;\n                case 'bezierConnectorWithStroke':\n                    applyConnectorStyle(false, false, false, 'Bezier', target);\n                    break;\n                case 'straightConnectorWithDasharray':\n                    applyConnectorStyle(true, false, false, 'Straight', target);\n                    break;\n                case 'orthogonalConnectorWithDasharray':\n                    applyConnectorStyle(true, false, false, 'Orthogonal', target);\n                    break;\n                case 'bezierConnectorWithDasharray':\n                    applyConnectorStyle(true, false, false, 'Bezier', target);\n                    break;\n                case 'cornerRadius':\n                    applyConnectorStyle(false, false, true, 'Orthogonal', target);\n                    break;\n                case 'sourceDecorator':\n                    applyConnectorStyle(false, true, false, 'Straight', target);\n                    break;\n                case 'sourceDecoratorWithDasharray':\n                    applyConnectorStyle(true, true, false, 'Straight', target);\n                    break;\n            }\n        }\n    }\n    function applyConnectorStyle(dashedLine, sourceDec, isRounded, type, target, strokeWidth) {\n        var connector;\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            connector = diagram.connectors[i];\n            connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;\n            connector.type = type;\n            connector.cornerRadius = isRounded ? 5 : 0;\n            connector.style.strokeDashArray = dashedLine ? '5,5' : '';\n            if (sourceDec) {\n                connector.sourceDecorator = {\n                    style: {\n                        strokeColor: connector.style.strokeColor,\n                        fill: connector.style.strokeColor, strokeWidth: 2\n                    }, shape: 'Circle'\n                };\n                document.getElementById('sourceDecorator2').value = 'Circle';\n                sourceDecoratorShape.value = 'Circle';\n            }\n            else {\n                connector.sourceDecorator = { shape: 'None' };\n                document.getElementById('sourceDecorator2').value = 'None';\n                sourceDecoratorShape.value = 'None';\n            }\n            connector.targetDecorator = {\n                style: {\n                    strokeColor: connector.style.strokeColor,\n                    fill: connector.style.strokeColor, strokeWidth: 2\n                }, shape: 'Arrow'\n            };\n            document.getElementById('targetDecorator').value = 'Arrow';\n            targetDecoratorShape.value = 'Arrow';\n            diagram.dataBind();\n            diagram.updateSelector();\n        }\n        target.classList.add('e-selected-style');\n    }\n    function sourceDecoratorShapeChange(args) {\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            diagram.connectors[i].sourceDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: diagram.connectors[i].style.strokeColor,\n                    fill: diagram.connectors[i].style.strokeColor,\n                }\n            };\n        }\n        diagram.dataBind();\n    }\n    function targetDecoratorShapeChange(args) {\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            diagram.connectors[i].targetDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: diagram.connectors[i].style.strokeColor,\n                    fill: diagram.connectors[i].style.strokeColor,\n                }\n            };\n            diagram.dataBind();\n        }\n    }\n    function segmentDecoratorShapeChange(args) {\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            diagram.segmentThumbShape = args.itemData.shape;\n        }\n        diagram.dataBind();\n    }\n    function sourceDecoratorSizeChange(args) {\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            diagram.connectors[i].sourceDecorator.width = args.value;\n            diagram.connectors[i].sourceDecorator.height = args.value;\n        }\n        diagram.dataBind();\n    }\n    function targetDecoratorSizeChange(args) {\n        for (var i = 0; i < diagram.connectors.length; i++) {\n            diagram.connectors[i].targetDecorator.width = args.value;\n            diagram.connectors[i].targetDecorator.height = args.value;\n        }\n        diagram.dataBind();\n    }\n    function segmentDecoratorSizeChange(args) {\n        var connector = diagram.selectedItems.connectors[0];\n        diagram.segmentThumbSize = args.value;\n        diagram.clearSelection();\n        diagram.select([diagram.nameTable[connector.id]]);\n        diagram.dataBind();\n    }\n    var bounds = document.getElementsByClassName('content-wrapper')[0].getBoundingClientRect();\n    var marginLeft = (bounds.width - 560) / 2;\n    var nodes = [\n        { id: 'node1', annotations: [{ content: 'Promotion' }] },\n        { id: 'node2', annotations: [{ content: 'Lead' }] },\n        { id: 'node3', annotations: [{ content: 'Account' }] },\n        { id: 'node4', annotations: [{ content: 'Information' }] },\n        { id: 'node5', annotations: [{ content: 'Opportunity' }] },\n        { id: 'node6', offsetX: marginLeft + 540, offsetY: 340, excludeFromLayout: true }\n    ];\n    var connectors = [\n        { id: 'connector', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector1', sourceID: 'node2', sourcePortID: 'port1', targetID: 'node3', targetPortID: 'portIn' },\n        { id: 'connector2', sourceID: 'node2', sourcePortID: 'port2', targetID: 'node4', targetPortID: 'portIn' },\n        { id: 'connector3', sourceID: 'node2', sourcePortID: 'port3', targetID: 'node5', targetPortID: 'portIn' },\n        { id: 'connector4', sourceID: 'node6', sourcePortID: 'port4', targetID: 'node3', targetPortID: 'portOut' },\n        { id: 'connector5', sourceID: 'node6', sourcePortID: 'port5', targetID: 'node4', targetPortID: 'portOut' },\n        { id: 'connector7', sourceID: 'node6', sourcePortID: 'port6', targetID: 'node5', targetPortID: 'portOut' }\n    ];\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: 680, nodes: nodes,\n        connectors: connectors,\n        layout: {\n            type: 'HierarchicalTree', orientation: 'LeftToRight',\n            verticalSpacing: 75, margin: { left: marginLeft, right: 0, top: 0, bottom: 0 }\n        },\n        created: created,\n        selectionChange: function () {\n            if (diagram.selectedItems.connectors.length > 0) {\n                segmentDecoratorSize.enabled = true;\n            }\n            else {\n                segmentDecoratorSize.enabled = false;\n            }\n        },\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        setNodeTemplate: setNodeTemplate,\n    });\n    diagram.appendTo('#diagram');\n    document.getElementById('appearance').onclick = changeConnectorPattern;\n    var objectColor = new ej2_inputs_1.ColorPicker({\n        mode: 'Palette',\n        showButtons: false,\n        modeSwitcher: true,\n        value: '#6F409F',\n        change: function (args) {\n            for (var i = 0; i < diagram.connectors.length; i++) {\n                diagram.connectors[i].style.strokeColor = args.currentValue.hex;\n                diagram.connectors[i].targetDecorator.style.strokeColor = args.currentValue.hex;\n                diagram.connectors[i].targetDecorator.style.fill = args.currentValue.hex;\n                diagram.connectors[i].sourceDecorator.style.strokeColor = args.currentValue.hex;\n                diagram.connectors[i].sourceDecorator.style.fill = args.currentValue.hex;\n            }\n            diagram.dataBind();\n        }\n    });\n    objectColor.appendTo('#color');\n    var decoratorShape = [\n        { shape: 'None', text: 'None' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Diamond', text: 'Diamond' },\n        { shape: 'Arrow', text: 'Arrow' },\n        { shape: 'OpenArrow', text: 'Open Arrow' },\n        { shape: 'Fletch', text: 'Fletch' },\n        { shape: 'OpenFetch', text: 'OpenFetch' },\n        { shape: 'IndentedArrow', text: 'Indented Arrow' },\n        { shape: 'OutdentedArrow', text: 'Outdented Arrow' },\n        { shape: 'DoubleArrow', text: 'Double Arrow' }\n    ];\n    sourceDecoratorShape = new ej2_dropdowns_1.DropDownList({\n        enabled: true, value: 'None',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: sourceDecoratorShapeChange\n    });\n    sourceDecoratorShape.appendTo('#sourceDecorator2');\n    targetDecoratorShape = new ej2_dropdowns_1.DropDownList({\n        enabled: true,\n        value: 'Arrow',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: targetDecoratorShapeChange\n    });\n    targetDecoratorShape.appendTo('#targetDecorator');\n    var segmentDecoratorshape = new ej2_dropdowns_1.DropDownList({\n        enabled: true, value: 'Circle',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: segmentDecoratorShapeChange\n    });\n    segmentDecoratorshape.appendTo('#segmentDecorator');\n    sourceDecoratorSize = new ej2_inputs_1.NumericTextBox({\n        min: 10,\n        max: 20,\n        step: 1,\n        width: 130,\n        value: 12,\n        format: 'n0',\n        change: sourceDecoratorSizeChange\n    });\n    sourceDecoratorSize.appendTo('#sourceDecoratorSize');\n    targetDecoratorSize = new ej2_inputs_1.NumericTextBox({\n        min: 10,\n        max: 20,\n        step: 1,\n        width: 130,\n        format: 'n0',\n        value: 12,\n        change: targetDecoratorSizeChange,\n    });\n    targetDecoratorSize.appendTo('#targetDecoratorSize');\n    segmentDecoratorSize = new ej2_inputs_1.NumericTextBox({\n        enabled: false,\n        min: 10,\n        max: 20,\n        step: 1,\n        format: 'n0',\n        width: 130,\n        value: 12,\n        change: segmentDecoratorSizeChange,\n    });\n    segmentDecoratorSize.appendTo('#segmentDecoratorSize');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/connector/index.ts?");

/***/ })

/******/ });