/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/constraints/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/constraints/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/constraints/index.ts":
/*!**********************************************!*\
  !*** ./samples/diagram/constraints/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_buttons_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.DiagramContextMenu, ej2_diagrams_1.ConnectorEditing, ej2_diagrams_1.UndoRedo);\n    var diagram;\n    var Zooming;\n    var undoRedo;\n    var Selectable;\n    var Draggable;\n    var contextMenu;\n    var textedit;\n    var handles = [\n        {\n            name: 'delete',\n            pathData: 'M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z',\n            visible: true,\n            offset: 0.5,\n            side: 'Bottom',\n            margin: { top: 0, bottom: 0, left: 0, right: 0 },\n        },\n    ];\n    var nodes = [\n        {\n            id: 'textNode1',\n            offsetX: 340,\n            offsetY: 50,\n            width: 500,\n            height: 50,\n            shape: {\n                type: 'Text',\n                content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.',\n            },\n            style: {\n                strokeColor: 'none',\n                fill: 'none',\n                color: 'black',\n                textAlign: 'Center',\n            },\n            constraints: ej2_diagrams_1.NodeConstraints.None,\n        },\n        {\n            id: 'rectangle',\n            offsetX: 80,\n            offsetY: 160,\n            height: 65,\n            shape: { type: 'Basic', shape: 'Rectangle' },\n            annotations: [{ content: 'Selection = False' }],\n            constraints: ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Select,\n        },\n        {\n            id: 'ellipse',\n            offsetX: 190,\n            offsetY: 160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Ellipse', cornerRadius: 10 },\n            annotations: [{ content: 'Dragging = False' }],\n            constraints: ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Drag,\n        },\n        {\n            id: 'heptagon',\n            offsetX: 295,\n            offsetY: 160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Heptagon' },\n            annotations: [{ content: 'Delete = False' }],\n            constraints: ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Delete,\n        },\n        {\n            id: 'directData',\n            offsetX: 410,\n            offsetY: 160,\n            height: 80,\n            rotateAngle: -45,\n            shape: { type: 'Flow', shape: 'DirectData' },\n            annotations: [{ content: 'Rotate = False' }],\n            constraints: ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Rotate,\n        },\n        {\n            id: 'Plus',\n            offsetX: 530,\n            offsetY: 160,\n            height: 80,\n            shape: { type: 'Basic', shape: 'Plus' },\n            annotations: [\n                {\n                    content: 'TextEdit = False',\n                    constraints: ej2_diagrams_1.AnnotationConstraints.ReadOnly,\n                },\n            ],\n        },\n        {\n            id: 'decision',\n            offsetX: 630,\n            offsetY: 160,\n            height: 80,\n            shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Resizing = False' }],\n            constraints: ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Resize,\n        },\n        {\n            id: 'textNode2',\n            offsetX: 350,\n            offsetY: 280,\n            width: 550,\n            height: 50,\n            shape: {\n                type: 'Text',\n                content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.',\n            },\n            style: {\n                strokeColor: 'none',\n                fill: 'none',\n                color: 'black',\n                textAlign: 'Center',\n            },\n            constraints: ej2_diagrams_1.NodeConstraints.None,\n        },\n    ];\n    var connectors = [\n        {\n            id: 'select',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'Selection = False',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: ej2_diagrams_1.ConnectorConstraints.Default & ~ej2_diagrams_1.ConnectorConstraints.Select,\n            sourcePoint: {\n                x: 40,\n                y: 350,\n            },\n            targetPoint: {\n                x: 120,\n                y: 430,\n            },\n        },\n        {\n            id: 'connector2',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'Dragging = True',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: ej2_diagrams_1.ConnectorConstraints.Default |\n                ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb |\n                ej2_diagrams_1.ConnectorConstraints.Drag,\n            sourcePoint: {\n                x: 140,\n                y: 350,\n            },\n            targetPoint: {\n                x: 220,\n                y: 430,\n            },\n        },\n        {\n            id: 'delete',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'Delete = False',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: (ej2_diagrams_1.ConnectorConstraints.Default | ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n                ~(ej2_diagrams_1.ConnectorConstraints.Delete | ej2_diagrams_1.ConnectorConstraints.Drag),\n            sourcePoint: {\n                x: 250,\n                y: 350,\n            },\n            targetPoint: {\n                x: 320,\n                y: 430,\n            },\n        },\n        {\n            id: 'endThumb',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'EndThumb = False',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: ej2_diagrams_1.SelectorConstraints.All &\n                ~(ej2_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                    ej2_diagrams_1.SelectorConstraints.ConnectorTargetThumb),\n            sourcePoint: {\n                x: 360,\n                y: 350,\n            },\n            targetPoint: {\n                x: 440,\n                y: 430,\n            },\n        },\n        {\n            id: 'draggable',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'EndDraggable = False',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: (ej2_diagrams_1.ConnectorConstraints.Default | ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n                ~(ej2_diagrams_1.ConnectorConstraints.DragSourceEnd | ej2_diagrams_1.ConnectorConstraints.DragTargetEnd),\n            sourcePoint: {\n                x: 460,\n                y: 350,\n            },\n            targetPoint: {\n                x: 540,\n                y: 430,\n            },\n        },\n        {\n            id: 'segmentThumb',\n            type: 'Orthogonal',\n            annotations: [\n                {\n                    content: 'SegmentThumb = False',\n                    horizontalAlignment: 'Right',\n                    verticalAlignment: 'Bottom',\n                },\n            ],\n            constraints: ej2_diagrams_1.ConnectorConstraints.Default & ~ej2_diagrams_1.ConnectorConstraints.Drag,\n            sourcePoint: {\n                x: 580,\n                y: 350,\n            },\n            targetPoint: {\n                x: 660,\n                y: 430,\n            },\n        },\n    ];\n    function nodeDefaults(nodes) {\n        if (nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n            nodes.width = 80;\n            nodes.style.fill = '#C7E6FF';\n            nodes.style.strokeColor = '#1587FF';\n        }\n    }\n    function connectorDefaults(connectors) {\n        connectors.style.strokeColor = '#6BA5D7';\n        connectors.style.fill = '#6BA5D7';\n        connectors.style.strokeWidth = 2;\n        connectors.targetDecorator.style.fill = '#6BA5D7';\n        connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n    }\n    function selectionChange(args) {\n        {\n            if (args.state === 'Changing') {\n                if (args.type === 'Addition') {\n                    if (args.newValue.length > 0 && args.newValue[0].id === 'endThumb') {\n                        diagram.selectedItems.constraints =\n                            ej2_diagrams_1.SelectorConstraints.All &\n                                ~(ej2_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                                    ej2_diagrams_1.SelectorConstraints.ConnectorTargetThumb);\n                    }\n                    else {\n                        diagram.selectedItems.constraints = ej2_diagrams_1.SelectorConstraints.All;\n                    }\n                }\n                else {\n                    diagram.selectedItems.constraints = ej2_diagrams_1.SelectorConstraints.All;\n                }\n            }\n            if (args.state === 'Changed') {\n                if (args.newValue.length > 0 && args.newValue[0] instanceof ej2_diagrams_1.Node) {\n                    diagram.selectedItems = {\n                        constraints: ej2_diagrams_1.SelectorConstraints.All | ej2_diagrams_1.SelectorConstraints.UserHandle,\n                        userHandles: handles,\n                    };\n                }\n                else {\n                    if (args.newValue.length > 0 && args.newValue[0].id !== 'endThumb') {\n                        diagram.selectedItems = {\n                            constraints: ej2_diagrams_1.SelectorConstraints.All & ~ej2_diagrams_1.SelectorConstraints.UserHandle,\n                        };\n                    }\n                    else {\n                        diagram.selectedItems = {\n                            constraints: ej2_diagrams_1.SelectorConstraints.All &\n                                ~(ej2_diagrams_1.SelectorConstraints.UserHandle |\n                                    ej2_diagrams_1.SelectorConstraints.ConnectorSourceThumb |\n                                    ej2_diagrams_1.SelectorConstraints.ConnectorTargetThumb),\n                        };\n                    }\n                }\n            }\n        }\n    }\n    function getTool(action) {\n        var tool;\n        if (action === 'delete') {\n            diagram.remove();\n        }\n        return tool;\n    }\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%',\n        height: '550px',\n        nodes: nodes,\n        connectors: connectors,\n        contextMenuSettings: {\n            show: true,\n        },\n        created: function () {\n            for (var i = 0; i < diagram.connectors.length; i++) {\n                if (diagram.connectors[i].id === 'endThumb') {\n                    diagram.connectors[i].constraints =\n                        (ej2_diagrams_1.ConnectorConstraints.Default |\n                            ej2_diagrams_1.ConnectorConstraints.DragSegmentThumb) &\n                            ~ej2_diagrams_1.ConnectorConstraints.Drag;\n                }\n            }\n        },\n        rulerSettings: { showRulers: true },\n        selectionChange: selectionChange,\n        getCustomTool: getTool,\n        selectedItems: {\n            constraints: ej2_diagrams_1.SelectorConstraints.UserHandle,\n            userHandles: handles,\n        },\n        getNodeDefaults: nodeDefaults,\n        getConnectorDefaults: connectorDefaults,\n    });\n    diagram.appendTo('#diagram');\n    Zooming = new ej2_buttons_1.CheckBox({\n        checked: true,\n        label: 'Zooming',\n        change: function () {\n            diagram.constraints = diagram.constraints ^ ej2_diagrams_1.DiagramConstraints.Zoom;\n        },\n    });\n    Zooming.appendTo('#zooming');\n    undoRedo = new ej2_buttons_1.CheckBox({\n        label: 'Undo/Redo',\n        checked: true,\n        change: function () {\n            diagram.constraints = diagram.constraints ^ ej2_diagrams_1.DiagramConstraints.UndoRedo;\n            diagram.dataBind();\n        },\n    });\n    undoRedo.appendTo('#undoRedo');\n    textedit = new ej2_buttons_1.CheckBox({\n        label: 'Text Edit',\n        checked: true,\n        change: function (args) {\n            for (var i = 0; i < diagram.nodes.length; i++) {\n                var node = diagram.nodes[i];\n                if (node.annotations.length > 0 && node.annotations[0].content) {\n                    if (args.checked) {\n                        if (node.id !== 'Plus') {\n                            node.annotations[0].constraints =\n                                node.annotations[0].constraints ^\n                                    ej2_diagrams_1.AnnotationConstraints.ReadOnly;\n                        }\n                    }\n                    else {\n                        node.annotations[0].constraints =\n                            node.annotations[0].constraints | ej2_diagrams_1.AnnotationConstraints.ReadOnly;\n                    }\n                }\n            }\n            for (var x = 0; x < diagram.connectors.length; x++) {\n                var connector = diagram.connectors[x];\n                if (connector.annotations.length > 0 && connector.annotations[0].content) {\n                    if (args.checked) {\n                        if (connector.id === 'select') {\n                            connector.constraints =\n                                connector.constraints & ~(ej2_diagrams_1.ConnectorConstraints.Select);\n                        }\n                        else {\n                            connector.annotations[0].constraints =\n                                connector.annotations[0].constraints ^\n                                    ej2_diagrams_1.AnnotationConstraints.ReadOnly;\n                        }\n                    }\n                    else {\n                        connector.annotations[0].constraints =\n                            connector.annotations[0].constraints ^\n                                ej2_diagrams_1.AnnotationConstraints.ReadOnly;\n                    }\n                }\n            }\n            diagram.dataBind();\n        },\n    });\n    textedit.appendTo('#textedit');\n    Selectable = new ej2_buttons_1.CheckBox({\n        label: 'Selectable',\n        checked: true,\n        change: function (args) {\n            for (var i = 0; i < diagram.nodes.length; i++) {\n                var node = diagram.nodes[i];\n                if (node.id != 'rectangle') {\n                    if (args.checked) {\n                        node.constraints = node.constraints | ej2_diagrams_1.NodeConstraints.Select;\n                    }\n                    else {\n                        node.constraints = node.constraints & ~ej2_diagrams_1.NodeConstraints.Select;\n                    }\n                }\n                diagram.dataBind();\n            }\n            for (var j = 0; j < diagram.connectors.length; j++) {\n                var connector = diagram.connectors[j];\n                if (connector.id != 'select') {\n                    if (args.checked) {\n                        connector.constraints =\n                            connector.constraints | ej2_diagrams_1.ConnectorConstraints.Select;\n                    }\n                    else {\n                        connector.constraints =\n                            connector.constraints & ~ej2_diagrams_1.ConnectorConstraints.Select;\n                    }\n                }\n                diagram.dataBind();\n            }\n        },\n    });\n    Selectable.appendTo('#selectable');\n    Draggable = new ej2_buttons_1.CheckBox({\n        label: 'Draggable',\n        checked: true,\n        change: function (args) {\n            for (var i = 0; i < diagram.nodes.length; i++) {\n                var nodes_1 = diagram.nodes[i];\n                if (args.checked) {\n                    if (nodes_1.id === 'ellipse') {\n                        nodes_1.constraints = ej2_diagrams_1.NodeConstraints.Default & ~ej2_diagrams_1.NodeConstraints.Drag;\n                    }\n                    else {\n                        nodes_1.constraints = nodes_1.constraints | ej2_diagrams_1.NodeConstraints.Drag;\n                    }\n                }\n                else {\n                    nodes_1.constraints = nodes_1.constraints & ~ej2_diagrams_1.NodeConstraints.Drag;\n                }\n                diagram.dataBind();\n            }\n            for (var j = 0; j < diagram.connectors.length; j++) {\n                var connectors_1 = diagram.connectors[j];\n                if (args.checked) {\n                    connectors_1.constraints =\n                        connectors_1.constraints | ej2_diagrams_1.ConnectorConstraints.Drag;\n                }\n                else {\n                    connectors_1.constraints =\n                        connectors_1.constraints & ~ej2_diagrams_1.ConnectorConstraints.Drag;\n                }\n                diagram.dataBind();\n            }\n        },\n    });\n    Draggable.appendTo('#draggablee');\n    contextMenu = new ej2_buttons_1.CheckBox({\n        label: 'Context Menu',\n        checked: true,\n        change: function (args) {\n            if (args.checked) {\n                diagram.contextMenuSettings.show = true;\n                diagram.refresh();\n            }\n            else {\n                diagram.contextMenuSettings.show = false;\n            }\n            diagram.dataBind();\n        },\n    });\n    contextMenu.appendTo('#contextMenu');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/constraints/index.ts?");

/***/ })

/******/ });