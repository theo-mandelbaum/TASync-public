/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pivot-table/olap/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pivot-table/olap/index.ts","pivotview.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pivot-table/olap/index.ts":
/*!*******************************************!*\
  !*** ./samples/pivot-table/olap/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-pivotview */ \"./node_modules/@syncfusion/ej2-pivotview/index.js\"), __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_pivotview_1, ej2_base_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(false);\n    ej2_pivotview_1.PivotView.Inject(ej2_pivotview_1.FieldList, ej2_pivotview_1.GroupingBar, ej2_pivotview_1.CalculatedField, ej2_pivotview_1.Toolbar, ej2_pivotview_1.ConditionalFormatting, ej2_pivotview_1.PDFExport, ej2_pivotview_1.ExcelExport);\n    var pivotObj = new ej2_pivotview_1.PivotView({\n        dataSourceSettings: {\n            catalog: 'Adventure Works DW 2008 SE',\n            cube: 'Adventure Works',\n            providerType: 'SSAS',\n            enableSorting: true,\n            url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\n            localeIdentifier: 1033,\n            rows: [\n                { name: '[Customer].[Customer Geography]', caption: 'Customer Geography' },\n            ],\n            columns: [\n                { name: '[Product].[Product Categories]', caption: 'Product Categories' },\n                { name: '[Measures]', caption: 'Measures' },\n            ],\n            values: [\n                { name: '[Measures].[Customer Count]', caption: 'Customer Count' },\n                { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }\n            ],\n            filters: [\n                { name: '[Date].[Fiscal]', caption: 'Date Fiscal' },\n            ]\n        },\n        width: '100%',\n        height: 500,\n        toolbarRender: function (args) {\n            args.customToolbar.splice(6, 0, {\n                type: 'Separator'\n            });\n            args.customToolbar.splice(9, 0, {\n                type: 'Separator'\n            });\n        },\n        fetchReport: function (args) {\n            var reportsCollection = [];\n            var reeportList = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            reportsCollection.map(function (item) { reeportList.push(item.reportName); });\n            args.reportName = reeportList;\n        },\n        removeReport: function (args) {\n            var reportsCollection = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            for (var i = 0; i < reportsCollection.length; i++) {\n                if (reportsCollection[i].reportName === args.reportName) {\n                    reportsCollection.splice(i, 1);\n                }\n            }\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n            }\n        },\n        loadReport: function (args) {\n            var reportsCollection = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            reportsCollection.map(function (item) {\n                if (args.reportName === item.reportName) {\n                    args.report = item.report;\n                }\n            });\n            if (args.report) {\n                pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n            }\n        },\n        newReport: function () {\n            pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\n        },\n        renameReport: function (args) {\n            var reportsCollection = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            if (args.isReportExists) {\n                for (var i = 0; i < reportsCollection.length; i++) {\n                    if (reportsCollection[i].reportName === args.rename) {\n                        reportsCollection.splice(i, 1);\n                    }\n                }\n            }\n            reportsCollection.map(function (item) { if (args.reportName === item.reportName) {\n                item.reportName = args.rename;\n            } });\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n            }\n        },\n        toolbar: ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\n            'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'],\n        allowExcelExport: true,\n        allowConditionalFormatting: true,\n        enableFieldSearching: true,\n        allowPdfExport: true,\n        showToolbar: true,\n        showGroupingBar: true,\n        allowCalculatedField: true,\n        enableValueSorting: true,\n        displayOption: { view: 'Both' },\n        chartSettings: {\n            title: 'Sales Analysis',\n            load: function (args) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            }\n        },\n        showFieldList: true,\n        gridSettings: { columnWidth: 160 },\n        saveReport: function (args) {\n            var report = [];\n            var isSave = false;\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                report = JSON.parse(localStorage.pivotviewReports);\n            }\n            if (args.report && args.reportName && args.reportName !== '') {\n                report.map(function (item) {\n                    if (args.reportName === item.reportName) {\n                        item.report = args.report;\n                        isSave = true;\n                    }\n                });\n                if (!isSave) {\n                    report.push(args);\n                }\n                localStorage.pivotviewReports = JSON.stringify(report);\n            }\n        }\n    });\n    pivotObj.appendTo('#PivotView');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/pivot-table/olap/index.ts?");

/***/ })

/******/ });