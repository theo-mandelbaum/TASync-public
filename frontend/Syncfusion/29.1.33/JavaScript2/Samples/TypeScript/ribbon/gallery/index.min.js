/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/ribbon/gallery/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/ribbon/gallery/index.ts","navigations.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/ribbon/gallery/index.ts":
/*!*****************************************!*\
  !*** ./samples/ribbon/gallery/index.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-ribbon */ \"./node_modules/@syncfusion/ej2-ribbon/index.js\"), __webpack_require__(/*! @syncfusion/ej2-lists */ \"./node_modules/@syncfusion/ej2-lists/index.js\"), __webpack_require__(/*! @syncfusion/ej2-notifications */ \"./node_modules/@syncfusion/ej2-notifications/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_ribbon_1, ej2_lists_1, ej2_notifications_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_ribbon_1.Ribbon.Inject(ej2_ribbon_1.RibbonFileMenu, ej2_ribbon_1.RibbonColorPicker, ej2_ribbon_1.RibbonGallery);\n    var tabs = [{\n            header: \"Home\",\n            groups: [{\n                    id: 'clipboard',\n                    header: \"Clipboard\",\n                    showLauncherIcon: true,\n                    groupIconCss: 'e-icons e-paste',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    disabled: true,\n                                    id: 'pastebtn',\n                                    splitButtonSettings: {\n                                        iconCss: 'e-icons e-paste',\n                                        items: [{ text: 'Keep Source Format' }, { text: 'Merge Format' }, { text: 'Keep Text Only' }],\n                                        content: 'Paste',\n                                        select: function (args) { updateContent(\"Paste -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Paste\"); }\n                                    }\n                                }]\n                        }, {\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Cut',\n                                        iconCss: 'e-icons e-cut',\n                                        clicked: function () { updateContent(\"Cut\"); enablePaste(); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Copy',\n                                        iconCss: 'e-icons e-copy',\n                                        clicked: function () { updateContent(\"Copy\"); enablePaste(); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Format Painter',\n                                        iconCss: 'e-icons e-format-painter',\n                                        clicked: function () { updateContent(\"Format Painter\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Gallery\",\n                    showLauncherIcon: true,\n                    groupIconCss: 'e-icons e-paste',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Gallery,\n                                    gallerySettings: {\n                                        popupWidth: \"544px\",\n                                        itemCount: 3,\n                                        select: function (args) { updateContent(\"Gallery -> \" + args.currentItem.content); },\n                                        groups: [{\n                                                itemWidth: '100',\n                                                itemHeight: '40',\n                                                header: 'Title and Headings',\n                                                items: [\n                                                    {\n                                                        content: 'Heading 1',\n                                                        cssClass: 'heading_1'\n                                                    },\n                                                    {\n                                                        content: 'Heading 2',\n                                                        cssClass: 'heading_2'\n                                                    }, {\n                                                        content: 'Heading 3',\n                                                        cssClass: 'heading_3'\n                                                    }, {\n                                                        content: 'Heading 4',\n                                                        cssClass: 'heading_4'\n                                                    }, {\n                                                        content: 'Title',\n                                                        cssClass: 'title'\n                                                    }, {\n                                                        content: 'Total',\n                                                        cssClass: 'total'\n                                                    }\n                                                ]\n                                            }, {\n                                                itemWidth: '100',\n                                                itemHeight: '40',\n                                                header: 'Data and Model',\n                                                items: [\n                                                    {\n                                                        content: 'Calculation',\n                                                        cssClass: 'calculation'\n                                                    },\n                                                    {\n                                                        content: 'Check Cell',\n                                                        cssClass: 'check-cell'\n                                                    }, {\n                                                        content: 'Hyperlink',\n                                                        cssClass: 'hyperlink'\n                                                    }, {\n                                                        content: 'Input',\n                                                        cssClass: 'input'\n                                                    }, {\n                                                        content: 'Linked Cell',\n                                                        cssClass: 'linked-cell'\n                                                    }, {\n                                                        content: 'Note',\n                                                        cssClass: 'note'\n                                                    }\n                                                ]\n                                            }, {\n                                                itemWidth: '100',\n                                                itemHeight: '40',\n                                                header: 'Good, Bad and Neutral',\n                                                items: [{\n                                                        content: 'Normal',\n                                                        cssClass: 'normal'\n                                                    }, {\n                                                        content: 'Bad',\n                                                        cssClass: 'bad'\n                                                    }, {\n                                                        content: 'Good',\n                                                        cssClass: 'good'\n                                                    }, {\n                                                        content: 'Neutral',\n                                                        cssClass: 'neutral'\n                                                    }\n                                                ]\n                                            }]\n                                    }\n                                }]\n                        }]\n                }, , {\n                    header: \"Voice\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-dictate',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    splitButtonSettings: {\n                                        content: 'Dictate',\n                                        iconCss: 'sf-icon-dictate',\n                                        items: [{ text: 'Chinese' }, { text: 'English' }, { text: 'German' }, { text: 'French' }],\n                                        select: function (args) { updateContent(\"Dictate -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Dictate\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Editor\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-editor',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        content: 'Editor',\n                                        iconCss: 'sf-icon-editor',\n                                        clicked: function () { updateContent(\"Editor\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Reuse Files\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-reuse',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-reuse',\n                                        content: 'Reuse Files',\n                                        clicked: function () { updateContent(\"Reuse Files\"); }\n                                    }\n                                }]\n                        }]\n                }]\n        }, {\n            header: 'Insert',\n            groups: [{\n                    header: 'Tables',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    dropDownSettings: {\n                                        iconCss: 'e-icons e-table',\n                                        content: 'Table',\n                                        items: [\n                                            { text: 'Insert Table' }, { text: 'Draw Table' },\n                                            { text: 'Convert Table' }, { text: 'Excel SpreadSheet' }\n                                        ],\n                                        select: function (args) { updateContent(\"Table -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    id: 'illustration',\n                    header: 'Illustrations',\n                    showLauncherIcon: true,\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    enableGroupOverflow: true,\n                    overflowHeader: 'Illustrations',\n                    groupIconCss: 'e-icons e-image',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    id: 'pictureddl',\n                                    dropDownSettings: {\n                                        content: 'Pictures',\n                                        iconCss: 'e-icons e-image',\n                                        target: '#pictureList'\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Shapes',\n                                        iconCss: 'sf-icon-shapes',\n                                        items: [{ text: 'Lines' }, { text: 'Rectangles' }, { text: 'Basic Arrows' }, { text: 'Basic Shapes' }, { text: 'FlowChart' }],\n                                        select: function (args) { updateContent(\"Shapes -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: '3D Models',\n                                        iconCss: 'sf-icon-3d-model',\n                                        clicked: function () { updateContent(\"3D Models\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-smart-art',\n                                        content: 'SmartArt',\n                                        clicked: function () { updateContent(\"SmartArt\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Chart',\n                                        iconCss: 'sf-icon-chart',\n                                        clicked: function () { updateContent(\"Chart\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Screenshot',\n                                        iconCss: 'sf-icon-screenshot',\n                                        clicked: function () { updateContent(\"Screenshot\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    id: 'header_footer',\n                    header: 'Header & Footer',\n                    showLauncherIcon: true,\n                    orientation: ej2_ribbon_1.ItemOrientation.Column,\n                    groupIconCss: 'e-icons e-table',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Header',\n                                        iconCss: 'e-icons e-header',\n                                        items: [{ text: 'Insert Header' }, { text: 'Edit Header' }, { text: 'Remove Header' }],\n                                        select: function (args) { updateContent(\"Header -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        iconCss: 'e-icons e-footer',\n                                        content: 'Footer',\n                                        items: [{ text: 'Insert Footer' }, { text: 'Edit Footer' }, { text: 'Remove Footer' }],\n                                        select: function (args) { updateContent(\"Footer -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Page Number',\n                                        iconCss: 'e-icons e-page-numbering',\n                                        items: [{ text: 'Insert Top of page' }, { text: 'Insert Bottom of page' }, { text: 'Format Page Number' }, { text: 'Remove Page Number' }],\n                                        select: function (args) { updateContent(\"Page Numbering -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                },\n                {\n                    header: 'Comments',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        content: 'New Comment',\n                                        iconCss: 'e-icons e-comment-add',\n                                        clicked: function () { updateContent(\"New Comment\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Links',\n                    groupIconCss: 'e-icons e-link',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    dropDownSettings: {\n                                        content: 'Link',\n                                        iconCss: 'e-icons e-link',\n                                        items: [{ text: 'Insert Link', iconCss: 'e-icons e-link' },\n                                            { text: 'Recent Links', iconCss: 'e-icons e-clock' },\n                                            { text: 'Bookmarks', iconCss: 'e-icons e-bookmark' }\n                                        ],\n                                        select: function (args) { updateContent(\"Link -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                }]\n        }, {\n            header: 'View',\n            groups: [{\n                    header: 'Views',\n                    groupIconCss: 'e-icons e-print',\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-read',\n                                        content: 'Read Mode',\n                                        clicked: function () { updateContent(\"Read Mode\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Print Layout',\n                                        iconCss: 'e-print e-icons',\n                                        clicked: function () { updateContent(\"Print Layout\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-web-layout',\n                                        content: 'Web Layout',\n                                        clicked: function () { updateContent(\"Web Layout\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Zoom',\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    groupIconCss: 'e-icons e-zoom-to-fit',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Zoom In',\n                                        iconCss: 'e-icons e-zoom-in',\n                                        clicked: function () { updateContent(\"Zoom In\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'e-icons e-zoom-out',\n                                        content: 'Zoom Out',\n                                        clicked: function () { updateContent(\"Zoom Out\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Show',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        label: 'Ruler',\n                                        checked: false,\n                                        change: function () { updateContent(\"Ruler\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        checked: false,\n                                        label: 'Gridlines',\n                                        change: function () { updateContent(\"Gridlines\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        label: 'Navigation Pane',\n                                        checked: true,\n                                        change: function () { updateContent(\"Navigation Pane\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Dark Mode',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-mode',\n                                        content: 'Dark Mode',\n                                        clicked: function () { updateContent(\"Dark Mode\"); }\n                                    }\n                                }]\n                        }]\n                }]\n        }];\n    var list = new ej2_lists_1.ListView({\n        showHeader: true,\n        headerTitle: 'Insert Picture From',\n        dataSource: ['This Device', 'Stock Images', 'Online Images'],\n        select: function (args) { updateContent(\"Pictures -> \" + args.text); }\n    });\n    list.appendTo('#pictureList');\n    var menuItems = [\n        { text: 'New', iconCss: 'e-icons e-file-new', id: 'new' },\n        { text: 'Open', iconCss: 'e-icons e-folder-open', id: 'open' },\n        { text: 'Rename', iconCss: 'e-icons e-rename', id: 'rename' },\n        {\n            text: 'Save as',\n            iconCss: 'e-icons e-save',\n            id: 'save',\n            items: [\n                { text: 'Microsoft Word (.docx)', iconCss: 'sf-icon-word', id: 'word' },\n                { text: 'Microsoft Word 97-2003(.doc)', iconCss: 'sf-icon-word', id: 'word97' },\n                { text: 'Download as PDF', iconCss: 'e-icons e-export-pdf', id: 'pdf' }\n            ]\n        }\n    ];\n    var files = ({\n        menuItems: menuItems,\n        visible: true,\n        select: function (args) {\n            if (args.item.id == \"word\" || args.item.id == \"word97\" || args.item.id == \"pdf\") {\n                updateContent(\"File -> Save as -> \" + args.item.text);\n            }\n            else {\n                updateContent(\"File -> \" + args.item.text);\n            }\n        }\n    });\n    var ribbon = new ej2_ribbon_1.Ribbon({\n        tabs: tabs,\n        fileMenu: files,\n        cssClass: 'ribbonGallery',\n        launcherIconClick: function (args) {\n            if (args.groupId == \"clipboard\") {\n                updateContent(\"Clipboard LauncherIcon\");\n            }\n            else if (args.groupId == \"illustration\") {\n                updateContent(\"Illustration LauncherIcon\");\n            }\n            else if (args.groupId == \"header_footer\") {\n                updateContent(\"Header & Footer LauncherIcon\");\n            }\n        }\n    });\n    ribbon.appendTo(\"#ribbon\");\n    var toast = new ej2_notifications_1.Toast({\n        target: '#ribbonPlaceHolder',\n        cssClass: 'e-toast-info',\n        height: 25,\n        width: 'auto',\n        timeOut: 2000,\n        newestOnTop: true,\n        animation: { show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } },\n        position: { X: \"Right\" },\n        showCloseButton: true\n    });\n    toast.appendTo('#toast');\n    function updateContent(args) {\n        toast.show({ content: \"Last clicked item is \" + args });\n    }\n    var isPasteDisabled = true;\n    function enablePaste() {\n        if (!isPasteDisabled) {\n            return;\n        }\n        ribbon.enableItem('pastebtn');\n        isPasteDisabled = false;\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/ribbon/gallery/index.ts?");

/***/ })

/******/ });