/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/ribbon/backstage/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/ribbon/backstage/index.ts","navigations.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/ribbon/backstage/datasource.json":
/*!**************************************************!*\
  !*** ./samples/ribbon/backstage/datasource.json ***!
  \**************************************************/
/*! exports provided: recentDocuments, dataOptions, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"recentDocuments\\\":[{\\\"fileName\\\":\\\"Classic_layout.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> layouts\\\"},{\\\"fileName\\\":\\\"Simplified_layout.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> layouts\\\"},{\\\"fileName\\\":\\\"Ribbon_resize.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> resize\\\"},{\\\"fileName\\\":\\\"Ribbon_backstage.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> backstage\\\"},{\\\"fileName\\\":\\\"Ribbon_overflow.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> overflow\\\"},{\\\"fileName\\\":\\\"Custom_items.docx\\\",\\\"location\\\":\\\"EJ2 >> Components >> Navigations >> Ribbon >> items\\\"}],\\\"dataOptions\\\":{\\\"info\\\":[{\\\"icon\\\":\\\"e-open-link\\\",\\\"title\\\":\\\"Open in Desktop App\\\",\\\"description\\\":\\\"Use the full functionality of Ribbon\\\"},{\\\"icon\\\":\\\"e-protect-sheet\\\",\\\"title\\\":\\\"Protect Document\\\",\\\"description\\\":\\\"To prevent accidental changes, this document has been set to open as view-only.\\\"},{\\\"icon\\\":\\\"e-send-to-back\\\",\\\"title\\\":\\\"Version History\\\",\\\"description\\\":\\\"View previous versions\\\"}],\\\"save\\\":[{\\\"icon\\\":\\\"e-save\\\",\\\"title\\\":\\\"Save as\\\",\\\"description\\\":\\\"Save a copy online\\\"},{\\\"icon\\\":\\\"e-rename\\\",\\\"title\\\":\\\"Rename\\\",\\\"description\\\":\\\"Rename this file\\\"},{\\\"icon\\\":\\\"e-download\\\",\\\"title\\\":\\\"Download a Copy\\\",\\\"description\\\":\\\"Download a local copy\\\"},{\\\"icon\\\":\\\"e-export-pdf\\\",\\\"title\\\":\\\"Download as PDF\\\",\\\"description\\\":\\\"Download a copy as PDF file\\\"},{\\\"icon\\\":\\\"e-chevron-down-fill\\\",\\\"title\\\":\\\"Download as ODT\\\",\\\"description\\\":\\\"Download a copy as ODT file\\\"}],\\\"export\\\":[{\\\"icon\\\":\\\"e-transform-right\\\",\\\"title\\\":\\\"Transform to Web Page\\\",\\\"description\\\":\\\"Transform your document into an interactive webpage\\\"},{\\\"icon\\\":\\\"e-export\\\",\\\"title\\\":\\\"Export to PowerPoint presentation\\\",\\\"description\\\":\\\"Export your document into a multi-slide presentation\\\"},{\\\"icon\\\":\\\"e-protect-workbook\\\",\\\"title\\\":\\\"Send documents to Kindle\\\",\\\"description\\\":\\\"Send documents to your Kindle device to read and annotate the documents\\\"}],\\\"print\\\":[{\\\"icon\\\":\\\"e-print-layout\\\",\\\"title\\\":\\\"Print\\\",\\\"description\\\":\\\"Print this document\\\"}],\\\"share\\\":[{\\\"icon\\\":\\\"e-arrow-right-up\\\",\\\"title\\\":\\\"Share with People\\\",\\\"description\\\":\\\"Invite other people to view or edit this document\\\"},{\\\"icon\\\":\\\"e-protect-workbook\\\",\\\"title\\\":\\\"Embed\\\",\\\"description\\\":\\\"Embed this document in your blog or website\\\"}],\\\"account\\\":[{\\\"icon\\\":\\\"e-people\\\",\\\"title\\\":\\\"Account type\\\",\\\"description\\\":\\\"Administrator\\\"},{\\\"icon\\\":\\\"e-password\\\",\\\"title\\\":\\\"Password protected\\\",\\\"description\\\":\\\"Yes\\\"},{\\\"icon\\\":\\\"e-text-that-contains\\\",\\\"title\\\":\\\"E-mail\\\",\\\"description\\\":\\\"abc@gmail.com\\\"}],\\\"feedback\\\":[{\\\"icon\\\":\\\"e-check\\\",\\\"title\\\":\\\"I Like Something\\\",\\\"description\\\":\\\"It's nice to know when we have made a positive change.\\\"},{\\\"icon\\\":\\\"e-close\\\",\\\"title\\\":\\\"I Don't Like Something\\\",\\\"description\\\":\\\"If something's not right we'd like to know so we can fix it.\\\"},{\\\"icon\\\":\\\"e-comment-add\\\",\\\"title\\\":\\\"I Have a Suggestion\\\",\\\"description\\\":\\\"Do you have an idea for a new feature or an improvement ?\\\"}]}}\");\n\n//# sourceURL=webpack:///./samples/ribbon/backstage/datasource.json?");

/***/ }),

/***/ "./samples/ribbon/backstage/index.ts":
/*!*******************************************!*\
  !*** ./samples/ribbon/backstage/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-ribbon */ \"./node_modules/@syncfusion/ej2-ribbon/index.js\"), __webpack_require__(/*! @syncfusion/ej2-lists */ \"./node_modules/@syncfusion/ej2-lists/index.js\"), __webpack_require__(/*! @syncfusion/ej2-notifications */ \"./node_modules/@syncfusion/ej2-notifications/index.js\"), __webpack_require__(/*! ./datasource.json */ \"./samples/ribbon/backstage/datasource.json\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_ribbon_1, ej2_lists_1, ej2_notifications_1, data) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_ribbon_1.Ribbon.Inject(ej2_ribbon_1.RibbonFileMenu, ej2_ribbon_1.RibbonColorPicker, ej2_ribbon_1.RibbonBackstage);\n    var fontSize = ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '26', '28', '36', '48', '72', '96'];\n    var fontStyle = ['Algerian', 'Arial', 'Calibri', 'Cambria', 'Cambria Math', 'Courier New', 'Candara', 'Georgia', 'Impact', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Symbol', 'Times New Roman', 'Verdana', 'Windings'\n    ];\n    var tabs = [{\n            header: \"Home\",\n            groups: [{\n                    id: 'clipboard',\n                    header: \"Clipboard\",\n                    showLauncherIcon: true,\n                    groupIconCss: 'e-icons e-paste',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    disabled: true,\n                                    id: 'pastebtn',\n                                    splitButtonSettings: {\n                                        iconCss: 'e-icons e-paste',\n                                        items: [{ text: 'Keep Source Format' }, { text: 'Merge Format' }, { text: 'Keep Text Only' }],\n                                        content: 'Paste',\n                                        select: function (args) { updateContent(\"Paste -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Paste\"); }\n                                    }\n                                }]\n                        }, {\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Cut',\n                                        iconCss: 'e-icons e-cut',\n                                        clicked: function () { updateContent(\"Cut\"); enablePaste(); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Copy',\n                                        iconCss: 'e-icons e-copy',\n                                        clicked: function () { updateContent(\"Copy\"); enablePaste(); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Format Painter',\n                                        iconCss: 'e-icons e-format-painter',\n                                        clicked: function () { updateContent(\"Format Painter\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Font\",\n                    isCollapsible: false,\n                    enableGroupOverflow: true,\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    overflowHeader: 'More Font Options',\n                    groupIconCss: 'e-icons e-bold',\n                    cssClass: 'font-group',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.ComboBox,\n                                    comboBoxSettings: {\n                                        dataSource: fontStyle,\n                                        label: 'Font Style',\n                                        index: 3,\n                                        allowFiltering: true,\n                                        width: '115px',\n                                        popupWidth: '150px',\n                                        change: function (args) {\n                                            if (args.itemData) {\n                                                updateContent(\"Font Style -> \" + args.itemData.text);\n                                            }\n                                        }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.ComboBox,\n                                    comboBoxSettings: {\n                                        dataSource: fontSize,\n                                        label: 'Font Size',\n                                        index: 3,\n                                        width: '65px',\n                                        popupWidth: '85px',\n                                        allowFiltering: true,\n                                        change: function (args) {\n                                            if (args.itemData) {\n                                                updateContent(\"Font Style -> \" + args.itemData.text);\n                                            }\n                                        }\n                                    }\n                                }]\n                        }, {\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.ColorPicker,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    displayOptions: ej2_ribbon_1.DisplayMode.Simplified | ej2_ribbon_1.DisplayMode.Classic,\n                                    colorPickerSettings: {\n                                        value: '#123456',\n                                        change: function (args) { updateContent(args.currentValue.hex + ' color'); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        content: 'Bold',\n                                        iconCss: 'e-icons e-bold',\n                                        isToggle: true,\n                                        clicked: function () { updateContent(\"Bold\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        content: 'Italic',\n                                        iconCss: 'e-icons e-italic',\n                                        isToggle: true,\n                                        clicked: function () { updateContent(\"Italic\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        content: 'Underline',\n                                        iconCss: 'e-icons e-underline',\n                                        isToggle: true,\n                                        clicked: function () { updateContent(\"Underline\"); }\n                                    }\n                                }, {\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Strikethrough',\n                                        iconCss: 'e-icons e-strikethrough',\n                                        isToggle: true,\n                                        clicked: function () { updateContent(\"Strikethrough\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        content: 'Change Case',\n                                        iconCss: 'e-icons e-change-case',\n                                        isToggle: true,\n                                        clicked: function () { updateContent(\"Change Case\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    id: 'paragraph',\n                    header: \"Paragraph\",\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    groupIconCss: 'e-icons e-align-center',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        iconCss: 'e-icons e-decrease-indent',\n                                        content: 'Decrease Indent',\n                                        clicked: function () { updateContent(\"Decrease Indent\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        iconCss: 'e-icons e-increase-indent',\n                                        content: 'Increase Indent',\n                                        clicked: function () { updateContent(\"Increase Indent\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    buttonSettings: {\n                                        iconCss: 'e-icons e-paragraph',\n                                        content: 'Paragraph',\n                                        clicked: function () { updateContent(\"Paragraph Mark\"); }\n                                    }\n                                }]\n                        }, {\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.GroupButton,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Small,\n                                    groupButtonSettings: {\n                                        selection: ej2_ribbon_1.RibbonGroupButtonSelection.Single,\n                                        header: 'Alignment',\n                                        items: [{\n                                                iconCss: 'e-icons e-align-left',\n                                                selected: true,\n                                                click: function () { updateContent(\"Align Left\"); }\n                                            },\n                                            {\n                                                iconCss: 'e-icons e-align-center',\n                                                click: function () { updateContent(\"Align Center\"); }\n                                            },\n                                            {\n                                                iconCss: 'e-icons e-align-right',\n                                                click: function () { updateContent(\"Align Right\"); }\n                                            },\n                                            {\n                                                iconCss: 'e-icons e-justify',\n                                                click: function () { updateContent(\"Justify\"); }\n                                            }]\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Editing\",\n                    groupIconCss: 'e-icons e-edit',\n                    orientation: ej2_ribbon_1.ItemOrientation.Column,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    splitButtonSettings: {\n                                        iconCss: 'e-icons e-search',\n                                        content: 'Find',\n                                        items: [\n                                            { text: 'Find', iconCss: 'e-icons e-search' },\n                                            { text: 'Advanced Find', iconCss: 'e-icons e-search' },\n                                            { text: 'Go to', iconCss: 'e-icons e-arrow-right' }\n                                        ],\n                                        select: function (args) { updateContent(\"Find -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Find\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Replace',\n                                        iconCss: 'e-icons e-replace',\n                                        clicked: function () { updateContent(\"Replace\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    splitButtonSettings: {\n                                        iconCss: 'e-icons e-mouse-pointer',\n                                        content: 'Select',\n                                        items: [{ text: 'Select All' },\n                                            { text: 'Select Objects' }],\n                                        select: function (args) { updateContent(\"Select -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Select\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Voice\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-dictate',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.SplitButton,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    splitButtonSettings: {\n                                        content: 'Dictate',\n                                        iconCss: 'sf-icon-dictate',\n                                        items: [{ text: 'Chinese' }, { text: 'English' }, { text: 'German' }, { text: 'French' }],\n                                        select: function (args) { updateContent(\"Dictate -> \" + args.item.text); },\n                                        click: function () { updateContent(\"Dictate\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Editor\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-editor',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        content: 'Editor',\n                                        iconCss: 'sf-icon-editor',\n                                        clicked: function () { updateContent(\"Editor\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: \"Reuse Files\",\n                    isCollapsible: false,\n                    groupIconCss: 'sf-icon-reuse',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    disabled: true,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-reuse',\n                                        content: 'Reuse Files',\n                                        clicked: function () { updateContent(\"Reuse Files\"); }\n                                    }\n                                }]\n                        }]\n                }]\n        }, {\n            header: 'Insert',\n            groups: [{\n                    header: 'Tables',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    dropDownSettings: {\n                                        iconCss: 'e-icons e-table',\n                                        content: 'Table',\n                                        items: [\n                                            { text: 'Insert Table' }, { text: 'Draw Table' },\n                                            { text: 'Convert Table' }, { text: 'Excel Spreadsheet' }\n                                        ],\n                                        select: function (args) { updateContent(\"Table -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    id: 'illustration',\n                    header: 'Illustrations',\n                    showLauncherIcon: true,\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    enableGroupOverflow: true,\n                    overflowHeader: 'Illustrations',\n                    groupIconCss: 'e-icons e-image',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    id: 'pictureddl',\n                                    dropDownSettings: {\n                                        content: 'Pictures',\n                                        iconCss: 'e-icons e-image',\n                                        target: '#pictureList'\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Shapes',\n                                        iconCss: 'sf-icon-shapes',\n                                        items: [{ text: 'Lines' }, { text: 'Rectangles' }, { text: 'Basic Arrows' }, { text: 'Basic Shapes' }, { text: 'FlowChart' }],\n                                        select: function (args) { updateContent(\"Shapes -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: '3D Models',\n                                        iconCss: 'sf-icon-3d-model',\n                                        clicked: function () { updateContent(\"3D Models\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-smart-art',\n                                        content: 'SmartArt',\n                                        clicked: function () { updateContent(\"SmartArt\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Chart',\n                                        iconCss: 'sf-icon-chart',\n                                        clicked: function () { updateContent(\"Chart\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Screenshot',\n                                        iconCss: 'sf-icon-screenshot',\n                                        clicked: function () { updateContent(\"Screenshot\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    id: 'header_footer',\n                    header: 'Header & Footer',\n                    showLauncherIcon: true,\n                    orientation: ej2_ribbon_1.ItemOrientation.Column,\n                    groupIconCss: 'e-icons e-table',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Header',\n                                        iconCss: 'e-icons e-header',\n                                        items: [{ text: 'Insert Header' }, { text: 'Edit Header' }, { text: 'Remove Header' }],\n                                        select: function (args) { updateContent(\"Header -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        iconCss: 'e-icons e-footer',\n                                        content: 'Footer',\n                                        items: [{ text: 'Insert Footer' }, { text: 'Edit Footer' }, { text: 'Remove Footer' }],\n                                        select: function (args) { updateContent(\"Footer -> \" + args.item.text); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    dropDownSettings: {\n                                        content: 'Page Number',\n                                        iconCss: 'e-icons e-page-numbering',\n                                        items: [{ text: 'Insert Top of page' }, { text: 'Insert Bottom of page' }, { text: 'Format Page Number' }, { text: 'Remove Page Number' }],\n                                        select: function (args) { updateContent(\"Page Numbering -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                },\n                {\n                    header: 'Comments',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        content: 'New Comment',\n                                        iconCss: 'e-icons e-comment-add',\n                                        clicked: function () { updateContent(\"New Comment\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Links',\n                    groupIconCss: 'e-icons e-link',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.DropDown,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    dropDownSettings: {\n                                        content: 'Link',\n                                        iconCss: 'e-icons e-link',\n                                        items: [{ text: 'Insert Link', iconCss: 'e-icons e-link' },\n                                            { text: 'Recent Links', iconCss: 'e-icons e-clock' },\n                                            { text: 'Bookmarks', iconCss: 'e-icons e-bookmark' }\n                                        ],\n                                        select: function (args) { updateContent(\"Link -> \" + args.item.text); }\n                                    }\n                                }]\n                        }]\n                }]\n        }, {\n            header: 'View',\n            groups: [{\n                    header: 'Views',\n                    groupIconCss: 'e-icons e-print',\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-read',\n                                        content: 'Read Mode',\n                                        clicked: function () { updateContent(\"Read Mode\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Print Layout',\n                                        iconCss: 'e-print e-icons',\n                                        clicked: function () { updateContent(\"Print Layout\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-web-layout',\n                                        content: 'Web Layout',\n                                        clicked: function () { updateContent(\"Web Layout\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Zoom',\n                    orientation: ej2_ribbon_1.ItemOrientation.Row,\n                    groupIconCss: 'e-icons e-zoom-to-fit',\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        content: 'Zoom In',\n                                        iconCss: 'e-icons e-zoom-in',\n                                        clicked: function () { updateContent(\"Zoom In\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    buttonSettings: {\n                                        iconCss: 'e-icons e-zoom-out',\n                                        content: 'Zoom Out',\n                                        clicked: function () { updateContent(\"Zoom Out\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Show',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        label: 'Ruler',\n                                        checked: false,\n                                        change: function () { updateContent(\"Ruler\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        checked: false,\n                                        label: 'Gridlines',\n                                        change: function () { updateContent(\"Gridlines\"); }\n                                    }\n                                }, {\n                                    type: ej2_ribbon_1.RibbonItemType.CheckBox,\n                                    checkBoxSettings: {\n                                        label: 'Navigation Pane',\n                                        checked: true,\n                                        change: function () { updateContent(\"Navigation Pane\"); }\n                                    }\n                                }]\n                        }]\n                }, {\n                    header: 'Dark Mode',\n                    isCollapsible: false,\n                    collections: [{\n                            items: [{\n                                    type: ej2_ribbon_1.RibbonItemType.Button,\n                                    allowedSizes: ej2_ribbon_1.RibbonItemSize.Large,\n                                    buttonSettings: {\n                                        iconCss: 'sf-icon-mode',\n                                        content: 'Dark Mode',\n                                        clicked: function () { updateContent(\"Dark Mode\"); }\n                                    }\n                                }]\n                        }]\n                }]\n        }];\n    var list = new ej2_lists_1.ListView({\n        showHeader: true,\n        headerTitle: 'Insert Picture From',\n        dataSource: ['This Device', 'Stock Images', 'Online Images'],\n        select: function (args) { updateContent(\"Pictures -> \" + args.text); }\n    });\n    list.appendTo('#pictureList');\n    var menuItems = [\n        { id: 'home', text: 'Home', iconCss: 'e-icons e-home', content: getBackstageContent('home') },\n        { id: 'new', text: 'New', iconCss: 'e-icons e-file-new', content: getBackstageContent('new') },\n        { id: 'open', text: 'Open', iconCss: 'e-icons e-folder-open', content: getBackstageContent('open') },\n        { separator: true },\n        { text: 'Info', content: getBackstageContent('info') },\n        { text: 'Save as', content: getBackstageContent('save') },\n        { text: 'Export', content: getBackstageContent('export') },\n        { text: 'Print', backStageItemClick: backstageClickHandler },\n        { text: 'Share', content: getBackstageContent('share') },\n        { separator: true, isFooter: true },\n        { text: 'Account', isFooter: true, content: getBackstageContent('account') },\n        { text: 'Feedback', isFooter: true, content: getBackstageContent('feedback') }\n    ];\n    var ribbon = new ej2_ribbon_1.Ribbon({\n        tabs: tabs,\n        launcherIconClick: function (args) {\n            if (args.groupId == \"clipboard\") {\n                updateContent(\"Clipboard LauncherIcon\");\n            }\n            else if (args.groupId == \"illustration\") {\n                updateContent(\"Illustration LauncherIcon\");\n            }\n            else if (args.groupId == \"header_footer\") {\n                updateContent(\"Header & Footer LauncherIcon\");\n            }\n        },\n        backStageMenu: {\n            text: 'File',\n            visible: true,\n            items: menuItems,\n            backButton: {\n                text: 'Close',\n            }\n        }\n    });\n    ribbon.appendTo(\"#ribbon\");\n    var toast = new ej2_notifications_1.Toast({\n        target: '#ribbonPlaceHolder',\n        cssClass: 'e-toast-info',\n        height: 25,\n        width: 'auto',\n        timeOut: 2000,\n        newestOnTop: true,\n        animation: { show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } },\n        position: { X: \"Right\" },\n        showCloseButton: true\n    });\n    toast.appendTo('#toast');\n    var isBackstageOpened = false;\n    function handleClickInsideBackstageContent(e) {\n        e.stopPropagation();\n        var cName = e.target.className;\n        if (cName !== \"section-title\" && cName !== \"home-wrapper\" && cName !== \"new-wrapper\" && cName !== \"block-wrapper\" && cName !== \"e-ribbon-backstage-content\") {\n            ribbon.ribbonBackstageModule.hideBackstage();\n            toast.show({ content: 'Backstage content is interacted and closed.' });\n            ribbon.element.querySelector('.e-ribbon-backstage-content').removeEventListener('click', handleClickInsideBackstageContent);\n        }\n    }\n    if (!isBackstageOpened) {\n        ribbon.element.querySelector('.e-ribbon-backstage').addEventListener('click', function () {\n            isBackstageOpened = true;\n            ribbon.element.querySelector('.e-ribbon-backstage-content').addEventListener('click', handleClickInsideBackstageContent);\n        });\n    }\n    function backstageClickHandler() {\n        ribbon.ribbonBackstageModule.hideBackstage();\n        toast.show({ content: 'Print action is selected' });\n    }\n    function updateContent(args) {\n        toast.show({ content: \"Last clicked item is \" + args });\n    }\n    var isPasteDisabled = true;\n    function enablePaste() {\n        if (!isPasteDisabled) {\n            return;\n        }\n        ribbon.enableItem('pastebtn');\n        isPasteDisabled = false;\n    }\n    function getBackstageContent(item) {\n        var homeContentTemplate = \"\\n        <div class=\\\"home-wrapper\\\">\\n            {{newSection}}\\n            {{recentSection}}\\n        </div>\";\n        var newSection = \"\\n        <div class='new-wrapper'>\\n            <div class=\\\"section-title\\\"> New </div>\\n            <div class=\\\"category_container\\\">\\n                <div class=\\\"doc_category_image\\\"></div> <span class=\\\"doc_category_text\\\"> New document </span>\\n            </div>\\n        </div>\";\n        var recentSection = \"\\n        <div class=\\\"block-wrapper\\\">\\n            <div class=\\\"section-title\\\"> Recent </div>\\n            {{recentWrapper}}\\n        </div>\";\n        var recentWrapper = \"\\n        <div class=\\\"section-content\\\">\\n            <table>\\n                <tbody>\\n                    <tr>\\n                        <td> <span class=\\\"doc_icon e-icons {{icon}}\\\"></span> </td>\\n                        <td> \\n                            <span style=\\\"display: block; font-size: 14px\\\"> {{title}} </span>\\n                            <span style=\\\"font-size: 12px\\\"> {{description}} </span>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\";\n        var blockSection = \"<div class='block-wrapper'> <div class='section-title'> {{blockTitle}} </div> {{blockSection}} </div>\";\n        var content = \"\";\n        switch (item) {\n            case 'home': {\n                var recentDocUpdatedString_1 = \"\";\n                data['recentDocuments'].slice(0, 3).forEach(function (doc) { return recentDocUpdatedString_1 += recentWrapper.replace(/{{icon}}/g, 'e-notes').replace(/{{title}}/g, doc.fileName).replace(/{{description}}/g, doc.location); });\n                var updatedRecentSection = recentSection.replace(/{{recentWrapper}}/g, recentDocUpdatedString_1);\n                content = homeContentTemplate.replace(/{{newSection}}/g, newSection).replace(/{{recentSection}}/g, updatedRecentSection);\n                break;\n            }\n            case 'new': {\n                content = newSection;\n                break;\n            }\n            case 'open': {\n                var recentDocUpdatedString_2 = \"\";\n                data['recentDocuments'].forEach(function (doc) { return recentDocUpdatedString_2 += recentWrapper.replace(/{{icon}}/g, 'e-notes').replace(/{{title}}/g, doc.fileName).replace(/{{description}}/g, doc.location); });\n                content = recentSection.replace(/{{recentWrapper}}/g, recentDocUpdatedString_2);\n                break;\n            }\n            default:\n                var infoUpdatedString_1 = \"\";\n                data['dataOptions'][item].forEach(function (doc) { return infoUpdatedString_1 += recentWrapper.replace(/{{icon}}/g, doc.icon).replace(/{{title}}/g, doc.title).replace(/{{description}}/g, doc.description); });\n                content = blockSection.replace(/{{blockSection}}/g, infoUpdatedString_1).replace(/{{blockTitle}}/g, (item.charAt(0).toUpperCase() + item.slice(1)));\n                break;\n        }\n        return content;\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/ribbon/backstage/index.ts?");

/***/ })

/******/ });