/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/avoid-connector-overlap/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/avoid-connector-overlap/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/avoid-connector-overlap/index.ts":
/*!**********************************************************!*\
  !*** ./samples/diagram/avoid-connector-overlap/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.LineRouting, ej2_diagrams_1.AvoidLineOverlapping, ej2_diagrams_1.ConnectorEditing, ej2_diagrams_1.Snapping);\n    var diagram;\n    var nodes = [];\n    var connectors = [];\n    function initDiagramModel() {\n        create1to16Node('node1', 205, 180, 80, 240);\n        create1to16Node('node2', 205, 427.5, 80, 240);\n        create9to5Node('node3', 415, 127.5, 100, 135);\n        create9to5Node('node4', 415, 367.5, 100, 135);\n        create9to5Node('node5', 615, 127.5, 100, 135);\n        create9to5Node('node6', 615, 367.5, 100, 135);\n        create16to1Node('node7', 820, 240, 80, 240);\n        createInputNode('node8', 70, 40, 80, 30, 'Cin');\n        createInputNode('node9', 70, 180, 80, 30, 'A');\n        createInputNode('node10', 70, 427.5, 80, 30, 'B');\n        createOutputNode('node11', 950, 240, 80, 30, 'S');\n        createOutputNode('node12', 950, 367.5, 80, 30, 'Cout');\n        createConnector('connector01', 'node8', 'node3', 0, 8, 'lightGreen');\n        createConnector('connector02', 'node9', 'node1', 0, 0, 'orange');\n        createConnector('connector03', 'node10', 'node2', 0, 0, 'orange');\n        createConnector('connector04', 'node7', 'node11', 0, 0, 'orange');\n        createConnector('connector05', 'node6', 'node12', 4, 0);\n        createConnector('connector06', 'node3', 'node5', 4, 8);\n        createConnector('connector07', 'node5', 'node4', 4, 8, 'lightGreen');\n        createConnector('connector08', 'node4', 'node6', 4, 8);\n        createConnector('connector1', 'node1', 'node3', 0, 0);\n        createConnector('connector2', 'node1', 'node3', 1, 1);\n        createConnector('connector3', 'node1', 'node3', 2, 2);\n        createConnector('connector4', 'node1', 'node3', 3, 3);\n        createConnector('connector5', 'node1', 'node5', 4, 0, 'lightGreen');\n        createConnector('connector6', 'node1', 'node5', 5, 1);\n        createConnector('connector7', 'node1', 'node5', 6, 2);\n        createConnector('connector8', 'node1', 'node5', 7, 3, 'lightGreen');\n        createConnector('connector9', 'node1', 'node4', 8, 0, 'lightGreen');\n        createConnector('connector10', 'node1', 'node4', 9, 1, 'lightGreen');\n        createConnector('connector11', 'node1', 'node4', 10, 2);\n        createConnector('connector12', 'node1', 'node4', 11, 3, 'lightGreen');\n        createConnector('connector13', 'node1', 'node6', 12, 0);\n        createConnector('connector14', 'node1', 'node6', 13, 1, 'lightGreen');\n        createConnector('connector15', 'node1', 'node6', 14, 2, 'lightGreen');\n        createConnector('connector16', 'node1', 'node6', 15, 3);\n        createConnector('connector17', 'node2', 'node3', 0, 4, 'lightGreen');\n        createConnector('connector18', 'node2', 'node3', 1, 5, 'lightGreen');\n        createConnector('connector19', 'node2', 'node3', 2, 6);\n        createConnector('connector20', 'node2', 'node3', 3, 7);\n        createConnector('connector25', 'node2', 'node4', 8, 4);\n        createConnector('connector26', 'node2', 'node4', 9, 5, 'lightGreen');\n        createConnector('connector27', 'node2', 'node4', 10, 6);\n        createConnector('connector28', 'node2', 'node4', 11, 7);\n        createConnector('connector24', 'node2', 'node5', 7, 7, 'lightGreen');\n        createConnector('connector23', 'node2', 'node5', 6, 6, 'lightGreen');\n        createConnector('connector22', 'node2', 'node5', 5, 5, 'lightGreen');\n        createConnector('connector21', 'node2', 'node5', 4, 4, 'lightGreen');\n        createConnector('connector29', 'node2', 'node6', 12, 4, 'lightGreen');\n        createConnector('connector30', 'node2', 'node6', 13, 5);\n        createConnector('connector31', 'node2', 'node6', 14, 6);\n        createConnector('connector32', 'node2', 'node6', 15, 7);\n        createConnector('connector33', 'node3', 'node7', 0, 0);\n        createConnector('connector34', 'node3', 'node7', 1, 1);\n        createConnector('connector35', 'node3', 'node7', 2, 2, 'lightGreen');\n        createConnector('connector36', 'node3', 'node7', 3, 3);\n        createConnector('connector37', 'node5', 'node7', 0, 4);\n        createConnector('connector38', 'node5', 'node7', 1, 5);\n        createConnector('connector39', 'node5', 'node7', 2, 6);\n        createConnector('connector40', 'node5', 'node7', 3, 7, 'lightGreen');\n        createConnector('connector41', 'node4', 'node7', 0, 8);\n        createConnector('connector42', 'node4', 'node7', 1, 9);\n        createConnector('connector43', 'node4', 'node7', 2, 10, 'lightGreen');\n        createConnector('connector44', 'node4', 'node7', 3, 11);\n        createConnector('connector45', 'node6', 'node7', 0, 12);\n        createConnector('connector46', 'node6', 'node7', 1, 13);\n        createConnector('connector47', 'node6', 'node7', 2, 14);\n        createConnector('connector48', 'node6', 'node7', 3, 15, 'lightGreen');\n    }\n    function create1to16Node(id, x, y, width, height) {\n        var node = createNode(id, x, y, width, height);\n        addShape(node, 1, 16);\n        addPorts(node, 1, 'in');\n        addPorts(node, 16, 'out');\n        addPortsLabels(node, 16, 'out');\n    }\n    function create16to1Node(id, x, y, width, height) {\n        var node = createNode(id, x, y, width, height);\n        addShape(node, 16, 1);\n        addPorts(node, 16, 'in');\n        addPorts(node, 1, 'out');\n        addPortsLabels(node, 16, 'in');\n    }\n    function create9to5Node(id, x, y, width, height) {\n        var leftLabels = ['A_0', 'A_1', 'A_2', 'A_3', 'B_0', 'B_1', 'B_2', 'B_3', 'Cin'];\n        var rightLabels = ['S_0', 'S_1', 'S_2', 'S_3', 'Cout'];\n        var node = createNode(id, x, y, width, height, '4 Bit\\nRCA');\n        addShape(node, 9, 5);\n        addPorts(node, 9, 'in');\n        addPorts(node, 5, 'out', 9);\n        addPortsLabels(node, 9, 'in', leftLabels);\n        addPortsLabels(node, 5, 'out', rightLabels, 9);\n    }\n    function createInputNode(id, x, y, width, height, label) {\n        var node = createNode(id, x, y, width, height, label);\n        addShape(node, 0, 1);\n        addPorts(node, 1, 'out');\n        var annotation = node.annotations[0];\n        annotation.offset = { x: (width - 25) / (2 * width), y: 0.5 };\n    }\n    function createOutputNode(id, x, y, width, height, label) {\n        var node = createNode(id, x, y, width, height, label);\n        addShape(node, 1, 0);\n        addPorts(node, 1, 'in');\n        var annotation = node.annotations[0];\n        annotation.offset = { x: 1 - ((width - 25) / (2 * width)), y: 0.5 };\n    }\n    function addShape(node, inCount, outCount) {\n        var maxCount = Math.max(inCount, outCount);\n        var rightX = outCount === 0 ? node.width : node.width - 25;\n        var pathData = \"M \".concat(rightX, \" 0 \");\n        if (outCount > 1) {\n            for (var i = 1; i <= outCount; i++) {\n                var portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n                pathData += \"L \".concat(rightX, \" \").concat(portY, \" L \").concat(node.width, \" \").concat(portY, \" L \").concat(rightX, \" \").concat(portY, \" \");\n            }\n        }\n        else if (outCount === 1) {\n            pathData += \"L \".concat(rightX, \" \").concat(node.height * 0.5, \" L \").concat(node.width, \" \").concat(node.height * 0.5, \" L \").concat(rightX, \" \").concat(node.height * 0.5, \" \");\n        }\n        var leftX = inCount === 0 ? 0 : 25;\n        pathData += \"L \".concat(rightX, \" \").concat(node.height, \" L \").concat(leftX, \" \").concat(node.height, \" \");\n        if (inCount > 1) {\n            for (var i = inCount; i >= 1; i--) {\n                var portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n                pathData += \"L \".concat(leftX, \" \").concat(portY, \" L 0 \").concat(portY, \" L \").concat(leftX, \" \").concat(portY, \" \");\n            }\n        }\n        else if (inCount === 1) {\n            pathData += \"L \".concat(leftX, \" \").concat(node.height * 0.5, \" L 0 \").concat(node.height * 0.5, \" L \").concat(leftX, \" \").concat(node.height * 0.5, \" \");\n        }\n        pathData += \"L \".concat(leftX, \" 0 Z\");\n        node.shape = { type: 'Path', data: pathData };\n    }\n    function addPorts(node, count, side, factor) {\n        if (factor === undefined) {\n            factor = count;\n        }\n        if (count > 1) {\n            for (var i = 1; i <= count; i++) {\n                var port = {\n                    id: \"\".concat(node.id, \"_\").concat(side, \"_\").concat((i - 1)),\n                    offset: { x: side === 'out' ? 1 : 0, y: (i / factor) - (1 / (2 * factor)) },\n                    visibility: ej2_diagrams_1.PortVisibility.Visible,\n                    shape: 'Circle',\n                    style: { fill: 'black' },\n                    width: 8,\n                    height: 8\n                };\n                node.ports.push(port);\n            }\n        }\n        else {\n            var port = {\n                id: \"\".concat(node.id, \"_\").concat(side, \"_0\"),\n                offset: { x: side === 'out' ? 1 : 0, y: 0.5 },\n                visibility: ej2_diagrams_1.PortVisibility.Visible,\n                shape: 'Circle',\n                style: { fill: 'black' },\n                width: 8,\n                height: 8\n            };\n            node.ports.push(port);\n        }\n    }\n    function addPortsLabels(node, count, side, labels, factor) {\n        if (factor === undefined) {\n            factor = count;\n        }\n        var x = side === 'out' ? (node.width - 25 * 0.5) / node.width : (25 * 0.5) / node.width;\n        for (var i = 1; i <= count; i++) {\n            var label = {\n                content: labels ? labels[i - 1] : \"\".concat(i - 1),\n                offset: { x: x, y: (i / factor) - (1 / (2 * factor)) },\n                style: { fontSize: 7 },\n                verticalAlignment: 'Bottom',\n                margin: { bottom: 2 }\n            };\n            node.annotations.push(label);\n        }\n    }\n    function createNode(id, x, y, width, height, label) {\n        var shapeStyle = { strokeColor: \"black\", strokeWidth: 2 };\n        var diagramNode = {\n            id: id,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n            height: height,\n            style: shapeStyle,\n            shape: { type: 'Basic' },\n            ports: [],\n            annotations: []\n        };\n        if (label) {\n            var annotation = { content: label, style: { fontSize: 14 } };\n            diagramNode.annotations.push(annotation);\n        }\n        nodes.push(diagramNode);\n        return diagramNode;\n    }\n    function createConnector(id, sourceId, targetId, sourcePortIndex, targetPortIndex, strokeColor) {\n        if (strokeColor === void 0) { strokeColor = null; }\n        var color = strokeColor ? strokeColor : \"green\";\n        if (color === 'lightGreen') {\n            color = '#1AD81A';\n        }\n        else if (color === 'green') {\n            color = '#005100';\n        }\n        var diagramConnector = {\n            id: id,\n            cornerRadius: 5,\n            sourceID: sourceId,\n            targetID: targetId,\n            sourcePortID: sourceId + '_out_' + sourcePortIndex,\n            targetPortID: targetId + '_in_' + targetPortIndex,\n            type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', direction: 'Left', length: 25 }, { type: 'Orthogonal' }],\n            style: { strokeColor: color, strokeWidth: 2 },\n            targetDecorator: { shape: 'None' }\n        };\n        connectors.push(diagramConnector);\n    }\n    initDiagramModel();\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '700px',\n        nodes: nodes, connectors: connectors,\n        tool: ej2_diagrams_1.DiagramTools.ZoomPan,\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        constraints: ej2_diagrams_1.DiagramConstraints.Default | ej2_diagrams_1.DiagramConstraints.LineRouting | ej2_diagrams_1.DiagramConstraints.AvoidLineOverlapping,\n        created: created\n    });\n    diagram.appendTo('#diagram');\n    function created() {\n        diagram.fitToPage();\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/avoid-connector-overlap/index.ts?");

/***/ })

/******/ });