/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/scrolling/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/scrolling/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/scrolling/index.ts":
/*!********************************************!*\
  !*** ./samples/diagram/scrolling/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! ./script/diagram-common */ \"./samples/diagram/scrolling/script/diagram-common.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_dropdowns_1, ej2_diagrams_2, ej2_inputs_1, ej2_buttons_1, diagram_common_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    var diagram;\n    var basicShapes = [\n        {\n            id: 'rectangle', shape: { type: 'Basic', shape: 'Rectangle' }\n        },\n        {\n            id: 'ellipse', shape: { type: 'Basic', shape: 'Ellipse' }\n        },\n        {\n            id: 'triangle', shape: { type: 'Basic', shape: 'Triangle' }\n        },\n        {\n            id: 'plus', shape: { type: 'Basic', shape: 'Plus' }\n        },\n        {\n            id: 'star', shape: { type: 'Basic', shape: 'Star' }\n        },\n        {\n            id: 'pentagon', shape: { type: 'Basic', shape: 'Pentagon' }\n        },\n        {\n            id: 'heptagon', shape: { type: 'Basic', shape: 'Heptagon' }\n        },\n        {\n            id: 'octagon', shape: { type: 'Basic', shape: 'Octagon' }\n        },\n        {\n            id: 'trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' }\n        },\n        {\n            id: 'decagon', shape: { type: 'Basic', shape: 'Decagon' }\n        },\n        {\n            id: 'rightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' }\n        },\n        {\n            id: 'parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' }\n        },\n    ];\n    var flowShapes = [\n        { id: 'terminator1', shape: { type: 'Flow', shape: 'Terminator' } },\n        { id: 'process1', shape: { type: 'Flow', shape: 'Process' } },\n        { id: 'extract1', shape: { type: 'Flow', shape: 'Extract' } },\n        { id: 'manualOperation1', shape: { type: 'Flow', shape: 'ManualOperation' } },\n        { id: 'merge1', shape: { type: 'Flow', shape: 'Merge' } },\n        { id: 'offPageReference1', shape: { type: 'Flow', shape: 'OffPageReference' } },\n        { id: 'sequentialAccessStorage1', shape: { type: 'Flow', shape: 'SequentialAccessStorage' } },\n        { id: 'annotation1', shape: { type: 'Flow', shape: 'Annotation' } },\n        { id: 'annotation2', shape: { type: 'Flow', shape: 'Annotation2' } },\n        { id: 'data1', shape: { type: 'Flow', shape: 'Data' } },\n        { id: 'summingJunction1', shape: { type: 'Flow', shape: 'SummingJunction' } },\n        { id: 'or1', shape: { type: 'Flow', shape: 'Or' } },\n        { id: 'internalStorage1', shape: { type: 'Flow', shape: 'InternalStorage' } },\n        { id: 'card1', shape: { type: 'Flow', shape: 'Card' } },\n        { id: 'delay1', shape: { type: 'Flow', shape: 'Delay' } },\n        { id: 'decision1', shape: { type: 'Flow', shape: 'Decision' } },\n        { id: 'document1', shape: { type: 'Flow', shape: 'Document' } },\n        { id: 'preDefinedProcess1', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n        { id: 'paperTap1', shape: { type: 'Flow', shape: 'PaperTap' } },\n        { id: 'directData1', shape: { type: 'Flow', shape: 'DirectData' } },\n        { id: 'sequentialData1', shape: { type: 'Flow', shape: 'SequentialData' } },\n        { id: 'sort1', shape: { type: 'Flow', shape: 'Sort' } },\n        { id: 'multiDocument1', shape: { type: 'Flow', shape: 'MultiDocument' } },\n        { id: 'collate1', shape: { type: 'Flow', shape: 'Collate' } },\n    ];\n    var connectorSymbols = [\n        {\n            id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n        },\n        {\n            id: 'straight', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n        },\n        {\n            id: 'Orthogonal', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'bezier', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n    ];\n    var scrollLimitDatasource = [\n        { text: 'Infinity', value: 'Infinity' }, { text: 'Diagram', value: 'Diagram' },\n        { text: 'Limited', value: 'Limited' }\n    ];\n    function getConnectorDefaults(connector) {\n        setConnectorStyles(connector, '#757575');\n        return connector;\n    }\n    function setConnectorStyles(connector, color) {\n        connector.style.strokeWidth = 1;\n        connector.style.strokeColor = color;\n        connector.targetDecorator.style.fill = color;\n        connector.targetDecorator.style.strokeColor = color;\n    }\n    var scrollableArea = new ej2_diagrams_2.Rect(0, 0, 1500, 1500);\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '700px',\n        rulerSettings: { showRulers: true },\n        pageSettings: { width: 1500, height: 1500 },\n        scrollSettings: {\n            scrollLimit: 'Infinity', canAutoScroll: true, autoScrollBorder: { left: 10, right: 10, top: 10, bottom: 10 },\n            scrollableArea: scrollableArea\n        },\n        getConnectorDefaults: getConnectorDefaults,\n        dragEnter: function (args) {\n            var node = args.element;\n            if (node instanceof ej2_diagrams_1.Node) {\n                var nodeWidth = node.width;\n                var nodeHeight = node.height;\n                var ratio = 100 / node.width;\n                node.width = 100;\n                node.height *= ratio;\n                node.offsetX += (node.width - nodeWidth) / 2;\n                node.offsetY += (node.height - nodeHeight) / 2;\n                node.style = { fill: '#357BD2', strokeColor: 'white' };\n                node.annotations = [{ style: { color: 'white', fill: 'transparent' } }];\n            }\n        },\n        created: function (args) {\n            var scrollElement = document.getElementById('scrollableDiv');\n            scrollElement.className = \"disabledbutton\";\n        }\n    });\n    diagram.appendTo('#diagram');\n    var palette = new ej2_diagrams_2.SymbolPalette({\n        expandMode: 'Single',\n        getNodeDefaults: function (symbol) {\n            var obj = symbol;\n            if (obj.id === 'terminator1' || obj.id === 'process1') {\n                obj.width = 80;\n                obj.height = 40;\n            }\n            else if (obj.id === 'decision1' || obj.id === 'document1' || obj.id === 'preDefinedProcess1' ||\n                obj.id === 'paperTap1' || obj.id === 'directData1' || obj.id === 'multiDocument1' || obj.id === 'data1') {\n                obj.width = 50;\n                obj.height = 40;\n            }\n            else {\n                obj.width = 50;\n                obj.height = 50;\n            }\n            obj.style.strokeColor = '#757575';\n        },\n        palettes: [\n            { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n            { id: 'flow', expanded: false, symbols: flowShapes, iconCss: 'e-ddb-icons e-flow', title: 'Flow Shapes' },\n            { id: 'connectors', expanded: false, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n        ],\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        getConnectorDefaults: getConnectorDefaults,\n        getSymbolInfo: function (symbol) {\n            return { fit: true };\n        },\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n    });\n    palette.appendTo('#symbolpalette');\n    (0, diagram_common_1.addEvents)();\n    var scrollLimit = new ej2_dropdowns_1.DropDownList({\n        dataSource: scrollLimitDatasource,\n        fields: { text: 'text', value: 'value' },\n        value: 'Infinity',\n        change: function (args) {\n            var element = document.getElementById('scrollableDiv');\n            element.className = args.value === \"Limited\" ? \"\" : \"disabledbutton\";\n            diagram.scrollSettings.scrollLimit = args.value;\n        }\n    });\n    scrollLimit.appendTo('#scrollLimit');\n    var offsetXtextBox = new ej2_inputs_1.TextBox({\n        value: '10',\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.x = Number(args.value);\n        }\n    });\n    offsetXtextBox.appendTo('#x');\n    var offsetYtextBox = new ej2_inputs_1.TextBox({\n        value: '10',\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.y = Number(args.value);\n        }\n    });\n    offsetYtextBox.appendTo('#y');\n    var widthTextBox = new ej2_inputs_1.TextBox({\n        value: '1500',\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.width = Number(args.value);\n        }\n    });\n    widthTextBox.appendTo('#width');\n    var heightTextBox = new ej2_inputs_1.TextBox({\n        value: '1500',\n        change: function (args) {\n            diagram.scrollSettings.scrollableArea.height = Number(args.value);\n        }\n    });\n    heightTextBox.appendTo('#height');\n    var checkBoxObj = new ej2_buttons_1.CheckBox({\n        checked: true,\n        change: function (args) {\n            var autoScrollElement = document.getElementById('autoScrollDiv');\n            if (args.checked) {\n                autoScrollElement.className = '';\n                diagram.scrollSettings.canAutoScroll = true;\n            }\n            else {\n                autoScrollElement.className = 'disabledbutton';\n                diagram.scrollSettings.canAutoScroll = false;\n            }\n        }\n    });\n    checkBoxObj.appendTo('#checked');\n    var leftTextBox = new ej2_inputs_1.TextBox({\n        value: '30',\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.left = Number(args.value);\n        }\n    });\n    leftTextBox.appendTo('#left');\n    var rightTextBox = new ej2_inputs_1.TextBox({\n        value: '30',\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.right = Number(args.value);\n        }\n    });\n    rightTextBox.appendTo('#right');\n    var topTextBox = new ej2_inputs_1.TextBox({\n        value: '30',\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.top = Number(args.value);\n        }\n    });\n    topTextBox.appendTo('#top');\n    var bottomTextBox = new ej2_inputs_1.TextBox({\n        value: '30',\n        change: function (args) {\n            diagram.scrollSettings.autoScrollBorder.bottom = Number(args.value);\n        }\n    });\n    bottomTextBox.appendTo('#bottom');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/scrolling/index.ts?");

/***/ }),

/***/ "./samples/diagram/scrolling/script/diagram-common.ts":
/*!************************************************************!*\
  !*** ./samples/diagram/scrolling/script/diagram-common.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.openPalette = exports.addEvents = void 0;\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    exports.addEvents = addEvents;\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    exports.openPalette = openPalette;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/scrolling/script/diagram-common.ts?");

/***/ })

/******/ });