/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/tree-view/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/tree-view/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/tree-view/index.ts":
/*!********************************************!*\
  !*** ./samples/diagram/tree-view/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-data */ \"./node_modules/@syncfusion/ej2-data/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_navigations_1, ej2_buttons_1, ej2_data_1, ej2_diagrams_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.DataBinding, ej2_diagrams_1.HierarchicalTree, ej2_diagrams_2.UndoRedo);\n    var diagram;\n    var workingData = [\n        { Name: 'Plant Manager', Id: '1', hasChild: true, expanded: true },\n        {\n            Name: 'Production Manager',\n            Id: '2',\n            ParentId: '1',\n            hasChild: true,\n            expanded: true,\n        },\n        {\n            Name: 'Control Room',\n            Id: '3',\n            ParentId: '2',\n            hasChild: true,\n            expanded: true,\n        },\n        { Name: 'Foreman1', Id: '4', ParentId: '3', hasChild: true, expanded: true },\n        { Name: 'Craft Personnel5', Id: '5', ParentId: '4' },\n        { Name: 'Craft Personnel6', Id: '6', ParentId: '4' },\n        {\n            Name: 'Plant Operator',\n            Id: '7',\n            ParentId: '2',\n            hasChild: true,\n            expanded: true,\n        },\n        { Name: 'Foreman2', Id: '8', ParentId: '7', hasChild: true, expanded: true },\n        { Name: 'Craft Personnel7', Id: '9', ParentId: '8' },\n        { Name: 'Administrative Officer', Id: '10', ParentId: '1' },\n        {\n            Name: 'Maintenance Manager',\n            Id: '11',\n            ParentId: '1',\n            hasChild: true,\n            expanded: true,\n        },\n        {\n            Name: 'Electrical Supervisor',\n            Id: '12',\n            ParentId: '11',\n            hasChild: true,\n            expanded: true,\n        },\n        { Name: 'Craft Personnel1', Id: '13', ParentId: '12' },\n        { Name: 'Craft Personnel2', Id: '14', ParentId: '12' },\n        {\n            Name: 'Mechanical Supervisor',\n            Id: '15',\n            ParentId: '11',\n            hasChild: true,\n            expanded: true,\n        },\n        { Name: 'Craft Personnel3', Id: '16', ParentId: '15' },\n        { Name: 'Craft Personnel4', Id: '17', ParentId: '15' },\n    ];\n    var items = new ej2_data_1.DataManager(workingData, new ej2_data_1.Query().take(7));\n    var index = 1;\n    var deleteButton;\n    var addButton;\n    var treeObj;\n    var targetNodeId;\n    var elementNodeId;\n    function dragEnter(args) {\n        var label = '';\n        if (args.dragData) {\n            label = args.dragData.text;\n        }\n        var node = {\n            id: 'node' + index,\n            data: { Name: label, Id: 'node' + index },\n            annotations: [{ content: label }]\n        };\n        args.dragItem = node;\n    }\n    function checkData(a) {\n        return a.Id === targetNodeId;\n    }\n    function checkElementData(a) {\n        return a.Id === elementNodeId;\n    }\n    function drop(args) {\n        var connector;\n        var tempData;\n        setTimeout(function () {\n            targetNodeId = args.target.id;\n            tempData = workingData.filter(checkData);\n            if (tempData.length > 0) {\n                tempData[0].hasChild = true;\n                tempData[0].expanded = true;\n            }\n            if (args.element.inEdges.length === 0) {\n                var id = args.element.id;\n                var item = {\n                    Name: args.element.annotations[0].content, Id: args.element.id, ParentId: targetNodeId, hasChild: false, expanded: false\n                };\n                treeObj.addNodes([item], targetNodeId, null);\n                connector = { sourceID: targetNodeId, targetID: id };\n                diagram.add(connector);\n                diagram.doLayout();\n                index++;\n                workingData.push(item);\n            }\n            else {\n                connector = diagram.getObject(args.element.inEdges[0]);\n                connector.sourceID = targetNodeId;\n                diagram.dataBind();\n                diagram.doLayout();\n                elementNodeId = args.element.id;\n                tempData = workingData.filter(checkElementData);\n                tempData[0].ParentId = targetNodeId;\n                treeObj.fields = {\n                    dataSource: workingData,\n                    id: 'Id',\n                    text: 'Name',\n                    parentID: 'ParentId',\n                    hasChildren: 'hasChild',\n                };\n                treeObj.refresh();\n            }\n        }, 0);\n    }\n    function textEdit(args) {\n        setTimeout(function () {\n            if (args.annotation) {\n                elementNodeId = args.element.id;\n                var tempData = workingData.filter(checkElementData);\n                var node = treeObj.getNode(tempData[0].Id);\n                treeObj.updateNode(tempData[0].Id, args.annotation.content);\n            }\n        }, 0);\n    }\n    function nodeSelected() {\n        deleteButton.disabled = false;\n        addButton.disabled = false;\n    }\n    function nodeClicked() {\n        var node = diagram.getObject(treeObj.selectedNodes[0]);\n        diagram.select([node]);\n    }\n    function keyPress(args) {\n        if (args.event.key === 'Enter') {\n            add();\n        }\n    }\n    function nodeEdited(args) {\n        var node = diagram.getObject(args.nodeData.id);\n        node.annotations[0].content = args.newText;\n        treeObj.selectedNodes = [args.nodeData.id];\n    }\n    function remove() {\n        var nodeId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            nodeId = diagram.selectedItems.nodes[0].id;\n            removeSubChild(diagram.selectedItems.nodes[0], true);\n            diagram.doLayout();\n        }\n        else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            treeObj.removeNodes([nodeId]);\n            var node = diagram.getObject(nodeId);\n            removeSubChild(node, false);\n        }\n        for (var i = workingData.length - 1; i >= 0; i--) {\n            if (workingData[i].id === nodeId) {\n                workingData.splice(i, 1);\n            }\n        }\n        diagram.doLayout();\n    }\n    function removeSubChild(node, canDelete) {\n        var childNode;\n        var connector;\n        for (var i = node.outEdges.length - 1; i >= 0; i--) {\n            connector = diagram.getObject(node.outEdges[i]);\n            childNode = diagram.getObject(connector.targetID);\n            if (childNode != null && childNode.outEdges.length > 0) {\n                removeSubChild(childNode, canDelete);\n            }\n            else {\n                diagram.remove(childNode);\n                if (canDelete) {\n                    treeObj.removeNodes([childNode.id]);\n                }\n                for (var j = workingData.length - 1; j >= 0; j--) {\n                    if (workingData[j].id === childNode.id) {\n                        workingData.splice(j, 1);\n                    }\n                }\n            }\n        }\n        for (var k = node.inEdges.length - 1; k >= 0; k--) {\n            connector = diagram.getObject(node.inEdges[k]);\n            childNode = diagram.getObject(connector.sourceID);\n            var index_1 = childNode.outEdges.indexOf(connector.id);\n            if (childNode.outEdges.length > 1 && index_1 === 0) {\n                index_1 = childNode.outEdges.length;\n            }\n            if (index_1 > 0) {\n                var node1 = childNode.outEdges[index_1 - 1];\n                var connector1 = diagram.getObject(node1);\n                var node2 = diagram.getObject(connector1.targetID);\n                diagram.select([node2]);\n            }\n            else {\n                diagram.select([childNode]);\n            }\n        }\n        diagram.remove(node);\n        if (canDelete) {\n            treeObj.removeNodes([node.id]);\n        }\n        for (var t = workingData.length - 1; t >= 0; t--) {\n            if (workingData[t].id === node.id) {\n                workingData.splice(t, 1);\n            }\n        }\n    }\n    function add() {\n        var nodeId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            nodeId = diagram.selectedItems.nodes[0].id;\n            addNode(nodeId);\n        }\n        else if (treeObj.selectedNodes.length > 0) {\n            nodeId = treeObj.selectedNodes[0];\n            addNode(nodeId);\n        }\n    }\n    function filterNodeData(a) {\n        return a.data.Id === targetNodeId;\n    }\n    function addNode(nodeId) {\n        targetNodeId = nodeId ? nodeId : treeObj.selectedNodes[0];\n        var tempData = workingData.filter(checkData);\n        tempData[0].hasChild = true;\n        tempData[0].expanded = true;\n        var id = 'tree_' + index;\n        var item = {\n            Name: \"Node\", Id: id, ParentId: targetNodeId, hasChild: false, expanded: false\n        };\n        treeObj.addNodes([item], targetNodeId, null);\n        treeObj.beginEdit(id);\n        var node = { id: id, data: item };\n        var targetId;\n        if (diagram.selectedItems.nodes.length > 0) {\n            targetId = diagram.selectedItems.nodes[0].id;\n        }\n        else {\n            var temp = diagram.nodes.filter(filterNodeData);\n            targetId = temp[0].id;\n        }\n        var connector = { sourceID: targetId, targetID: id };\n        diagram.add(node);\n        diagram.add(connector);\n        diagram.doLayout();\n        index++;\n        workingData.push(item);\n    }\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '700px', snapSettings: { constraints: ej2_diagrams_2.SnapConstraints.None },\n        dataSourceSettings: {\n            id: 'Id',\n            parentId: 'ParentId',\n            dataSource: items,\n            doBinding: function (nodeModel, data, diagram) {\n                nodeModel.id = data.Id;\n            },\n        },\n        layout: {\n            type: 'HierarchicalTree', verticalSpacing: 50, horizontalSpacing: 40,\n            enableAnimation: true\n        },\n        getNodeDefaults: function (node) {\n            node.width = 100;\n            node.height = 40;\n            node.style = { strokeWidth: 1, strokeColor: 'whitesmoke', fill: 'CornflowerBlue' };\n            node.annotations = [{ content: node.data.Name, style: { color: 'white' } }];\n            node.constraints = ej2_diagrams_2.NodeConstraints.Default | ej2_diagrams_2.NodeConstraints.AllowDrop;\n            return node;\n        },\n        getConnectorDefaults: function (obj) {\n            obj.type = 'Orthogonal';\n            obj.style = { strokeColor: 'CornflowerBlue' };\n            obj.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n        },\n        selectionChange: function (args) {\n            if (args.state === 'Changed') {\n                if (args.type === \"Addition\") {\n                    deleteButton.disabled = false;\n                    addButton.disabled = false;\n                }\n                else {\n                    deleteButton.disabled = true;\n                    addButton.disabled = true;\n                }\n                var selectedItems = diagram.selectedItems.nodes.concat(diagram.selectedItems.connectors);\n                if (selectedItems.length == 0) {\n                    treeObj.selectedNodes = [];\n                }\n            }\n        },\n        click: function (args) {\n            if (args.element.propName === \"nodes\") {\n                treeObj.selectedNodes = [args.element.data.Id];\n            }\n        },\n        textEdit: textEdit,\n        dragEnter: dragEnter,\n        drop: drop\n    });\n    diagram.appendTo('#diagram');\n    addButton = new ej2_buttons_1.Button({ isPrimary: true, disabled: true });\n    addButton.appendTo('#addButton');\n    deleteButton = new ej2_buttons_1.Button({ isPrimary: true, disabled: true });\n    deleteButton.appendTo('#deleteButton');\n    document.getElementById('addButton').onclick = function () {\n        add();\n    };\n    document.getElementById('deleteButton').onclick = function () {\n        if (diagram.selectedItems.nodes[0].data.Id !== \"1\") {\n            remove();\n        }\n    };\n    treeObj = new ej2_navigations_1.TreeView({\n        fields: {\n            dataSource: workingData,\n            id: 'Id',\n            text: 'Name',\n            parentID: 'ParentId',\n            hasChildren: 'hasChild',\n        },\n        allowEditing: true,\n        keyPress: keyPress,\n        nodeEdited: nodeEdited,\n        nodeSelected: nodeSelected,\n        allowDragAndDrop: true,\n        nodeClicked: nodeClicked\n    });\n    treeObj.appendTo('#tree');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/tree-view/index.ts?");

/***/ })

/******/ });