/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/port/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/port/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/port/index.ts":
/*!***************************************!*\
  !*** ./samples/diagram/port/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_dropdowns_1, ej2_dropdowns_2, ej2_inputs_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_dropdowns_2.MultiSelect.Inject(ej2_dropdowns_2.CheckBoxSelection);\n    function createNode(id, offsetX, offsetY, annotationContent, ports) {\n        return {\n            id: id,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            annotations: [{ content: annotationContent }],\n            ports: ports\n        };\n    }\n    function createConnector(id, sourceID, sourcePortID, targetID, targetPortID) {\n        return {\n            id: id,\n            sourceID: sourceID,\n            sourcePortID: sourcePortID,\n            targetID: targetID,\n            targetPortID: targetPortID\n        };\n    }\n    function createPort(id, shape, offsetX, offsetY, text) {\n        return {\n            id: id,\n            shape: shape,\n            offset: { x: offsetX, y: offsetY },\n            height: 8,\n            width: 8,\n            visibility: ej2_diagrams_1.PortVisibility.Visible,\n            text: text\n        };\n    }\n    var node1Port = [\n        createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n        createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n        createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n        createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n    ];\n    var node2Port = [\n        createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n        createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n        createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n    ];\n    var node3Port = [\n        createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n        createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n    ];\n    var node4Port = [\n        createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n        createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n        createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n    ];\n    var node5Port = [\n        createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n        createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n    ];\n    var node6Port = [\n        createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n        createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n    ];\n    var node7Port = [\n        createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n        createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n    ];\n    var bounds = document.getElementsByClassName('control-section')[0].getBoundingClientRect();\n    var centerX = bounds.width / 2;\n    var nodes = [\n        createNode('node1', centerX - 200, 100, 'Publisher', node1Port),\n        createNode('node2', centerX, 100, 'Completed Book', node2Port),\n        createNode('node3', centerX, 200, '1st Review', node3Port),\n        createNode('node4', centerX, 300, 'Legal Terms', node4Port),\n        createNode('node5', centerX, 400, '2nd Review', node5Port),\n        createNode('node6', centerX + 200, 100, 'Board', node6Port),\n        createNode('node7', centerX + 200, 200, 'Approval', node7Port)\n    ];\n    var connectors = [\n        createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n        createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n        createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n        createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n        createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n        createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n        createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n        createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n        createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n        createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n        createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n    ];\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: 580,\n        nodes: nodes, connectors: connectors, selectionChange: onSelectionChange,\n        snapSettings: { constraints: 0 },\n        getNodeDefaults: function (node) {\n            if (node.id === \"node1\" || node.id === \"node2\" ||\n                node.id === \"node4\" || node.id === \"node6\") {\n                node.shape = { type: \"Basic\", shape: \"Rectangle\" };\n            }\n            else if (node.id === \"node3\" || node.id === \"node5\" ||\n                node.id === \"node7\") {\n                node.shape = { type: \"Basic\", shape: \"Diamond\" };\n            }\n            node.height = 65;\n            node.width = 100;\n            node.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\n            node.ports.forEach(function (port) {\n                port.style = {\n                    fill: \"#366f8c\",\n                    strokeColor: \"#366f8c\"\n                };\n                port.width = 6;\n                port.height = 6;\n            });\n            node.annotations[0].style = {\n                bold: true,\n                fontSize: 13,\n                color: \"black\"\n            };\n        },\n        getConnectorDefaults: function (connector) {\n            connector.type = 'Orthogonal';\n            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };\n            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };\n        },\n    });\n    diagram.appendTo('#diagram');\n    var visibility = [\n        { PortVisibility: ej2_diagrams_1.PortVisibility.Visible, text: \"Visible\" },\n        { PortVisibility: ej2_diagrams_1.PortVisibility.Hidden, text: \"Hidden\" },\n        { PortVisibility: ej2_diagrams_1.PortVisibility.Hover, text: \"Hover\" },\n        { PortVisibility: ej2_diagrams_1.PortVisibility.Connect, text: \"Connect\" }\n    ];\n    var portVisibilityDrop = new ej2_dropdowns_1.DropDownList({\n        enabled: true, dataSource: visibility,\n        fields: { value: 'PortVisibility', text: 'text' },\n        value: 'Visible',\n        change: onPortVisibilityChange,\n    });\n    portVisibilityDrop.appendTo('#portsVisiblity');\n    var portFillColor = new ej2_inputs_1.ColorPicker({\n        value: '#000', disabled: false, change: function (arg) {\n            var port = getSelectedPort();\n            for (var j = 0; j < port.length; j++) {\n                port[j].style.fill = arg.currentValue.rgba;\n            }\n        }\n    });\n    portFillColor.appendTo('#fill');\n    var portBorderColor = new ej2_inputs_1.ColorPicker({\n        value: '#000', disabled: false, change: function (arg) {\n            var port = getSelectedPort();\n            for (var j = 0; j < port.length; j++) {\n                port[j].style.strokeColor = arg.currentValue.rgba;\n            }\n        }\n    });\n    portBorderColor.appendTo('#border');\n    var shape = [\n        { shape: 'X', text: 'X' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Custom', text: 'Custom' }\n    ];\n    var portShapeDrop = new ej2_dropdowns_1.DropDownList({\n        enabled: true, placeholder: 'Select a Shape', value: 'Circle',\n        dataSource: shape, fields: { value: 'shape', text: 'text' },\n        change: onPortShapeChange\n    });\n    portShapeDrop.appendTo('#shape');\n    var portSizeNum = new ej2_inputs_1.NumericTextBox({\n        enabled: true, format: '###.##',\n        value: 6, min: 1, step: 1,\n        change: function (args) {\n            applyPortStyle('size');\n        }\n    });\n    portSizeNum.appendTo('#size');\n    var portWidthNum = new ej2_inputs_1.NumericTextBox({\n        enabled: true, format: '###.##',\n        value: 1, step: 0.5, min: 0,\n        change: function (args) {\n            applyPortStyle('strokewidth');\n        }\n    });\n    portWidthNum.appendTo('#width');\n    diagram.select([diagram.nodes[0]]);\n    function getSelectedPort() {\n        var node = diagram.selectedItems.nodes[0];\n        var ports = node.ports;\n        return ports;\n    }\n    function onSelectionChange(args) {\n        if (args.state === 'Changed') {\n            var propertypanelInstance = document.getElementById('propertypanel');\n            var selectedElement = document.getElementsByClassName('e-remove-selection');\n            if (args.newValue) {\n                if (!propertypanelInstance.classList.contains('e-remove-selection')) {\n                    propertypanelInstance.classList.add('e-remove-selection');\n                }\n                if (args.newValue[0] instanceof ej2_diagrams_1.Node && selectedElement.length) {\n                    selectedElement[0].classList.remove('e-remove-selection');\n                    var port = getSelectedPort()[0];\n                    portVisibilityDrop.value = port.visibility;\n                    portVisibilityDrop.dataBind();\n                    portFillColor.value = port.style.fill;\n                    portFillColor.dataBind();\n                    portBorderColor.value = port.style.strokeColor;\n                    portBorderColor.dataBind();\n                    portShapeDrop.value = port.shape;\n                    portShapeDrop.dataBind();\n                    portSizeNum.value = port.height;\n                    portSizeNum.dataBind();\n                    portWidthNum.value = port.style.strokeWidth;\n                    portWidthNum.dataBind();\n                }\n            }\n        }\n    }\n    function applyPortStyle(value) {\n        var port = getSelectedPort();\n        for (var j = 0; j < port.length; j++) {\n            if (value === 'size' && portSizeNum) {\n                port[j].height = portSizeNum.value;\n                port[j].width = portSizeNum.value;\n            }\n            else if (value === 'strokewidth' && portWidthNum) {\n                port[j].style.strokeWidth = portWidthNum.value;\n            }\n        }\n        diagram.dataBind();\n    }\n    function onPortVisibilityChange(args) {\n        var port = getSelectedPort();\n        if (port) {\n            for (var j = 0; j < port.length; j++) {\n                port[j].visibility = portVisibilityDrop.value;\n                diagram.dataBind();\n            }\n        }\n    }\n    function onPortShapeChange(args) {\n        var port = getSelectedPort();\n        for (var j = 0; j < port.length; j++) {\n            switch (portShapeDrop.value) {\n                case 'X':\n                    port[j].shape = 'X';\n                    break;\n                case 'Circle':\n                    port[j].shape = 'Circle';\n                    break;\n                case 'Square':\n                    port[j].shape = 'Square';\n                    break;\n                case 'Custom':\n                    port[j].shape = 'Custom';\n                    port[j].pathData = 'M6.805,0L13.61,10.703L0,10.703z';\n                    break;\n            }\n            diagram.dataBind();\n        }\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/port/index.ts?");

/***/ })

/******/ });