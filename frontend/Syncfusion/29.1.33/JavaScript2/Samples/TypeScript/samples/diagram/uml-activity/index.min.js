/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/uml-activity/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/uml-activity/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/uml-activity/index.ts":
/*!***********************************************!*\
  !*** ./samples/diagram/uml-activity/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! ./script/diagram-common */ \"./samples/diagram/uml-activity/script/diagram-common.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, diagram_common_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.UndoRedo, ej2_diagrams_1.DiagramContextMenu);\n    var diagram;\n    var palette;\n    var isMobile;\n    var umlActivityShapes = [\n        'Action', 'Decision', 'MergeNode', 'InitialNode', 'FinalNode', 'ForkNode',\n        'JoinNode', 'TimeEvent', 'AcceptingEvent', 'SendSignal', 'ReceiveSignal',\n        'StructuredNode', 'Note'\n    ].map(function (shape) { return ({ id: shape, shape: { type: 'UmlActivity', shape: shape } }); });\n    var baseConnector = {\n        sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n        targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n        style: { strokeWidth: 2, strokeColor: '#757575' }\n    };\n    var connectorSymbols = [\n        __assign(__assign({}, baseConnector), { id: 'Link1', type: 'Orthogonal' }),\n        __assign(__assign({}, baseConnector), { id: 'Link2', type: 'Orthogonal', style: __assign(__assign({}, baseConnector.style), { strokeDashArray: '4 4' }) }),\n        __assign(__assign({}, baseConnector), { id: 'Link3', type: 'Straight' })\n    ];\n    function getNodePorts(node) {\n        if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n            var node2Ports = [\n                { id: 'port1', offset: { x: 0.2, y: 1 } },\n                { id: 'port2', offset: { x: 0.8, y: 1 } },\n                { id: 'port3', offset: { x: 0.2, y: 0 } },\n                { id: 'port4', offset: { x: 0.8, y: 0 } },\n            ];\n            return node2Ports;\n        }\n        else {\n            var ports = [\n                { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n                { id: 'portRight', offset: { x: 1, y: 0.5 } },\n                { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n                { id: 'portTop', offset: { x: 0.5, y: 0 } },\n            ];\n            return ports;\n        }\n    }\n    function setPaletteNodeDefaults(symbol) {\n        if (symbol.id === 'JoinNode') {\n            symbol.width = 20;\n            symbol.height = 50;\n        }\n        else if (symbol.id === 'ForkNode') {\n            symbol.width = 50;\n            symbol.height = 20;\n        }\n        else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n            symbol.width = 50;\n            symbol.height = 40;\n        }\n        else {\n            symbol.width = 50;\n            symbol.height = 50;\n        }\n        if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n            symbol.style.fill = '#757575';\n        }\n        symbol.style.strokeColor = '#757575';\n        return symbol;\n    }\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var centerX = bounds.width / 2;\n    var middle = centerX - 50;\n    var left = middle - 120;\n    var right = middle + 120;\n    var createNode = function (id, offsetX, offsetY, shapeType, width, height, content) {\n        if (width === void 0) { width = 40; }\n        if (height === void 0) { height = 40; }\n        if (content === void 0) { content = ''; }\n        return ({\n            id: id,\n            width: width,\n            height: height,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            shape: { type: \"UmlActivity\", shape: shapeType },\n            annotations: content ? [{ content: content }] : []\n        });\n    };\n    var nodes = [\n        createNode(\"Start\", 300, 20, \"InitialNode\"),\n        createNode(\"ReceiveCall\", 300, 100, \"Action\", 105, 40, \"Receive Customer Call\"),\n        createNode(\"ForkNode\", 300, 170, \"ForkNode\", 70, 10),\n        createNode(\"Determine\", 190, 250, \"Action\", 105, 40, \"Determine Type of Call\"),\n        createNode(\"Log\", 410, 250, \"Action\", 105, 40, \"Customer Logging a Call\"),\n        createNode(\"Decision\", 190, 350, \"Decision\", 50, 50),\n        createNode(\"transfer_sales\", 100, 450, \"Action\", 105, 40, \"Transfer the Call to Sales\"),\n        createNode(\"transfer_desk\", 280, 450, \"Action\", 105, 40, \"Transfer the Call to Help Desk\"),\n        createNode(\"MergeNode\", 190, 540, \"MergeNode\", 50, 50),\n        createNode(\"JoinNode\", 300, 630, \"JoinNode\", 70, 10),\n        createNode(\"CloseCall\", 300, 710, \"Action\", 105, 40, \"Close Call\"),\n        createNode(\"FinalNode\", 300, 800, \"FinalNode\")\n    ];\n    var createConnector = function (id, sourceID, targetID, sourcePortID, targetPortID, additionalProps) {\n        if (sourcePortID === void 0) { sourcePortID = \"\"; }\n        if (targetPortID === void 0) { targetPortID = \"\"; }\n        if (additionalProps === void 0) { additionalProps = {}; }\n        return (__assign({ id: id, sourceID: sourceID, targetID: targetID, sourcePortID: sourcePortID, targetPortID: targetPortID }, additionalProps));\n    };\n    var commonSegments = {\n        orthogonalShort: [{ type: \"Orthogonal\", length: 20, direction: \"Bottom\" }],\n        orthogonalLongLeft: [{ type: \"Orthogonal\", length: 50, direction: \"Left\" }],\n        orthogonalLongRight: [{ type: \"Orthogonal\", length: 50, direction: \"Right\" }],\n        orthogonalBottom: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n    };\n    var connectors = [\n        createConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n        createConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n        createConnector(\"connector3\", \"ForkNode\", \"Determine\", \"port1\", \"portTop\", {\n            segments: __spreadArray(__spreadArray([], commonSegments.orthogonalShort, true), commonSegments.orthogonalLongLeft, true)\n        }),\n        createConnector(\"connector4\", \"ForkNode\", \"Log\", \"port2\", \"portTop\", {\n            segments: __spreadArray(__spreadArray([], commonSegments.orthogonalShort, true), commonSegments.orthogonalLongRight, true)\n        }),\n        createConnector(\"connector5\", \"Determine\", \"Decision\"),\n        createConnector(\"connector6\", \"Decision\", \"transfer_sales\", \"portLeft\", \"portTop\", {\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                    id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n                    style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n                }]\n        }),\n        createConnector(\"connector7\", \"Decision\", \"transfer_desk\", \"portRight\", \"portTop\", {\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                    id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n                    style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n                }]\n        }),\n        createConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", \"portBottom\", \"portLeft\", {\n            segments: commonSegments.orthogonalBottom\n        }),\n        createConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", \"portBottom\", \"portRight\", {\n            segments: commonSegments.orthogonalBottom\n        }),\n        createConnector(\"connector10\", \"MergeNode\", \"JoinNode\", \"portBottom\", \"port3\"),\n        createConnector(\"connector11\", \"Log\", \"JoinNode\", \"portBottom\", \"port4\", {\n            segments: __spreadArray([\n                { type: \"Orthogonal\", length: 265, direction: \"Bottom\" }\n            ], commonSegments.orthogonalLongLeft, true)\n        }),\n        createConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n        createConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n    ];\n    diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '100%',\n        nodes: nodes, connectors: connectors,\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        getNodeDefaults: function (node) {\n            node.ports = getNodePorts(node);\n            if (node.ports) {\n                for (var i = 0; i < node.ports.length; i++) {\n                    node.ports[i].visibility = ej2_diagrams_1.PortVisibility.Hidden;\n                }\n            }\n            if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n                node.style.fill = '#444';\n            }\n            node.style.strokeColor = '#444';\n            return node;\n        },\n        getConnectorDefaults: function (connector) {\n            if (connector.id.indexOf('connector') !== -1) {\n                connector.type = 'Orthogonal';\n                connector.cornerRadius = 10;\n                connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n            }\n        },\n        created: function () {\n            (0, diagram_common_1.addEvents)();\n        }\n    });\n    diagram.appendTo('#diagram');\n    palette = new ej2_diagrams_1.SymbolPalette({\n        expandMode: 'Multiple',\n        width: '100%', height: '505px',\n        getNodeDefaults: setPaletteNodeDefaults,\n        symbolHeight: 55, symbolWidth: 55,\n        symbolMargin: { left: 10, right: 10, top: 10, bottom: 10 },\n        palettes: [\n            { id: 'umlActivity', expanded: true, symbols: umlActivityShapes, title: 'UML Shapes' },\n            { id: 'Connector', expanded: true, symbols: connectorSymbols, title: 'Connectors' }\n        ],\n        getSymbolInfo: function (symbol) { return { fit: true }; }\n    });\n    palette.appendTo('#symbolPalette');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/uml-activity/index.ts?");

/***/ }),

/***/ "./samples/diagram/uml-activity/script/diagram-common.ts":
/*!***************************************************************!*\
  !*** ./samples/diagram/uml-activity/script/diagram-common.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.openPalette = exports.addEvents = void 0;\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    exports.addEvents = addEvents;\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    exports.openPalette = openPalette;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/uml-activity/script/diagram-common.ts?");

/***/ })

/******/ });