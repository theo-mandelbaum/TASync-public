/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/diagram-events/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/diagram-events/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/diagram-events/diagram-events-details.ts":
/*!******************************************************************!*\
  !*** ./samples/diagram/diagram-events/diagram-events-details.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_diagrams_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.getEventDetails = void 0;\n    function getEventDetails(args) {\n        var listView = document.getElementById('listview-def');\n        var listViewComponent = listView.ej2_instances[0];\n        var selectedItems = listViewComponent.getSelectedItems();\n        if (selectedItems.data.length > 0) {\n            var elementName = getName(selectedItems, args);\n            if (elementName) {\n                eventInformation(args);\n            }\n        }\n    }\n    exports.getEventDetails = getEventDetails;\n    function getName(selectedItems, args) {\n        for (var i = 0; i < selectedItems.data.length; i++) {\n            var eventName = selectedItems.data[i].id;\n            if (eventName === args.name) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function getCause(cause) {\n        switch (cause) {\n            case ej2_diagrams_1.DiagramAction.Render:\n                return 'Rendering';\n            case ej2_diagrams_1.DiagramAction.PublicMethod:\n                return 'PublicMethod';\n            case ej2_diagrams_1.DiagramAction.ToolAction:\n                return 'ToolAction';\n            case ej2_diagrams_1.DiagramAction.UndoRedo:\n                return 'UndoRedo';\n            case ej2_diagrams_1.DiagramAction.TextEdit:\n                return 'TextEdit';\n            case ej2_diagrams_1.DiagramAction.Group:\n                return 'Group';\n            case ej2_diagrams_1.DiagramAction.Clear:\n                return 'Clear';\n            case ej2_diagrams_1.DiagramAction.PreventClearSelection:\n                return 'PreventClearSelection';\n            case ej2_diagrams_1.DiagramAction.Interactions:\n                return 'Interactions';\n            case ej2_diagrams_1.DiagramAction.PreventHistory:\n                return 'PreventHistory';\n        }\n        return '';\n    }\n    function eventInformation(args) {\n        var data = document.createElement('div');\n        data.className = 'eventData';\n        var eventObject = [];\n        switch (args.name) {\n            case 'click':\n                if (args.element && args.element.id) {\n                    eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                        { 'actualObject': args.actualObject ? args.actualObject.id : 'null' }, { 'count': args.count },\n                        { 'position.x': args.position.x },\n                        { 'position.y': args.position.y }];\n                }\n                break;\n            case 'dragEnter':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                    { 'diagram': args.diagram.getModuleName() }, { 'source': args.source.getModuleName() }];\n                break;\n            case 'dragLeave':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                    { 'diagram': args.diagram.getModuleName() }];\n                break;\n            case 'dragOver':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                    { 'target': args.target.id }, { 'mousePosition.x': args.mousePosition.x }, { 'mousePosition.y': args.mousePosition.y },\n                    { 'diagram': args.diagram.getModuleName() }];\n                break;\n            case 'historyChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n                    { 'type': args.type }, { 'source': args.source[0].id }];\n                break;\n            case 'doubleClick':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' },\n                    { 'position.x': args.position.x }, { 'position.y': args.position.y }, { 'source': args.source.id }];\n                break;\n            case 'textEdit':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue },\n                    { 'oldValue': args.oldValue }];\n                break;\n            case 'scrollChange':\n                eventObject = [\n                    { 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue.CurrentZoom': args.newValue.CurrentZoom },\n                    { 'newValue.HorizontalOffset': args.newValue.HorizontalOffset }, { 'source': args.source.getModuleName() },\n                    { 'newValue.VerticalOffset': args.newValue.VerticalOffset },\n                    { 'newValue.ViewportHeight': args.newValue.ViewportHeight }, { 'newValue.ViewportWidth': args.newValue.ViewportWidth },\n                    { 'oldValue.CurrentZoom': args.oldValue.CurrentZoom }, { 'oldValue.HorizontalOffset': args.oldValue.HorizontalOffset },\n                    { 'oldValue.VerticalOffset': args.oldValue.VerticalOffset }, { 'oldValue.ViewportHeight': args.oldValue.ViewportHeight },\n                    { 'oldValue.ViewportWidth': args.oldValue.ViewportWidth }\n                ];\n                break;\n            case 'selectionChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue ? args.newValue.length : 0 },\n                    { 'oldValue': args.oldValue ? args.oldValue.length : 0 }, { 'type': args.type }, { 'state': args.state }];\n                break;\n            case 'sizeChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue.offsetX': args.newValue.offsetX },\n                    { 'newValue.offsetY': args.newValue.offsetY }, { 'oldValue.offsetX': args.oldValue.offsetX },\n                    { 'oldValue.offsetY': args.oldValue.offsetY }, { 'source': args.source.propName }, { 'state': args.state }];\n                break;\n            case 'connectionChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'connector': args.connector.id },\n                    { 'connectorEnd': args.connectorEnd }, { 'newValue.nodeId': args.newValue.nodeId }, { 'newValue.portId': args.newValue.portId },\n                    { 'oldValue.nodeId': args.oldValue.nodeId }, { 'oldValue.portId': args.oldValue.portId }, { 'state': args.state }];\n                break;\n            case 'sourcePointChange':\n            case 'targetPointChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'connector': args.connector.id },\n                    { 'newValue.x': args.newValue.x }, { 'newValue.y': args.newValue.y }, { 'oldValue.x': args.oldValue.x },\n                    { 'oldValue.y': args.oldValue.y }, { 'targetNode': args.targetNode }, { 'targetPort': args.targetPort },\n                    { 'state': args.state }];\n                break;\n            case 'propertyChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n                    { 'newValue': args.newValue }, { 'oldValue': args.oldValue }, { 'element': args.element }];\n                break;\n            case 'positionChange':\n                eventObject = [\n                    { 'eventName': args.name }, { 'arguments': 'value' }, { 'allowDrop': args.allowDrop },\n                    { 'newValue.offsetX': args.newValue.offsetX }, { 'newValue.offsetY': args.newValue.offsetY },\n                    { 'oldValue.offsetX': args.oldValue.offsetX }, { 'oldValue.offsetY': args.oldValue.offsetY },\n                    { 'targetPosition.x': args.targetPosition.x }, { 'targetPosition.y': args.targetPosition.y },\n                    { 'source': args.source.propName }, { 'target': args.target }, { 'state': args.state },\n                ];\n                break;\n            case 'rotateChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue.rotateAngle },\n                    { 'oldValue': args.oldValue.rotateAngle }, { 'source': args.source.propName }, { 'state': args.state }];\n                break;\n            case 'collectionChange':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n                    { 'element': args.element.id }, { 'type': args.type }, { 'state': args.state }];\n                break;\n            case 'mouseEnter':\n            case 'mouseLeave':\n            case 'mouseOver':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'actualObject': args.actualObject },\n                    { 'element': args.element }, { 'targets': args.targets }];\n                break;\n            case 'contextMenuOpen':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'items': args.items }, { 'element': args.element.id },\n                    { 'hiddenItems': args.hiddenItems }, { 'left': args.left }, { 'top': args.top }, { 'parentItem': args.parentItem }];\n                break;\n            case 'contextMenuBeforeItemRender':\n            case 'contextMenuClick':\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                    { 'item': args.item.id }];\n                break;\n        }\n        var span = document.createElement('span');\n        span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n        var log = document.getElementById('EventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n    function setEventsArguments(data) {\n        var table = document.createElement('table');\n        table.style.marginTop = '15px';\n        var tableBody = document.createElement('tbody');\n        var _loop_1 = function (i) {\n            var row = document.createElement('tr');\n            Object.keys(data[i]).forEach(function (key) {\n                var firstColumn = document.createElement('td');\n                firstColumn.appendChild(document.createTextNode(key));\n                row.appendChild(firstColumn);\n                var thirdColumn = document.createElement('td');\n                thirdColumn.appendChild(document.createTextNode('<b>' + data[i][key] + '</b>'));\n                row.appendChild(thirdColumn);\n            });\n            tableBody.appendChild(row);\n        };\n        for (var i = 0; i < data.length; i++) {\n            _loop_1(i);\n        }\n        table.appendChild(tableBody);\n        return table;\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/diagram-events/diagram-events-details.ts?");

/***/ }),

/***/ "./samples/diagram/diagram-events/index.ts":
/*!*************************************************!*\
  !*** ./samples/diagram/diagram-events/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! ./script/diagram-common */ \"./samples/diagram/diagram-events/script/diagram-common.ts\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! ./diagram-events-details */ \"./samples/diagram/diagram-events/diagram-events-details.ts\"), __webpack_require__(/*! @syncfusion/ej2-lists */ \"./node_modules/@syncfusion/ej2-lists/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, diagram_common_1, ej2_buttons_1, diagram_events_details_1, ej2_lists_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.UndoRedo, ej2_diagrams_1.DiagramContextMenu, ej2_diagrams_1.Snapping);\n    function getSymbolDefaults(symbol) {\n        symbol.width = 50;\n        symbol.height = 50;\n        symbol.style.strokeColor = '#757575';\n        symbol.constraints = ej2_diagrams_1.NodeConstraints.Default | ej2_diagrams_1.NodeConstraints.AllowDrop;\n    }\n    function getSymbolInfo(symbol) {\n        return { fit: true };\n    }\n    function dragEnter(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function dragLeave(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function dragOver(args) {\n        if (args.target) {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function click(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function historyChange(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function doubleClick(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function textEdit(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function scrollChange(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function selectionChange(args) {\n        if (args.state === 'Changed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function sizeChange(args) {\n        if (args.state === 'Completed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function connectionChange(args) {\n        if (args.state === 'Changed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function sourcePointChange(args) {\n        if (args.state === 'Completed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function targetPointChange(args) {\n        if (args.state === 'Completed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function propertyChange(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function positionChange(args) {\n        if (args.state === 'Completed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function rotateChange(args) {\n        if (args.state === 'Completed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function collectionChange(args) {\n        if (args.state === 'Changed') {\n            (0, diagram_events_details_1.getEventDetails)(args);\n        }\n    }\n    function mouseEnter(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function mouseLeave(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function mouseOver(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function contextMenuOpen(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function contextMenuBeforeItemRender(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    function contextMenuClick(args) {\n        (0, diagram_events_details_1.getEventDetails)(args);\n    }\n    var data = [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n    ];\n    var listObj = new ej2_lists_1.ListView({\n        dataSource: data,\n        height: 'calc(100% - 40px)',\n        showCheckBox: true,\n    });\n    listObj.appendTo('#listview-def');\n    var button = new ej2_buttons_1.Button();\n    button.appendTo('#clearButton');\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '700px',\n        contextMenuSettings: { show: true },\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        dragEnter: dragEnter,\n        dragLeave: dragLeave,\n        dragOver: dragOver,\n        click: click,\n        historyChange: historyChange,\n        doubleClick: doubleClick,\n        textEdit: textEdit,\n        scrollChange: scrollChange,\n        selectionChange: selectionChange,\n        sizeChange: sizeChange,\n        connectionChange: connectionChange,\n        sourcePointChange: sourcePointChange,\n        targetPointChange: targetPointChange,\n        propertyChange: propertyChange,\n        positionChange: positionChange,\n        rotateChange: rotateChange,\n        collectionChange: collectionChange,\n        mouseEnter: mouseEnter,\n        mouseLeave: mouseLeave,\n        mouseOver: mouseOver,\n        contextMenuOpen: contextMenuOpen,\n        contextMenuBeforeItemRender: contextMenuBeforeItemRender,\n        contextMenuClick: contextMenuClick\n    });\n    diagram.appendTo('#diagram');\n    var basicShapes = [\n        { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\n        { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\n        { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\n        { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\n        { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\n        { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\n        { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\n        { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n    var connectorSymbols = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n        },\n        {\n            id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n        },\n        {\n            id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n    ];\n    var palettes = [\n        { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n        { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ];\n    var palette = new ej2_diagrams_1.SymbolPalette({\n        expandMode: 'Multiple', palettes: palettes,\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        getNodeDefaults: getSymbolDefaults, getSymbolInfo: getSymbolInfo,\n        getConnectorDefaults: function (connector) {\n            connector.style = { strokeWidth: 1, strokeColor: '#757575' };\n        },\n    });\n    palette.appendTo('#symbolpalette');\n    (0, diagram_common_1.addEvents)();\n    clearEventLog();\n    document.getElementById('clearButton').onclick = function (args) {\n        clearEventLog();\n    };\n    function clearEventLog() {\n        var data = document.getElementById('EventLog');\n        data.innerHTML = '';\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/diagram-events/index.ts?");

/***/ }),

/***/ "./samples/diagram/diagram-events/script/diagram-common.ts":
/*!*****************************************************************!*\
  !*** ./samples/diagram/diagram-events/script/diagram-common.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.openPalette = exports.addEvents = void 0;\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    exports.addEvents = addEvents;\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    exports.openPalette = openPalette;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/diagram-events/script/diagram-common.ts?");

/***/ })

/******/ });