/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/swimlane/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/swimlane/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/swimlane/index.ts":
/*!*******************************************!*\
  !*** ./samples/diagram/swimlane/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\"), __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! ./script/diagram-common */ \"./samples/diagram/swimlane/script/diagram-common.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1, ej2_base_2, diagram_common_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.UndoRedo, ej2_diagrams_1.DiagramContextMenu);\n    function getConnectorDefaults(connector) {\n        if ((connector.id.indexOf(\"straight\") !== -1) || (connector.id.indexOf(\"straightdashed\") !== -1)) {\n            connector.type = 'Straight';\n        }\n        else {\n            connector.type = 'Orthogonal';\n        }\n        setConnectorStyles(connector, '#717171');\n        return connector;\n    }\n    function setConnectorStyles(connector, color) {\n        connector.targetDecorator.style.strokeColor = color;\n        connector.targetDecorator.style.fill = color;\n        connector.style.strokeColor = color;\n        connector.style.strokeWidth = 1;\n    }\n    var bounds = document.getElementById('diagram-space').getBoundingClientRect();\n    var pathData = 'M 120 24.9999 C 120 38.8072 109.642 50 96.8653 50 L 23.135' +\n        ' 50 C 10.3578 50 0 38.8072 0 24.9999 L 0 24.9999 C' +\n        '0 11.1928 10.3578 0 23.135 0 L 96.8653 0 C 109.642 0 120 11.1928 120 24.9999 Z';\n    var port = [\n        { id: 'Port1', offset: { x: 0, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Connect | ej2_diagrams_1.PortVisibility.Hover, constraints: ej2_diagrams_1.PortConstraints.Default | ej2_diagrams_1.PortConstraints.Draw },\n        { id: 'Port2', offset: { x: 0.5, y: 0 }, visibility: ej2_diagrams_1.PortVisibility.Connect | ej2_diagrams_1.PortVisibility.Hover, constraints: ej2_diagrams_1.PortConstraints.Default | ej2_diagrams_1.PortConstraints.Draw },\n        { id: 'Port3', offset: { x: 1, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Connect | ej2_diagrams_1.PortVisibility.Hover, constraints: ej2_diagrams_1.PortConstraints.Default | ej2_diagrams_1.PortConstraints.Draw },\n        { id: 'Port4', offset: { x: 0.5, y: 1 }, visibility: ej2_diagrams_1.PortVisibility.Connect | ej2_diagrams_1.PortVisibility.Hover, constraints: ej2_diagrams_1.PortConstraints.Default | ej2_diagrams_1.PortConstraints.Draw }\n    ];\n    var nodes = [\n        {\n            id: 'swimlane',\n            shape: {\n                type: 'SwimLane',\n                orientation: 'Horizontal',\n                header: {\n                    annotation: { content: 'SALES PROCESS FLOW CHART', style: { fill: 'transparent' } },\n                    height: 50, style: { fontSize: 11 },\n                },\n                lanes: [\n                    {\n                        id: 'stackCanvas1',\n                        header: {\n                            annotation: { content: 'Consumer' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node1',\n                                annotations: [\n                                    {\n                                        content: 'Consumer learns \\n of product',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 60, top: 30 },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node2',\n                                shape: { type: 'Flow', shape: 'Decision' },\n                                annotations: [\n                                    {\n                                        content: 'Does \\nConsumer want \\nthe product',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 200, top: 20 },\n                                height: 60, width: 120, ports: port\n                            },\n                            {\n                                id: 'node3',\n                                annotations: [\n                                    {\n                                        content: 'No sales lead',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 370, top: 30 }, shape: { type: 'Path', data: pathData },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node4',\n                                annotations: [\n                                    {\n                                        content: 'Sell to consumer',\n                                        style: { fontSize: 11 }\n                                    }\n                                ],\n                                margin: { left: 510, top: 30 },\n                                height: 40, width: 100, ports: port\n                            },\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas2',\n                        header: {\n                            annotation: { content: 'Marketing' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node5',\n                                annotations: [{ content: 'Create marketing campaigns' }],\n                                margin: { left: 60, top: 20 },\n                                height: 40, width: 100, ports: port\n                            },\n                            {\n                                id: 'node6',\n                                annotations: [{ content: 'Marketing finds sales leads' }],\n                                margin: { left: 210, top: 20 },\n                                height: 40, width: 100, ports: port\n                            }\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas3',\n                        header: {\n                            annotation: { content: 'Sales' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node7',\n                                annotations: [{ content: 'Sales receives lead' }],\n                                margin: { left: 210, top: 30 },\n                                height: 40, width: 100, ports: port\n                            }\n                        ],\n                    },\n                    {\n                        id: 'stackCanvas4',\n                        header: {\n                            annotation: { content: 'Success' }, width: 50,\n                            style: { fontSize: 11 }\n                        },\n                        height: 100,\n                        children: [\n                            {\n                                id: 'node8',\n                                annotations: [{ content: 'Success helps \\n retain consumer \\n as a customer' }],\n                                margin: { left: 510, top: 20 },\n                                height: 50, width: 100, ports: port\n                            }\n                        ],\n                    },\n                ],\n                phases: [\n                    {\n                        id: 'phase1', offset: 170,\n                        header: { annotation: { content: 'Phase' } }\n                    },\n                ],\n                phaseSize: 20,\n            },\n            offsetX: bounds.width / 2, offsetY: bounds.height / 2,\n            height: 100,\n            width: 650\n        },\n    ];\n    function getNodeDefaults(node) {\n        node.style.strokeColor = \"#717171\";\n        return node;\n    }\n    var connectors = [\n        {\n            id: 'connector1', sourceID: 'node1',\n            targetID: 'node2'\n        },\n        {\n            id: 'connector2', sourceID: 'node2',\n            targetID: 'node3', annotations: [{ content: 'No', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector3', sourceID: 'node4',\n            targetID: 'node8'\n        },\n        {\n            id: 'connector4', sourceID: 'node2',\n            targetID: 'node6', annotations: [{ content: 'Yes', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector5', sourceID: 'node5',\n            targetID: 'node1'\n        },\n        {\n            id: 'connector6', sourceID: 'node6',\n            targetID: 'node7'\n        },\n        {\n            id: 'connector7', sourceID: 'node4',\n            targetID: 'node7', sourcePortID: 'Port1', targetPortID: 'Port3'\n        },\n    ];\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%', height: '100%',\n        nodes: nodes, connectors: connectors,\n        snapSettings: {\n            constraints: ej2_diagrams_1.SnapConstraints.All & ~ej2_diagrams_1.SnapConstraints.ShowLines\n        },\n        getConnectorDefaults: getConnectorDefaults,\n        getNodeDefaults: getNodeDefaults,\n        contextMenuSettings: {\n            show: true, items: [\n                {\n                    text: 'Copy', id: 'Copy', target: '.e-diagramcontent', iconCss: 'e-icons e-copy'\n                },\n                {\n                    text: 'Cut', id: 'Cut', target: '.e-diagramcontent', iconCss: 'e-icons e-cut'\n                },\n                {\n                    text: 'Paste', id: 'Paste', target: '.e-diagramcontent', iconCss: 'e-icons e-paste'\n                },\n                {\n                    text: 'Insert Lane Before', id: 'InsertLaneBefore', target: '.e-diagramcontent',\n                },\n                {\n                    text: 'Insert Lane After', id: 'InsertLaneAfter', target: '.e-diagramcontent',\n                }\n            ],\n            showCustomMenuOnly: true,\n        },\n        contextMenuOpen: function (args) {\n            for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                if (diagram.selectedItems.connectors.length + diagram.selectedItems.nodes.length > 0) {\n                    if (item.id === 'InsertLaneBefore' || item.id === 'InsertLaneAfter') {\n                        if (diagram.selectedItems.connectors.length ||\n                            (diagram.selectedItems.nodes.length &&\n                                !diagram.selectedItems.nodes[0].isLane)) {\n                            args.hiddenItems.push(item.id);\n                        }\n                    }\n                }\n                else {\n                    args.hiddenItems.push(item.id);\n                }\n            }\n        },\n        contextMenuClick: function (args) {\n            if (args.item.id === 'InsertLaneBefore' || args.item.id === 'InsertLaneAfter') {\n                if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].isLane) {\n                    var index = void 0;\n                    var node = diagram.selectedItems.nodes[0];\n                    var swimlane = diagram.getObject(diagram.selectedItems.nodes[0].parentId);\n                    var shape = swimlane.shape;\n                    var existingLane = (0, ej2_diagrams_1.cloneObject)(shape.lanes[0]);\n                    var newLane = {\n                        id: (0, ej2_diagrams_1.randomId)(),\n                        header: {\n                            width: existingLane.header.width, height: existingLane.header.height,\n                            style: existingLane.header.style\n                        },\n                        style: existingLane.style,\n                        height: existingLane.height, width: existingLane.width,\n                    };\n                    if (shape.orientation === 'Horizontal') {\n                        var exclude = 0;\n                        exclude += (shape.header) ? 1 : 0;\n                        exclude += (shape.phases.length) ? 1 : 0;\n                        index = node.rowIndex - exclude;\n                        newLane.header.width = existingLane.header.width;\n                        newLane.header.height = existingLane.height;\n                    }\n                    else {\n                        index = node.columnIndex - (shape.phases.length) ? 1 : 0;\n                        newLane.header.width = existingLane.width;\n                        newLane.header.height = existingLane.header.height;\n                    }\n                    if (args.item.id === 'InsertLaneBefore') {\n                        diagram.addLanes(swimlane, [newLane], index);\n                    }\n                    else {\n                        diagram.addLanes(swimlane, [newLane], index + 1);\n                    }\n                    diagram.clearSelection();\n                }\n            }\n            else if (args.item.id === 'Cut') {\n                diagram.cut();\n            }\n            else if (args.item.id === 'Copy') {\n                diagram.copy();\n            }\n            else if (args.item.id === 'Paste') {\n                diagram.paste();\n            }\n        },\n        selectedItems: { constraints: ej2_diagrams_1.SelectorConstraints.All & ~ej2_diagrams_1.SelectorConstraints.Rotate },\n        created: function () {\n            (0, diagram_common_1.addEvents)();\n        }\n    });\n    diagram.appendTo('#diagram');\n    var palettes = [\n        {\n            id: 'flow', expanded: true, title: 'Flow Shapes', symbols: [\n                {\n                    id: 'Terminator', addInfo: { tooltip: 'Terminator' }, width: 100, height: 60, shape: { type: 'Flow', shape: 'Terminator' }, ports: port\n                },\n                {\n                    id: 'Process', addInfo: { tooltip: 'Process' }, width: 100, height: 60, shape: { type: 'Flow', shape: 'Process' }, ports: port\n                },\n                {\n                    id: 'Decision', addInfo: { tooltip: 'Decision' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Decision' }, ports: port\n                },\n                {\n                    id: 'Document', addInfo: { tooltip: 'Document' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Document' }, ports: port\n                },\n                {\n                    id: 'Predefinedprocess', addInfo: { tooltip: 'Predefined process' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'PreDefinedProcess' }, ports: port\n                },\n                {\n                    id: 'Data', addInfo: { tooltip: 'Data' }, width: 50, height: 50, shape: { type: 'Flow', shape: 'Data' }, ports: port\n                },\n            ]\n        },\n        {\n            id: 'swimlaneShapes', expanded: true,\n            title: 'Swimlane Shapes',\n            symbols: [\n                {\n                    id: 'Horizontalswimlane', addInfo: { tooltip: 'Horizontal swimlane' },\n                    shape: {\n                        type: 'SwimLane', lanes: [\n                            {\n                                id: 'lane1',\n                                height: 60, width: 150,\n                                header: { width: 50, height: 50, style: { fontSize: 11 } },\n                            }\n                        ],\n                        orientation: 'Horizontal', isLane: true\n                    },\n                    height: 60,\n                    width: 140,\n                    offsetX: 70,\n                    offsetY: 30,\n                }, {\n                    id: 'Verticalswimlane', addInfo: { tooltip: 'Vertical swimlane' },\n                    shape: {\n                        type: 'SwimLane',\n                        lanes: [\n                            {\n                                id: 'lane1',\n                                height: 150, width: 60,\n                                header: { width: 50, height: 50, style: { fontSize: 11 } },\n                            }\n                        ],\n                        orientation: 'Vertical', isLane: true\n                    },\n                    height: 140,\n                    width: 60,\n                    offsetX: 70,\n                    offsetY: 30,\n                }, {\n                    id: 'Verticalphase', addInfo: { tooltip: 'Vertical phase' },\n                    shape: {\n                        type: 'SwimLane',\n                        phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3' }, }],\n                        annotations: [{ text: '' }],\n                        orientation: 'Vertical', isPhase: true\n                    },\n                    height: 60,\n                    width: 140\n                }, {\n                    id: 'Horizontalphase', addInfo: { tooltip: 'Horizontal phase' },\n                    shape: {\n                        type: 'SwimLane',\n                        phases: [{ style: { strokeWidth: 1, strokeDashArray: '3,3' }, }],\n                        annotations: [{ text: '' }],\n                        orientation: 'Horizontal', isPhase: true\n                    },\n                    height: 60,\n                    width: 140\n                }\n            ]\n        },\n        {\n            id: 'connectors', expanded: true, symbols: [\n                {\n                    id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n                },\n                {\n                    id: 'Orthogonaldashed', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n                    style: { strokeDashArray: '4 4' }\n                },\n                {\n                    id: 'straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n                },\n                {\n                    id: 'straightdashed', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n                    style: { strokeDashArray: '4 4' }\n                }\n            ], title: 'Connectors'\n        }\n    ];\n    var palette = new ej2_diagrams_1.SymbolPalette({\n        expandMode: 'Multiple',\n        palettes: palettes,\n        width: '100%', height: '100%',\n        symbolMargin: { left: 8, right: 8, top: 8, bottom: 8 },\n        symbolHeight: 48, symbolWidth: 48,\n        getConnectorDefaults: getConnectorDefaults,\n        getNodeDefaults: getNodeDefaults,\n        getSymbolInfo: function (symbol) {\n            return { tooltip: symbol.addInfo ? symbol.addInfo['tooltip'] : symbol.id };\n        }\n    });\n    palette.appendTo('#symbolpalette');\n    diagram.dragEnter = function (arg) {\n        if (arg.element instanceof ej2_diagrams_1.Node) {\n            var shape = arg.element.shape;\n            if (shape.isLane) {\n                if (shape.orientation === 'Horizontal') {\n                    shape.lanes[0].height = 100;\n                    shape.lanes[0].width = 400;\n                }\n                else if (shape.orientation === 'Vertical') {\n                    shape.lanes[0].height = 400;\n                    shape.lanes[0].width = 100;\n                }\n            }\n        }\n    };\n    if (ej2_base_2.Browser.isDevice) {\n        diagram.fitToPage();\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/swimlane/index.ts?");

/***/ }),

/***/ "./samples/diagram/swimlane/script/diagram-common.ts":
/*!***********************************************************!*\
  !*** ./samples/diagram/swimlane/script/diagram-common.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.openPalette = exports.addEvents = void 0;\n    var isMobile;\n    function addEvents() {\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            var paletteIcon = document.getElementById('palette-icon');\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', openPalette, false);\n            }\n        }\n    }\n    exports.addEvents = addEvents;\n    function openPalette() {\n        var paletteSpace = document.getElementById('palette-space');\n        isMobile = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            }\n            else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    exports.openPalette = openPalette;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/swimlane/script/diagram-common.ts?");

/***/ })

/******/ });