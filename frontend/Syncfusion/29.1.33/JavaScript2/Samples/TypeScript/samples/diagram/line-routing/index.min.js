/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/diagram/line-routing/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/diagram/line-routing/index.ts","diagrams.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/diagram/line-routing/index.ts":
/*!***********************************************!*\
  !*** ./samples/diagram/line-routing/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-diagrams */ \"./node_modules/@syncfusion/ej2-diagrams/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_diagrams_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_diagrams_1.Diagram.Inject(ej2_diagrams_1.UndoRedo, ej2_diagrams_1.LineRouting, ej2_diagrams_1.ConnectorBridging);\n    var nodes = [\n        {\n            id: 'start', offsetX: 115, offsetY: 110, shape: { type: 'Flow', shape: 'Terminator' },\n            ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: ej2_diagrams_1.PortVisibility.Hidden }],\n            style: { fill: '#D5535D' }, annotations: [{ content: 'Start', style: { color: 'white' } }]\n        },\n        {\n            id: 'process', offsetX: 115, offsetY: 255, shape: { type: 'Flow', shape: 'Process' },\n            style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n        },\n        {\n            id: 'document', offsetX: 115, offsetY: 400, shape: { type: 'Flow', shape: 'Document' },\n            ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden }],\n            annotations: [{ content: 'Document', style: { color: 'white' } }], style: { fill: '#5BA5F0' }\n        },\n        {\n            id: 'decision', offsetX: 390, offsetY: 110, shape: { type: 'Flow', shape: 'Decision' },\n            style: { fill: '#9A8AF7' }, annotations: [{ content: 'Decision', style: { color: 'white' } }]\n        },\n        {\n            id: 'document2', offsetX: 390, offsetY: 255, shape: { type: 'Flow', shape: 'Document' },\n            style: { fill: '#5BA5F0' }, annotations: [{ content: 'Document', style: { color: 'white' } }]\n        },\n        {\n            id: 'end', offsetX: 390, offsetY: 400, shape: { type: 'Flow', shape: 'Terminator' },\n            style: { fill: '#D5535D' }, annotations: [{ content: 'End', style: { color: 'white' } }]\n        },\n        {\n            id: 'process2', offsetX: 640, offsetY: 110, shape: { type: 'Flow', shape: 'Process' },\n            style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n        },\n        {\n            id: 'card', offsetX: 640, offsetY: 255,\n            shape: { type: 'Flow', shape: 'Card' },\n            style: { fill: '#76C3F0' },\n            annotations: [{ content: 'Card', style: { color: 'white' } }],\n            ports: [\n                { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: ej2_diagrams_1.PortVisibility.Hidden },\n                { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: ej2_diagrams_1.PortVisibility.Hidden }\n            ],\n        }\n    ];\n    var connectors = [\n        { id: 'Connector1', sourceID: 'start', targetID: 'process', },\n        { id: 'Connector2', sourceID: 'process', targetID: 'document' },\n        { id: 'Connector3', sourceID: 'document', targetID: 'end' },\n        { id: 'Connector4', sourceID: 'start', targetID: 'decision' },\n        { id: 'Connector5', sourceID: 'decision', targetID: 'process2' },\n        { id: 'Connector6', sourceID: 'process2', targetID: 'card' },\n        { id: 'Connector7', sourceID: 'process', targetID: 'document2' },\n        { id: 'Connector8', sourceID: 'document2', targetID: 'card' },\n        { id: 'Connector9', sourceID: 'start', sourcePortID: 'port1', targetID: 'card', targetPortID: 'port1' },\n        { id: 'Connector10', sourceID: 'card', sourcePortID: 'port2', targetID: 'document', targetPortID: 'port1' }\n    ];\n    function getNodeDefaults(node) {\n        node.height = 50;\n        if (node.id === 'decision') {\n            node.height = 70;\n        }\n        node.width = 120;\n        node.style = { strokeColor: 'transparent' };\n        return node;\n    }\n    function getConnectorDefaults(connector) {\n        connector.type = 'Orthogonal';\n        connector.style = { strokeColor: '#707070', strokeWidth: 1.25 };\n        connector.targetDecorator = { style: { fill: '#707070', strokeColor: '#707070' } };\n        return connector;\n    }\n    var diagram = new ej2_diagrams_1.Diagram({\n        width: '100%',\n        height: '600px',\n        nodes: nodes,\n        connectors: connectors,\n        constraints: ej2_diagrams_1.DiagramConstraints.Default | ej2_diagrams_1.DiagramConstraints.Bridging | ej2_diagrams_1.DiagramConstraints.LineRouting,\n        snapSettings: { constraints: ej2_diagrams_1.SnapConstraints.None },\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        created: onCreated\n    });\n    diagram.appendTo('#diagram');\n    function onCreated() {\n        diagram.fitToPage();\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/diagram/line-routing/index.ts?");

/***/ })

/******/ });