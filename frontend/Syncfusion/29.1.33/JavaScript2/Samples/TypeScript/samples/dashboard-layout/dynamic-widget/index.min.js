/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/dashboard-layout/dynamic-widget/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/dashboard-layout/dynamic-widget/index.ts","layouts.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/dashboard-layout/dynamic-widget/index.ts":
/*!**********************************************************!*\
  !*** ./samples/dashboard-layout/dynamic-widget/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-layouts */ \"./node_modules/@syncfusion/ej2-layouts/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\"), __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\"), __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\"), __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_layouts_1, ej2_buttons_1, ej2_charts_1, ej2_charts_2, ej2_popups_1, ej2_charts_3) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_charts_1.Chart.Inject(ej2_charts_1.LineSeries, ej2_charts_1.DateTime, ej2_charts_1.Legend, ej2_charts_1.Tooltip);\n    ej2_charts_1.Chart.Inject(ej2_charts_2.SplineAreaSeries, ej2_charts_1.DateTime, ej2_charts_1.Legend);\n    ej2_charts_1.Chart.Inject(ej2_charts_1.LineSeries, ej2_charts_1.DateTime, ej2_charts_1.Legend, ej2_charts_1.Tooltip);\n    ej2_charts_1.Chart.Inject(ej2_charts_1.ColumnSeries, ej2_charts_1.DataLabel, ej2_charts_1.Category, ej2_charts_1.Legend, ej2_charts_1.Tooltip);\n    ej2_charts_3.AccumulationChart.Inject(ej2_charts_3.AccumulationLegend, ej2_charts_3.PieSeries, ej2_charts_3.AccumulationTooltip, ej2_charts_3.AccumulationDataLabel);\n    var dashboardObject = new ej2_layouts_1.DashboardLayout({\n        cellSpacing: [10, 10],\n        cellAspectRatio: 100 / 85,\n        allowDragging: false,\n        columns: 2,\n        allowResizing: false,\n        resizeStop: onPanelResize,\n        panels: [{\n                'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                header: '<div>Line Chart</div>', content: '<div id=\"linechart\" style=\"height:100%; width:100%\"></div>'\n            },\n            {\n                'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 1,\n                header: '<div>Pie Chart</div>', content: '<div id=\"pie\" style=\"height:100%; width:100%\"></div>'\n            },\n            {\n                'sizeX': 2, 'sizeY': 1, 'row': 1, 'col': 0,\n                header: '<div>Spline Chart</div>', content: '<div id=\"chart\" style=\"height:100%; width:100%\"></div>'\n            }]\n    });\n    dashboardObject.appendTo('#defaultLayout');\n    var toggleBtn = new ej2_buttons_1.Button({\n        cssClass: 'e-outline e-flat e-primary',\n        iconCss: 'edit',\n        isToggle: true\n    });\n    toggleBtn.appendTo('#togglebtn');\n    toggleBtn.element.onclick = function () {\n        if (toggleBtn.element.classList.contains('e-active')) {\n            dashboardObject.allowResizing = true;\n            dashboardObject.allowDragging = true;\n            toggleBtn.content = 'SAVE';\n            toggleBtn.iconCss = 'save';\n            document.getElementById('dialogBtn').style.display = 'block';\n        }\n        else {\n            dashboardObject.allowResizing = false;\n            dashboardObject.allowDragging = false;\n            toggleBtn.content = 'EDIT';\n            toggleBtn.iconCss = 'edit';\n            document.getElementById('dialogBtn').style.display = 'none';\n        }\n    };\n    function onPanelResize(args) {\n        if (args.element && args.element.querySelector('.e-panel-container .e-panel-content div')) {\n            var chartObj = args.element.querySelector('.e-panel-container .e-panel-content div').ej2_instances[0];\n            chartObj.height = '95%';\n            chartObj.width = '100%';\n            chartObj.refresh();\n        }\n    }\n    setTimeout(function () {\n        var linechartObj = new ej2_charts_1.Chart({\n            primaryXAxis: {\n                valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n            },\n            chartArea: { border: { width: 0 } },\n            primaryYAxis: {\n                majorGridLines: { width: 0 },\n                majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n            },\n            width: '99%',\n            height: '100%',\n            series: [\n                {\n                    dataSource: [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }],\n                    marker: {\n                        dataLabel: {\n                            visible: false, position: 'Top', font: {\n                                fontWeight: '600', color: '#ffffff'\n                            }\n                        }\n                    },\n                    type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Jan', fill: '#00bdae',\n                },\n                {\n                    dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }],\n                    type: 'Column', yName: 'y', xName: 'x', width: 2, name: 'Feb', fill: '#e56691',\n                    marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                },\n                {\n                    dataSource: [{ x: 'Jan', y: 38 }, { x: 'Feb', y: 17 }, { x: 'Mar', y: 26 }],\n                    type: 'Column', xName: 'x', name: 'Mar', width: 2, yName: 'y', fill: '#357cd2',\n                    marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                }\n            ],\n            load: function (args) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                if (selectedTheme === 'highcontrast') {\n                    args.chart.series[0].marker.dataLabel.font.color = '#000000';\n                    args.chart.series[1].marker.dataLabel.font.color = '#000000';\n                    args.chart.series[2].marker.dataLabel.font.color = '#000000';\n                }\n            }\n        });\n        linechartObj.appendTo('#linechart');\n        var pie = new ej2_charts_3.AccumulationChart({\n            series: [\n                {\n                    dataSource: [\n                        { 'x': 'Jan', y: 12.5, text: 'January' },\n                        { 'x': 'Feb', y: 25, text: 'February' },\n                        { 'x': 'Mar', y: 50, text: 'March' },\n                    ],\n                    palettes: ['#00bdae', '#357cd2', '#e56691'],\n                    dataLabel: {\n                        visible: true,\n                        name: 'value',\n                        position: 'Inside'\n                    },\n                    radius: '100%', xName: 'x', yName: 'y', startAngle: 0, endAngle: 360, innerRadius: '40%', name: 'Earnings',\n                }\n            ],\n            tooltip: {\n                enable: true,\n                header: '<b>${point.x}</b>',\n                format: 'Composition : <b>${point.y}%</b>'\n            },\n            legendSettings: {\n                visible: false, toggleVisibility: false\n            },\n            width: '99%',\n            height: '100%',\n            load: function (args) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n            }\n        });\n        pie.appendTo('#pie');\n        var chart = new ej2_charts_1.Chart({\n            primaryYAxis: {\n                maximum: 4, interval: 1,\n                labelFormat: '{value}',\n                lineStyle: { width: 0 },\n                majorTickLines: { width: 0 },\n                minorTickLines: { width: 0 }\n            },\n            primaryXAxis: {\n                valueType: 'DateTime',\n                labelFormat: 'MMM',\n                majorGridLines: { width: 0 },\n                intervalType: 'Months',\n                edgeLabelPlacement: 'Shift'\n            },\n            chartArea: {\n                border: {\n                    width: 0\n                }\n            },\n            series: [\n                {\n                    dataSource: [\n                        { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.4 },\n                        { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.6 },\n                        { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.5 },\n                        { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.8 },\n                        { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\n                    ],\n                    name: 'Jan', xName: 'x', yName: 'y', type: 'SplineArea',\n                    fill: 'rgb(239, 183, 202)',\n                    opacity: 0.5,\n                    border: { color: 'transparent' },\n                },\n                {\n                    dataSource: [\n                        { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.7 },\n                        { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\n                        { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\n                        { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.8 },\n                        { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\n                    ],\n                    border: { color: 'transparent' },\n                    name: 'Feb', xName: 'x', yName: 'y', type: 'SplineArea',\n                    opacity: 0.5,\n                    fill: 'rgb(0, 189, 174)',\n                }\n            ],\n            width: '99%',\n            height: '100%',\n            load: function (args) {\n                var selectedTheme = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n                args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n            }\n        });\n        chart.appendTo('#chart');\n    }, 10);\n    var dialogObj = new ej2_popups_1.Dialog({\n        width: '500px',\n        header: 'Add a widget',\n        showCloseIcon: true,\n        animationSettings: { effect: 'Zoom' },\n        content: document.getElementById('dialogcontent'),\n        target: document.getElementById('target'),\n        isModal: true,\n        height: '260px',\n        visible: false\n    });\n    dialogObj.appendTo('#modalDialog');\n    dialogObj.hide();\n    var count = 3;\n    document.getElementById('dialogBtn').onclick = function () {\n        dialogObj.show();\n        window.lineTemplateClick = function () {\n            var countValue = count.toString();\n            var panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Line Chart</div>', content: '<div id=_line' + countValue + ' style=\"height:100%; width:100%\"></div>'\n                }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n            var linechartObj = new ej2_charts_1.Chart({\n                primaryXAxis: {\n                    valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n                },\n                chartArea: { border: { width: 0 } },\n                width: '99%',\n                height: '100%',\n                primaryYAxis: {\n                    majorGridLines: { width: 0 },\n                    majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n                },\n                series: [\n                    {\n                        dataSource: [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }],\n                        type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Jan', fill: '#00bdae',\n                        marker: {\n                            dataLabel: {\n                                visible: false, position: 'Top', font: {\n                                    fontWeight: '600', color: '#ffffff'\n                                }\n                            }\n                        }\n                    },\n                    {\n                        dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }],\n                        type: 'Column', xName: 'x', width: 2, fill: '#e56691', yName: 'y', name: 'Feb',\n                        marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                    },\n                    {\n                        dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 18 }, { x: 'Mar', y: 25 }],\n                        type: 'Column', xName: 'x', name: 'Mar', fill: '#357cd2', width: 2, yName: 'y',\n                        marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                    }\n                ],\n                load: function (args) {\n                    var selectedTheme = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                        selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                    if (selectedTheme === 'highcontrast') {\n                        args.chart.series[0].marker.dataLabel.font.color = '#000000';\n                        args.chart.series[1].marker.dataLabel.font.color = '#000000';\n                        args.chart.series[2].marker.dataLabel.font.color = '#000000';\n                    }\n                }\n            });\n            linechartObj.appendTo('#' + '_line' + countValue);\n            linechartObj.refresh();\n            dialogObj.hide();\n        };\n        window.pieTemplateClick = function () {\n            var countValue = count.toString();\n            var panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Pie Chart</div>', content: '<div id=_pie' + countValue + ' style=\"height:100%; width:100%\"></div>'\n                }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n            var pie = new ej2_charts_3.AccumulationChart({\n                series: [\n                    {\n                        dataSource: [\n                            { 'x': 'Jan', y: 12.5, text: 'January' },\n                            { 'x': 'Feb', y: 25, text: 'February' },\n                            { 'x': 'Mar', y: 50, text: 'March' },\n                        ],\n                        palettes: ['#00bdae', '#357cd2', '#e56691'],\n                        radius: '100%', xName: 'x', yName: 'y', startAngle: 0, endAngle: 360, innerRadius: '40%', name: 'Earnings',\n                        dataLabel: {\n                            visible: true,\n                            name: 'value',\n                            position: 'Inside'\n                        }\n                    }\n                ],\n                tooltip: {\n                    enable: true,\n                    header: '<b>${point.x}</b>',\n                    format: 'Composition : <b>${point.y}%</b>'\n                },\n                legendSettings: {\n                    visible: false, toggleVisibility: false\n                },\n                width: '99%',\n                height: '100%',\n                load: function (args) {\n                    var selectedTheme = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() +\n                        selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                }\n            });\n            pie.appendTo('#' + '_pie' + countValue);\n            pie.refresh();\n            dialogObj.hide();\n        };\n        window.splineTemplateClick = function () {\n            var countValue = count.toString();\n            var panel = [{\n                    'id': '_layout' + countValue, 'sizeX': 2, 'sizeY': 1, 'row': 0, 'col': 0,\n                    header: '<div>Spline Chart</div>', content: '<div id=_spline' + countValue + ' style=\"height:100%; width:100%\"></div>'\n                }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n            var chart = new ej2_charts_1.Chart({\n                primaryXAxis: {\n                    valueType: 'DateTime',\n                    majorGridLines: { width: 0 },\n                    intervalType: 'Months',\n                    labelFormat: 'MMM',\n                    edgeLabelPlacement: 'Shift'\n                },\n                primaryYAxis: {\n                    maximum: 4, interval: 1,\n                    majorTickLines: { width: 0 },\n                    minorTickLines: { width: 0 },\n                    labelFormat: '{value}',\n                    lineStyle: { width: 0 },\n                },\n                chartArea: {\n                    border: {\n                        width: 0\n                    }\n                },\n                series: [\n                    {\n                        dataSource: [\n                            { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.5 },\n                            { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.4 },\n                            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.7 },\n                            { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.9 },\n                            { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\n                        ],\n                        name: 'Jan', xName: 'x', yName: 'y', type: 'SplineArea',\n                        border: { color: 'transparent' },\n                        fill: 'rgb(239, 183, 202)',\n                        opacity: 0.5\n                    },\n                    {\n                        dataSource: [\n                            { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.8 },\n                            { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\n                            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\n                            { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.9 },\n                            { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\n                        ],\n                        name: 'Feb', xName: 'x', yName: 'y', type: 'SplineArea',\n                        border: { color: 'transparent' },\n                        fill: 'rgb(0, 189, 174)',\n                        opacity: 0.5\n                    }\n                ],\n                width: '99%',\n                height: '100%',\n                load: function (args) {\n                    var selectedTheme = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n                    args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n                        selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                }\n            });\n            chart.appendTo('#' + '_spline' + countValue);\n            chart.refresh();\n            dialogObj.hide();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/dashboard-layout/dynamic-widget/index.ts?");

/***/ })

/******/ });