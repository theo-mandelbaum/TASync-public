/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/linear-gauge/range/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/linear-gauge/range/index.ts","lineargauge.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/linear-gauge/range/index.ts":
/*!*********************************************!*\
  !*** ./samples/linear-gauge/range/index.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-lineargauge */ \"./node_modules/@syncfusion/ej2-lineargauge/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_lineargauge_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_lineargauge_1.LinearGauge.Inject(ej2_lineargauge_1.Gradient);\n    document.getElementById('horizontal').onclick = function (e) {\n        document.getElementById('containerBox').style.padding = \"0%\";\n        document.getElementById('container1').className = document.getElementById('container2').className =\n            document.getElementById('container3').className = document.getElementById('container4').className =\n                document.getElementById('container5').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n        gauge1.width = gauge2.width = gauge3.width = gauge4.width = gauge5.width = '450px';\n        gauge1.height = gauge2.height = gauge3.height = gauge4.height = gauge5.height = '150px';\n        gauge1.orientation = gauge2.orientation = gauge3.orientation = gauge4.orientation = gauge5.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n        }\n    };\n    document.getElementById('vertical').onclick = function (e) {\n        document.getElementById('containerBox').style.padding = \"4%\";\n        document.getElementById('container1').className = document.getElementById('container2').className =\n            document.getElementById('container3').className = document.getElementById('container4').className =\n                document.getElementById('container5').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\";\n        gauge1.width = gauge2.width = gauge3.width = gauge4.width = gauge5.width = '200px';\n        gauge1.height = gauge2.height = gauge3.height = gauge4.height = gauge5.height = '350px';\n        gauge1.orientation = gauge2.orientation = gauge3.orientation = gauge4.orientation = gauge5.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n        }\n    };\n    var gauge1 = new ej2_lineargauge_1.LinearGauge({\n        title: 'Default',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width: '150px',\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n                line: {\n                    width: 5\n                },\n                pointers: [{\n                        width: 0,\n                    }],\n                ranges: [{\n                        start: 0,\n                        end: 100,\n                        startWidth: 10,\n                        endWidth: 10,\n                        color: '#F45656',\n                        offset: 5\n                    }],\n                majorTicks: {\n                    interval: 20, height: 7, width: 1, position: 'Outside'\n                },\n                minorTicks: {\n                    interval: 10, height: 3, position: 'Outside'\n                },\n                minimum: 0,\n                maximum: 100,\n                opposedPosition: true,\n                labelStyle: { position: 'Outside', font: { fontFamily: 'inherit' } }\n            }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    gauge1.appendTo('#gauge1');\n    var gauge2 = new ej2_lineargauge_1.LinearGauge({\n        title: 'Exponential',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width: '150px',\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n                line: {\n                    width: 5\n                },\n                pointers: [{\n                        width: 0,\n                    }],\n                ranges: [{\n                        start: 0,\n                        end: 50,\n                        startWidth: 2,\n                        endWidth: 15,\n                        color: '#F45656',\n                        offset: 5\n                    }, {\n                        start: 50,\n                        end: 100,\n                        startWidth: 15,\n                        endWidth: 50,\n                        color: '#F45656',\n                        offset: 5\n                    }\n                ],\n                majorTicks: {\n                    interval: 20, height: 7, width: 1, position: 'Outside'\n                },\n                minorTicks: {\n                    interval: 10, height: 3, position: 'Outside'\n                },\n                minimum: 0,\n                maximum: 100,\n                opposedPosition: true,\n                labelStyle: { position: 'Outside', font: { fontFamily: 'inherit' } }\n            }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    gauge2.appendTo('#gauge2');\n    var gauge3 = new ej2_lineargauge_1.LinearGauge({\n        title: 'Concave',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width: '150px',\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n                line: {\n                    width: 5\n                },\n                pointers: [\n                    {\n                        width: 0,\n                    }\n                ],\n                ranges: [{\n                        start: 0,\n                        end: 50,\n                        color: '#F45656',\n                        startWidth: 50, endWidth: 20,\n                        offset: 5\n                    }, {\n                        start: 50,\n                        end: 100,\n                        color: '#F45656',\n                        startWidth: 20, endWidth: 50,\n                        offset: 5\n                    }\n                ],\n                minimum: 0,\n                maximum: 100,\n                opposedPosition: true,\n                majorTicks: {\n                    interval: 20, height: 7, width: 1, position: 'Outside'\n                },\n                minorTicks: {\n                    interval: 10, height: 3, position: 'Outside'\n                },\n                labelStyle: { position: 'Outside', font: { fontFamily: 'inherit' } }\n            }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    gauge3.appendTo('#gauge3');\n    var gauge4 = new ej2_lineargauge_1.LinearGauge({\n        title: 'Gradient shader',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width: '150px',\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n                line: {\n                    width: 5\n                },\n                majorTicks: {\n                    interval: 20,\n                    height: 7,\n                    width: 1,\n                    position: 'Outside'\n                },\n                minorTicks: {\n                    interval: 10,\n                    height: 3,\n                    position: 'Outside'\n                },\n                labelStyle: {\n                    position: 'Outside',\n                    font: { fontFamily: 'inherit' }\n                },\n                pointers: [\n                    {\n                        width: 0\n                    }\n                ],\n                ranges: [\n                    {\n                        start: 0,\n                        end: 100,\n                        linearGradient: {\n                            startValue: '0%',\n                            endValue: '100%',\n                            colorStop: [\n                                { color: \"#FB7D55\", offset: \"0%\", opacity: 1 },\n                                { color: \"#ECC85B\", offset: \"50%\", opacity: 1 },\n                                { color: \"#6FC78A\", offset: \"100%\", opacity: 1 }\n                            ]\n                        },\n                        startWidth: 50,\n                        endWidth: 50,\n                        offset: 5\n                    }\n                ],\n                minimum: 0,\n                maximum: 100,\n                opposedPosition: true\n            }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    gauge4.appendTo('#gauge4');\n    var gauge5 = new ej2_lineargauge_1.LinearGauge({\n        title: 'Multiple ranges',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width: '150px',\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n                line: {\n                    width: 5\n                },\n                ranges: [\n                    {\n                        start: 0,\n                        end: 30,\n                        color: '#FB7D55',\n                        startWidth: 50,\n                        endWidth: 50,\n                        offset: 5\n                    },\n                    {\n                        start: 30,\n                        end: 65,\n                        color: '#ECC85B',\n                        startWidth: 50,\n                        endWidth: 50,\n                        offset: 5\n                    },\n                    {\n                        start: 65,\n                        end: 100,\n                        color: '#6FC78A',\n                        startWidth: 50,\n                        endWidth: 50,\n                        offset: 5\n                    }\n                ],\n                majorTicks: {\n                    interval: 20,\n                    height: 7,\n                    width: 1,\n                    position: 'Outside'\n                },\n                minorTicks: {\n                    interval: 10,\n                    height: 3,\n                    position: 'Outside'\n                },\n                labelStyle: {\n                    position: 'Outside',\n                    font: { fontFamily: 'inherit' }\n                },\n                pointers: [\n                    {\n                        width: 0\n                    }\n                ],\n                minimum: 0,\n                maximum: 100,\n                opposedPosition: true\n            }],\n        load: function (args) {\n            var selectedTheme = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    gauge5.appendTo('#gauge5');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/linear-gauge/range/index.ts?");

/***/ })

/******/ });