/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/circular-gauge/pointer-ranges-drag/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/circular-gauge/pointer-ranges-drag/index.ts","circulargauge.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/circular-gauge/pointer-ranges-drag/index.ts":
/*!*************************************************************!*\
  !*** ./samples/circular-gauge/pointer-ranges-drag/index.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-circulargauge */ \"./node_modules/@syncfusion/ej2-circulargauge/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_circulargauge_1, ej2_buttons_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_circulargauge_1.CircularGauge.Inject(ej2_circulargauge_1.Annotations);\n    var content = '<div style=\"font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique; font-family: Segoe UI;\"><span>';\n    var pointerValue;\n    var circulargauge = new ej2_circulargauge_1.CircularGauge({\n        enablePointerDrag: true,\n        enableRangeDrag: false,\n        dragMove: function (args) {\n            if (isNaN(args.rangeIndex)) {\n                pointerValue = Math.round(args.currentValue);\n                document.getElementById('pointerValue').innerHTML = pointerValue.toString();\n                document.getElementById('value').value = pointerValue.toString();\n                circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');\n            }\n        },\n        dragEnd: function (args) {\n            pointerValue = Math.round(args.currentValue);\n            if (isNaN(args.rangeIndex)) {\n                setPointersValue(circulargauge, pointerValue);\n            }\n        },\n        background: 'transparent',\n        axes: [{\n                annotations: [{\n                        content: content + '70 MPH</span></div>',\n                        angle: 180, zIndex: '1',\n                        radius: '45%'\n                    }],\n                endAngle: 140,\n                startAngle: 220,\n                lineStyle: { width: 0, color: '#9E9E9E' },\n                radius: '80%', minimum: 0,\n                maximum: 120,\n                majorTicks: { useRangeColor: true },\n                minorTicks: { useRangeColor: true },\n                labelStyle: { useRangeColor: true, font: { fontFamily: 'inherit' } },\n                ranges: [{\n                        start: 0,\n                        end: 40,\n                        startWidth: 8, endWidth: 8,\n                        radius: '108%',\n                        color: '#30B32D'\n                    }, {\n                        start: 40,\n                        end: 100,\n                        startWidth: 8, endWidth: 8,\n                        radius: '108%',\n                        color: '#E5C31C'\n                    }, {\n                        start: 100, end: 120,\n                        startWidth: 8, endWidth: 8,\n                        radius: '108%',\n                        color: '#F03E3E'\n                    }],\n                pointers: [{\n                        description: 'Marker pointer value : 70',\n                        type: 'Marker', value: 70,\n                        markerShape: 'InvertedTriangle',\n                        radius: '110%',\n                        markerHeight: 20,\n                        color: '#E5C31C',\n                        markerWidth: 20\n                    }, {\n                        description: 'Needle pointer value : 70',\n                        value: 70,\n                        radius: '60%',\n                        cap: { radius: 10, border: { width: 5, color: '#E5C31C' } },\n                        needleTail: { length: '0%', color: '#E5C31C' },\n                        color: '#E5C31C',\n                        markerWidth: 5\n                    }]\n            }],\n        load: function (args) {\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    circulargauge.appendTo('#user-container');\n    function setPointersValue(circulargauge, pointerValue) {\n        var color = (0, ej2_circulargauge_1.getRangeColor)(pointerValue, (circulargauge.axes[0].ranges), circulargauge.axes[0].pointers[0].color);\n        circulargauge.axes[0].pointers[0].color = color;\n        circulargauge.axes[0].pointers[1].color = color;\n        circulargauge.axes[0].pointers[0].animation.enable = false;\n        circulargauge.axes[0].pointers[1].animation.enable = false;\n        circulargauge.axes[0].pointers[0].needleTail.color = color;\n        circulargauge.axes[0].pointers[1].needleTail.color = color;\n        circulargauge.axes[0].pointers[0].cap.border.color = color;\n        circulargauge.axes[0].pointers[1].cap.border.color = color;\n        circulargauge.setPointerValue(0, 1, pointerValue);\n        circulargauge.setPointerValue(0, 0, pointerValue);\n        content = '<div style=\"font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;\"><span>';\n        circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');\n    }\n    document.getElementById('value').ontouchmove = document.getElementById('value').onpointermove =\n        document.getElementById('value').onchange = function () {\n            var pointerValue = parseInt(document.getElementById('value').value, 10);\n            setPointersValue(circulargauge, pointerValue);\n            document.getElementById('pointerValue').innerHTML = pointerValue.toString();\n        };\n    var pointerchange;\n    var rangechange;\n    var pointerchangeCheckBox = new ej2_buttons_1.CheckBox({\n        change: pointerchange,\n        checked: true\n    }, '#enable');\n    pointerchangeCheckBox.change = pointerchange = function (e) {\n        var boolean = e.checked;\n        circulargauge.enablePointerDrag = boolean;\n    };\n    var rangechangeCheckBox = new ej2_buttons_1.CheckBox({\n        change: rangechange\n    }, '#enable1');\n    rangechangeCheckBox.change = rangechange = function (e) {\n        var boolean = e.checked;\n        circulargauge.enableRangeDrag = boolean;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/circular-gauge/pointer-ranges-drag/index.ts?");

/***/ })

/******/ });