/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/redaction/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/redaction/index.ts","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/redaction/index.ts":
/*!**********************************************!*\
  !*** ./samples/pdfviewer/redaction/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-pdfviewer */ \"./node_modules/@syncfusion/ej2-pdfviewer/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2/dropdowns */ \"./node_modules/@syncfusion/ej2/dropdowns.ts\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_pdfviewer_1, ej2_navigations_1, ej2_buttons_1, ej2_navigations_2, dropdowns_1, ej2_inputs_1, ej2_popups_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_pdfviewer_1.PdfViewer.Inject(ej2_navigations_2.Toolbar, ej2_pdfviewer_1.Magnification, ej2_pdfviewer_1.Navigation, ej2_pdfviewer_1.LinkAnnotation, ej2_pdfviewer_1.BookmarkView, ej2_pdfviewer_1.ThumbnailView, ej2_pdfviewer_1.Print, ej2_pdfviewer_1.TextSelection, ej2_pdfviewer_1.TextSearch, ej2_pdfviewer_1.Annotation, ej2_pdfviewer_1.FormFields, ej2_pdfviewer_1.FormDesigner, ej2_pdfviewer_1.PageOrganizer, ej2_navigations_1.AppBar, ej2_buttons_1.Button);\n    var viewer = new ej2_pdfviewer_1.PdfViewer();\n    document.getElementById('defaultButtonDownload').addEventListener('click', downloadClicked);\n    viewer.documentPath = \"https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf\";\n    viewer.resourceUrl = \"https://cdn.syncfusion.com/ej2/27.1.55/dist/ej2-pdfviewer-lib\";\n    var defaultAppBarObj = new ej2_navigations_1.AppBar({\n        colorMode: 'Primary'\n    });\n    defaultAppBarObj.appendTo('#defaultAppBar');\n    var defaultButtonDownloadObj = new ej2_buttons_1.Button({ cssClass: 'e-inherit', iconCss: 'e-icons e-download e-btn-icon e-icon-left', content: 'Download' });\n    defaultButtonDownloadObj.appendTo('#defaultButtonDownload');\n    var redactionCount = 0;\n    var annotation;\n    var fileName = \"programmatical-annotations.pdf\";\n    var url = \"https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/Redaction\";\n    var primaryToolbarObj = new ej2_navigations_2.Toolbar({\n        items: [\n            { prefixIcon: 'e-icon e-folder', tooltipText: 'Open', cssClass: 'e-pv-open-container', id: 'pdfviewer_open', text: 'Open', click: openDocumentClicked.bind(this) },\n            {\n                type: 'Separator', id: 'separator1'\n            },\n            {\n                prefixIcon: 'e-icon e-text-annotation', tooltipText: 'Text', cssClass: 'e-pv-font-container', text: 'Text', click: addText.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons e-image', tooltipText: 'Image', cssClass: 'e-pv-image-container', text: 'Image', id: 'targetButton'\n            },\n            {\n                prefixIcon: 'e-icons e-opacity', tooltipText: 'Pattern', cssClass: 'e-pv-pattern-container', text: 'Pattern', click: addPattern.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons black-out', tooltipText: 'Black out', cssClass: 'e-pv-redact-sb-black-out-container', text: 'Blackout', click: addBlackout.bind(this)\n            },\n            {\n                prefixIcon: 'e-icons white-out', tooltipText: 'White Out', cssClass: 'e-pv-redact-sb-white-out-container', text: 'Whiteout', click: addWhiteout.bind(this)\n            },\n            {\n                type: 'Separator'\n            },\n            {\n                prefixIcon: 'e-icons e-redact', cssClass: 'e-pv-redaction-container', tooltipText: 'Redaction', text: 'Redact', id: 'redacticon', click: redaction.bind(this), disabled: true\n            }\n        ]\n    });\n    primaryToolbarObj.appendTo('#e-pv-redact-sb-toolbar');\n    var CurrentpageNumber = '<div><span id=\"e-pv-redact-sb-currentPage\" title=\"Current Page\">1 </span><span id=\"e-pv-redact-sb-totalPage\" title=\"Total Page\">/ 1</span></div>';\n    var zoomList = ['10%', '25%', '50%', '75%', '100%', '200%', '400%'];\n    var secondaryToolbarObj = new ej2_navigations_2.Toolbar({\n        items: [\n            {\n                prefixIcon: 'e-icon e-chevron-left', cssClass: 'e-pv-previous-container', id: 'previousPage', tooltipText: 'Previous Page', click: previousClicked.bind(this), disabled: true\n            },\n            {\n                template: CurrentpageNumber\n            },\n            {\n                prefixIcon: 'e-icon e-chevron-right', cssClass: 'e-pv-next-container', id: 'nextPage', tooltipText: 'Next Page', click: nextClicked.bind(this), disabled: true\n            },\n            {\n                type: 'Separator'\n            },\n            {\n                type: 'Input', tooltipText: 'Zoom', cssClass: 'percentage', align: 'Left', template: new dropdowns_1.ComboBox({ width: 88, value: '100%', dataSource: zoomList, popupWidth: 85, showClearButton: false, readonly: false, change: zoomValueChange.bind(this) }), id: 'zoomBox'\n            }\n        ]\n    });\n    secondaryToolbarObj.appendTo(\"#e-pv-redact-sb-toolbar-secondary\");\n    var icontemp = '<button id=\"cancelButton\" class=\"e-control e-btn e-primary\" data-ripple=\"true\">' + 'Cancel</button>';\n    var headerimg = '<span class=\"header-content\"></span>';\n    var cancelButton = new ej2_buttons_1.Button();\n    var dialog = new ej2_popups_1.Dialog({\n        header: headerimg + '<div id=\"dlg-template\" title=\"upload\" class=\"e-icon-settings\"> Upload Image </div>',\n        footerTemplate: icontemp,\n        showCloseIcon: true,\n        visible: false,\n        target: '#e-pv-redact-sb-panel',\n        width: '477px',\n        isModal: true\n    });\n    dialog.appendTo(\"#e-pv-redact-sb-dialog\");\n    cancelButton.appendTo(\"#cancelButton\");\n    document.getElementById(\"targetButton\").onclick = function () {\n        dialog.show();\n    };\n    document.getElementById(\"cancelButton\").onclick = function () {\n        dialog.hide();\n    };\n    var customStampSource = \"\";\n    var dropElement = document.getElementsByClassName('drop-area-wrap')[0];\n    var uploadObj = new ej2_inputs_1.Uploader({\n        asyncSettings: {\n            saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save',\n            removeUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove',\n        },\n        dropArea: dropElement,\n        change: onFileChange,\n        allowedExtensions: '.png, .jpg, .jpeg',\n        multiple: false\n    });\n    uploadObj.appendTo('#fileupload');\n    function handleImageClick(args) {\n        customStampSource = imageSrc;\n        dialog.hide();\n        addImage();\n    }\n    var imageSrc;\n    function onFileChange(args) {\n        var file = args.file[0].rawFile;\n        var imageElement = document.getElementById('imageView');\n        var imageElementContainer = document.getElementById('imageContainer');\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var _a;\n            var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n            imageSrc = base64String;\n            customStampSource = imageSrc;\n            imageElement.src = imageSrc;\n            imageElementContainer.className =\n                'image-container e-pv-redact-sb-image-container-selected';\n            imageElement.style.display = 'block';\n            imageElement.addEventListener('click', handleImageClick);\n        };\n        reader.readAsDataURL(file);\n    }\n    viewer.appendTo('#pdfViewer');\n    document.getElementById('fileUpload').addEventListener('change', readFile, false);\n    var currentPageBox;\n    currentPageBox = document.getElementById('e-pv-redact-sb-currentPage');\n    currentPageBox.textContent = '1' + ' ';\n    var totalPageBox;\n    totalPageBox = document.getElementById('e-pv-redact-sb-totalPage');\n    totalPageBox.value = '1';\n    viewer.documentLoad = function (args) {\n        document.getElementById('e-pv-redact-sb-totalPage').textContent = ' / ' + viewer.pageCount;\n        (document.getElementById('e-pv-redact-sb-currentPage')).textContent = viewer.currentPageNumber.toString();\n        updatePageNavigation();\n        updateRedaction();\n    };\n    viewer.annotationAdd = function (args) {\n        var pdfAnnotationList = new Array();\n        pdfAnnotationList = viewer.annotationCollection;\n        var selectedAnnotationIndex = pdfAnnotationList.findIndex(function (item) { return item.annotationId == args.annotationId; });\n        if (selectedAnnotationIndex != -1) {\n            annotation = pdfAnnotationList[selectedAnnotationIndex];\n        }\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount + 1;\n            updateRedaction();\n        }\n    };\n    viewer.annotationRemove = function (args) {\n        if (annotation.author == \"Redaction\" || annotation.customStampName == \"Image\" || annotation.author == \"Pattern\" || annotation.author == \"Text\") {\n            redactionCount = redactionCount - 1;\n            updateRedaction();\n        }\n    };\n    viewer.pageChange = function (args) {\n        currentPageBox.value = viewer.currentPageNumber.toString();\n        (document.getElementById('e-pv-redact-sb-currentPage')).textContent = viewer.currentPageNumber.toString() + ' ';\n        updatePageNavigation();\n    };\n    function updatePageNavigation() {\n        if (viewer.currentPageNumber === 1) {\n            secondaryToolbarObj.items[0].disabled = true;\n            secondaryToolbarObj.items[2].disabled = false;\n        }\n        else if (viewer.currentPageNumber === viewer.pageCount) {\n            secondaryToolbarObj.items[0].disabled = false;\n            secondaryToolbarObj.items[2].disabled = true;\n        }\n        else {\n            secondaryToolbarObj.items[0].disabled = false;\n            secondaryToolbarObj.items[2].disabled = false;\n        }\n    }\n    function updateRedaction() {\n        if (redactionCount <= 0) {\n            primaryToolbarObj.items[8].disabled = true;\n        }\n        else {\n            primaryToolbarObj.items[8].disabled = false;\n        }\n    }\n    function nextClicked(args) {\n        viewer.navigation.goToNextPage();\n    }\n    function previousClicked(args) {\n        viewer.navigation.goToPreviousPage();\n    }\n    function zoomValueChange(args) {\n        var zoom = args.value;\n        var previousZoom = args.previousItemData.value;\n        if (zoom !== null || previousZoom !== null) {\n            var zoomchange = parseInt(zoom.replace(\"%\", \"\"), 10);\n            viewer.magnificationModule.zoomTo(zoomchange);\n        }\n    }\n    function downloadClicked() {\n        viewer.saveAsBlob().then(function (value) {\n            var reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                var _a;\n                var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                var requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        var blobUrl = createBlobUrl(xhr.responseText.split('base64,')[1], 'application/pdf');\n                        downloadDocument(blobUrl);\n                    }\n                    else {\n                        console.error('Download failed:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('An error occurred during the download:', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    }\n    function createBlobUrl(base64String, contentType) {\n        var sliceSize = 512;\n        var byteCharacters = atob(base64String);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[parseInt(i.toString(), 10)] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        var blob = new Blob(byteArrays, { type: contentType });\n        return blob;\n    }\n    function downloadDocument(blobUrl) {\n        var Url = URL || webkitURL;\n        blobUrl = Url.createObjectURL(blobUrl);\n        viewer.fileName = fileName;\n        var anchorElement = document.createElement('a');\n        if (anchorElement.click) {\n            anchorElement.href = blobUrl;\n            anchorElement.target = '_parent';\n            if ('download' in anchorElement) {\n                var downloadFileName = viewer.fileName || 'downloadedFile.pdf';\n                if (downloadFileName) {\n                    if (downloadFileName.endsWith('.pdf')) {\n                        anchorElement.download = downloadFileName;\n                    }\n                    else {\n                        var splitPdf = downloadFileName.split('.pdf')[0] + '.pdf';\n                        anchorElement.download = splitPdf;\n                    }\n                }\n                else {\n                    anchorElement.download = 'Default.pdf';\n                }\n            }\n            (document.body || document.documentElement).appendChild(anchorElement);\n            anchorElement.click();\n        }\n        else {\n            if (window.top === window &&\n                blobUrl.split('#')[0] === window.location.href.split('#')[0]) {\n                var padCharacter = blobUrl.indexOf('?') === -1 ? '?' : '&';\n                blobUrl = blobUrl.replace(/#|$/, padCharacter + '$&');\n            }\n            window.open(blobUrl, '_parent');\n        }\n    }\n    function readFile(args) {\n        var upoadedFiles = args.target.files;\n        if (args.target.files[0] !== null) {\n            var uploadedFile = upoadedFiles[0];\n            if (uploadedFile) {\n                var reader = new FileReader();\n                fileName = upoadedFiles[0].name;\n                reader.readAsDataURL(uploadedFile);\n                reader.onload = function (e) {\n                    var uploadedFileUrl = e.currentTarget.result;\n                    viewer.documentPath = uploadedFileUrl;\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                };\n            }\n        }\n    }\n    function openDocumentClicked(args) {\n        var textSearchToolbarElement = document.getElementById('textSearchToolbar');\n        if (textSearchToolbarElement !== null && textSearchToolbarElement.style.display === 'block') {\n            textSearchToolbarElement.style.display = 'none';\n        }\n        document.getElementById('fileUpload').click();\n    }\n    function addText(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#a3a2a0',\n            strokeColor: '#a3a2a0',\n            author: 'Text'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n    }\n    function addImage() {\n        viewer.stampSettings.author = \"Image\";\n        viewer.customStampSettings = {\n            width: 200,\n            author: 'Image',\n            height: 125,\n            isAddToMenu: false,\n            enableCustomStamp: false\n        };\n        viewer.customStamp = [\n            {\n                customStampName: 'Image',\n                customStampImageSource: customStampSource\n            },\n        ];\n    }\n    function addPattern(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#dedfe0',\n            strokeColor: '#dedfe0',\n            author: 'Pattern'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n    }\n    function addBlackout(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#000000',\n            strokeColor: '#000000',\n            author: 'Redaction'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n    }\n    function addWhiteout(args) {\n        viewer.rectangleSettings = {\n            fillColor: '#ffffff',\n            strokeColor: '#ffffff',\n            author: 'Redaction'\n        };\n        viewer.annotation.setAnnotationMode('Rectangle');\n    }\n    function redaction() {\n        if (redactionCount > 0) {\n            viewer.saveAsBlob().then(function (value) {\n                var data = value;\n                var reader = new FileReader();\n                reader.readAsDataURL(data);\n                reader.onload = function (e) {\n                    var _a;\n                    var base64String = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                    var xhr = new XMLHttpRequest();\n                    xhr.open('POST', url, true);\n                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                    var requestData = JSON.stringify({ base64String: base64String });\n                    xhr.onload = function () {\n                        if (xhr.status === 200) {\n                            viewer.load(xhr.responseText, null);\n                        }\n                        else {\n                            console.error('Redaction failed:', xhr.statusText);\n                        }\n                    };\n                    xhr.onerror = function () {\n                        console.error('An error occurred during the redaction:', xhr.statusText);\n                    };\n                    xhr.send(requestData);\n                };\n            });\n            redactionCount = 0;\n            updateRedaction();\n        }\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/redaction/index.ts?");

/***/ })

/******/ });