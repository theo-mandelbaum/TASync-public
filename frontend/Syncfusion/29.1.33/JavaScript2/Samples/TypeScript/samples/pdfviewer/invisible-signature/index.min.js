/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/invisible-signature/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/invisible-signature/index.ts","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/invisible-signature/index.ts":
/*!********************************************************!*\
  !*** ./samples/pdfviewer/invisible-signature/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-pdfviewer */ \"./node_modules/@syncfusion/ej2-pdfviewer/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-notifications/src/message/message */ \"./node_modules/@syncfusion/ej2-notifications/src/message/message.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_pdfviewer_1, ej2_navigations_1, message_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_pdfviewer_1.PdfViewer.Inject(ej2_pdfviewer_1.FormDesigner, ej2_pdfviewer_1.FormFields, ej2_pdfviewer_1.Toolbar, ej2_pdfviewer_1.Magnification, ej2_pdfviewer_1.Navigation, ej2_pdfviewer_1.LinkAnnotation, ej2_pdfviewer_1.Annotation, ej2_pdfviewer_1.BookmarkView, ej2_pdfviewer_1.ThumbnailView, ej2_pdfviewer_1.Print, ej2_pdfviewer_1.TextSearch, ej2_pdfviewer_1.PageOrganizer);\n    var toolbarObj;\n    var viewer;\n    var msgWarning;\n    var msgError;\n    var msgSuccess;\n    var buttonVisibility = true;\n    var downloadVisibility = true;\n    var successVisible = false;\n    var errorVisible = false;\n    var warningVisible = false;\n    var documentData;\n    var fileName;\n    var hasDigitalSignature = false;\n    function downloadClicked(args) {\n        viewer.download();\n    }\n    function openDocument(e) {\n        document.getElementById('fileUpload').click();\n    }\n    function signDocument(e) {\n        var url = \"https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/AddSignature\";\n        viewer.saveAsBlob().then(function (value) {\n            var reader = new FileReader();\n            reader.readAsDataURL(value);\n            reader.onload = function (e) {\n                var base64String = e.target ? e.target.result : null;\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url, true);\n                xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                var requestData = JSON.stringify({ base64String: base64String });\n                xhr.onload = function () {\n                    if (xhr.status === 200) {\n                        documentData = xhr.responseText;\n                        viewer.load(xhr.responseText, null);\n                        toolbarObj.items[1].disabled = true;\n                        toolbarObj.items[2].disabled = false;\n                        viewer.fileName = fileName;\n                        viewer.downloadFileName = fileName;\n                    }\n                    else {\n                        console.error('Error in AddSignature API:', xhr.statusText);\n                    }\n                };\n                xhr.onerror = function () {\n                    console.error('Error reading Blob as Base64.', xhr.statusText);\n                };\n                xhr.send(requestData);\n            };\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    }\n    function readFile(args) {\n        var upoadedFiles = args.target.files;\n        if (args.target.files[0] !== null) {\n            var uploadedFile = upoadedFiles[0];\n            if (uploadedFile) {\n                var reader = new FileReader();\n                fileName = upoadedFiles[0].name;\n                reader.readAsDataURL(uploadedFile);\n                reader.onload = function (e) {\n                    toolbarObj.items[2].disabled = true;\n                    var uploadedFileUrl = e.currentTarget.result;\n                    documentData = uploadedFileUrl;\n                    viewer.load(uploadedFileUrl, null);\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                };\n            }\n        }\n    }\n    toolbarObj = new ej2_navigations_1.Toolbar({\n        items: [\n            { prefixIcon: 'e-icons e-folder-open', cssClass: \"e-pv-open-document-container\", tooltipText: 'Open file', id: 'openButton', click: openDocument.bind(this), align: \"Left\" },\n            { text: \"Complete Signing\", width: \"150px\", disabled: buttonVisibility, align: \"Right\", tooltipText: \"Finish Signing\", id: \"pdfviewer_sign\", click: signDocument.bind(this), cssClass: \"e-pv-button-container\" },\n            { prefixIcon: 'e-icons e-download', tooltipText: 'Download', align: 'Right', click: downloadClicked.bind(this), disabled: downloadVisibility, cssClass: \"e-pv-download-document-container\" }\n        ]\n    });\n    toolbarObj.appendTo('#topToolbar');\n    viewer = new ej2_pdfviewer_1.PdfViewer({\n        enableToolbar: false,\n        enableNavigationToolbar: false,\n        enableThumbnail: false,\n        enableAnnotationToolbar: false,\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/InvisibleDigitalSignature.pdf\",\n        resourceUrl: \"https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib\"\n    });\n    viewer.enableTextSelection = false;\n    viewer.downloadFileName = 'InvisibleDigitalSignature.pdf';\n    viewer.addSignature = function (args) {\n        var field;\n        field = viewer.retrieveFormFields();\n        var signatureFieldCount = 0;\n        var signaturesCount = 0;\n        for (var i = 0; i < field.Count; i++) {\n            if (field[i].Type.ToString() == (\"SignatureField\")) {\n                signatureFieldCount++;\n            }\n            if (field[i].Value != \"\" && field[i].Value != null && field[i].Type.ToString() == (\"SignatureField\")) {\n                signaturesCount++;\n            }\n        }\n        if (signatureFieldCount == signaturesCount) {\n            if (!hasDigitalSignature) {\n                buttonVisibility = false;\n                toolbarObj.items[1].disabled = false;\n            }\n        }\n    };\n    viewer.documentLoad = function (args) {\n        fileName = args.documentName;\n        var postData = {\n            documentData: documentData\n        };\n        var options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(postData)\n        };\n        var apiUrl = 'https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/ValidateSignature';\n        fetch(apiUrl, options)\n            .then(function (response) { return response.json(); })\n            .then(function (body) {\n            if (body.successVisible || body.warningVisible || body.errorVisible)\n                toolbarObj.items[1].disabled = true;\n            if (!body.downloadVisibility)\n                toolbarObj.items[2].disabled = false;\n            if ((body.successVisible)) {\n                setTimeout(function () {\n                    msgSuccess.content = body.message;\n                    msgSuccess.visible = true;\n                }, 1000);\n                setTimeout(function () {\n                    msgSuccess.visible = false;\n                }, 5000);\n            }\n            if ((body.warningVisible)) {\n                msgWarning.content = body.message;\n                msgWarning.visible = true;\n            }\n            if (body.errorVisible) {\n                msgError.content = body.message;\n                msgError.visible = true;\n            }\n        });\n    };\n    viewer.appendTo('#pdfViewer');\n    document.getElementById('fileUpload').addEventListener('change', readFile, false);\n    msgSuccess = new message_1.Message({\n        severity: \"Success\",\n        visible: successVisible\n    });\n    msgSuccess.appendTo('#msg_success');\n    msgWarning = new message_1.Message({\n        severity: \"Warning\",\n        visible: warningVisible\n    });\n    msgWarning.appendTo('#msg_warning');\n    msgError = new message_1.Message({\n        severity: \"Error\",\n        visible: errorVisible\n    });\n    msgError.appendTo('#msg_error');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/invisible-signature/index.ts?");

/***/ })

/******/ });