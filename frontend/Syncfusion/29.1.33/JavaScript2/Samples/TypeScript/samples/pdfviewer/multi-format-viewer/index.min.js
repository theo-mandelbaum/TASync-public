/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/multi-format-viewer/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/multi-format-viewer/index.ts","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/multi-format-viewer/index.ts":
/*!********************************************************!*\
  !*** ./samples/pdfviewer/multi-format-viewer/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-progressbar */ \"./node_modules/@syncfusion/ej2-progressbar/index.js\"), __webpack_require__(/*! @syncfusion/ej2-pdfviewer */ \"./node_modules/@syncfusion/ej2-pdfviewer/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_base_2, ej2_inputs_1, ej2_buttons_1, ej2_progressbar_1, ej2_pdfviewer_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_pdfviewer_1.PdfViewer.Inject(ej2_pdfviewer_1.Toolbar, ej2_pdfviewer_1.Magnification, ej2_pdfviewer_1.Navigation, ej2_pdfviewer_1.LinkAnnotation, ej2_pdfviewer_1.BookmarkView, ej2_pdfviewer_1.ThumbnailView, ej2_pdfviewer_1.Print, ej2_pdfviewer_1.TextSelection, ej2_pdfviewer_1.TextSearch, ej2_pdfviewer_1.Annotation, ej2_pdfviewer_1.FormFields, ej2_pdfviewer_1.FormDesigner, ej2_pdfviewer_1.PageOrganizer);\n    var button = new ej2_buttons_1.Button();\n    button.appendTo('#browse');\n    var uploadProgressValue = 0;\n    var pdfViewerProgressValue = 0;\n    var extensions = ['doc', 'docx', 'rtf', 'docm', 'dotm', 'dotx', 'dot', 'xls', 'xlsx', 'pptx', 'pptm', 'potx', 'potm', 'jpeg', 'png', 'bmp', 'pdf', 'jpg'];\n    var viewer = new ej2_pdfviewer_1.PdfViewer({\n        documentLoad: documentLoaded,\n        ajaxRequestSuccess: ajaxRequestSuccess,\n    });\n    viewer.resourceUrl = \"https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib\";\n    viewer.toolbarSettings = {\n        showTooltip: true,\n        toolbarItems: [\n            'UndoRedoTool',\n            'PageNavigationTool',\n            'MagnificationTool',\n            'PanTool',\n            'SelectionTool',\n            'CommentTool',\n            'SubmitForm',\n            'SearchOption',\n            'AnnotationEditTool',\n            'FormDesignerEditTool',\n            'PrintOption',\n            'DownloadOption'\n        ]\n    };\n    viewer.zoomMode = 'FitToPage';\n    viewer.appendTo('#pdfViewer');\n    var progressLoad = function (args) {\n        var selectedTheme = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.progressBar.theme = ((selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1))\n            .replace(/-dark/i, 'Dark')\n            .replace(/contrast/i, 'Contrast'));\n        if (selectedTheme === 'fabric') {\n            args.progressBar.secondaryProgressColor = '#b0d0e9';\n        }\n        else if (selectedTheme === 'material-dark') {\n            args.progressBar.secondaryProgressColor = '#b8b8b8';\n        }\n        else if (selectedTheme === 'material') {\n            args.progressBar.secondaryProgressColor = '#f087ab';\n        }\n        else if (selectedTheme === 'bootstrap5-dark') {\n            args.progressBar.secondaryProgressColor = '#2b5288';\n        }\n        else if (selectedTheme === 'bootstrap5') {\n            args.progressBar.secondaryProgressColor = '#98c5f5';\n        }\n        else if (selectedTheme === 'bootstrap') {\n            args.progressBar.secondaryProgressColor = '#acc6dc';\n        }\n        else if (selectedTheme === 'bootstrap4') {\n            args.progressBar.secondaryProgressColor = '#98c5f5';\n        }\n        else if (selectedTheme === 'bootstrap-dark') {\n            args.progressBar.secondaryProgressColor = '#b8b8b8';\n        }\n        else if (selectedTheme === 'highcontrast') {\n            args.progressBar.secondaryProgressColor = '#aca379';\n        }\n        else if (selectedTheme === 'fluent-dark') {\n            args.progressBar.secondaryProgressColor = '#2b5288';\n        }\n        else if (selectedTheme === 'fluent') {\n            args.progressBar.secondaryProgressColor = '#98c5f5';\n        }\n        else if (selectedTheme === 'tailwind-dark') {\n            args.progressBar.secondaryProgressColor = '#386e7f';\n        }\n        else if (selectedTheme === 'tailwind') {\n            args.progressBar.secondaryProgressColor = '#b1afe9';\n        }\n    };\n    var uploadProgress = new ej2_progressbar_1.ProgressBar({\n        type: 'Linear',\n        height: '60',\n        width: '250',\n        animation: {\n            enable: false,\n            duration: 0,\n            delay: 0,\n        },\n        load: progressLoad,\n    });\n    uploadProgress.appendTo('#progressbar');\n    var dropElement = document.getElementById('dropArea');\n    var uploadObj = new ej2_inputs_1.Uploader({\n        dropArea: document.getElementById('dropArea'),\n        selected: onSelect,\n        multiple: false,\n        allowedExtensions: '.doc, .docx, .rtf, .docm, .dotm, .dotx, .dot, .xls, .xlsx, .pptx, .pptm, .potx, .potm .jpeg, .png, .bmp, .pdf, .jpg',\n    });\n    uploadObj.appendTo('#fileupload');\n    var parentElement;\n    document.getElementById('browse').onclick = function () {\n        document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n        return false;\n    };\n    var switchObj = new ej2_buttons_1.Switch({ value: 'Standalone Rendering', checked: true });\n    switchObj.appendTo('#checked');\n    switchObj.change = function (args) {\n        if (args.checked) {\n            viewer.serviceUrl = '';\n        }\n        else {\n            viewer.serviceUrl = 'https://ej2services.syncfusion.com/production/web-services/api/pdfviewer';\n        }\n        viewer.dataBind();\n        viewer.load(viewer.documentPath, null);\n    };\n    function onSelect(args) {\n        uploadProgress.value = 0;\n        uploadProgress.refresh();\n        var progressBarContainer = document.getElementById(\"progressbarContainer\");\n        var progressBar = document.getElementById(\"linearProgressBar\");\n        var progressMessage = document.getElementById(\"uploadedMessage\");\n        var fileSupportMessage = document.getElementById(\"fileSupportMessage\");\n        var fileDetails = document.getElementById(\"file-details\");\n        var fileSizeValidation = document.getElementById(\"fileSizeValidation\");\n        progressBarContainer.style.display = \"block\";\n        progressBar.style.display = \"flex\";\n        progressMessage.style.display = \"none\";\n        fileSupportMessage.style.display = \"none\";\n        fileSizeValidation.style.display = \"none\";\n        if (!dropElement.querySelector('li')) {\n            uploadObj.filesData = [];\n        }\n        if ((0, ej2_base_2.isNullOrUndefined)(dropElement.querySelector('.e-upload-files'))) {\n            parentElement = (0, ej2_base_2.createElement)('ul', { className: 'e-upload-files' });\n            document.getElementsByClassName('e-upload')[0].appendChild(parentElement);\n        }\n        var validFiles = args.filesData;\n        if (validFiles.length === 0) {\n            progressBarContainer.style.display = \"block\";\n            progressBar.style.display = \"none\";\n            if (document.getElementById('pdfviewer-container').style.display === \"block\") {\n                progressMessage.style.display = \"block\";\n                fileDetails.style.display = \"block\";\n            }\n            args.cancel = true;\n            return;\n        }\n        if (!extensions.includes(validFiles[0].type)) {\n            fileSupportMessage.style.display = \"block\";\n            progressBar.style.display = \"none\";\n            fileDetails.style.display = \"none\";\n            args.cancel = true;\n            return;\n        }\n        if (validFiles[0].type != \"pdf\" && validFiles[0].size > 4000000) {\n            fileSizeValidation.style.display = \"block\";\n            progressBar.style.display = \"none\";\n            fileDetails.style.display = \"none\";\n            args.cancel = true;\n            return;\n        }\n        fileDetails.style.display = \"block\";\n        document.getElementById(\"fileName\").innerHTML = args.filesData[0].name;\n        viewer.downloadFileName = args.filesData[0].name;\n        viewer.exportAnnotationFileName = args.filesData[0].name;\n        var size = document.getElementById(\"fileSize\");\n        if ((args.filesData[0].size.toString()).length <= 6) {\n            size.innerHTML = ((args.filesData[0].size / 1024).toFixed(1)).toString() + \" KB\";\n        }\n        else {\n            var kbsize = args.filesData[0].size / 1024;\n            size.innerHTML = ((kbsize / 1024).toFixed(1)).toString() + \" MB\";\n        }\n        formSelectedData(validFiles[0], uploadObj);\n        uploadObj.filesData = uploadObj.filesData.concat(validFiles);\n        args.cancel = true;\n    }\n    function formSelectedData(file, proxy) {\n        var liEle = (0, ej2_base_2.createElement)('li', {\n            className: 'e-upload-file-list',\n            attrs: {\n                'data-file-name': file.name\n            },\n        });\n        readURL(liEle, file);\n        proxy.fileList.push(liEle);\n    }\n    function readURL(li, args) {\n        var file = args.rawFile;\n        var reader = new FileReader();\n        var type = args.type;\n        reader.addEventListener('load', function () {\n            var post = JSON.stringify({\n                'data': reader.result,\n                'type': type\n            });\n            var url = \"https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/LoadFile\";\n            var xhr = new XMLHttpRequest();\n            xhr.open('Post', url, true);\n            xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n            xhr.upload.addEventListener('progress', function (event) {\n                if (event.lengthComputable) {\n                    var progressValue = Math.round((event.loaded / event.total) * 100);\n                    uploadProgressValue = progressValue;\n                    var totalProgress = calculateTotalProgress();\n                    updateProgressBar(totalProgress);\n                    document.getElementById(\"progress-status\").innerHTML = totalProgress.toString() + \"%\";\n                }\n            });\n            xhr.onload = function (args) {\n                viewer.documentPath = this.responseText;\n                pdfViewerProgressValue = 60;\n                var totalProgress = calculateTotalProgress();\n                updateProgressBar(totalProgress);\n                document.getElementById(\"progress-status\").innerHTML = totalProgress.toString() + \"%\";\n                document.getElementById('pdfviewer-container').style.display = \"block\";\n            };\n            xhr.send(post);\n        }, false);\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n    function documentLoaded() {\n        var progressValue = document.getElementById(\"progress-status\");\n        pdfViewerProgressValue = 100;\n        var totalProgress = calculateTotalProgress();\n        updateProgressBar(totalProgress);\n        progressValue.innerHTML = totalProgress.toString() + \"%\";\n        setTimeout(function () {\n            document.getElementById(\"linearProgressBar\").style.display = \"none\";\n            document.getElementById(\"uploadedMessage\").style.display = \"block\";\n            uploadProgressValue = 0;\n            pdfViewerProgressValue = 0;\n            progressValue.innerHTML = \"0%\";\n        }, 1000);\n    }\n    function calculateTotalProgress() {\n        var totalProgress = (uploadProgressValue + pdfViewerProgressValue) / 2;\n        return totalProgress;\n    }\n    function updateProgressBar(progress) {\n        uploadProgress.value = progress;\n        uploadProgress.dataBind();\n    }\n    function ajaxRequestSuccess(args) {\n        var progressValue = document.getElementById(\"progress-status\");\n        if (args.action === \"Load\") {\n            pdfViewerProgressValue = 70;\n            var totalProgress = calculateTotalProgress();\n            updateProgressBar(totalProgress);\n            progressValue.innerHTML = totalProgress.toString() + \"%\";\n        }\n        if (args.action === \"RenderPdfPages\") {\n            if (pdfViewerProgressValue < 90) {\n                pdfViewerProgressValue = pdfViewerProgressValue + 10;\n                var totalProgress = calculateTotalProgress();\n                updateProgressBar(totalProgress);\n                progressValue.innerHTML = totalProgress.toString() + \"%\";\n            }\n        }\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/multi-format-viewer/index.ts?");

/***/ })

/******/ });