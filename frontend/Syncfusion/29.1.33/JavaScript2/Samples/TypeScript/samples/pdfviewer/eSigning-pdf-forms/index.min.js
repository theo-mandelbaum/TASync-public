/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/pdfviewer/eSigning-pdf-forms/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/pdfviewer/eSigning-pdf-forms/index.ts","pdfviewer.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/pdfviewer/eSigning-pdf-forms/index.ts":
/*!*******************************************************!*\
  !*** ./samples/pdfviewer/eSigning-pdf-forms/index.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-pdfviewer */ \"./node_modules/@syncfusion/ej2-pdfviewer/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_pdfviewer_1, ej2_dropdowns_1, ej2_buttons_1, ej2_navigations_1, ej2_popups_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_pdfviewer_1.PdfViewer.Inject(ej2_pdfviewer_1.Toolbar, ej2_pdfviewer_1.Magnification, ej2_pdfviewer_1.Navigation, ej2_pdfviewer_1.LinkAnnotation, ej2_pdfviewer_1.BookmarkView, ej2_pdfviewer_1.ThumbnailView, ej2_pdfviewer_1.Print, ej2_pdfviewer_1.TextSelection, ej2_pdfviewer_1.TextSearch, ej2_pdfviewer_1.Annotation, ej2_pdfviewer_1.FormFields, ej2_pdfviewer_1.FormDesigner, ej2_pdfviewer_1.PageOrganizer);\n    var userDetails = [\n        {\n            Name: 'Andrew Fuller',\n            Eimg: 'profile1',\n            Mail: 'andrew@mycompany.com',\n            fieldIds: [],\n        },\n        {\n            Name: 'Anne Dodsworth',\n            Eimg: 'profile2',\n            Mail: 'anne@mycompany.com',\n            fieldIds: [],\n        },\n    ];\n    var currentUser = 'andrew@mycompany.com';\n    var isStatus = false;\n    var isPreventChange = false;\n    var finishedBackground = '#daeaf7';\n    var anneBackground = '#eff7ef';\n    var andrewBackground = '#ffefef';\n    var viewer = new ej2_pdfviewer_1.PdfViewer({\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf\",\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib',\n        documentLoad: documentLoaded,\n    });\n    viewer.enableToolbar = false;\n    viewer.enableNavigationToolbar = false;\n    viewer.enableAnnotationToolbar = false;\n    viewer.designerMode = true;\n    viewer.downloadFileName = 'eSign_filling.pdf';\n    viewer.zoomMode = \"FitToPage\";\n    viewer.appendTo('#pdfViewer');\n    var toolbarObj = new ej2_navigations_1.Toolbar({\n        overflowMode: 'Popup',\n        cssClass: 'template',\n        items: [\n            {\n                type: 'Input',\n                align: 'Left',\n                template: \"<div id='user-field' style='width: 200px;'><div class='user-dropdown' style='width: 200px;'> <input id='userMenu' width='200px'></input></div></div>\",\n            },\n            {\n                type: 'Input',\n                align: 'Right',\n                template: \"<div> <button id='finish-btn'>Finish Signing</button></div>\",\n            },\n        ],\n    });\n    toolbarObj.appendTo('#toolbar_user_viewer');\n    var listObj = new ej2_dropdowns_1.DropDownList({\n        dataSource: userDetails,\n        fields: { text: 'Mail', value: 'Eimg' },\n        index: 0,\n        width: '200px',\n        popupWidth: '215px',\n        itemTemplate: function (data) { return \"\\n            <div style=\\\"display:flex;\\\">\\n                <img class=\\\"empImage\\\" style=\\\"border: 1px solid \".concat(getBorderColor(data.Mail), \";height:32px width:32px\\\" src=\\\"https://ej2.syncfusion.com/demos/src/pdfviewer/images/employees/\").concat(data.Eimg, \".png\\\" alt=\\\"employee\\\" />\\n                <div>\\n                    <div class=\\\"ename\\\" style=\\\"font-size:14px;height:18px;\\\">\").concat(data.Name, \"</div>\\n                    <div class=\\\"mail\\\" style=\\\"font-size:12px;\\\">\").concat(data.Mail, \"</div>\\n                </div>\\n            </div>\"); },\n        valueTemplate: function (data) { return \"\\n            <div style=\\\"display:flex;\\\">\\n                <img class=\\\"value\\\" style=\\\"border: 1px solid \".concat(getBorderColor(data.Mail), \"; margin: 0px 0px 5px 10px; border-radius:50%;\\\" src=\\\"https://ej2.syncfusion.com/demos/src/pdfviewer/images/employees/\").concat(data.Eimg, \".png\\\" height=\\\"32px\\\" width=\\\"32px\\\" alt=\\\"employee\\\" />\\n                <div>\\n                    <div class=\\\"name\\\" style=\\\"font-size:12px;margin-left: 12px;\\\">\").concat(data.Name, \"</div>\\n                    <div class=\\\"mail\\\" style=\\\"font-size:10px;margin-left: 12px;\\\">\").concat(data.Mail, \"</div>\\n                </div>\\n            </div>\"); },\n    });\n    listObj.appendTo(\"#userMenu\");\n    function getBorderColor(email) {\n        return email === 'andrew@mycompany.com' ? 'red' : 'green';\n    }\n    listObj.select = function (args) {\n        currentUser = args.itemData.Mail;\n        updateUserFormField();\n        if (isPreventChange) {\n            args.cancel = true;\n        }\n    };\n    var finishBtnObj = new ej2_buttons_1.Button({ cssClass: 'e-outline' });\n    finishBtnObj.appendTo('#finish-btn');\n    finishBtnObj.disabled = true;\n    finishBtnObj.element.onclick = function () {\n        for (var _i = 0, _a = viewer.formFieldCollections; _i < _a.length; _i++) {\n            var formField = _a[_i];\n            viewer === null || viewer === void 0 ? void 0 : viewer.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground });\n        }\n        var url = \"https://ej2services.syncfusion.com/production/web-services/api/pdfviewer/FlattenDownload\";\n        viewer.saveAsBlob().then(function (blob) {\n            return convertBlobToBase64(blob);\n        }).then(function (base64String) {\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n            var requestData = JSON.stringify({ base64String: base64String });\n            xhr.onload = function () {\n                if (xhr.status === 200) {\n                    var responseBase64 = xhr.responseText.split('base64,')[1];\n                    if (responseBase64) {\n                        var blob = createBlobFromBase64(responseBase64, 'application/pdf');\n                        var blobUrl = URL.createObjectURL(blob);\n                        downloadDocument(blobUrl);\n                        viewer.load(xhr.responseText, null);\n                        finishBtnObj.disabled = true;\n                        listObj.enabled = false;\n                    }\n                    else {\n                        console.error('Invalid base64 response.');\n                    }\n                }\n                else {\n                    console.error('Download failed:', xhr.statusText);\n                }\n            };\n            xhr.onerror = function () {\n                console.error('An error occurred during the download:', xhr.statusText);\n            };\n            xhr.send(requestData);\n        }).catch(function (error) {\n            console.error('Error saving Blob:', error);\n        });\n    };\n    function convertBlobToBase64(blob) {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = function () {\n                if (typeof reader.result === 'string') {\n                    resolve(reader.result);\n                }\n                else {\n                    reject(new Error('Failed to convert Blob to Base64'));\n                }\n            };\n            reader.onerror = function (error) { return reject(error); };\n        });\n    }\n    function createBlobFromBase64(base64String, contentType) {\n        var sliceSize = 512;\n        var byteCharacters = atob(base64String);\n        var byteArrays = [];\n        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            var slice = byteCharacters.slice(offset, offset + sliceSize);\n            var byteNumbers = new Array(slice.length);\n            for (var i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            var byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        return new Blob(byteArrays, { type: contentType });\n    }\n    function downloadDocument(blobUrl) {\n        var anchorElement = document.createElement('a');\n        anchorElement.href = blobUrl;\n        anchorElement.target = '_parent';\n        var downloadFileName = viewer.fileName || 'default.pdf';\n        anchorElement.download = downloadFileName.endsWith('.pdf')\n            ? downloadFileName\n            : \"\".concat(downloadFileName.split('.pdf')[0], \".pdf\");\n        document.body.appendChild(anchorElement);\n        anchorElement.click();\n        document.body.removeChild(anchorElement);\n        URL.revokeObjectURL(blobUrl);\n    }\n    var dialogObj = new ej2_popups_1.Dialog({\n        width: '350px',\n        minHeight: '50px',\n        isModal: true,\n        visible: isStatus,\n        buttons: [{ click: dlgButtonClick, buttonModel: { content: 'OK', isPrimary: true } }],\n    });\n    dialogObj.appendTo('#dialog');\n    viewer.formFieldPropertiesChange = function (args) {\n        var errorMessage = \"Required Field(s): \";\n        var forms = viewer.formFieldCollections;\n        var flag = false;\n        var isAllFieldFilled = true;\n        var radioGroupName = \"\";\n        for (var i = 0; i < forms.length; i++) {\n            var text = \"\";\n            {\n                if (forms[i].type.toString() == \"Checkbox\" && forms[i].isChecked == false) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                else if (forms[i].type == \"RadioButton\" && flag == false) {\n                    radioGroupName = forms[i].name;\n                    if (forms[i].isSelected == true)\n                        flag = true;\n                }\n                else if (forms[i].type.toString() != \"Checkbox\" && forms[i].type != \"RadioButton\" && (forms[i].value === \"\" || ((typeof args.newValue === 'string') && args.newValue === \"\"))) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                else if (forms[i].type.toString() == \"DropdownList\" && forms[i].value.length == 0) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                if (text != \"\") {\n                    if (errorMessage == \"Required Field(s): \") {\n                        errorMessage += text;\n                    }\n                    else {\n                        errorMessage += \", \" + text;\n                    }\n                }\n            }\n        }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            isAllFieldFilled = false;\n        }\n        if (isAllFieldFilled) {\n            finishBtnObj.disabled = false;\n        }\n        else {\n            finishBtnObj.disabled = true;\n        }\n    };\n    function dlgButtonClick() {\n        isStatus = false;\n        dialogObj.hide();\n    }\n    function updateUserFormField() {\n        var otherFormFieldDetails = viewer.formFieldCollections.filter(function (formField) {\n            return formField.customData['author'] === \"anne\";\n        });\n        var currentFormFieldDetails = viewer.formFieldCollections.filter(function (formField) { return formField.customData.author === \"andrew\"; });\n        if (currentUser === 'andrew@mycompany.com') {\n            otherFormFieldDetails.forEach(function (field) {\n                if (field.value !== '') {\n                    var mainFieldUpdateData = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n                    viewer.formDesigner.updateFormField(field.id, mainFieldUpdateData);\n                    currentFormFieldDetails.forEach(function (currentField) {\n                        var currentFieldUpdateData = {\n                            backgroundColor: andrewBackground,\n                            isReadOnly: true\n                        };\n                        viewer.formDesigner.updateFormField(currentField.id, currentFieldUpdateData);\n                    });\n                }\n                else {\n                    currentFormFieldDetails.forEach(function (currentField) {\n                        var currentFieldUpdateData = {\n                            backgroundColor: andrewBackground,\n                        };\n                        viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                    });\n                }\n                var otherUserField = document.getElementById(field.id + '_content_html_element');\n                if (otherUserField) {\n                    var currentFormField = viewer.formFieldCollections.find(function (formField) { return formField.id === field.id; });\n                    if (currentFormField.type !== 'DropDown' && otherUserField) {\n                        if (!currentFormField.value) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                        }\n                    }\n                    else {\n                        if (currentFormField.value.length !== 0 && otherUserField) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                        }\n                    }\n                }\n            });\n        }\n        else {\n            validation(currentFormFieldDetails);\n            if (!isStatus) {\n                currentFormFieldDetails.forEach(function (field) {\n                    var currentFieldUpdateData = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n                    viewer.formDesigner.updateFormField(field.id, currentFieldUpdateData);\n                    otherFormFieldDetails.forEach(function (otherField) {\n                        var otherFieldUpdateData = {\n                            backgroundColor: anneBackground,\n                            isReadOnly: false\n                        };\n                        viewer.formDesigner.updateFormField(otherField.id, otherFieldUpdateData);\n                    });\n                });\n                otherFormFieldDetails.forEach(function (field) {\n                    viewer.formDesignerModule.updateFormField(field, { visibility: 'visible' });\n                });\n            }\n        }\n    }\n    function validation(forms) {\n        var errorMessage = \"Required Field(s): \";\n        var flag = false;\n        var isAllFieldFilled = true;\n        var radioGroupName = \"\";\n        for (var i = 0; i < forms.length; i++) {\n            var text = \"\";\n            if (forms[i].isRequired) {\n                switch (forms[i].type.toString()) {\n                    case \"Checkbox\":\n                        if (!forms[i].isChecked) {\n                            text = forms[i].name;\n                        }\n                        break;\n                    case \"RadioButton\":\n                        if (!flag) {\n                            radioGroupName = forms[i].name;\n                            if (forms[i].isSelected) {\n                                flag = true;\n                            }\n                        }\n                        break;\n                    case \"DropdownList\":\n                        if (forms[i].value.length === 0) {\n                            text = forms[i].name;\n                        }\n                        break;\n                    default:\n                        if (!forms[i].value || (typeof forms[i].newValue === 'string' && forms[i].newValue === \"\")) {\n                            text = forms[i].name;\n                        }\n                        break;\n                }\n                if (text) {\n                    errorMessage = errorMessage === \"Required Field(s): \" ? errorMessage + text : errorMessage + \", \" + text;\n                }\n            }\n        }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            isAllFieldFilled = false;\n        }\n        if (errorMessage != \"Required Field(s): \") {\n            isStatus = true;\n            dialogObj.content = errorMessage;\n            dialogObj.show();\n            isPreventChange = true;\n        }\n        else {\n            isStatus = false;\n            isPreventChange = false;\n        }\n    }\n    function documentLoaded() {\n        viewer.designerMode = false;\n        updateUserFormField();\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/pdfviewer/eSigning-pdf-forms/index.ts?");

/***/ })

/******/ });