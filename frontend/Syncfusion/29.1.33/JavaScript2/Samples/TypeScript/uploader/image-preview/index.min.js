/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/uploader/image-preview/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/uploader/image-preview/index.ts","inputs.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/uploader/image-preview/index.ts":
/*!*************************************************!*\
  !*** ./samples/uploader/image-preview/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\"), __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_inputs_1, ej2_popups_1, ej2_base_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    var dropElement = document.getElementById('dropArea');\n    var filesName = [];\n    var uploadObj = new ej2_inputs_1.Uploader({\n        asyncSettings: { saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Save',\n            removeUrl: 'https://ej2services.syncfusion.com/production/web-services/api/FileUploader/Remove' },\n        dropArea: dropElement, selected: onSelect, progress: onFileUpload, success: onUploadSuccess, removing: onFileRemove,\n        failure: onUploadFailed, allowedExtensions: '.png, .jpg, .jpeg', template: 'template'\n    });\n    uploadObj.appendTo('#fileupload');\n    var parentElement;\n    var progressbarContainer;\n    if (ej2_base_2.Browser.isDevice) {\n        document.getElementById('drop').style.padding = '0px 10%';\n    }\n    document.getElementById('browse').onclick = function () {\n        document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n        return false;\n    };\n    document.getElementById('clearbtn').onclick = function () {\n        if (!(0, ej2_base_2.isNullOrUndefined)(dropElement.querySelector('ul'))) {\n            (0, ej2_base_2.detach)(dropElement.querySelector('ul'));\n            uploadObj.filesData = [];\n            uploadObj.fileList = [];\n            filesName = [];\n            uploadObj.element.value = '';\n        }\n    };\n    document.getElementById('uploadbtn').onclick = function () {\n        if (dropElement.querySelector('ul') && uploadObj.getFilesData().length > 0) {\n            uploadObj.upload(uploadObj.getFilesData());\n        }\n    };\n    function onSelect(args) {\n        if (!dropElement.querySelector('li')) {\n            this.filesData = [];\n        }\n        if ((0, ej2_base_2.isNullOrUndefined)(document.getElementById('dropArea').querySelector('.e-upload-files'))) {\n            parentElement = (0, ej2_base_2.createElement)('ul', { className: 'e-upload-files' });\n            document.getElementsByClassName('e-upload')[0].appendChild(parentElement);\n        }\n        var validFiles = validateFiles(args, this.filesData);\n        if (validFiles.length === 0) {\n            args.cancel = true;\n            return;\n        }\n        for (var i = 0; i < validFiles.length; i++) {\n            formSelectedData(validFiles[i], this);\n        }\n        this.filesData = this.filesData.concat(validFiles);\n        args.cancel = true;\n    }\n    function onFileRemove(args) {\n        args.postRawFile = false;\n    }\n    function validateFiles(args, viewedFiles) {\n        var modifiedFiles = [];\n        var validFiles = [];\n        var isModified = false;\n        if (args.event.type === 'drop') {\n            isModified = true;\n            var allImages = ['png', 'jpg', 'jpeg'];\n            var files_4 = args.filesData;\n            for (var _i = 0, files_1 = files_4; _i < files_1.length; _i++) {\n                var file = files_1[_i];\n                if (allImages.indexOf(file.type) !== -1) {\n                    modifiedFiles.push(file);\n                }\n            }\n        }\n        var files = modifiedFiles.length > 0 || isModified ? modifiedFiles : args.filesData;\n        if (filesName.length > 0) {\n            for (var _a = 0, files_2 = files; _a < files_2.length; _a++) {\n                var file = files_2[_a];\n                if (filesName.indexOf(file.name) === -1) {\n                    filesName.push(file.name);\n                    validFiles.push(file);\n                }\n            }\n        }\n        else {\n            for (var _b = 0, files_3 = files; _b < files_3.length; _b++) {\n                var file = files_3[_b];\n                filesName.push(file.name);\n                validFiles.push(file);\n            }\n        }\n        return validFiles;\n    }\n    function formSelectedData(file, proxy) {\n        var liEle = (0, ej2_base_2.createElement)('li', { className: 'e-upload-file-list', attrs: { 'data-file-name': file.name } });\n        var imageTag = (0, ej2_base_2.createElement)('IMG', { className: 'upload-image', attrs: { 'alt': 'Image' } });\n        var wrapper = (0, ej2_base_2.createElement)('span', { className: 'wrapper' });\n        wrapper.appendChild(imageTag);\n        liEle.appendChild(wrapper);\n        liEle.appendChild((0, ej2_base_2.createElement)('div', { className: 'name file-name', innerHTML: file.name, attrs: { 'title': file.name } }));\n        liEle.appendChild((0, ej2_base_2.createElement)('div', { className: 'file-size', innerHTML: proxy.bytesToSize(file.size) }));\n        var clearbtn;\n        var uploadbtn;\n        clearbtn = (0, ej2_base_2.createElement)('span', { id: 'removeIcon', className: 'e-icons e-file-remove-btn', attrs: { 'title': 'Remove' } });\n        ej2_base_2.EventHandler.add(clearbtn, 'click', removeFiles, proxy);\n        liEle.setAttribute('title', 'Ready to Upload');\n        uploadbtn = (0, ej2_base_2.createElement)('span', { className: 'e-upload-icon e-icons e-file-remove-btn', attrs: { 'title': 'Upload' } });\n        uploadbtn.setAttribute('id', 'iconUpload');\n        ej2_base_2.EventHandler.add(uploadbtn, 'click', uploadFile, proxy);\n        progressbarContainer = (0, ej2_base_2.createElement)('progress', { className: 'progressbar', id: 'progressBar', attrs: { value: '0', max: '100' } });\n        liEle.appendChild(clearbtn);\n        liEle.appendChild(uploadbtn);\n        liEle.appendChild(progressbarContainer);\n        readURL(liEle, file);\n        document.querySelector('.e-upload-files').appendChild(liEle);\n        proxy.fileList.push(liEle);\n    }\n    function uploadFile(args) {\n        uploadObj.upload([this.filesData[this.fileList.indexOf(args.currentTarget.parentElement)]]);\n    }\n    function removeFiles(args) {\n        var removeFile = this.filesData[this.fileList.indexOf(args.currentTarget.parentElement)];\n        if (removeFile.statusCode === '2' || removeFile.statusCode === '1') {\n            this.remove([removeFile]);\n            filesName.splice(filesName.indexOf(removeFile.name), 1);\n            uploadObj.element.value = '';\n        }\n    }\n    function onFileUpload(args) {\n        var li = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        var iconEle = li.querySelector('#iconUpload');\n        iconEle.style.cursor = 'not-allowed';\n        iconEle.classList.add('e-uploaded');\n        ej2_base_2.EventHandler.remove(li.querySelector('#iconUpload'), 'click', uploadFile);\n        var progressValue = Math.round((args.e.loaded / args.e.total) * 100);\n        if (!isNaN(progressValue) && li.querySelector('.progressbar')) {\n            li.getElementsByTagName('progress')[0].value = progressValue;\n        }\n    }\n    function onUploadSuccess(args) {\n        var _this = this;\n        var spinnerElement = document.getElementById('dropArea');\n        var li = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        if (li && !(0, ej2_base_2.isNullOrUndefined)(li.querySelector('.progressbar'))) {\n            li.querySelector('.progressbar').style.visibility = 'hidden';\n        }\n        if (args.operation === 'upload') {\n            ej2_base_2.EventHandler.remove(li.querySelector('#iconUpload'), 'click', uploadFile);\n            li.querySelector('.file-name').style.color = 'green';\n            li.querySelector('.e-icons').onclick = function () { generateSpinner(_this.uploadWrapper); };\n            li.setAttribute('title', args.e.currentTarget.statusText);\n        }\n        else {\n            if (!(0, ej2_base_2.isNullOrUndefined)(spinnerElement)) {\n                (0, ej2_popups_1.hideSpinner)(spinnerElement);\n                (0, ej2_base_2.detach)(spinnerElement.querySelector('.e-spinner-pane'));\n            }\n        }\n    }\n    function generateSpinner(targetElement) {\n        (0, ej2_popups_1.createSpinner)({ target: targetElement, width: '25px' });\n        (0, ej2_popups_1.showSpinner)(targetElement);\n    }\n    function onUploadFailed(args) {\n        var li = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        li.querySelector('.file-name').style.color = 'red';\n        li.setAttribute('title', args.e.currentTarget.statusText);\n        if (args.operation === 'upload') {\n            ej2_base_2.EventHandler.remove(li.querySelector('#iconUpload'), 'click', uploadFile);\n            li.querySelector('.progressbar').style.visibility = 'hidden';\n        }\n    }\n    function readURL(li, args) {\n        var preview = li.querySelector('.upload-image');\n        var file = args.rawFile;\n        var reader = new FileReader();\n        reader.addEventListener('load', function () { preview.src = reader.result; }, false);\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/uploader/image-preview/index.ts?");

/***/ })

/******/ });