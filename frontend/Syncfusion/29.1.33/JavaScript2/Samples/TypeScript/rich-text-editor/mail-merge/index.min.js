/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/rich-text-editor/mail-merge/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/rich-text-editor/mail-merge/index.ts","richtexteditor.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/rich-text-editor/mail-merge/index.ts":
/*!******************************************************!*\
  !*** ./samples/rich-text-editor/mail-merge/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-richtexteditor */ \"./node_modules/@syncfusion/ej2-richtexteditor/index.js\"), __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ \"./node_modules/@syncfusion/ej2-splitbuttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_richtexteditor_1, ej2_splitbuttons_1, ej2_dropdowns_1) {\n    \"use strict\";\n    var _a;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_richtexteditor_1.RichTextEditor.Inject(ej2_richtexteditor_1.Toolbar, ej2_richtexteditor_1.Link, ej2_richtexteditor_1.Image, ej2_richtexteditor_1.HtmlEditor, ej2_richtexteditor_1.QuickToolbar, ej2_richtexteditor_1.Table, ej2_richtexteditor_1.PasteCleanup);\n    var rteValue = \"<p>Dear <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{FirstName}}</span></span> <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{LastName}}</span></span>,</p>\\n<p>We are thrilled to have you with us! Your unique promotional code for this month is: <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{PromoCode}}</span></span>.</p>\\n<p>Your current subscription plan is: <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{SubscriptionPlan}}</span></span>.</p>\\n<p>Your customer ID is: <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{CustomerID}}</span></span>.</p>\\n<p>Your promotional code expires on: <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{ExpirationDate}}</span></span>.</p>\\n<p>Feel free to browse our latest offerings and updates. If you need any assistance, don't hesitate to contact us at <a href=\\\"mailto:{{SupportEmail}}\\\"><span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{SupportEmail}}</span></span></a> or call us at <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{SupportPhoneNumber}}</span></span>.</p>\\n<p>Best regards,<br>The <span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{CompanyName}}</span></span> Team</p>\";\n    var textToValueMap = {\n        'First Name': 'FirstName',\n        'Last Name': 'LastName',\n        'Support Email': 'SupportEmail',\n        'Company Name': 'CompanyName',\n        'Promo Code': 'PromoCode',\n        'Support Phone Number': 'SupportPhoneNumber',\n        'Customer ID': 'CustomerID',\n        'Expiration Date': 'ExpirationDate',\n        'Subscription Plan': 'SubscriptionPlan',\n    };\n    var dropdownContent = \" <span style=\\\"display:inline-flex;\\\">\\n    <span class=\\\"e-rte-dropdown-btn-text\\\">Insert Field</span>\\n    </span>\";\n    var mergeData = [\n        { text: 'First Name', value: 'FirstName' },\n        { text: 'Last Name', value: 'LastName' },\n        { text: 'Support Email', value: 'SupportEmail' },\n        { text: 'Company Name', value: 'CompanyName' },\n        { text: 'Promo Code', value: 'PromoCode' },\n        { text: 'Support Phone Number', value: 'SupportPhoneNumber' },\n        { text: 'Customer ID', value: 'CustomerID' },\n        { text: 'Expiration Date', value: 'ExpirationDate' },\n        { text: 'Subscription Plan', value: 'SubscriptionPlan' },\n    ];\n    var placeholderData = {\n        FirstName: 'John',\n        LastName: 'Doe',\n        PromoCode: 'ABC123',\n        SubscriptionPlan: 'Premium',\n        CustomerID: '123456',\n        ExpirationDate: '2024-12-31',\n        SupportEmail: 'support@example.com',\n        SupportPhoneNumber: '+1-800-555-5555',\n        CompanyName: 'Example Inc.',\n    };\n    function onActionBegin(args) {\n        if (args.requestType === 'EnterAction' &&\n            mentionObj.element.classList.contains('e-popup-open')) {\n            args.cancel = true;\n        }\n    }\n    function actionCompleteHandler(e) {\n        if (e.requestType === 'SourceCode') {\n            mailMergeEditor.getToolbar().querySelector('#merge_data').parentElement.classList.add('e-overlay');\n            mailMergeEditor.getToolbar().querySelector('#insertField').parentElement.classList.add('e-overlay');\n        }\n        else if (e.requestType === 'Preview') {\n            mailMergeEditor.getToolbar().querySelector('#merge_data').parentElement.classList.remove('e-overlay');\n            mailMergeEditor.getToolbar().querySelector('#insertField').parentElement.classList.remove('e-overlay');\n        }\n    }\n    function onItemSelect(args) {\n        if (args.item.text != null) {\n            var value = textToValueMap[args.item.text];\n            var trimmedValue = value.trim();\n            mailMergeEditor.formatter.editorManager.nodeSelection.restore();\n            mailMergeEditor.executeCommand('insertHTML', \"<span contenteditable=\\\"false\\\" class=\\\"e-mention-chip\\\"><span>{{\".concat(trimmedValue, \"}}</span></span>&nbsp;\"), { undo: true });\n        }\n    }\n    function onClickHandler(args) {\n        if (mailMergeEditor) {\n            var editorContent = mailMergeEditor.value;\n            var mergedContent = replacePlaceholders(editorContent, placeholderData);\n            if (mailMergeEditor.formatter.getUndoRedoStack().length === 0) {\n                mailMergeEditor.formatter.saveData();\n            }\n            mailMergeEditor.value = mergedContent;\n            mailMergeEditor.formatter.saveData();\n        }\n        else {\n            console.log('MailMergeEditor is not initialized.');\n        }\n    }\n    function replacePlaceholders(template, data) {\n        return template.replace(/{{\\s*(\\w+)\\s*}}/g, function (match, key) {\n            var value = data[key.trim()];\n            var result = value !== undefined ? value : match;\n            return result;\n        });\n    }\n    var mailMergeEditor = new ej2_richtexteditor_1.RichTextEditor({\n        value: rteValue,\n        toolbarSettings: {\n            items: [\n                'Bold',\n                'Italic',\n                'Underline',\n                '|',\n                'Formats',\n                'Alignments',\n                'OrderedList',\n                'UnorderedList',\n                '|',\n                'CreateLink',\n                'Image',\n                'CreateTable',\n                '|',\n                { tooltipText: 'Merge Data', template: '#merge_data' },\n                { tooltipText: 'Insert Field', template: '#insertField' },\n                'SourceCode',\n                '|',\n                'Undo',\n                'Redo',\n            ],\n        },\n        actionBegin: onActionBegin,\n        actionComplete: actionCompleteHandler,\n        saveInterval: 1,\n    });\n    mailMergeEditor.appendTo('#mailMergeEditor');\n    var insertField = new ej2_splitbuttons_1.DropDownButton({\n        items: [\n            { text: 'First Name' },\n            { text: 'Last Name' },\n            { text: 'Support Email' },\n            { text: 'Company Name' },\n            { text: 'Promo Code' },\n            { text: 'Support Phone Number' },\n            { text: 'Customer ID' },\n            { text: 'Expiration Date' },\n            { text: 'Subscription Plan' },\n        ],\n        content: dropdownContent,\n        select: onItemSelect,\n    });\n    insertField.appendTo('#insertField');\n    (_a = document.getElementById('merge_data')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', onClickHandler);\n    var mentionObj = new ej2_dropdowns_1.Mention({\n        dataSource: mergeData,\n        target: '#mailMergeEditor',\n        mentionChar: '{{',\n        fields: { text: 'text' },\n        allowSpaces: true,\n        popupWidth: '250px',\n        popupHeight: '200px',\n        displayTemplate: '<span> {{${value}}} </span>',\n    });\n    mentionObj.appendTo('#mentionField');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/rich-text-editor/mail-merge/index.ts?");

/***/ })

/******/ });