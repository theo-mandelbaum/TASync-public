/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/circular-gauge/pointer-types/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/circular-gauge/pointer-types/index.ts","circulargauge.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/circular-gauge/pointer-types/index.ts":
/*!*******************************************************!*\
  !*** ./samples/circular-gauge/pointer-types/index.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-circulargauge */ \"./node_modules/@syncfusion/ej2-circulargauge/index.js\"), __webpack_require__(/*! ./pointer-gauge */ \"./samples/circular-gauge/pointer-types/pointer-gauge.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_circulargauge_1, pointer_gauge_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_circulargauge_1.CircularGauge.Inject(ej2_circulargauge_1.Annotations);\n    var firstgauge = (0, pointer_gauge_1.gauge1)();\n    var gauge5Interval1;\n    var gauge6Interval1;\n    firstgauge.appendTo('#container2');\n    var secondgauge = (0, pointer_gauge_1.gauge2)();\n    secondgauge.appendTo('#container1');\n    var thirdgauge = (0, pointer_gauge_1.gauge4)();\n    thirdgauge.appendTo('#container4');\n    var fourthgauge = new ej2_circulargauge_1.CircularGauge({\n        centerY: '40%',\n        background: 'transparent',\n        axes: [{\n                startAngle: 270,\n                endAngle: 90,\n                lineStyle: { width: 3, color: '#e3a21a' },\n                labelStyle: {\n                    format: '$ {value}',\n                    position: 'Outside',\n                    font: { size: '0px', color: '#e3a21a' }\n                }, majorTicks: {\n                    width: 1,\n                    height: 0,\n                    interval: 100\n                }, minorTicks: {\n                    height: 0,\n                    width: 0,\n                },\n                radius: '90%',\n                minimum: 0,\n                maximum: 100,\n                pointers: [{\n                        radius: '60%',\n                        description: 'Needle pointer value :80',\n                        value: 80,\n                        markerWidth: 5,\n                        markerHeight: 5,\n                        animation: { enable: true, duration: 1000 },\n                        color: '#e3a21a',\n                        pointerWidth: 10,\n                        cap: {\n                            radius: 8,\n                            color: 'white',\n                            border: {\n                                color: '#e3a21a',\n                                width: 1\n                            }\n                        },\n                        needleTail: {\n                            length: '20%',\n                            color: '#e3a21a'\n                        }\n                    }, {\n                        description: 'Needle pointer value :40',\n                        radius: '60%', value: 40,\n                        markerWidth: 5, markerHeight: 5,\n                        animation: { enable: true, duration: 1000 },\n                        color: '#ffb133',\n                        pointerWidth: 10,\n                        cap: {\n                            radius: 8, color: 'white',\n                            border: { color: '#ffb133', width: 1 }\n                        },\n                        needleTail: { length: '20%', color: '#e3a21a' }\n                    }],\n                annotations: [\n                    {\n                        description: 'Multiple pointers',\n                        angle: 180, zIndex: '1',\n                        radius: '32%',\n                        content: '<div style=\"font-size:14px; padding-top:22px\">Multiple pointers</div>'\n                    }\n                ]\n            }],\n        load: function (args) {\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        }\n    });\n    fourthgauge.appendTo('#container5');\n    var fifthGauge = (0, pointer_gauge_1.gauge3)();\n    fifthGauge.appendTo('#container3');\n    var sixthGauge = (0, pointer_gauge_1.gauge5)();\n    sixthGauge.appendTo('#container6');\n    gauge5Interval1 = setInterval(function () {\n        var newVal = Math.random() * (90 - 20) + 20;\n        if (document.getElementById('container3')) {\n            fifthGauge.setPointerValue(0, 0, newVal);\n        }\n        else {\n            clearInterval(gauge5Interval1);\n        }\n    }, 1000);\n    gauge6Interval1 = setInterval(function () {\n        var newVal = Math.random() * (80 - 30) + 30;\n        if (document.getElementById('container6')) {\n            sixthGauge.setPointerValue(0, 0, newVal);\n            sixthGauge.setPointerValue(0, 1, newVal);\n        }\n        else {\n            clearInterval(gauge6Interval1);\n        }\n    }, 1000);\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/circular-gauge/pointer-types/index.ts?");

/***/ }),

/***/ "./samples/circular-gauge/pointer-types/pointer-gauge.ts":
/*!***************************************************************!*\
  !*** ./samples/circular-gauge/pointer-types/pointer-gauge.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-circulargauge */ \"./node_modules/@syncfusion/ej2-circulargauge/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_circulargauge_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.gauge5 = exports.gauge6 = exports.gauge3 = exports.gauge4 = exports.gauge2 = exports.gauge1 = void 0;\n    ej2_circulargauge_1.CircularGauge.Inject(ej2_circulargauge_1.Annotations);\n    function gauge1() {\n        var gauge1 = new ej2_circulargauge_1.CircularGauge({\n            background: 'transparent',\n            centerY: '40%',\n            axes: [{\n                    startAngle: 270,\n                    endAngle: 90,\n                    lineStyle: { width: 3, color: '#ff5985' },\n                    labelStyle: {\n                        format: '$ {value}',\n                        position: 'Outside',\n                        font: { size: '0px', color: '#ff5985' }\n                    }, majorTicks: {\n                        width: 1,\n                        height: 0,\n                        interval: 100\n                    }, minorTicks: {\n                        height: 0,\n                        width: 0,\n                    },\n                    radius: '90%',\n                    minimum: 0,\n                    maximum: 100,\n                    pointers: [{\n                            type: 'RangeBar',\n                            value: 66,\n                            radius: '90%',\n                            color: '#ff5985',\n                            pointerWidth: 10,\n                            animation: { enable: true, duration: 1000 }\n                        }],\n                    annotations: [\n                        {\n                            description: 'Range bar pointer',\n                            angle: 180, zIndex: '1',\n                            radius: '28%',\n                            content: '<div style=\"font-size:14px;margin-top:11px;\">Range bar pointer</div>'\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            }\n        });\n        return gauge1;\n    }\n    exports.gauge1 = gauge1;\n    function gauge2() {\n        var gauge2 = new ej2_circulargauge_1.CircularGauge({\n            background: 'transparent',\n            centerY: '40%',\n            axes: [{\n                    startAngle: 270,\n                    endAngle: 90,\n                    lineStyle: { width: 3, color: '#01aebe' },\n                    labelStyle: {\n                        format: '{value}%',\n                        position: 'Outside',\n                        font: { size: '0px', color: '#01aebe' }\n                    }, majorTicks: {\n                        width: 1,\n                        height: 0,\n                        interval: 100\n                    }, minorTicks: {\n                        height: 0,\n                        width: 0,\n                    },\n                    radius: '90%',\n                    minimum: 0,\n                    maximum: 100,\n                    pointers: [{\n                            description: 'Marker pointer value: 80',\n                            radius: '100%',\n                            value: 80,\n                            type: 'Marker',\n                            markerShape: 'InvertedTriangle',\n                            markerWidth: 15,\n                            markerHeight: 15,\n                            color: 'rgb(0,171,169)'\n                        }],\n                    annotations: [\n                        {\n                            description: 'Marker pointer',\n                            angle: 180, zIndex: '1',\n                            radius: '28%',\n                            content: '<div style=\"font-size:14px;margin-top:10px;\">Marker pointer</div>'\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            }\n        });\n        return gauge2;\n    }\n    exports.gauge2 = gauge2;\n    function gauge4() {\n        var gauge4 = new ej2_circulargauge_1.CircularGauge({\n            background: 'transparent',\n            centerY: '40%',\n            axes: [{\n                    startAngle: 270,\n                    endAngle: 90,\n                    lineStyle: { width: 3, color: '#1E7145' },\n                    labelStyle: {\n                        format: '${value}',\n                        position: 'Outside',\n                        font: { size: '0px', color: '#1E7145' }\n                    }, majorTicks: {\n                        width: 1,\n                        height: 0,\n                        interval: 100\n                    }, minorTicks: {\n                        height: 0,\n                        width: 0,\n                    },\n                    radius: '90%',\n                    minimum: 0,\n                    maximum: 100,\n                    pointers: [{\n                            animation: { enable: true, duration: 1000 },\n                            description: 'Needle pointer: 80',\n                            value: 80,\n                            radius: '80%',\n                            color: 'green',\n                            pointerWidth: 2,\n                            needleStartWidth: 4,\n                            needleEndWidth: 4,\n                            cap: {\n                                radius: 8,\n                                color: 'green'\n                            },\n                            needleTail: {\n                                length: '0%'\n                            }\n                        }],\n                    annotations: [\n                        {\n                            description: 'Customized pointer',\n                            angle: 180, zIndex: '1',\n                            radius: '28%',\n                            content: '<div style=\"font-size:14px; padding-top: 29px\">Customized pointer</div>'\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            }\n        });\n        return gauge4;\n    }\n    exports.gauge4 = gauge4;\n    function gauge3() {\n        var gauge3 = new ej2_circulargauge_1.CircularGauge({\n            background: 'transparent',\n            centerY: '40%',\n            axes: [{\n                    startAngle: 270,\n                    endAngle: 90,\n                    lineStyle: { width: 3, color: '#9250e6' },\n                    labelStyle: {\n                        format: '{value} s',\n                        position: 'Outside',\n                        font: { size: '0px', color: '#9250e6' }\n                    }, majorTicks: {\n                        width: 1,\n                        height: 0,\n                        interval: 100\n                    }, minorTicks: {\n                        height: 0,\n                        width: 0,\n                    },\n                    radius: '90%',\n                    minimum: 0,\n                    maximum: 100,\n                    pointers: [{\n                            description: 'Needle pointer value : 70',\n                            radius: '100%',\n                            animation: { enable: true, duration: 900 },\n                            value: 70,\n                            color: '#923C99',\n                            pointerWidth: 6,\n                            cap: { radius: 0 },\n                            needleTail: { length: '4%', color: '#923C99' }\n                        }],\n                    annotations: [\n                        {\n                            description: 'Needle pointer',\n                            angle: 180, zIndex: '1',\n                            radius: '28%',\n                            content: '<div style=\"font-size:14px;margin-top:11px;\">Needle pointer</div>'\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            }\n        });\n        return gauge3;\n    }\n    exports.gauge3 = gauge3;\n    function gauge6() {\n        var gauge6 = new ej2_circulargauge_1.CircularGauge({\n            title: 'Speedometer',\n            background: 'transparent',\n            titleStyle: { size: '18px', fontFamily: 'inherit' },\n            centerY: '75%',\n            axes: [{\n                    radius: '120%',\n                    minimum: 0,\n                    maximum: 120,\n                    lineStyle: { width: 0 },\n                    majorTicks: { width: 0, },\n                    minorTicks: { width: 0 },\n                    labelStyle: {\n                        useRangeColor: false, position: 'Outside', autoAngle: true,\n                        font: { size: '13px', fontFamily: 'inherit' }\n                    },\n                    startAngle: 270, endAngle: 90,\n                    pointers: [{\n                            animation: { enable: true, duration: 900 },\n                            value: 40,\n                            radius: '80%',\n                            color: '#757575',\n                            pointerWidth: 7,\n                            cap: {\n                                radius: 8,\n                                color: '#757575',\n                                border: { width: 0 }\n                            },\n                            needleTail: {\n                                color: '#757575',\n                                length: '15%'\n                            },\n                        }],\n                    annotations: [\n                        {\n                            content: '#pointerValue',\n                            angle: 0, zIndex: '1',\n                            radius: '30%'\n                        }\n                    ],\n                    ranges: [\n                        {\n                            start: 0,\n                            end: 20,\n                            startWidth: 5, endWidth: 10,\n                            radius: '102%',\n                            color: '#82b944',\n                        },\n                        {\n                            start: 20,\n                            end: 40,\n                            startWidth: 10, endWidth: 15,\n                            radius: '102%',\n                            color: '#a1cb43',\n                        }, {\n                            start: 40,\n                            end: 60,\n                            startWidth: 15, endWidth: 20,\n                            radius: '102%',\n                            color: '#ddec12',\n                        },\n                        {\n                            start: 60,\n                            end: 80,\n                            startWidth: 20, endWidth: 25,\n                            radius: '102%',\n                            color: '#ffbc00',\n                        },\n                        {\n                            start: 80,\n                            end: 100,\n                            startWidth: 25, endWidth: 30,\n                            radius: '102%',\n                            color: '#ff6000',\n                        },\n                        {\n                            start: 100,\n                            end: 120,\n                            startWidth: 30, endWidth: 35,\n                            radius: '102%',\n                            color: 'red',\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            }\n        });\n        return gauge6;\n    }\n    exports.gauge6 = gauge6;\n    function gauge5() {\n        var gauge5 = new ej2_circulargauge_1.CircularGauge({\n            centerY: '40%',\n            background: 'transparent',\n            axes: [{\n                    startAngle: 270,\n                    endAngle: 90,\n                    lineStyle: { width: 0 },\n                    labelStyle: {\n                        format: '{value} seconds',\n                        position: 'Outside',\n                        font: { size: '0px', color: '#067bc2' }\n                    }, majorTicks: {\n                        width: 1,\n                        height: 0,\n                        interval: 100\n                    }, minorTicks: {\n                        height: 0,\n                        width: 0,\n                    },\n                    radius: '90%',\n                    minimum: 0,\n                    maximum: 100,\n                    pointers: [{\n                            radius: '100%',\n                            description: 'Needle pointer :40',\n                            animation: { enable: false, duration: 100 },\n                            value: 40,\n                            color: '#067bc2',\n                            pointerWidth: 6,\n                            cap: { radius: 0 },\n                            needleTail: { length: '4%', color: '#067bc2' }\n                        }, {\n                            description: 'RangeBar pointer value : 40',\n                            radius: '100%',\n                            type: 'RangeBar',\n                            animation: { enable: false, duration: 100 },\n                            value: 40,\n                            color: '#067bc2',\n                            pointerWidth: 5\n                        }],\n                    annotations: [\n                        {\n                            description: 'Live update',\n                            angle: 180, zIndex: '1',\n                            radius: '32%',\n                            content: '<div style=\"font-size:14px; margin-top:22px\">Live update</div>'\n                        }\n                    ]\n                }],\n            load: function (args) {\n                var selectTheme = location.hash.split('/')[1];\n                selectTheme = selectTheme ? selectTheme : 'Material';\n                args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                    selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            }\n        });\n        return gauge5;\n    }\n    exports.gauge5 = gauge5;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/circular-gauge/pointer-types/pointer-gauge.ts?");

/***/ })

/******/ });