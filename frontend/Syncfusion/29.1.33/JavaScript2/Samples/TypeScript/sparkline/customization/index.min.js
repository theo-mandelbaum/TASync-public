/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/sparkline/customization/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/sparkline/customization/index.ts","charts.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/sparkline/customization/index.ts":
/*!**************************************************!*\
  !*** ./samples/sparkline/customization/index.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-charts */ \"./node_modules/@syncfusion/ej2-charts/index.js\"), __webpack_require__(/*! @syncfusion/ej2-dropdowns */ \"./node_modules/@syncfusion/ej2-dropdowns/index.js\"), __webpack_require__(/*! @syncfusion/ej2-buttons */ \"./node_modules/@syncfusion/ej2-buttons/index.js\"), __webpack_require__(/*! @syncfusion/ej2-inputs */ \"./node_modules/@syncfusion/ej2-inputs/index.js\"), __webpack_require__(/*! ./theme-color */ \"./samples/sparkline/customization/theme-color.ts\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_charts_1, ej2_dropdowns_1, ej2_buttons_1, ej2_inputs_1, theme_color_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_charts_1.Sparkline.Inject(ej2_charts_1.SparklineTooltip);\n    var percentage = new ej2_charts_1.Sparkline({\n        load: function (args) {\n            (0, theme_color_1.loadSparkLineTheme)(args);\n        },\n        height: '200px',\n        width: '180px',\n        lineWidth: 1,\n        type: 'Column',\n        valueType: 'Category',\n        dataSource: [\n            { x: 0, xval: 'AUDI', yval: 1 },\n            { x: 1, xval: 'BMW', yval: 5 },\n            { x: 2, xval: 'BUICK', yval: -1 },\n            { x: 3, xval: 'CETROEN', yval: -6 },\n            { x: 4, xval: 'CHEVROLET', yval: 0 },\n            { x: 5, xval: 'FIAT', yval: 1 },\n            { x: 6, xval: 'FORD', yval: -2 },\n            { x: 7, xval: 'HONDA', yval: 7 },\n            { x: 8, xval: 'HYUNDAI', yval: -9 },\n            { x: 9, xval: 'JEEP', yval: 0 },\n            { x: 10, xval: 'KIA', yval: -10 },\n            { x: 11, xval: 'MAZDA', yval: 3 },\n            { x: 12, xval: 'MERCEDES', yval: 13 },\n            { x: 13, xval: 'NISSAN', yval: 5 },\n            { x: 14, xval: 'OPEL/VHALL', yval: -6 },\n            { x: 15, xval: 'PEUGEOT', yval: 0 },\n            { x: 16, xval: 'RENAULT', yval: 7 },\n            { x: 17, xval: 'SKODA', yval: 5 },\n            { x: 18, xval: 'SUBARU', yval: 5 },\n            { x: 19, xval: 'SUZUKI', yval: 11 },\n            { x: 20, xval: 'TOYOTA', yval: 5 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 3 },\n        ],\n        xName: 'xval', yName: 'yval',\n        axisSettings: {\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        },\n        markerSettings: {\n            fill: 'red',\n            size: 5\n        },\n        tooltipSettings: {\n            format: '${xval}: ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }\n    });\n    percentage.appendTo('#percentage');\n    var sales = new ej2_charts_1.Sparkline({\n        load: function (args) {\n            (0, theme_color_1.loadSparkLineTheme)(args);\n        },\n        height: '200px',\n        width: '180px',\n        lineWidth: 1,\n        type: 'Column',\n        valueType: 'Category',\n        dataSource: [\n            { x: 0, xval: 'AUDI', yval: 1847613 },\n            { x: 1, xval: 'BMW', yval: 2030331 },\n            { x: 2, xval: 'BUICK', yval: 1465823 },\n            { x: 3, xval: 'CETROEN', yval: 999888 },\n            { x: 4, xval: 'CHEVROLET', yval: 3857388 },\n            { x: 5, xval: 'FIAT', yval: 1503806 },\n            { x: 6, xval: 'FORD', yval: 5953122 },\n            { x: 7, xval: 'HONDA', yval: 4967689 },\n            { x: 8, xval: 'HYUNDAI', yval: 3951176 },\n            { x: 9, xval: 'JEEP', yval: 1390130 },\n            { x: 10, xval: 'KIA', yval: 2511293 },\n            { x: 11, xval: 'MAZDA', yval: 1495557 },\n            { x: 12, xval: 'MERCEDES', yval: 2834181 },\n            { x: 13, xval: 'NISSAN', yval: 4834694 },\n            { x: 14, xval: 'OPEL/VHALL', yval: 996559 },\n            { x: 15, xval: 'PEUGEOT', yval: 1590300 },\n            { x: 16, xval: 'RENAULT', yval: 2275227 },\n            { x: 17, xval: 'SKODA', yval: 1180672 },\n            { x: 18, xval: 'SUBARU', yval: 1050390 },\n            { x: 19, xval: 'SUZUKI', yval: 2891415 },\n            { x: 20, xval: 'TOYOTA', yval: 7843423 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 6639250 },\n        ],\n        xName: 'xval', yName: 'yval',\n        axisSettings: {\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        },\n        markerSettings: {\n            fill: 'red',\n            size: 5\n        },\n        tooltipSettings: {\n            format: '${xval}: ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }\n    });\n    sales.appendTo('#sales');\n    var sampleChange;\n    var sampleValue = new ej2_dropdowns_1.DropDownList({\n        index: 0,\n        placeholder: 'Sales Percentage',\n        width: '100%',\n        change: sampleChange\n    });\n    var sliderChange;\n    var slider = new ej2_inputs_1.Slider({\n        value: 0, type: 'MinRange',\n        change: sliderChange,\n        max: 100, min: 0\n    }, '#range');\n    var allchange;\n    var allCheckBox = new ej2_buttons_1.CheckBox({\n        checked: true, change: allchange\n    }, '#all');\n    var otherchange;\n    var negativeCheckBox = new ej2_buttons_1.CheckBox({\n        change: otherchange, disabled: true\n    }, '#negative');\n    var firstCheckBox = new ej2_buttons_1.CheckBox({\n        change: otherchange, disabled: true\n    }, '#first');\n    var lastCheckBox = new ej2_buttons_1.CheckBox({\n        change: otherchange, disabled: true\n    }, '#last');\n    var highCheckBox = new ej2_buttons_1.CheckBox({\n        change: otherchange, disabled: true\n    }, '#high');\n    var lowCheckBox = new ej2_buttons_1.CheckBox({\n        change: otherchange, disabled: true\n    }, '#low');\n    var markerchange;\n    var markerCheckBox = new ej2_buttons_1.CheckBox({\n        change: markerchange\n    }, '#marker');\n    var datalabelchange;\n    var datalabelCheckBox = new ej2_buttons_1.CheckBox({\n        change: datalabelchange\n    }, '#datalabel');\n    var enableRTLchange;\n    var enableRTLCheckBox = new ej2_buttons_1.CheckBox({\n        change: enableRTLchange\n    }, '#enableRTL');\n    var tooltipchange;\n    var tooltipCheckBox = new ej2_buttons_1.CheckBox({\n        change: tooltipchange\n    }, '#tooltip');\n    var trackerchange;\n    var trackerCheckBox = new ej2_buttons_1.CheckBox({\n        change: trackerchange\n    }, '#trackline');\n    var axislinechange;\n    var axislineCheckBox = new ej2_buttons_1.CheckBox({\n        change: axislinechange\n    }, '#axis1');\n    sampleValue.change = sampleChange = function (drop) {\n        if (drop.value === 'salespercentage') {\n            slider.min = 0;\n            slider.max = 10;\n            slider.value = percentage.axisSettings.value;\n        }\n        else {\n            slider.min = 0;\n            slider.max = 5000000;\n            slider.value = sales.axisSettings.value;\n        }\n        if ((drop.value === 'salespercentage' && percentage.markerSettings.visible.length) ||\n            (drop.value === 'salescount' && sales.markerSettings.visible.length)) {\n            markerCheckBox.checked = true;\n        }\n        else {\n            markerCheckBox.checked = false;\n        }\n        markerCheckBox.change = markerchange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.markerSettings.visible = getVisible();\n            }\n            else {\n                spark.markerSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.dataLabelSettings.visible.length) ||\n            (drop.value === 'salescount' && sales.dataLabelSettings.visible.length)) {\n            datalabelCheckBox.checked = true;\n        }\n        else {\n            datalabelCheckBox.checked = false;\n        }\n        var spark = drop.value === 'salespercentage' ? percentage : sales;\n        if (!markerCheckBox.checked && !datalabelCheckBox.checked) {\n            allCheckBox.checked = false;\n            negativeCheckBox.checked = false;\n            firstCheckBox.checked = false;\n            lastCheckBox.checked = false;\n            highCheckBox.checked = false;\n            lowCheckBox.checked = false;\n        }\n        if (markerCheckBox.checked) {\n            var spark_1 = drop.value === 'salespercentage' ? percentage : sales;\n            allCheckBox.checked = spark_1.markerSettings.visible.indexOf('All') > -1;\n            negativeCheckBox.checked = spark_1.markerSettings.visible.indexOf('Negative') > -1;\n            firstCheckBox.checked = spark_1.markerSettings.visible.indexOf('Start') > -1;\n            lastCheckBox.checked = spark_1.markerSettings.visible.indexOf('End') > -1;\n            highCheckBox.checked = spark_1.markerSettings.visible.indexOf('High') > -1;\n            lowCheckBox.checked = spark_1.markerSettings.visible.indexOf('Low') > -1;\n        }\n        if (datalabelCheckBox.checked) {\n            var spark_2 = drop.value === 'salespercentage' ? percentage : sales;\n            allCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('All') > -1;\n            negativeCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('Negative') > -1;\n            firstCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('Start') > -1;\n            lastCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('End') > -1;\n            highCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('High') > -1;\n            lowCheckBox.checked = spark_2.dataLabelSettings.visible.indexOf('Low') > -1;\n        }\n        datalabelCheckBox.change = datalabelchange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.dataLabelSettings.visible = getVisible();\n            }\n            else {\n                spark.dataLabelSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.tooltipSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.tooltipSettings.visible === true)) {\n            tooltipCheckBox.checked = true;\n        }\n        else {\n            tooltipCheckBox.checked = false;\n        }\n        tooltipCheckBox.change = tooltipchange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.tooltipSettings.visible = true;\n            }\n            else {\n                spark.tooltipSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.enableRtl === true) ||\n            (drop.value === 'salescount' && sales.enableRtl === true)) {\n            enableRTLCheckBox.checked = true;\n        }\n        else {\n            enableRTLCheckBox.checked = false;\n        }\n        enableRTLCheckBox.change = enableRTLchange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean === true) {\n                spark.enableRtl = true;\n            }\n            else {\n                spark.enableRtl = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.tooltipSettings.trackLineSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.tooltipSettings.trackLineSettings.visible === true)) {\n            trackerCheckBox.checked = true;\n        }\n        else {\n            trackerCheckBox.checked = false;\n        }\n        trackerCheckBox.change = trackerchange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.tooltipSettings.trackLineSettings.visible = true;\n            }\n            else {\n                spark.tooltipSettings.trackLineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.axisSettings.lineSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.axisSettings.lineSettings.visible === true)) {\n            axislineCheckBox.checked = true;\n        }\n        else {\n            axislineCheckBox.checked = false;\n        }\n        axislineCheckBox.change = axislinechange = function (e) {\n            var boolean = e.checked;\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.axisSettings.lineSettings.visible = true;\n            }\n            else {\n                spark.axisSettings.lineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if (drop.value === 'salespercentage' && percentage.axisSettings.value !== 0) {\n            slider.value = percentage.axisSettings.value;\n            slider.min = 0;\n            slider.max = 10;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + percentage.axisSettings.value;\n        }\n        if (drop.value === 'salescount' && sales.axisSettings.value !== 0) {\n            slider.value = sales.axisSettings.value;\n            slider.min = 0;\n            slider.max = 5000000;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + sales.axisSettings.value;\n        }\n        slider.change = sliderChange = function (e) {\n            var spark = drop.value === 'salespercentage' ? percentage : sales;\n            spark.axisSettings.value = e.value;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + e.value;\n            spark.refresh();\n        };\n        allCheckBox.checked = !(negativeCheckBox.checked || highCheckBox.checked || lowCheckBox.checked ||\n            firstCheckBox.checked || lastCheckBox.checked);\n        negativeCheckBox.disabled = highCheckBox.disabled = lowCheckBox.disabled = firstCheckBox.disabled =\n            lastCheckBox.disabled = allCheckBox.checked;\n    };\n    sampleValue.appendTo('#spark');\n    if (sampleValue.value === 'salespercentage') {\n        slider.min = 0;\n        slider.max = 10;\n    }\n    else {\n        slider.min = 0;\n        slider.max = 5000000;\n    }\n    allCheckBox.change = allchange = function (e) {\n        var checked = e.checked;\n        negativeCheckBox.disabled = checked;\n        firstCheckBox.disabled = checked;\n        lastCheckBox.disabled = checked;\n        highCheckBox.disabled = checked;\n        lowCheckBox.disabled = checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        spark.markerSettings.visible = (checked && markerCheckBox.checked) ? ['All'] : (markerCheckBox.checked) ? getVisible() : [];\n        spark.dataLabelSettings.visible = (checked && datalabelCheckBox.checked) ? ['All'] :\n            (datalabelCheckBox.checked) ? getVisible() : [];\n        spark.refresh();\n    };\n    negativeCheckBox.change = otherchange = firstCheckBox.change = lastCheckBox.change = highCheckBox.change =\n        lowCheckBox.change = function (e) {\n            processMarkerLabel(e);\n        };\n    var processMarkerLabel = function (e) {\n        var checked = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (markerCheckBox.checked) {\n            spark.markerSettings.visible = getVisible();\n            spark.refresh();\n        }\n        if (datalabelCheckBox.checked) {\n            spark.dataLabelSettings.visible = getVisible();\n            spark.refresh();\n        }\n    };\n    var getVisible = function () {\n        var visible = [];\n        if (allCheckBox.checked) {\n            return ['All'];\n        }\n        if (negativeCheckBox.checked) {\n            visible.push('Negative');\n        }\n        if (firstCheckBox.checked) {\n            visible.push('Start');\n        }\n        if (lastCheckBox.checked) {\n            visible.push('End');\n        }\n        if (highCheckBox.checked) {\n            visible.push('High');\n        }\n        if (lowCheckBox.checked) {\n            visible.push('Low');\n        }\n        return visible;\n    };\n    markerCheckBox.change = markerchange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.markerSettings.visible = getVisible();\n        }\n        else {\n            spark.markerSettings.visible = [];\n        }\n        spark.refresh();\n    };\n    datalabelCheckBox.change = datalabelchange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.dataLabelSettings.visible = getVisible();\n        }\n        else {\n            spark.dataLabelSettings.visible = [];\n        }\n        spark.refresh();\n    };\n    enableRTLCheckBox.change = enableRTLchange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean === true) {\n            spark.enableRtl = true;\n        }\n        else {\n            spark.enableRtl = false;\n        }\n        spark.refresh();\n    };\n    tooltipCheckBox.change = tooltipchange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.tooltipSettings.visible = true;\n            spark.tooltipSettings.format = '${xval}: ${yval}';\n        }\n        else {\n            spark.tooltipSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    trackerCheckBox.change = trackerchange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.tooltipSettings.trackLineSettings.visible = true;\n            spark.tooltipSettings.trackLineSettings.color = 'red';\n            spark.tooltipSettings.trackLineSettings.width = 1;\n        }\n        else {\n            spark.tooltipSettings.trackLineSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    axislineCheckBox.change = axislinechange = function (e) {\n        var boolean = e.checked;\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.axisSettings.lineSettings.visible = true;\n            spark.axisSettings.lineSettings.color = 'red';\n            spark.axisSettings.lineSettings.width = 2;\n        }\n        else {\n            spark.axisSettings.lineSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    slider.change = sliderChange = function (e) {\n        var spark = sampleValue.value === 'salespercentage' ? percentage : sales;\n        spark.axisSettings.value = e.value;\n        document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + e.value;\n        spark.refresh();\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/sparkline/customization/index.ts?");

/***/ }),

/***/ "./samples/sparkline/customization/theme-color.ts":
/*!********************************************************!*\
  !*** ./samples/sparkline/customization/theme-color.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.loadSparkLineTheme = void 0;\n    function loadSparkLineTheme(args) {\n        var theme = location.hash.split('/')[1];\n        theme = theme ? theme : 'Tailwind3';\n        args.sparkline.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    exports.loadSparkLineTheme = loadSparkLineTheme;\n    ;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/sparkline/customization/theme-color.ts?");

/***/ })

/******/ });