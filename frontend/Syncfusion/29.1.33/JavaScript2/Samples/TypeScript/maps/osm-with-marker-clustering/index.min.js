/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/maps/osm-with-marker-clustering/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/maps/osm-with-marker-clustering/index.ts","maps.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/maps/osm-with-marker-clustering/index.ts":
/*!**********************************************************!*\
  !*** ./samples/maps/osm-with-marker-clustering/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-maps */ \"./node_modules/@syncfusion/ej2-maps/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_maps_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_maps_1.Maps.Inject(ej2_maps_1.Marker, ej2_maps_1.MapsTooltip, ej2_maps_1.Zoom);\n    var maps = new ej2_maps_1.Maps({\n        load: function (args) {\n            var theme = location.hash.split('/')[1];\n            theme = theme ? theme : 'Material';\n            args.maps.theme = (theme.charAt(0).toUpperCase() +\n                theme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n        },\n        titleSettings: {\n            text: 'Popular attractions around the world',\n            textStyle: {\n                size: '16px'\n            }\n        },\n        zoomSettings: {\n            enable: true,\n            zoomFactor: 2,\n            toolbarSettings: {\n                buttonSettings: {\n                    toolbarItems: ['Zoom', 'ZoomIn', 'ZoomOut', 'Pan', 'Reset']\n                }\n            }\n        },\n        layers: [\n            {\n                urlTemplate: \"https://tile.openstreetmap.org/level/tileX/tileY.png\",\n                markerSettings: [\n                    {\n                        clusterSettings: {\n                            allowClustering: true,\n                            allowDeepClustering: false,\n                            allowClusterExpand: true,\n                            labelStyle: {\n                                color: 'white',\n                                size: '10px'\n                            },\n                            shape: 'Image',\n                            height: 40, width: 40,\n                            imageUrl: 'https://ej2.syncfusion.com/demos/src/maps/images/cluster-france.svg'\n                        },\n                        visible: true,\n                        dataSource: [\n                            { latitude: 48.8584, longitude: 2.2945, name: 'Eiffel Tower', state: 'Paris', country: 'France' },\n                            { latitude: 48.8606, longitude: 2.3376, name: 'Louvre Museum', state: 'Paris', country: 'France' },\n                            { latitude: 48.8529, longitude: 2.3500, name: 'Notre-Dame Cathedral', state: 'Paris', country: 'France' },\n                            { latitude: 48.6360, longitude: 1.5115, name: 'Mont Saint-Michel', state: 'Normandy', country: 'France' },\n                            { latitude: 48.8049, longitude: 2.1204, name: 'Versailles', state: 'Normandy', country: 'France' },\n                            { latitude: 43.7102, longitude: 7.2620, name: 'French Riviera', state: 'Provence-Alpes-CÃ´te d Azur', country: 'France' },\n                            { latitude: 47.6167, longitude: 1.5167, name: 'ChÃ¢teau de Chambord', state: 'Centre-Val de Loire', country: 'France' },\n                            { latitude: 48.8738, longitude: 2.2950, name: 'Arc de Triomphe', state: 'Paris', country: 'France' },\n                            { latitude: 48.8566, longitude: 2.3522, name: 'Sainte-Chapelle', state: 'Paris', country: 'France' },\n                            { latitude: 49.4144, longitude: 0.8322, name: 'The D-Day Landing Beaches', state: 'Normandy', country: 'France' }\n                        ],\n                        shape: 'Circle',\n                        height: 15,\n                        width: 15,\n                        fill: '#b38600',\n                        border: {\n                            color: '#e6f2ff',\n                            width: 2\n                        },\n                        tooltipSettings: {\n                            visible: true,\n                            valuePath: 'name',\n                            format: '<b>Name:</b> ${name} <br/> <b>State:</b> ${state} <br/> <b>Country:</b> ${country}'\n                        },\n                        animationDuration: 0\n                    },\n                    {\n                        clusterSettings: {\n                            allowClustering: true,\n                            allowDeepClustering: false,\n                            allowClusterExpand: true,\n                            shape: 'Image',\n                            height: 40, width: 40,\n                            labelStyle: {\n                                color: 'white',\n                                size: '10px'\n                            },\n                            imageUrl: 'https://ej2.syncfusion.com/demos/src/maps/images/cluster-usa.svg'\n                        },\n                        visible: true,\n                        dataSource: [\n                            { latitude: 35.019028, longitude: -85.339439, name: 'Ruby Falls', state: 'Tennessee', country: 'United States of America' },\n                            { latitude: 35.654613, longitude: -105.996979, name: 'Meow Wolf Santa Fe', state: 'New Mexico', country: 'United States of America' },\n                            { latitude: 36.107216, longitude: -115.175804, name: 'City Center of Las Vegas', state: 'Nevada', country: 'United States of America' },\n                            { latitude: 36.879047, longitude: -111.510498, name: 'Horseshoe Bend', state: 'Arizona', country: 'United States of America' },\n                            { latitude: 36.011955, longitude: -113.810951, name: 'Grand Canyon West Skywalk', state: 'Arizona', country: 'United States of America' },\n                            { latitude: 44.460438, longitude: -110.828377, name: 'Old Faithful', state: 'Wyoming', country: 'United States of America' },\n                            { latitude: 33.839165, longitude: -118.391113, name: 'Redondo Beach Pier', state: 'California', country: 'United States of America' },\n                            { latitude: 36.117615, longitude: -115.168381, name: 'High Roller, Las Vegas', state: 'Nevada', country: 'United States of America' },\n                            { latitude: 36.082027, longitude: -115.172897, name: 'Welcome to Fabulous Las Vegas Sign', state: 'Nevada', country: 'United States of America' },\n                            { latitude: 28.521894, longitude: -80.681702, name: 'Kennedy Space Center Visitor Complex', state: 'Florida', country: 'United States of America' }\n                        ],\n                        shape: 'Circle',\n                        height: 15,\n                        width: 15,\n                        fill: '#bf4040',\n                        border: {\n                            color: '#e6f2ff',\n                            width: 2\n                        },\n                        tooltipSettings: {\n                            visible: true,\n                            valuePath: 'name',\n                            format: '<b>Name:</b> ${name} <br/> <b>State:</b> ${state} <br/> <b>Country:</b> ${country}'\n                        },\n                        animationDuration: 0\n                    },\n                    {\n                        clusterSettings: {\n                            allowClustering: true,\n                            allowDeepClustering: false,\n                            allowClusterExpand: true,\n                            shape: 'Image',\n                            height: 40, width: 40,\n                            labelStyle: {\n                                color: 'white',\n                                size: '10px'\n                            },\n                            imageUrl: 'https://ej2.syncfusion.com/demos/src/maps/images/cluster-india.svg'\n                        },\n                        visible: true,\n                        dataSource: [\n                            { latitude: 26.985901, longitude: 75.850700, name: 'Amber Fort, Amer', state: 'Rajastan', country: 'India' },\n                            { latitude: 22.957390, longitude: 77.625275, name: 'Bhimbetka, Raisen District', state: 'Madhya Pradesh', country: 'India' },\n                            { latitude: 26.809330, longitude: 75.540527, name: 'Bagru Fort, Bagru', state: 'Rajasthan', country: 'India' },\n                            { latitude: 25.489504, longitude: 80.330116, name: 'Kalinjar Fort, Banda', state: 'Uttar Pradesh', country: 'India' },\n                            { latitude: 27.988890, longitude: 76.388336, name: 'Neemrana', state: 'Rajasthan', country: 'India' },\n                            { latitude: 17.382330, longitude: 78.401604, name: 'Golconda Fort', state: 'Hyderabad', country: 'India' },\n                            { latitude: 28.657211, longitude: 77.233978, name: 'Bhagirath Palace', state: 'New Delhi', country: 'India' },\n                            { latitude: 18.544689, longitude: 73.825478, name: 'Raj Bhavan', state: 'Maharashtra', country: 'India' },\n                            { latitude: 22.718435, longitude: 75.855217, name: 'Rajwada, Indore', state: 'Madhya Pradesh', country: 'India' },\n                            { latitude: 27.173891, longitude: 78.042068, name: 'The Taj Mahal', state: 'Uttar Pradesh', country: 'India' }\n                        ],\n                        shape: 'Circle',\n                        fill: '#00b3b3',\n                        border: {\n                            color: '#e6f2ff',\n                            width: 2\n                        },\n                        height: 15,\n                        width: 15,\n                        tooltipSettings: {\n                            visible: true,\n                            valuePath: 'name',\n                            format: '<b>Name:</b> ${name} <br/> <b>State:</b> ${state} <br/> <b>Country:</b> ${country}'\n                        },\n                        animationDuration: 0\n                    },\n                    {\n                        clusterSettings: {\n                            allowClustering: true,\n                            allowDeepClustering: false,\n                            allowClusterExpand: true,\n                            shape: 'Image',\n                            height: 40, width: 40,\n                            labelStyle: {\n                                color: 'white',\n                                size: '10px'\n                            },\n                            imageUrl: 'https://ej2.syncfusion.com/demos/src/maps/images/cluster-china.svg'\n                        },\n                        visible: true,\n                        dataSource: [\n                            { latitude: 40.4319, longitude: 116.5704, name: 'Great Wall of China', state: 'Beijing', country: 'China' },\n                            { latitude: 39.9163, longitude: 116.3972, name: 'Forbidden City', state: 'Beijing', country: 'China' },\n                            { latitude: 34.3848, longitude: 109.2734, name: 'Terracotta Army', state: 'Shaanxi Province', country: 'China' },\n                            { latitude: 39.8825, longitude: 116.4122, name: 'Temple of Heaven', state: 'Beijing', country: 'China' },\n                            { latitude: 39.9990, longitude: 116.2754, name: 'Summer Palace', state: 'Beijing', country: 'China' },\n                            { latitude: 30.2470, longitude: 120.1614, name: 'Hangzhou', state: 'Zhejiang Province', country: 'China' },\n                            { latitude: 31.2400, longitude: 121.4900, name: 'Shanghai Tower', state: 'Shanghai', country: 'China' }\n                        ],\n                        shape: 'Circle',\n                        fill: '#b366ff',\n                        border: {\n                            color: '#e6f2ff',\n                            width: 2\n                        },\n                        height: 15,\n                        width: 15,\n                        tooltipSettings: {\n                            visible: true,\n                            valuePath: 'name',\n                            format: '<b>Name:</b> ${name} <br/> <b>State:</b> ${state} <br/> <b>Country:</b> ${country}'\n                        },\n                        animationDuration: 0\n                    }\n                ]\n            }\n        ]\n    });\n    maps.appendTo('#container');\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/maps/osm-with-marker-clustering/index.ts?");

/***/ })

/******/ });