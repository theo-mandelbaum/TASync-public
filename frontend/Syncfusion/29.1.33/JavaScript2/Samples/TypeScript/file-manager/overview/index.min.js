/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./samples/file-manager/overview/index.min": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./samples/file-manager/overview/index.ts","filemanager.min"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./samples/file-manager/overview/index.ts":
/*!************************************************!*\
  !*** ./samples/file-manager/overview/index.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @syncfusion/ej2-base */ \"./node_modules/@syncfusion/ej2-base/index.js\"), __webpack_require__(/*! @syncfusion/ej2-filemanager */ \"./node_modules/@syncfusion/ej2-filemanager/index.js\"), __webpack_require__(/*! @syncfusion/ej2-navigations */ \"./node_modules/@syncfusion/ej2-navigations/index.js\"), __webpack_require__(/*! @syncfusion/ej2-popups */ \"./node_modules/@syncfusion/ej2-popups/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, ej2_base_1, ej2_filemanager_1, ej2_navigations_1, ej2_popups_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (0, ej2_base_1.enableRipple)(window.ripple);\n    ej2_filemanager_1.FileManager.Inject(ej2_filemanager_1.Toolbar, ej2_filemanager_1.NavigationPane, ej2_filemanager_1.DetailsView, ej2_filemanager_1.ContextMenu);\n    var hostUrl = 'https://ej2-aspcore-service.azurewebsites.net/';\n    var favoriteFiles = {};\n    var selectedItems = [];\n    var isFavoriteAjax = false;\n    var itemsCount = 0;\n    var treeSelectedNodes = [];\n    var isFavorite = false;\n    var fileObject = new ej2_filemanager_1.FileManager({\n        ajaxSettings: {\n            url: hostUrl + 'api/Overview/FileOperations',\n            getImageUrl: hostUrl + 'api/Overview/GetImage',\n            uploadUrl: hostUrl + 'api/Overview/Upload',\n            downloadUrl: hostUrl + 'api/Overview/Download'\n        },\n        view: 'Details',\n        toolbarItems: [\n            { name: '', prefixIcon: 'e-menu filemanagermenu', tooltipText: 'Toggele Menu' },\n            { name: 'NewFolder' },\n            { name: 'SortBy' },\n            { name: 'Refresh' },\n            { name: 'Cut' },\n            { name: 'Copy' },\n            { name: 'Paste' },\n            { name: 'Selection' },\n            { name: 'View' },\n            { name: '', align: 'Right', prefixIcon: 'e-show-hide-panel', tooltipText: 'Preview Pane' },\n        ],\n        contextMenuSettings: {\n            file: ['Cut', 'Copy', '|', 'Details'],\n            folder: ['Cut', 'Copy', 'Paste', '|', 'Details'],\n            layout: ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', '|', 'Details', '|', 'SelectAll'],\n        },\n        detailsViewSettings: {\n            columns: [\n                {\n                    field: 'name', headerText: 'Name', width: '220px', maxWidth: '230px',\n                    template: function (data) {\n                        var isFavoriteItem = favoriteFiles[data.name] ? 'filled' : '';\n                        var title = isFavoriteItem ? 'Unfavorite' : 'Favorite';\n                        return '<div class=\"fmNameColumn\">' + '<span>' + data.name + '</span>' + '<div class=\"custom-icons\">' +\n                            '<span class=\"e-icons e-delete\" data-action=\"delete\" title=\"Delete\"></span>' +\n                            '<span class=\"e-icons e-download\" data-action=\"download\" title=\"Download\"></span>' +\n                            '<span class=\"e-icons e-star-filled favorite-icon ' + isFavoriteItem + '\" data-action=\"favorite\" title=\"' + title + '\"></span>' +\n                            '</div>' + '</div>';\n                    }, customAttributes: { class: 'e-fe-grid-name' },\n                },\n                {\n                    field: '_fm_modified', headerText: 'DateModified', format: 'MM/dd/yyyy hh:mm a'\n                },\n                {\n                    field: 'size', headerText: 'Size', template: '<span class=\"e-fe-size\">${size}</span>', format: 'n2'\n                }\n            ]\n        },\n        navigationPaneSettings: { visible: false },\n        fileLoad: onFileLoad,\n        fileSelect: onFileSelect,\n        beforeSend: onBeforeSend,\n        toolbarClick: onToolbarClick,\n        toolbarCreate: onToolbarCreate,\n        success: onSuccess,\n    });\n    fileObject.appendTo('#filemanager');\n    var mobileTreeData = [\n        { name: 'File Manager', id: 0, iconCss: 'e-icons e-menu' },\n        { name: 'Drive', id: 1, iconCss: 'e-icons e-folder', },\n        { name: 'Documents', id: 2, iconCss: 'e-icons e-file-document', },\n        { name: 'Downloads', id: 3, iconCss: 'e-icons e-download', },\n        { name: 'Videos', id: 4, iconCss: 'e-icons e-video', },\n        { name: 'Local Disk (C)', id: 5, iconCss: 'e-icons e-folder', },\n        { name: 'Local Disk (D)', id: 6, iconCss: 'e-icons e-folder', },\n    ];\n    var treeData = [\n        { id: 0, name: 'File Manager', iconCss: 'e-icons e-menu' },\n        { id: 1, name: 'Drive', iconCss: 'e-icons e-folder', },\n        { id: 2, name: 'Recent', iconCss: 'e-icons e-clock', },\n        { id: 3, name: 'Favorite', iconCss: 'e-icons e-star-filled', },\n        { id: 4, name: 'Documents', iconCss: 'e-icons e-file-document', },\n        { id: 5, name: 'Downloads', iconCss: 'e-icons e-download', },\n        { id: 6, name: 'Videos', iconCss: 'e-icons e-video', },\n        { id: 7, name: 'Local Disk (C)', iconCss: 'e-icons e-folder', },\n        { id: 8, name: 'Local Disk (D)', iconCss: 'e-icons e-folder', },\n    ];\n    var treeObj = new ej2_navigations_1.TreeView({\n        fields: { dataSource: treeData, id: 'id', text: 'name', iconCss: \"iconCss\" },\n        nodeSelected: onNodeSelected,\n        nodeClicked: onNodeClicked,\n        selectedNodes: ['1']\n    });\n    treeObj.appendTo('#tree');\n    var leftSideObj = new ej2_navigations_1.Sidebar({\n        target: '.mainLayout-content',\n        position: 'Left',\n        enableGestures: false,\n        open: function (args) {\n            var ele = args.element.classList.contains('e-over');\n            if (ele) {\n                treeObj.fields.dataSource = mobileTreeData;\n            }\n            treeObj.dataBind();\n        },\n        mediaQuery: '(min-width: 700px)'\n    });\n    leftSideObj.appendTo(\"#default_left_sidebar\");\n    var rightSideObj = new ej2_navigations_1.Sidebar({\n        enableGestures: false,\n        target: '.mainLayout-content',\n        position: 'Right',\n        mediaQuery: '(min-width: 700px)',\n        open: function () {\n            if (leftSideObj.isOpen) {\n                var mainContent = document.querySelector('.mainLayout-content .e-content-animation');\n                if (mainContent && !mainContent.style.marginLeft) {\n                    mainContent.style.marginLeft = leftSideObj.element.offsetWidth + 'px';\n                }\n            }\n        },\n    });\n    rightSideObj.appendTo(\"#default_right_sidebar\");\n    var dlgObj = new ej2_popups_1.Dialog({\n        header: 'Confirm delete',\n        target: document.getElementById('filemanager'),\n        showCloseIcon: true,\n        visible: false,\n        isModal: true,\n        buttons: [\n            {\n                click: deleteConfirmationButton,\n                buttonModel: { content: 'Yes', isPrimary: true }\n            },\n            {\n                click: dialogCloseButton,\n                buttonModel: { content: 'No' }\n            }\n        ],\n    });\n    dlgObj.appendTo('#deleteDialog');\n    function dialogCloseButton() {\n        dlgObj.hide();\n    }\n    function deleteConfirmationButton() {\n        fileObject.deleteFiles(selectedItems);\n        dlgObj.hide();\n    }\n    function onBeforeSend(args) {\n        if (args.action == \"read\" && isFavorite && treeObj.selectedNodes[0] == '3') {\n            treeObj.selectedNodes = ['1'];\n            isFavoriteAjax = true;\n        }\n    }\n    function onSuccess(args) {\n        if (args.action == \"read\" || isFavorite) {\n            itemsCount = args.result.files.length;\n            viewPanedetails(fileObject.selectedItems);\n        }\n    }\n    function displayBreadcrumb(value) {\n        var breadcrumb = document.getElementById('filemanager_breadcrumbbar').ej2_instances[0].element;\n        if (value === 'Favorite') {\n            breadcrumb.classList.add('fmFavoriteBreadcrumb');\n        }\n        else {\n            breadcrumb.classList.remove('fmFavoriteBreadcrumb');\n        }\n        fileObject.refreshLayout();\n    }\n    function filemanagerFilterFiles(favoritesString) {\n        fileObject.path = '/';\n        var objectValue = { searchString: '*' + favoritesString + '*' };\n        fileObject.filterFiles(objectValue);\n    }\n    function onNodeSelected(args) {\n        isFavorite = false;\n        if (!(args.nodeData.id === \"0\")) {\n            treeSelectedNodes = treeObj.selectedNodes;\n        }\n        switch (args.nodeData.text) {\n            case 'Drive':\n                fileObject.sortBy = 'name';\n                fileObject.sortOrder = 'Ascending';\n                if (isFavoriteAjax) {\n                    isFavoriteAjax = false;\n                }\n                else {\n                    fileObject.path = '/';\n                }\n                fileObject.refreshFiles();\n                break;\n            case 'Recent':\n                fileObject.path = '/Videos/';\n                fileObject.sortBy = '_fm_modified';\n                fileObject.sortOrder = 'Descending';\n                fileObject.path = '/';\n                break;\n            case 'Favorite':\n                isFavorite = true;\n                var favoritesString = Object.keys(favoriteFiles).length > 0 ? Object.keys(favoriteFiles).join(',') : '';\n                if (favoritesString) {\n                    filemanagerFilterFiles(favoritesString);\n                }\n                if (favoritesString === \"\" && isFavorite) {\n                    filemanagerFilterFiles(\" \");\n                    setTimeout(function () {\n                        var emptyElement = document.getElementById('filemanager_grid').ej2_instances[0].element.querySelector('.e-empty');\n                        if (emptyElement) {\n                            emptyElement.querySelector('.e-empty-inner-content').innerHTML = 'Items you favorite will show up here';\n                        }\n                    }, 750);\n                }\n                break;\n            case 'Documents':\n            case 'Downloads':\n            case 'Videos':\n            case 'Local Disk (C)':\n            case 'Local Disk (D)':\n                fileObject.path = '/' + args.nodeData.text + '/';\n                fileObject.sortBy = 'name';\n                fileObject.sortOrder = 'Ascending';\n                break;\n        }\n        displayBreadcrumb(args.nodeData.text);\n    }\n    function onNodeClicked(args) {\n        var node = treeObj.getNode(args.node);\n        if (node.text === 'File Manager') {\n            leftSideObj.toggle();\n            var toolbarObj = document.getElementById('filemanager_toolbar').ej2_instances[0];\n            toolbarObj.hideItem(0, false);\n            treeObj.selectedNodes = treeSelectedNodes;\n        }\n    }\n    function removeFileExtension(filename) {\n        if (filename && filename.includes('.')) {\n            return filename.replace(/\\.[^/.]+$/, \"\");\n        }\n        return filename;\n    }\n    function formatFileType(fileType) {\n        if (fileType.startsWith('.')) {\n            fileType = fileType.substring(1);\n        }\n        return fileType;\n    }\n    function formatDate(dateString) {\n        if (dateString) {\n            var date = new Date(dateString);\n            var formattedDate = new Intl.DateTimeFormat(fileObject.locale, {\n                month: 'short',\n                day: '2-digit',\n                year: 'numeric'\n            }).format(date);\n            return formattedDate;\n        }\n        return null;\n    }\n    document.getElementById('close-btn').onclick = function () {\n        rightSideObj.toggle();\n    };\n    function getLastFolderName(path) {\n        if (path) {\n            path = path.replace(/\\/$/, \"\");\n            var parts = path.split('/');\n            return parts[parts.length - 1];\n        }\n        return null;\n    }\n    function viewPanedetails(selectedItems) {\n        var fileManagerContainer = document.querySelector('.filemanager-container');\n        var sizeElement = document.getElementById('fmSize').parentElement;\n        var locationElement = document.getElementById('fmLocation').parentElement;\n        var singleSelectionPane = document.getElementById('single-selection-pane');\n        var multipleSelectionPane = document.getElementById('multiple-selection-pane');\n        var noSelectionPane = document.getElementById('no-selection-pane');\n        singleSelectionPane.style.display = 'none';\n        multipleSelectionPane.style.display = 'none';\n        noSelectionPane.style.display = 'none';\n        if (selectedItems && fileObject.selectedItems.length > 1) {\n            fileManagerContainer.style.margin = '0px 10px 0px 5px';\n            multipleSelectionPane.style.display = 'block';\n            document.getElementById('fileType').innerHTML = \"Details Pane\";\n            document.getElementById('selected-count').innerHTML = fileObject.selectedItems.length + ' items selected';\n        }\n        else if (selectedItems && fileObject.selectedItems.length === 1) {\n            fileManagerContainer.style.margin = '0px 5px';\n            singleSelectionPane.style.display = 'block';\n            var isFile = selectedItems.isFile;\n            document.getElementById('fileType').innerHTML = isFile ? 'File' : 'Folder';\n            document.getElementById('fm-file-name').value = selectedItems.name || selectedItems;\n            document.getElementById('tag-name1').innerHTML = removeFileExtension(selectedItems.name || selectedItems);\n            document.getElementById('tag-name2').innerHTML = isFile ? formatFileType(selectedItems.type) : 'Folder';\n            document.getElementById('fmType').innerHTML = isFile ? 'File' : 'Folder';\n            document.getElementById('fmSize').innerHTML = (selectedItems.size / 1024).toFixed(2) + ' KB';\n            document.getElementById('fmLocation').innerHTML = fileObject.path;\n            document.getElementById('fmModified').innerHTML = formatDate(selectedItems.dateModified);\n            var imageTypeEle_1 = document.getElementById('imageType');\n            var currentClasses = Array.from(imageTypeEle_1.classList);\n            currentClasses.forEach(function (className) {\n                if (className !== 'e-filemanager-image') {\n                    imageTypeEle_1.classList.remove(className);\n                }\n            });\n            var imageTypeValue = selectedItems.isFile ? formatFileType(selectedItems.type) : 'Folder';\n            imageTypeEle_1.classList.add(imageTypeValue.toLowerCase());\n            locationElement.style.display = (fileObject.path === '/') ? 'none' : '';\n            sizeElement.style.display = !selectedItems.size ? 'none' : '';\n        }\n        else {\n            fileManagerContainer.style.margin = '0px 10px 0px 5px';\n            noSelectionPane.style.display = 'block';\n            var lastFolderName = fileObject.path === '/' ? 'Drive' : getLastFolderName(fileObject.path);\n            var currentFolderText = isFavorite ? 'Favorite' + ' ( ' + itemsCount + ' items' + ' )' : lastFolderName + ' ( ' + itemsCount + ' items' + ' )';\n            document.getElementById('fileType').innerHTML = \"Details Pane\";\n            document.getElementById('current-folder').innerHTML = currentFolderText;\n        }\n    }\n    function onFileLoad() {\n        setTimeout(function () {\n            var iconElements = fileObject.element.querySelectorAll(\".custom-icons\");\n            for (var i = 0; i < iconElements.length; i++) {\n                iconElements[i].addEventListener('click', handleIconClick);\n            }\n        }, 0);\n    }\n    function onFileSelect() {\n        var selectedItem = fileObject.getSelectedFiles();\n        if (selectedItem.length > 0) {\n            var type = selectedItem[0].isFile ? 'file' : 'folder';\n            dlgObj.content = \"Are you sure you want to delete this \" + type + \" ?\";\n        }\n        viewPanedetails(selectedItem[0]);\n    }\n    function onToolbarClick(args) {\n        var selectedItem = fileObject.getSelectedFiles()[0];\n        if (args.item.tooltipText === \"Preview Pane\") {\n            rightSideObj.toggle();\n            viewPanedetails(selectedItem);\n        }\n        else if (args.item.tooltipText === \"Toggele Menu\") {\n            leftSideObj.toggle();\n            var toolbarObj = document.getElementById('filemanager_toolbar').ej2_instances[0];\n            toolbarObj.hideItem(0, true);\n        }\n    }\n    function onToolbarCreate(args) {\n        setTimeout(function () {\n            if (!fileObject.isMobile) {\n                var toolbarObj = document.getElementById('filemanager_toolbar').ej2_instances[0];\n                toolbarObj.hideItem(0, true);\n            }\n        }, 50);\n    }\n    function handleIconClick(event) {\n        var target = event.target;\n        var action = target.getAttribute('data-action');\n        var fileName = getFileNameFromElement(target);\n        selectedItems = [fileName];\n        if (target.parentElement.classList.contains('custom-icons') && target.closest(\"tr\").getAttribute(\"aria-selected\")) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        switch (action) {\n            case 'delete':\n                dlgObj.visible = true;\n                break;\n            case 'download':\n                fileObject.downloadFiles(selectedItems);\n                break;\n            case 'favorite':\n                toggleFavorite(target, fileName);\n                break;\n        }\n    }\n    function getFileNameFromElement(element) {\n        var trElement = element.closest('tr');\n        if (trElement) {\n            var gridNameElement = trElement.querySelector('.e-fe-grid-name');\n            if (gridNameElement) {\n                var textContent = gridNameElement.textContent;\n                if (textContent) {\n                    return textContent.trim();\n                }\n            }\n        }\n        return null;\n    }\n    function toggleFavorite(iconElement, fileName) {\n        iconElement.classList.toggle('filled');\n        if (iconElement.classList.contains('filled')) {\n            favoriteFiles[fileName] = true;\n        }\n        else {\n            delete favoriteFiles[fileName];\n        }\n        var favoriteString = Object.keys(favoriteFiles).length > 0 ? Object.keys(favoriteFiles).join(',') : '';\n        if (favoriteString && isFavorite) {\n            filemanagerFilterFiles(favoriteString);\n        }\n        if (favoriteString === \"\" && isFavorite) {\n            filemanagerFilterFiles(\"  \");\n            setTimeout(function () {\n                var emptyElements = document.getElementById('filemanager_grid').ej2_instances[0].element.querySelector('.e-empty');\n                if (emptyElements) {\n                    emptyElements.querySelector('.e-empty-inner-content').innerHTML = 'Items you favorite will show up here';\n                }\n            }, 750);\n        }\n    }\n    var renameIcon = document.getElementById('rename-icon');\n    var tickIcon = document.getElementById('tick-icon');\n    var closeIcon = document.getElementById('close-icon');\n    var fileNameInput = document.getElementById('fm-file-name');\n    renameIcon.addEventListener('click', function () {\n        fileNameInput.removeAttribute('readonly');\n        fileNameInput.focus();\n        tickIcon.style.opacity = '1';\n        closeIcon.style.opacity = '1';\n    });\n    tickIcon.addEventListener('click', function () {\n        var selectedItem = fileObject.getSelectedFiles()[0];\n        if (selectedItem) {\n            fileObject.renameFile(selectedItem.name, fileNameInput.value);\n        }\n        tickIcon.style.opacity = '0';\n        closeIcon.style.opacity = '0';\n        fileNameInput.setAttribute('readonly', true);\n    });\n    closeIcon.addEventListener('click', function () {\n        fileNameInput.value = '';\n        fileNameInput.focus();\n    });\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./samples/file-manager/overview/index.ts?");

/***/ })

/******/ });