{"datasource.ts":"/**\n * ListView DataSource \n */\nexport let flatData: { [key: string]: Object }[] = [\n    { text: 'Hennessey Venom', id: 'list-01' },\n    { text: 'Bugatti Chiron', id: 'list-02' },\n    { text: 'Bugatti Veyron Super Sport', id: 'list-03' },\n    { text: 'SSC Ultimate Aero', id: 'list-04' },\n    { text: 'Koenigsegg CCR', id: 'list-05' },\n    { text: 'McLaren F1', id: 'list-06' },\n    { text: 'Aston Martin One- 77', id: 'list-07' },\n    { text: 'Jaguar XJ220', id: 'list-08' },\n    { text: 'McLaren P1', id: 'list-09' },\n    { text: 'Ferrari LaFerrari', id: 'list-10' },\n];\n\nexport let groupData: { [key: string]: Object }[] = [\n    {\n        'text': 'Audi A4',\n        'id': '9bdb',\n        'category': 'Audi'\n    },\n    {\n        'text': 'Audi A5',\n        'id': '4589',\n        'category': 'Audi'\n    },\n    {\n        'text': 'Audi A6',\n        'id': 'e807',\n        'category': 'Audi'\n    },\n    {\n        'text': 'Audi A7',\n        'id': 'a0cc',\n        'category': 'Audi'\n    },\n    {\n        'text': 'Audi A8',\n        'id': '5e26',\n        'category': 'Audi'\n    },\n    {\n        'text': 'BMW 501',\n        'id': 'f849',\n        'category': 'BMW'\n    },\n    {\n        'text': 'BMW 502',\n        'id': '7aff',\n        'category': 'BMW'\n    },\n    {\n        'text': 'BMW 503',\n        'id': 'b1da',\n        'category': 'BMW'\n    },\n    {\n        'text': 'BMW 507',\n        'id': 'de2f',\n        'category': 'BMW'\n    },\n    {\n        'text': 'BMW 3200',\n        'id': 'b2b1',\n        'category': 'BMW'\n    }\n];\n\nexport let callHistoryData: { [key: string]: Object }[] = [\n    { text: 'Smith', id: 'received-01', icon: 'e-custom', type: 'received', group: 'Received', time: '2 hours ago', category: 'Today' },\n    {\n        text: 'Johnson', id: 'received-02', icon: 'e-custom', type: 'received',\n        group: 'Received', time: 'Yesterday', category: 'Yesterday'\n    },\n    { text: 'Williams', id: 'missed-01', icon: 'e-custom', type: 'missed', group: 'Missed', time: '4 hours ago', category: 'Today' },\n    { text: 'Jones', id: 'missed-02', icon: 'e-custom', type: 'missed', group: 'Missed', time: 'Yesterday', category: 'Yesterday' },\n    {\n        text: 'Brown', id: 'received-03', icon: 'e-custom', type: 'received',\n        group: 'Received', time: 'Yesterday', category: 'Yesterday'\n    },\n    {\n        text: 'Anderson', id: 'received-04', icon: 'e-custom', type: 'received',\n        group: 'Received', time: '12 hours ago', category: 'Today'\n    },\n    {\n        text: 'Thomas', id: 'received-05', icon: 'e-custom', type: 'received',\n        group: 'Received', time: 'Yesterday', category: 'Yesterday'\n    },\n    { text: 'Jackson', id: 'missed-03', icon: 'e-custom', type: 'missed', group: 'Missed', time: 'Yesterday', category: 'Yesterday' },\n    { text: 'Emily', id: 'missed-04', icon: 'e-custom', type: 'missed', group: 'Missed', time: '14 hours ago', category: 'Today' },\n    { text: 'White', id: 'missed-05', icon: 'e-custom', type: 'missed', group: 'Missed', time: 'Yesterday', category: 'Yesterday' },\n    { text: 'Jones', id: 'missed-06', icon: 'e-custom', type: 'missed', group: 'Missed', time: '18 hours ago', category: 'Today' },\n    { text: 'Grace', id: 'missed-07', icon: 'e-custom', type: 'missed', group: 'Missed', time: 'Yesterday', category: 'Yesterday' },\n    { text: 'Brooklyn', id: 'missed-08', icon: 'e-custom', type: 'missed', group: 'Missed', time: 'Yesterday', category: 'Yesterday' },\n    {\n        text: 'Arianna', id: 'received-06', icon: 'e-custom', type: 'received',\n        group: 'Received', time: 'Yesterday', category: 'Yesterday'\n    },\n    {\n        text: 'Katherine', id: 'received-07', icon: 'e-custom', type: 'received',\n        group: 'Received', time: 'Yesterday', category: 'Yesterday'\n    },\n];\n\n//Define an array of JSON data group template\nexport let groupTemplateData: any = [\n    { Name: 'WI-FI', content: 'Disabled', id: '1', class: 'wifi', category: 'Wireless & networks', order: 0 },\n    { Name: 'Bluetooth', content: 'Disabled', id: '2', class: 'bluetooth', category: 'Wireless & networks', order: 0 },\n    { Name: 'SIM cards', id: '3', content: 'AT&T', class: 'sim', category: 'Wireless & networks', order: 0 },\n    { Name: 'Display', content: 'Adaptive brightness is OFF', id: '4', class: 'display', category: 'Device', order: 1 },\n    { Name: 'Sound', content: 'Ringer volume at 50%', id: '5', class: 'sound', category: 'Device', order: 1 },\n    { Name: 'Battery', content: '85%', id: '6', class: 'battery', category: 'Device', order: 1 },\n    { Name: 'Users', content: 'Signed in as Albert', id: '7', class: 'user', category: 'Device', order: 1 },\n    { Name: 'Location', content: 'ON / High accuracy', id: '8', class: 'location', category: 'Personal', order: 2 },\n    { Name: 'Security', id: '9', content: 'Screen Lock', class: 'security', category: 'Personal', order: 2 },\n    { Name: 'Languages & input', content: 'English (US)', id: '10', class: 'language', category: 'Personal', order: 2 }\n];\n//nested list-item\nexport let nestedListData: { [key: string]: Object }[] = [\n    {\n        id: '01', text: 'Music', icon: 'folder',\n        child: [\n            { id: '01-01', text: 'Gouttes.mp3', icon: 'file' }\n        ]\n    },\n    {\n        id: '02', text: 'Videos', icon: 'folder',\n        child: [\n            { id: '02-01', text: 'Naturals.mp4', icon: 'file' },\n            { id: '02-02', text: 'Wild.mpeg', icon: 'file' },\n        ]\n    },\n    {\n        id: '03', text: 'Documents', icon: 'folder',\n        child: [\n            { id: '03-01', text: 'Environment Pollution.docx', icon: 'file' },\n            { id: '03-02', text: 'Global Water, Sanitation, & Hygiene.docx', icon: 'file' },\n            { id: '03-03', text: 'Global Warming.ppt', icon: 'file' },\n            { id: '03-04', text: 'Social Network.pdf', icon: 'file' },\n            { id: '03-05', text: 'Youth Empowerment.pdf', icon: 'file' },\n        ]\n    },\n    {\n        id: '04', text: 'Pictures', icon: 'folder',\n        child: [\n            {\n                id: '04-01', text: 'Camera Roll', icon: 'folder',\n                child: [\n                    { id: '04-01-01', text: 'WIN_20160726_094117.JPG', icon: 'file' },\n                    { id: '04-01-02', text: 'WIN_20160726_094118.JPG', icon: 'file' },\n                    { id: '04-01-03', text: 'WIN_20160726_094119.JPG', icon: 'file' }\n                ]\n            },\n            {\n                id: '04-02', text: 'Wind.jpg', icon: 'file'\n            },\n            {\n                id: '04-02', text: 'Stone.jpg', icon: 'file'\n            },\n            {\n                id: '04-02', text: 'Home.jpg', icon: 'file'\n            },\n            {\n                id: '04-02', text: 'Bridge.png', icon: 'file'\n            }\n        ]\n    },\n    {\n        id: '05', text: 'Downloads', icon: 'folder',\n        child: [\n            { id: '05-01', text: 'UI-Guide.pdf', icon: 'file' },\n            { id: '05-02', text: 'Tutorials.zip', icon: 'file' },\n            { id: '05-03', text: 'Game.exe', icon: 'file' },\n            { id: '05-04', text: 'TypeScript.7z', icon: 'file' },\n        ]\n    },\n];\n\nexport let virtualizationData: any = [\n    { name: 'Nancy', icon: 'N', id: '0', alttext:''  },\n    { name: 'Andrew', icon: 'A', id: '1', alttext:''  },\n    { name: 'Janet', icon: 'J', id: '2', alttext:''  },\n    { name: 'Margaret', imgUrl: '//npmci.syncfusion.com/development/demos/src/listview/images/margaret.png', id: '3', alttext:''  },\n    { name: 'Steven', icon: 'S', id: '4', alttext:''  },\n    { name: 'Laura', imgUrl: '//npmci.syncfusion.com/development/demos/src/listview/images/laura.png', id: '5', alttext:''  },\n    { name: 'Robert', icon: 'R', id: '6', alttext:''  },\n    { name: 'Michael', icon: 'M', id: '7', alttext:''  },\n    { name: 'Albert', imgUrl: '//npmci.syncfusion.com/development/demos/src/listview/images/albert.png', id: '8', alttext:''  },\n    { name: 'Nolan', icon: 'N', id: '9', alttext:''  }\n];\n\nexport let foodData: { [key: string]: Object }[] = [\n    { text: 'Hamburger', id: 'list-01', price: '$10', src: '//npmci.syncfusion.com/development/demos/src/listview/images/hamburger.jpg', alttext:'hamburger', type: 'non-veg', description: 'A patty of ground beef grilled and placed between two halves of a bun with slices of lettuce and mayonnaise', rating: 3 },\n    { text: 'Cheeseburger', id: 'list-02', price: '$12', src: '//npmci.syncfusion.com/development/demos/src/listview/images/cheeseburger.jpg', alttext:'cheeseburger', type: 'veg', description: 'A hamburger with a slice of melted cheese on top of the meat patty, added near the end of the cooking time', rating: 4 },\n    { text: 'Sandwich', id: 'list-03', price: '$8', src: '//npmci.syncfusion.com/development/demos/src/listview/images/sandwich.jpg', alttext:'sandwich', type: 'veg', description: 'A combination of vegetables, sliced cheese or meat, placed on or between slices of bread with layer of ingredients', rating: 5 },\n    { text: 'Milkshake', id: 'list-04', price: '$6', src: '//npmci.syncfusion.com/development/demos/src/listview/images/milkshake.jpg', alttext:'milkshake', type: 'veg', description: 'A sweet beverage made by blending milk, ice cream, and flavorings or fruit syrup into a thick, sweet, cold mixture', rating: 3 },\n    { text: 'Muffin', id: 'list-05', price: '$11', src: '//npmci.syncfusion.com/development/demos/src/listview/images/muffin.jpg', alttext:'muffin', type: 'veg', description: 'Muffins are single-serving quick breads, which rise with the help of baking soda or baking powder and eggs instead of yeast', rating: 4 },\n    { text: 'Pizza', id: 'list-06', price: '$22', src: '//npmci.syncfusion.com/development/demos/src/listview/images/pizza.jpg', alttext:'pizza', type: 'veg', description: 'A combination of a flattened disk of bread dough with olive oil, oregano, tomato, mozzarella cheese', rating: 3 },\n    { text: 'Onion ring', id: 'list-07', price: '$10', src: '//npmci.syncfusion.com/development/demos/src/listview/images/onionrings.jpg', alttext:'onionrings', type: 'veg', description: 'Consists of a cross-sectional \"ring\" of onion dipped in bread crumbs and then deep fried; variant is made with onion paste.', rating: 4 },\n    { text: 'Sausage', id: 'list-08', price: '$15', src: '//npmci.syncfusion.com/development/demos/src/listview/images/sausage.jpg', alttext:'sausage', type: 'veg', description: 'Sausage is a combination of minced/ground meat, a binder, water and seasonings, mild but strongly spiced', rating: 5 },\n    { text: 'Pretzel', id: 'list-09', price: '$25', src: '//npmci.syncfusion.com/development/demos/src/listview/images/pretzel.jpg', alttext:'pretzel', type: 'veg', description: 'Made from a rope of dough, the pretzel is briefly boiled and then glazed with egg, salted, and baked', rating: 3 },\n    { text: 'Pancake', id: 'list-10', price: '$23', src: '//npmci.syncfusion.com/development/demos/src/listview/images/pancake.jpg', alttext:'pancake', type: 'veg', description: 'A combination of eggs, milk on a hot surface such as a griddle or frying pan, often frying with oil or butter', rating: 4 },\n];\n\nexport let foodItems: { [key: string]: Object }[] = [\n    { text: 'Taco', price: '$15', src: '//npmci.syncfusion.com/development/demos/src/listview/images/taco.jpg', type: 'veg', description: 'A crispy or soft corn or wheat tortilla that is folded or rolled and stuffed with a mixture of cheese, lettuce, and tomato', rating: 5 },\n    { text: 'Hot dog', price: '$50', src: '//npmci.syncfusion.com/development/demos/src/listview/images/hotdog.jpg', type: 'non-veg', description: 'A dish consisting of a grilled or steamed sausage served in the slit of a partially sliced bun also used as a wiener', rating: 3 },\n    { text: 'Fried chicken', price: '$19', src: '//npmci.syncfusion.com/development/demos/src/listview/images/friedchicken.jpg', type: 'non-veg', description: 'Chicken pieces coated with seasoned flour or batter and pan-fried, deep fried, pressure fried, or air fried', rating: 4 },\n    { text: 'Donuts', price: '$5', src: '//npmci.syncfusion.com/development/demos/src/listview/images/donuts.jpg', type: 'veg', description: 'A kind of ring-shaped snack food popular in many countries, which are usually deep fried from flour doughs', rating: 3 },\n    { text: 'Baguette', price: '$7', src: '//npmci.syncfusion.com/development/demos/src/listview/images/baguette.jpg', type: 'veg', description: 'French bread shaped like a long, thin loaf with a crisp and crunchy crust made using flour, yeast and water', rating: 4 },\n    { text: 'Soft drink', price: '$3', src: '//npmci.syncfusion.com/development/demos/src/listview/images/softdrink.jpg', type: 'veg', description: 'Flavored drinks usually with nutritive and/or intense sweeteners with other permitted food additives', rating: 5 },\n    { text: 'Bacon', price: '$12', src: '//npmci.syncfusion.com/development/demos/src/listview/images/bacon.jpg', type: 'non-veg', description: 'Salt-cured pork made from various cuts, typically the belly or less fatty parts of the back eaten as a side dish', rating: 3 },\n    { text: 'Chips', price: '$13', src: '//npmci.syncfusion.com/development/demos/src/listview/images/chips.jpg', type: 'veg', description: 'A small usually thin and flat piece (as of wood or stone) cut, struck, or flaked off also served as an appetizer', rating: 4 },\n    { text: 'Noodles', price: '$11', src: '//npmci.syncfusion.com/development/demos/src/listview/images/noodles.jpg', type: 'veg', description: 'A cooked egg-and-flour paste, generally distinguished from pasta by its elongated ribbonlike form', rating: 3 },\n]","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-12 control-section\">\n    <p class=\"displayText\">Food Items</p>\n    <div id=\"list-scrolling\"></div>\n</div>\n\n\n\n\n<style>\n    #list-scrolling {\n        margin: auto;\n        max-width: 800px;\n    }\n\n    #list-scrolling.e-listview.e-list-template .e-list-wrapper.e-list-multi-line.e-list-avatar .e-avatar {\n        background: transparent;\n        width: 85px;\n        height: 85px;\n        top: 50%;\n        transform: translateY(-50%);\n    }\n\n    .displayText{\n        text-align: center; \n        padding-bottom: 10px;\n        font-size: 18px;\n        font-weight: 500;\n        line-height: 1.1;\n        margin-top: 10px;\n        margin-bottom: 10px;\n    }\n    .bootstrap5 #list-scrolling .rating-content .e-rating-container .e-rating-item-container.e-rating-selected .e-rating-icon,\n    .bootstrap5-dark #list-scrolling .rating-content .e-rating-container .e-rating-item-container.e-rating-selected .e-rating-icon,\n    .bootstrap5\\.3  #list-scrolling .rating-content .e-rating-container .e-rating-item-container.e-rating-selected .e-rating-icon,\n    .bootstrap5\\.3-dark #list-scrolling .rating-content .e-rating-container .e-rating-item-container.e-rating-selected .e-rating-icon {\n        background: darkblue;\n        background-clip: text;\n    }\n</style>\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2/inputs\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * ListView Scrolling Sample\n */\nimport { ListView } from '@syncfusion/ej2-lists';\nimport { enableRipple, Browser, getUniqueID } from '@syncfusion/ej2-base';\nenableRipple(false);\n\n//Import an array of JSON data from dataSource\nimport { foodData, foodItems } from './datasource';\nimport { Rating } from '@syncfusion/ej2/inputs';\n\n//Define customized template\nfunction loadTemplate(data: any) {\n    let typeValue = data.type === 'veg' ? '#006400' : '#FF0000';\n    let ratingId = getUniqueID('rating');\n    if (!Browser.isDevice) {\n        return  '<div class=\"e-list-wrapper\" style=\"border-bottom: inset;\">' +\n                    '<div style=\"display: flex; justify-content: space-between; align-items: flex-start; white-space: normal; padding: 10px;\">' +\n                        '<div style=\"display: flex; align-items: center;\">' +\n                            '<img class=\"e-avatar\" src=\"'+ data.src +'\" alt=\"'+ data.alttext +'\" style=\"background:#BCBCBC; width: 100px; height: 100px; border-radius: 4px;\" />' +\n                            '<div style=\"margin-left: 20px; text-align: left; max-width: 600px; display: flex; flex-direction: column;\">' +\n                                '<div style=\"display: flex; align-items: center;\">' +\n                                    '<span style=\"font-size: 18px; font-weight: 600; padding-bottom: 3px;\" class=\"e-headertext\">' + data.text + '</span>' +\n                                    '<svg width=\"12\" height=\"12\" style=\"margin-left: 15px; margin-top: -2px;\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' + \n                                    '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 1H10C10.5523 1 11 1.44771 11 2V10C11 10.5523 10.5523 11 10 11H2C1.44771 11 1 10.5523 1 10V2C1 1.44771 1.44771 1 2 1ZM0 2C0 0.895432 0.895432 0 2 0H10C11.1046 0 12 0.895432 12 2V10C12 11.1046 11.1046 12 10 12H2C0.895432 12 0 11.1046 0 10V2ZM4 3C3.44771 3 3 3.44771 3 4V8C3 8.55229 3.44771 9 4 9H8C8.55229 9 9 8.55229 9 8V4C9 3.44771 8.55229 3 8 3H4Z\" fill=\" ' + typeValue +' \"/>' +\n                                    '</svg>' +\n                                '</div>' +\n                                '<span style=\"font-size: 16px; padding-bottom: 3px;\">' + data.price + '</span>' +\n                                '<div id=\"id-description\" class=\"e-text-content\" style=\"font-size: 15px;\">' + data.description + '</div>' +\n                                '<div class=\"rating-content\">' +\n                                    '<input id=\"' + ratingId + '\" class=\"ratings\">' +\n                                '</div>' +\n                            '</div>' +\n                        '</div>' +\n                    '</div>' +\n                '</div>';\n    } else {\n        return '<div class=\"e-list-wrapper e-list-multi-line e-list-avatar\" style=\"padding-left: 122px; padding-right: 1.0666em; border-bottom: inset;\">' +\n                '<img class=\"e-avatar\" src=\"'+ data.src +'\" alt=\"'+ data.alttext +'\" />' +\n                '<span class=\"e-list-item-header e-headertext\" style=\"font-size: 14px;\">' + data.text +  '</span>' +\n                '<svg width=\"12\" height=\"12\" style=\"right: 10px; margin-top: -15px; position: absolute;\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' + \n                '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 1H10C10.5523 1 11 1.44771 11 2V10C11 10.5523 10.5523 11 10 11H2C1.44771 11 1 10.5523 1 10V2C1 1.44771 1.44771 1 2 1ZM0 2C0 0.895432 0.895432 0 2 0H10C11.1046 0 12 0.895432 12 2V10C12 11.1046 11.1046 12 10 12H2C0.895432 12 0 11.1046 0 10V2ZM4 3C3.44771 3 3 3.44771 3 4V8C3 8.55229 3.44771 9 4 9H8C8.55229 9 9 8.55229 9 8V4C9 3.44771 8.55229 3 8 3H4Z\" fill=\" ' + typeValue +' \"/>' +\n                '</svg>' +\n                '<div style=\"font-size: 12px;\">' + data.price + '</div>' +\n                '<span class=\"e-list-content e-text-overflow\" style=\"font-size: 11px;\" >' + data.description + '</span>' +\n                '</div>';\n    }\n\n}\n\n\n    \n    //Initialize ListView component\n    let listviewInstance: ListView = new ListView({\n        dataSource: foodData,\n        height: 500,\n        template: loadTemplate,\n        scroll: onListScroll,\n        cssClass: 'e-list-template',\n        actionComplete: onActionComplete\n    });\n    //Render initialized ListView component\n    listviewInstance.appendTo('#list-scrolling');\n    \n    function onActionComplete() { \n        let ratingElements = listviewInstance.element.querySelectorAll('.ratings');\n        for (let i = 0; i < ratingElements.length; i++) {\n            let ratingObj: Rating = new Rating({\n                value: foodData[i].rating as number,\n                showTooltip: false,\n                readOnly: true\n            });\n            ratingObj.appendTo('#' + ratingElements[i].id)\n        }\n    }\n\n    function onListScroll(args: any) {\n        let newData = [];\n        let elementsCount = listviewInstance.element.querySelectorAll('.ratings');\n        let elementCountsLength = elementsCount.length;\n        if (args.scrollDirection === \"Bottom\") {\n            if (args.distanceY < 100) {\n                for (let i = 0; i <= foodItems.length - 1; i++) {\n                    let newId = getUniqueID('list');\n                    newData.push({ text: foodItems[i].text, id: newId, price: foodItems[i].price, src: foodItems[i].src, description: foodItems[i].description, type: foodItems[i].type });\n                }\n                listviewInstance.addItem(newData);\n                let newElements = listviewInstance.element.querySelectorAll('.ratings');\n                for (let i = elementCountsLength; i < newElements.length; i++) {\n                    let ratingObj_1: Rating = new Rating({\n                        value: foodItems[i - elementCountsLength].rating as number,\n                        showTooltip: false,\n                        readOnly: true\n                    });\n                    ratingObj_1.appendTo('#' + newElements[i].id)\n                }\n            }\n        }\n    }\n\n"}