{"theme-color.ts":"import { EmitType } from \"@syncfusion/ej2/base\";\nimport { ISparklineLoadEventArgs, SparklineTheme } from \"@syncfusion/ej2/charts\";\n\nexport function loadSparkLineTheme(args: ISparklineLoadEventArgs): void {\n    let theme: string = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.sparkline.theme = <SparklineTheme>(theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\" align=\"center\">\n    <div id=\"spark-container\" class=\"row\">\n        <div class=\"cols-sample-area\" align=\"center\" style=\"margin-top: 8%;\">\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\" id=\"spark-container1\">\n                    <div style=\"font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;\">\n                        <b>CPU</b>\n                    </div>\n                    <div id=\"cpu\" style=\"color: #0877d6;position: absolute; margin-top: 25px; margin-left: 8%;\">26% 1.2GHz</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\" id=\"spark-container2\">\n                    <div style=\"font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;\">\n                        <b>Disk</b>\n                    </div>\n                    <div id=\"disk\" style=\"color: #b247c6;position: absolute; margin-top: 25px; margin-left: 8%;\">50%</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\" id=\"spark-container3\">\n                    <div style=\"font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;\">\n                        <b>Memory</b>\n                    </div>\n                    <div id=\"memory\" style=\"color: #5bcc8f;position: absolute; margin-top: 25px; margin-left: 8%;\">6.5/15.8 GB (41%)</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\" id=\"spark-container4\">\n                    <div style=\"font-size: 12px; position: absolute; margin-top: 10px; margin-left: 8%;\">\n                        <b>Ethernet</b>\n                    </div>\n                    <div id=\"net\" style=\"color: #d1a990;position: absolute; margin-top: 25px; margin-left: 8%;\">R: 50Kbps</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-charts/index\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}// custom code start\n\n //tslint:disable\n// custom code end\n/**\n * sparkline sample for live update\n */\nimport { Sparkline, ISparklineLoadEventArgs, SparklineTheme } from '@syncfusion/ej2-charts/index';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { loadSparkLineTheme } from './theme-color';\n// custom code start\nexport let sparkload: EmitType<ISparklineLoadEventArgs> = (args: ISparklineLoadEventArgs) => {\n    loadSparkLineTheme(args);\n};\n// tslint:disable:max-func-body-length\n// custom code end\n\n    // custom code start\n    \n    // custom code end\n    let spark: Sparkline = new Sparkline({\n        height: '130px',\n        width: '90%', load: sparkload,\n        axisSettings: {\n            minY: 0, maxY: 150\n        },\n        containerArea: {\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        },\n        border: {\n            color: '#0358a0',\n            width: 1\n        },\n        fill: '#e8f2fc',\n        type: 'Area',\n        valueType: 'Numeric',\n        dataSource: [\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 30 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 40 },\n            { x: 6, yval: 20 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 40 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 30 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 20 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 40 },\n            { x: 18, yval: 30 },\n            { x: 19, yval: 40 }\n        ],\n        xName: 'x', yName: 'yval'\n    });\n    spark.appendTo('#spark-container1');\n\tspark.dataSource = spark.dataSource as Object[];\n    let temp1: number = spark.dataSource.length - 1;\n    function update(): void {\n        if (spark.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 50;\n\t\t\t(spark.dataSource as any[]).push({ x: ++temp1, yval: value });\n\t\t\t(spark.dataSource as any[]).shift();\n            spark.refresh();\n            let cpu: Element = document.getElementById('cpu');\n            if (cpu) {\n            cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';\n            }\n        }\n    }\n    let time: number = window.setInterval(update, 500);\n    let spark1: Sparkline = new Sparkline({\n        height: '130px',\n        width: '90%', load: sparkload,\n        lineWidth: 1,\n        axisSettings: {\n            minY: 4, maxY: 8\n        },\n        containerArea: {\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        },\n        border: {\n            color: '#b247c6',\n            width: 1\n        },\n        type: 'Area',\n        fill: '\t#f5e8fc',\n        valueType: 'Numeric',\n        dataSource: [\n            { x: 0, yval: 6.05 },\n            { x: 1, yval: 6.03 },\n            { x: 2, yval: 6.02 },\n            { x: 3, yval: 6.07 },\n            { x: 4, yval: 6.05 },\n            { x: 5, yval: 6.09 },\n            { x: 6, yval: 6.08 },\n            { x: 7, yval: 6.01 },\n            { x: 8, yval: 6.03 },\n            { x: 9, yval: 6.01 },\n            { x: 10, yval: 6.07 },\n            { x: 11, yval: 6.05 },\n            { x: 12, yval: 6.01 },\n            { x: 13, yval: 6.06 },\n            { x: 14, yval: 6.05 },\n            { x: 15, yval: 6.03 },\n            { x: 16, yval: 6.01 },\n            { x: 17, yval: 6.09 },\n            { x: 18, yval: 6.06 },\n            { x: 19, yval: 6.05 }\n        ],\n        xName: 'x', yName: 'yval'\n    });\n    spark1.appendTo('#spark-container2');\n\tspark1.dataSource = spark1.dataSource as Object[];\n    let temp2: number = spark1.dataSource.length - 1;\n    function update1(): void {\n        if (spark1.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = Math.random();\n            if (value > 0.6) {\n                value = 6 + (value / 10);\n            } else {\n                value = 6 - (value / 10);\n            }\n\t\t\t(spark1.dataSource as any[]).push({ x: ++temp2, yval: value });\n\t\t\t(spark1.dataSource as any[]).shift();\n            spark1.refresh();\n            let memory: Element = document.getElementById('memory');\n            let gb: string = parseFloat(value.toString().replace('0', '')).toFixed(1);\n            if (memory) {\n            memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';\n            }\n        }\n    }\n    let time1: number = window.setInterval(update1, 500);\n    let spark2: Sparkline = new Sparkline({\n        height: '130px',\n        width: '90%', load: sparkload,\n        lineWidth: 1,\n        axisSettings: {\n            minY: 0, maxY: 130\n        },\n        containerArea: {\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        },\n        border: {\n            color: '#27ad66',\n            width: 1\n        },\n        type: 'Area',\n        fill: '#e0f9d1',\n        valueType: 'Numeric',\n        dataSource: [\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 70 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 20 },\n            { x: 6, yval: 80 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 70 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 60 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 30 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 20 },\n            { x: 18, yval: 60 },\n            { x: 19, yval: 50 }\n        ],\n        xName: 'x', yName: 'yval'\n    });\n    spark2.appendTo('#spark-container3');\n\tspark2.dataSource = spark2.dataSource as Object[];\n    let temp3: number = spark2.dataSource.length - 1;\n    function update2(): void {\n        if (spark2.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 80;\n\t\t\t(spark2.dataSource as any[]).push({ x: ++temp3, yval: value });\n\t\t\t(spark2.dataSource as any[]).shift();\n            spark2.refresh();\n            let disk: Element = document.getElementById('disk');\n            if (disk) {\n            disk.innerHTML = value.toFixed(0) + '%';\n            }\n        }\n    }\n    let time2: number = window.setInterval(update2, 500);\n    let spark3: Sparkline = new Sparkline({\n        height: '130px',\n        width: '90%', load: sparkload,\n        lineWidth: 1,\n        axisSettings: {\n            minY: 0, maxY: 120\n        },\n        containerArea: {\n            background: 'white',\n            border: {\n                color: '#dcdfe0',\n                width: 2\n            }\n        },\n        border: {\n            color: '#AA907A',\n            width: 1\n        },\n        type: 'Area',\n        fill: '#F2D8C7',\n        valueType: 'Numeric',\n        dataSource: [\n            { x: 0, yval: 50 },\n            { x: 1, yval: 30 },\n            { x: 2, yval: 20 },\n            { x: 3, yval: 70 },\n            { x: 4, yval: 50 },\n            { x: 5, yval: 20 },\n            { x: 6, yval: 80 },\n            { x: 7, yval: 10 },\n            { x: 8, yval: 30 },\n            { x: 9, yval: 10 },\n            { x: 10, yval: 70 },\n            { x: 11, yval: 50 },\n            { x: 12, yval: 10 },\n            { x: 13, yval: 60 },\n            { x: 14, yval: 50 },\n            { x: 15, yval: 30 },\n            { x: 16, yval: 10 },\n            { x: 17, yval: 20 },\n            { x: 18, yval: 60 },\n            { x: 19, yval: 50 }\n        ],\n        xName: 'x', yName: 'yval'\n    });\n    spark3.appendTo('#spark-container4');\n\tspark3.dataSource = spark3.dataSource as Object[];\n    let temp4: number = spark3.dataSource.length - 1;\n    function update4(): void {\n        if (spark3.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 80;\n\t\t\t(spark3.dataSource as any[]).push({ x: ++temp3, yval: value });\n\t\t\t(spark3.dataSource as any[]).shift();\n            spark3.refresh();\n            let net: Element = document.getElementById('net');\n            if (net) {\n            net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';\n            }\n        }\n    }\n    let time4: number = window.setInterval(update4, 500);\n"}