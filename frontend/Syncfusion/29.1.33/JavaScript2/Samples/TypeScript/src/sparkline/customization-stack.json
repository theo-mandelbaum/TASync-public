{"theme-color.ts":"import { EmitType } from \"@syncfusion/ej2/base\";\nimport { ISparklineLoadEventArgs, SparklineTheme } from \"@syncfusion/ej2/charts\";\n\nexport function loadSparkLineTheme(args: ISparklineLoadEventArgs): void {\n    let theme: string = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.sparkline.theme = <SparklineTheme>(theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <div id=\"spark-container\" class=\"row\">\n        <div class=\"cols-sample-area\" align=\"center\">\n            <p>\n                <font size=\"4px\"> Worldwide car sales by brand - 2017</font>\n            </p>\n            <table style=\"width:100%;\">\n                <tbody><tr>\n                    <td align=\"center\" style=\"width: 30%;\">Sales Percentage</td>\n                    <td style=\"width: 30%;\">\n                        <div id=\"percentage\" style=\"height:200px\"></div>\n                    </td>\n                </tr>\n                <tr>\n                    <td align=\"center\" style=\"width: 30%;\">Sales Count</td>\n                    <td style=\"width: 30%;\">\n                        <div id=\"sales\" style=\"height:200px\"></div>\n                    </td>\n                </tr>\n            </tbody></table>\n        </div>\n    </div>\n    <!-- source link-->\n    <div style=\"float: right; margin-right: 10px;\">Source:\n        <a href=\" http://carsalesbase.com/global-car-sales-2017\" target=\"_blank\" aria-label=\"Navigate to the documentation for car sales base\">carsalesbase.com</a>\n    </div>\n</div>\n\n\n\n\n\n\n<!--- property panel-->\n<div class=\"col-lg-4 property-section\">\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n    <br>\n    <table id=\"property\" style=\"width:100%\" title=\"Properties\">\n        <tbody>\n            <tr style=\"height: 30px\">\n                <td class=\"property-text\" style=\"width: 50%\">\n                    Sparkline\n                </td>\n                <td style=\"width: 50%\">\n                    <select id=\"spark\" style=\"width: 100%;\">\n                        <option selected=\"\" value=\"salespercentage\">Sales Percentage</option>\n                        <option value=\"salescount\">Sales Count</option>\n                    </select>\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Special Points\n                </td>\n                <td style=\"width: 50%\">\n                    <table>\n                        <tbody><tr>\n                            <td>All</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"all\">\n                            </td>\n                            <td style=\"padding: 5px;\">Negative</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"negative\">\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 5px;\">First</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"first\">\n                            </td>\n                            <td style=\"padding: 5px;\">Last</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"last\">\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 5px;\">High</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"high\">\n                            </td>\n                            <td style=\"padding: 5px;\">Low</td>\n                            <td>\n                                <input type=\"checkbox\" id=\"low\">\n                            </td>\n                        </tr>\n                    </tbody></table>\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Marker\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"marker\" id=\"marker\">\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Data Label\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"datalabel\" id=\"datalabel\">\n                </td>\n            </tr>\n\t\t\t<tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Enable RTL\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"enableRTL\" id=\"enableRTL\">\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Tooltip\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"tooltip\" id=\"tooltip\">\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Track Line\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"trackline\" id=\"trackline\">\n                </td>\n            </tr>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\">\n                    Axis Line\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"axis\" id=\"axis1\">\n                </td>\n            </tr>\n            <tr>\n                <td id=\"axisval\">\n                    Axis Value\n                    <span>&nbsp;&nbsp;&nbsp;0</span>\n                </td>\n                <td>\n                    <div id=\"range\"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}// custom code start\n\n// custom code end\n/**\n * sparkline sample for customization\n */\nimport { Sparkline, ISparklineLoadEventArgs, SparklineTheme, SparklineTooltip } from '@syncfusion/ej2-charts';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents} from '@syncfusion/ej2-buttons';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { Slider, SliderChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { loadSparkLineTheme } from './theme-color';\nSparkline.Inject(SparklineTooltip);\n\n    // custom code start\n    \n    // custom code end\n    let percentage: Sparkline = new Sparkline({\n        // custom code start\n        load: (args: ISparklineLoadEventArgs) => {\n            loadSparkLineTheme(args);\n        },\n        // custom code end\n        height: '200px',\n        width: '180px',\n        lineWidth: 1,\n        type: 'Column',\n        valueType: 'Category',\n        dataSource: [\n            { x: 0, xval: 'AUDI', yval: 1 },\n            { x: 1, xval: 'BMW', yval: 5 },\n            { x: 2, xval: 'BUICK', yval: -1 },\n            { x: 3, xval: 'CETROEN', yval: -6 },\n            { x: 4, xval: 'CHEVROLET', yval: 0 },\n            { x: 5, xval: 'FIAT', yval: 1 },\n            { x: 6, xval: 'FORD', yval: -2 },\n            { x: 7, xval: 'HONDA', yval: 7 },\n            { x: 8, xval: 'HYUNDAI', yval: -9 },\n            { x: 9, xval: 'JEEP', yval: 0 },\n            { x: 10, xval: 'KIA', yval: -10 },\n            { x: 11, xval: 'MAZDA', yval: 3 },\n            { x: 12, xval: 'MERCEDES', yval: 13 },\n            { x: 13, xval: 'NISSAN', yval: 5 },\n            { x: 14, xval: 'OPEL/VHALL', yval: -6 },\n            { x: 15, xval: 'PEUGEOT', yval: 0 },\n            { x: 16, xval: 'RENAULT', yval: 7 },\n            { x: 17, xval: 'SKODA', yval: 5 },\n            { x: 18, xval: 'SUBARU', yval: 5 },\n            { x: 19, xval: 'SUZUKI', yval: 11 },\n            { x: 20, xval: 'TOYOTA', yval: 5 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 3 },\n        ],\n        xName: 'xval', yName: 'yval',\n        axisSettings: {\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        },\n        markerSettings: {\n            fill: 'red',\n            size: 5\n        },\n        tooltipSettings: {\n            format: '${xval}: ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }\n    });\n    percentage.appendTo('#percentage');\n    let sales: Sparkline = new Sparkline({\n        // custom code start\n        load: (args: ISparklineLoadEventArgs) => {\n            loadSparkLineTheme(args);\n        },\n        // custom code end\n        height: '200px',\n        width: '180px',\n        lineWidth: 1,\n        type: 'Column',\n        valueType: 'Category',\n        dataSource: [\n            { x: 0, xval: 'AUDI', yval: 1847613 },\n            { x: 1, xval: 'BMW', yval: 2030331 },\n            { x: 2, xval: 'BUICK', yval: 1465823 },\n            { x: 3, xval: 'CETROEN', yval: 999888 },\n            { x: 4, xval: 'CHEVROLET', yval: 3857388 },\n            { x: 5, xval: 'FIAT', yval: 1503806 },\n            { x: 6, xval: 'FORD', yval: 5953122 },\n            { x: 7, xval: 'HONDA', yval: 4967689 },\n            { x: 8, xval: 'HYUNDAI', yval: 3951176 },\n            { x: 9, xval: 'JEEP', yval: 1390130 },\n            { x: 10, xval: 'KIA', yval: 2511293 },\n            { x: 11, xval: 'MAZDA', yval: 1495557 },\n            { x: 12, xval: 'MERCEDES', yval: 2834181 },\n            { x: 13, xval: 'NISSAN', yval: 4834694 },\n            { x: 14, xval: 'OPEL/VHALL', yval: 996559 },\n            { x: 15, xval: 'PEUGEOT', yval: 1590300 },\n            { x: 16, xval: 'RENAULT', yval: 2275227 },\n            { x: 17, xval: 'SKODA', yval: 1180672 },\n            { x: 18, xval: 'SUBARU', yval: 1050390 },\n            { x: 19, xval: 'SUZUKI', yval: 2891415 },\n            { x: 20, xval: 'TOYOTA', yval: 7843423 },\n            { x: 21, xval: 'VOLKSWAGEN', yval: 6639250 },\n        ],\n        xName: 'xval', yName: 'yval',\n        axisSettings: {\n            lineSettings: {\n                color: 'red',\n                width: 2\n            }\n        },\n        markerSettings: {\n            fill: 'red',\n            size: 5\n        },\n        tooltipSettings: {\n            format: '${xval}: ${yval}',\n            trackLineSettings: {\n                color: 'red',\n                width: 1\n            }\n        }\n    });\n    sales.appendTo('#sales');\n    // code for property panel\n    let sampleChange: EmitType<ChangeEventArgs>;\n    let sampleValue: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Sales Percentage',\n        width: '100%',\n        change: sampleChange\n    });\n    let sliderChange: EmitType<SliderChangeEventArgs>;\n    let slider: Slider = new Slider(\n    {\n        value: 0,  type: 'MinRange',\n        change: sliderChange,\n        max: 100, min: 0\n    },\n    '#range');\n    let allchange: EmitType<CheckBoxChangeEvents>;\n    let allCheckBox: CheckBox = new CheckBox(\n    {\n        checked: true, change: allchange\n    },\n    '#all');\n    let otherchange: EmitType<CheckBoxChangeEvents>;\n    let negativeCheckBox: CheckBox = new CheckBox(\n    {\n        change: otherchange, disabled: true\n    },\n    '#negative');\n    let firstCheckBox: CheckBox = new CheckBox(\n    {\n        change: otherchange, disabled: true\n    },\n    '#first');\n    let lastCheckBox: CheckBox = new CheckBox(\n    {\n        change: otherchange, disabled: true\n    },\n    '#last');\n    let highCheckBox: CheckBox = new CheckBox(\n    {\n        change: otherchange, disabled: true\n    },\n    '#high');\n    let lowCheckBox: CheckBox = new CheckBox(\n    {\n        change: otherchange, disabled: true\n    },\n    '#low');\n    let markerchange: EmitType<CheckBoxChangeEvents>;\n    let markerCheckBox: CheckBox = new CheckBox(\n    {\n        change: markerchange\n    },\n    '#marker');\n    let datalabelchange: EmitType<CheckBoxChangeEvents>;\n    let datalabelCheckBox: CheckBox = new CheckBox(\n    {\n        change: datalabelchange\n    },\n    '#datalabel');\n    let enableRTLchange: EmitType<CheckBoxChangeEvents>;\n    let enableRTLCheckBox: CheckBox = new CheckBox(\n    {\n        change: enableRTLchange\n    },\n    '#enableRTL');\n    let tooltipchange: EmitType<CheckBoxChangeEvents>;\n    let tooltipCheckBox: CheckBox = new CheckBox(\n    {\n        change: tooltipchange\n    },\n    '#tooltip');\n    let trackerchange: EmitType<CheckBoxChangeEvents>;\n    let trackerCheckBox: CheckBox = new CheckBox(\n    {\n        change: trackerchange\n    },\n    '#trackline');\n    let axislinechange: EmitType<CheckBoxChangeEvents>;\n    let axislineCheckBox: CheckBox = new CheckBox(\n    {\n        change: axislinechange\n    },\n    '#axis1');\n\n    // tslint:disable-next-line:max-func-body-length\n    sampleValue.change = sampleChange = (drop: ChangeEventArgs) => {\n        if (drop.value === 'salespercentage') {\n            slider.min = 0;\n            slider.max = 10;\n            slider.value = percentage.axisSettings.value;\n        } else {\n            slider.min = 0;\n            slider.max = 5000000;\n            slider.value = sales.axisSettings.value;\n        }\n        if ((drop.value === 'salespercentage' && percentage.markerSettings.visible.length) ||\n            (drop.value === 'salescount' && sales.markerSettings.visible.length)) {\n            markerCheckBox.checked = true;\n        } else {\n            markerCheckBox.checked = false;\n        }\n        markerCheckBox.change = markerchange = (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.markerSettings.visible = getVisible();\n            } else {\n                spark.markerSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.dataLabelSettings.visible.length) ||\n            (drop.value === 'salescount' && sales.dataLabelSettings.visible.length)) {\n            datalabelCheckBox.checked = true;\n        } else {\n            datalabelCheckBox.checked = false;\n        }\n        let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n        if (!markerCheckBox.checked && !datalabelCheckBox.checked) {\n            allCheckBox.checked = false;\n            negativeCheckBox.checked = false;\n            firstCheckBox.checked = false;\n            lastCheckBox.checked = false;\n            highCheckBox.checked = false;\n            lowCheckBox.checked = false;\n        }\n        if (markerCheckBox.checked) {\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            allCheckBox.checked = spark.markerSettings.visible.indexOf('All') > -1;\n            negativeCheckBox.checked = spark.markerSettings.visible.indexOf('Negative') > -1;\n            firstCheckBox.checked = spark.markerSettings.visible.indexOf('Start') > -1;\n            lastCheckBox.checked = spark.markerSettings.visible.indexOf('End') > -1;\n            highCheckBox.checked = spark.markerSettings.visible.indexOf('High') > -1;\n            lowCheckBox.checked = spark.markerSettings.visible.indexOf('Low') > -1;\n        }\n        if (datalabelCheckBox.checked) {\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            allCheckBox.checked = spark.dataLabelSettings.visible.indexOf('All') > -1;\n            negativeCheckBox.checked = spark.dataLabelSettings.visible.indexOf('Negative') > -1;\n            firstCheckBox.checked = spark.dataLabelSettings.visible.indexOf('Start') > -1;\n            lastCheckBox.checked = spark.dataLabelSettings.visible.indexOf('End') > -1;\n            highCheckBox.checked = spark.dataLabelSettings.visible.indexOf('High') > -1;\n            lowCheckBox.checked = spark.dataLabelSettings.visible.indexOf('Low') > -1;\n        }\n        datalabelCheckBox.change = datalabelchange = (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.dataLabelSettings.visible = getVisible();\n            } else {\n                spark.dataLabelSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.tooltipSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.tooltipSettings.visible === true)) {\n            tooltipCheckBox.checked = true;\n        } else {\n            tooltipCheckBox.checked = false;\n        }\n        tooltipCheckBox.change = tooltipchange = (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.tooltipSettings.visible = true;\n            } else {\n                spark.tooltipSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.enableRtl === true) ||\n            (drop.value === 'salescount' && sales.enableRtl === true)) {\n            enableRTLCheckBox.checked = true;\n        } else {\n            enableRTLCheckBox.checked = false;\n        }\n        enableRTLCheckBox.change = enableRTLchange = (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean === true) {\n                spark.enableRtl = true;\n            } else {\n                spark.enableRtl = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.tooltipSettings.trackLineSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.tooltipSettings.trackLineSettings.visible === true)) {\n            trackerCheckBox.checked = true;\n        } else {\n            trackerCheckBox.checked = false;\n        }\n        trackerCheckBox.change = trackerchange =  (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.tooltipSettings.trackLineSettings.visible = true;\n            } else {\n                spark.tooltipSettings.trackLineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((drop.value === 'salespercentage' && percentage.axisSettings.lineSettings.visible === true) ||\n            (drop.value === 'salescount' && sales.axisSettings.lineSettings.visible === true)) {\n            axislineCheckBox.checked = true;\n        } else {\n            axislineCheckBox.checked = false;\n        }\n        axislineCheckBox.change = axislinechange =  (e: CheckBoxChangeEvents) => {\n            let boolean: boolean = e.checked;\n            let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n            if (boolean) {\n                spark.axisSettings.lineSettings.visible = true;\n            } else {\n                spark.axisSettings.lineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if (drop.value === 'salespercentage' && percentage.axisSettings.value !== 0) {\n            slider.value =  percentage.axisSettings.value;\n            slider.min = 0;\n            slider.max = 10;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + percentage.axisSettings.value;\n        }\n        if (drop.value === 'salescount' && sales.axisSettings.value !== 0) {\n            slider.value =  sales.axisSettings.value;\n            slider.min = 0;\n            slider.max = 5000000;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + sales.axisSettings.value;\n        }\n        slider.change = sliderChange = (e: SliderChangeEventArgs) => {\n                let spark: Sparkline = drop.value === 'salespercentage' ? percentage : sales;\n                spark.axisSettings.value = e.value as number;\n                document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + e.value;\n                spark.refresh();\n            };\n        allCheckBox.checked = !(negativeCheckBox.checked || highCheckBox.checked || lowCheckBox.checked ||\n            firstCheckBox.checked || lastCheckBox.checked);\n        negativeCheckBox.disabled = highCheckBox.disabled = lowCheckBox.disabled = firstCheckBox.disabled =\n        lastCheckBox.disabled = allCheckBox.checked;\n    };\n    sampleValue.appendTo('#spark');\n    if (sampleValue.value === 'salespercentage') {\n        slider.min = 0;\n        slider.max = 10;\n    } else {\n        slider.min = 0;\n        slider.max = 5000000;\n    }\n    allCheckBox.change = allchange = (e: CheckBoxChangeEvents) => {\n        let checked: boolean = e.checked;\n        negativeCheckBox.disabled = checked;\n        firstCheckBox.disabled = checked;\n        lastCheckBox.disabled = checked;\n        highCheckBox.disabled = checked;\n        lowCheckBox.disabled = checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        spark.markerSettings.visible = (checked && markerCheckBox.checked) ? ['All'] : (markerCheckBox.checked) ? getVisible() : [];\n        spark.dataLabelSettings.visible = (checked && datalabelCheckBox.checked) ? ['All'] :\n        (datalabelCheckBox.checked) ? getVisible() : [];\n        spark.refresh();\n    };\n    negativeCheckBox.change = otherchange = firstCheckBox.change = lastCheckBox.change = highCheckBox.change =\n    lowCheckBox.change = (e: CheckBoxChangeEvents) => {\n        processMarkerLabel(e);\n    };\n    let processMarkerLabel: Function = (e: CheckBoxChangeEvents): void => {\n        let checked: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (markerCheckBox.checked) {\n            spark.markerSettings.visible = getVisible();\n            spark.refresh();\n        }\n        if (datalabelCheckBox.checked) {\n            spark.dataLabelSettings.visible = getVisible();\n            spark.refresh();\n        }\n    };\n    let getVisible: Function = (): string[] => {\n        let visible: string[] = [];\n        if (allCheckBox.checked) { return ['All']; }\n        if (negativeCheckBox.checked) { visible.push('Negative'); }\n        if (firstCheckBox.checked) { visible.push('Start'); }\n        if (lastCheckBox.checked) { visible.push('End'); }\n        if (highCheckBox.checked) { visible.push('High'); }\n        if (lowCheckBox.checked) { visible.push('Low'); }\n        return visible;\n    };\n    markerCheckBox.change = markerchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.markerSettings.visible = getVisible();\n        } else {\n            spark.markerSettings.visible = [];\n        }\n        spark.refresh();\n    };\n    datalabelCheckBox.change = datalabelchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.dataLabelSettings.visible = getVisible();\n        } else {\n            spark.dataLabelSettings.visible = [];\n        }\n        spark.refresh();\n    };\n    enableRTLCheckBox.change = enableRTLchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean === true) {\n            spark.enableRtl =  true;\n        } else {\n            spark.enableRtl =  false;\n        }\n        spark.refresh();\n    };\n\n    tooltipCheckBox.change = tooltipchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.tooltipSettings.visible = true;\n            spark.tooltipSettings.format = '${xval}: ${yval}';\n        } else {\n            spark.tooltipSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    trackerCheckBox.change = trackerchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.tooltipSettings.trackLineSettings.visible = true;\n            spark.tooltipSettings.trackLineSettings.color = 'red';\n            spark.tooltipSettings.trackLineSettings.width = 1;\n        } else {\n            spark.tooltipSettings.trackLineSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    axislineCheckBox.change = axislinechange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n        if (boolean) {\n            spark.axisSettings.lineSettings.visible = true;\n            spark.axisSettings.lineSettings.color = 'red';\n            spark.axisSettings.lineSettings.width = 2;\n        } else {\n            spark.axisSettings.lineSettings.visible = false;\n        }\n        spark.refresh();\n    };\n    slider.change = sliderChange = (e: SliderChangeEventArgs) => {\n            let spark: Sparkline = sampleValue.value === 'salespercentage' ? percentage : sales;\n            spark.axisSettings.value = e.value as number;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + e.value;\n            spark.refresh();\n    };\n"}