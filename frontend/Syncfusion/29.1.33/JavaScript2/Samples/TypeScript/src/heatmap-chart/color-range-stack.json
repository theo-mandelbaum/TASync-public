{"palatte-sample-data.json":"\n{\n    \"palatteSampleData\":[\n        [17.2, 24.6, 18.4, 9.6, 8.6, 18.8, 10.3, 5.0],\n        [15.8, 29.9, 15.2, 31.3, 18.1, 5.5, 10.2, 14.6],\n        [17.8, 25.5, 19.1, 12.9, 7.5, 30.7, 12.6, 5.6],\n        [7.3, 20.1, 18.8, 20.3, 6.1, 9.0, 29.8, 7.7],\n        [7.8, 30.5, 19.6, 10.8, 7.9, 15.5, 5.2, 14.3],\n        [5.8, 31.7, 17.8, 10.4, 17.3, 15.7, 9.1, 7.7],\n        [11.3, 29.1, 19.5, 11.5, 6.3, 12.9, 10.1, 6.7],\n        [13.7, 31.3, 15.3, 6.2, 7.7, 16.1, 18.9, 12.6],\n        [9.3, 29.9, 16.4, 14.5, 5.2, 12.3, 18.7, 7.3],\n        [16.3, 27.4, 27.0, 5.5, 16.2, 12.6, 8.3, 15.2],\n        [7.2, 20.1, 16.9, 9.0, 7.6, 16.2, 8.4, 29.0]]\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"container\" style=\"width:92%\"></div>\n            </div>\n        </div>\n        <div class=\"col-md-4 property-section\">\n            <table id=\"property\" title=\"Properties\" style=\"width: 100%;margin-left: -10px;\" role=\"none\">\n                <tbody>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 60%\">\n                            <div>Palette Type:</div>\n                        </td>\n                        <td style=\"width: 40%;\">\n                            <div>\n                                <div class=\"row\">\n                                    <input id=\"fixed\" type=\"radio\">\n                                </div>\n                                <div class=\"row\">\n                                    <input id=\"gradient\" type=\"radio\">\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-heatmap\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { HeatMap, Legend, Tooltip, Adaptor, ILoadedEventArgs, HeatMapTheme } from '@syncfusion/ej2-heatmap';\nimport { RadioButton } from '@syncfusion/ej2-buttons';\nimport * as data from './palatte-sample-data.json';\nimport { Browser } from '@syncfusion/ej2-base';\nHeatMap.Inject(Tooltip, Legend, Adaptor);\n// custom code start\n\n\n// custom code end\n\n    let heatmap: HeatMap = new HeatMap({\n        titleSettings: {\n            textStyle: {\n                size: '15px',\n                fontWeight: '500',\n                fontStyle: 'Normal',\n                fontFamily: 'inherit'\n            },\n            text: 'U.S. Government Energy Consumption by Agency (Trillion Btu)',\n        },\n        dataSource: (data as any).palatteSampleData,\n        xAxis: {\n            labels: ['2005', '2006', '2007', '2008', '2009', '2010',\n                '2011', '2012', '2013', '2014', '2015'],\n            labelIntersectAction: 'None',\n            labelRotation: 45,\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        yAxis: {\n            labels: ['Agriculture', 'Energy', 'Administration', 'Health', 'Interior',\n                'Justice', 'NASA', 'Transportation'],\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        paletteSettings: {\n            palette: [{ startValue:5, endValue:10, minColor:\"#F0C27B\", maxColor:\"#BE8D6C\"},\n            { startValue:10, endValue:15, minColor:\"#A26E63\", maxColor:\"#4B1248\"},\n            { startValue:15, endValue:20, minColor:\"#694b77\", maxColor:\"#d27d85\"},\n            { startValue:20, endValue:31.7, minColor:\"#ed9485\", maxColor:\"#e44841\"},\n            ],\n            type: 'Gradient'\n        },\n        legendSettings:{\n            textStyle: {\n                 fontFamily: 'inherit'\n             }\n         },\n        tooltipSettings:{\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        cellSettings: {\n            border: { width: 0 },\n            showLabel: false,\n        },\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.heatmap.theme = <HeatMapTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n            if (args.heatmap.element.offsetWidth < 500) {\n                args.heatmap.xAxis.labelRotation = 0;\n                args.heatmap.xAxis.labelIntersectAction = 'Trim';\n            } else {\n                args.heatmap.xAxis.labelRotation = 45;\n                args.heatmap.xAxis.labelIntersectAction = 'None';\n            }\n        }\n    });\n    heatmap.appendTo('#container');\n    let gradientradioButton: RadioButton = new RadioButton({\n        label: 'Gradient', name: 'paletteType',\n        change: () => { valueXChange(); }, value: 'Gradient', checked: true\n    });\n\n    let fixedRadioButton: RadioButton = new RadioButton({\n        label: 'Fixed', name: 'paletteType',\n        change: () => { valueXChange(); }, value: 'Fixed'\n    });\n    fixedRadioButton.appendTo('#fixed');\n\n    gradientradioButton.appendTo('#gradient');\n\n    function valueXChange(): void {\n        heatmap.paletteSettings.type = fixedRadioButton.checked ? 'Fixed' : 'Gradient';\n    }\n\n"}