{"cell-seletion-data.json":"\n{\n    \"cellSeletionData\":[\n        [2.9, 5.2, 3.4, 5.6, 4.4],\n        [6.6, 4.8, 8, 3.9, 6.5],\n        [5.1, 4.6, 5.4, 3.9, 4.3],\n        [5.2, 4.3, 3.9, 6.2, 6.4],\n        [7, 3, 1.9, 5.9, 3.5],\n        [7.8, 5.9, 3.9, 4.3, 4.3],\n        [6.5, 4.3, 3.9, 5.2, 3.9]],\n\n    \"chartData\":[\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Cereals\", \n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 2.9 }, { \"x\": \"2015\", \"y\": 5.2 }, { \"x\": \"2016\", \"y\": 3.4 },{ \"x\": \"2017\", \"y\": 5.6 },{ \"x\": \"2018\", \"y\": 4.4 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Meat\", \n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 6.6 }, { \"x\": \"2015\", \"y\": 4.8 }, { \"x\": \"2016\", \"y\": 8 },{ \"x\": \"2017\", \"y\": 3.9 },{ \"x\": \"2018\", \"y\": 6.5 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Spices\", \n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 5.1 }, { \"x\": \"2015\", \"y\": 4.6 }, { \"x\": \"2016\", \"y\": 5.4 },{ \"x\": \"2017\", \"y\": 3.9 },{ \"x\": \"2018\", \"y\": 4.3 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Tea\",\n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 5.2 }, { \"x\": \"2015\", \"y\": 4.3 }, { \"x\": \"2016\", \"y\": 3.9 },{ \"x\": \"2017\", \"y\": 6.2 },{ \"x\": \"2018\", \"y\": 6.4 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Edible Oil\",\n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 7 }, { \"x\": \"2015\", \"y\": 3 }, { \"x\": \"2016\", \"y\": 1.9 },{ \"x\": \"2017\", \"y\": 5.9 },{ \"x\": \"2018\", \"y\": 3.5 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Dairy Products\",\n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 7.8 }, { \"x\": \"2015\", \"y\": 5.9 }, { \"x\": \"2016\", \"y\": 3.9 },{ \"x\": \"2017\", \"y\": 4.3 },{ \"x\": \"2018\", \"y\": 4.5 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        },\n        {\n            \"type\": \"Column\", \"xName\": \"x\", \"width\": 2, \"yName\": \"y\",\"name\":\"Wheat\",\n            \"dataSource\": [{ \"x\": \"2014\", \"y\": 6.5 }, { \"x\": \"2015\", \"y\": 4.3 }, { \"x\": \"2016\", \"y\": 3.9 },{ \"x\": \"2017\", \"y\": 5.2 },{ \"x\": \"2018\", \"y\": 3.9 }],\n            \"marker\": { \"dataLabel\": { \"visible\": false } }\n        }\n    ]\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"col-md-9 control-section\">\n        <div id=\"container\" style=\"height:300px\"> </div>\n        <div id=\"container1\" style=\"height:300px\"> </div>\n    </div>\n    <div class=\"col-md-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;margin-left: -10px;\" role=\"none\">\n            <tbody>\n                <tr style=\"height: 50px\">\n                    <td style=\"width: 40%;\">\n                        <div>\n                             <button id=\"clearSelection\">Clear Selection</button>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    </main></div>\n    \n    \n\n</body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-heatmap\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { HeatMap, Tooltip, ILoadedEventArgs, HeatMapTheme, ISelectedEventArgs, SelectedCellDetails, Legend as HeatMapLegend } from '@syncfusion/ej2-heatmap';\nimport { ChartTheme, Chart, ColumnSeries, Category, Legend, DataLabel, Tooltip as chartTooltip, ILoadedEventArgs as IChartLoadedEventsArgs } from '@syncfusion/ej2-charts';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport * as data from './cell-seletion-data.json';\nHeatMap.Inject(Tooltip, HeatMapLegend);\nChart.Inject(ColumnSeries, DataLabel, Category, Legend, chartTooltip);\n// custom code start\n\n\n// custom code end\n\n    let heatmap: HeatMap = new HeatMap({\n        titleSettings: {\n            text: 'Top export products 2014-2018, Value in USD million',\n            textStyle: {\n                size: '15px',\n                fontWeight: '500',\n                fontStyle: 'Normal',\n                fontFamily: 'inherit'\n            }\n        },\n        xAxis: {\n            labels: ['Cereals', 'Meat', 'Spices', 'Tea', 'Edible Oil', 'Dairy Products', 'Wheat'],\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        yAxis: {\n            labels: ['2014', '2015', '2016', '2017', '2018'],\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        legendSettings: {\n            visible: false\n        },\n        allowSelection: true,\n        dataSource: (data as any).cellSeletionData,\n        paletteSettings: {\n            palette: [\n                { color: '#3C5E62 ' },\n                { color: '#86C843 ' }\n            ],\n        },\n        showTooltip: true,\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.heatmap.theme = <HeatMapTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        cellSettings:{\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        tooltipSettings:{\n            textStyle: {\n                fontFamily: 'inherit'\n            }\n        },\n        cellSelected: (args: ISelectedEventArgs) => {\n            let data: SelectedCellDetails[] = args.data;\n            let length: number = data.length;\n            let xAxis: string[] = [];\n            let flag: boolean[] = [];\n            let series: any = [];\n            for (let i: number = 0; i < length; i++) {\n                if (xAxis.indexOf(data[i].xLabel) === -1) {\n                    xAxis.push(data[i].xLabel);\n                    flag.push(false);\n                }\n            }\n            for (let i: number = 0; i < length; i++) {\n                let index: number = xAxis.indexOf(data[i].xLabel);\n                if (!flag[index]) {\n                    flag[index] = true;\n                    let column: any = {};\n                    column.type = 'Column';\n                    column.xName = 'x';\n                    column.yName = 'y';\n                    column.width = 2;\n                    column.name = data[i].xLabel;\n                    column.marker = { dataLabel: { visible: false } };\n                    column.dataSource = [];\n                    let columnData: any = {};\n                    columnData.x = data[i].yLabel;\n                    columnData.y = data[i].value;\n                    column.dataSource.push(columnData);\n                    series.push(column);\n                } else {\n                    let columnData: any = {};\n                    columnData.x = data[i].yLabel;\n                    columnData.y = data[i].value;\n                    series[index].dataSource.push(columnData);\n                }\n            }\n            chart.series = series;\n            chart.refresh();\n        },\n    });\n    heatmap.appendTo('#container');\n    let chart: Chart = new Chart({\n        primaryXAxis: {\n            valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n        },\n        chartArea: { border: { width: 0 } },\n        primaryYAxis:\n            {\n                majorGridLines: { width: 0 },\n                majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n            },\n        series: (data as any).chartData,\n        tooltip: {\n            enable: true\n        },\n        load: (args: IChartLoadedEventsArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    chart.appendTo('#container1');\n    let button: Button = new Button();\n    button.appendTo('#clearSelection');\n    document.getElementById('clearSelection').onclick = () => {\n        heatmap.clearSelection();\n        chart.series = (data as any).chartData;\n        chart.refresh();\n    };\n"}