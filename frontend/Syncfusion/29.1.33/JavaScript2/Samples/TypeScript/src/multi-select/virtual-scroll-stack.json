{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section col-lg-9\">\n    <div class=\"control-wrapper\">\n        <label class=\"h4\">Local Data</label>\n        <input type=\"text\" id=\"local\" tabindex=\"0\">\n    </div>\n    <div class=\"control-wrapper\">\n        <label class=\"h4\">Remote Data</label>\n        <input type=\"text\" id=\"remote\" tabindex=\"0\">\n    </div>\n    <div class=\"control-wrapper\">\n        <label class=\"h4\">Default Values</label>\n        <input type=\"text\" id=\"databind\" tabindex=\"0\">\n    </div>\n    <div class=\"control-wrapper\">\n        <label class=\"h4\">Grouping</label>\n        <input type=\"text\" id=\"group\" tabindex=\"0\">\n    </div>\n    <div class=\"control-wrapper\">\n        <label class=\"h4\">Template</label>\n        <input type=\"text\" id=\"template\" tabindex=\"0\">\n    </div>\n</div>\n<div class=\"col-lg-3 property-section\">\n    <div id=\"property\" title=\"Properties\">\n        <table id=\"property\" title=\"Properties\">\n            <tbody>\n                <tr>\n                    <td style=\"width: 50%;\">\n                        <div>\n                            <input id=\"filter\" type=\"checkbox\" checked=\"true\">\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"width: 50%;\">\n                        <div>\n                            <input id=\"custom\" type=\"checkbox\" checked=\"true\">\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"width: 50%;\">\n                        <div>\n                            <input id=\"hide\" type=\"checkbox\" checked=\"true\">\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"width: 50%;\">\n                        <div>\n                            <input id=\"close\" type=\"checkbox\" checked=\"true\">\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n\n\n\n\n<!-- custom code start -->\n<style>\n    .control-section .control-wrapper {\n        width: 80%;\n        margin: 0 auto;\n        width: 250px;\n        padding-top: 15px\n    } \n    .control-wrapper .h4 {\n        font-size: 16px;\n        margin: 0 0 10px;\n        font-weight: bold;\n    }\n    .e-list-icon {\n        font-family: 'e-icons' !important;\n        color: rgba(0, 0, 0, .57);\n    }\n    .header {\n        font-weight: 600;\n        color: rgba(0, 0, 0, .54);\n        height: 48px;\n        padding: 15px 0 0 16px;\n        font-size: 16px;\n        background-color: #f5f5f5;\n    }\n\n    /* custom code start*/\n    .fabric .header {\n        background-color: #fff;\n        border-bottom: 1px solid #ccc;\n        color: #0078d7;\n        font-weight: 400;\n    }\n\n    .fluent-dark .header,\n    .fluent2-dark .header,\n    .fluent2-highcontrast .header {\n        background: #252423;\n        color: #2899F5;\n    }\n\n    .bootstrap5-dark .header {\n        background: #343A40;\n        color: #7B848D;\n    }\n\n    .fluent .header{\n         color: #2899F5;\n    }\n\n    .tailwind-dark .header,\n    .tailwind3-dark .header {\n        background: #374151;\n        color: rgb(255, 255, 255);\n    }\n\n    .material3-dark .header,\n    .material-dark .header {\n        background: rgb(66, 66, 66);\n        color: rgb(255, 255, 255);\n    }\n\n    .fabric-dark .header {\n        background: rgb(40, 39, 39);\n        color: rgb(255, 255, 255);\n    }\n\n    .bootstrap-dark .header {\n        background: rgb(49, 49, 49);\n        color: rgb(255, 255, 255);\n    }\n\n    .bootstrap .header {\n        background-color: #f5f5f5;\n        border-bottom: 1px solid #ccc;\n        color: #777;\n        font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", \"sans-serif\";\n        font-weight: 600;\n        font-size: 15px;\n        height: 48px;\n        padding: 15px 0 0 16px;\n    }\n\n    .highcontrast .header {\n        color: #fff;\n        background-color: #000;\n    }\n    \n    .bootstrap4 .header {\n        color: #6c757d;\n    }\n    \n    .e-bigger.bootstrap .header {\n        height: 44px;\n        font-size: 13px;\n    }\n</style>\n<!-- custom code end-->\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * MultiSelect Virtualization Sample\n */\nimport { MultiSelect, DropDownList , VirtualScroll, ChangeEventArgs as DropDownChangeArgs, visualMode, CheckBoxSelection  } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, ChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { Query, DataManager, UrlAdaptor  } from '@syncfusion/ej2-data';\n\nMultiSelect.Inject(VirtualScroll);\nMultiSelect.Inject(CheckBoxSelection);\n\nlet records: { [key: string]: Object }[] = [];\n\nfor (let i = 1; i <= 150; i++) {\n    let item: { [key: string]: Object } = {};\n    item.id = 'id' + i;\n    item.text = `Item ${i}`;\n\n    // Generate a random number between 1 and 4 to determine the group\n    const randomGroup = Math.floor(Math.random() * 4) + 1;\n    switch (randomGroup) {\n        case 1:\n            item.group = 'Group A';\n            break;\n        case 2:\n            item.group = 'Group B';\n            break;\n        case 3:\n            item.group = 'Group C';\n            break;\n        case 4:\n            item.group = 'Group D';\n            break;\n        default:\n            break;\n    }\n    records.push(item);\n}\n\n\n    \n    // initialize MultiSelect component\n    let localObj: MultiSelect = new MultiSelect({\n        //set the local data to dataSource property\n        dataSource: records,\n        mode: 'Box',        \n        //enable the virtualization property\n        enableVirtualization: true,\n        popupHeight: '200px',\n        allowFiltering: true,\n        allowCustomValue: true,\n        showDropDownIcon:true,\n        hideSelectedItem: true,\n        closePopupOnSelect: true,\n        fields: { text: 'text', value: 'id' },\n        placeholder: 'e.g. Item 1'\n    });\n    localObj.appendTo('#local');\n\n    let remoteObj: MultiSelect = new MultiSelect({\n        //set the remote data to dataSource property\n        dataSource: new DataManager({\n            url: 'http://localhost:62728/api/VirtualDropdownData',\n            adaptor: new UrlAdaptor ,\n            crossDomain: true\n        }),\n        fields: { text: 'OrderID', value: 'OrderID' },\n        //enable the virtualization property\n        enableVirtualization: true,\n        allowFiltering: true,\n        mode: 'Delimiter', \n        // set true to enable the custom value support.\n        allowCustomValue: true,\n        hideSelectedItem: true,\n        closePopupOnSelect: true,\n        showDropDownIcon:true,\n        popupHeight: '200px',\n        // set the placeholder to DropDownList component\n        placeholder: 'OrderID'\n    });\n    remoteObj.appendTo('#remote');\n\n    let databindObj: MultiSelect = new MultiSelect({\n        //set the remote data to dataSource property\n        dataSource: records,\n        fields: { text: 'text', value: 'id' },\n        //enable the virtualization property\n        enableVirtualization: true,\n        popupHeight: '200px',\n        mode: 'Default', \n        value: ['id10', 'id50', 'id100', \"custom\"],\n        allowFiltering: true,\n        allowCustomValue: true,\n        hideSelectedItem: true,\n        closePopupOnSelect: true,\n        showDropDownIcon:true,\n        placeholder: 'e.g. Item 1'\n    });\n    databindObj.appendTo('#databind');\n\n    let groupObj: MultiSelect = new MultiSelect({\n        //set the local data to dataSource property\n        dataSource: records,\n        //enable the virtualization property\n        enableVirtualization: true,\n        popupHeight: '200px',\n        mode: 'CheckBox', \n        allowFiltering: true,\n        allowCustomValue: true,\n        showDropDownIcon:true,\n        enableSelectionOrder: false,\n        fields: { groupBy: 'group', text: 'text', value: 'id' },\n        placeholder: 'e.g. Item 1'\n    });\n    groupObj.appendTo('#group');\n\n    let templateObj: MultiSelect = new MultiSelect({\n        //set the local data to dataSource property\n        dataSource: records,\n        //enable the virtualization property\n        enableVirtualization: true,\n        popupHeight: '200px',\n        mode: 'Default', \n        allowFiltering: true,\n        allowCustomValue: true,\n        hideSelectedItem: true,\n        closePopupOnSelect: true,\n        showDropDownIcon:true,\n        headerTemplate:\n        '<div class=\"header\"><span style=\"margin-left:17px\">Items Info</span></div>',\n        // set the template content for list items\n        itemTemplate: '<div class=\"ename\" style=\"height: 40px\"> ${text} </div>',\n        // set the template content for displays the selected items in input element.\n        valueTemplate: '<div class=\"name\"> ${text} </div>',\n        fields: { text: 'text', value: 'id' },\n        placeholder: 'e.g. Item 1'\n    });\n    templateObj.appendTo('#template');\n\n    // Initialize the CheckBox component\n    let checkBoxObj: CheckBox = new CheckBox({\n        // set true for enable the checked state at initial rendering\n        checked: true,\n        // set text value for check box element.\n        label: 'AllowFiltering',\n        // bind change event\n        change: (args: ChangeEventArgs) => {\n            // enable or disable the allowFiltering in multiselect on CheckBox checked state\n            localObj.allowFiltering = args.checked;\n            remoteObj.allowFiltering = args.checked;\n            databindObj.allowFiltering = args.checked;\n            groupObj.allowFiltering = args.checked;\n            templateObj.allowFiltering = args.checked;\n        }\n    });\n    checkBoxObj.appendTo('#filter');\n    // Initialize the CheckBox component\n    checkBoxObj = new CheckBox({\n        checked: true,\n        label: 'AllowCustomValue',\n        change: (args: ChangeEventArgs) => {\n            localObj.allowCustomValue = args.checked;\n            remoteObj.allowCustomValue = args.checked;\n            databindObj.allowCustomValue = args.checked;\n            groupObj.allowCustomValue = args.checked;\n            templateObj.allowCustomValue = args.checked;\n        }\n    });\n    checkBoxObj.appendTo('#custom');\n\n    // Initialize the CheckBox component\n     checkBoxObj = new CheckBox({\n        checked: true,\n        label: 'HideSelectedItem',\n        change: (args: ChangeEventArgs) => {\n            localObj.hideSelectedItem = args.checked;\n            remoteObj.hideSelectedItem = args.checked;\n            databindObj.hideSelectedItem = args.checked;\n            templateObj.hideSelectedItem = args.checked;\n        }\n    });\n    checkBoxObj.appendTo('#hide');\n\n     // Initialize the CheckBox component\n     checkBoxObj = new CheckBox({\n        checked: true,\n        label: 'ClosePopupOnSelect',\n        change: (args: ChangeEventArgs) => {\n            localObj.closePopupOnSelect = args.checked;\n            remoteObj.closePopupOnSelect = args.checked;\n            databindObj.closePopupOnSelect = args.checked;\n            templateObj.closePopupOnSelect = args.checked;\n        }\n    });\n    checkBoxObj.appendTo('#close');\n"}