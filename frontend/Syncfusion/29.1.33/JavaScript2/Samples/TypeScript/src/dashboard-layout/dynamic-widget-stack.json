{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div>\n        <div style=\"width:100%;height: 30px\">\n            <button id=\"togglebtn\" style=\"float:right;width: 75px;\">Edit</button>\n        </div>\n\n        <div style=\"padding:5px;margin-top:5px;text-align: end;\">\n            <div class=\"add-widget-button e-control e-btn e-lib\" id=\"dialogBtn\">\n                Add New Widget\n            </div>\n        </div>\n    </div>\n\n    <div id=\"defaultLayout\">\n    </div>\n    <div id=\"dialogcontent\">\n        <div>\n            <div id=\"linetemplate\">\n                <p class=\"dialog-text\">Linechart (1x1) </p>\n            </div>\n            <div id=\"pietemplate\">\n                <p class=\"dialog-text\">Piechart (1x1) </p>\n\n            </div>\n            <div id=\"splinetemplate\">\n                <p class=\"dialog-text\">Splinechart (2x1) </p>\n\n            </div>\n        </div>\n    </div>\n    <div id=\"headerTemplate\">\n        <span id=\"close\" class=\"e-template-icon e-clear-icon\"></span>\n    </div>\n    <div id=\"content\"></div>\n</div>\n\n\n\n<div id=\"modalDialog\"></div>\n<script id=\"bodycontent\" type=\"template\">\n    <div class=\"panel-content\">\n        Content Area\n    </div>\n</script>\n<script id=\"headercontent\" type=\"template\">\n    <div>\n        <div class=\"header-border\"></div>\n        <span id=\"close\" class=\"e-template-icon e-clear-icon\"></span>\n        <!-- <span class=\"e-template-icon menu default\"></span> -->\n    </div>\n</script>\n\n<style>\n    #dialogBtn {\n        display: none;\n    }\n\n    .e-btn,\n    .e-css.e-btn {\n        display: block;\n    }\n\n    .dialog-text {\n        height: 35px;\n        border: 1px solid #80808029;\n        vertical-align: middle;\n        line-height: 35px;\n        border-radius: 4px;\n        padding-left: 12px;\n        margin-bottom: 5%;\n        cursor: pointer;\n    }\n\n    @media (max-width: 650px) {\n        #togglebtn {\n            width: 90px !important;\n        }\n    }\n\n    .add-widget-button {\n        padding: 10px;\n        text-align: center;\n        margin-bottom: 10px;\n        cursor: pointer;\n        font-size: 15px;\n    }\n\n    .e-dashboardlayout.e-control .e-panel:hover span {\n        display: block;\n    }\n\n    .e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {\n        padding: 10px;\n        border-bottom: 2px solid #e6e9ed !important;\n        height: 35px;\n        padding: 0 15px 0 15px;\n        line-height:35px;\n    }\n\n    .material .sb-demo-section .container-fluid,\n    .fabric .sb-demo-section .container-fluid,\n    .bootstrap4 .sb-demo-section .container-fluid,\n    .bootstrap .sb-demo-section .container-fluid {\n        background: #E5E5E5;\n    }\n\n    .tailwind .sb-demo-section .container-fluid {\n        background: #F9FAFB;\n    }\n\n    .e-panel-content {\n        height: calc(100% - 37px) !important;\n        overflow: hidden;\n        width: 100%;\n    }\n\n    .e-dashboardlayout.e-control .e-panel,\n    .e-dashboardlayout.e-control .e-panel:hover,\n    .e-dashboardlayout.e-control .e-panel:active {\n        border: 1px solid #bbb;\n    }\n\n    .e-dialog .e-dlg-header-content {\n        border-bottom: none;\n        padding: 18px 18px 18px 20px;\n    }\n\n    .edit::before {\n        content: '\\e501';\n        font-family: 'e-sb-icons';\n        /* color: #e3165b; */\n        margin-left: -7px;\n        vertical-align: middle;\n    }\n\n    .save::before {\n        content: '\\e500';\n        font-family: 'e-sb-icons';\n        /* color: #e3165b; */\n        margin-left: -7px;\n        vertical-align: middle;\n    }\n\n\n    /* custom code start*/\n    @font-face {\n        font-family: 'e-sb-icons';\n        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMjttR/MAAAEoAAAAVmNtYXDlEOVaAAABjAAAADhnbHlmAM1kuQAAAcwAAAD8aGVhZBRipc8AAADQAAAANmhoZWEIUQQEAAAArAAAACRobXR4DAAAAAAAAYAAAAAMbG9jYQA6AH4AAAHEAAAACG1heHABEQA4AAABCAAAACBuYW1lWD3y/QAAAsgAAAIlcG9zdNvk7cwAAATwAAAANQABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAApr5cCV8PPPUACwQAAAAAANioMG8AAAAA2KgwbwAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAADACwABAAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5QDlAQQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAEAAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOUB//8AAOUA//8AAAABAAQAAAABAAIAAAAAADoAfgAEAAAAAAP0A/MAAwALABkAIwAAAREhEQEVMzUzFSE1IxEhETMVMxEjESERIxEjERUhESM1IzUhAx79xAEeR0j+m0gB9I9HR/02SEcD6EdI/KcBcf7iAR4CPI+P19f+4gEeSPzuAWb+mgNa/KZHA1lIRwAAAAMAAAAAA/QD9AADAAgAKwAACQEnCQEDJQEnNwcXPwc1Lw8PBgLH/ko2Abb9uT4BGQJC2m0/2z8HBgUFAwMCAQIEBQcICQoLDA0NDw8PEA0NDQwLCwsCkf5KNgG2/l7+5z4CQ9puP9s/CgsLCwwNDQ0QDw8PDQ0MCwoJCAcFBAIBAQEDAwUFBgAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAcAAQABAAAAAAACAAcACAABAAAAAAADAAcADwABAAAAAAAEAAcAFgABAAAAAAAFAAsAHQABAAAAAAAGAAcAKAABAAAAAAAKACwALwABAAAAAAALABIAWwADAAEECQAAAAIAbQADAAEECQABAA4AbwADAAEECQACAA4AfQADAAEECQADAA4AiwADAAEECQAEAA4AmQADAAEECQAFABYApwADAAEECQAGAA4AvQADAAEECQAKAFgAywADAAEECQALACQBIyBlai1pY29uUmVndWxhcmVqLWljb25lai1pY29uVmVyc2lvbiAxLjBlai1pY29uRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABlAGoALQBpAGMAbwBuAFIAZQBnAHUAbABhAHIAZQBqAC0AaQBjAG8AbgBlAGoALQBpAGMAbwBuAFYAZQByAHMAaQBvAG4AIAAxAC4AMABlAGoALQBpAGMAbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQABHNhdmUEZWRpdAAAAAAA) format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n\n    [class^=\"sf-icon-\"],\n    [class*=\" sf-icon-\"] {\n        font-family: 'e-sb-icons' !important;\n        speak: none;\n        font-size: 55px;\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    .fabric #togglebtn,\n    .fabric-dark #togglebtn,\n    .highcontrast #togglebtn {\n        padding:0 13px;\n    }\n\n    .bootstrap5-dark .dialog-text,\n    .highcontrast .dialog-text,\n    .tailwind-dark .dialog-text,\n    .fabric-dark .dialog-text,\n    .bootstrap-dark .dialog-text {\n        border: 1px solid #FFFFFF;\n    }\n\n    .e-bigger.fluent #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.material3-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.material3 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.material3-dark #togglebtn.e-btn .e-btn-icon.e-icon-left {\n        margin-left: -0.5em;\n        width: 1em;\n    }\n\n    .e-bigger.bootstrap5 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.bootstrap5-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.material #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.material-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .material3 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .material3-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.fabric #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.fabric-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.bootstrap4 #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.bootstrap #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.bootstrap-dark #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.highcontrast #togglebtn.e-btn .e-btn-icon.e-icon-left {\n        margin-left: 0em;\n        width: 1em;\n    }\n\n    .tailwind #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.tailwind #togglebtn.e-btn .e-btn-icon.e-icon-left,\n    .e-bigger.tailwind-dark #togglebtn.e-btn .e-btn-icon.e-icon-left {\n        margin-left: -0.3em;\n        width: 1em;\n    }\n\n    .e-bigger.bootstrap4 #togglebtn.e-btn .e-btn-icon.e-icon-left {\n        margin-left: -0.2em;\n        width: 1.3em;\n    }\n\n</style>\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-layouts\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { DashboardLayout, PanelModel, ResizeArgs } from '@syncfusion/ej2-layouts';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Chart, LineSeries, DateTime, Legend, Tooltip, ColumnSeries, DataLabel, Category } from '@syncfusion/ej2-charts';\nChart.Inject(LineSeries, DateTime, Legend, Tooltip);\nimport { SplineAreaSeries, ChartTheme, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nChart.Inject(SplineAreaSeries, DateTime, Legend);\nChart.Inject(LineSeries, DateTime, Legend, Tooltip);\nChart.Inject(ColumnSeries, DataLabel, Category, Legend, Tooltip);\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport {\n    AccumulationChart, AccumulationLegend, PieSeries, AccumulationTooltip,\n    AccumulationDataLabel, IAccLoadedEventArgs, AccumulationTheme\n} from '@syncfusion/ej2-charts';\nAccumulationChart.Inject(AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel);\n\n/**\n *  Sample for edit  functionalities\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let dashboardObject: DashboardLayout = new DashboardLayout({\n        cellSpacing: [10, 10],\n        cellAspectRatio: 100 / 85,\n        allowDragging: false,\n        columns: 2,\n        allowResizing: false,\n        resizeStop: onPanelResize,\n        panels: [{\n            'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n            header: '<div>Line Chart</div>', content: '<div id=\"linechart\" style=\"height:100%; width:100%\"></div>'\n        },\n        {\n            'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 1,\n            header: '<div>Pie Chart</div>', content: '<div id=\"pie\" style=\"height:100%; width:100%\"></div>'\n        },\n        {\n            'sizeX': 2, 'sizeY': 1, 'row': 1, 'col': 0,\n            header: '<div>Spline Chart</div>', content: '<div id=\"chart\" style=\"height:100%; width:100%\"></div>'\n        }]\n    });\n    dashboardObject.appendTo('#defaultLayout');\n    let toggleBtn: Button = new Button({\n        cssClass: 'e-outline e-flat e-primary',\n        iconCss: 'edit',\n        isToggle: true\n    });\n    toggleBtn.appendTo('#togglebtn');\n    toggleBtn.element.onclick = () => {\n        if (toggleBtn.element.classList.contains('e-active')) {\n            dashboardObject.allowResizing = true;\n            dashboardObject.allowDragging = true;\n            toggleBtn.content = 'SAVE';\n            toggleBtn.iconCss = 'save';\n            document.getElementById('dialogBtn').style.display = 'block';\n        } else {\n            dashboardObject.allowResizing = false;\n            dashboardObject.allowDragging = false;\n            toggleBtn.content = 'EDIT';\n            toggleBtn.iconCss = 'edit';\n            document.getElementById('dialogBtn').style.display = 'none';\n        }\n    };\n\n    function onPanelResize(args: ResizeArgs): void {\n        if (args.element && args.element.querySelector('.e-panel-container .e-panel-content div')) {\n            let chartObj: any = (<any>args.element.querySelector('.e-panel-container .e-panel-content div')).ej2_instances[0];\n            chartObj.height = '95%';\n            chartObj.width = '100%';\n            chartObj.refresh();\n        }\n    }\n    setTimeout(() => {\n    let linechartObj: Chart = new Chart({\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n        },\n        chartArea: { border: { width: 0 } },\n        //Initializing Primary X Axis\n        primaryYAxis: {\n            majorGridLines: { width: 0 },\n            majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n        },\n        width: '99%',\n        height: '100%',\n        //Initializing Chart Series\n        series: [\n            {\n                dataSource: [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }],\n                marker: {\n                    dataLabel: {\n                        visible: false, position: 'Top', font: {\n                            fontWeight: '600', color: '#ffffff'\n                        }\n                    }\n                },\n                type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Jan', fill: '#00bdae',\n\n            },\n            {\n                dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }],\n                type: 'Column', yName: 'y', xName: 'x', width: 2, name: 'Feb', fill: '#e56691',\n                marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            },\n            {\n                dataSource: [{ x: 'Jan', y: 38 }, { x: 'Feb', y: 17 }, { x: 'Mar', y: 26 }],\n                type: 'Column', xName: 'x', name: 'Mar', width: 2, yName: 'y', fill: '#357cd2',\n                marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n            }\n        ],\n        load: (args: any) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = <any>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n            if (selectedTheme === 'highcontrast') {\n                args.chart.series[0].marker.dataLabel.font.color = '#000000';\n                args.chart.series[1].marker.dataLabel.font.color = '#000000';\n                args.chart.series[2].marker.dataLabel.font.color = '#000000';\n            }\n        }\n    });\n    linechartObj.appendTo('#linechart');\n    let pie: AccumulationChart = new AccumulationChart({\n        series: [\n            {\n                dataSource: [\n                    { 'x': 'Jan', y: 12.5, text: 'January' },\n                    { 'x': 'Feb', y: 25, text: 'February' },\n                    { 'x': 'Mar', y: 50, text: 'March' },\n                ],\n                palettes: ['#00bdae', '#357cd2', '#e56691'],\n                dataLabel: {\n                    visible: true,\n                    name: 'value',\n                    position: 'Inside'\n                },\n                radius: '100%', xName: 'x', yName: 'y', startAngle: 0, endAngle: 360, innerRadius: '40%', name: 'Earnings',\n            }\n\n        ],\n        tooltip: {\n            enable: true,\n            header: '<b>${point.x}</b>',\n            format: 'Composition : <b>${point.y}%</b>'\n        },\n\n        legendSettings: {\n            visible: false, toggleVisibility: false\n        },\n        width: '99%',\n        height: '100%',\n        load: (args: IAccLoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n        }\n    });\n    pie.appendTo('#pie');\n\n    let chart: Chart = new Chart({\n        //Initializing Primary Y Axis\n        primaryYAxis: {\n            maximum: 4, interval: 1,\n            labelFormat: '{value}',\n            lineStyle: { width: 0 },\n            majorTickLines: { width: 0 },\n            minorTickLines: { width: 0 }\n        },\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            valueType: 'DateTime',\n            labelFormat: 'MMM',\n            majorGridLines: { width: 0 },\n            intervalType: 'Months',\n            edgeLabelPlacement: 'Shift'\n        },\n        chartArea: {\n            border: {\n                width: 0\n            }\n        },\n        //Initializing Chart Series\n        series: [\n            {\n                dataSource: [\n                    { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.4 },\n                    { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.6 },\n                    { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.5 },\n                    { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.8 },\n                    { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\n                ],\n                name: 'Jan', xName: 'x', yName: 'y', type: 'SplineArea',\n                fill: 'rgb(239, 183, 202)',\n                opacity: 0.5,\n                border: { color: 'transparent' },\n            },\n            {\n                dataSource: [\n                    { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.7 },\n                    { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\n                    { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\n                    { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.8 },\n                    { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\n                ],\n                border: { color: 'transparent' },\n                name: 'Feb', xName: 'x', yName: 'y', type: 'SplineArea',\n                opacity: 0.5,\n                fill: 'rgb(0, 189, 174)',\n            }\n        ],\n        width: '99%',\n        height: '100%',\n        load: (args: ILoadedEventArgs) => {\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n            args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n        }\n    });\n    chart.appendTo('#chart');\n    }, 10);\n    let dialogObj: Dialog = new Dialog({\n        width: '500px',\n        header: 'Add a widget',\n        showCloseIcon: true,\n        animationSettings: { effect: 'Zoom' },\n        content: document.getElementById('dialogcontent'),\n        target: document.getElementById('target'),\n        isModal: true,\n        height: '260px',\n        visible: false\n    });\n    dialogObj.appendTo('#modalDialog');\n    dialogObj.hide();\n\n    let count: number = 3;\n    // tslint:disable-next-line:max-func-body-length\n    document.getElementById('dialogBtn').onclick = () => {\n        dialogObj.show();\n        (window as any).lineTemplateClick = function(): void {\n            let countValue: string = count.toString();\n            let panel: PanelModel[] = [{\n                'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                header: '<div>Line Chart</div>', content: '<div id=_line' + countValue + ' style=\"height:100%; width:100%\"></div>'\n            }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n\n            let linechartObj: Chart = new Chart({\n                //Initializing Primary X Axis\n                primaryXAxis: {\n                    valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n                },\n                chartArea: { border: { width: 0 } },\n                width: '99%',\n                height: '100%',\n                //Initializing Primary X Axis\n                primaryYAxis: {\n                    majorGridLines: { width: 0 },\n                    majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n                },\n                //Initializing Chart Series\n                series: [\n                    {\n                        dataSource: [{ x: 'Jan', y: 46 }, { x: 'Feb', y: 27 }, { x: 'Mar', y: 26 }],\n                        type: 'Column', xName: 'x', width: 2, yName: 'y', name: 'Jan', fill: '#00bdae',\n                        marker: {\n                            dataLabel: {\n                                visible: false, position: 'Top', font: {\n                                    fontWeight: '600', color: '#ffffff'\n                                }\n                            }\n                        }\n                    },\n                    {\n                        dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 23 }, { x: 'Mar', y: 18 }],\n                        type: 'Column', xName: 'x', width: 2, fill: '#e56691', yName: 'y', name: 'Feb',\n                        marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                    },\n                    {\n                        dataSource: [{ x: 'Jan', y: 37 }, { x: 'Feb', y: 18 }, { x: 'Mar', y: 25 }],\n                        type: 'Column', xName: 'x', name: 'Mar', fill: '#357cd2', width: 2, yName: 'y',\n                        marker: { dataLabel: { visible: false, position: 'Top', font: { fontWeight: '600', color: '#ffffff' } } }\n                    }\n                ],\n                load: (args: any) => {\n                    let selectedTheme: string = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.chart.theme = <any>(selectedTheme.charAt(0).toUpperCase() +\n                        selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                    if (selectedTheme === 'highcontrast') {\n                        args.chart.series[0].marker.dataLabel.font.color = '#000000';\n                        args.chart.series[1].marker.dataLabel.font.color = '#000000';\n                        args.chart.series[2].marker.dataLabel.font.color = '#000000';\n                    }\n                }\n            });\n            linechartObj.appendTo('#' + '_line' + countValue);\n            linechartObj.refresh();\n            dialogObj.hide();\n        };\n        (window as any).pieTemplateClick = function(): void {\n            let countValue: string = count.toString();\n            let panel: PanelModel[] = [{\n                'id': '_layout' + countValue, 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,\n                header: '<div>Pie Chart</div>', content: '<div id=_pie' + countValue + ' style=\"height:100%; width:100%\"></div>'\n            }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n            let pie: AccumulationChart = new AccumulationChart({\n                series: [\n                    {\n                        dataSource: [\n                            { 'x': 'Jan', y: 12.5, text: 'January' },\n                            { 'x': 'Feb', y: 25, text: 'February' },\n                            { 'x': 'Mar', y: 50, text: 'March' },\n                        ],\n                        palettes: ['#00bdae', '#357cd2', '#e56691'],\n                        radius: '100%', xName: 'x', yName: 'y', startAngle: 0, endAngle: 360, innerRadius: '40%', name: 'Earnings',\n                        dataLabel: {\n                            visible: true,\n                            name: 'value',\n                            position: 'Inside'\n                        }\n                    }\n\n                ],\n                tooltip: {\n                    enable: true,\n                    header: '<b>${point.x}</b>',\n                    format: 'Composition : <b>${point.y}%</b>'\n                },\n\n                legendSettings: {\n                    visible: false, toggleVisibility: false\n                },\n                width: '99%',\n                height: '100%',\n                load: (args: IAccLoadedEventArgs) => {\n                    let selectedTheme: string = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() +\n                        selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                }\n            });\n            pie.appendTo('#' + '_pie' + countValue);\n            pie.refresh();\n            dialogObj.hide();\n\n        };\n        (window as any).splineTemplateClick = function(): void {\n            let countValue: string = count.toString();\n            let panel: PanelModel[] = [{\n                'id': '_layout' + countValue, 'sizeX': 2, 'sizeY': 1, 'row': 0, 'col': 0,\n                header: '<div>Spline Chart</div>', content: '<div id=_spline' + countValue + ' style=\"height:100%; width:100%\"></div>'\n            }];\n            count = count + 1;\n            dashboardObject.addPanel(panel[0]);\n            let chart: Chart = new Chart({\n                //Initializing Primary X Axis\n                primaryXAxis: {\n                    valueType: 'DateTime',\n                    majorGridLines: { width: 0 },\n                    intervalType: 'Months',\n                    labelFormat: 'MMM',\n                    edgeLabelPlacement: 'Shift'\n                },\n                //Initializing Primary Y Axis\n                primaryYAxis: {\n                    maximum: 4, interval: 1,\n                    majorTickLines: { width: 0 },\n                    minorTickLines: { width: 0 },\n                    labelFormat: '{value}',\n                    lineStyle: { width: 0 },\n                },\n                chartArea: {\n                    border: {\n                        width: 0\n                    }\n                },\n                series: [\n                    {\n                        dataSource: [\n                            { x: new Date(2002, 0, 1), y: 2.2 }, { x: new Date(2003, 0, 1), y: 3.5 },\n                            { x: new Date(2004, 0, 1), y: 2.8 }, { x: new Date(2005, 0, 1), y: 1.4 },\n                            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 2.7 },\n                            { x: new Date(2008, 0, 1), y: 2.9 }, { x: new Date(2009, 0, 1), y: 3.9 },\n                            { x: new Date(2010, 0, 1), y: 1.4 }, { x: new Date(2011, 0, 1), y: 3.1 }\n                        ],\n                        name: 'Jan', xName: 'x', yName: 'y', type: 'SplineArea',\n                        border: { color: 'transparent' },\n                        fill: 'rgb(239, 183, 202)',\n                        opacity: 0.5\n                    },\n                    {\n                        dataSource: [\n                            { x: new Date(2002, 0, 1), y: 2 }, { x: new Date(2003, 0, 1), y: 1.8 },\n                            { x: new Date(2004, 0, 1), y: 1.8 }, { x: new Date(2005, 0, 1), y: 2.1 },\n                            { x: new Date(2006, 0, 1), y: 2.3 }, { x: new Date(2007, 0, 1), y: 1.7 },\n                            { x: new Date(2008, 0, 1), y: 1.5 }, { x: new Date(2009, 0, 1), y: 2.9 },\n                            { x: new Date(2010, 0, 1), y: 1.5 }, { x: new Date(2011, 0, 1), y: 2.3 }\n                        ],\n                        name: 'Feb', xName: 'x', yName: 'y', type: 'SplineArea',\n                        border: { color: 'transparent' },\n                        fill: 'rgb(0, 189, 174)',\n                        opacity: 0.5\n                    }\n                ],\n                width: '99%',\n                height: '100%',\n                load: (args: ILoadedEventArgs) => {\n                    let selectedTheme: string = location.hash.split('/')[1];\n                    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                    args.chart.theme = (selectedTheme && selectedTheme.indexOf('fabric') > -1) ? 'Fabric' : 'Material';\n                    args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark');\n                }\n            });\n            chart.appendTo('#' + '_spline' + countValue);\n            chart.refresh();\n            dialogObj.hide();\n\n        };\n    };\n\n"}