{"theme-color.ts":"import { EmitType } from \"@syncfusion/ej2/base\";\nimport { AccumulationTheme, ChartTheme, IAccLoadedEventArgs, IAccPointRenderEventArgs, ILoadedEventArgs, IPointRenderEventArgs } from \"@syncfusion/ej2/charts\";\n\n/**\n * Initialize the Theme colors\n */\nexport let materialColors: string[] = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let fabricColors: string[] = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\",\n    \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\", \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let bootstrapColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\",\n    \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\nexport let bootstrap5Colors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545',\n        '#FFC107', '#198754', '#0DCAF0','#FD7E14', '#6610F2'];\nexport let highContrastColors: string[] = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\",\n    \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\", \"#D8BC6E\"];\nexport let fluentColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let fluentDarkColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let fluent2Colors: string[] = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let fluent2HighContrastColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let fluent2DarkColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\n\nexport let bubbleMaterialColors: string[] = [\"rgba(0, 189, 174, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(53, 124, 210, 0.5)\", \"rgba(229, 101, 144, 0.5)\", \"rgba(248, 184, 131, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(221, 138, 189, 0.5)\",\n    \"rgba(127, 132, 232, 0.5)\", \"rgba(123, 180, 235, 0.5)\", \"rgba(234, 122, 87, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(0, 189, 174, 0.5)\"];\nexport let bubbleFabricColors: string[] = [\"rgba(68, 114, 196, 0.5)\", \"rgba(237, 125, 49, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(91, 155, 213, 0.5)\", \"rgba(193, 193, 193, 0.5)\", \"rgba(111, 111, 226, 0.5)\",\n    \"rgba(226, 105, 174, 0.5)\", \"rgba(158, 72, 14, 0.5)\", \"rgba(153, 115, 0, 0.5)\", \"rgba(68, 114, 196, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(237, 125, 49, 0.5)\"];\nexport let bubbleBootstrapColors: string[] = [\"rgba(161, 110, 229, 0.5)\", \"rgba(247, 206, 105, 0.5)\", \"rgba(85, 165, 194, 0.5)\", \"rgba(125, 223, 30, 0.5)\", \"rgba(255, 110, 166, 0.5)\", \"rgba(121, 83, 172, 0.5)\",\n    \"rgba(185, 155, 79, 0.5)\", \"rgba(64, 124, 146, 0.5)\", \"rgba(94, 167, 22, 0.5)\", \"rgba(185, 28, 82, 0.5)\"];\nexport let bubbleHighContrastColors: string[] = [\"rgba(121, 236, 228, 0.5)\", \"rgba(233, 130, 114, 0.5)\", \"rgba(223, 230, 182, 0.5)\", \"rgba(198, 231, 115, 0.5)\", \"rgba(186, 152, 255, 0.5)\", \"rgba(250, 131, 195, 0.5)\", \"rgba(0, 194, 122, 0.5)\",\n    \"rgba(67, 172, 239, 0.5)\", \"rgba(214, 129, 239, 0.5)\", \"rgba(216, 188, 110, 0.5)\"];\nexport let bubbleFluentColors: string[] = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n\"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleMaterialDarkColors: string[] = [\"rgba(158, 203, 8, 0.5)\", \"rgba(86, 174, 255, 0.5)\", \"rgba(197, 122, 255, 0.5)\", \"rgba(97, 234, 169, 0.5)\", \"rgba(235, 187, 62, 0.5)\", \"rgba(244, 92, 92, 0.5)\", \"rgba(138, 119, 255, 0.5)\",\n    \"rgba(99, 199, 255, 0.5)\", \"rgba(255, 132, 176, 0.5)\", \"rgba(247, 201, 40, 0.5)\"];\nexport let bubbleFluentDarkColors: string[] = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n\"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleTailwindColors: string[] = [\"rgba(90, 97, 246, 0.5)\", \"rgba(101, 163, 13, 0.5)\", \"rgba(51, 65, 85, 0.5)\", \"rgba(20, 184, 166, 0.5)\", \"rgba(139, 92, 246, 0.5)\", \"rgba(3, 105, 161, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(147, 51, 234, 0.5)\", \"rgba(245, 158, 11, 0.5)\", \"rgba(21, 128, 61, 0.5)\"];\nexport let bubbleTailwindDarkColors: string[] = [\"rgba(139, 92, 246, 0.5)\", \"rgba(34, 211, 238, 0.5)\", \"rgba(248, 113, 113, 0.5)\", \"rgba(74, 222, 128, 0.5)\", \"rgba(232, 121, 249, 0.5)\", \"rgba(252, 211, 77, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(45, 212, 191, 0.5)\", \"rgba(244, 114, 182, 0.5)\", \"rgba(16, 185, 129, 0.5)\"];\nexport let bubbleTailwind3Colors: string[] = [\"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\"];\nexport let bubbleTailwind3DarkColors: string[] = [\"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\"];\nexport let bubbleBootstrap5Colors: string[] = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)','rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleBootstrap5DarkColors: string[] = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)','rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleMaterial3Colors: string[] = [\"rgba(99, 85, 199, 0.5)\", \"rgba(0, 174, 224, 0.5)\", \"rgba(255, 180, 0, 0.5)\", \"rgba(247, 82, 63, 0.5)\", \"rgba(150, 60, 112, 0.5)\", \"rgba(253, 116, 0, 0.5)\", \"rgba(75, 224, 188, 0.5)\", \"rgba(33, 150, 245, 0.5)\", \"rgba(222, 61, 138, 0.5)\", \"rgba(22, 47, 136, 0.5)\"];\nexport let bubbleMaterial3DarkColors: string[] = [\"rgba(78, 170, 255, 0.5)\", \"rgba(250, 78, 171, 0.5)\", \"rgba(255, 245, 0, 0.5)\", \"rgba(23, 234, 88, 0.5)\", \"rgba(56, 255, 231, 0.5)\", \"rgba(255, 158, 69, 0.5)\", \"rgba(179, 243, 47, 0.5)\", \"rgba(185, 60, 228, 0.5)\", \"rgba(252, 86, 100, 0.5)\", \"rgba(155, 85, 255, 0.5)\"];\nexport let bubbleFluent2Colors: string[] = [\"rgba(98, 0, 238, 0.5)\", \"rgba(9, 175, 116, 0.5)\", \"rgba(0, 118, 229, 0.5)\", \"rgba(203, 53, 135, 0.5)\", \"rgba(231, 145, 15, 0.5)\", \"rgba(3, 100, 222, 0.5)\", \"rgba(102, 205, 21, 0.5)\", \"rgba(243, 169, 60, 0.5)\",\n\"rgba(16, 124, 16, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2HighContrastColors: string[] = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n\"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2DarkColors: string[] = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n\"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\n\n\nexport let pointMaterialColors: string[] = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let pointFabricColors: string[] = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n    \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let pointBootstrapColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n    \"#b91c52\"];\nexport let pointHighContrastColors: string[] = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n    \"#D8BC6E\"];\nexport let pointFluentColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let pointMaterialDarkColors: string[] = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n    \"#F7C928\"];\nexport let pointFluentDarkColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let pointTailwindColors: string[] = [\"#5A61F6\", \"#65A30D\", \"#334155\", \"#14B8A6\", \"#8B5CF6\", \"#0369A1\", \"#F97316\", \"#9333EA\", \"#F59E0B\", \"#15803D\"];\nexport let pointTailwindDarkColors: string[] = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\", \"#10B981\"];\nexport let pointTailwind3Colors: string[] = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];\nexport let pointTailwind3DarkColors: string[] = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];\nexport let pointBootstrap5Colors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2',];\nexport let pointBootstrap5DarkColors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2',];\nexport let pointMaterial3Colors: string[] = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\", \"#162F88\"];\nexport let pointMaterial3DarkColors: string[] = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\", \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\", \"#9B55FF\"];\nexport let pointFluent2Colors: string[] = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let pointFluent2HighContrastColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let pointFluent2DarkColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let keyFabricDark: string[] =  [\"#4472C4\", \"#ED7D31\", \"#FFC000\", \"#70AD47\"];  \nexport let keyBootstrap4Colors: string[] =  ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6','#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let keyBootstrapdarkColors: string[] =  [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\n\nexport let bubblePointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3'; \n        if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n            args.fill = bubbleFabricColors[args.point.index % 10];\n            args.border.color = pointFabricColors[args.point.index % 10];;\n        } else if (selectedTheme === 'material-dark') {\n            args.fill = bubbleMaterialDarkColors[args.point.index % 10];\n            args.border.color = pointMaterialDarkColors[args.point.index % 10];;\n        } else if (selectedTheme === 'material') {\n            args.fill = bubbleMaterialColors[args.point.index % 10];\n            args.border.color = pointMaterialColors[args.point.index % 10];\n        } else if (selectedTheme === 'bootstrap5-dark') {\n            args.fill = bubbleBootstrap5DarkColors[args.point.index % 10];\n            args.border.color = pointBootstrap5DarkColors[args.point.index % 10];\n        } else if (selectedTheme === 'bootstrap5') {\n            args.fill = bubbleBootstrap5Colors[args.point.index % 10];\n            args.border.color = pointBootstrap5Colors[args.point.index % 10];\n        } else if (selectedTheme === 'bootstrap') {\n            args.fill = bubbleBootstrapColors[args.point.index % 10];\n            args.border.color = pointBootstrapColors[args.point.index % 10];\n        } else if (selectedTheme === 'bootstrap4') {\n            args.fill = bubbleBootstrapColors[args.point.index % 10];\n            args.border.color = pointBootstrapColors[args.point.index % 10];\n        } else if (selectedTheme === 'bootstrap-dark') {\n            args.fill = bubbleBootstrapColors[args.point.index % 10];\n            args.border.color = pointBootstrapColors[args.point.index % 10];\n        } else if (selectedTheme === 'highcontrast') {\n            args.fill = bubbleHighContrastColors[args.point.index % 10];\n            args.border.color = pointHighContrastColors[args.point.index % 10];\n        } else if (selectedTheme === 'fluent-dark') {\n            args.fill = bubbleFluentDarkColors[args.point.index % 10];\n            args.border.color = pointFluentDarkColors[args.point.index % 10];\n        } else if (selectedTheme === 'fluent') {\n            args.fill = bubbleFluentColors[args.point.index % 10];\n            args.border.color = pointFluentColors[args.point.index % 10];\n        } else if (selectedTheme === 'tailwind-dark') {\n            args.fill = bubbleTailwindDarkColors[args.point.index % 10];\n            args.border.color = pointTailwindDarkColors[args.point.index % 10];\n        } else if (selectedTheme === 'tailwind') {\n            args.fill = bubbleTailwindColors[args.point.index % 10];\n            args.border.color = pointTailwindColors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'material3') {\n            args.fill = bubbleMaterial3Colors[args.point.index % 10];\n            args.border.color = pointMaterial3Colors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'material3-dark') {\n            args.fill = bubbleMaterial3DarkColors[args.point.index % 10];\n            args.border.color = pointMaterial3DarkColors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'fluent2') {\n            args.fill = bubbleFluent2Colors[args.point.index % 10];\n            args.border.color = pointFluent2Colors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'fluent2-highcontrast') {\n            args.fill = bubbleFluent2HighContrastColors[args.point.index % 10];\n            args.border.color = pointFluent2HighContrastColors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'fluent2-dark') {\n            args.fill = bubbleFluent2DarkColors[args.point.index % 10];\n            args.border.color = pointFluent2DarkColors[args.point.index % 10];\n        }\n        else if (selectedTheme === 'tailwind3-dark') {\n            args.fill = bubbleTailwind3DarkColors[args.point.index % 10];\n            args.border.color = pointTailwind3DarkColors[args.point.index % 10];\n        } \n        else if (selectedTheme === 'tailwind3') {\n            args.fill = bubbleTailwind3Colors[args.point.index % 10];\n            args.border.color = pointTailwind3Colors[args.point.index % 10];\n        }\n    };\nexport let pointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[args.point.index % 10];\n    } else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[args.point.index % 10];\n    } else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[args.point.index % 10];\n    } else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[args.point.index % 10];\n    }\n};\n\nlet seriesColor : string[] = ['#FFE066', \"#FAB666\", \"#F68F6A\", \"#F3646A\", \"#CC555A\", \"#9C4649\"];\nexport let donutPointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme==='fluent')\n    {\n      args.fill = seriesColor[args.point.index % 10];\n    }\n    else if(selectedTheme==='bootstrap5')\n    {\n      args.fill = seriesColor[args.point.index % 10];\n    }\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else if (selectedTheme.indexOf('fluent2') > -1) {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\n\nexport let roundedCornnerPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n\n        }\n        else {\n            args.border.color = '#222222';\n\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\n\nexport function loadChartTheme(args?: ILoadedEventArgs): string {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    var theme: ChartTheme;\n    if (args) {\n        theme = args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    else {\n        theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    return theme;\n};\n\nexport function loadAccumulationChartTheme(args: IAccLoadedEventArgs): string {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return selectedTheme;\n};\n\nexport let funnelPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[0];\n    } else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[0];;\n    } else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[0];\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[0];\n    } else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[0];\n    } else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[0];\n    } else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[0];\n    } else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[0];\n    } else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[0];\n    } else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[0];\n    } else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[0];\n    } else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[0];\n    } else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[0];\n    } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[0];\n    } else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[0];\n    } else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[0];\n    } ;\n};\n\nexport let overViewPointrender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let layoutColor;\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n            layoutColor = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n            layoutColor = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n            layoutColor = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n            layoutColor = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n            layoutColor = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n            layoutColor = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n        layoutColor = '#000000';\n    }\n    else if (selectedTheme.indexOf('fluent2-highcontrast') > -1) {\n        args.border.color = '#000000';\n        layoutColor = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n        layoutColor = '#FFFFFF';\n    }\n    if ((selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) && document.getElementById('defaultLayout')) {\n        let el = document.getElementById('header1');\n        el.style.setProperty('color', '#F3F2F1');\n        let el1 = document.getElementById('header2');\n        el1.style.setProperty('color', '#F3F2F1');\n        let el2 = document.getElementById('header3');\n        el2.style.setProperty('color', '#F3F2F1');\n    }\n    if (document.getElementById('defaultLayout')) {\n        let element = document.getElementById('layout_0template');\n        element.style.setProperty('background', layoutColor);\n        let elementBody = document.getElementById('linechart');\n        elementBody.style.setProperty('background', layoutColor);\n        let element1 = document.getElementById('layout_1template');\n        element1.style.setProperty('background', layoutColor);\n        let element1Body = document.getElementById('pie');\n        element1Body.style.setProperty('background', layoutColor);\n        let element2 = document.getElementById('layout_2template');\n        element2.style.setProperty('background', layoutColor);\n        let element2Body = document.getElementById('chart');\n        element2Body.style.setProperty('background', layoutColor);\n    }\n};\n\nexport let piePatternPointrender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    if (args.point.index == 0) {\n        args.pattern = 'DiagonalBackward'\n\n    }\n    else if (args.point.index == 1) {\n        args.pattern = 'DiagonalForward'\n\n    }\n    else if (args.point.index == 2) {\n        args.pattern = 'HorizontalStripe'\n\n    }\n    else if (args.point.index == 3) {\n        args.pattern = 'VerticalStripe'\n\n    }\n    else if (args.point.index == 4) {\n        args.pattern = 'HorizontalDash'\n\n    }\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n\n        }\n        else {\n            args.border.color = '#222222';\n\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n\n    }\n    else if (selectedTheme.indexOf('fluent2-highcontrast') > -1) {\n        args.border.color = '#000000';\n\n    }\n    else {\n        args.border.color = '#FFFFFF';\n\n    }\n\n};\n\nexport let roundedColumnPointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric-dark') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    } else if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'material-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    } else if (selectedTheme === 'material') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'bootstrap5') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'bootstrap-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"f9fafb\";\n    } else if (selectedTheme === 'bootstrap') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'highcontrast') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'fluent-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'fluent') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'tailwind-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'tailwind') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'tailwind3-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'tailwind3') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"#f9fafb\";\n    } else if (selectedTheme === 'fluent2') {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    } else {\n        if (args.series.yName == \"Rate\")\n            args.fill = \"grey\";\n    }\n};\nexport let pieLegendPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme === 'fluent2') {\n        args.fill = fluent2Colors[args.point.index % 10];\n    }\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"container\" align=\"center\"></div>    \n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { Chart, StackingColumnSeries, Category, Tooltip, Legend, ILoadedEventArgs, ILegendClickEventArgs, ITooltipRenderEventArgs, Highlight } from '@syncfusion/ej2-charts';\nChart.Inject(StackingColumnSeries, Category, Tooltip, Legend, Highlight);\nimport { Browser } from '@syncfusion/ej2-base';\nimport { loadChartTheme } from './theme-color';\n\n/**\n * Sample for StackingColumn100 Series Sample\n */\n\n    \n    let chart: Chart = new Chart({\n        //Initializing Primary X Axis\n        primaryXAxis: {\n            majorGridLines: { width: 0 },\n            minorGridLines: { width: 0 },\n            majorTickLines: { width: 0 },\n            minorTickLines: { width: 0 },\n            interval: 1,\n            lineStyle: { width: 0 },\n            labelIntersectAction: 'Rotate45',\n            valueType: 'Category'\n        },\n        //Initializing Primary Y Axis\n        primaryYAxis: {\n            lineStyle: { width: 0 },\n            majorTickLines: { width: 0 },\n            majorGridLines: { width: 1 },\n            minorGridLines: { width: 1 },\n            minorTickLines: { width: 0 },\n            interval: 20\n        },\n        chartArea: {\n            border: {\n                width: 0\n            },\n            margin: {\n                bottom: 12\n            }\n        },\n        //Initializing Chart Series\n        series: [\n            {\n                dataSource: Browser.isDevice ?\n                    [\n                        { x: '2021', y: 24300000 },\n                        { x: '2022', y: 26300000 },\n                        { x: '2023', y: 25400000 },\n                        { x: '2024', y: 25000000 }\n                    ] :\n                    [\n                        { x: '2019', y: 28500000 },\n                        { x: '2020', y: 27500000 },\n                        { x: '2021', y: 24300000 },\n                        { x: '2022', y: 26300000 },\n                        { x: '2023', y: 25400000 },\n                        { x: '2024', y: 25000000 }\n                    ], \n                xName: 'x', yName: 'y', type: 'StackingColumn100', legendShape: 'Rectangle',\n                name: 'India', columnWidth: 0.4, border: { width: 1, color: \"white\" }\n            },\n            {\n                dataSource: Browser.isDevice ?\n                    [\n                        { x: '2021', y: 26700000 },\n                        { x: '2022', y: 30800000 },\n                        { x: '2023', y: 27400000 },\n                        { x: '2024', y: 31000000 }\n                    ] :\n                    [\n                        { x: '2019', y: 26900000 },\n                        { x: '2020', y: 29300000 },\n                        { x: '2021', y: 26700000 },\n                        { x: '2022', y: 30800000 },\n                        { x: '2023', y: 27400000 },\n                        { x: '2024', y: 31000000 }\n                    ], \n                xName: 'x', yName: 'y', legendShape: 'Rectangle',\n                type: 'StackingColumn100', name: 'China', columnWidth: 0.4, border: { width: 1, color: \"white\" }\n            },\n            {\n                dataSource: Browser.isDevice ?\n                    [\n                        { x: '2021', y: 17500000 },\n                        { x: '2022', y: 14500000 },\n                        { x: '2023', y: 12100000 },\n                        { x: '2024', y: 14400000 }\n                    ] :\n                    [\n                        { x: '2019', y: 19900000 },\n                        { x: '2020', y: 14600000 },\n                        { x: '2021', y: 17500000 },\n                        { x: '2022', y: 14500000 },\n                        { x: '2023', y: 12100000 },\n                        { x: '2024', y: 14400000 }\n                    ], \n                xName: 'x', yName: 'y', legendShape: 'Rectangle',\n                type: 'StackingColumn100', name: 'United States', columnWidth: 0.4, border: { width: 1, color: \"white\" }\n            },\n            {\n                dataSource: Browser.isDevice ?\n                    [\n                        { x: '2021', y: 10800000 },\n                        { x: '2022', y: 11700000 },\n                        { x: '2023', y: 14600000 },\n                        { x: '2024', y: 17000000 }\n                    ] :\n                    [\n                        { x: '2019', y: 13000000 },\n                        { x: '2020', y: 13800000 },\n                        { x: '2021', y: 10800000 },\n                        { x: '2022', y: 11700000 },\n                        { x: '2023', y: 14600000 },\n                        { x: '2024', y: 17000000 }\n                    ], \n                xName: 'x', yName: 'y', legendShape: 'Rectangle', cornerRadius: { topLeft: 4, topRight: 4 },\n                type: 'StackingColumn100', name: 'Brazil', columnWidth: 0.4, border: { width: 1, color: \"white\" }\n            }\n        ],\n        load: (args: ILoadedEventArgs) => {\n            loadChartTheme(args);\n        },\n        width: Browser.isDevice ? '100%' : '75%',\n        //Initializing Chart Title\n        title: Browser.isDevice ? 'Global Cotton Production by Country (2021–2024)' : 'Global Cotton Production by Country (2019–2024)',\n        subTitle: 'Source: fas.usda.gov',\n        legendSettings: {\n            enableHighlight: true,\n            shapeWidth: 9,\n            shapeHeight: 9\n        },\n        //Initializing User Interaction Tooltip\n        tooltip: {\n            enable: true,\n            enableHighlight: true,\n            header: '<b>${point.x}</b>'\n        },\n        legendClick: (args: ILegendClickEventArgs) => {\n            if (args.series.index === 0) {\n                if (args.chart.series[3].visible) {\n                    args.chart.series[3].cornerRadius.topLeft = 4;\n                    args.chart.series[3].cornerRadius.topRight = 4;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                } else if (args.chart.series[2].visible) {\n                    args.chart.series[2].cornerRadius.topLeft = 4;\n                    args.chart.series[2].cornerRadius.topRight = 4;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                } else if (args.chart.series[1].visible) {\n                    args.chart.series[1].cornerRadius.topLeft = 4;\n                    args.chart.series[1].cornerRadius.topRight = 4;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                } else {\n                    args.chart.series[0].cornerRadius.topLeft = 4;\n                    args.chart.series[0].cornerRadius.topRight = 4;\n                }\n            }\n\n            if (args.series.index === 1) {\n                if (args.chart.series[3].visible) {\n                    args.chart.series[3].cornerRadius.topLeft = 4;\n                    args.chart.series[3].cornerRadius.topRight = 4;\n                    args.chart.series[1].cornerRadius.topLeft = 0;\n                    args.chart.series[1].cornerRadius.topRight = 0;\n                } else if (args.chart.series[2].visible) {\n                    args.chart.series[2].cornerRadius.topLeft = 4;\n                    args.chart.series[2].cornerRadius.topRight = 4;\n                    args.chart.series[1].cornerRadius.topLeft = 0;\n                    args.chart.series[1].cornerRadius.topRight = 0;\n                } else if (args.series.visible && args.chart.series[0].visible) {\n                    args.chart.series[0].cornerRadius.topLeft = 4;\n                    args.chart.series[0].cornerRadius.topRight = 4;\n                    args.chart.series[1].cornerRadius.topLeft = 0;\n                    args.chart.series[1].cornerRadius.topRight = 0;\n                } else {\n                    args.chart.series[1].cornerRadius.topLeft = 4;\n                    args.chart.series[1].cornerRadius.topRight = 4;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                }\n            }\n\n            if (args.series.index === 2) {\n                if (args.chart.series[3].visible) {\n                    args.chart.series[3].cornerRadius.topLeft = 4;\n                    args.chart.series[3].cornerRadius.topRight = 4;\n                    args.chart.series[2].cornerRadius.topLeft = 0;\n                    args.chart.series[2].cornerRadius.topRight = 0;\n                } else if (!args.series.visible) {\n                    args.chart.series[2].cornerRadius.topLeft = 4;\n                    args.chart.series[2].cornerRadius.topRight = 4;\n                    args.chart.series[1].cornerRadius.topLeft = 0;\n                    args.chart.series[1].cornerRadius.topRight = 0;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                } else if (args.chart.series[1].visible) {\n                    args.chart.series[1].cornerRadius.topLeft = 4;\n                    args.chart.series[1].cornerRadius.topRight = 4;\n                    args.chart.series[2].cornerRadius.topLeft = 0;\n                    args.chart.series[2].cornerRadius.topRight = 0;\n                } else if (args.series.visible && args.chart.series[0].visible) {\n                    args.chart.series[0].cornerRadius.topLeft = 4;\n                    args.chart.series[0].cornerRadius.topRight = 4;\n                    args.chart.series[2].cornerRadius.topLeft = 0;\n                    args.chart.series[2].cornerRadius.topRight = 0;\n                }\n            }\n\n            if (args.series.index === 3) {\n                if (!args.series.visible) {\n                    args.chart.series[3].cornerRadius.topLeft = 4;\n                    args.chart.series[3].cornerRadius.topRight = 4;\n                    args.chart.series[2].cornerRadius.topLeft = 0;\n                    args.chart.series[2].cornerRadius.topRight = 0;\n                    args.chart.series[1].cornerRadius.topLeft = 0;\n                    args.chart.series[1].cornerRadius.topRight = 0;\n                    args.chart.series[0].cornerRadius.topLeft = 0;\n                    args.chart.series[0].cornerRadius.topRight = 0;\n                } else if (args.chart.series[2].visible) {\n                    args.chart.series[2].cornerRadius.topLeft = 4;\n                    args.chart.series[2].cornerRadius.topRight = 4;\n                    args.chart.series[3].cornerRadius.topLeft = 0;\n                    args.chart.series[3].cornerRadius.topRight = 0;\n                } else if (args.chart.series[1].visible) {\n                    args.chart.series[1].cornerRadius.topLeft = 4;\n                    args.chart.series[1].cornerRadius.topRight = 4;\n                    args.chart.series[3].cornerRadius.topLeft = 0;\n                    args.chart.series[3].cornerRadius.topRight = 0;\n                } else if (args.series.visible && args.chart.series[0].visible) {\n                    args.chart.series[0].cornerRadius.topLeft = 4;\n                    args.chart.series[0].cornerRadius.topRight = 4;\n                    args.chart.series[3].cornerRadius.topLeft = 0;\n                    args.chart.series[3].cornerRadius.topRight = 0;\n                }\n            }\n        },\n        tooltipRender: (args: ITooltipRenderEventArgs) => {\n            if (args.text) {\n                let value: string = args.point.y.toLocaleString('en-US');\n                args.text = `${args.series.name}: <b>${value}M (${args.point.percentage}%)</b>`;\n            }\n        }\n    });\n    chart.appendTo('#container');\n"}