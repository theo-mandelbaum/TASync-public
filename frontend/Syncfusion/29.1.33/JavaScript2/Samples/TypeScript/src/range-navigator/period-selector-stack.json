{"theme-colors.ts":"import { ChartTheme, ILoadedEventArgs } from \"@syncfusion/ej2/charts\";\n\nexport let themes : string[] = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2highcontrast', 'fluent2dark', 'tailwind3', 'tailwind3dark'];\nexport let borderColor : string[] = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6','#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let regionColor : string[] = ['rgba(52, 58, 64, 0.1)', 'rgba(173, 181, 189, 0.1)', 'rgba(90, 97, 246, 0.3)', 'rgba(139, 92, 246, 0.3)', 'rgba(0, 189, 174, 0.3)',\n    'rgba(158, 203, 8, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(68, 114, 196, 0.3)',\n    'rgba(68, 114, 196, 0.3)', 'rgba(121, 236, 228, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)',\n    'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printRegionColors = ['rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)',\n    'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(79, 70, 229, 0.3)',\n    'rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(34, 211, 238, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)', 'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printThemes: string[] = ['Material', 'Fabric', 'Bootstrap', 'Bootstrap4', 'HighContrast', 'Bootstrap5', 'Tailwind','MaterialDark', 'FabricDark', 'BootstrapDark', 'TailwindDark', 'Bootstrap5Dark', 'Fluent', 'FluentDark', 'Material3', 'Material3Dark', 'Fluent2', 'Fluent2HighContrast', 'Fluent2Dark', 'Tailwind3', 'Tailwind3Dark'];\nexport let printBorderColor: string[] = ['#FF4081', '#007897', '#428BCA', '#FFD939', '#FFD939', '#FD7E14', '#4F46E5', '#FF4081', '#007897', '#428BCA', '#22D3EE', '#FD7E14', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport function loadRangeNavigatorTheme(args?: ILoadedEventArgs): ChartTheme {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    let theme: ChartTheme;\n    if (args) {\n        theme = args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    else {\n        theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    return theme;\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <div class=\"row\" style=\"width:80%; transform: translateX(13%)\">\n                <div class=\"col-sm-8\">\n                    <div id=\"text\" style=\"\n                    display: flex; font-size: 36px; font-weight: 500;\n                    align-items: center;\n                    justify-content: space-between;\" align=\"left;\">\n                        Bitcoin (USD) Price\n                    </div>\n                </div>\n                <div class=\"col-sm-4\" align=\"right\" style=\"margin-top: 1%\">\n                    <div>\n                        <label for=\"switch\" style=\"font-size: 16px; margin-right: 2%\">Closing Price </label>\n                        <input id=\"switch\" type=\"checkbox\">\n                        <label for=\"switch1\" style=\"font-size: 16px; margin-left: 2%\">OHLC</label>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"col-sm-12\">\n            <div class=\"row\" align=\"center\">\n                <div id=\"container\" style=\"width: 90%\"></div>\n                <div id=\"chart\" style=\"width: 90%\"></div>\n                <div id=\"range\" style=\"width: 90%\"></div>\n        </div>\n    </div>\n</div>\n\n\n<style>\n    #switch {\n        display: none;\n    }\n    #control-container {\n        padding: 0px !important;\n    }\n\n    .e-switch-wrapper {\n        margin-top: 5%;\n        width: 15%\n    }\n    #chart_tooltip {\n            opacity: 0;\n    }\n    #chart_HorizontalLine, #chart_VerticalLine {\n            stroke-dasharray: 2\n    }\n    @media only screen and (max-width: 300px) {\n    #text {\n        font-size: 10px\n    }\n}\n</style>\n</div></div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { RangeNavigator, Chart, IChangedEventArgs, LineSeries, AreaSeries, DateTime, Crosshair } from '@syncfusion/ej2-charts';\nimport { ChartTheme, ChartAnnotation, PeriodSelector, CandleSeries, MomentumIndicator, Tooltip } from '@syncfusion/ej2-charts';\nimport { IAxisLabelRenderEventArgs, withInBounds, IAxisRangeCalculatedEventArgs, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nimport { RangeTooltip, IRangeLoadedEventArgs, Zoom, getElement, ITooltipRenderEventArgs } from '@syncfusion/ej2-charts';\nimport { Switch, ChangeEventArgs } from '@syncfusion/ej2-buttons';\nChart.Inject(AreaSeries, DateTime, LineSeries, Crosshair, ChartAnnotation, CandleSeries, MomentumIndicator, Tooltip, Zoom);\nRangeNavigator.Inject(AreaSeries, DateTime, PeriodSelector, RangeTooltip, LineSeries);\nimport { Browser, remove, Fetch } from '@syncfusion/ej2-base';\nimport { loadRangeNavigatorTheme } from './theme-colors';\n\n/**\n * Sample for period selector\n */\n\nlet theme: ChartTheme = loadRangeNavigatorTheme();\n\n// tslint:disable-next-line:max-func-body-length\nlet removeSecondaryElement: Function;\nlet datasrc: object[];\nlet data1: object[] = [];\n\n    \n    let value: object;\n    let j: number = 2100;\n    let fetchApi: Fetch = new Fetch('./src/range-navigator/data-source/period-data.json', 'GET');\n    fetchApi.send().then();\n    // Rendering Dialog on FETCH success\n    fetchApi.onSuccess = (data: Object[]): void => {\n        datasrc = data;\n        for (let i: number = 0; i < datasrc.length - 20; i++) {\n            value = datasrc[i];\n            /* tslint:disable:no-string-literal */\n            data1.push({\n                High: value['High'], Low: value['Low'], Close: value['Close'], Open: value['Open'], date: new Date(2010, 6, j)\n            });\n            j++;\n        }\n        let chart: Chart = new Chart({\n            series: [{\n                dataSource: data1, width: 2, type: 'Candle', animation: { enable: true }, xName: 'date', low: 'Low',\n                high: 'High', close: 'Close', volume: 'Volume', open: 'Open', name: 'Bitcoin', bearFillColor: '#2ecd71',\n                bullFillColor: '#e74c3d', yName: 'Close'\n            }], width: Browser.isDevice ? '100%' : '80%', crosshair: { enable: true },\n            annotations: [{ content: '<div id=\"annotation\"></div>', coordinateUnits: 'Pixel', region: 'Chart', x: '15%', y: '25%' }],\n            zoomSettings: { enableMouseWheelZooming: true, mode: 'X', toolbarItems: [] }, tooltip: { enable: true, shared: true },\n            chartArea: { border: { width: 0 } }, theme: theme, legendSettings: { visible: false }, height: '250',\n            axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\n                if (args.axis.opposedPosition) {\n                    let value: number = Math.round(Number(args.text)) / 1000; args.text = '$' + String(value) + 'k';\n                }\n            }, primaryYAxis: { labelFormat: 'n0', opposedPosition: true, lineStyle: { width: 0 } },\n            tooltipRender: (args: ITooltipRenderEventArgs) => {\n                if (args.text.length > 0) {\n                    let text: string[] = args.text.split('<br/>'); let html: string = '<table><thead>' + text[0] + '</thead>';\n                    let value: string[];\n                    for (let i: number = 1; i < text.length; i++) {\n                        value = text[i].split(':');\n                        html += '<tr><td style=\"opacity:0.5\">' + value[0] + ':</td><td style=\"padding-left: 5px;\">$' +\n                            (+value[1].split(' <b>')[1].split('</b>')[0]).toFixed(2) + '</td></tr>';\n                    }\n                    html += '</table>';\n                    chart.setAnnotationValue(\n                        0,\n                        '<div id=\"annotation\" style=\"line-height: 18px;font-size:13px;background: #fff; opacity:0.9; color: #464e56; ' +\n                        ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px; border-radius: 3px\">' + html + '</div>');\n                }\n                args.text = '';\n            }, primaryXAxis: { valueType: 'DateTime', majorGridLines: { width: 0 }, edgeLabelPlacement: 'Shift' },\n            chartMouseMove: () => {\n                if (!withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect)) { removeSecondaryElement(); }\n            },\n            load: (args: ILoadedEventArgs) => {\n                args.chart.tooltip.format = args.chart.series[0].type === 'Candle' ?\n                    '${point.x}<br/>High : <b>${point.high}</b><br/>Low : <b>${point.low}</b><br/>' +\n                    'Open : <b>${point.open}</b><br/>Close : <b>${point.close}</b>' :\n                    '${point.x}<br/>Close : <b>${point.close}</b>';\n                document.getElementById('switch').style.display = 'block';\n            }, axisRangeCalculated: (args: IAxisRangeCalculatedEventArgs) => { chart.setAnnotationValue(0, '<div></div>'); },\n        });\n        chart.appendTo('#chart');\n        removeSecondaryElement = (): void => {\n            setTimeout(() => { if (getElement('annotation')) { remove(getElement('annotation')); } }, 2000);\n        };\n        let rangeTop: RangeNavigator = new RangeNavigator({\n            loaded: (args: IRangeLoadedEventArgs) => {\n                if (!Browser.isDevice) { document.getElementById('container_Secondary_Element').style.transform = 'translate(13%)'; }\n            }, disableRangeSelector: true, width: Browser.isDevice ? '100%' : '80%',\n            load: (args: IRangeLoadedEventArgs) => {\n                args.rangeNavigator.periodSelectorSettings.height = document.body.className.indexOf('e-bigger') > -1 ? 56 : 42;\n            }, labelPosition: 'Outside', valueType: 'DateTime', dataSource: data1, xName: 'date', yName: 'Close', theme: theme,\n            periodSelectorSettings: {\n                periods: [{ text: '1M', interval: 1, intervalType: 'Months' }, { text: '3M', interval: 3, intervalType: 'Months' },\n                { text: '6M', interval: 6, intervalType: 'Months' }, { text: '1Y', interval: 1, intervalType: 'Years', selected: true },\n                { text: '2Y', interval: 2, intervalType: 'Years' }, { text: 'ALL' }], position: 'Top',\n            }\n        });\n        rangeTop.appendTo('#container');\n        let switchObj: Switch = new Switch({\n            change: (args: ChangeEventArgs) => {\n                chart.series[0].type = !args.checked ? 'Line' : 'Candle'; chart.annotations[0].content = ''; chart.refresh();\n            }, name: 'Closing Value', cssClass: 'custom-iOS', value: 'Closing value', checked: true,\n        });\n        switchObj.appendTo('#switch');\n        let rangeBottom: RangeNavigator = new RangeNavigator({\n            labelPosition: 'Outside', valueType: 'DateTime', series: [{ dataSource: data1, xName: 'date', yName: 'Close' }],\n            changed: (args: IChangedEventArgs) => {\n                rangeTop.periodSelectorModule.datePicker.startDate = args.start as Date;\n                rangeTop.periodSelectorModule.datePicker.endDate = args.end as Date; rangeTop.dataBind();\n                chart.primaryXAxis.zoomFactor = 1; chart.primaryXAxis.zoomPosition = 0;\n                let filterData: Object[] = data1.filter((data: object) => {\n                    /* tslint:disable:no-string-literal */\n                    return (data['date'].getTime() >= (args.start as Date).getTime() &&\n                        data['date'].getTime() <= (args.end as Date).getTime());\n                });\n                chart.series[0].animation.enable = false;\n                chart.series[0].dataSource = filterData; chart.setAnnotationValue(0, '<div id=\"annotation\"></div>'); chart.refresh();\n            }, width: Browser.isDevice ? '100%' : '80%', value: [new Date('2017-04-30'), new Date('2018-04-30')], theme: theme,\n        });\n        rangeBottom.appendTo('#range');\n        rangeTop.changed = (args: IChangedEventArgs) => {\n            rangeBottom.rangeSlider.setSlider((args.start as Date).getTime(), (args.end as Date).getTime(), false, false);\n            let filterData: Object[] = data1.filter((data: object) => {\n                /* tslint:disable:no-string-literal */\n                return (data['date'].getTime() >= (args.start as Date).getTime() &&\n                    data['date'].getTime() <= (args.end as Date).getTime());\n            });\n            chart.series[0].animation.enable = false;\n            chart.series[0].dataSource = filterData; chart.refresh(); chart.setAnnotationValue(0, '<div id=\"annotation\"></div>');\n        };\n    };\n"}