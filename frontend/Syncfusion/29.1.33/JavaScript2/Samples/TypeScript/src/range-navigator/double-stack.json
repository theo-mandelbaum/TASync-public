{"theme-colors.ts":"import { ChartTheme, ILoadedEventArgs } from \"@syncfusion/ej2/charts\";\n\nexport let themes : string[] = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2highcontrast', 'fluent2dark', 'tailwind3', 'tailwind3dark'];\nexport let borderColor : string[] = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6','#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let regionColor : string[] = ['rgba(52, 58, 64, 0.1)', 'rgba(173, 181, 189, 0.1)', 'rgba(90, 97, 246, 0.3)', 'rgba(139, 92, 246, 0.3)', 'rgba(0, 189, 174, 0.3)',\n    'rgba(158, 203, 8, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(68, 114, 196, 0.3)',\n    'rgba(68, 114, 196, 0.3)', 'rgba(121, 236, 228, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)',\n    'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printRegionColors = ['rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)',\n    'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(79, 70, 229, 0.3)',\n    'rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(34, 211, 238, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)', 'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printThemes: string[] = ['Material', 'Fabric', 'Bootstrap', 'Bootstrap4', 'HighContrast', 'Bootstrap5', 'Tailwind','MaterialDark', 'FabricDark', 'BootstrapDark', 'TailwindDark', 'Bootstrap5Dark', 'Fluent', 'FluentDark', 'Material3', 'Material3Dark', 'Fluent2', 'Fluent2HighContrast', 'Fluent2Dark', 'Tailwind3', 'Tailwind3Dark'];\nexport let printBorderColor: string[] = ['#FF4081', '#007897', '#428BCA', '#FFD939', '#FFD939', '#FD7E14', '#4F46E5', '#FF4081', '#007897', '#428BCA', '#22D3EE', '#FD7E14', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport function loadRangeNavigatorTheme(args?: ILoadedEventArgs): ChartTheme {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    let theme: ChartTheme;\n    if (args) {\n        theme = args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    else {\n        theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    return theme;\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\" align=\"center\">\n    <div id=\"Sample\">\n        <div class=\"row\" align=\"center\">\n            <h1 id=\"days\" style=\"font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px; margin-top: 10px;\">Score Comparision AUS vs SL</h1>\n            <div id=\"container\"></div>\n            <div id=\"chart\"></div>\n        </div>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { RangeNavigator, Chart, IChangedEventArgs, } from '@syncfusion/ej2-charts';\nimport {\n    ChartTheme, Crosshair, StepLineSeries, RangeTooltip, Tooltip, IRangeTooltipRenderEventArgs, LineSeries,\n    IAxisLabelRenderEventArgs\n} from '@syncfusion/ej2-charts';\nimport { SplineSeries, ChartAnnotation, ILoadedEventArgs, ChartAnnotationSettingsModel, getSeriesColor } from '@syncfusion/ej2-charts';\nChart.Inject(SplineSeries, Crosshair, ChartAnnotation, Tooltip);\nRangeNavigator.Inject(StepLineSeries, RangeTooltip, LineSeries);\nimport { Browser, Fetch } from '@syncfusion/ej2-base';\nimport { loadRangeNavigatorTheme } from './theme-colors';\n\n/**\n * Sample for range navigator with numeric axis\n */\n\nlet theme: ChartTheme = loadRangeNavigatorTheme();\nlet chartAnnotation: ChartAnnotationSettingsModel[] = [];\nchartAnnotation.push({ content: '<div id=\"exchangeRate\"></div>', coordinateUnits: 'Pixel', region: 'Chart', x: '85%', y: '15%' });\nlet backgroundColor: string = 'white';\n\nlet datasrc: object[];\nlet sl: object[]; let aus: object[] = [];\n\n\n    \n    let fetchApi: Fetch = new Fetch('./src/range-navigator/data-source/double.json', 'GET');\n    fetchApi.send().then();\n    // Rendering Dialog on FETCH success\n    fetchApi.onSuccess = (data: Object[]): void => {\n        datasrc = data;\n        // tslint:disable-next-line:no-string-literal\n        sl = datasrc['srilanka']; aus = datasrc['aus'];\n        getAnnotaiton(aus, getSeriesColor(theme)[0]);\n        getAnnotaiton(sl, getSeriesColor(theme)[1]);\n        let chart: Chart = new Chart(\n            {\n                primaryXAxis: { title: 'Overs', edgeLabelPlacement: 'Shift', majorGridLines: { width: 0 }, labelFormat: 'n1' },\n                primaryYAxis: { title: 'Runs', minimum: 0, majorTickLines: { width: 0 }, lineStyle: { width: 0 } },\n                chartArea: { border: { width: 0 } },\n                series: [\n                    { name: 'AUS', dataSource: aus, xName: 'x', yName: 'y', width: 2, animation: { enable: false }, type: 'Spline' },\n                    { name: 'SL', dataSource: sl, xName: 'x', yName: 'y', width: 2, animation: { enable: false }, type: 'Spline' }\n                ],\n                annotations: chartAnnotation,\n                height: '350', legendSettings: { visible: false },\n                width: Browser.isDevice ? '100%' : '80%',\n                theme: theme,\n                axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\n                    if (args.axis.orientation === 'Horizontal') {\n                        let value: number = Math.abs(Number(args.text));\n                        args.text = String(value);\n                    }\n                },\n                loaded: (args: ILoadedEventArgs) => {\n                    let series1: string = args.chart.visibleSeries[0].interior;\n                    let series2: string = args.chart.visibleSeries[1].interior;\n                    let html: string = '<table>';\n                    html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid '\n                        + series1 + '; background: ' + series1 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Australia' + '</td>';\n                    html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid '\n                        + series2 + '; background: ' + series2 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Sri Lanka' + '</td>';\n                    html += '</table>';\n                    chart.setAnnotationValue(0, '<div id=\"exchangeRate\" style=\"line-height: 18px;' +\n                        'font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +\n                        ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px;' +\n                        'border-radius: 3px\">' +\n                        html +\n                        '</div>');\n                }\n            }\n        );\n        chart.appendTo('#chart');\n    \n        let range: RangeNavigator = new RangeNavigator(\n            {\n                labelPosition: 'Outside',\n                tooltip: { enable: true },\n                value: [31, 50],\n                series: [\n                    { dataSource: aus, xName: 'x', yName: 'y' },\n                    { dataSource: sl, xName: 'x', yName: 'y' }\n                ],\n                changed: (args: IChangedEventArgs) => {\n                    chart.primaryXAxis.zoomFactor = args.zoomFactor;\n                    chart.primaryXAxis.zoomPosition = args.zoomPosition;\n                    chart.dataBind();\n                },\n                tooltipRender: (args: IRangeTooltipRenderEventArgs) => {\n                    args.text[0] = Math.round(parseInt(args.text[0], 10)).toString();\n                },\n                width: Browser.isDevice ? '100%' : '80%',\n                theme: theme\n            }\n        );\n        range.appendTo('#container');\n    };\n\n\nfunction getAnnotaiton(args: Object[], color: string): void {\n    for (let i: number = 0; i < args.length; i++) {\n        /* tslint:disable:no-string-literal */\n        if (args[i]['isWicket']) {\n            chartAnnotation.push({\n                content: '<div id= \"wicket\" style=\"width: 20px; height:20px; border-radius: 5px;' +\n                'background: ' + backgroundColor + '; border: 2px solid ' + color + '; color:' + color + '\">W</div>',\n                /* tslint:disable:no-string-literal */\n                x: args[i]['x'],\n                /* tslint:disable:no-string-literal */\n                y: args[i]['y'],\n                coordinateUnits: 'Point'\n            });\n        }\n    }\n}"}