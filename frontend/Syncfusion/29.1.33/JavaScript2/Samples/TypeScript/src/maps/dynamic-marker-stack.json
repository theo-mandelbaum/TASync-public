{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"col-lg-9 control-section\">\n        <div id=\"container\"></div>\n        <div align=\"center\">\n                <p>\n                    <i>\n                        </i></p><div align=\"center\"><i>\n                            <p id=\"content\" style=\"font-size: 16px;color:grey\">Click on the maps to add marker/navigation line</p>\n                        </i></div><i>\n                    </i>\n                <p></p>\n            </div>\n    </div>\n    \n        \n    <div class=\"col-lg-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;\" role=\"none\">\n            <colgroup>\n                <col span=\"1\" style=\"width: 50%;\">\n                <col span=\"1\" style=\"width: 50%;\">\n           </colgroup>\n           <tbody> \n           <tr style=\"height: 50px\">\n                    <td>\n                        <div class=\"property-text\">Marker</div>\n                    </td>\n                    <td>\n                        <div class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"marker\">\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                       <div class=\"property-text\">Line</div>\n                    </td>\n                    <td>\n                    <div class=\"checkbox\">  \n                        <input type=\"checkbox\" name=\"high\" id=\"line\">\n                    </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div class=\"property-text\">Connecting line</div>\n                    </td> \n                    <td>\n                    <div class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"connect\">\n                    </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div class=\"property-text\">Marker type</div>\n                    </td>\n                    <td>\n                        <div class=\"property-text\">\n                            <select disabled=\"\" id=\"type\" style=\"height: 20px\">\n                                <option value=\"Image\">Image</option>\n                                <option value=\"Circle\">Circle</option>\n                                <option value=\"Diamond\">Diamond</option>\n                                <option value=\"Star\">Star</option>\n                                <option value=\"Triangle\">Triangle</option>\n                            </select>\n                            </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div class=\"property-text\"> Width</div>\n                    </td>\n                    <td>\n                        <div class=\"property-text\">\n                        <input type=\"text\" class=\"e-input\" value=\"1\" style=\"width:100%;\" id=\"width\" disabled=\"\">\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 70px\">\n                    <td align=\"center\">\n                        <div style=\"margin-top: 20px; margin-left: 50%\">\n                            <button id=\"togglebtn\" style=\"text-transform:none !important;width: 80px;margin-top: -2px\">Clear</button>\n                        </div>\n                    </td>\n                </tr>\n                </tbody>\n        </table>\n    </div>\n    <style>\n        #width.e-input[disabled] {\n            border-bottom-color: inherit;\n            background-image: none;\n        }\n        div.property-text {\n            padding-left: 0px; padding-top: 0px;\n        }\n        div.checkbox {\n            padding-left: 0px; padding-top: 0px;\n            margin-left: -25px;\n        }\n        \n        .e-view.fluent2 #property .e-checkbox-wrapper .e-icons, \n        .e-view.fluent2-dark #property .e-checkbox-wrapper .e-icons {\n            margin-left: -5px;\n            margin-top: 1px;\n        }\n        .e-view.fluent2-highcontrast #property .e-checkbox-wrapper .e-icons {\n            margin-left: -5px;\n            margin-top: 1px;\n        }\n    </style>\n    <!-- custom code start-->\n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-maps\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}/**\n * Dynamic Marker sample\n */\n\nimport {\n    Maps, Marker, Zoom, ILoadEventArgs, MapsTheme, IMouseEventArgs,\n    NavigationLine, MarkerSettingsModel, MarkerSettings, MarkerType\n} from '@syncfusion/ej2-maps';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nMaps.Inject(Marker, NavigationLine, Zoom);\n// custom code start\n//tslint:disable:max-func-body-length\n//tslint:disable;\n/* tslint:disable:no-string-literal */\n// custom code end\nlet markerCheck: boolean = true;\nlet lineCheck: boolean;\nlet connectLineCheck: boolean;\nlet navigationLines: Object[] = [];\nlet latitude: number[] = [];\nlet longitude: number[] = [];\n\n    // custom code start\n    \n    // custom code end\n    let maps: Maps = new Maps({\n        zoomSettings: {\n            enable: true\n        },\n        layers: [\n            {\n                urlTemplate:'https://tile.openstreetmap.org/level/tileX/tileY.png'\n            },\n        ],\n        // custom code start\n        load: (args: ILoadEventArgs) => {\n            let theme: string = location.hash.split('/')[1];\n            theme = theme ? theme : 'Material';\n            args.maps.theme = <MapsTheme>(theme.charAt(0).toUpperCase() +\n            theme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i,Â  'Contrast').replace(/5.3/i, '5');\n        },\n        // custom code end\n        click: (args: IMouseEventArgs) => {\n            if (markerCheck) {\n                addMarker(args);\n            }\n            if (lineCheck && !connectLineCheck) {\n                addLine(args, widthCheck['value']);\n            }\n            if (connectLineCheck) {\n                addLine(args, widthCheck['value'], true);\n            }\n            if (markerCheck || lineCheck || connectLineCheck ) {\n                maps.refresh();\n                if (togglebtn.disabled && (maps.layers[0].markerSettings['length'] ||\n                    maps.layers[0].navigationLineSettings['length'])) {\n                    togglebtn.disabled = false;\n                }\n            }\n        }\n    });\n    maps.appendTo('#container');\n\n    let markerCheckBox: CheckBox = new CheckBox(\n        {\n            change: (e: CheckBoxChangeEvents) => {\n                markerCheck = e.checked;\n                markerShape.enabled = e.checked;\n            }, checked: true\n        },\n        '#marker');\n\n    let lineCheckBox: CheckBox = new CheckBox(\n        {\n            change: (e: CheckBoxChangeEvents) => {\n                lineCheck = e.checked;\n                if (e.checked) {\n                    connectlineCheckBox.disabled = false;\n                    connectlineCheckBox.checked = false;\n                    widthCheck['disabled'] = false;\n                } else {\n                    connectLineCheck = e.checked;\n                    emptySavedLinePositions();\n                    connectlineCheckBox.disabled = true;\n                    connectlineCheckBox.checked = false;\n                    widthCheck['disabled'] = true;\n                }\n            }\n        },\n        '#line');\n\n\n    let connectlineCheckBox: CheckBox = new CheckBox(\n        {\n            disabled: true,\n            change: (e: CheckBoxChangeEvents) => {\n                connectLineCheck = e.checked;\n                if (!e.checked) {\n                    emptySavedLinePositions();\n                }\n            }\n        },\n        '#connect');\n\n    let markerShape: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select marker shape',\n        width: '100%'\n    });\n    markerShape.appendTo('#type');\n\n    let widthCheck: Element = document.getElementById('width');\n\n    let togglebtn: Button = new Button({\n        cssClass: 'e-info',\n        isPrimary: true,\n        disabled: true\n    });\n    togglebtn.appendTo('#togglebtn');\n\n    document.getElementById('togglebtn').onclick = () => {\n        maps.layers[0].markerSettings = [];\n        maps.layers[0].navigationLineSettings = [];\n        navigationLines = [];\n        emptySavedLinePositions();\n        togglebtn.disabled = true;\n    };\n    let emptySavedLinePositions: any = () => {\n        latitude = [];\n        longitude = [];\n    };\n    let addMarker: any = (args: any) => {\n        if (args['latitude'] !== null && args['longitude'] !== null) {\n            let layerIndex: number = (args.target.indexOf('_LayerIndex_') !== -1) ?\n                parseFloat(args.target.split('_LayerIndex_')[1].split('_')[0]) : 0;\n            let marker: MarkerSettingsModel[];\n            let dynamicMarker: MarkerSettingsModel[] = maps.layersCollection[layerIndex].markerSettings;\n            dynamicMarker.push(new MarkerSettings(maps, 'markerSettings', marker));\n            let markerIndex: number = dynamicMarker.length - 1;\n            dynamicMarker[markerIndex].visible = true;\n            dynamicMarker[markerIndex].dataSource = [\n                { latitude: args['latitude'], longitude: args['longitude'], name: 'dynamicmarker' }\n            ];\n            dynamicMarker[markerIndex].animationDuration = 0;\n            dynamicMarker[markerIndex].fill = '#DB4537';\n            dynamicMarker[markerIndex].shape = (markerShape.value !== 'Image') ? markerShape.value as MarkerType : 'Image';\n            dynamicMarker[markerIndex].height = (markerShape.value !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].width = (markerShape.value !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].imageUrl = (markerShape.value !== 'Image') ? '' : '//npmci.syncfusion.com/development/demos/src/maps/images/ballon.png';\n        }\n    };\n\n    let addLine: any = (lineArgs: any, lineWidth: number, connectiveLine?: boolean) => {\n        if (lineArgs.latitude != null && lineArgs.longitude != null) {\n            latitude.push(lineArgs.latitude);\n            longitude.push(lineArgs.longitude);\n        }\n        if (latitude.length >= 2) {\n            navigationLines.push({\n                'visible': true,\n                'latitude': [latitude[(latitude.length - 2)], latitude[(latitude.length - 1)]],\n                'longitude': [longitude[(longitude.length - 2)], longitude[(longitude.length - 1)]],\n                'angle': 0,\n                'color': 'blue',\n                'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)\n            });\n            maps.layers[0].navigationLineSettings = navigationLines;\n            if (!connectiveLine) {\n                emptySavedLinePositions();\n            }\n        }\n    };\n\n"}