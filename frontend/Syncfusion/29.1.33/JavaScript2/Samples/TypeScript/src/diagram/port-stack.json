{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<style>\n    .sb-child-row {\n                margin-top: 8px;\n            }\n        \n            .property-section .e-remove-selection {\n                cursor: not-allowed;\n            }\n        \n            .row-header {\n                font-size: 13px;\n                font-weight: 500;\n                padding-left: 10px\n            }\n            /* To disable pointer events when there is no selection in diagram */\n            .e-remove-selection .property-section-content {\n                pointer-events: none;\n            }\n        </style>\n<div class=\"col-lg-8 control-section\">\n    <div id=\"diagram\"></div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"property-panel-content\">\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content\">\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Visibility\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"portsVisiblity\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Shape\n                        </div>\n                        <div>\n                            <input type=\"text\" id=\"shape\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Fill Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"fill\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Color\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"border\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Stroke Width\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"width\">\n                        </div>\n                    </div>\n                    <div class=\"col-xs-6\">\n                        <div style=\"padding-bottom: 8px\">\n                            Size\n                        </div>\n                        <div style=\"padding-bottom: 8px\">\n                            <input type=\"text\" id=\"size\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Ports sample\n */\nimport {\n    Diagram, NodeModel, ConnectorModel, PointPortModel, PortVisibility, Node, Connector, PortShapes\n} from '@syncfusion/ej2-diagrams';\nimport { DropDownList, ChangeEventArgs as DropDownChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { MultiSelect, MultiSelectChangeEventArgs, CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { NumericTextBox, ChangeEventArgs as NumericChangeEventArgs, ColorPicker, ColorPickerEventArgs } from '@syncfusion/ej2-inputs';\nMultiSelect.Inject(CheckBoxSelection);\n\n// Creates a node with specified properties and ports.\nfunction createNode(id: string, offsetX: number, offsetY: number, annotationContent: string, ports: CustomPort[]): NodeModel {\n    return {\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        annotations: [{ content: annotationContent }],\n        ports: ports\n    };\n}\n\n// Creates a connector linking two ports of different nodes.\nfunction createConnector(id: string, sourceID: string, sourcePortID: string, targetID: string, targetPortID: string): ConnectorModel {\n    return {\n        id: id,\n        sourceID: sourceID,\n        sourcePortID: sourcePortID,\n        targetID: targetID,\n        targetPortID: targetPortID\n    };\n}\n\n// Creates a port with specified properties.\nfunction createPort(id: string, shape: PortShapes, offsetX: number, offsetY: number, text: string): CustomPort {\n    return {\n        id: id,\n        shape: shape,\n        offset: { x: offsetX, y: offsetY },\n        height: 8,\n        width: 8,\n        visibility: PortVisibility.Visible,\n        text: text\n    };\n}\n\n// Predefined ports for nodes.\nlet node1Port: CustomPort[] = [\n    createPort('port1', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port2', 'Circle', 1, 0.5, 'OUT - 1'),\n    createPort('port3', 'Circle', 0.25, 1, 'In - 2'),\n    createPort('port4', 'Circle', 0.5, 1, 'OUT - 2'),\n    createPort('port5', 'Circle', 0.75, 1, 'In - 3')\n];\n\nlet node2Port: CustomPort[] = [\n    createPort('port6', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port7', 'Circle', 1, 0.35, 'OUT - 1'),\n    createPort('port8', 'Circle', 1, 0.70, 'In - 2'),\n    createPort('port9', 'Circle', 0.5, 1, 'OUT - 2')\n];\n\nlet node3Port: CustomPort[] = [\n    createPort('port10', 'Circle', 0, 0.5, 'Out - 1'),\n    createPort('port11', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port12', 'Circle', 0.5, 1, 'OUT - 2')\n];\n\nlet node4Port: CustomPort[] = [\n    createPort('port13', 'Circle', 0, 0.5, 'In - 1'),\n    createPort('port14', 'Circle', 0.5, 0, 'In - 2'),\n    createPort('port15', 'Circle', 0.5, 1, 'OUT - 1')\n];\n\nlet node5Port: CustomPort[] = [\n    createPort('port16', 'Circle', 0, 0.5, 'out - 1'),\n    createPort('port17', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port18', 'Circle', 1, 0.5, 'OUT - 2')\n];\n\nlet node6Port: CustomPort[] = [\n    createPort('port19', 'Circle', 0, 0.35, 'In - 1'),\n    createPort('port20', 'Circle', 0.5, 1, 'Out - 1')\n];\n\nlet node7Port: CustomPort[] = [\n    createPort('port21', 'Circle', 0.5, 0, 'In - 1'),\n    createPort('port22', 'Circle', 0.5, 1, 'Out - 1')\n];\n\nexport interface CustomPort extends PointPortModel {\n    text: string;\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let bounds: ClientRect = document.getElementsByClassName('control-section')[0].getBoundingClientRect();\n    let centerX: number = bounds.width / 2;\n\n    // Node definitions for the diagram.\n    let nodes: NodeModel[] = [\n        createNode('node1', centerX - 200, 100, 'Publisher', node1Port),\n        createNode('node2', centerX, 100, 'Completed Book', node2Port),\n        createNode('node3', centerX, 200, '1st Review', node3Port),\n        createNode('node4', centerX, 300, 'Legal Terms', node4Port),\n        createNode('node5', centerX, 400, '2nd Review', node5Port),\n        createNode('node6', centerX + 200, 100, 'Board', node6Port),\n        createNode('node7', centerX + 200, 200, 'Approval', node7Port)\n    ];\n\n    // Connector definitions for the diagram.\n    let connectors: ConnectorModel[] = [\n        createConnector('connector1', 'node1', 'port2', 'node2', 'port6'),\n        createConnector('connector2', 'node1', 'port4', 'node4', 'port13'),\n        createConnector('connector3', 'node2', 'port9', 'node3', 'port11'),\n        createConnector('connector4', 'node2', 'port7', 'node6', 'port19'),\n        createConnector('connector5', 'node3', 'port10', 'node1', 'port5'),\n        createConnector('connector6', 'node3', 'port12', 'node4', 'port14'),\n        createConnector('connector7', 'node4', 'port15', 'node5', 'port17'),\n        createConnector('connector8', 'node5', 'port18', 'node2', 'port8'),\n        createConnector('connector9', 'node5', 'port16', 'node1', 'port3'),\n        createConnector('connector10', 'node6', 'port20', 'node7', 'port21'),\n        createConnector('connector11', 'node7', 'port22', 'node1', 'port1')\n    ];\n\n    // Initialize diagram control\n    let diagram: Diagram = new Diagram({\n        width: '100%', height: 580,\n        nodes: nodes, connectors: connectors, selectionChange: onSelectionChange,\n        snapSettings: { constraints: 0 },\n        //Sets the default values of nodes\n        getNodeDefaults: (node: Node) => {\n            // Initialize shape based on node ID.\n            if (node.id === \"node1\" || node.id === \"node2\" ||\n                node.id === \"node4\" || node.id === \"node6\") {\n                node.shape = { type: \"Basic\", shape: \"Rectangle\" };\n            } else if (node.id === \"node3\" || node.id === \"node5\" ||\n                node.id === \"node7\") {\n                node.shape = { type: \"Basic\", shape: \"Diamond\" };\n            }\n            // Sets height, width, and style for nodes.\n            node.height = 65;\n            node.width = 100;\n            node.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\n            // Sets styles for the ports of the node.\n            node.ports.forEach(port => {\n                port.style = {\n                    fill: \"#366f8c\",\n                    strokeColor: \"#366f8c\"\n                };\n                port.width = 6;\n                port.height = 6;\n            });\n            // Sets style for the node annotations.\n            node.annotations[0].style = {\n                bold: true,\n                fontSize: 13,\n                color: \"black\"\n            };\n        },\n        //Sets the default values of connector\n        getConnectorDefaults: (connector: Connector) => {\n            //defines type of the connectors\n            connector.type = 'Orthogonal';\n            connector.style = { strokeColor: '#8cdcef', strokeWidth: 1 };\n            connector.targetDecorator = { width: 5, height: 5, style: { fill: '#8cdcef', strokeColor: '#8cdcef' } };\n        },\n    });\n    diagram.appendTo('#diagram');\n\n    // Port visibility options for the dropdown.\n    let visibility: { [key: string]: Object }[] = [\n        { PortVisibility: PortVisibility.Visible, text: \"Visible\" },\n        { PortVisibility: PortVisibility.Hidden, text: \"Hidden\" },\n        { PortVisibility: PortVisibility.Hover, text: \"Hover\" },\n        { PortVisibility: PortVisibility.Connect, text: \"Connect\" }\n    ];\n\n    // Enable or disable the visibility of the Port\n    let portVisibilityDrop: DropDownList = new DropDownList({\n        enabled: true, dataSource: visibility,\n        fields: { value: 'PortVisibility', text: 'text' },\n        value: 'Visible',\n        change: onPortVisibilityChange,\n    });\n    portVisibilityDrop.appendTo('#portsVisiblity');\n\n    // Colorpicker used to apply for fill color of the Port.\n    let portFillColor: ColorPicker = new ColorPicker({\n        value: '#000', disabled: false, change: (arg: ColorPickerEventArgs) => {\n            let port: PointPortModel[] = getSelectedPort();\n            for (let j: number = 0; j < port.length; j++) {\n                port[j].style.fill = arg.currentValue.rgba;\n            }\n        }\n    });\n    portFillColor.appendTo('#fill');\n\n    // Colorpicker used to apply for stroke color of the Port.\n    let portBorderColor: ColorPicker = new ColorPicker({\n        value: '#000', disabled: false, change: (arg: ColorPickerEventArgs) => {\n            let port: PointPortModel[] = getSelectedPort();\n            for (let j: number = 0; j < port.length; j++) {\n                port[j].style.strokeColor = arg.currentValue.rgba;\n            }\n        }\n    });\n    portBorderColor.appendTo('#border');\n\n    // Shape collection of the Port.\n    let shape: { [key: string]: Object }[] = [\n        { shape: 'X', text: 'X' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Custom', text: 'Custom' }\n    ];\n\n    // DropDownList is used to apply the shape of the Port.\n    let portShapeDrop: DropDownList = new DropDownList({\n        enabled: true, placeholder: 'Select a Shape', value: 'Circle',\n        dataSource: shape, fields: { value: 'shape', text: 'text' },\n        change: onPortShapeChange\n    });\n    portShapeDrop.appendTo('#shape');\n\n    // NumericTextBox is used to apply the size of the Port.\n    let portSizeNum: NumericTextBox = new NumericTextBox({\n        enabled: true, format: '###.##',\n        value: 6, min: 1, step: 1,\n        change: (args: NumericChangeEventArgs) => {\n            applyPortStyle('size');\n        }\n    });\n    portSizeNum.appendTo('#size');\n\n    // NumericTextBox is used to apply the StrokeWidth of the Port.\n    let portWidthNum: NumericTextBox = new NumericTextBox({\n        enabled: true, format: '###.##',\n        value: 1, step: 0.5, min: 0,\n        change: (args: NumericChangeEventArgs) => {\n            applyPortStyle('strokewidth');\n        }\n    });\n    portWidthNum.appendTo('#width');\n\n    diagram.select([diagram.nodes[0]]);\n\n    // Retrieves the ports of the currently selected node in the diagram.\n    function getSelectedPort(): PointPortModel[] {\n        let node: NodeModel = diagram.selectedItems.nodes[0];\n        let ports: PointPortModel[] = node.ports;\n        return ports;\n    }\n\n    // Handles changes in selection within the diagram.\n    // It updates the property panel based on the selected node's port properties.\n    function onSelectionChange(args: any): void {\n        if (args.state === 'Changed') {\n            let propertypanelInstance: HTMLElement = document.getElementById('propertypanel');\n            let selectedElement: HTMLCollection = document.getElementsByClassName('e-remove-selection');\n            if (args.newValue) {\n                // custom code start\n                if (!propertypanelInstance.classList.contains('e-remove-selection')) {\n                    propertypanelInstance.classList.add('e-remove-selection');\n                }\n                // custom code end\n                if (args.newValue[0] instanceof Node && selectedElement.length) {\n                    selectedElement[0].classList.remove('e-remove-selection');\n                    let port: PointPortModel = getSelectedPort()[0];\n                    portVisibilityDrop.value = port.visibility;\n                    portVisibilityDrop.dataBind();\n                    portFillColor.value = port.style.fill;\n                    portFillColor.dataBind();\n                    portBorderColor.value = port.style.strokeColor;\n                    portBorderColor.dataBind();\n                    portShapeDrop.value = port.shape;\n                    portShapeDrop.dataBind();\n                    portSizeNum.value = port.height;\n                    portSizeNum.dataBind();\n                    portWidthNum.value = port.style.strokeWidth;\n                    portWidthNum.dataBind();\n                }\n            }\n        }\n    }\n\n    // Applies the selected style (size or stroke width) to the selected port(s).\n    function applyPortStyle(value: string): void {\n        let port: PointPortModel[] = getSelectedPort();\n        for (let j: number = 0; j < port.length; j++) {\n            if (value === 'size' && portSizeNum) {\n                port[j].height = portSizeNum.value;\n                port[j].width = portSizeNum.value;\n            } else if (value === 'strokewidth' && portWidthNum) {\n                port[j].style.strokeWidth = portWidthNum.value;\n            }\n        }\n        diagram.dataBind();\n    }\n\n    // Updates the visibility of the selected port(s) based on the user's selection in the dropdown.\n    function onPortVisibilityChange(args: MultiSelectChangeEventArgs): void {\n        let port: PointPortModel[] = getSelectedPort();\n        if (port) {\n            for (let j: number = 0; j < port.length; j++) {\n                port[j].visibility = portVisibilityDrop.value as PortVisibility;\n                diagram.dataBind();\n            }\n        }\n    }\n\n    // Updates the shape of the selected port(s) based on the user's selection in the dropdown.\n    function onPortShapeChange(args: DropDownChangeEventArgs): void {\n        let port: PointPortModel[] = getSelectedPort();\n        for (let j: number = 0; j < port.length; j++) {\n            switch (portShapeDrop.value) {\n                case 'X':\n                    port[j].shape = 'X';\n                    break;\n                case 'Circle':\n                    port[j].shape = 'Circle';\n                    break;\n                case 'Square':\n                    port[j].shape = 'Square';\n                    break;\n                case 'Custom':\n                    port[j].shape = 'Custom';\n                    port[j].pathData = 'M6.805,0L13.61,10.703L0,10.703z';\n                    break;\n            }\n            diagram.dataBind();\n        }\n\n    }\n\n\n"}