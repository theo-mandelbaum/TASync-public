{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n\n<script id=\"fixeduserhandletemplate\" type=\"text/x-template\">\n    <div style=\"width:100%;height:100%\">\n        <button style=\"background-color:black; border-radius:50%; width:25px; height:25px; border:none; cursor:context-menu; padding:0; display:flex; align-items:center; justify-content:center; background-image:url(https://ej2.syncfusion.com/demos/src/diagram/Images/user-handle/delete.png); background-size:cover; background-position:center;\">\n        </button>\n    </div>\n</script>\n\n<div class=\"col-lg-8 control-section\">\n    <style>\n        /* Css for images in property panel  */\n        .diagram-property .image-pattern-style {\n            background-color: white;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 50px;\n            width: calc((100% - 18px) / 3);\n            cursor: pointer;\n            border: 1px solid #D5D5D5;\n            background-position: center;\n            float: left;\n        }\n\n        .diagram-property .image-pattern-style:hover {\n            border-color: gray;\n            border-width: 2px;\n        }\n        /* Property panel CSS */\n        .diagram-property .row {\n            margin: 10px 0px 0px 0px;\n        }\n\n        .diagram-property .row-header {\n            font-size: 15px;\n            font-weight: 500;\n            margin-top: 10px\n        }\n        /* Selection indicator */\n        .diagram-property .e-selected-style {\n            border-color: #006CE6;\n            border-width: 2px;\n        }\n         /* To disable pointer events when there is no selection in diagram */\n         .e-remove-selection .property-section-content {\n            pointer-events: none;\n        }\n        .property-section .e-remove-selection {\n            cursor: not-allowed;\n        }\n    </style>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section diagram-property\">\n    <div class=\"row\">\n        <div class=\"property-panel-header\">\n            Properties\n        </div>\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n            <div class=\"property-section-content\">\n            <div class=\"row property-panel-content\" id=\"appearance\">\n                <div class=\"row row-header\">\n                    Alignment\n                </div>\n                <div class=\"row\" style=\"padding-top: 8px\">\n                    <div class=\"image-pattern-style e-selected-style\" id=\"left\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/bottoml.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"right\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/bottomr.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"topr\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/topr.png);\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row property-panel-content\" id=\"pattern\">\n                <div class=\"row row-header\">\n                    Appearance\n                </div>\n                <div class=\"row\" style=\"padding-top: 8px\">\n                    <div class=\"image-pattern-style\" id=\"pattern1\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/pattern1.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern2\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/pattern2.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern3\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/user-handle/pattern3.png);\">\n                    </div>\n                </div>\n            </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * UserHandle\n */\n//Importing necessary modules\nimport {\n    Diagram, NodeModel, ConnectorModel, UserHandleModel,Node,Connector,\n    Side, SelectorConstraints, SnapConstraints, MoveTool, MouseEventArgs, ISelectionChangeEventArgs,cloneObject, randomId,\n    IElement, ToolBase\n} from '@syncfusion/ej2-diagrams';\n\nlet diagram: Diagram;\n\n//Enable the clone tool for UserHandle.\nfunction getTool(action: string): ToolBase {\n    let tool: ToolBase;\n    if (action === 'clone') {\n        tool = new CloneTool(diagram.commandHandler);\n    }\n    return tool;\n}\n\n//set the position of the userhandle.\nfunction setUserHandlePosition(offset: number, side: Side, target: HTMLElement): void {\n    diagram.selectedItems.userHandles[0].offset = offset;\n    diagram.selectedItems.userHandles[0].side = side;\n    // custom code start\n    target.classList.add('e-selected-style');\n    // custom code end\n}\n\n//set the style of the userhandle.\nfunction applyUserHandleStyle(bgcolor: string, target: HTMLElement): void {\n    diagram.selectedItems.userHandles[0].backgroundColor = bgcolor;\n    diagram.selectedItems.userHandles[0].pathColor = 'White';\n    // custom code start\n    target.classList.add('e-selected-style');\n    // custom code end\n}\n\n//Change the postion of the UserHandle\nfunction setHandleAppearance(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    let appearanceBlock: HTMLElement = document.getElementById('appearance');\n    // custom code start\n    let selectedElement: HTMLCollection = document.getElementsByClassName(\n        \"e-selected-style\"\n      );\n    if (selectedElement.length) {\n        selectedElement[0].classList.remove('e-selected-style');\n    }\n    // custom code end\n    if (target.className === 'image-pattern-style') {\n        switch (target.id) {\n            case 'left':\n                setUserHandlePosition(0, 'Bottom', target);\n                break;\n            case 'right':\n                setUserHandlePosition(1, 'Bottom', target);\n                break;\n            case 'topr':\n                setUserHandlePosition(0, 'Right', target);\n                break;\n        }\n    }\n    diagram.dataBind();\n}\n\n//Change the Appearence of the UserHandle\nfunction setHandlePattern(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    let patternBlock: HTMLElement = document.getElementById('pattern');\n    // custom code start\n    let selectedElement: HTMLCollection = document.getElementsByClassName(\n        \"e-selected-style\"\n      );\n    if (selectedElement.length) {\n        selectedElement[0].classList.remove('e-selected-style');\n    }\n    // custom code end\n    if (target.className === 'image-pattern-style') {\n        switch (target.id) {\n            case 'pattern1':\n                applyUserHandleStyle('#1E90FF', target);\n                break;\n            case 'pattern2':\n                applyUserHandleStyle('#3CB371', target);\n                break;\n            case 'pattern3':\n                applyUserHandleStyle('#FF6347', target);\n                break;\n        }\n    }\n    diagram.dataBind();\n}\n\n//Defines the clone tool for copying Node or Connector objects.\nclass CloneTool extends MoveTool {\n    public mouseDown(args: MouseEventArgs): void {\n        let newObject: any;\n        if (diagram.selectedItems.nodes.length > 0) {\n            newObject = cloneObject(diagram.selectedItems.nodes[0]) as NodeModel;\n        } else {\n            newObject = cloneObject(diagram.selectedItems.connectors[0]) as ConnectorModel;\n        }\n        newObject.id += randomId();\n        diagram.paste([newObject]);\n        if(diagram.selectedItems.connectors.length > 0)\n        {\n            args.source = diagram.connectors[diagram.connectors.length - 1] as IElement;\n        }\n        else\n        {\n            args.source = diagram.nodes[diagram.nodes.length - 1] as IElement;\n        }\n        args.sourceWrapper = args.source.wrapper;\n        super.mouseDown(args);\n        this.inAction = true;\n    }\n}\n\n//Defines the diagram content\n// tslint:disable-next-line:max-func-body-length \n\n    \n    //Defines the nodes collection in diagram\n    let nodes: NodeModel[] = [\n        {\n            id: 'NewIdea', width: 150, height: 60, offsetX: 300, offsetY: 60, shape: { type: 'Flow', shape: 'Terminator' },\n            annotations: [{ content: 'New idea identified' }],\n        }, {\n            id: 'Meeting', width: 150, height: 60, offsetX: 300, offsetY: 155, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Meeting with board' }]\n        }, {\n            id: 'BoardDecision', width: 150, height: 110, offsetX: 300, offsetY: 280, shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Board decides \\n whether to proceed' }]\n        }, {\n            id: 'Project', width: 150, height: 100, offsetX: 300, offsetY: 430, shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Find Project manager' }]\n        }, {\n            id: 'End', width: 150, height: 60, offsetX: 300, offsetY: 555, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Implement and Deliver' }]\n        }, {\n            id: 'Decision', width: 250, height: 60, offsetX: 550, offsetY: 60, shape: { type: 'Flow', shape: 'Card' },\n            annotations: [{ content: 'Decision process for new software ideas' }],\n            fixedUserHandles: [{ padding: { left: 2, right: 2, top: 2, bottom: 2 }, offset:{x:1.1,y:0.5}, width: 20, height: 20,}],\n        }, {\n            id: 'Reject', width: 150, height: 60, offsetX: 550, offsetY: 280, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Reject' }]\n        }, {\n            id: 'Resources', width: 150, height: 60, offsetX: 550, offsetY: 430, shape: { type: 'Flow', shape: 'Process' },\n            annotations: [{ content: 'Hire new resources' }]\n        }\n    ];\n\n    //Defines the connectors collection in diagram\n    let connectors: ConnectorModel[] = [\n        { id: 'connector1', type: 'Straight', sourceID: 'NewIdea', targetID: 'Meeting' },\n        { id: 'connector2', type: 'Straight', sourceID: 'Meeting', targetID: 'BoardDecision' },\n        { id: 'connector3', type: 'Straight', sourceID: 'BoardDecision', targetID: 'Project' },\n        { id: 'connector4', type: 'Straight', sourceID: 'Project', targetID: 'End' },\n        { id: 'connector5', type: 'Straight', sourceID: 'BoardDecision', targetID: 'Reject' },\n        { id: 'connector6', sourceID: 'Project', targetID: 'Resources' }\n    ];\n\n    //Defines the user handle collection for nodes in diagram\n    let handles: UserHandleModel[] = [{\n        name: 'clone', pathData: 'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +\n            '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +\n            'M68.5,72.5h-30V34.4h30V72.5z',\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    }];\n    // Defines the content of the diagram.\n    diagram = new Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        selectedItems: { constraints: SelectorConstraints.UserHandle, userHandles: handles },\n        snapSettings: { constraints: SnapConstraints.None },\n        fixedUserHandleTemplate: '#fixeduserhandletemplate',\n        fixedUserHandleClick: function (args:any) {\n            diagram.select([diagram.nameTable['Decision']]);\n            diagram.remove();\n        },\n        //get Node default value \n        getNodeDefaults: function (node: NodeModel){\n            let nodes: NodeModel = {\n                style: { fill: '#578CA9', strokeColor: 'none' },\n                annotations: [{ style: { color: 'white' } }]\n            };\n            return nodes;\n        },\n        //set CustomTool\n        getCustomTool: getTool,\n        selectionChange: selectionChange\n    });\n    // Enable or disable the property panel based on the selection.\n    function selectionChange(arg: ISelectionChangeEventArgs): void {\n        let PropertyAppearance: HTMLElement = document.getElementById('propertypanel');\n        let getSelectedElement: HTMLCollection = document.getElementsByClassName('e-remove-selection');\n        if (arg.newValue) {\n            // Check if the item in newValue is either a Node or Connector\n            if ((arg.newValue[0] instanceof Node)||(arg.newValue[0] instanceof Connector)) {\n                if (getSelectedElement.length) {\n                    getSelectedElement[0].classList.remove('e-remove-selection');\n                }\n            } \n            else {\n                if (!PropertyAppearance.classList.contains('e-remove-selection')) {\n                    PropertyAppearance.classList.add('e-remove-selection');\n                }\n            }\n        }\n    }\n    diagram.appendTo('#diagram');\n    diagram.select([diagram.nodes[0]]);\n    diagram.fitToPage();\n    document.getElementById('appearance').onclick = setHandleAppearance;\n    document.getElementById('pattern').onclick = setHandlePattern;\n\n\n"}