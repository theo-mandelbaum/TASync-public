{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<style>\n    /* Css for images in property panel  */\n    .diagram-connectors .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 45px;\n        width: calc((100% - 13px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n\n    .diagram-connectors .image-pattern-style:hover {\n        border-color: gray;\n        border-width: 2px;\n    }\n\n    .diagram-connectors .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .diagram-connectors .row-header {\n        font-size: 13px;\n        font-weight: 500;\n    }\n            \n    /* Selection indicator */\n    .diagram-connectors .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n    /* Align the names in property panel */\n    .diagram-connectors label{\n        display: inline-block;\n        font-size: 13px;\n        font-weight: 400;\n        width: 100%;\n        margin-top: auto;\n    }\n</style>\n<div class=\"diagram-connectors\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\" style=\"width:100%;background: white\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row row-header\">\n            <b>Connector types</b>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_2.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnector\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_3.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_5.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_6.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_7.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_8.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_9.png); margin-left: 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <div class=\"image-pattern-style\" id=\"cornerRadius\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_10.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecorator\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_11.png); margin: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/connector/Connectors_12.png); margin-left: 3px\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" id=\"decorators\" style=\"padding-top: 10px\">\n        <div class=\"row row-header\" style=\"padding-top: 8px\">\n           <b>Decorators</b>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Source Decorators</label>\n            <div>\n                <input type=\"text\" id=\"sourceDecorator2\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Target Decorators</label>\n            <div>\n                <input type=\"text\" id=\"targetDecorator\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Segment Decorators</label>\n            <div>\n                <input type=\"text\" id=\"segmentDecorator\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" id=\"decoratorsSize\" style=\"padding-top: 10px\">\n        <div class=\"row row-header\" style=\"padding-top: 8px\">\n           <b>Decorators Size</b>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Source Decorators Size</label>\n            <div>\n                <input type=\"text\" id=\"sourceDecoratorSize\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Target Decorators Size</label>\n            <div>\n                <input type=\"text\" id=\"targetDecoratorSize\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Segment Decorators Size</label>\n            <div>\n                <input type=\"text\" id=\"segmentDecoratorSize\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" id=\"color-tab\" style=\"padding-top: 10px\">\n        <div class=\"row row-header\">\n            <b>Apperance</b>\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n            <label>Line Color</label>\n            <input id=\"color\" type=\"color\">\n        </div>\n    </div>\n</div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Connector sample\n */\n\nimport {\n    Diagram, NodeModel, TextElement, HierarchicalTree, ConnectorConstraints, SnapConstraints, Segments, StackPanel, randomId,\n    SelectorConstraints, PointPortModel, ConnectorModel, PortVisibility, ConnectorEditing\n} from '@syncfusion/ej2-diagrams';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { ColorPicker, NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { DecoratorShapes, SegmentThumbShapes } from '@syncfusion/ej2-diagrams';\n\nDiagram.Inject(HierarchicalTree,ConnectorEditing);\n\nlet diagram: Diagram;\nlet sourceDecoratorShape: DropDownList;\nlet targetDecoratorShape: DropDownList;\nlet sourceDecoratorSize:  NumericTextBox;\nlet targetDecoratorSize:  NumericTextBox;\nlet segmentDecoratorSize:  NumericTextBox;\nfunction created(): void {\n    diagram.updateViewPort();\n}\n\n//Sets the default values of nodes\nfunction getNodeDefaults(obj: NodeModel): NodeModel {\n    if (obj.id !== 'node1') {\n        //Set ports\n        obj.ports = getPorts(obj);\n    }\n    if (obj.id !== 'node6') {\n        obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };\n        obj.width = 80;\n        obj.style.strokeWidth = 2;\n        obj.style.strokeColor = '#6F409F';\n        obj.height = 35;\n    }\n    return obj;\n}\n\n//Sets the default values of connectors\nfunction getConnectorDefaults(obj: ConnectorModel): ConnectorModel {\n    obj.type = 'Bezier';\n    obj.style.strokeColor = '#6f409f';\n    obj.style.strokeWidth = 2;\n    obj.targetDecorator = {\n        style: {\n            strokeColor: '#6f409f',\n            fill: '#6f409f',\n        }\n    },\n    obj.segments = [\n        {\n            type: 'Bezier',\n        }\n    ],\n    obj.constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb \n    return obj;\n}\n\n//Customize the content of the node\nfunction setNodeTemplate(obj: NodeModel): StackPanel {\n    if (obj.id === 'node6') {\n        let canvas = new StackPanel();\n        canvas.id = randomId();\n        canvas.children = [];\n        canvas.style.strokeWidth = 0;\n        canvas.style.fill = '#e6e0eb';\n        canvas.children.push(getTextElement('Events', '#a6a1e0'));\n        canvas.children.push(getTextElement('Emails', '#db8ec9'));\n        canvas.children.push(getTextElement('Calls', '#db8ec9'));\n        canvas.children.push(getTextElement('Smart Contents', '#db8ec9'));\n        return canvas;\n    }\n    return null;\n}\n\n//creation of the TextElement\nfunction getTextElement(text: string, color: string): TextElement {\n    let textElement: TextElement = new TextElement();\n    textElement.id = randomId();\n    textElement.width = 80;\n    textElement.height = 35;\n    textElement.content = text;\n    textElement.style.fill = '#6f409f';\n    textElement.style.color = 'white';\n    textElement.style.strokeColor = '#6f409f';\n    textElement.cornerRadius = 5;\n    textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n    textElement.relativeMode = 'Object';\n    return textElement;\n}\n\n//creation of Port for Node.\nfunction getPorts(obj: NodeModel): PointPortModel[] {\n    if (obj.id === 'node2') {\n        let node2Ports: PointPortModel[] = [\n            { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: PortVisibility.Hidden },\n            { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: PortVisibility.Hidden }\n        ];\n        return node2Ports;\n    } else if (obj.id === 'node6') {\n        let node6Ports: PointPortModel[] = [\n            { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: PortVisibility.Hidden },\n            { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: PortVisibility.Hidden }\n        ];\n        return node6Ports;\n    } else {\n        let ports: PointPortModel[] = [\n            { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n            { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n        ];\n        return ports;\n    }\n}\n\n//Event for Appearance of the layout.\nfunction changeConnectorPattern(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    // custom code start\n    let selectedElement: HTMLCollection = document.getElementsByClassName('e-selected-style');\n    if (selectedElement.length) {\n        selectedElement[0].classList.remove('e-selected-style');\n    }\n    // custom code end\n    if (target.className === 'image-pattern-style') {\n        switch (target.id) {\n            case 'straightConnector':\n                applyConnectorStyle(false, false, false, 'Straight', target, 1);\n                break;\n            case 'orthogonalConnector':\n                applyConnectorStyle(false, false, false, 'Orthogonal', target, 1);\n                break;\n            case 'bezierConnector':\n                applyConnectorStyle(false, false, false, 'Bezier', target, 1);\n                break;\n            case 'straightConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Straight', target);\n                break;\n            case 'orthogonalConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Orthogonal', target);\n                break;\n            case 'bezierConnectorWithStroke':\n                applyConnectorStyle(false, false, false, 'Bezier', target);\n                break;\n            case 'straightConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Straight', target);\n                break;\n            case 'orthogonalConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Orthogonal', target);\n                break;\n            case 'bezierConnectorWithDasharray':\n                applyConnectorStyle(true, false, false, 'Bezier', target);\n                break;\n            case 'cornerRadius':\n                applyConnectorStyle(false, false, true, 'Orthogonal', target);\n                break;\n            case 'sourceDecorator':\n                applyConnectorStyle(false, true, false, 'Straight', target);\n                break;\n            case 'sourceDecoratorWithDasharray':\n                applyConnectorStyle(true, true, false, 'Straight', target);\n                break;\n        }\n    }\n}\n\n//Connector Style customization\nfunction applyConnectorStyle(\n    dashedLine: boolean, sourceDec: boolean, isRounded: boolean,\n    type: Segments, target: HTMLElement, strokeWidth?: number\n): void {\n    let connector: ConnectorModel;\n    for (let i: number = 0; i < diagram.connectors.length; i++) {\n        connector = diagram.connectors[i];\n        connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;\n        connector.type = type;\n        connector.cornerRadius = isRounded ? 5 : 0;\n        connector.style.strokeDashArray = dashedLine ? '5,5' : '';\n        if (sourceDec) {\n            connector.sourceDecorator = {\n                style: {\n                    strokeColor: connector.style.strokeColor,\n                    fill: connector.style.strokeColor, strokeWidth: 2\n                }, shape: 'Circle'\n            };\n            (document.getElementById('sourceDecorator2') as any).value='Circle';\n            sourceDecoratorShape.value='Circle';\n        } else {\n            connector.sourceDecorator = { shape: 'None' };\n            (document.getElementById('sourceDecorator2') as any).value='None';\n            sourceDecoratorShape.value='None';\n        }\n        connector.targetDecorator = {\n            style: {\n                strokeColor: connector.style.strokeColor,\n                fill: connector.style.strokeColor, strokeWidth: 2\n            }, shape: 'Arrow'\n        };\n        (document.getElementById('targetDecorator') as any).value='Arrow';\n        targetDecoratorShape.value='Arrow';\n        diagram.dataBind();\n        diagram.updateSelector();\n    }\n    // custom code start\n    target.classList.add('e-selected-style');\n    // custom code end\n}\n\n//Change Source decorator shape\nfunction sourceDecoratorShapeChange(args:any)\n{\n    for (let i = 0; i < diagram.connectors.length; i++) {\n        diagram.connectors[i].sourceDecorator = {\n         shape: args.itemData.shape,\n         style:{\n                strokeColor:  diagram.connectors[i].style.strokeColor,\n                fill:  diagram.connectors[i].style.strokeColor,\n         }\n        };\n    }\n    diagram.dataBind();\n   \n}\n//Change target decorator shape\nfunction targetDecoratorShapeChange(args:any)\n{\n    for (let i = 0; i < diagram.connectors.length; i++) {\n        diagram.connectors[i].targetDecorator = {\n            shape: args.itemData.shape,\n            style: {\n                strokeColor: diagram.connectors[i].style.strokeColor,\n                fill:  diagram.connectors[i].style.strokeColor,\n            }\n        };\n        diagram.dataBind();\n    }   \n}\n//Change segment decorator shape\nfunction segmentDecoratorShapeChange(args:any)\n{\n    for (let i = 0; i < diagram.connectors.length; i++) {\n        diagram.segmentThumbShape = args.itemData.shape;\n    } \n    diagram.dataBind();  \n}\n\n// function to Change source  decorator Size\nfunction sourceDecoratorSizeChange(args:any) {\n    for (var i = 0; i < diagram.connectors.length; i++) {\n        diagram.connectors[i].sourceDecorator.width = args.value;\n        diagram.connectors[i].sourceDecorator.height = args.value;\n    }\n    diagram.dataBind();\n}\n\n// function to Change target  decorator Size\nfunction targetDecoratorSizeChange(args:any) {\n    for (var i = 0; i < diagram.connectors.length; i++) {\n        diagram.connectors[i].targetDecorator.width = args.value;\n        diagram.connectors[i].targetDecorator.height = args.value;\n    }\n    diagram.dataBind();\n}\n\n// function to Change segment  decorator Size\nfunction segmentDecoratorSizeChange(args:any) {\n    var connector=diagram.selectedItems.connectors[0];\n    diagram.segmentThumbSize = args.value;\n    diagram.clearSelection();\n    diagram.select([diagram.nameTable[connector.id]]);\n    diagram.dataBind();\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let bounds: ClientRect = document.getElementsByClassName('content-wrapper')[0].getBoundingClientRect();\n    let marginLeft: number = (bounds.width - 560) / 2;\n\n    //Initialize Diagram Nodes\n    let nodes: NodeModel[] = [\n        { id: 'node1', annotations: [{ content: 'Promotion' }] },\n        { id: 'node2', annotations: [{ content: 'Lead' }] },\n        { id: 'node3', annotations: [{ content: 'Account' }] },\n        { id: 'node4', annotations: [{ content: 'Information' }] },\n        { id: 'node5', annotations: [{ content: 'Opportunity' }] },\n        { id: 'node6', offsetX: marginLeft + 540, offsetY: 340, excludeFromLayout: true }\n    ];\n\n    //Initialize Diagram connectors\n    let connectors: ConnectorModel[] = [\n        { id: 'connector', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector1', sourceID: 'node2', sourcePortID: 'port1', targetID: 'node3', targetPortID: 'portIn' },\n        { id: 'connector2', sourceID: 'node2', sourcePortID: 'port2', targetID: 'node4', targetPortID: 'portIn' },\n        { id: 'connector3', sourceID: 'node2', sourcePortID: 'port3', targetID: 'node5', targetPortID: 'portIn' },\n        { id: 'connector4', sourceID: 'node6', sourcePortID: 'port4', targetID: 'node3', targetPortID: 'portOut' },\n        { id: 'connector5', sourceID: 'node6', sourcePortID: 'port5', targetID: 'node4', targetPortID: 'portOut' },\n        { id: 'connector7', sourceID: 'node6', sourcePortID: 'port6', targetID: 'node5', targetPortID: 'portOut' }\n    ];\n\n    //Initializes diagram control\n    diagram = new Diagram({\n        width: '100%', height: 680, nodes: nodes,\n        connectors: connectors,\n        //Configrues hierarchical tree layout\n        layout: {\n            type: 'HierarchicalTree', orientation: 'LeftToRight',\n            verticalSpacing: 75, margin: { left: marginLeft, right: 0, top: 0, bottom: 0 }\n        },\n        created: created,\n        //Function to Enable the segmentDcorator size when the Connector is selected      \n        selectionChange: function () {\n            if (diagram.selectedItems.connectors.length > 0) {\n                segmentDecoratorSize.enabled = true;\n            }\n            else {\n                segmentDecoratorSize.enabled = false;\n            }\n        },\n        snapSettings: { constraints: SnapConstraints.None },\n        //Sets the default values of nodes\n        getNodeDefaults: getNodeDefaults,\n        //Sets the default values of connectors\n        getConnectorDefaults: getConnectorDefaults,\n        //Customize the content of the node\n        setNodeTemplate: setNodeTemplate,\n    });\n    diagram.appendTo('#diagram');\n\n    //Click Event to change the connector type.\n    document.getElementById('appearance').onclick = changeConnectorPattern;\n\n    //set appearance color\n    let objectColor: ColorPicker = new ColorPicker({\n        mode: 'Palette',\n        showButtons:false,\n        modeSwitcher: true,\n        value: '#6F409F',\n        change: function(args) {\n            for(let i=0;i<diagram.connectors.length;i++)\n            {\n                diagram.connectors[i].style.strokeColor=args.currentValue.hex;\n                diagram.connectors[i].targetDecorator.style.strokeColor= args.currentValue.hex;\n                diagram.connectors[i].targetDecorator.style.fill= args.currentValue.hex;\n                diagram.connectors[i].sourceDecorator.style.strokeColor= args.currentValue.hex;\n                diagram.connectors[i].sourceDecorator.style.fill= args.currentValue.hex;\n            }\n            diagram.dataBind();\n        }\n    });\n    objectColor.appendTo('#color');\n    //Shape collection of the decorators.\n    let decoratorShape = [\n        { shape: 'None', text: 'None' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Diamond', text: 'Diamond' },\n        { shape: 'Arrow', text: 'Arrow' },\n        { shape: 'OpenArrow', text: 'Open Arrow' },\n        { shape: 'Fletch', text: 'Fletch' },\n        { shape: 'OpenFetch', text: 'OpenFetch' },\n        { shape: 'IndentedArrow', text: 'Indented Arrow' },\n        { shape: 'OutdentedArrow', text: 'Outdented Arrow' },\n        { shape: 'DoubleArrow', text: 'Double Arrow' }\n    ];\n\n    //DropDownList is used to apply the source decorator shape of the connector.\n    sourceDecoratorShape = new DropDownList({\n        enabled: true, value: 'None',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: sourceDecoratorShapeChange\n    });\n    sourceDecoratorShape.appendTo('#sourceDecorator2');\n\n    //DropDownList is used to apply the target decorator shape of the connector.\n    targetDecoratorShape = new DropDownList({\n        enabled: true, \n        value: 'Arrow',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: targetDecoratorShapeChange\n    });\n    targetDecoratorShape.appendTo('#targetDecorator');\n\n    //DropDownList is used to apply the segment decorator shape of the connector.\n    let segmentDecoratorshape = new DropDownList({\n        enabled: true, value: 'Circle',\n        dataSource: decoratorShape, fields: { value: 'shape', text: 'text' },\n        change: segmentDecoratorShapeChange\n    });\n    segmentDecoratorshape.appendTo('#segmentDecorator');\n\n    // Create a numeric text box for adjusting source decorator Size \n     sourceDecoratorSize = new NumericTextBox({\n        min: 10,\n        max: 20,\n        step: 1,\n        width: 130,\n        value: 12,\n        format: 'n0',\n        change: sourceDecoratorSizeChange\n    });\n    sourceDecoratorSize.appendTo('#sourceDecoratorSize');\n\n\n    // Create a numeric text box for adjusting Target decorator Size \n     targetDecoratorSize = new NumericTextBox({\n        min: 10,\n        max: 20,\n        step: 1,\n        width: 130,\n        format: 'n0',\n        value: 12,\n        change:targetDecoratorSizeChange,\n    });\n    targetDecoratorSize.appendTo('#targetDecoratorSize');\n\n    // Create a numeric text box for adjusting Segment decorator Size \n     segmentDecoratorSize = new NumericTextBox({\n        enabled:false,\n        min: 10,\n        max: 20,\n        step: 1,\n        format: 'n0',\n        width: 130,\n        value: 12,\n        change:segmentDecoratorSizeChange,\n    });\n    segmentDecoratorSize.appendTo('#segmentDecoratorSize');\n\n\n"}