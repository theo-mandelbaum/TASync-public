{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Venn Diagram\n */\n\nimport { Diagram, BasicShapeModel, NodeModel, SnapConstraints, DiagramTools } from '@syncfusion/ej2-diagrams';\n\n\n    \n  // Basic shape configuration for nodes\n  const basicShape: BasicShapeModel = { type: \"Basic\", shape: \"Ellipse\" };\n\n  // Creates a node with specified properties.\n  function createNode(id: string, offsetX: number, offsetY: number, width: number, height: number, annotations: any[], style: any) {\n    return {\n      id,\n      offsetX,\n      offsetY,\n      width,\n      height,\n      shape: basicShape,\n      annotations,\n      style\n    };\n  }\n\n  // Styles for different node categories\n  const styles = {\n    dataScience: { fill: \"#f2f2f2\", strokeColor: \"#acacac\", strokeWidth: 1 },\n    trignometry: { fill: \"#feb42f\", opacity: 0.2, strokeColor: \"#feb42f\" },\n    expertise: { fill: \"#6acbd4\", opacity: 0.2, strokeColor: \"#6acbd4\" },\n    programming: { fill: \"#ed1d79\", opacity: 0.2, strokeColor: \"#ed1d79\" }\n  };\n\n  // Nodes initialization with specific properties\n  let nodes: NodeModel[] = [\n    createNode(\"datascience\", 450, 232, 400, 400, [{ content: \"Data Science\", offset: { x: 0.5, y: 0.1 } }], styles.dataScience),\n    createNode(\"trignometry\", 515, 205, 200, 200, [\n      { content: \"Trignometry\", offset: { x: 0.5, y: 0.4 }, horizontalAlignment: \"Left\" },\n      { content: \"Thesis\", offset: { x: 0.45, y: 0.8 } }\n    ], styles.trignometry),\n    createNode(\"expertise\", 445, 290, 200, 200, [{ content: \"Expertise\", offset: { x: 0.5, y: 0.7 }, verticalAlignment: \"Top\" }], styles.expertise),\n    createNode(\"programming\", 388, 205, 200, 200, [\n      { content: \"Programming\", offset: { x: 0.5, y: 0.4 }, horizontalAlignment: \"Right\" },\n      { content: \"Assembly\", offset: { x: 0.7, y: 0.35 }, horizontalAlignment: \"Left\" },\n      { content: \"Horizon\", offset: { x: 0.7, y: 0.6 }, horizontalAlignment: \"Left\" },\n      { content: \"Middleware\", offset: { x: 0.5, y: 0.8 } }\n    ], styles.programming)\n  ];\n\n  //Initializes diagram control\n  let diagram: Diagram = new Diagram({\n    width: '100%', height: 580, nodes: nodes,\n    snapSettings: { constraints: SnapConstraints.None },\n    tool: DiagramTools.ZoomPan\n  });\n  diagram.appendTo('#diagram');\n  /**\n * Adjusts the diagram view to fit the page .\n */\n  diagram.fitToPage();\n"}