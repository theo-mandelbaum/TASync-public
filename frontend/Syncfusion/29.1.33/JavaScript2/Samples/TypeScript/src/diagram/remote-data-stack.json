{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"diagram\" class=\"diagramclass\">\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Remote Data binding sample\n */\n\nimport {\n    Diagram, NodeModel, ConnectorModel, DataBinding, HierarchicalTree, DiagramTools\n} from '@syncfusion/ej2-diagrams';\nimport { DataManager } from '@syncfusion/ej2-data';\n\nexport interface DataInfo {\n    [key: string]: string;\n}\n\nDiagram.Inject(DataBinding, HierarchicalTree);\n\n// Sets the default values of nodes\nfunction getNodeDefaults(node: NodeModel): NodeModel {\n    node.width = 80;\n    node.height = 40;\n    // Initialize shape\n    node.shape = { type: 'Basic', shape: 'Rectangle' };\n    node.style = { fill: '#048785', strokeColor: 'Transparent' };\n    return node;\n}\n\n// Sets the default values of connector\nfunction getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.type = 'Orthogonal';\n    connector.style.strokeColor = '#048785';\n    connector.targetDecorator.shape = 'None';\n    return connector;\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    //Initializes diagram control\n    let diagram: Diagram = new Diagram({\n        width: '100%', height: 490,\n        //Configrues hierarchical tree layout\n        layout: {\n            type: 'HierarchicalTree', margin: { left: 0, right: 0, top: 100, bottom: 0 },\n            verticalSpacing: 40,\n        },\n        // Sets the default values of nodes\n        getNodeDefaults: getNodeDefaults,\n        // Sets the default values of connector\n        getConnectorDefaults: getConnectorDefaults,\n        // Configure the data source for the diagram\n        dataSourceSettings: {\n            id: 'Id', parentId: 'ParentId',\n            dataSource: new DataManager({\n                url: 'http://localhost:62728/api/RemoteData',\n                crossDomain: true\n            }),\n            // Bind external data to node properties\n            doBinding: (nodeModel: NodeModel, data: DataInfo, diagram: Diagram) => {\n                nodeModel.annotations = [{\n                    /* tslint:disable:no-string-literal */\n                    content: data['Label'],\n                    style: { color: 'white' }\n                }];\n            }\n        },\n        // Disable all interactions except zoom/pan\n        tool: DiagramTools.ZoomPan,\n        snapSettings: { constraints: 0 }\n    });\n    diagram.appendTo('#diagram');\n\n"}