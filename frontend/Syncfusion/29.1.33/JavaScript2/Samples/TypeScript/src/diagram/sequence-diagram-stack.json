{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    Diagram,\n    ConnectorModel,\n    UndoRedo,\n    DiagramTools,\n    NodeModel,\n    PortVisibility,\n    PointPortModel\n} from '@syncfusion/ej2-diagrams';\n\n// Enable Undo and Redo functionality in the Diagram component.\nDiagram.Inject(UndoRedo);\n\n// Creates a text node with specified properties.\nfunction createTextNode(id: string, width: number, height: number, offsetX: number, offsetY: number,\n    content: string, fill: string, bold: boolean): NodeModel {\n    return {\n        id: id,\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        shape: { type: \"Text\", content: content },\n        style: { fill: fill, bold: bold }\n    };\n}\n\n// Creates a port with specified properties.\nfunction createPort(id: string, offsetX: number, offsetY: number): PointPortModel {\n    return {\n        id,\n        offset: { x: offsetX, y: offsetY },\n        visibility: PortVisibility.Hidden,\n    };\n}\n\n// Creates a basic node (rectangle) with ports.\nfunction createBasicNode(id: string, width: number, height: number, offsetX: number, offsetY: number, ports: PointPortModel[]): NodeModel {\n    return {\n        id: id,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        width: width,\n        height: height,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        style: { fill: 'orange', strokeColor: 'orange' },\n        ports: ports,\n    };\n}\n\n// Creates a straight connector between two points.\nfunction createConnector(id: string, sourceX: number, sourceY: number, targetX: number, targetY: number): ConnectorModel {\n    return {\n        id: id,\n        type: 'Straight',\n        sourcePoint: { x: sourceX, y: sourceY },\n        targetPoint: { x: targetX, y: targetY },\n        targetDecorator: { shape: 'None' },\n        style: { strokeColor: '#A5A6A7' }\n    };\n}\n\n// Creates a straight connector between two nodes using ports.\nfunction createArrowConnector(id: string, sourceID: string, sourcePortID: string, targetID: string, targetPortID: string): ConnectorModel {\n    return {\n        id,\n        type: 'Straight',\n        sourceID,\n        sourcePortID,\n        targetID,\n        targetPortID,\n    };\n}\n\n// Define nodes for the sequence diagram.\nlet nodes: NodeModel[] = [\n    createTextNode('employee', 100, 60, 100, 100, 'Employee', 'transparent', true),\n    createTextNode('teamLead', 100, 60, 350, 100, 'Team Lead', 'transparent', true),\n    createTextNode('dashboard', 100, 60, 600, 100, 'Dashboard', 'transparent', true),\n    createTextNode('manager', 100, 60, 850, 100, 'Manager', 'transparent', true),\n    createTextNode('leaveRequest', 100, 60, 225, 250, 'Leave Request', 'transparent', false),\n    createTextNode('leaveApproval', 100, 60, 225, 484, 'Leave Approval', 'transparent', false),\n    createTextNode('checkEmplyeeAvail', 175, 30, 470, 345, 'Check Employee availability and task status', 'transparent', false),\n    createTextNode('forwardLeaveMssg', 150, 30, 600, 420, 'Forward Leave Request', 'transparent', false),\n    createTextNode('noObjection', 150, 30, 600, 460, 'No Objection', 'transparent', false),\n    createBasicNode('employeeNode', 10, 250, 100, 350, [\n        createPort('p1', 1, 0.05),\n        createPort('p2', 1, 0.97),\n    ]),\n    createBasicNode('teamLeadNode', 10, 190, 350, 320, [\n        createPort('p1', 0, 0.07),\n        createPort('p2', 1, 0.92),\n        createPort('p3', 1, 0.5),\n    ]),\n    createBasicNode('dashboardNode', 10, 25, 600, 320, [\n        createPort('p1', 0, 0.5),\n    ]),\n    createBasicNode('managerNode', 10, 50, 850, 420, [\n        createPort('p1', 0, 0.1),\n        createPort('p2', 0, 0.9),\n    ])\n];\n\n// Define connectors for the sequence diagram.\nlet connectors: ConnectorModel[] = [\n    createConnector('employeeCon1', 100, 120, 100, 225),\n    createConnector('employeeCon2', 100, 475, 100, 600),\n    createConnector('teamLeanCon1', 350, 120, 350, 225),\n    createConnector('teamLeanCon2', 350, 415, 350, 600),\n    createConnector('dashboardCon1', 600, 120, 600, 307),\n    createConnector('dashboardCon2', 600, 333, 600, 600),\n    createConnector('managerCon1', 850, 120, 850, 395),\n    createConnector('managerCon2', 850, 445, 850, 600),\n    createArrowConnector('empToTeamLead', 'employeeNode', 'p1', 'teamLeadNode', 'p1'),\n    createArrowConnector('teamLeadToDash', 'teamLeadNode', 'p3', 'dashboardNode', 'p1'),\n    createArrowConnector('teamLeadToManager', 'teamLeadNode', 'p2', 'managerNode', 'p1'),\n    {\n        id: 'teamLeadToEmp',\n        type: 'Straight',\n        sourcePoint: { x: 350, y: 465 },\n        style: { strokeDashArray: '4 4' },\n        targetID: 'employeeNode',\n        targetPortID: 'p2',\n    },\n    {\n        id: 'managerToTeamLead',\n        type: 'Straight',\n        sourceID: 'managerNode',\n        sourcePortID: 'p2',\n        targetPoint: { x: 350, y: 440 },\n        style: { strokeDashArray: '4 4' },\n    },\n];\n\n// Defines default properties for connectors.\nfunction getConnectorDefaults(connector: ConnectorModel): any {\n    connector.targetDecorator.style = { fill: '#489ECC', strokeColor: '#489ECC' };\n    if (connector.targetDecorator.shape === 'Arrow') {\n        connector.style = { strokeColor: '#489ECC', strokeWidth: 2 };\n    }\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    //Initializes the nodes for the diagram\n    let diagram: Diagram = new Diagram({\n        width: '100%',\n        height: '700px',\n        nodes: nodes,\n        tool: DiagramTools.ZoomPan,\n        connectors: connectors,\n        snapSettings: { constraints: 0 },\n        getConnectorDefaults: getConnectorDefaults,\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage();\n\n\n"}