{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<style>\n    /* Css for images in property panel  */\n            .diagramNodes-property .image-pattern-style {\n                background-size: contain;\n                background-repeat: no-repeat;\n                height: 75px;\n                width: calc((100% - 12px) / 3);\n                cursor: pointer;\n                border: 1px solid #D5D5D5;\n                background-position: center;\n                float: left;\n            }\n        \n            .image-pattern-style:hover {\n                border-color: gray;\n                border-width: 2px;\n            }\n        \n            .diagramNodes-property .row {\n                margin-left: 0px;\n                margin-right: 0px;\n            }\n        \n            .diagramNodes-property .row-header {\n                font-size: 13px;\n                font-weight: 500;\n            }\n            /* Selection indicator */\n            .e-selected-style {\n                border-color: #006CE6;\n                border-width: 2px;\n            }\n        </style>\n\n<div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section diagramNodes-property\">\n    <div class=\"property-panel-header\">\n        Properties\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n        <div class=\"row\" style=\"padding-top: 3px;\">\n            <div class=\"image-pattern-style\" id=\"preview0\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/node/Nodes_1.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview1\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/node/Nodes_2.png); margin-right: 0px 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview2\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/node/Nodes_3.png); margin: 0px 3px\">\n            </div>\n        </div>\n        <div class=\"row\" style=\"padding-top: 3px\">\n            <div class=\"image-pattern-style\" id=\"preview3\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/node/Nodes_4.png); margin-right: 3px\">\n            </div>\n            <div class=\"image-pattern-style\" id=\"preview4\" style=\"background-image: url(//npmci.syncfusion.com/development/demos/src/diagram/Images/node/Nodes_5.png); margin-right: 0px 3px\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row property-panel-content\" style=\"padding-top: 10px\">\n        <div class=\"row row-header\">\n            Behavior\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"aspectRatio\" unchecked=\"false\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"lock\" unchecked=\"false\">\n        </div>\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-diagrams' package\": \"*\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n\n/**\n * Getting started -  nodes\n */\n// Importing necessary modules from '@syncfusion/ej2-diagrams' package\nimport {\n    Diagram, NodeModel, ConnectorModel, NodeConstraints, SnapConstraints,\n    GradientType, RadialGradientModel, UndoRedo, ConnectorConstraints\n} from '@syncfusion/ej2-diagrams';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\n\n// Injecting required modules\nDiagram.Inject(UndoRedo);\n\nlet diagram: Diagram;\nlet element: CheckBox;\n\n //Sets the default values of a nodes\nfunction getNodeDefaults(obj: NodeModel): NodeModel {\n    obj.width = 100;\n    obj.height = 100;\n    obj.shape = { type: 'Basic', shape: 'Ellipse' };\n    obj.style = { fill: '#37909A', strokeColor: '#024249' };\n    obj.annotations[0].margin = { left: 10, right: 10 };\n    obj.annotations[0].style = { color: 'white', fill: 'none', strokeColor: 'none' };\n    return obj;\n}\n\n//Sets the default values of a Connector\nfunction getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.targetDecorator.style = { fill: '#024249', strokeColor: '#024249' };\n    return { style: { strokeColor: '#024249', strokeWidth: 2 } };\n}\n\n//Enable or disable the Constraints(Aspect Ratio) for Node.\nfunction setNodeConstraints(args: CheckBoxChangeEventArgs): void {\n    for (let i: number = 0; i < diagram.nodes.length; i++) {\n        let node: NodeModel = diagram.nodes[i];\n        if (element.checked) {\n            node.constraints |= NodeConstraints.AspectRatio;\n        } else {\n            node.constraints &= ~NodeConstraints.AspectRatio;\n        }\n        diagram.dataBind();\n    }\n}\n\n//Enable or disable the lock Constraints for Nodes and Connectors\nfunction setLockConstraints(args: CheckBoxChangeEventArgs): void {\n    for (let i: number = 0; i < diagram.nodes.length; i++) {\n        let node: NodeModel = diagram.nodes[i];\n        if (args.checked) {\n            node.constraints &= ~(\n                NodeConstraints.Resize |\n                NodeConstraints.Rotate |\n                NodeConstraints.Drag |\n                NodeConstraints.Delete\n            );\n            node.constraints |= NodeConstraints.ReadOnly;\n        } else {\n            node.constraints |= NodeConstraints.Default & ~NodeConstraints.ReadOnly;\n        }\n    }\n\n    for (let i: number = 0; i < diagram.connectors.length; i++) {\n        let connector: ConnectorModel = diagram.connectors[i];\n        if (args.checked) {\n            connector.constraints &= ~(\n                ConnectorConstraints.DragSourceEnd |\n                ConnectorConstraints.DragTargetEnd |\n                ConnectorConstraints.Drag |\n                ConnectorConstraints.Delete\n            );\n            connector.constraints |= ConnectorConstraints.ReadOnly;\n        } else {\n            connector.constraints |= ConnectorConstraints.Default & ~ConnectorConstraints.ReadOnly;\n        }\n    }\n    diagram.dataBind();\n}\n\n//Set customStyle for Node.\nfunction applyNodeStyle(\n    node: NodeModel, width: number, array: string, con: NodeConstraints, type: GradientType): void {\n    node.style.fill = '#37909A';\n    node.style.strokeWidth = width;\n    node.style.strokeColor = '#024249';\n    node.style.strokeDashArray = array;\n    if (type === 'None' || !type) {\n        node.style.gradient.type = 'None';\n    } else {\n        let gradient: RadialGradientModel = {\n            cx: 50, cy: 50, fx: 50, fy: 50,\n            stops: [{ color: '#00555b', offset: 0 },\n            { color: '#37909A', offset: 90 }],\n            type: 'Radial'\n        };\n        node.style.gradient = gradient;\n    }\n    if (con & NodeConstraints.Shadow) {\n        node.shadow = { angle: 45, distance: 15, opacity: 0.3, color: 'grey' };\n        node.constraints |= con;\n    } else {\n        node.constraints &= con;\n    }\n    diagram.dataBind();\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n\n    let nodes: NodeModel[] = [\n        { id: 'sdlc', offsetX: 300, offsetY: 288, annotations: [{ content: 'SDLC' }] },\n        { id: 'support', offsetX: 150, offsetY: 250, annotations: [{ content: 'Support' }] },\n        { id: 'analysis', offsetX: 300, offsetY: 150, annotations: [{ content: 'Analysis' }] },\n        { id: 'design', offsetX: 450, offsetY: 250, annotations: [{ content: 'Design' }] },\n        { id: 'implement', offsetX: 400, offsetY: 400, annotations: [{ content: 'implement' }] },\n        { id: 'deploy', offsetX: 200, offsetY: 400, annotations: [{ content: 'Deploy' }] }\n    ];\n\n    let connections: ConnectorModel[] = [\n        { id: 'connector1', sourceID: 'analysis', targetID: 'design' },\n        { id: 'connector2', sourceID: 'design', targetID: 'implement' },\n        { id: 'connector3', sourceID: 'implement', targetID: 'deploy' },\n        { id: 'connector4', sourceID: 'deploy', targetID: 'support' },\n        { id: 'connector5', sourceID: 'support', targetID: 'analysis' }\n    ];\n\n    //Initializes diagram control\n    diagram = new Diagram({\n        width: '100%', height: '645px', nodes: nodes, connectors: connections,\n        //Sets the default values of a node\n        getNodeDefaults: getNodeDefaults,\n        //Sets the default values of a Connector\n        getConnectorDefaults: getConnectorDefaults,\n        snapSettings: { constraints: SnapConstraints.None },\n        created: created,\n         //Enable or disable the AspectRatio if multiple nodes or connectors is selected .\n         selectionChange: function()\n         {\n            if (diagram.selectedItems.nodes.length > 1 || diagram.selectedItems.connectors.length > 0) {\n                element.disabled = true;\n            }\n            else {\n                element.disabled = false;\n            }\n         }\n\n    });\n    diagram.appendTo('#diagram');\n    function created(): void {\n        diagram.fitToPage({ mode: 'Width' });\n    }\n    //Click event for Appearance of the Property Panel\n    document.getElementById('appearance').onclick = (args: MouseEvent) => {\n        let target: HTMLElement = args.target as HTMLElement;\n        // custom code start\n        let selectedElement: HTMLCollection = document.getElementsByClassName('e-selected-style');\n        if (selectedElement.length) {\n            selectedElement[0].classList.remove('e-selected-style');\n        }\n        // custom code end\n        if (target.className === 'image-pattern-style') {\n            for (let i: number = 0; i < diagram.nodes.length; i++) {\n                let node: NodeModel = diagram.nodes[i];\n                switch (target.id) {\n                    case 'preview0':\n                        applyNodeStyle(node, 0, '', ~NodeConstraints.Shadow, 'None');\n                        break;\n                    case 'preview1':\n                        applyNodeStyle(node, 2, '', ~NodeConstraints.Shadow, 'None');\n                        break;\n                    case 'preview2':\n                        applyNodeStyle(node, 2, '5 5', ~NodeConstraints.Shadow, 'None');\n                        break;\n                    case 'preview3':\n                        applyNodeStyle(node, 2, '5 5', ~NodeConstraints.Shadow, 'Radial');\n                        break;\n                    case 'preview4':\n                        applyNodeStyle(node, 2, '5 5', NodeConstraints.Shadow, 'None');\n                        break;\n                }\n                // custom code start\n                target.classList.add('e-selected-style');\n                // custom code end\n            }\n        }\n    };\n    //Enable or disable the AspectRatio for Node.\n    element = new CheckBox({ checked: false, label: 'Aspect ratio', change: setNodeConstraints });\n    element.appendTo('#aspectRatio');\n    //Enable or disable the Interaction for Node.\n    let lockElement: CheckBox = new CheckBox({ checked: false, label: 'Lock', change: setLockConstraints });\n    lockElement.appendTo('#lock');\n\n"}