{"script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\n\nlet isMobile: boolean;\n\nexport function addEvents(): void {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n\nexport function openPalette(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <style>\n        .sb-mobile-palette {\n            width: 210px;\n            height: 100%;\n            float: left;\n        }\n\n        .sb-mobile-palette-bar {\n            display: none;\n        }\n\n        .sb-mobile-diagram {\n            width: calc(100% - 212px);\n            height: 100%;\n            float: left;\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            border-left: none;\n        }\n\n        @media (max-width: 550px) {\n\n            .sb-mobile-palette {\n                z-index: 19;\n                position: absolute;\n                display: none;\n                transition: transform 300ms linear, visibility 0s linear 300ms;\n                width: 39%;\n                height: 100%;\n            }\n\n            .sb-mobile-palette-bar {\n                display: block;\n                width: 100%;\n                background: #fafafa;\n                padding: 10px 10px;\n                border: 0.5px solid #e0e0e0;\n                min-height: 40px;\n            }\n\n            .sb-mobile-diagram {\n                width: 100%;\n                height: 100%;\n                float: left;\n                left: 0px;\n            }\n\n            #palette-icon {\n                font-size: 20px;\n            }\n        }\n\n        .sb-mobile-palette-open {\n            position: absolute;\n            display: block;\n            right: 15px;\n        }\n    </style>\n    <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n        <div class=\"sb-mobile-palette-bar\">\n            <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" class=\"sb-mobile-palette\">\n            <div id=\"symbolPalette\" style=\"width:90%;\"></div>\n        </div>\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n            <div id=\"diagram\"></div>\n        </div>\n    </div>\n</div>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2/diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * UML activity sample\n */\n\n// Importing needed dependencies for diagram\nimport {\n    Diagram, NodeModel, UndoRedo, ConnectorModel, SymbolPalette, DiagramContextMenu, StrokeStyleModel,\n    DecoratorModel, PointModel, SymbolInfo, PortVisibility, SnapConstraints, PointPortModel\n} from '@syncfusion/ej2-diagrams';\nimport { addEvents } from './script/diagram-common';\nimport { Shapes, UmlActivityShapes } from '@syncfusion/ej2/diagrams';\n\nDiagram.Inject(UndoRedo, DiagramContextMenu);\n\nlet diagram: Diagram;\nlet palette: SymbolPalette;\nlet isMobile: boolean;\n\n// Initializes an array of UML activity shapes for the symbol palette\nconst umlActivityShapes: NodeModel[] = [\n    'Action', 'Decision', 'MergeNode', 'InitialNode', 'FinalNode', 'ForkNode',\n    'JoinNode', 'TimeEvent', 'AcceptingEvent', 'SendSignal', 'ReceiveSignal',\n    'StructuredNode', 'Note'\n].map(shape => ({ id: shape, shape: { type: 'UmlActivity', shape } }));\n\n// Defines a base connector symbol to standardize connector creation\nconst baseConnector: Partial<ConnectorModel> = {\n    sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n    targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } },\n    style: { strokeWidth: 2, strokeColor: '#757575' }\n};\n\n// Initializes connector symbols with varying styles for the symbol palette\nlet connectorSymbols: ConnectorModel[] = [\n    { ...baseConnector, id: 'Link1', type: 'Orthogonal' },\n    { ...baseConnector, id: 'Link2', type: 'Orthogonal', style: { ...baseConnector.style, strokeDashArray: '4 4' } },\n    { ...baseConnector, id: 'Link3', type: 'Straight' }\n];\n\n// Determines the port positions for a node based on its type.\nfunction getNodePorts(node: NodeModel): PointPortModel[] {\n    if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n        // Ports for ForkNode and JoinNode\n        let node2Ports: PointPortModel[] = [\n            { id: 'port1', offset: { x: 0.2, y: 1 } },\n            { id: 'port2', offset: { x: 0.8, y: 1 } },\n            { id: 'port3', offset: { x: 0.2, y: 0 } },\n            { id: 'port4', offset: { x: 0.8, y: 0 } },\n        ];\n        return node2Ports;\n    } else {\n        // Default ports for other nodes\n        let ports: PointPortModel[] = [\n            { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n            { id: 'portRight', offset: { x: 1, y: 0.5 } },\n            { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n            { id: 'portTop', offset: { x: 0.5, y: 0 } },\n        ];\n        return ports;\n    }\n}\n\n// Sets the default values for the symbols in the symbol palette\nfunction setPaletteNodeDefaults(symbol: NodeModel): NodeModel {\n    if (symbol.id === 'JoinNode') {\n        symbol.width = 20; symbol.height = 50;\n    } else if (symbol.id === 'ForkNode') {\n        symbol.width = 50; symbol.height = 20;\n    } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n        symbol.width = 50; symbol.height = 40;\n    } else {\n        symbol.width = 50; symbol.height = 50;\n    }\n    if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n        symbol.style.fill = '#757575';\n    }\n    symbol.style.strokeColor = '#757575';\n    return symbol;\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let bounds: ClientRect = document.getElementById('diagram-space').getBoundingClientRect();\n    let centerX: number = bounds.width / 2;\n    let middle: number = centerX - 50;\n    let left: number = middle - 120;\n    let right: number = middle + 120;\n\n    // Creates a UML activity node with specified properties\n    const createNode = (\n        id: string,\n        offsetX: number,\n        offsetY: number,\n        shapeType: UmlActivityShapes,\n        width: number = 40,\n        height: number = 40,\n        content: string = ''\n    ): NodeModel => ({\n        id,\n        width,\n        height,\n        offsetX,\n        offsetY,\n        shape: { type: \"UmlActivity\", shape: shapeType },\n        annotations: content ? [{ content }] : []\n    });\n\n    // Initializes nodes representing the flow of a customer service call process\n    let nodes: NodeModel[] = [\n        createNode(\"Start\", 300, 20, \"InitialNode\"),\n        createNode(\"ReceiveCall\", 300, 100, \"Action\", 105, 40, \"Receive Customer Call\"),\n        createNode(\"ForkNode\", 300, 170, \"ForkNode\", 70, 10),\n        createNode(\"Determine\", 190, 250, \"Action\", 105, 40, \"Determine Type of Call\"),\n        createNode(\"Log\", 410, 250, \"Action\", 105, 40, \"Customer Logging a Call\"),\n        createNode(\"Decision\", 190, 350, \"Decision\", 50, 50),\n        createNode(\"transfer_sales\", 100, 450, \"Action\", 105, 40, \"Transfer the Call to Sales\"),\n        createNode(\"transfer_desk\", 280, 450, \"Action\", 105, 40, \"Transfer the Call to Help Desk\"),\n        createNode(\"MergeNode\", 190, 540, \"MergeNode\", 50, 50),\n        createNode(\"JoinNode\", 300, 630, \"JoinNode\", 70, 10),\n        createNode(\"CloseCall\", 300, 710, \"Action\", 105, 40, \"Close Call\"),\n        createNode(\"FinalNode\", 300, 800, \"FinalNode\")\n    ];\n\n    // Creates a UML activity diagram connector with specified properties\n    const createConnector = (\n        id: string,\n        sourceID: string,\n        targetID: string,\n        sourcePortID: string = \"\",\n        targetPortID: string = \"\",\n        additionalProps: any = {}\n    ): ConnectorModel => ({\n        id,\n        sourceID,\n        targetID,\n        sourcePortID,\n        targetPortID,\n        ...additionalProps\n    });\n\n    // Defines common segments for connectors\n    const commonSegments = {\n        orthogonalShort: [{ type: \"Orthogonal\", length: 20, direction: \"Bottom\" }],\n        orthogonalLongLeft: [{ type: \"Orthogonal\", length: 50, direction: \"Left\" }],\n        orthogonalLongRight: [{ type: \"Orthogonal\", length: 50, direction: \"Right\" }],\n        orthogonalBottom: [{ type: \"Orthogonal\", length: 50, direction: \"Bottom\" }]\n    };\n\n    // Initializes connectors for transitions between activities\n    let connectors: ConnectorModel[] = [\n        createConnector(\"connector1\", \"Start\", \"ReceiveCall\"),\n        createConnector(\"connector2\", \"ReceiveCall\", \"ForkNode\"),\n        createConnector(\"connector3\", \"ForkNode\", \"Determine\", \"port1\", \"portTop\", {\n            segments: [...commonSegments.orthogonalShort, ...commonSegments.orthogonalLongLeft]\n        }),\n        createConnector(\"connector4\", \"ForkNode\", \"Log\", \"port2\", \"portTop\", {\n            segments: [...commonSegments.orthogonalShort, ...commonSegments.orthogonalLongRight]\n        }),\n        createConnector(\"connector5\", \"Determine\", \"Decision\"),\n        createConnector(\"connector6\", \"Decision\", \"transfer_sales\", \"portLeft\", \"portTop\", {\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                id: \"connector6Label\", content: \"type=New Customer\", offset: 0.715,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n        }),\n        createConnector(\"connector7\", \"Decision\", \"transfer_desk\", \"portRight\", \"portTop\", {\n            shape: { type: \"UmlActivity\", flow: \"Association\" },\n            annotations: [{\n                id: \"connector7Label\", content: \"type=Existing Customer\", offset: 0.75,\n                style: { fill: \"white\", color: \"black\", textWrapping: 'NoWrap' }\n            }]\n        }),\n        createConnector(\"connector8\", \"transfer_sales\", \"MergeNode\", \"portBottom\", \"portLeft\", {\n            segments: commonSegments.orthogonalBottom\n        }),\n        createConnector(\"connector9\", \"transfer_desk\", \"MergeNode\", \"portBottom\", \"portRight\", {\n            segments: commonSegments.orthogonalBottom\n        }),\n        createConnector(\"connector10\", \"MergeNode\", \"JoinNode\", \"portBottom\", \"port3\"),\n        createConnector(\"connector11\", \"Log\", \"JoinNode\", \"portBottom\", \"port4\", {\n            segments: [\n                { type: \"Orthogonal\", length: 265, direction: \"Bottom\" },\n                ...commonSegments.orthogonalLongLeft\n            ]\n        }),\n        createConnector(\"connector12\", \"JoinNode\", \"CloseCall\"),\n        createConnector(\"connector13\", \"CloseCall\", \"FinalNode\")\n    ];\n\n    // Initializes diagram control\n    diagram = new Diagram({\n        // sets the height and width of the diagram\n        width: '100%', height: '100%',\n        // sets the nodes and connectors of the diagram\n        nodes: nodes, connectors: connectors,\n        // sets snap settings to the diagram\n        snapSettings: { constraints: SnapConstraints.None },\n        //Sets the default values of a node\n        getNodeDefaults: (node: NodeModel): NodeModel => {\n            node.ports = getNodePorts(node);\n            if (node.ports) {\n                for (let i: number = 0; i < node.ports.length; i++) {\n                    node.ports[i].visibility = PortVisibility.Hidden;\n                }\n            }\n            if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n                node.style.fill = '#444';\n            }\n            node.style.strokeColor = '#444';\n            return node;\n        },\n        //Sets the default values of a Connector.\n        getConnectorDefaults: (connector: ConnectorModel): void => {\n            if (connector.id.indexOf('connector') !== -1) {\n                connector.type = 'Orthogonal'; connector.cornerRadius = 10;\n                connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n            }\n        },\n\n        // Function to add event listeners for Symbol palette to Mobile device\n        created: (): void => {\n            addEvents();\n        }\n\n    });\n    diagram.appendTo('#diagram');\n\n    //Initializes the symbol palette\n    palette = new SymbolPalette({\n        // sets the expandable mode of the symbol palette\n        expandMode: 'Multiple',\n        // sets the height and wodth of the symbol palette\n        width: '100%', height: '505px',\n        // sets the default values for the symbols in the symbol palette\n        getNodeDefaults: setPaletteNodeDefaults,\n        // sets the height and width of the symbols\n        symbolHeight: 55, symbolWidth: 55,\n        // sets the margin for the symbol\n        symbolMargin: { left: 10, right: 10, top: 10, bottom: 10 },\n        // sets the palettes to be displayed in the symbol palette\n        palettes: [\n            { id: 'umlActivity', expanded: true, symbols: umlActivityShapes, title: 'UML Shapes' },\n            { id: 'Connector', expanded: true, symbols: connectorSymbols, title: 'Connectors' }\n        ],\n        getSymbolInfo: (symbol: NodeModel): SymbolInfo => { return { fit: true }; }\n\n    });\n    palette.appendTo('#symbolPalette');\n"}