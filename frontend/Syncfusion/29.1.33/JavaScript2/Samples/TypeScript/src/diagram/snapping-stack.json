{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n\n<div class=\"col-lg-8 control-section\">\n    <style>\n        /* Diagram Div CSS */\n        .db-diagram-container {\n        width:calc(100% - 300px);\n        height: 100%;\n        float: left;\n        }\n        /* Property panel CSS */\n        .db-prop-row {\n        margin-top: 6px;\n        }\n        .db-col-left {\n        padding-left: 10px;\n        padding-right: 3px;\n        }\n        .db-prop-text-style {\n        font-size: 13px;\n        font-weight: normal;\n        font-family: 'Calibri';\n        margin-top: 25px;\n        }\n        .radio-text-style{\n        font-size: 13px;\n        margin-top: 10px;\n        }\n        #properties_Container{\n        width: 300px;\n        float: left;\n        height: 600px;\n        margin-top: 30px;\n        }\n       \n    </style>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n<div id=\"properties_Container\">\n    <span class=\"property-panel-header\">\n        Properties\n    </span>\n    <div class=\"db-prop-row\">\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Interval</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input style=\"width: 150px;\" id=\"snappingInterval\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Angle</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input style=\"width: 150px;\" id=\"snappingAngle\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Line Color</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input id=\"snappingLineColor\" type=\"color\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <input type=\"checkbox\" style=\"margin-left: 10px;\" id=\"showGridlines\">\n        </div>\n        <div class=\"db-prop-text-style\" style=\"margin-top: 7px!important;\">\n            <input type=\"checkbox\" style=\"margin-left: 10px;\" id=\"snapToObject\">\n        </div>\n\n           <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\" style=\"font-weight: bold;\">Snapping To Lines</span>\n        </div>\n\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio1\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio2\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio3\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio4\" type=\"radio\">\n        </div>\n    </div>\n</div>\n    <div class=\"row\">\n        \n        <div class=\"col-xs-6 db-col-right\">\n            <div class=\"db-text-container\" style=\"width: 77px; margin-left: 20px;\">\n                \n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    NodeModel,\n    Node,\n    Connector,\n    Diagram,\n    ISelectionChangeEventArgs,\n    SelectorConstraints,\n    UserHandleModel,\n    UserHandleEventsArgs,\n    ConnectorConstraints,\n    SnapConstraints,\n    PortConstraints,\n    PortVisibility,\n    ConnectorEditing,\n    DiagramContextMenu,\n    Snapping,\n    UndoRedo,\n    ConnectorModel,\n    IRotationEventArgs,\n    Gridlines,\n} from '@syncfusion/ej2-diagrams';\nimport { CheckBox, RadioButton } from '@syncfusion/ej2-buttons';\nimport { ColorPicker, NumericTextBox } from '@syncfusion/ej2-inputs';\n\n// Inject necessary diagram modules for snapping and editing features\nDiagram.Inject(DiagramContextMenu, UndoRedo, Snapping, ConnectorEditing);\n\n// Declaration of global variables for diagram instance and UI components\nlet diagram: Diagram;\nlet showGridlines: CheckBox;\nlet snapToObject: CheckBox;\nlet drawingNode: any;\nlet snappingInterval: NumericTextBox\n\n// Creates a node with specified parameters and returns the NodeModel\nfunction createNode(id: string, offsetX: number, offsetY: number, content: string, width: number = 100, height: number = 100, ports: any[] = []): NodeModel {\n    return {\n        id: `node_${id}`,\n        width,\n        height,\n        offsetX,\n        offsetY,\n        ports: ports.map(port => ({\n            ...port,\n            visibility: PortVisibility.Visible,\n            style: { fill: 'black' },\n            constraints: PortConstraints.Default | PortConstraints.Draw,\n        })),\n        annotations: [{\n            content,\n            offset: { x: 0.5, y: 1.2 },\n            style: { bold: true },\n        }],\n    };\n}\n\n// Initializes the nodes to be used in the diagram\nlet nodes: NodeModel[] = [\n    createNode('1', 350, 250, 'Shape 1', 100, 100, [\n        { id: 'port1', offset: { x: 0.5, y: 0.5 } }\n    ]),\n    createNode('2', 650, 250, 'Shape 2', 100, 100, [\n        { id: 'port11', offset: { x: 0.5, y: 0.5 } },\n        { id: 'port2', offset: { x: 0, y: 0.5 }, height: 100, width: 7 }\n    ]),\n    createNode('3', 500, 400, 'Shape 3'),\n];\n\n// Initializes the connectors to be used in the diagram\nlet connectors: ConnectorModel[] = [\n    {\n        id: 'connector_1', sourceID: 'node_1', targetID: 'node_3', type: 'Orthogonal',\n    }\n];\n\n// Define context menu settings\nlet contextMenu: any = {\n    show: true,\n    showCustomMenuOnly: false,\n};\n\n// Defines custom user handles for interaction\nlet handles: UserHandleModel[] = [\n    {\n        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n];\n\n// Function to handle diagram creation\nfunction created() {\n    diagram.fitToPage({ mode: 'Width' });\n}\n\n// Function to handle selection change in the diagram\nfunction selectionChange(args: ISelectionChangeEventArgs) {\n    if (args.state === 'Changed') {\n        let selectedNodes: NodeModel[] = diagram.selectedItems.nodes;\n        let selectedConnectors: ConnectorModel[] = diagram.selectedItems.connectors;\n        let selectedItems: Array<NodeModel | ConnectorModel> = [...selectedNodes, ...selectedConnectors];\n        if (selectedItems.length > 0) {\n            if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n                diagram.selectedItems = {\n                    constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n                    userHandles: handles,\n                };\n                if (selectedNodes.length > 0) {\n                    drawingNode = selectedNodes[selectedNodes.length - 1];\n                }\n            } else {\n                diagram.selectedItems = {\n                    constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle,\n                };\n            }\n        }\n    }\n}\n\n// Sets default constraints for connectors.\nfunction getConnectorDefaults(connector: Connector) {\n    connector.constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb;\n}\n\n// Sets default styles for nodes.\nfunction getNodeDefaults(node: Node) {\n    node.style = { fill: 'orange', strokeColor: 'orange' };\n}\n\n// Handles rotation changes for diagram elements.\nfunction rotateChange(args: IRotationEventArgs) {\n    if (args.state === 'Start' || args.state === 'Progress') {\n        diagram.selectedItems = { constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle };\n    }\n    if (args.state === 'Completed') {\n        diagram.selectedItems = { constraints: SelectorConstraints.All | SelectorConstraints.UserHandle, userHandles: handles };\n    }\n}\n\n// Defines custom actions for user handles.\nfunction userHandelClick(args: UserHandleEventsArgs) {\n    switch (args.element.name) {\n        case 'Delete':\n            diagram.remove();\n            break;\n        case 'Clone':\n            diagram.paste(diagram.selectedItems.selectedObjects);\n            break;\n        case 'Draw':\n            diagram.drawingObject.shape = {};\n            (diagram.drawingObject as any).type = (diagram.drawingObject as any).type || 'Orthogonal';\n            (diagram.drawingObject as any).sourceID = drawingNode.id;\n            diagram.dataBind();\n            break;\n    }\n}\n\n// Adjusts the scale of the diagram's gridlines based on the selected snapping interval.\nfunction adjustGridlineScale() {\n    (diagram.snapSettings.horizontalGridlines as Gridlines).scaledIntervals[0] =\n    snappingInterval.value;\n    (diagram.snapSettings.verticalGridlines as Gridlines).scaledIntervals[0] =\n    snappingInterval.value;\n    diagram.dataBind();\n}\n// Handle the snap constraints by checking whether the checkbox are checked or not\nfunction checkbox(){\n    diagram.snapSettings.constraints = SnapConstraints.All;\n    if (!showGridlines.checked) {\n        diagram.snapSettings.constraints &= ~SnapConstraints.ShowLines;\n    }\n    if (!snapToObject.checked) {\n        diagram.snapSettings.constraints &= ~SnapConstraints.SnapToObject;\n    }\n}\n// Handles changes in snapping options based on user input.\nfunction handleSnapToLinesChange(args: any) {\n    checkbox();\n      switch (args.value) {\n        case 'Snap To Gridlines':\n            // Enable SnapToLines constraint and adjust based on checkbox states\n            diagram.snapSettings.constraints |=SnapConstraints.SnapToLines;\n            break;\n        case 'Snap To Horizontal Gridlines':\n            // Toggle SnapToHorizontalLines constraint\n            diagram.snapSettings.constraints ^=\n            SnapConstraints.SnapToVerticalLines;\n            break;\n        case 'Snap To Vertical Gridlines':\n            // Toggle SnapToVerticalLines constraint\n            diagram.snapSettings.constraints ^=\n            SnapConstraints.SnapToHorizontalLines;\n            break;\n        case 'None':\n            // Disable all snap to line constraints\n            diagram.snapSettings.constraints &=\n            ~(\n              SnapConstraints.SnapToHorizontalLines |\n              SnapConstraints.SnapToVerticalLines |\n              SnapConstraints.SnapToLines\n            );\n            break;\n      }\n      diagram.dataBind();\n      adjustGridlineScale();\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    // Initializtion of the diagram.\n    diagram = new Diagram({\n        width: '100%', height: '645px', nodes: nodes,\n        scrollSettings: { scrollLimit: 'Infinity' },\n        drawingObject: { type: 'Orthogonal' },\n        contextMenuSettings: contextMenu,\n        onUserHandleMouseDown: userHandelClick,\n        connectors: connectors,\n        snapSettings: { snapAngle: 5 },\n        getNodeDefaults: getNodeDefaults,\n        getConnectorDefaults: getConnectorDefaults,\n        created: created,\n        selectionChange: selectionChange,\n        rotateChange: rotateChange\n    });\n    diagram.appendTo('#diagram');\n\n    // Creating a NumericTextBox instance for adjusting snapping intervals\n    snappingInterval = new NumericTextBox({\n        min: 1,\n        step: 1,\n        width: 150,\n        value: 20,\n        format: 'n0',\n        change: function (args: any) {\n            diagram.snapSettings.horizontalGridlines.snapIntervals[0] = args.value;\n            diagram.snapSettings.verticalGridlines.snapIntervals[0] = args.value;\n            (diagram.snapSettings.horizontalGridlines as Gridlines).scaledIntervals[0] = args.value;\n            (diagram.snapSettings.horizontalGridlines as Gridlines).scaledIntervals[0] = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingInterval.appendTo('#snappingInterval');\n\n    // Creating a NumericTextBox instance for adjusting snapping angle\n    let snappingAngle: NumericTextBox = new NumericTextBox({\n        min: 1,\n        step: 1,\n        value: 5,\n        format: 'n0',\n        change: function (args: any) {\n            diagram.snapSettings.snapAngle = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingAngle.appendTo('#snappingAngle');\n\n    // Creating a ColorPicker instance for choosing snapping line color\n    let snappingLineColor: ColorPicker = new ColorPicker({\n        mode: 'Palette',\n        showButtons: false,\n        value: '#07EDE1',\n        change: function (args: any) {\n            diagram.snapSettings.snapLineColor = args.value;\n            diagram.dataBind();\n        }\n    });\n    snappingLineColor.appendTo('#snappingLineColor');\n\n    // Creating a CheckBox instance for toggling gridline visibility\n    showGridlines = new CheckBox({\n        label: 'Show Gridline', checked: true,\n        change: function () {\n            diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ SnapConstraints.ShowLines;\n            diagram.dataBind();\n            adjustGridlineScale();\n        }\n    });\n    showGridlines.appendTo('#showGridlines');\n\n    // Creating a CheckBox instance for toggling object snapping\n    snapToObject = new CheckBox({\n        label: 'Snapping To Objects', checked: true,\n        change: function () {\n            diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ SnapConstraints.SnapToObject;\n            diagram.dataBind();\n            adjustGridlineScale();\n        }\n    });\n    snapToObject.appendTo('#snapToObject');\n\n    // Creating a RadioButton instance for 'Snap To Gridlines'\n    let radioButton: RadioButton = new RadioButton({ label: 'Snap To Gridlines', name: 'snapToLines', value: 'Snap To Gridlines', checked: true, change: handleSnapToLinesChange });\n    radioButton.appendTo('#radio1');\n\n    // Creating a RadioButton instance for 'Snap To Horizontal Gridlines'\n    let radioButton1: RadioButton = new RadioButton({ label: 'Snap To Horizontal Gridlines', name: 'snapToLines', value: 'Snap To Horizontal Gridlines', change: handleSnapToLinesChange });\n    radioButton1.appendTo('#radio2');\n\n    // Creating a RadioButton instance for 'Snap To Vertical Gridlines'\n    let radioButton2: RadioButton = new RadioButton({ label: 'Snap To Vertical Gridlines', name: 'snapToLines', value: 'Snap To Vertical Gridlines', change: handleSnapToLinesChange });\n    radioButton2.appendTo('#radio3');\n\n    // Creating a RadioButton instance for 'None'\n    let radioButton3: RadioButton = new RadioButton({ label: 'None', name: 'snapToLines', value: 'None', change: handleSnapToLinesChange });\n    radioButton3.appendTo('#radio4');\n\n"}