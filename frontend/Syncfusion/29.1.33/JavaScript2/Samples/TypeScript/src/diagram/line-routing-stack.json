{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"diagram\"></div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Getting started -  Html Node\n */\n\nimport {\n    Diagram, UndoRedo, PortVisibility, SnapConstraints, ConnectorBridging, LineRouting, DiagramConstraints, NodeModel, ConnectorModel\n} from '@syncfusion/ej2-diagrams';\nDiagram.Inject(UndoRedo, LineRouting, ConnectorBridging);\n\n\n    \n\n    let nodes: NodeModel[] = [\n        {\n            id: 'start', offsetX: 115, offsetY: 110, shape: { type: 'Flow', shape: 'Terminator' },\n            ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\n            style: { fill: '#D5535D' }, annotations: [{ content: 'Start', style: { color: 'white' } }]\n        },\n        {\n            id: 'process', offsetX: 115, offsetY: 255, shape: { type: 'Flow', shape: 'Process' },\n            style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n        },\n        {\n            id: 'document', offsetX: 115, offsetY: 400, shape: { type: 'Flow', shape: 'Document' },\n            ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\n            annotations: [{ content: 'Document', style: { color: 'white' } }], style: { fill: '#5BA5F0' }\n        },\n        {\n            id: 'decision', offsetX: 390, offsetY: 110, shape: { type: 'Flow', shape: 'Decision' },\n            style: { fill: '#9A8AF7' }, annotations: [{ content: 'Decision', style: { color: 'white' } }]\n        },\n        {\n            id: 'document2', offsetX: 390, offsetY: 255, shape: { type: 'Flow', shape: 'Document' },\n            style: { fill: '#5BA5F0' }, annotations: [{ content: 'Document', style: { color: 'white' } }]\n        },\n        {\n            id: 'end', offsetX: 390, offsetY: 400, shape: { type: 'Flow', shape: 'Terminator' },\n            style: { fill: '#D5535D' }, annotations: [{ content: 'End', style: { color: 'white' } }]\n        },\n        {\n            id: 'process2', offsetX: 640, offsetY: 110, shape: { type: 'Flow', shape: 'Process' },\n            style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n        },\n        {\n            id: 'card', offsetX: 640, offsetY: 255,\n            shape: { type: 'Flow', shape: 'Card' },\n            style: { fill: '#76C3F0' },\n            annotations: [{ content: 'Card', style: { color: 'white' } }],\n            ports: [\n                { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n                { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n            ],\n        }\n    ];\n    let connectors: ConnectorModel[] = [\n        { id: 'Connector1', sourceID: 'start', targetID: 'process', },\n        { id: 'Connector2', sourceID: 'process', targetID: 'document' },\n        { id: 'Connector3', sourceID: 'document', targetID: 'end' },\n        { id: 'Connector4', sourceID: 'start', targetID: 'decision' },\n        { id: 'Connector5', sourceID: 'decision', targetID: 'process2' },\n        { id: 'Connector6', sourceID: 'process2', targetID: 'card' },\n        { id: 'Connector7', sourceID: 'process', targetID: 'document2' },\n        { id: 'Connector8', sourceID: 'document2', targetID: 'card' },\n        { id: 'Connector9', sourceID: 'start', sourcePortID: 'port1', targetID: 'card', targetPortID: 'port1' },\n        { id: 'Connector10', sourceID: 'card', sourcePortID: 'port2', targetID: 'document', targetPortID: 'port1' }\n    ];\n    // Function to set default values for nodes in the diagram\n    function getNodeDefaults(node: NodeModel): NodeModel {\n        node.height = 50; // Default height for nodes\n        if (node.id === 'decision') {\n            node.height = 70; // Special height for nodes with id 'decision'\n        }\n        node.width = 120; // Default width for nodes\n        node.style = { strokeColor: 'transparent' }; // Default style with transparent stroke color\n        return node;\n    }\n\n    // Function to set default values for connectors in the diagram\n    function getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n        connector.type = 'Orthogonal'; // Connector type set to Orthogonal\n        connector.style = { strokeColor: '#707070', strokeWidth: 1.25 }; // Connector style with specific stroke color and width\n        connector.targetDecorator = { style: { fill: '#707070', strokeColor: '#707070' } }; // Target decorator style\n        return connector;\n    }\n\n    // Initialize the diagram control\n    let diagram: Diagram = new Diagram({\n        width: '100%', // Full width of the parent container\n        height: '600px', // Height of the diagram\n        nodes: nodes, // Array of nodes for the diagram (assumed to be defined elsewhere)\n        connectors: connectors, // Array of connectors for the diagram (assumed to be defined elsewhere)\n        constraints: DiagramConstraints.Default | DiagramConstraints.Bridging | DiagramConstraints.LineRouting,\n        // Constraints including default, bridging, and line routing\n        snapSettings: { constraints: SnapConstraints.None }, // Snap settings with snapping disabled\n        getNodeDefaults: getNodeDefaults, // Callback function to customize node defaults\n        getConnectorDefaults: getConnectorDefaults, // Callback function to customize connector defaults\n        created: onCreated // Callback function called when diagram is created\n    });\n\n    // Append the diagram to the element with id 'diagram'\n    diagram.appendTo('#diagram');\n\n    // Function called when diagram is created\n    function onCreated(): void {\n        diagram.fitToPage(); // Fit the diagram to the page\n    }\n\n\n"}