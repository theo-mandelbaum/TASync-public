{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <style>\n        /* These are proprty panel CSS */\n        #historyPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #historyControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n\n        #historyPropertySection .heading {\n            color: #4e4949;\n            font-size: 15px;\n            height: 50px;\n            width: 100%;\n            border-bottom: 1px solid #d9dedd;\n            padding: 10px;\n        }\n    </style>\n\n    <div id=\"historyControlSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"historyPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-right: 0px\">\n    <div class=\"property-panel-header\">\n        History manager settings\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\">\n            <div class=\"row\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Undo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button id=\"undo\" style=\"width:100%\">\n                                Undo\n                            </button>\n                        </div>\n                    </div>\n                    <div id=\"undoList\"></div>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Redo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button id=\"redo\" style=\"width:100%\">\n                                Redo\n                            </button>\n                        </div>\n                    </div>\n                    <div id=\"redoList\"></div>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div style=\"display: table;height: 35px; padding-left: 0px\" class=\"col-xs-6\">\n                    <div style=\"display: table-cell; vertical-align: middle\">Stack Limit</div>\n                </div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <input type=\"text\" id=\"StackLimit\" aria-label=\"stack-limit-textBox\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"col-xs-6\" style=\"padding-left: 0px\">\n                    <button title=\"startGroupAction\" id=\"startGroupAction\" style=\"width:100%;overflow: hidden;text-overflow: ellipsis\">\n                        Start Group Action\n                    </button></div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <button title=\"clearHistory\" id=\"clearHistory\" style=\"width:100%\">\n                        Clear\n                    </button>\n                </div>\n            </div>\n\n        </div>\n\n    </div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Print and Export\n */\n\nimport {\n    Diagram, NodeModel, UndoRedo, ConnectorModel, IHistoryChangeArgs, HistoryEntry, SnapConstraints,\n    FlowShapes,\n} from '@syncfusion/ej2-diagrams';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { NumericTextBox, ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { ListView } from '@syncfusion/ej2-lists';\n\nDiagram.Inject(UndoRedo);\n\nlet diagram: Diagram;\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    // Helper function to create a NodeModel with default parameters\n    function createNode(\n        id: string,\n        offsetX: number,\n        offsetY: number,\n        fill: string,\n        strokeColor: string,\n        shape: FlowShapes,\n        content: string,\n        width: number = 70,\n        height: number = 40,\n        ports: any[] = []): NodeModel {\n        return {\n            id,\n            offsetX,\n            offsetY,\n            style: { fill, strokeColor },\n            width,\n            height,\n            shape: { type: 'Flow', shape: shape },\n            annotations: [{ content }],\n            ports\n        };\n    }\n\n    // Initialize Diagram Nodes using the createNode function\n    let nodes: NodeModel[] = [\n        createNode('node1', 400, 30, '#FFB2B2', '#FFB2B2', 'Terminator', 'Start'),\n        createNode('node2', 400, 100, '#DCDCDC', '#DCDCDC', 'Process', 'Design', undefined, undefined, [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]),\n        createNode('node3', 400, 180, '#DCDCDC', '#DCDCDC', 'Process', 'Coding', undefined, undefined, [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]),\n        createNode('node4', 400, 260, '#DCDCDC', '#DCDCDC', 'Process', 'Testing'),\n        createNode('node5', 400, 340, '#A2D8B0', '#A2D8B0', 'Decision', 'Errors?', 80, 60),\n        createNode('node6', 400, 430, '#FFB2B2', '#FFB2B2', 'Terminator', 'End'),\n        createNode('node7', 220, 180, '#A2D8B0', '#A2D8B0', 'Decision', 'Design Error?', 100, 60, [\n            { id: 'porterror', offset: { x: 0.5, y: 0 } },\n            { id: 'portcoding', offset: { x: 1, y: 0.5 } },\n            { id: 'portdesign', offset: { x: 0.5, y: 1 } }\n        ])\n    ];\n\n    // Helper function to create a ConnectorModel with default parameters\n    function createConnector(\n        id: string,\n        sourceID: string,\n        targetID: string,\n        annotations: any[],\n        segments: any[] = [],\n        sourcePortID: string = '',\n        targetPortID: string = ''): ConnectorModel {\n        return {\n            id,\n            sourceID,\n            targetID,\n            annotations,\n            type: 'Orthogonal',\n            segments,\n            sourcePortID,\n            targetPortID\n        };\n    }\n\n    // Common labels for connectors\n    let noLabel = [{ content: 'No', style: { fill: 'white' } }];\n    let yesLabel = [{ content: 'Yes', style: { fill: 'white' } }];\n\n    // Initialize Diagram Connectors using the createConnector function\n    let connectors: ConnectorModel[] = [\n        createConnector('connector1', 'node1', 'node2', []),\n        createConnector('connector2', 'node2', 'node3', []),\n        createConnector('connector3', 'node3', 'node4', []),\n        createConnector('connector4', 'node4', 'node5', []),\n        createConnector('connector5', 'node5', 'node6', noLabel),\n        createConnector('connector6', 'node5', 'node7', yesLabel, [{ type: 'Orthogonal', length: 150, direction: 'Left' }]),\n        createConnector('connector7', 'node7', 'node3', noLabel, [{ type: 'Orthogonal', length: 10, direction: 'Left' }], 'portcoding', 'codingPort'),\n        createConnector('connector8', 'node7', 'node2', yesLabel, [], 'porterror', 'designPort')\n    ];\n\n    // Initialization of the Diagram.\n    diagram = new Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        getNodeDefaults: getNodeDefaults,\n        snapSettings: { constraints: SnapConstraints.None },\n        getConnectorDefaults: (obj: ConnectorModel) => {\n            obj.style.fill = '#707070';\n            obj.targetDecorator.style.fill = '#707070';\n            obj.targetDecorator.style.strokeColor = '#707070';\n        }\n    });\n\n    diagram.appendTo('#diagram');\n    diagram.historyChange = (arg: IHistoryChangeArgs) => {\n        updateHistoryLists();\n    };\n\n    // Method called after rendering completes to fit diagram to page and setup event listeners\n    diagram.fitToPage({ mode: 'Height' });\n\n    // Initialize NumericTextBox for setting stack limit\n    const stackLimit = new NumericTextBox({\n        value: 0,\n        min: 0,\n        max: 50,\n        width: '100%',\n        format: '##.##',\n        step: 1,\n        change: (args: NumericChangeEventArgs) => diagram.setStackLimit(args.value)\n    });\n    stackLimit.appendTo('#StackLimit');\n\n    // ListView for displaying redo history\n    let listviewInstance: ListView = new ListView({\n        height: '180px',\n    });\n    listviewInstance.appendTo('#redoList');\n\n    // ListView for displaying undo history\n    let listview: ListView = new ListView({\n        height: '180px',\n    });\n    listview.appendTo('#undoList');\n\n    let clearHistory: Button = new Button({\n        content: 'Clear History'\n    });\n    clearHistory.appendTo('#clearHistory');\n    clearHistory.element.onclick = () => {\n        diagram.clearHistory();\n        updateHistoryLists();\n    };\n\n    // Button for starting group action\n    let startGroupAction: Button = new Button({\n        isToggle: true,\n    });\n    startGroupAction.appendTo('#startGroupAction');\n\n    // Button for undoing action\n    let undoButton: Button = new Button({\n        disabled: true\n    });\n    undoButton.appendTo('#undo');\n    undoButton.element.onclick = (): void => {\n        diagram.undo();\n    };\n\n    // Button for redoing action\n    let redoButton: Button = new Button({\n        disabled: true\n    });\n    redoButton.appendTo('#redo');\n    redoButton.element.onclick = (): void => {\n        diagram.redo();\n    };\n\n    //Toggle button click event handler\n    startGroupAction.element.onclick = (): void => {\n        if (startGroupAction.element.classList.contains('e-active')) {\n            startGroupAction.content = 'End Group Action';\n            diagram.startGroupAction();\n        } else {\n            diagram.endGroupAction();\n            startGroupAction.content = 'Start Group Action';\n        }\n    };\n\n    // Function to customize default node appearance\n    function getNodeDefaults(obj: NodeModel): NodeModel {\n        obj.annotations[0].style.color = '#111111';\n        return obj;\n    }\n\n    // Function to update undo and redo lists\n    function updateHistoryLists(): void {\n        const { undoStack, redoStack, stackLimit } = diagram.historyManager;\n\n        const formatStack = (stack: HistoryEntry[]) => stack.map(entry => ({ text: entry.type, value: entry.type }));\n\n        const undo = formatStack(undoStack);\n        const redo = formatStack(redoStack);\n\n        // Enabling/disabling undo and redo buttons based on stack length\n        undoButton.disabled = undo.length === 0;\n        redoButton.disabled = redo.length === 0;\n\n        // Common function to update dropdown list\n        const updateDropDownList = (id: string, dataSource: {}[]) => {\n            const list = (document.getElementById(id) as any)?.ej2_instances[0];\n            if (list) {\n                list.dataSource = dataSource;\n                list.fields = { text: 'text', value: 'text' };\n                list.index = 0;\n                list.dataBind();\n            }\n        };\n\n        // Updating undo list\n        updateDropDownList('undoList', undo);\n\n        // Updating redo list\n        updateDropDownList('redoList', redo);\n    }\n"}