{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<style>\n    /* Container for diagram and property panel */\n    .control-section {\n        width: 75%;\n        float: left; /* Keep the diagram section on the left */\n    }\n    .property-panel-header {\n        font-size: larger;\n    }\n    /* Diagram content style */\n    .content-wrapper {\n        width: 100%;\n        background: white;\n    }\n\n    /* Property panel style */\n    .property-section {\n        width: 24%; /* Adjusted to fill the remaining space */\n        float: right; /* Ensure the property panel is on the right */\n        padding: 10px;\n    }\n\n    /* Align labels and inputs within the property panel */\n    .row {\n        margin-left: 0;\n        margin-right: 0;\n        padding-top: 8px;\n    }\n\n    .property-panel-content .row {\n        display: flex;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .property-panel-content label {\n        flex: 1;\n        font-weight: normal;\n    }\n\n    .property-panel-content input {\n        flex: 2;\n        padding: 5px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n    }\n    .flow-diagram-container{\n        border: 1px solid #D5D5D5;\n    }\n</style>\n\n<div>\n\n<div class=\"control-section\">\n<div class=\"content-wrapper\" style=\"width:100%;background: white\">\n    <div id=\"diagram\" class=\"flow-diagram-container\"></div>\n</div>\n    \n    \n</div>\n<div class=\"property-section\">\n    <div class=\"property-panel-header\">\n       Properties\n    </div>\n    <div class=\"row property-panel-content\">\n        <div class=\"row\">\n            <label>Orientation</label>\n            <input type=\"text\" id=\"orientation\">\n        </div>\n        <div class=\"row\">\n            <label>Yes branch direction</label>\n            <input type=\"text\" id=\"yesBranchDirection\">\n        </div>\n        <div class=\"row\">\n            <label>No branch direction</label>\n            <input type=\"text\" id=\"noBranchDirection\">\n        </div>\n        <div class=\"row\">\n            <label>Horizontal spacing</label>\n            <input type=\"text\" id=\"horizontalSpacing\">\n        </div>\n        <div class=\"row\">\n            <label>Vertical spacing</label>\n            <input type=\"text\" id=\"verticalSpacing\">\n        </div>\n    </div>\n</div>\n</div>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    Diagram,\n    NodeModel,\n    ConnectorModel,\n    DiagramTools,DataBinding, FlowchartLayout, FlowShapeModel\n} from '@syncfusion/ej2-diagrams';\nimport { ChangeEventArgs, DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\nDiagram.Inject(FlowchartLayout, DataBinding);\n\nlet diagram: Diagram;\n\n//Initializes the data source for the layout\nconst flowchartData = [\n    { id: \"A\", name: \"Start\", shape: \"Terminator\", color: \"#90EE90\", parentId: null as any, stroke: \"#333\", strokeWidth: 1 },\n    { id: \"B\", name: \"Open the browser and go to Amazon site\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"A\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"C\", name: \"Already a customer?\", shape: \"Decision\", color: \"#2F95D8\", parentId: [\"B\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"D\", name: \"Create an account\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"C\"], label: [\"No\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"E\", name: \"Enter login information\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"C\"], label: [\"Yes\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"F\", name: \"Search for the book in the search bar\", shape: \"Predefined Process\", color: \"#1759B7\", parentId: [\"E\", \"D\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"G\", name: \"Select the preferred book\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"F\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"H\", name: \"Is the book new or used?\", shape: \"Rectangle\", color: \"#2F95D8\", parentId: [\"G\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"I\", name: \"Select the new book\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"H\"], label: [\"Yes\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"J\", name: \"Select the used book\", shape: \"Rectangle\", color: \"#70AF16\", parentId: [\"H\"], label: [\"No\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"K\", name: \"Add to Cart & Proceed to Checkout\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"I\", \"J\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"L\", name: \"Enter shipping and payment details\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"K\", \"M\"], arrowType: \"single-line-arrow\", label: [\"\", \"\"], stroke: \"#333\", strokeWidth: 1 },\n    { id: \"M\", name: \"Is the information correct?\", shape: \"Decision\", color: \"#2F95D8\", parentId: [\"L\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"N\", name: \"Review and place the order\", shape: \"Rectangle\", color: \"#1759B7\", parentId: [\"M\"], label: [\"True\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 },\n    { id: \"O\", name: \"End\", shape: \"Terminator\", color: \"#8E44CC\", parentId: [\"N\"], arrowType: \"single-line-arrow\", stroke: \"#333\", strokeWidth: 1 }\n];\n// Function to define default properties for nodes\nfunction nodeDefaults(node: NodeModel) {\n    node.width = 150;\n    node.height = 50;\n    if ((node.shape as FlowShapeModel).shape === 'Decision') {\n        node.width = 120;\n        node.height = 100;\n    }\n    return node;\n}\n// Function to define default properties for connectors\nfunction connectorDefaults(connector: ConnectorModel) {\n    // Set default type for connectors\n    connector.type = 'Orthogonal';\n    if(connector.annotations && connector.annotations.length > 0) {\n        connector.annotations[0].style.fill = 'white';\n        connector.annotations[0].style.color = 'black';\n    }\n    return connector;\n}\n// tslint:disable-next-line:max-func-body-length\n\n    \n//Initializes the diagram\ndiagram = new Diagram({\n    width: '100%',\n    height: '750px',\n    //Disables all interactions except zoom/pan\n    tool: DiagramTools.ZoomPan,\n    scrollSettings: { scrollLimit: 'Infinity' },\n    layout: {\n        type: 'Flowchart',\n        orientation: 'TopToBottom',\n        flowchartLayoutSettings: {\n            yesBranchDirection: 'LeftInFlow',\n            noBranchDirection: 'RightInFlow',\n            yesBranchValues: ['Yes', 'True'],\n            noBranchValues: ['No', 'False']\n        },\n        verticalSpacing: 50,\n        horizontalSpacing: 50\n    },\n    dataSourceSettings: {\n        id: 'id',\n        parentId: 'parentId',\n        dataSource: new DataManager(flowchartData)\n    },\n    // Settings to display rulers in the diagram\n    rulerSettings: { showRulers: true },\n    //Defines the default node and connector properties\n    getNodeDefaults: nodeDefaults,\n    getConnectorDefaults: connectorDefaults,\n});\ndiagram.appendTo('#diagram');\n\n// Property panel functionalities\n\n// Orientation\nlet orientation: DropDownList = new DropDownList({\n    index: 0,\n    width: '60%',\n    dataSource:[{text: 'Top to bottom', value: 'TopToBottom'},{text:'Left to right', value: 'LeftToRight'}],\n    change: (args:ChangeEventArgs) => {\n        let value: string = args.value as string;\n        diagram.layout.orientation = value === 'Top to bottom' ? 'TopToBottom' : 'LeftToRight';\n        diagram.dataBind();\n    }\n});\norientation.appendTo('#orientation');\n\n// Vertical spacing\nlet verticalSpacing: NumericTextBox = new NumericTextBox({\n    value: 50,\n    width: '60%',\n    min:30,max:120,\n    format:'###.##',\n    change: (args:ChangeEventArgs) => {\n        let value: number = args.value as number;\n        diagram.layout.verticalSpacing = value;\n        diagram.dataBind();\n    }\n});\nverticalSpacing.appendTo('#verticalSpacing');\n\n// Horizontal spacing\nlet horizontalSpacing: NumericTextBox = new NumericTextBox({\n    value: 50,\n    width: '60%',\n    format:'###.##',\n    min:20,max:120,\n    change: (args:ChangeEventArgs) => {\n        let value: number = args.value as number;\n        diagram.layout.horizontalSpacing = value;\n        diagram.dataBind();\n    }\n});\nhorizontalSpacing.appendTo('#horizontalSpacing');\n\n// Yes branch direction\nlet yesBranchDirection: DropDownList = new DropDownList({\n    index: 0,\n    width: '60%',\n    dataSource:[{text: 'Left in flow', value: 'LeftInFlow'},{text:'Right in flow', value: 'RightInFlow'},{text:'Same as flow', value: 'SameAsFlow'}],\n    change: (args:ChangeEventArgs) => {\n        let value: string = args.value as string;\n        diagram.layout.flowchartLayoutSettings.yesBranchDirection = value === 'Same as flow' ? 'SameAsFlow' :  value === 'Right in flow' ? 'RightInFlow' : 'LeftInFlow';\n        diagram.doLayout();\n    }\n});\nyesBranchDirection.appendTo('#yesBranchDirection');\n\n// No branch direction\nlet noBranchDirection: DropDownList = new DropDownList({\n    index: 1,\n    width: '60%',\n     dataSource:[{text: 'Left in flow', value: 'LeftInFlow'},{text:'Right in flow', value: 'RightInFlow'},{text:'Same as flow', value: 'SameAsFlow'}],\n    change: (args:ChangeEventArgs) => {\n        let value: string = args.value as string;\n        diagram.layout.flowchartLayoutSettings.noBranchDirection = value === 'Same as flow' ? 'SameAsFlow' :  value === 'Right in flow' ? 'RightInFlow' : 'LeftInFlow';\n        diagram.doLayout();\n    }\n});\nnoBranchDirection.appendTo('#noBranchDirection');\n\n\n\n"}