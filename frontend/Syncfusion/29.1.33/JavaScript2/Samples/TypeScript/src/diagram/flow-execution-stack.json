{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <style>\n        /* Proprty panel CSS */\n        #flowExecitionPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            width: 300px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            padding-left: 0px;\n            padding-right: 0px;\n        }\n\n        #flowExecitionControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n\n    <div id=\"flowExecitionControlSection\" class=\"content-wrapper\" style=\"width: 100%;\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div id=\"flowExecitionPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Show flow execution\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\" style=\"width:260px;\">\n            <div class=\"row\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"UnhighlightAll\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksOutOf\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"LinksConnected\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesInto\">\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesOutOf\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesConnected\">\n\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <input type=\"radio\" id=\"NodesReachable\">\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2/diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Print and Export\n */\n\nimport { Diagram, NodeModel, ConnectorModel, ShapeAnnotationModel, Segments, Node, SnapConstraints } from '@syncfusion/ej2-diagrams';\nimport {\n    Direction,\n    PathAnnotationModel,\n    OrthogonalSegmentModel,\n    PointPortModel,\n    ISelectionChangeEventArgs\n} from '@syncfusion/ej2-diagrams';\nimport { RadioButton, ChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { FlowShapes } from '@syncfusion/ej2/diagrams';\n\nenableRipple(true);\n\nlet diagram: Diagram;\n\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    //Initialize the connectors object with basic properties.\n    function CreateConnector(\n        name: string, source: string, target: string, content: string, type?: Segments,\n        direction?: Direction, targePort?: string, length?: number): ConnectorModel {\n        let connector: ConnectorModel = {};\n        connector.id = name;\n        connector.sourceID = source;\n        connector.targetID = target;\n        if (targePort) {\n            connector.targetPortID = targePort;\n        }\n        connector.style = { strokeWidth: 2,strokeColor: '#8D8D8D' };\n        let annotation: PathAnnotationModel = {};\n        connector.annotations = [annotation];\n        connector.targetDecorator = { style: { strokeColor: '#8D8D8D', fill: '#8D8D8D' } };\n       \n        if (type) {\n            connector.type = type;\n            let segment: OrthogonalSegmentModel = { type: type, direction: direction, length: length };\n            connector.segments = [segment];\n        }\n        return connector;\n    }\n\n    //Initialize the node object with basic properties.\n    function CreateNodes(\n        name: string, offsetX: number, offsetY: number, shape: FlowShapes, content: string,\n        width: number, height: number, ports?: PointPortModel[]): NodeModel {\n        let node: NodeModel = {};\n        node.id = name;\n        node.offsetX = offsetX;\n        node.width = 150;\n        node.height = 50;\n        node.offsetY = offsetY;\n        node.shape = { type: 'Flow', shape: shape };\n        node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\n        let annotations: ShapeAnnotationModel = {};\n        node.annotations = [annotations];\n        annotations.content = content;\n        if (ports) {\n            node.ports = ports;\n        }\n        return node;\n    }\n\n    let port1: PointPortModel = { id: 'port1', offset: { x: 0.5, y: 1 } };\n    let port: PointPortModel = { id: 'port', offset: { x: 1, y: 0.5 } };\n    let selectedButton: string = 'LinksConnected';\n\n    // Initialize Diagram Nodes\n    let nodes: NodeModel[] = [];\n    nodes.push(CreateNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35));\n    nodes.push(CreateNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [port]));\n    nodes.push(CreateNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [port1]));\n    nodes.push(CreateNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25));\n    nodes.push(CreateNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [port]));\n    nodes.push(CreateNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25));\n    nodes.push(CreateNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25));\n    nodes.push(CreateNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [port]));\n    nodes.push(CreateNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35));\n\n    // Initialize diagram connectors\n    let connectors: ConnectorModel[] = [];\n    connectors.push(CreateConnector('connector1', 'node1', 'node2', ''));\n    connectors.push(CreateConnector('connector2', 'node2', 'node3', ''));\n    connectors.push(CreateConnector('connector3', 'node3', 'node4', 'Yes'));\n    connectors.push(CreateConnector('connector4', 'node3', 'node5', 'No'));\n    connectors.push(CreateConnector('connector5', 'node5', 'node6', ''));\n    connectors.push(CreateConnector('connector6', 'node6', 'node7', ''));\n    connectors.push(CreateConnector('connector7', 'node8', 'node6', ''));\n    connectors.push(CreateConnector('connector8', 'node7', 'node9', ''));\n    connectors.push(CreateConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220));\n\n    //initialization of the Diagram.\n    diagram = new Diagram({\n        width: '100%', height: '600px', nodes: nodes, connectors: connectors,\n        snapSettings: { constraints: SnapConstraints.None }\n    });\n    diagram.appendTo('#diagram');\n\n    let highLightedObjects: string[] = [];\n    let radioButton: RadioButton = new RadioButton({\n        label: 'None', name: 'radio', value: 'UnhighlightAll', change: buttonChange,\n    });\n    radioButton.appendTo('#UnhighlightAll');\n\n    radioButton = new RadioButton({ label: 'Incoming connections', change: buttonChange, name: 'radio', value: 'LinksInto' });\n    radioButton.appendTo('#LinksInto');\n\n    radioButton = new RadioButton({ label: 'Outgoing connections', change: buttonChange, name: 'radio', value: 'LinksOutOf' });\n    radioButton.appendTo('#LinksOutOf');\n\n    radioButton = new RadioButton({\n        label: 'Incoming and outgoing connections', change: buttonChange, name: 'radio',\n        value: 'LinksConnected', checked: true\n    });\n    radioButton.appendTo('#LinksConnected');\n\n    radioButton = new RadioButton({ label: 'Incoming nodes', change: buttonChange, name: 'radio', value: 'NodesInto' });\n    radioButton.appendTo('#NodesInto');\n\n    radioButton = new RadioButton({ label: 'Outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesOutOf' });\n    radioButton.appendTo('#NodesOutOf');\n\n    radioButton = new RadioButton({ label: 'Incoming and outgoing nodes', change: buttonChange, name: 'radio', value: 'NodesConnected' });\n    radioButton.appendTo('#NodesConnected');\n\n    radioButton = new RadioButton({ label: 'Flow of Execution', change: buttonChange, name: 'radio', value: 'NodesReachable' });\n    radioButton.appendTo('#NodesReachable');\n\n\n    function buttonChange(args: ChangeEventArgs): void {\n        applyChanges((args.event.srcElement as HTMLElement).id );\t\n        selectedButton =(args.event.srcElement as HTMLElement).id;\n    }\n\n    //Function to apply changes based on selection.\n    function applyChanges(id: string): void {\n        Unhighlight();\n        switch (id) {\n            case 'LinksInto':\n                highlightIncomingConnections();\n                break;\n            case 'LinksOutOf':\n                highlightOutgoingConnections();\n                break;\n            case 'LinksConnected':\n                highlightIncomingConnections();\n                highlightOutgoingConnections();\n                break;\n            case 'NodesInto':\n                highlightIncomingNodes();\n                break;\n            case 'NodesOutOf':\n                highlightOutgoingNodes();\n                break;\n            case 'NodesConnected':\n                highlightIncomingNodes();\n                highlightOutgoingNodes();\n                break;\n            case 'NodesReachable':\n                highlightReachableNodes();\n                break;\n        }\n    }\n\n    // Highlight connectors\n    function highlightConnectors(edges: string[]): void {\n        edges.forEach(edge => {\n            let index = diagram.connectors.indexOf(diagram.nameTable[edge]);\n            highLightedObjects.push(edge);\n            let connector = diagram.connectors[index];\n            connector.style.strokeColor = '#1413F8';\n            connector.targetDecorator.style.strokeColor = '#1413F8';\n            connector.targetDecorator.style.fill = '#1413F8';\n            diagram.dataBind();\n        });\n    };\n\n    // Function to display Incoming connectors.\n    function highlightIncomingConnections(): void {\n        if (diagram.selectedItems.nodes.length) {\n            let node: string[] = (diagram.selectedItems.nodes[0] as Node).inEdges;\n            highlightConnectors(node);\n        }\n    }\n\n    // Function to display outgoing connectors.\n    function highlightOutgoingConnections(): void {\n        if (diagram.selectedItems.nodes.length) {\n            let node: string[] = (diagram.selectedItems.nodes[0] as Node).outEdges;\n            highlightConnectors(node);\n        }\n    }\n\n    // Highlight Nodes\n    function highlightNodes(edges: string[], edgeType: 'sourceID' | 'targetID'): void {\n        edges.forEach(edge => {\n            let nodeId: string = diagram.nameTable[edge][edgeType];\n            highLightedObjects.push(nodeId);\n            let index: number = diagram.nodes.indexOf(diagram.nameTable[nodeId]);\n            diagram.nodes[index].style.strokeColor = '#1413F8';\n            diagram.dataBind();\n        });\n    };\n\n    // Function to display incoming nodes.\n    function highlightIncomingNodes(): void {\n        if (diagram.selectedItems.nodes.length) {\n            let node: string[] = (diagram.selectedItems.nodes[0] as Node).inEdges;\n            highlightNodes(node, 'sourceID');\n        }\n    }\n\n    // Function to display the outgoing nodes.\n    function highlightOutgoingNodes(): void {\n        if (diagram.selectedItems.nodes.length) {\n            let node: string[] = (diagram.selectedItems.nodes[0] as Node).outEdges;\n            highlightNodes(node, 'targetID');\n        }\n    }\n\n    //Function to display the flow of execution.\n    function highlightReachableNodes(): void {\n        if (diagram.selectedItems.nodes.length) {\n            let connectors: string[] = (diagram.selectedItems.nodes[0] as Node).outEdges;\n            let nodeList: string[] = foundNode(connectors, []);\n            highlightConnectors(nodeList);\n        }\n    }\n\n    //Function to find the connected nodes.\n    function foundNode(list: string[], nodeList: string[]): string[] {\n        for (let i: number = 0; i < list.length; i++) {\n            let connector: ConnectorModel = diagram.nameTable[list[i]];\n            if (nodeList.indexOf(connector.id) > -1) {\n                break;\n            }\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\n                nodeList.push(connector.id);\n            }\n            if (diagram.nameTable[connector.targetID].outEdges.length) {\n                if (list.indexOf(connector.targetID) === -1) {\n                    foundNode(diagram.nameTable[connector.targetID].outEdges, nodeList);\n                }\n            }\n\n        }\n        return nodeList;\n    }\n\n    //Function to unhighlight the highlighted objects.\n    function Unhighlight(): void {\n        for (let i: number = highLightedObjects.length - 1; i >= 0; i--) {\n            if (diagram.nameTable[highLightedObjects[i]] instanceof Node) {\n                let index: number = diagram.nodes.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                diagram.nodes[index].style.strokeColor = '#E8DFB6';\n                diagram.dataBind();\n            } else {\n                let index: number = diagram.connectors.indexOf(diagram.nameTable[highLightedObjects[i]]);\n                var connector=diagram.connectors[index];\n                connector.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.fill = '#8D8D8D';\n                diagram.dataBind();\n            }\n        }\n        highLightedObjects = [];\n    }\n\n    diagram.selectionChange = (arg: ISelectionChangeEventArgs) => {\n        applyChanges(selectedButton);\n    };\n    diagram.select([diagram.nodes[2]]);\n\n"}