{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n\n<style>\n     /* For toolbar width and height */\n     .db-toolbar-container {\n        width: 100% ;\n       height: 44px;\n    }\n    /* Symbol palette alignment */\n    .db-palette-parent {\n        background-color:#fafafa;\n        width: 255px!important;\n        float: left;\n        height:calc(100% - 28px);\n    }\n    /* Diagram alignment */\n    .db-diagram-container {\n        width:calc(100% - 260px);\n        height: 100%;\n        float: right;\n    }\n</style>\n<div class=\"control-section\" style=\"width: 100%\">\n        <div class=\"db-toolbar-container\">\n            <div id=\"toolbarEditor\"></div>\n        </div>\n        <div>\n            <div class=\"db-palette-parent\">\n                <div id=\"symbolpalette\"></div>\n            </div>\n            <div class=\"db-diagram-container\">\n                <div id=\"diagram\"></div>\n            </div>\n        </div>\n        \n        \n</div>    \n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Sample for Grouping and Ordering.\n */\n\n// Importing needed dependencies for diagram\nimport {\n    NodeModel, Diagram, ISelectionChangeEventArgs, SelectorConstraints, UserHandleModel, BasicShapes,\n    SymbolPalette, UndoRedo, Node\n} from '@syncfusion/ej2-diagrams';\nimport { ColorPicker, ColorPickerEventArgs, NumericTextBox, ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { ClickEventArgs, Toolbar } from '@syncfusion/ej2-navigations';\nDiagram.Inject(UndoRedo);\n\n// Holds instances of DiagramComponent, ToolbarComponent, and HTMLElements for palette icons and spaces.\nlet diagram: Diagram;\nlet toolbarEditor: Toolbar;\nlet drawingNode: any;\n\n// Creates a basic shape node for the diagram.\nconst createNode = (id: string, offsetX: number, offsetY: number, width: number, height: number, shape: BasicShapes,\n    annotations: any[] = [], cornerRadius: number = 0): NodeModel => (\n    {\n        id: id,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        width: width,\n        height: height,\n        shape: { type: \"Basic\", shape, cornerRadius: cornerRadius },\n        annotations: annotations,\n    });\n\n// Creates a group node for organizing multiple nodes.\nconst createGroupNode = (id: string, children: any[], padding: any, annotations: any[]): NodeModel => (\n    {\n        id: id,\n        children: children,\n        padding: padding,\n        annotations: annotations\n    }\n)\n\n// Initializes nodes representing key elements in a diagram.\nlet nodes: NodeModel[] = [\n    createNode('Diamond', 350, 250, 100, 100, 'Diamond', [{ content: 'Decision' }]),\n    createNode('ellipse', 150, 250, 100, 60, 'Ellipse', [{ content: 'Start/Stop' }]),\n    createNode('rectangle', 150, 400, 100, 60, 'Rectangle', [{ content: 'Process' }]),\n    createNode('node1', 150, 100, 100, 55, 'Rectangle'),\n    createNode('node2', 350, 100, 90, 55, 'Rectangle', [], 5),\n    createGroupNode('group', ['node1', 'node2'], { left: 10, right: 10, top: 10, bottom: 10 }, [{ content: 'Group 1' }])\n];\n\n// Creates basic shapes for the symbol palette.\nconst createBasicShape = (id: string, shape: BasicShapes): NodeModel => ({\n    id: id,\n    shape: { type: \"Basic\", shape },\n    style: { strokeWidth: 2 }\n});\n\n// Initializes basic shapes for use in the symbol palette.\nlet basicShapes: NodeModel[] = [\n    createBasicShape('Rectangle', 'Rectangle'),\n    createBasicShape('Ellipse', 'Ellipse'),\n    createBasicShape('Hexagon', 'Hexagon'),\n    createBasicShape('Parallelogram', 'Parallelogram'),\n    createBasicShape('Triangle', 'Triangle'),\n    createBasicShape('Plus', 'Plus'),\n    createBasicShape('Star', 'Star'),\n    createBasicShape('Pentagon', 'Pentagon'),\n    createBasicShape('Heptagon', 'Heptagon'),\n    createBasicShape('Octagon', 'Octagon'),\n    createBasicShape('Trapezoid', 'Trapezoid'),\n    createBasicShape('Decagon', 'Decagon'),\n    createBasicShape('RightTriangle', 'RightTriangle'),\n    createBasicShape('Cylinder', 'Cylinder'),\n    createBasicShape('Diamond', 'Diamond')\n];\n\n// Initializes user handles for interaction with diagram elements.\nlet handles: UserHandleModel[] = [\n    {\n        name: 'Clone',\n        pathData:\n            'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\n        tooltip: { content: 'Clone' },\n        visible: true,\n        offset: 1,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Delete',\n        pathData:\n            'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\n        tooltip: { content: 'Delete' },\n        visible: true,\n        offset: 0,\n        side: 'Bottom',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n    {\n        name: 'Draw',\n        pathData:\n            'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\n        tooltip: { content: 'Draw' },\n        visible: true,\n        offset: 0.5,\n        side: 'Right',\n        margin: { top: 0, bottom: 0, left: 0, right: 0 },\n    },\n];\n\n// Updates toolbar items based on diagram selection changes.\nfunction selectionChange(args: ISelectionChangeEventArgs) {\n    if (args.state === 'Changed') {\n        let selectedItems: any = diagram.selectedItems.nodes;\n        selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\n\n        // Define toolbar item IDs for easy management\n        const toolbarItemIds = ['Group', 'UnGroup', 'BringForward', 'BringToFront', 'SendBackward', 'SendToBack', 'FontStyle', 'FontSize', 'Bold', 'Italic', 'Underline', 'FontColor'];\n\n        // Disabling toolbar items when no items are selected\n        if (selectedItems.length === 0) {\n            updateToolbarItems(toolbarItemIds, true);\n        }\n        // Handling single item selection\n        else if (selectedItems.length === 1) {\n            enableToolbarItems();\n            disableToolbarItemsForMultiSelection(selectedItems);\n\n            // Enabling or disabling specific toolbar items based on selection type\n            const isGroup = selectedItems[0].children !== undefined && selectedItems[0].children.length > 0;\n            updateToolbarItems(['UnGroup'], !isGroup);\n        }\n        // Handling multiple items selection\n        else if (selectedItems.length > 1) {\n            enableToolbarItems();\n            updateToolbarItems(['Group'], false);\n            updateToolbarItems(['UnGroup'], true);\n            disableToolbarItemsForMultiSelection(selectedItems);\n        }\n\n        // Handling specific scenarios when nodes are selected\n        if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n            diagram.selectedItems = {\n                constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n                userHandles: handles,\n            };\n\n            // Manipulating selected nodes and their properties\n            if (diagram.selectedItems.nodes.length > 0) {\n                drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length - 1];\n            }\n        } else {\n            // Resetting selection constraints when other types are selected\n            diagram.selectedItems = {\n                constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle,\n            };\n        }\n    }\n}\n\n// Enable or disable specific toolbar items\nfunction updateToolbarItems(itemIds: string[], disabled: boolean) {\n    itemIds.forEach(itemId => {\n        const item = toolbarEditor.items.find(item => item.id === itemId);\n        if (item) {\n            item.disabled = disabled;\n        }\n    });\n}\n\n// Enables specific toolbar items.\nfunction enableToolbarItems() {\n    updateToolbarItems(['BringForward', 'BringToFront', 'SendBackward', 'SendToBack'], false);\n}\n\n// Disables toolbar items for multi-selected elements without annotations.\nfunction disableToolbarItemsForMultiSelection(selectedItems: any) {\n    const annotationRelatedItems = ['FontStyle', 'FontSize', 'Bold', 'Italic', 'Underline', 'FontColor'];\n\n    // Iterate through selected items\n    for (let i: number = 0; i < selectedItems.length; i++) {\n        // Check if the selected item has annotations\n        if (selectedItems[i].annotations[0] !== undefined) {\n            // Enable toolbar items for annotation-related functionalities\n            updateToolbarItems(annotationRelatedItems, false);\n        } else {\n            // Disable toolbar items for annotation-related functionalities\n            updateToolbarItems(annotationRelatedItems, true);\n        }\n    }\n}\n\n// Handles custom user interactions with diagram elements.\nfunction userHandleClick(args: any) {\n    switch (args.element.name) {\n        case 'Delete':\n            // Remove selected elements\n            diagram.remove();\n            break;\n        case 'Clone':\n            // Clone selected elements\n            diagram.paste(diagram.selectedItems.selectedObjects);\n            break;\n        case 'Draw':\n            // Sets drawing mode and source ID for drawing elements\n            const drawingObject = diagram.drawingObject;\n            drawingObject.shape = {};\n            (drawingObject as any).type = (drawingObject as any).type || 'Orthogonal';\n            (drawingObject as any).sourceID = drawingNode.id;\n            diagram.dataBind();\n            break;\n    }\n}\n\n// Updates annotation style attributes based on the provided value.\nfunction updateAnnotationValue(value: any, fontSize?: any, fontFamily?: any) {\n    // Iterate through selected nodes in the diagram\n    for (let i: number = 0; i < diagram.selectedItems.nodes.length; i++) {\n        let node = diagram.selectedItems.nodes[i];\n\n        // Iterate through annotations of each node\n        for (let j: number = 0; j < node.annotations.length; j++) {\n            let annotationStyle: any = node.annotations[j].style;\n\n            // Update style attributes based on the provided value\n            if (value === 'fontsize') {\n                annotationStyle.fontSize = fontSize;\n            } else if (value === 'fontfamily') {\n                annotationStyle.fontFamily = fontFamily.toString();\n            } else if (value === 'bold') {\n                annotationStyle.bold = !annotationStyle.bold;\n            } else if (value === 'italic') {\n                annotationStyle.italic = !annotationStyle.italic;\n            } else if (value === 'underline') {\n                annotationStyle.textDecoration = annotationStyle.textDecoration === 'None' ? 'Underline' : 'None';\n            }\n        }\n    }\n\n    diagram.dataBind();\n}\n\n// Executes actions based on the toolbar item clicked.\nfunction handleToolbarClick(args: any) {\n    // Switch based on the tooltip text of the item\n    switch (args.item.tooltipText) {\n        // Group selected items\n        case 'Group':\n            diagram.group();\n            updateToolbarItems(['Group'], true);\n            updateToolbarItems(['UnGroup'], false);\n            break;\n\n        // Ungroup selected items\n        case 'UnGroup':\n            diagram.unGroup();\n            break;\n\n        // Bring selected item(s) forward\n        case 'Bring Forward':\n            diagram.moveForward();\n            break;\n\n        // Bring selected item(s) to front\n        case 'Bring To Front':\n            diagram.bringToFront();\n            break;\n\n        // Send selected item(s) backward\n        case 'Send Backward':\n            diagram.sendBackward();\n            break;\n\n        // Send selected item(s) to back\n        case 'Send To Back':\n            diagram.sendToBack();\n            break;\n\n        // Toggle bold style for selected annotation(s)\n        case 'Bold':\n            updateAnnotationValue('bold', args.value, null);\n            break;\n\n        // Toggle italic style for selected annotation(s)\n        case 'Italic':\n            updateAnnotationValue('italic', args.value, null);\n            break;\n\n        // Toggle underline style for selected annotation(s)\n        case 'Underline':\n            updateAnnotationValue('underline', args.value, null);\n            break;\n    }\n    diagram.dataBind();\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    // Initializtion of the diagram.\n    diagram = new Diagram({\n        width: '100%',\n        height: 500,\n        nodes: nodes,\n        rulerSettings: { showRulers: true },\n        drawingObject: { type: 'Orthogonal' },\n        onUserHandleMouseDown: userHandleClick,\n        selectionChange: selectionChange,\n    });\n    diagram.appendTo('#diagram');\n\n    // Initialize a SymbolPalette control\n    let palette: SymbolPalette = new SymbolPalette({\n        expandMode: 'Multiple',\n        symbolMargin: { left: 5, right: 5, top: 5, bottom: 10 },\n        symbolHeight: 50,\n        symbolWidth: 50,\n\n        // Define the palettes to be displayed\n        palettes: [\n            {\n                id: 'basicShapes',\n                expanded: true,\n                symbols: basicShapes,\n                iconCss: 'e-ddb-icons e-flow',\n                title: 'Basic Shapes',\n            },\n        ],\n        width: '100%',\n        height: '100%',\n    });\n    palette.appendTo('#symbolpalette');\n\n    //FontType Collection\n    let fontTypeList: { [key: string]: Object }[] = [\n        { type: 'Arial', text: 'Arial' },\n        { type: 'Aharoni', text: 'Aharoni' },\n        { type: 'Bell MT', text: 'Bell MT' },\n        { type: 'Fantasy', text: 'Fantasy' },\n        { type: 'Times New Roman', text: 'Times New Roman' },\n        { type: 'Segoe UI', text: 'Segoe UI' },\n        { type: 'Verdana', text: 'Verdana' },\n    ];\n\n    //DropDownList used to apply for fontFamily of the Annotation\n    let fontFamily: DropDownList = new DropDownList({\n        dataSource: fontTypeList,\n        fields: { value: 'type', text: 'text' },\n        popupWidth: 150,\n        width: '100%',\n        placeholder: 'select a font type',\n        index: 0,\n        change: (args: any) => {\n            updateAnnotationValue('fontfamily', null, args.value.toString());\n        },\n    });\n    fontFamily.appendTo('#fontfamily');\n\n    //NumericTextBox used to apply for Fontsize of the Annotation\n    let fontSize: NumericTextBox = new NumericTextBox({\n        value: 12,\n        min: 1,\n        max: 30,\n        width: '110px',\n        format: '##.##',\n        step: 2,\n        change: (args: NumericChangeEventArgs) => {\n            updateAnnotationValue('fontsize', args.value);\n        },\n    });\n    fontSize.appendTo('#fontSize');\n\n    //Colorpicker used to apply for Color of the Annotation\n    let fontColor: ColorPicker = new ColorPicker({\n        mode: 'Palette',\n        value: '#000',\n        change: (arg: ColorPickerEventArgs) => {\n            diagram.selectedItems.nodes.forEach(node => {\n                node.annotations.forEach(annotation => {\n                    annotation.style.color = arg.currentValue.rgba;\n                });\n            });\n            diagram.dataBind();\n        },\n    });\n    fontColor.appendTo('#fontColor');\n\n    //create the Toolbar and adding items in ToolBar.\n    toolbarEditor = new Toolbar({\n        clicked: handleToolbarClick,\n        items: [\n            // Grouping/UnGrouping buttons\n            {\n                id: 'Group',\n                type: 'Button',\n                tooltipText: 'Group',\n                prefixIcon: 'e-icons e-group-1',\n                disabled: true\n            },\n            {\n                id: 'UnGroup',\n                type: 'Button',\n                tooltipText: 'UnGroup',\n                prefixIcon: 'e-icons e-ungroup-1',\n                disabled: true\n            },\n            { id: 'Separator1', type: 'Separator' },\n            {\n                id: 'BringForward',\n                type: 'Button',\n                tooltipText: 'Bring Forward',\n                prefixIcon: 'e-icons e-bring-forward',\n                disabled: true\n            },\n            {\n                id: 'BringToFront',\n                type: 'Button',\n                tooltipText: 'Bring To Front',\n                prefixIcon: 'e-icons e-bring-to-front',\n                disabled: true\n            },\n            {\n                id: 'SendBackward',\n                type: 'Button',\n                tooltipText: 'Send Backward',\n                prefixIcon: 'e-icons e-send-backward',\n                disabled: true\n            },\n            {\n                id: 'SendToBack',\n                type: 'Button',\n                tooltipText: 'Send To Back',\n                prefixIcon: 'e-icons e-send-to-back',\n                disabled: true\n            },\n            {\n                id: 'Separator2', type: 'Separator',\n                template: '<div style=\"margin-left:1px;\"></div>'\n            },\n            {\n                // Custom font family dropdown template\n                id: 'FontStyle',\n                type: 'Input',\n                tooltipText: 'Font Style',\n                align: 'Left',\n                template: fontFamily,\n                disabled: true\n            },\n            {\n                id: 'Separator3', type: 'Separator',\n                template: '<div style=\"margin-left:5px;\"></div>'\n            },\n            {\n                // Custom font size numeric text box template\n                id: 'FontSize',\n                type: 'Input',\n                tooltipText: 'Font Size',\n                align: 'Left',\n                template: fontSize,\n                disabled: true,\n            },\n            // Font styling buttons (Bold, Italic, Underline)\n            {\n                id: 'Bold',\n                type: 'Button',\n                tooltipText: 'Bold',\n                prefixIcon: 'e-icons e-bold',\n                disabled: true,\n                cssClass: 'tb-item-start'\n            },\n            {\n                id: 'Italic',\n                type: 'Button',\n                tooltipText: 'Italic',\n                prefixIcon: 'e-icons e-italic',\n                disabled: true,\n                cssClass: 'tb-item-middle'\n            },\n            {\n                id: 'Underline',\n                type: 'Button',\n                tooltipText: 'Underline',\n                prefixIcon: 'e-icons e-underline',\n                disabled: true,\n                cssClass: 'tb-item-end'\n            },\n            {\n                // Font Color picker\n                id: 'FontColor',\n                type: 'Input',\n                tooltipText: 'Font Color',\n                align: 'Left',\n                template: fontColor,\n                disabled: true\n            },\n        ],\n    });\n    toolbarEditor.appendTo('#toolbarEditor');\n"}