{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section diagram-shapes\" style=\"width: 100%\">\n\n        <div id=\"diagram\"></div>\n    </div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Sample for Shape gallery.\n */\n\nimport {\n    Diagram, NodeModel, BpmnDiagrams, FlowShape, TextModel, FlowShapes, NodeConstraints, SnapConstraints\n} from '@syncfusion/ej2-diagrams';\n\nexport interface GalleryInfo {\n    type: string;\n    shape: string;\n    text: string;\n}\n\nDiagram.Inject(BpmnDiagrams);\n\n// Function to create a basic shape object\nfunction getBasicShape(shapeType: string, annotations: { content: string }[]): any {\n    return {\n        shape: {\n            type: 'Basic',\n            shape: shapeType\n        },\n        annotations\n    };\n}\n\n// Define basic shape models\nlet basicShapeModel: any[] = [\n    { \n        shape: { type: 'Text', content: 'Basic Shapes' },\n        constraints: NodeConstraints.PointerEvents,\n        style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n    },\n    getBasicShape('Rectangle', [{ content: 'Rectangle' }]),\n    getBasicShape('Ellipse', [{ content: 'Ellipse' }]),\n    getBasicShape('Triangle', [{ content: 'Triangle' }]),\n    getBasicShape('Plus', [{ content: 'Plus' }]),\n    getBasicShape('Star', [{ content: 'Star' }]),\n    getBasicShape('Pentagon', [{ content: 'Pentagon' }]),\n    getBasicShape('Heptagon', [{ content: 'Heptagon' }]),\n    getBasicShape('Octagon', [{ content: 'Octagon' }]),\n    getBasicShape('Trapezoid', [{ content: 'Trapezoid' }]),\n    getBasicShape('Decagon', [{ content: 'Decagon' }]),\n    getBasicShape('RightTriangle', [{ content: 'Right Triangle' }]),\n    getBasicShape('Parallelogram', [{ content: 'Parallelogram' }])\n];\n\n\n//Function to get flowshapes.\nfunction createFlowShape(shapeType: any,content: string): NodeModel {\n    let flowshape: NodeModel = {\n        shape: { type: 'Flow', shape: shapeType },\n    annotations:[{content:content}] };\n    return flowshape;\n  }\n\n  //Initialize the flowshapes for the symbol palatte\n  let flowShapes: NodeModel[] = [\n    { shape: { type: 'Text', content: 'Flow Shapes' }, constraints: NodeConstraints.PointerEvents,\n    style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n  },\n  createFlowShape('Terminator', 'Terminator'),\n  createFlowShape('Process', 'Process'),\n  createFlowShape('Decision', 'Decision'),\n  createFlowShape('Document', 'Document'),\n  createFlowShape('PreDefinedProcess', 'Predefined Process'),\n  createFlowShape('PaperTap', 'Paper Tape'),\n  createFlowShape('DirectData', 'Direct Data'),\n  createFlowShape('SequentialData', 'Direct Data'),\n  createFlowShape('Sort', 'Sort'),\n  createFlowShape('MultiDocument', 'Multi-Document'),\n  createFlowShape('Collate', 'Collate'),\n  createFlowShape('SummingJunction', 'Summing Junction'),\n  createFlowShape('Or', 'Or'),\n  createFlowShape('InternalStorage', 'Internal Storage'),\n  createFlowShape('Extract', 'Extract'),\n  createFlowShape('ManualOperation', 'Manual Operation'),\n  createFlowShape('Merge', 'Merge'),\n  createFlowShape('OffPageReference', 'Off-Page Reference'),\n  createFlowShape('SequentialAccessStorage', 'Sequential Access Storage'),\n  createFlowShape('Data', 'Data'),\n  createFlowShape('Card', 'Card')\n  ];\n\n// Function to create BPMN shape\nfunction getBpmnShape(shapeType: string, annotations: { content: string }[], event?: { event: string, trigger: string }): any {\n  const shape: any = {\n      type: 'Bpmn',\n      shape: shapeType\n  };\n  if (event) {\n      shape.event = event;\n  }\n  return {\n      shape,\n      annotations\n  };\n}\n\n// Define BPMN shape models\nlet bpmnShapeModel: any[] = [\n  { \n      shape: { type: 'Text', content: 'BPMN Shapes' },\n      constraints: NodeConstraints.PointerEvents,\n      style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n  },\n  getBpmnShape('Event', [{ content: 'Start Event' }], { event: 'Start', trigger: 'None' }),\n  getBpmnShape('Event', [{ content: 'Intermediate Event' }], { event: 'Intermediate', trigger: 'None' }),\n  getBpmnShape('Event', [{ content: 'End Event' }], { event: 'End', trigger: 'None' }),\n  getBpmnShape('Gateway', [{ content: 'Gateway' }]),\n  {\n    shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n    annotations: [{ content: 'Task' }]\n  },\n  {\n    shape: {type: 'Bpmn', shape: 'Activity', activity: {\n            activity: 'SubProcess',\n            subProcess: {\n                type: 'Transaction', transaction: {\n                    success: { visible: false }, failure: { visible: false }, cancel: { visible: false }}\n            }}},\n    annotations: [{ content: 'Transaction' }]\n  },\n  getBpmnShape('Message', [{ content: 'Message' }]),\n  getBpmnShape('DataObject', [{ content: 'Data Object' }]),\n  getBpmnShape('DataSource', [{ content: 'Data Source' }]),\n  getBpmnShape('Group', [{ content: 'Group' }]),\n  getBpmnShape('TextAnnotation', [{ content: 'Text Annotation' }])\n];\n\n\n//create and return the Nodes collection.\nfunction getNodes(): NodeModel[] {\n    let nodes1: NodeModel[] = basicShapeModel.concat(flowShapes).concat(bpmnShapeModel);\n    let offsetx: number = 60;\n    let offsety: number = 50;\n    let count: number = 1;\n    for (let i: number = 0; i < nodes1.length; i++) {\n        let node: NodeModel = nodes1[i];\n        node.width = 40;\n        node.height = 40;\n        if (node.shape.type === 'Flow') {\n            let shapeType: FlowShapes = (node.shape as FlowShape).shape;\n            if (shapeType === 'Process' || shapeType === 'Terminator') {\n                node.height = 20;\n            } else if (shapeType === 'Decision') {\n                node.height = 35;\n            } else if (shapeType === 'Document' || shapeType === 'DirectData' ||\n                shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\n                node.height = 30;\n            }\n        }\n        node.offsetX = offsetx;\n        node.offsetY = offsety;\n        if (!(node.shape.type === 'Text')) {\n            let label = node.annotations[0];\n            label.verticalAlignment = 'Top';\n            label.offset = { y: 1 };\n            label.margin = { top: 10 };\n            offsetx += 90;\n            if (count % 10 === 0) {\n                offsety = offsety + 100;\n                offsetx = 60;\n            }\n            count++;\n        }\n        if (node.shape.type === 'Text') {\n            offsetx = 60;\n            offsety +=50;\n            count = 1;\n            node.width = 150;\n            node.height = 100;\n            node.offsetX = 90;\n            if (!((node.shape as TextModel).content === 'Basic Shapes')) {\n                node.offsetX = 90;\n                node.offsetY = offsety + 50;\n                offsety = offsety + 100;\n            }\n        }\n    }\n    return nodes1;\n}\n\n\n    \n    let objects: NodeModel[] = getNodes();\n    //Initialize diagram control\n    let diagram: Diagram = new Diagram({\n        width: '100%', height: '800px', snapSettings: { constraints: SnapConstraints.None },\n        nodes: objects,\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage({ mode: 'Height' });\n\n"}