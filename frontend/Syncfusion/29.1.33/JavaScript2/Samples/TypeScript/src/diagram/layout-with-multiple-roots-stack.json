{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"diagram\"></div>\n    \n\n\n</div>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n//Importing necessary modulesbpmn\n import {\n    Diagram,\n    NodeModel,\n    ConnectorModel,\n    DiagramTools,\n    DataBinding,\n    TextStyleModel,\n    ShapeStyleModel,\n    HierarchicalTree,\n    SnapConstraints,\n    TextModel,\n  } from '@syncfusion/ej2-diagrams';\n  import { DataManager, Query } from '@syncfusion/ej2-data';\n  \n  Diagram.Inject(DataBinding, HierarchicalTree);\n\n  export interface EmployeeInfo {\n    Label: string;\n  }\n  //Initializes the data\n  let data: Object[] = [\n    { id: 1, Label: 'Production Manager', color:'#1c5b9b' },\n    { id: 2, Label: 'Control Room', parentId: 1, color:'#18c1be' },\n    { id: 3, Label: 'Plant Operator', parentId: 1, color:'#18c1be' },\n    { id: 4, Label: 'Foreman', parentId: 2, color:'#17a573' },\n    { id: 5, Label: 'Foreman', parentId: 3, color:'#17a573'  },\n    { id: 6, Label: 'Craft Personnel', parentId: 4, color:'#73bb34' },\n    { id: 7, Label: 'Craft Personnel', parentId: 4, color:'#73bb34' },\n    { id: 8, Label: 'Craft Personnel', parentId: 5, color:'#73bb34' },\n    { id: 9, Label: 'Craft Personnel', parentId: 5, color:'#73bb34' },\n    { id: 10, Label: 'Administrative Officer' , color:'#1c5b9b'},\n    { id: 11, Label: 'Security Supervisor', parentId: 10 , color:'#18c1be'},\n    { id: 12, Label: 'HR Supervisor', parentId: 10 , color:'#18c1be'},\n    { id: 13, Label: 'Reception Supervisor', parentId: 10 , color:'#18c1be'},\n    { id: 14, Label: 'Securities', parentId: 11, color:'#17a573'  },\n    { id: 15, Label: 'HR Officer', parentId: 12, color:'#17a573'  },\n    { id: 16, Label: 'Receptionist', parentId: 13 , color:'#17a573' },\n    { id: 17, Label: 'Maintainence Manager', color:'#1c5b9b' },\n    { id: 18, Label: 'Electrical Supervisor', parentId: 17 , color:'#18c1be'},\n    { id: 19, Label: 'Mechanical Supervisor', parentId: 17 , color:'#18c1be'},\n    { id: 20, Label: 'Craft Personnel', parentId: 18 , color:'#17a573' },\n    { id: 21, Label: 'Craft Personnel', parentId: 19 , color:'#17a573' },\n  ];\n  \n  let items: DataManager = new DataManager(data as JSON[], new Query().take(7));\n\n   //Define the default node properties\n   function nodeDefaults(obj: NodeModel): NodeModel {\n    (obj.style as ShapeStyleModel).fill = (obj.data as any).color;\n    obj.backgroundColor = (obj.data as any).color;\n    (obj.style as TextStyleModel).color = 'white';\n    (obj.style as ShapeStyleModel).strokeWidth = 2;  \n    obj.width = 75;\n    obj.height = 35;\n    (obj.shape as TextModel).margin = { left: 5, right: 5, bottom: 5, top: 5 };\n    return obj;\n  }\n // Defines the default properties for connectors.\n  function connectorDefaults(\n    connector: ConnectorModel\n  ): ConnectorModel {\n    connector.type = 'Orthogonal';\n    connector.style = { strokeColor: 'CornflowerBlue' };\n    connector.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n    return connector;\n  }\n  \n  \n  // tslint:disable-next-line:max-func-body-length\n  \n    \n  //Initializes the nodes in the diagram\n  let diagram: Diagram = new Diagram({\n    width: '100%',\n    height: '499px',\n    snapSettings: { constraints: SnapConstraints.None },\n    //configures data source settings\n    dataSourceSettings: {\n      //sets the fields to bind\n      id: 'id',\n      parentId: 'parentId',\n      dataSource: items,\n     // Binds data to the nodes.\n      doBinding: (nodeModel: NodeModel, data: object, diagram: Diagram) => {\n        nodeModel.shape = { type: 'Text', content: (data as any).Label };\n      },\n    },\n   // Disables all interactions except zoom and pan.\n    tool: DiagramTools.ZoomPan,\n    //Configures automatic layout\n    layout: {\n      type: 'HierarchicalTree',\n      verticalSpacing: 30,\n      horizontalSpacing: 40,\n    },\n    // Defines the default properties for nodes and connectors.\n    getNodeDefaults: nodeDefaults,\n    getConnectorDefaults: connectorDefaults,\n  });\n  diagram.appendTo('#diagram');\n\n  \n "}