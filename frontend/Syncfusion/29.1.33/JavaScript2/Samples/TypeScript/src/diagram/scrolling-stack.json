{"script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\n\nlet isMobile: boolean;\n\nexport function addEvents(): void {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n\nexport function openPalette(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n    <style>\n        /* To disable the scrollable area in property panel */\n        .diagram-scroll .disabledbutton {\n            pointer-events: none;\n            opacity: 0.4;\n        }\n    </style>\n    <div style=\"width: 100%;\" class=\"diagram-scroll\">\n        <div class=\"sb-mobile-palette-bar\">\n            <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" style=\"width:20%;float:left\">\n            <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n        </div>\n        <div id=\"diagram-space\" style=\"width:59%;float:left\">\n            <div id=\"diagram\"></div>\n        </div>\n        <div id=\"properties\" style=\"width:20%;float:right\">\n            <div class=\"property-panel-header\">\n                Properties\n            </div>\n            <div class=\"row db-prop-row\">        \n                <div class=\"col-xs-4 db-col-right db-prop-text-style\" style=\"padding-top: 14px\">\n                    <span class=\"db-prop-text-style db-spacing-text\">Scroll Limit</span>\n                </div>\n                <div class=\"col-xs-7 db-col-left\" style=\"padding-top: 10px;padding-right: 0px;\">\n                    <div class=\"db-text-input\">\n                        <input type=\"text\" id=\"scrollLimit\">\n                    </div>\n                </div>\n            </div>\n            <div id=\"scrollableDiv\">\n                <div class=\"property-panel-header\">\n                    Scrollable Area\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12\" style=\"padding-right: 15px;\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span class=\"texstyle\" style=\"display: block;\">X</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"x\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12\" style=\"padding-right: 15px;\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span class=\"texstyle\" style=\"width: fit-content;\">Y</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"y\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span class=\"texstyle\">Width</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"width\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">    \n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span class=\"texstyle\">Height</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px\">\n                            <input type=\"text\" id=\"height\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div style=\"padding-top:5px;margin-top: 20px;\">\n                <div style=\"float:left\">Enable AutoScroll</div>\n                <div style=\"float: left;margin-left: 10px;\">\n                    <input type=\"checkbox\" id=\"checked\">\n                </div>\n            </div>\n            <div id=\"autoScrollDiv\" style=\"margin-top: 30px\">\n                <div class=\"property-panel-header\">\n                    AutoScroll border\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span>Left</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"left\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span>Top</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"top\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-left\">\n                            <div style=\"width:10%;float:left;margin-top: 5px;\">\n                                <span>Right</span>\n                            </div>\n                            <div style=\"width:70%;float:right;padding-left: 20px;\">\n                                <input type=\"text\" id=\"right\">\n                            </div>\n                    </div>\n                </div>\n                <div class=\"row db-prop-row\" style=\"padding-top: 15px;\">\n                    <div class=\"col-xs-12 db-col-right\">\n                        <div style=\"width:10%;float:left;margin-top: 5px;\">\n                            <span>Bottom</span>\n                        </div>\n                        <div style=\"width:70%;float:right;padding-left: 20px;\">\n                            <input type=\"text\" id=\"bottom\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n//Importing necessary modules\nimport {\n    NodeModel,\n    Node,\n    Diagram\n  } from '@syncfusion/ej2-diagrams';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { ConnectorModel, IDragEnterEventArgs, Rect, SymbolInfo, SymbolPalette } from '@syncfusion/ej2-diagrams';\nimport { TextBox } from '@syncfusion/ej2-inputs';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { addEvents } from './script/diagram-common';\n\n\nlet diagram: Diagram;\n//Initialize the basicShapes for the symbol palatte\nlet basicShapes: NodeModel[] = [\n    {\n        id: 'rectangle', shape: { type: 'Basic', shape: 'Rectangle' }\n    },\n    {\n        id: 'ellipse', shape: { type: 'Basic', shape: 'Ellipse' }\n    },\n    {\n        id: 'triangle', shape: { type: 'Basic', shape: 'Triangle' }\n    },\n    {\n        id: 'plus', shape: { type: 'Basic', shape: 'Plus' }\n    },\n    {\n        id: 'star', shape: { type: 'Basic', shape: 'Star' }\n    },\n    {\n        id: 'pentagon', shape: { type: 'Basic', shape: 'Pentagon' }\n    },\n    {\n        id: 'heptagon', shape: { type: 'Basic', shape: 'Heptagon' }\n    },\n    {\n        id: 'octagon', shape: { type: 'Basic', shape: 'Octagon' }\n    },\n    {\n        id: 'trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' }\n    },\n    {\n        id: 'decagon', shape: { type: 'Basic', shape: 'Decagon' }\n    },\n    {\n        id: 'rightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' }\n    },\n    {\n        id: 'parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' }\n    },\n];\n//Initialize the flowshapes for the symbol palatte\nlet flowShapes: NodeModel[] = [\n    { id: 'terminator1', shape: { type: 'Flow', shape: 'Terminator' } },\n    { id: 'process1', shape: { type: 'Flow', shape: 'Process' } },\n    { id: 'extract1', shape: { type: 'Flow', shape: 'Extract' } },\n    { id: 'manualOperation1', shape: { type: 'Flow', shape: 'ManualOperation' } },\n    { id: 'merge1', shape: { type: 'Flow', shape: 'Merge' } },\n    { id: 'offPageReference1', shape: { type: 'Flow', shape: 'OffPageReference' } },\n    { id: 'sequentialAccessStorage1', shape: { type: 'Flow', shape: 'SequentialAccessStorage' } },\n    { id: 'annotation1', shape: { type: 'Flow', shape: 'Annotation' } },\n    { id: 'annotation2', shape: { type: 'Flow', shape: 'Annotation2' } },\n    { id: 'data1', shape: { type: 'Flow', shape: 'Data' } },\n    { id: 'summingJunction1', shape: { type: 'Flow', shape: 'SummingJunction' } },\n    { id: 'or1', shape: { type: 'Flow', shape: 'Or' } },\n    { id: 'internalStorage1', shape: { type: 'Flow', shape: 'InternalStorage' } },\n    { id: 'card1', shape: { type: 'Flow', shape: 'Card' } },\n    { id: 'delay1', shape: { type: 'Flow', shape: 'Delay' } },\n    { id: 'decision1', shape: { type: 'Flow', shape: 'Decision' } },\n    { id: 'document1', shape: { type: 'Flow', shape: 'Document' } },\n    { id: 'preDefinedProcess1', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n    { id: 'paperTap1', shape: { type: 'Flow', shape: 'PaperTap' } },\n    { id: 'directData1', shape: { type: 'Flow', shape: 'DirectData' } },\n    { id: 'sequentialData1', shape: { type: 'Flow', shape: 'SequentialData' } },\n    { id: 'sort1', shape: { type: 'Flow', shape: 'Sort' } },\n    { id: 'multiDocument1', shape: { type: 'Flow', shape: 'MultiDocument' } },\n    { id: 'collate1', shape: { type: 'Flow', shape: 'Collate' } },\n];\n\n//Initialize the connectors for the symbol palatte\nlet connectorSymbols: ConnectorModel[] = [\n    {\n        id: 'orthogonal', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 }\n    },\n    {\n        id: 'straight', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'Straight', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 } \n    },\n    {\n        id: 'Orthogonal', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: 'None' }\n    },\n    {\n        id: 'bezier', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n         targetDecorator: { shape: 'None' }\n    },\n];\n //Sets the scroll limit\nlet scrollLimitDatasource:any = [\n    { text: 'Infinity', value: 'Infinity' }, { text: 'Diagram', value: 'Diagram' },\n    { text: 'Limited', value: 'Limited' }\n];\n//Sets the default values of a Connector.\n function getConnectorDefaults(connector: ConnectorModel) {\n    setConnectorStyles(connector, '#757575');\n    return connector;\n}\n    //set styles for connector\n    function setConnectorStyles(connector: ConnectorModel, color: string) {\n    connector.style.strokeWidth = 1;\n    connector.style.strokeColor = color;\n    connector.targetDecorator.style.fill = color;\n    connector.targetDecorator.style.strokeColor = color;\n    }\nlet scrollableArea:any = new Rect(0, 0, 1500, 1500);\n// tslint:disable-next-line:max-func-body-length\n\n    \n    // Initializtion of the diagram.\n    diagram = new Diagram({\n        width: '100%', height: '700px',\n        rulerSettings: { showRulers: true },\n        pageSettings: { width: 1500, height: 1500 },\n        scrollSettings: {\n            scrollLimit: 'Infinity', canAutoScroll: true, autoScrollBorder: { left: 10, right: 10, top: 10, bottom: 10 },\n            scrollableArea: scrollableArea\n        },\n        getConnectorDefaults : getConnectorDefaults,\n        //Sets the node style for DragEnter element.\n        dragEnter: function (args:IDragEnterEventArgs) {\n            let node:any = args.element;\n            if (node instanceof Node) {\n                let nodeWidth = node.width;\n                let nodeHeight = node.height;\n                let ratio = 100 / node.width;\n                node.width = 100;\n                node.height *= ratio;\n                node.offsetX += (node.width - nodeWidth) / 2;\n                node.offsetY += (node.height - nodeHeight) / 2;\n                node.style = { fill: '#357BD2', strokeColor: 'white' };\n                node.annotations = [{ style: { color: 'white', fill: 'transparent' } }];\n            }\n        },\n        //Disable the scrollable area\n        created: function (args) {\n            let scrollElement = document.getElementById('scrollableDiv');\n            scrollElement.className = \"disabledbutton\";\n        }\n    });\n    diagram.appendTo('#diagram');\n //Initializes the symbol palette\n  let palette: SymbolPalette = new SymbolPalette({\n    expandMode: 'Single',\n    getNodeDefaults: function (symbol: NodeModel): void{\n        let obj:any = symbol;\n        if (obj.id === 'terminator1' || obj.id === 'process1') {\n            obj.width = 80;\n            obj.height = 40;\n        }\n        else if (obj.id === 'decision1' || obj.id === 'document1' || obj.id === 'preDefinedProcess1' ||\n            obj.id === 'paperTap1' || obj.id === 'directData1' || obj.id === 'multiDocument1' || obj.id === 'data1') {\n            obj.width = 50;\n            obj.height = 40;\n        }\n        else {\n            obj.width = 50;\n            obj.height = 50;\n        }\n        obj.style.strokeColor = '#757575';\n    },\n    palettes: [\n        { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n        { id: 'flow', expanded: false, symbols: flowShapes, iconCss: 'e-ddb-icons e-flow', title: 'Flow Shapes' },\n        { id: 'connectors', expanded: false, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ],\n    symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n    getConnectorDefaults:getConnectorDefaults,\n    getSymbolInfo: (symbol: NodeModel): SymbolInfo => {\n        return { fit: true };\n    },\n    width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n  });\n  palette.appendTo('#symbolpalette');\n  addEvents();\n\n//Initializes a dropdown for scrollLimit\nlet scrollLimit:DropDownList = new DropDownList({\n    dataSource: scrollLimitDatasource,\n    fields: { text: 'text', value: 'value' },\n    value: 'Infinity',\n    change: function (args:any) {\n        let element = document.getElementById('scrollableDiv');\n        element.className = args.value === \"Limited\" ? \"\" : \"disabledbutton\";\n        diagram.scrollSettings.scrollLimit = args.value;\n    }\n});\nscrollLimit.appendTo('#scrollLimit');\n\nlet offsetXtextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '10',\n    change: function (args:any) {\n        diagram.scrollSettings.scrollableArea.x = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\noffsetXtextBox.appendTo('#x');\n\nlet offsetYtextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '10',\n    change: function (args:any) {\n        diagram.scrollSettings.scrollableArea.y = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\noffsetYtextBox.appendTo('#y');\n\nlet widthTextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '1500',\n    change: function (args:any) {\n        diagram.scrollSettings.scrollableArea.width = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\nwidthTextBox.appendTo('#width');\n\nlet heightTextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '1500',\n    change: function (args:any) {\n        diagram.scrollSettings.scrollableArea.height = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\nheightTextBox.appendTo('#height');\n\nlet checkBoxObj: CheckBox = new CheckBox({\n    checked: true,\n    change: function (args:any) {\n        let autoScrollElement:any = document.getElementById('autoScrollDiv');\n        if (args.checked) {\n            autoScrollElement.className = '';\n          diagram.scrollSettings.canAutoScroll = true;\n        } else {\n            autoScrollElement.className = 'disabledbutton';\n          diagram.scrollSettings.canAutoScroll = false;\n        }\n    }\n});\ncheckBoxObj.appendTo('#checked');\n\nlet leftTextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '30',\n    change: function (args:any) {\n        diagram.scrollSettings.autoScrollBorder.left = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\nleftTextBox.appendTo('#left');\n\nlet rightTextBox:TextBox  = new TextBox({\n    // sets value to the NumericTextBox\n    value: '30',\n    change: function (args:any) {\n        diagram.scrollSettings.autoScrollBorder.right = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\nrightTextBox.appendTo('#right');\n\nlet topTextBox = new TextBox({\n    // sets value to the NumericTextBox\n    value: '30',\n    change: function (args:any) {\n        diagram.scrollSettings.autoScrollBorder.top = Number(args.value);\n    }\n});\n\n// Renders initialized NumericTextBox\ntopTextBox.appendTo('#top');\n\nlet bottomTextBox:TextBox = new TextBox({\n    // sets value to the NumericTextBox\n    value: '30',\n    change: function (args:any) {\n        diagram.scrollSettings.autoScrollBorder.bottom = Number(args.value);\n    }\n});\n// Renders initialized NumericTextBox\nbottomTextBox.appendTo('#bottom');\n\n"}