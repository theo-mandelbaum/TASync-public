{"script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\n\nlet isMobile: boolean;\n\nexport function addEvents(): void {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n\nexport function openPalette(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <link href=\"https://ej2.syncfusion.com/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n    <style>\n\n        .diagram-umlclass .sb-mobile-palette {\n            width: 250px;\n            height: 559px;\n            float: left;\n        }\n    \n        .diagram-umlclass .sb-mobile-palette-bar {\n            display: none;\n        }\n    \n        .diagram-umlclass .sb-mobile-diagram {\n            width: calc(99% - 242px);\n            height: 559px;\n            float: left;\n            border: 1px solid rgba(0, 0, 0, 0.12);\n            border-left: none;\n        }\n    \n        @media (max-width: 550px) {\n            .diagram-umlclass .sb-mobile-palette {\n                z-index: 19;\n                position: absolute;\n                display: none;\n                transition: transform 300ms linear, visibility 0s linear 300ms;\n                width: 39%;\n                height: 100%;\n            }\n            .diagram-umlclass .sb-mobile-diagram {\n                width: 60%;\n                height: 100%;\n                float: left;\n                left: 0px;\n            }\n            .diagram-umlclass .sb-mobile-palette-bar {\n                display: block;\n                width: 100%;\n                background: #fafafa;\n                padding: 10px 10px;\n                border: 0.5px solid #e0e0e0;\n                min-height: 40px;\n            }\n            #palette-icon {\n                font-size: 20px;\n            }\n        }\n    \n        .diagram-umlclass .sb-mobile-palette-open {\n            position: absolute;\n            display: block;\n            right: 15px;\n        }\n    \n    </style>\n<div id=\"umlclassDiagram\" style=\"width: 100%;\" class=\"diagram-umlclass\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <div id=\"symbolpalette\" style=\"width:90%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\" style=\"float: right;\">\n      <div id=\"diagram\" class=\"diagramclass\"></div>\n    </div>\n  </div>\n</div>\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * class-diagram -  Annotation\n */\n\nimport {\n    Diagram, NodeModel, ConnectorModel, UmlClassifierShapeModel,IDragEnterEventArgs\n} from '@syncfusion/ej2-diagrams';\nimport { Connector, PaletteModel, SymbolInfo, SymbolPalette } from '@syncfusion/ej2-diagrams';\nimport { addEvents } from './script/diagram-common';\n\nlet diagram: Diagram;\n\n//Set the default values of nodes.\nfunction getNodeDefaults(node: NodeModel): NodeModel {\n    node.style = { fill: '#26A0DA', strokeColor: 'white' };\n    if (node.annotations.length > 0) {\n        for (let i: number = 0; i < node.annotations.length; i++) {\n            node.annotations[i].style.color = 'white';\n        }\n    }\n    return node;\n}\n\n//Set the default values of connectors.\nfunction getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    return connector;\n}\n\n//Create a connector.\nfunction createConnector(id: string, sourceID: string, targetID: string): ConnectorModel {\n    let connector: ConnectorModel = {};\n    connector.id = id;\n    connector.sourceID = sourceID;\n    connector.targetID = targetID;\n    return connector;\n}\n\n//Create class Diagram shapes.\nfunction createNode(id: string, offsetX: number, offsetY: number, className: string): NodeModel {\n    let node: NodeModel = {};\n    node.id = id;\n    node.offsetX = offsetX;\n    node.offsetY = offsetY;\n    node.shape = {\n        type: 'UmlClassifier',\n        classShape: {\n            name: className,\n        },\n        classifier: 'Class'\n    } as UmlClassifierShapeModel;\n    return node;\n}\n\n//create class Property\nfunction createProperty(name: string, type: string): object {\n    return { name: name, type: type };\n}\n\n//create class Methods\nfunction createMethods(name: string, type: string): object {\n    return { name: name, type: type };\n}\n\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let nodes: NodeModel[] = [\n        {\n            id: 'Patient',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Patient',\n                    attributes: [\n                        createProperty('accepted', 'Date'),\n                        createProperty('sickness', 'History'),\n                        createProperty('prescription', 'String[*]'),\n                        createProperty('allergies', 'String[*]'),\n                    ],\n                    methods: [\n                        createMethods('getHistory', 'History')\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 200,\n            offsetY: 250\n        },\n        {\n            id: 'Doctor',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Doctor',\n                    attributes: [\n                        createProperty('specialist', 'String[*]'),\n                        createProperty('locations', 'String[*]'),\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 240,\n            offsetY: 545,\n        },\n        {\n            id: 'Person',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Person',\n                    attributes: [\n                        createProperty('name', 'Name'),\n                        createProperty('title', 'String[*]'),\n                        createProperty('gender', 'Gender')\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 405,\n            offsetY: 105,\n        },\n        {\n            id: 'Hospital',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Hospital',\n                    attributes: [\n                        createProperty('name', 'Name'),\n                        createProperty('address', 'Address'),\n                        createProperty('phone', 'Phone'),\n                    ],\n                    methods: [\n                        createMethods('getDepartment', 'String'),\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 638,\n            offsetY: 100,\n        },\n        {\n            id: 'Department',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Department',\n                    methods: [\n                        createMethods('getStaffCount', 'Int'),\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 638,\n            offsetY: 280,\n        },\n        {\n            id: 'Staff',\n            shape: {\n                type: 'UmlClassifier',\n                classShape: {\n                    name: 'Staff',\n                    attributes: [\n                        createProperty('joined', 'Date'),\n                        createProperty('education', 'string[*]'),\n                        createProperty('certification', 'string[*]'),\n                        createProperty('languages', 'string[*]'),\n                    ],\n                    methods: [\n                        createMethods('isDoctor', 'bool'),\n                        createMethods('getHistory', 'bool')\n                    ]\n                },\n                classifier: 'Class'\n            } as UmlClassifierShapeModel,\n            offsetX: 635,\n            offsetY: 455,\n        },\n        createNode('OperationStaff', 410, 455, 'OperationStaff'),\n        createNode('Nurse', 410, 545, 'Nurse'),\n        createNode('Surgeon', 240, 665, 'Surgeon'),\n        createNode('AdministrativeStaff', 632, 605, 'AdministrativeStaff'),\n        createNode('FrontDeskStaff', 630, 695, 'FrontDeskStaff'),\n        createNode('TechnicalStaff', 928, 445, 'TechnicalStaff'),\n        createNode('Technician', 815, 535, 'Technician'),\n        createNode('Technologist', 1015, 535, 'Technologist'),\n        createNode('SurgicalTechnologist', 1015, 630, 'SurgicalTechnologist')\n    ];\n\n    let connectors: ConnectorModel[] = [\n        createConnector('connect1', 'Patient', 'Person'),\n        createConnector('connect2', 'Person', 'Hospital'),\n        createConnector('connect3', 'Department', 'Hospital'),\n        createConnector('connect4', 'OperationStaff', 'Patient'),\n        createConnector('connect5', 'Doctor', 'OperationStaff'),\n        createConnector('connect6', 'Nurse', 'OperationStaff'),\n        createConnector('connect7', 'Surgeon', 'Doctor'),\n        createConnector('connect8', 'FrontDeskStaff', 'AdministrativeStaff'),\n        createConnector('connect9', 'Technician', 'TechnicalStaff'),\n        createConnector('connect10', 'Technologist', 'TechnicalStaff'),\n        createConnector('connect11', 'SurgicalTechnologist', 'Technologist'),\n        createConnector('connect12', 'Staff', 'Department'),\n        createConnector('connect13', 'Staff', 'Person'),\n        createConnector('connect14', 'OperationStaff', 'Staff'),\n        createConnector('connect15', 'AdministrativeStaff', 'Staff'),\n        createConnector('connect16', 'TechnicalStaff', 'Staff')\n    ];\n    //Initializes diagram control\n    diagram = new Diagram({\n        width: '100%',\n      height: '100%',\n        nodes: nodes,\n        connectors: connectors,\n        //Sets the default values for nodes\n        getNodeDefaults: getNodeDefaults,\n        //Sets the default values of connectors\n        getConnectorDefaults: getConnectorDefaults,\n        dragEnter:function(args: IDragEnterEventArgs): void{\n            if(args.element instanceof Connector){\n              args.element.targetPoint.x += 100;\n              args.element.targetPoint.y += 20\n            }\n        },\n        created: () => {\n            addEvents();\n        }\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage();\n\n      //Initializes the palettes to be displayed in the symbol palette.\n    let palettes: PaletteModel[] = [\n        {\n            id: 'UmlActivity', expanded: true, title: 'UML Classifier Nodes', symbols: [\n            {\n                id: 'class',\n                style: {\n                    fill: '#26A0DA',\n                },\n                borderColor: 'white',\n                shape: {\n                    type: 'UmlClassifier',\n                    classShape: {\n                        attributes: [\n                            { name: 'accepted', type: 'Date', isSeparator: true },\n                            { name: 'sickness', type: 'History' },\n                            { name: 'prescription', type: 'String[*]' },\n                            { name: 'allergies', type: 'String[*]' }\n                        ],\n                        methods: [{ name: 'getHistory', style: {}, parameters: [{ name: 'Date', style: {} }], type: 'History' }],\n                        name: 'Patient'\n                    },\n                    classifier: 'Class'\n                },\n            },\n            {\n                id: 'Interface',\n                style: {\n                    fill: '#26A0DA',\n                }, borderColor: 'white',\n                shape: {\n                    type: 'UmlClassifier',\n                    interfaceShape: {\n                        name: \"Bank Account\",\n                        attributes: [{\n                                name: \"owner\",\n                                type: \"String[*]\", style: {}\n                            },\n                            {\n                                name: \"balance\",\n                                type: \"Dollars\"\n                            }],\n                        methods: [{\n                                name: \"deposit\", style: {},\n                                parameters: [{\n                                        name: \"amount\",\n                                        type: \"Dollars\",\n                                        style: {}\n                                    }],\n                            }]\n                    },\n                    classifier: 'Interface'\n                },\n            },\n            {\n                id: 'Enumeration',\n                style: {\n                    fill: '#26A0DA',\n                }, borderColor: 'white',\n                shape: {\n                    type: 'UmlClassifier',\n                    enumerationShape: {\n                        members: [\n                            {\n                                name: 'Checking Account', style: {}\n                            },\n                            {\n                                name: 'Savings Account'\n                            },\n                            {\n                                name: 'Credit Account'\n                            }\n                        ]\n                    },\n                    classifier: 'Enumeration'\n                },\n            },\n            ]\n        },\n        {\n          id: 'umlConnectorrs', expanded: true, title: 'UML Classifier Connectors', symbols: [\n            {\n              id: 'Composition',\n              sourcePoint: { x: 100, y: 200 },\n              targetPoint: { x: 200, y: 300 },\n              type: 'Straight',\n              shape: { type: 'UmlClassifier', relationship: 'Composition' }\n          },\n          {\n              id: 'BiDirectional',\n              type: 'Straight',\n              sourcePoint: { x: 300, y: 200 },\n              targetPoint: { x: 400, y: 300 },\n              shape: { type: 'UmlClassifier', relationship: 'Aggregation', associationType: 'BiDirectional' }\n          },\n          {\n              id: 'Directional',\n              type: 'Straight',\n              sourcePoint: { x: 500, y: 200 },\n              targetPoint: { x: 600, y: 300 },\n              shape: { type: 'UmlClassifier', relationship: 'Association', associationType: 'Directional' }\n          },\n          {\n              id: 'Association',\n              type: 'Straight',\n              sourcePoint: { x: 700, y: 200 },\n              targetPoint: { x: 800, y: 300 },\n              shape: { type: 'UmlClassifier', relationship: 'Association' }\n          },\n          {\n              id: 'Inheritance',\n              type: 'Straight',\n              sourcePoint: { x: 900, y: 200 },\n              targetPoint: { x: 1000, y: 300 },\n              shape: { type: 'UmlClassifier', relationship: 'Inheritance' }\n          },\n          {\n              id: 'Interfaces',\n              type: 'Straight',\n              sourcePoint: { x: 100, y: 400 },\n              targetPoint: { x: 200, y: 500 },\n              shape: { type: 'UmlClassifier', relationship: 'Interface' }\n          },\n          {\n              id: 'Dependency',\n              type: 'Straight',\n              sourcePoint: { x: 300, y: 400 },\n              targetPoint: { x: 400, y: 500 },\n              shape: { type: 'UmlClassifier', relationship: 'Dependency' }\n          },\n          {\n              id: 'Realization',\n              type: 'Straight',\n              sourcePoint: { x: 500, y: 400 },\n              targetPoint: { x: 600, y: 500 },\n              shape: { type: 'UmlClassifier', relationship: 'Realization' }\n          },\n          {\n              id: \"OneToMany\",\n              type: 'Straight',\n              sourcePoint: {\n                  x: 700,\n                  y: 400\n              },\n              targetPoint: {\n                  x: 800,\n                  y: 500\n              },\n              annotations: [{\n                      margin: {\n                          top: 10,\n                          left: 10,\n                          right: 10,\n                          bottom: 20\n                      }\n                  }\n              ],\n              shape: {\n                  type: \"UmlClassifier\",\n                  relationship: 'Dependency',\n                  multiplicity: {\n                      type: 'OneToMany',\n                      source: {\n                          optional: true,\n                          lowerBounds: '89',\n                          upperBounds: '67'\n                      },\n                      target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                  }\n              }\n          },\n          {\n              id: \"ManyToMany\",\n              sourcePoint: {\n                  x: 900,\n                  y: 400\n              },\n              targetPoint: {\n                  x: 1000,\n                  y: 500\n              },\n              annotations: [{\n                      margin: {\n                          top: 10,\n                          left: 10,\n                          right: 10,\n                          bottom: 20\n                      }\n                  }\n              ],\n              shape: {\n                  type: \"UmlClassifier\",\n                  relationship: 'Dependency',\n                  multiplicity: {\n                      type: 'ManyToMany',\n                      source: {\n                          optional: true,\n                          lowerBounds: '89',\n                          upperBounds: '67'\n                      },\n                      target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                  }\n              }\n          },\n          {\n              id: \"OneToOne\",\n              sourcePoint: { x: 100, y: 600 },\n              targetPoint: { x: 200, y: 700 },\n              annotations: [{\n                      margin: {\n                          top: 10,\n                          left: 10,\n                          right: 10,\n                          bottom: 20\n                      }\n                  }\n              ],\n              shape: {\n                  type: \"UmlClassifier\",\n                  relationship: 'Dependency',\n                  multiplicity: {\n                      type: 'OneToOne',\n                      source: {\n                          optional: true,\n                          lowerBounds: '89',\n                          upperBounds: '67'\n                      },\n                      target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                  }\n              }\n          },\n          {\n              id: \"ManyToOne\",\n              sourcePoint: { x: 300, y: 600 },\n              targetPoint: { x: 400, y: 700 },\n              annotations: [{\n                      margin: {\n                          top: 10,\n                          left: 10,\n                          right: 10,\n                          bottom: 20\n                      }\n                  }\n              ],\n              shape: {\n                  type: \"UmlClassifier\",\n                  relationship: 'Dependency',\n                  multiplicity: {\n                      type: 'ManyToOne',\n                      source: {\n                          optional: true,\n                          lowerBounds: '89',\n                          upperBounds: '67'\n                      },\n                      target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n                  }\n              }\n          },\n          {\n              id: \"OneToMany\",\n              sourcePoint: { x: 500, y: 600 },\n              targetPoint: { x: 600, y: 700 },\n              annotations: [{\n                      margin: {\n                          top: 10,\n                          left: 10,\n                          right: 10,\n                          bottom: 20\n                      }\n                  }\n              ],\n              shape: {\n                  type: \"UmlClassifier\",\n                  relationship: 'Dependency',\n                  multiplicity: {\n                      type: 'OneToMany',\n                  }\n              }\n          }\n          ]\n        }\n    ];\n    function setPaletteNodeDefaults(node:NodeModel) {\n        node.width = 100;\n        node.height = 100;\n    }\n    // Initializes symbol palette.\n    let palette: SymbolPalette = new SymbolPalette({\n        // sets the expandable mode of the symbol palette.\n        expandMode: 'Multiple',\n       // Sets the palettes displayed in the symbol palette.\n        palettes: palettes,\n        // sets the width and height of the palette.\n        width: '100%', height: '100%',\n        symbolMargin: { left: 12, right: 12, top: 12, bottom: 12 },\n        symbolHeight: 90, symbolWidth: 90,\n        getNodeDefaults :setPaletteNodeDefaults,\n        getSymbolInfo: (symbol: NodeModel): SymbolInfo => {\n            return { fit: true,description: { text: symbol.id, } ,tooltip: symbol.addInfo ? symbol.addInfo['tooltip'] : symbol.id };\n        }\n    });\n    palette.appendTo('#symbolpalette');\n\n\n"}