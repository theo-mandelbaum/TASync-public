{"script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\n\nlet isMobile: boolean;\n\nexport function addEvents(): void {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', openPalette, false);\n        }\n    }\n}\n\nexport function openPalette(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n","diagram-events-details.ts":"/**\n * Event Details\n */\nimport { ListView } from '@syncfusion/ej2-lists';\nimport { DiagramAction } from '@syncfusion/ej2-diagrams';\n\nexport function getEventDetails(args: any): void {\n    let listView: any = document.getElementById('listview-def');\n    let listViewComponent: ListView = listView.ej2_instances[0];\n    let selectedItems: any = listViewComponent.getSelectedItems();\n    if (selectedItems.data.length > 0) {\n        let elementName: boolean = getName(selectedItems, args);\n        if (elementName) {\n            eventInformation(args);\n        }\n    } \n}\n\nfunction getName(selectedItems: any, args: any): boolean {\n    for (let i: number = 0; i < selectedItems.data.length; i++) {\n        let eventName: string = selectedItems.data[i].id;\n        if (eventName === args.name) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getCause(cause: DiagramAction): string {\n    switch (cause) {\n        case DiagramAction.Render:\n            return 'Rendering';\n        case DiagramAction.PublicMethod:\n            return 'PublicMethod';\n        case DiagramAction.ToolAction:\n            return 'ToolAction';\n        case DiagramAction.UndoRedo:\n            return 'UndoRedo';\n        case DiagramAction.TextEdit:\n            return 'TextEdit';\n        case DiagramAction.Group:\n            return 'Group';\n        case DiagramAction.Clear:\n            return 'Clear';\n        case DiagramAction.PreventClearSelection:\n            return 'PreventClearSelection';\n        case DiagramAction.Interactions:\n            return 'Interactions';\n        case DiagramAction.PreventHistory:\n            return 'PreventHistory';\n    }\n    return '';\n}\n\n// tslint:disable-next-line:max-func-body-length\nfunction eventInformation(args: any): void {\n    let data: HTMLDivElement = document.createElement('div');\n    data.className = 'eventData';\n    let eventObject: object[] = [];\n    switch (args.name) {\n        case 'click':\n            if (args.element && args.element.id) {\n                eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n                { 'actualObject': args.actualObject ? args.actualObject.id : 'null' }, { 'count': args.count },\n                { 'position.x': args.position.x },\n                { 'position.y': args.position.y }];\n            }\n            break;\n        case 'dragEnter':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n            { 'diagram': args.diagram.getModuleName() }, { 'source': args.source.getModuleName() }];\n            break;\n        case 'dragLeave':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n            { 'diagram': args.diagram.getModuleName() }];\n            break;\n        case 'dragOver':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n            { 'target': args.target.id }, { 'mousePosition.x': args.mousePosition.x }, { 'mousePosition.y': args.mousePosition.y },\n            { 'diagram': args.diagram.getModuleName() }];\n            break;\n        case 'historyChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n            { 'type': args.type }, { 'source': args.source[0].id }];\n            break;\n        case 'doubleClick':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' },\n            { 'position.x': args.position.x }, { 'position.y': args.position.y }, { 'source': args.source.id }];\n            break;\n        case 'textEdit':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue },\n            { 'oldValue': args.oldValue }];\n            break;\n        case 'scrollChange':\n            eventObject = [\n                { 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue.CurrentZoom': args.newValue.CurrentZoom },\n                { 'newValue.HorizontalOffset': args.newValue.HorizontalOffset }, { 'source': args.source.getModuleName() },\n                { 'newValue.VerticalOffset': args.newValue.VerticalOffset },\n                { 'newValue.ViewportHeight': args.newValue.ViewportHeight }, { 'newValue.ViewportWidth': args.newValue.ViewportWidth },\n                { 'oldValue.CurrentZoom': args.oldValue.CurrentZoom }, { 'oldValue.HorizontalOffset': args.oldValue.HorizontalOffset },\n                { 'oldValue.VerticalOffset': args.oldValue.VerticalOffset }, { 'oldValue.ViewportHeight': args.oldValue.ViewportHeight },\n                { 'oldValue.ViewportWidth': args.oldValue.ViewportWidth }\n            ];\n            break;\n        case 'selectionChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue ? args.newValue.length : 0 },\n            { 'oldValue': args.oldValue ? args.oldValue.length : 0 }, { 'type': args.type }, { 'state': args.state }];\n            break;\n        case 'sizeChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue.offsetX': args.newValue.offsetX },\n            { 'newValue.offsetY': args.newValue.offsetY }, { 'oldValue.offsetX': args.oldValue.offsetX },\n            { 'oldValue.offsetY': args.oldValue.offsetY }, { 'source': args.source.propName }, { 'state': args.state }];\n            break;\n        case 'connectionChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'connector': args.connector.id },\n            { 'connectorEnd': args.connectorEnd }, { 'newValue.nodeId': args.newValue.nodeId }, { 'newValue.portId': args.newValue.portId },\n            { 'oldValue.nodeId': args.oldValue.nodeId }, { 'oldValue.portId': args.oldValue.portId }, { 'state': args.state }];\n            break;\n        case 'sourcePointChange':\n        case 'targetPointChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'connector': args.connector.id },\n            { 'newValue.x': args.newValue.x }, { 'newValue.y': args.newValue.y }, { 'oldValue.x': args.oldValue.x },\n            { 'oldValue.y': args.oldValue.y }, { 'targetNode': args.targetNode }, { 'targetPort': args.targetPort },\n            { 'state': args.state }];\n            break;\n        case 'propertyChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n            { 'newValue': args.newValue }, { 'oldValue': args.oldValue }, { 'element': args.element }];\n            break;\n        case 'positionChange':\n            eventObject = [\n                { 'eventName': args.name }, { 'arguments': 'value' }, { 'allowDrop': args.allowDrop },\n                { 'newValue.offsetX': args.newValue.offsetX }, { 'newValue.offsetY': args.newValue.offsetY },\n                { 'oldValue.offsetX': args.oldValue.offsetX }, { 'oldValue.offsetY': args.oldValue.offsetY },\n                { 'targetPosition.x': args.targetPosition.x }, { 'targetPosition.y': args.targetPosition.y },\n                { 'source': args.source.propName }, { 'target': args.target }, { 'state': args.state },\n            ];\n            break;\n        case 'rotateChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'newValue': args.newValue.rotateAngle },\n            { 'oldValue': args.oldValue.rotateAngle }, { 'source': args.source.propName }, { 'state': args.state }];\n            break;\n        case 'collectionChange':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'cause': getCause(args.cause) },\n            { 'element': args.element.id }, { 'type': args.type }, { 'state': args.state }];\n            break;\n        case 'mouseEnter':\n        case 'mouseLeave':\n        case 'mouseOver':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'actualObject': args.actualObject },\n            { 'element': args.element }, { 'targets': args.targets }];\n            break;\n        case 'contextMenuOpen':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'items': args.items }, { 'element': args.element.id },\n            { 'hiddenItems': args.hiddenItems }, { 'left': args.left }, { 'top': args.top }, { 'parentItem': args.parentItem }];\n            break;\n        case 'contextMenuBeforeItemRender':\n        case 'contextMenuClick':\n            eventObject = [{ 'eventName': args.name }, { 'arguments': 'value' }, { 'element': args.element.id },\n            { 'item': args.item.id }];\n            break;\n    }\n    let span: HTMLElement = document.createElement('span');\n    span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n    let log: HTMLElement = document.getElementById('EventLog');\n    log.insertBefore(span, log.firstChild);\n}\n\nfunction setEventsArguments(data: object[]): HTMLTableElement {\n    let table: HTMLTableElement = document.createElement('table');\n    table.style.marginTop = '15px';\n    let tableBody: HTMLTableSectionElement = document.createElement('tbody');\n    for (let i: number = 0; i < data.length; i++) {\n        let row: HTMLTableRowElement = document.createElement('tr');\n        Object.keys(data[i]).forEach((key: string) => {\n            let firstColumn: HTMLTableDataCellElement = document.createElement('td');\n            firstColumn.appendChild(document.createTextNode(key));\n            row.appendChild(firstColumn);\n            let thirdColumn: HTMLTableDataCellElement = document.createElement('td');\n            thirdColumn.appendChild(document.createTextNode('<b>' + data[i][key] + '</b>'));\n            row.appendChild(thirdColumn);\n        });\n        tableBody.appendChild(row);\n    }\n    table.appendChild(tableBody);\n    return table;\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n  <link href=\"https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css\" rel=\"stylesheet\">\n  <script src=\"https://ej2.syncfusion.com/javascript/demos/src/diagram/script/diagram-common.js\"></script>\n  <style>\n\n    /* Symbol palette alignment CSS */\n    .diagram-events-control-section .sb-mobile-palette {\n      width: 200px;\n      height: 100%;\n      float: left;\n    }\n  \n   .diagram-events-control-section .sb-mobile-palette-bar {\n      display: none;\n    }\n    /* Diagram alignment CSS */\n   .diagram-events-control-section .sb-mobile-diagram {\n      width: calc(100% - 200px);\n      height: 100%;\n      float: left;\n      border: 1px solid #d9dedd;\n    }\n  \n    @media (max-width: 550px) {\n      .diagram-events-control-section .sb-mobile-palette {\n        z-index: 19;\n        position: absolute;\n        display: none;\n        transition: transform 300ms linear, visibility 0s linear 300ms;\n        width: 39%;\n        height: 100%;\n      }\n  \n      .diagram-events-control-section .sb-mobile-palette-bar {\n        display: block;\n        width: 100%;\n        background: #fafafa;\n        padding: 10px 10px;\n        border: 0.5px solid #e0e0e0;\n        min-height: 40px;\n      }\n  \n      .diagram-events-control-section .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n      }\n    }\n  \n    .diagram-events-control-section .sb-mobile-palette-open {\n      position: absolute;\n      display: block;\n      right: 15px;\n    }\n    /* Event property panel CSS */\n    .diagram-events-property-section .event-tracer {\n      width: 240px;\n      height: 700px;\n      min-height: 700px;\n      float: left;\n    }\n  \n   .diagram-events-property-section .diagramEvents-heading {\n      color: #807f7f;\n      font-size: 15px;\n      height: 50px;\n      width: 100%;\n      border-bottom: 1px solid #d9dedd;\n      padding: 10px;\n    }\n    /* These color is to indicate the event name in specific color */\n    #EventLog b {\n     color: #388e3c;\n    }\n  \n    hr {\n      margin: 1px 10px 1px 0px;\n      border-top: 1px solid #eee;\n    }\n    /* Property panel CSS */\n    .property-section {\n      padding-top: 20px;\n      padding-bottom: 20px;\n      height: 740px;\n      padding-right: 0px;\n    }\n  \n    .diagram-events-property-section .evtbtn { \n      float: right; \n    }\n  \n    .diagram-events-property-section .diagramEvents-listbox {\n      width: 100%;\n      height: 50%;\n    }\n  \n   .diagram-events-property-section .event-tracer .prop-grid {\n      width: 100%;\n      height: 50%;\n    }\n  \n   .diagram-events-property-section #EventLog {\n      height: calc(100% - 50px);\n      padding: 15px;\n      overflow: auto;\n      width: 100%;\n    }\n   .diagram-events-control-section{\n    display: flex;\n  }\n  </style>\n  <div id=\"diagramEventsControlSection\" class=\"content-wrapper diagram-events-control-section\" style=\"width:100%;background: white\">\n    <div class=\"sb-mobile-palette-bar\">\n      <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n      <div id=\"symbolpalette\" style=\"width:100%;\"></div>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n      <div id=\"diagram\"></div>\n    </div>\n  </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n  <div id=\"diagramEventsPropertySection\" class=\"diagram-events-property-section\" style=\"height:100%;border: 1px solid #e0e0e0\">\n    <div class=\"diagramEvents-listbox\">\n      <div class=\"diagramEvents-heading\" style=\"height:40px\"><span>Client-side events</span></div>\n      <div id=\"listview-def\" tabindex=\"1\"></div>\n    </div>\n    <div class=\"prop-grid content\" style=\"height:50%; border-top: 1px solid #e0e0e0\">\n      <div class=\"diagramEvents-heading\">\n        <span style=\"display: inline-block;margin-top: 5px;\">Event arguments</span>\n        <div class=\"evtbtn\"><button id=\"clearButton\">Clear</button></div>\n      </div>\n      <div id=\"EventLog\">\n      </div>\n    </div>\n  </div>\n</div>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-diagrams' package\": \"*\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Event sample\n */\n// Importing necessary modules from '@syncfusion/ej2-diagrams' package\nimport {\n    Diagram, NodeModel, UndoRedo, ConnectorModel, SymbolPalette,\n    SymbolInfo, IDragEnterEventArgs, IDragLeaveEventArgs,\n    PaletteModel,\n    IDragOverEventArgs, IClickEventArgs, IHistoryChangeArgs, IDoubleClickEventArgs,\n    ITextEditEventArgs, IScrollChangeEventArgs, ISelectionChangeEventArgs, ISizeChangeEventArgs,\n    IConnectionChangeEventArgs, IEndChangeEventArgs, IPropertyChangeEventArgs, IDraggingEventArgs, IRotationEventArgs,\n    ICollectionChangeEventArgs,\n    IMouseEventArgs, DiagramContextMenu, Snapping, SnapConstraints,\n    NodeConstraints\n} from '@syncfusion/ej2-diagrams';\nimport { addEvents } from './script/diagram-common';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { BeforeOpenCloseMenuEventArgs } from '@syncfusion/ej2-navigations';\nimport { MenuEventArgs } from '@syncfusion/ej2-splitbuttons';\nimport { getEventDetails } from './diagram-events-details';\nimport { ListView } from '@syncfusion/ej2-lists';\n\n// Injecting required modules\nDiagram.Inject(UndoRedo, DiagramContextMenu, Snapping);\n\n// Function to define default properties for symbols in the diagram\nfunction getSymbolDefaults(symbol: NodeModel): void {\n    symbol.width = 50;\n    symbol.height = 50;\n    symbol.style.strokeColor = '#757575';\n    symbol.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n}\n\n// Event handler for symbol info event\nfunction getSymbolInfo(symbol: NodeModel): SymbolInfo {\n    return { fit: true };\n}\n\n// Event handler for drag enter event\nfunction dragEnter(args: IDragEnterEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for drag leave event\nfunction dragLeave(args: IDragLeaveEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for drag over event\nfunction dragOver(args: IDragOverEventArgs): void {\n    if (args.target) {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for click event\nfunction click(args: IClickEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for history change event\nfunction historyChange(args: IHistoryChangeArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for double click event\nfunction doubleClick(args: IDoubleClickEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for text edit event\nfunction textEdit(args: ITextEditEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for scroll change event\nfunction scrollChange(args: IScrollChangeEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for selection change event\nfunction selectionChange(args: ISelectionChangeEventArgs): void {\n    // Check if the state is changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for size change event\nfunction sizeChange(args: ISizeChangeEventArgs): void {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for connection change event\nfunction connectionChange(args: IConnectionChangeEventArgs): void {\n     // Check if the state is changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for source point change event\nfunction sourcePointChange(args: IEndChangeEventArgs): void {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for target point change event\nfunction targetPointChange(args: IEndChangeEventArgs): void {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for property change event\nfunction propertyChange(args: IPropertyChangeEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for position change event\nfunction positionChange(args: IDraggingEventArgs): void {\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for rotate change event\nfunction rotateChange(args: IRotationEventArgs): void {\n     // Check if the state is completed and get event details\n    if (args.state === 'Completed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for collection change event\nfunction collectionChange(args: ICollectionChangeEventArgs): void {\n    // Check if the state is changed and get event details\n    if (args.state === 'Changed') {\n        getEventDetails(args);\n    }\n}\n\n// Event handler for mouse enter event\nfunction mouseEnter(args: IMouseEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for mouse leave event\nfunction mouseLeave(args: IMouseEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for mouse over event\nfunction mouseOver(args: IMouseEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for context menu open event\nfunction contextMenuOpen(args: BeforeOpenCloseMenuEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for context menu before item render event\nfunction contextMenuBeforeItemRender(args: MenuEventArgs): void {\n    getEventDetails(args);\n}\n\n// Event handler for context menu click event\nfunction contextMenuClick(args: MenuEventArgs): void {\n    getEventDetails(args);\n}\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n\n    let data: { [key: string]: Object }[] = [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n    ];\n\n    //Initialize ListView component\n    let listObj: ListView = new ListView({\n        //Set defined data to dataSource property\n        dataSource: data,\n        height: 'calc(100% - 40px)',\n        //Enables checkbox\n        showCheckBox: true,\n    });\n\n    //Render initialized ListView component\n    listObj.appendTo('#listview-def');\n\n    //Render initialized button component\n    let button: Button = new Button();\n    button.appendTo('#clearButton');\n\n    //Initializes diagram control\n    let diagram: Diagram = new Diagram({\n        width: '100%', height: '700px',\n        contextMenuSettings: { show: true },\n        snapSettings: { constraints: SnapConstraints.None },\n        dragEnter: dragEnter,\n        dragLeave: dragLeave,\n        dragOver: dragOver,\n        click: click,\n        historyChange: historyChange,\n        doubleClick: doubleClick,\n        textEdit: textEdit,\n        scrollChange: scrollChange,\n        selectionChange: selectionChange,\n        sizeChange: sizeChange,\n        connectionChange: connectionChange,\n        sourcePointChange: sourcePointChange,\n        targetPointChange: targetPointChange,\n        propertyChange: propertyChange,\n        positionChange: positionChange,\n        rotateChange: rotateChange,\n        collectionChange: collectionChange,\n        mouseEnter: mouseEnter,\n        mouseLeave: mouseLeave,\n        mouseOver: mouseOver,\n        contextMenuOpen: contextMenuOpen,\n        contextMenuBeforeItemRender: contextMenuBeforeItemRender,\n        contextMenuClick: contextMenuClick\n    });\n    diagram.appendTo('#diagram');\n\n\n    //Initialize the basicshapes for the symbol palatte\n    let basicShapes: NodeModel[] = [\n        { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\n        { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\n        { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\n        { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\n        { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\n        { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\n        { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\n        { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n\n    //Initializes connector symbols for the symbol palette\n    let connectorSymbols: ConnectorModel[] = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n           \n        },\n        {\n            id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n           targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: { strokeColor: '#757575', fill: '#757575' } }\n           \n        },\n        {\n            id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'None' }\n        },\n    ];\n\n    let palettes: PaletteModel[] = [\n        { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n        { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ];\n\n    //Initializes the symbol palette\n    let palette: SymbolPalette = new SymbolPalette({\n        expandMode: 'Multiple', palettes: palettes,\n        width: '100%', height: '700px', symbolHeight: 60, symbolWidth: 60,\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 },\n        getNodeDefaults: getSymbolDefaults, getSymbolInfo: getSymbolInfo,\n          //Sets the default values of a Connectors\n          getConnectorDefaults: function (connector: ConnectorModel) {\n            connector.style = { strokeWidth: 1 , strokeColor: '#757575' };\n        },\n    });\n    palette.appendTo('#symbolpalette');\n\n    addEvents();\n    clearEventLog();\n    document.getElementById('clearButton').onclick = (args: MouseEvent) => {\n        clearEventLog();\n    };\n\n    // Function to clear the event log\n    function clearEventLog(): void {\n        let data: HTMLElement = document.getElementById('EventLog');\n        data.innerHTML = '';\n    }\n\n\n"}