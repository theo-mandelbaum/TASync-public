{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-12 control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-diagrams\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Fishbone diagram sample\n */\n// Importing needed dependencies for diagram\nimport { Diagram, ConnectorModel, UndoRedo, DiagramTools, NodeModel, DecoratorModel } from '@syncfusion/ej2-diagrams';\nDiagram.Inject(UndoRedo);\n\n// Creates a node with specified properties\nconst createNode = (id: string, height: number, width: number, offsetX: number, offsetY: number, content: string): NodeModel => ({\n    id,\n    height,\n    width,\n    offsetX,\n    offsetY,\n    annotations: [{ content: content, style: { color: 'white' } }],\n    shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' },\n    style: { fill: '#39AFA9', strokeColor: 'black' }\n});\n\n// Creates an ellipse node with specified properties\nconst createEllipseNode = (id: string, height: number, width: number, offsetX: number, offsetY: number, content: string = \"\", fill: string = \"white\", strokeColor = '#A52A2A'): NodeModel => ({\n    id,\n    width,\n    height,\n    offsetX,\n    offsetY,\n    annotations: [{ content: content, style: { color: 'white' } }],\n    shape: { type: 'Basic', shape: 'Ellipse' },\n    style: { fill: fill, strokeColor: strokeColor }\n});\n\n// Creates a text node with specified properties\nconst createTextNode = (id: string, height: number, width: number, offsetX: number, offsetY: number, content: string): NodeModel => ({\n    id,\n    width,\n    height,\n    offsetX,\n    offsetY,\n    style: { fill: 'transparent', strokeWidth: 0 },\n    shape: { type: 'Text', content: content }\n});\n\n// Initializes nodes representing key elements in a Fishbone diagram, such as causes and sub-causes\nlet nodes: NodeModel[] = [\n    createNode('Equipment', 40, 120, 300, 80, 'Equipment'),\n    createNode('Environment', 40, 120, 450, 80, 'Environment'),\n    createNode('Person', 40, 120, 600, 80, 'Person'),\n    createNode('Materials', 40, 120, 300, 600, 'Materials'),\n    createNode('Machine', 40, 120, 450, 600, 'Machine'),\n    createNode('Methods', 40, 120, 600, 600, 'Methods'),\n    createEllipseNode('ellipse1', 20, 20, 290, 130),\n    createEllipseNode('ellipse2', 20, 20, 323, 183),\n    createEllipseNode('ellipse3', 20, 20, 354, 237),\n    createEllipseNode('ellipse4', 20, 20, 440, 130),\n    createEllipseNode('ellipse5', 20, 20, 470, 182),\n    createEllipseNode('ellipse6', 20, 20, 590, 130),\n    createEllipseNode('ellipse7', 20, 20, 622, 179),\n    createEllipseNode('ellipse8', 20, 20, 660, 221),\n    createEllipseNode('ellipse9', 20, 20, 694, 264),\n    createEllipseNode('ellipse10', 20, 20, 354, 460),\n    createEllipseNode('ellipse11', 20, 20, 590, 530),\n    createEllipseNode('ellipse12', 20, 20, 660, 460),\n    createEllipseNode('ellipse13', 20, 20, 440, 530),\n    createEllipseNode('ellipse14', 20, 20, 510, 460),\n    createEllipseNode('ellipse15', 20, 20, 290, 530),\n    createEllipseNode('Colorellipse1', 50, 50, 717, 310),\n    createEllipseNode('Colorellipse2', 50, 50, 560, 310),\n    createEllipseNode('Colorellipse3', 50, 50, 390, 310),\n    createEllipseNode('Colorellipse4', 50, 50, 220, 310),\n    createEllipseNode('Colorellipse5', 90, 140, 900, 310, 'Productivity Increase', \"#39AFA9\", 'black'),\n    createTextNode('TextPrograms', 20, 90, 189, 130, 'Text Programs'),\n    createTextNode('VentilatorsSound', 20, 120, 359, 130, 'Ventilators Sound'),\n    createTextNode('Education', 20, 70, 500, 130, 'Education'),\n    createTextNode('DataBooks', 20, 70, 213, 183, 'DataBooks'),\n    createTextNode('Fixtures', 20, 70, 240, 237, 'Fixtures'),\n    createTextNode('Noise', 20, 70, 390, 182, 'Noise'),\n    createTextNode('Motivation', 20, 70, 535, 182, 'Motivation'),\n    createTextNode('Tiredness', 20, 70, 565, 224, 'Tiredness'),\n    createTextNode('Storer', 20, 70, 606, 264, 'Storer'),\n    createTextNode('Computer', 20, 70, 260, 460, 'Computer'),\n    createTextNode('Quality', 20, 120, 417, 460, 'Quality of Element'),\n    createTextNode('Order', 20, 70, 562, 460, 'Order'),\n    createTextNode('Software', 20, 70, 225, 530, 'Software'),\n    createTextNode('Procurement', 20, 70, 358, 530, 'Procurement'),\n    createTextNode('Standardization', 20, 90, 501, 530, 'Standardization'),\n\n];\n\n// Creates a connector model with customizable style and annotations.\nconst createConnector = (\n    id: string, lineDashArray: string, source: string, target: string, strokeColor: string): ConnectorModel => ({\n        id: id,\n        sourceID: source,\n        targetID: target,\n        style: {\n            strokeColor: strokeColor,\n            strokeWidth: 2,\n            strokeDashArray: lineDashArray,\n        }\n    });\n\n// Initializes connectors to define relationships between elements in the Fishbone diagram.\nlet connectors: ConnectorModel[] = [\n    createConnector('connector01', '5,5', 'Equipment', 'ellipse1', '#A52A2A'),\n    createConnector('connector02', '5,5', 'ellipse1', 'ellipse2', '#A52A2A'),\n    createConnector('connector03', '5,5', 'ellipse2', 'ellipse3', '#A52A2A'),\n    createConnector('connector04', '5,5', 'ellipse3', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector05', '5,5', 'Environment', 'ellipse4', '#A52A2A'),\n    createConnector('connector06', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector07', '5,5', 'ellipse4', 'ellipse5', '#A52A2A'),\n    createConnector('connector08', '5,5', 'ellipse5', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector09', '5,5', 'Person', 'ellipse6', '#A52A2A'),\n    createConnector('connector10', '5,5', 'ellipse6', 'ellipse7', '#A52A2A'),\n    createConnector('connector11', '5,5', 'ellipse7', 'ellipse8', '#A52A2A'),\n    createConnector('connector12', '5,5', 'ellipse8', 'ellipse9', '#A52A2A'),\n    createConnector('connector13', '5,5', 'ellipse9', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector14', '5,5', 'Materials', 'ellipse15', '#A52A2A'),\n    createConnector('connector15', '5,5', 'ellipse15', 'ellipse10', '#A52A2A'),\n    createConnector('connector16', '5,5', 'ellipse10', 'Colorellipse3', '#A52A2A'),\n    createConnector('connector17', '5,5', 'Machine', 'ellipse13', '#A52A2A'),\n    createConnector('connector18', '5,5', 'ellipse13', 'ellipse14', '#A52A2A'),\n    createConnector('connector19', '5,5', 'ellipse14', 'Colorellipse2', '#A52A2A'),\n    createConnector('connector20', '5,5', 'Methods', 'ellipse11', '#A52A2A'),\n    createConnector('connector21', '5,5', 'ellipse11', 'ellipse12', '#A52A2A'),\n    createConnector('connector22', '5,5', 'ellipse12', 'Colorellipse1', '#A52A2A'),\n    createConnector('connector23', '', 'Colorellipse4', 'Colorellipse3', '#000000'),\n    createConnector('connector24', '', 'Colorellipse3', 'Colorellipse2', '#000000'),\n    createConnector('connector25', '', 'Colorellipse2', 'Colorellipse1', '#000000'),\n    createConnector('connector26', '', 'Colorellipse1', 'Colorellipse5', '#000000'),\n    createConnector('connector27', '5,5', 'TextPrograms', 'ellipse1', '#A52A2A'),\n    createConnector('connector28', '5,5', 'DataBooks', 'ellipse2', '#A52A2A'),\n    createConnector('connector29', '5,5', 'Fixtures', 'ellipse3', '#A52A2A'),\n    createConnector('connector30', '5,5', 'VentilatorsSound', 'ellipse4', '#A52A2A'),\n    createConnector('connector31', '5,5', 'Noise', 'ellipse5', '#A52A2A'),\n    createConnector('connector32', '5,5', 'Education', 'ellipse6', '#A52A2A'),\n    createConnector('connector33', '5,5', 'Motivation', 'ellipse7', '#A52A2A'),\n    createConnector('connector34', '5,5', 'Tiredness', 'ellipse8', '#A52A2A'),\n    createConnector('connector35', '5,5', 'Storer', 'ellipse9', '#A52A2A'),\n    createConnector('connector36', '5,5', 'Software', 'ellipse15', '#A52A2A'),\n    createConnector('connector37', '5,5', 'Computer', 'ellipse10', '#A52A2A'),\n    createConnector('connector38', '5,5', 'Procurement', 'ellipse13', '#A52A2A'),\n    createConnector('connector39', '5,5', 'Quality', 'ellipse14', '#A52A2A'),\n    createConnector('connector40', '5,5', 'Order', 'ellipse12', '#A52A2A'),\n    createConnector('connector41', '5,5', 'Standardization', 'ellipse11', '#A52A2A')\n];\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n    //Initializes diagram control\n    let diagram: Diagram = new Diagram({\n        // sets the height and width of the diagram\n        width: '100%',\n        height: '700px',\n        // sets the nodes and connectors of the diagram\n        nodes: nodes,\n        connectors: connectors,\n        tool: DiagramTools.ZoomPan,\n        // sets snap settings to the diagram\n        snapSettings: { constraints: 0 },\n        //Sets the default values of a connector\n        getConnectorDefaults: (connector: ConnectorModel) => {\n            connector.targetDecorator = { shape: 'Arrow', width: 5, height: 5 } as DecoratorModel;\n            // Customizes target decorator style for specific connectors.\n            if (connector.id !== 'connector23' && connector.id !== 'connector24' &&\n                connector.id !== 'connector25' && connector.id !== 'connector26') {\n                connector.targetDecorator.style = { strokeColor: '#A52A2A', fill: '#A52A2A' };\n            }\n        }\n    });\n    diagram.appendTo('#diagram');\n    diagram.fitToPage({ mode: 'Height' });\n\n"}