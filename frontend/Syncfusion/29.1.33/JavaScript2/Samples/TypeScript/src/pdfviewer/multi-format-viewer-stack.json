{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <!-- Initialize Uploader -->\n        <div id=\"dropArea\" class=\"viewer-file-droparea\" style=\"height: auto; overflow: auto; margin-bottom: 25px;\">\n            <button id=\"browse\">Browse...</button>\n            <div><p style=\"margin: 15px;\">OR</p>\n                <p id=\"drop\">Drop files (Word, Excel, PowerPoint, Image, PDF)</p>\n            </div>\n            <div id=\"progressbarContainer\" style=\"display: block;\">\n                <div id=\"file-details\">\n                    <p id=\"fileName\"></p>\n                    <p id=\"fileSize\"></p>\n                </div>\n                <div id=\"linearProgressBar\" style=\"justify-content: center; display: none;\">\n                    <div id=\"progressbar\" style=\"width: fit-content;\"></div>\n                    <span id=\"progress-status\" style=\"padding: 18px 5px;\"></span>\n                </div>\n                <div id=\"uploadedMessage\" style=\"display: none; margin-top: 10px;\">\n                    <p style=\"color: rgb(110, 218, 110);\">File successfully uploaded...</p>\n                </div>\n                <div id=\"fileSupportMessage\" style=\"display: none; margin-top: 10px;\">\n                    <p style=\"color: rgb(203, 38, 38);\">File not supported!</p>\n                </div>\n                <div id=\"fileSizeValidation\" style=\"display: none; margin-top: 10px;\">\n                    <p style=\"color: rgb(203, 38, 38);\">Maximum file size is (4.0 MB) for this operation...</p>\n                </div>\n            </div>\n            <div style=\"display: none;\">\n                <input type=\"file\" name=\"UploadFiles\" id=\"fileupload\">\n            </div>\n        </div>\n        <div id=\"pdfviewer-container\" style=\"display: none;\">\n            <div class=\"flex-container\">\n                <label class=\"switchLabel\" for=\"checked\">Standalone PDF Viewer</label>\n                <div class=\"e-message render-mode-info\">\n                    <span class=\"e-msg-icon render-mode-info-icon\" title=\"Turn OFF to render the PDF Viewer as server-backed\"></span>\n                </div>\n                <input cssclass=\"buttonSwitch\" id=\"checked\" change=\"change\" type=\"checkbox\">\n            </div>\n            <div id=\"pdfViewer\" style=\"height:640px; width:100%;\" class=\"e-pv-multi-format-pdfviewer\"></div>\n        </div>\n    </div>\n</div>\n\n\n<style>\n.viewer-file-droparea{\n    border: 1px dashed #c3c3cc;\n    position: relative;\n    text-align: center;\n    padding: 20px 0 10px;\n}\n.flex-container {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.render-mode-info {\n    background: none;\n    border: none;\n    padding-left: 0px;\n}\n\n.render-mode-info .render-mode-info-icon {\n    height: 16px;\n    width: 16px;\n}\n\n.switchLabel {\n    font-family: \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", sans-serif;        \n    font-weight: 400;\n    line-height: 20px;\n    letter-spacing: 0.24px;\n    text-align: right;\n    font-size: 14px;\n    margin-bottom: 3px;\n}\n\n.render-mode-info .render-mode-info-icon::before {\n    line-height: normal;\n}\n\n.buttonSwitch {\n    Width: 40px;\n    Height: 24px;\n}\n\n.e-pv-multi-format-pdfviewer .e-pv-text-search-bar {\n    top: 40px !important;\n}\n\n.e-bigger .e-pv-multi-format-pdfviewer .e-pv-text-search-bar {\n    top: 48px !important;\n}\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2-drawings\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-inplace-editor\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-pdf\": \"*\",\n  \"@syncfusion/ej2-pdfviewer\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\n\nimport { Uploader } from '@syncfusion/ej2-inputs';\nimport { Button, Switch } from '@syncfusion/ej2-buttons';\nimport {\n    ProgressBar,\n    ILoadedEventArgs,\n    ProgressTheme,\n  } from '@syncfusion/ej2-progressbar';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { PdfViewer, Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView,\nThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer } from '@syncfusion/ej2-pdfviewer';\nPdfViewer.Inject(Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer);\n\n\n  \n  let button: Button = new Button();\n  button.appendTo('#browse');\n  //let progressValue: number = 0;\n  let uploadProgressValue: number = 0;\n  let pdfViewerProgressValue: number = 0;\n  let extensions: any = ['doc','docx','rtf','docm','dotm','dotx','dot','xls','xlsx','pptx','pptm','potx','potm','jpeg','png','bmp','pdf','jpg'];\n  let viewer: PdfViewer = new PdfViewer({\n    documentLoad: documentLoaded,\n    ajaxRequestSuccess: ajaxRequestSuccess,\n  });\n  viewer.resourceUrl =\"https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib\";\n  viewer.toolbarSettings = {\n      showTooltip: true,\n      toolbarItems: [\n          'UndoRedoTool',\n          'PageNavigationTool',\n          'MagnificationTool',\n          'PanTool',\n          'SelectionTool',\n          'CommentTool',\n          'SubmitForm',\n          'SearchOption',\n          'AnnotationEditTool',\n          'FormDesignerEditTool',\n          'PrintOption',\n          'DownloadOption'\n      ]\n  };\n  viewer.zoomMode = 'FitToPage';\n  viewer.appendTo('#pdfViewer');\n\n  let progressLoad: EmitType<ILoadedEventArgs> = (args: ILoadedEventArgs) => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Material';\n    args.progressBar.theme = <ProgressTheme>(\n      (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1))\n        .replace(/-dark/i, 'Dark')\n        .replace(/contrast/i, 'Contrast')\n    );\n    if (selectedTheme === 'fabric') {\n      args.progressBar.secondaryProgressColor = '#b0d0e9';\n    } else if (selectedTheme === 'material-dark') {\n      args.progressBar.secondaryProgressColor = '#b8b8b8';\n    } else if (selectedTheme === 'material') {\n      args.progressBar.secondaryProgressColor = '#f087ab';\n    } else if (selectedTheme === 'bootstrap5-dark') {\n      args.progressBar.secondaryProgressColor = '#2b5288';\n    } else if (selectedTheme === 'bootstrap5') {\n      args.progressBar.secondaryProgressColor = '#98c5f5';\n    } else if (selectedTheme === 'bootstrap') {\n      args.progressBar.secondaryProgressColor = '#acc6dc';\n    } else if (selectedTheme === 'bootstrap4') {\n      args.progressBar.secondaryProgressColor = '#98c5f5';\n    } else if (selectedTheme === 'bootstrap-dark') {\n      args.progressBar.secondaryProgressColor = '#b8b8b8';\n    } else if (selectedTheme === 'highcontrast') {\n      args.progressBar.secondaryProgressColor = '#aca379';\n    } else if (selectedTheme === 'fluent-dark') {\n      args.progressBar.secondaryProgressColor = '#2b5288';\n    } else if (selectedTheme === 'fluent') {\n      args.progressBar.secondaryProgressColor = '#98c5f5';\n    } else if (selectedTheme === 'tailwind-dark') {\n      args.progressBar.secondaryProgressColor = '#386e7f';\n    } else if (selectedTheme === 'tailwind') {\n      args.progressBar.secondaryProgressColor = '#b1afe9';\n    }\n  };\n\n  let uploadProgress: ProgressBar = new ProgressBar({\n    type: 'Linear',\n    height: '60',\n    width: '250',\n    animation: {\n      enable: false,\n      duration: 0,\n      delay: 0,\n    },\n    load: progressLoad,\n  });\n  uploadProgress.appendTo('#progressbar');\n\n  const dropElement: HTMLElement | null = document.getElementById('dropArea');\n  const uploadObj: Uploader = new Uploader({\n    dropArea: document.getElementById('dropArea') as HTMLElement,\n    selected: onSelect,\n    multiple: false,\n    allowedExtensions: '.doc, .docx, .rtf, .docm, .dotm, .dotx, .dot, .xls, .xlsx, .pptx, .pptm, .potx, .potm .jpeg, .png, .bmp, .pdf, .jpg',\n  });\n  uploadObj.appendTo('#fileupload');\n\n  let parentElement: HTMLElement | undefined;\n  document.getElementById('browse')!.onclick = function () {\n      (document.getElementsByClassName('e-file-select-wrap')[0] as HTMLElement).querySelector('button')!.click();\n      return false;\n  };\n\n  var switchObj = new Switch({ value: 'Standalone Rendering', checked: true });\n  switchObj.appendTo('#checked');\n  switchObj.change = function (args) {\n      if (args.checked) {\n          viewer.serviceUrl = '';\n      }\n      else {\n          viewer.serviceUrl = 'http://localhost:62728/api/pdfviewer';\n      }\n      viewer.dataBind();\n      viewer.load(viewer.documentPath, null);\n  }\n\n  function onSelect(args: any): void {\n    uploadProgress.value = 0;\n    uploadProgress.refresh();\n    let progressBarContainer: any = document.getElementById(\"progressbarContainer\") as HTMLElement;\n    let progressBar: any = document.getElementById(\"linearProgressBar\") as HTMLElement;\n    let progressMessage: any = document.getElementById(\"uploadedMessage\") as HTMLElement;\n    let fileSupportMessage = document.getElementById(\"fileSupportMessage\")as HTMLElement;\n    let fileDetails = document.getElementById(\"file-details\")as HTMLElement;\n    let fileSizeValidation = document.getElementById(\"fileSizeValidation\")as HTMLElement;\n    progressBarContainer.style.display = \"block\";\n    progressBar.style.display = \"flex\";\n    progressMessage.style.display = \"none\";\n    fileSupportMessage.style.display = \"none\";\n    fileSizeValidation.style.display = \"none\";\n    if (!dropElement!.querySelector('li')) {\n        uploadObj.filesData = [];\n    }\n    if (isNullOrUndefined(dropElement!.querySelector('.e-upload-files'))) {\n        parentElement = createElement('ul', { className: 'e-upload-files' }) as HTMLElement;\n        (document.getElementsByClassName('e-upload')[0] as HTMLElement).appendChild(parentElement);\n    }\n    const validFiles: any[] = args.filesData;\n    if (validFiles.length === 0) {\n      progressBarContainer.style.display = \"block\";\n      progressBar.style.display = \"none\";\n      if(document.getElementById('pdfviewer-container').style.display === \"block\"){\n        progressMessage.style.display = \"block\";\n        fileDetails.style.display = \"block\";\n      }\n      args.cancel = true;\n      return;\n    }\n    if(!extensions.includes(validFiles[0].type)){\n      fileSupportMessage.style.display = \"block\";\n      progressBar.style.display = \"none\";\n      fileDetails.style.display = \"none\";\n      args.cancel = true;\n      return;\n    }\n    if(validFiles[0].type != \"pdf\" && validFiles[0].size>4000000){\n      fileSizeValidation.style.display = \"block\";\n      progressBar.style.display = \"none\";\n      fileDetails.style.display = \"none\";\n      args.cancel = true;\n      return;\n    }\n    fileDetails.style.display = \"block\";\n    document.getElementById(\"fileName\").innerHTML = args.filesData[0].name;\n    viewer.downloadFileName = args.filesData[0].name;\n    viewer.exportAnnotationFileName = args.filesData[0].name;\n    let size = document.getElementById(\"fileSize\") as HTMLElement;\n    if((args.filesData[0].size.toString()).length <= 6){\n      size.innerHTML = ((args.filesData[0].size/1024).toFixed(1)).toString()+\" KB\";\n    } else {\n      let kbsize = args.filesData[0].size/1024;\n      size.innerHTML = ((kbsize/1024).toFixed(1)).toString()+\" MB\";\n    }\n    formSelectedData(validFiles[0], uploadObj);\n    uploadObj.filesData = uploadObj.filesData.concat(validFiles);\n    args.cancel = true;\n  }\n\n  function formSelectedData(file: any, proxy: Uploader): void {\n    const liEle: HTMLElement = createElement('li', {\n        className: 'e-upload-file-list',\n        attrs: {\n            'data-file-name': file.name\n        },\n    }) as HTMLElement;\n\n    readURL(liEle, file);\n    proxy.fileList.push(liEle);\n  }\n\n  function readURL(li: HTMLElement, args: any): void {\n    const file: File = args.rawFile as File;\n    const reader: FileReader = new FileReader();\n    const type: string | undefined = args.type;\n    reader.addEventListener('load', function () {\n      const post: string = JSON.stringify({\n        'data': reader.result,\n        'type': type\n      });\n      const url: string = \"http://localhost:62728/api/pdfviewer/LoadFile\";\n      const xhr: XMLHttpRequest = new XMLHttpRequest();\n      xhr.open('Post', url, true);\n      xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          const progressValue = Math.round((event.loaded / event.total) * 100);\n          uploadProgressValue = progressValue;\n          const totalProgress = calculateTotalProgress();\n          updateProgressBar(totalProgress);\n          document.getElementById(\"progress-status\").innerHTML = totalProgress.toString()+\"%\";\n        }\n      });\n      xhr.onload = function (args: Event) {\n          viewer.documentPath = (this as XMLHttpRequest).responseText;\n          pdfViewerProgressValue = 60;\n          const totalProgress = calculateTotalProgress();\n          updateProgressBar(totalProgress);\n          document.getElementById(\"progress-status\").innerHTML = totalProgress.toString()+\"%\";\n          (document.getElementById('pdfviewer-container') as HTMLElement).style.display = \"block\";\n      };\n      xhr.send(post);\n    }, false);\n    if (file) {\n        reader.readAsDataURL(file);\n    }\n  }\n\n  function documentLoaded(): any{\n    let progressValue = document.getElementById(\"progress-status\");\n    pdfViewerProgressValue = 100;\n    const totalProgress = calculateTotalProgress();\n    updateProgressBar(totalProgress);\n    progressValue.innerHTML = totalProgress.toString()+\"%\";\n    setTimeout(()=>{\n      document.getElementById(\"linearProgressBar\").style.display = \"none\";\n      document.getElementById(\"uploadedMessage\").style.display = \"block\"\n      uploadProgressValue = 0;\n      pdfViewerProgressValue = 0;\n      progressValue.innerHTML = \"0%\";\n    },1000);\n  }\n\n  function calculateTotalProgress(){\n    const totalProgress = (uploadProgressValue + pdfViewerProgressValue)/2;\n    return totalProgress;\n  }\n\n  function updateProgressBar(progress: any) {\n    uploadProgress.value = progress;\n    uploadProgress.dataBind();\n  }\n\n  function ajaxRequestSuccess(args: any){\n    let progressValue = document.getElementById(\"progress-status\");\n    if (args.action === \"Load\") {\n      pdfViewerProgressValue = 70;\n      const totalProgress = calculateTotalProgress();\n      updateProgressBar(totalProgress);\n      progressValue.innerHTML = totalProgress.toString()+\"%\";\n    }\n    if (args.action === \"RenderPdfPages\") {\n      if(pdfViewerProgressValue < 90){\n        pdfViewerProgressValue = pdfViewerProgressValue + 10;\n        const totalProgress = calculateTotalProgress();\n        updateProgressBar(totalProgress);\n        progressValue.innerHTML = totalProgress.toString()+\"%\";\n      }\n    }\n  }\n"}