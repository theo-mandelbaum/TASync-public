{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div id=\"topToolbar\" style=\"top:0px\">\n    </div>\n    <div id=\"msg_success\"></div>\n    <div id=\"msg_warning\"></div>\n    <div id=\"msg_error\"></div>\n    <div id=\"pdfViewer\" style=\"height:640px; width:100%;\"></div>\n    <input type=\"file\" id=\"fileUpload\" style=\"display:block;visibility:hidden;width:0;height:0;\">\n</div>\n\n\n\n\n\n\n<style>\n#topToolbar {\ntop: 0px;\nz-index: 1001;\n}\n\n\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-drawings\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-inplace-editor\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-pdf\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-pdfviewer\": \"*\",\n  \"@syncfusion/ej2-notifications/src/message/message\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    PdfViewer, FormFields, Toolbar, Magnification, Navigation, LinkAnnotation, Annotation, BookmarkView, ThumbnailView, Print,\n    PageChangeEventArgs, LoadEventArgs, TextSearch, TextSelection, FormDesigner, PageOrganizer\n} from '@syncfusion/ej2-pdfviewer';\nimport { Toolbar as Tool, TreeView, NodeSelectEventArgs } from '@syncfusion/ej2-navigations';\nimport { ClickEventArgs, Button, CheckBox, ChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { Message } from '@syncfusion/ej2-notifications/src/message/message';\n\nPdfViewer.Inject(FormDesigner, FormFields, Toolbar, Magnification, Navigation, LinkAnnotation, Annotation, BookmarkView, ThumbnailView, Print, TextSearch, PageOrganizer);\n\n\n/**\n * Default PdfViewer sample\n */\nlet toolbarObj: Tool;\nlet viewer: PdfViewer;\nlet msgWarning: Message;\nlet msgError: Message;\nlet msgSuccess: Message;\n//Specifies the visibility of the complete signing.\nlet buttonVisibility: boolean = true;\n//Specifies the visibility of the download icon\nlet downloadVisibility: boolean = true;\nlet successVisible: boolean = false;\nlet errorVisible: boolean = false;\nlet warningVisible: boolean = false;\nlet documentData: string;\nlet fileName:any;\n// Specifies whether the document has a digital signature or not.\nlet hasDigitalSignature: boolean = false;\n //Downloads the PDF document being loaded in the PDFViewer.\nfunction downloadClicked(args: ClickEventArgs): void {\n    viewer.download();\n}\n\nfunction openDocument(e: ClickEventArgs): void {\n    document.getElementById('fileUpload').click();\n}\nfunction signDocument(e: ClickEventArgs): void {\n    var url = \"http://localhost:62728/api/pdfviewer/AddSignature\";\n    viewer.saveAsBlob().then(function (value) {\n        var reader = new FileReader();\n        reader.readAsDataURL(value);\n        reader.onload = function (e) {\n            var base64String = e.target ? e.target.result : null;\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n            var requestData = JSON.stringify({ base64String: base64String });\n            xhr.onload = function () {\n                if (xhr.status === 200) {\n                    documentData = xhr.responseText;\n                    viewer.load(xhr.responseText, null);\n                    toolbarObj.items[1].disabled = true;\n                    toolbarObj.items[2].disabled = false;\n                    viewer.fileName = fileName;\n                    viewer.downloadFileName = fileName;\n                }\n                else {\n                    console.error('Error in AddSignature API:', xhr.statusText);\n                }\n            };\n            xhr.onerror = function () {\n                console.error('Error reading Blob as Base64.', xhr.statusText);\n            };\n            xhr.send(requestData);\n        };\n    }).catch(function (error) {\n        console.error('Error saving Blob:', error);\n    });\n}\nfunction readFile(args: any): void {\n    // tslint:disable-next-line\n    let upoadedFiles: any = args.target.files;\n    if (args.target.files[0] !== null) {\n        let uploadedFile: File = upoadedFiles[0];\n        if (uploadedFile) {\n            let reader: FileReader = new FileReader();\n            fileName = upoadedFiles[0].name;\n            reader.readAsDataURL(uploadedFile);\n            // tslint:disable-next-line\n            reader.onload = (e: any): void => {\n                toolbarObj.items[2].disabled = true;\n                let uploadedFileUrl: string = e.currentTarget.result;\n                documentData = uploadedFileUrl;\n                viewer.load(uploadedFileUrl, null);\n                viewer.fileName = fileName;\n                viewer.downloadFileName = fileName;\n            };\n        }\n    }\n}\n\n\n    \n    toolbarObj = new Tool({\n        items: [\n            { prefixIcon: 'e-icons e-folder-open', cssClass: \"e-pv-open-document-container\", tooltipText: 'Open file', id: 'openButton', click: openDocument.bind(this), align: \"Left\" },\n            { text: \"Complete Signing\", width: \"150px\", disabled: buttonVisibility, align: \"Right\", tooltipText: \"Finish Signing\", id: \"pdfviewer_sign\", click: signDocument.bind(this), cssClass: \"e-pv-button-container\" },\n            { prefixIcon: 'e-icons e-download', tooltipText: 'Download', align: 'Right', click: downloadClicked.bind(this), disabled: downloadVisibility, cssClass: \"e-pv-download-document-container\" }\n        ]\n    });\n    toolbarObj.appendTo('#topToolbar');\n    viewer = new PdfViewer({\n        enableToolbar: false,\n        enableNavigationToolbar: false,\n        enableThumbnail: false,\n        enableAnnotationToolbar: false,\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/InvisibleDigitalSignature.pdf\",\n        resourceUrl: \"https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib\"\n    });\n    viewer.enableTextSelection=false;\n    viewer.downloadFileName = 'InvisibleDigitalSignature.pdf';\n    viewer.addSignature = (args) => {\n        let field: any;\n        //To retrieve the form fields in the loaded PDF Document.\n        field = viewer.retrieveFormFields();\n        let signatureFieldCount = 0;\n        let signaturesCount = 0;\n        for (var i = 0; i < field.Count; i++) {\n            if (field[i].Type.ToString() == (\"SignatureField\")) {\n                signatureFieldCount++;\n            }\n            if (field[i].Value != \"\" && field[i].Value != null && field[i].Type.ToString() == (\"SignatureField\")) {\n                signaturesCount++;\n            }\n        }\n        // Checks whether all the signature fields are signed or not.\n        if (signatureFieldCount == signaturesCount) {\n            //Checks whether the document has a digital signature or not.\n            if (!hasDigitalSignature) {\n                buttonVisibility = false;\n                toolbarObj.items[1].disabled = false;\n            }\n        }\n\n    };\n    viewer.documentLoad = (args) => {\n        fileName = args.documentName;\n        const postData: any = {\n            documentData: documentData\n        };\n        let options = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(postData)\n        };\n        const apiUrl = 'http://localhost:62728/api/pdfviewer/ValidateSignature';\n        fetch(apiUrl, options)\n            .then(response => response.json())\n            .then(body => {\n                if (body.successVisible || body.warningVisible || body.errorVisible)\n                    toolbarObj.items[1].disabled = true;\n                if (!body.downloadVisibility)\n                    toolbarObj.items[2].disabled = false;\n                if ((body.successVisible)) {\n                    setTimeout(() => {\n                        msgSuccess.content = body.message;\n                        msgSuccess.visible = true;\n                    }, 1000);\n                    setTimeout(() => {\n                        msgSuccess.visible = false;\n                    }, 5000);\n                }\n                if ((body.warningVisible)) {\n                    msgWarning.content = body.message;\n                    msgWarning.visible = true;\n                }\n                if (body.errorVisible) {\n                    msgError.content = body.message;\n                    msgError.visible = true;\n                }\n\n            });\n\n\n    };\n    viewer.appendTo('#pdfViewer');\n    document.getElementById('fileUpload').addEventListener('change', readFile, false);\n    msgSuccess = new Message({\n        severity: \"Success\",\n        visible: successVisible\n    });\n    msgSuccess.appendTo('#msg_success');\n\n    msgWarning = new Message({\n        severity: \"Warning\",\n        visible: warningVisible\n    });\n    msgWarning.appendTo('#msg_warning'); \n\n    msgError = new Message({\n        severity: \"Error\",\n        visible: errorVisible\n    });\n    msgError.appendTo('#msg_error');\n\n "}