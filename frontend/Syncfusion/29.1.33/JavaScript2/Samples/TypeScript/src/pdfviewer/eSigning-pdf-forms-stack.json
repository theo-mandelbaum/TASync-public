{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n  <div class=\"content-wrapper\">\n    <div id=\"toolbar_user_viewer\">\n    </div>\n    <div id=\"pdfViewer\" style=\"height:640px; width:100%;\">\n    </div>\n    <input type=\"file\" id=\"fileUpload\" accept=\".pdf\" style=\"display:block;visibility:hidden;width:0;height:0;\">\n    <div id=\"dialog-target\">\n      <div id=\"dialog\"></div>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n<style>\n  .form-field-property {\n    width: 77px;\n    height: 70px;\n    margin: 9px;\n    border: 1px solid black;\n    border-radius: 11px;\n    display: grid;\n    place-content: center;\n  }\n\n  #user-field {\n    color: #222933;\n    font-family: Heebo, open sans, 'sans-serif', -apple-system,\n      BlinkMacSystemFont;\n    display: flex;\n    position: relative;\n\n  }\n\n  .user-dropdown> :first-child {\n    border: none !important;\n  } \n\n  #user-color {\n    width: 15px;\n    height: 15px;\n    border-radius: 50%;\n    position: relative;\n    margin: 5px;\n    top: 3px;\n  }\n\n  #finish-btn {\n    width: 115px !important;\n    height: 28px;\n    padding: 0;\n    font-size: 12px;\n    flex-shrink: 0;\n    border-radius: 16px;\n  }\n\n  .user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,\n  .user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {\n    width: 0px;\n\n  }\n\n  .empImage {\n    max-height: 35px;\n    margin-top: 7px;\n    margin-left: 4px;\n    border-radius: 50%;\n  }\n\n  .user-dropdown> :first-child {\n    border: none !important;\n  }\n\n  #toolbar_user_viewer.e-toolbar .e-toolbar-items .e-toolbar-left .e-toolbar-item:first-child {\n    margin-left: 0px !important;\n  }\n\n  #toolbar_user_viewer{\n    box-shadow: 0px 2px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);\n  }\n\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-drawings\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-inplace-editor\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-pdf\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-pdfviewer\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { PdfViewer, Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer, PdfViewerModel, FormFieldAddArgs } from '@syncfusion/ej2-pdfviewer';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { ClickEventArgs, Sidebar } from '@syncfusion/ej2-navigations';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Toolbar as EJToolbar, ItemModel } from '@syncfusion/ej2-navigations';\nimport { Dialog } from '@syncfusion/ej2-popups';\n\nPdfViewer.Inject(Toolbar, Magnification, Navigation, LinkAnnotation, BookmarkView, ThumbnailView, Print, TextSelection, TextSearch, Annotation, FormFields, FormDesigner, PageOrganizer);\n\n\n    \n    interface UserDetails {\n        Name: string;\n        Eimg: string;\n        Mail: string;\n        fieldIds: any[];\n    }\n    // Render the PDF viewer control\n    let userDetails: UserDetails[] | any = [        \n        {\n            Name: 'Andrew Fuller',\n            Eimg: 'profile1',\n            Mail: 'andrew@mycompany.com',\n            fieldIds: [],\n        },\n        {\n            Name: 'Anne Dodsworth',\n            Eimg: 'profile2',\n            Mail: 'anne@mycompany.com',\n            fieldIds: [],\n        },\n    ];\n    \n    let currentUser = 'andrew@mycompany.com';\n    let isStatus = false;\n    let isPreventChange = false;\n    let finishedBackground = '#daeaf7';\n    let anneBackground = '#eff7ef';\n    let andrewBackground = '#ffefef';\n    let viewer = new PdfViewer({\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf\",\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib',\n        documentLoad: documentLoaded,\n    });\n    viewer.enableToolbar = false;\n    viewer.enableNavigationToolbar = false;\n    viewer.enableAnnotationToolbar =false;\n    viewer.designerMode = true;\n    viewer.downloadFileName = 'eSign_filling.pdf';\n    viewer.zoomMode = \"FitToPage\";\n\n    viewer.appendTo('#pdfViewer');\n\n    let toolbarObj = new EJToolbar({\n        overflowMode: 'Popup',\n        cssClass: 'template',\n        items: [\n            {\n                type: 'Input',\n                align: 'Left',\n                template:\n                    \"<div id='user-field' style='width: 200px;'><div class='user-dropdown' style='width: 200px;'> <input id='userMenu' width='200px'></input></div></div>\",\n            },\n            {\n                type: 'Input', \n                align: 'Right', \n                template: \"<div> <button id='finish-btn'>Finish Signing</button></div>\",\n            },\n        ],\n    });\n    toolbarObj.appendTo('#toolbar_user_viewer');\n\n    let listObj = new DropDownList({\n        dataSource: userDetails,\n        fields: { text: 'Mail', value: 'Eimg'},\n        index: 0,\n        width: '200px',\n        popupWidth: '215px',\n        itemTemplate: (data: UserDetails) => `\n            <div style=\"display:flex;\">\n                <img class=\"empImage\" style=\"border: 1px solid ${getBorderColor(data.Mail)};height:32px width:32px\" src=\"//npmci.syncfusion.com/development/demos/src/pdfviewer/images/employees/${data.Eimg}.png\" alt=\"employee\" />\n                <div>\n                    <div class=\"ename\" style=\"font-size:14px;height:18px;\">${data.Name}</div>\n                    <div class=\"mail\" style=\"font-size:12px;\">${data.Mail}</div>\n                </div>\n            </div>`,\n        valueTemplate: (data: UserDetails) => `\n            <div style=\"display:flex;\">\n                <img class=\"value\" style=\"border: 1px solid ${getBorderColor(data.Mail)}; margin: 0px 0px 5px 10px; border-radius:50%;\" src=\"//npmci.syncfusion.com/development/demos/src/pdfviewer/images/employees/${data.Eimg}.png\" height=\"32px\" width=\"32px\" alt=\"employee\" />\n                <div>\n                    <div class=\"name\" style=\"font-size:12px;margin-left: 12px;\">${data.Name}</div>\n                    <div class=\"mail\" style=\"font-size:10px;margin-left: 12px;\">${data.Mail}</div>\n                </div>\n            </div>`,\n    });\n    listObj.appendTo(\"#userMenu\");\n\n    \n    function getBorderColor(email: string): string {\n        return email === 'andrew@mycompany.com' ? 'red' : 'green';\n    }\n\n    listObj.select = function (args: ChangeEventArgs) {\n        currentUser = (args.itemData as UserDetails).Mail;\n        updateUserFormField();\n        if (isPreventChange) {\n            args.cancel = true;\n        }\n    };\n\n    let finishBtnObj = new Button({ cssClass: 'e-outline' });\n    finishBtnObj.appendTo('#finish-btn');\n    finishBtnObj.disabled = true;\n\n    finishBtnObj.element.onclick = function (): void {\n        for (var formField of viewer.formFieldCollections) {\n            viewer?.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground } as any);\n        }\n        const url: string = \"http://localhost:62728/api/pdfviewer/FlattenDownload\";\n        viewer.saveAsBlob().then((blob: Blob) => {\n            return convertBlobToBase64(blob);\n        }).then((base64String: string) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n            const requestData = JSON.stringify({ base64String: base64String });\n            xhr.onload = () => {\n                if (xhr.status === 200) {\n                    const responseBase64 = xhr.responseText.split('base64,')[1];\n                    if (responseBase64) {\n                        const blob = createBlobFromBase64(responseBase64, 'application/pdf');\n                        const blobUrl = URL.createObjectURL(blob);\n                        downloadDocument(blobUrl);\n                        viewer.load(xhr.responseText, null);\n                        finishBtnObj.disabled = true;\n                        listObj.enabled = false;\n                    } else {\n                        console.error('Invalid base64 response.');\n                    }\n                } else {\n                    console.error('Download failed:', xhr.statusText);\n                }\n            };\n            xhr.onerror = () => {\n                console.error('An error occurred during the download:', xhr.statusText);\n            };\n            xhr.send(requestData);\n        }).catch((error: Error) => {\n            console.error('Error saving Blob:', error);\n        });\n    };\n\n    function convertBlobToBase64(blob: Blob): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = () => {\n                if (typeof reader.result === 'string') {\n                    resolve(reader.result);\n                } else {\n                    reject(new Error('Failed to convert Blob to Base64'));\n                }\n            };\n            reader.onerror = (error) => reject(error);\n        });\n    }\n\n    function createBlobFromBase64(base64String: string, contentType: string): Blob {\n        const sliceSize = 512;\n        const byteCharacters = atob(base64String);\n        const byteArrays: Uint8Array[] = [];\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n            const byteNumbers = new Array(slice.length);\n            for (let i = 0; i < slice.length; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            const byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n        }\n        return new Blob(byteArrays, { type: contentType });\n    }\n\n    function downloadDocument(blobUrl: string): void {\n        const anchorElement = document.createElement('a');\n        anchorElement.href = blobUrl;\n        anchorElement.target = '_parent';\n        const downloadFileName = viewer.fileName || 'default.pdf';\n        anchorElement.download = downloadFileName.endsWith('.pdf')\n            ? downloadFileName\n            : `${downloadFileName.split('.pdf')[0]}.pdf`;\n        document.body.appendChild(anchorElement);\n        anchorElement.click();\n        document.body.removeChild(anchorElement);\n        URL.revokeObjectURL(blobUrl);\n    }\n\n    let dialogObj = new Dialog({\n        width: '350px',\n        minHeight: '50px',\n        isModal: true,\n        visible: isStatus,\n        buttons: [{ click: dlgButtonClick, buttonModel: { content: 'OK', isPrimary: true } }],\n    });\n    dialogObj.appendTo('#dialog');\n\n    viewer.formFieldPropertiesChange = function (args: any) {\n        var errorMessage = \"Required Field(s): \";\n        var forms: any = viewer.formFieldCollections;\n        var flag = false;\n        var isAllFieldFilled = true;\n        var radioGroupName = \"\";\n        for (var i = 0; i < forms.length; i++) {\n            var text = \"\";\n            {\n                if (forms[i].type.toString() == \"Checkbox\" && forms[i].isChecked == false) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                else if (forms[i].type == \"RadioButton\" && flag == false) {\n                    radioGroupName = forms[i].name;\n                    if (forms[i].isSelected == true)\n                        flag = true;\n                }\n                else if (forms[i].type.toString() != \"Checkbox\" && forms[i].type != \"RadioButton\" && (forms[i].value === \"\" || ((typeof args.newValue === 'string') && args.newValue === \"\"))) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                else if (forms[i].type.toString() == \"DropdownList\" && forms[i].value.length == 0) {\n                    text = forms[i].name;\n                    isAllFieldFilled = false;\n                }\n                if (text != \"\") {\n                    if (errorMessage == \"Required Field(s): \") {\n                        errorMessage += text;\n                    }\n                    else {\n                        errorMessage += \", \" + text;\n                    }\n                }\n            }\n        }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            isAllFieldFilled = false;\n        }\n        if (isAllFieldFilled) {\n            finishBtnObj.disabled = false;\n        } else {\n            finishBtnObj.disabled = true;\n        }\n    };\n\n    function dlgButtonClick() {\n        isStatus = false;\n        dialogObj.hide();\n    }\n\n    function updateUserFormField() {\n        let otherFormFieldDetails = viewer.formFieldCollections.filter((formField : any) => {\n            return formField.customData['author'] === \"anne\";\n          });\n        let currentFormFieldDetails = viewer.formFieldCollections.filter((formField: any) => formField.customData.author === \"andrew\");\n        if (currentUser === 'andrew@mycompany.com') {\n            otherFormFieldDetails.forEach((field: any) => {\n                if (field.value !== '') {\n                    let mainFieldUpdateData: any = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n                    viewer.formDesigner.updateFormField(field.id, mainFieldUpdateData);\n\n                    currentFormFieldDetails.forEach((currentField: any) => {\n                        let currentFieldUpdateData: any = {\n                            backgroundColor: andrewBackground,\n                            isReadOnly: true\n                        };\n\n                        viewer.formDesigner.updateFormField(currentField.id, currentFieldUpdateData);\n                    });\n                }\n                else {\n                    currentFormFieldDetails.forEach(function(currentField) {\n                        let  currentFieldUpdateData: any = {\n                            backgroundColor: andrewBackground,\n                        };\n\n                        viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                    });\n                }\n                let otherUserField = document.getElementById(field.id + '_content_html_element');\n                if (otherUserField) {\n                    let currentFormField: any = viewer.formFieldCollections.find((formField: any) => formField.id === field.id);\n                    if (currentFormField.type !== 'DropDown' && otherUserField) {\n                        if (!currentFormField.value) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' }as any);\n                        }\n                    } else {\n                        if (currentFormField.value.length !== 0 && otherUserField) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' }as any);\n                        }\n                    }\n                }\n            });\n        } else {\n            validation(currentFormFieldDetails);\n            if (!isStatus) {\n                currentFormFieldDetails.forEach((field: any) => {\n                    let currentFieldUpdateData: any = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n                    viewer.formDesigner.updateFormField(field.id, currentFieldUpdateData);\n\n                    otherFormFieldDetails.forEach((otherField: any) => {\n                        let otherFieldUpdateData: any = {\n                            backgroundColor: anneBackground,\n                            isReadOnly: false\n                        };\n\n                        viewer.formDesigner.updateFormField(otherField.id, otherFieldUpdateData );\n                    });\n                });\n                otherFormFieldDetails.forEach((field: any) => {\n                    viewer.formDesignerModule.updateFormField(field, { visibility: 'visible' } as any);\n                });\n            }\n        }\n    }\n\n    function validation(forms: any) {\n        var errorMessage = \"Required Field(s): \";\n        var flag = false;\n        var isAllFieldFilled = true;\n        var radioGroupName = \"\";\n\n        for (let i = 0; i < forms.length; i++) {\n            let text = \"\";\n      \n            if (forms[i].isRequired) {\n              switch (forms[i].type.toString()) {\n                case \"Checkbox\":\n                  if (!forms[i].isChecked) {\n                    text = forms[i].name;\n                  }\n                  break;\n      \n                case \"RadioButton\":\n                  if (!flag) {\n                    radioGroupName = forms[i].name;\n                    if (forms[i].isSelected) {\n                      flag = true;\n                    }\n                  }\n                  break;\n      \n                case \"DropdownList\":\n                  if (forms[i].value.length === 0) {\n                    text = forms[i].name;\n                  }\n                  break;\n      \n                default:\n                  if (!forms[i].value || (typeof forms[i].newValue === 'string' && forms[i].newValue === \"\")) {\n                    text = forms[i].name;\n                  }\n                  break;\n              }\n      \n              if (text) {\n                errorMessage = errorMessage === \"Required Field(s): \" ? errorMessage + text : errorMessage + \", \" + text;\n              }\n            }\n          }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            isAllFieldFilled = false;\n        }\n        if (errorMessage != \"Required Field(s): \") {\n            isStatus = true;\n            dialogObj.content = errorMessage;\n            dialogObj.show();\n            isPreventChange = true;\n        }\n        else {\n            isStatus = false;\n            isPreventChange = false;\n        }\n    }\n\n    function documentLoaded(): void {\n        viewer.designerMode = false;\n        updateUserFormField();\n    }\n"}