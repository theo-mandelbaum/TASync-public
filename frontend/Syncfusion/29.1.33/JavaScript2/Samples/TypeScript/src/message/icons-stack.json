{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section msg-icon-section\">\n    <div class=\"content-section\">\n        <button id=\"btn1\"></button>\n        <div id=\"msg_default_icon\"></div>\n        <button id=\"btn2\"></button>\n        <div id=\"msg_info_icon\"></div>\n        <button id=\"btn3\"></button>\n        <div id=\"msg_success_icon\"></div>\n        <button id=\"btn4\"></button>\n        <div id=\"msg_warning_icon\"></div>\n        <button id=\"btn5\"></button>\n        <div id=\"msg_error_icon\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"showIcon\">\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"checkbox\" id=\"showCloseIcon\">\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n<style>\n    .msg-icon-section .content-section {\n        margin: 0 auto;\n        max-width: 520px;\n        padding-top: 10px;\n    }\n\n    .msg-icon-section .e-message {\n        margin: 10px 0;\n    }\n\n    .msg-icon-section .e-btn {\n        display: block;\n        margin: 10px 0;\n    }\n\n    .msg-icon-section .e-btn.msg-hidden {\n        display: none;\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n *  Message with icon sample\n */\nimport { CheckBox, ChangeEventArgs, Button } from '@syncfusion/ej2-buttons';\nimport { Message } from '@syncfusion/ej2-notifications';\nimport { getComponent } from '@syncfusion/ej2-base';\n\n\n    \n    let showButton: Button = new Button({ content: 'Show Default Message', cssClass: \"e-outline e-primary msg-hidden\" });\n    showButton.appendTo('#btn1');\n    showButton.element.onclick = (): void => {\n        show(msgDefaultIcon, showButton);\n    }\n\n    let infoButton: Button = new Button({ content: 'Show Info Message', cssClass: \"e-outline e-primary e-info msg-hidden\" });\n    infoButton.appendTo('#btn2');\n    infoButton.element.onclick = (): void => {\n        show(msgInfoIcon, infoButton);\n    }\n    let successButton: Button = new Button({ content: 'Show Success Message', cssClass: \"e-outline e-primary e-success msg-hidden\" });\n    successButton.appendTo('#btn3');\n    successButton.element.onclick = (): void => {\n        show(msgSuccessIcon, successButton);\n    }\n\n    let warningButton: Button = new Button({ content: 'Show Warning Message', cssClass: \"e-outline e-primary e-warning msg-hidden\" });\n    warningButton.appendTo('#btn4');\n    warningButton.element.onclick = (): void => {\n        show(msgWarningIcon, warningButton);\n    }\n\n    let errorButton: Button = new Button({ content: 'Show Error Message', cssClass: \"e-outline e-primary e-danger msg-hidden\" });\n    errorButton.appendTo('#btn5');\n    errorButton.element.onclick = (): void => {\n        show(msgErrorIcon, errorButton);\n    }\n\n    let msgDefaultIcon: Message = new Message({\n        content: \"Editing is restricted\",\n        showCloseIcon: true,\n        closed: () => {\n            showButton.element.classList.remove('msg-hidden');\n        }\n    });\n    msgDefaultIcon.appendTo('#msg_default_icon');\n\n    let msgInfoIcon: Message = new Message({\n        content: \"Please read the comments carefully\",\n        severity: \"Info\",\n        showCloseIcon: true,\n        closed: () => {\n            infoButton.element.classList.remove('msg-hidden');\n        }\n    });\n    msgInfoIcon.appendTo('#msg_info_icon');\n\n    let msgSuccessIcon: Message = new Message({\n        content: \"Your message has been sent successfully\",\n        severity: \"Success\",\n        showCloseIcon: true,\n        closed: () => {\n            successButton.element.classList.remove('msg-hidden');\n        }\n    });\n    msgSuccessIcon.appendTo('#msg_success_icon');\n\n    let msgWarningIcon: Message = new Message({\n        content: \"There was a problem with your network connection\",\n        severity: \"Warning\",\n        showCloseIcon: true,\n        closed: () => {\n            warningButton.element.classList.remove('msg-hidden');\n        }\n    });\n    msgWarningIcon.appendTo('#msg_warning_icon');\n\n    let msgErrorIcon: Message = new Message({\n        content: \"A problem occurred while submitting your data\",\n        severity: \"Error\",\n        showCloseIcon: true,\n        closed: () => {\n            errorButton.element.classList.remove('msg-hidden');\n        }\n    });\n    msgErrorIcon.appendTo('#msg_error_icon');\n\n    let severityCheckbox: CheckBox = new CheckBox({\n        label: 'Severity Icon',\n        name: 'icons',\n        value: 'severity-icon',\n        checked: true,\n        change: (args: ChangeEventArgs) => {\n            changeProp(\"showIcon\", args.checked);\n        }\n    });\n    severityCheckbox.appendTo('#showIcon');\n\n    let CloseCheckbox: CheckBox = new CheckBox({\n        label: 'Close Icon',\n        name: 'icons',\n        value: \"close-icon\",\n        checked: true,\n        change: (args: ChangeEventArgs) => {\n            changeProp(\"showCloseIcon\", args.checked);\n        }\n    });\n    CloseCheckbox.appendTo('#showCloseIcon');\n\n    function show(message: Message, btn: Button): void {\n        message.visible = true;\n        btn.element.classList.add('msg-hidden');\n    }\n\n    function changeProp(prop: string, value: boolean): void {\n        let msgTypes: string[] = [\"default\", \"info\", \"success\", \"warning\", \"error\"];\n        for (let i: number = 0; i <= 4; i++) {\n            let msgObj: Message = getComponent(document.getElementById(\"msg_\" + msgTypes[i] + \"_icon\"), \"message\") as Message;\n            if (msgObj) {\n                if (value) {\n                    msgObj[prop] = true;\n                } else {\n                    msgObj[prop] = false;\n                }\n            }\n        }\n    }\n\n"}