{"treemap-data/import.ts":"// custom code start\n//tslint:disable\n// custom code end\nexport let importData: object[] = [\n    { dataType: \"Import\", type: \"Animal products\",   product: \"2010\", sales: 20839332874 },\n    { dataType: \"Import\", type: \"Animal products\",   product: \"2011\", sales: 23098635589 },\n    { dataType: \"Import\", type: \"Chemical products\", product: \"2010\", sales: 141637951510 },\n    { dataType: \"Import\", type: \"Chemical products\", product: \"2011\", sales: 161550338209 },\n    { dataType: \"Import\", type: \"Base metals\",       product: \"2010\", sales: 86079439944 },\n    { dataType: \"Import\", type: \"Base metals\",       product: \"2011\", sales: 103821671535 },\n    { dataType: \"Import\", type: \"Textile articles\",       product: \"2010\", sales: 97126140830 },\n    { dataType: \"Import\", type: \"Textile articles\",       product: \"2011\", sales: 104980750811 },\n    { dataType: \"Export\", type: \"Animal products\",   product: \"2010\", sales:  15845503378 },\n    { dataType: \"Export\", type: \"Animal products\",   product: \"2011\", sales:  20650111620 },\n    { dataType: \"Export\", type: \"Chemical products\", product: \"2010\", sales: 136100054087 },\n    { dataType: \"Export\", type: \"Chemical products\", product: \"2011\", sales: 146341672411 },\n    { dataType: \"Export\", type: \"Base metals\",       product: \"2010\", sales: 59060592813 },\n    { dataType: \"Export\", type: \"Base metals\",       product: \"2011\", sales: 71785882641 },\n    { dataType: \"Export\", type: \"Textile articles\",       product: \"2010\", sales: 20982380561 },\n    { dataType: \"Export\", type: \"Textile articles\",       product: \"2011\", sales: 26016143783 }\n];","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n   \n<div class=\"col-lg-9 control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"import-container\"></div>\n    </div>\n    <!-- source link -->\n    <div style=\"float: right; margin-right: 10px;\">Source:\n        <a href=\"https://www.indexmundi.com/united_states/imports_commodities.html\" target=\"_blank\">www.indexmundi.com</a>\n    </div>\n</div>\n<!-- property panel-->\n<div class=\"col-lg-3 property-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%;\" role=\"none\">\n            <colgroup>\n                <col span=\"1\" style=\"width: 50%;\">\n                <col span=\"1\" style=\"width: 50%;\">\n             </colgroup> \n             <tbody>\n             <tr style=\"height: 50px\">\n                    <td>\n                        <div><b>Highlight</b></div>\n                    </td>                        \n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div> Enable</div>\n                    </td>\n                    <td>\n                        <div style=\"margin-top: 12px;\">\n                            <input type=\"checkbox\" id=\"highlightEnable\" checked=\"\">\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div>Mode</div>\n                    </td>\n                    <td>\n                        <div>\n                            <select name=\"selectIndex\" autocomplete=\"off\" id=\"highlightMode\">\n                                <option value=\"Item\" selected=\"\">Item</option>\n                                <option value=\"Child\">Child</option>\n                                <option value=\"Parent\">Parent</option>\n                                <option value=\"All\">All</option>\n                            </select>\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                        <td>\n                            <div><b>Selection</b></div>\n                        </td>\n                            \n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div>Enable</div>\n                        </td>\n                        <td>\n                            <div style=\"margin-top: 12px;\">\n                                <input type=\"checkbox\" id=\"SelectionEnable\" checked=\"\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div> Mode</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select name=\"selectIndex\" autocomplete=\"off\" id=\"selectionMode\">\n                                    <option value=\"Item\" selected=\"\">Item</option>\n                                    <option value=\"Child\">Child</option>\n                                    <option value=\"Parent\">Parent</option>\n                                    <option value=\"All\">All</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    </tbody>\n        </table>\n    </div>\n    \n    \n    \n    \n    \n</main>\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-treemap\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}/**\n * Selection sample\n */\n// custom code start\n\n// custom code end\nimport { TreeMap, TreeMapHighlight, TreeMapSelection, HighLightMode, SelectionMode, TreeMapAjax } from '@syncfusion/ej2-treemap';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { importData } from './treemap-data/import';\nTreeMap.Inject(TreeMapHighlight, TreeMapSelection);\nimport { TreeMapTheme, ILoadEventArgs } from '@syncfusion/ej2-treemap';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\n\n    // custom code start\n    \n    let treemapload: EmitType<ILoadEventArgs> = (args: ILoadEventArgs) => {\n        let theme: string = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material';\n        args.treemap.theme = <TreeMapTheme>((theme.charAt(0).toUpperCase() +\n        theme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i,Â 'Contrast').replace(/5.3/i, '5'));\n    };\n    // custom code end\n    let treemap: TreeMap = new TreeMap({\n        // custom code start\n        load: treemapload,\n        // custom code end\n        titleSettings: {\n            text: 'Import and Export details of US',\n            textStyle: { fontFamily: 'Segoe UI' }\n        },\n        dataSource: importData,\n        weightValuePath: 'sales',\n        levels: [\n            { groupPath: 'dataType', fill: '#c5e2f7', headerStyle: { size: '16px' }, headerAlignment: 'Center', groupGap: 5 },\n            { groupPath: 'product', fill: '#a4d1f2', headerAlignment: 'Center' , groupGap: 2 }\n        ],\n        leafItemSettings: {\n            labelPath: 'type',\n            fill: '#8ebfe2',\n            labelPosition: 'Center',\n            gap: 10,\n            labelStyle: {\n                fontFamily: 'Segoe UI'\n            }\n        },\n        selectionSettings: {\n            enable: true,\n            fill: '#58a0d3',\n            border: { width: 0.3, color: 'black' },\n            opacity: '1'\n        },\n        highlightSettings: {\n            enable: true,\n            fill: '#71b0dd',\n            border: { width: 0.3, color: 'black' },\n            opacity: '1'\n        }\n    });\n    treemap.appendTo('#import-container');\n    // Visiblity for highlight mode\n    let highlightChange: EmitType<CheckBoxChangeEvents>;\n    let highlightCheckBox: CheckBox = new CheckBox(\n    {\n        change: highlightChange, checked: true\n    },\n    '#highlightEnable');\n    // Visiblity for Selection mode\n    let selectionChange: EmitType<CheckBoxChangeEvents>;\n    let selectionCheckBox: CheckBox = new CheckBox(\n    {\n        change: selectionChange, checked: true\n    },\n    '#SelectionEnable');\n    highlightCheckBox.change = highlightChange = (e: CheckBoxChangeEvents) => {\n        treemap.highlightSettings.enable = e.checked;\n        treemap.refresh();\n    };\n    selectionCheckBox.change = selectionChange = (e: CheckBoxChangeEvents) => {\n        treemap.selectionSettings.enable = e.checked;\n        treemap.refresh();\n    };\n    // highlight type (Item, child, parent, All)\n    let highlightMode: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Select highlight type',\n        width: '100%',\n        change: () => {\n            treemap.highlightSettings.mode = <HighLightMode>highlightMode.value;\n            treemap.refresh();\n        }\n    });\n    highlightMode.appendTo('#highlightMode');\n    // Selection type (Item, child, parent, All)\n    let selectionMode: DropDownList = new DropDownList({\n        index: 0,\n        placeholder: 'Selection selection type',\n        width: '100%',\n        change: () => {\n            treemap.selectionSettings.mode = <SelectionMode>selectionMode.value;\n            treemap.refresh();\n        }\n    });\n    selectionMode.appendTo('#selectionMode');\n"}