{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section integration-control-section\">\n    <div class=\"integration-speechToText-section\">\n        <div id=\"aiAssistView\"></div>\n        <div id=\"stt-toast\"></div>\n    </div>  \n</div>\n\n\n\n\n<script id=\"bannerContent\" type=\"text/x-jsrender\">\n    <div class=\"banner-info\">\n        <div class=\"e-icons e-listen-icon\"></div>    \n        <h3>Speech To Text</h3>\n        <i>Click the below mic-button to convert your voice to text.</i>\n    </div>\n</script>\n\n<script id=\"footerContent\" type=\"text/x-jsrender\">\n    <div class=\"e-footer-wrapper\">\n        <div id=\"assistview-footer\" class=\"content-editor\" contenteditable=\"true\" placeholder=\"Click to speak or start typing...\"></div>\n        <div class=\"option-container\">\n            <button id=\"speechToText\"></button>\n            <button id=\"assistview-sendButton\" class=\"e-assist-send e-icons\" role=\"button\"></button>\n        </div>\n    </div>\n</script>\n\n<style>\n\n.integration-speechToText-section {\n    height: 550px;\n    width: 550px;\n    margin: 0 auto;\n}\n\n.integration-speechToText-section .banner-info .e-listen-icon:before {\n    font-size: 35px;\n}\n\n.integration-speechToText-section .banner-info {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 330px;\n    text-align: center;\n}\n\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n    border: none;\n    background: none;\n    cursor: pointer;\n}\n\n.integration-speechToText-section .e-footer-wrapper #speechToText.visible,\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton.visible {\n    display: inline-block;\n}\n\n.integration-speechToText-section .e-footer-wrapper #speechToText,\n.integration-speechToText-section .e-footer-wrapper #assistview-sendButton {\n    display: none;\n}\n\n@media only screen and (max-width: 750px) {\n    .integration-speechToText-section {\n        width: 100%;\n    }\n}\n\n.integration-speechToText-section .e-footer-wrapper {\n    display: flex;\n    border: 1px solid #c1c1c1;\n    padding: 5px 5px 5px 10px;\n    margin: 5px 5px 0 5px;\n    border-radius: 30px;\n}\n\n.integration-speechToText-section .e-footer-wrapper .content-editor {\n    width: 100%;\n    overflow-y: auto;\n    font-size: 14px;\n    min-height: 25px;\n    max-height: 200px;\n    padding: 10px;\n    scrollbar-color: #c1c1c1 transparent;\n}\n\n.integration-speechToText-section .e-footer-wrapper .content-editor[contentEditable=true]:empty:before {\n    content: attr(placeholder)\n}\n\n.integration-speechToText-section .option-container {\n    align-self: flex-end;\n}\n\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-interactive-chat\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { AIAssistView, PromptRequestEventArgs } from '@syncfusion/ej2-interactive-chat';\n\nimport { SpeechToText, TranscriptChangedEventArgs } from '@syncfusion/ej2-inputs';\nimport { Toast } from '@syncfusion/ej2-notifications';\n\n\n    \n\n    // Initialize Toast notification for errors\n    var toastObj : Toast = new Toast({\n        position: {\n            X: 'Right'\n        },\n        target: '.integration-control-section',\n        cssClass: 'e-toast-danger'\n    });\n    toastObj.appendTo('#stt-toast');\n\n    // Initialize AI AssistView component\n    let aiAssistViewObj: AIAssistView = new AIAssistView({\n        promptRequest: onPromptRequest,\n        footerTemplate: \"#footerContent\",\n        bannerTemplate: \"#bannerContent\",\n        toolbarSettings: {\n            items: [{ iconCss: 'e-icons e-refresh', align: 'Right' }],\n            itemClicked: toolbarItemClicked\n        }\n    });\n    aiAssistViewObj.appendTo('#aiAssistView');\n\n    // Initialize Speech-to-Text component\n    let speechToTextObj : SpeechToText = new SpeechToText({\n        transcriptChanged: onTranscriptChange,\n        onStop: onListeningStop,\n        created: onCreated,\n        onError: onErrorHandler,\n        cssClass: 'e-flat'\n    });\n    speechToTextObj.appendTo('#speechToText');\n\n     // Handles AI prompt requests\n    function onPromptRequest(): void {\n        setTimeout(() => {\n            aiAssistViewObj.addPromptResponse('For real-time prompt processing, connect the AIAssistView component to your preferred AI service.');\n            toggleButtons();\n        }, 2000);\n    }\n\n     // Handles toolbar button clicks\n    function toolbarItemClicked(args: any): void {\n        if (args.item.iconCss === 'e-icons e-refresh') {\n            aiAssistViewObj.prompts = [];\n        }\n    }\n\n    // Handles actions when speech listening stops\n    function onListeningStop() {\n        toggleButtons();\n    }\n\n    function onTranscriptChange(args: any): void {\n        (document.querySelector('#assistview-footer') as HTMLElement).innerText = args.transcript;\n    }\n\n    // Handles actions after component creation\n    function onCreated(): void {\n        let assistviewFooter = document.querySelector('#assistview-footer') as HTMLElement;\n        let sendButton = document.querySelector('#assistview-sendButton') as HTMLElement;\n\n        sendButton.addEventListener('click', sendIconClicked);\n        assistviewFooter.addEventListener('input', toggleButtons);\n\n        assistviewFooter.addEventListener('keydown', function (e) {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                    sendIconClicked();\n                    e.preventDefault(); // Prevent the default behavior of the Enter key\n                }\n        });\n\n        toggleButtons();\n    }\n\n    // Toggles the visibility of the send and speech-to-text buttons\n    function toggleButtons(): void {\n        let assistviewFooter = document.querySelector('#assistview-footer') as HTMLElement;\n        let sendButton = document.querySelector('#assistview-sendButton') as HTMLElement;\n        let speechButton = document.querySelector('#speechToText') as HTMLElement;\n\n        let hasText = assistviewFooter.innerText.trim() !== '';\n        sendButton.classList.toggle('visible', hasText);\n        speechButton.classList.toggle('visible', !hasText);\n\n        if (!hasText && (assistviewFooter.innerHTML === '<br>' || !assistviewFooter.innerHTML.trim())) {\n            assistviewFooter.innerHTML = '';\n        }\n    }\n\n    // Handles send button click event\n    function sendIconClicked(): void {\n        var assistviewFooter = document.querySelector('#assistview-footer') as HTMLElement;\n        aiAssistViewObj.executePrompt(assistviewFooter.innerText);\n        assistviewFooter.innerText = \"\";\n    }\n\n    // Handles errors and displays toast notifications\n    function onErrorHandler(args: any) {\n        toastObj.content = args.errorMessage;\n        if (args.error === 'unsupported-browser') {\n            speechToTextObj.disabled = true;\n            toastObj.show({ timeOut: 0 });\n        } else {\n            toastObj.show({ timeOut: 5000 });\n        }\n    }\n\n\n"}