{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <div class=\"default-speechToText-section\">\n        <div class=\"speechToText-container\">\n            <button id=\"speech-to-text\"></button>\n            <mark class=\"speech-recognition-status\">Click the mic button to start speaking...</mark>\n        </div>\n        <div class=\"output-container\">\n            <h4>Live Speech Transcription</h4>\n            <textarea id=\"output-textarea\"></textarea>\n            <div class=\"output-options\">\n                <button id=\"transcript-copy-button\" class=\"e-btn\" disabled=\"\">Copy</button>\n                <button id=\"transcript-clear-button\" class=\"e-btn\">Clear</button>\n            </div>\n        </div>\n    </div>  \n</div>\n\n<div class=\"col-lg-4 default-speechToText property-section\">\n    <div class=\"property-panel-header\"> Properties </div>\n    <div class=\"property-panel-content\">\n        <table>\n            <tbody>\n                <tr>\n                    <td> Styling </td>\n                    <td>\n                        <select id=\"stt-styling-ddl\">\n                            <option value=\"\">Normal</option>\n                            <option value=\"e-primary\">Primary</option>                          \n                            <option value=\"e-success\">Success</option>\n                            <option value=\"e-warning\">Warning</option>\n                            <option value=\"e-danger\">Danger</option>\n                            <option value=\"e-flat\">Flat</option>\n                            <option value=\"e-info\">Info</option>\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td> Language </td>\n                    <td>\n                        <select id=\"stt-lang-ddl\">\n                            <option value=\"en-US\">English, US</option>\n                            <option value=\"de-DE\">German, DE</option>\n                            <option value=\"zh-CN\">Chinese, CN</option>\n                            <option value=\"fr-FR\">French, FR</option>\n                            <option value=\"ar-SA\">Arabic, SA</option>\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td>Interim results</td>\n                    <td>\n                        <input id=\"interim-switch\" type=\"checkbox\">\n                    </td>\n                </tr>\n                <tr>\n                    <td>Show tooltip</td>\n                    <td>\n                        <input id=\"tooltip-switch\" type=\"checkbox\">\n                    </td>\n                </tr>\n                <tr>\n                    <td>Show icon with text</td>\n                    <td>\n                        <input id=\"icon-with-text-switch\" type=\"checkbox\">\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n\n\n\n\n\n<style>\n\n    .default-speechToText-section,\n    .default-speechToText-section .output-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .default-speechToText-section {\n        gap: 50px;\n        margin: 50px auto;\n    }\n\n    .default-speechToText-section .output-container {\n        width: 75%;\n        gap: 10px; \n    }\n\n    .default-speechToText-section .output-container h4 {\n        margin: 0;\n        align-self: baseline;\n    }\n\n    .default-speechToText-section .speech-recognition-status{\n        font-size: 12px;\n    }\n\n    .default-speechToText .property-panel-content td {\n        padding: 10px 0px;\n        width: 50%;\n    }\n\n    .default-speechToText-section .speechToText-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 15px;\n    }\n\n    #transcript-copy-button:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n    }  \n\n    @media only screen and (max-width: 750px) {\n        .default-speechToText-section .output-container {\n            width: 100%;\n        }\n\n        .default-speechToText-section .output-options {\n            width: 100%;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        }\n    }\n\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { SpeechToText, TextArea } from '@syncfusion/ej2-inputs';\nimport { Button, Switch } from '@syncfusion/ej2-buttons';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n\n    \n    var isSupportedBrowser = true;\n\n    // Initialize Speech to Text component\n    let speechToTextObj: SpeechToText = new SpeechToText({\n        transcriptChanged: onTranscriptChange,\n        onStart: onListeningStart,\n        onStop: onListeningStop,\n        onError: onErrorHandler\n    });\n    speechToTextObj.appendTo('#speech-to-text');\n\n    // Initialize TextArea for output\n    let textareaObj: TextArea = new TextArea({\n        rows: 10,\n        resizeMode: 'None',\n        cssClass: 'e-outline',\n        placeholder: 'Transcribed text will appear here...',\n        input: function() { toggleCopyButtonState(); }\n    });\n    textareaObj.appendTo('#output-textarea');\n\n    // Initialize DropDownList for styling options\n    let stylingDDLObj: DropDownList = new DropDownList({\n        change: (args) => {\n            speechToTextObj.cssClass = args.value;\n        }\n    });\n    stylingDDLObj.appendTo('#stt-styling-ddl');\n\n    // Initialize DropDownList for language options\n    let langDDLObj: DropDownList = new DropDownList({\n        change: (args) => {\n            speechToTextObj.lang = args.value;\n        }\n    });\n    langDDLObj.appendTo('#stt-lang-ddl');\n\n    // Initialize Switch for interim results\n    let interimSwitchObj: Switch = new Switch({\n        checked: true,\n        change: (args) => {\n            speechToTextObj.allowInterimResults = args.checked;\n        }\n    });\n    interimSwitchObj.appendTo('#interim-switch');\n\n    // Initialize Switch for tooltip\n    let tooltipSwitchObj: Switch = new Switch({\n        checked: true,\n        change: (args) => {\n            speechToTextObj.showTooltip = args.checked;\n        }\n    });\n    tooltipSwitchObj.appendTo('#tooltip-switch');\n\n    // Initialize Switch for icon with text\n    let iconWithTextSwitchObj: Switch = new Switch({\n        change: (args) => {\n            speechToTextObj.buttonSettings = {\n                content: args.checked ? 'Start Listening' : '',\n                stopContent: args.checked ? 'Stop Listening' : ''\n            };\n        }\n    });\n    iconWithTextSwitchObj.appendTo('#icon-with-text-switch');\n\n    // Event handler for transcript change\n    function onTranscriptChange(args: any) {\n        if (!args.isInterimResult)\n            args.transcript += ' ';\n\n        textareaObj.value = args.transcript;\n        toggleCopyButtonState();\n    }\n\n    // Event handler for listening start\n    function onListeningStart() {\n        if (isSupportedBrowser) {\n            if (textareaObj.value)\n                speechToTextObj.transcript = textareaObj.value + '\\n';\n\n            updateStatus('Listening... Speak now...');\n        } else {\n            updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        langDDLObj.enabled = false;\n        interimSwitchObj.disabled = true;\n    }\n\n    // Event handler for listening stop\n    function onListeningStop(args: any) {\n        if (isSupportedBrowser) {\n            if (args.isInteracted)\n            updateStatus('Click the mic button to start speaking...');\n        } else {\n            updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        langDDLObj.enabled = true;\n        interimSwitchObj.disabled = false;\n    }\n\n    // Event handler for errors\n    function onErrorHandler(args: any) {\n        updateStatus(args.errorMessage);\n\n        if (args.error === 'unsupported-browser')\n            isSupportedBrowser = false;\n    }\n\n     // Function to updates the speech recognition status message\n    function updateStatus(status: string) {\n        (document.querySelector('.speech-recognition-status') as HTMLElement).innerText = status;\n    }\n\n    function toggleCopyButtonState () {\n        var copyButton = document.getElementById('transcript-copy-button') as HTMLButtonElement;\n        var hasText = textareaObj.element.value.trim() !== '';\n        copyButton.disabled = hasText ? false : true;\n    }\n\n     // Event listener for copy button\n    (document.getElementById('transcript-copy-button') as HTMLElement).addEventListener('click', function() {\n        let copyText = textareaObj.value;\n        let copyBtnElem = this;\n\n        if (copyText && navigator.clipboard) {\n            navigator.clipboard.writeText(copyText).then(() => {\n                copyBtnElem.innerText = 'Copied!';\n                setTimeout(() => {\n                    copyBtnElem.innerText = 'Copy';\n                }, 1000);\n            }).catch((err) => {\n                console.error('Clipboard write failed', err);\n            });\n        }\n    });\n\n    // Event listener for clear button\n    (document.getElementById('transcript-clear-button') as HTMLElement).addEventListener('click', () => {\n        textareaObj.value = textareaObj.element.value = speechToTextObj.transcript = '';\n        toggleCopyButtonState();\n    });\n\n"}