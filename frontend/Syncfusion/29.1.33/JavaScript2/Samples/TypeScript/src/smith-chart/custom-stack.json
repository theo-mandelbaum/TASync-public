{"theme-color.ts":"import { ISmithchartLoadEventArgs, SmithchartTheme } from \"@syncfusion/ej2/charts\";\n\nexport function loadSmithChartTheme(args: ISmithchartLoadEventArgs): void {\n    let theme: string = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.smithchart.theme = <SmithchartTheme>(theme.charAt(0).toUpperCase() + theme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast'));\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <div id=\"container\" class=\"row\">\n    </div>\n</div>\n<!-- property panel-->\n<div class=\"col-lg-3 property-section\">\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>\n    <table id=\"property\" style=\"width:100%\" title=\"Properties\">\n        <tbody>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\" id=\"radius1\">\n                    Radius<span>&nbsp;&nbsp;&nbsp;10</span>\n                </td>\n                <td style=\"width: 70%\">\n                    <div>\n                        <div id=\"radius\"></div>\n                    </div>\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Marker\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"marker\" id=\"marker\">\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Data Label\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"datalabel\" id=\"datalabel\">\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Animation\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"high\" id=\"animate\">\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Tooltip\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"high\" id=\"tooltip\" checked=\"\">\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Legend\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" name=\"high\" id=\"legend\" checked=\"\">\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\" class=\"property-text\">\n                    Legend Position\n                </td>\n                <td style=\"width: 50%\">\n                    <select id=\"legend1\" style=\"width: 50px; height: 20px\">\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"right\">Right</option>\n                        <option value=\"left\">Left</option>\n                    </select>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}// custom code start\n\n//tslint:disable\n// custom code end\n/**\n * Customization sample for smith chart\n */\nimport { Smithchart, SmithchartLegend, TooltipRender, ISmithchartLoadEventArgs, SmithchartTheme } from '@syncfusion/ej2-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Slider, SliderChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents} from '@syncfusion/ej2-buttons';\nimport { loadSmithChartTheme } from './theme-color';\nSmithchart.Inject(SmithchartLegend, TooltipRender);\n\n    // custom code start\n    \n    // custom code end\n    let smithchart: Smithchart = new Smithchart({\n        // custom code start\n        load: (args: ISmithchartLoadEventArgs) => {\n            loadSmithChartTheme(args);\n        },\n        // custom code end\n        horizontalAxis: {\n            minorGridLines: {\n                visible: true\n            }\n        },\n        radialAxis: {\n            minorGridLines: {\n                visible: true\n            }\n        },\n        series: [\n            {\n                points: [\n                    { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },\n                    { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 4 },\n                    { resistance: 3.5, reactance: 3 }, { resistance: 2.5, reactance: 2 },\n                    { resistance: 2, reactance: 1.5 }, { resistance: 1.5, reactance: 1.25 },\n                    { resistance: 1, reactance: 0.9 }, { resistance: 0.5, reactance: 0.6 },\n                    { resistance: 0.3, reactance: 0.4 }, { resistance: 0, reactance: 0.15 },\n                ],\n                name: 'Transmission1',\n                enableAnimation: false,\n                width: 2,\n                tooltip: { visible: true },\n                enableSmartLabels: false,\n                marker: {\n                    shape: 'rectangle',\n                    visible: true,\n                    border: {\n                        width: 2,\n                    }\n                }\n            }, {\n                points: [\n                    { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },\n                    { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },\n                    { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },\n                    { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.8 },\n                    { resistance: 3.5, reactance: -0.8 }, { resistance: 2.5, reactance: -0.4 },\n                    { resistance: 2, reactance: -0.2 }, { resistance: 1.5, reactance: 0 },\n                    { resistance: 1, reactance: 0.1 }, { resistance: 0.5, reactance: 0.2 },\n                    { resistance: 0.3, reactance: 0.15 }, { resistance: 0, reactance: 0.05 },\n                ],\n                name: 'Transmission2',\n                enableAnimation: false,\n                width: 2,\n                tooltip: { visible: true },\n                enableSmartLabels: false,\n                fill: '#EE0C88',\n                marker: {\n                    shape: 'rectangle',\n                    visible: true,\n                    border: {\n                        width: 2,\n                    }\n                }\n            },\n        ],\n        radius: 1,\n        legendSettings: {\n            visible: true,\n            position: 'Top',\n            border: { color: 'transparent' },\n            shape: 'Circle'\n        },\n        title: {\n            text: 'Impedance Transmission', enableTrim: true, maximumWidth: 200,\n            visible: true, font: { size: '16px' }\n        }\n    });\n    smithchart.appendTo('#container');\n    // code for property panel\n    let sliderChange: EmitType<SliderChangeEventArgs>;\n    let slider: Slider = new Slider({\n        value: 0, type: 'MinRange',\n        change: sliderChange,\n        max: 1, min: 0, step: 0.1\n    }, '#radius');\n    setTimeout(function() {\n        slider.value = 1;\n        slider.dataBind();\n    }, 100);\n    document.getElementById('radius1').innerHTML = 'Radius <span> ' + 1;\n    slider.change = sliderChange = (e: SliderChangeEventArgs) => {\n        smithchart.radius = e.value as number;\n        document.getElementById('radius1').innerHTML = 'Radius <span> ' + (e.value as number);\n        smithchart.refresh();\n    };\n    let markerChange: EmitType<CheckBoxChangeEvents>\n    let markerCheckBox: CheckBox = new CheckBox({\n        change: markerChange, checked: true\n    }, '#marker');\n    let datalabelChange: EmitType<CheckBoxChangeEvents>\n    let datalabelCheckBox: CheckBox = new CheckBox({\n        change: markerChange\n    }, '#datalabel');\n    let animateChange: EmitType<CheckBoxChangeEvents>\n    let animateCheckBox: CheckBox = new CheckBox({\n        change: markerChange\n    }, '#animate');\n    let tooltipChange: EmitType<CheckBoxChangeEvents>\n    let tooltipCheckBox: CheckBox = new CheckBox({\n        change: markerChange, checked: true\n    }, '#tooltip');\n    let legendChange: EmitType<CheckBoxChangeEvents>\n    let legendCheckBox: CheckBox = new CheckBox({\n        change: markerChange, checked: true\n    }, '#legend');\n    markerCheckBox.change = markerChange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        if (boolean) {\n            smithchart.series[0].marker.visible = true;\n            smithchart.series[1].marker.visible = true;\n        } else {\n            smithchart.series[0].marker.visible = false;\n            smithchart.series[1].marker.visible = false;\n        }\n        smithchart.refresh();\n    };\n    datalabelCheckBox.change = datalabelChange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        if (boolean) {\n            smithchart.series[0].marker.dataLabel.visible = true;\n            smithchart.series[1].marker.dataLabel.visible = true;\n        } else {\n            smithchart.series[0].marker.dataLabel.visible = false;\n            smithchart.series[1].marker.dataLabel.visible = false;\n        }\n        smithchart.refresh();\n    };\n    animateCheckBox.change = animateChange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        if (boolean) {\n            smithchart.series[0].enableAnimation = true;\n            smithchart.series[1].enableAnimation = true;\n        } else {\n            smithchart.series[0].enableAnimation = false;\n            smithchart.series[1].enableAnimation = false;\n        }\n        smithchart.refresh();\n    };\n    tooltipCheckBox.change = tooltipChange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        if (boolean) {\n            smithchart.series[0].tooltip.visible = true;\n            smithchart.series[1].tooltip.visible = true;\n        } else {\n            smithchart.series[0].tooltip.visible = false;\n            smithchart.series[1].tooltip.visible = false;\n        }\n        smithchart.refresh();\n    };\n    legendCheckBox.change = legendChange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        if (boolean) {\n            smithchart.legendSettings.visible = true;\n            mode.enabled = true;\n        } else {\n            smithchart.legendSettings.visible = false;\n            mode.enabled = false;\n        }\n        smithchart.refresh();\n    };\n    let mode: DropDownList = new DropDownList({\n        index: 0,\n        width: 90,\n        change: () => {\n            let element: string = mode.value.toString();\n            smithchart.legendSettings.position = element;\n            smithchart.refresh();\n        }\n    });\n    mode.appendTo('#legend1');\n"}