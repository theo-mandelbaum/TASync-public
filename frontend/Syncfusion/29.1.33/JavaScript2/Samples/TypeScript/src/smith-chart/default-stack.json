{"theme-color.ts":"import { ISmithchartLoadEventArgs, SmithchartTheme } from \"@syncfusion/ej2/charts\";\n\nexport function loadSmithChartTheme(args: ISmithchartLoadEventArgs): void {\n    let theme: string = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.smithchart.theme = <SmithchartTheme>(theme.charAt(0).toUpperCase() + theme.slice(1).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast'));\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-9 control-section\">\n    <div id=\"container\" class=\"row\">\n    </div>\n\t\n</div>\n<!--property panel-->\n<div class=\"col-lg-3 property-section\">\n    <table id=\"property\" style=\"width:100%\" title=\"Properties\">\n        <tbody>\n            <tr style=\"height: 30px\">\n                <td style=\"width: 50%\" class=\"property-text\">\n                    Render Type\n                </td>\n                <td style=\"width: 50%\">\n                    <select id=\"rendering\" style=\"width: 90px; height: 20px\">\n                        <option value=\"Impedance\">Impedance</option>\n                        <option value=\"Admittance\">Admittance</option>\n                    </select>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-charts/index\": \"*\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}// custom code start\n\n// custom code end\n/**\n * Default sample for smith chart\n */\nimport { Smithchart, SmithchartLegend, TooltipRender, ISmithchartLoadEventArgs,\n    SmithchartTheme, RenderType} from '@syncfusion/ej2-charts/index';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { loadSmithChartTheme } from './theme-color';\nSmithchart.Inject(SmithchartLegend, TooltipRender);\n\n    // custom code start\n    \n    // custom code end\n    let smithchart: Smithchart = new Smithchart({\n        // custom code start\n        load: (args: ISmithchartLoadEventArgs) => {\n            loadSmithChartTheme(args);\n        },\n        // custom code end\n        title: {\n            visible: true,\n            text: 'Transmission details'\n        },\n        series: [\n            {\n                points: [\n                    { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },\n                    { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 2 },\n                    { resistance: 3.5, reactance: 1.6 }, { resistance: 2.5, reactance: 1.3 },\n                    { resistance: 2, reactance: 1.2 }, { resistance: 1.5, reactance: 1 },\n                    { resistance: 1, reactance: 0.8 }, { resistance: 0.5, reactance: 0.4 },\n                    { resistance: 0.3, reactance: 0.2 }, { resistance: 0, reactance: 0.15 },\n                ],\n                name: 'Transmission1',\n                enableAnimation: false,\n                tooltip: { visible: true },\n                marker: {\n                    shape: 'Circle',\n                    visible: true,\n                    border: {\n                        width: 2,\n                    }\n                }\n            }, {\n                points: [\n                    { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },\n                    { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },\n                    { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },\n                    { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.5 },\n                    { resistance: 3.5, reactance: 0 }, { resistance: 2.5, reactance: 0.4 },\n                    { resistance: 2, reactance: 0.5 }, { resistance: 1.5, reactance: 0.5 },\n                    { resistance: 1, reactance: 0.4 }, { resistance: 0.5, reactance: 0.2 },\n                    { resistance: 0.3, reactance: 0.1 }, { resistance: 0, reactance: 0.05 },\n                ],\n                name: 'Transmission2',\n                enableAnimation: false,\n                tooltip: { visible: true },\n                marker: {\n                    shape: 'Circle',\n                    visible: true,\n                    border: {\n                        width: 2,\n                    }\n                }\n            },\n        ],\n        legendSettings: {\n            visible: true,\n            shape: 'Circle'\n        },\n    });\n    smithchart.appendTo('#container');\n    //code for property panel\n    let mode: DropDownList = new DropDownList({\n        index: 0,\n        width: 90,\n        change: () => {\n            let element: RenderType = mode.value as RenderType;\n            smithchart.renderType = element;\n            smithchart.refresh();\n        }\n    });\n    mode.appendTo('#rendering');\n"}