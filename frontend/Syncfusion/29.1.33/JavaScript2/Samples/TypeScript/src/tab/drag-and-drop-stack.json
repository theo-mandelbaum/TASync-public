{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div id=\"TabContainer\">\n    <div class=\"col-lg-4\" style=\"margin-top: 10px;\">\n        <div class=\"property-panel-header\">List of Components</div>\n        <div id=\"ListView\"></div>\n    </div>\n    <div class=\"col-lg-8 content-wrapper control-section\">\n        <div id=\"draggableTab\">\n        </div>\n        <div class=\"content\">\n            <div style=\"display: none\">\n                <div id=\"Grid\"></div>\n            </div>\n            <div style=\"display: none\">\n                <div id=\"Chart\"></div>\n            </div>\n            <div style=\"display: none\">\n                <div id=\"Schedule\"></div>\n            </div>\n        </div>\n        <div id=\"external\" style=\"display: none\">\n            <div id=\"rte\">\n                <div>\n                    <p>The Rich Text Editor is WYSIWYG (\"what you see is what you get\") editor useful to create\n                        and edit content. Also, return the valid <a href=\"https://ej2.syncfusion.com/home/\" target=\"_blank\">HTML\n                        markup</a> or <a aria-label=\"markdown\" href=\"https://ej2.syncfusion.com/home/\" target=\"_blank\">markdown</a> of the\n                        content\n                    </p>\n                    <p><b>Key features:</b></p>\n                    <ul>\n                        <li>\n                            <p>Provides &lt;IFRAME&gt; and &lt;DIV&gt; modes</p>\n                        </li>\n                        <li>\n                            <p>Capable of handling markdown editing.</p>\n                        </li>\n                        <li>\n                            <p>Contains a modular library to load the necessary functionality on demand.</p>\n                        </li>\n                        <li>\n                            <p>Provides a fully customizable toolbar.</p>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n</div>\n\n\n<style>\n    #draggableTab .e-content .e-item {\n        font-size: 12px;\n        padding: 10px;\n        text-align: justify;\n    }\n    #draggableTab .e-upload {\n        width: 300px;\n    }\n    .property-panel-header {\n        text-align: center;\n        padding-bottom: 0;\n    }\n    .treeview-external-drag-tab .e-list-item,\n    .e-bigger .treeview-external-drag-tab .e-list-item {\n        border: 0.5px solid #E1E7EC;\n        line-height: 15px;\n        padding: 0 5px;\n    }\n    .treeview-external-drag-tab.e-treeview .e-ul  {\n        padding: unset;\n    }\n    .sb-property-border {\n        border-right: none;\n    }\n    #TabContainer {\n        display: flex;\n    }\n    @media (max-width: 550px) {\n        #TabContainer {\n            display: block;\n        }\n    }\n\n    #TabContainer .content-wrapper {\n        min-width: 100px;\n    }\n</style>\n\n</body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"@syncfusion/ej2-schedule\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-grids\": \"*\",\n  \"@syncfusion/ej2-filemanager\": \"*\",\n  \"@syncfusion/ej2-richtexteditor\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\r\n/**\r\n *  Tab drag and drop sample\r\n */\r\nimport { Tab, DragEventArgs, TreeView, DragAndDropEventArgs, SelectEventArgs, TabItemModel } from '@syncfusion/ej2-navigations';\r\nimport { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\r\nimport { Chart, LineSeries, Category } from '@syncfusion/ej2-charts';\r\nimport { Schedule, Day, Week, WorkWeek, Month, Agenda } from '@syncfusion/ej2-schedule';\r\nimport { Grid } from '@syncfusion/ej2-grids';\r\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\r\nimport { DatePicker, Calendar } from '@syncfusion/ej2-calendars';\r\nimport { Uploader } from '@syncfusion/ej2-inputs';\r\nimport { DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\r\nimport { RichTextEditor, Toolbar, Link, Image, HtmlEditor, QuickToolbar } from '@syncfusion/ej2-richtexteditor';\r\n\r\nSchedule.Inject(Day, Week, WorkWeek, Month, Agenda);\r\nRichTextEditor.Inject(Toolbar, Link, Image, HtmlEditor, QuickToolbar);\r\nChart.Inject(LineSeries, Category);\r\n\r\nlet data: { [key: string]: Object }[] = [\r\n    { text: 'Dropdown List', id: 'list-01' },\r\n    { text: 'DatePicker', id: 'list-02' },\r\n    { text: 'Calendar', id: 'list-03' },\r\n    { text: 'File Upload', id: 'list-04' },\r\n    { text: 'Rich Text Editor', id: 'list-05' }\r\n];\r\n\r\nlet rteObj: RichTextEditor;\r\nlet chartObj: Chart;\r\nlet scheduleObj: Schedule;\r\nlet draggedItemHeader: string;\r\nlet i: number = 0;\r\n// tslint:disable-next-line:max-func-body-length\r\nfunction renderComponents(): void {\r\n    //Initialize Tab component\r\n    let tabObj: Tab = new Tab({\r\n        created: onTabCreate,\r\n        dragArea: '#TabContainer',\r\n        selected: selectedTab,\r\n        onDragStart: onTabDragStart,\r\n        dragged: onDraggedTab,\r\n        allowDragAndDrop: true,\r\n        items: [\r\n            {\r\n                header: { 'text': 'Grid' },\r\n                content: '#Grid'\r\n            },\r\n            {\r\n                header: { 'text': 'Chart' },\r\n                content: '#Chart'\r\n            },\r\n            {\r\n                header: { 'text': 'Schedule' },\r\n                content: '#Schedule'\r\n            }\r\n        ],\r\n\r\n    });\r\n    tabObj.appendTo('#draggableTab');\r\n\r\n    let treeViewObj: TreeView = new TreeView({\r\n        fields: { dataSource: data, id: 'id', text: 'text' },\r\n        allowDragAndDrop: true,\r\n        dragArea: '#TabContainer',\r\n        nodeDragStop: onNodeDragStop,\r\n        nodeDragging: onNodeDrag,\r\n        cssClass: 'treeview-external-drag-tab'\r\n    });\r\n    treeViewObj.appendTo('#ListView');\r\n\r\n    function onTabCreate(): void {\r\n        let tabElement: HTMLElement = document.getElementById('draggableTab');\r\n        if (!isNullOrUndefined(tabElement)) {\r\n            tabElement.querySelector('.e-tab-header').classList.add('e-droppable');\r\n            tabElement.querySelector('.e-content').classList.add('tab-content');\r\n        }\r\n    }\r\n\r\n    function selectedTab(args: SelectEventArgs): void {\r\n        if (tabObj.items[args.selectedIndex].header.text === 'Rich Text Editor') {\r\n            rteObj.refreshUI();\r\n        }\r\n        if (tabObj.items[args.selectedIndex].header.text === 'Schedule') {\r\n            scheduleObj.refresh();\r\n        }\r\n        if (tabObj.items[args.selectedIndex].header.text === 'Chart') {\r\n            chartObj.refresh();\r\n        }\r\n    }\r\n\r\n    function onTabDragStart(args: DragEventArgs): void {\r\n        draggedItemHeader = <string>tabObj.items[args.index].header.text;\r\n    }\r\n\r\n    function onDraggedTab(args: DragEventArgs): void {\r\n        let dragTabIndex: number = Array.prototype.indexOf.call(tabObj.element.querySelectorAll('.e-toolbar-item'), args.draggedItem);\r\n        let dropNode: HTMLElement = <HTMLElement>args.target.closest('#ListView .e-list-item');\r\n        if (dropNode != null && !args.target.closest('#draggableTab .e-toolbar-item')) {\r\n            args.cancel = true;\r\n            // tslint:disable-next-line:max-line-length\r\n            let dropContainer: NodeListOf<Element> = (document.querySelector('.treeview-external-drag-tab')).querySelectorAll('.e-list-item');\r\n            let dropIndex: number = Array.prototype.indexOf.call(dropContainer, dropNode);\r\n            let newNode: { [key: string]: Object }[] = [{ id: 'list' + i, text: draggedItemHeader }];\r\n            tabObj.removeTab(dragTabIndex);\r\n            treeViewObj.addNodes(newNode, 'Treeview', dropIndex);\r\n        }\r\n    }\r\n\r\n    function onNodeDragStop(args: DragAndDropEventArgs): void {\r\n        let dropElement: HTMLElement = <HTMLElement>args.target.closest('#draggableTab .e-toolbar-item');\r\n        if (dropElement != null) {\r\n            let tabElement: HTMLElement = document.querySelector('#draggableTab');\r\n            let itemPosition: number = (((args.event.type.indexOf('touch') > -1) ? args.event.changedTouches[0].clientX\r\n                : args.event.clientX) < dropElement.getBoundingClientRect().left + dropElement.offsetWidth / 2) ? 0 : 1;\r\n            let dropItemIndex: number = [].slice.call(tabElement.querySelectorAll('.e-toolbar-item')).indexOf(dropElement) + itemPosition;\r\n            let tabContent: HTMLElement;\r\n            let content: string = '';\r\n            switch (args.draggedNodeData.text) {\r\n                case 'Dropdown List':\r\n                    tabContent = createElement('input', { id: 'DropdownList' });\r\n                    content = tabContent.id;\r\n                    tabContent.setAttribute('type', 'text');\r\n                    tabContent.setAttribute('tabindex', '1');\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderDropdownList();\r\n                    break;\r\n                case 'DatePicker':\r\n                    tabContent = createElement('input', { id: 'DatePicker' });\r\n                    content = tabContent.id;\r\n                    tabContent.setAttribute('type', 'text');\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderDatePicker();\r\n                    break;\r\n                case 'Calendar':\r\n                    tabContent = createElement('div', { id: 'Calendar' });\r\n                    content = tabContent.id;\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderCalendar();\r\n                    break;\r\n                case 'File Upload':\r\n                    tabContent = createElement('input', { id: 'FileUpload' });\r\n                    content = tabContent.id;\r\n                    tabContent.setAttribute('type', 'file');\r\n                    tabContent.setAttribute('name', 'UploadFiles');\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderUploader();\r\n                    break;\r\n                case 'Rich Text Editor':\r\n                    tabContent = createElement('div', { id: 'RichTextEditor' });\r\n                    content = tabContent.id;\r\n                    let rteContent: HTMLElement = <HTMLElement>document.querySelector('#rte').cloneNode(true);\r\n                    if (!isNullOrUndefined(rteContent)) {\r\n                        tabContent.appendChild(rteContent);\r\n                    }\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderRichTextEditor();\r\n                    break;\r\n                case 'Grid':\r\n                    tabContent = createElement('div', { id: 'Grid' });\r\n                    content = tabContent.id;\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderGrid();\r\n                    document.querySelector('#Grid').classList.add('Grid');\r\n                    break;\r\n                case 'Chart':\r\n                    tabContent = createElement('div', { id: 'Chart' });\r\n                    content = tabContent.id;\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderChart();\r\n                    document.querySelector('#Chart').classList.add('Chart');\r\n                    break;\r\n                case 'Schedule':\r\n                    tabContent = createElement('div', { id: 'Schedule' });\r\n                    content = tabContent.id;\r\n                    document.querySelector('#external').appendChild(tabContent);\r\n                    renderSchedule();\r\n                    break;\r\n            }\r\n            let newTabItem: TabItemModel[] = [{\r\n                header: { 'text': args.draggedNodeData.text.toString() },\r\n                content: <HTMLElement>(document.querySelector('.' + content))\r\n            }];\r\n            tabObj.addTab(newTabItem, dropItemIndex);\r\n            treeViewObj.removeNodes([args.draggedNode]);\r\n        }\r\n        args.cancel = true;\r\n    }\r\n    function onNodeDrag(args: DragAndDropEventArgs): void {\r\n        if (!isNullOrUndefined(args.target.closest('.tab-content'))) {\r\n            args.dropIndicator = 'e-no-drop';\r\n        } else if (!isNullOrUndefined(args.target.closest('#draggableTab .e-tab-header'))) {\r\n            args.dropIndicator = 'e-drop-in';\r\n        }\r\n    }\r\n}\r\nfunction renderGrid(): void {\r\n    let gridData: Object[] = [\r\n        {\r\n            OrderID: 10248, CustomerID: 'VINET', EmployeeID: 5, OrderDate: new Date(8364186e5),\r\n            ShipName: 'Vins et alcools Chevalier', ShipCity: 'Reims', ShipAddress: '59 rue de l Abbaye',\r\n            ShipRegion: 'CJ', ShipPostalCode: '51100', ShipCountry: 'France', Freight: 32.38, Verified: !0\r\n        },\r\n        {\r\n            OrderID: 10249, CustomerID: 'TOMSP', EmployeeID: 6, OrderDate: new Date(836505e6),\r\n            ShipName: 'Toms Spezialitäten', ShipCity: 'Münster', ShipAddress: 'Luisenstr. 48',\r\n            ShipRegion: 'CJ', ShipPostalCode: '44087', ShipCountry: 'Germany', Freight: 11.61, Verified: !1\r\n        },\r\n        {\r\n            OrderID: 10250, CustomerID: 'HANAR', EmployeeID: 4, OrderDate: new Date(8367642e5),\r\n            ShipName: 'Hanari Carnes', ShipCity: 'Rio de Janeiro', ShipAddress: 'Rua do Paço, 67',\r\n            ShipRegion: 'RJ', ShipPostalCode: '05454-876', ShipCountry: 'Brazil', Freight: 65.83, Verified: !0\r\n        },\r\n        {\r\n            OrderID: 10251, CustomerID: 'VICTE', EmployeeID: 3, OrderDate: new Date(8367642e5),\r\n            ShipName: 'Victuailles en stock', ShipCity: 'Lyon', ShipAddress: '2, rue du Commerce',\r\n            ShipRegion: 'CJ', ShipPostalCode: '69004', ShipCountry: 'France', Freight: 41.34, Verified: !0\r\n        },\r\n        {\r\n            OrderID: 10252, CustomerID: 'SUPRD', EmployeeID: 2, OrderDate: new Date(8368506e5),\r\n            ShipName: 'Suprêmes délices', ShipCity: 'Charleroi', ShipAddress: 'Boulevard Tirou, 255',\r\n            ShipRegion: 'CJ', ShipPostalCode: 'B-6000', ShipCountry: 'Belgium', Freight: 51.3, Verified: !0\r\n        }\r\n    ];\r\n    let gridObj: Grid = new Grid({\r\n        dataSource: gridData,\r\n        columns: [\r\n            { field: 'OrderID', headerText: 'Order ID', textAlign: 'Right', width: 120, type: 'number' },\r\n            { field: 'CustomerID', width: 140, headerText: 'Customer ID', type: 'string' },\r\n            { field: 'Freight', headerText: 'Freight', textAlign: 'Right', width: 120, format: 'C' },\r\n            { field: 'OrderDate', headerText: 'Order Date', width: 140, format: 'yMd' }\r\n        ]\r\n    });\r\n    gridObj.appendTo('#Grid');\r\n}\r\n\r\nfunction renderChart(): void {\r\n    let chartData: any[] = [\r\n        { month: 'Jan', sales: 35 }, { month: 'Feb', sales: 28 },\r\n        { month: 'Mar', sales: 34 }, { month: 'Apr', sales: 32 },\r\n        { month: 'May', sales: 40 }, { month: 'Jun', sales: 32 },\r\n        { month: 'Jul', sales: 35 }, { month: 'Aug', sales: 55 },\r\n        { month: 'Sep', sales: 38 }, { month: 'Oct', sales: 30 },\r\n        { month: 'Nov', sales: 25 }, { month: 'Dec', sales: 32 }\r\n    ];\r\n    chartObj = new Chart({\r\n        primaryXAxis: {\r\n            valueType: 'Category'\r\n        },\r\n        series: [{\r\n            dataSource: chartData,\r\n            xName: 'month',\r\n            yName: 'sales',\r\n            type: 'Line'\r\n        }]\r\n    });\r\n    chartObj.appendTo('#Chart');\r\n}\r\n\r\nfunction renderSchedule(): void {\r\n    let dataManager: DataManager = new DataManager({\r\n        url: 'http://localhost:62728/api/schedule',\r\n        adaptor: new ODataV4Adaptor,\r\n        crossDomain: true\r\n    });\r\n    scheduleObj = new Schedule({\r\n        height: 350,\r\n        cssClass: 'Schedule',\r\n        currentView: 'Month',\r\n        readonly: true,\r\n        eventSettings: { dataSource: dataManager }\r\n    });\r\n    scheduleObj.appendTo('#Schedule');\r\n}\r\nfunction renderDropdownList(): void {\r\n    let sportsData: string[] = ['Badminton', 'Cricket', 'Football', 'Golf', 'Tennis'];\r\n    let dropDownListObj: DropDownList = new DropDownList({\r\n        width: 200,\r\n        placeholder: 'Select a game',\r\n        cssClass: 'DropdownList',\r\n        dataSource: sportsData\r\n    });\r\n    dropDownListObj.appendTo('#DropdownList');\r\n}\r\nfunction renderDatePicker(): void {\r\n    let datepickerObj: DatePicker = new DatePicker({\r\n        cssClass: 'DatePicker',\r\n        placeholder: 'Enter date',\r\n        width: 200\r\n    });\r\n    datepickerObj.appendTo('#DatePicker');\r\n}\r\nfunction renderCalendar(): void {\r\n    let calendarObj: Calendar = new Calendar({\r\n        cssClass: 'Calendar',\r\n    });\r\n    calendarObj.appendTo('#Calendar');\r\n}\r\nfunction renderUploader(): void {\r\n    let uploadObj: Uploader = new Uploader({\r\n        cssClass: 'FileUpload',\r\n        autoUpload: false\r\n    });\r\n    uploadObj.appendTo('#FileUpload');\r\n}\r\nfunction renderRichTextEditor(): void {\r\n    rteObj = new RichTextEditor({\r\n        cssClass: 'RichTextEditor',\r\n        toolbarSettings: {\r\n            items: ['Bold', 'Italic', 'Underline', 'StrikeThrough',\r\n                'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\r\n                'LowerCase', 'UpperCase']\r\n        }\r\n    });\r\n    rteObj.appendTo('#RichTextEditor');\r\n}\r\n\r\n    \r\n    renderGrid();\r\n    renderChart();\r\n    renderSchedule();\r\n    renderComponents();\r\n\r\n"}