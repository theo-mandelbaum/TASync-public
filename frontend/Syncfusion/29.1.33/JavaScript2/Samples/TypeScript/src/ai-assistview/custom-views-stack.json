{"promptResponseData.ts":"export let defaultPromptResponseData: any = [\n    {\n        prompt: \"How do I set daily goals in my work day?\",\n        response: \"<p>To stay focused and productive, try these steps for setting daily goals:</p> <ol><li><strong>Identify Priorities:</strong> List the most important tasks based on deadlines or significance.</li> <li><strong>Break Down Tasks:</strong> Split larger tasks into smaller, manageable steps.</li> <li><strong>Set SMART Goals:</strong> Make sure goals are Specific, Measurable, Achievable, Relevant, and Time-bound.</li> <li><strong>Time Blocking:</strong> Allocate specific times for each task to stay organized and on track.</li></ol> <p>Would you like more tips on any of these steps?</p>\",\n        suggestions: [\"How do I prioritize tasks effectively?\", \"What tools or apps can help me prioritize tasks?\"]\n    },\n    {\n        prompt: \"Steps to publish a e-book with marketing strategy\",\n        response: \"<p>To publish an e-book, follow the steps below:</p> <ol><li><strong>Write and format your e-book:</strong> Ensure your content is well-organized, edited, and formatted for digital reading.</li> <li><strong>Choose a publishing platform:</strong> Platforms like Amazon Kindle Direct Publishing (KDP) or Smashwords can help you publish and distribute your e-book.</li> <li><strong>Develop a marketing strategy:</strong> Utilize social media, email newsletters, and book promotion sites to create buzz and reach your target audience.</li> <li><strong>Launch and promote:</strong> Schedule a launch date, gather reviews, and continue promoting through various channels to maintain momentum and drive sales.</li></ol> <p>Do you have a specific topic in mind for your e-book?</p>\",\n        suggestions: [\"How do I create an eye-catching e-book cover?\", \"What are common mistakes to avoid in e-book covers?\"]\n    },\n    {\n        prompt: \"How do I prioritize tasks effectively?\",\n        response: \"<p>To stay focused and productive, set daily goals by:</p> <ol><li><strong>Identifying Priorities:</strong> List important tasks based on deadlines or significance.</li> <li><strong>Breaking Down Tasks:</strong> Divide larger tasks into smaller, manageable steps.</li> <li><strong>Setting SMART Goals:</strong> Ensure goals are Specific, Measurable, Achievable, Relevant, and Time-bound. </li> <li><strong>Time Blocking:</strong>Schedule specific times for each task to stay organized.</li></ol> <p> Need more tips on any of these steps? </p>\"\n    },\n    {\n        prompt: \"What tools or apps can help me prioritize tasks?\",\n        response: \"<p>Here are some tools to help you prioritize tasks effectively:</p> <ol><li><strong>Google Keep:</strong> For simple note-taking and task organization with labels and reminders.</li> <li><strong>Scoro:</strong> A project management tool for streamlining activities and team collaboration.</li> <li><strong>Evernote:</strong> Great for note-taking, to-do lists, and reminders.</li> <li><strong>Todoist:</strong> A powerful task manager for setting priorities and tracking progress.</li></ol> <p>Are you looking for tools to manage a specific type of task or project?</p>\"\n    },\n    {\n        prompt: \"How do I create an eye-catching e-book cover?\",\n        response: \"<p>Creating an eye-catching e-book cover involves a few key steps:</p> <ol><li><strong>Understand your genre and audience:</strong> Research covers of popular books in your genre to see what appeals to your target readers.</li> <li><strong>Choose the right imagery and colors:</strong> Use high-quality images and a color scheme that reflects the tone and theme of your book.</li> <li><strong>Focus on typography:</strong> Select fonts that are readable and complement the overall design. The title should be prominent and easy to read even in thumbnail size.</li> <li><strong>Use design tools or hire a professional:</strong> Tools like Canva or Adobe Spark can help you create a professional-looking cover. Alternatively, consider hiring a graphic designer for a more polished result.</li></ol> <p>Would you like some tips on where to find good images or fonts for your cover?</p>\"\n    },\n    {\n        prompt: \"What are common mistakes to avoid in e-book covers?\",\n        response: \"<p>Here are some common mistakes to avoid when designing an e-book cover:</p> <ol><li><strong>Cluttered design:</strong> Overloading the cover with too many elements can make it look messy and unprofessional. Keep it simple and focused.</li> <li><strong>Poor quality images:</strong> Using low-resolution or generic stock images can detract from the overall appeal. Always opt for high-quality, relevant visuals.</li> <li><strong>Unreadable fonts:</strong> Fancy or overly intricate fonts can be hard to read, especially in thumbnail size. Choose clear, legible fonts for the title and author name.</li> <li><strong>Ignoring genre conventions:</strong> Each genre has its own visual cues. Not adhering to these can confuse potential readers about the book’s content.</li> <li><strong>Inconsistent branding:</strong> If you have a series or multiple books, ensure a consistent style across all covers to build a recognizable brand.</li></ol> <p>Would you like any specific advice on designing your cover?</p>\"\n    }\n];\n\nexport let defaultSuggestions: any = [\n    \"How do I set daily goals in my work day?\", \n    \"Steps to publish a e-book with marketing strategy\"\n];\n\nexport let streamingData: any = [\n    {\n        prompt: \"What are the main features of the AI AssistView component?\",\n        response: \"The AI AssistView component offers several powerful features that enhance user interaction:\\n\\n- **Customizable Views:** Allows for custom templates to be used for banners, prompts, responses, and suggestions.\\n- **Streaming Responses:** Provides real-time feedback as data is processed, enhancing immediacy and user engagement.\\n- **Interactive Toolbar:** Easily integrates custom toolbar items, such as buttons and inputs, enhancing functionality.\\n- **Seamless Integration:** Connects with AI services to provide advanced processing and intelligent responses.\",\n        suggestions: [ \"How can I customize the appearance of AI AssistView?\", \"What are the benefits of using Markdown?\" ]\n    },\n    {\n        prompt: \"How can I customize the appearance of AI AssistView?\",\n        response: \"Customizing AI AssistView enables you to tailor the look and functionality to suit specific needs:\\n\\n- **Template Customization:** Modify templates for prompts, responses, and more.\\n- **CSS Styling:** Apply custom styles to align with your application’s visual theme.\\n- **Theme Support:** Utilize built-in themes or create your own for consistent styling.\\n- **Banner and Toolbar Configurations:** Adjust content and tools for personalized UI experiences.\",\n        suggestions: [ \"What customization options are available in AI AssistView?\", \"Prime number checking C# example?\" ]\n    },\n    {\n        prompt: \"What is Markdown and how is it used?\",\n        response: \"Markdown is a straightforward syntax used primarily for formatting text documents:\\n\\n- **Headers:** Create headings with `#`, `##`, `###` for different levels.\\n- **Emphasis:** Use `*text*` for italic and `**text**` for bold.\\n- **Links and Images:** `[Link](URL)`, `![Alt Text](ImageURL)` to include links and images.\\n- **Lists and Code Blocks:** Use `-` for lists and triple backticks ``` for code blocks.\\n\\nMarkdown’s simplicity and readability make it ideal for writing documentation.\",\n        suggestions: [ \"What are the benefits of using Markdown?\", \"What customization options are available in AI AssistView?\" ]\n    },\n    {\n        prompt: \"What customization options are available in AI AssistView?\",\n        response: \"AI AssistView provides extensive customization options for tailored user interactions:\\n\\n- **Templates:** Use `<PromptItemTemplate>`, `<ResponseItemTemplate>`, etc., for customized display.\\n- **Custom Toolbar Items:** Add buttons and other controls via `AssistViewToolbar`.\\n- **Dynamic Content:** Update content based on user actions or external events.\\n- **Styling:** Full CSS support for styling individual components and layouts.\",\n        suggestions: [\"What are the main features of the AI AssistView component?\", \"Generate Fibonacci sequence C# example?\"]\n    },\n    {\n        prompt: \"What are the benefits of using Markdown?\",\n        response: \"Markdown provides several benefits, especially in documentation and writing:\\n\\n- **Ease of Use:** Its syntax is simple and quick to learn, increasing productivity.\\n- **Readability:** Plain text format ensures content is easy to read and edit.\\n- **Flexibility:** Can be converted to HTML, PDF, and other formats easily.\\n- **Collaboration:** Widely supported in various tools for collaborative writing and documentation.\",\n        suggestions: [\"Prime number checking C# example?\", \"Generate Fibonacci sequence C# example?\"]\n    },\n    {\n        prompt: \"Prime number checking C# example?\",\n        response: `<pre><code class=\\\"csharp language-csharp\\\">using System;\n\n        class Program\n        {\n            static bool IsPrime(int n)\n            {\n                if (n <= 1) return false;\n                for (int i = 2; i <= Math.Sqrt(n); i++)\n                    if (n % i == 0) return false;\n                return true;\n            }\n\n            static void Main()\n            {\n                Console.WriteLine(IsPrime(11)); // True\n            }\n        }\n        </code></pre>`\n    },\n    {\n        prompt: \"Generate Fibonacci sequence C# example?\",\n        response: `<pre><code class=\\\"csharp language-csharp\\\">using System;\n\n        class Program\n        {\n            static void Fibonacci(int n)\n            {\n                int a = 0, b = 1, c;\n                for (int i = 0; i < n; i++)\n                {\n                    Console.Write(a + \\\" \\\");\n                    c = a + b;\n                    a = b;\n                    b = c;\n                }\n            }\n\n            static void Main()\n            {\n                Fibonacci(10); // 0 1 1 2 3 5 8 13 21 34\n            }\n        }\n        </code></pre>`\n    }\n];\n\nexport let streamingSuggestions: any = [\n    \"What are the main features of the AI AssistView component?\",\n    \"What is Markdown and how is it used?\"\n];","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"views-aiassistview\"> \n        <div id=\"aiAssistView\"></div>\n    </div>\n</div>\n\n<style>\n\n    .views-aiassistview {\n        width: max(50%, 500px);\n        margin: 30px auto;\n    }\n\n    .views-aiassistview .view-container {\n        margin: 20px auto;\n        width: 80%;\n    }\n\n    .views-aiassistview .view-container:not(.response-view) {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n    }\n\n    .views-aiassistview .view-container .generate-btn,\n    .views-aiassistview .view-container .suggestions li {\n        width: fit-content;\n    }\n\n    .views-aiassistview .view-container .suggestions {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n\n    .views-aiassistview .view-container .suggestions li {\n        padding: 5px 10px;\n        margin-top: 10px;\n        cursor: pointer;\n    }\n\n    .views-aiassistview .response-view {\n        flex-direction: column-reverse;\n        max-height: 450px;\n    }\n\n    .views-aiassistview .view-container .responseItemContent {\n        padding: 10px;\n        margin-top: 10px;\n        display: flex;\n        gap: 10px;\n        font-size: 14px;\n        line-height: 28px;\n    }\n\n    .views-aiassistview .view-container .responseItemContent .response-header {\n        font-style: italic;\n    }\n\n    .views-aiassistview .view-container .responseItemContent span {\n        font-size: 20px;\n        margin-top: 3px;\n    }\n\n    .views-aiassistview .view-container .responseItemContent:hover {\n        background: none;\n    }\n\n    .views-aiassistview .view-container .default-response {\n        flex-direction: row;\n    }\n\n    @media only screen and (max-width: 750px) {\n        .views-aiassistview,\n        .views-aiassistview .view-container .generate-btn,\n        .views-aiassistview .view-container .suggestions li {\n            width: 100%;\n        }\n\n        .views-aiassistview .view-container {\n            width: 90%;\n        }\n\n        .views-aiassistview .view-container .suggestions li {\n            padding: 0px 10px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            display: block;\n        }\n    }\n</style>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-interactive-chat\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n\nimport { AIAssistView } from \"@syncfusion/ej2-interactive-chat\";\nimport { Button } from \"@syncfusion/ej2-buttons\";\nimport { TextArea } from \"@syncfusion/ej2-inputs\";\nimport { defaultPromptResponseData, defaultSuggestions  } from './promptResponseData';\n\n/**\n * Custom views sample\n */\n\n    \n    let viewsAIAssistView: AIAssistView = new AIAssistView({\n        views: [\n            {\n                type: 'Assist',\n                name: \"Prompt\",\n                viewTemplate: promptViewContent\n            },\n            {\n                type: 'Custom',\n                name: 'Response',\n                iconCss: 'e-icons e-comment-show',\n                viewTemplate: responseViewContent\n            },\n            {\n                type: 'Custom',\n                name: 'Custom',\n                viewTemplate: '<div class=\"view-container\"><h5>Custom view content</h5></div>'\n            }\n        ],\n        created: onCreate\n    });\n    viewsAIAssistView.appendTo('#aiAssistView');\n\n    function promptViewContent() {\n        let suggestionsElem = '';\n        defaultSuggestions.forEach((suggestion: any) => {\n            suggestionsElem += `<li class=\"suggestion-item e-card\">${suggestion}</li>`;\n        });\n        return `<div class=\"view-container\">\n                <textarea id=\"promptTextarea\"></textarea>\n                <button id=\"generateBtn\"></button>\n                <ul class=\"suggestions\">${suggestionsElem}</ul>\n                </div>`;\n    }\n\n    function responseViewContent() {\n        return `<div class=\"view-container response-view\">\n                <div class=\"responseItemContent default-response e-card\">\n                <span class=\"e-icons e-circle-info\"></span>\n                No prompt provided. Please enter a prompt and click 'Generate Prompt' to see the response.</div>\n                </div>`;\n    }\n\n    function updateResponseView(prompt: string) {\n        let responseView = viewsAIAssistView.element.querySelector('.view-container') as Element;\n        let separatorElem = '<hr style=\"height: 1px;margin: 0;\">';\n        let responseItemElem = `<div class=\"responseItemContent e-card\">\n                                    <div class=\"response-header\"><b>Prompt:</b> ${prompt}</div>${separatorElem}\n                                    <div class=\"content\">\n                                        <div class=\"e-skeleton e-shimmer-wave\" style=\"width: 100%; height: 20px;\"></div>\n                                        <div class=\"e-skeleton e-shimmer-wave\" style=\"width: 80%; height: 20px;\"></div>\n                                        <div class=\"e-skeleton e-shimmer-wave\" style=\"width: 100%; height: 20px;\"></div>\n                                    </div>\n                                    ${separatorElem}\n                                    <div class=\"options\">\n                                        <button id=\"copyBtn\" class=\"e-btn e-normal e-skeleton e-shimmer-wave\">Copy</button>\n                                    </div>\n                                </div>`;\n        let defaultResponse = responseView.querySelector('.default-response');\n        if (defaultResponse) {\n            defaultResponse.remove();\n        }\n        responseView.innerHTML = responseItemElem + responseView.innerHTML;\n        setTimeout( () => {\n            let foundPrompt = defaultPromptResponseData.find((promptObj: any) => promptObj.prompt === prompt);\n            let defaultResponse = 'For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.';\n            \n            let response = foundPrompt ? foundPrompt.response : defaultResponse;\n            (responseView as any).children[0].querySelector('.content').innerHTML = response;\n            let copyBtn = responseView.children[0].querySelector('#copyBtn') as HTMLElement;\n            copyBtn.classList.remove('e-skeleton', 'e-shimmer-wave');\n            copyBtn.addEventListener('click', function(e) {\n                let textToCopy = (e.target as any).parentElement.parentElement.querySelector('.content').textContent;\n                navigator.clipboard.writeText(textToCopy).then(function() {\n                    copyBtn.textContent = 'Copied!';\n                    setTimeout(() => {\n                        copyBtn.textContent = 'Copy';\n                    }, 1000);\n                });                \n            });\n            \n        }, 2000);\n    }\n\n    function onCreate() {\n        let textareaObj: TextArea = new TextArea({\n            placeholder: \"Enter your prompt...\",\n            rows: 5,\n            resizeMode: 'None',\n            input: function(e) {\n                generateBtn.disabled = !e.value;\n            }\n        });\n        textareaObj.appendTo('#promptTextarea');\n\n        let generateBtn: Button = new Button({ cssClass: 'e-primary generate-btn', content:'Generate Prompt', disabled: true });\n        generateBtn.appendTo('#generateBtn');\n        generateBtn.element.addEventListener('click', () => {\n            let promptValue = textareaObj.value;\n            if (promptValue) {\n                textareaObj.value = '';\n                generateBtn.disabled = true;\n                viewsAIAssistView.activeView = 1;\n                viewsAIAssistView.dataBind();   \n                updateResponseView(promptValue);\n            }\n        });\n\n        (viewsAIAssistView as any).element.querySelector('.view-container .suggestions').addEventListener('click', (e: any) => {\n            if ((e.target as any).classList.contains('suggestion-item')) {\n                textareaObj.value = (e.target as any).textContent;\n                generateBtn.disabled = false;\n            }\n        });\n    }\n\n"}