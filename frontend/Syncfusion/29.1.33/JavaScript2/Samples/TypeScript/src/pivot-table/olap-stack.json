{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\" id=\"pivot-table-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"PivotView\" style=\"width: 100%;height:100%;\">\n        </div>\n    </div>\n</div>\n\n\n\n\n<style>\n    @media only screen and (max-width: 400px) {\n        #pivot-table-section {\n            overflow: auto;\n        }\n    }\n\n    #PivotViewcontainerwrapper {\n        height: auto !important;\n    }\n    .e-pivotview .e-pivotchart-type-dialog {\n       max-width: 380px !important;\n       max-height: 380px !important;\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-charts\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-grids\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-pivotview\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    PivotView, FieldList, GroupingBar, CalculatedField, Toolbar, RemoveReportArgs, ToolbarArgs,\n    ConditionalFormatting, RenameReportArgs, SaveReportArgs, FetchReportArgs, LoadReportArgs, PDFExport, ExcelExport\n} from '@syncfusion/ej2-pivotview';\nimport { ILoadedEventArgs, ChartTheme } from '@syncfusion/ej2-charts';\nimport { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(false);\n/**\n * PivotView sample for Olap data source.\n */\n/* tslint:disable */\nPivotView.Inject(FieldList, GroupingBar, CalculatedField, Toolbar, ConditionalFormatting, PDFExport, ExcelExport);\n\n    \n    let pivotObj: PivotView = new PivotView({\n        dataSourceSettings: {\n            catalog: 'Adventure Works DW 2008 SE',\n            cube: 'Adventure Works',\n            providerType: 'SSAS',\n            enableSorting: true,\n            url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\n            localeIdentifier: 1033,\n            rows: [\n                { name: '[Customer].[Customer Geography]', caption: 'Customer Geography' },\n            ],\n            columns: [\n                { name: '[Product].[Product Categories]', caption: 'Product Categories' },\n                { name: '[Measures]', caption: 'Measures' },\n            ],\n            values: [\n                { name: '[Measures].[Customer Count]', caption: 'Customer Count' },\n                { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }\n            ],\n            filters: [\n                { name: '[Date].[Fiscal]', caption: 'Date Fiscal' },\n            ]\n        },\n        width: '100%',\n        height: 500,\n        toolbarRender: function (args: ToolbarArgs): void {\n            args.customToolbar.splice(6, 0, {\n                type: 'Separator'\n            });\n            args.customToolbar.splice(9, 0, {\n                type: 'Separator'\n            });\n        },\n        fetchReport: function (args: FetchReportArgs): void {\n            let reportsCollection: string[] = [];\n            let reeportList: string[] = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            reportsCollection.map(function (item: any): void { reeportList.push(item.reportName); });\n            args.reportName = reeportList;\n        },\n        removeReport: function (args: RemoveReportArgs): void {\n            let reportsCollection: any[] = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            for (let i: number = 0; i < reportsCollection.length; i++) {\n                if (reportsCollection[i].reportName === args.reportName) {\n                    reportsCollection.splice(i, 1);\n                }\n            }\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n            }\n        },\n        loadReport: function (args: LoadReportArgs): void {\n            let reportsCollection: string[] = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            reportsCollection.map(function (item: any): void {\n                if (args.reportName === item.reportName) {\n                    args.report = item.report;\n                }\n            });\n            if (args.report) {\n                pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n            }\n        },\n        newReport: function (): void {\n            pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\n        },\n        renameReport: function (args: RenameReportArgs): void {\n            let reportsCollection: any[] = [];\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                reportsCollection = JSON.parse(localStorage.pivotviewReports);\n            }\n            if (args.isReportExists) {\n                for (let i: number = 0; i < reportsCollection.length; i++) {\n                    if (reportsCollection[i].reportName === args.rename) {\n                        reportsCollection.splice(i, 1);\n                    }\n                }\n            }\n            reportsCollection.map(function (item: any): any { if (args.reportName === item.reportName) { item.reportName = args.rename; } });\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n            }\n        },\n        toolbar: ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\n            'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'],\n        allowExcelExport: true,\n        allowConditionalFormatting: true,\n        enableFieldSearching: true,\n        allowPdfExport: true,\n        showToolbar: true,\n        showGroupingBar: true,\n        allowCalculatedField: true,\n        enableValueSorting: true,\n        displayOption: { view: 'Both' },\n        chartSettings: {\n            title: 'Sales Analysis',\n            load: (args: ILoadedEventArgs) => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            }\n        },\n        showFieldList: true,\n        gridSettings: { columnWidth: 160 },\n        saveReport: function (args: SaveReportArgs): void {\n            let report: SaveReportArgs[] = [];\n            let isSave: boolean = false;\n            if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n                report = JSON.parse(localStorage.pivotviewReports);\n            }\n            if (args.report && args.reportName && args.reportName !== '') {\n                report.map(function (item: any): any {\n                    if (args.reportName === item.reportName) {\n                        item.report = args.report; isSave = true;\n                    }\n                });\n                if (!isSave) {\n                    report.push(args);\n                }\n                localStorage.pivotviewReports = JSON.stringify(report);\n            }\n        }\n    });\n    pivotObj.appendTo('#PivotView');\n\n\n"}