{"theme-colors.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\n\nexport function loadProgressBarTheme (args: ILoadedEventArgs): string  {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    var theme = args.progressBar.theme.replace(/dark/i, '-dark').replace(/highcontrast/i, '-highcontrast').toLowerCase();\n    return theme as string;\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"row linear-parent\">\n        <div>\n            <div class=\"col-lg-12 col-sm-12 progressbar-label\">Determinate</div>\n            <div id=\"lineardeterminate\"></div>\n        </div>\n        <div>\n            <div class=\"col-lg-12 col-sm-12 progressbar-label\">Indeterminate</div>\n            <div id=\"linearindeterminate\"></div>\n        </div>\n        <div>\n            <div class=\"col-lg-12 col-sm-12 progressbar-label\">Segment</div>\n            <div id=\"linearsegment\"></div>\n        </div>\n        <div>\n            <div class=\"col-lg-12 col-sm-12 progressbar-label\">Buffer</div>\n            <div id=\"linearbuffer\"></div>\n        </div>\n        <div>\n            <div class=\"col-lg-12 col-sm-12 progressbar-label\">Active</div>\n            <div id=\"linearactive\"></div>\n        </div>\n    </div>\n    <div class=\"row linear-parent\">\n        <button id=\"reLoad\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button></div>\n    </div>\n</div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    .linear-parent {\n        text-align: center;\n        width: 80%;\n        margin: auto;\n    }\n\n    .progressbar-label {\n        text-align: left;\n        font-family: Roboto-Regular;\n        font-size: 14px;\n        color: #3D3E3C;\n        margin-left: 10px;\n        padding: 0px;\n        top: 10px;\n    }\n\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n    }\n</style>\n</body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme } from '@syncfusion/ej2-progressbar';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { loadProgressBarTheme } from './theme-colors';\n\n/**\n * Sample for default linear progress bar.\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let div: HTMLCollection = document.getElementsByClassName('progressbar-label');\n    let progressLoad: EmitType<ILoadedEventArgs> = (args: ILoadedEventArgs) => {\n      let theme: string = loadProgressBarTheme(args);\n        if (args.progressBar.theme === 'HighContrast' || args.progressBar.theme === 'Bootstrap5Dark' || args.progressBar.theme === 'BootstrapDark' || args.progressBar.theme === 'FabricDark'\n        || args.progressBar.theme === 'TailwindDark' || args.progressBar.theme === 'Tailwind3Dark' || args.progressBar.theme === 'MaterialDark' || args.progressBar.theme === 'FluentDark' || args.progressBar.theme === 'Material3Dark' || args.progressBar.theme === 'Fluent2Dark' || args.progressBar.theme === 'Fluent2HighContrast') {\n            for (let i: number = 0; i < div.length; i++) {\n                div[i].setAttribute('style', 'color:white');\n            }\n        }\n        if (theme === 'fabric') {\n            args.progressBar.secondaryProgressColor = '#b0d0e9'\n          } else if (theme === 'material-dark') {\n            args.progressBar.secondaryProgressColor = '#b8b8b8'\n          } else if (theme === 'material') {\n            args.progressBar.secondaryProgressColor = '#f087ab'\n          } else if (theme === 'bootstrap5-dark') {\n            args.progressBar.secondaryProgressColor = '#2b5288'\n          } else if (theme === 'bootstrap5') {\n            args.progressBar.secondaryProgressColor = '#98c5f5'\n          } else if (theme === 'bootstrap') {\n            args.progressBar.secondaryProgressColor = '#acc6dc'\n          }\n          else if (theme === 'bootstrap4') {\n            args.progressBar.secondaryProgressColor = '#98c5f5'\n          }\n          else if (theme === 'bootstrap-dark') {\n            args.progressBar.secondaryProgressColor = '#b8b8b8'\n          } else if (theme === 'highcontrast') {\n            args.progressBar.secondaryProgressColor = '#aca379'\n          } else if (theme === 'fluent-dark') {\n            args.progressBar.secondaryProgressColor = '#2b5288'\n          } else if (theme === 'fluent') {\n            args.progressBar.secondaryProgressColor = '#98c5f5'\n          } else if (theme === 'tailwind-dark') {\n            args.progressBar.secondaryProgressColor = '#22D3EE'\n          } else if (theme === 'tailwind') {\n            args.progressBar.secondaryProgressColor = '#4F46E5'\n          } else if (theme === 'fluent2') {\n            args.progressBar.secondaryProgressColor = '#0F6CBD'\n          } else if (theme === 'fluent2-dark') {\n            args.progressBar.secondaryProgressColor = '#115EA3'\n          } else if (theme === 'fluent2-highcontrast') {\n            args.progressBar.secondaryProgressColor = '#1AEBFF'\n          } else if (theme === 'tailwind3-dark') {\n            args.progressBar.secondaryProgressColor = '#6366F1'\n          } else if (theme === 'tailwind3') {\n            args.progressBar.secondaryProgressColor = '#4F46E5'\n          }\n    };\n\n    let button: Button = new Button();\n    button = new Button({ cssClass: 'e-outline', isPrimary: true });\n    button.appendTo('#reLoad');\n\n    let uploadProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '60',\n        value: 100,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    uploadProgress.appendTo('#lineardeterminate');\n\n    let successProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '60',\n        isIndeterminate: true,\n        value: 20,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    successProgress.appendTo('#linearindeterminate');\n\n    let warningsProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '60',\n        value: 40,\n        secondaryProgress: 60,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    warningsProgress.appendTo('#linearbuffer');\n\n    let errorProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '60',\n        segmentCount: 8,\n        value: 100,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    errorProgress.appendTo('#linearsegment');\n\n    let activeProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '60',\n        value: 100,\n        isActive: true,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    activeProgress.appendTo('#linearactive');\n\n    let replayBtn: HTMLElement = document.getElementById('reLoad') as HTMLElement;\n    replayBtn.onclick = () => {\n        uploadProgress.refresh();\n        successProgress.refresh();\n        warningsProgress.refresh();\n        errorProgress.refresh();\n        activeProgress.refresh();\n    };\n\n"}