{"theme-colors.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\n\nexport function loadProgressBarTheme (args: ILoadedEventArgs): string  {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    var theme = args.progressBar.theme.replace(/dark/i, '-dark').replace(/highcontrast/i, '-highcontrast').toLowerCase();\n    return theme as string;\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n        <div class=\"row linear-parent\">\n            <div id=\"danger\" class=\"linear-progress\"></div>\n            <div id=\"warning\" class=\"linear-progress\"></div>\n            <div id=\"info\" class=\"linear-progress\"></div>  \n            <div id=\"success\" class=\"linear-progress\"></div>    \n       </div>\n       <div class=\"row linear-button\">\n           <button id=\"animation\" class=\"e-control e-btn e-lib e-outline e-primary\">Stop Animation</button></div>\n       </div>\n    </div>\n    \n    \n    <style>\n        #control-container {\n            padding: 0px !important;\n        }\n        .linear-parent {\n            text-align: center;\n            margin-top: 2%;\n        }\n        .linear-button {\n            text-align: center;\n        }\n        .linear-progress {\n            width: 80%;\n            margin: auto;\n            margin-bottom: 3%;\n        }\n        #animation {\n            border-radius: 4px;\n            text-transform: capitalize;\n        }\n        \n        #danger_Lineartrack {\n            opacity: 1 !important;\n        }\n    \n        #warning_Lineartrack {\n            opacity: 1 !important;\n        }\n\n        #info_Lineartrack {\n            opacity: 1 !important;\n        }\n\n        #success_Lineartrack {\n            opacity: 1 !important;\n        }\n    </style>\n</body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme } from '@syncfusion/ej2-progressbar';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { loadProgressBarTheme } from './theme-colors';\n\n/**\n * Sample for default bullet chart.\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let progressLoad: EmitType<ILoadedEventArgs> = (args: ILoadedEventArgs) => {\n     let theme: string = loadProgressBarTheme(args);\n        if (args.progressBar.theme === 'Material') {\n            args.progressBar.trackColor = '#eee';\n        }\n        if (theme === 'highcontrast') {\n            args.progressBar.trackColor = '#969696';\n        }\n    };\n\n    let button: Button = new Button();\n    button = new Button({ cssClass: 'e-outline', isPrimary: true });\n    button.appendTo('#reLoad');\n\n    let dangerProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '30',\n        width: '100%',\n        value: 20,\n        trackThickness: 20,\n        progressThickness: 20,\n        role: 'Success',\n        isStriped: true,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    dangerProgress.appendTo('#danger');\n    let warningProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '30',\n        width: '100%',\n        value: 40,\n        trackThickness: 20,\n        progressThickness: 20,\n        role: 'Info',\n        isStriped: true,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    warningProgress.appendTo('#warning');\n    let infoProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '30',\n        width: '100%',\n        value: 70,\n        role: 'Warning',\n        trackThickness: 20,\n        progressThickness: 20,\n        isStriped: true,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    infoProgress.appendTo('#info');\n\n    let successProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '30',\n        width: '100%',\n        value: 100,\n        trackThickness: 20,\n        progressThickness: 20,\n        role: 'Danger',\n        isStriped: true,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad\n    });\n    successProgress.appendTo('#success');\n\n    let animationBtn: HTMLElement = document.getElementById('animation') as HTMLElement;\n    animationBtn.onclick = () => {\n        if (!dangerProgress.animation.enable) {\n            dangerProgress.animation.enable = true;\n            animationBtn.innerHTML = 'Stop Animation';\n            dangerProgress.refresh();\n        } else {\n            dangerProgress.animation.enable = false;\n            animationBtn.innerHTML = 'Start Animation';\n            dangerProgress.refresh();\n        }\n        if (!warningProgress.animation.enable) {\n            warningProgress.animation.enable = true;\n            warningProgress.refresh();\n        } else {\n            warningProgress.animation.enable = false;\n            warningProgress.refresh();\n        }\n        if (!infoProgress.animation.enable) {\n            infoProgress.animation.enable = true;\n            infoProgress.refresh();\n        } else {\n            infoProgress.animation.enable = false;\n            infoProgress.refresh();\n        }\n        if (!successProgress.animation.enable) {\n            successProgress.animation.enable = true;\n            successProgress.refresh();\n        } else {\n            successProgress.animation.enable = false;\n            successProgress.refresh();\n        }\n    };\n\n"}