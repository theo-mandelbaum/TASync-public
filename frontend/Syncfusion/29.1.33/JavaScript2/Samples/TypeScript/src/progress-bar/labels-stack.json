{"theme-colors.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\n\nexport function loadProgressBarTheme (args: ILoadedEventArgs): string  {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    var theme = args.progressBar.theme.replace(/dark/i, '-dark').replace(/highcontrast/i, '-highcontrast').toLowerCase();\n    return theme as string;\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"row linear-parent\">\n        <div id=\"percentage\" class=\"linear-progress\"></div>\n        <div id=\"ratio\" class=\"linear-progress\"></div>\n        <div id=\"acutal\" class=\"linear-progress\"></div>  \n        <div id=\"custom\" class=\"linear-progress\"></div>    \n   </div>\n   <div class=\"row linear-button\">\n       <button id=\"reLoad\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button></div>\n   </div>\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n    .linear-parent {\n        text-align: center;\n        margin-top: 2%;\n    }\n    .linear-button {\n        text-align: center;\n    }\n    .linear-progress {\n        width: 80%;\n        margin: auto;\n        margin-bottom: 3%;\n    }\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n    }\n\n    #percentage_Lineartrack {\n            opacity: 1 !important;\n    }\n    \n    #ratio_Lineartrack {\n            opacity: 1 !important;\n    }\n    #acutal_Lineartrack {\n            opacity: 1 !important;\n    }\n\n    #custom_Lineartrack {\n            opacity: 1 !important;\n    }\n    \n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme } from '@syncfusion/ej2-progressbar';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { loadProgressBarTheme } from './theme-colors';\n\n/**\n * Sample for default bullet chart.\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let progressLoad: EmitType<ILoadedEventArgs> = (args: ILoadedEventArgs) => {\n        let theme: string = loadProgressBarTheme(args);\n        if (args.progressBar.theme === 'Material') {\n            args.progressBar.trackColor = '#eee';\n        }\n        if (theme === 'highcontrast') {\n            args.progressBar.labelStyle.color = '#000000';\n            args.progressBar.trackColor = '#969696';\n        }\n    };\n\n    let button: Button = new Button();\n    button = new Button({ cssClass: 'e-outline', isPrimary: true });\n    button.appendTo('#reLoad');\n\n    let nearProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '40',\n        width: '100%',\n        showProgressValue: true,\n        value: 40,\n        trackThickness: 24,\n        progressThickness: 24,\n        labelStyle: {\n            textAlignment: 'Center',\n            text: '40% Complete (Success)',\n            color: '#ffffff'\n        },\n        role: 'Success',\n        load: progressLoad,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        }\n    });\n    nearProgress.appendTo('#percentage');\n    let centerProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '40',\n        width: '100%',\n        showProgressValue: true,\n        value: 50,\n        trackThickness: 24,\n        progressThickness: 24,\n        role: 'Info',\n        load: progressLoad,\n        labelStyle: {\n            textAlignment: 'Center',\n            text: '50% Complete (Info)',\n            color: '#ffffff'\n        },\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        }\n    });\n    centerProgress.appendTo('#ratio');\n    let farProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '40',\n        width: '100%',\n        showProgressValue: true,\n        role: 'Warning',\n        load: progressLoad,\n        value: 60,\n        trackThickness: 24,\n        progressThickness: 24,\n        labelStyle: {\n            textAlignment: 'Center',\n            text: '60% Complete (Warning)',\n            color: '#ffffff'\n        },\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        }\n    });\n    farProgress.appendTo('#acutal');\n    let customProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '40',\n        width: '100%',\n        showProgressValue: true,\n        value: 70,\n        trackThickness: 24,\n        progressThickness: 24,\n        role: 'Danger',\n        load: progressLoad,\n        labelStyle: {\n            textAlignment: 'Center',\n            text: '70% Complete (Danger)',\n            color: '#ffffff'\n        },\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        }\n    });\n\n    customProgress.appendTo('#custom');\n    let replayBtn: HTMLElement = document.getElementById('reLoad') as HTMLElement;\n    replayBtn.onclick = () => {\n        nearProgress.refresh();\n        centerProgress.refresh();\n        farProgress.refresh();\n        customProgress.refresh();\n    };\n"}