{"theme-colors.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\n\nexport function loadProgressBarTheme (args: ILoadedEventArgs): string  {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    var theme = args.progressBar.theme.replace(/dark/i, '-dark').replace(/highcontrast/i, '-highcontrast').toLowerCase();\n    return theme as string;\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n     <div class=\"row linear-parent\">\n          <div>\n             <div class=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                <div id=\"linearSegment\"></div>\n             </div>\n             <div>\n              <div class=\"col-lg-12 col-sm-12 progressbar-mode\"></div>\n                <div id=\"circularSegment\"></div>\n            </div>\n     </div>\n</div>\n\n\n<style>\n      #control-container {\n            padding: 0px !important;\n        }\n    \n        .linear-parent {\n            text-align: center;\n            width: 75%;\n            margin: auto;\n        }\n        \n        .linear-button {\n           text-align: center;\n           padding:2%;\n        }\n\n        .progressbar-mode {\n            text-align: left;\n            font-family: Roboto-Regular;\n            font-size: 14px;\n            color: #3D3E3C;\n            margin-left: 10px;\n            margin-top: 5%;\n            padding: 0px;\n            top: 20px;\n        }\n    \n        #reLoad {\n            border-radius: 4px;\n            text-transform: capitalize;\n        }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2/base\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme, ProgressAnnotation } from '@syncfusion/ej2-progressbar';\nimport { Browser } from '@syncfusion/ej2/base';\nimport { loadProgressBarTheme } from './theme-colors';\nProgressBar.Inject(ProgressAnnotation);\n\n/**\n * Sample for default bullet chart.\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let linearProgress: ProgressBar = new ProgressBar({\n        type: 'Linear',\n        height: '30',\n        width: '70%',\n        value: 40,\n        segmentCount: Browser.isDevice? 25 : 50,\n        gapWidth: 5,\n        trackThickness: 15,\n        progressThickness: 15,\n        cornerRadius: 'Square',\n        animation: {\n            enable: true,\n            duration: 2000\n        },\n        load: (args: ILoadedEventArgs) => {\n            let theme: string = loadProgressBarTheme(args);\n            if (theme === 'highcontrast') {\n                args.progressBar.trackColor = '#969696';\n            }\n        }\n    });\n    linearProgress.appendTo('#linearSegment');\n\n    let circularProgress: ProgressBar = new ProgressBar({\n        type: 'Circular',\n        height: '200px',\n        width: '200px',\n        trackThickness: 15,\n        progressThickness: 15,\n        startAngle: 220,\n        endAngle: 140,\n        segmentCount: 50,\n        gapWidth: 5,\n        value: 40,\n        animation: {\n            enable: true,\n            duration: 2000\n        },\n        annotations: [{\n            content: '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>'\n        }],\n        cornerRadius: 'Square',\n        load: (args: ILoadedEventArgs) => {\n            let theme: string = loadProgressBarTheme(args);\n\n            switch (theme) {\n                case 'material':\n                    args.progressBar.annotations[0].content =\n                        '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#e91e63\"><span></span></div>';\n                    break;\n                case 'fabric':\n                    args.progressBar.annotations[0].content =\n                        '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0078D6\"><span></span></div>';\n                    break;\n                case 'bootstrap':\n                    args.progressBar.annotations[0].content =\n                        '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#317ab9\"><span></span></div>';\n                    break;\n                case 'bootstrap4':\n                    args.progressBar.annotations[0].content =\n                        '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#007bff\"><span></span></div>';\n                    break;\n                case 'tailwind':\n                case 'tailwind3':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#4F46E5\"><span></span></div>';\n                    break;\n                case 'bootstrap-dark':\n                case 'fabric-dark':\n                case 'material-dark':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#9A9A9A\"><span></span></div>';\n                    break;\n                case 'bootstrap5':\n                case 'bootstrap5-dark':\n                case 'fluent':\n                case 'fluent-dark':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0D6EFD\"><span></span></div>';\n                    break;\n                case 'tailwind-dark':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#22D3EE\"><span></span></div>';\n                    break;\n                case 'tailwind3-dark':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6366F1\"><span></span></div>';\n                    break;\n                case 'material3':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#6750A4\"><span></span></div>';\n                    break;\n                case 'material3-dark':\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#D0BCFF\"><span></span></div>';\n                    break;          \n                case \"fluent2\":\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#0F6CBD\"><span></span></div>';\n                    break;\n                case \"fluent2-dark\":\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#115EA3\"><span></span></div>';\n                    break; \n                case \"fluent2-highcontrast\":\n                    args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#1AEBFF\"><span></span></div>';\n                    break; \n                default:\n                    args.progressBar.trackColor = '#969696';\n                    args.progressBar.annotations[0].content =\n                        '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#FFD939\"><span></span></div>';\n                    break;\n\n            }\n        }\n    });\n    circularProgress.appendTo('#circularSegment');\n\n    let timer: number = window.setInterval(timing, 2500);\n    function timing(): void {\n        if (circularProgress.value >= circularProgress.maximum) {\n            clearInterval(timer);\n        } else {\n            circularProgress.value += 20;\n            linearProgress.value += 20;\n        }\n    }\n\n"}