{"theme-colors.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\n\nexport function loadProgressBarTheme (args: ILoadedEventArgs): string  {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    var theme = args.progressBar.theme.replace(/dark/i, '-dark').replace(/highcontrast/i, '-highcontrast').toLowerCase();\n    return theme as string;\n};","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section progress-bar-parent\">\n  <div class=\"row\">\n      <div class=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n          <div id=\"label-container\"></div>\n      </div>\n      <div class=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n          <div id=\"pause-container\"></div>\n      </div>\n      <div class=\"col-lg-4 col-md-4 col-sm-4 paligncenter\">\n          <div id=\"download-container\"></div>\n      </div>\n  </div>\n  <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-12 reload-btn\">\n          <button id=\"reLoad\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n      </div>\n  </div>\n\n</div>\n\n\n<style>\n     #control-container {\n        padding: 0px !important;\n    }\n    .progress-bar-parent {\n        margin-top: 8%;\n        text-align: center;\n    }\n    .paligncenter {\n        text-align: center;\n    }\n    .plabeltxt {\n        font-size: 20px;\n        font-weight: bold;\n    }\n    .reload-btn {\n        text-align: center;\n        margin-top: 3%;\n    }\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n    }\n</style>\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-progressbar\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { ProgressBar, ProgressAnnotation, IProgressValueEventArgs, ILoadedEventArgs, ProgressTheme } from '@syncfusion/ej2-progressbar';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { loadProgressBarTheme } from './theme-colors';\nProgressBar.Inject(ProgressAnnotation);\n\n/**\n * Sample for custom content progress bar sample.\n */\n// tslint:disable-next-line:max-func-body-length\n\n    \n    let clearTimeout1: number;\n    let clearTimeout2: number;\n    let annotationColors: {\n        material: string,\n        fabric: string,\n        bootstrap: string,\n        bootstrap4: string,\n        highcontrast: string,\n        tailwind: string,\n        bootstrap5dark: string,\n        bootstrapdark: string,\n        fabricdark: string,\n        materialdark: string,\n        tailwinddark: string,\n        bootstrap5: string,\n        fluent: string,\n        fluentdark: string,\n        material3: string,\n        material3dark: string\n        fluent2: string,\n        fluent2highcontrast: string,\n        fluent2dark: string,\n        tailwind3: string,\n        tailwind3dark: string,\n    } = { fluent: '#0D6EFD', fluentdark: '#0D6EFD',  material: '#e91e63', fabric: '#0078D6', bootstrap: '#317ab9', bootstrap4: '#007bff', highcontrast: '#FFD939', tailwind: '#4F46E5', bootstrap5: '#0D6EFD', bootstrap5dark: '#0D6EFD', bootstrapdark: '#9A9A9A', fabricdark: '#9A9A9A', materialdark: '#9A9A9A', tailwinddark: '#22D3EE', material3 : '#6750A4', material3dark: '#D0BCFF', fluent2: '#0F6CBD', fluent2highcontrast: '#1AEBFF', fluent2dark: '#115EA3', tailwind3: '#4F46E5', tailwind3dark: '#6366F1' };\n    let progressLoad: EmitType<ILoadedEventArgs> = (args: ILoadedEventArgs) => {\n        let theme: string = loadProgressBarTheme(args);\n        if (args.progressBar.element.id === 'label-container') {\n            // tslint:disable-next-line:max-line-length\n            args.progressBar.annotations[0].content = '<div id=\"point1\" class=\"plabeltxt\" style=\"color: ' + annotationColors[theme.replace(/-/i, '')] + ' \"><span>80%</span></div>';\n        } else if (args.progressBar.element.id === 'download-container') {\n            args.progressBar.annotations[0].content = '<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/' + theme.replace(/-/i, '') + '-Download.svg\" alt=\"Download Icon\"></img>';\n        } else {\n            args.progressBar.annotations[0].content = '<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/' + theme.replace(/-/i, '') + '-pause.svg\" alt=\"Pause Icon\"></img>';\n        }\n    };\n    let pausePlay: ProgressBar = new ProgressBar({\n        type: 'Circular',\n        value: 100,\n        width: '160px',\n        height: '160px',\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        load: progressLoad,\n        progressCompleted: (args: IProgressValueEventArgs) => {\n            clearTimeout(clearTimeout1);\n            clearTimeout1 = +setTimeout(\n                () => {\n                    //tslint:disable-next-line\n                    pausePlay.annotations[0].content = '<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/' + (pausePlay.theme).toLowerCase() + '-Play.svg\" alt=\\\"Play Icon\\\"></img>';\n                    pausePlay.dataBind();\n                },\n                2000);\n        },\n        annotations: [\n            {\n                //tslint:disable-next-line\n                content: `<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/material-pause.svg\" alt=\"Pause Icon\"></img>`,\n            },\n        ]\n    });\n    pausePlay.appendTo('#pause-container');\n    let downloadProgress: ProgressBar = new ProgressBar({\n        type: 'Circular',\n        value: 100,\n        width: '160px',\n        height: '160px',\n        enableRtl: false,\n        load: progressLoad,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        progressCompleted: (args: IProgressValueEventArgs) => {\n            clearTimeout(clearTimeout2);\n            clearTimeout2 = +setTimeout(\n                () => {\n                    //tslint:disable-next-line\n                    downloadProgress.annotations[0].content = '<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/' + (downloadProgress.theme).toLowerCase() + '-Tick.svg\" alt=\\\"Tick Icon\\\"></img>';\n                    downloadProgress.dataBind();\n                },\n                2000);\n        },\n        annotations: [\n            {\n                //tslint:disable-next-line\n                content: `<img src=\"//npmci.syncfusion.com/development/demos/src/progress-bar/images/material-Download.svg\" alt=\"Download Icon\"></img>`,\n            },\n        ]\n    });\n    downloadProgress.appendTo('#download-container');\n    let annotate: ProgressBar = new ProgressBar({\n        type: 'Circular',\n        value: 80,\n        width: '160px',\n        height: '160px',\n        cornerRadius: 'Round',\n        startAngle: 180,\n        endAngle: 180,\n        animation: {\n            enable: true,\n            duration: 2000,\n            delay: 0,\n        },\n        annotations: [\n            {\n                content: '<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#b52123;fill:#b52123\"><span>80%</span></div>',\n            }\n        ],\n        load: progressLoad\n    });\n    annotate.appendTo('#label-container');\n    let replayBtn: HTMLElement = document.getElementById('reLoad') as HTMLElement;\n    replayBtn.onclick = () => {\n        pausePlay.refresh();\n        downloadProgress.refresh();\n        annotate.refresh();\n    };\n"}