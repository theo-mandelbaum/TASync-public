{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"range-container\"></div>\n            </div>\n        </div>\n        <!-- property panel -->\n        <div class=\"col-md-4 property-section\">\n            <br>\n            <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left:-10px\" role=\"none\">\n                <colgroup>\n                    <col span=\"1\" style=\"width: 40%;\">\n                    <col span=\"1\" style=\"width: 30%;\">\n                    <col span=\"1\" style=\"width: 30%;\">\n                </colgroup>\n                <tbody>\n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\"> Select Range </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"rangeSelect\" class=\"form-control\">\n                                    <option value=\"0\" selected=\"true\">Low</option>\n                                    <option value=\"1\">Medium</option>\n                                    <option value=\"2\">High</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Range Start</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"start\" value=\"0\" min=\"0\" max=\"40\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"rangeStart\" style=\"margin-left: -30px;\">0</span>\n                        </td>\n                    </tr>\n    \n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Range End</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"end\" value=\"40\" min=\"0\" max=\"40\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"rangeEnd\" style=\"margin-left: -30px;\">40</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Start Width</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"startWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"rangeStartWidth\" style=\"margin-left: -30px;\">10</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">End Width</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"endWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"rangeEndWidth\" style=\"margin-left: -30px;\">10</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 40px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Corner Radius</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"radius\" value=\"0\" min=\"0\" max=\"12\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"cornerRadius\" style=\"margin-left: -30px;\">0</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, Annotations, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType } from '@syncfusion/ej2-base';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        background:'transparent',\n        axes: [{\n            lineStyle: { width: 10, color: 'transparent' },\n            labelStyle: {\n                position: 'Inside', useRangeColor: false,\n                font: { size: '12px', fontStyle: 'normal', fontFamily: 'inherit' }\n            }, majorTicks: { height: 10, offset: 5 }, minorTicks: { height: 0 },\n            annotations: [{\n                description:'Speedometer',\n                content: '<div><span style=\"font-size:14px; font-family:inherit\">Speedometer</span></div>',\n                radius: '30%', angle: 0, zIndex: '1'\n            }, {\n                description:'65 MPH',\n                content: '<div><span style=\"font-size:20px; font-family:inherit\">65 MPH</span></div>',\n                radius: '40%', angle: 180, zIndex: '1'\n            }],\n            startAngle: 210, endAngle: 150, minimum: 0, maximum: 120, radius: '80%',\n            ranges: [{ start: 0, end: 40, color: '#30B32D' }, { start: 40, end: 80, color: '#FFDD00' },\n            { start: 80, end: 120, color: '#F03E3E' }],\n            pointers: [{\n                value: 65, radius: '60%', pointerWidth: 8,\n                cap: { radius: 7 }, needleTail: { length: '18%' }\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    circulargauge.appendTo('#range-container');\n    \n    let listObj: DropDownList = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            let index: number = +listObj.value;\n            colortObj.value = circulargauge.axes[0].ranges[index].color;\n            (<HTMLInputElement>document.getElementById('endWidth')).value = circulargauge.axes[0].ranges[index].endWidth.toString();\n            document.getElementById('rangeEndWidth').innerHTML = circulargauge.axes[0].ranges[index].endWidth.toString();\n            (<HTMLInputElement>document.getElementById('startWidth')).value = circulargauge.axes[0].ranges[index].startWidth.toString();\n            document.getElementById('rangeStartWidth').innerHTML = circulargauge.axes[0].ranges[index].startWidth.toString();\n            (<HTMLInputElement>document.getElementById('end')).value = circulargauge.axes[0].ranges[index].end.toString();\n            document.getElementById('rangeEnd').innerHTML = circulargauge.axes[0].ranges[index].end.toString();\n            (<HTMLInputElement>document.getElementById('start')).value = circulargauge.axes[0].ranges[index].start.toString();\n            document.getElementById('rangeStart').innerHTML = circulargauge.axes[0].ranges[index].start.toString();\n            (<HTMLInputElement>document.getElementById('radius')).value = circulargauge.axes[0].ranges[index].roundedCornerRadius.toString();\n            document.getElementById('cornerRadius').innerHTML = circulargauge.axes[0].ranges[index].roundedCornerRadius.toString();\n            if (index == 0) {\n                (<HTMLInputElement>document.getElementById('start')).min = \"0\";\n                (<HTMLInputElement>document.getElementById('start')).max = \"40\";\n                (<HTMLInputElement>document.getElementById('end')).min = \"0\";\n                (<HTMLInputElement>document.getElementById('end')).max = \"40\";\n            } else if (index == 1) {\n                (<HTMLInputElement>document.getElementById('start')).min = \"40\";\n                (<HTMLInputElement>document.getElementById('start')).max = \"80\";\n                (<HTMLInputElement>document.getElementById('end')).min = \"40\";\n                (<HTMLInputElement>document.getElementById('end')).max = \"80\";\n            } else {\n                (<HTMLInputElement>document.getElementById('start')).min = \"80\";\n                (<HTMLInputElement>document.getElementById('start')).max = \"120\";\n                (<HTMLInputElement>document.getElementById('end')).min = \"80\";\n                (<HTMLInputElement>document.getElementById('end')).max = \"120\";\n            }\n            (<HTMLInputElement>document.getElementById('start')).value = circulargauge.axes[0].ranges[index].start.toString();\n            (<HTMLInputElement>document.getElementById('end')).value = circulargauge.axes[0].ranges[index].end.toString();\n            document.getElementById('rangeStart').innerHTML = circulargauge.axes[0].ranges[index].start.toString();\n            (<HTMLInputElement>document.getElementById('radius')).value = circulargauge.axes[0].ranges[index].roundedCornerRadius.toString();\n            document.getElementById('cornerRadius').innerHTML = circulargauge.axes[0].ranges[index].roundedCornerRadius.toString();\n        }\n    });\n    listObj.appendTo('#rangeSelect');\n\n    let colortObj = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            circulargauge.axes[0].ranges[+listObj.value].color = colortObj.value.toString();\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        }\n    });\n    colortObj.appendTo('#rangeColor');\n\n    document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =\n        document.getElementById('start').onchange = () => {\n            let min: number = parseInt((<HTMLInputElement>document.getElementById('start')).value, 10);\n            document.getElementById('rangeStart').innerHTML = min.toString();\n            circulargauge.axes[0].ranges[+listObj.value].start = min;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =\n        document.getElementById('end').onchange = () => {\n            let max: number = parseInt((<HTMLInputElement>document.getElementById('end')).value, 10);\n            document.getElementById('rangeEnd').innerHTML = max.toString();\n            circulargauge.axes[0].ranges[+listObj.value].end = max;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('startWidth').onpointermove = document.getElementById('startWidth').ontouchmove =\n        document.getElementById('startWidth').onchange = () => {\n            let startWidth: number = parseInt((<HTMLInputElement>document.getElementById('startWidth')).value, 10);\n            document.getElementById('rangeStartWidth').innerHTML = startWidth.toString();\n            circulargauge.axes[0].ranges[+listObj.value].startWidth = startWidth;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('endWidth').onpointermove = document.getElementById('endWidth').ontouchmove =\n        document.getElementById('endWidth').onchange = () => {\n            let endWidth: number = parseInt((<HTMLInputElement>document.getElementById('endWidth')).value, 10);\n            document.getElementById('rangeEndWidth').innerHTML = endWidth.toString();\n            circulargauge.axes[0].ranges[+listObj.value].endWidth = endWidth;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n\n    document.getElementById('radius').onpointermove = document.getElementById('radius').ontouchmove =\n        document.getElementById('radius').onchange = () => {\n            let radius: number = parseInt((<HTMLInputElement>document.getElementById('radius')).value, 10);\n            document.getElementById('cornerRadius').innerHTML = radius.toString();\n            circulargauge.axes[0].ranges[+listObj.value].roundedCornerRadius = radius;\n            circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n        };\n    let rangeFontchange: EmitType<CheckBoxChangeEvents>;\n    let rangeFontchangeCheckBox: CheckBox = new CheckBox(\n        {\n            change: rangeFontchange\n        },\n        '#enable');\n\n    rangeFontchangeCheckBox.change = rangeFontchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        circulargauge.axes[0].labelStyle.useRangeColor = boolean;\n        circulargauge.axes[0].majorTicks.useRangeColor = boolean;\n        circulargauge.axes[0].minorTicks.useRangeColor = boolean;\n        circulargauge.axes[0].pointers[0].animation.enable = false; circulargauge.refresh();\n    }\n\n"}