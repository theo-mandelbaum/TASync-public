{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div id=\"clockgauge\">\n        </div>\n    </div>\n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}let needlePointer: number = 0.2;\nlet needleStartWidth: number = 1;\nlet needleStartWidthOne: number = 2;\nlet pointerInterval: any;\nimport { CircularGauge, ILoadedEventArgs, GaugeTheme, Annotations, IResizeEventArgs } from '@syncfusion/ej2-circulargauge';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        background: 'transparent',\n        axes: [{\n            radius: '90%',\n            startAngle: 0,\n            endAngle: 0,\n            minimum: 0,\n            maximum: 12,\n            majorTicks: {\n                width: 2, height: 15, interval: 1, offset: 5\n            },\n            lineStyle: { width: 2 },\n            minorTicks: {\n                width: 1, height: 10, interval: 0.2, offset: 5\n            },\n            labelStyle: {\n                font: {\n                    fontFamily: 'inherit'\n                },\n                offset: 10,\n                hiddenLabel: 'First'\n            },\n            pointers: [{\n                value: 10.2,\n                radius: '70%',\n                pointerWidth: 3,\n                needleStartWidth: needleStartWidthOne,\n                needleEndWidth: 1,\n                cap: {\n                    radius: 5,\n                    color: 'white',\n                    border: { width: 1, color: '#00A885' }\n\n                },\n                needleTail: {\n                    length: \"0%\",\n                },\n                animation: {\n                    enable: false,\n                },\n            },\n            {\n                value: 2,\n                radius: '100%',\n                pointerWidth: 3,\n                needleStartWidth: needleStartWidth,\n                needleEndWidth: 1,\n                cap: {\n                    radius: 5,\n                    color: 'white',\n                    border: { width: 1, color: '#00A885' }\n\n                },\n                needleTail: {\n                    length: \"0%\",\n                },\n                animation: {\n                    enable: false,\n                },\n            },\n            {\n                value: 12,\n                radius: '90%',\n                pointerWidth: 3,\n                needleStartWidth: needleStartWidth,\n                needleEndWidth: 1,\n                color: '#00A8B5',\n                cap: {\n                    radius: 5,\n                    color: 'white',\n                    border: { width: 1, color: '#00A885' }\n\n                },\n                needleTail: {\n                    length: \"25%\",\n                    color: '#00A8B5'\n                },\n                animation: {\n                    enable: false,\n                },\n            }],\n            annotations: [{\n                description:'Sub gauge one',\n                content: '<div id=\"subGaugeOne\" style=\"margin-left: -50%\"></div>',\n                angle: 290,\n                radius: '0%',\n                zIndex: '1'\n            }, {\n                description:'Sub gauge two',\n                content: '<div id=\"subGaugeTwo\" style=\"margin-left: -110%;margin-top: -50%;\"></div>',\n                angle: 90,\n                radius: '0%',\n                zIndex: '1'\n\n            }],\n            \n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        resized: (args: IResizeEventArgs) => {\n            let timeoutId: any = setInterval((): void => {\n                if (document.getElementById('clockgauge')) {\n                    renderGauges();\n                } else {\n                    clearInterval(+timeoutId);\n                }\n            }, 1000)\n        },\n        loaded: (args: ILoadedEventArgs) => {\n            renderGauges();\n            if (isNullOrUndefined(pointerInterval)) {\n                pointerInterval = setInterval(\n                    (): void => {\n                        if (document.getElementById('clockgauge')) {\n                            if (needlePointer <= 12) {\n                            if (needlePointer == 0.2) {\n                                needlePointer = 0.2;\n                            }\n                            circulargauge.setPointerValue(0, 2, needlePointer);\n                            needlePointer += 0.2;\n                            } else {\n                                needlePointer = 0.2;\n                            }\n                        } else {\n                            clearInterval(+pointerInterval);\n                        }\n                    }, 1000)\n            }\n        }\n    });\n    circulargauge.appendTo('#clockgauge');\n    function renderGauges() {\n        let annotationGaugeTwo: CircularGauge = new CircularGauge({\n            width: '150px',\n            height: '150px',\n            background: 'transparent',\n            axes: [{\n                labelStyle: { hiddenLabel: 'First', font: { fontFamily: 'inherit', size: '7px' }, offset: -5 },\n                majorTicks: { offset: 2, interval: 2 },\n                minorTicks: { offset: 2, interval: 0.4 }, minimum: 0, maximum: 12,\n                pointers: [{\n                    value: 8,\n                    radius: '50%', pointerWidth: 2, color: '#00A8B5',\n                    animation: { enable: false }, cap: { radius: 0 }, needleTail: { length: '0%' }\n                }], startAngle: 0, endAngle: 0, radius: '70%', lineStyle: { width: 2 }\n            }],\n            load: (args: ILoadedEventArgs) => {\n                // custom code start\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n                // custom code end\n            }\n        });\n        annotationGaugeTwo.appendTo('#subGaugeTwo');\n\n        let annotationGaugeOne: CircularGauge = new CircularGauge({\n            width: '150px',\n            height: '150px',\n            background: 'transparent',\n            axes: [{\n                labelStyle: { hiddenLabel: 'First', font: { fontFamily: 'inherit', size: '7px' }, offset: -5 },\n                majorTicks: { interval: 2, offset: 2 },\n                minorTicks: { interval: 0.4, offset: 2 }, minimum: 0, maximum: 12,\n                pointers: [{\n                    value: 5,\n                    radius: '50%', pointerWidth: 2, color: '#00A8B5',\n                    animation: { enable: false }, cap: { radius: 0 }, needleTail: { length: '0%' }\n                }], startAngle: 0, endAngle: 0, radius: '70%', lineStyle: { width: 2 }\n            }],\n            load: (args: ILoadedEventArgs) => {\n                // custom code start\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n                // custom code end\n            }\n        });\n        annotationGaugeOne.appendTo('#subGaugeOne');\n    }\n"}