{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"control-section\">\n            <div id=\"range-container\"></div>\n            <div id=\"template\">\n                <div class=\"sliderwrap\">\n                    <div id=\"default\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script id=\"pointerValue\" type=\"text/x-template\">\n        <div id='sliderwrap'>\n            <div class='des'>\n                <div id='default'></div>\n            </div>\n        </div>\n    </script>\n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, Annotations, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { Slider, SliderChangeEventArgs } from '@syncfusion/ej2-inputs';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\nlet sliderValue: number = 60;\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        title: 'Progress Tracker',\n        titleStyle: { fontFamily: 'inherit' },\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                description:'RangeBar pointer value from the slider',\n                content: '<div id=\"pointervalue\" style=\"font-size:35px;width:120px;text-align:center\">' +\n                    sliderValue.toString() + '/100</div>',\n                angle: 0,\n                zIndex: '1',\n                radius: '0%'\n            },\n            {\n                description:'Slider',\n                content: '<div id=\"slider\" style=\"height:70px;width:250px;\"></div>',\n                angle: 0,\n                zIndex: '1',\n                radius: '-100%'\n            },\n            ],\n            lineStyle: { width: 0 },\n            labelStyle: {\n                position: 'Inside', useRangeColor: true,\n                font: { size: '0px', color: 'white', fontFamily: 'Roboto', fontStyle: 'Regular' }\n            }, majorTicks: { height: 0, }, minorTicks: { height: 0 },\n            startAngle: 200, endAngle: 160, minimum: 0, maximum: 100, radius: '80%',\n            ranges: [\n                {\n                    start: 0, end: 100,\n                    radius: '90%',\n                    startWidth: 30, endWidth: 30,\n                    color: '#E0E0E0',\n                    roundedCornerRadius: 20\n                },\n            ],\n            pointers: [{\n                roundedCornerRadius: 20,\n                value: 60,\n                type: 'RangeBar',\n                radius: '90%',\n                color: '#e5ce20',\n                border: {\n                    color: 'grey',\n                    width: 0\n                },\n                animation: {\n                    enable: false\n                },\n                pointerWidth: 30\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        loaded: (args: ILoadedEventArgs) => {\n            let annotation: Element = document.getElementById(args.gauge.element.id + '_Annotations_0');\n            if (annotation) {\n                annotationRender('slider', circulargauge.axes[0].pointers[0].value);\n                if (document.getElementById('pointervalue')) {\n                    document.getElementById('pointervalue').innerHTML = circulargauge.axes[0].pointers[0].value.toString() + '/100';\n                }\n            }\n        }\n    });\n    circulargauge.appendTo('#range-container');\n\n    function annotationRender(id: string, sliderValue: number): void {\n        let first: Slider = new Slider({\n            min: 0, max: 100,\n            type: 'MinRange',\n            limits: { enabled: true, minStart: 0, minEnd: 100 },\n            value: sliderValue,\n            change: (args: SliderChangeEventArgs) => {\n                sliderValue = args.value as number;\n                if (!isNaN(sliderValue)) {\n                    circulargauge['isProtectedOnChange'] = true;\n                    if (sliderValue >= 0 && sliderValue < 20) {\n                        circulargauge.axes[0].pointers[0].color = '#ea501a';\n                    } else if (sliderValue >= 20 && sliderValue < 40) {\n                        circulargauge.axes[0].pointers[0].color = '#f79c02';\n                    } else if (sliderValue >= 40 && sliderValue < 60) {\n                        circulargauge.axes[0].pointers[0].color = '#e5ce20';\n                    } else if (sliderValue >= 60 && sliderValue < 80) {\n                        circulargauge.axes[0].pointers[0].color = '#a1cb43';\n                    } else if (sliderValue >= 80 && sliderValue < 100) {\n                        circulargauge.axes[0].pointers[0].color = '#82b944';\n                    }\n                    circulargauge.setPointerValue(0, 0, sliderValue);\n                    if (document.getElementById('pointervalue')) {\n                        document.getElementById('pointervalue').innerHTML = circulargauge.axes[0].pointers[0].value.toString() + '/100';\n                    }\n                }\n            }\n        });\n        first.appendTo('#' + id);\n    }\n"}