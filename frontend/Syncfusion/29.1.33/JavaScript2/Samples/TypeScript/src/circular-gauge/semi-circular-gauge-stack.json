{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <br>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"gauge\"></div>\n            </div>\n        </div>\n        <!-- property panel -->\n        <div class=\"col-md-4 property-section\">\n            <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left:-10px\" role=\"none\">\n                <colgroup>\n                    <col span=\"1\" style=\"width: 50%;\">\n                    <col span=\"1\" style=\"width: 30%;\">\n                    <col span=\"1\" style=\"width: 20%;\">\n                </colgroup>\n                <tbody>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div style=\"font-size: 14px;\">Start Angle</div>\n                    </td>\n                    <td style=\"width: 80%;\">\n                        <div>\n                            <input type=\"range\" id=\"start\" value=\"270\" min=\"0\" max=\"360\" style=\"width: 70%;\">\n                        </div>\n                    </td>\n                    <td style=\"width: 20%;padding-top: 10px;text-align: center;\">\n                        <span id=\"rangeStart\" style=\"margin-left: -20px;font-size:14px\">270°</span>\n                    </td>\n                </tr>\n            \n                <tr style=\"height: 50px\">\n                    <td>\n                        <div style=\"font-size: 14px;\">End Angle</div>\n                    </td>\n                    <td style=\"width: 80%\">\n                        <div>\n                            <input type=\"range\" id=\"end\" value=\"90\" min=\"0\" max=\"360\" style=\"width: 70%;\">\n                        </div>\n                    </td>\n                    <td style=\"width: 20%;padding-top: 10px;text-align: center;\">\n                        <span id=\"rangeEnd\" style=\"margin-left: -20px;font-size:14px;\">90°</span>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div style=\"font-size: 14px;\">Radius</div>\n                    </td>\n                    <td style=\"width: 80%\">\n                        <div>\n                            <input type=\"range\" id=\"radius\" value=\"100\" min=\"30\" max=\"100\" style=\"width: 70%;\">\n                        </div>\n                    </td>\n                    <td style=\"width: 20%;padding-top: 10px;text-align: center;\">\n                        <span id=\"radius1\" style=\"margin-left: -20px;font-size:14px\">100%</span>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td style=\"width: 40%\">\n                        <div class=\"property-text\" style=\"margin-top: 10px;font-size:14px\"> Radius based on angle</div>\n                    </td>\n                    <td style=\"width: 40%\">\n                        <div id=\"checkbox1\" style=\"margin-left:-10px;\">\n                            <input type=\"checkbox\" id=\"angle\">\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div style=\"margin-top: 10px;font-size: 14px;\">Center X</div>\n                    </td>\n                    <td style=\"width: 80%\">\n                        <div>\n                            <input type=\"range\" id=\"centerX\" value=\"50\" min=\"0\" max=\"100\" style=\"width: 70%; margin-top: 10px;\">\n                        </div>\n                    </td>\n                    <td style=\"width: 20%;padding-top: 20px;text-align: center;\">\n                        <span id=\"center1\" style=\"margin-left: -20px;font-size: 14px;\">50%</span>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div style=\"margin-top: 10px;font-size:14px\">Center Y</div>\n                    </td>\n                    <td style=\"width: 80%\">\n                        <div>\n                            <input type=\"range\" id=\"centerY\" value=\"50\" min=\"0\" max=\"100\" style=\"width: 70%; margin-top: 10px;\">\n                        </div>\n                    </td>\n                    <td style=\"width: 20%;padding-top: 20px;text-align: center;\">\n                        <span id=\"center2\" style=\"margin-left: -20px;font-size:14px;\">50%</span>\n                    </td>\n                </tr>\n                <tr style=\"height: 50px\">\n                    <td>\n                        <div id=\"enablehide\" style=\"font-size:14px;\"> Hide Intersecting Labels </div>\n                    </td>\n                    <td>\n                        <div id=\"checkbox2\" style=\"margin-left: -10px;\">\n                            <input type=\"checkbox\" id=\"hidelabel\" checked=\"\">\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n            </table>\n        </div>\n    </div>\n    <style>\n        #checkbox2{\n            margin-top: 10px;\n        }\n        #enablehide{\n            margin-top: 20px;\n        }\n        .e-view.fluent #enablehide, .e-view.fluent-dark #enablehide {\n            margin-top: 15px;\n        }\n        .e-view.fluent2 #checkbox1, .e-view.fluent #checkbox1, .e-view.fluent-dark #checkbox1 {\n            margin-top: 5px;\n        }\n        .e-view.fluent2-dark #checkbox2 {\n            margin-top: -2px;\n        }\n\n        .e-view.fluent2-dark #checkbox1, .e-view.fluent2-dark #checkbox2,\n        .e-view.fluent2 #checkbox1, .e-view.fluent2 #checkbox2 {\n            padding-left: 2px;\n        }\n        .fluent2-highcontrast #checkbox1,\n        .fluent2-highcontrast #checkbox2 {\n            padding-left: 2px;\n        }\n    </style>\n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType } from '@syncfusion/ej2-base';\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        moveToCenter: false,\n        centerX: '50%',\n        centerY: '50%',\n        background:'transparent',\n        axes: [{\n            hideIntersectingLabel: true,\n            startAngle: 270, endAngle: 90,\n            lineStyle: { width: 3 },\n            labelStyle: {\n                position: 'Outside', autoAngle: true,\n                font: { fontWeight: 'normal', fontFamily: 'inherit' },\n                format: '{value}%'\n            }, majorTicks: {\n                position: 'Inside', width: 2, height: 15, interval: 10\n            }, minorTicks: {\n                position: 'Inside', height: 8, width: 1, interval: 2\n            },\n            radius: '100%', minimum: 0, maximum: 100,\n            pointers: [{\n                animation: { enable: false },\n                value: 30,\n                radius: '75%',\n                pointerWidth: 7,\n                cap: { radius: 8, border: { width: 0 } },\n                needleTail: { length: '13%' }\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    circulargauge.appendTo('#gauge');\n    \n        let radiusAngleEnable : boolean;\n        let highlightCheckBox: EmitType<CheckBoxChangeEvents>;\n        let highlightCheckBoxCheckBox: CheckBox = new CheckBox(\n        {\n            change: highlightCheckBox            \n        },\n        '#angle');    \n        highlightCheckBoxCheckBox.change = highlightCheckBox = (e: CheckBoxChangeEvents) => {\n        radiusAngleEnable = e.checked;\n        let centerX: HTMLInputElement = document.getElementById('centerX') as HTMLInputElement;\n        let centerY: HTMLInputElement = document.getElementById('centerY') as HTMLInputElement;\n        if (e.checked) {\n            circulargauge.centerX = null;\n            circulargauge.centerY = null;\n            circulargauge.moveToCenter = true;\n            centerX.disabled = true;\n            centerY.disabled = true;\n        } else {\n            circulargauge.centerX = centerX.value + '%';\n            circulargauge.centerY = centerY.value + '%';\n            centerX.disabled = false;\n            centerY.disabled = false;\n            circulargauge.moveToCenter = false;\n        }\n        circulargauge.refresh();\n    }\n\n    document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =\n        document.getElementById('start').onchange = () => {\n            let min: number = parseInt((<HTMLInputElement>document.getElementById('start')).value, 10);\n            document.getElementById('rangeStart').innerHTML = min + '°';\n            circulargauge.axes[0].startAngle = min;\n            circulargauge.refresh();\n        };\n    document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =\n        document.getElementById('end').onchange = () => {\n            let max: number = parseInt((<HTMLInputElement>document.getElementById('end')).value, 10);\n            document.getElementById('rangeEnd').innerHTML = max + '°';\n            circulargauge.axes[0].endAngle = max;\n            circulargauge.refresh();\n        };\n    document.getElementById('radius').onpointermove = document.getElementById('radius').ontouchmove =\n        document.getElementById('radius').onchange = () => {\n            let max: number = parseInt((<HTMLInputElement>document.getElementById('radius')).value, 10);\n            document.getElementById('radius1').innerHTML = max + '%';\n            circulargauge.axes[0].radius = '' + max + '%';\n            circulargauge.refresh();\n        };\n    document.getElementById('centerX').onpointermove = document.getElementById('centerX').ontouchmove =\n        document.getElementById('centerX').onchange = () => {\n            if (!radiusAngleEnable) {\n                let max: number = parseInt((<HTMLInputElement>document.getElementById('centerX')).value, 10);\n                document.getElementById('center1').innerHTML = max + '%';\n                circulargauge.centerX = '' + max + '%';\n                circulargauge.refresh();\n            }\n        };\n    document.getElementById('centerY').onpointermove = document.getElementById('centerY').ontouchmove =\n        document.getElementById('centerY').onchange = () => {\n            if (!radiusAngleEnable) {\n                let max: number = parseInt((<HTMLInputElement>document.getElementById('centerY')).value, 10);\n                document.getElementById('center2').innerHTML = max + '%';\n                circulargauge.centerY = '' + max + '%';\n                circulargauge.refresh();\n            }\n        };\n\n        let hideIntersectingLabel: EmitType<CheckBoxChangeEvents>;\n        let hideIntersectingLabelCheckBox: CheckBox = new CheckBox(\n            {\n                change: hideIntersectingLabel,\n                checked: true\n            },\n            '#hidelabel');    \n            hideIntersectingLabelCheckBox.change = hideIntersectingLabel = (e: CheckBoxChangeEvents) => {            \n            circulargauge.axes[0].hideIntersectingLabel = e.checked;\n            circulargauge.refresh();\n        }\n"}