{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"user-container\"></div>\n            </div>\n        </div>\n        <!-- property panel -->\n        <br>\n        <div class=\"col-md-4 property-section\">\n            <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left:-10px\" role=\"none\">\n                <colgroup>\n                    <col span=\"1\" style=\"width: 50%;\">\n                    <col span=\"1\" style=\"width: 40%;\">\n                    <col span=\"1\" style=\"width: 10%;\">\n                </colgroup>\n                <tbody>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Pointer Value</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"value\" value=\"70\" min=\"0\" max=\"120\" style=\"width: 70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; font-size: 14px; text-align: center;\">\n                            <span id=\"pointerValue\" style=\"margin-left: -30px;\">70</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id=\"enablePointer\" style=\"width: 97%; font-size: 14px;\">Allow Pointer Drag</div>\n                        </td>\n                        <td>\n                            <div style=\"padding-top: 2px;margin-left: -10px;\">\n                                <input type=\"checkbox\" id=\"enable\" checked=\"true\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id=\"enableRange\" style=\"width: 98%; font-size: 14px;\">Allow Ranges Drag</div>\n                        </td>\n                        <td>\n                            <div style=\"padding-top: 2px;margin-left: -10px; \">\n                                <input type=\"checkbox\" id=\"enable1\">\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    \n    <style>\n       \n        .e-view.fluent2 #property .e-checkbox-wrapper .e-icons, .e-view.fluent2-dark #property .e-checkbox-wrapper .e-icons {\n            margin-left: 0px;\n        }\n        .e-view.fluent2-highcontrast #property .e-checkbox-wrapper .e-icons {\n            margin-left: 0;\n        }\n    </style>\n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, IPointerDragEventArgs, Annotations, getRangeColor, Range } from '@syncfusion/ej2-circulargauge';\nimport { ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType } from '@syncfusion/ej2-base';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let content: string = '<div style=\"font-size: 14px;color:#E5C31C;font-weight: lighter;font-style: oblique; font-family: Segoe UI;\"><span>';\n    let pointerValue: number;\n    let circulargauge: CircularGauge = new CircularGauge({\n        enablePointerDrag: true,\n        enableRangeDrag: false,\n        dragMove: (args: IPointerDragEventArgs) => {\n            if (isNaN(args.rangeIndex)) {\n                pointerValue = Math.round(args.currentValue);\n                document.getElementById('pointerValue').innerHTML = pointerValue.toString();\n                (<HTMLInputElement>document.getElementById('value')).value = pointerValue.toString();\n                circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');\n            }\n        },\n        dragEnd: (args: IPointerDragEventArgs) => {\n            pointerValue = Math.round(args.currentValue);\n            if (isNaN(args.rangeIndex)) {\n                setPointersValue(circulargauge, pointerValue);\n            }\n        },\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                content: content + '70 MPH</span></div>',\n                angle: 180, zIndex: '1',\n                radius: '45%'\n            }],\n            endAngle: 140,\n            startAngle: 220,\n            lineStyle: { width: 0, color: '#9E9E9E' },\n            radius: '80%', minimum: 0,\n            maximum: 120,\n            majorTicks: { useRangeColor: true },\n            minorTicks: { useRangeColor: true },\n            labelStyle: { useRangeColor: true, font: { fontFamily: 'inherit' } },\n            ranges: [{\n                start: 0,\n                end: 40,\n                startWidth: 8, endWidth: 8,\n                radius: '108%',\n                color: '#30B32D'\n            }, {\n                start: 40,\n                end: 100,\n                startWidth: 8, endWidth: 8,\n                radius: '108%',\n                color: '#E5C31C'\n            }, {\n                start: 100, end: 120,\n                startWidth: 8, endWidth: 8,\n                radius: '108%',\n                color: '#F03E3E'\n            }],\n            pointers: [{\n                description:'Marker pointer value : 70',\n                type: 'Marker', value: 70,\n                markerShape: 'InvertedTriangle',\n                radius: '110%',\n                markerHeight: 20,\n                color: '#E5C31C',\n                markerWidth: 20\n            }, {\n                description:'Needle pointer value : 70',\n                value: 70,\n                radius: '60%',\n                cap: { radius: 10, border: { width: 5, color: '#E5C31C' } },\n                needleTail: { length: '0%', color: '#E5C31C' },\n                color: '#E5C31C',\n                markerWidth: 5\n            }]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n            selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    circulargauge.appendTo('#user-container');\n\n    function setPointersValue(circulargauge: CircularGauge, pointerValue: number): void {\n        let color: string = getRangeColor(pointerValue, <Range[]>(circulargauge.axes[0].ranges), circulargauge.axes[0].pointers[0].color);\n        circulargauge.axes[0].pointers[0].color = color;\n        circulargauge.axes[0].pointers[1].color = color;\n        circulargauge.axes[0].pointers[0].animation.enable = false;\n        circulargauge.axes[0].pointers[1].animation.enable = false;\n        circulargauge.axes[0].pointers[0].needleTail.color = color;\n        circulargauge.axes[0].pointers[1].needleTail.color = color;\n        circulargauge.axes[0].pointers[0].cap.border.color = color;\n        circulargauge.axes[0].pointers[1].cap.border.color = color;\n        circulargauge.setPointerValue(0, 1, pointerValue);\n        circulargauge.setPointerValue(0, 0, pointerValue);\n        content = '<div style=\"font-size: 14px;color:' + color + ';font-weight: lighter;font-style: oblique;\"><span>';\n        circulargauge.setAnnotationValue(0, 0, content + pointerValue + ' MPH</span></div>');\n    }\n    document.getElementById('value').ontouchmove = document.getElementById('value').onpointermove =\n        document.getElementById('value').onchange = () => {\n            let pointerValue: number = parseInt((<HTMLInputElement>document.getElementById('value')).value, 10);\n            setPointersValue(circulargauge, pointerValue);\n            document.getElementById('pointerValue').innerHTML = pointerValue.toString();\n        };\n    let pointerchange: EmitType<CheckBoxChangeEvents>;\n    let rangechange: EmitType<CheckBoxChangeEvents>;\n    let pointerchangeCheckBox: CheckBox = new CheckBox(\n        {\n            change: pointerchange,\n            checked: true\n        },\n        '#enable');\n\n    pointerchangeCheckBox.change = pointerchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        circulargauge.enablePointerDrag = boolean;\n    }\n\n    let rangechangeCheckBox: CheckBox = new CheckBox(\n        {\n            change: rangechange\n        },\n        '#enable1');\n\n    rangechangeCheckBox.change = rangechange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        circulargauge.enableRangeDrag = boolean;\n    }\n"}