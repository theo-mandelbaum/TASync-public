{"data-sample-gauge.ts":"import { CircularGauge, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                description:'Positive arrow',\n                content: '#germany',\n                angle: 180, zIndex: '1',\n                radius: '30%'\n            }, {\n                description:'Germany',\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:inherit\">Germany</div>',\n                angle: 180, zIndex: '1',\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { format:'positive {value}', font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 75, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%',\n                    color: '#777777'\n                }\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge1;\n}\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                description:' Positive arrow ',\n                content: '#usa',\n                angle: 180, zIndex: '1',\n                radius: '30%'\n            }, {\n                description:'USA',\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:inherit\">USA</div>',\n                angle: 180, zIndex: '1',\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { format:'positive {value} ', font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 60, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%',\n                    color: '#777777'\n                }\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge2;\n}\nexport function gauge3(): CircularGauge {\n    let gauge3: CircularGauge = new CircularGauge({\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                description:'Negative arrow',\n                content: '#uk',\n                angle: 180, zIndex: '1',\n                radius: '30%'\n            }, {\n                description:'UK',\n                content: '<div style=\"color:#9E9E9E;font-size:16px;font-family:inherit\">UK</div>',\n                angle: 180, zIndex: '1',\n                radius: '65%'\n            }],\n            startAngle: 230,\n            endAngle: 130,\n            majorTicks: { width: 0 },\n            lineStyle: { width: 0 },\n            minorTicks: { width: 0 },\n            labelStyle: { format:'negative {value}', font: { size: '0' } },\n            ranges: [{\n                start: 0, end: 50,\n                startWidth: 15, endWidth: 15,\n                color: '#EC121C'\n            }, {\n                start: 50, end: 100,\n                startWidth: 15, endWidth: 15,\n                color: '#45EA0C'\n            }],\n            pointers: [{\n                value: 25, radius: '60%',\n                animation: { enable: false },\n                color: '#777777', pointerWidth: 5,\n                cap: {\n                    radius: 6,\n                    border: { width: 0 },\n                    color: '#777777'\n                },\n                needleTail: {\n                    length: '25%',\n                    color: '#777777'\n                }\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge3;\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"row\">\n                    <div class=\"col-sm-4\">\n                        <div id=\"container1\" style=\"height:230px;\">\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4\">\n                        <div id=\"container2\" style=\"height:230px;\">\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4\">\n                        <div id=\"container3\" style=\"height:230px;\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-sm-12\">\n                <div class=\"row\">\n                    <div class=\"col-sm-12\">\n                        <div id=\"container5\">\n                        </div>\n                    </div>\n                </div>\n    \n            </div>\n        </div>\n    </div>\n    <style>\n        #templateWrap img {\n            width: 16px;\n            height: 16px;\n            margin-top: 4px;\n        }\n    \n        #templateWrap .des {\n            float: right;\n            padding-left: 5px;\n        }\n    </style>\n    <script id=\"germany\" type=\"text/x-template\">\n        <div id='templateWrap'>\n            <img src=\"//npmci.syncfusion.com/development/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for Germany\"/>\n            <div class='des'>\n                <div style=\"font-size:20px;font-family:Roboto\">${pointers[0].value}%</div>\n            </div>\n        </div>\n    </script>\n    <script id=\"usa\" type=\"text/x-template\">\n        <div id='templateWrap'>\n            <img src=\"//npmci.syncfusion.com/development/demos/src/circular-gauge/images/positive.png\" alt=\"Positive value for USA\"/>\n            <div class='des'>\n                <div style=\"font-size:20px;font-family:Roboto\">${pointers[0].value}%</div>\n            </div>\n        </div>\n    </script>\n    <script id=\"uk\" type=\"text/x-template\">\n        <div id='templateWrap'>\n            <img src=\"//npmci.syncfusion.com/development/demos/src/circular-gauge/images/negative.png\" alt=\"Negative value for UK\" />\n            <div class='des'>\n                <div style=\"font-size:20px;font-family:Roboto\">-${pointers[0].value}%</div>\n            </div>\n        </div>\n    </script>\n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-compression\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-file-utils\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-grids\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { gauge1, gauge2, gauge3 } from './data-sample-gauge';\nimport { Grid } from '@syncfusion/ej2-grids';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\n// custom code start\n\n\n// custom code end\n\n    let orderData: Object[] = [\n        {\n            'Country': 'Germany',\n            'Sales': 500,\n            'Target': 400,\n            'vsTarget': 300\n        }, {\n            'Country': 'USA',\n            'Sales': 1000,\n            'Target': 600,\n            'vsTarget': 360\n        }, {\n            'Country': 'UK',\n            'Sales': 600,\n            'Target': 700,\n            'vsTarget': -100\n        }\n    ];\n    let germany: CircularGauge = new CircularGauge(gauge1(), '#container1');\n    let usa: CircularGauge = new CircularGauge(gauge2(), '#container2');\n    let uk: CircularGauge = new CircularGauge(gauge3(), '#container3');\n    let data: Object = new DataManager(orderData as JSON[]).executeLocal(new Query().take(15));\n    let grid: Grid = new Grid(\n        {\n            dataSource: data,\n            columns: [\n                { field: 'Country', headerText: 'Country', width: 80 },\n                { field: 'Sales', headerText: 'Sales $', width: 80 },\n                { field: 'Target', headerText: 'Target $', width: 80 },\n                { field: 'vsTarget', headerText: 'vs Target', width: 80 }\n            ]\n        });\n    grid.appendTo('#container5');\n    let toolTipInterval1: any = setInterval(\n        (): void => {\n            if (document.getElementById('container5')) {\n                let value1: number = Math.round(Math.random() * (90 - 55) + 55);\n                let value2: number = Math.round(Math.random() * (75 - 60) + 60);\n                let value3: number = Math.round(Math.random() * (40 - 10) + 10);\n                let gridData1: number = 4 * value1;\n                let gridData2: number = 6 * value2;\n                let gridData3: number = 7 * value3;\n                let orderData: Object[] = [\n                    {\n                        'Country': 'Germany',\n                        'Sales': 500,\n                        'Target': 400,\n                        'vsTarget': gridData1\n                    }, {\n                        'Country': 'USA',\n                        'Sales': 1000,\n                        'Target': 600,\n                        'vsTarget': gridData2\n                    }, {\n                        'Country': 'UK',\n                        'Sales': 600,\n                        'Target': 700,\n                        'vsTarget': -gridData3\n                    }\n                ];\n                let data: Object = new DataManager(orderData as JSON[]).executeLocal(new Query().take(3));\n                grid.dataSource = data;\n                grid.refresh();\n                germany.axes[0].pointers[0].animation.enable = true;\n                usa.axes[0].pointers[0].animation.enable = true;\n                uk.axes[0].pointers[0].animation.enable = true;\n                germany.setPointerValue(0, 0, value1);\n                usa.setPointerValue(0, 0, value2);\n                uk.setPointerValue(0, 0, value3);\n                germany.setAnnotationValue(0, 0, '#germany');\n                usa.setAnnotationValue(0, 0, '#usa');\n                uk.setAnnotationValue(0, 0, '#uk');\n            } else {\n                clearInterval(toolTipInterval1);\n            }\n        },\n        2000);\n\n"}