{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div id=\"gauge\"></div>\n    </div>\n    \n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, ILoadedEventArgs, GaugeTheme, Annotations, IResizeEventArgs } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        centerY: '65%',\n        background: 'transparent',\n        axes: [{\n            radius: '80%',\n            startAngle: 0,\n            endAngle: 0,\n            majorTicks: {\n                width: 0,\n            },\n            lineStyle: { width: 0 },\n            minorTicks: {\n                width: 0,\n            },\n            labelStyle: {\n                format:'{value} %',\n                font: {\n                    size: '0px'\n                },\n            },\n            annotations: [{\n                description:'Axis background',\n                angle: 0,\n                radius: '0%',\n                zIndex: '1',\n                content: '<div alt=\"Axis background image\" style=\"margin-top: -37%;display: flex;justify-content: center;\"><img src=\"//npmci.syncfusion.com/development/demos/src/circular-gauge/images/axis-background.png\" height=\"400\" width=\"400\" /></div>'\n            },\n            {\n                description:'Sub gauge',\n                angle: 0,\n                radius: '0%',\n                zIndex: '1',\n                content: '<div id=\"subGauge\" style=\"margin-left: -50%; margin-top: -46%;\"></div>'\n            }, {\n                description:'Annotation value : 90',\n                angle: 10,\n                radius: '0%',\n                zIndex: '1',\n                content: '<div style=\"color:orange;margin-top: -84px;margin-left: 0px;font-size: 18px;\"> 90</div>'\n            }],\n            pointers: [{\n                description:'Marker pointer value : 90',\n                cap: {\n                    radius: 8,\n                    border: { width: 0 }\n                },\n                needleTail: {\n                    length: '25%',\n                },\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end     \n        },\n        resized: (args: IResizeEventArgs) => {\n            window.location.reload();\n        },\n        loaded: (args: ILoadedEventArgs) => {\n            updateGauge();\n        }\n    });\n    circulargauge.appendTo('#gauge');\n    \n\nfunction updateGauge() {\n    let annotationGauge: CircularGauge = new CircularGauge({\n        centerY: '45%',\n        titleStyle: { color: 'black', size: '16px' },\n        width: '600px',\n        height: '450px',\n        background: 'transparent',\n        axes: [{\n            labelStyle: { hiddenLabel: 'First', font: { fontFamily: 'inherit', color: 'White' } },\n            majorTicks: { height: 15, interval: 30 },\n            minorTicks: { height: 10, interval: 6 }, minimum: 0, maximum: 360,\n            pointers: [{\n                value: 90,\n                radius: '45%', markerWidth: 12, markerHeight: 12,\n                type: 'Marker', markerShape: 'Triangle', color: 'Orange',\n                animation: { enable: true, duration: 500 }\n            }], startAngle: 0, endAngle: 0, radius: '60%', lineStyle: { width: 0 }\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            // custom code end     \n        },\n        resized: (args: object) => {\n            window.location.reload();\n        }\n    });\n    annotationGauge.appendTo('#subGauge');   \n}"}