{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"control-section\">\n            <div id=\"gauge\"></div>\n        </div>\n        \n        \n    \n</div></main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, ILoadedEventArgs, GaugeTheme, Gradient, IAxisLabelRenderEventArgs } from '@syncfusion/ej2-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nCircularGauge.Inject(Gradient);\nlet textValues: string[] = ['0', '2', '5', '10', '20', '50', '100', '150', '200'];\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        background: 'transparent',\n        animationDuration: 2000,\n        axes: [{\n            lineStyle: { width: 0 },\n            startAngle: 210, endAngle: 150, minimum: 0, maximum: 8, radius: '80%',\n            labelStyle: {\n                font: {\n                    fontFamily: 'inherit'\n                }, offset: 10\n            },\n            majorTicks: { width: 0, interval: 1 },\n            minorTicks: { width: 0 },\n            ranges: [\n                {\n                    start: 0, end: 6.2, startWidth: 22, endWidth: 22, color: '#E63B86',\n                    linearGradient: {\n                        startValue: '0%',\n                        endValue: '100%',\n                        colorStop: [\n                            { color: '#9E40DC', offset: '0%', opacity: 1 },\n                            { color: '#d93c95', offset: '70%', opacity: 1 },]\n                    },\n                },\n                {\n\n                    color: '#E0E0E0',\n                    start: 6.2,\n                    end: 8,\n                    startWidth: 22,\n                    endWidth: 22\n\n                }\n            ],\n            pointers: [{\n                animation: { enable: false }, value: 6.2, radius: '85%', color: '#E63B86',\n                pointerWidth: 10,\n                cap: { radius: 0, border: { width: 0 } },\n                needleTail: { length: '0%' },\n                needleStartWidth: 10,\n                needleEndWidth: 5,\n                linearGradient: {\n                    startValue: '0%',\n                    endValue: '100%',\n                    colorStop: [\n                        { color: '#9E40DC', offset: '0%', opacity: 0.2 },\n                        { color: '#9E40DC', offset: '70%', opacity: 0.5 },]\n                },\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\n            args.text = textValues[(args.value)];\n        }\n    });\n    circulargauge.appendTo('#gauge');\n"}