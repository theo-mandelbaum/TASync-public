{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"axis-container\"></div>\n            </div>\n        </div>\n        <!-- property panel -->\n        <br>\n        <div id=\"property-panel\" class=\"col-md-4 property-section\">\n            <div class=\"property-panel-section\">\n                <div class=\"property-panel-content\">\n                    <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left:-10px\" role=\"none\">\n                        <colgroup>\n                            <col span=\"1\" style=\"width: 45%;\">\n                            <col span=\"1\" style=\"width: 40%;\">\n                            <col span=\"1\" style=\"width: 10%;\">\n                        </colgroup>\n                        <tbody>\n                            <tr style=\"height: 50px\">\n                                <td>\n                                    <div style=\"font-size: 14px;\"> Axis </div>\n                                </td>\n                                <td colspan=\"2\">\n                                    <div>\n                                        <select id=\"axisIndex\" class=\"form-control\">\n                                            <option value=\"0\" selected=\"true\">Axis 1</option>\n                                            <option value=\"1\">Axis 2</option>\n                                        </select>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style=\"height: 50px\">\n                                <td>\n                                    <div style=\"font-size: 14px;\"> Direction </div>\n                                </td>\n                                <td colspan=\"2\">\n                                    <div>\n                                        <select id=\"axisDirection\" class=\"form-control\">\n                                            <option value=\"ClockWise\" selected=\"true\">Clockwise</option>\n                                            <option value=\"AntiClockWise\">Anti-clockwise</option>\n                                        </select>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style=\"height: 50px\">\n                                <td>\n                                    <div style=\"font-size: 14px;\">Start Angle</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <input type=\"range\" id=\"startAngle\" value=\"220\" min=\"0\" max=\"360\">\n                                    </div>\n                                </td>\n                                <td style=\"text-align: center;\">\n                                    <div>\n                                        <span id=\"start\">220</span>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr style=\"height: 50px\">\n                                <td>\n                                    <div style=\"font-size: 14px;\">End Angle</div>\n                                </td>\n                                <td>\n                                    <div>\n                                        <input type=\"range\" id=\"endAngle\" value=\"140\" min=\"0\" max=\"360\">\n                                    </div>\n                                </td>\n                                <td style=\"text-align: center;\">\n                                    <div>\n                                        <span id=\"end\">140</span>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n    \n        </div>\n    </div>\n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, isCompleteAngle, GaugeDirection, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({ \n        background:'transparent',\n        axes: [{\n            lineStyle: { width: 1.5 },\n            background:'transparent',\n            radius: '95%',\n            labelStyle: {\n                position: 'Inside', autoAngle: true,\n                hiddenLabel: 'None',\n                font: { fontFamily: 'inherit' }\n            }, majorTicks: {\n                position: 'Inside',\n                width: 2, height: 10\n            }, minorTicks: {\n                position: 'Inside', width: 2,\n                height: 5\n            },\n            minimum: 0, maximum: 160, startAngle: 220, endAngle: 140,\n            pointers: [{\n                value: 80, radius: '100%',\n                markerHeight: 15, markerWidth: 15, type: 'Marker',\n                markerShape: 'Triangle',\n            }]\n        }, {\n            lineStyle: { width: 1.5, color: '#E84011' }, radius: '95%',\n            labelStyle: {\n                position: 'Outside', autoAngle: true,\n                hiddenLabel: 'None', font: { fontFamily: 'inherit' }\n            }, majorTicks: {\n                position: 'Outside', width: 2, height: 10,\n                color: '#E84011'\n            }, minorTicks: {\n                position: 'Outside', width: 2,\n                height: 5, color: '#E84011'\n            },\n            minimum: 0, maximum: 240, startAngle: 220, endAngle: 140,\n            pointers: [{\n                value: 120, radius: '100%', color: '#E84011',\n                markerHeight: 15, markerWidth: 15, type: 'Marker',\n                markerShape: 'InvertedTriangle',\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    circulargauge.appendTo('#axis-container');\n    let axisIndex: number = 0;\n    let axis = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            axisIndex = +axis.value;\n            direction.value = circulargauge.axes[axisIndex].direction;\n            let startAngle: number = circulargauge.axes[axisIndex].startAngle;\n            let endAngle: number = circulargauge.axes[axisIndex].endAngle;\n            document.getElementById('start').innerHTML = startAngle.toString();\n            document.getElementById('end').innerHTML = endAngle.toString();\n            (<HTMLInputElement>document.getElementById('startAngle')).value = startAngle.toString();\n            (<HTMLInputElement>document.getElementById('endAngle')).value = endAngle.toString();\n        }\n    });\n    axis.appendTo('#axisIndex');\n\n    let direction = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            circulargauge.axes[axisIndex].direction = <GaugeDirection>direction.value.toString();\n            circulargauge.axes[0].pointers[0].animation.enable = false;\n            circulargauge.axes[1].pointers[0].animation.enable = false;\n            circulargauge.refresh();\n        }\n    });\n    direction.appendTo('#axisDirection');\n\n    document.getElementById('startAngle').onpointermove = document.getElementById('startAngle').ontouchmove =\n        document.getElementById('startAngle').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('startAngle')).value, 10);\n            circulargauge.axes[0].pointers[0].animation.enable = false;\n            circulargauge.axes[1].pointers[0].animation.enable = false;\n            circulargauge.axes[axisIndex].startAngle = value;\n            document.getElementById('start').innerHTML = value.toString();\n            circulargauge.axes[axisIndex].labelStyle.hiddenLabel =\n                isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?\n                    'First' : 'None';\n            circulargauge.refresh();\n        };\n\n    document.getElementById('endAngle').onpointermove = document.getElementById('endAngle').ontouchmove =\n        document.getElementById('endAngle').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('endAngle')).value, 10);\n            circulargauge.axes[0].pointers[0].animation.enable = false;\n            circulargauge.axes[1].pointers[0].animation.enable = false;\n            circulargauge.axes[axisIndex].endAngle = value;\n            document.getElementById('end').innerHTML = value.toString();\n            circulargauge.axes[axisIndex].labelStyle.hiddenLabel =\n                isCompleteAngle(circulargauge.axes[axisIndex].startAngle, circulargauge.axes[axisIndex].endAngle) ?\n                    'First' : 'None';\n            circulargauge.refresh();\n        };\n\n"}