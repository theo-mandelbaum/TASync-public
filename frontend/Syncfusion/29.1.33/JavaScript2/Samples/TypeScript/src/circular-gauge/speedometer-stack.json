{"pointer-gauge.ts":"/**\n * Pointer Customization Sample\n */\nimport { CircularGauge, Annotations, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\nexport function gauge1(): CircularGauge {\n    let gauge1: CircularGauge = new CircularGauge({\n        background:'transparent',\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#ff5985' },\n            labelStyle: {\n                format:'$ {value}',\n                position: 'Outside',\n                font: { size: '0px', color: '#ff5985' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                type: 'RangeBar',\n                value: 66,\n                radius: '90%',\n                color: '#ff5985',\n                pointerWidth: 10,\n                animation: { enable: true, duration: 1000 }\n            }],\n            annotations: [\n                {\n                    description:'Range bar pointer',\n                    angle: 180, zIndex: '1',\n                    radius: '28%',\n                    content: '<div style=\"font-size:14px;margin-top:11px;\">Range bar pointer</div>'\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge1;\n}\n\nexport function gauge2(): CircularGauge {\n    let gauge2: CircularGauge = new CircularGauge({\n        background:'transparent',\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#01aebe' },\n            labelStyle: {\n                format:'{value}%',\n                position: 'Outside',\n                font: { size: '0px', color: '#01aebe' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                description: 'Marker pointer value: 80',\n                radius: '100%',\n                value: 80,\n                type: 'Marker',\n                markerShape: 'InvertedTriangle',\n                markerWidth: 15,\n                markerHeight: 15,\n                color: 'rgb(0,171,169)'\n            }],\n            annotations: [\n                {\n                    description: 'Marker pointer',\n                    angle: 180, zIndex: '1',\n                    radius: '28%',\n                    content: '<div style=\"font-size:14px;margin-top:10px;\">Marker pointer</div>'\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge2;\n}\n\nexport function gauge4(): CircularGauge {\n    let gauge4: CircularGauge = new CircularGauge({\n        background:'transparent',\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#1E7145' },\n            labelStyle: {\n                format:'${value}',\n                position: 'Outside',\n                font: { size: '0px', color: '#1E7145' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                animation: { enable: true, duration: 1000 },\n                description: 'Needle pointer: 80',\n                value: 80,\n                radius: '80%',\n                color: 'green',\n                pointerWidth: 2,\n                needleStartWidth: 4,\n                needleEndWidth: 4,\n                cap: {\n                    radius: 8,\n                    color: 'green'\n                },\n                needleTail: {\n                    length: '0%'\n                }\n            }],\n            annotations: [\n                {\n                    description:'Customized pointer',\n                    angle: 180, zIndex: '1',\n                    radius: '28%',\n                    content: '<div style=\"font-size:14px; padding-top: 29px\">Customized pointer</div>'\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge4;\n}\n\nexport function gauge3(): CircularGauge {\n    let gauge3: CircularGauge = new CircularGauge({\n        background:'transparent',\n        centerY: '40%',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 3, color: '#9250e6' },\n            labelStyle: {\n                format:'{value} s',\n                position: 'Outside',\n                font: { size: '0px', color: '#9250e6' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                description: 'Needle pointer value : 70',\n                radius: '100%',\n                animation: { enable: true, duration: 900 },\n                value: 70,\n                color: '#923C99',\n                pointerWidth: 6,\n                cap: { radius: 0 },\n                needleTail: { length: '4%', color: '#923C99' }\n            }],\n            annotations: [\n                {\n                    description:'Needle pointer',\n                    angle: 180, zIndex: '1',\n                    radius: '28%',\n                    content: '<div style=\"font-size:14px;margin-top:11px;\">Needle pointer</div>'\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge3;\n}\n\nexport function gauge6(): CircularGauge {\n    let gauge6: CircularGauge = new CircularGauge({\n        title: 'Speedometer',\n        background:'transparent',\n        titleStyle: { size: '18px', fontFamily: 'inherit' },\n        centerY: '75%',\n        axes: [{\n            radius: '120%',\n            minimum: 0,\n            maximum: 120,\n            lineStyle: { width: 0 },\n            majorTicks: { width: 0, },\n            minorTicks: { width: 0 },\n            labelStyle: {\n                useRangeColor: false, position: 'Outside', autoAngle: true,\n                font: { size: '13px', fontFamily: 'inherit' }\n            },\n            startAngle: 270, endAngle: 90,\n            pointers: [{\n                animation: { enable: true, duration: 900 },\n                value: 40,\n                radius: '80%',\n                color: '#757575',\n                pointerWidth: 7,\n                cap: {\n                    radius: 8,\n                    color: '#757575',\n                    border: { width: 0 }\n                },\n                needleTail: {\n                    color: '#757575',\n                    length: '15%'\n                },\n            }],\n            annotations: [\n                {\n                    content: '#pointerValue',\n                    angle: 0, zIndex: '1',\n                    radius: '30%'\n                }\n            ],\n            ranges: [\n                {\n                    start: 0,\n                    end: 20,\n                    startWidth: 5, endWidth: 10,\n                    radius: '102%',\n                    color: '#82b944',\n                },\n                {\n                    start: 20,\n                    end: 40,\n                    startWidth: 10, endWidth: 15,\n                    radius: '102%',\n                    color: '#a1cb43',\n                }, {\n                    start: 40,\n                    end: 60,\n                    startWidth: 15, endWidth: 20,\n                    radius: '102%',\n                    color: '#ddec12',\n                },\n                {\n                    start: 60,\n                    end: 80,\n                    startWidth: 20, endWidth: 25,\n                    radius: '102%',\n                    color: '#ffbc00',\n                },\n                {\n                    start: 80,\n                    end: 100,\n                    startWidth: 25, endWidth: 30,\n                    radius: '102%',\n                    color: '#ff6000',\n                },\n                {\n                    start: 100,\n                    end: 120,\n                    startWidth: 30, endWidth: 35,\n                    radius: '102%',\n                    color: 'red',\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge6;\n}\n\nexport function gauge5(): CircularGauge {\n    let gauge5: CircularGauge = new CircularGauge({\n        centerY: '40%',\n        background:'transparent',\n        axes: [{\n            startAngle: 270,\n            endAngle: 90,\n            lineStyle: { width: 0 },\n            labelStyle: {\n                format:'{value} seconds',\n                position: 'Outside',\n                font: { size: '0px', color: '#067bc2' }\n            }, majorTicks: {\n                width: 1,\n                height: 0,\n                interval: 100\n            }, minorTicks: {\n                height: 0,\n                width: 0,\n            },\n            radius: '90%',\n            minimum: 0,\n            maximum: 100,\n            pointers: [{\n                radius: '100%',\n                description: 'Needle pointer :40',\n                animation: { enable: false, duration: 100 },\n                value: 40,\n                color: '#067bc2',\n                pointerWidth: 6,\n                cap: { radius: 0 },\n                needleTail: { length: '4%', color: '#067bc2' }\n            }, {\n                description: 'RangeBar pointer value : 40',\n                radius: '100%',\n                type: 'RangeBar',\n                animation: { enable: false, duration: 100 },\n                value: 40,\n                color: '#067bc2',\n                pointerWidth: 5\n            }],\n            annotations: [\n                {\n                    description:'Live update',\n                    angle: 180, zIndex: '1',\n                    radius: '32%',\n                    content: '<div style=\"font-size:14px; margin-top:22px\">Live update</div>'\n                }\n            ]\n        }],\n        load: function (args) {\n            // custom code start\n            var selectTheme = location.hash.split('/')[1];\n            selectTheme = selectTheme ? selectTheme : 'Material';\n            args.gauge.theme = (selectTheme.charAt(0).toUpperCase() +\n                selectTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    return gauge5;\n}\n","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"container\" align=\"center\"></div>\n            </div>\n        </div>\n    </div>\n    <!-- property panel -->\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left: -10px;\" role=\"none\">\n            <colgroup>\n                <col span=\"1\" style=\"width: 60%;\">\n                <col span=\"1\" style=\"width: 40%;\">\n            </colgroup>\n            <tbody>\n                <tr style=\"height: 45px\">\n                    <td style=\"width: 40%\">\n                        <div id=\"checkbox1\" class=\"property-text\" style=\"width: 110%;font-size: 14px;\"> Combine Ranges</div>\n                    </td>\n                    <td>\n                        <div style=\"margin-top:-10px;\" class=\"property-text\">\n                            <input type=\"checkbox\" id=\"combineRange\" checked=\"\">\n                        </div>\n                    </td>\n                </tr>\n                <tr style=\"height: 45px\">\n                    <td style=\"width: 40%\">\n                        <div id=\"checkbox2\" style=\"width: 116%;font-size: 14px;\" class=\"property-text\"> Gap Between Ranges</div>\n                    </td>\n                    <td>\n                        <div style=\"margin-top:-10px;\" class=\"property-text\">\n                            <input type=\"checkbox\" id=\"range\" checked=\"\">\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        </div>\n    </div>\n    <style>\n        .e-view.fluent #checkbox1, .e-view.fluent-dark #checkbox1,\n        .e-view.fluent #checkbox2, .e-view.fluent-dark #checkbox2 {\n            margin-top: -4px;\n        }\n    </style>\n    <script id=\"pointerValue\" type=\"text/x-template\">\n            <div id='templateWrap'>\n                <div class='des'>\n                    <div id='pointerannotation' style=\"width:90px;text-align:center;font-size:20px;font-family:Segoe UI;\">${pointers[0].value} km/h</div>\n                </div>\n            </div>\n        </script>\n    <svg style=\"height:0px;width:0px\">\n        <defs>\n            <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" style=\"stop-color:#82b944;stop-opacity:1\"></stop>\n                <stop offset=\"50%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\"></stop>\n                <stop offset=\"100%\" style=\"stop-color:red;stop-opacity:1\"></stop>\n            </linearGradient>\n        </defs>\n    </svg>\n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, IAxisLabelRenderEventArgs, Annotations } from '@syncfusion/ej2-circulargauge';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { gauge6 } from './pointer-gauge';\n// custom code start\n\n\n// custom code end\nCircularGauge.Inject(Annotations);\n\n    let circulargauge: CircularGauge = gauge6();\n    circulargauge.appendTo('#container');\n    let gauge5Interval1: any = setInterval(\n        (): void => {\n            let newVal: number = circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);\n            if (newVal <= 0) {\n                newVal = 5;\n            }\n            if (document.getElementById('container')) {\n                circulargauge.axes[0].pointers[0].animation.enable = true;\n                circulargauge.setPointerValue(0, 0, newVal);\n                if (!isNullOrUndefined(document.getElementById('pointerannotation'))) {\n                    document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';\n                }\n            } else {\n                clearInterval(gauge5Interval1);\n            }\n        },\n        1000\n    );\n    let combineRange: EmitType<CheckBoxChangeEvents>;\n    let rangeSet: CheckBox = new CheckBox(\n        {\n            change: combineRange, checked: false\n        },\n        '#combineRange');\n    let gapRanges: EmitType<CheckBoxChangeEvents>;\n    let showCheckBox: CheckBox = new CheckBox(\n        {\n            change: gapRanges, checked: false\n        },\n        '#range');\n    rangeSet.change = combineRange = (e: CheckBoxChangeEvents) => {\n        let element: HTMLInputElement = document.getElementById('range') as HTMLInputElement;\n        if (e.checked === true) {\n            showCheckBox.disabled = true;\n            circulargauge.axes[0].ranges[0].start = 0;\n            circulargauge.axes[0].ranges[0].end = 120;\n            circulargauge.axes[0].ranges[0].startWidth = 5;\n            circulargauge.axes[0].ranges[0].endWidth = 35;\n            circulargauge.axes[0].ranges[0].color = 'url(#grad1)';\n            circulargauge.axes[0].ranges[1].start = null;\n            circulargauge.axes[0].ranges[1].end = null;\n            circulargauge.axes[0].ranges[1].startWidth = '';\n            circulargauge.axes[0].ranges[1].endWidth = '';\n            circulargauge.axes[0].ranges[1].color = '';\n            circulargauge.axes[0].ranges[2].start = null;\n            circulargauge.axes[0].ranges[2].end = null;\n            circulargauge.axes[0].ranges[2].startWidth = '';\n            circulargauge.axes[0].ranges[2].endWidth = '';\n            circulargauge.axes[0].ranges[2].color = '';\n            circulargauge.axes[0].ranges[3].start = null;\n            circulargauge.axes[0].ranges[3].end = null;\n            circulargauge.axes[0].ranges[3].startWidth = '';\n            circulargauge.axes[0].ranges[3].endWidth = '';\n            circulargauge.axes[0].ranges[3].color = '';\n            circulargauge.axes[0].ranges[4].start = null;\n            circulargauge.axes[0].ranges[4].end = null;\n            circulargauge.axes[0].ranges[4].startWidth = '';\n            circulargauge.axes[0].ranges[4].endWidth = '';\n            circulargauge.axes[0].ranges[4].color = '';\n            circulargauge.axes[0].ranges[5].start = null;\n            circulargauge.axes[0].ranges[5].end = null;\n            circulargauge.axes[0].ranges[5].startWidth = '';\n            circulargauge.axes[0].ranges[5].endWidth = '';\n            circulargauge.axes[0].ranges[5].color = '';\n            circulargauge.axes[0].pointers[0].animation.enable = false;\n            circulargauge.refresh();\n        } else {\n            showCheckBox.disabled = false;\n            circulargauge.axes[0].ranges[0].start = 0;\n            circulargauge.axes[0].ranges[0].end = 20;\n            circulargauge.axes[0].ranges[0].startWidth = 5;\n            circulargauge.axes[0].ranges[0].endWidth = 10;\n            circulargauge.axes[0].ranges[0].color = '#82b944';\n            circulargauge.axes[0].ranges[1].start = 20;\n            circulargauge.axes[0].ranges[1].end = 40;\n            circulargauge.axes[0].ranges[1].startWidth = 10;\n            circulargauge.axes[0].ranges[1].endWidth = 15;\n            circulargauge.axes[0].ranges[1].color = '#a1cb43';\n            circulargauge.axes[0].ranges[2].start = 40;\n            circulargauge.axes[0].ranges[2].end = 60;\n            circulargauge.axes[0].ranges[2].startWidth = 15;\n            circulargauge.axes[0].ranges[2].endWidth = 20;\n            circulargauge.axes[0].ranges[2].color = '#ddec12';\n            circulargauge.axes[0].ranges[3].start = 60;\n            circulargauge.axes[0].ranges[3].end = 80;\n            circulargauge.axes[0].ranges[3].startWidth = 20;\n            circulargauge.axes[0].ranges[3].endWidth = 25;\n            circulargauge.axes[0].ranges[3].color = '#ffbc00';\n            circulargauge.axes[0].ranges[4].start = 80;\n            circulargauge.axes[0].ranges[4].end = 100;\n            circulargauge.axes[0].ranges[4].startWidth = 25;\n            circulargauge.axes[0].ranges[4].endWidth = 30;\n            circulargauge.axes[0].ranges[4].color = '#ff6000';\n            circulargauge.axes[0].ranges[5].start = 100;\n            circulargauge.axes[0].ranges[5].end = 120;\n            circulargauge.axes[0].ranges[5].startWidth = 30;\n            circulargauge.axes[0].ranges[5].endWidth = 35;\n            circulargauge.axes[0].ranges[5].color = 'red';\n            circulargauge.axes[0].pointers[0].animation.enable = false;\n            circulargauge.refresh();\n        }\n    };\n\n    showCheckBox.change = gapRanges = (e: CheckBoxChangeEvents) => {\n        if (e.checked) {\n            circulargauge.axes[0].rangeGap = 5;\n        } else {\n            circulargauge.axes[0].rangeGap = null;\n        }\n        circulargauge.axes[0].pointers[0].animation.enable = false;\n        circulargauge.refresh();\n    };\n"}