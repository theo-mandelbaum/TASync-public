{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div>\n        <div class=\"col-md-8 control-section\">\n            <div class=\"content-wrapper\">\n                <div id=\"labels-container\"></div>\n            </div>\n        </div>\n        <!-- property panel-->\n        <br>\n        <div class=\"col-md-4 property-section\">\n            <table id=\"property\" title=\"Properties\" style=\"width: 100%; margin-left:-10px;\" role=\"none\">\n                <colgroup>\n                    <col span=\"1\" style=\"width: 50%;\">\n                    <col span=\"1\" style=\"width: 30%;\">\n                    <col span=\"1\" style=\"width: 20%;\">\n                </colgroup>\n                <tbody>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\"> Ticks </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"Ticks\" class=\"form-control\">\n                                    <option value=\"major\" selected=\"true\">Major Ticks</option>\n                                    <option value=\"minor\">Minor Ticks</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\"> Tick Position </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"tickposition\" class=\"form-control\">\n                                    <option value=\"Inside\" selected=\"true\">Inside</option>\n                                    <option value=\"Cross\">Cross</option>\n                                    <option value=\"Outside\">Outside</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\"> Label Position </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"labelposition\" class=\"form-control\">\n                                    <option value=\"Outside\">Outside</option>\n                                    <option value=\"Cross\">Cross</option>\n                                    <option value=\"Inside\">Inside</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Tick Offset</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"tickOffset\" value=\"0\" min=\"0\" max=\"50\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; text-align: center;\">\n                            <span id=\"offset\" style=\"margin-left: -30px;\">0</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Tick Height</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"tickHeight\" value=\"10\" min=\"1\" max=\"50\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; text-align: center;\">\n                            <span id=\"height\" style=\"margin-left: -30px;\">10</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div style=\"font-size: 14px;\">Label Offset</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"labelOffset\" value=\"0\" min=\"0\" max=\"50\" style=\"width:70%\">\n                            </div>\n                        </td>\n                        <td style=\"padding-top: 10px; text-align: center;\">\n                            <span id=\"labelOffsetValue\" style=\"margin-left: -30px;\">0</span>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id=\"enablePointer\" style=\"font-size: 14px;\">Show Last Label</div>\n                        </td>\n                        <td>\n                            <div style=\"margin-top: -10px; margin-left: -10px\">\n                                <input type=\"checkbox\" id=\"showLastLabel\">\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    \n    <style>\n       .e-view.fluent2 #property .e-checkbox-wrapper .e-icons, .e-view.fluent2-dark #property .e-checkbox-wrapper .e-icons {\n            margin-left: 0px;\n        }\n        .fluent2-highcontrast #property .e-checkbox-wrapper .e-icons {\n            margin-left: 0px;\n        }\n        \n    </style>\n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, Annotations, Position, TickModel, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType } from '@syncfusion/ej2-base';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let isMajorTicks: boolean = true;\n    let circulargauge: CircularGauge = new CircularGauge({\n        background:'transparent',\n        axes: [{\n            annotations: [{\n                content: '<div id=\"content\" style=\"color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;\">145</div>',\n                angle: 0, radius: '0%', zIndex: '1',\n            }],\n            minimum: 0,\n            maximum: 170,\n            startAngle: 210, endAngle: 150,\n            lineStyle: { width: 2, color: '#9E9E9E' },\n            labelStyle: {\n                position: 'Outside', autoAngle: true,\n                font: { size: '10px', fontFamily: 'inherit' }\n            }, majorTicks: {\n                position: 'Inside', color: '#757575', width: 2, height: 10, interval: 20\n            }, minorTicks: {\n                position: 'Inside', color: '#757575', height: 5, width: 2, interval: 10\n            },\n            radius: '84%',\n            pointers: [{\n                animation: { enable: false }, value: 145,\n                type: 'RangeBar', roundedCornerRadius: 10, pointerWidth: 7,\n                color: '#8BC34A', radius: '60%',\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    circulargauge.appendTo('#labels-container');\n    \n    let ticks = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            let value: string = ticks.value.toString();\n            let tick: TickModel; isMajorTicks = value === 'major';\n            if (isMajorTicks) {\n                tick = circulargauge.axes[0].majorTicks;\n            } else {\n                tick = circulargauge.axes[0].minorTicks;\n            }\n            tickPosition.value = tick.position;\n            (<HTMLInputElement>document.getElementById('tickOffset')).value = tick.offset.toString();\n            (<HTMLInputElement>document.getElementById('tickHeight')).value = tick.height.toString();\n            document.getElementById('offset').innerHTML = tick.offset.toString();\n            document.getElementById('height').innerHTML = tick.height.toString();\n        }\n    });\n    ticks.appendTo('#Ticks');\n    let showLastLabelchange: EmitType<CheckBoxChangeEvents>;\n    let showLastLabelCheckBox: CheckBox = new CheckBox(\n        {\n            change: showLastLabelchange\n        },\n        '#showLastLabel');\n\n    showLastLabelCheckBox.change = showLastLabelchange = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        circulargauge.axes[0].showLastLabel = boolean;\n        circulargauge.refresh();\n    }\n\n    let tickPosition = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            let value: string = tickPosition.value.toString();\n            if (isMajorTicks) {\n                circulargauge.axes[0].majorTicks.position = <Position>value;\n            } else {\n                circulargauge.axes[0].minorTicks.position = <Position>value;\n            }\n            circulargauge.refresh();\n        }\n    });\n    tickPosition.appendTo('#tickposition');\n\n    let labelPosition = new DropDownList({\n        index: 0, width: '100%',\n        change: () => {\n            circulargauge.axes[0].labelStyle.position = <Position>labelPosition.value.toString();\n            circulargauge.refresh();\n        }\n    });\n    labelPosition.appendTo('#labelposition');\n\n    document.getElementById('tickOffset').onpointermove = document.getElementById('tickOffset').ontouchmove =\n        document.getElementById('tickOffset').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('tickOffset')).value, 10);\n            if (isMajorTicks) {\n                circulargauge.axes[0].majorTicks.offset = value;\n            } else {\n                circulargauge.axes[0].minorTicks.offset = value;\n            }\n            document.getElementById('offset').innerHTML = value.toString();\n            circulargauge.refresh();\n        };\n        \n    document.getElementById('tickHeight').onpointermove = document.getElementById('tickHeight').ontouchmove =\n        document.getElementById('tickHeight').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('tickHeight')).value, 10);\n            if (isMajorTicks) {\n                circulargauge.axes[0].majorTicks.height = value;\n            } else {\n                circulargauge.axes[0].minorTicks.height = value;\n            }\n            document.getElementById('height').innerHTML = value.toString();\n            circulargauge.refresh();\n        };\n\n    document.getElementById('labelOffset').onpointermove = document.getElementById('labelOffset').ontouchmove =\n        document.getElementById('labelOffset').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('labelOffset')).value, 10);\n            circulargauge.axes[0].labelStyle.offset = value;\n            document.getElementById('labelOffsetValue').innerHTML = value.toString();\n            circulargauge.refresh();\n        };\n\n"}