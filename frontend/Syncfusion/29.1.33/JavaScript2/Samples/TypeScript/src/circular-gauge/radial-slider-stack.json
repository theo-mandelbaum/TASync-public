{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div id=\"gauge\"></div>\n    </div>\n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-circulargauge\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { CircularGauge, ILoadedEventArgs, GaugeTheme, IPointerDragEventArgs, Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n// custom code start\n\n\n// custom code end\n\n    let circulargauge: CircularGauge = new CircularGauge({\n        enablePointerDrag: true,\n        background:'transparent',\n        axes: [{\n            radius: '80%',\n            startAngle: 0,\n            endAngle: 0,\n            majorTicks: {\n                height: 0\n            },\n            lineStyle: { width: 0 },\n            minorTicks: {\n                height: 0\n            },\n            labelStyle: {\n                font: {\n                    size: '0px'\n                },\n                offset: -1\n            },\n            pointers: [{\n                value: 30,\n                type: 'Marker',\n                markerShape: 'Circle',\n                radius: '97%',\n                markerHeight: 25,\n                markerWidth: 25,\n                color: '#2C75DC',\n                animation: {\n                    enable: false,\n                },\n            }],\n            ranges: [\n                {\n                    start: 0, end: 30, color: '#2C75DC', startWidth: 12, endWidth: 12, radius: '100%'\n                },\n                {\n                    start: 30, end: 100, color: '#BFD6F5', startWidth: 12, endWidth: 12, radius: '100%'\n                },\n\n            ],\n            annotations: [{\n                content: '<div style=\"font-style: oblique; margin-left: 8px;font-size: 20px;\"><span>30%</span></div>',\n                angle: 180,\n                radius: '0%',\n                zIndex: '1'\n            }]\n        }],\n        load: (args: ILoadedEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        dragMove(args: IPointerDragEventArgs): void {\n            let pointerValue = args.currentValue;\n            if (pointerValue != null) {\n                circulargauge.setPointerValue(0, 0, pointerValue);\n                circulargauge.setRangeValue(0, 0, 0, pointerValue);\n                circulargauge.setRangeValue(0, 1, pointerValue, 100);\n                circulargauge.setAnnotationValue(0, 0, '<div style=\"font-style: oblique; margin-left: 8px;font-size: 20px;\"><span>' + Math.ceil(pointerValue) + '%</span></div>');\n            }\n        }\n    });\n    circulargauge.appendTo('#gauge');\n"}