{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div>\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <div id=\"defaultRTE\"> \n                <p>The Rich Text Editor control is a WYSIWYG (\"what you see is what you get\") editor that provides the best user experience to create and update the content. \n                    Users can format their content using standard toolbar commands.</p>\n                \n                <p><b>Key features:</b></p>\n                \n                <ul>\n                    <li>\n                        <p>Provides &lt;IFRAME&gt; and &lt;DIV&gt; modes</p>\n                    </li>\n                    <li>\n                        <p>Capable of handling markdown editing.</p>\n                    </li>\n                    <li>\n                        <p>Contains a modular library to load the necessary functionality on demand.</p>\n                    </li>\n                    <li>\n                        <p>Provides a fully customizable toolbar.</p>\n                    </li>\n                    <li>\n                        <p>Provides HTML view to edit the source directly for developers.</p>\n                    </li>\n                    <li>\n                        <p>Supports third-party library integration.</p>\n                    </li>\n                    <li>\n                        <p>Allows a preview of modified content before saving it.</p>\n                    </li>\n                    <li>\n                        <p>Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p>\n                    </li>\n                    <li>\n                        <p>Contains undo/redo manager.</p>\n                    </li>\n                    <li>\n                        <p>Creates bulleted and numbered lists.</p>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <table id=\"property\" title=\"Event Trace\">\n            <tbody><tr>\n                <td>\n                    <div class=\"eventarea\" style=\"height: 245px;overflow: auto\">\n                        <span class=\"EventLog\" id=\"EventLog\" style=\"word-break: normal;\"></span>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class=\"evtbtn\" style=\"padding-bottom: 10px\">\n                        <button id=\"clear\">Clear</button>\n                    </div>\n                </td>\n            </tr>\n        </tbody></table>\n    </div>\n</div>\n\n\n        \n\n\n    \n\n<style>\n    .control-wrapper {\n        margin: 0 auto;\n    }\n    \n    .property-section .right-side {\n        padding-left: 10px;\n    }\n    \n    .property-section .left-side {\n        padding: 5px;\n        width: 25%\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-filemanager\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-richtexteditor\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\n/**\n * Rich Text Editor client side events samples\n */\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\nimport { RichTextEditor, Toolbar, Link, Image, HtmlEditor, QuickToolbar, Table, EmojiPicker, PasteCleanup, Audio ,Video, FormatPainter, FileManager } from '@syncfusion/ej2-richtexteditor';\nimport { ActionBeginEventArgs, ActionCompleteEventArgs } from '@syncfusion/ej2-richtexteditor';\nimport { Button } from '@syncfusion/ej2-buttons';\nRichTextEditor.Inject(Toolbar, Link, Image, HtmlEditor, QuickToolbar, Table, EmojiPicker, PasteCleanup, Audio ,Video, FormatPainter, FileManager);\n\n//tslint:disable:max-func-body-length\n\n    \n    const hostUrl: string = 'https://ej2-aspcore-service.azurewebsites.net/';\n    let defaultRTE: RichTextEditor = new RichTextEditor({\n        toolbarSettings: {\n            items: ['Bold', 'Italic', 'Underline', 'StrikeThrough', 'SuperScript', 'SubScript', '|',\n                'FontName', 'FontSize', 'FontColor', 'BackgroundColor', '|',\n                'LowerCase', 'UpperCase', '|',\n                'Formats', 'Alignments', 'Blockquote', '|', 'NumberFormatList', 'BulletFormatList', '|',\n                'Outdent', 'Indent', '|', 'CreateLink', 'Image', 'FileManager', 'Video', 'Audio', 'CreateTable', '|', 'FormatPainter', 'ClearFormat',\n                '|', 'EmojiPicker', 'Print', '|',\n                'SourceCode', 'FullScreen', '|', 'Undo', 'Redo']\n        },\n        fileManagerSettings: {\n            enable: true,\n            path: '/Pictures/Food',\n            ajaxSettings: {\n              url: hostUrl + 'api/FileManager/FileOperations',\n              getImageUrl: hostUrl + 'api/FileManager/GetImage',\n              uploadUrl: hostUrl + 'api/FileManager/Upload',\n              downloadUrl: hostUrl + 'api/FileManager/Download',\n            },\n        },\n        created: create,\n        actionBegin: actionBegin,\n        actionComplete: actionComplete,\n        focus: focus,\n        blur: blur,\n        change: change,\n        toolbarClick: toolbarClick,\n        beforeDialogOpen: beforeDialogOpen,\n        dialogOpen: dialogOpen,\n        dialogClose: dialogClose,\n        beforeQuickToolbarOpen: beforeQuickToolbarOpen,\n        quickToolbarOpen: quickToolbarOpen,\n        quickToolbarClose: quickToolbarClose,\n        imageSelected: imageSelected,\n        imageUploading: imageUploading,\n        imageUploadSuccess: imageUploadSuccess,\n        imageUploadFailed: imageUploadFailed,\n        imageRemoving: imageRemoving,\n        destroyed: destroyed,\n        beforeSanitizeHtml: beforeSanitizeHtml,\n        resizing: resizing,\n        resizeStart: resizeStart,\n        resizeStop: resizeStop\n    });\n    defaultRTE.appendTo('#defaultRTE');\n    let clear: Button = new Button();\n    clear.appendTo('#clear');\n\n    document.getElementById('clear').onclick = () => {\n        document.getElementById('EventLog').innerHTML = '';\n    };\n\n    function create(): void {\n        appendElement('Rich Text Editor <b>create</b> event called<hr>');\n    }\n    function actionBegin(args: ActionBeginEventArgs): void {\n        appendElement('<b>' + args.requestType + '</b> action is called<hr>');\n        handleFullScreen(args);\n    }\n    function actionComplete(args: ActionCompleteEventArgs): void {\n        appendElement('<b>' + args.requestType + '</b> action is completed<hr>');\n        actionCompleteHandler();\n    }\n    function focus(): void {\n        appendElement('Rich Text Editor <b>focus</b> event called<hr>');\n    }\n    function blur(): void {\n        appendElement('Rich Text Editor <b>blur</b> event called<hr>');\n    }\n    function change(): void {\n        appendElement('Rich Text Editor <b>change</b> event called<hr>');\n    }\n    function toolbarClick(): void {\n        appendElement('Rich Text Editor <b>toolbar click</b> event called<hr>');\n    }\n    function beforeDialogOpen(): void {\n        appendElement('Rich Text Editor <b>beforeDialogOpen</b> event called<hr>');\n    }\n\n    function dialogOpen(): void {\n        appendElement('Rich Text Editor <b>dialogOpen</b> event called<hr>');\n    }\n\n    function dialogClose(): void {\n        appendElement('Rich Text Editor <b>dialogClose</b> event called<hr>');\n    }\n\n    function beforeQuickToolbarOpen(): void {\n        appendElement('Rich Text Editor <b>beforeQuickToolbarOpen</b> event called<hr>');\n    }\n\n    function quickToolbarOpen(): void {\n        appendElement('Rich Text Editor <b>quickToolbarOpen</b> event called<hr>');\n    }\n\n    function quickToolbarClose(): void {\n        appendElement('Rich Text Editor <b>quickToolbarClose</b> event called<hr>');\n    }\n\n    function imageSelected(): void {\n        appendElement('Rich Text Editor <b>imageSelected</b> event called<hr>');\n    }\n\n    function imageUploading(): void {\n        appendElement('Rich Text Editor <b>imageUploading</b> event called<hr>');\n    }\n\n    function imageUploadSuccess(): void {\n        appendElement('Rich Text Editor <b>imageUploadSuccess</b> event called<hr>');\n    }\n\n    function imageUploadFailed(): void {\n        appendElement('Rich Text Editor <b>imageUploadFailed</b> event called<hr>');\n    }\n\n    function imageRemoving(): void {\n        appendElement('Rich Text Editor <b>imageRemoving</b> event called<hr>');\n    }\n\n    function destroyed(): void {\n        appendElement('Rich Text Editor <b>destroyed</b> event called<hr>');\n    }\n\n    function beforeSanitizeHtml(): void {\n        appendElement('Rich Text Editor <b>beforeSanitizeHtml</b> event called<hr>');\n    }\n\n    function resizing(): void {\n        appendElement('Rich Text Editor <b>resizing</b> event called<hr>');\n    }\n\n    function resizeStart(): void {\n        appendElement('Rich Text Editor <b>resizeStart</b> event called<hr>');\n    }\n\n    function resizeStop(): void {\n        appendElement('Rich Text Editor <b>resizeStop</b> event called<hr>');\n    }\n\n    function appendElement(html: string): void {\n        let span: HTMLElement = document.createElement('span');\n        span.innerHTML = html;\n        let log: HTMLElement = document.getElementById('EventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n    function handleFullScreen(e: any): void {\n        let sbCntEle: HTMLElement = document.querySelector('.sb-content.e-view');\n        let sbHdrEle: HTMLElement = document.querySelector('.sb-header.e-view');\n        let leftBar: HTMLElement;\n        let transformElement: HTMLElement;\n        if (Browser.isDevice) {\n            leftBar = document.querySelector('#right-sidebar');\n            transformElement = document.querySelector('.sample-browser.e-view.e-content-animation');\n        } else {\n            leftBar = document.querySelector('#left-sidebar');\n            transformElement = document.querySelector('#right-pane');\n        }\n        if (e.targetItem === 'Maximize') {\n            if (Browser.isDevice && Browser.isIos) {\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n            if (!Browser.isDevice) { transformElement.style.marginLeft = '0px'; }\n            transformElement.style.transform = 'inherit';\n        } else if (e.targetItem === 'Minimize') {\n            if (Browser.isDevice && Browser.isIos) {\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n            addClass([leftBar], ['e-open']);\n            transformElement.style.marginLeft = leftBar.offsetWidth + 'px'; }\n            transformElement.style.transform = 'translateX(0px)';\n        }\n    }\n    function actionCompleteHandler(): void {\n        setTimeout(() => { defaultRTE.toolbarModule.refreshToolbarOverflow(); }, 400);\n    }\n\n"}