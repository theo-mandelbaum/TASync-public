{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"sample-container\">\n        <div class=\"default-section\">\n            <div id=\"defaultRTE\">\n                <p>\n                  An image can be edited within a Rich Text Editor using an Image Editor.\n                  <img id=\"img1\" style=\"height: 350px;\" src=\"https://ej2.syncfusion.com/angular/demos/assets/image-editor/images/default.png\" aria-label=\"Bridge\">\n                </p>\n                <p>\n                  It allows users to quickly and easily add an Image Editor to their Rich Text Editor.\n                  It provides a variety of features, including image cropping, resizing, rotation, and more.\n                  Additionally, it supports a wide range of image formats, including JPEG, PNG, and GIF.\n                </p>\n              </div>\n            <div id=\"defaultDialog\">\n                <div id=\"imageeditor\">\n                </div>\n            </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n\n\n</body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-filemanager\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-richtexteditor\": \"*\",\n  \"@syncfusion/ej2-image-editor\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\r\n/**\r\n * Rich Text Editor Image Editor integration sample\r\n */\r\nimport { RichTextEditor, Toolbar, Link, Image, HtmlEditor, QuickToolbar, NodeSelection, ToolbarClickEventArgs, PasteCleanup, Table, Video, Audio } from '@syncfusion/ej2-richtexteditor';\r\nRichTextEditor.Inject(Toolbar, Link, Image, HtmlEditor, QuickToolbar, PasteCleanup, Table, Video, Audio);\r\nimport { Dialog } from '@syncfusion/ej2-popups';\r\nimport { ImageEditor } from '@syncfusion/ej2-image-editor';\r\nimport { isNullOrUndefined  as isNOU } from '@syncfusion/ej2-base';\r\nimport { getComponent } from '@syncfusion/ej2-base';\r\n\r\n\r\n    \r\n\r\n    let selection = new NodeSelection();\r\n    let header = 'Image Editor';\r\n    let range: Range;\r\n    let saveSelection: NodeSelection;\r\n    let dataURL: string | ImageData;\r\n    let isLoaded = false;\r\n    let imageEditorObj: ImageEditor;\r\n    let imageELement: HTMLImageElement;\r\n    let dlgButtons = [\r\n        {\r\n          buttonModel: { content: 'Insert', isPrimary: true },\r\n          click: onInsert.bind(this),\r\n        },\r\n        { buttonModel: { content: 'Cancel' }, click: onCancel },\r\n      ];\r\n    let defaultRTE: RichTextEditor = new RichTextEditor({\r\n        quickToolbarSettings: {\r\n            image: [\r\n              'Replace',\r\n              'Align',\r\n              'Caption',\r\n              'Remove',\r\n              '-',\r\n              'InsertLink',\r\n              'OpenImageLink',\r\n              'EditImageLink',\r\n              'RemoveImageLink',\r\n              'Display',\r\n              'AltText',\r\n              {\r\n                tooltipText: 'Image Editor',\r\n                template:\r\n                  '<button class=\"e-tbar-btn e-btn\" id=\"imageEditor\"><span class=\"e-btn-icon e-icons e-rte-image-editor\"></span></button>',\r\n              },\r\n            ],\r\n          },\r\n          toolbarClick: onToolbarClick,\r\n    });\r\n    defaultRTE.appendTo('#defaultRTE');\r\n\r\n      let dialogObj: Dialog = new Dialog({\r\n        buttons: dlgButtons,\r\n        open:open,\r\n        beforeOpen: OnBeforeOpen,\r\n        header: header,\r\n        visible: false,\r\n        showCloseIcon: true,\r\n        width: '800px',\r\n        height: '800px',\r\n        isModal: true,\r\n      });\r\n      dialogObj.appendTo('#defaultDialog');\r\n\r\n    function onToolbarClick(args: ToolbarClickEventArgs){\r\n        if (args.item.tooltipText === 'Image Editor') {\r\n            range = selection.getRange(document);\r\n            saveSelection = selection.save(range, document);\r\n            dialogObj.show();\r\n            defaultRTE.quickToolbarModule.imageQTBar.hidePopup();\r\n          }\r\n    }\r\n\r\n    function onInsert() {\r\n      if (defaultRTE.formatter.getUndoRedoStack().length === 0) {\r\n        defaultRTE.formatter.saveData();\r\n      }\r\n      saveSelection.restore();\r\n      let canvas = document.createElement('CANVAS') as HTMLCanvasElement;\r\n      let ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n      const imgData = imageEditorObj.getImageData();\r\n      canvas.height = imgData.height;\r\n      canvas.width = imgData.width;\r\n      ctx.putImageData(imgData, 0, 0);\r\n      isLoaded = true;\r\n      defaultRTE.executeCommand('editImage', {\r\n        url: canvas.toDataURL(),\r\n        width: { width: canvas.width },\r\n        height: { height: canvas.height },\r\n        selection: saveSelection,\r\n        cssClass: imageELement.getAttribute('class').replace('e-rte-image', ''),\r\n      });\r\n      defaultRTE.formatter.saveData();\r\n      defaultRTE.formatter.enableUndo(defaultRTE);\r\n      dispose();\r\n      dialogObj.hide();\r\n    }\r\n      \r\n      function onCancel() {\r\n        dispose();\r\n        dialogObj.hide();\r\n        isLoaded = true;\r\n      }\r\n      function open() {\r\n        imageEditorObj.update();\r\n        imageEditorObj.open(dataURL);\r\n      }\r\n      function onclose() {\r\n        dispose();\r\n        dialogObj.hide();\r\n        isLoaded = true;\r\n      }\r\n      function dispose() {\r\n        if (imageEditorObj !== null && imageEditorObj !== undefined) {\r\n          const imageEditorInstance = getComponent(\r\n            document.getElementById('imageeditor'),\r\n            'image-editor'\r\n          ) as ImageEditor;\r\n          if (imageEditorInstance !== null && imageEditorInstance !== undefined) {\r\n            imageEditorInstance.destroy();\r\n          }\r\n        }\r\n      }\r\n      \r\n      function OnBeforeOpen() {\r\n        isLoaded = false;\r\n        let selectNodes: Node[] =\r\n        defaultRTE.formatter.editorManager.nodeSelection.getNodeCollection(range);\r\n      if (selectNodes.length == 1 &&(selectNodes[0] as HTMLElement).tagName == 'IMG') {\r\n        imageELement = selectNodes[0] as HTMLImageElement;\r\n        imageELement.crossOrigin = 'anonymous';\r\n        let canvas = document.createElement('CANVAS') as HTMLCanvasElement;\r\n        let ctx = canvas.getContext('2d');\r\n        canvas.height = imageELement.offsetHeight;\r\n        canvas.width = imageELement.offsetWidth;\r\n        imageELement.onload = function () {\r\n          ctx.drawImage(imageELement, 0, 0, canvas.width, canvas.height);\r\n          dataURL = canvas.toDataURL();\r\n        };\r\n        if (!isLoaded) {\r\n          imageEditorObj = new ImageEditor({\r\n            height: '450px'\r\n          });\r\n          imageEditorObj.appendTo('#imageeditor');\r\n        }\r\n      }\r\n    }\r\n\r\n"}