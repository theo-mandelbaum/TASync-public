{"helper.ts":"import { EventRenderedArgs, View } from '@syncfusion/ej2-schedule';\n\n/**\n * Schedule util\n */\n\nexport function applyCategoryColor(args: EventRenderedArgs, currentView: View): void {\n    let categoryColor: string = args.data.CategoryColor as string;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        (args.element.firstChild as HTMLElement).style.borderLeftColor = categoryColor;\n    } else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\n\nexport function generateObject(start: number = new Date(2020, 6, 1).getTime(), end: number = new Date(2022, 11, 31).getTime(), isWeekDaysOnly: boolean = false): Object[] {\n    let data: Object[] = [];\n    let names: string[] = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    let dayCount: number = 1000 * 60 * 60;\n    const appCount: number = isWeekDaysOnly ? 4 : 9;\n    for (let a: number = start, id: number = 1; a < end; a += (dayCount * 24)) {\n        let count: number = Math.floor((Math.random() * appCount) + 1);\n        for (let b: number = 0; b < count; b++) {\n            let hour: number = Math.floor(Math.random() * 100) % 24;\n            let minutes: number = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            let nCount: number = Math.floor(Math.random() * names.length);\n            let startDate: Date = new Date(new Date(a).setHours(hour, minutes));\n            let endDate: Date = new Date(startDate.getTime() + (dayCount * 2.5));\n\n            if (isWeekDaysOnly && [0, 6].indexOf(startDate.getDay()) > -1 || [0, 6].indexOf(endDate.getDay()) > -1) {\n                continue;\n            }\n\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\n\nconst msPerDay: number = 86400000;\nconst msPerHour: number = 3600000;\nconst currentTime: number = new Date().setMinutes(0, 0, 0);\n\nexport function getReadOnlyEventsData(): Object[] {\n    let readonlyEventsData: Object[] = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: false\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}\n\nexport function getReminderEvents(): Record<string, any>[] {\n    const today: number = new Date().getTime();\n\n    let reminderEvents: Record<string, any>[] = [{\n        Id: 1,\n        Subject: 'Explosion of Betelgeuse Star',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today + 5000),\n        EndTime: new Date(today + (msPerHour * 2) + 5000),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 2,\n        Subject: 'Thule Air Crash Report',\n        Location: 'Newyork City',\n        StartTime: new Date(today - msPerDay - (msPerHour * 2)),\n        EndTime: new Date(today - msPerDay),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 3,\n        Subject: 'Milky Way as Melting pot',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today - msPerDay),\n        EndTime: new Date(today - msPerDay + (msPerHour * 2)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 4,\n        Subject: 'Blue Moon Eclipse',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today + msPerDay + (msPerHour * 2)),\n        EndTime: new Date(today + msPerDay + (msPerHour * 4)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 5,\n        Subject: 'Mysteries of Bermuda Triangle',\n        Location: 'Bermuda',\n        StartTime: new Date(today + msPerDay),\n        EndTime: new Date(today + msPerDay + (msPerHour * 2)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }];\n    return reminderEvents;\n}\n\nexport function generateResourceData(startId: number, endId: number, text: string): Record<string, any>[] {\n    let data: Record<string, any>[] = [];\n        let colors: string[] = [\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n        ];\n        for (let a: number = startId; a <= endId; a++) {\n            let n: number = Math.floor(Math.random() * colors.length);\n            data.push({ Id: a, Text: text + ' ' + a, Color: colors[n] });\n        }\n        return data;\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n  <div class=\"content-wrapper\">\n    <div id=\"Schedule\"></div>\n    <div id=\"schedule-reminder\"></div>\n  </div>\n</div>\n\n\n\n\n<script id=\"reminder-template\" type=\"text/x-template\">\n  <div class=\"e-toast-template\">\n    <div class=\"e-toast-message\">\n      <div class=\"e-toast-title\">${Subject}</div>\n      <div class=\"e-toast-content\">${StartTime.toLocaleTimeString()} - ${EndTime.toLocaleTimeString()}</div>\n    </div>\n  </div>\n</script>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-schedule\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { Schedule, Day, Week, WorkWeek, Month, Agenda, Resize, DragAndDrop } from '@syncfusion/ej2-schedule';\r\nimport { Toast } from '@syncfusion/ej2-notifications';\r\nimport { compile } from '@syncfusion/ej2-base';\r\nimport { getReminderEvents } from './helper';\r\n\r\nSchedule.Inject(Day, Week, WorkWeek, Month, Agenda, Resize, DragAndDrop);\r\n\r\n/**\r\n * Schedule reminder sample\r\n */\r\n\r\n\n    \r\n    let reminderInterval: number;\r\n    let data: Record<string, any>[] = getReminderEvents();\r\n    let scheduleObj: Schedule = new Schedule({\r\n        height: '550px',\r\n        timezone: 'UTC',\r\n        eventSettings: { dataSource: data },\r\n        created: () => {\r\n            reminderInterval = setInterval(refreshEventReminder, 5000);\r\n        },\r\n        destroyed: () => {\r\n            clearInterval(reminderInterval as number);\r\n        }\r\n    });\r\n    scheduleObj.appendTo('#Schedule');\r\n    let toastObjReminder: Toast = new Toast({\r\n        cssClass: 'e-schedule-reminder e-toast-info',\r\n        position: { X: 'Right', Y: 'Top' },\r\n        newestOnTop: true,\r\n        showCloseButton: true,\r\n        timeOut: 0,\r\n        target: '.e-schedule',\r\n        animation: {\r\n            hide: { effect: 'SlideRightOut' },\r\n            show: { effect: 'SlideRightIn' }\r\n        }\r\n    });\r\n    toastObjReminder.appendTo('#schedule-reminder');\r\n    function refreshEventReminder() {\r\n        let eventCollection = scheduleObj.getCurrentViewEvents();\r\n        eventCollection.forEach((event: Record<string, any>, i: number) => {\r\n            let dateFormat: Function = (date: Date): Date =>\r\n                new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\r\n            const startTime: Date = dateFormat(event[scheduleObj.eventFields.startTime] as Date);\r\n            const currentTime: Date = dateFormat(new Date(new Date().toUTCString().slice(0, -3)));\r\n            const difference = startTime.getTime() - currentTime.getTime();\r\n            if (startTime.getTime() >= currentTime.getTime() && difference > -1 && difference <= 5000) {\r\n                toastObjReminder.show({\r\n                    template: (compile(document.getElementById('reminder-template').innerHTML.trim())(event)[0] as Element).outerHTML\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n"}