{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\nï»¿<div class=\"col-lg-9 control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"Schedule\"></div>\n    </div>\n</div>\n\n<div class=\"col-lg-3 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody>\n            <tr>\n                <td>\n                    <input type=\"text\" id=\"firstMonthElement\">\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input type=\"text\" id=\"numberOfMonthsElement\">\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<style>\n    .year-view.e-schedule .e-timeline-year-view .e-resource-column-table,\n    .year-view.e-schedule .e-timeline-year-view .e-resource-left-td {\n        width: 120px;\n    }\n\n    .col-lg-2.property-section .property-panel-table td {\n        padding-bottom: 1rem;\n    }\n</style>\n\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-schedule\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport { Schedule, Year, TimelineYear, EventRenderedArgs, Resize, DragAndDrop } from '@syncfusion/ej2-schedule';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { NumericTextBox, ChangeEventArgs as NumericChangeEventArgs } from '@syncfusion/ej2-inputs';\n\nSchedule.Inject(Year, TimelineYear, Resize, DragAndDrop);\n\n/**\n * Schedule Year view sample\n */\n\n\n    \n    // Initialize schedule component\n    let scheduleObj: Schedule = new Schedule({\n        cssClass: 'year-view',\n        width: '100%', height: '555px',\n        views: [\n            { option: 'Year', isSelected: true },\n            { option: 'TimelineYear', displayName: 'Horizontal Timeline Year' },\n            {\n                option: 'TimelineYear', displayName: 'Vertical Timeline Year', orientation: 'Vertical',\n                group: { resources: ['Categories'] }\n            }\n        ],\n        resources: [{\n            field: 'TaskId', title: 'Category', name: 'Categories', allowMultiple: true,\n            dataSource: [\n                { text: 'Nancy', id: 1, color: '#df5286' },\n                { text: 'Steven', id: 2, color: '#7fa900' },\n                { text: 'Robert', id: 3, color: '#ea7a57' },\n                { text: 'Smith', id: 4, color: '#5978ee' },\n                { text: 'Micheal', id: 5, color: '#df5286' }\n            ],\n            textField: 'text', idField: 'id', colorField: 'color'\n        }],\n        firstMonthOfYear: 0,\n        monthsCount: 12,\n        eventSettings: { dataSource: generateEvents() },\n        eventRendered: (args: EventRenderedArgs) => {\n            let eventColor: string = args.data.EventColor as string;\n            if (!args.element || !eventColor) {\n                return;\n            } else {\n                args.element.style.backgroundColor = eventColor;\n            }\n        }\n    });\n    scheduleObj.appendTo('#Schedule');\n\n    // tslint:disable-next-line:max-func-body-length\n    function generateEvents(count: number = 250, date: Date = new Date()): Record<string, any>[] {\n        let names: string[] = [\n            'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Travelling', 'Annual Conference', 'Birthday Celebration',\n            'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day',\n            'MoonShiners', 'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice',\n            'Rugby Match', 'Guitar Class', 'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\n        ];\n        let colors: string[] = [\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n        ];\n        let startDate: Date = new Date(date.getFullYear() - 2, 0, 1);\n        let endDate: Date = new Date(date.getFullYear() + 2, 11, 31);\n        let dateCollections: Record<string, any>[] = [];\n        for (let a: number = 0, id: number = 1; a < count; a++) {\n            let start: Date = new Date(Math.random() * (endDate.getTime() - startDate.getTime()) + startDate.getTime());\n            let end: Date = new Date(new Date(start.getTime()).setHours(start.getHours() + 1));\n            let nCount: number = Math.floor(Math.random() * names.length);\n            let n: number = Math.floor(Math.random() * colors.length);\n            dateCollections.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: new Date(start.getTime()),\n                EndTime: new Date(end.getTime()),\n                IsAllDay: (id % 10) ? true : false,\n                EventColor: colors[n],\n                TaskId: (id % 5) + 1\n            });\n            id++;\n        }\n        return dateCollections;\n    }\n\n    let months: Record<string, any>[] = [\n        { text: 'January', value: 0 },\n        { text: 'February', value: 1 },\n        { text: 'March', value: 2 },\n        { text: 'April', value: 3 },\n        { text: 'May', value: 4 },\n        { text: 'June', value: 5 },\n        { text: 'July', value: 6 },\n        { text: 'August', value: 7 },\n        { text: 'September', value: 8 },\n        { text: 'October', value: 9 },\n        { text: 'November', value: 10 },\n        { text: 'December', value: 11 }\n    ];\n    let firstMonthObj: DropDownList = new DropDownList({\n        placeholder: 'First month of year',\n        floatLabelType: 'Always',\n        dataSource: months,\n        popupHeight: '200px',\n        fields: { text: 'text', value: 'value' },\n        value: 0,\n        change: (args: ChangeEventArgs) => {\n            scheduleObj.firstMonthOfYear = args.value as number;\n        }\n    });\n    firstMonthObj.appendTo('#firstMonthElement');\n\n    let numberOfMonthsObj: NumericTextBox = new NumericTextBox({\n        placeholder: 'Number of months',\n        floatLabelType: 'Always',\n        min: 1,\n        value: 12,\n        max: 24,\n        format: '###.##',\n        change: (args: NumericChangeEventArgs) => {\n            scheduleObj.monthsCount = args.value as number;\n        }\n    });\n    numberOfMonthsObj.appendTo('#numberOfMonthsElement');\n"}