{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-12 control-section\">\n    <div class=\"content-wrapper\">\n        <div class=\"schedule-overview\">\n            <header id=\"defaultAppBar\">\n                <span class=\"time e-icons e-time-zone\"></span>\n                <span id=\"timezoneBtn\" class=\"time \">UTC</span>\n                <span class=\"time e-icons e-clock\"></span>\n                <span id=\"timeBtn\" class=\"time current-time\">Time</span>\n                <div class=\"e-appbar-spacer\"></div>\n                <button id=\"printBtn\">Print</button>\n                <div class=\"import-button\">\n                    <input type=\"file\" id=\"icalendar\" name=\"iCalendar\">\n                </div>\n                <button id=\"exportBtn\">Export</button>\n                <button id=\"settingsBtn\" aria-label=\"settings\"></button>\n            </header>\n            <div id=\"toolbarOptions\"></div>\n            <div class=\"overview-content\">\n                <div class=\"left-panel\">\n                    <div class=\"overview-scheduler\">\n                        <div id=\"scheduler\"></div>\n                        <ul id=\"overviewContextMenu\"></ul>\n                    </div>\n                </div>\n                <div class=\"right-panel hide\">\n                    <div class=\"control-panel e-css\">\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Calendar</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"resources\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">First Day of Week</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"weekFirstDay\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Work Week</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"workWeekDays\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Timezone</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"timezone\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Day Start Hour</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"dayStartHour\" aria-label=\"Day Start Hour\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Day End Hour</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"dayEndHour\" aria-label=\"Day End Hour\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Work Start Hour</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"workHourStart\" aria-label=\"Work Start Hour\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Work End Hour</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"workHourEnd\" aria-label=\"Work End Hour\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Slot Duration</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"slotDuration\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Slot Interval</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"slotInterval\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Time Format</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"timeFormat\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Week Numbers</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"weekNumber\">\n                            </div>\n                        </div>\n                        <div class=\"col-row\">\n                            <div class=\"col-left\">\n                                <label style=\"line-height: 34px; margin: 0;\">Tooltip</label>\n                            </div>\n                            <div class=\"col-right\">\n                                <input type=\"text\" id=\"tooltip\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n\n<style type=\"text/css\">\n\n    .tailwind .schedule-overview .overview-content .right-panel .control-panel,\n    .tailwind3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f4f6;\n    }\n\n    .tailwind-dark .schedule-overview .overview-content .right-panel .control-panel,\n    .tailwind3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #374151;\n        color: #fff;\n    }\n\n    .material .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #fafafa;\n    }\n\n    .material-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2a2a;\n        color: #ffff;\n    }\n\n    .fabric .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #ffffff;\n    }\n\n    .fabric-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #333232;\n        color: #fff;\n    }\n\n    .fluent .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f2f1;\n    }\n\n    .fluent-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #252423;\n        border-color: #c1c1c1;\n        color: #fff;\n    }\n\n    .bootstrap .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f8f8f8;\n    }\n\n    .bootstrap-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2a2a;\n        color: #fff;\n    }\n\n    .bootstrap5 .schedule-overview .overview-content .right-panel .control-panel,\n    .bootstrap5\\.3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f8f9fa;\n        color: #212529;\n    }\n\n    .bootstrap5-dark .schedule-overview .overview-content .right-panel .control-panel,\n    .bootstrap5\\.3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #343a40;\n        color: #fff;\n    }\n\n    .highcontrast .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #000000;\n        color: #ffffff;\n    }\n\n    .material3 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #f3f1f8;\n    }\n\n    .material3-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #2a2731;\n    }\n\n    .fluent2 .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #FFFFFF;\n    }\n\n    .fluent2-dark .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #292929;\n    }\n\n    .fluent2-highcontrast .schedule-overview .overview-content .right-panel .control-panel {\n        background-color: #000000;\n    }\n\n    .schedule-overview .overview-toolbar.e-rtl + *{\n        flex-direction: row-reverse;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar {\n        border-radius: 0;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {\n        display: inline-grid;\n    }\n\n    .material .schedule-overview .overview-toolbar.e-toolbar {\n        border-style: solid;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item:not(.e-separator) {\n        padding: 3.5px;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-icons.e-btn-icon,\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-tbar-btn-text {\n        line-height: 23px !important;\n        min-height: 23px !important;\n        padding: 0px !important;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item.e-template {\n        margin: 0 5px;\n    }\n\n    .schedule-overview .overview-content {\n        display: flex;\n    }\n\n    .schedule-overview .overview-content .left-panel {\n        height: 700px;\n        width: 100%;\n    }\n\n    .schedule-overview .overview-content .right-panel {\n        display: block;\n        height: 700px;\n        transform: translateX(0%);\n        transition: transform .5s ease, width 500ms;\n        width: 500px;\n    }\n\n    .schedule-overview .overview-content .right-panel.hide {\n        display: none;\n        transform: translateX(100%);\n        transition: transform .5s ease, width 500ms;\n        width: 0;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel {\n        background: #f8f9fa;\n        font-size: 14px;\n        height: 100%;\n        overflow: auto;\n        padding: 15px;\n        width: 100%;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-row {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel label {\n        font-weight: 500;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-left {\n        flex: 0 0 41.666667%;\n        max-width: 41.666667%;\n        margin-bottom: 1rem;\n    }\n\n    .schedule-overview .overview-content .right-panel .control-panel .col-right {\n        flex: 0 0 58.333333%;\n        max-width: 58.333333%;\n        margin-bottom: 1rem;\n    }\n\n    .schedule-overview .overview-scheduler {\n        height: 100%;\n        width: 100%;\n    }\n\n    .schedule-overview .e-schedule-toolbar .e-views,\n    .schedule-overview .e-schedule-toolbar .e-schedule-seperator,\n    .schedule-workweek.e-multi-select-list-wrapper.e-checkbox .e-filter-parent,\n    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-filter-parent {\n        display: none;\n    }\n\n    .schedule-overview .e-timeline-view .e-resource-left-td,\n    .schedule-overview .e-timeline-month-view .e-resource-left-td {\n        width: 120px;\n    }\n\n    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-list-parent:first-child li:first-child {\n        background-image: none;\n        opacity: .5;\n        pointer-events: none;\n        user-select: none;\n    }\n\n    .schedule-overview .calendar-import.e-upload {\n        border: 0;\n        padding-left: 0 !important;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-btn-icon {\n        margin-left: initial;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap {\n        padding: 0\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-select {\n        display: none;\n    }\n\n    .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-drop,\n    .calendar-import .e-upload-files {\n        display: none;\n    }\n\n    .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {\n        font-size: 14px;\n    }\n\n    .schedule-context-menu ul .e-menu-item .e-menu-icon {\n        font-size: 12px;\n    }\n\n    .schedule-overview.e-schedule .e-vertical-view .e-header-cells,\n    .schedule-overview.e-schedule .e-timeline-month-view .e-header-cells {\n        padding: 0;\n        text-align: center !important;\n    }\n\n    .schedule-overview.e-schedule .date-text {\n        font-size: 14px;\n    }\n\n    .schedule-overview.e-schedule.e-device .date-text {\n        font-size: 12px;\n    }\n\n    .schedule-overview.e-schedule .weather-image {\n        width: 20px;\n        height: 20px;\n        background-position: center center;\n        background-repeat: no-repeat;\n        background-size: cover;\n    }\n\n    .schedule-overview.e-schedule .e-month-view .weather-image {\n        float: right;\n        margin: -20px 2px 0 0;\n        width: 20px;\n        height: 20px;\n    }\n\n    .fluent2 .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,\n    .fluent2-dark .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,\n    .fluent2-highcontrast .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame {\n        margin: 0;\n    }\n\n    .fluent .e-appbar .e-btn-icon.e-icons,\n    .fluent-dark .e-appbar .e-btn-icon.e-icons {\n        margin-top: -2px;\n    }\n\n    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame,\n    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame {\n        height: 17px;\n        line-height: 17px;\n        width: 17px;\n    }\n\n    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check,\n    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check {\n        font-size: 15px;\n        line-height: 16px;\n    }\n\n    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {\n        padding-top: 2px;\n        padding-bottom: 2px;\n    }\n\n    #exportBtn {\n        white-space: nowrap;\n    }\n\n    .time {\n        display: flex;\n        gap: 5px;\n        align-items: center;\n        padding: 0 5px;\n    }\n\n    .template {\n        height: 46px;\n        line-height: 23px;\n    }\n\n    .template .icon-child {\n        text-align: center;\n        height: 23px !important;\n    }\n\n    .template .text-child {\n        font-size: 14px;\n        line-height: 23px !important;\n        font-weight: normal;\n    }\n\n    @media (max-width: 481px) {\n        .schedule-overview .overview-content .right-panel {\n            position: absolute;\n            width: 90%;\n        }\n\n        .import-button,\n        #printBtn,\n        #exportBtn {\n            display: none;\n        }\n\n    }\n\n    @media (max-width: 1024px) {\n        .schedule-overview .overview-content .right-panel .control-panel .col-row {\n            display: initial;\n        }\n\n        .schedule-overview .overview-content .right-panel .control-panel .col-left {\n            flex: initial;\n            max-width: initial;\n            margin-bottom: initial;\n        }\n\n        .schedule-overview .overview-content .right-panel .control-panel .col-right {\n            flex: initial;\n            max-width: initial;\n        }\n    }\n</style>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-icons\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-notifications\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-splitbuttons\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"@syncfusion/ej2-schedule\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    addClass, closest, extend, isNullOrUndefined, remove, removeClass, Browser, Internationalization, compile\n} from '@syncfusion/ej2-base';\nimport { Button, Switch,CheckBox, ChangeEventArgs as SwitchEventArgs } from '@syncfusion/ej2-buttons';\nimport { TimePicker, ChangeEventArgs as TimeEventArgs } from '@syncfusion/ej2-calendars';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { DropDownList, MultiSelect, ChangeEventArgs, CheckBoxSelection, MultiSelectChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { Uploader, SelectedEventArgs } from '@syncfusion/ej2-inputs';\nimport {\n    ContextMenu, BeforeOpenCloseMenuEventArgs, Toolbar, ClickEventArgs, MenuEventArgs as ContextMenuEventArgs, AppBar\n} from '@syncfusion/ej2-navigations';\nimport {\n    Schedule, Day, Week, WorkWeek, Month, Year, Agenda, TimelineViews, TimelineMonth, TimelineYear, Resize, DragAndDrop,\n    ICalendarExport, ICalendarImport, Print, ExcelExport, ResourcesModel, CellClickEventArgs, Timezone\n} from '@syncfusion/ej2-schedule';\nimport { DropDownButton, MenuEventArgs } from '@syncfusion/ej2-splitbuttons';\nimport { tz } from 'moment-timezone';\n\nMultiSelect.Inject(CheckBoxSelection);\n// tslint:disable-next-line:max-line-length\nSchedule.Inject(Day, Week, WorkWeek, Month, Year, Agenda, TimelineViews, TimelineMonth, TimelineYear, DragAndDrop, Resize, ExcelExport, ICalendarExport, ICalendarImport, Print);\n\n/**\n * Schedule Overview sample\n */\n\n// tslint:disable-next-line:max-func-body-length\n\n    \n\n    interface TemplateFunction extends Window {\n        getDateHeaderDate?: Function;\n        getDateHeaderDay?: Function;\n        getWeather?: Function;\n    }\n\n    let intlObj: Internationalization = new Internationalization();\n    (window as TemplateFunction).getDateHeaderDay = (value: Date) => {\n        return intlObj.formatDate(value, { skeleton: 'E' });\n    };\n    (window as TemplateFunction).getDateHeaderDate = (value: Date) => {\n        return intlObj.formatDate(value, { skeleton: 'd' });\n    };\n    (window as TemplateFunction).getWeather = (value: Date) => {\n        switch (value.getDay()) {\n            case 0:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-clear.svg\" alt=\"Clear Weather\"/>';\n            case 1:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            case 2:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-rain.svg\" alt=\"Rain Weather\"/>';\n            case 3:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            case 4:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-rain.svg\" alt=\"Rain Weather\"/>';\n            case 5:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-clear.svg\" alt=\"Clear Weather\"/>';\n            case 6:\n                return '<img class=\"weather-image\" src=\"//npmci.syncfusion.com/development/demos/src/schedule/images/weather-clouds.svg\" alt=\"Clouds Weather\"/>';\n            default:\n                return null;\n        }\n    };\n\n    const defaultAppBarObj: AppBar = new AppBar({\n        colorMode: 'Primary'\n    });\n    defaultAppBarObj.appendTo('#defaultAppBar');\n\n    let liveTimeInterval: number;\n    let updateLiveTime: Function = (): void => {\n        let scheduleTimezone: string = scheduleObj ? scheduleObj.timezone : 'Etc/GMT';\n        let timeBtn: Element = document.querySelector('.current-time');\n        if (!timeBtn) {\n            return;\n        }\n        if (scheduleObj.isAdaptive) {\n            timeBtn.innerHTML = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', timeZone: scheduleTimezone });\n        }\n        else {\n            timeBtn.innerHTML = new Date().toLocaleTimeString('en-US', { timeZone: scheduleTimezone });\n        }\n    };\n\n    let generateEvents: Function = (): Object[] => {\n        let eventData: Object[] = [];\n        let eventSubjects: string[] = [\n            'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Traveling', 'Annual Conference', 'Birthday Celebration',\n            'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day', 'MoonShiners',\n            'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice', 'Rugby Match', 'Guitar Class',\n            'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\n        ];\n        let weekDate: Date = new Date(new Date().setDate(new Date().getDate() - new Date().getDay()));\n        let startDate: Date = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 10, 0);\n        let endDate: Date = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 11, 30);\n        eventData.push({\n            Id: 1,\n            Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n            StartTime: startDate,\n            EndTime: endDate,\n            Location: '',\n            Description: 'Event Scheduled',\n            RecurrenceRule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1;COUNT=10;',\n            IsAllDay: false,\n            IsReadonly: false,\n            CalendarId: 1\n        });\n        for (let a: number = 0, id: number = 2; a < 500; a++) {\n            let month: number = Math.floor(Math.random() * (11 - 0 + 1) + 0);\n            let date: number = Math.floor(Math.random() * (28 - 1 + 1) + 1);\n            let hour: number = Math.floor(Math.random() * (23 - 0 + 1) + 0);\n            let minutes: number = Math.floor(Math.random() * (59 - 0 + 1) + 0);\n            let start: Date = new Date(new Date().getFullYear(), month, date, hour, minutes, 0);\n            let end: Date = new Date(start.getTime());\n            end.setHours(end.getHours() + 2);\n            let startDate: Date = new Date(start.getTime());\n            let endDate: Date = new Date(end.getTime());\n            eventData.push({\n                Id: id,\n                Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n                StartTime: startDate,\n                EndTime: endDate,\n                Location: '',\n                Description: 'Event Scheduled',\n                IsAllDay: id % 10 === 0,\n                IsReadonly: endDate < new Date(),\n                CalendarId: (a % 4) + 1\n            });\n            id++;\n        }\n        if (Browser.isIE) {\n            Timezone.prototype.offset = (date: Date, timezone: string): number => tz.zone(timezone).utcOffset(date.getTime());\n        }\n        let overviewEvents: { [key: string]: Date }[] = extend([], eventData, null, true) as { [key: string]: Date }[];\n        let timezone: Timezone = new Timezone();\n        let currentTimezone: string = timezone.getLocalTimezoneName();\n        for (let event of overviewEvents) {\n            event.StartTime = timezone.convert(event.StartTime, 'UTC', currentTimezone);\n            event.EndTime = timezone.convert(event.EndTime, 'UTC', currentTimezone);\n        }\n        return overviewEvents;\n    };\n\n    let isTimelineView: boolean = false;\n\n    let printBtn: Button = new Button({ iconCss: 'e-icons e-print', cssClass: 'e-inherit' });\n    printBtn.appendTo('#printBtn');\n    printBtn.element.onclick = () => { scheduleObj.print(); };\n\n    let importTemplateFn: Function = (data: Record<string, any>): NodeList => {\n        const template: string = '<div class=\"e-template-btn\"><span class=\"e-btn-icon e-icons e-upload-1 e-icon-left\"></span>${text}</div>';\n        return compile(template.trim())(data) as NodeList;\n    };\n\n    let importObj: Uploader = new Uploader({\n        allowedExtensions: '.ics',\n        cssClass: 'calendar-import',\n        buttons: { browse: importTemplateFn({ text: 'Import' })[0] as HTMLElement },\n        multiple: false,\n        showFileList: false,\n        selected: (args: SelectedEventArgs) => scheduleObj.importICalendar((<HTMLInputElement>args.event.target).files[0])\n    });\n    importObj.appendTo('#icalendar');\n    document.querySelector('.calendar-import .e-btn').classList.add('e-inherit');\n\n    let exportObj: DropDownButton = new DropDownButton({\n        items: [\n            { text: 'iCalendar', iconCss: 'e-icons e-export' },\n            { text: 'Excel', iconCss: 'e-icons e-export-excel' }\n        ],\n        cssClass: 'e-inherit',\n        select: (args: MenuEventArgs) => {\n            if (args.item.text === 'Excel') {\n                let exportDatas: Record<string, any>[] = [];\n                let eventCollection: Record<string, any>[] = scheduleObj.getEvents();\n                let resourceCollection: ResourcesModel[] = scheduleObj.getResourceCollections();\n                let resourceData: Record<string, any>[] = resourceCollection[0].dataSource as Record<string, any>[];\n                for (let resource of resourceData) {\n                    let data: Record<string, any>[] = eventCollection.filter((e: Record<string, any>) =>\n                        e.CalendarId === resource.CalendarId);\n                    exportDatas = exportDatas.concat(data);\n                }\n                scheduleObj.exportToExcel({\n                    exportType: 'xlsx', customData: exportDatas, fields: ['Id', 'Subject', 'StartTime', 'EndTime', 'CalendarId']\n                });\n            } else {\n                scheduleObj.exportToICalendar();\n            }\n        }\n    });\n    exportObj.appendTo('#exportBtn');\n\n    let timelineTemplate: string = '<div class=\"template\"><label><div class=\"icon-child\">' +\n        '<input id=\"timeline-views\" aria-label=\"Timeline Views\"></input></div><div class=\"text-child\">Timeline Views</div></label></div>';\n    let groupTemplate: string = '<div class=\"template\"><label><div class=\"icon-child\">' +\n        '<input id=\"grouping\" aria-label=\"Grouping\"></input></div><div class=\"text-child\">Grouping</div></label></div>';\n    let gridlineTemplate: string = ' <div class=\"template\"><label><div class=\"icon-child\">' +\n        '<input id=\"timeSlot\" aria-label=\"Time Slots\"></input></div><div class=\"text-child\">Time Slots</div></label></div>';\n    let autoHeightTemplate: string = '<div class=\"template\"><label><div class=\"icon-child\">' +\n        '<input id=\"row_auto_height\" aria-label=\"Auto Fit Rows\"></input></div><div class=\"text-child\">Auto Fit Rows</div></label></div>';\n    let toolbarObj: Toolbar = new Toolbar({\n        height: 70,\n        overflowMode: 'Scrollable',\n        scrollStep: 100,\n        cssClass: 'overview-toolbar',\n        items: [\n            { prefixIcon: 'e-icons e-plus', tooltipText: 'New Event', text: 'New Event', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-repeat', tooltipText: 'New Recurring Event', text: 'New Recurring Event', tabIndex: 0 },\n            { type: 'Separator' },\n            { prefixIcon: 'e-icons e-day', tooltipText: 'Day', text: 'Day', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-week', tooltipText: 'Week', text: 'Week', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-week', tooltipText: 'Work Week', text: 'WorkWeek', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-month', tooltipText: 'Month', text: 'Month', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-month', tooltipText: 'Year', text: 'Year', tabIndex: 0 },\n            { prefixIcon: 'e-icons e-agenda-date-range', tooltipText: 'Agenda', text: 'Agenda', tabIndex: 0 },\n            { tooltipText: 'Timeline Views', text: 'Timeline Views', template: timelineTemplate },\n            { type: 'Separator' },\n            { tooltipText: 'Grouping', text: 'Grouping', template: groupTemplate },\n            { tooltipText: 'Time Slots', text: 'Time Slots', template: gridlineTemplate },\n            { tooltipText: 'Auto Fit Rows', text: 'Auto Fit Rows', template: autoHeightTemplate },\n        ],\n        created: () => {\n            liveTimeInterval = setInterval(() => { updateLiveTime(); }, 1000);\n\n            let timelineView: CheckBox = new CheckBox({\n                checked: false,\n                created: () => { timelineView.element.setAttribute('tabindex', '0'); },\n                change: (args: SwitchEventArgs) => {\n                    isTimelineView = args.checked;\n                    switch (scheduleObj.currentView) {\n                        case 'Day':\n                        case 'TimelineDay':\n                            scheduleObj.currentView = isTimelineView ? 'TimelineDay' : 'Day';\n                            break;\n                        case 'Week':\n                        case 'TimelineWeek':\n                            scheduleObj.currentView = isTimelineView ? 'TimelineWeek' : 'Week';\n                            break;\n                        case 'WorkWeek':\n                        case 'TimelineWorkWeek':\n                            scheduleObj.currentView = isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n                            break;\n                        case 'Month':\n                        case 'TimelineMonth':\n                            scheduleObj.currentView = isTimelineView ? 'TimelineMonth' : 'Month';\n                            break;\n                        case 'Year':\n                        case 'TimelineYear':\n                            scheduleObj.currentView = isTimelineView ? 'TimelineYear' : 'Year';\n                            break;\n                        case 'Agenda':\n                            scheduleObj.currentView = 'Agenda';\n                            break;\n                    }\n                }\n            });\n            timelineView.appendTo('#timeline-views');\n            let grouping: CheckBox = new CheckBox({\n                checked: true,\n                created: () => { grouping.element.setAttribute('tabindex', '0'); },\n                change: (args: SwitchEventArgs) => { scheduleObj.group.resources = args.checked ? ['Calendars'] : []; }\n            });\n            grouping.appendTo('#grouping');\n            let timeSlot: CheckBox = new CheckBox({\n                checked: true,\n                created: () => { timeSlot.element.setAttribute('tabindex', '0'); },\n                change: (args: SwitchEventArgs) => { scheduleObj.timeScale.enable = args.checked; }\n            });\n            timeSlot.appendTo('#timeSlot');\n            let rowAutoHeight: CheckBox = new CheckBox({\n                checked: false,\n                created: () => { rowAutoHeight.element.setAttribute('tabindex', '0'); },\n                change: (args: SwitchEventArgs) => { scheduleObj.rowAutoHeight = args.checked; }\n            });\n            rowAutoHeight.appendTo('#row_auto_height');\n            (document.querySelector('#settingsBtn') as HTMLButtonElement).onclick = () => {\n                let settingsPanel: Element = document.querySelector('.overview-content .right-panel');\n                if (settingsPanel.classList.contains('hide')) {\n                    removeClass([settingsPanel], 'hide');\n                    workweek.refresh();\n                    resources.refresh();\n                } else {\n                    addClass([settingsPanel], 'hide');\n                }\n                scheduleObj.refreshEvents();\n            };\n        },\n        clicked: (args: ClickEventArgs) => {\n            switch (args.item.text) {\n                case 'Day':\n                    scheduleObj.currentView = isTimelineView ? 'TimelineDay' : 'Day';\n                    break;\n                case 'Week':\n                    scheduleObj.currentView = isTimelineView ? 'TimelineWeek' : 'Week';\n                    break;\n                case 'WorkWeek':\n                    scheduleObj.currentView = isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n                    break;\n                case 'Month':\n                    scheduleObj.currentView = isTimelineView ? 'TimelineMonth' : 'Month';\n                    break;\n                case 'Year':\n                    scheduleObj.currentView = isTimelineView ? 'TimelineYear' : 'Year';\n                    break;\n                case 'Agenda':\n                    scheduleObj.currentView = 'Agenda';\n                    break;\n                case 'New Event':\n                    let date: Date = scheduleObj.selectedDate;\n                    let eventData: Object = {\n                        Id: scheduleObj.getEventMaxID(),\n                        Subject: '',\n                        StartTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours(), 0, 0),\n                        EndTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours() + 1, 0, 0),\n                        Location: '',\n                        Description: '',\n                        IsAllDay: false,\n                        CalendarId: 1\n                    };\n                    scheduleObj.openEditor(eventData, 'Add', true);\n                    break;\n                case 'New Recurring Event':\n                    let dates: Date = scheduleObj.selectedDate;\n                    let recEventData: Object = {\n                        Id: scheduleObj.getEventMaxID(),\n                        Subject: '',\n                        StartTime: new Date(dates.getFullYear(), dates.getMonth(), dates.getDate(), new Date().getHours(), 0, 0),\n                        EndTime: new Date(dates.getFullYear(), dates.getMonth(), dates.getDate(), new Date().getHours() + 1, 0, 0),\n                        Location: '',\n                        Description: '',\n                        IsAllDay: false,\n                        CalendarId: 1\n                    };\n                    scheduleObj.openEditor(recEventData, 'Add', true, 1);\n                    break;\n            }\n        }\n    });\n    toolbarObj.appendTo('#toolbarOptions');\n\n    let settingsBtn: Button = new Button({\n        iconCss: 'e-icons e-settings',\n        cssClass: 'e-inherit'\n    });\n    settingsBtn.appendTo('#settingsBtn');\n\n    let resourceData: Record<string, any>[] = [\n        { CalendarText: 'My Calendar', CalendarId: 1, CalendarColor: '#c43081' },\n        { CalendarText: 'Company', CalendarId: 2, CalendarColor: '#ff7f50' },\n        { CalendarText: 'Birthday', CalendarId: 3, CalendarColor: '#AF27CD' },\n        { CalendarText: 'Holiday', CalendarId: 4, CalendarColor: '#808000' }\n    ];\n    let scheduleObj: Schedule = new Schedule({\n        width: '100%',\n        height: '100%',\n        cssClass: 'schedule-overview',\n        views: [\n            'Day', 'Week', 'WorkWeek', 'Month', 'Year', 'Agenda', 'TimelineDay',\n            'TimelineWeek', 'TimelineWorkWeek', 'TimelineMonth', 'TimelineYear'\n        ],\n        timezone: 'UTC',\n        group: { resources: ['Calendars'] },\n        resources: [{\n            field: 'CalendarId', title: 'Calendars', name: 'Calendars', allowMultiple: true,\n            textField: 'CalendarText', idField: 'CalendarId', colorField: 'CalendarColor',\n            dataSource: resourceData, query: new Query().where('CalendarId', 'equal', 1)\n        }],\n        dateHeaderTemplate: '<div class=\"date-text\">${getDateHeaderDay(data.date)}</div><div class=\"date-text\">' +\n            '${getDateHeaderDate(data.date)}</div>${getWeather(data.date)}',\n        eventSettings: { dataSource: generateEvents() },\n        destroyed: () => {\n            menuObj.destroy();\n            if (liveTimeInterval) {\n                clearInterval(liveTimeInterval as number);\n            }\n        }\n    });\n    scheduleObj.appendTo('#scheduler');\n\n    let selectedTarget: Element;\n    let targetElement: HTMLElement;\n    let menuObj: ContextMenu = new ContextMenu({\n        target: '.e-schedule',\n        items: [\n            { text: 'New Event', iconCss: 'e-icons e-plus', id: 'Add' },\n            { text: 'New Recurring Event', iconCss: 'e-icons e-repeat', id: 'AddRecurrence' },\n            { text: 'Today', iconCss: 'e-icons e-timeline-today', id: 'Today' },\n            { text: 'Edit Event', iconCss: 'e-icons e-edit', id: 'Save' },\n            { text: 'Delete Event', iconCss: 'e-icons e-trash', id: 'Delete' },\n            {\n                text: 'Delete Event', id: 'DeleteRecurrenceEvent', iconCss: 'e-icons e-trash',\n                items: [\n                    { text: 'Delete Occurrence', id: 'DeleteOccurrence' },\n                    { text: 'Delete Series', id: 'DeleteSeries' }\n                ]\n            },\n            {\n                text: 'Edit Event', id: 'EditRecurrenceEvent', iconCss: 'e-icons e-edit',\n                items: [\n                    { text: 'Edit Occurrence', id: 'EditOccurrence' },\n                    { text: 'Edit Series', id: 'EditSeries' }\n                ]\n            }\n        ],\n        beforeOpen: (args: BeforeOpenCloseMenuEventArgs) => {\n            let newEventElement: HTMLElement = document.querySelector('.e-new-event') as HTMLElement;\n            if (newEventElement) {\n                remove(newEventElement);\n                removeClass([document.querySelector('.e-selected-cell')], 'e-selected-cell');\n            }\n            scheduleObj.closeQuickInfoPopup();\n            targetElement = <HTMLElement>args.event.target;\n            if (closest(targetElement, '.e-contextmenu')) {\n                return;\n            }\n            selectedTarget = closest(targetElement, '.e-appointment,.e-work-cells,' +\n                '.e-vertical-view .e-date-header-wrap .e-all-day-cells,.e-vertical-view .e-date-header-wrap .e-header-cells');\n            if (isNullOrUndefined(selectedTarget)) {\n                args.cancel = true;\n                return;\n            }\n            if (selectedTarget.classList.contains('e-appointment')) {\n                let eventObj: Record<string, any> = <Record<string, any>>scheduleObj.getEventDetails(selectedTarget);\n                if (eventObj.RecurrenceRule) {\n                    menuObj.showItems(['EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n                    menuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'Save', 'Delete'], true);\n                } else {\n                    menuObj.showItems(['Save', 'Delete'], true);\n                    menuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n                }\n                return;\n            } else if ((selectedTarget.classList.contains('e-work-cells') || selectedTarget.classList.contains('e-all-day-cells')) &&\n                !selectedTarget.classList.contains('e-selected-cell')) {\n                removeClass([].slice.call(scheduleObj.element.querySelectorAll('.e-selected-cell')), 'e-selected-cell');\n                selectedTarget.setAttribute('aria-selected', 'true');\n                selectedTarget.classList.add('e-selected-cell');\n            }\n            menuObj.hideItems(['Save', 'Delete', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n            menuObj.showItems(['Add', 'AddRecurrence', 'Today'], true);\n        },\n        select: (args: ContextMenuEventArgs) => {\n            let selectedMenuItem: string = args.item.id;\n            let eventObj: Record<string, any>;\n            if (selectedTarget && selectedTarget.classList.contains('e-appointment')) {\n                eventObj = <Record<string, any>>scheduleObj.getEventDetails(selectedTarget);\n            }\n            switch (selectedMenuItem) {\n                case 'Today':\n                    scheduleObj.selectedDate = new Date();\n                    break;\n                case 'Add':\n                case 'AddRecurrence':\n                    let selectedCells: Element[] = scheduleObj.getSelectedElements();\n                    const isRightClickInSelectedCells: boolean = selectedCells.some((cell: Element) => cell === selectedTarget);\n                    let activeCellsData: CellClickEventArgs = scheduleObj.getCellDetails(isRightClickInSelectedCells ? selectedCells : [selectedTarget]);\n                    if (selectedMenuItem === 'Add') {\n                        scheduleObj.openEditor(activeCellsData, 'Add');\n                    } else {\n                        scheduleObj.openEditor(activeCellsData, 'Add', null, 1);\n                    }\n                    break;\n                case 'Save':\n                case 'EditOccurrence':\n                case 'EditSeries':\n                    if (selectedMenuItem === 'EditSeries') {\n                        let query: Query = new Query().where(scheduleObj.eventFields.id, 'equal', eventObj.RecurrenceID as string | number);\n                        eventObj = new DataManager(scheduleObj.eventsData).executeLocal(query)[0] as Record<string, any>;\n                    }\n                    scheduleObj.openEditor(eventObj, selectedMenuItem);\n                    break;\n                case 'Delete':\n                    scheduleObj.deleteEvent(eventObj);\n                    break;\n                case 'DeleteOccurrence':\n                case 'DeleteSeries':\n                    scheduleObj.deleteEvent(eventObj, selectedMenuItem);\n                    break;\n            }\n        },\n        cssClass: 'schedule-context-menu'\n    });\n    menuObj.appendTo('#overviewContextMenu');\n\n    let weekDays: Record<string, any>[] = [\n        { text: 'Sunday', value: 0 },\n        { text: 'Monday', value: 1 },\n        { text: 'Tuesday', value: 2 },\n        { text: 'Wednesday', value: 3 },\n        { text: 'Thursday', value: 4 },\n        { text: 'Friday', value: 5 },\n        { text: 'Saturday', value: 6 }\n    ];\n\n    let weekFirstDay: DropDownList = new DropDownList({\n        dataSource: weekDays,\n        fields: { text: 'text', value: 'value' },\n        popupHeight: 150,\n        value: 0,\n        change: (args: ChangeEventArgs) => scheduleObj.firstDayOfWeek = args.value as number\n    });\n    weekFirstDay.appendTo('#weekFirstDay');\n\n    let workweek: MultiSelect = new MultiSelect({\n        cssClass: 'schedule-workweek',\n        dataSource: weekDays,\n        fields: { text: 'text', value: 'value' },\n        mode: 'CheckBox',\n        enableSelectionOrder: false,\n        showClearButton: false,\n        showDropDownIcon: true,\n        value: [1, 2, 3, 4, 5],\n        change: (args: MultiSelectChangeEventArgs) => scheduleObj.workDays = args.value as number[]\n    });\n    workweek.appendTo('#workWeekDays');\n\n    let resources: MultiSelect = new MultiSelect({\n        cssClass: 'schedule-resource',\n        dataSource: resourceData,\n        fields: { text: 'CalendarText', value: 'CalendarId' },\n        mode: 'CheckBox',\n        showClearButton: false,\n        showDropDownIcon: true,\n        value: [1],\n        change: (args: MultiSelectChangeEventArgs) => {\n            let resourcePredicate: Predicate;\n            for (let value of args.value) {\n                if (resourcePredicate) {\n                    resourcePredicate = resourcePredicate.or(new Predicate('CalendarId', 'equal', value as number));\n                } else {\n                    resourcePredicate = new Predicate('CalendarId', 'equal', value as number);\n                }\n            }\n            scheduleObj.resources[0].query = resourcePredicate ? new Query().where(resourcePredicate) :\n                new Query().where('CalendarId', 'equal', 1);\n        }\n    });\n    resources.appendTo('#resources');\n\n    let timezone: DropDownList = new DropDownList({\n        dataSource: [\n            { text: 'UTC -12:00', value: 'Etc/GMT+12' },\n            { text: 'UTC -11:00', value: 'Etc/GMT+11' },\n            { text: 'UTC -10:00', value: 'Etc/GMT+10' },\n            { text: 'UTC -09:00', value: 'Etc/GMT+9' },\n            { text: 'UTC -08:00', value: 'Etc/GMT+8' },\n            { text: 'UTC -07:00', value: 'Etc/GMT+7' },\n            { text: 'UTC -06:00', value: 'Etc/GMT+6' },\n            { text: 'UTC -05:00', value: 'Etc/GMT+5' },\n            { text: 'UTC -04:00', value: 'Etc/GMT+4' },\n            { text: 'UTC -03:00', value: 'Etc/GMT+3' },\n            { text: 'UTC -02:00', value: 'Etc/GMT+2' },\n            { text: 'UTC -01:00', value: 'Etc/GMT+1' },\n            { text: 'UTC +00:00', value: 'Etc/GMT' },\n            { text: 'UTC +01:00', value: 'Etc/GMT-1' },\n            { text: 'UTC +02:00', value: 'Etc/GMT-2' },\n            { text: 'UTC +03:00', value: 'Etc/GMT-3' },\n            { text: 'UTC +04:00', value: 'Etc/GMT-4' },\n            { text: 'UTC +05:00', value: 'Etc/GMT-5' },\n            { text: 'UTC +05:30', value: 'Asia/Calcutta' },\n            { text: 'UTC +06:00', value: 'Etc/GMT-6' },\n            { text: 'UTC +07:00', value: 'Etc/GMT-7' },\n            { text: 'UTC +08:00', value: 'Etc/GMT-8' },\n            { text: 'UTC +09:00', value: 'Etc/GMT-9' },\n            { text: 'UTC +10:00', value: 'Etc/GMT-10' },\n            { text: 'UTC +11:00', value: 'Etc/GMT-11' },\n            { text: 'UTC +12:00', value: 'Etc/GMT-12' },\n            { text: 'UTC +13:00', value: 'Etc/GMT-13' },\n            { text: 'UTC +14:00', value: 'Etc/GMT-14' }\n        ],\n        fields: { text: 'text', value: 'value' },\n        popupHeight: 150,\n        value: 'Etc/GMT',\n        change: (args: ChangeEventArgs) => {\n            scheduleObj.timezone = args.value as string;\n            updateLiveTime();\n            document.querySelector('.schedule-overview #timezoneBtn').innerHTML = args.itemData.text;\n        }\n    });\n    timezone.appendTo('#timezone');\n\n    let dayStartHour: TimePicker = new TimePicker({\n        value: new Date(new Date().setHours(0, 0, 0)), showClearButton: false,\n        change: (args: TimeEventArgs) => {\n            scheduleObj.startHour = new Internationalization().formatDate(args.value, { skeleton: 'Hm' });\n        }\n    });\n    dayStartHour.appendTo('#dayStartHour');\n\n    let dayEndHour: TimePicker = new TimePicker({\n        value: new Date(new Date().setHours(23, 59, 59)), showClearButton: false,\n        change: (args: TimeEventArgs) => {\n            scheduleObj.endHour = new Internationalization().formatDate(args.value, { skeleton: 'Hm' });\n        }\n    });\n    dayEndHour.appendTo('#dayEndHour');\n\n    let workHourStart: TimePicker = new TimePicker({\n        value: new Date(new Date().setHours(9, 0, 0)), showClearButton: false,\n        change: (args: TimeEventArgs) => {\n            scheduleObj.workHours.start = new Internationalization().formatDate(args.value, { skeleton: 'Hm' });\n        }\n    });\n    workHourStart.appendTo('#workHourStart');\n\n    let workHourEnd: TimePicker = new TimePicker({\n        value: new Date(new Date().setHours(18, 0, 0)), showClearButton: false,\n        change: (args: TimeEventArgs) => {\n            scheduleObj.workHours.end = new Internationalization().formatDate(args.value, { skeleton: 'Hm' });\n        }\n    });\n    workHourEnd.appendTo('#workHourEnd');\n\n    let slotDuration: DropDownList = new DropDownList({\n        dataSource: [\n            { Name: '1 hour', Value: 60 },\n            { Name: '1.5 hours', Value: 90 },\n            { Name: '2 hours', Value: 120 },\n            { Name: '2.5 hours', Value: 150 },\n            { Name: '3 hours', Value: 180 },\n            { Name: '3.5 hours', Value: 210 },\n            { Name: '4 hours', Value: 240 },\n            { Name: '4.5 hours', Value: 270 },\n            { Name: '5 hours', Value: 300 },\n            { Name: '5.5 hours', Value: 330 },\n            { Name: '6 hours', Value: 360 },\n            { Name: '6.5 hours', Value: 390 },\n            { Name: '7 hours', Value: 420 },\n            { Name: '7.5 hours', Value: 450 },\n            { Name: '8 hours', Value: 480 },\n            { Name: '8.5 hours', Value: 510 },\n            { Name: '9 hours', Value: 540 },\n            { Name: '9.5 hours', Value: 570 },\n            { Name: '10 hours', Value: 600 },\n            { Name: '10.5 hours', Value: 630 },\n            { Name: '11 hours', Value: 660 },\n            { Name: '11.5 hours', Value: 690 },\n            { Name: '12 hours', Value: 720 }\n        ],\n        fields: { text: 'Name', value: 'Value' },\n        popupHeight: 150,\n        value: 60,\n        change: (args: ChangeEventArgs) => scheduleObj.timeScale.interval = args.value as number\n    });\n    slotDuration.appendTo('#slotDuration');\n    let slotInterval: DropDownList = new DropDownList({\n        dataSource: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        popupHeight: 150,\n        value: 2,\n        change: (args: ChangeEventArgs) => scheduleObj.timeScale.slotCount = args.value as number\n    });\n    slotInterval.appendTo('#slotInterval');\n    let timeFormat: DropDownList = new DropDownList({\n        dataSource: [\n            { Name: '12 hours', Value: 'hh:mm a' },\n            { Name: '24 hours', Value: 'HH:mm' }\n        ],\n        fields: { text: 'Name', value: 'Value' },\n        popupHeight: 150,\n        value: 'hh:mm a',\n        change: (args: ChangeEventArgs) => scheduleObj.timeFormat = args.value as string,\n    });\n    timeFormat.appendTo('#timeFormat');\n    let weekNumber: DropDownList = new DropDownList({\n        dataSource: [\n            { Name: 'Off', Value: 'Off' },\n            { Name: 'First Day of Year', Value: 'FirstDay' },\n            { Name: 'First Full Week', Value: 'FirstFullWeek' },\n            { Name: 'First Four-Day Week', Value: 'FirstFourDayWeek' }\n        ],\n        fields: { text: 'Name', value: 'Value' },\n        popupHeight: 150,\n        value: 'Off',\n        change: (args: ChangeEventArgs) => {\n            if (args.value === 'Off') {\n                scheduleObj.showWeekNumber = false;\n            } else {\n                scheduleObj.showWeekNumber = true;\n                scheduleObj.weekRule = args.value as any;\n            }\n        },\n    });\n    weekNumber.appendTo('#weekNumber');\n\n    let tooltip: DropDownList = new DropDownList({\n        dataSource: [\n            { Name: 'Off', Value: 'Off' },\n            { Name: 'On', Value: 'On' },\n        ],\n        fields: { text: 'Name', value: 'Value' },\n        popupHeight: 150,\n        value: 'Off',\n        change: (args: ChangeEventArgs) => {\n            if (args.value === 'Off') {\n                scheduleObj.eventSettings.enableTooltip = false;\n            } else {\n                scheduleObj.eventSettings.enableTooltip = true;\n            }\n        },\n    });\n    tooltip.appendTo('#tooltip');\n\n"}