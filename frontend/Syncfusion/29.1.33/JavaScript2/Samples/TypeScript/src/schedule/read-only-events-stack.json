{"helper.ts":"import { EventRenderedArgs, View } from '@syncfusion/ej2-schedule';\n\n/**\n * Schedule util\n */\n\nexport function applyCategoryColor(args: EventRenderedArgs, currentView: View): void {\n    let categoryColor: string = args.data.CategoryColor as string;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        (args.element.firstChild as HTMLElement).style.borderLeftColor = categoryColor;\n    } else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n}\n\nexport function generateObject(start: number = new Date(2020, 6, 1).getTime(), end: number = new Date(2022, 11, 31).getTime(), isWeekDaysOnly: boolean = false): Object[] {\n    let data: Object[] = [];\n    let names: string[] = [\n        'Story Time for Kids', 'Camping with Turtles', 'Wildlife Warriors', 'Parrot Talk', 'Birds of Prey', 'Croco World',\n        'Venomous Snake Hunt', 'Face Painting & Drawing events', 'Pony Rides', 'Feed the Giants', 'Jungle Treasure Hunt',\n        'Endangered Species Program', 'Black Cockatoos Playtime', 'Walk with Jungle King', 'Trained Climbers', 'Playtime with Chimpanzees',\n        'Meet a small Mammal', 'Amazon Fish Feeding', 'Elephant Ride'\n    ];\n    let dayCount: number = 1000 * 60 * 60;\n    const appCount: number = isWeekDaysOnly ? 4 : 9;\n    for (let a: number = start, id: number = 1; a < end; a += (dayCount * 24)) {\n        let count: number = Math.floor((Math.random() * appCount) + 1);\n        for (let b: number = 0; b < count; b++) {\n            let hour: number = Math.floor(Math.random() * 100) % 24;\n            let minutes: number = Math.round((Math.floor(Math.random() * 100) % 60) / 5) * 5;\n            let nCount: number = Math.floor(Math.random() * names.length);\n            let startDate: Date = new Date(new Date(a).setHours(hour, minutes));\n            let endDate: Date = new Date(startDate.getTime() + (dayCount * 2.5));\n\n            if (isWeekDaysOnly && [0, 6].indexOf(startDate.getDay()) > -1 || [0, 6].indexOf(endDate.getDay()) > -1) {\n                continue;\n            }\n\n            data.push({\n                Id: id,\n                Subject: names[nCount],\n                StartTime: startDate,\n                EndTime: endDate,\n                IsAllDay: (id % 10) ? false : true\n            });\n            id++;\n        }\n    }\n    return data;\n}\n\nconst msPerDay: number = 86400000;\nconst msPerHour: number = 3600000;\nconst currentTime: number = new Date().setMinutes(0, 0, 0);\n\nexport function getReadOnlyEventsData(): Object[] {\n    let readonlyEventsData: Object[] = [\n        {\n            Id: 1,\n            Subject: 'Project Workflow Analysis',\n            StartTime: new Date(currentTime + msPerDay * -2 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -2 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 2,\n            Subject: 'Project Requirement Planning',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * 2),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * 4),\n            IsReadonly: true\n        }, {\n            Id: 3,\n            Subject: 'Meeting with Developers',\n            StartTime: new Date(currentTime + msPerDay * -1 + msPerHour * -3),\n            EndTime: new Date(currentTime + msPerDay * -1 + msPerHour * -1),\n            IsReadonly: true\n        }, {\n            Id: 4,\n            Subject: 'Team Fun Activities',\n            StartTime: new Date(currentTime + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerHour * -2),\n            IsReadonly: true\n        }, {\n            Id: 5,\n            Subject: 'Quality Analysis',\n            StartTime: new Date(currentTime + msPerHour * 1),\n            EndTime: new Date(currentTime + msPerHour * 3),\n            IsReadonly: false\n        }, {\n            Id: 6,\n            Subject: 'Customer meeting â€“ John Mackenzie',\n            StartTime: new Date(currentTime + msPerHour * 5),\n            EndTime: new Date(currentTime + msPerHour * 6),\n            IsReadonly: false\n        }, {\n            Id: 7,\n            Subject: 'Meeting with Core team',\n            StartTime: new Date(currentTime + msPerHour * 9),\n            EndTime: new Date(currentTime + msPerHour * 10),\n            IsReadonly: false\n        }, {\n            Id: 8,\n            Subject: 'Project Review',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * 3),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * 5),\n            IsReadonly: false\n        }, {\n            Id: 9,\n            Subject: 'Project demo meeting with Andrew',\n            StartTime: new Date(currentTime + msPerDay * 1 + msPerHour * -4),\n            EndTime: new Date(currentTime + msPerDay * 1 + msPerHour * -3),\n            IsReadonly: false\n        }, {\n            Id: 10,\n            Subject: 'Online Hosting of Project',\n            StartTime: new Date(currentTime + msPerDay * 2 + msPerHour * 4),\n            EndTime: new Date(currentTime + msPerDay * 2 + msPerHour * 6),\n            IsReadonly: false\n        }\n    ];\n    return readonlyEventsData;\n}\n\nexport function getReminderEvents(): Record<string, any>[] {\n    const today: number = new Date().getTime();\n\n    let reminderEvents: Record<string, any>[] = [{\n        Id: 1,\n        Subject: 'Explosion of Betelgeuse Star',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today + 5000),\n        EndTime: new Date(today + (msPerHour * 2) + 5000),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 2,\n        Subject: 'Thule Air Crash Report',\n        Location: 'Newyork City',\n        StartTime: new Date(today - msPerDay - (msPerHour * 2)),\n        EndTime: new Date(today - msPerDay),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 3,\n        Subject: 'Milky Way as Melting pot',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today - msPerDay),\n        EndTime: new Date(today - msPerDay + (msPerHour * 2)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 4,\n        Subject: 'Blue Moon Eclipse',\n        Location: 'Space Centre USA',\n        StartTime: new Date(today + msPerDay + (msPerHour * 2)),\n        EndTime: new Date(today + msPerDay + (msPerHour * 4)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }, {\n        Id: 5,\n        Subject: 'Mysteries of Bermuda Triangle',\n        Location: 'Bermuda',\n        StartTime: new Date(today + msPerDay),\n        EndTime: new Date(today + msPerDay + (msPerHour * 2)),\n        StartTimezone: \"UTC\",\n        EndTimezone: \"UTC\"\n    }];\n    return reminderEvents;\n}\n\nexport function generateResourceData(startId: number, endId: number, text: string): Record<string, any>[] {\n    let data: Record<string, any>[] = [];\n        let colors: string[] = [\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\n        ];\n        for (let a: number = startId; a <= endId; a++) {\n            let n: number = Math.floor(Math.random() * colors.length);\n            data.push({ Id: a, Text: text + ' ' + a, Color: colors[n] });\n        }\n        return data;\n}","index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"Schedule\">\n        </div>\n    </div>\n</div>\n<style>\n    .e-schedule .e-read-only {\n        opacity: .8;\n    }\n</style>\n\n\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-buttons\": \"*\",\n  \"@syncfusion/ej2-calendars\": \"*\",\n  \"@syncfusion/ej2-data\": \"*\",\n  \"@syncfusion/ej2-dropdowns\": \"*\",\n  \"@syncfusion/ej2-excel-export\": \"*\",\n  \"@syncfusion/ej2-inputs\": \"*\",\n  \"@syncfusion/ej2-lists\": \"*\",\n  \"@syncfusion/ej2-navigations\": \"*\",\n  \"@syncfusion/ej2-popups\": \"*\",\n  \"@types/requirejs\": \"^2.1.37\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-schedule\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}\nimport {\n    Schedule, Day, Week, WorkWeek, Month, Resize, DragAndDrop, PopupOpenEventArgs, ActionEventArgs, DragEventArgs, ResizeEventArgs\n} from '@syncfusion/ej2-schedule';\nimport { getReadOnlyEventsData } from './helper';\n\nSchedule.Inject(Day, Week, WorkWeek, Month, Resize, DragAndDrop);\n\n/**\n * Schedule readonly events sample\n */\n\n\n    \n    let data: Object[] = getReadOnlyEventsData();\n    let scheduleObj: Schedule = new Schedule({\n        width: '100%',\n        height: '650px',\n        eventSettings: { dataSource: data },\n        views: ['Day', 'Week', 'WorkWeek', 'Month'],\n        popupOpen: onPopupOpen,\n        dragStop: onDragStop,\n        resizeStop: onResizeStop,\n        actionBegin: onActionBegin\n    });\n    scheduleObj.appendTo('#Schedule');\n\n    function onDragStop(args: DragEventArgs): void {\n        args.cancel = onEventCheck(args);\n    }\n\n    function onResizeStop(args: ResizeEventArgs): void {\n        args.cancel = onEventCheck(args);\n    }\n\n    function onActionBegin(args: ActionEventArgs): void {\n        if ((args.requestType === 'eventCreate') || args.requestType === 'eventChange') {\n            args.cancel = onEventCheck(args);\n        }\n    }\n\n    function onPopupOpen(args: PopupOpenEventArgs): void {\n        if ((args.target && !args.target.classList.contains('e-appointment') && (args.type === 'QuickInfo')) || (args.type === 'Editor')) {\n            args.cancel = onEventCheck(args);\n        }\n    }\n\n    function onEventCheck(args: any): boolean {\n        let eventObj: any = args.data instanceof Array ? args.data[0] : args.data;\n        return (eventObj.StartTime < new Date());\n    }\n\n"}