{
    "name": "Scheduler",
    "directory": "schedule",
    "category": "Calendars",
    "type": "update",
    "ftName": "scheduler",
    "samples": [
        {
            "url": "overview",
            "name": "Overview",
            "category": "Scheduler",
            "description": "This demo shows for Javascript Scheduler features such as Multiple views, Templates, Resources, Grouping, Timezone, Timescale, etc...",
            "api": {
                "Schedule": [
                    "cssClass",
                    "Views",
                    "timezone",
                    "group",
                    "resources",
                    "dateHeaderTemplate",
                    "eventSettings",
                    "selectedDate",
                    "timeScale",
                    "firstDayOfWeek",
                    "rowAutoHeight",
                    "enableTooltip"
                ]
            }
        },
        {
            "url": "default",
            "name": "Default Functionalities",
            "category": "Scheduler",
            "description": "This demo shows how the Scheduler control functionalities work with the default set of minimal configurations in a JavaScript application.",
            "api": {
                "Schedule": [
                    "height",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "event-calendar",
            "name": "Event Calendar",
            "category": "Product Use Case",
            "description": "This demo shows the way to organize and filter multiple types of events such as Personal, Birthdays, Work, and Holidays in the scheduler.",
            "api": {
                "Schedule": [
                    "eventSettings",
                    "height",
                    "resources",
                    "selectedDate",
                    "showHeaderBar",
                    "actionComplete",
                    "created"
                ]
            }
        },
        {
            "url": "holiday-calendar",
            "name": "Holiday Calendar",
            "category": "Product Use Case",
            "description": "This demo illustrates how to add and remove holiday events and perform CRUD operations on holiday dates in the scheduler.",
            "api": {
                "Schedule": [
                    "actionBegin",
                    "height",
                    "width",
                    "eventSettings",
                    "selectedDate",
                    "cellClick",
                    "cellDoubleClick",
                    "eventRendered",
                    "dragStop",
                    "resizeStop"
                ]
            }
        },
        {
            "url": "local-data",
            "name": "Local Data",
            "category": "Data Binding",
            "description": "This demo shows how to populate appointments in the JavaScript Scheduler through local data sources like JSON data types with the proper date format.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "eventSettings",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "remote-data",
            "name": "Remote Data",
            "category": "Data Binding",
            "description": "This demo shows how to populate appointments or events in the JS Scheduler through remote data sources such as web services, web API, URL, and OData.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "currentView",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "calendar-integration",
            "name": "Sync Google Calendar",
            "category": "Data Binding",
            "description": "This example shows how to synchronously work with JavaScript Scheduler and Google Calendar by converting Scheduler events to the required format.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "eventSettings",
                    "dataBinding"
                ]
            }
        },
        {
            "url": "realtime-binding",
            "name": "Real-Time Binding",
            "category": "Data Binding",
            "description": "This demo showcases the way of binding signalR services to Scheduler component. Here, the SignalR is used to bind the data with Scheduler.",
            "api": {
                "Schedule": [
                    "height",
                    "selectedDate",
                    "eventSettings",
                    "dataBinding",
                    "created",
                    "navigating",
                    "actionComplete"
                ]
            }
        },
        {
            "url": "recurrence-events",
            "name": "Recurring Events",
            "category": "Appointments",
            "description": "This demo shows how to define recurring events (appointments) with different patterns and rules that meet iCalendar specifications in the JS Scheduler.",
            "api": {
                "Schedule": [
                    "views",
                    "selectedDate",
                    "eventSettings",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "block-events",
            "name": "Blocking Dates and Time",
            "category": "Appointments",
            "description": "This example shows how to block specific days or time intervals on the JS Scheduler that helps to mark unavailable time or days in Calendar.",
            "api": {
                "Schedule": [
                    "currentView",
                    "Views",
                    "resourceHeaderTemplate",
                    "group",
                    "resources",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "search-events",
            "name": "Search Events",
            "category": "Appointments",
            "description": "This example shows how to filter the appointments or events of the JS Scheduler based on a search string in a particular field or all fields.",
            "api": {
                "Schedule": [
                    "currentView",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "timezone",
            "name": "Timezone",
            "category": "Appointments",
            "description": "This demo shows how the JavaScript Scheduler works with different time zones. The events in the Scheduler automatically adapt to the selected time zone.",
            "api": {
                "Schedule": [
                    "timezone",
                    "workHours",
                    "selectedDate",
                    "eventSettings",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "inline-editing",
            "name": "Inline Editing",
            "category": "Appointments",
            "description": "The example showcases the inline mode of the JS Scheduler that is used to create an appointment or edit an existing appointment's subject easily and quickly.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "Views",
                    "currentView",
                    "eventSettings",
                    "allowInline",
                    "workDays",
                    "group",
                    "resources"
                ]
            }
        },
        {
            "url": "overlap-events",
            "name": "Conflict Free Event",
            "category": "Appointments",
            "type": "new",
            "description": "This demo explains how to restrict overlapping appointments within the same time range.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "selectedDate",
                    "eventSettings",
                    "allowOverlap"
                ]
            }
        },
        {
            "url": "external-drag-drop",
            "name": "External Drag and Drop",
            "category": "Drag and Drop",
            "description": "This demo shows the ability to drag and drop appointments from an external source (such as the DataGrid, ListView, etc.)  into the JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "currentView",
                    "eventSettings",
                    "resourceHeaderTemplate",
                    "cssClass",
                    "workHours",
                    "views",
                    "group",
                    "resources",
                    "actionBegin",
                    "drag"
                
                ]
            }
        },
        {
            "url": "multi-drag",
            "name": "Multiple Events Drag",
            "category": "Drag and Drop",
            "description": "This demo explains you about the ability to select multiple appointments and drag them simultaneously.",
            "api": {
                "Schedule": [
                    "allowMultiDrag",
                    "showQuickInfo",
                    "currentView",
                    "views",
                    "group",
                    "resources",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "schedule-to-schedule-drag-drop",
            "name": "Multiple Schedulers",
            "category": "Drag and Drop",
            "description": "This example illustrates how to drag and drop events among multiple Scheduler. You can drag events from one Scheduler to another.",
            "api": {
                "Schedule": [
                    "views",
                    "resources",
                    "eventSettings",
                    "dragStop",
                    "dragStart"
                ]
            }
        },
        {
            "url": "grid-to-schedule",
            "name": "Drag Events From DataGrid",
            "category": "Drag and Drop",
            "description": "This example illustrates how to drag and drop events between the DataGrid and the Scheduler.",
            "api": {
                "Schedule": [
                    "views",
                    "resources",
                    "eventSettings",
                    "dragStop",
                    "dataBound"
                ],
                "Grid": [
                    "allowRowDragAndDrop",
                    "rowDrop",
                    "rowDropSettings",
                    "columns",
                    "dataBound"
                ]
            }
        },
        {
            "url": "virtual-scrolling",
            "name": "Virtual Scrolling ",
            "category": "Scrolling",
            "hideOnDevice": true,
            "description": "This example illustrates how to achieve high performance in the JavaScript Scheduler using virtual scrolling to load resources and events on demand.",
            "api": {
                "Schedule": [
                    "views",
                    "group",
                    "resources",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "data-virtualization",
            "name": "Data Virtualization",
            "category": "Scrolling",
            "hideOnDevice": true,
            "description": "This example illustrates how to load events on demand in JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "views",
                    "group",
                    "resources",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "views",
            "name": "Basic Views",
            "category": "Views",
            "description": "This example demonstrates the basic views (day, week, workweek, and month) of the JavaScript Scheduler control with their default configurations.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "views",
                    "selectedDate",
                    "eventSettings",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "timeline",
            "name": "Timeline Views",
            "category": "Views",
            "description": "This example presents timeline views (day, week, workweek, and month) of the JavaScript Scheduler with their default configurations.",
            "api": {
                "Schedule": [
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "currentView",
                    "workDays",
                    "views"
                ]
            }
        },
        {
            "url": "agenda",
            "name": "Agenda View",
            "category": "Views",
            "description": "This demo shows the agenda view of the JS Schedule that displays events as a list with virtual scrolling, with a number of initially loaded days.",
            "api": {
                "Schedule": [
                    "agendaDaysCount",
                    "hideEmptyAgendaDays",
                    "currentView",
                    "views",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "month-agenda",
            "name": "Month Agenda View",
            "category": "Views",
            "description": "This demo presents the JavaScript Scheduler month-agenda view, which follows the month-view layout while displaying events for a selected date.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "views",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "year",
            "name": "Year View",
            "category": "Views",
            "description": "The example showcases the year view and Timeline year view of the JavaScript Scheduler. The views are helpful to view the events in an annual calendar view.",
            "api": {
                "Schedule": [
                    "cssClass",
                    "views",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "custom-month-view",
            "name": "Custom Month View",
            "category": "Views",
            "description": "This example showcases how to customize the starting week, number of weeks, and number of events displayed in a single row in the JS Scheduler month view.",
            "api": {
                "Schedule": [
                    "height",
                    "eventSettings",
                    "Views"
                ]
            }
        },
        {
            "url": "views-configuration",
            "name": "Individual View Settings",
            "category": "Views",
            "description": "This demo shows how to configure different settings for each view in the JS Scheduler, like applying event templates to the month view alone.",
            "api": {
                "Schedule": [
                    "currentView",
                    "views",
                    "selectedDate",
                    "eventSettings",
                    "resources"
                ]
            }
        },
        {
            "url": "extended-views",
            "name": "View Intervals",
            "category": "Views",
            "description": "This demo shows how to design own custom views like 3 days, 2 weeks, 4 months apart from the default day, work week, month in JS Event Scheduler.",
            "api": {
                "Schedule": [
                    "currentView",
                    "views",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "timeline-resources",
            "name": "Room Scheduler",
            "category": "Multiple Resources",
            "description": "This demo shows how to design a meeting room calendar, conference room calendar, and cabin room manager using our JavaScript event calendar control.",
            "api": {
                "Schedule": [
                    "cssClass",
                    "currentView",
                    "views",
                    "selectedDate",
                    "resourceHeaderTemplate",
                    "eventSettings",
                    "workHours",
                    "timeScale",
                    "group",
                    "resources",
                    "popupOpen",
                    "renderCell",
                    "eventRendered",
                    "actionBegin"
                ]
            }
        },
        {
            "url": "resources",
            "name": "Fare Calendar",
            "category": "Multiple Resources",
            "description": "This demo is a real-time airfare calendar showcase application with flight and airfare details using the JavaScript Scheduler control.",
            "api": {
                "Schedule": [
                    "views",
                    "currentView",
                    "selectedDate",
                    "eventSettings",
                    "resources",
                    "eventSettings",
                    "actionBegin",
                    "dataBinding",
                    "dataBound",
                    "popupOpen"
                ]
            }
        },
        {
            "url": "resource",
            "name": "Resources",
            "category": "Multiple Resources",
            "description": "This JavaScript Scheduler control example depicts how to show or hide appointments or events based on selected resources among multiple resources.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "currentView",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "group-editing",
            "name": "Shared Events",
            "category": "Multiple Resources",
            "description": "This demo presents event (appointment) sharing, which enables a single event to be shared by multiple resources in the JS Scheduler event calendar.",
            "api": {
                "Schedule": [
                    "currentView",
                    "selectedDate",
                    "resourceHeaderTemplate",
                    "group",
                    "Views",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "group-custom-work-days",
            "name": "Different Work Days",
            "category": "Multiple Resources",
            "description": "This demo shows how to set different workdays for each resource in a group to build a doctor availability application in the JS event calendar.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "selectedDate",
                    "currentView",
                    "resourceHeaderTemplate",
                    "group",
                    "resources",
                    "eventSettings",
                    "Views",
                    "actionBegin",
                    "popupOpen",
                    "renderCell"
                ]
            }
        },
        {
            "url": "add-remove-resources",
            "name": "Show/Hide Resources",
            "category": "Multiple Resources",
            "description": "This demo shows how to dynamically add or remove resources from the JavaScript Scheduler layout along with their appointments (events).",
            "api": {
                "Schedule": [
                    "currentView",
                    "views",
                    "group",
                    "selectedDate",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "adaptive-rows",
            "name": "Row Auto Height",
            "category": "Multiple Resources",
            "description": "This demo shows how the work cells of the JS Scheduler adjust their height automatically based on the number of events present in those time ranges.",
            "api": {
                "Schedule": [
                    "rowAutoHeight",
                    "currentView",
                    "views",
                    "group",
                    "selectedDate",
                    "eventSettings",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "resource-grouping",
            "name": "Horizontal Grouping",
            "category": "Resource Grouping",
            "description": "This demo shows how to group multiple resources (e.g., airlines) in the JS Scheduler. The resource header can be customized using a template.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "Views",
                    "resourceHeaderTemplate",
                    "group",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "timeline-resource-grouping",
            "name": "Timeline Grouping",
            "category": "Resource Grouping",
            "description": "This demo shows how to group multiple resources with timeline views in the JS Schedule and how to display resources with expanded and collapsed headers.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "Views",
                    "currentView",
                    "workDays",
                    "group",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "group-by-date",
            "name": "Date-wise Grouping  ",
            "category": "Resource Grouping",
            "description": "This demo shows how to group multiple resources by date in the JS Scheduler. The resource row is rendered under each date in the header.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "selectedDate",
                    "group",
                    "resources",
                    "views",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "group-by-child",
            "name": "Hierarchical Grouping ",
            "category": "Resource Grouping",
            "description": "This demo shows how to group resources in a hierarchical structure for parent-child resources in the JavaScript Scheduler control.",
            "api": {
                "Schedule": [
                    "currentView",
                    "selectedDate",
                    "startHour",
                    "endHour",
                    "group",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "adaptive-grouping",
            "name": "Adaptive Grouping",
            "category": "Resource Grouping",
            "description": "This demo shows how to change the mode of the Schedule to Adaptive mode in the JavaScript Scheduler control.",
            "api": {
                "Schedule": [
                    "view",
                    "currentView",
                    "selectedDate",
                    "enableAdaptiveUI",
                    "group",
                    "resources",
                    "eventSettings"
                ]
            }
        },
        {
            "url": "cell-template",
            "name": "Cell",
            "category": "Templates",
            "description": "This demo shows how to customize the default appearance of work cells with images, links, and coloring styles using cell templates in the JS Scheduler.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "cellTemplate",
                    "views",
                    "eventSettings",
                    "currentView",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "date-header-template",
            "name": "Date Header",
            "category": "Templates",
            "description": "This demo shows how to customize the default appearance of date header cells with images and links using the template option in the JS Scheduler.",
            "api": {
                "Schedule": [
                    "cssClass",
                    "dateHeaderTemplate",
                    "views",
                    "selectedDate",
                    "eventSettings",
                    "eventRendered",
                    "renderCell"
                ]
            }
        },
        {
            "url": "event-template",
            "name": "Events",
            "category": "Templates",
            "description": "This demo shows how to customize the look and feel of appointments (events) in the JS Scheduler with images and links by using an event template.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "cellTemplate",
                    "startHour",
                    "endHour",
                    "workHours",
                    "views",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "tooltip",
            "name": "Tooltip",
            "category": "Templates",
            "description": "This demo shows how to enable tooltips (popovers) in JavaScript Scheduler appointments (events) and customize them using a tooltip template.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "quick-info-template",
            "name": "Quick Info Template",
            "category": "Templates",
            "description": "The example showcases the customized quick info popups for cells and events using the templates that help to override the built-in style in the JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "resources",
                    "eventRendered",
                    "popupOpen"
                ]
            }
        },
        {
            "url": "editor-validation",
            "name": "Field Validation",
            "category": "Editor Window",
            "description": "This demo covers the Appointment field validation that adds default and custom validation rules to the editor fields of the JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "editor-custom-field",
            "name": "Additional Fields",
            "category": "Editor Window",
            "description": "This demo shows how to customize appointment editor (event window) with additional fields using pop-up open events in the JavaScript event calendar.",
            "api": {
                "Schedule": [
                    "selectedDate",
                    "eventSettings",
                    "eventRendered",
                    "popupOpen"
                ]
            }
        },
        {
            "url": "editor-template",
            "name": "Editor Template",
            "category": "Editor Window",
            "description": "This demo shows how to design custom appointment (event) editor windows by adding or removing fields from the JavaScript Scheduler appointment window.",
            "api": {
                "Schedule": [
                    "Views",
                    "editorTemplate",
                    "showQuickInfo",
                    "eventRendered",
                    "popupOpen",
                    "actionBegin",
                    "editorTemplate"
                ]
            }
        },
        {
            "url": "header-rows",
            "name": "Header Rows",
            "category": "Customization",
            "description": "This demo shows how to include additional header rows like week number and month number on the timeline view in the JS event calendar.",
            "api": {
                "Schedule": [
                    "eventSettings",
                    "selectedDate",
                    "headerRows",
                    "Views"
                ]
            }
        },
        {
            "url": "time-scale",
            "name": "Timescale",
            "category": "Customization",
            "description": "This demo shows how to customize the default timescale with interval, show/hide gridlines, slots count, and template in JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "height",
                    "width",
                    "views",
                    "timeScale"
                ]
            }
        },
        {
            "url": "context-menu",
            "name": "Context Menu",
            "category": "Customization",
            "description": "This example shows how to integrate the context menu within the JavaScript Scheduler and control the related functionalities using menu options.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "header-bar",
            "name": "Header Bar",
            "category": "Customization",
            "description": "This demo shows how to use templating to customize the header bar of the JavaScript Scheduler with images, links, styles, and other UI controls.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "workHours",
                    "views",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "scroll-to",
            "name": "Scroll Time",
            "category": "Customization",
            "description": "This example demonstrates how to scroll to a specific time programmatically based on the selected time in the JavaScript Scheduler control.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "eventRendered",
                    "scrollTo"
                ]
            }
        },
        {
            "url": "work-days",
            "name": "Work Days",
            "category": "Customization",
            "description": "This demo shows how to customize the workdays and the first day of the week to fit different work schedules in the JavaScript Scheduler.",
            "api": {
                "Schedule": [
                    "workDays",
                    "views",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "hide-weekend",
            "name": "Hide Non-Working Days",
            "category": "Customization",
            "description": "This demo shows how to show or hide weekend days in the JS Scheduler, which is similar to the workweek view, but with customizable workdays.",
            "api": {
                "Schedule": [
                    "showWeekend"
                ]
            }
        },
        {
            "url": "work-hour",
            "name": "Work Hours",
            "category": "Customization",
            "description": "This demo shows how to customize the work hour range on the JS Scheduler calendar, allowing business hours other than 9 AM to 6 PM.",
            "api": {
                "Schedule": [
                    "workHours",
                    "views",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "start-end-hour",
            "name": "Day Hour Limit",
            "category": "Customization",
            "description": "This demo shows how to limit the start and end hours in the JS Scheduler which is applicable for all views and used here to render business hours only.",
            "api": {
                "Schedule": [
                    "startHour",
                    "endHour",
                    "workHours",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "cell-dimension",
            "name": "Cell Dimension",
            "category": "Customization",
            "description": "This demo shows how to change the default width and height of work cells, allowing the JS Scheduler to be viewable zoomed in or zoomed out.",
            "api": {
                "Schedule": [
                    "cssClass",
                    "showTimeIndicator",
                    "eventRendered",
                    "created",
                    "actionComplete"
                ]
            }
        },
        {
            "url": "read-only-events",
            "name": "Read-only Events",
            "category": "Customization",
            "description": "This demo shows how to make specific events in the JavaScript Scheduler read-only, making them viewable but not editable by end users.",
            "api": {
                "Schedule": [
                    "eventSettings",
                    "eventRendered",
                    "eventClick",
                    "popupOpen",
                    "eventRendered"
                ]
            }
        },
        {
            "url": "reminder",
            "name": "Reminder",
            "category": "Customization",
            "description": "This demo showcases an event reminder notification that will be displayed after 5 seconds of sample getting loaded.",
            "api": {
                "Schedule": [
                    "eventSettings",
                    "created"
                ]
            }
        },
        {
            "url": "excel-export",
            "name": "Excel Exporting",
            "category": "Exporting",
            "hideOnDevice": false,
            "description": "This example demonstrates how to export JavaScript Scheduler events (appointments) to the Microsoft Excel file format on the client side.",
            "api": {
                "Schedule": [
                    "height",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "calendar-export-import",
            "name": "Export and Import ICS",
            "category": "Exporting",
            "description": "This demo shows how to handle exporting to ICS and importing from ICS in the JS Scheduler. The ICS file must come from Google Calendar or MS Outlook.",
            "api": {
                "Schedule": [
                    "importICalendar",
                    "exportToICalendar"
                ]
            }
        },
        {
            "url": "print",
            "name": "Print",
            "category": "Exporting",
            "hideOnDevice": false,
            "description": "This sample demonstrates how to print all the appointments (events) in the JavaScript Scheduler on the client side using the Print Library.",
            "api": {
                "Schedule": [
                    "height",
                    "eventSettings",
                    "selectedDate"
                ]
            }
        },
        {
            "url": "recurrence-editor-generate-rule",
            "name": "Rule Generator",
            "category": "Recurrence Editor",
            "description": "This demo showcases how to generate various recurrence pattern rules, such as daily, weekly, monthly, and yearly, using the Recurrence Editor."
        },
        {
            "url": "recurrence-editor-populate-rule",
            "name": "Populate Rule",
            "category": "Recurrence Editor",
            "description": "This demo shows how to populate a predefined set of recurrence rules in the Recurrence Editor fields to help users create recurring events."
        },
        {
            "url": "clipboard",
            "name": "Clipboard",
            "category": "Miscellaneous",
            "description": "This demo showcases clipboard operations (cut, copy, and paste) with Scheduler events, along with a context menu for additional actions.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "allowKeyboardInteraction",
                    "allowClipboard"
                ]
            }
        },
        {
            "url": "keyboard-interaction",
            "name": "Keyboard Interaction",
            "category": "Miscellaneous",
            "hideOnDevice": true,
            "description": "This demo showcases all the available keyboard shortcuts that help users perform actions using only the keyboard in the JavaScript Scheduler control.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "selectedDate",
                    "allowKeyboardInteraction"
                ]
            }
        },
        {
            "url": "events",
            "name": "Events",
            "category": "Miscellaneous",
            "description": "This demo lists the client-side events triggered on JavaScript Scheduler actions in the Event Tracer. The Event Tracer also includes a Clear option.",
            "api": {
                "Schedule": [
                    "width",
                    "height",
                    "eventSettings",
                    "eventRendered",
                    "created",
                    "actionBegin",
                    "actionComplete",
                    "actionFailure",
                    "cellClick",
                    "cellDoubleClick",
                    "destroyed",
                    "navigating",
                    "eventClick",
                    "popupOpen"
                ]
            }
        }
    ]
}
