{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div class=\"row\">\n            <div class=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\" style=\"display: flex;justify-content: center; align-items: center;\">\n                <div style=\"margin: auto;padding: 10px;\">\n                    <table role=\"none\">\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <div id=\"horizontal\" style=\"padding:6px;cursor:pointer;width:86px;color:black;font-size:15px;border:1px solid #0074E3;background-color:white;text-align:center\">\n                                        Horizontal</div>\n                                </td>\n                                <td>\n                                    <div id=\"vertical\" style=\"padding:6px;cursor:pointer;width:86px;color:white;font-size:15px;border:1px solid #0074E3;background-color: #0074E3;text-align:center\">\n                                        Vertical</div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <pre style=\"background-color: inherit; border:hidden\"></pre>\n        <div id=\"containerBox\"> </div>\n        <div id=\"container1\" class=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style=\"display: flex; justify-content: center; align-items: center;\">\n            <div id=\"gauge1\"></div>\n        </div>\n    \n        <div id=\"container2\" class=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style=\"display: flex;justify-content: center; align-items: center;\">\n            <div id=\"gauge2\">\n            </div>\n        </div>\n    \n        <div id=\"container3\" class=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style=\"display: flex;justify-content: center; align-items: center;\">\n            <div id=\"gauge3\"></div>\n        </div>\n    \n        <div id=\"container4\" class=\"col-xs-5 col-sm-5 col-lg-3 col-md-3\" style=\"display: flex;justify-content: center; align-items: center;\">\n            <div id=\"gauge4\"></div>\n        </div>\n    </div>\n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-lineargauge\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { LinearGauge, ILoadEventArgs, LinearGaugeTheme, IAxisLabelRenderEventArgs } from '@syncfusion/ej2-lineargauge';\n// custom code start\n\n\n// custom code end\n\n    document.getElementById('horizontal').onclick = (e: Event) => {\n        document.getElementById('container1').className = document.getElementById('container2').className =\n        document.getElementById('container3').className = document.getElementById('container4').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n        gauge1.width = gauge2.width = gauge3.width = gauge4.width = '450px';\n        gauge1.height = gauge2.height = gauge3.height = gauge4.height = '150px';\n        gauge1.orientation = gauge2.orientation = gauge3.orientation = gauge4.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n        }\n    };\n    document.getElementById('vertical').onclick = (e: Event) => {\n        document.getElementById('container1').className = document.getElementById('container2').className =\n        document.getElementById('container3').className = document.getElementById('container4').className = \"col-xs-5 col-sm-5 col-lg-3 col-md-3\";\n        gauge1.width = gauge2.width = gauge3.width = gauge4.width = '200px';\n        gauge1.height = gauge2.height = gauge3.height = gauge4.height = '350px';\n        gauge1.orientation = gauge2.orientation = gauge3.orientation = gauge4.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n        }\n    };\n\n    let gauge1: LinearGauge = new LinearGauge({\n        title: 'Custom labels',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        width:'150px',\n        height:'350px',\n        background:'transparent',\n        animationDuration: 1500,\n        axes: [{\n            line: {\n                width: 5\n            },\n            pointers: [{\n                width: 0,\n            }],\n            majorTicks: {\n                interval: 5, height: 7, width: 1\n            },\n            minorTicks: {\n                interval: 2.5, height: 3\n            },\n            minimum: 5,\n            maximum: 20,\n            opposedPosition: true,\n            labelStyle: { format: '${value}', font: { fontFamily: 'inherit' } }\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    gauge1.appendTo('#gauge1');\n\n    let gauge2: LinearGauge = new LinearGauge({\n        axisLabelRender(args: IAxisLabelRenderEventArgs): void {\n            if (args.text == \"20\")\n                args.text = \"Ordered\";\n            else if (args.text == \"15\")\n                args.text = \"Packed\";\n            else if (args.text == \"10\")\n                args.text = \"Shipped\";\n            else if (args.text == \"5\")\n                args.text = \"Delivered\";\n            else\n                args.text = \" \";\n        },\n        title: 'Text labels',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        background:'transparent',\n        width:'150px',\n        height:'350px',\n        axes: [{\n            line: {\n                width: 5\n            },\n            pointers: [{\n                width: 15,\n                height: 15,\n                value: 20,\n                color: '#0DC9AB',\n                placement: 'Near',\n                markerType: 'Circle',\n                offset: 7\n            }, {\n                width: 15,\n                height: 15,\n                value: 15,\n                color: '#0DC9AB',\n                placement: 'Near',\n                markerType: 'Circle',\n                offset: 7\n            },\n            {\n                width: 15,\n                height: 15,\n                value: 10,\n                color: '#0DC9AB',\n                placement: 'Near',\n                markerType: 'Circle',\n                offset: 7\n            },\n            {\n                width: 15,\n                height: 15,\n                value: 5,\n                color: '#E5E7EB',\n                placement: 'Near',\n                markerType: 'Circle',\n                offset: 7\n            }\n            ],\n            ranges: [{\n                start: 10,\n                end: 15,\n                startWidth: 5,\n                endWidth: 5,\n                color: '#0DC9AB'\n            },\n            {\n                start: 15,\n                end: 20,\n                startWidth: 5,\n                endWidth: 5,\n                color: '#0DC9AB'\n            }\n            ],\n            majorTicks: {\n                interval: 5, height: 0\n            },\n            minorTicks: {\n                interval: 2.5, height: 0\n            },\n            minimum: 5,\n            maximum: 20,\n            opposedPosition: true,\n            labelStyle: { offset: 10, font: { fontFamily: 'inherit' } }\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            if (args.gauge.theme === \"Fluent2Dark\" || args.gauge.theme === 'Fluent2HighContrast') {\n                (args.gauge.axes[0].pointers as any)[3].color = \"#292827\"; \n            } else if (args.gauge.theme === 'Bootstrap5Dark') {\n                args.gauge.axes[0].pointers[3].color = '#343A40';\n            } else if (args.gauge.theme === 'Tailwind3Dark') {\n                args.gauge.axes[0].pointers[3].color = '#282F3C';\n            } else if (args.gauge.theme === 'Material3') {\n                args.gauge.axes[0].pointers[3].color = '#C4C7C5';\n            } else if (args.gauge.theme === 'Material3Dark') {\n                args.gauge.axes[0].pointers[3].color = '#938F99';\n            }\n            // custom code end\n        }\n    });\n    gauge2.appendTo('#gauge2');\n\n    let gauge3: LinearGauge = new LinearGauge({\n        title: 'Label offset',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        background:'transparent',\n        animationDuration: 1500,\n        width:'150px',\n        height:'350px',\n        axes: [{\n            line: {\n                width: 5\n            },\n            pointers: [\n                {\n                    width: 0,\n                }\n            ],\n            minimum: 0,\n            maximum: 100,\n            opposedPosition: true,\n            majorTicks: {\n                interval: 20, height: 7, width: 1\n            },\n            minorTicks: {\n                interval: 10, height: 3\n            },\n            labelStyle: { offset: 5, font: { fontFamily: 'inherit' } }\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    gauge3.appendTo('#gauge3');\n\n    let gauge4: LinearGauge = new LinearGauge({\n        title: 'Label customization',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        background:'transparent',\n        animationDuration: 1500,\n        width:'150px',\n        height:'350px',\n        axes: [{\n            line: {\n                width: 5\n            },\n            majorTicks: {\n                interval: 20,\n                height: 7,\n                width: 1\n            },\n            minorTicks: {\n                interval: 10,\n                height: 3\n            },\n            labelStyle: {\n                font: { fontFamily: 'inherit', color: '#F93106' }\n            },\n            pointers: [\n                {\n                    width: 0\n                }\n            ],\n            minimum: 0,\n            maximum: 100,\n            opposedPosition: true\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    gauge4.appendTo('#gauge4');\n"}