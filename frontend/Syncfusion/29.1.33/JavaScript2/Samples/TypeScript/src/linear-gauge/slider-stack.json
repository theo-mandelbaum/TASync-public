{"index.html":"<html><head><link href=\"https://cdn.syncfusion.com/ej2/28.1.33/{{theme}}.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<main>\n    <div class=\"control-section\">\n        <div style=\"justify-content: center; display: flex; align-items: center;\">\n            <div id=\"containerEnable\" style=\"height:150px; width: 450px;\">\n            </div>\n        </div>\n        <div style=\"justify-content: center; display: flex; align-items: center;\">\n            <div id=\"containerDisable\" style=\"height:150px; width: 450px;\">\n            </div>\n        </div>\n    </div>\n    \n    \n    \n</main>\n</div></body></html>","package.json":"{\n  \"@syncfusion/ej2-base\": \"*\",\n  \"@syncfusion/ej2-pdf-export\": \"*\",\n  \"@syncfusion/ej2-svg-base\": \"*\",\n  \"markdown-spellcheck\": \"^1.3.1\",\n  \"@syncfusion/ej2-lineargauge\": \"*\",\n  \"@types/crossroads\": \"0.0.28\",\n  \"@types/signals\": \"0.0.16\",\n  \"@types/moment-timezone\": \"^0.5.3\",\n  \"@types/hasher\": \"0.0.27\",\n  \"fuse.js\": \"^3.2.0\",\n  \"marked\": \"5.1.2\",\n  \"codemirror\": \"^5.37.0\",\n  \"crossroads\": \"^0.12.2\",\n  \"@types/marked\": \"5.0.1\",\n  \"@types/codemirror\": \"0.0.56\",\n  \"@types/es6-promise\": \"0.0.28\",\n  \"hasher\": \"^1.2.0\",\n  \"moment-timezone\": \"^0.5.14\"\n}","index.ts":"{{ripple}}import { LinearGauge, ILoadEventArgs, LinearGaugeTheme, GaugeTooltip, IPointerDragEventArgs } from '@syncfusion/ej2-lineargauge';\nLinearGauge.Inject(GaugeTooltip);\n// custom code start\n\n\n// custom code end\n\n    let gauge1: LinearGauge = new LinearGauge({     \n        title: 'Enabled',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        background:'transparent',\n        format: 'N0',\n        orientation: 'Horizontal',\n        tooltip: {\n            enable: true,\n            showAtMousePosition: true,\n            textStyle: { fontFamily: \"inherit\" },\n        },\n        axes: [{\n            minimum: 0,\n            maximum: 100,\n            opposedPosition: true,\n            line: {\n                width: 5,\n                color: '#C2DEF8'\n            },\n            pointers: [{\n                    value: 50,\n                    height: 5,\n                    width: 5,\n                    placement: 'Center',\n                    color: '#0074E3',\n                    type: 'Bar',\n                    offset: 12\n                },\n                {\n                value: 50,\n                height: 15,\n                width: 15,\n                placement: 'Center',\n                color: '#0074E3',\n                offset: -10,\n                markerType: 'Circle',\n                enableDrag: true\n            }],\n            majorTicks: {\n                interval: 20, height: 0\n            },\n            minorTicks: {\n                interval: 10, height: 0\n            },\n            labelStyle: {\n                offset: 10,\n                font: { fontFamily: 'inherit' }\n            }\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        },\n        dragMove(args: IPointerDragEventArgs): void {\n            gauge1.setPointerValue(0, 0, args.currentValue);\n        }\n    });\n    gauge1.appendTo('#containerEnable');\n\n    let gauge2: LinearGauge = new LinearGauge({\n        title: 'Disabled',\n        titleStyle: {\n            fontFamily: \"inherit\",\n            fontWeight: '499'\n        },\n        background:'transparent',  \n        orientation: 'Horizontal',\n        axes: [{\n            minimum: 0,\n            maximum: 100,\n            opposedPosition: true,\n            line: {\n                width: 5,\n                color: '#E0E0E0'\n            },\n            pointers: [\n                {\n                    value: 50,\n                    height: 5,\n                    width: 5,\n                    placement: 'Center',\n                    color: '#ADADAD',\n                    type: 'Bar',\n                    offset: 12,\n                    enableDrag: false\n                },\n                {\n                    value: 50,\n                    height: 15,\n                    width: 15,\n                    placement: 'Center',\n                    color: '#ADADAD',\n                    offset: -10,\n                    markerType: 'Circle',\n                    enableDrag: false\n                },\n            ],\n            majorTicks: {\n                interval: 20, height: 0\n            },\n            minorTicks: {\n                interval: 10, height: 0\n            },\n            labelStyle: {\n                offset: 10,\n                font: { fontFamily: 'inherit' }\n            }\n        }],\n        load: (args: ILoadEventArgs) => {\n            // custom code start\n            let selectedTheme: string = location.hash.split('/')[1];\n            selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/-high/i, 'High').replace(/contrast/i, 'Contrast').replace(/5.3/i, '5');\n            // custom code end\n        }\n    });\n    gauge2.appendTo('#containerDisable');\n"}